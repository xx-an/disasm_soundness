
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/od
        UUID: 1CF83DB5-D215-3E18-FF67-1D9D3089465C
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xee18[ (60952 bytes)
        ; File offset : [0; 60952[ (60952 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x70 ; 'p'
0000000000000019         db  0x2d ; '-'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xf8 ; '.'
0000000000000029         db  0xbb ; '.'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x18 ; '.'
00000000000000d1         db  0xee ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x18 ; '.'
00000000000000d9         db  0xee ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xd0 ; '.'
00000000000000f1         db  0xf9 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xd0 ; '.'
00000000000000f9         db  0xf9 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xd0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xf9 ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'                                         ; DATA XREF=main+402
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xd0 ; '.'
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xa8 ; '.'
0000000000000111         db  0x09 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0xf8 ; '.'
0000000000000129         db  0xfb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0xf8 ; '.'
0000000000000131         db  0xfb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0xf8 ; '.'
0000000000000139         db  0xfb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xdc ; '.'
0000000000000199         db  0xd4 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xdc ; '.'
00000000000001a1         db  0xd4 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xdc ; '.'
00000000000001a9         db  0xd4 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xa4 ; '.'
00000000000001b1         db  0x03 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xa4 ; '.'
00000000000001b9         db  0x03 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=skip+121, xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xd0 ; '.'
0000000000000209         db  0xf9 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xd0 ; '.'
0000000000000211         db  0xf9 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xd0 ; '.'
0000000000000219         db  0xf9 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x30 ; '0'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x30 ; '0'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x1c ; '.'
0000000000000285         db  0xf8 ; '.'
0000000000000286         db  0x3d ; '='                                         ; DATA XREF=sub_3dfe+1140
0000000000000287         db  0xb5 ; '.'
0000000000000288         db  0xd2 ; '.'
0000000000000289         db  0x15 ; '.'
000000000000028a         db  0x3e ; '>'
000000000000028b         db  0x18 ; '.'
000000000000028c         db  0xff ; '.'
000000000000028d         db  0x67 ; 'g'
000000000000028e         db  0x1d ; '.'
000000000000028f         db  0x9d ; '.'
0000000000000290         db  0x30 ; '0'
0000000000000291         db  0x89 ; '.'
0000000000000292         db  0x46 ; 'F'
0000000000000293         db  0x5c ; '\'
0000000000000294         db  0xa4 ; '.'
0000000000000295         db  0x05 ; '.'
0000000000000296         db  0x91 ; '.'
0000000000000297         db  0x09 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x40 ; '@'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x40 ; '@'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x41 ; 'A'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x47 ; 'G'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0x9b8[ (1752 bytes)
        ; File offset : [736; 2488[ (1752 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'                                         ; DATA XREF=sub_3dfe+1171
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xb1 ; '.'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xa4 ; '.'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x87 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x2e ; '.'
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x37 ; '7'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x12 ; '.'
0000000000000371         db  0x03 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x20 ; ' '
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x93 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0xe3 ; '.'
00000000000003a1         db  0x01 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x58 ; 'X'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x69 ; 'i'
00000000000003d1         db  0x02 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'                                         ; DATA XREF=sub_3dfe+1212
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'                                         ; DATA XREF=sub_3dfe+1109
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0xbf ; '.'                                         ; DATA XREF=xstrtoumax+420
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x23 ; '#'                                         ; DATA XREF=xstrtoumax+437, xstrtoumax+806, xstrtoumax+878
0000000000000401         db  0x01 ; '.'
0000000000000402         db  0x00 ; '.'
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x0d ; '.'
0000000000000419         db  0x01 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x3c ; '<'
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x68 ; 'h'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x38 ; '8'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x4e ; 'N'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xcd ; '.'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x06 ; '.'
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x5d ; ']'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xc0 ; '.'
00000000000004d9         db  0x01 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x29 ; ')'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0xee ; '.'                                         ; DATA XREF=read_block+188
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x77 ; 'w'
0000000000000521         db  0x02 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x46 ; 'F'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x5b ; '['
0000000000000551         db  0x01 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0xb1 ; '.'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'                                         ; DATA XREF=main+4382
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x82 ; '.'
0000000000000581         db  0x02 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'                                         ; DATA XREF=main+4413
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0xc6 ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x1c ; '.'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0xf9 ; '.'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x57 ; 'W'
00000000000005e1         db  0x02 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x3f ; '?'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x95 ; '.'
0000000000000611         db  0x02 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xff ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x2e ; '.'
0000000000000641         db  0x03 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x20 ; ' '
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x61 ; 'a'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xd5 ; '.'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x6f ; 'o'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x0b ; '.'
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x7e ; '~'
00000000000006b9         db  0x01 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0xcc ; '.'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x9f ; '.'
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x47 ; 'G'
0000000000000701         db  0x02 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x77 ; 'w'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x1f ; '.'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x12 ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x22 ; '"'
0000000000000761         db  0x02 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x7f ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x6a ; 'j'
0000000000000791         db  0x02 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x70 ; 'p'
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x31 ; '1'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'                                         ; DATA XREF=rpl_vfprintf+29
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xe4 ; '.'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xc4 ; '.'
00000000000007f1         db  0x02 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'                                         ; DATA XREF=rpl_vfprintf+12, rpl_vfprintf+155
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x94 ; '.'
0000000000000809         db  0x00 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xdc ; '.'
0000000000000821         db  0x01 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x46 ; 'F'
0000000000000839         db  0x01 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x3d ; '='
0000000000000851         db  0x03 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x20 ; ' '
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x76 ; 'v'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x6e ; 'n'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x13 ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x22 ; '"'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x8a ; '.'
00000000000008b1         db  0x01 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x2a ; '*'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x54 ; 'T'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x11 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x19 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0xa8 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x21 ; '!'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x08 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xa9 ; '.'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x11 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x19 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0xa0 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x21 ; '!'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x08 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x8d ; '.'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x11 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x19 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0xb0 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x21 ; '!'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x08 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x99 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x21 ; '!'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x19 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0xc8 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x21 ; '!'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x08 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0xb4 ; '.'
0000000000000941         db  0x02 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x11 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x19 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0xc8 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x21 ; '!'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x08 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xf5 ; '.'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x21 ; '!'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x19 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0xa0 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x21 ; '!'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x08 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xaa ; '.'
0000000000000971         db  0x01 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x11 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x19 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0xe0 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x21 ; '!'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x08 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x3f ; '?'
0000000000000989         db  0x00 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x11 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x19 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0xb8 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x21 ; '!'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x04 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x98 ; '.'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x11 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x19 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0xc0 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x21 ; '!'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x08 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x9b8; 0xd0f[ (855 bytes)
        ; File offset : [2488; 3343[ (855 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

00000000000009b8         db  0x00 ; '.'
00000000000009b9         db  0x6c ; 'l'
00000000000009ba         db  0x69 ; 'i'
00000000000009bb         db  0x62 ; 'b'
00000000000009bc         db  0x63 ; 'c'
00000000000009bd         db  0x2e ; '.'
00000000000009be         db  0x73 ; 's'
00000000000009bf         db  0x6f ; 'o'
00000000000009c0         db  0x2e ; '.'
00000000000009c1         db  0x36 ; '6'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x66 ; 'f'
00000000000009c4         db  0x66 ; 'f'
00000000000009c5         db  0x6c ; 'l'
00000000000009c6         db  0x75 ; 'u'
00000000000009c7         db  0x73 ; 's'
00000000000009c8         db  0x68 ; 'h'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x5f ; '_'
00000000000009cb         db  0x5f ; '_'
00000000000009cc         db  0x70 ; 'p'
00000000000009cd         db  0x72 ; 'r'
00000000000009ce         db  0x69 ; 'i'
00000000000009cf         db  0x6e ; 'n'
00000000000009d0         db  0x74 ; 't'
00000000000009d1         db  0x66 ; 'f'
00000000000009d2         db  0x5f ; '_'
00000000000009d3         db  0x63 ; 'c'
00000000000009d4         db  0x68 ; 'h'
00000000000009d5         db  0x6b ; 'k'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x73 ; 's'
00000000000009d8         db  0x65 ; 'e'
00000000000009d9         db  0x74 ; 't'
00000000000009da         db  0x6c ; 'l'
00000000000009db         db  0x6f ; 'o'
00000000000009dc         db  0x63 ; 'c'
00000000000009dd         db  0x61 ; 'a'
00000000000009de         db  0x6c ; 'l'
00000000000009df         db  0x65 ; 'e'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x6d ; 'm'
00000000000009e2         db  0x62 ; 'b'
00000000000009e3         db  0x72 ; 'r'
00000000000009e4         db  0x74 ; 't'
00000000000009e5         db  0x6f ; 'o'
00000000000009e6         db  0x77 ; 'w'
00000000000009e7         db  0x63 ; 'c'
00000000000009e8         db  0x00 ; '.'
00000000000009e9         db  0x66 ; 'f'
00000000000009ea         db  0x6f ; 'o'
00000000000009eb         db  0x70 ; 'p'
00000000000009ec         db  0x65 ; 'e'
00000000000009ed         db  0x6e ; 'n'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x73 ; 's'
00000000000009f0         db  0x74 ; 't'
00000000000009f1         db  0x72 ; 'r'
00000000000009f2         db  0x6e ; 'n'
00000000000009f3         db  0x63 ; 'c'
00000000000009f4         db  0x6d ; 'm'
00000000000009f5         db  0x70 ; 'p'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x6f ; 'o'
00000000000009f8         db  0x70 ; 'p'
00000000000009f9         db  0x74 ; 't'
00000000000009fa         db  0x69 ; 'i'
00000000000009fb         db  0x6e ; 'n'
00000000000009fc         db  0x64 ; 'd'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x73 ; 's'
00000000000009ff         db  0x74 ; 't'
                     aRrchr:
0000000000000a00         db         "rrchr", 0
0000000000000a06         db  0x64 ; 'd'
0000000000000a07         db  0x63 ; 'c'
0000000000000a08         db  0x67 ; 'g'
0000000000000a09         db  0x65 ; 'e'
0000000000000a0a         db  0x74 ; 't'
0000000000000a0b         db  0x74 ; 't'
0000000000000a0c         db  0x65 ; 'e'
0000000000000a0d         db  0x78 ; 'x'
0000000000000a0e         db  0x74 ; 't'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x70 ; 'p'
0000000000000a11         db  0x75 ; 'u'
0000000000000a12         db  0x74 ; 't'
0000000000000a13         db  0x73 ; 's'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x5f ; '_'
0000000000000a16         db  0x5f ; '_'
0000000000000a17         db  0x73 ; 's'
0000000000000a18         db  0x74 ; 't'
0000000000000a19         db  0x61 ; 'a'
0000000000000a1a         db  0x63 ; 'c'
0000000000000a1b         db  0x6b ; 'k'
0000000000000a1c         db  0x5f ; '_'
0000000000000a1d         db  0x63 ; 'c'
0000000000000a1e         db  0x68 ; 'h'
0000000000000a1f         db  0x6b ; 'k'
0000000000000a20         db  0x5f ; '_'
0000000000000a21         db  0x66 ; 'f'
0000000000000a22         db  0x61 ; 'a'
0000000000000a23         db  0x69 ; 'i'
0000000000000a24         db  0x6c ; 'l'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x69 ; 'i'
0000000000000a27         db  0x73 ; 's'
0000000000000a28         db  0x77 ; 'w'
0000000000000a29         db  0x70 ; 'p'
0000000000000a2a         db  0x72 ; 'r'
0000000000000a2b         db  0x69 ; 'i'
0000000000000a2c         db  0x6e ; 'n'
0000000000000a2d         db  0x74 ; 't'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x72 ; 'r'
0000000000000a30         db  0x65 ; 'e'
0000000000000a31         db  0x61 ; 'a'
0000000000000a32         db  0x6c ; 'l'
0000000000000a33         db  0x6c ; 'l'
0000000000000a34         db  0x6f ; 'o'
0000000000000a35         db  0x63 ; 'c'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x73 ; 's'
0000000000000a38         db  0x74 ; 't'
0000000000000a39         db  0x72 ; 'r'
0000000000000a3a         db  0x74 ; 't'
0000000000000a3b         db  0x6f ; 'o'
0000000000000a3c         db  0x6c ; 'l'
0000000000000a3d         db  0x64 ; 'd'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x61 ; 'a'
0000000000000a40         db  0x62 ; 'b'
0000000000000a41         db  0x6f ; 'o'
0000000000000a42         db  0x72 ; 'r'
0000000000000a43         db  0x74 ; 't'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x73 ; 's'
0000000000000a46         db  0x74 ; 't'
0000000000000a47         db  0x64 ; 'd'
0000000000000a48         db  0x69 ; 'i'
0000000000000a49         db  0x6e ; 'n'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x5f ; '_'
0000000000000a4c         db  0x65 ; 'e'
0000000000000a4d         db  0x78 ; 'x'
0000000000000a4e         db  0x69 ; 'i'
0000000000000a4f         db  0x74 ; 't'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x70 ; 'p'
0000000000000a52         db  0x72 ; 'r'
0000000000000a53         db  0x6f ; 'o'
0000000000000a54         db  0x67 ; 'g'
0000000000000a55         db  0x72 ; 'r'
0000000000000a56         db  0x61 ; 'a'
0000000000000a57         db  0x6d ; 'm'
0000000000000a58         db  0x5f ; '_'
0000000000000a59         db  0x69 ; 'i'
0000000000000a5a         db  0x6e ; 'n'
0000000000000a5b         db  0x76 ; 'v'
0000000000000a5c         db  0x6f ; 'o'
0000000000000a5d         db  0x63 ; 'c'
0000000000000a5e         db  0x61 ; 'a'
0000000000000a5f         db  0x74 ; 't'
0000000000000a60         db  0x69 ; 'i'
0000000000000a61         db  0x6f ; 'o'
0000000000000a62         db  0x6e ; 'n'
0000000000000a63         db  0x5f ; '_'
0000000000000a64         db  0x6e ; 'n'
0000000000000a65         db  0x61 ; 'a'
0000000000000a66         db  0x6d ; 'm'
0000000000000a67         db  0x65 ; 'e'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x5f ; '_'
0000000000000a6a         db  0x5f ; '_'
0000000000000a6b         db  0x61 ; 'a'
0000000000000a6c         db  0x73 ; 's'
0000000000000a6d         db  0x73 ; 's'
0000000000000a6e         db  0x65 ; 'e'
0000000000000a6f         db  0x72 ; 'r'
0000000000000a70         db  0x74 ; 't'
0000000000000a71         db  0x5f ; '_'
0000000000000a72         db  0x66 ; 'f'
0000000000000a73         db  0x61 ; 'a'
0000000000000a74         db  0x69 ; 'i'
0000000000000a75         db  0x6c ; 'l'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x73 ; 's'
0000000000000a78         db  0x74 ; 't'
0000000000000a79         db  0x72 ; 'r'
0000000000000a7a         db  0x74 ; 't'
0000000000000a7b         db  0x6f ; 'o'
0000000000000a7c         db  0x64 ; 'd'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x73 ; 's'
0000000000000a7f         db  0x74 ; 't'
0000000000000a80         db  0x72 ; 'r'
0000000000000a81         db  0x74 ; 't'
0000000000000a82         db  0x6f ; 'o'
0000000000000a83         db  0x66 ; 'f'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x5f ; '_'
0000000000000a86         db  0x5f ; '_'
0000000000000a87         db  0x63 ; 'c'
0000000000000a88         db  0x74 ; 't'
0000000000000a89         db  0x79 ; 'y'
0000000000000a8a         db  0x70 ; 'p'
0000000000000a8b         db  0x65 ; 'e'
0000000000000a8c         db  0x5f ; '_'
0000000000000a8d         db  0x67 ; 'g'
0000000000000a8e         db  0x65 ; 'e'
0000000000000a8f         db  0x74 ; 't'
0000000000000a90         db  0x5f ; '_'
0000000000000a91         db  0x6d ; 'm'
0000000000000a92         db  0x62 ; 'b'
0000000000000a93         db  0x5f ; '_'
0000000000000a94         db  0x63 ; 'c'
0000000000000a95         db  0x75 ; 'u'
0000000000000a96         db  0x72 ; 'r'
0000000000000a97         db  0x5f ; '_'
0000000000000a98         db  0x6d ; 'm'
0000000000000a99         db  0x61 ; 'a'
0000000000000a9a         db  0x78 ; 'x'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x5f ; '_'
0000000000000a9d         db  0x5f ; '_'
0000000000000a9e         db  0x66 ; 'f'
0000000000000a9f         db  0x72 ; 'r'
0000000000000aa0         db  0x65 ; 'e'
0000000000000aa1         db  0x61 ; 'a'
0000000000000aa2         db  0x64 ; 'd'
0000000000000aa3         db  0x5f ; '_'
0000000000000aa4         db  0x75 ; 'u'
0000000000000aa5         db  0x6e ; 'n'
0000000000000aa6         db  0x6c ; 'l'
0000000000000aa7         db  0x6f ; 'o'
0000000000000aa8         db  0x63 ; 'c'
0000000000000aa9         db  0x6b ; 'k'
0000000000000aaa         db  0x65 ; 'e'
0000000000000aab         db  0x64 ; 'd'
0000000000000aac         db  0x5f ; '_'
0000000000000aad         db  0x63 ; 'c'
0000000000000aae         db  0x68 ; 'h'
0000000000000aaf         db  0x6b ; 'k'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x66 ; 'f'
0000000000000ab2         db  0x67 ; 'g'
0000000000000ab3         db  0x65 ; 'e'
0000000000000ab4         db  0x74 ; 't'
0000000000000ab5         db  0x63 ; 'c'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x63 ; 'c'
0000000000000ab8         db  0x61 ; 'a'
0000000000000ab9         db  0x6c ; 'l'
0000000000000aba         db  0x6c ; 'l'
0000000000000abb         db  0x6f ; 'o'
0000000000000abc         db  0x63 ; 'c'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x73 ; 's'
0000000000000abf         db  0x74 ; 't'
0000000000000ac0         db  0x72 ; 'r'
0000000000000ac1         db  0x6c ; 'l'
0000000000000ac2         db  0x65 ; 'e'
0000000000000ac3         db  0x6e ; 'n'
0000000000000ac4         db  0x00 ; '.'
0000000000000ac5         db  0x66 ; 'f'
0000000000000ac6         db  0x72 ; 'r'
0000000000000ac7         db  0x65 ; 'e'
0000000000000ac8         db  0x61 ; 'a'
0000000000000ac9         db  0x64 ; 'd'
0000000000000aca         db  0x5f ; '_'
0000000000000acb         db  0x75 ; 'u'
0000000000000acc         db  0x6e ; 'n'
0000000000000acd         db  0x6c ; 'l'
0000000000000ace         db  0x6f ; 'o'
0000000000000acf         db  0x63 ; 'c'
0000000000000ad0         db  0x6b ; 'k'
0000000000000ad1         db  0x65 ; 'e'
0000000000000ad2         db  0x64 ; 'd'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x6d ; 'm'
0000000000000ad5         db  0x65 ; 'e'
0000000000000ad6         db  0x6d ; 'm'
0000000000000ad7         db  0x73 ; 's'
0000000000000ad8         db  0x65 ; 'e'
0000000000000ad9         db  0x74 ; 't'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x6c ; 'l'
0000000000000adc         db  0x6f ; 'o'
0000000000000add         db  0x63 ; 'c'
0000000000000ade         db  0x61 ; 'a'
0000000000000adf         db  0x6c ; 'l'
0000000000000ae0         db  0x65 ; 'e'
0000000000000ae1         db  0x63 ; 'c'
0000000000000ae2         db  0x6f ; 'o'
0000000000000ae3         db  0x6e ; 'n'
0000000000000ae4         db  0x76 ; 'v'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x5f ; '_'
0000000000000ae7         db  0x5f ; '_'
0000000000000ae8         db  0x65 ; 'e'
0000000000000ae9         db  0x72 ; 'r'
0000000000000aea         db  0x72 ; 'r'
0000000000000aeb         db  0x6e ; 'n'
0000000000000aec         db  0x6f ; 'o'
0000000000000aed         db  0x5f ; '_'
0000000000000aee         db  0x6c ; 'l'
0000000000000aef         db  0x6f ; 'o'
0000000000000af0         db  0x63 ; 'c'
0000000000000af1         db  0x61 ; 'a'
0000000000000af2         db  0x74 ; 't'
0000000000000af3         db  0x69 ; 'i'
0000000000000af4         db  0x6f ; 'o'
0000000000000af5         db  0x6e ; 'n'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x6d ; 'm'
0000000000000af8         db  0x65 ; 'e'
0000000000000af9         db  0x6d ; 'm'
0000000000000afa         db  0x63 ; 'c'
0000000000000afb         db  0x6d ; 'm'
0000000000000afc         db  0x70 ; 'p'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x5f ; '_'
0000000000000aff         db  0x5f ; '_'
                     aFprintfchk:
0000000000000b00         db         "fprintf_chk", 0
0000000000000b0c         db  0x73 ; 's'
0000000000000b0d         db  0x74 ; 't'
0000000000000b0e         db  0x64 ; 'd'
0000000000000b0f         db  0x6f ; 'o'
0000000000000b10         db  0x75 ; 'u'
0000000000000b11         db  0x74 ; 't'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x6c ; 'l'
0000000000000b14         db  0x73 ; 's'
0000000000000b15         db  0x65 ; 'e'
0000000000000b16         db  0x65 ; 'e'
0000000000000b17         db  0x6b ; 'k'
0000000000000b18         db  0x00 ; '.'
0000000000000b19         db  0x6d ; 'm'
0000000000000b1a         db  0x65 ; 'e'
0000000000000b1b         db  0x6d ; 'm'
0000000000000b1c         db  0x63 ; 'c'
0000000000000b1d         db  0x70 ; 'p'
0000000000000b1e         db  0x79 ; 'y'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0x66 ; 'f'
0000000000000b21         db  0x63 ; 'c'
0000000000000b22         db  0x6c ; 'l'
0000000000000b23         db  0x6f ; 'o'
0000000000000b24         db  0x73 ; 's'
0000000000000b25         db  0x65 ; 'e'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x6d ; 'm'
0000000000000b28         db  0x61 ; 'a'
0000000000000b29         db  0x6c ; 'l'
0000000000000b2a         db  0x6c ; 'l'
0000000000000b2b         db  0x6f ; 'o'
0000000000000b2c         db  0x63 ; 'c'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x6d ; 'm'
0000000000000b2f         db  0x62 ; 'b'
0000000000000b30         db  0x73 ; 's'
0000000000000b31         db  0x69 ; 'i'
0000000000000b32         db  0x6e ; 'n'
0000000000000b33         db  0x69 ; 'i'
0000000000000b34         db  0x74 ; 't'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x6e ; 'n'
0000000000000b37         db  0x6c ; 'l'
0000000000000b38         db  0x5f ; '_'
0000000000000b39         db  0x6c ; 'l'
0000000000000b3a         db  0x61 ; 'a'
0000000000000b3b         db  0x6e ; 'n'
0000000000000b3c         db  0x67 ; 'g'
0000000000000b3d         db  0x69 ; 'i'
0000000000000b3e         db  0x6e ; 'n'
0000000000000b3f         db  0x66 ; 'f'
0000000000000b40         db  0x6f ; 'o'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x5f ; '_'
0000000000000b43         db  0x5f ; '_'
0000000000000b44         db  0x63 ; 'c'
0000000000000b45         db  0x74 ; 't'
0000000000000b46         db  0x79 ; 'y'
0000000000000b47         db  0x70 ; 'p'
0000000000000b48         db  0x65 ; 'e'
0000000000000b49         db  0x5f ; '_'
0000000000000b4a         db  0x62 ; 'b'
0000000000000b4b         db  0x5f ; '_'
0000000000000b4c         db  0x6c ; 'l'
0000000000000b4d         db  0x6f ; 'o'
0000000000000b4e         db  0x63 ; 'c'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0x6f ; 'o'
0000000000000b51         db  0x70 ; 'p'
0000000000000b52         db  0x74 ; 't'
0000000000000b53         db  0x61 ; 'a'
0000000000000b54         db  0x72 ; 'r'
0000000000000b55         db  0x67 ; 'g'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x5f ; '_'
0000000000000b58         db  0x5f ; '_'
0000000000000b59         db  0x66 ; 'f'
0000000000000b5a         db  0x72 ; 'r'
0000000000000b5b         db  0x65 ; 'e'
0000000000000b5c         db  0x61 ; 'a'
0000000000000b5d         db  0x64 ; 'd'
0000000000000b5e         db  0x69 ; 'i'
0000000000000b5f         db  0x6e ; 'n'
0000000000000b60         db  0x67 ; 'g'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x73 ; 's'
0000000000000b63         db  0x74 ; 't'
0000000000000b64         db  0x64 ; 'd'
0000000000000b65         db  0x65 ; 'e'
0000000000000b66         db  0x72 ; 'r'
0000000000000b67         db  0x72 ; 'r'
0000000000000b68         db  0x00 ; '.'
0000000000000b69         db  0x5f ; '_'
0000000000000b6a         db  0x5f ; '_'
0000000000000b6b         db  0x73 ; 's'
0000000000000b6c         db  0x6e ; 'n'
0000000000000b6d         db  0x70 ; 'p'
0000000000000b6e         db  0x72 ; 'r'
0000000000000b6f         db  0x69 ; 'i'
0000000000000b70         db  0x6e ; 'n'
0000000000000b71         db  0x74 ; 't'
0000000000000b72         db  0x66 ; 'f'
0000000000000b73         db  0x5f ; '_'
0000000000000b74         db  0x63 ; 'c'
0000000000000b75         db  0x68 ; 'h'
0000000000000b76         db  0x6b ; 'k'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x67 ; 'g'
0000000000000b79         db  0x65 ; 'e'
0000000000000b7a         db  0x74 ; 't'
0000000000000b7b         db  0x6f ; 'o'
0000000000000b7c         db  0x70 ; 'p'
0000000000000b7d         db  0x74 ; 't'
0000000000000b7e         db  0x5f ; '_'
0000000000000b7f         db  0x6c ; 'l'
0000000000000b80         db  0x6f ; 'o'
0000000000000b81         db  0x6e ; 'n'
0000000000000b82         db  0x67 ; 'g'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x5f ; '_'
0000000000000b85         db  0x5f ; '_'
0000000000000b86         db  0x66 ; 'f'
0000000000000b87         db  0x78 ; 'x'
0000000000000b88         db  0x73 ; 's'
0000000000000b89         db  0x74 ; 't'
0000000000000b8a         db  0x61 ; 'a'
0000000000000b8b         db  0x74 ; 't'
0000000000000b8c         db  0x00 ; '.'
0000000000000b8d         db  0x66 ; 'f'
0000000000000b8e         db  0x69 ; 'i'
0000000000000b8f         db  0x6c ; 'l'
0000000000000b90         db  0x65 ; 'e'
0000000000000b91         db  0x6e ; 'n'
0000000000000b92         db  0x6f ; 'o'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x66 ; 'f'
0000000000000b95         db  0x77 ; 'w'
0000000000000b96         db  0x72 ; 'r'
0000000000000b97         db  0x69 ; 'i'
0000000000000b98         db  0x74 ; 't'
0000000000000b99         db  0x65 ; 'e'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x5f ; '_'
0000000000000b9c         db  0x5f ; '_'
0000000000000b9d         db  0x66 ; 'f'
0000000000000b9e         db  0x70 ; 'p'
0000000000000b9f         db  0x65 ; 'e'
0000000000000ba0         db  0x6e ; 'n'
0000000000000ba1         db  0x64 ; 'd'
0000000000000ba2         db  0x69 ; 'i'
0000000000000ba3         db  0x6e ; 'n'
0000000000000ba4         db  0x67 ; 'g'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x73 ; 's'
0000000000000ba7         db  0x74 ; 't'
0000000000000ba8         db  0x72 ; 'r'
0000000000000ba9         db  0x63 ; 'c'
0000000000000baa         db  0x68 ; 'h'
0000000000000bab         db  0x72 ; 'r'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x70 ; 'p'
0000000000000bae         db  0x72 ; 'r'
0000000000000baf         db  0x6f ; 'o'
0000000000000bb0         db  0x67 ; 'g'
0000000000000bb1         db  0x72 ; 'r'
0000000000000bb2         db  0x61 ; 'a'
0000000000000bb3         db  0x6d ; 'm'
0000000000000bb4         db  0x5f ; '_'
0000000000000bb5         db  0x69 ; 'i'
0000000000000bb6         db  0x6e ; 'n'
0000000000000bb7         db  0x76 ; 'v'
0000000000000bb8         db  0x6f ; 'o'
0000000000000bb9         db  0x63 ; 'c'
0000000000000bba         db  0x61 ; 'a'
0000000000000bbb         db  0x74 ; 't'
0000000000000bbc         db  0x69 ; 'i'
0000000000000bbd         db  0x6f ; 'o'
0000000000000bbe         db  0x6e ; 'n'
0000000000000bbf         db  0x5f ; '_'
0000000000000bc0         db  0x73 ; 's'
0000000000000bc1         db  0x68 ; 'h'
0000000000000bc2         db  0x6f ; 'o'
0000000000000bc3         db  0x72 ; 'r'
0000000000000bc4         db  0x74 ; 't'
0000000000000bc5         db  0x5f ; '_'
0000000000000bc6         db  0x6e ; 'n'
0000000000000bc7         db  0x61 ; 'a'
0000000000000bc8         db  0x6d ; 'm'
0000000000000bc9         db  0x65 ; 'e'
0000000000000bca         db  0x00 ; '.'
0000000000000bcb         db  0x5f ; '_'
0000000000000bcc         db  0x5f ; '_'
0000000000000bcd         db  0x63 ; 'c'
0000000000000bce         db  0x78 ; 'x'
0000000000000bcf         db  0x61 ; 'a'
0000000000000bd0         db  0x5f ; '_'
0000000000000bd1         db  0x66 ; 'f'
0000000000000bd2         db  0x69 ; 'i'
0000000000000bd3         db  0x6e ; 'n'
0000000000000bd4         db  0x61 ; 'a'
0000000000000bd5         db  0x6c ; 'l'
0000000000000bd6         db  0x69 ; 'i'
0000000000000bd7         db  0x7a ; 'z'
0000000000000bd8         db  0x65 ; 'e'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x73 ; 's'
0000000000000bdb         db  0x65 ; 'e'
0000000000000bdc         db  0x74 ; 't'
0000000000000bdd         db  0x76 ; 'v'
0000000000000bde         db  0x62 ; 'b'
0000000000000bdf         db  0x75 ; 'u'
0000000000000be0         db  0x66 ; 'f'
0000000000000be1         db  0x00 ; '.'
0000000000000be2         db  0x5f ; '_'
0000000000000be3         db  0x5f ; '_'
0000000000000be4         db  0x73 ; 's'
0000000000000be5         db  0x70 ; 'p'
0000000000000be6         db  0x72 ; 'r'
0000000000000be7         db  0x69 ; 'i'
0000000000000be8         db  0x6e ; 'n'
0000000000000be9         db  0x74 ; 't'
0000000000000bea         db  0x66 ; 'f'
0000000000000beb         db  0x5f ; '_'
0000000000000bec         db  0x63 ; 'c'
0000000000000bed         db  0x68 ; 'h'
0000000000000bee         db  0x6b ; 'k'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x62 ; 'b'
0000000000000bf1         db  0x69 ; 'i'
0000000000000bf2         db  0x6e ; 'n'
0000000000000bf3         db  0x64 ; 'd'
0000000000000bf4         db  0x74 ; 't'
0000000000000bf5         db  0x65 ; 'e'
0000000000000bf6         db  0x78 ; 'x'
0000000000000bf7         db  0x74 ; 't'
0000000000000bf8         db  0x64 ; 'd'
0000000000000bf9         db  0x6f ; 'o'
0000000000000bfa         db  0x6d ; 'm'
0000000000000bfb         db  0x61 ; 'a'
0000000000000bfc         db  0x69 ; 'i'
0000000000000bfd         db  0x6e ; 'n'
0000000000000bfe         db  0x00 ; '.'
0000000000000bff         db  0x66 ; 'f'
                     aWriteunlocked:
0000000000000c00         db         "write_unlocked", 0
0000000000000c0f         db  0x5f ; '_'
0000000000000c10         db  0x5f ; '_'
0000000000000c11         db  0x6c ; 'l'
0000000000000c12         db  0x69 ; 'i'
0000000000000c13         db  0x62 ; 'b'
0000000000000c14         db  0x63 ; 'c'
0000000000000c15         db  0x5f ; '_'
0000000000000c16         db  0x73 ; 's'
0000000000000c17         db  0x74 ; 't'
0000000000000c18         db  0x61 ; 'a'
0000000000000c19         db  0x72 ; 'r'
0000000000000c1a         db  0x74 ; 't'
0000000000000c1b         db  0x5f ; '_'
0000000000000c1c         db  0x6d ; 'm'
0000000000000c1d         db  0x61 ; 'a'
0000000000000c1e         db  0x69 ; 'i'
0000000000000c1f         db  0x6e ; 'n'
0000000000000c20         db  0x00 ; '.'
0000000000000c21         db  0x66 ; 'f'
0000000000000c22         db  0x65 ; 'e'
0000000000000c23         db  0x72 ; 'r'
0000000000000c24         db  0x72 ; 'r'
0000000000000c25         db  0x6f ; 'o'
0000000000000c26         db  0x72 ; 'r'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0x66 ; 'f'
0000000000000c29         db  0x73 ; 's'
0000000000000c2a         db  0x65 ; 'e'
0000000000000c2b         db  0x65 ; 'e'
0000000000000c2c         db  0x6b ; 'k'
0000000000000c2d         db  0x6f ; 'o'
0000000000000c2e         db  0x00 ; '.'
0000000000000c2f         db  0x5f ; '_'
0000000000000c30         db  0x5f ; '_'
0000000000000c31         db  0x6f ; 'o'
0000000000000c32         db  0x76 ; 'v'
0000000000000c33         db  0x65 ; 'e'
0000000000000c34         db  0x72 ; 'r'
0000000000000c35         db  0x66 ; 'f'
0000000000000c36         db  0x6c ; 'l'
0000000000000c37         db  0x6f ; 'o'
0000000000000c38         db  0x77 ; 'w'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x5f ; '_'
0000000000000c3b         db  0x5f ; '_'
0000000000000c3c         db  0x73 ; 's'
0000000000000c3d         db  0x74 ; 't'
0000000000000c3e         db  0x72 ; 'r'
0000000000000c3f         db  0x74 ; 't'
0000000000000c40         db  0x6f ; 'o'
0000000000000c41         db  0x75 ; 'u'
0000000000000c42         db  0x6c ; 'l'
0000000000000c43         db  0x5f ; '_'
0000000000000c44         db  0x69 ; 'i'
0000000000000c45         db  0x6e ; 'n'
0000000000000c46         db  0x74 ; 't'
0000000000000c47         db  0x65 ; 'e'
0000000000000c48         db  0x72 ; 'r'
0000000000000c49         db  0x6e ; 'n'
0000000000000c4a         db  0x61 ; 'a'
0000000000000c4b         db  0x6c ; 'l'
0000000000000c4c         db  0x00 ; '.'
0000000000000c4d         db  0x66 ; 'f'
0000000000000c4e         db  0x70 ; 'p'
0000000000000c4f         db  0x75 ; 'u'
0000000000000c50         db  0x74 ; 't'
0000000000000c51         db  0x73 ; 's'
0000000000000c52         db  0x5f ; '_'
0000000000000c53         db  0x75 ; 'u'
0000000000000c54         db  0x6e ; 'n'
0000000000000c55         db  0x6c ; 'l'
0000000000000c56         db  0x6f ; 'o'
0000000000000c57         db  0x63 ; 'c'
0000000000000c58         db  0x6b ; 'k'
0000000000000c59         db  0x65 ; 'e'
0000000000000c5a         db  0x64 ; 'd'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x66 ; 'f'
0000000000000c5d         db  0x72 ; 'r'
0000000000000c5e         db  0x65 ; 'e'
0000000000000c5f         db  0x65 ; 'e'
0000000000000c60         db  0x00 ; '.'
0000000000000c61         db  0x5f ; '_'
0000000000000c62         db  0x5f ; '_'
0000000000000c63         db  0x70 ; 'p'
0000000000000c64         db  0x72 ; 'r'
0000000000000c65         db  0x6f ; 'o'
0000000000000c66         db  0x67 ; 'g'
0000000000000c67         db  0x6e ; 'n'
0000000000000c68         db  0x61 ; 'a'
0000000000000c69         db  0x6d ; 'm'
0000000000000c6a         db  0x65 ; 'e'
0000000000000c6b         db  0x00 ; '.'
0000000000000c6c         db  0x5f ; '_'
0000000000000c6d         db  0x5f ; '_'
0000000000000c6e         db  0x70 ; 'p'
0000000000000c6f         db  0x72 ; 'r'
0000000000000c70         db  0x6f ; 'o'
0000000000000c71         db  0x67 ; 'g'
0000000000000c72         db  0x6e ; 'n'
0000000000000c73         db  0x61 ; 'a'
0000000000000c74         db  0x6d ; 'm'
0000000000000c75         db  0x65 ; 'e'
0000000000000c76         db  0x5f ; '_'
0000000000000c77         db  0x66 ; 'f'
0000000000000c78         db  0x75 ; 'u'
0000000000000c79         db  0x6c ; 'l'
0000000000000c7a         db  0x6c ; 'l'
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x5f ; '_'
0000000000000c7d         db  0x5f ; '_'
0000000000000c7e         db  0x63 ; 'c'
0000000000000c7f         db  0x78 ; 'x'
0000000000000c80         db  0x61 ; 'a'
0000000000000c81         db  0x5f ; '_'
0000000000000c82         db  0x61 ; 'a'
0000000000000c83         db  0x74 ; 't'
0000000000000c84         db  0x65 ; 'e'
0000000000000c85         db  0x78 ; 'x'
0000000000000c86         db  0x69 ; 'i'
0000000000000c87         db  0x74 ; 't'
0000000000000c88         db  0x00 ; '.'
0000000000000c89         db  0x47 ; 'G'
0000000000000c8a         db  0x4c ; 'L'
0000000000000c8b         db  0x49 ; 'I'
0000000000000c8c         db  0x42 ; 'B'
0000000000000c8d         db  0x43 ; 'C'
0000000000000c8e         db  0x5f ; '_'
0000000000000c8f         db  0x32 ; '2'
0000000000000c90         db  0x2e ; '.'
0000000000000c91         db  0x33 ; '3'
0000000000000c92         db  0x00 ; '.'
0000000000000c93         db  0x47 ; 'G'
0000000000000c94         db  0x4c ; 'L'
0000000000000c95         db  0x49 ; 'I'
0000000000000c96         db  0x42 ; 'B'
0000000000000c97         db  0x43 ; 'C'
0000000000000c98         db  0x5f ; '_'
0000000000000c99         db  0x32 ; '2'
0000000000000c9a         db  0x2e ; '.'
0000000000000c9b         db  0x37 ; '7'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x47 ; 'G'
0000000000000c9e         db  0x4c ; 'L'
0000000000000c9f         db  0x49 ; 'I'
0000000000000ca0         db  0x42 ; 'B'
0000000000000ca1         db  0x43 ; 'C'
0000000000000ca2         db  0x5f ; '_'
0000000000000ca3         db  0x32 ; '2'
0000000000000ca4         db  0x2e ; '.'
0000000000000ca5         db  0x31 ; '1'
0000000000000ca6         db  0x34 ; '4'
0000000000000ca7         db  0x00 ; '.'
0000000000000ca8         db  0x47 ; 'G'
0000000000000ca9         db  0x4c ; 'L'
0000000000000caa         db  0x49 ; 'I'
0000000000000cab         db  0x42 ; 'B'
0000000000000cac         db  0x43 ; 'C'
0000000000000cad         db  0x5f ; '_'
0000000000000cae         db  0x32 ; '2'
0000000000000caf         db  0x2e ; '.'
0000000000000cb0         db  0x34 ; '4'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x47 ; 'G'
0000000000000cb3         db  0x4c ; 'L'
0000000000000cb4         db  0x49 ; 'I'
0000000000000cb5         db  0x42 ; 'B'
0000000000000cb6         db  0x43 ; 'C'
0000000000000cb7         db  0x5f ; '_'
0000000000000cb8         db  0x32 ; '2'
0000000000000cb9         db  0x2e ; '.'
0000000000000cba         db  0x33 ; '3'
0000000000000cbb         db  0x2e ; '.'
0000000000000cbc         db  0x34 ; '4'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x47 ; 'G'
0000000000000cbf         db  0x4c ; 'L'
0000000000000cc0         db  0x49 ; 'I'
0000000000000cc1         db  0x42 ; 'B'
0000000000000cc2         db  0x43 ; 'C'
0000000000000cc3         db  0x5f ; '_'
0000000000000cc4         db  0x32 ; '2'
0000000000000cc5         db  0x2e ; '.'
0000000000000cc6         db  0x32 ; '2'
0000000000000cc7         db  0x2e ; '.'
0000000000000cc8         db  0x35 ; '5'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x5f ; '_'
0000000000000ccb         db  0x49 ; 'I'
0000000000000ccc         db  0x54 ; 'T'
0000000000000ccd         db  0x4d ; 'M'
0000000000000cce         db  0x5f ; '_'
0000000000000ccf         db  0x64 ; 'd'
0000000000000cd0         db  0x65 ; 'e'
0000000000000cd1         db  0x72 ; 'r'
0000000000000cd2         db  0x65 ; 'e'
0000000000000cd3         db  0x67 ; 'g'
0000000000000cd4         db  0x69 ; 'i'
0000000000000cd5         db  0x73 ; 's'
0000000000000cd6         db  0x74 ; 't'
0000000000000cd7         db  0x65 ; 'e'
0000000000000cd8         db  0x72 ; 'r'
0000000000000cd9         db  0x54 ; 'T'
0000000000000cda         db  0x4d ; 'M'
0000000000000cdb         db  0x43 ; 'C'
0000000000000cdc         db  0x6c ; 'l'
0000000000000cdd         db  0x6f ; 'o'
0000000000000cde         db  0x6e ; 'n'
0000000000000cdf         db  0x65 ; 'e'
0000000000000ce0         db  0x54 ; 'T'
0000000000000ce1         db  0x61 ; 'a'
0000000000000ce2         db  0x62 ; 'b'
0000000000000ce3         db  0x6c ; 'l'
0000000000000ce4         db  0x65 ; 'e'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x5f ; '_'
0000000000000ce7         db  0x5f ; '_'
0000000000000ce8         db  0x67 ; 'g'
0000000000000ce9         db  0x6d ; 'm'
0000000000000cea         db  0x6f ; 'o'
0000000000000ceb         db  0x6e ; 'n'
0000000000000cec         db  0x5f ; '_'
0000000000000ced         db  0x73 ; 's'
0000000000000cee         db  0x74 ; 't'
0000000000000cef         db  0x61 ; 'a'
0000000000000cf0         db  0x72 ; 'r'
0000000000000cf1         db  0x74 ; 't'
0000000000000cf2         db  0x5f ; '_'
0000000000000cf3         db  0x5f ; '_'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x5f ; '_'
0000000000000cf6         db  0x49 ; 'I'
0000000000000cf7         db  0x54 ; 'T'
0000000000000cf8         db  0x4d ; 'M'
0000000000000cf9         db  0x5f ; '_'
0000000000000cfa         db  0x72 ; 'r'
0000000000000cfb         db  0x65 ; 'e'
0000000000000cfc         db  0x67 ; 'g'
0000000000000cfd         db  0x69 ; 'i'
0000000000000cfe         db  0x73 ; 's'
0000000000000cff         db  0x74 ; 't'
                     aErtmclonetable:
0000000000000d00         db         "erTMCloneTable", 0
0000000000000d0f         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xd10; 0xda2[ (146 bytes)
        ; File offset : [3344; 3490[ (146 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000d10         db  0x00 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x03 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x02 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x02 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x02 ; '.'
0000000000000d19         db  0x00 ; '.'
0000000000000d1a         db  0x02 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x00 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x02 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x02 ; '.'
0000000000000d21         db  0x00 ; '.'
0000000000000d22         db  0x02 ; '.'
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x02 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x02 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x02 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x02 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x02 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x02 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x02 ; '.'
0000000000000d31         db  0x00 ; '.'
0000000000000d32         db  0x02 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x02 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x02 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x04 ; '.'
0000000000000d39         db  0x00 ; '.'
0000000000000d3a         db  0x02 ; '.'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x02 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x02 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x02 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x02 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x02 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x02 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x02 ; '.'
0000000000000d49         db  0x00 ; '.'
0000000000000d4a         db  0x02 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x02 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x02 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x02 ; '.'
0000000000000d51         db  0x00 ; '.'
0000000000000d52         db  0x02 ; '.'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x02 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x02 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x00 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x05 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x02 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x02 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x02 ; '.'
0000000000000d61         db  0x00 ; '.'
0000000000000d62         db  0x02 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x02 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x02 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x02 ; '.'
0000000000000d69         db  0x00 ; '.'
0000000000000d6a         db  0x02 ; '.'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x02 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x03 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x02 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x02 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x02 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x02 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x02 ; '.'
0000000000000d79         db  0x00 ; '.'
0000000000000d7a         db  0x06 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x02 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x02 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x02 ; '.'
0000000000000d81         db  0x00 ; '.'
0000000000000d82         db  0x03 ; '.'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x02 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x02 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x02 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x07 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x03 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x02 ; '.'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x02 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x02 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x02 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x02 ; '.'
0000000000000d99         db  0x00 ; '.'
0000000000000d9a         db  0x02 ; '.'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x02 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x02 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x02 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x00 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xda8; 0xe18[ (112 bytes)
        ; File offset : [3496; 3608[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000da8         db  0x01 ; '.'
0000000000000da9         db  0x00 ; '.'
0000000000000daa         db  0x06 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x01 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x10 ; '.'
0000000000000db1         db  0x00 ; '.'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x13 ; '.'
0000000000000db9         db  0x69 ; 'i'
0000000000000dba         db  0x69 ; 'i'
0000000000000dbb         db  0x0d ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x07 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0xd1 ; '.'
0000000000000dc1         db  0x02 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x10 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x17 ; '.'
0000000000000dc9         db  0x69 ; 'i'
0000000000000dca         db  0x69 ; 'i'
0000000000000dcb         db  0x0d ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x06 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0xdb ; '.'
0000000000000dd1         db  0x02 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x10 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x94 ; '.'
0000000000000dd9         db  0x91 ; '.'
0000000000000dda         db  0x96 ; '.'
0000000000000ddb         db  0x06 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x05 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0xe5 ; '.'
0000000000000de1         db  0x02 ; '.'
0000000000000de2         db  0x00 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x10 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x14 ; '.'
0000000000000de9         db  0x69 ; 'i'
0000000000000dea         db  0x69 ; 'i'
0000000000000deb         db  0x0d ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x04 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0xf0 ; '.'
0000000000000df1         db  0x02 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x10 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x74 ; 't'
0000000000000df9         db  0x19 ; '.'
0000000000000dfa         db  0x69 ; 'i'
0000000000000dfb         db  0x09 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x03 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0xfa ; '.'
0000000000000e01         db  0x02 ; '.'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x10 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x75 ; 'u'
0000000000000e09         db  0x1a ; '.'
0000000000000e0a         db  0x69 ; 'i'
0000000000000e0b         db  0x09 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x02 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x06 ; '.'
0000000000000e11         db  0x03 ; '.'
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xe18; 0x1220[ (1032 bytes)
        ; File offset : [3608; 4640[ (1032 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000e18         db  0xd0 ; '.'
0000000000000e19         db  0xf9 ; '.'
0000000000000e1a         db  0x20 ; ' '
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x08 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x70 ; 'p'
0000000000000e29         db  0x2e ; '.'
0000000000000e2a         db  0x00 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0xd8 ; '.'
0000000000000e31         db  0xf9 ; '.'
0000000000000e32         db  0x20 ; ' '
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x00 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x08 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x30 ; '0'
0000000000000e41         db  0x2e ; '.'
0000000000000e42         db  0x00 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0xe0 ; '.'
0000000000000e49         db  0xf9 ; '.'
0000000000000e4a         db  0x20 ; ' '
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x00 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x08 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0xc9 ; '.'
0000000000000e59         db  0xae ; '.'
0000000000000e5a         db  0x00 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x00 ; '.'
0000000000000e61         db  0xfa ; '.'
0000000000000e62         db  0x20 ; ' '
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x08 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0xd4 ; '.'
0000000000000e71         db  0xae ; '.'
0000000000000e72         db  0x00 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x20 ; ' '
0000000000000e79         db  0xfa ; '.'
0000000000000e7a         db  0x20 ; ' '
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x08 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0xe2 ; '.'
0000000000000e89         db  0xae ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x40 ; '@'
0000000000000e91         db  0xfa ; '.'
0000000000000e92         db  0x20 ; ' '
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x08 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0xed ; '.'
0000000000000ea1         db  0xae ; '.'
0000000000000ea2         db  0x00 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x60 ; '`'
0000000000000ea9         db  0xfa ; '.'
0000000000000eaa         db  0x20 ; ' '
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x08 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0xf4 ; '.'
0000000000000eb9         db  0xae ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x80 ; '.'
0000000000000ec1         db  0xfa ; '.'
0000000000000ec2         db  0x20 ; ' '
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x08 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x06 ; '.'
0000000000000ed1         db  0xaf ; '.'
0000000000000ed2         db  0x00 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0xa0 ; '.'
0000000000000ed9         db  0xfa ; '.'
0000000000000eda         db  0x20 ; ' '
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x08 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x0e ; '.'
0000000000000ee9         db  0xaf ; '.'
0000000000000eea         db  0x00 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0xc0 ; '.'
0000000000000ef1         db  0xfa ; '.'
0000000000000ef2         db  0x20 ; ' '
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x08 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x1a ; '.'
0000000000000f01         db  0xaf ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0xe0 ; '.'
0000000000000f09         db  0xfa ; '.'
0000000000000f0a         db  0x20 ; ' '
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x08 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x7d ; '}'
0000000000000f19         db  0xae ; '.'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x00 ; '.'
0000000000000f21         db  0xfb ; '.'
0000000000000f22         db  0x20 ; ' '
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x08 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x20 ; ' '
0000000000000f31         db  0xaf ; '.'
0000000000000f32         db  0x00 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x20 ; ' '
0000000000000f39         db  0xfb ; '.'
0000000000000f3a         db  0x20 ; ' '
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x08 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x25 ; '%'
0000000000000f49         db  0xaf ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x60 ; '`'
0000000000000f51         db  0xfb ; '.'
0000000000000f52         db  0x20 ; ' '
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x08 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x2d ; '-'
0000000000000f61         db  0xaf ; '.'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x68 ; 'h'
0000000000000f69         db  0xfb ; '.'
0000000000000f6a         db  0x20 ; ' '
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x08 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x34 ; '4'
0000000000000f79         db  0xaf ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x80 ; '.'
0000000000000f81         db  0xfb ; '.'
0000000000000f82         db  0x20 ; ' '
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x08 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x39 ; '9'
0000000000000f91         db  0xd1 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0xa0 ; '.'
0000000000000f99         db  0xfb ; '.'
0000000000000f9a         db  0x20 ; ' '
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x08 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x97 ; '.'
0000000000000fa9         db  0xc8 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0xa8 ; '.'
0000000000000fb1         db  0xfb ; '.'
0000000000000fb2         db  0x20 ; ' '
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x08 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x9f ; '.'
0000000000000fc1         db  0xc8 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0xb0 ; '.'
0000000000000fc9         db  0xfb ; '.'
0000000000000fca         db  0x20 ; ' '
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x08 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0xa5 ; '.'
0000000000000fd9         db  0xc8 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0xb8 ; '.'
0000000000000fe1         db  0xfb ; '.'
0000000000000fe2         db  0x20 ; ' '
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x08 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0xb2 ; '.'
0000000000000ff1         db  0xc8 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0xc0 ; '.'
0000000000000ff9         db  0xfb ; '.'
0000000000000ffa         db  0x20 ; ' '
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x08 ; '.'
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0xbf ; '.'
0000000000001009         db  0xc8 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0xc8 ; '.'
0000000000001011         db  0xfb ; '.'
0000000000001012         db  0x20 ; ' '
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x08 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x50 ; 'P'
0000000000001021         db  0xad ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xd0 ; '.'
0000000000001029         db  0xfb ; '.'
000000000000102a         db  0x20 ; ' '
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x08 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0xd3 ; '.'
0000000000001039         db  0xc8 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xd8 ; '.'
0000000000001041         db  0xfb ; '.'
0000000000001042         db  0x20 ; ' '
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0xb8 ; '.'
0000000000001051         db  0xc8 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xe0 ; '.'
0000000000001059         db  0xfb ; '.'
000000000000105a         db  0x20 ; ' '
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x74 ; 't'
0000000000001069         db  0xae ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xe8 ; '.'
0000000000001071         db  0xfb ; '.'
0000000000001072         db  0x20 ; ' '
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xdb ; '.'
0000000000001081         db  0xc8 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x08 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x21 ; '!'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x21 ; '!'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x18 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x21 ; '!'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x84 ; '.'
00000000000010b1         db  0xc7 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x20 ; ' '
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x21 ; '!'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x80 ; '.'
00000000000010c9         db  0x52 ; 'R'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x80 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x21 ; '!'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x90 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x21 ; '!'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x98 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x21 ; '!'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x40 ; '@'
00000000000010f9         db  0x02 ; '.'
00000000000010fa         db  0x21 ; '!'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0xd0 ; '.'
0000000000001101         db  0xff ; '.'
0000000000001102         db  0x20 ; ' '
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x06 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x06 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x00 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xd8 ; '.'
0000000000001119         db  0xff ; '.'
000000000000111a         db  0x20 ; ' '
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x06 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x20 ; ' '
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x00 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0xe0 ; '.'
0000000000001131         db  0xff ; '.'
0000000000001132         db  0x20 ; ' '
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x06 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x24 ; '$'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x00 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xe8 ; '.'
0000000000001149         db  0xff ; '.'
000000000000114a         db  0x20 ; ' '
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x06 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x3a ; ':'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x00 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0xf0 ; '.'
0000000000001161         db  0xff ; '.'
0000000000001162         db  0x20 ; ' '
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x06 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x3d ; '='
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x00 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xa0 ; '.'
0000000000001179         db  0x00 ; '.'
000000000000117a         db  0x21 ; '!'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x05 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x41 ; 'A'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x00 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xa8 ; '.'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x21 ; '!'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x05 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x40 ; '@'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x00 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0xb0 ; '.'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x21 ; '!'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x05 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x42 ; 'B'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x00 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0xb8 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x21 ; '!'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x05 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x47 ; 'G'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x00 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0xc0 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x21 ; '!'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x05 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x48 ; 'H'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x00 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xc8 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x21 ; '!'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x05 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x44 ; 'D'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x00 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0xe0 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x21 ; '!'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x05 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x46 ; 'F'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x00 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1220; 0x1790[ (1392 bytes)
        ; File offset : [4640; 6032[ (1392 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001220         db  0x00 ; '.'
0000000000001221         db  0xfe ; '.'
0000000000001222         db  0x20 ; ' '
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x07 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x01 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x00 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x08 ; '.'
0000000000001239         db  0xfe ; '.'
000000000000123a         db  0x20 ; ' '
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x07 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x02 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x00 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x10 ; '.'
0000000000001251         db  0xfe ; '.'
0000000000001252         db  0x20 ; ' '
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x07 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x03 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x00 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x18 ; '.'
0000000000001269         db  0xfe ; '.'
000000000000126a         db  0x20 ; ' '
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x07 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x04 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x00 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x20 ; ' '
0000000000001281         db  0xfe ; '.'
0000000000001282         db  0x20 ; ' '
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x07 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x05 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x00 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x28 ; '('
0000000000001299         db  0xfe ; '.'
000000000000129a         db  0x20 ; ' '
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x07 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x07 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x00 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x30 ; '0'
00000000000012b1         db  0xfe ; '.'
00000000000012b2         db  0x20 ; ' '
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x07 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x08 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x00 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x38 ; '8'
00000000000012c9         db  0xfe ; '.'
00000000000012ca         db  0x20 ; ' '
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x07 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x09 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x00 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x40 ; '@'
00000000000012e1         db  0xfe ; '.'
00000000000012e2         db  0x20 ; ' '
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x07 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x0a ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x00 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x48 ; 'H'
00000000000012f9         db  0xfe ; '.'
00000000000012fa         db  0x20 ; ' '
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x07 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x0b ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x50 ; 'P'
0000000000001311         db  0xfe ; '.'
0000000000001312         db  0x20 ; ' '
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x07 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x0c ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x58 ; 'X'
0000000000001329         db  0xfe ; '.'
000000000000132a         db  0x20 ; ' '
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x07 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x0d ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x60 ; '`'
0000000000001341         db  0xfe ; '.'
0000000000001342         db  0x20 ; ' '
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x07 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x0e ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x68 ; 'h'
0000000000001359         db  0xfe ; '.'
000000000000135a         db  0x20 ; ' '
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x07 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x0f ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x70 ; 'p'
0000000000001371         db  0xfe ; '.'
0000000000001372         db  0x20 ; ' '
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x07 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x10 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x78 ; 'x'
0000000000001389         db  0xfe ; '.'
000000000000138a         db  0x20 ; ' '
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x07 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x11 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x80 ; '.'
00000000000013a1         db  0xfe ; '.'
00000000000013a2         db  0x20 ; ' '
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x07 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x12 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x88 ; '.'
00000000000013b9         db  0xfe ; '.'
00000000000013ba         db  0x20 ; ' '
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x07 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x13 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x90 ; '.'
00000000000013d1         db  0xfe ; '.'
00000000000013d2         db  0x20 ; ' '
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x07 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x14 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x98 ; '.'
00000000000013e9         db  0xfe ; '.'
00000000000013ea         db  0x20 ; ' '
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x07 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x15 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0xa0 ; '.'
0000000000001401         db  0xfe ; '.'
0000000000001402         db  0x20 ; ' '
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x16 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0xa8 ; '.'
0000000000001419         db  0xfe ; '.'
000000000000141a         db  0x20 ; ' '
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x17 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0xb0 ; '.'
0000000000001431         db  0xfe ; '.'
0000000000001432         db  0x20 ; ' '
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x18 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0xb8 ; '.'
0000000000001449         db  0xfe ; '.'
000000000000144a         db  0x20 ; ' '
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x19 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0xc0 ; '.'
0000000000001461         db  0xfe ; '.'
0000000000001462         db  0x20 ; ' '
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x1a ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0xc8 ; '.'
0000000000001479         db  0xfe ; '.'
000000000000147a         db  0x20 ; ' '
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x1b ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0xd0 ; '.'
0000000000001491         db  0xfe ; '.'
0000000000001492         db  0x20 ; ' '
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x1c ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0xd8 ; '.'
00000000000014a9         db  0xfe ; '.'
00000000000014aa         db  0x20 ; ' '
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x1d ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0xe0 ; '.'
00000000000014c1         db  0xfe ; '.'
00000000000014c2         db  0x20 ; ' '
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x1e ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0xe8 ; '.'
00000000000014d9         db  0xfe ; '.'
00000000000014da         db  0x20 ; ' '
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x1f ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0xf0 ; '.'
00000000000014f1         db  0xfe ; '.'
00000000000014f2         db  0x20 ; ' '
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x21 ; '!'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0xf8 ; '.'
0000000000001509         db  0xfe ; '.'
000000000000150a         db  0x20 ; ' '
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x22 ; '"'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0xff ; '.'
0000000000001522         db  0x20 ; ' '
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x23 ; '#'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x08 ; '.'
0000000000001539         db  0xff ; '.'
000000000000153a         db  0x20 ; ' '
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x25 ; '%'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x10 ; '.'
0000000000001551         db  0xff ; '.'
0000000000001552         db  0x20 ; ' '
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x26 ; '&'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x18 ; '.'
0000000000001569         db  0xff ; '.'
000000000000156a         db  0x20 ; ' '
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x27 ; '''
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x20 ; ' '
0000000000001581         db  0xff ; '.'
0000000000001582         db  0x20 ; ' '
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x28 ; '('
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x28 ; '('
0000000000001599         db  0xff ; '.'
000000000000159a         db  0x20 ; ' '
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x29 ; ')'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x30 ; '0'
00000000000015b1         db  0xff ; '.'
00000000000015b2         db  0x20 ; ' '
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x2a ; '*'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x38 ; '8'
00000000000015c9         db  0xff ; '.'
00000000000015ca         db  0x20 ; ' '
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x2b ; '+'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x40 ; '@'
00000000000015e1         db  0xff ; '.'
00000000000015e2         db  0x20 ; ' '
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x2c ; ','
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x48 ; 'H'
00000000000015f9         db  0xff ; '.'
00000000000015fa         db  0x20 ; ' '
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x2d ; '-'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x50 ; 'P'
0000000000001611         db  0xff ; '.'
0000000000001612         db  0x20 ; ' '
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x2e ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x58 ; 'X'
0000000000001629         db  0xff ; '.'
000000000000162a         db  0x20 ; ' '
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x2f ; '/'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x60 ; '`'
0000000000001641         db  0xff ; '.'
0000000000001642         db  0x20 ; ' '
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x30 ; '0'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x68 ; 'h'
0000000000001659         db  0xff ; '.'
000000000000165a         db  0x20 ; ' '
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x31 ; '1'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x70 ; 'p'
0000000000001671         db  0xff ; '.'
0000000000001672         db  0x20 ; ' '
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x32 ; '2'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x78 ; 'x'
0000000000001689         db  0xff ; '.'
000000000000168a         db  0x20 ; ' '
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x33 ; '3'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x80 ; '.'
00000000000016a1         db  0xff ; '.'
00000000000016a2         db  0x20 ; ' '
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x34 ; '4'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x88 ; '.'
00000000000016b9         db  0xff ; '.'
00000000000016ba         db  0x20 ; ' '
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x35 ; '5'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x90 ; '.'
00000000000016d1         db  0xff ; '.'
00000000000016d2         db  0x20 ; ' '
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x36 ; '6'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x98 ; '.'
00000000000016e9         db  0xff ; '.'
00000000000016ea         db  0x20 ; ' '
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x37 ; '7'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xa0 ; '.'
0000000000001701         db  0xff ; '.'
0000000000001702         db  0x20 ; ' '
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x38 ; '8'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0xa8 ; '.'
0000000000001719         db  0xff ; '.'
000000000000171a         db  0x20 ; ' '
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x39 ; '9'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0xb0 ; '.'
0000000000001731         db  0xff ; '.'
0000000000001732         db  0x20 ; ' '
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x3b ; ';'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0xb8 ; '.'
0000000000001749         db  0xff ; '.'
000000000000174a         db  0x20 ; ' '
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x3c ; '<'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0xc0 ; '.'
0000000000001761         db  0xff ; '.'
0000000000001762         db  0x20 ; ' '
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x3e ; '>'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0xc8 ; '.'
0000000000001779         db  0xff ; '.'
000000000000177a         db  0x20 ; ' '
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x3f ; '?'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1790; 0x17a7[ (23 bytes)
        ; File offset : [6032; 6055[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001790         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001794         mov        rax, qword [qword_20ffe0]                   ; qword_20ffe0
000000000000179b         test       rax, rax
000000000000179e         je         loc_17a2

00000000000017a0         call       rax

                     loc_17a2:
00000000000017a2         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000017a6         ret
                        ; endp
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x17b0; 0x1b60[ (944 bytes)
        ; File offset : [6064; 7008[ (944 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_17b0:
00000000000017b0         push       qword [qword_20fdf0]                        ; Begin of unwind block (FDE at 0xd8cc), qword_20fdf0, CODE XREF=sub_17c6+5
00000000000017b6         jmp        qword [qword_20fdf0+8]                      ; 0x20fdf8
                        ; endp
00000000000017bc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
00000000000017c0         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=dtoastr+247, ftoastr+255, ldtoastr+230, vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17c6:
00000000000017c6         push       0x0
00000000000017cb         jmp        loc_17b0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
00000000000017d0         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+2198, main+3293, main+4156, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40, rpl_vfprintf+120, rpl_vfprintf+200, vasnprintf+402
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17d6:
00000000000017d6         push       0x1
00000000000017db         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000017e0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=sub_3dfe+587, set_program_name+154, sub_63e0+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, xstrtol_fatal+118
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17e6:
00000000000017e6         push       0x2
00000000000017eb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000017f0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+2863, check_and_close+302, open_next_file+214, skip+240, read_char+32, read_block+72, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17f6:
00000000000017f6         push       0x3
00000000000017fb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001800         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+964, usage+1157, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1806:
0000000000001806         push       0x4
000000000000180b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001810         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1816:
0000000000001816         push       0x5
000000000000181b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001820         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1826:
0000000000001826         push       0x6
000000000000182b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_puts:        // puts
0000000000001830         jmp        qword [puts@GOT]                            ; puts, puts@GOT, CODE XREF=write_block+563
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1836:
0000000000001836         push       0x7
000000000000183b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ferror:        // ferror
0000000000001840         jmp        qword [ferror@GOT]                          ; ferror, ferror@GOT, CODE XREF=xvprintf+39, xvfprintf+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1846:
0000000000001846         push       0x8
000000000000184b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtod:        // strtod
0000000000001850         jmp        qword [strtod@GOT]                          ; strtod, strtod@GOT, CODE XREF=dtoastr+280
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1856:
0000000000001856         push       0x9
000000000000185b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localeconv:        // localeconv
0000000000001860         jmp        qword [localeconv@GOT]                      ; localeconv, localeconv@GOT, CODE XREF=sub_3dfe+546
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1866:
0000000000001866         push       0xa
000000000000186b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fread_unlocked:        // fread_unlocked
0000000000001870         jmp        qword [fread_unlocked@GOT]                  ; fread_unlocked, fread_unlocked@GOT, CODE XREF=read_block+130
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1876:
0000000000001876         push       0xb
000000000000187b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001880         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+87
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1886:
0000000000001886         push       0xc
000000000000188b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001890         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1896:
0000000000001896         push       0xd
000000000000189b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
00000000000018a0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+75
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18a6:
00000000000018a6         push       0xe
00000000000018ab         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
00000000000018b0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+2346, main+2382, main+2855, main+3688, main+4314, main+4442, main+4512, decode_format_string+695, sub_3dfe+486, sub_3dfe+956, check_and_close+113
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18b6:
00000000000018b6         push       0xf
00000000000018bb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
00000000000018c0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18c6:
00000000000018c6         push       0x10
00000000000018cb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
00000000000018d0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=sub_3dfe+156, sub_3dfe+564, argmatch+33, argmatch+174, quotearg_buffer_restyled+343, sub_63e0+411, sub_63e0+1742, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18d6:
00000000000018d6         push       0x11
00000000000018db         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
00000000000018e0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+4423, format_address_std+286, print_named_ascii+231, print_long_long+239, print_long+239, print_int+239, print_short+223, print_s_short+223, print_long_double+271, print_double+271, print_float+287
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18e6:
00000000000018e6         push       0x12
00000000000018eb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
00000000000018f0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+383
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18f6:
00000000000018f6         push       0x13
00000000000018fb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001900         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1906:
0000000000001906         push       0x14
000000000000190b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001910         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=parse_old_offset+32, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1916:
0000000000001916         push       0x15
000000000000191b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001920         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=main+4274, main+4290, write_block+496, write_block+605, write_block+669, format_address_paren+105, format_address_paren+117, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1926:
0000000000001926         push       0x16
000000000000192b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001930         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1936:
0000000000001936         push       0x17
000000000000193b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001940         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1946:
0000000000001946         push       0x18
000000000000194b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001950         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=main+4387, main+4418, sub_3dfe+1114, sub_3dfe+1145, sub_3dfe+1176, sub_3dfe+1217, read_block+193, xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1956:
0000000000001956         push       0x19
000000000000195b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001960         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1966:
0000000000001966         push       0x1a
000000000000196b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtof:        // strtof
0000000000001970         jmp        qword [strtof@GOT]                          ; strtof, strtof@GOT, CODE XREF=ftoastr+288
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1976:
0000000000001976         push       0x1b
000000000000197b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001980         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=main+3777, quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1986:
0000000000001986         push       0x1c
000000000000198b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fgetc:        // fgetc
0000000000001990         jmp        qword [fgetc@GOT]                           ; fgetc, fgetc@GOT, CODE XREF=read_char+67
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1996:
0000000000001996         push       0x1d
000000000000199b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
00000000000019a0         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=write_block+534, argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x1e
00000000000019ab         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
00000000000019b0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=format_address_std+110, usage+163, usage+200, usage+237, usage+274, usage+311, usage+348, usage+385, usage+422, usage+459, usage+496
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x1f
00000000000019bb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
00000000000019c0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x20
00000000000019cb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
00000000000019d0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, vasnprintf+686, vasnprintf+912, vasnprintf+973, vasnprintf+2590, vasnprintf+3085, vasnprintf+3403, vasnprintf+3547, vasnprintf+4227, printf_parse+2492, printf_parse+2595
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x21
00000000000019db         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
00000000000019e0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=skip+194, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x22
00000000000019eb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
00000000000019f0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497, vasnprintf+4191, printf_parse+2420, printf_parse+2528, printf_parse+2852, printf_parse+3169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x23
00000000000019fb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001a00         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x24
0000000000001a0b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001a10         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x25
0000000000001a1b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001a20         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=skip+209
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x26
0000000000001a2b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001a30         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x27
0000000000001a3b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001a40         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=main+3956, main+3974, main+3988, main+4002, main+4016, main+4030, main+4044, write_block+353
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0x28
0000000000001a4b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001a50         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0x29
0000000000001a5b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001a60         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+56, usage+939, usage+1132, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0x2a
0000000000001a6b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001a70         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=write_block+324, write_block+651, usage+126, usage+927, usage+1020, usage+1081, usage+1120, usage+1223, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0x2b
0000000000001a7b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setvbuf:        // setvbuf
0000000000001a80         jmp        qword [setvbuf@GOT]                         ; setvbuf, setvbuf@GOT, CODE XREF=open_next_file+268
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0x2c
0000000000001a8b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtold:        // strtold
0000000000001a90         jmp        qword [strtold@GOT]                         ; strtold, strtold@GOT, CODE XREF=ldtoastr+265
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x2d
0000000000001a9b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001aa0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+2363, main+2403, main+2880, main+3711, main+4331, main+4463, main+4529, decode_format_string+714, sub_3dfe+508, sub_3dfe+973, check_and_close+127
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x2e
0000000000001aab         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001ab0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x2f
0000000000001abb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000001ac0         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=open_next_file+146
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x30
0000000000001acb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fread_unlocked_chk:        // __fread_unlocked_chk
0000000000001ad0         jmp        qword [__fread_unlocked_chk@GOT]            ; __fread_unlocked_chk, __fread_unlocked_chk@GOT, CODE XREF=skip+350
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x31
0000000000001adb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001ae0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x32
0000000000001aeb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001af0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+1367, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x33
0000000000001afb         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001b00         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149, rpl_vfprintf+102
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x34
0000000000001b0b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001b10         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, argmatch_valid+122, argmatch_valid+198, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x35
0000000000001b1b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001b20         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_63e0+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x36
0000000000001b2b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001b30         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_63e0+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x37
0000000000001b3b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001b40         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=main+2737, main+3029, sub_4410+31, write_block+366, sub_6180+51, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x38
0000000000001b4b         jmp        0x17b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000001b50         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=decode_format_string+470, sub_3dfe+134, sub_3dfe+815, sub_3dfe+901, sub_4410+98
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x39
0000000000001b5b         jmp        0x17b0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1b60; 0x1b68[ (8 bytes)
        ; File offset : [7008; 7016[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20fff0:        // qword_20fff0
0000000000001b60         jmp        qword [qword_20fff0]                        ; qword, End of unwind block (FDE at 0xd8cc), Begin of unwind block (FDE at 0xd8f4), qword_20fff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001b66         align      8
0000000000001b68         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xd8f4)
0000000000001b69         db  0x00 ; '.'
0000000000001b6a         db  0x00 ; '.'
0000000000001b6b         db  0x00 ; '.'
0000000000001b6c         db  0x00 ; '.'
0000000000001b6d         db  0x00 ; '.'
0000000000001b6e         db  0x00 ; '.'
0000000000001b6f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1b70; 0xac9e[ (37166 bytes)
        ; File offset : [7024; 44190[ (37166 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     main:
0000000000001b70         push       r15                                         ; Begin of unwind block (FDE at 0xdf94), DATA XREF=_start+29
0000000000001b72         push       r14
0000000000001b74         mov        r14d, edi
0000000000001b77         push       r13
0000000000001b79         push       r12
0000000000001b7b         mov        r13, rsi
0000000000001b7e         push       rbp
0000000000001b7f         push       rbx
0000000000001b80         sub        rsp, 0x58
0000000000001b84         mov        rdi, qword [rsi]
0000000000001b87         mov        rax, qword [fs:0x28]
0000000000001b90         mov        qword [rsp+0x88+var_40], rax
0000000000001b95         xor        eax, eax
0000000000001b97         call       set_program_name                            ; set_program_name
0000000000001b9c         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xcdc1
0000000000001ba3         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001ba8         call       j_setlocale                                 ; setlocale
0000000000001bad         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001bb4         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001bbb         call       j_bindtextdomain                            ; bindtextdomain
0000000000001bc0         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001bc7         call       j_textdomain                                ; textdomain
0000000000001bcc         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001bd3         call       atexit                                      ; atexit
0000000000001bd8         lea        rax, qword [integral_type_size]             ; integral_type_size
0000000000001bdf         lea        rdx, qword [rax+0x24]
0000000000001be3         nop        dword [rax+rax]

                     loc_1be8:
0000000000001be8         mov        dword [rax], 0x0                            ; CODE XREF=main+133
0000000000001bee         add        rax, 0x4
0000000000001bf2         cmp        rax, rdx
0000000000001bf5         jne        loc_1be8

0000000000001bf7         lea        rax, qword [fp_type_size]                   ; fp_type_size
0000000000001bfe         mov        dword [dword_210184], 0x1                   ; dword_210184
0000000000001c08         mov        dword [dword_210188], 0x2                   ; dword_210188
0000000000001c12         mov        dword [dword_210190], 0x3                   ; dword_210190
0000000000001c1c         mov        dword [dword_2101a0], 0x5                   ; dword_2101a0
0000000000001c26         lea        rdx, qword [rax+0x44]
0000000000001c2a         nop        word [rax+rax]

                     loc_1c30:
0000000000001c30         mov        dword [rax], 0x0                            ; CODE XREF=main+205
0000000000001c36         add        rax, 0x4
0000000000001c3a         cmp        rdx, rax
0000000000001c3d         jne        loc_1c30

0000000000001c3f         lea        rax, qword [format_address_std]             ; format_address_std
0000000000001c46         lea        rbx, qword [rsp+0x88+var_68]
0000000000001c4b         lea        rbp, qword [switch_table_c070]              ; switch_table_c070
0000000000001c52         mov        dword [dword_210130], 0x6                   ; dword_210130
0000000000001c5c         mov        dword [dword_210160], 0x8                   ; dword_210160
0000000000001c66         mov        r12d, 0x1
0000000000001c6c         mov        qword [format_address], rax                 ; format_address
0000000000001c73         lea        rax, qword [rsp+0x88+var_60]
0000000000001c78         mov        dword [dword_210140], 0x7                   ; dword_210140
0000000000001c82         mov        qword [n_specs], 0x0                        ; n_specs
0000000000001c8d         mov        qword [n_specs_allocated], 0x0              ; n_specs_allocated
0000000000001c98         xor        r15d, r15d
0000000000001c9b         mov        qword [spec], 0x0                           ; spec
0000000000001ca6         mov        dword [address_base], 0x8                   ; address_base
0000000000001cb0         mov        dword [address_pad_len], 0x7                ; address_pad_len
0000000000001cba         mov        byte [flag_dump_strings], 0x0               ; flag_dump_strings
0000000000001cc1         mov        byte [rsp+0x88+var_88], 0x0
0000000000001cc5         mov        qword [rsp+0x88+var_80], rax
0000000000001cca         nop        word [rax+rax]

                     loc_1cd0:
0000000000001cd0         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=main+499, main+512, main+527, main+604, main+629, main+661, main+687, main+740, main+767, main+791, main+815
0000000000001cd7         lea        rdx, qword [short_options]                  ; argument "__shortopts" for method j_getopt_long, "A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx"
0000000000001cde         mov        r8, rbx                                     ; argument "__longind" for method j_getopt_long
0000000000001ce1         mov        rsi, r13                                    ; argument "___argv" for method j_getopt_long
0000000000001ce4         mov        edi, r14d                                   ; argument "___argc" for method j_getopt_long
0000000000001ce7         mov        dword [rsp+0x88+var_68], 0xffffffff
0000000000001cef         call       j_getopt_long                               ; getopt_long
0000000000001cf4         cmp        eax, 0xffffffff
0000000000001cf7         je         loc_2100

0000000000001cfd         add        eax, 0x83
0000000000001d02         cmp        eax, 0x104
0000000000001d07         ja         loc_24d8

0000000000001d0d         movsxd     rax, dword [rbp+rax*4]
0000000000001d12         add        rax, rbp
0000000000001d15         jmp        rax                                         ; switch statement using table at 0xc070, with 261 cases, 0x1d20,0x1d78,0x1d88,0x1dd8,0x1df0,0x1e10,0x1e28,0x1e60,0x1e78,0x1e90,0x1ea8,0x1ec0,0x1ed8,0x1ef0,0x1f08,0x1f58,0x1f70,0x1fc0,0x1fd8,0x1ff0,0x2008,0x2020,0x2038,0x2098,0x24d8,0x27f8
0000000000001d17         align      32

                     loc_1d20:
0000000000001d20         mov        r9, qword [argmatch_die]                    ; case 260, argmatch_die, CODE XREF=main+421
0000000000001d27         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001d2e         lea        rdx, qword [endian_args]                    ; endian_args
0000000000001d35         lea        rcx, qword [endian_types]                   ; endian_types
0000000000001d3c         lea        rdi, qword [aEndian]                        ; "--endian"
0000000000001d43         mov        r8d, 0x4
0000000000001d49         call       __xargmatch_internal                        ; __xargmatch_internal
0000000000001d4e         lea        rdx, qword [endian_types]                   ; endian_types
0000000000001d55         mov        eax, dword [rdx+rax*4]
0000000000001d58         test       eax, eax
0000000000001d5a         je         loc_20f4

0000000000001d60         sub        eax, 0x1
0000000000001d63         jne        loc_1cd0

0000000000001d69         mov        byte [input_swap], 0x1                      ; input_swap
0000000000001d70         jmp        loc_1cd0
0000000000001d75         align      8

                     loc_1d78:
0000000000001d78         mov        byte [traditional], 0x1                     ; case 259, traditional, CODE XREF=main+421
0000000000001d7f         jmp        loc_1cd0
0000000000001d84         align      8

                     loc_1d88:
0000000000001d88         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 250, optarg@@GLIBC_2.2.5, CODE XREF=main+421
0000000000001d8f         test       rdi, rdi
0000000000001d92         je         loc_20dc

0000000000001d98         mov        rcx, qword [rsp+0x88+var_80]
0000000000001d9d         lea        r8, qword [aWrittenBySSAnd+27]              ; 0xcdc1
0000000000001da4         xor        esi, esi
0000000000001da6         mov        edx, 0xa
0000000000001dab         call       xstrtoumax                                  ; xstrtoumax
0000000000001db0         test       eax, eax
0000000000001db2         jne        loc_2ce4

0000000000001db8         mov        rax, qword [rsp+0x88+var_60]
0000000000001dbd         mov        byte [rsp+0x88+var_88], 0x1
0000000000001dc1         mov        r15d, 0x1
0000000000001dc7         mov        qword [rsp+0x88+var_78], rax
0000000000001dcc         jmp        loc_1cd0
0000000000001dd1         align      8

                     loc_1dd8:
0000000000001dd8         mov        byte [abbreviate_duplicate_blocks], 0x0     ; case 249, abbreviate_duplicate_blocks, CODE XREF=main+421
0000000000001ddf         mov        r15d, 0x1
0000000000001de5         jmp        loc_1cd0
0000000000001dea         align      16

                     loc_1df0:
0000000000001df0         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 247, argument #1 for method decode_format_string, optarg@@GLIBC_2.2.5, CODE XREF=main+421
0000000000001df7         mov        r15d, 0x1
0000000000001dfd         call       decode_format_string                        ; decode_format_string
0000000000001e02         and        r12d, eax
0000000000001e05         jmp        loc_1cd0
0000000000001e0a         align      16

                     loc_1e10:
0000000000001e10         lea        rdi, qword [aEndian+39]                     ; case 246, argument #1 for method decode_format_string, 0xaea2, CODE XREF=main+421
0000000000001e17         call       decode_format_string                        ; decode_format_string
0000000000001e1c         and        r12d, eax
0000000000001e1f         jmp        loc_1cd0
0000000000001e24         align      8

                     loc_1e28:
0000000000001e28         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 237, optarg@@GLIBC_2.2.5, CODE XREF=main+421
0000000000001e2f         lea        r8, qword [multipliers.7627]                ; "bEGKkMmPTYZ0"
0000000000001e36         lea        rcx, qword [n_bytes_to_skip]                ; n_bytes_to_skip
0000000000001e3d         xor        edx, edx
0000000000001e3f         xor        esi, esi
0000000000001e41         call       xstrtoumax                                  ; xstrtoumax
0000000000001e46         test       eax, eax
0000000000001e48         jne        loc_2d26

                     loc_1e4e:
0000000000001e4e         mov        r15d, 0x1                                   ; CODE XREF=main+1063
0000000000001e54         jmp        loc_1cd0
0000000000001e59         align      32

                     loc_1e60:
0000000000001e60         lea        rdi, qword [aEndian+27]                     ; case 236, argument #1 for method decode_format_string, 0xae96, CODE XREF=main+421
0000000000001e67         call       decode_format_string                        ; decode_format_string
0000000000001e6c         and        r12d, eax
0000000000001e6f         jmp        loc_1cd0
0000000000001e74         align      8

                     loc_1e78:
0000000000001e78         lea        rdi, qword [aEndian+42]                     ; case 251, argument #1 for method decode_format_string, 0xaea5, CODE XREF=main+421
0000000000001e7f         call       decode_format_string                        ; decode_format_string
0000000000001e84         and        r12d, eax
0000000000001e87         jmp        loc_1cd0
0000000000001e8c         align      16

                     loc_1e90:
0000000000001e90         lea        rdi, qword [aEndian+21]                     ; case 233, argument #1 for method decode_format_string, 0xae90, CODE XREF=main+421
0000000000001e97         call       decode_format_string                        ; decode_format_string
0000000000001e9c         and        r12d, eax
0000000000001e9f         jmp        loc_1cd0
0000000000001ea4         align      8

                     loc_1ea8:
0000000000001ea8         lea        rdi, qword [aEndian+15]                     ; case 231, argument #1 for method decode_format_string, 0xae8a, CODE XREF=main+421
0000000000001eaf         call       decode_format_string                        ; decode_format_string
0000000000001eb4         and        r12d, eax
0000000000001eb7         jmp        loc_1cd0
0000000000001ebc         align      64

                     loc_1ec0:
0000000000001ec0         lea        rdi, qword [aInvalidTypeStr_ad38+24]        ; case 230, argument #1 for method decode_format_string, 0xad50, CODE XREF=main+421
0000000000001ec7         call       decode_format_string                        ; decode_format_string
0000000000001ecc         and        r12d, eax
0000000000001ecf         jmp        loc_1cd0
0000000000001ed4         align      8

                     loc_1ed8:
0000000000001ed8         lea        rdi, qword [aEndian+9]                      ; case 229, argument #1 for method decode_format_string, 0xae84, CODE XREF=main+421
0000000000001edf         call       decode_format_string                        ; decode_format_string
0000000000001ee4         and        r12d, eax
0000000000001ee7         jmp        loc_1cd0
0000000000001eec         align      16

                     loc_1ef0:
0000000000001ef0         lea        rdi, qword [aInvalidTypeStr_ad38+35]        ; case 228, argument #1 for method decode_format_string, 0xad5b, CODE XREF=main+421
0000000000001ef7         call       decode_format_string                        ; decode_format_string
0000000000001efc         and        r12d, eax
0000000000001eff         jmp        loc_1cd0
0000000000001f04         align      8

                     loc_1f08:
0000000000001f08         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 214, optarg@@GLIBC_2.2.5, CODE XREF=main+421
0000000000001f0f         test       rdi, rdi
0000000000001f12         je         loc_20cc

0000000000001f18         mov        rcx, qword [rsp+0x88+var_80]
0000000000001f1d         lea        r8, qword [multipliers.7627]                ; "bEGKkMmPTYZ0"
0000000000001f24         xor        edx, edx
0000000000001f26         xor        esi, esi
0000000000001f28         call       xstrtoumax                                  ; xstrtoumax
0000000000001f2d         test       eax, eax
0000000000001f2f         jne        loc_2d44

0000000000001f35         mov        rax, qword [rsp+0x88+var_60]
0000000000001f3a         mov        qword [string_min], rax                     ; string_min

                     loc_1f41:
0000000000001f41         mov        byte [flag_dump_strings], 0x1               ; flag_dump_strings, CODE XREF=main+1383
0000000000001f48         mov        r15d, 0x1
0000000000001f4e         jmp        loc_1cd0
0000000000001f53         align      8

                     loc_1f58:
0000000000001f58         lea        rdi, qword [aEndian+33]                     ; case 210, argument #1 for method decode_format_string, 0xae9c, CODE XREF=main+421
0000000000001f5f         call       decode_format_string                        ; decode_format_string
0000000000001f64         and        r12d, eax
0000000000001f67         jmp        loc_1cd0
0000000000001f6c         align      16

                     loc_1f70:
0000000000001f70         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 209, optarg@@GLIBC_2.2.5, CODE XREF=main+421
0000000000001f77         lea        r8, qword [multipliers.7627]                ; "bEGKkMmPTYZ0"
0000000000001f7e         lea        rcx, qword [max_bytes_to_format]            ; max_bytes_to_format
0000000000001f85         xor        edx, edx
0000000000001f87         xor        esi, esi
0000000000001f89         mov        byte [limit_bytes_to_format], 0x1           ; limit_bytes_to_format
0000000000001f90         call       xstrtoumax                                  ; xstrtoumax
0000000000001f95         test       eax, eax
0000000000001f97         je         loc_1e4e

0000000000001f9d         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5
0000000000001fa4         mov        esi, dword [rsp+0x88+var_68]
0000000000001fa8         lea        rcx, qword [long_options]                   ; long_options
0000000000001faf         mov        edx, 0x4e
0000000000001fb4         mov        edi, eax
0000000000001fb6         call       xstrtol_fatal                               ; xstrtol_fatal
0000000000001fbb         nop        dword [rax+rax]

                     loc_1fc0:
0000000000001fc0         lea        rdi, qword [aEndian+30]                     ; case 239, argument #1 for method decode_format_string, 0xae99, CODE XREF=main+421
0000000000001fc7         call       decode_format_string                        ; decode_format_string
0000000000001fcc         and        r12d, eax
0000000000001fcf         jmp        loc_1cd0
0000000000001fd4         align      8

                     loc_1fd8:
0000000000001fd8         lea        rdi, qword [aEndian+24]                     ; case 219, argument #1 for method decode_format_string, 0xae93, CODE XREF=main+421
0000000000001fdf         call       decode_format_string                        ; decode_format_string
0000000000001fe4         and        r12d, eax
0000000000001fe7         jmp        loc_1cd0
0000000000001fec         align      16

                     loc_1ff0:
0000000000001ff0         lea        rdi, qword [aEndian+18]                     ; case 232, argument #1 for method decode_format_string, 0xae8d, CODE XREF=main+421
0000000000001ff7         call       decode_format_string                        ; decode_format_string
0000000000001ffc         and        r12d, eax
0000000000001fff         jmp        loc_1cd0
0000000000002004         align      8

                     loc_2008:
0000000000002008         lea        rdi, qword [aEndian+12]                     ; case 199, argument #1 for method decode_format_string, 0xae87, CODE XREF=main+421
000000000000200f         call       decode_format_string                        ; decode_format_string
0000000000002014         and        r12d, eax
0000000000002017         jmp        loc_1cd0
000000000000201c         align      32

                     loc_2020:
0000000000002020         lea        rdi, qword [aEndian+36]                     ; case 242, argument #1 for method decode_format_string, 0xae9f, CODE XREF=main+421
0000000000002027         call       decode_format_string                        ; decode_format_string
000000000000202c         and        r12d, eax
000000000000202f         jmp        loc_1cd0
0000000000002034         align      8

                     loc_2038:
0000000000002038         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; case 196, optarg@@GLIBC_2.2.5, CODE XREF=main+421
000000000000203f         movzx      r15d, byte [rax]
0000000000002043         cmp        r15b, 0x6e
0000000000002047         je         loc_242c

000000000000204d         jle        loc_2272

0000000000002053         cmp        r15b, 0x6f
0000000000002057         je         loc_22a9

000000000000205d         cmp        r15b, 0x78
0000000000002061         jne        loc_2cbc

0000000000002067         lea        rax, qword [format_address_std]             ; format_address_std
000000000000206e         mov        dword [address_base], 0x10                  ; address_base
0000000000002078         mov        dword [address_pad_len], 0x6                ; address_pad_len
0000000000002082         mov        r15d, 0x1
0000000000002088         mov        qword [format_address], rax                 ; format_address
000000000000208f         jmp        loc_1cd0
0000000000002094         align      8

                     loc_2098:
0000000000002098         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 0, stdout@@GLIBC_2.2.5, CODE XREF=main+421
000000000000209f         mov        rcx, qword [Version]                        ; Version
00000000000020a6         lea        r8, qword [aJimMeyering]                    ; "Jim Meyering"
00000000000020ad         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xae36
00000000000020b4         lea        rsi, qword [a0NNBytesperblo+30]             ; 0xadbd
00000000000020bb         xor        r9d, r9d
00000000000020be         xor        eax, eax
00000000000020c0         call       version_etc                                 ; version_etc
00000000000020c5         xor        edi, edi                                    ; argument "__status" for method j_exit
00000000000020c7         call       j_exit                                      ; exit
                        ; endp

                     loc_20cc:
00000000000020cc         mov        qword [string_min], 0x3                     ; string_min, CODE XREF=main+930
00000000000020d7         jmp        loc_1f41

                     loc_20dc:
00000000000020dc         mov        byte [rsp+0x88+var_88], 0x1                 ; CODE XREF=main+546
00000000000020e0         mov        r15d, 0x1
00000000000020e6         mov        qword [rsp+0x88+var_78], 0x20
00000000000020ef         jmp        loc_1cd0

                     loc_20f4:
00000000000020f4         mov        byte [input_swap], 0x0                      ; input_swap, CODE XREF=main+490
00000000000020fb         jmp        loc_1cd0

                     loc_2100:
0000000000002100         test       r12b, r12b                                  ; CODE XREF=main+391
0000000000002103         je         loc_22d6

0000000000002109         cmp        byte [flag_dump_strings], 0x0               ; flag_dump_strings
0000000000002110         je         loc_2120

0000000000002112         cmp        qword [n_specs], 0x0                        ; n_specs
000000000000211a         jne        loc_2d02

                     loc_2120:
0000000000002120         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1440
0000000000002127         movzx      edx, byte [traditional]                     ; traditional
000000000000212e         sub        r14d, eax
0000000000002131         test       r15b, r15b
0000000000002134         je         loc_244f

000000000000213a         test       dl, dl
000000000000213c         jne        loc_26b5

                     loc_2142:
0000000000002142         cmp        byte [flag_pseudo_start], 0x0               ; flag_pseudo_start, CODE XREF=main+2305, main+2313, main+2955, main+3150, main+3190, main+3278, main+3380, main+3665, main+4141, main+4261
0000000000002149         je         loc_216d

000000000000214b         lea        rax, qword [format_address_none]            ; format_address_none
0000000000002152         cmp        qword [format_address], rax                 ; format_address
0000000000002159         je         loc_28a9

000000000000215f         lea        rax, qword [format_address_label]           ; format_address_label
0000000000002166         mov        qword [format_address], rax                 ; format_address

                     loc_216d:
000000000000216d         cmp        byte [limit_bytes_to_format], 0x0           ; limit_bytes_to_format, CODE XREF=main+1497, main+3419
0000000000002174         je         loc_219c

0000000000002176         xor        edx, edx
0000000000002178         mov        rax, qword [max_bytes_to_format]            ; max_bytes_to_format
000000000000217f         add        rax, qword [n_bytes_to_skip]                ; n_bytes_to_skip
0000000000002186         jb         loc_2c60

                     loc_218c:
000000000000218c         test       rdx, rdx                                    ; CODE XREF=main+4341
000000000000218f         mov        qword [end_offset], rax                     ; end_offset
0000000000002196         jne        loc_2c3c

                     loc_219c:
000000000000219c         cmp        qword [n_specs], 0x0                        ; n_specs, CODE XREF=main+1540
00000000000021a4         je         loc_2663

                     loc_21aa:
00000000000021aa         test       r14d, r14d                                  ; CODE XREF=main+2815
00000000000021ad         jle        loc_2650

00000000000021b3         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
00000000000021ba         lea        rax, qword [r13+rax*8]
00000000000021bf         mov        qword [file_list], rax                      ; file_list

                     loc_21c6:
00000000000021c6         call       open_next_file                              ; open_next_file, CODE XREF=main+2798
00000000000021cb         cmp        qword [in_stream], 0x0                      ; in_stream
00000000000021d3         mov        r13d, eax
00000000000021d6         je         loc_2412

00000000000021dc         mov        rdi, qword [n_bytes_to_skip]                ; argument #1 for method skip, n_bytes_to_skip
00000000000021e3         call       skip                                        ; skip
00000000000021e8         and        r13d, eax
00000000000021eb         cmp        qword [in_stream], 0x0                      ; in_stream
00000000000021f3         je         loc_2412

00000000000021f9         xor        eax, eax
00000000000021fb         cmp        byte [flag_pseudo_start], 0x0               ; flag_pseudo_start
0000000000002202         jne        loc_2700

                     loc_2208:
0000000000002208         mov        r9, qword [n_specs]                         ; n_specs, CODE XREF=main+2972
000000000000220f         mov        r10, qword [spec]                           ; spec
0000000000002216         lea        r11, qword [width_bytes]                    ; width_bytes
000000000000221d         mov        qword [pseudo_offset], rax                  ; pseudo_offset
0000000000002224         xor        edi, edi
0000000000002226         mov        r8d, 0x1

                     loc_222c:
000000000000222c         cmp        rdi, r9                                     ; CODE XREF=main+1792
000000000000222f         je         loc_24e2

0000000000002235         imul       rax, rdi, 0x28
0000000000002239         movsxd     r8, r8d
000000000000223c         mov        eax, dword [r10+rax+4]
0000000000002241         movsxd     rsi, dword [r11+rax*4]
0000000000002245         mov        rax, r8
0000000000002248         mov        rcx, rsi
000000000000224b         jmp        loc_2253
000000000000224d         align      16

                     loc_2250:
0000000000002250         mov        rcx, rdx                                    ; CODE XREF=main+1774

                     loc_2253:
0000000000002253         xor        edx, edx                                    ; CODE XREF=main+1755
0000000000002255         div        rcx
0000000000002258         mov        rax, rcx
000000000000225b         test       rdx, rdx
000000000000225e         jne        loc_2250

0000000000002260         mov        rax, rsi
0000000000002263         xor        edx, edx
0000000000002265         add        rdi, 0x1
0000000000002269         div        rcx
000000000000226c         imul       r8d, eax
0000000000002270         jmp        loc_222c

                     loc_2272:
0000000000002272         cmp        r15b, 0x64                                  ; CODE XREF=main+1245
0000000000002276         jne        loc_2cbc

000000000000227c         lea        rax, qword [format_address_std]             ; format_address_std
0000000000002283         mov        dword [address_base], 0xa                   ; address_base
000000000000228d         mov        dword [address_pad_len], 0x7                ; address_pad_len
0000000000002297         mov        r15d, 0x1
000000000000229d         mov        qword [format_address], rax                 ; format_address
00000000000022a4         jmp        loc_1cd0

                     loc_22a9:
00000000000022a9         lea        rax, qword [format_address_std]             ; format_address_std, CODE XREF=main+1255
00000000000022b0         mov        dword [address_base], 0x8                   ; address_base
00000000000022ba         mov        dword [address_pad_len], 0x7                ; address_pad_len
00000000000022c4         mov        r15d, 0x1
00000000000022ca         mov        qword [format_address], rax                 ; format_address
00000000000022d1         jmp        loc_1cd0

                     loc_22d6:
00000000000022d6         mov        eax, 0x1                                    ; CODE XREF=main+1427

                     loc_22db:
00000000000022db         mov        rbx, qword [rsp+0x88+var_40]                ; CODE XREF=main+2231
00000000000022e0         xor        rbx, qword [fs:0x28]
00000000000022e9         jne        loc_2cb7

00000000000022ef         add        rsp, 0x58
00000000000022f3         pop        rbx
00000000000022f4         pop        rbp
00000000000022f5         pop        r12
00000000000022f7         pop        r13
00000000000022f9         pop        r14
00000000000022fb         pop        r15
00000000000022fd         ret
                        ; endp

                     loc_22fe:
00000000000022fe         mov        eax, 0x2                                    ; CODE XREF=main+2590
0000000000002303         xor        ecx, ecx
0000000000002305         mul        rdi
0000000000002308         jo         loc_2c6f

                     loc_230e:
000000000000230e         test       rax, rax                                    ; CODE XREF=main+4356
0000000000002311         js         loc_2c6a

0000000000002317         test       rcx, rcx
000000000000231a         jne        loc_2c6a

0000000000002320         add        rdi, rdi                                    ; argument #1 for method xmalloc
0000000000002323         call       xmalloc                                     ; xmalloc
0000000000002328         movzx      ebx, byte [limit_bytes_to_format]           ; limit_bytes_to_format
000000000000232f         mov        rdi, qword [bytes_per_block]                ; bytes_per_block
0000000000002336         mov        qword [rsp+0x88+var_58], rax
000000000000233b         mov        r14, qword [n_bytes_to_skip]                ; n_bytes_to_skip
0000000000002342         add        rax, rdi
0000000000002345         test       bl, bl
0000000000002347         mov        qword [rsp+0x88+var_50], rax
000000000000234c         je         loc_28d0

0000000000002352         lea        r12, qword [rsp+0x88+var_60]
0000000000002357         mov        byte [rsp+0x88+var_88], r13b
000000000000235b         jmp        loc_23bb

                     loc_235d:
000000000000235d         movzx      edx, bpl                                    ; CODE XREF=main+2133
0000000000002361         mov        rdi, qword [bytes_per_block]                ; bytes_per_block
0000000000002368         sub        rax, r14
000000000000236b         mov        r13, qword [rsp+rdx*8+0x88+var_58]
0000000000002370         mov        r15, rdx
0000000000002373         mov        rdx, r12                                    ; argument #3 for method read_block
0000000000002376         cmp        rax, rdi
0000000000002379         cmovbe     rdi, rax                                    ; argument #1 for method read_block
000000000000237d         mov        rsi, r13                                    ; argument #2 for method read_block
0000000000002380         call       read_block                                  ; read_block
0000000000002385         mov        rsi, qword [rsp+0x88+var_60]
000000000000238a         and        ebx, eax
000000000000238c         cmp        rsi, qword [bytes_per_block]                ; bytes_per_block
0000000000002393         jb         loc_2935

0000000000002399         jne        loc_2c79

000000000000239f         xor        ebp, 0x1
00000000000023a2         mov        rdi, r14                                    ; argument #1 for method write_block
00000000000023a5         mov        rcx, r13                                    ; argument #4 for method write_block
00000000000023a8         movzx      eax, bpl
00000000000023ac         mov        rdx, qword [rsp+rax*8+0x88+var_58]          ; argument #3 for method write_block
00000000000023b1         call       write_block                                 ; write_block
00000000000023b6         add        r14, qword [rsp+0x88+var_60]

                     loc_23bb:
00000000000023bb         mov        rax, qword [end_offset]                     ; end_offset, CODE XREF=main+2027
00000000000023c2         cmp        rax, r14
00000000000023c5         ja         loc_235d

00000000000023c7         movzx      r13d, byte [rsp+0x88+var_88]
00000000000023cc         mov        qword [rsp+0x88+var_60], 0x0

                     loc_23d5:
00000000000023d5         mov        esi, 0xa                                    ; CODE XREF=main+3536, main+3818
00000000000023da         mov        rdi, r14
00000000000023dd         call       qword [format_address]                      ; format_address, format_address
00000000000023e3         cmp        byte [limit_bytes_to_format], 0x0           ; limit_bytes_to_format
00000000000023ea         je         loc_23fe

00000000000023ec         cmp        r14, qword [end_offset]                     ; end_offset
00000000000023f3         jb         loc_23fe

00000000000023f5         xor        edi, edi                                    ; argument #1 for method check_and_close
00000000000023f7         call       check_and_close                             ; check_and_close
00000000000023fc         and        ebx, eax

                     loc_23fe:
00000000000023fe         mov        rdi, qword [rsp+0x88+var_58]                ; argument "__ptr" for method j_free, CODE XREF=main+2170, main+2179
0000000000002403         movzx      ebx, bl
0000000000002406         call       j_free                                      ; free

                     loc_240b:
000000000000240b         and        r13d, ebx                                   ; CODE XREF=main+3302
000000000000240e         and        r13d, 0x1

                     loc_2412:
0000000000002412         cmp        byte [have_read_stdin], 0x0                 ; have_read_stdin, CODE XREF=main+1638, main+1667
0000000000002419         jne        loc_2674

                     loc_241f:
000000000000241f         xor        r13d, 0x1                                   ; CODE XREF=main+2835
0000000000002423         movzx      eax, r13b
0000000000002427         jmp        loc_22db

                     loc_242c:
000000000000242c         lea        rax, qword [format_address_none]            ; format_address_none, CODE XREF=main+1239
0000000000002433         mov        dword [address_pad_len], 0x0                ; address_pad_len
000000000000243d         mov        r15d, 0x1
0000000000002443         mov        qword [format_address], rax                 ; format_address
000000000000244a         jmp        loc_1cd0

                     loc_244f:
000000000000244f         cmp        r14d, 0x2                                   ; CODE XREF=main+1476
0000000000002453         je         loc_2820

0000000000002459         cmp        r14d, 0x3
000000000000245d         je         loc_27b6

0000000000002463         cmp        r14d, 0x1
0000000000002467         je         loc_29a5

                     loc_246d:
000000000000246d         cmp        r14d, 0x1                                   ; CODE XREF=main+2909
0000000000002471         jle        loc_2142

0000000000002477         test       dl, dl
0000000000002479         je         loc_2142

                     loc_247f:
000000000000247f         mov        rdi, qword [r13+rax*8+8]                    ; argument #1 for method quote, CODE XREF=main+3203
0000000000002484         call       quote                                       ; quote
0000000000002489         lea        rsi, qword [aExtraOperandS]                 ; argument "msgid" for method j_dcgettext, "extra operand %s"
0000000000002490         mov        rbx, rax
0000000000002493         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002498         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000249a         call       j_dcgettext                                 ; dcgettext
000000000000249f         mov        rcx, rbx
00000000000024a2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000024a5         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024a7         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000024a9         xor        eax, eax
00000000000024ab         call       j_error                                     ; error
00000000000024b0         lea        rsi, qword [aCompatibilityM]                ; argument "msgid" for method j_dcgettext, "compatibility mode supports at most one file"
00000000000024b7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024bc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024be         call       j_dcgettext                                 ; dcgettext
00000000000024c3         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc7e0
00000000000024ca         mov        rcx, rax
00000000000024cd         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024cf         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000024d1         xor        eax, eax
00000000000024d3         call       j_error                                     ; error

                     loc_24d8:
00000000000024d8         mov        edi, 0x1                                    ; case 258, argument #1 for method usage, CODE XREF=main+407, main+421
00000000000024dd         call       usage                                       ; usage

                     loc_24e2:
00000000000024e2         cmp        byte [rsp+0x88+var_88], 0x0                 ; CODE XREF=main+1727
00000000000024e6         jne        loc_2788

00000000000024ec         cmp        r8d, 0xf
00000000000024f0         jg         loc_2a5f

00000000000024f6         mov        eax, 0x10
00000000000024fb         cdq
00000000000024fc         idiv       r8d
00000000000024ff         imul       eax, r8d
0000000000002503         cdqe
0000000000002505         mov        qword [bytes_per_block], rax                ; bytes_per_block

                     loc_250c:
000000000000250c         imul       r9, r9, 0x28                                ; CODE XREF=main+3137, main+3737, main+3833
0000000000002510         lea        rcx, qword [r10+4]
0000000000002514         mov        rdi, qword [bytes_per_block]                ; bytes_per_block
000000000000251b         xor        r8d, r8d
000000000000251e         mov        rsi, rcx
0000000000002521         lea        r9, qword [r10+r9+4]
0000000000002526         lea        r10, qword [width_bytes]                    ; width_bytes
000000000000252d         jmp        loc_2553

                     loc_252f:
000000000000252f         mov        eax, dword [rsi]                            ; CODE XREF=main+2534
0000000000002531         xor        edx, edx
0000000000002533         movsxd     r11, dword [r10+rax*4]
0000000000002537         mov        rax, rdi
000000000000253a         div        r11
000000000000253d         mov        edx, dword [rsi+0x18]
0000000000002540         add        edx, 0x1
0000000000002543         imul       eax, edx
0000000000002546         cdqe
0000000000002548         cmp        r8, rax
000000000000254b         cmovb      r8, rax
000000000000254f         add        rsi, 0x28

                     loc_2553:
0000000000002553         cmp        r9, rsi                                     ; CODE XREF=main+2493
0000000000002556         jne        loc_252f

0000000000002558         lea        r10, qword [width_bytes]                    ; width_bytes
000000000000255f         jmp        loc_257f

                     loc_2561:
0000000000002561         mov        eax, dword [rcx]                            ; CODE XREF=main+2578
0000000000002563         xor        edx, edx
0000000000002565         add        rcx, 0x28
0000000000002569         movsxd     r9, dword [r10+rax*4]
000000000000256d         mov        rax, rdi
0000000000002570         div        r9
0000000000002573         mov        edx, r8d
0000000000002576         imul       eax, dword [rcx-0x10]
000000000000257a         sub        edx, eax
000000000000257c         mov        dword [rcx-0xc], edx

                     loc_257f:
000000000000257f         cmp        rsi, rcx                                    ; CODE XREF=main+2543
0000000000002582         jne        loc_2561

0000000000002584         movzx      ebp, byte [flag_dump_strings]               ; flag_dump_strings
000000000000258b         test       bpl, bpl
000000000000258e         je         loc_22fe

0000000000002594         cmp        qword [string_min], 0x64                    ; string_min
000000000000259c         mov        edi, 0x64
00000000000025a1         cmovae     rdi, qword [string_min]                     ; argument #1 for method xmalloc, string_min
00000000000025a9         mov        qword [rsp+0x88+var_60], rdi
00000000000025ae         call       xmalloc                                     ; xmalloc
00000000000025b3         mov        r14, qword [n_bytes_to_skip]                ; n_bytes_to_skip
00000000000025ba         mov        qword [rsp+0x88+var_88], rax
00000000000025be         lea        rax, qword [rsp+0x88+var_60]
00000000000025c3         mov        byte [rsp+0x88+var_80], r13b
00000000000025c8         mov        qword [rsp+0x88+var_78], rax

                     loc_25cd:
00000000000025cd         cmp        byte [limit_bytes_to_format], 0x0           ; limit_bytes_to_format, CODE XREF=main+3243
00000000000025d4         je         loc_25f9

00000000000025d6         mov        rdx, qword [string_min]                     ; string_min
00000000000025dd         mov        rax, qword [end_offset]                     ; end_offset
00000000000025e4         cmp        rax, rdx
00000000000025e7         jb         loc_2ba2

00000000000025ed         sub        rax, rdx
00000000000025f0         cmp        rax, r14
00000000000025f3         jbe        loc_2ba2

                     loc_25f9:
00000000000025f9         mov        r13, qword [rsp+0x88+var_88]                ; CODE XREF=main+2660
00000000000025fd         mov        r12, r14
0000000000002600         sub        r13, r14
0000000000002603         jmp        loc_263c

                     loc_2605:
0000000000002605         mov        rdi, rbx                                    ; argument #1 for method read_char, CODE XREF=main+2777
0000000000002608         add        r12, 0x1
000000000000260c         call       read_char                                   ; read_char
0000000000002611         mov        r15d, dword [rsp+0x88+var_68]
0000000000002616         and        ebp, eax
0000000000002618         test       r15d, r15d
000000000000261b         js         loc_2843

0000000000002621         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000002626         mov        rsi, qword [rax]
0000000000002629         movsxd     rcx, r15d
000000000000262c         test       byte [rsi+rcx*2+1], 0x40
0000000000002631         je         loc_2818

0000000000002637         mov        byte [r13+r12-1], r15b

                     loc_263c:
000000000000263c         mov        rax, r12                                    ; CODE XREF=main+2707
000000000000263f         sub        rax, r14
0000000000002642         cmp        qword [string_min], rax                     ; string_min
0000000000002649         ja         loc_2605

000000000000264b         jmp        loc_2763

                     loc_2650:
0000000000002650         lea        rax, qword [default_file_list]              ; default_file_list, CODE XREF=main+1597
0000000000002657         mov        qword [file_list], rax                      ; file_list
000000000000265e         jmp        loc_21c6

                     loc_2663:
0000000000002663         lea        rdi, qword [aExtraOperandS+17]              ; argument #1 for method decode_format_string, 0xaec6, CODE XREF=main+1588
000000000000266a         call       decode_format_string                        ; decode_format_string
000000000000266f         jmp        loc_21aa

                     loc_2674:
0000000000002674         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+2217
000000000000267b         call       rpl_fclose                                  ; rpl_fclose
0000000000002680         add        eax, 0x1
0000000000002683         jne        loc_241f

0000000000002689         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
0000000000002690         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002695         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002697         call       j_dcgettext                                 ; dcgettext
000000000000269c         mov        rbx, rax
000000000000269f         call       j___errno_location                          ; __errno_location
00000000000026a4         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000026a6         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000026a9         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000026ae         xor        eax, eax
00000000000026b0         call       j_error                                     ; error

                     loc_26b5:
00000000000026b5         cmp        r14d, 0x2                                   ; CODE XREF=main+1484
00000000000026b9         je         loc_2820

00000000000026bf         cmp        r14d, 0x3
00000000000026c3         je         loc_27b6

00000000000026c9         cmp        r14d, 0x1
00000000000026cd         jne        loc_246d

                     loc_26d3:
00000000000026d3         mov        rdi, qword [r13+rax*8]                      ; argument #1 for method parse_old_offset, CODE XREF=main+3644, main+3653
00000000000026d8         mov        rsi, rbx                                    ; argument #2 for method parse_old_offset
00000000000026db         call       parse_old_offset                            ; parse_old_offset
00000000000026e0         test       al, al
00000000000026e2         je         loc_29bb

00000000000026e8         mov        rax, qword [rsp+0x88+var_68]
00000000000026ed         add        r13, 0x8
00000000000026f1         xor        r14d, r14d
00000000000026f4         mov        qword [n_bytes_to_skip], rax                ; n_bytes_to_skip
00000000000026fb         jmp        loc_2142

                     loc_2700:
0000000000002700         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=main+1682
0000000000002705         sub        rax, qword [n_bytes_to_skip]                ; n_bytes_to_skip
000000000000270c         jmp        loc_2208

                     loc_2711:
0000000000002711         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=main+3094
0000000000002716         mov        rdi, qword [rsp+0x88+var_88]
000000000000271a         call       x2realloc                                   ; x2realloc
000000000000271f         mov        qword [rsp+0x88+var_88], rax

                     loc_2723:
0000000000002723         mov        rdi, rbx                                    ; argument #1 for method read_char, CODE XREF=main+3092
0000000000002726         add        r12, 0x1
000000000000272a         call       read_char                                   ; read_char
000000000000272f         mov        r15d, dword [rsp+0x88+var_68]
0000000000002734         and        ebp, eax
0000000000002736         test       r15d, r15d
0000000000002739         js         loc_2843

000000000000273f         je         loc_2a79

0000000000002745         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000274a         mov        rsi, qword [rax]
000000000000274d         movsxd     rdx, r15d
0000000000002750         test       byte [rsi+rdx*2+1], 0x40
0000000000002755         je         loc_2818

000000000000275b         mov        rax, qword [rsp+0x88+var_88]
000000000000275f         mov        byte [rax+r13], r15b

                     loc_2763:
0000000000002763         mov        r13, r12                                    ; CODE XREF=main+2779
0000000000002766         sub        r13, r14
0000000000002769         cmp        byte [limit_bytes_to_format], 0x0           ; limit_bytes_to_format
0000000000002770         je         loc_277f

0000000000002772         cmp        r12, qword [end_offset]                     ; end_offset
0000000000002779         jae        loc_2a79

                     loc_277f:
000000000000277f         cmp        r13, qword [rsp+0x88+var_60]                ; CODE XREF=main+3072
0000000000002784         jne        loc_2723

0000000000002786         jmp        loc_2711

                     loc_2788:
0000000000002788         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=main+2422
000000000000278d         movsxd     rbp, r8d
0000000000002790         test       rsi, rsi
0000000000002793         mov        rax, rsi
0000000000002796         je         loc_29c6

000000000000279c         xor        edx, edx
000000000000279e         div        rbp
00000000000027a1         test       rdx, rdx
00000000000027a4         jne        loc_29c6

00000000000027aa         mov        qword [bytes_per_block], rsi                ; bytes_per_block
00000000000027b1         jmp        loc_250c

                     loc_27b6:
00000000000027b6         test       dl, dl                                      ; CODE XREF=main+2285, main+2899
00000000000027b8         mov        r14d, 0x3
00000000000027be         je         loc_2142

00000000000027c4         mov        rdi, qword [r13+rax*8+8]                    ; argument #1 for method parse_old_offset
00000000000027c9         mov        rsi, rbx                                    ; argument #2 for method parse_old_offset
00000000000027cc         call       parse_old_offset                            ; parse_old_offset
00000000000027d1         test       al, al
00000000000027d3         jne        loc_2bbf

                     loc_27d9:
00000000000027d9         mov        r14d, 0x3                                   ; CODE XREF=main+4199

                     loc_27df:
00000000000027df         cmp        byte [traditional], 0x0                     ; traditional, CODE XREF=main+3844
00000000000027e6         je         loc_2142

00000000000027ec         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
00000000000027f3         jmp        loc_247f

                     loc_27f8:
00000000000027f8         xor        edi, edi                                    ; case 1, argument #1 for method usage, CODE XREF=main+421
00000000000027fa         call       usage                                       ; usage

                     loc_27ff:
00000000000027ff         mov        rax, qword [rcx+0x28]                       ; CODE XREF=main+3902
0000000000002803         cmp        rax, qword [rcx+0x30]
0000000000002807         jae        loc_2c1a

000000000000280d         lea        rdx, qword [rax+1]
0000000000002811         mov        qword [rcx+0x28], rdx
0000000000002815         mov        byte [rax], 0xa

                     loc_2818:
0000000000002818         mov        r14, r12                                    ; CODE XREF=main+2753, main+3045, main+4279
000000000000281b         jmp        loc_25cd

                     loc_2820:
0000000000002820         test       dl, dl                                      ; CODE XREF=main+2275, main+2889
0000000000002822         mov        rdi, qword [r13+rax*8+8]
0000000000002827         jne        loc_285b

0000000000002829         movsx      eax, byte [rdi]
000000000000282c         cmp        al, 0x2b
000000000000282e         je         loc_285b

0000000000002830         sub        eax, 0x30
0000000000002833         cmp        eax, 0x9
0000000000002836         jbe        loc_285b

0000000000002838         mov        r14d, 0x2
000000000000283e         jmp        loc_2142

                     loc_2843:
0000000000002843         mov        rdi, qword [rsp+0x88+var_88]                ; argument "__ptr" for method j_free, CODE XREF=main+2731, main+3017
0000000000002847         movzx      r13d, byte [rsp+0x88+var_80]
000000000000284d         call       j_free                                      ; free

                     loc_2852:
0000000000002852         movzx      ebx, bpl                                    ; CODE XREF=main+4170
0000000000002856         jmp        loc_240b

                     loc_285b:
000000000000285b         lea        rax, qword [rsp+0x88+var_60]                ; CODE XREF=main+3255, main+3262, main+3270
0000000000002860         mov        rsi, rax                                    ; argument #2 for method parse_old_offset
0000000000002863         call       parse_old_offset                            ; parse_old_offset
0000000000002868         test       al, al
000000000000286a         je         loc_2a6e

0000000000002870         cmp        byte [traditional], 0x0                     ; traditional
0000000000002877         jne        loc_2b5d

                     loc_287d:
000000000000287d         mov        rax, qword [rsp+0x88+var_60]                ; CODE XREF=main+4099
0000000000002882         mov        r14d, 0x1
0000000000002888         mov        qword [n_bytes_to_skip], rax                ; n_bytes_to_skip
000000000000288f         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002896         mov        rdx, qword [r13+rax*8]
000000000000289b         mov        qword [r13+rax*8+8], rdx
00000000000028a0         add        r13, 0x8
00000000000028a4         jmp        loc_2142

                     loc_28a9:
00000000000028a9         lea        rax, qword [format_address_paren]           ; format_address_paren, CODE XREF=main+1513
00000000000028b0         mov        dword [address_base], 0x8                   ; address_base
00000000000028ba         mov        dword [address_pad_len], 0x7                ; address_pad_len
00000000000028c4         mov        qword [format_address], rax                 ; format_address
00000000000028cb         jmp        loc_216d

                     loc_28d0:
00000000000028d0         lea        rax, qword [rsp+0x88+var_60]                ; CODE XREF=main+2012
00000000000028d5         mov        ebx, r12d
00000000000028d8         xor        ebp, ebp
00000000000028da         xor        r15d, r15d
00000000000028dd         mov        byte [rsp+0x88+var_88], r13b
00000000000028e1         mov        r12, rax
00000000000028e4         jmp        loc_2912

                     loc_28e6:
00000000000028e6         jne        loc_2c98                                    ; CODE XREF=main+3523

00000000000028ec         xor        ebp, 0x1
00000000000028ef         mov        rdi, r14                                    ; argument #1 for method write_block
00000000000028f2         mov        rcx, r13                                    ; argument #4 for method write_block
00000000000028f5         movzx      eax, bpl
00000000000028f9         mov        rdx, qword [rsp+rax*8+0x88+var_58]          ; argument #3 for method write_block
00000000000028fe         mov        r15, rax
0000000000002901         call       write_block                                 ; write_block
0000000000002906         add        r14, qword [rsp+0x88+var_60]
000000000000290b         mov        rdi, qword [bytes_per_block]                ; bytes_per_block

                     loc_2912:
0000000000002912         movsxd     rax, r15d                                   ; CODE XREF=main+3444
0000000000002915         mov        rdx, r12                                    ; argument #3 for method read_block
0000000000002918         mov        r13, qword [rsp+rax*8+0x88+var_58]
000000000000291d         mov        rsi, r13                                    ; argument #2 for method read_block
0000000000002920         call       read_block                                  ; read_block
0000000000002925         mov        rsi, qword [rsp+0x88+var_60]
000000000000292a         and        ebx, eax
000000000000292c         cmp        rsi, qword [bytes_per_block]                ; bytes_per_block
0000000000002933         jae        loc_28e6

                     loc_2935:
0000000000002935         test       rsi, rsi                                    ; CODE XREF=main+2083
0000000000002938         movzx      r13d, byte [rsp+0x88+var_88]
000000000000293d         mov        r8, rsi
0000000000002940         je         loc_23d5

0000000000002946         mov        r10, qword [n_specs]                        ; n_specs
000000000000294d         mov        r12, qword [spec]                           ; spec
0000000000002954         lea        r11, qword [width_bytes]                    ; width_bytes
000000000000295b         xor        r9d, r9d
000000000000295e         mov        esi, 0x1

                     loc_2963:
0000000000002963         cmp        r9, r10                                     ; CODE XREF=main+3635
0000000000002966         movsxd     rsi, esi
0000000000002969         je         loc_2a0e

000000000000296f         imul       rax, r9, 0x28
0000000000002973         mov        eax, dword [r12+rax+4]
0000000000002978         movsxd     rdi, dword [r11+rax*4]
000000000000297c         mov        rax, rsi
000000000000297f         mov        rcx, rdi
0000000000002982         jmp        loc_2987

                     loc_2984:
0000000000002984         mov        rcx, rdx                                    ; CODE XREF=main+3618

                     loc_2987:
0000000000002987         xor        edx, edx                                    ; CODE XREF=main+3602
0000000000002989         div        rcx
000000000000298c         mov        rax, rcx
000000000000298f         test       rdx, rdx
0000000000002992         jne        loc_2984

0000000000002994         mov        rax, rdi
0000000000002997         xor        edx, edx
0000000000002999         add        r9, 0x1
000000000000299d         div        rcx
00000000000029a0         imul       esi, eax
00000000000029a3         jmp        loc_2963

                     loc_29a5:
00000000000029a5         test       dl, dl                                      ; CODE XREF=main+2295
00000000000029a7         mov        rcx, qword [r13+rax*8]
00000000000029ac         jne        loc_26d3

00000000000029b2         cmp        byte [rcx], 0x2b
00000000000029b5         je         loc_26d3

                     loc_29bb:
00000000000029bb         mov        r14d, 0x1                                   ; CODE XREF=main+2930
00000000000029c1         jmp        loc_2142

                     loc_29c6:
00000000000029c6         lea        rsi, qword [aWarningInvalid]                ; argument "msgid" for method j_dcgettext, "warning: invalid width %lu; using %d instead", CODE XREF=main+3110, main+3124
00000000000029cd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000029d2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029d4         mov        dword [rsp+0x88+var_88], r8d
00000000000029d8         call       j_dcgettext                                 ; dcgettext
00000000000029dd         mov        r8d, dword [rsp+0x88+var_88]
00000000000029e1         mov        rcx, qword [rsp+0x88+var_78]
00000000000029e6         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000029e9         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000029eb         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000029ed         xor        eax, eax
00000000000029ef         call       j_error                                     ; error
00000000000029f4         mov        qword [bytes_per_block], rbp                ; bytes_per_block
00000000000029fb         mov        r9, qword [n_specs]                         ; n_specs
0000000000002a02         mov        r10, qword [spec]                           ; spec
0000000000002a09         jmp        loc_250c

                     loc_2a0e:
0000000000002a0e         lea        rax, qword [rsi+r8-1]                       ; CODE XREF=main+3577
0000000000002a13         xor        edx, edx
0000000000002a15         mov        r12, qword [rsp+r15*8+0x88+var_58]
0000000000002a1a         mov        qword [rsp+0x88+var_88], r8
0000000000002a1e         div        rsi
0000000000002a21         lea        rdi, qword [r12+r8]                         ; argument "__s" for method j_memset
0000000000002a25         imul       rax, rsi
0000000000002a29         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000002a2b         sub        rax, r8
0000000000002a2e         mov        rdx, rax                                    ; argument "__n" for method j_memset
0000000000002a31         call       j_memset                                    ; memset
0000000000002a36         mov        eax, ebp
0000000000002a38         mov        r8, qword [rsp+0x88+var_88]
0000000000002a3c         mov        rdi, r14                                    ; argument #1 for method write_block
0000000000002a3f         xor        eax, 0x1
0000000000002a42         mov        rcx, r12                                    ; argument #4 for method write_block
0000000000002a45         movzx      eax, al
0000000000002a48         mov        rdx, qword [rsp+rax*8+0x88+var_58]          ; argument #3 for method write_block
0000000000002a4d         mov        rsi, r8                                     ; argument #2 for method write_block
0000000000002a50         call       write_block                                 ; write_block
0000000000002a55         add        r14, qword [rsp+0x88+var_60]
0000000000002a5a         jmp        loc_23d5

                     loc_2a5f:
0000000000002a5f         movsxd     r8, r8d                                     ; CODE XREF=main+2432
0000000000002a62         mov        qword [bytes_per_block], r8                 ; bytes_per_block
0000000000002a69         jmp        loc_250c

                     loc_2a6e:
0000000000002a6e         mov        r14d, 0x2                                   ; CODE XREF=main+3322
0000000000002a74         jmp        loc_27df

                     loc_2a79:
0000000000002a79         mov        r15, qword [rsp+0x88+var_88]                ; CODE XREF=main+3023, main+3081
0000000000002a7d         mov        rdi, r13
0000000000002a80         mov        esi, 0x20
0000000000002a85         not        rdi
0000000000002a88         add        rdi, r12
0000000000002a8b         mov        byte [r15+r13], 0x0
0000000000002a90         mov        r13, r15
0000000000002a93         call       qword [format_address]                      ; format_address, format_address

                     loc_2a99:
0000000000002a99         movzx      eax, byte [r13]                             ; CODE XREF=main+3965
0000000000002a9e         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002aa5         movsx      edx, al
0000000000002aa8         test       edx, edx
0000000000002aaa         mov        dword [rsp+0x88+var_68], edx
0000000000002aae         je         loc_27ff

0000000000002ab4         lea        edx, dword [rax-7]
0000000000002ab7         cmp        dl, 0x6
0000000000002aba         ja         loc_2b43

0000000000002ac0         lea        rsi, qword [switch_table_c484]              ; switch_table_c484
0000000000002ac7         movzx      edx, dl
0000000000002aca         movsxd     rax, dword [rsi+rdx*4]
0000000000002ace         mov        edx, 0x2
0000000000002ad3         add        rax, rsi
0000000000002ad6         mov        esi, 0x1
0000000000002adb         jmp        rax                                         ; switch statement using table at 0xc484, with 7 cases, 0x2add,0x2aef,0x2afd,0x2b0b,0x2b19,0x2b27,0x2b35

                     loc_2add:
0000000000002add         lea        rdi, qword [aInvalidTypeStr_ad38+40]        ; case 5, argument "__ptr" for method j_fwrite_unlocked, 0xad60, CODE XREF=main+3947
0000000000002ae4         call       j_fwrite_unlocked                           ; fwrite_unlocked

                     loc_2ae9:
0000000000002ae9         add        r13, 0x1                                    ; CODE XREF=main+3979, main+3993, main+4007, main+4021, main+4035, main+4049, main+4075, main+4295
0000000000002aed         jmp        loc_2a99

                     loc_2aef:
0000000000002aef         lea        rdi, qword [aInvalidTypeStr_ad38+52]        ; case 4, argument "__ptr" for method j_fwrite_unlocked, 0xad6c, CODE XREF=main+3947
0000000000002af6         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002afb         jmp        loc_2ae9

                     loc_2afd:
0000000000002afd         lea        rdi, qword [aInvalidTypeStr_ad38+43]        ; case 3, argument "__ptr" for method j_fwrite_unlocked, 0xad63, CODE XREF=main+3947
0000000000002b04         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002b09         jmp        loc_2ae9

                     loc_2b0b:
0000000000002b0b         lea        rdi, qword [aInvalidTypeStr_ad38+49]        ; case 2, argument "__ptr" for method j_fwrite_unlocked, 0xad69, CODE XREF=main+3947
0000000000002b12         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002b17         jmp        loc_2ae9

                     loc_2b19:
0000000000002b19         lea        rdi, qword [aInvalidTypeStr_ad38+37]        ; case 1, argument "__ptr" for method j_fwrite_unlocked, 0xad5d, CODE XREF=main+3947
0000000000002b20         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002b25         jmp        loc_2ae9

                     loc_2b27:
0000000000002b27         lea        rdi, qword [aInvalidTypeStr_ad38+34]        ; case 0, argument "__ptr" for method j_fwrite_unlocked, 0xad5a, CODE XREF=main+3947
0000000000002b2e         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002b33         jmp        loc_2ae9

                     loc_2b35:
0000000000002b35         lea        rdi, qword [aInvalidTypeStr_ad38+46]        ; case 6, argument "__ptr" for method j_fwrite_unlocked, 0xad66, CODE XREF=main+3947
0000000000002b3c         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002b41         jmp        loc_2ae9

                     loc_2b43:
0000000000002b43         mov        rdx, qword [rcx+0x28]                       ; CODE XREF=main+3914
0000000000002b47         cmp        rdx, qword [rcx+0x30]
0000000000002b4b         jae        loc_2c2c

0000000000002b51         lea        rsi, qword [rdx+1]
0000000000002b55         mov        qword [rcx+0x28], rsi
0000000000002b59         mov        byte [rdx], al
0000000000002b5b         jmp        loc_2ae9

                     loc_2b5d:
0000000000002b5d         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+3335
0000000000002b64         mov        rsi, rbx                                    ; argument #2 for method parse_old_offset
0000000000002b67         mov        rdi, qword [r13+rax*8]                      ; argument #1 for method parse_old_offset
0000000000002b6c         call       parse_old_offset                            ; parse_old_offset
0000000000002b71         test       al, al
0000000000002b73         je         loc_287d

0000000000002b79         mov        rax, qword [rsp+0x88+var_68]
0000000000002b7e         mov        byte [flag_pseudo_start], 0x1               ; flag_pseudo_start
0000000000002b85         add        r13, 0x10
0000000000002b89         xor        r14d, r14d
0000000000002b8c         mov        qword [n_bytes_to_skip], rax                ; n_bytes_to_skip
0000000000002b93         mov        rax, qword [rsp+0x88+var_60]
0000000000002b98         mov        qword [rsp+0x88+var_70], rax
0000000000002b9d         jmp        loc_2142

                     loc_2ba2:
0000000000002ba2         mov        rdi, qword [rsp+0x88+var_88]                ; argument "__ptr" for method j_free, CODE XREF=main+2679, main+2691
0000000000002ba6         movzx      r13d, byte [rsp+0x88+var_80]
0000000000002bac         call       j_free                                      ; free
0000000000002bb1         xor        edi, edi                                    ; argument #1 for method check_and_close
0000000000002bb3         call       check_and_close                             ; check_and_close
0000000000002bb8         and        ebp, eax
0000000000002bba         jmp        loc_2852

                     loc_2bbf:
0000000000002bbf         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+3171
0000000000002bc6         lea        rsi, qword [rsp+0x88+var_60]                ; argument #2 for method parse_old_offset
0000000000002bcb         mov        rdi, qword [r13+rax*8+0x10]                 ; argument #1 for method parse_old_offset
0000000000002bd0         call       parse_old_offset                            ; parse_old_offset
0000000000002bd5         test       al, al
0000000000002bd7         je         loc_27d9

0000000000002bdd         mov        rax, qword [rsp+0x88+var_68]
0000000000002be2         mov        byte [flag_pseudo_start], 0x1               ; flag_pseudo_start
0000000000002be9         mov        r14d, 0x1
0000000000002bef         mov        qword [n_bytes_to_skip], rax                ; n_bytes_to_skip
0000000000002bf6         mov        rax, qword [rsp+0x88+var_60]
0000000000002bfb         mov        qword [rsp+0x88+var_70], rax
0000000000002c00         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002c07         mov        rdx, qword [r13+rax*8]
0000000000002c0c         mov        qword [r13+rax*8+0x10], rdx
0000000000002c11         add        r13, 0x10
0000000000002c15         jmp        loc_2142

                     loc_2c1a:
0000000000002c1a         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=main+3223
0000000000002c1f         mov        rdi, rcx                                    ; argument #1 for method j___overflow
0000000000002c22         call       j___overflow                                ; __overflow
0000000000002c27         jmp        loc_2818

                     loc_2c2c:
0000000000002c2c         movzx      esi, al                                     ; argument #2 for method j___overflow, CODE XREF=main+4059
0000000000002c2f         mov        rdi, rcx                                    ; argument #1 for method j___overflow
0000000000002c32         call       j___overflow                                ; __overflow
0000000000002c37         jmp        loc_2ae9

                     loc_2c3c:
0000000000002c3c         lea        rsi, qword [aSkipbytesReadb]                ; argument "msgid" for method j_dcgettext, "skip-bytes + read-bytes is too large", CODE XREF=main+1574
0000000000002c43         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c4a         call       j_dcgettext                                 ; dcgettext
0000000000002c4f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c51         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c54         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002c59         xor        eax, eax
0000000000002c5b         call       j_error                                     ; error

                     loc_2c60:
0000000000002c60         mov        edx, 0x1                                    ; CODE XREF=main+1558
0000000000002c65         jmp        loc_218c

                     loc_2c6a:
0000000000002c6a         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+1953, main+1962
                        ; endp

                     loc_2c6f:
0000000000002c6f         mov        ecx, 0x1                                    ; CODE XREF=main+1944
0000000000002c74         jmp        loc_230e

                     loc_2c79:
0000000000002c79         lea        rcx, qword [__PRETTY_FUNCTION__.7577]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.7577, CODE XREF=main+2089
0000000000002c80         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
0000000000002c87         lea        rdi, qword [aNbytesreadByte]                ; argument "__assertion" for method j___assert_fail, "n_bytes_read == bytes_per_block"
0000000000002c8e         mov        edx, 0x576                                  ; argument "__line" for method j___assert_fail
0000000000002c93         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_2c98:
0000000000002c98         lea        rcx, qword [__PRETTY_FUNCTION__.7577]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.7577, CODE XREF=loc_28e6
0000000000002c9f         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
0000000000002ca6         lea        rdi, qword [aNbytesreadByte]                ; argument "__assertion" for method j___assert_fail, "n_bytes_read == bytes_per_block"
0000000000002cad         mov        edx, 0x584                                  ; argument "__line" for method j___assert_fail
0000000000002cb2         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_2cb7:
0000000000002cb7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+1913
                        ; endp

                     loc_2cbc:
0000000000002cbc         lea        rsi, qword [aInvalidOutputA]                ; argument "msgid" for method j_dcgettext, "invalid output address radix '%c'; it must be one character from [doxn]", CODE XREF=main+1265, main+1798
0000000000002cc3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cc8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cca         call       j_dcgettext                                 ; dcgettext
0000000000002ccf         movsx      ecx, r15b
0000000000002cd3         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002cd6         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002cd8         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002cdd         xor        eax, eax
0000000000002cdf         call       j_error                                     ; error

                     loc_2ce4:
0000000000002ce4         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5, CODE XREF=main+578
0000000000002ceb         mov        esi, dword [rsp+0x88+var_68]
0000000000002cef         lea        rcx, qword [long_options]                   ; long_options
0000000000002cf6         mov        edx, 0x77
0000000000002cfb         mov        edi, eax
0000000000002cfd         call       xstrtol_fatal                               ; xstrtol_fatal

                     loc_2d02:
0000000000002d02         lea        rsi, qword [aNoTypeMayBeSpe]                ; argument "msgid" for method j_dcgettext, "no type may be specified when dumping strings", CODE XREF=main+1450
0000000000002d09         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d0e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d10         call       j_dcgettext                                 ; dcgettext
0000000000002d15         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002d17         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002d1a         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002d1f         xor        eax, eax
0000000000002d21         call       j_error                                     ; error

                     loc_2d26:
0000000000002d26         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5, CODE XREF=main+728
0000000000002d2d         mov        esi, dword [rsp+0x88+var_68]
0000000000002d31         lea        rcx, qword [long_options]                   ; long_options
0000000000002d38         mov        edx, 0x6a
0000000000002d3d         mov        edi, eax
0000000000002d3f         call       xstrtol_fatal                               ; xstrtol_fatal

                     loc_2d44:
0000000000002d44         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5, CODE XREF=main+959
0000000000002d4b         mov        esi, dword [rsp+0x88+var_68]
0000000000002d4f         lea        rcx, qword [long_options]                   ; long_options
0000000000002d56         mov        edx, 0x53
0000000000002d5b         mov        edi, eax
0000000000002d5d         call       xstrtol_fatal                               ; xstrtol_fatal
0000000000002d62         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xdf94)
0000000000002d6c         nop        dword [rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002d70         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xd89c)
0000000000002d72         mov        r9, rdx
0000000000002d75         pop        rsi
0000000000002d76         mov        rdx, rsp
0000000000002d79         and        rsp, 0xfffffffffffffff0
0000000000002d7d         push       rax
0000000000002d7e         push       rsp
0000000000002d7f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002d86         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000002d8d         lea        rdi, qword [main]                           ; main
0000000000002d94         call       qword [qword_20ffd0+8]                      ; 0x20ffd8
0000000000002d9a         hlt
                        ; endp
0000000000002d9b         align      32                                          ; End of unwind block (FDE at 0xd89c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002da0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002da7         push       rbp
0000000000002da8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002daf         cmp        rax, rdi
0000000000002db2         mov        rbp, rsp
0000000000002db5         je         loc_2dd0

0000000000002db7         mov        rax, qword [qword_20ffd0]                   ; qword_20ffd0
0000000000002dbe         test       rax, rax
0000000000002dc1         je         loc_2dd0

0000000000002dc3         pop        rbp
0000000000002dc4         jmp        rax
                        ; endp
0000000000002dc6         align      16

                     loc_2dd0:
0000000000002dd0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002dd1         ret
                        ; endp
0000000000002dd2         align      32

                     register_tm_clones:
0000000000002de0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002de7         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002dee         push       rbp
0000000000002def         sub        rsi, rdi
0000000000002df2         mov        rbp, rsp
0000000000002df5         sar        rsi, 0x3
0000000000002df9         mov        rax, rsi
0000000000002dfc         shr        rax, 0x3f
0000000000002e00         add        rsi, rax
0000000000002e03         sar        rsi, 0x1
0000000000002e06         je         loc_2e20

0000000000002e08         mov        rax, qword [qword_20ffe8]                   ; qword_20ffe8
0000000000002e0f         test       rax, rax
0000000000002e12         je         loc_2e20

0000000000002e14         pop        rbp
0000000000002e15         jmp        rax
                        ; endp
0000000000002e17         align      32

                     loc_2e20:
0000000000002e20         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002e21         ret
                        ; endp
0000000000002e22         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002e30         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002e37         jne        loc_2e68

0000000000002e39         cmp        qword [qword_20fff0], 0x0                   ; qword_20fff0
0000000000002e41         push       rbp
0000000000002e42         mov        rbp, rsp
0000000000002e45         je         loc_2e53

0000000000002e47         mov        rdi, qword [__dso_handle]                   ; __dso_handle
0000000000002e4e         call       j_qword_20fff0                              ; qword_20fff0

                     loc_2e53:
0000000000002e53         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002e58         mov        byte [completed.7697], 0x1                  ; completed.7697
0000000000002e5f         pop        rbp
0000000000002e60         ret
                        ; endp
0000000000002e61         align      8

                     loc_2e68:
0000000000002e68         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
0000000000002e6a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002e70         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002e71         mov        rbp, rsp
0000000000002e74         pop        rbp
0000000000002e75         jmp        register_tm_clones                          ; register_tm_clones
0000000000002e7a         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     format_address_none:
0000000000002e80         ret                                                    ; Begin of unwind block (FDE at 0xd90c), DATA XREF=main+1499, main+2236
                        ; endp
0000000000002e82         align      16                                          ; End of unwind block (FDE at 0xd90c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int8_t, -32
        ;    var_21: int8_t, -33


                     format_address_std:
0000000000002e90         sub        rsp, 0x38                                   ; Begin of unwind block (FDE at 0xd920), CODE XREF=format_address_paren+47, format_address_label+16, DATA XREF=main+207, main+1271, main+1804, main+1849
0000000000002e94         mov        rcx, rdi
0000000000002e97         mov        rax, qword [fs:0x28]
0000000000002ea0         mov        qword [rsp+0x38+var_10], rax
0000000000002ea5         xor        eax, eax
0000000000002ea7         movsxd     rax, dword [address_pad_len]                ; address_pad_len
0000000000002eae         lea        rdi, qword [rsp+0x38+var_21]
0000000000002eb3         mov        byte [rsp+0x38+var_21], sil
0000000000002eb8         mov        byte [rsp+0x38+var_20], 0x0
0000000000002ebd         mov        rsi, rdi
0000000000002ec0         sub        rsi, rax
0000000000002ec3         mov        eax, dword [address_base]                   ; address_base
0000000000002ec9         cmp        eax, 0xa
0000000000002ecc         je         loc_2f40

0000000000002ece         cmp        eax, 0x10
0000000000002ed1         je         loc_2f80

0000000000002ed7         cmp        eax, 0x8
0000000000002eda         je         loc_2f20

                     loc_2edc:
0000000000002edc         cmp        rsi, rdi                                    ; CODE XREF=format_address_std+167, format_address_std+229, format_address_std+281
0000000000002edf         mov        rax, rdi
0000000000002ee2         jae        loc_2ef7

0000000000002ee4         nop        dword [rax]

                     loc_2ee8:
0000000000002ee8         sub        rax, 0x1                                    ; CODE XREF=format_address_std+98
0000000000002eec         mov        byte [rax], 0x30
0000000000002eef         cmp        rsi, rax
0000000000002ef2         jne        loc_2ee8

0000000000002ef4         mov        rdi, rsi

                     loc_2ef7:
0000000000002ef7         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=format_address_std+82
0000000000002efe         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f03         mov        rax, qword [rsp+0x38+var_10]
0000000000002f08         xor        rax, qword [fs:0x28]
0000000000002f11         jne        loc_2fae

0000000000002f17         add        rsp, 0x38
0000000000002f1b         ret
                        ; endp
0000000000002f1c         align      32

                     loc_2f20:
0000000000002f20         mov        eax, ecx                                    ; CODE XREF=format_address_std+74, format_address_std+165
0000000000002f22         shr        rcx, 0x3
0000000000002f26         sub        rdi, 0x1
0000000000002f2a         and        eax, 0x7
0000000000002f2d         add        eax, 0x30
0000000000002f30         test       rcx, rcx
0000000000002f33         mov        byte [rdi], al
0000000000002f35         jne        loc_2f20

0000000000002f37         jmp        loc_2edc
0000000000002f39         align      64

                     loc_2f40:
0000000000002f40         movabs     r8, 0xcccccccccccccccd                      ; CODE XREF=format_address_std+60
0000000000002f4a         nop        word [rax+rax]

                     loc_2f50:
0000000000002f50         mov        rax, rcx                                    ; CODE XREF=format_address_std+227
0000000000002f53         sub        rdi, 0x1
0000000000002f57         mul        r8
0000000000002f5a         shr        rdx, 0x3
0000000000002f5e         lea        rax, qword [rdx+rdx*4]
0000000000002f62         add        rax, rax
0000000000002f65         sub        rcx, rax
0000000000002f68         add        ecx, 0x30
0000000000002f6b         test       rdx, rdx
0000000000002f6e         mov        byte [rdi], cl
0000000000002f70         mov        rcx, rdx
0000000000002f73         jne        loc_2f50

0000000000002f75         jmp        loc_2edc
0000000000002f7a         align      128

                     loc_2f80:
0000000000002f80         lea        rdx, qword [a0123456789abcd]                ; "0123456789abcdef", CODE XREF=format_address_std+65
0000000000002f87         nop        word [rax+rax]

                     loc_2f90:
0000000000002f90         mov        rax, rcx                                    ; CODE XREF=format_address_std+279
0000000000002f93         shr        rcx, 0x4
0000000000002f97         sub        rdi, 0x1
0000000000002f9b         and        eax, 0xf
0000000000002f9e         test       rcx, rcx
0000000000002fa1         movzx      eax, byte [rdx+rax]
0000000000002fa5         mov        byte [rdi], al
0000000000002fa7         jne        loc_2f90

0000000000002fa9         jmp        loc_2edc

                     loc_2fae:
0000000000002fae         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=format_address_std+129
                        ; endp
0000000000002fb3         align      64                                          ; End of unwind block (FDE at 0xd920)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     parse_old_offset:
0000000000002fc0         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0xd93c), CODE XREF=main+2923, main+3164, main+3315, main+4092, main+4192
0000000000002fc3         test       dl, dl
0000000000002fc5         je         loc_300c

0000000000002fc7         push       rbp
0000000000002fc8         push       rbx
0000000000002fc9         mov        rbp, rsi
0000000000002fcc         mov        rbx, rdi
0000000000002fcf         sub        rsp, 0x8
0000000000002fd3         cmp        dl, 0x2b
0000000000002fd6         je         loc_300f

                     loc_2fd8:
0000000000002fd8         mov        esi, 0x2e                                   ; argument "__c" for method j_strchr, CODE XREF=parse_old_offset+83
0000000000002fdd         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
0000000000002fe0         call       j_strchr                                    ; strchr
0000000000002fe5         test       rax, rax
0000000000002fe8         mov        edx, 0xa
0000000000002fed         je         loc_3015

                     loc_2fef:
0000000000002fef         lea        r8, qword [a0123456789abcd+17]              ; 0xacd5, CODE XREF=parse_old_offset+93, parse_old_offset+116
0000000000002ff6         mov        rcx, rbp
0000000000002ff9         xor        esi, esi
0000000000002ffb         mov        rdi, rbx
0000000000002ffe         call       xstrtoumax                                  ; xstrtoumax
0000000000003003         test       eax, eax
0000000000003005         pop        rdx
0000000000003006         sete       al
0000000000003009         pop        rbx
000000000000300a         pop        rbp
000000000000300b         ret
                        ; endp

                     loc_300c:
000000000000300c         xor        eax, eax                                    ; CODE XREF=parse_old_offset+5
000000000000300e         ret
                        ; endp

                     loc_300f:
000000000000300f         add        rbx, 0x1                                    ; CODE XREF=parse_old_offset+22
0000000000003013         jmp        loc_2fd8

                     loc_3015:
0000000000003015         cmp        byte [rbx], 0x30                            ; CODE XREF=parse_old_offset+45
0000000000003018         mov        edx, 0x8
000000000000301d         jne        loc_2fef

000000000000301f         movzx      eax, byte [rbx+1]
0000000000003023         xor        edx, edx
0000000000003025         and        eax, 0xffffffdf
0000000000003028         cmp        al, 0x58
000000000000302a         sete       dl
000000000000302d         lea        edx, dword [0x8+rdx*8]
0000000000003034         jmp        loc_2fef
0000000000003036         align      64                                          ; End of unwind block (FDE at 0xd93c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_42: int8_t, -66
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     print_named_ascii:
0000000000003040         push       r15                                         ; Begin of unwind block (FDE at 0xd970), DATA XREF=decode_format_string+635
0000000000003042         push       r14
0000000000003044         push       r13
0000000000003046         push       r12
0000000000003048         push       rbp
0000000000003049         push       rbx
000000000000304a         sub        rsp, 0x28
000000000000304e         mov        rax, qword [fs:0x28]
0000000000003057         mov        qword [rsp+0x58+var_40], rax
000000000000305c         xor        eax, eax
000000000000305e         cmp        rdi, rsi
0000000000003061         jbe        loc_3108

0000000000003067         mov        r13d, r8d
000000000000306a         mov        rbp, rdi
000000000000306d         lea        r8, qword [rdi-1]
0000000000003071         movsxd     r12, r9d
0000000000003074         sub        rbp, rsi
0000000000003077         mov        rbx, rdi
000000000000307a         lea        rax, qword [rdx+rbp]
000000000000307e         mov        r14, rdx
0000000000003081         imul       r8, r12
0000000000003085         mov        qword [rsp+0x58+var_58], rax
0000000000003089         lea        rax, qword [rsp+0x58+var_42]
000000000000308e         mov        qword [rsp+0x58+var_50], rax
0000000000003093         mov        r15, r8
0000000000003096         jmp        loc_30cf
0000000000003098         align      32

                     loc_30a0:
00000000000030a0         lea        rcx, qword [charname]                       ; charname, CODE XREF=print_named_ascii+179
00000000000030a7         movzx      eax, al
00000000000030aa         lea        rdx, qword [rcx+rax*4]

                     loc_30ae:
00000000000030ae         sub        r9d, ebp                                    ; CODE XREF=print_named_ascii+175, print_named_ascii+195
00000000000030b1         lea        rdi, qword [a0123456789abcd+24]             ; 0xacdc
00000000000030b8         xor        eax, eax
00000000000030ba         lea        esi, dword [r9+r13]
00000000000030be         sub        r15, r12
00000000000030c1         call       xprintf                                     ; xprintf
00000000000030c6         cmp        r14, qword [rsp+0x58+var_58]
00000000000030ca         mov        r9d, ebp
00000000000030cd         je         loc_3108

                     loc_30cf:
00000000000030cf         xor        edx, edx                                    ; CODE XREF=print_named_ascii+86
00000000000030d1         mov        rax, r15
00000000000030d4         add        r14, 0x1
00000000000030d8         div        rbx
00000000000030db         lea        rdx, qword [a0123456789abcd+20]             ; 0xacd8
00000000000030e2         mov        rbp, rax
00000000000030e5         movzx      eax, byte [r14-1]
00000000000030ea         and        eax, 0x7f
00000000000030ed         cmp        al, 0x7f
00000000000030ef         je         loc_30ae

00000000000030f1         cmp        al, 0x20
00000000000030f3         jbe        loc_30a0

00000000000030f5         mov        byte [rsp+0x58+var_42], al
00000000000030f9         mov        byte [rsp+0x58+var_41], 0x0
00000000000030fe         mov        rdx, qword [rsp+0x58+var_50]
0000000000003103         jmp        loc_30ae
0000000000003105         align      8

                     loc_3108:
0000000000003108         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=print_named_ascii+33, print_named_ascii+141
000000000000310d         xor        rax, qword [fs:0x28]
0000000000003116         jne        loc_3127

0000000000003118         add        rsp, 0x28
000000000000311c         pop        rbx
000000000000311d         pop        rbp
000000000000311e         pop        r12
0000000000003120         pop        r13
0000000000003122         pop        r14
0000000000003124         pop        r15
0000000000003126         ret
                        ; endp

                     loc_3127:
0000000000003127         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_named_ascii+214
                        ; endp
000000000000312c         align      16                                          ; End of unwind block (FDE at 0xd970)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96


                     print_long_long:
0000000000003130         push       r15                                         ; Begin of unwind block (FDE at 0xd9bc), DATA XREF=sub_3dfe+210
0000000000003132         push       r14
0000000000003134         push       r13
0000000000003136         push       r12
0000000000003138         push       rbp
0000000000003139         push       rbx
000000000000313a         sub        rsp, 0x38
000000000000313e         mov        rax, qword [fs:0x28]
0000000000003147         mov        qword [rsp+0x68+var_40], rax
000000000000314c         xor        eax, eax
000000000000314e         cmp        rdi, rsi
0000000000003151         mov        qword [rsp+0x68+var_60], rcx
0000000000003156         mov        dword [rsp+0x68+var_54], r8d
000000000000315b         jbe        loc_3200

0000000000003161         lea        rcx, qword [rdi-1]
0000000000003165         movsxd     rax, r9d
0000000000003168         mov        rbx, rdi
000000000000316b         mov        rbp, rsi
000000000000316e         mov        r15, rdx
0000000000003171         mov        qword [rsp+0x68+var_50], rax
0000000000003176         imul       rcx, rax
000000000000317a         mov        r13, rdi
000000000000317d         mov        r14, rcx
0000000000003180         jmp        loc_31a8
0000000000003182         align      8

                     loc_3188:
0000000000003188         mov        rdx, qword [r15]                            ; CODE XREF=print_long_long+153

                     loc_318b:
000000000000318b         mov        rdi, qword [rsp+0x68+var_60]                ; CODE XREF=print_long_long+202
0000000000003190         xor        eax, eax
0000000000003192         add        r15, 0x8
0000000000003196         call       xprintf                                     ; xprintf
000000000000319b         sub        r14, qword [rsp+0x68+var_50]
00000000000031a0         cmp        r13, rbp
00000000000031a3         mov        r9d, r12d
00000000000031a6         je         loc_3200

                     loc_31a8:
00000000000031a8         xor        edx, edx                                    ; CODE XREF=print_long_long+80
00000000000031aa         mov        rax, r14
00000000000031ad         sub        r13, 0x1
00000000000031b1         div        rbx
00000000000031b4         sub        r9d, eax
00000000000031b7         cmp        byte [input_swap], 0x0                      ; input_swap
00000000000031be         mov        r12, rax
00000000000031c1         mov        eax, dword [rsp+0x68+var_54]
00000000000031c5         lea        esi, dword [r9+rax]
00000000000031c9         je         loc_3188

00000000000031cb         lea        rdx, qword [r15+7]
00000000000031cf         lea        r9, qword [rsp+0x68+var_48]
00000000000031d4         xor        eax, eax
00000000000031d6         nop        word [cs:rax+rax]

                     loc_31e0:
00000000000031e0         movzx      edi, byte [rdx]                             ; CODE XREF=print_long_long+195
00000000000031e3         sub        rdx, 0x1
00000000000031e7         mov        byte [r9+rax], dil
00000000000031eb         add        rax, 0x1
00000000000031ef         cmp        rax, 0x8
00000000000031f3         jne        loc_31e0

00000000000031f5         mov        rdx, qword [rsp+0x68+var_48]
00000000000031fa         jmp        loc_318b
00000000000031fc         align      512

                     loc_3200:
0000000000003200         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=print_long_long+43, print_long_long+118
0000000000003205         xor        rax, qword [fs:0x28]
000000000000320e         jne        loc_321f

0000000000003210         add        rsp, 0x38
0000000000003214         pop        rbx
0000000000003215         pop        rbp
0000000000003216         pop        r12
0000000000003218         pop        r13
000000000000321a         pop        r14
000000000000321c         pop        r15
000000000000321e         ret
                        ; endp

                     loc_321f:
000000000000321f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_long_long+222
                        ; endp
0000000000003224         align      16                                          ; End of unwind block (FDE at 0xd9bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96


                     print_long:
0000000000003230         push       r15                                         ; Begin of unwind block (FDE at 0xda08), DATA XREF=sub_3dfe+226
0000000000003232         push       r14
0000000000003234         push       r13
0000000000003236         push       r12
0000000000003238         push       rbp
0000000000003239         push       rbx
000000000000323a         sub        rsp, 0x38
000000000000323e         mov        rax, qword [fs:0x28]
0000000000003247         mov        qword [rsp+0x68+var_40], rax
000000000000324c         xor        eax, eax
000000000000324e         cmp        rdi, rsi
0000000000003251         mov        qword [rsp+0x68+var_60], rcx
0000000000003256         mov        dword [rsp+0x68+var_54], r8d
000000000000325b         jbe        loc_3300

0000000000003261         lea        rcx, qword [rdi-1]
0000000000003265         movsxd     rax, r9d
0000000000003268         mov        rbx, rdi
000000000000326b         mov        rbp, rsi
000000000000326e         mov        r15, rdx
0000000000003271         mov        qword [rsp+0x68+var_50], rax
0000000000003276         imul       rcx, rax
000000000000327a         mov        r13, rdi
000000000000327d         mov        r14, rcx
0000000000003280         jmp        loc_32a8
0000000000003282         align      8

                     loc_3288:
0000000000003288         mov        rdx, qword [r15]                            ; CODE XREF=print_long+153

                     loc_328b:
000000000000328b         mov        rdi, qword [rsp+0x68+var_60]                ; CODE XREF=print_long+202
0000000000003290         xor        eax, eax
0000000000003292         add        r15, 0x8
0000000000003296         call       xprintf                                     ; xprintf
000000000000329b         sub        r14, qword [rsp+0x68+var_50]
00000000000032a0         cmp        r13, rbp
00000000000032a3         mov        r9d, r12d
00000000000032a6         je         loc_3300

                     loc_32a8:
00000000000032a8         xor        edx, edx                                    ; CODE XREF=print_long+80
00000000000032aa         mov        rax, r14
00000000000032ad         sub        r13, 0x1
00000000000032b1         div        rbx
00000000000032b4         sub        r9d, eax
00000000000032b7         cmp        byte [input_swap], 0x0                      ; input_swap
00000000000032be         mov        r12, rax
00000000000032c1         mov        eax, dword [rsp+0x68+var_54]
00000000000032c5         lea        esi, dword [r9+rax]
00000000000032c9         je         loc_3288

00000000000032cb         lea        rdx, qword [r15+7]
00000000000032cf         lea        r9, qword [rsp+0x68+var_48]
00000000000032d4         xor        eax, eax
00000000000032d6         nop        word [cs:rax+rax]

                     loc_32e0:
00000000000032e0         movzx      edi, byte [rdx]                             ; CODE XREF=print_long+195
00000000000032e3         sub        rdx, 0x1
00000000000032e7         mov        byte [r9+rax], dil
00000000000032eb         add        rax, 0x1
00000000000032ef         cmp        rax, 0x8
00000000000032f3         jne        loc_32e0

00000000000032f5         mov        rdx, qword [rsp+0x68+var_48]
00000000000032fa         jmp        loc_328b
00000000000032fc         align      256

                     loc_3300:
0000000000003300         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=print_long+43, print_long+118
0000000000003305         xor        rax, qword [fs:0x28]
000000000000330e         jne        loc_331f

0000000000003310         add        rsp, 0x38
0000000000003314         pop        rbx
0000000000003315         pop        rbp
0000000000003316         pop        r12
0000000000003318         pop        r13
000000000000331a         pop        r14
000000000000331c         pop        r15
000000000000331e         ret
                        ; endp

                     loc_331f:
000000000000331f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_long+222
                        ; endp
0000000000003324         align      16                                          ; End of unwind block (FDE at 0xda08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     print_int:
0000000000003330         push       r15                                         ; Begin of unwind block (FDE at 0xda54), DATA XREF=sub_3dfe+242
0000000000003332         push       r14
0000000000003334         push       r13
0000000000003336         push       r12
0000000000003338         push       rbp
0000000000003339         push       rbx
000000000000333a         mov        rbx, rdi
000000000000333d         sub        rsp, 0x38
0000000000003341         mov        rdi, qword [fs:0x28]
000000000000334a         mov        qword [rsp+0x68+var_40], rdi
000000000000334f         xor        edi, edi
0000000000003351         cmp        rbx, rsi
0000000000003354         mov        qword [rsp+0x68+var_68], rsi
0000000000003358         mov        qword [rsp+0x68+var_60], rcx
000000000000335d         mov        dword [rsp+0x68+var_54], r8d
0000000000003362         jbe        loc_3400

0000000000003368         lea        rcx, qword [rbx-1]
000000000000336c         movsxd     rax, r9d
000000000000336f         mov        r15, rdx
0000000000003372         mov        qword [rsp+0x68+var_50], rax
0000000000003377         mov        r13, rbx
000000000000337a         imul       rcx, rax
000000000000337e         mov        r14, rcx
0000000000003381         jmp        loc_33a9
0000000000003383         align      8

                     loc_3388:
0000000000003388         mov        edx, dword [r15]                            ; CODE XREF=print_int+154

                     loc_338b:
000000000000338b         mov        rdi, qword [rsp+0x68+var_60]                ; CODE XREF=print_int+201
0000000000003390         xor        eax, eax
0000000000003392         add        r15, 0x4
0000000000003396         call       xprintf                                     ; xprintf
000000000000339b         sub        r14, qword [rsp+0x68+var_50]
00000000000033a0         cmp        r13, qword [rsp+0x68+var_68]
00000000000033a4         mov        r9d, ebp
00000000000033a7         je         loc_3400

                     loc_33a9:
00000000000033a9         xor        edx, edx                                    ; CODE XREF=print_int+81
00000000000033ab         mov        rax, r14
00000000000033ae         sub        r13, 0x1
00000000000033b2         div        rbx
00000000000033b5         sub        r9d, eax
00000000000033b8         cmp        byte [input_swap], 0x0                      ; input_swap
00000000000033bf         mov        rbp, rax
00000000000033c2         mov        eax, dword [rsp+0x68+var_54]
00000000000033c6         lea        esi, dword [r9+rax]
00000000000033ca         je         loc_3388

00000000000033cc         mov        r12b, byte [r15+3]
00000000000033d0         movzx      ecx, byte [r15+2]
00000000000033d5         movzx      edx, byte [r15+1]
00000000000033da         mov        eax, r12d
00000000000033dd         mov        ah, cl
00000000000033df         movzx      r10d, ax
00000000000033e3         movzx      eax, byte [r15]
00000000000033e7         shl        edx, 0x10
00000000000033ea         or         r10d, edx
00000000000033ed         shl        eax, 0x18
00000000000033f0         or         r10d, eax
00000000000033f3         mov        r12d, r10d
00000000000033f6         mov        edx, r10d
00000000000033f9         jmp        loc_338b
00000000000033fb         align      1024

                     loc_3400:
0000000000003400         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=print_int+50, print_int+119
0000000000003405         xor        rax, qword [fs:0x28]
000000000000340e         jne        loc_341f

0000000000003410         add        rsp, 0x38
0000000000003414         pop        rbx
0000000000003415         pop        rbp
0000000000003416         pop        r12
0000000000003418         pop        r13
000000000000341a         pop        r14
000000000000341c         pop        r15
000000000000341e         ret
                        ; endp

                     loc_341f:
000000000000341f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_int+222
                        ; endp
0000000000003424         align      16                                          ; End of unwind block (FDE at 0xda54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_68: int64_t, -104


                     print_short:
0000000000003430         push       r15                                         ; Begin of unwind block (FDE at 0xdaa0), DATA XREF=sub_3dfe+258
0000000000003432         push       r14
0000000000003434         push       r13
0000000000003436         push       r12
0000000000003438         push       rbp
0000000000003439         push       rbx
000000000000343a         sub        rsp, 0x38
000000000000343e         mov        rax, qword [fs:0x28]
0000000000003447         mov        qword [rsp+0x68+var_40], rax
000000000000344c         xor        eax, eax
000000000000344e         cmp        rdi, rsi
0000000000003451         mov        qword [rsp+0x68+var_68], rcx
0000000000003455         mov        dword [rsp+0x68+var_5C], r8d
000000000000345a         jbe        loc_34f0

0000000000003460         lea        r8, qword [rdi-1]
0000000000003464         movsxd     rax, r9d
0000000000003467         mov        rbx, rdi
000000000000346a         mov        qword [rsp+0x68+var_50], rax
000000000000346f         mov        rbp, rdx
0000000000003472         xor        r15d, r15d
0000000000003475         imul       r8, rax
0000000000003479         mov        rax, rdi
000000000000347c         sub        rax, rsi
000000000000347f         mov        qword [rsp+0x68+var_58], rax
0000000000003484         mov        r13, r8
0000000000003487         jmp        loc_34b4
0000000000003489         align      16

                     loc_3490:
0000000000003490         movzx      edx, word [rbp+r15*2]                       ; CODE XREF=print_short+161

                     loc_3496:
0000000000003496         mov        rdi, qword [rsp+0x68+var_68]                ; CODE XREF=print_short+185
000000000000349a         xor        eax, eax
000000000000349c         add        r15, 0x1
00000000000034a0         call       xprintf                                     ; xprintf
00000000000034a5         sub        r13, qword [rsp+0x68+var_50]
00000000000034aa         cmp        qword [rsp+0x68+var_58], r15
00000000000034af         mov        r9d, r12d
00000000000034b2         je         loc_34f0

                     loc_34b4:
00000000000034b4         xor        edx, edx                                    ; CODE XREF=print_short+87
00000000000034b6         mov        rax, r13
00000000000034b9         div        rbx
00000000000034bc         sub        r9d, eax
00000000000034bf         cmp        byte [input_swap], 0x0                      ; input_swap
00000000000034c6         mov        r12, rax
00000000000034c9         mov        eax, dword [rsp+0x68+var_5C]
00000000000034cd         lea        esi, dword [r9+rax]
00000000000034d1         je         loc_3490

00000000000034d3         mov        r14b, byte [rbp+r15*2+1]
00000000000034d8         movzx      eax, byte [rbp+r15*2]
00000000000034de         mov        ecx, r14d
00000000000034e1         mov        ch, al
00000000000034e3         mov        r14d, ecx
00000000000034e6         movzx      edx, cx
00000000000034e9         jmp        loc_3496
00000000000034eb         align      16

                     loc_34f0:
00000000000034f0         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=print_short+42, print_short+130
00000000000034f5         xor        rax, qword [fs:0x28]
00000000000034fe         jne        loc_350f

0000000000003500         add        rsp, 0x38
0000000000003504         pop        rbx
0000000000003505         pop        rbp
0000000000003506         pop        r12
0000000000003508         pop        r13
000000000000350a         pop        r14
000000000000350c         pop        r15
000000000000350e         ret
                        ; endp

                     loc_350f:
000000000000350f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_short+206
                        ; endp
0000000000003514         align      32                                          ; End of unwind block (FDE at 0xdaa0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_68: int64_t, -104


                     print_s_short:
0000000000003520         push       r15                                         ; Begin of unwind block (FDE at 0xdaec), DATA XREF=sub_3dfe+265
0000000000003522         push       r14
0000000000003524         push       r13
0000000000003526         push       r12
0000000000003528         push       rbp
0000000000003529         push       rbx
000000000000352a         sub        rsp, 0x38
000000000000352e         mov        rax, qword [fs:0x28]
0000000000003537         mov        qword [rsp+0x68+var_40], rax
000000000000353c         xor        eax, eax
000000000000353e         cmp        rdi, rsi
0000000000003541         mov        qword [rsp+0x68+var_68], rcx
0000000000003545         mov        dword [rsp+0x68+var_5C], r8d
000000000000354a         jbe        loc_35e0

0000000000003550         lea        r8, qword [rdi-1]
0000000000003554         movsxd     rax, r9d
0000000000003557         mov        rbx, rdi
000000000000355a         mov        qword [rsp+0x68+var_50], rax
000000000000355f         mov        rbp, rdx
0000000000003562         xor        r15d, r15d
0000000000003565         imul       r8, rax
0000000000003569         mov        rax, rdi
000000000000356c         sub        rax, rsi
000000000000356f         mov        qword [rsp+0x68+var_58], rax
0000000000003574         mov        r13, r8
0000000000003577         jmp        loc_35a4
0000000000003579         align      128

                     loc_3580:
0000000000003580         movsx      edx, word [rbp+r15*2]                       ; CODE XREF=print_s_short+161

                     loc_3586:
0000000000003586         mov        rdi, qword [rsp+0x68+var_68]                ; CODE XREF=print_s_short+185
000000000000358a         xor        eax, eax
000000000000358c         add        r15, 0x1
0000000000003590         call       xprintf                                     ; xprintf
0000000000003595         sub        r13, qword [rsp+0x68+var_50]
000000000000359a         cmp        qword [rsp+0x68+var_58], r15
000000000000359f         mov        r9d, r12d
00000000000035a2         je         loc_35e0

                     loc_35a4:
00000000000035a4         xor        edx, edx                                    ; CODE XREF=print_s_short+87
00000000000035a6         mov        rax, r13
00000000000035a9         div        rbx
00000000000035ac         sub        r9d, eax
00000000000035af         cmp        byte [input_swap], 0x0                      ; input_swap
00000000000035b6         mov        r12, rax
00000000000035b9         mov        eax, dword [rsp+0x68+var_5C]
00000000000035bd         lea        esi, dword [r9+rax]
00000000000035c1         je         loc_3580

00000000000035c3         mov        r14b, byte [rbp+r15*2+1]
00000000000035c8         movzx      eax, byte [rbp+r15*2]
00000000000035ce         mov        ecx, r14d
00000000000035d1         mov        ch, al
00000000000035d3         mov        r14d, ecx
00000000000035d6         movsx      edx, cx
00000000000035d9         jmp        loc_3586
00000000000035db         align      32

                     loc_35e0:
00000000000035e0         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=print_s_short+42, print_s_short+130
00000000000035e5         xor        rax, qword [fs:0x28]
00000000000035ee         jne        loc_35ff

00000000000035f0         add        rsp, 0x38
00000000000035f4         pop        rbx
00000000000035f5         pop        rbp
00000000000035f6         pop        r12
00000000000035f8         pop        r13
00000000000035fa         pop        r14
00000000000035fc         pop        r15
00000000000035fe         ret
                        ; endp

                     loc_35ff:
00000000000035ff         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_s_short+206
                        ; endp
0000000000003604         align      16                                          ; End of unwind block (FDE at 0xdaec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     print_char:
0000000000003610         push       r15                                         ; Begin of unwind block (FDE at 0xdb38), DATA XREF=sub_3dfe+290
0000000000003612         push       r14
0000000000003614         push       r13
0000000000003616         push       r12
0000000000003618         push       rbp
0000000000003619         push       rbx
000000000000361a         sub        rsp, 0x18
000000000000361e         cmp        rdi, rsi
0000000000003621         mov        qword [rsp+0x48+var_48], rcx
0000000000003625         jbe        loc_3682

0000000000003627         lea        rcx, qword [rdi-1]
000000000000362b         movsxd     r12, r9d
000000000000362e         mov        rbp, rdi
0000000000003631         sub        rbp, rsi
0000000000003634         mov        rbx, rdi
0000000000003637         mov        r15, rdx
000000000000363a         imul       rcx, r12
000000000000363e         lea        rax, qword [rdx+rbp]
0000000000003642         mov        r14d, r8d
0000000000003645         mov        qword [rsp+0x48+var_40], rax
000000000000364a         mov        r13, rcx
000000000000364d         nop        dword [rax]

                     loc_3650:
0000000000003650         mov        rax, r13                                    ; CODE XREF=print_char+112
0000000000003653         xor        edx, edx
0000000000003655         mov        rdi, qword [rsp+0x48+var_48]
0000000000003659         div        rbx
000000000000365c         movzx      edx, byte [r15]
0000000000003660         sub        r13, r12
0000000000003663         add        r15, 0x1
0000000000003667         sub        r9d, eax
000000000000366a         mov        rbp, rax
000000000000366d         xor        eax, eax
000000000000366f         lea        esi, dword [r9+r14]
0000000000003673         call       xprintf                                     ; xprintf
0000000000003678         cmp        r15, qword [rsp+0x48+var_40]
000000000000367d         mov        r9d, ebp
0000000000003680         jne        loc_3650

                     loc_3682:
0000000000003682         add        rsp, 0x18                                   ; CODE XREF=print_char+21
0000000000003686         pop        rbx
0000000000003687         pop        rbp
0000000000003688         pop        r12
000000000000368a         pop        r13
000000000000368c         pop        r14
000000000000368e         pop        r15
0000000000003690         ret
                        ; endp
0000000000003691         align      32                                          ; End of unwind block (FDE at 0xdb38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     print_s_char:
00000000000036a0         push       r15                                         ; Begin of unwind block (FDE at 0xdb80), DATA XREF=sub_3dfe+297
00000000000036a2         push       r14
00000000000036a4         push       r13
00000000000036a6         push       r12
00000000000036a8         push       rbp
00000000000036a9         push       rbx
00000000000036aa         sub        rsp, 0x18
00000000000036ae         cmp        rdi, rsi
00000000000036b1         mov        qword [rsp+0x48+var_48], rcx
00000000000036b5         jbe        loc_3712

00000000000036b7         lea        rcx, qword [rdi-1]
00000000000036bb         movsxd     r12, r9d
00000000000036be         mov        rbp, rdi
00000000000036c1         sub        rbp, rsi
00000000000036c4         mov        rbx, rdi
00000000000036c7         mov        r15, rdx
00000000000036ca         imul       rcx, r12
00000000000036ce         lea        rax, qword [rdx+rbp]
00000000000036d2         mov        r14d, r8d
00000000000036d5         mov        qword [rsp+0x48+var_40], rax
00000000000036da         mov        r13, rcx
00000000000036dd         nop        dword [rax]

                     loc_36e0:
00000000000036e0         mov        rax, r13                                    ; CODE XREF=print_s_char+112
00000000000036e3         xor        edx, edx
00000000000036e5         mov        rdi, qword [rsp+0x48+var_48]
00000000000036e9         div        rbx
00000000000036ec         movsx      edx, byte [r15]
00000000000036f0         sub        r13, r12
00000000000036f3         add        r15, 0x1
00000000000036f7         sub        r9d, eax
00000000000036fa         mov        rbp, rax
00000000000036fd         xor        eax, eax
00000000000036ff         lea        esi, dword [r9+r14]
0000000000003703         call       xprintf                                     ; xprintf
0000000000003708         cmp        r15, qword [rsp+0x48+var_40]
000000000000370d         mov        r9d, ebp
0000000000003710         jne        loc_36e0

                     loc_3712:
0000000000003712         add        rsp, 0x18                                   ; CODE XREF=print_s_char+21
0000000000003716         pop        rbx
0000000000003717         pop        rbp
0000000000003718         pop        r12
000000000000371a         pop        r13
000000000000371c         pop        r14
000000000000371e         pop        r15
0000000000003720         ret
                        ; endp
0000000000003721         align      16                                          ; End of unwind block (FDE at 0xdb80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int8_t, -120
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_98: int32_t, -152
        ;    var_A0: int64_t, -160
        ;    var_B8: -184


                     print_long_double:
0000000000003730         push       r15                                         ; Begin of unwind block (FDE at 0xdbc8), DATA XREF=sub_3dfe+651
0000000000003732         push       r14
0000000000003734         push       r13
0000000000003736         push       r12
0000000000003738         mov        r12, rdi
000000000000373b         push       rbp
000000000000373c         push       rbx
000000000000373d         sub        rsp, 0x78
0000000000003741         mov        rdi, qword [fs:0x28]
000000000000374a         mov        qword [rsp+0xa8+var_40], rdi
000000000000374f         xor        edi, edi
0000000000003751         cmp        r12, rsi
0000000000003754         mov        qword [rsp+0xa8+var_A0], rsi
0000000000003759         mov        dword [rsp+0xa8+var_94], r8d
000000000000375e         jbe        loc_3820

0000000000003764         lea        r8, qword [r12-1]
0000000000003769         movsxd     rax, r9d
000000000000376c         mov        rbx, rdx
000000000000376f         mov        qword [rsp+0xa8+var_90], rax
0000000000003774         mov        r15, r12
0000000000003777         lea        r13, qword [rsp+0xa8+var_78]
000000000000377c         imul       r8, rax
0000000000003780         mov        r14, r8
0000000000003783         jmp        loc_37cc
0000000000003785         align      8

                     loc_3788:
0000000000003788         fld        tword [rbx]                                 ; CODE XREF=print_long_double+191

                     loc_378a:
000000000000378a         sub        rsp, 0x10                                   ; CODE XREF=print_long_double+231
000000000000378e         xor        ecx, ecx
0000000000003790         xor        edx, edx
0000000000003792         mov        esi, 0x2d
0000000000003797         mov        rdi, r13
000000000000379a         add        rbx, 0x10
000000000000379e         fstp       tword [rsp+0xb8+var_B8]
00000000000037a1         call       ldtoastr                                    ; ldtoastr
00000000000037a6         lea        rdi, qword [a0123456789abcd+24]             ; 0xacdc
00000000000037ad         mov        rdx, r13
00000000000037b0         xor        eax, eax
00000000000037b2         mov        esi, dword [rsp+0xb8+var_98]
00000000000037b6         call       xprintf                                     ; xprintf
00000000000037bb         sub        r14, qword [rsp+0xb8+var_90]
00000000000037c0         mov        r9d, ebp
00000000000037c3         pop        rax
00000000000037c4         pop        rdx
00000000000037c5         cmp        r15, qword [rsp+0xa8+var_A0]
00000000000037ca         je         loc_3820

                     loc_37cc:
00000000000037cc         xor        edx, edx                                    ; CODE XREF=print_long_double+83
00000000000037ce         mov        rax, r14
00000000000037d1         sub        r15, 0x1
00000000000037d5         div        r12
00000000000037d8         sub        r9d, eax
00000000000037db         add        r9d, dword [rsp+0xa8+var_94]
00000000000037e0         cmp        byte [input_swap], 0x0                      ; input_swap
00000000000037e7         mov        rbp, rax
00000000000037ea         mov        dword [rsp+0xa8+var_98], r9d
00000000000037ef         je         loc_3788

00000000000037f1         lea        rdx, qword [rbx+0xf]
00000000000037f5         lea        rax, qword [rsp+0xa8+var_88]
00000000000037fa         lea        rsi, qword [rsp+0xa8+var_78]
00000000000037ff         nop

                     loc_3800:
0000000000003800         movzx      ecx, byte [rdx]                             ; CODE XREF=print_long_double+225
0000000000003803         add        rax, 0x1
0000000000003807         sub        rdx, 0x1
000000000000380b         mov        byte [rax-1], cl
000000000000380e         cmp        rsi, rax
0000000000003811         jne        loc_3800

0000000000003813         fld        tword [rsp+0xa8+var_88]
0000000000003817         jmp        loc_378a
000000000000381c         align      32

                     loc_3820:
0000000000003820         mov        rax, qword [rsp+0xa8+var_40]                ; CODE XREF=print_long_double+46, print_long_double+154
0000000000003825         xor        rax, qword [fs:0x28]
000000000000382e         jne        loc_383f

0000000000003830         add        rsp, 0x78
0000000000003834         pop        rbx
0000000000003835         pop        rbp
0000000000003836         pop        r12
0000000000003838         pop        r13
000000000000383a         pop        r14
000000000000383c         pop        r15
000000000000383e         ret
                        ; endp

                     loc_383f:
000000000000383f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_long_double+254
                        ; endp
0000000000003844         align      16                                          ; End of unwind block (FDE at 0xdbc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_68: int8_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_84: int32_t, -132
        ;    var_88: int32_t, -136
        ;    var_90: int64_t, -144


                     print_double:
0000000000003850         push       r15                                         ; Begin of unwind block (FDE at 0xdc24), DATA XREF=sub_3dfe+603
0000000000003852         push       r14
0000000000003854         push       r13
0000000000003856         push       r12
0000000000003858         push       rbp
0000000000003859         push       rbx
000000000000385a         mov        rbp, rdi
000000000000385d         sub        rsp, 0x68
0000000000003861         mov        rdi, qword [fs:0x28]
000000000000386a         mov        qword [rsp+0x98+var_40], rdi
000000000000386f         xor        edi, edi
0000000000003871         cmp        rbp, rsi
0000000000003874         mov        qword [rsp+0x98+var_90], rsi
0000000000003879         mov        dword [rsp+0x98+var_84], r8d
000000000000387e         jbe        loc_3940

0000000000003884         lea        r8, qword [rbp-1]
0000000000003888         movsxd     rax, r9d
000000000000388b         mov        r13, rdx
000000000000388e         mov        qword [rsp+0x98+var_80], rax
0000000000003893         mov        r15, rbp
0000000000003896         lea        r12, qword [rsp+0x98+var_68]
000000000000389b         imul       r8, rax
000000000000389f         mov        r14, r8
00000000000038a2         jmp        loc_38e7
00000000000038a4         align      8

                     loc_38a8:
00000000000038a8         movsd      xmm0, qword [r13]                           ; CODE XREF=print_double+186

                     loc_38ae:
00000000000038ae         xor        ecx, ecx                                    ; CODE XREF=print_double+234
00000000000038b0         xor        edx, edx
00000000000038b2         mov        esi, 0x28
00000000000038b7         mov        rdi, r12
00000000000038ba         add        r13, 0x8
00000000000038be         call       dtoastr                                     ; dtoastr
00000000000038c3         mov        esi, dword [rsp+0x98+var_88]
00000000000038c7         lea        rdi, qword [a0123456789abcd+24]             ; 0xacdc
00000000000038ce         xor        eax, eax
00000000000038d0         mov        rdx, r12
00000000000038d3         call       xprintf                                     ; xprintf
00000000000038d8         sub        r14, qword [rsp+0x98+var_80]
00000000000038dd         cmp        r15, qword [rsp+0x98+var_90]
00000000000038e2         mov        r9d, ebx
00000000000038e5         je         loc_3940

                     loc_38e7:
00000000000038e7         xor        edx, edx                                    ; CODE XREF=print_double+82
00000000000038e9         mov        rax, r14
00000000000038ec         sub        r15, 0x1
00000000000038f0         div        rbp
00000000000038f3         sub        r9d, eax
00000000000038f6         add        r9d, dword [rsp+0x98+var_84]
00000000000038fb         cmp        byte [input_swap], 0x0                      ; input_swap
0000000000003902         mov        rbx, rax
0000000000003905         mov        dword [rsp+0x98+var_88], r9d
000000000000390a         je         loc_38a8

000000000000390c         lea        rdx, qword [r13+7]
0000000000003910         lea        rsi, qword [rsp+0x98+var_70]
0000000000003915         xor        eax, eax
0000000000003917         nop        word [rax+rax]

                     loc_3920:
0000000000003920         movzx      ecx, byte [rdx]                             ; CODE XREF=print_double+226
0000000000003923         sub        rdx, 0x1
0000000000003927         mov        byte [rsi+rax], cl
000000000000392a         add        rax, 0x1
000000000000392e         cmp        rax, 0x8
0000000000003932         jne        loc_3920

0000000000003934         movsd      xmm0, qword [rsp+0x98+var_70]
000000000000393a         jmp        loc_38ae
000000000000393f         align      64

                     loc_3940:
0000000000003940         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=print_double+46, print_double+149
0000000000003945         xor        rax, qword [fs:0x28]
000000000000394e         jne        loc_395f

0000000000003950         add        rsp, 0x68
0000000000003954         pop        rbx
0000000000003955         pop        rbp
0000000000003956         pop        r12
0000000000003958         pop        r13
000000000000395a         pop        r14
000000000000395c         pop        r15
000000000000395e         ret
                        ; endp

                     loc_395f:
000000000000395f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_double+254
                        ; endp
0000000000003964         align      16                                          ; End of unwind block (FDE at 0xdc24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_68: int8_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     print_float:
0000000000003970         push       r15                                         ; Begin of unwind block (FDE at 0xdc70), DATA XREF=sub_3dfe+627
0000000000003972         push       r14
0000000000003974         mov        rax, rsi
0000000000003977         push       r13
0000000000003979         push       r12
000000000000397b         push       rbp
000000000000397c         push       rbx
000000000000397d         sub        rsp, 0x68
0000000000003981         mov        qword [rsp+0x98+var_88], rsi
0000000000003986         mov        dword [rsp+0x98+var_70], r8d
000000000000398b         mov        rsi, qword [fs:0x28]
0000000000003994         mov        qword [rsp+0x98+var_40], rsi
0000000000003999         xor        esi, esi
000000000000399b         cmp        rdi, rax
000000000000399e         jbe        loc_3a70

00000000000039a4         lea        r8, qword [rdi-1]
00000000000039a8         movsxd     rax, r9d
00000000000039ab         mov        r12d, ebp
00000000000039ae         mov        qword [rsp+0x98+var_80], rax
00000000000039b3         mov        rbx, rdx
00000000000039b6         mov        qword [rsp+0x98+var_78], rdi
00000000000039bb         imul       r8, rax
00000000000039bf         lea        rax, qword [rsp+0x98+var_68]
00000000000039c4         mov        rbp, rdi
00000000000039c7         mov        r13d, r9d
00000000000039ca         mov        qword [rsp+0x98+var_90], rax
00000000000039cf         mov        r15, r8
00000000000039d2         jmp        loc_3a18
00000000000039d4         align      8

                     loc_39d8:
00000000000039d8         movss      xmm0, dword [rbx]                           ; CODE XREF=print_float+200

                     loc_39dc:
00000000000039dc         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=print_float+249
00000000000039e1         xor        ecx, ecx
00000000000039e3         xor        edx, edx
00000000000039e5         mov        esi, 0x1f
00000000000039ea         add        rbx, 0x4
00000000000039ee         call       ftoastr                                     ; ftoastr
00000000000039f3         mov        rdx, qword [rsp+0x98+var_90]
00000000000039f8         lea        rdi, qword [a0123456789abcd+24]             ; 0xacdc
00000000000039ff         mov        esi, r13d
0000000000003a02         xor        eax, eax
0000000000003a04         mov        r13d, r14d
0000000000003a07         call       xprintf                                     ; xprintf
0000000000003a0c         sub        r15, qword [rsp+0x98+var_80]
0000000000003a11         cmp        rbp, qword [rsp+0x98+var_88]
0000000000003a16         je         loc_3a70

                     loc_3a18:
0000000000003a18         xor        edx, edx                                    ; CODE XREF=print_float+98
0000000000003a1a         mov        rax, r15
0000000000003a1d         sub        rbp, 0x1
0000000000003a21         div        qword [rsp+0x98+var_78]
0000000000003a26         sub        r13d, eax
0000000000003a29         add        r13d, dword [rsp+0x98+var_70]
0000000000003a2e         cmp        byte [input_swap], 0x0                      ; input_swap
0000000000003a35         mov        r14, rax
0000000000003a38         je         loc_39d8

0000000000003a3a         mov        r12b, byte [rbx+3]
0000000000003a3e         movzx      edx, byte [rbx+1]
0000000000003a42         mov        eax, r12d
0000000000003a45         mov        ah, byte [rbx+2]
0000000000003a48         shl        edx, 0x10
0000000000003a4b         movzx      r10d, ax
0000000000003a4f         movzx      eax, byte [rbx]
0000000000003a52         or         r10d, edx
0000000000003a55         shl        eax, 0x18
0000000000003a58         or         r10d, eax
0000000000003a5b         mov        dword [rsp+0x98+var_6C], r10d
0000000000003a60         mov        r12d, r10d
0000000000003a63         movss      xmm0, dword [rsp+0x98+var_6C]
0000000000003a69         jmp        loc_39dc
0000000000003a6e         align      16

                     loc_3a70:
0000000000003a70         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=print_float+46, print_float+166
0000000000003a75         xor        rax, qword [fs:0x28]
0000000000003a7e         jne        loc_3a8f

0000000000003a80         add        rsp, 0x68
0000000000003a84         pop        rbx
0000000000003a85         pop        rbp
0000000000003a86         pop        r12
0000000000003a88         pop        r13
0000000000003a8a         pop        r14
0000000000003a8c         pop        r15
0000000000003a8e         ret
                        ; endp

                     loc_3a8f:
0000000000003a8f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_float+270
                        ; endp
0000000000003a94         align      32                                          ; End of unwind block (FDE at 0xdc70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     decode_format_string:
0000000000003aa0         push       r15                                         ; Begin of unwind block (FDE at 0xdcc0), CODE XREF=main+653, main+679, main+759, main+783, main+807, main+831, main+855, main+879, main+903, main+1007, main+1111
0000000000003aa2         push       r14
0000000000003aa4         push       r13
0000000000003aa6         push       r12
0000000000003aa8         push       rbp
0000000000003aa9         push       rbx
0000000000003aaa         sub        rsp, 0x18
0000000000003aae         test       rdi, rdi
0000000000003ab1         mov        qword [rsp+0x48+var_48], rdi
0000000000003ab5         je         loc_42a5

0000000000003abb         cmp        byte [rdi], 0x0
0000000000003abe         mov        rax, qword [n_specs]                        ; n_specs
0000000000003ac5         mov        r12, rdi
0000000000003ac8         lea        r14, qword [switch_table_bfc0]              ; switch_table_bfc0
0000000000003acf         je         loc_3cf2

0000000000003ad5         nop        dword [rax]

                     loc_3ad8:
0000000000003ad8         mov        rcx, qword [n_specs_allocated]              ; n_specs_allocated, CODE XREF=decode_format_string+588
0000000000003adf         mov        rdi, qword [spec]                           ; spec
0000000000003ae6         cmp        rcx, rax
0000000000003ae9         jbe        loc_3d80

                     loc_3aef:
0000000000003aef         lea        rax, qword [rax+rax*4]                      ; CODE XREF=decode_format_string+804
0000000000003af3         lea        rbp, qword [rdi+rax*8]
0000000000003af7         test       rbp, rbp
0000000000003afa         je         loc_425d

0000000000003b00         movzx      esi, byte [r12]
0000000000003b05         lea        eax, dword [rsi-0x61]
0000000000003b08         cmp        al, 0x17
0000000000003b0a         ja         loc_3d38

0000000000003b10         movzx      eax, al
0000000000003b13         movsxd     rax, dword [r14+rax*4]
0000000000003b17         add        rax, r14
0000000000003b1a         jmp        rax                                         ; switch statement using table at 0xbfc0, with 24 cases, 0x3b20,0x3bf0,0x3c90,0x3d10,0x3d38
0000000000003b1c         align      32

                     loc_3b20:
0000000000003b20         movzx      eax, byte [r12+1]                           ; case 5, CODE XREF=decode_format_string+122
0000000000003b26         cmp        al, 0x46
0000000000003b28         je         loc_40c8

0000000000003b2e         cmp        al, 0x4c
0000000000003b30         je         loc_40b0

0000000000003b36         cmp        al, 0x44
0000000000003b38         je         loc_4098

0000000000003b3e         movsx      ecx, al
0000000000003b41         lea        rsi, qword [r12+1]
0000000000003b46         sub        ecx, 0x30
0000000000003b49         cmp        ecx, 0x9
0000000000003b4c         ja         loc_4010

0000000000003b52         lea        rbx, qword [r12+2]
0000000000003b57         movsxd     rcx, ecx
0000000000003b5a         xor        r8d, r8d
0000000000003b5d         jmp        loc_3b87
0000000000003b5f         align      32

                     loc_3b60:
0000000000003b60         movsxd     rcx, eax                                    ; CODE XREF=decode_format_string+248
0000000000003b63         movabs     rax, 0xcccccccccccccccd
0000000000003b6d         add        rbx, 0x1
0000000000003b71         mov        rdx, rcx
0000000000003b74         not        rdx
0000000000003b77         mul        rdx
0000000000003b7a         shr        rdx, 0x3
0000000000003b7e         cmp        rdx, r8
0000000000003b81         jb         loc_41a0

                     loc_3b87:
0000000000003b87         lea        rax, qword [r8+r8*4]                        ; CODE XREF=decode_format_string+189
0000000000003b8b         lea        r8, qword [rcx+rax*2]
0000000000003b8f         movsx      eax, byte [rbx]
0000000000003b92         sub        eax, 0x30
0000000000003b95         cmp        eax, 0x9
0000000000003b98         jbe        loc_3b60

0000000000003b9a         cmp        rsi, rbx
0000000000003b9d         mov        r13d, dword [dword_210140]                  ; dword_210140
0000000000003ba4         je         loc_4020

0000000000003baa         cmp        r8, 0x10
0000000000003bae         ja         loc_3bc4

0000000000003bb0         lea        rax, qword [fp_type_size]                   ; fp_type_size
0000000000003bb7         mov        r13d, dword [rax+r8*4]
0000000000003bbb         test       r13d, r13d
0000000000003bbe         jne        loc_4020

                     loc_3bc4:
0000000000003bc4         mov        rdi, qword [rsp+0x48+var_48]                ; argument #1 for method quote, CODE XREF=decode_format_string+270
0000000000003bc8         mov        qword [rsp+0x48+var_40], r8
0000000000003bcd         call       quote                                       ; quote
0000000000003bd2         mov        edx, 0x5
0000000000003bd7         mov        rbx, rax
0000000000003bda         lea        rsi, qword [aInvalidTypeStr_afc0]           ; "invalid type string %s;\\nthis system doesn't provide a %lu-byte floating point type"
0000000000003be1         jmp        loc_3fe2
0000000000003be6         align      16

                     loc_3bf0:
0000000000003bf0         movzx      eax, byte [r12+1]                           ; case 23, CODE XREF=decode_format_string+122
0000000000003bf6         cmp        al, 0x49
0000000000003bf8         je         loc_4200

0000000000003bfe         jle        loc_3e00

0000000000003c04         cmp        al, 0x4c
0000000000003c06         je         loc_41e8

0000000000003c0c         cmp        al, 0x53
0000000000003c0e         jne        loc_3f40

0000000000003c14         cmp        sil, 0x6f
0000000000003c18         lea        rbx, qword [r12+2]
0000000000003c1d         mov        r13d, dword [dword_210188]                  ; dword_210188
0000000000003c24         mov        r8d, 0x2
0000000000003c2a         jne        loc_3e24

                     loc_3c30:
0000000000003c30         lea        eax, dword [r13-4]                          ; CODE XREF=sub_3dfe+32
0000000000003c34         lea        r9, qword [aInvalidTypeStr_ad38+29]         ; 0xad55
0000000000003c3b         lea        r10, qword [rbp+0x10]
0000000000003c3f         lea        rcx, qword [aDs]                            ; "%%*.%d%s"
0000000000003c46         mov        edx, 0x8
0000000000003c4b         mov        esi, 0x1
0000000000003c50         cmp        eax, 0x1
0000000000003c53         lea        rax, qword [a0123456789abcd+31]             ; 0xace3
0000000000003c5a         mov        rdi, r10
0000000000003c5d         mov        qword [rsp+0x48+var_40], r10
0000000000003c62         cmovbe     r9, rax
0000000000003c66         lea        rax, qword [bytes_to_oct_digits]            ; bytes_to_oct_digits
0000000000003c6d         mov        r15d, dword [rax+r8*4]
0000000000003c71         xor        eax, eax
0000000000003c73         mov        r8d, r15d
0000000000003c76         call       j___sprintf_chk                             ; __sprintf_chk
0000000000003c7b         mov        edx, 0x2
0000000000003c80         mov        r10, qword [rsp+0x48+var_40]
0000000000003c85         jmp        loc_3e93
0000000000003c8a         align      16

                     loc_3c90:
0000000000003c90         lea        rbx, qword [r12+1]                          ; case 2, CODE XREF=decode_format_string+122
0000000000003c95         lea        rax, qword [print_ascii]                    ; print_ascii
0000000000003c9c         mov        r15d, 0x3
0000000000003ca2         mov        edx, 0x6
0000000000003ca7         mov        r13d, 0x1

                     loc_3cad:
0000000000003cad         mov        qword [rbp+8], rax                          ; CODE XREF=decode_format_string+653, sub_3dfe+217, sub_3dfe+233, sub_3dfe+249, sub_3dfe+278, sub_3dfe+310, sub_3dfe+610, sub_3dfe+634, sub_3dfe+658
0000000000003cb1         mov        dword [rbp+4], r13d
0000000000003cb5         mov        dword [rbp], edx
0000000000003cb8         mov        dword [rbp+0x1c], r15d
0000000000003cbc         cmp        byte [rbx], 0x7a
0000000000003cbf         sete       al
0000000000003cc2         mov        byte [rbp+0x18], al
0000000000003cc5         movzx      eax, al
0000000000003cc8         add        rbx, rax
0000000000003ccb         cmp        r12, rbx
0000000000003cce         je         loc_423e

0000000000003cd4         mov        rax, qword [n_specs]                        ; n_specs
0000000000003cdb         mov        r12, rbx
0000000000003cde         add        rax, 0x1
0000000000003ce2         cmp        byte [rbx], 0x0
0000000000003ce5         mov        qword [n_specs], rax                        ; n_specs
0000000000003cec         jne        loc_3ad8

                     loc_3cf2:
0000000000003cf2         add        rsp, 0x18                                   ; CODE XREF=decode_format_string+47
0000000000003cf6         mov        eax, 0x1
0000000000003cfb         pop        rbx
0000000000003cfc         pop        rbp
0000000000003cfd         pop        r12
0000000000003cff         pop        r13
0000000000003d01         pop        r14
0000000000003d03         pop        r15
0000000000003d05         ret
                        ; endp
0000000000003d06         align      16

                     loc_3d10:
0000000000003d10         lea        rbx, qword [r12+1]                          ; case 0, CODE XREF=decode_format_string+122
0000000000003d15         mov        r15d, 0x3
0000000000003d1b         lea        rax, qword [print_named_ascii]              ; print_named_ascii
0000000000003d22         mov        edx, 0x5
0000000000003d27         mov        r13d, 0x1
0000000000003d2d         jmp        loc_3cad
0000000000003d32         align      8

                     loc_3d38:
0000000000003d38         mov        rdi, qword [rsp+0x48+var_48]                ; case 22, argument #1 for method quote, CODE XREF=decode_format_string+106, decode_format_string+122
0000000000003d3c         call       quote                                       ; quote
0000000000003d41         movsx      ebx, byte [r12]
0000000000003d46         lea        rsi, qword [aInvalidCharact]                ; argument "msgid" for method j_dcgettext, "invalid character '%c' in type string %s"
0000000000003d4d         mov        rbp, rax
0000000000003d50         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003d55         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003d57         call       j_dcgettext                                 ; dcgettext
0000000000003d5c         mov        r8, rbp
0000000000003d5f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003d62         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003d64         mov        ecx, ebx
0000000000003d66         xor        eax, eax
0000000000003d68         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003d6a         call       j_error                                     ; error
0000000000003d6f         add        rsp, 0x18
0000000000003d73         xor        eax, eax
0000000000003d75         pop        rbx
0000000000003d76         pop        rbp
0000000000003d77         pop        r12
0000000000003d79         pop        r13
0000000000003d7b         pop        r14
0000000000003d7d         pop        r15
0000000000003d7f         ret
                        ; endp

                     loc_3d80:
0000000000003d80         test       rdi, rdi                                    ; CODE XREF=decode_format_string+73
0000000000003d83         je         loc_3dd0

0000000000003d85         movabs     rax, 0x222222222222221
0000000000003d8f         cmp        rcx, rax
0000000000003d92         ja         loc_3df9

0000000000003d94         mov        rax, rcx
0000000000003d97         shr        rax, 0x1
0000000000003d9a         lea        rcx, qword [rcx+rax+1]

                     loc_3d9f:
0000000000003d9f         lea        rsi, qword [rcx+rcx*4]                      ; CODE XREF=decode_format_string+855
0000000000003da3         mov        qword [n_specs_allocated], rcx              ; n_specs_allocated
0000000000003daa         shl        rsi, 0x3                                    ; argument #2 for method xrealloc
0000000000003dae         call       xrealloc                                    ; xrealloc
0000000000003db3         mov        rdi, rax
0000000000003db6         mov        qword [spec], rax                           ; spec
0000000000003dbd         mov        rax, qword [n_specs]                        ; n_specs
0000000000003dc4         jmp        loc_3aef
0000000000003dc9         align      16

                     loc_3dd0:
0000000000003dd0         test       rcx, rcx                                    ; CODE XREF=decode_format_string+739
0000000000003dd3         mov        eax, 0x3
0000000000003dd8         mov        edx, 0x28
0000000000003ddd         cmove      rcx, rax
0000000000003de1         mov        rax, rdx
0000000000003de4         xor        esi, esi
0000000000003de6         mul        rcx
0000000000003de9         jo         loc_429b

                     loc_3def:
0000000000003def         test       rax, rax                                    ; CODE XREF=sub_3dfe+1186
0000000000003df2         js         loc_3df9

0000000000003df4         test       rsi, rsi
0000000000003df7         je         loc_3d9f

                     loc_3df9:
0000000000003df9         call       xalloc_die                                  ; xalloc_die, CODE XREF=decode_format_string+754, decode_format_string+850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3dfe:
0000000000003dfe         nop
                        ; endp

                     loc_3e00:
0000000000003e00         cmp        al, 0x43                                    ; CODE XREF=decode_format_string+350
0000000000003e02         jne        loc_3f40

0000000000003e08         mov        r13d, dword [dword_210184]                  ; dword_210184
0000000000003e0f         lea        rbx, qword [r12+2]
0000000000003e14         mov        r8d, 0x1

                     loc_3e1a:
0000000000003e1a         cmp        sil, 0x6f                                   ; CODE XREF=sub_3dfe+449, sub_3dfe+1020, sub_3dfe+1044, sub_3dfe+1062, sub_3dfe+1083
0000000000003e1e         je         loc_3c30

                     loc_3e24:
0000000000003e24         jle        loc_40e0                                    ; CODE XREF=decode_format_string+394

0000000000003e2a         cmp        sil, 0x75
0000000000003e2e         je         loc_4140

0000000000003e34         cmp        sil, 0x78
0000000000003e38         jne        loc_4049

0000000000003e3e         lea        eax, dword [r13-4]
0000000000003e42         lea        r9, qword [aAddressradix+12]                ; 0xaee0
0000000000003e49         lea        r10, qword [rbp+0x10]
0000000000003e4d         lea        rcx, qword [aDs]                            ; "%%*.%d%s"
0000000000003e54         mov        edx, 0x8
0000000000003e59         mov        esi, 0x1
0000000000003e5e         cmp        eax, 0x1
0000000000003e61         lea        rax, qword [a0123456789abcd+37]             ; 0xace9
0000000000003e68         mov        rdi, r10
0000000000003e6b         mov        qword [rsp+0x48+var_40], r10
0000000000003e70         cmovbe     r9, rax
0000000000003e74         lea        rax, qword [bytes_to_hex_digits]            ; bytes_to_hex_digits
0000000000003e7b         mov        r15d, dword [rax+r8*4]
0000000000003e7f         xor        eax, eax
0000000000003e81         mov        r8d, r15d
0000000000003e84         call       j___sprintf_chk                             ; __sprintf_chk
0000000000003e89         mov        r10, qword [rsp+0x48+var_40]
0000000000003e8e         mov        edx, 0x3

                     loc_3e93:
0000000000003e93         mov        rdi, r10                                    ; argument "__s" for method j_strlen, CODE XREF=decode_format_string+485, sub_3dfe+827, sub_3dfe+916
0000000000003e96         mov        dword [rsp+0x48+var_40], edx
0000000000003e9a         call       j_strlen                                    ; strlen
0000000000003e9f         cmp        rax, 0x7
0000000000003ea3         mov        edx, dword [rsp+0x48+var_40]
0000000000003ea7         ja         loc_427c

0000000000003ead         cmp        r13d, 0x5
0000000000003eb1         ja         loc_4049

0000000000003eb7         lea        rsi, qword [switch_table_c020]              ; switch_table_c020
0000000000003ebe         mov        ecx, r13d
0000000000003ec1         movsxd     rax, dword [rsi+rcx*4]
0000000000003ec5         add        rax, rsi
0000000000003ec8         jmp        rax                                         ; switch statement using table at 0xc020, with 6 cases, 0x3ed0,0x3ee0,0x3ef0,0x3f00,0x3f20,0x4049
0000000000003eca         align      16

                     loc_3ed0:
0000000000003ed0         lea        rax, qword [print_long_long]                ; case 5, print_long_long, CODE XREF=sub_3dfe+202
0000000000003ed7         jmp        loc_3cad
0000000000003edc         align      32

                     loc_3ee0:
0000000000003ee0         lea        rax, qword [print_long]                     ; case 4, print_long, CODE XREF=sub_3dfe+202
0000000000003ee7         jmp        loc_3cad
0000000000003eec         align      16

                     loc_3ef0:
0000000000003ef0         lea        rax, qword [print_int]                      ; case 3, print_int, CODE XREF=sub_3dfe+202
0000000000003ef7         jmp        loc_3cad
0000000000003efc         align      256

                     loc_3f00:
0000000000003f00         lea        rax, qword [print_short]                    ; case 2, print_short, CODE XREF=sub_3dfe+202
0000000000003f07         lea        rcx, qword [print_s_short]                  ; print_s_short
0000000000003f0e         test       edx, edx
0000000000003f10         cmove      rax, rcx
0000000000003f14         jmp        loc_3cad
0000000000003f19         align      32

                     loc_3f20:
0000000000003f20         lea        rax, qword [print_char]                     ; case 1, print_char, CODE XREF=sub_3dfe+202
0000000000003f27         lea        rcx, qword [print_s_char]                   ; print_s_char
0000000000003f2e         test       edx, edx
0000000000003f30         cmove      rax, rcx
0000000000003f34         jmp        loc_3cad
0000000000003f39         align      64

                     loc_3f40:
0000000000003f40         movsx      ecx, al                                     ; CODE XREF=decode_format_string+366, sub_3dfe+4
0000000000003f43         lea        rdi, qword [r12+1]
0000000000003f48         sub        ecx, 0x30
0000000000003f4b         cmp        ecx, 0x9
0000000000003f4e         ja         loc_4229

0000000000003f54         lea        rbx, qword [r12+2]
0000000000003f59         movsxd     rcx, ecx
0000000000003f5c         xor        r8d, r8d
0000000000003f5f         jmp        loc_3f8f
0000000000003f61         align      8

                     loc_3f68:
0000000000003f68         movsxd     rcx, eax                                    ; CODE XREF=sub_3dfe+418
0000000000003f6b         movabs     rax, 0xcccccccccccccccd
0000000000003f75         add        rbx, 0x1
0000000000003f79         mov        rdx, rcx
0000000000003f7c         not        rdx
0000000000003f7f         mul        rdx
0000000000003f82         shr        rdx, 0x3
0000000000003f86         cmp        rdx, r8
0000000000003f89         jb         loc_41a0

                     loc_3f8f:
0000000000003f8f         lea        rax, qword [r8+r8*4]                        ; CODE XREF=sub_3dfe+353
0000000000003f93         lea        r8, qword [rcx+rax*2]
0000000000003f97         movsx      eax, byte [rbx]
0000000000003f9a         sub        eax, 0x30
0000000000003f9d         cmp        eax, 0x9
0000000000003fa0         jbe        loc_3f68

0000000000003fa2         cmp        rdi, rbx
0000000000003fa5         je         loc_4217

0000000000003fab         cmp        r8, 0x8
0000000000003faf         ja         loc_3fc5

0000000000003fb1         lea        rax, qword [integral_type_size]             ; integral_type_size
0000000000003fb8         mov        r13d, dword [rax+r8*4]
0000000000003fbc         test       r13d, r13d
0000000000003fbf         jne        loc_3e1a

                     loc_3fc5:
0000000000003fc5         mov        rdi, qword [rsp+0x48+var_48]                ; argument #1 for method quote, CODE XREF=sub_3dfe+433
0000000000003fc9         mov        qword [rsp+0x48+var_40], r8
0000000000003fce         call       quote                                       ; quote
0000000000003fd3         lea        rsi, qword [aInvalidTypeStr]                ; "invalid type string %s;\\nthis system doesn't provide a %lu-byte integral type"
0000000000003fda         mov        rbx, rax
0000000000003fdd         mov        edx, 0x5

                     loc_3fe2:
0000000000003fe2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=decode_format_string+321
0000000000003fe4         call       j_dcgettext                                 ; dcgettext
0000000000003fe9         mov        r8, qword [rsp+0x48+var_40]
0000000000003fee         mov        rcx, rbx
0000000000003ff1         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003ff4         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003ff6         xor        eax, eax
0000000000003ff8         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003ffa         call       j_error                                     ; error
0000000000003fff         add        rsp, 0x18
0000000000004003         xor        eax, eax
0000000000004005         pop        rbx
0000000000004006         pop        rbp
0000000000004007         pop        r12
0000000000004009         pop        r13
000000000000400b         pop        r14
000000000000400d         pop        r15
000000000000400f         ret
                        ; endp

                     loc_4010:
0000000000004010         mov        r13d, dword [dword_210140]                  ; dword_210140, CODE XREF=decode_format_string+172
0000000000004017         mov        rbx, rsi
000000000000401a         nop        word [rax+rax]

                     loc_4020:
0000000000004020         call       j_localeconv                                ; localeconv, CODE XREF=decode_format_string+260, decode_format_string+286, sub_3dfe+678, sub_3dfe+702, sub_3dfe+726
0000000000004025         mov        rdi, qword [rax]
0000000000004028         mov        eax, 0x1
000000000000402d         cmp        byte [rdi], 0x0
0000000000004030         je         loc_4037

0000000000004032         call       j_strlen                                    ; strlen

                     loc_4037:
0000000000004037         cmp        r13d, 0x7                                   ; CODE XREF=sub_3dfe+562
000000000000403b         je         loc_4050

000000000000403d         cmp        r13d, 0x8
0000000000004041         je         loc_4080

0000000000004043         cmp        r13d, 0x6
0000000000004047         je         loc_4068

                     loc_4049:
0000000000004049         call       j_abort                                     ; abort, case 0, CODE XREF=sub_3dfe+58, sub_3dfe+179, sub_3dfe+202, sub_3dfe+742
                        ; endp
000000000000404e         align      16

                     loc_4050:
0000000000004050         lea        r15d, dword [rax+0x17]                      ; CODE XREF=sub_3dfe+573
0000000000004054         mov        edx, 0x4
0000000000004059         lea        rax, qword [print_double]                   ; print_double
0000000000004060         jmp        loc_3cad
0000000000004065         align      8

                     loc_4068:
0000000000004068         lea        r15d, dword [rax+0xe]                       ; CODE XREF=sub_3dfe+585
000000000000406c         mov        edx, 0x4
0000000000004071         lea        rax, qword [print_float]                    ; print_float
0000000000004078         jmp        loc_3cad
000000000000407d         align      128

                     loc_4080:
0000000000004080         lea        r15d, dword [rax+0x1c]                      ; CODE XREF=sub_3dfe+579
0000000000004084         mov        edx, 0x4
0000000000004089         lea        rax, qword [print_long_double]              ; print_long_double
0000000000004090         jmp        loc_3cad
0000000000004095         align      8

                     loc_4098:
0000000000004098         lea        rbx, qword [r12+2]                          ; CODE XREF=decode_format_string+152
000000000000409d         mov        r13d, dword [dword_210140]                  ; dword_210140
00000000000040a4         jmp        loc_4020
00000000000040a9         align      16

                     loc_40b0:
00000000000040b0         lea        rbx, qword [r12+2]                          ; CODE XREF=decode_format_string+144
00000000000040b5         mov        r13d, dword [dword_210160]                  ; dword_210160
00000000000040bc         jmp        loc_4020
00000000000040c1         align      8

                     loc_40c8:
00000000000040c8         lea        rbx, qword [r12+2]                          ; CODE XREF=decode_format_string+136
00000000000040cd         mov        r13d, dword [dword_210130]                  ; dword_210130
00000000000040d4         jmp        loc_4020
00000000000040d9         align      32

                     loc_40e0:
00000000000040e0         cmp        sil, 0x64                                   ; CODE XREF=loc_3e24
00000000000040e4         jne        loc_4049

00000000000040ea         lea        rax, qword [bytes_to_signed_dec_digits]     ; bytes_to_signed_dec_digits
00000000000040f1         lea        r10, qword [rbp+0x10]
00000000000040f5         lea        rcx, qword [aS]                             ; "%%*%s"
00000000000040fc         mov        edx, 0x8
0000000000004101         mov        esi, 0x1
0000000000004106         mov        r15d, dword [rax+r8*4]
000000000000410a         lea        eax, dword [r13-4]
000000000000410e         lea        r8, qword [aMemoryExhauste+15]              ; 0xd0de
0000000000004115         mov        rdi, r10
0000000000004118         mov        qword [rsp+0x48+var_40], r10
000000000000411d         cmp        eax, 0x1
0000000000004120         lea        rax, qword [a0123456789abcd+28]             ; 0xace0
0000000000004127         cmovbe     r8, rax
000000000000412b         xor        eax, eax
000000000000412d         call       j___sprintf_chk                             ; __sprintf_chk
0000000000004132         xor        edx, edx
0000000000004134         mov        r10, qword [rsp+0x48+var_40]
0000000000004139         jmp        loc_3e93
000000000000413e         align      64

                     loc_4140:
0000000000004140         lea        rax, qword [bytes_to_unsigned_dec_digits]   ; bytes_to_unsigned_dec_digits, CODE XREF=sub_3dfe+48
0000000000004147         lea        r10, qword [rbp+0x10]
000000000000414b         lea        rcx, qword [aS]                             ; "%%*%s"
0000000000004152         mov        edx, 0x8
0000000000004157         mov        esi, 0x1
000000000000415c         mov        r15d, dword [rax+r8*4]
0000000000004160         lea        eax, dword [r13-4]
0000000000004164         lea        r8, qword [a0123456789abcd+35]              ; 0xace7
000000000000416b         mov        rdi, r10
000000000000416e         mov        qword [rsp+0x48+var_40], r10
0000000000004173         cmp        eax, 0x1
0000000000004176         lea        rax, qword [a0123456789abcd+34]             ; 0xace6
000000000000417d         cmovbe     r8, rax
0000000000004181         xor        eax, eax
0000000000004183         call       j___sprintf_chk                             ; __sprintf_chk
0000000000004188         mov        edx, 0x1
000000000000418d         mov        r10, qword [rsp+0x48+var_40]
0000000000004192         jmp        loc_3e93
0000000000004197         align      32

                     loc_41a0:
00000000000041a0         mov        rdi, qword [rsp+0x48+var_48]                ; argument #1 for method quote, CODE XREF=decode_format_string+225, sub_3dfe+395
00000000000041a4         call       quote                                       ; quote
00000000000041a9         lea        rsi, qword [aInvalidTypeStr_ad38]           ; argument "msgid" for method j_dcgettext, "invalid type string %s"
00000000000041b0         mov        rbx, rax
00000000000041b3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000041b8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000041ba         call       j_dcgettext                                 ; dcgettext
00000000000041bf         mov        rcx, rbx
00000000000041c2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000041c5         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000041c7         xor        eax, eax
00000000000041c9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000041cb         call       j_error                                     ; error
00000000000041d0         add        rsp, 0x18
00000000000041d4         xor        eax, eax
00000000000041d6         pop        rbx
00000000000041d7         pop        rbp
00000000000041d8         pop        r12
00000000000041da         pop        r13
00000000000041dc         pop        r14
00000000000041de         pop        r15
00000000000041e0         ret
                        ; endp
00000000000041e1         align      8

                     loc_41e8:
00000000000041e8         lea        rbx, qword [r12+2]                          ; CODE XREF=decode_format_string+358
00000000000041ed         mov        r13d, dword [dword_2101a0]                  ; dword_2101a0
00000000000041f4         mov        r8d, 0x8
00000000000041fa         jmp        loc_3e1a
00000000000041ff         align      512

                     loc_4200:
0000000000004200         lea        rbx, qword [r12+2]                          ; CODE XREF=decode_format_string+344
0000000000004205         mov        r13d, dword [dword_210190]                  ; dword_210190
000000000000420c         mov        r8d, 0x4
0000000000004212         jmp        loc_3e1a

                     loc_4217:
0000000000004217         mov        r13d, dword [dword_210190]                  ; dword_210190, CODE XREF=sub_3dfe+423
000000000000421e         mov        r8d, 0x4
0000000000004224         jmp        loc_3e1a

                     loc_4229:
0000000000004229         mov        r13d, dword [dword_210190]                  ; dword_210190, CODE XREF=sub_3dfe+336
0000000000004230         mov        rbx, rdi
0000000000004233         mov        r8d, 0x4
0000000000004239         jmp        loc_3e1a

                     loc_423e:
000000000000423e         lea        rcx, qword [__PRETTY_FUNCTION__.7462]       ; argument "__function" for method j___assert_fail, "decode_format_string", CODE XREF=decode_format_string+558
0000000000004245         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
000000000000424c         lea        rdi, qword [aSNext]                         ; argument "__assertion" for method j___assert_fail, "s != next"
0000000000004253         mov        edx, 0x3e4                                  ; argument "__line" for method j___assert_fail
0000000000004258         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_425d:
000000000000425d         lea        rcx, qword [__PRETTY_FUNCTION__.7407]       ; argument "__function" for method j___assert_fail, "decode_one_format", CODE XREF=decode_format_string+90
0000000000004264         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
000000000000426b         lea        rdi, qword [aTspecNull]                     ; argument "__assertion" for method j___assert_fail, "tspec != NULL"
0000000000004272         mov        edx, 0x286                                  ; argument "__line" for method j___assert_fail
0000000000004277         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_427c:
000000000000427c         lea        rcx, qword [__PRETTY_FUNCTION__.7407]       ; argument "__function" for method j___assert_fail, "decode_one_format", CODE XREF=sub_3dfe+169
0000000000004283         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
000000000000428a         lea        rdi, qword [aStrlenTspecfmt]                ; argument "__assertion" for method j___assert_fail, "strlen (tspec->fmt_string) < FMT_BYTES_ALLOCATED"
0000000000004291         mov        edx, 0x2e9                                  ; argument "__line" for method j___assert_fail
0000000000004296         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_429b:
000000000000429b         mov        esi, 0x1                                    ; CODE XREF=decode_format_string+841
00000000000042a0         jmp        loc_3def

                     loc_42a5:
00000000000042a5         lea        rcx, qword [__PRETTY_FUNCTION__.7462]       ; argument "__function" for method j___assert_fail, "decode_format_string", CODE XREF=decode_format_string+21
00000000000042ac         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
00000000000042b3         lea        rdi, qword [aSNull]                         ; argument "__assertion" for method j___assert_fail, "s != NULL"
00000000000042ba         mov        edx, 0x3d8                                  ; argument "__line" for method j___assert_fail
00000000000042bf         call       j___assert_fail                             ; __assert_fail
                        ; endp
00000000000042c4         align      16                                          ; End of unwind block (FDE at 0xdcc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int8_t, -68
        ;    var_4C: int32_t, -76
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     print_ascii:
00000000000042d0         push       r15                                         ; Begin of unwind block (FDE at 0xdd5c), DATA XREF=decode_format_string+501
00000000000042d2         push       r14
00000000000042d4         push       r13
00000000000042d6         push       r12
00000000000042d8         push       rbp
00000000000042d9         push       rbx
00000000000042da         sub        rsp, 0x38
00000000000042de         mov        rax, qword [fs:0x28]
00000000000042e7         mov        qword [rsp+0x68+var_40], rax
00000000000042ec         xor        eax, eax
00000000000042ee         cmp        rdi, rsi
00000000000042f1         mov        dword [rsp+0x68+var_50], r8d
00000000000042f6         jbe        loc_4385

00000000000042fc         lea        rbx, qword [rdi-1]
0000000000004300         movsxd     r14, r9d
0000000000004303         mov        rax, rdi
0000000000004306         sub        rax, rsi
0000000000004309         lea        r13, qword [switch_table_c020+24]           ; 0xc038
0000000000004310         mov        r12, rdi
0000000000004313         imul       rbx, r14
0000000000004317         add        rax, rdx
000000000000431a         mov        r15, rdx
000000000000431d         mov        qword [rsp+0x68+var_68], rax
0000000000004321         nop        dword [rax]

                     loc_4328:
0000000000004328         xor        edx, edx                                    ; CODE XREF=print_ascii+179
000000000000432a         mov        rax, rbx
000000000000432d         add        r15, 0x1
0000000000004331         movzx      r8d, byte [r15-1]
0000000000004336         div        r12
0000000000004339         cmp        r8b, 0xd
000000000000433d         movzx      edx, r8b
0000000000004341         mov        rbp, rax
0000000000004344         ja         loc_4420

000000000000434a         movsxd     rax, dword [r13+rdx*4]
000000000000434f         add        rax, r13
0000000000004352         jmp        rax
                        ; endp
0000000000004354         nop        dword [rax]
0000000000004358         lea        rdx, qword [aInvalidTypeStr_ad38+34]        ; 0xad5a
000000000000435f         nop

                     loc_4360:
0000000000004360         mov        eax, dword [rsp+0x68+var_50]                ; CODE XREF=sub_4410+116
0000000000004364         sub        r9d, ebp
0000000000004367         lea        rdi, qword [a0123456789abcd+24]             ; 0xacdc
000000000000436e         sub        rbx, r14
0000000000004371         lea        esi, dword [r9+rax]
0000000000004375         xor        eax, eax
0000000000004377         call       xprintf                                     ; xprintf
000000000000437c         cmp        r15, qword [rsp+0x68+var_68]
0000000000004380         mov        r9d, ebp
0000000000004383         jne        loc_4328

                     loc_4385:
0000000000004385         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=print_ascii+38
000000000000438a         xor        rax, qword [fs:0x28]
0000000000004393         jne        loc_4489

0000000000004399         add        rsp, 0x38
000000000000439d         pop        rbx
000000000000439e         pop        rbp
000000000000439f         pop        r12
00000000000043a1         pop        r13
00000000000043a3         pop        r14
00000000000043a5         pop        r15
00000000000043a7         ret
                        ; endp
00000000000043a8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_43b0:
00000000000043b0         lea        rdx, qword [aInvalidTypeStr_ad38+31]        ; 0xad57
00000000000043b7         jmp        print_ascii+144
                        ; endp
00000000000043b9         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_43c0:
00000000000043c0         lea        rdx, qword [aInvalidTypeStr_ad38+46]        ; 0xad66
00000000000043c7         jmp        print_ascii+144
                        ; endp
00000000000043c9         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_43d0:
00000000000043d0         lea        rdx, qword [aInvalidTypeStr_ad38+40]        ; 0xad60
00000000000043d7         jmp        print_ascii+144
                        ; endp
00000000000043d9         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_43e0:
00000000000043e0         lea        rdx, qword [aInvalidTypeStr_ad38+52]        ; 0xad6c
00000000000043e7         jmp        print_ascii+144
                        ; endp
00000000000043ec         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_43f0:
00000000000043f0         lea        rdx, qword [aInvalidTypeStr_ad38+43]        ; 0xad63
00000000000043f7         jmp        print_ascii+144
                        ; endp
00000000000043fc         align      1024


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4400:
0000000000004400         lea        rdx, qword [aInvalidTypeStr_ad38+49]        ; 0xad69
0000000000004407         jmp        print_ascii+144
                        ; endp
000000000000440c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4410:
0000000000004410         lea        rdx, qword [aInvalidTypeStr_ad38+37]        ; 0xad5d
0000000000004417         jmp        print_ascii+144
                        ; endp
000000000000441c         align      32

                     loc_4420:
0000000000004420         mov        dword [rsp+0x68+var_4C], r9d                ; CODE XREF=print_ascii+116
0000000000004425         mov        qword [rsp+0x68+var_58], rdx
000000000000442a         mov        byte [rsp+0x68+var_60], r8b
000000000000442f         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000004434         mov        rdx, qword [rsp+0x68+var_58]
0000000000004439         mov        rax, qword [rax]
000000000000443c         lea        r11, qword [rsp+0x68+var_44]
0000000000004441         movzx      r8d, byte [rsp+0x68+var_60]
0000000000004447         lea        rcx, qword [aInvalidTypeStr_ad38+23]        ; 0xad4f
000000000000444e         mov        esi, 0x1
0000000000004453         mov        rdi, r11
0000000000004456         mov        qword [rsp+0x68+var_60], r11
000000000000445b         test       byte [rax+rdx*2+1], 0x40
0000000000004460         lea        rax, qword [aInvalidTypeStr_ad38+26]        ; 0xad52
0000000000004467         mov        edx, 0x4
000000000000446c         cmove      rcx, rax
0000000000004470         xor        eax, eax
0000000000004472         call       j___sprintf_chk                             ; __sprintf_chk
0000000000004477         mov        r11, qword [rsp+0x68+var_60]
000000000000447c         mov        r9d, dword [rsp+0x68+var_4C]
0000000000004481         mov        rdx, r11
0000000000004484         jmp        loc_4360

                     loc_4489:
0000000000004489         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_ascii+195
                        ; endp
000000000000448e         align      16                                          ; End of unwind block (FDE at 0xdd5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_and_close:
0000000000004490         push       rbp                                         ; Begin of unwind block (FDE at 0xdda8), CODE XREF=main+2183, main+4163, skip+165, read_char+39, read_block+79
0000000000004491         push       rbx
0000000000004492         mov        ebx, 0x1
0000000000004497         sub        rsp, 0x8
000000000000449b         mov        rax, qword [in_stream]                      ; in_stream
00000000000044a2         test       rax, rax
00000000000044a5         je         loc_44e5

00000000000044a7         test       byte [rax], 0x20
00000000000044aa         mov        ebp, edi
00000000000044ac         jne        loc_4520

00000000000044ae         mov        rdx, qword [file_list]                      ; file_list
00000000000044b5         lea        rdi, qword [aSsArgumentSToo+30]             ; 0xd139
00000000000044bc         mov        ecx, 0x2
00000000000044c1         mov        rsi, qword [rdx-8]
00000000000044c5         rep  cmpsb byte [rsi], byte [rdi]
00000000000044c7         seta       dl
00000000000044ca         sbb        dl, 0x0
00000000000044cd         test       dl, dl
00000000000044cf         jne        loc_4598

                     loc_44d5:
00000000000044d5         mov        ebx, 0x1                                    ; CODE XREF=check_and_close+274

                     loc_44da:
00000000000044da         mov        qword [in_stream], 0x0                      ; in_stream, CODE XREF=check_and_close+236, check_and_close+254, check_and_close+330

                     loc_44e5:
00000000000044e5         mov        rax, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=check_and_close+21
00000000000044ec         test       byte [rax], 0x20
00000000000044ef         je         loc_4514

00000000000044f1         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error"
00000000000044f8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000044fd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000044ff         xor        ebx, ebx
0000000000004501         call       j_dcgettext                                 ; dcgettext
0000000000004506         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004508         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000450b         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000450d         xor        eax, eax
000000000000450f         call       j_error                                     ; error

                     loc_4514:
0000000000004514         add        rsp, 0x8                                    ; CODE XREF=check_and_close+95
0000000000004518         mov        eax, ebx
000000000000451a         pop        rbx
000000000000451b         pop        rbp
000000000000451c         ret
                        ; endp
000000000000451d         align      32

                     loc_4520:
0000000000004520         mov        rdx, qword [input_filename]                 ; input_filename, CODE XREF=check_and_close+28
0000000000004527         xor        edi, edi
0000000000004529         mov        esi, 0x3
000000000000452e         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004533         lea        rsi, qword [aSReadError]                    ; argument "msgid" for method j_dcgettext, "%s: read error"
000000000000453a         mov        rbx, rax
000000000000453d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000453f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004544         call       j_dcgettext                                 ; dcgettext
0000000000004549         mov        rcx, rbx
000000000000454c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000454e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004551         mov        esi, ebp                                    ; argument "__errnum" for method j_error
0000000000004553         xor        eax, eax
0000000000004555         call       j_error                                     ; error
000000000000455a         mov        rax, qword [file_list]                      ; file_list
0000000000004561         lea        rdi, qword [aSsArgumentSToo+30]             ; 0xd139
0000000000004568         mov        ecx, 0x2
000000000000456d         mov        rsi, qword [rax-8]
0000000000004571         rep  cmpsb byte [rsi], byte [rdi]
0000000000004573         seta       al
0000000000004576         sbb        al, 0x0
0000000000004578         xor        ebx, ebx
000000000000457a         test       al, al
000000000000457c         je         loc_44da

0000000000004582         mov        rdi, qword [in_stream]                      ; in_stream
0000000000004589         call       rpl_fclose                                  ; rpl_fclose
000000000000458e         jmp        loc_44da
0000000000004593         align      8

                     loc_4598:
0000000000004598         mov        rdi, rax                                    ; CODE XREF=check_and_close+63
000000000000459b         call       rpl_fclose                                  ; rpl_fclose
00000000000045a0         test       eax, eax
00000000000045a2         je         loc_44d5

00000000000045a8         mov        rdx, qword [input_filename]                 ; input_filename
00000000000045af         mov        esi, 0x3
00000000000045b4         xor        edi, edi
00000000000045b6         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000045bb         mov        rbx, rax
00000000000045be         call       j___errno_location                          ; __errno_location
00000000000045c3         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000045c5         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc7e0
00000000000045cc         mov        rcx, rbx
00000000000045cf         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000045d1         xor        eax, eax
00000000000045d3         xor        ebx, ebx
00000000000045d5         call       j_error                                     ; error
00000000000045da         jmp        loc_44da
00000000000045df         align      32                                          ; End of unwind block (FDE at 0xdda8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     open_next_file:
00000000000045e0         push       rbp                                         ; Begin of unwind block (FDE at 0xddd4), CODE XREF=main+1622, skip+172, read_char+46, read_block+87
00000000000045e1         push       rbx
00000000000045e2         lea        rbx, qword [aSsArgumentSToo+30]             ; 0xd139
00000000000045e9         mov        ebp, 0x1
00000000000045ee         sub        rsp, 0x8

                     loc_45f2:
00000000000045f2         mov        rax, qword [file_list]                      ; file_list, CODE XREF=open_next_file+127
00000000000045f9         mov        rdx, qword [rax]
00000000000045fc         test       rdx, rdx
00000000000045ff         mov        qword [input_filename], rdx                 ; input_filename
0000000000004606         je         loc_4695

000000000000460c         mov        ecx, 0x2
0000000000004611         mov        rsi, rdx
0000000000004614         mov        rdi, rbx
0000000000004617         add        rax, 0x8
000000000000461b         rep  cmpsb byte [rsi], byte [rdi]
000000000000461d         mov        qword [file_list], rax                      ; file_list
0000000000004624         seta       al
0000000000004627         sbb        al, 0x0
0000000000004629         test       al, al
000000000000462b         jne        loc_4668

000000000000462d         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
0000000000004634         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004639         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000463b         call       j_dcgettext                                 ; dcgettext
0000000000004640         mov        qword [input_filename], rax                 ; input_filename
0000000000004647         mov        rax, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
000000000000464e         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
0000000000004655         mov        qword [in_stream], rax                      ; in_stream

                     loc_465c:
000000000000465c         test       rax, rax                                    ; CODE XREF=open_next_file+249
000000000000465f         je         loc_45f2

0000000000004661         jmp        loc_4683
0000000000004663         align      8

                     loc_4668:
0000000000004668         lea        rsi, qword [aInvalidTypeStr_ad38+47]        ; argument "__modes" for method j_fopen, 0xad67, CODE XREF=open_next_file+75
000000000000466f         mov        rdi, rdx                                    ; argument "__filename" for method j_fopen
0000000000004672         call       j_fopen                                     ; fopen
0000000000004677         test       rax, rax
000000000000467a         mov        qword [in_stream], rax                      ; in_stream
0000000000004681         je         loc_46a0

                     loc_4683:
0000000000004683         cmp        byte [limit_bytes_to_format], 0x0           ; limit_bytes_to_format, CODE XREF=open_next_file+129
000000000000468a         je         loc_4695

000000000000468c         cmp        byte [flag_dump_strings], 0x0               ; flag_dump_strings
0000000000004693         je         loc_46e0

                     loc_4695:
0000000000004695         add        rsp, 0x8                                    ; CODE XREF=open_next_file+38, open_next_file+170, open_next_file+273
0000000000004699         mov        eax, ebp
000000000000469b         pop        rbx
000000000000469c         pop        rbp
000000000000469d         ret
                        ; endp
000000000000469e         align      32

                     loc_46a0:
00000000000046a0         mov        rdx, qword [input_filename]                 ; input_filename, CODE XREF=open_next_file+161
00000000000046a7         mov        esi, 0x3
00000000000046ac         xor        edi, edi
00000000000046ae         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000046b3         mov        rbp, rax
00000000000046b6         call       j___errno_location                          ; __errno_location
00000000000046bb         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000046bd         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc7e0
00000000000046c4         mov        rcx, rbp
00000000000046c7         xor        eax, eax
00000000000046c9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000046cb         xor        ebp, ebp
00000000000046cd         call       j_error                                     ; error
00000000000046d2         mov        rax, qword [in_stream]                      ; in_stream
00000000000046d9         jmp        loc_465c
00000000000046de         align      32

                     loc_46e0:
00000000000046e0         xor        ecx, ecx                                    ; argument "__n" for method j_setvbuf, CODE XREF=open_next_file+179
00000000000046e2         mov        edx, 0x2                                    ; argument "__modes" for method j_setvbuf
00000000000046e7         xor        esi, esi                                    ; argument "__buf" for method j_setvbuf
00000000000046e9         mov        rdi, rax                                    ; argument "__stream" for method j_setvbuf
00000000000046ec         call       j_setvbuf                                   ; setvbuf
00000000000046f1         jmp        loc_4695
00000000000046f3         align      256                                         ; End of unwind block (FDE at 0xddd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_2048: int8_t, -8264
        ;    var_20A0: int64_t, -8352
        ;    var_20A8: int64_t, -8360
        ;    var_20C0: int32_t, -8384


                     skip:
0000000000004700         push       r15                                         ; Begin of unwind block (FDE at 0xde00), CODE XREF=main+1651
0000000000004702         push       r14
0000000000004704         push       r13
0000000000004706         push       r12
0000000000004708         push       rbp
0000000000004709         push       rbx
000000000000470a         sub        rsp, 0x20a8
0000000000004711         mov        rax, qword [fs:0x28]
000000000000471a         mov        qword [rsp+0x20d8+var_40], rax
0000000000004722         xor        eax, eax
0000000000004724         test       rdi, rdi
0000000000004727         je         loc_48a8

000000000000472d         mov        r15, qword [in_stream]                      ; in_stream
0000000000004734         test       r15, r15
0000000000004737         je         loc_480e

000000000000473d         mov        r13, rdi
0000000000004740         mov        ebx, 0x1
0000000000004745         mov        r12, rsp
0000000000004748         lea        rbp, qword [rsp+0x20d8+var_2048]
0000000000004750         movabs     r14, 0x1fffffffffffffff
000000000000475a         jmp        loc_47bf
000000000000475c         align      32

                     loc_4760:
0000000000004760         mov        eax, dword [rsp+0x20d8+var_20C0]            ; CODE XREF=skip+216
0000000000004764         and        eax, aSSnsSAndOthers                        ; "s, %s,\\n%s, %s, and others.\\n"
0000000000004769         cmp        eax, 0x8000
000000000000476e         jne        loc_4838

0000000000004774         mov        rax, qword [rsp+0x20d8+var_20A0]
0000000000004779         mov        ecx, 0x200
000000000000477e         lea        rdx, qword [rax-1]
0000000000004782         cmp        rdx, r14
0000000000004785         mov        rdx, qword [rsp+0x20d8+var_20A8]
000000000000478a         cmova      rax, rcx
000000000000478e         cmp        rdx, rax
0000000000004791         jle        loc_4838

0000000000004797         cmp        rdx, r13
000000000000479a         jae        loc_48be

00000000000047a0         sub        r13, rdx

                     loc_47a3:
00000000000047a3         xor        edi, edi                                    ; CODE XREF=skip+268, skip+438
00000000000047a5         call       check_and_close                             ; check_and_close
00000000000047aa         and        ebx, eax
00000000000047ac         call       open_next_file                              ; open_next_file
00000000000047b1         mov        r15, qword [in_stream]                      ; in_stream
00000000000047b8         and        ebx, eax
00000000000047ba         test       r15, r15
00000000000047bd         je         loc_480e

                     loc_47bf:
00000000000047bf         mov        rdi, r15                                    ; argument "__stream" for method j_fileno, CODE XREF=skip+90
00000000000047c2         call       j_fileno                                    ; fileno
00000000000047c7         mov        rdx, r12                                    ; argument "__stat_buf" for method j___fxstat
00000000000047ca         mov        esi, eax                                    ; argument "__fildes" for method j___fxstat
00000000000047cc         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000047d1         call       j___fxstat                                  ; __fxstat
00000000000047d6         test       eax, eax
00000000000047d8         je         loc_4760

00000000000047da         mov        rdx, qword [input_filename]                 ; input_filename
00000000000047e1         mov        esi, 0x3
00000000000047e6         xor        edi, edi
00000000000047e8         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000047ed         mov        rbx, rax
00000000000047f0         call       j___errno_location                          ; __errno_location
00000000000047f5         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000047f7         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc7e0
00000000000047fe         mov        rcx, rbx
0000000000004801         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004803         xor        eax, eax
0000000000004805         xor        ebx, ebx
0000000000004807         call       j_error                                     ; error
000000000000480c         jmp        loc_47a3

                     loc_480e:
000000000000480e         lea        rsi, qword [aCannotSkipPast]                ; argument "msgid" for method j_dcgettext, "cannot skip past end of combined input", CODE XREF=skip+55, skip+189
0000000000004815         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000481a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000481c         call       j_dcgettext                                 ; dcgettext
0000000000004821         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004823         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004826         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000482b         xor        eax, eax
000000000000482d         call       j_error                                     ; error
0000000000004832         nop        word [rax+rax]

                     loc_4838:
0000000000004838         mov        r15d, 0x2000                                ; CODE XREF=skip+110, skip+145
000000000000483e         nop

                     loc_4840:
0000000000004840         cmp        r15, r13                                    ; CODE XREF=skip+383
0000000000004843         mov        r8, qword [in_stream]                       ; in_stream
000000000000484a         mov        edx, 0x1
000000000000484f         cmova      r15, r13
0000000000004853         mov        esi, 0x2000
0000000000004858         mov        rdi, rbp
000000000000485b         mov        rcx, r15
000000000000485e         call       j___fread_unlocked_chk                      ; __fread_unlocked_chk
0000000000004863         sub        r13, rax
0000000000004866         cmp        rax, r15
0000000000004869         je         loc_487c

000000000000486b         mov        rax, qword [in_stream]                      ; in_stream
0000000000004872         mov        eax, dword [rax]
0000000000004874         test       al, 0x20
0000000000004876         jne        loc_48af

0000000000004878         test       al, 0x10
000000000000487a         jne        loc_48b3

                     loc_487c:
000000000000487c         test       r13, r13                                    ; CODE XREF=skip+361
000000000000487f         jne        loc_4840

                     loc_4881:
0000000000004881         mov        rcx, qword [rsp+0x20d8+var_40]              ; CODE XREF=skip+429, skip+433, skip+444, skip+472
0000000000004889         xor        rcx, qword [fs:0x28]
0000000000004892         mov        eax, ebx
0000000000004894         jne        loc_48da

0000000000004896         add        rsp, 0x20a8
000000000000489d         pop        rbx
000000000000489e         pop        rbp
000000000000489f         pop        r12
00000000000048a1         pop        r13
00000000000048a3         pop        r14
00000000000048a5         pop        r15
00000000000048a7         ret
                        ; endp

                     loc_48a8:
00000000000048a8         mov        ebx, 0x1                                    ; CODE XREF=skip+39
00000000000048ad         jmp        loc_4881

                     loc_48af:
00000000000048af         xor        ebx, ebx                                    ; CODE XREF=skip+374
00000000000048b1         jmp        loc_4881

                     loc_48b3:
00000000000048b3         test       r13, r13                                    ; CODE XREF=skip+378
00000000000048b6         jne        loc_47a3

00000000000048bc         jmp        loc_4881

                     loc_48be:
00000000000048be         mov        edx, 0x1                                    ; CODE XREF=skip+154
00000000000048c3         mov        rsi, r13
00000000000048c6         mov        rdi, r15
00000000000048c9         call       rpl_fseeko                                  ; rpl_fseeko
00000000000048ce         test       eax, eax
00000000000048d0         mov        eax, 0x0
00000000000048d5         cmovne     ebx, eax
00000000000048d8         jmp        loc_4881

                     loc_48da:
00000000000048da         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=skip+404
                        ; endp
00000000000048df         align      32                                          ; End of unwind block (FDE at 0xde00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_char:
00000000000048e0         push       r12                                         ; Begin of unwind block (FDE at 0xde50), CODE XREF=main+2716, main+3002
00000000000048e2         mov        r12, rdi
00000000000048e5         push       rbp
00000000000048e6         push       rbx
00000000000048e7         mov        dword [rdi], 0xffffffff
00000000000048ed         mov        ebp, 0x1
00000000000048f2         mov        rdi, qword [in_stream]                      ; in_stream
00000000000048f9         test       rdi, rdi
00000000000048fc         jne        loc_4923

00000000000048fe         jmp        loc_4931

                     loc_4900:
0000000000004900         call       j___errno_location                          ; __errno_location, CODE XREF=read_char+79
0000000000004905         mov        edi, dword [rax]
0000000000004907         call       check_and_close                             ; check_and_close
000000000000490c         mov        ebx, eax
000000000000490e         call       open_next_file                              ; open_next_file
0000000000004913         mov        rdi, qword [in_stream]                      ; in_stream
000000000000491a         and        ebx, eax
000000000000491c         and        ebp, ebx
000000000000491e         test       rdi, rdi
0000000000004921         je         loc_4931

                     loc_4923:
0000000000004923         call       j_fgetc                                     ; fgetc, CODE XREF=read_char+28
0000000000004928         cmp        eax, 0xffffffff
000000000000492b         mov        dword [r12], eax
000000000000492f         je         loc_4900

                     loc_4931:
0000000000004931         mov        eax, ebp                                    ; CODE XREF=read_char+30, read_char+65
0000000000004933         pop        rbx
0000000000004934         pop        rbp
0000000000004935         pop        r12
0000000000004937         ret
                        ; endp
0000000000004938         align      64                                          ; End of unwind block (FDE at 0xde50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     write_block:
0000000000004940         push       r15                                         ; Begin of unwind block (FDE at 0xde7c), CODE XREF=main+2113, main+3473, main+3808
0000000000004942         push       r14
0000000000004944         mov        r14, rsi
0000000000004947         push       r13
0000000000004949         push       r12
000000000000494b         push       rbp
000000000000494c         push       rbx
000000000000494d         sub        rsp, 0x28
0000000000004951         cmp        byte [abbreviate_duplicate_blocks], 0x0     ; abbreviate_duplicate_blocks
0000000000004958         mov        qword [rsp+0x58+var_40], rdi
000000000000495d         mov        qword [rsp+0x58+var_50], rcx
0000000000004962         je         loc_4971

0000000000004964         cmp        byte [first.7524], 0x0                      ; first.7524
000000000000496b         je         loc_4b40

                     loc_4971:
0000000000004971         cmp        qword [n_specs], 0x0                        ; n_specs, CODE XREF=write_block+34, write_block+525, write_block+541
0000000000004979         mov        byte [prev_pair_equal.7525], 0x0            ; prev_pair_equal.7525
0000000000004980         je         loc_4b7f

0000000000004986         mov        rax, qword [rsp+0x58+var_50]
000000000000498b         xor        ebp, ebp
000000000000498d         xor        r12d, r12d
0000000000004990         mov        qword [rsp+0x58+var_48], r14
0000000000004995         lea        r13, qword [rax+r14]
0000000000004999         jmp        loc_49d5
000000000000499b         align      32

                     loc_49a0:
00000000000049a0         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=write_block+280, write_block+482, write_block+674
00000000000049a7         mov        rax, qword [rdi+0x28]
00000000000049ab         cmp        rax, qword [rdi+0x30]
00000000000049af         jae        loc_4b98

00000000000049b5         lea        rdx, qword [rax+1]
00000000000049b9         mov        qword [rdi+0x28], rdx
00000000000049bd         mov        byte [rax], 0xa

                     loc_49c0:
00000000000049c0         add        r12, 0x1                                    ; CODE XREF=write_block+610
00000000000049c4         add        rbp, 0x28
00000000000049c8         cmp        qword [n_specs], r12                        ; n_specs
00000000000049cf         jbe        loc_4b7f

                     loc_49d5:
00000000000049d5         mov        rax, qword [spec]                           ; spec, CODE XREF=write_block+89
00000000000049dc         lea        rsi, qword [width_bytes]                    ; width_bytes
00000000000049e3         mov        rbx, qword [bytes_per_block]                ; bytes_per_block
00000000000049ea         xor        edx, edx
00000000000049ec         mov        eax, dword [rax+rbp+4]
00000000000049f0         movsxd     rcx, dword [rsi+rax*4]
00000000000049f4         mov        rax, rbx
00000000000049f7         sub        rbx, qword [rsp+0x58+var_48]
00000000000049fc         div        rcx
00000000000049ff         xor        edx, edx
0000000000004a01         mov        r14, rax
0000000000004a04         mov        r15d, eax
0000000000004a07         mov        rax, rbx
0000000000004a0a         div        rcx
0000000000004a0d         test       r12, r12
0000000000004a10         mov        rbx, rax
0000000000004a13         jne        loc_4bb0

0000000000004a19         xor        esi, esi
0000000000004a1b         mov        rdi, qword [rsp+0x58+var_40]
0000000000004a20         call       qword [format_address]                      ; format_address, format_address

                     loc_4a26:
0000000000004a26         mov        rax, qword [spec]                           ; spec, CODE XREF=write_block+656
0000000000004a2d         movsxd     rsi, ebx
0000000000004a30         movsxd     rdi, r14d
0000000000004a33         mov        rdx, qword [rsp+0x58+var_50]
0000000000004a38         add        rax, rbp
0000000000004a3b         lea        rcx, qword [rax+0x10]
0000000000004a3f         mov        r9d, dword [rax+0x20]
0000000000004a43         mov        r8d, dword [rax+0x1c]
0000000000004a47         call       qword [rax+8]
0000000000004a4a         mov        rcx, qword [spec]                           ; spec
0000000000004a51         add        rcx, rbp
0000000000004a54         cmp        byte [rcx+0x18], 0x0
0000000000004a58         je         loc_49a0

0000000000004a5e         mov        eax, dword [rcx+0x20]
0000000000004a61         lea        rsi, qword [a0123456789abcd+24]             ; 0xacdc
0000000000004a68         mov        edi, 0x1
0000000000004a6d         imul       eax, ebx
0000000000004a70         imul       ebx, dword [rcx+0x1c]
0000000000004a74         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0xcdc1
0000000000004a7b         cdq
0000000000004a7c         idiv       r15d
0000000000004a7f         lea        edx, dword [rax+rbx]
0000000000004a82         xor        eax, eax
0000000000004a84         call       j___printf_chk                              ; __printf_chk
0000000000004a89         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000004a90         lea        rdi, qword [aStandardInput+17]              ; argument "__ptr" for method j_fwrite_unlocked, 0xad9b
0000000000004a97         mov        edx, 0x3                                    ; argument "__n" for method j_fwrite_unlocked
0000000000004a9c         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000004aa1         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000004aa6         cmp        qword [rsp+0x58+var_48], 0x0
0000000000004aac         je         loc_4b02

0000000000004aae         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000004ab3         mov        rbx, qword [rsp+0x58+var_50]
0000000000004ab8         mov        r15, rax
0000000000004abb         nop        dword [rax+rax]

                     loc_4ac0:
0000000000004ac0         add        rbx, 0x1                                    ; CODE XREF=write_block+448
0000000000004ac4         movzx      ecx, byte [rbx-1]
0000000000004ac8         mov        rdx, qword [r15]
0000000000004acb         test       byte [rdx+rcx*2+1], 0x40
0000000000004ad0         mov        rax, rcx
0000000000004ad3         movzx      esi, cl
0000000000004ad6         jne        loc_4ae2

0000000000004ad8         mov        esi, 0x2e
0000000000004add         mov        eax, 0x2e

                     loc_4ae2:
0000000000004ae2         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=write_block+406
0000000000004ae9         mov        rdx, qword [rdi+0x28]
0000000000004aed         cmp        rdx, qword [rdi+0x30]
0000000000004af1         jae        loc_4b30

0000000000004af3         lea        rcx, qword [rdx+1]
0000000000004af7         mov        qword [rdi+0x28], rcx
0000000000004afb         mov        byte [rdx], al

                     loc_4afd:
0000000000004afd         cmp        rbx, r13                                    ; CODE XREF=write_block+501
0000000000004b00         jne        loc_4ac0

                     loc_4b02:
0000000000004b02         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=write_block+364
0000000000004b09         mov        rax, qword [rdi+0x28]
0000000000004b0d         cmp        rax, qword [rdi+0x30]
0000000000004b11         jae        loc_4bd8

0000000000004b17         lea        rdx, qword [rax+1]
0000000000004b1b         mov        qword [rdi+0x28], rdx
0000000000004b1f         mov        byte [rax], 0x3c
0000000000004b22         jmp        loc_49a0
0000000000004b27         align      16

                     loc_4b30:
0000000000004b30         call       j___overflow                                ; __overflow, CODE XREF=write_block+433
0000000000004b35         jmp        loc_4afd
0000000000004b37         align      64

                     loc_4b40:
0000000000004b40         mov        rdi, rdx                                    ; CODE XREF=write_block+43
0000000000004b43         mov        rdx, qword [bytes_per_block]                ; bytes_per_block
0000000000004b4a         cmp        rdx, rsi
0000000000004b4d         jne        loc_4971

0000000000004b53         mov        rsi, rcx                                    ; argument "__s2" for method j_memcmp
0000000000004b56         call       j_memcmp                                    ; memcmp
0000000000004b5b         test       eax, eax
0000000000004b5d         jne        loc_4971

0000000000004b63         cmp        byte [prev_pair_equal.7525], 0x0            ; prev_pair_equal.7525
0000000000004b6a         jne        loc_4b7f

0000000000004b6c         lea        rdi, qword [aStandardInput+15]              ; argument "__s" for method j_puts, 0xad99
0000000000004b73         call       j_puts                                      ; puts
0000000000004b78         mov        byte [prev_pair_equal.7525], 0x1            ; prev_pair_equal.7525

                     loc_4b7f:
0000000000004b7f         mov        byte [first.7524], 0x0                      ; first.7524, CODE XREF=write_block+64, write_block+143, write_block+554
0000000000004b86         add        rsp, 0x28
0000000000004b8a         pop        rbx
0000000000004b8b         pop        rbp
0000000000004b8c         pop        r12
0000000000004b8e         pop        r13
0000000000004b90         pop        r14
0000000000004b92         pop        r15
0000000000004b94         ret
                        ; endp
0000000000004b95         align      8

                     loc_4b98:
0000000000004b98         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=write_block+111
0000000000004b9d         call       j___overflow                                ; __overflow
0000000000004ba2         jmp        loc_49c0
0000000000004ba7         align      16

                     loc_4bb0:
0000000000004bb0         mov        edx, dword [address_pad_len]                ; address_pad_len, CODE XREF=write_block+211
0000000000004bb6         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0xcdc1
0000000000004bbd         lea        rsi, qword [a0123456789abcd+24]             ; 0xacdc
0000000000004bc4         mov        edi, 0x1
0000000000004bc9         xor        eax, eax
0000000000004bcb         call       j___printf_chk                              ; __printf_chk
0000000000004bd0         jmp        loc_4a26
0000000000004bd5         align      8

                     loc_4bd8:
0000000000004bd8         mov        esi, 0x3c                                   ; argument #2 for method j___overflow, CODE XREF=write_block+465
0000000000004bdd         call       j___overflow                                ; __overflow
0000000000004be2         jmp        loc_49a0
0000000000004be7         align      16                                          ; End of unwind block (FDE at 0xde7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     format_address_paren:
0000000000004bf0         push       rbp                                         ; Begin of unwind block (FDE at 0xdec8), CODE XREF=format_address_label+41, DATA XREF=main+3385
0000000000004bf1         push       rbx
0000000000004bf2         mov        rbp, rdi
0000000000004bf5         mov        ebx, esi
0000000000004bf7         sub        rsp, 0x8
0000000000004bfb         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004c02         mov        rax, qword [rdi+0x28]
0000000000004c06         cmp        rax, qword [rdi+0x30]
0000000000004c0a         jae        loc_4c60

0000000000004c0c         lea        rdx, qword [rax+1]
0000000000004c10         mov        qword [rdi+0x28], rdx
0000000000004c14         mov        byte [rax], 0x28

                     loc_4c17:
0000000000004c17         mov        esi, 0x29                                   ; CODE XREF=format_address_paren+122
0000000000004c1c         mov        rdi, rbp
0000000000004c1f         call       format_address_std                          ; format_address_std
0000000000004c24         test       bl, bl
0000000000004c26         je         loc_4c43

0000000000004c28         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004c2f         mov        rax, qword [rdi+0x28]
0000000000004c33         cmp        rax, qword [rdi+0x30]
0000000000004c37         jae        loc_4c50

0000000000004c39         lea        rdx, qword [rax+1]
0000000000004c3d         mov        qword [rdi+0x28], rdx
0000000000004c41         mov        byte [rax], bl

                     loc_4c43:
0000000000004c43         add        rsp, 0x8                                    ; CODE XREF=format_address_paren+54
0000000000004c47         pop        rbx
0000000000004c48         pop        rbp
0000000000004c49         ret
                        ; endp
0000000000004c4a         align      16

                     loc_4c50:
0000000000004c50         add        rsp, 0x8                                    ; CODE XREF=format_address_paren+71
0000000000004c54         movzx      esi, bl                                     ; argument #2 for method j___overflow
0000000000004c57         pop        rbx
0000000000004c58         pop        rbp
0000000000004c59         jmp        j___overflow                                ; __overflow
                        ; endp
0000000000004c5e         align      32

                     loc_4c60:
0000000000004c60         mov        esi, 0x28                                   ; argument #2 for method j___overflow, CODE XREF=format_address_paren+26
0000000000004c65         call       j___overflow                                ; __overflow
0000000000004c6a         jmp        loc_4c17
0000000000004c6c         align      16                                          ; End of unwind block (FDE at 0xdec8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     format_address_label:
0000000000004c70         push       rbp                                         ; Begin of unwind block (FDE at 0xdf00), DATA XREF=main+1519
0000000000004c71         push       rbx
0000000000004c72         mov        ebp, esi
0000000000004c74         mov        esi, 0x20
0000000000004c79         mov        rbx, rdi
0000000000004c7c         sub        rsp, 0x8
0000000000004c80         call       format_address_std                          ; format_address_std
0000000000004c85         add        rbx, qword [pseudo_offset]                  ; pseudo_offset
0000000000004c8c         add        rsp, 0x8
0000000000004c90         movsx      esi, bpl
0000000000004c94         mov        rdi, rbx
0000000000004c97         pop        rbx
0000000000004c98         pop        rbp
0000000000004c99         jmp        format_address_paren                        ; format_address_paren
                        ; endp
0000000000004c9e         align      32                                          ; End of unwind block (FDE at 0xdf00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_block:
0000000000004ca0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xdf28), CODE XREF=main+2064, main+3504
0000000000004ca3         push       r14
0000000000004ca5         push       r13
0000000000004ca7         push       r12
0000000000004ca9         push       rbp
0000000000004caa         push       rbx
0000000000004cab         je         loc_4d47

0000000000004cb1         cmp        qword [bytes_per_block], rdi                ; bytes_per_block
0000000000004cb8         mov        r12, rdi
0000000000004cbb         jb         loc_4d47

0000000000004cc1         mov        rcx, qword [in_stream]                      ; in_stream
0000000000004cc8         mov        rbx, rdx
0000000000004ccb         mov        qword [rdx], 0x0
0000000000004cd2         test       rcx, rcx
0000000000004cd5         je         loc_4d40

0000000000004cd7         mov        r13, rsi
0000000000004cda         xor        edi, edi
0000000000004cdc         mov        ebp, 0x1
0000000000004ce1         jmp        loc_4d11
0000000000004ce3         align      8

                     loc_4ce8:
0000000000004ce8         call       j___errno_location                          ; __errno_location, CODE XREF=read_block+141
0000000000004ced         mov        edi, dword [rax]
0000000000004cef         call       check_and_close                             ; check_and_close
0000000000004cf4         mov        r14d, eax
0000000000004cf7         call       open_next_file                              ; open_next_file
0000000000004cfc         mov        rcx, qword [in_stream]                      ; in_stream
0000000000004d03         and        r14d, eax
0000000000004d06         and        ebp, r14d
0000000000004d09         test       rcx, rcx
0000000000004d0c         je         loc_4d2f

0000000000004d0e         mov        rdi, qword [rbx]

                     loc_4d11:
0000000000004d11         mov        r14, r12                                    ; CODE XREF=read_block+65
0000000000004d14         mov        esi, 0x1                                    ; argument "__size" for method j_fread_unlocked
0000000000004d19         sub        r14, rdi
0000000000004d1c         add        rdi, r13                                    ; argument "__ptr" for method j_fread_unlocked
0000000000004d1f         mov        rdx, r14                                    ; argument "__n" for method j_fread_unlocked
0000000000004d22         call       j_fread_unlocked                            ; fread_unlocked
0000000000004d27         add        qword [rbx], rax
0000000000004d2a         cmp        r14, rax
0000000000004d2d         jne        loc_4ce8

                     loc_4d2f:
0000000000004d2f         pop        rbx                                         ; CODE XREF=read_block+108, read_block+165
0000000000004d30         mov        eax, ebp
0000000000004d32         pop        rbp
0000000000004d33         pop        r12
0000000000004d35         pop        r13
0000000000004d37         pop        r14
0000000000004d39         ret
                        ; endp
0000000000004d3a         align      64

                     loc_4d40:
0000000000004d40         mov        ebp, 0x1                                    ; CODE XREF=read_block+53
0000000000004d45         jmp        loc_4d2f

                     loc_4d47:
0000000000004d47         lea        rcx, qword [__PRETTY_FUNCTION__.7548]       ; argument "__function" for method j___assert_fail, "read_block", CODE XREF=read_block+11, read_block+27
0000000000004d4e         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/od.c"
0000000000004d55         lea        rdi, qword [a0NNBytesperblo]                ; argument "__assertion" for method j___assert_fail, "0 < n && n <= bytes_per_block"
0000000000004d5c         mov        edx, 0x508                                  ; argument "__line" for method j___assert_fail
0000000000004d61         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000004d66         align      16                                          ; End of unwind block (FDE at 0xdf28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000004d70         push       r13                                         ; Begin of unwind block (FDE at 0xdf68), CODE XREF=main+2413, main+3210, __argmatch_die+5
0000000000004d72         push       r12
0000000000004d74         mov        edx, 0x5
0000000000004d79         push       rbp
0000000000004d7a         push       rbx
0000000000004d7b         mov        ebp, edi
0000000000004d7d         sub        rsp, 0x88
0000000000004d84         mov        rbx, qword [program_name]                   ; program_name
0000000000004d8b         mov        rax, qword [fs:0x28]
0000000000004d94         mov        qword [rsp+0xa8+var_30], rax
0000000000004d99         xor        eax, eax
0000000000004d9b         test       edi, edi
0000000000004d9d         je         loc_4dcd

0000000000004d9f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000004da6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004da8         call       j_dcgettext                                 ; dcgettext
0000000000004dad         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004db4         mov        rdx, rax
0000000000004db7         mov        rcx, rbx
0000000000004dba         mov        esi, 0x1
0000000000004dbf         xor        eax, eax
0000000000004dc1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4dc6:
0000000000004dc6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1086
0000000000004dc8         call       j_exit                                      ; exit
                        ; endp

                     loc_4dcd:
0000000000004dcd         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]\\n  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]\\n", CODE XREF=usage+45
0000000000004dd4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004dd6         call       j_dcgettext                                 ; dcgettext
0000000000004ddb         mov        rcx, rbx
0000000000004dde         mov        r8, rbx
0000000000004de1         mov        rdx, rbx
0000000000004de4         mov        rsi, rax
0000000000004de7         mov        edi, 0x1
0000000000004dec         xor        eax, eax
0000000000004dee         call       j___printf_chk                              ; __printf_chk
0000000000004df3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004dfa         lea        rsi, qword [aNwriteAnUnambi]                ; argument "msgid" for method j_dcgettext, "\\nWrite an unambiguous representation, octal bytes by default,\\nof FILE to standard output.  With more than one FILE argument,\\nconcatenate them in the listed order to form the input.\\n"
0000000000004e01         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e06         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e08         call       j_dcgettext                                 ; dcgettext
0000000000004e0d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e10         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e13         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e18         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e1f         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000004e26         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e2b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e2d         call       j_dcgettext                                 ; dcgettext
0000000000004e32         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e35         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e38         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e3d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e44         lea        rsi, qword [aNifFirstAndSec]                ; argument "msgid" for method j_dcgettext, "\\nIf first and second call formats both apply, the second format is assumed\\nif the last operand begins with + or (if there are 2 operands) a digit.\\nAn OFFSET operand means -j OFFSET.  LABEL is the pseudo-address\\nat first byte printed, incremented when dump …"
0000000000004e4b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e50         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e52         call       j_dcgettext                                 ; dcgettext
0000000000004e57         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e5a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e5d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e62         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e69         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000004e70         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e75         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e77         call       j_dcgettext                                 ; dcgettext
0000000000004e7c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e7f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e82         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e87         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e8e         lea        rsi, qword [aAAddressradixr]                ; argument "msgid" for method j_dcgettext, "  -A, --address-radix=RADIX   output format for file offsets; RADIX is one\\n                                of [doxn], for Decimal, Octal, Hex or None\\n      --endian={big|little}   swap input bytes according the specified order\\n  -j, --skip-bytes=BYTES     …"
0000000000004e95         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e9a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e9c         call       j_dcgettext                                 ; dcgettext
0000000000004ea1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ea4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ea7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004eac         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004eb3         lea        rsi, qword [aNReadbytesbyte]                ; argument "msgid" for method j_dcgettext, "  -N, --read-bytes=BYTES      limit dump to BYTES input bytes\\n  -S BYTES, --strings[=BYTES]  output strings of at least BYTES graphic chars;\\n                                3 is implied when BYTES is not specified\\n  -t, --format=TYPE           select outpu…"
0000000000004eba         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ebf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ec1         call       j_dcgettext                                 ; dcgettext
0000000000004ec6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ec9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ecc         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ed1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ed8         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000004edf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ee4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ee6         call       j_dcgettext                                 ; dcgettext
0000000000004eeb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004eee         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ef1         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ef6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004efd         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000004f04         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f09         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f0b         call       j_dcgettext                                 ; dcgettext
0000000000004f10         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f13         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f16         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f1b         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f22         lea        rsi, qword [aNntraditionalF]                ; argument "msgid" for method j_dcgettext, "\\n\\nTraditional format specifications may be intermixed; they accumulate:\\n  -a   same as -t a,  select named characters, ignoring high-order bit\\n  -b   same as -t o1, select octal bytes\\n  -c   same as -t c,  select printable characters or backslash escapes\\n …"
0000000000004f29         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f2e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f30         call       j_dcgettext                                 ; dcgettext
0000000000004f35         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f38         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f3b         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f40         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f47         lea        rsi, qword [aFSameAsTFfSele]                ; argument "msgid" for method j_dcgettext, "  -f   same as -t fF, select floats\\n  -i   same as -t dI, select decimal ints\\n  -l   same as -t dL, select decimal longs\\n  -o   same as -t o2, select octal 2-byte units\\n  -s   same as -t d2, select decimal 2-byte units\\n  -x   same as -t x2, select hexadeci…"
0000000000004f4e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f53         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f55         call       j_dcgettext                                 ; dcgettext
0000000000004f5a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f5d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f60         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f65         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f6c         lea        rsi, qword [aNntypeIsMadeUp]                ; argument "msgid" for method j_dcgettext, "\\n\\nTYPE is made up of one or more of these specifications:\\n  a          named character, ignoring high-order bit\\n  c          printable character or backslash escape\\n"
0000000000004f73         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f78         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f7a         call       j_dcgettext                                 ; dcgettext
0000000000004f7f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f82         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f85         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f8a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f91         lea        rsi, qword [aDsizeSignedDec]                ; argument "msgid" for method j_dcgettext, "  d[SIZE]    signed decimal, SIZE bytes per integer\\n  f[SIZE]    floating point, SIZE bytes per float\\n  o[SIZE]    octal, SIZE bytes per integer\\n  u[SIZE]    unsigned decimal, SIZE bytes per integer\\n  x[SIZE]    hexadecimal, SIZE bytes per integer\\n"
0000000000004f98         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f9d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f9f         call       j_dcgettext                                 ; dcgettext
0000000000004fa4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004fa7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004faa         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004faf         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004fb6         lea        rsi, qword [aNsizeIsANumber]                ; argument "msgid" for method j_dcgettext, "\\nSIZE is a number.  For TYPE in [doux], SIZE may also be C for\\nsizeof(char), S for sizeof(short), I for sizeof(int) or L for\\nsizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D\\nfor sizeof(double) or L for sizeof(long double).\\n"
0000000000004fbd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004fc2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004fc4         call       j_dcgettext                                 ; dcgettext
0000000000004fc9         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004fcc         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004fcf         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004fd4         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004fdb         lea        rsi, qword [aNaddingAZSuffi]                ; argument "msgid" for method j_dcgettext, "\\nAdding a z suffix to any type displays printable characters at the end of\\neach output line.\\n"
0000000000004fe2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004fe7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004fe9         call       j_dcgettext                                 ; dcgettext
0000000000004fee         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ff1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ff4         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ff9         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005000         lea        rsi, qword [aNnbytesIsHexWi]                ; argument "msgid" for method j_dcgettext, "\\n\\nBYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:\\n  b    512\\n  KB   1000\\n  K    1024\\n  MB   1000*1000\\n  M    1024*1024\\nand so on for G, T, P, E, Z, Y.\\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\\n"
0000000000005007         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000500c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000500e         call       j_dcgettext                                 ; dcgettext
0000000000005013         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005016         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005019         lea        rbx, qword [a0NNBytesperblo+30]             ; 0xadbd
0000000000005020         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005025         lea        rax, qword [a0NNBytesperblo+33]             ; 0xadc0
000000000000502c         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000005033         mov        qword [rsp+0xa8+var_48], 0x0
000000000000503c         mov        qword [rsp+0xa8+var_40], 0x0
0000000000005045         mov        rdx, rsp
0000000000005048         mov        qword [rsp+0xa8+var_A8], rax
000000000000504c         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000005053         mov        qword [rsp+0xa8+var_78], rcx
0000000000005058         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
000000000000505f         mov        qword [rsp+0xa8+var_A0], rax
0000000000005064         lea        rax, qword [aCoreutils]                     ; "coreutils"
000000000000506b         mov        qword [rsp+0xa8+var_68], rcx
0000000000005070         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000005077         mov        qword [rsp+0xa8+var_98], rax
000000000000507c         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000005083         mov        qword [rsp+0xa8+var_58], rcx
0000000000005088         mov        qword [rsp+0xa8+var_90], rax
000000000000508d         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000005094         mov        qword [rsp+0xa8+var_88], rax
0000000000005099         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
00000000000050a0         mov        qword [rsp+0xa8+var_80], rax
00000000000050a5         mov        qword [rsp+0xa8+var_70], rax
00000000000050aa         mov        qword [rsp+0xa8+var_60], rax
00000000000050af         mov        qword [rsp+0xa8+var_50], rax
00000000000050b4         nop        dword [rax]

                     loc_50b8:
00000000000050b8         add        rdx, 0x10                                   ; CODE XREF=usage+869
00000000000050bc         mov        rdi, qword [rdx]
00000000000050bf         test       rdi, rdi
00000000000050c2         je         loc_50d7

00000000000050c4         mov        ecx, 0x3
00000000000050c9         mov        rsi, rbx
00000000000050cc         rep  cmpsb byte [rsi], byte [rdi]
00000000000050ce         seta       al
00000000000050d1         sbb        al, 0x0
00000000000050d3         test       al, al
00000000000050d5         jne        loc_50b8

                     loc_50d7:
00000000000050d7         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+850
00000000000050db         xor        edi, edi
00000000000050dd         mov        edx, 0x5
00000000000050e2         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
00000000000050e9         test       r12, r12
00000000000050ec         je         loc_51b3

00000000000050f2         call       j_dcgettext                                 ; dcgettext
00000000000050f7         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000050fe         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xae36
0000000000005105         mov        rsi, rax
0000000000005108         mov        edi, 0x1
000000000000510d         xor        eax, eax
000000000000510f         call       j___printf_chk                              ; __printf_chk
0000000000005114         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000005116         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
000000000000511b         call       j_setlocale                                 ; setlocale
0000000000005120         test       rax, rax
0000000000005123         je         loc_5141

0000000000005125         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xae44
000000000000512c         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000005131         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000005134         call       j_strncmp                                   ; strncmp
0000000000005139         test       eax, eax
000000000000513b         jne        loc_5248

                     loc_5141:
0000000000005141         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+947, usage+1277
0000000000005148         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000514a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000514f         call       j_dcgettext                                 ; dcgettext
0000000000005154         lea        rcx, qword [a0NNBytesperblo+30]             ; 0xadbd
000000000000515b         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005162         mov        rsi, rax
0000000000005165         mov        edi, 0x1
000000000000516a         xor        eax, eax
000000000000516c         call       j___printf_chk                              ; __printf_chk
0000000000005171         cmp        r12, rbx
0000000000005174         lea        rcx, qword [aMulticallInvoc+10]             ; 0xaddc
000000000000517b         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xcdc1
0000000000005182         cmove      rbx, rcx

                     loc_5186:
0000000000005186         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1228
000000000000518d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000518f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005194         call       j_dcgettext                                 ; dcgettext
0000000000005199         mov        rcx, rbx
000000000000519c         mov        rsi, rax
000000000000519f         mov        rdx, r12
00000000000051a2         mov        edi, 0x1
00000000000051a7         xor        eax, eax
00000000000051a9         call       j___printf_chk                              ; __printf_chk
00000000000051ae         jmp        loc_4dc6

                     loc_51b3:
00000000000051b3         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+892
00000000000051b8         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000051bf         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xae36
00000000000051c6         mov        rsi, rax
00000000000051c9         mov        edi, 0x1
00000000000051ce         xor        eax, eax
00000000000051d0         call       j___printf_chk                              ; __printf_chk
00000000000051d5         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000051d7         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000051dc         call       j_setlocale                                 ; setlocale
00000000000051e1         test       rax, rax
00000000000051e4         je         loc_51fe

00000000000051e6         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xae44
00000000000051ed         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000051f2         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000051f5         call       j_strncmp                                   ; strncmp
00000000000051fa         test       eax, eax
00000000000051fc         jne        loc_5241

                     loc_51fe:
00000000000051fe         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1140
0000000000005205         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000520a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000520c         lea        r12, qword [a0NNBytesperblo+30]             ; 0xadbd
0000000000005213         lea        rbx, qword [aMulticallInvoc+10]             ; 0xaddc
000000000000521a         call       j_dcgettext                                 ; dcgettext
000000000000521f         lea        rcx, qword [a0NNBytesperblo+30]             ; 0xadbd
0000000000005226         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000522d         mov        rsi, rax
0000000000005230         mov        edi, 0x1
0000000000005235         xor        eax, eax
0000000000005237         call       j___printf_chk                              ; __printf_chk
000000000000523c         jmp        loc_5186

                     loc_5241:
0000000000005241         lea        r12, qword [a0NNBytesperblo+30]             ; 0xadbd, CODE XREF=usage+1164

                     loc_5248:
0000000000005248         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+971
000000000000524f         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000005256         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005258         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000525d         call       j_dcgettext                                 ; dcgettext
0000000000005262         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005265         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005268         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000526d         jmp        loc_5141
0000000000005272         align      128                                         ; End of unwind block (FDE at 0xdf68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
0000000000005280         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0xdfe4), argument #1 for method usage, DATA XREF=argmatch_die
0000000000005285         jmp        usage                                       ; usage
                        ; endp
000000000000528a         align      16                                          ; End of unwind block (FDE at 0xdfe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000005290         push       r15                                         ; Begin of unwind block (FDE at 0xdff8), CODE XREF=__xargmatch_internal+44
0000000000005292         push       r14
0000000000005294         mov        r15, rsi
0000000000005297         push       r13
0000000000005299         push       r12
000000000000529b         mov        r13, rcx
000000000000529e         push       rbp
000000000000529f         push       rbx
00000000000052a0         mov        rbp, rdx
00000000000052a3         sub        rsp, 0x28
00000000000052a7         mov        qword [rsp+0x58+var_50], rdi
00000000000052ac         mov        qword [rsp+0x58+var_40], rdx
00000000000052b1         call       j_strlen                                    ; strlen
00000000000052b6         mov        r14, qword [r15]
00000000000052b9         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000052c1         test       r14, r14
00000000000052c4         je         loc_537d

00000000000052ca         mov        r12, rax
00000000000052cd         mov        byte [rsp+0x58+var_41], 0x0
00000000000052d2         xor        ebx, ebx
00000000000052d4         jmp        loc_5327
00000000000052d6         align      32

                     loc_52e0:
00000000000052e0         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
00000000000052e5         test       rax, rax
00000000000052e8         je         loc_5390

00000000000052ee         mov        rdi, qword [rsp+0x58+var_58]
00000000000052f2         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
00000000000052f5         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000052f8         imul       rdi, r13
00000000000052fc         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
00000000000052ff         call       j_memcmp                                    ; memcmp
0000000000005304         test       eax, eax
0000000000005306         movzx      eax, byte [rsp+0x58+var_41]
000000000000530b         mov        ecx, 0x1
0000000000005310         cmovne     eax, ecx
0000000000005313         mov        byte [rsp+0x58+var_41], al

                     loc_5317:
0000000000005317         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000531b         add        rbp, r13
000000000000531e         mov        r14, qword [r15+rbx*8]
0000000000005322         test       r14, r14
0000000000005325         je         loc_5368

                     loc_5327:
0000000000005327         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000532c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000532f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
0000000000005332         call       j_strncmp                                   ; strncmp
0000000000005337         test       eax, eax
0000000000005339         jne        loc_5317

000000000000533b         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000000533e         call       j_strlen                                    ; strlen
0000000000005343         cmp        rax, r12
0000000000005346         je         loc_53a0

0000000000005348         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000534d         jne        loc_52e0

000000000000534f         mov        qword [rsp+0x58+var_58], rbx
0000000000005353         add        rbx, 0x1
0000000000005357         add        rbp, r13
000000000000535a         mov        r14, qword [r15+rbx*8]
000000000000535e         test       r14, r14
0000000000005361         jne        loc_5327

0000000000005363         nop        dword [rax+rax]

                     loc_5368:
0000000000005368         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
000000000000536d         mov        rax, 0xfffffffffffffffe
0000000000005374         cmove      rax, qword [rsp+0x58+var_58]
0000000000005379         mov        qword [rsp+0x58+var_58], rax

                     loc_537d:
000000000000537d         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
0000000000005381         add        rsp, 0x28
0000000000005385         pop        rbx
0000000000005386         pop        rbp
0000000000005387         pop        r12
0000000000005389         pop        r13
000000000000538b         pop        r14
000000000000538d         pop        r15
000000000000538f         ret
                        ; endp

                     loc_5390:
0000000000005390         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000005395         jmp        loc_5317
0000000000005397         align      32

                     loc_53a0:
00000000000053a0         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
00000000000053a4         jmp        loc_537d
00000000000053a6         align      16                                          ; End of unwind block (FDE at 0xdff8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
00000000000053b0         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0xe044), CODE XREF=__xargmatch_internal+78
00000000000053b4         push       r12
00000000000053b6         mov        edx, 0x5
00000000000053bb         push       rbp
00000000000053bc         mov        r12, rsi
00000000000053bf         push       rbx
00000000000053c0         mov        rbp, rdi
00000000000053c3         je         loc_5410

00000000000053c5         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
00000000000053cc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053ce         call       j_dcgettext                                 ; dcgettext
00000000000053d3         mov        rbx, rax

                     loc_53d6:
00000000000053d6         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
00000000000053d9         mov        edi, 0x1
00000000000053de         call       quote_n                                     ; quote_n
00000000000053e3         mov        rdx, r12
00000000000053e6         mov        rbp, rax
00000000000053e9         mov        esi, 0x8
00000000000053ee         xor        edi, edi
00000000000053f0         call       quotearg_n_style                            ; quotearg_n_style
00000000000053f5         mov        r8, rbp
00000000000053f8         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000053fb         mov        rcx, rax
00000000000053fe         pop        rbx
00000000000053ff         pop        rbp
0000000000005400         pop        r12
0000000000005402         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005404         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005406         xor        eax, eax
0000000000005408         jmp        j_error                                     ; error
                        ; endp
000000000000540d         align      16

                     loc_5410:
0000000000005410         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000005417         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005419         call       j_dcgettext                                 ; dcgettext
000000000000541e         mov        rbx, rax
0000000000005421         jmp        loc_53d6
0000000000005423         align      16                                          ; End of unwind block (FDE at 0xe044)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000005430         push       r15                                         ; Begin of unwind block (FDE at 0xe070), CODE XREF=__xargmatch_internal+92
0000000000005432         push       r14
0000000000005434         mov        r14, rdi
0000000000005437         push       r13
0000000000005439         push       r12
000000000000543b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000543d         push       rbp
000000000000543e         push       rbx
000000000000543f         mov        rbp, rsi
0000000000005442         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000005449         mov        r12, rdx
000000000000544c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005451         sub        rsp, 0x8
0000000000005455         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000545c         call       j_dcgettext                                 ; dcgettext
0000000000005461         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005464         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005467         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000546c         mov        r15, qword [r14]
000000000000546f         test       r15, r15
0000000000005472         je         loc_5508

0000000000005478         xor        r13d, r13d
000000000000547b         xor        ebx, ebx
000000000000547d         jmp        loc_54b8
000000000000547f         align      128

                     loc_5480:
0000000000005480         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000005483         add        rbx, 0x1
0000000000005487         mov        r13, rbp
000000000000548a         call       quote                                       ; quote
000000000000548f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005496         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000549d         mov        rcx, rax
00000000000054a0         mov        esi, 0x1
00000000000054a5         xor        eax, eax
00000000000054a7         add        rbp, r12
00000000000054aa         call       j___fprintf_chk                             ; __fprintf_chk
00000000000054af         mov        r15, qword [r14+rbx*8]
00000000000054b3         test       r15, r15
00000000000054b6         je         loc_5508

                     loc_54b8:
00000000000054b8         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
00000000000054bb         je         loc_5480

00000000000054bd         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
00000000000054c0         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000054c3         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
00000000000054c6         call       j_memcmp                                    ; memcmp
00000000000054cb         test       eax, eax
00000000000054cd         jne        loc_5480

00000000000054cf         mov        rdi, r15
00000000000054d2         add        rbx, 0x1
00000000000054d6         add        rbp, r12
00000000000054d9         call       quote                                       ; quote
00000000000054de         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000054e5         lea        rdx, qword [aNS+8]                          ; 0xc7de
00000000000054ec         mov        rcx, rax
00000000000054ef         mov        esi, 0x1
00000000000054f4         xor        eax, eax
00000000000054f6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000054fb         mov        r15, qword [r14+rbx*8]
00000000000054ff         test       r15, r15
0000000000005502         jne        loc_54b8

0000000000005504         nop        dword [rax]

                     loc_5508:
0000000000005508         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
000000000000550f         mov        rax, qword [rdi+0x28]
0000000000005513         cmp        rax, qword [rdi+0x30]
0000000000005517         jae        loc_5538

0000000000005519         lea        rdx, qword [rax+1]
000000000000551d         mov        qword [rdi+0x28], rdx
0000000000005521         mov        byte [rax], 0xa
0000000000005524         add        rsp, 0x8
0000000000005528         pop        rbx
0000000000005529         pop        rbp
000000000000552a         pop        r12
000000000000552c         pop        r13
000000000000552e         pop        r14
0000000000005530         pop        r15
0000000000005532         ret
                        ; endp
0000000000005533         align      8

                     loc_5538:
0000000000005538         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
000000000000553c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000005541         pop        rbx
0000000000005542         pop        rbp
0000000000005543         pop        r12
0000000000005545         pop        r13
0000000000005547         pop        r14
0000000000005549         pop        r15
000000000000554b         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
0000000000005550         push       r15                                         ; End of unwind block (FDE at 0xe070), Begin of unwind block (FDE at 0xe0d0), CODE XREF=main+473
0000000000005552         push       r14
0000000000005554         mov        r14, rdi
0000000000005557         push       r13
0000000000005559         push       r12
000000000000555b         mov        r12, rsi
000000000000555e         push       rbp
000000000000555f         push       rbx
0000000000005560         mov        rbp, rcx
0000000000005563         mov        rbx, rdx
0000000000005566         mov        rcx, r8
0000000000005569         mov        rdx, rbp
000000000000556c         sub        rsp, 0x8
0000000000005570         mov        rsi, rbx
0000000000005573         mov        rdi, r12
0000000000005576         mov        r15, r8
0000000000005579         mov        r13, r9
000000000000557c         call       argmatch                                    ; argmatch
0000000000005581         test       rax, rax
0000000000005584         js         loc_5595

                     loc_5586:
0000000000005586         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
000000000000558a         pop        rbx
000000000000558b         pop        rbp
000000000000558c         pop        r12
000000000000558e         pop        r13
0000000000005590         pop        r14
0000000000005592         pop        r15
0000000000005594         ret
                        ; endp

                     loc_5595:
0000000000005595         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000005598         mov        rsi, r12
000000000000559b         mov        rdi, r14
000000000000559e         call       argmatch_invalid                            ; argmatch_invalid
00000000000055a3         mov        rdx, r15
00000000000055a6         mov        rsi, rbp
00000000000055a9         mov        rdi, rbx
00000000000055ac         call       argmatch_valid                              ; argmatch_valid
00000000000055b1         call       r13
00000000000055b4         mov        rax, 0xffffffffffffffff
00000000000055bb         jmp        loc_5586
00000000000055bd         align      64                                          ; End of unwind block (FDE at 0xe0d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
00000000000055c0         push       r14                                         ; Begin of unwind block (FDE at 0xe11c)
00000000000055c2         push       r13
00000000000055c4         push       r12
00000000000055c6         push       rbp
00000000000055c7         push       rbx
00000000000055c8         mov        r14, qword [rsi]
00000000000055cb         test       r14, r14
00000000000055ce         je         loc_5601

00000000000055d0         mov        r12, rcx
00000000000055d3         mov        r13, rdi
00000000000055d6         mov        rbp, rdx
00000000000055d9         lea        rbx, qword [rsi+8]
00000000000055dd         jmp        loc_55ef
00000000000055df         align      32

                     loc_55e0:
00000000000055e0         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
00000000000055e3         add        rbp, r12
00000000000055e6         add        rbx, 0x8
00000000000055ea         test       r14, r14
00000000000055ed         je         loc_5601

                     loc_55ef:
00000000000055ef         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
00000000000055f2         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000055f5         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
00000000000055f8         call       j_memcmp                                    ; memcmp
00000000000055fd         test       eax, eax
00000000000055ff         jne        loc_55e0

                     loc_5601:
0000000000005601         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000005602         mov        rax, r14
0000000000005605         pop        rbp
0000000000005606         pop        r12
0000000000005608         pop        r13
000000000000560a         pop        r14
000000000000560c         ret
                        ; endp
000000000000560d         align      16                                          ; End of unwind block (FDE at 0xe11c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005610         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xe15c), file_name
0000000000005617         ret
                        ; endp
0000000000005618         align      32                                          ; End of unwind block (FDE at 0xe15c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005620         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xe170), ignore_EPIPE
0000000000005627         ret
                        ; endp
0000000000005628         align      16                                          ; End of unwind block (FDE at 0xe170)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000005630         push       rbp                                         ; Begin of unwind block (FDE at 0xe184), DATA XREF=main+92
0000000000005631         push       rbx
0000000000005632         sub        rsp, 0x8
0000000000005636         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000563d         call       close_stream                                ; close_stream
0000000000005642         test       eax, eax
0000000000005644         je         loc_565c

0000000000005646         call       j___errno_location                          ; __errno_location
000000000000564b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005652         mov        rbx, rax
0000000000005655         je         loc_5673

0000000000005657         cmp        dword [rax], 0x20
000000000000565a         jne        loc_5673

                     loc_565c:
000000000000565c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005663         call       close_stream                                ; close_stream
0000000000005668         test       eax, eax
000000000000566a         jne        loc_56b2

000000000000566c         add        rsp, 0x8
0000000000005670         pop        rbx
0000000000005671         pop        rbp
0000000000005672         ret
                        ; endp

                     loc_5673:
0000000000005673         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
000000000000567a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000567c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005681         call       j_dcgettext                                 ; dcgettext
0000000000005686         mov        rdi, qword [file_name]                      ; file_name
000000000000568d         mov        rbp, rax
0000000000005690         test       rdi, rdi
0000000000005693         je         loc_56bd

0000000000005695         call       quotearg_colon                              ; quotearg_colon
000000000000569a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000569c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
00000000000056a3         mov        rcx, rax
00000000000056a6         mov        r8, rbp
00000000000056a9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000056ab         xor        eax, eax
00000000000056ad         call       j_error                                     ; error

                     loc_56b2:
00000000000056b2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
00000000000056b8         call       j__exit                                     ; _exit
                        ; endp

                     loc_56bd:
00000000000056bd         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
00000000000056bf         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc7e0
00000000000056c6         mov        rcx, rax
00000000000056c9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000056cb         xor        eax, eax
00000000000056cd         call       j_error                                     ; error
00000000000056d2         jmp        loc_56b2
00000000000056d4         align      32                                          ; End of unwind block (FDE at 0xe184)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_4B: int16_t, -75
        ;    var_5C: int32_t, -92
        ;    var_68: int64_t, -104


                     dtoastr:
00000000000056e0         push       r15                                         ; Begin of unwind block (FDE at 0xe1b4), CODE XREF=print_double+110
00000000000056e2         push       r14
00000000000056e4         mov        r14d, ecx
00000000000056e7         push       r13
00000000000056e9         push       r12
00000000000056eb         mov        r12, rdi
00000000000056ee         push       rbp
00000000000056ef         push       rbx
00000000000056f0         mov        rbp, rsi
00000000000056f3         movapd     xmm3, xmm0
00000000000056f7         sub        rsp, 0x38
00000000000056fb         movsd      qword [rsp+0x68+var_68], xmm0
0000000000005700         pxor       xmm0, xmm0
0000000000005704         mov        rax, qword [fs:0x28]
000000000000570d         mov        qword [rsp+0x68+var_40], rax
0000000000005712         xor        eax, eax
0000000000005714         ucomisd    xmm0, xmm3
0000000000005718         ja         loc_5830

000000000000571e         movsd      xmm0, qword [rsp+0x68+var_68]

                     loc_5723:
0000000000005723         mov        eax, edx                                    ; CODE XREF=dtoastr+348
0000000000005725         lea        r13, qword [rsp+0x68+var_4B]
000000000000572a         mov        ecx, edx
000000000000572c         and        eax, 0x1
000000000000572f         shr        ecx, 0x1
0000000000005731         mov        esi, 0x2d25
0000000000005736         lea        rdi, qword [r13+rax+1]
000000000000573b         and        ecx, 0x1
000000000000573e         mov        eax, edx
0000000000005740         mov        word [rsp+0x68+var_4B], si
0000000000005745         shr        eax, 0x2
0000000000005748         mov        ebx, 0x1
000000000000574d         lea        rsi, qword [rdi+rcx]
0000000000005751         and        eax, 0x1
0000000000005754         mov        byte [rdi], 0x2b
0000000000005757         movsd      xmm1, qword [double_c800]                   ; double_c800
000000000000575f         mov        edi, 0x2e2a
0000000000005764         lea        rcx, qword [rsi+rax]
0000000000005768         mov        eax, edx
000000000000576a         and        edx, 0x10
000000000000576d         shr        eax, 0x3
0000000000005770         mov        byte [rsi], 0x20
0000000000005773         mov        r15, 0xffffffffffffffff
000000000000577a         and        eax, 0x1
000000000000577d         mov        byte [rcx], 0x30
0000000000005780         add        rax, rcx
0000000000005783         cmp        edx, 0x1
0000000000005786         sbb        edx, edx
0000000000005788         mov        word [rax], di
000000000000578b         mov        byte [rax+2], 0x2a
000000000000578f         and        edx, 0x20
0000000000005792         mov        byte [rax+4], 0x0
0000000000005796         add        edx, 0x47
0000000000005799         ucomisd    xmm1, xmm0
000000000000579d         mov        byte [rax+3], dl
00000000000057a0         mov        eax, 0xf
00000000000057a5         cmovbe     ebx, eax
00000000000057a8         jmp        loc_57b3
00000000000057aa         align      16

                     loc_57b0:
00000000000057b0         add        ebx, 0x1                                    ; CODE XREF=dtoastr+269, dtoastr+290, dtoastr+296

                     loc_57b3:
00000000000057b3         sub        rsp, 0x8                                    ; CODE XREF=dtoastr+200
00000000000057b7         mov        rcx, r15
00000000000057ba         mov        edx, 0x1
00000000000057bf         push       rbx
00000000000057c0         mov        r9d, r14d
00000000000057c3         mov        r8, r13
00000000000057c6         mov        rsi, rbp
00000000000057c9         mov        rdi, r12
00000000000057cc         mov        eax, 0x1
00000000000057d1         movsd      xmm0, qword [rsp+0x78+var_68]
00000000000057d7         call       j___snprintf_chk                            ; __snprintf_chk
00000000000057dc         test       eax, eax
00000000000057de         pop        rdx
00000000000057df         pop        rcx
00000000000057e0         js         loc_580a

00000000000057e2         cmp        ebx, 0x10
00000000000057e5         jg         loc_580a

00000000000057e7         movsxd     rdx, eax
00000000000057ea         cmp        rdx, rbp
00000000000057ed         jae        loc_57b0

00000000000057ef         xor        esi, esi                                    ; argument "__endptr" for method j_strtod
00000000000057f1         mov        rdi, r12                                    ; argument "__nptr" for method j_strtod
00000000000057f4         mov        dword [rsp+0x68+var_5C], eax
00000000000057f8         call       j_strtod                                    ; strtod
00000000000057fd         ucomisd    xmm0, qword [rsp+0x68+var_68]
0000000000005802         jp         loc_57b0

0000000000005804         mov        eax, dword [rsp+0x68+var_5C]
0000000000005808         jne        loc_57b0

                     loc_580a:
000000000000580a         mov        rsi, qword [rsp+0x68+var_40]                ; CODE XREF=dtoastr+256, dtoastr+261
000000000000580f         xor        rsi, qword [fs:0x28]
0000000000005818         jne        loc_5841

000000000000581a         add        rsp, 0x38
000000000000581e         pop        rbx
000000000000581f         pop        rbp
0000000000005820         pop        r12
0000000000005822         pop        r13
0000000000005824         pop        r14
0000000000005826         pop        r15
0000000000005828         ret
                        ; endp
0000000000005829         align      16

                     loc_5830:
0000000000005830         movapd     xmm0, xmm3                                  ; CODE XREF=dtoastr+56
0000000000005834         xorpd      xmm0, xmmword [aSS+13]                      ; 0xc7f0
000000000000583c         jmp        loc_5723

                     loc_5841:
0000000000005841         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=dtoastr+312
                        ; endp
0000000000005846         align      16                                          ; End of unwind block (FDE at 0xe1b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_4B: int16_t, -75
        ;    var_5C: int32_t, -92
        ;    var_60: int32_t, -96
        ;    var_68: int64_t, -104


                     ftoastr:
0000000000005850         push       r15                                         ; Begin of unwind block (FDE at 0xe20c), CODE XREF=print_float+126
0000000000005852         pxor       xmm4, xmm4
0000000000005856         push       r14
0000000000005858         push       r13
000000000000585a         mov        r15d, ecx
000000000000585d         push       r12
000000000000585f         push       rbp
0000000000005860         mov        r12, rdi
0000000000005863         push       rbx
0000000000005864         movaps     xmm3, xmm0
0000000000005867         cvtss2sd   xmm4, xmm0
000000000000586b         mov        rbp, rsi
000000000000586e         sub        rsp, 0x38
0000000000005872         movss      dword [rsp+0x68+var_5C], xmm0
0000000000005878         pxor       xmm0, xmm0
000000000000587c         mov        rax, qword [fs:0x28]
0000000000005885         mov        qword [rsp+0x68+var_40], rax
000000000000588a         xor        eax, eax
000000000000588c         movsd      qword [rsp+0x68+var_68], xmm4
0000000000005891         ucomiss    xmm0, xmm3
0000000000005894         ja         loc_59a8

000000000000589a         movss      xmm0, dword [rsp+0x68+var_5C]

                     loc_58a0:
00000000000058a0         mov        eax, edx                                    ; CODE XREF=ftoastr+354
00000000000058a2         lea        r13, qword [rsp+0x68+var_4B]
00000000000058a7         mov        ecx, edx
00000000000058a9         and        eax, 0x1
00000000000058ac         shr        ecx, 0x1
00000000000058ae         mov        esi, 0x2d25
00000000000058b3         lea        rdi, qword [r13+rax+1]
00000000000058b8         and        ecx, 0x1
00000000000058bb         mov        eax, edx
00000000000058bd         mov        word [rsp+0x68+var_4B], si
00000000000058c2         shr        eax, 0x2
00000000000058c5         mov        r14, 0xffffffffffffffff
00000000000058cc         lea        rsi, qword [rdi+rcx]
00000000000058d0         and        eax, 0x1
00000000000058d3         mov        byte [rdi], 0x2b
00000000000058d6         movss      xmm1, dword [float_c820]                    ; float_c820
00000000000058de         mov        edi, 0x2e2a
00000000000058e3         lea        rcx, qword [rsi+rax]
00000000000058e7         mov        eax, edx
00000000000058e9         and        edx, 0x10
00000000000058ec         shr        eax, 0x3
00000000000058ef         mov        byte [rsi], 0x20
00000000000058f2         and        eax, 0x1
00000000000058f5         mov        byte [rcx], 0x30
00000000000058f8         add        rax, rcx
00000000000058fb         cmp        edx, 0x1
00000000000058fe         sbb        edx, edx
0000000000005900         xor        ebx, ebx
0000000000005902         mov        word [rax], di
0000000000005905         and        edx, 0x20
0000000000005908         mov        byte [rax+2], 0x2a
000000000000590c         mov        byte [rax+4], 0x0
0000000000005910         add        edx, 0x47
0000000000005913         ucomiss    xmm1, xmm0
0000000000005916         mov        byte [rax+3], dl
0000000000005919         setbe      bl
000000000000591c         lea        ebx, dword [rbx+rbx*4+1]
0000000000005920         jmp        loc_592b
0000000000005922         align      8

                     loc_5928:
0000000000005928         add        ebx, 0x1                                    ; CODE XREF=ftoastr+277, ftoastr+298, ftoastr+304

                     loc_592b:
000000000000592b         sub        rsp, 0x8                                    ; CODE XREF=ftoastr+208
000000000000592f         mov        rcx, r14
0000000000005932         mov        edx, 0x1
0000000000005937         push       rbx
0000000000005938         mov        r9d, r15d
000000000000593b         mov        r8, r13
000000000000593e         mov        rsi, rbp
0000000000005941         mov        rdi, r12
0000000000005944         mov        eax, 0x1
0000000000005949         movsd      xmm0, qword [rsp+0x78+var_68]
000000000000594f         call       j___snprintf_chk                            ; __snprintf_chk
0000000000005954         test       eax, eax
0000000000005956         pop        rdx
0000000000005957         pop        rcx
0000000000005958         js         loc_5982

000000000000595a         cmp        ebx, 0x8
000000000000595d         jg         loc_5982

000000000000595f         movsxd     rdx, eax
0000000000005962         cmp        rdx, rbp
0000000000005965         jae        loc_5928

0000000000005967         xor        esi, esi                                    ; argument "__endptr" for method j_strtof
0000000000005969         mov        rdi, r12                                    ; argument "__nptr" for method j_strtof
000000000000596c         mov        dword [rsp+0x68+var_60], eax
0000000000005970         call       j_strtof                                    ; strtof
0000000000005975         ucomiss    xmm0, dword [rsp+0x68+var_5C]
000000000000597a         jp         loc_5928

000000000000597c         mov        eax, dword [rsp+0x68+var_60]
0000000000005980         jne        loc_5928

                     loc_5982:
0000000000005982         mov        rsi, qword [rsp+0x68+var_40]                ; CODE XREF=ftoastr+264, ftoastr+269
0000000000005987         xor        rsi, qword [fs:0x28]
0000000000005990         jne        loc_59b7

0000000000005992         add        rsp, 0x38
0000000000005996         pop        rbx
0000000000005997         pop        rbp
0000000000005998         pop        r12
000000000000599a         pop        r13
000000000000599c         pop        r14
000000000000599e         pop        r15
00000000000059a0         ret
                        ; endp
00000000000059a1         align      8

                     loc_59a8:
00000000000059a8         movaps     xmm0, xmm3                                  ; CODE XREF=ftoastr+68
00000000000059ab         xorps      xmm0, xmmword [double_c800+16]              ; 0xc810
00000000000059b2         jmp        loc_58a0

                     loc_59b7:
00000000000059b7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=ftoastr+320
                        ; endp
00000000000059bc         align      64                                          ; End of unwind block (FDE at 0xe20c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_4B: int16_t, -75
        ;    var_5C: int32_t, -92


                     ldtoastr:
00000000000059c0         push       r15                                         ; Begin of unwind block (FDE at 0xe264), CODE XREF=print_long_double+113
00000000000059c2         push       r14
00000000000059c4         fldz
00000000000059c6         push       r13
00000000000059c8         push       r12
00000000000059ca         mov        r14d, ecx
00000000000059cd         push       rbp
00000000000059ce         push       rbx
00000000000059cf         mov        r12, rdi
00000000000059d2         mov        rbp, rsi
00000000000059d5         sub        rsp, 0x38
00000000000059d9         fld        tword [rsp+0x68+arg_0]
00000000000059dd         fxch       st1
00000000000059df         mov        rax, qword [fs:0x28]
00000000000059e8         mov        qword [rsp+0x68+var_40], rax
00000000000059ed         xor        eax, eax
00000000000059ef         fucomip    st1
00000000000059f1         ja         loc_5b00

00000000000059f7         fstp       st0
00000000000059f9         fld        tword [rsp+0x68+arg_0]

                     loc_59fd:
00000000000059fd         mov        eax, 0x2d25                                 ; CODE XREF=ldtoastr+322
0000000000005a02         lea        r13, qword [rsp+0x68+var_4B]
0000000000005a07         mov        ecx, edx
0000000000005a09         mov        word [rsp+0x68+var_4B], ax
0000000000005a0e         mov        eax, edx
0000000000005a10         shr        ecx, 0x1
0000000000005a12         and        eax, 0x1
0000000000005a15         and        ecx, 0x1
0000000000005a18         mov        ebx, 0x1
0000000000005a1d         lea        rdi, qword [r13+rax+1]
0000000000005a22         mov        eax, edx
0000000000005a24         mov        r15, 0xffffffffffffffff
0000000000005a2b         shr        eax, 0x2
0000000000005a2e         lea        rsi, qword [rdi+rcx]
0000000000005a32         and        eax, 0x1
0000000000005a35         mov        byte [rdi], 0x2b
0000000000005a38         lea        rcx, qword [rsi+rax]
0000000000005a3c         mov        eax, edx
0000000000005a3e         and        edx, 0x10
0000000000005a41         fld        tword [float_c820+16]                       ; 0xc830
0000000000005a47         shr        eax, 0x3
0000000000005a4a         mov        byte [rsi], 0x20
0000000000005a4d         mov        byte [rcx], 0x30
0000000000005a50         and        eax, 0x1
0000000000005a53         add        rax, rcx
0000000000005a56         cmp        edx, 0x1
0000000000005a59         sbb        edx, edx
0000000000005a5b         mov        dword [rax], 0x4c2a2e2a
0000000000005a61         mov        byte [rax+5], 0x0
0000000000005a65         and        edx, 0x20
0000000000005a68         add        edx, 0x47
0000000000005a6b         mov        byte [rax+4], dl
0000000000005a6e         mov        eax, 0x12
0000000000005a73         fucomip    st1
0000000000005a75         fstp       st0
0000000000005a77         cmovbe     ebx, eax
0000000000005a7a         jmp        loc_5a83
0000000000005a7c         align      128

                     loc_5a80:
0000000000005a80         add        ebx, 0x1                                    ; CODE XREF=ldtoastr+254, ldtoastr+280, ldtoastr+286

                     loc_5a83:
0000000000005a83         push       qword [rsp+0x68+arg_8]                      ; CODE XREF=ldtoastr+186
0000000000005a87         push       qword [rsp+0x70+arg_0]
0000000000005a8b         xor        eax, eax
0000000000005a8d         mov        r9d, r14d
0000000000005a90         mov        r8, r13
0000000000005a93         mov        rcx, r15
0000000000005a96         sub        rsp, 0x8
0000000000005a9a         mov        edx, 0x1
0000000000005a9f         mov        rsi, rbp
0000000000005aa2         push       rbx
0000000000005aa3         mov        rdi, r12
0000000000005aa6         call       j___snprintf_chk                            ; __snprintf_chk
0000000000005aab         add        rsp, 0x20
0000000000005aaf         test       eax, eax
0000000000005ab1         js         loc_5ae0

0000000000005ab3         cmp        ebx, 0x14
0000000000005ab6         jg         loc_5ae0

0000000000005ab8         movsxd     rdx, eax
0000000000005abb         cmp        rdx, rbp
0000000000005abe         jae        loc_5a80

0000000000005ac0         xor        esi, esi                                    ; argument "__endptr" for method j_strtold
0000000000005ac2         mov        rdi, r12                                    ; argument "__nptr" for method j_strtold
0000000000005ac5         mov        dword [rsp+0x68+var_5C], eax
0000000000005ac9         call       j_strtold                                   ; strtold
0000000000005ace         fld        tword [rsp+0x68+arg_0]
0000000000005ad2         fxch       st1
0000000000005ad4         fucomip    st1
0000000000005ad6         fstp       st0
0000000000005ad8         jp         loc_5a80

0000000000005ada         mov        eax, dword [rsp+0x68+var_5C]
0000000000005ade         jne        loc_5a80

                     loc_5ae0:
0000000000005ae0         mov        rsi, qword [rsp+0x68+var_40]                ; CODE XREF=ldtoastr+241, ldtoastr+246
0000000000005ae5         xor        rsi, qword [fs:0x28]
0000000000005aee         jne        loc_5b07

0000000000005af0         add        rsp, 0x38
0000000000005af4         pop        rbx
0000000000005af5         pop        rbp
0000000000005af6         pop        r12
0000000000005af8         pop        r13
0000000000005afa         pop        r14
0000000000005afc         pop        r15
0000000000005afe         ret
                        ; endp
0000000000005aff         align      256

                     loc_5b00:
0000000000005b00         fchs                                                   ; CODE XREF=ldtoastr+49
0000000000005b02         jmp        loc_59fd

                     loc_5b07:
0000000000005b07         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=ldtoastr+302
                        ; endp
0000000000005b0c         align      16                                          ; End of unwind block (FDE at 0xe264)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000005b10         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xe2c4), CODE XREF=main+39
0000000000005b13         push       rbx
0000000000005b14         je         loc_5b8d

0000000000005b16         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000005b1b         mov        rbx, rdi
0000000000005b1e         call       j_strrchr                                   ; strrchr
0000000000005b23         test       rax, rax
0000000000005b26         je         loc_5b7d

0000000000005b28         lea        r8, qword [rax+1]
0000000000005b2c         mov        rdx, r8
0000000000005b2f         sub        rdx, rbx
0000000000005b32         cmp        rdx, 0x6
0000000000005b36         jle        loc_5b7d

0000000000005b38         lea        rsi, qword [rax-6]
0000000000005b3c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000005b43         mov        ecx, 0x7
0000000000005b48         rep  cmpsb byte [rsi], byte [rdi]
0000000000005b4a         seta       dl
0000000000005b4d         sbb        dl, 0x0
0000000000005b50         test       dl, dl
0000000000005b52         jne        loc_5b7d

0000000000005b54         lea        rdi, qword [aLibs+8]                        ; 0xc880
0000000000005b5b         mov        ecx, 0x3
0000000000005b60         mov        rsi, r8
0000000000005b63         mov        rbx, r8
0000000000005b66         rep  cmpsb byte [rsi], byte [rdi]
0000000000005b68         seta       dl
0000000000005b6b         sbb        dl, 0x0
0000000000005b6e         test       dl, dl
0000000000005b70         jne        loc_5b7d

0000000000005b72         lea        rbx, qword [rax+4]
0000000000005b76         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_5b7d:
0000000000005b7d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000005b84         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
0000000000005b8b         pop        rbx
0000000000005b8c         ret
                        ; endp

                     loc_5b8d:
0000000000005b8d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000005b94         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
0000000000005b9b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000005ba0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000005ba5         call       j_fwrite                                    ; fwrite
0000000000005baa         call       j_abort                                     ; abort
                        ; endp
0000000000005baf         align      16                                          ; End of unwind block (FDE at 0xe2c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000005bb0         push       rbp                                         ; Begin of unwind block (FDE at 0xe2e4), CODE XREF=sub_63e0+2597, sub_63e0+2619
0000000000005bb1         push       rbx
0000000000005bb2         mov        rbp, rdi
0000000000005bb5         mov        ebx, esi
0000000000005bb7         sub        rsp, 0x8
0000000000005bbb         call       locale_charset                              ; locale_charset
0000000000005bc0         movzx      edx, byte [rax]
0000000000005bc3         and        edx, 0xffffffdf
0000000000005bc6         cmp        dl, 0x55
0000000000005bc9         je         loc_5c40

0000000000005bcb         cmp        dl, 0x47
0000000000005bce         je         loc_5bf0

                     loc_5bd0:
0000000000005bd0         lea        rax, qword [aLibs+27]                       ; 0xc893, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000005bd7         lea        rdx, qword [aInvalidSsArgum+25]             ; 0xd119
0000000000005bde         cmp        ebx, 0x9
0000000000005be1         cmovne     rax, rdx
0000000000005be5         add        rsp, 0x8
0000000000005be9         pop        rbx
0000000000005bea         pop        rbp
0000000000005beb         ret
                        ; endp
0000000000005bec         align      16

                     loc_5bf0:
0000000000005bf0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000005bf4         and        edx, 0xffffffdf
0000000000005bf7         cmp        dl, 0x42
0000000000005bfa         jne        loc_5bd0

0000000000005bfc         cmp        byte [rax+2], 0x31
0000000000005c00         jne        loc_5bd0

0000000000005c02         cmp        byte [rax+3], 0x38
0000000000005c06         jne        loc_5bd0

0000000000005c08         cmp        byte [rax+4], 0x30
0000000000005c0c         jne        loc_5bd0

0000000000005c0e         cmp        byte [rax+5], 0x33
0000000000005c12         jne        loc_5bd0

0000000000005c14         cmp        byte [rax+6], 0x30
0000000000005c18         jne        loc_5bd0

0000000000005c1a         cmp        byte [rax+7], 0x0
0000000000005c1e         jne        loc_5bd0

0000000000005c20         cmp        byte [rbp], 0x60
0000000000005c24         lea        rax, qword [aLibs+20]                       ; 0xc88c
0000000000005c2b         lea        rdx, qword [aLibs+24]                       ; 0xc890
0000000000005c32         cmovne     rax, rdx
0000000000005c36         add        rsp, 0x8
0000000000005c3a         pop        rbx
0000000000005c3b         pop        rbp
0000000000005c3c         ret
                        ; endp
0000000000005c3d         align      64

                     loc_5c40:
0000000000005c40         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000005c44         and        edx, 0xffffffdf
0000000000005c47         cmp        dl, 0x54
0000000000005c4a         jne        loc_5bd0

0000000000005c4c         movzx      edx, byte [rax+2]
0000000000005c50         and        edx, 0xffffffdf
0000000000005c53         cmp        dl, 0x46
0000000000005c56         jne        loc_5bd0

0000000000005c5c         cmp        byte [rax+3], 0x2d
0000000000005c60         jne        loc_5bd0

0000000000005c66         cmp        byte [rax+4], 0x38
0000000000005c6a         jne        loc_5bd0

0000000000005c70         cmp        byte [rax+5], 0x0
0000000000005c74         jne        loc_5bd0

0000000000005c7a         cmp        byte [rbp], 0x60
0000000000005c7e         lea        rax, qword [aLibs+12]                       ; 0xc884
0000000000005c85         lea        rdx, qword [aLibs+16]                       ; 0xc888
0000000000005c8c         cmovne     rax, rdx
0000000000005c90         add        rsp, 0x8
0000000000005c94         pop        rbx
0000000000005c95         pop        rbp
0000000000005c96         ret
                        ; endp
0000000000005c97         align      32                                          ; End of unwind block (FDE at 0xe2e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000005ca0         push       r15                                         ; Begin of unwind block (FDE at 0xe328), CODE XREF=sub_63e0+1165, sub_63e0+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000005ca2         push       r14
0000000000005ca4         mov        r15d, r8d
0000000000005ca7         push       r13
0000000000005ca9         push       r12
0000000000005cab         mov        r14, rdi
0000000000005cae         push       rbp
0000000000005caf         push       rbx
0000000000005cb0         mov        ebx, r9d
0000000000005cb3         mov        r13, rsi
0000000000005cb6         mov        rbp, rcx
0000000000005cb9         and        ebx, 0x2
0000000000005cbc         sub        rsp, 0xb8
0000000000005cc3         mov        rax, qword [rsp+0xe8+arg_0]
0000000000005ccb         mov        qword [rsp+0xe8+var_D8], rdx
0000000000005cd0         mov        dword [rsp+0xe8+var_E0], r8d
0000000000005cd5         mov        dword [rsp+0xe8+var_70], r9d
0000000000005cda         mov        qword [rsp+0xe8+var_C8], rax
0000000000005cdf         mov        rax, qword [rsp+0xe8+arg_8]
0000000000005ce7         mov        qword [rsp+0xe8+var_80], rax
0000000000005cec         mov        rax, qword [rsp+0xe8+arg_10]
0000000000005cf4         mov        qword [rsp+0xe8+var_88], rax
0000000000005cf9         mov        rax, qword [fs:0x28]
0000000000005d02         mov        qword [rsp+0xe8+var_40], rax
0000000000005d0a         xor        eax, eax
0000000000005d0c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000005d11         cmp        r15d, 0xa
0000000000005d15         mov        qword [rsp+0xe8+var_90], rax
0000000000005d1a         ja         loc_6ecf

0000000000005d20         lea        rcx, qword [switch_table_c900]              ; switch_table_c900
0000000000005d27         mov        edx, r15d
0000000000005d2a         movsxd     rax, dword [rcx+rdx*4]
0000000000005d2e         add        rax, rcx
0000000000005d31         jmp        rax                                         ; switch statement using table at 0xc900, with 11 cases, 0x5d33,0x6904,0x6960,0x69b5,0x69fa,0x6a34,0x6ada,0x6b14,0x6d08

                     loc_5d33:
0000000000005d33         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_63e0+1318
0000000000005d38         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005d3d         xor        r12d, r12d
0000000000005d40         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005d49         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000005d4e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_5d53:
0000000000005d53         lea        rax, qword [aInvalidSsArgum+25]             ; 0xd119, CODE XREF=sub_63e0+1876
0000000000005d5a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005d63         xor        r15d, r15d
0000000000005d66         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000005d6e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_5d73:
0000000000005d73         xor        r11d, r11d                                  ; CODE XREF=sub_63e0+180, sub_63e0+1400, sub_63e0+1488, sub_63e0+1557, sub_63e0+1615, sub_63e0+1781, sub_63e0+1839, sub_63e0+2408, sub_63e0+2485
0000000000005d76         mov        rax, rbp
0000000000005d79         mov        r8d, r12d
0000000000005d7c         mov        rbp, r11
0000000000005d7f         mov        r11, rax
0000000000005d82         nop        word [rax+rax]

                     loc_5d88:
0000000000005d88         cmp        r11, rbp                                    ; CODE XREF=sub_5e90+194
0000000000005d8b         setne      r12b
0000000000005d8f         cmp        r11, 0xffffffffffffffff
0000000000005d93         jne        loc_5da2

0000000000005d95         mov        rax, qword [rsp+0xe8+var_D8]
0000000000005d9a         cmp        byte [rax+rbp], 0x0
0000000000005d9e         setne      r12b

                     loc_5da2:
0000000000005da2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000005da5         je         loc_6400

0000000000005dab         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000005db0         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000005db5         lea        r9, qword [rdi+rbp]
0000000000005db9         setne      al
0000000000005dbc         and        al, byte [rsp+0xe8+var_DB]
0000000000005dc0         mov        r10d, eax
0000000000005dc3         je         loc_5e70

0000000000005dc9         mov        rax, qword [rsp+0xe8+var_D0]
0000000000005dce         test       rax, rax
0000000000005dd1         je         loc_6200

0000000000005dd7         cmp        r11, 0xffffffffffffffff
0000000000005ddb         lea        rbx, qword [rbp+rax]
0000000000005de0         jne        loc_5e10

0000000000005de2         cmp        rax, 0x1
0000000000005de6         jbe        loc_5e10

0000000000005de8         mov        byte [rsp+0xe8+var_B0], r8b
0000000000005ded         mov        byte [rsp+0xe8+var_B8], r10b
0000000000005df2         mov        qword [rsp+0xe8+var_C0], r9
0000000000005df7         call       j_strlen                                    ; strlen
0000000000005dfc         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000005e02         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000005e08         mov        r11, rax
0000000000005e0b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_5e10:
0000000000005e10         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000005e13         mov        byte [rsp+0xe8+var_C0], r10b
0000000000005e18         ja         loc_63d0

0000000000005e1e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000005e23         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000005e28         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000005e2b         mov        qword [rsp+0xe8+var_A8], r11
0000000000005e30         mov        byte [rsp+0xe8+var_B0], r8b
0000000000005e35         mov        qword [rsp+0xe8+var_B8], r9
0000000000005e3a         call       j_memcmp                                    ; memcmp
0000000000005e3f         test       eax, eax
0000000000005e41         mov        r9, qword [rsp+0xe8+var_B8]
0000000000005e46         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000005e4c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000005e51         jne        loc_63d0

0000000000005e57         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000005e5c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000005e62         jne        loc_6de5

0000000000005e68         nop        dword [rax+rax]

                     loc_5e70:
0000000000005e70         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_63c0+19
0000000000005e74         cmp        bl, 0x7e
0000000000005e77         ja         loc_6198

0000000000005e7d         lea        rcx, qword [switch_table_c900+44]           ; 0xc92c
0000000000005e84         movzx      edx, bl
0000000000005e87         movsxd     rax, dword [rcx+rdx*4]
0000000000005e8b         add        rax, rcx
0000000000005e8e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_5e90:
0000000000005e90         xor        r10d, r10d
0000000000005e93         cmp        r11, 0x1
0000000000005e97         setne      al
0000000000005e9a         cmp        r11, 0xffffffffffffffff
0000000000005e9e         jne        loc_5eac

0000000000005ea0         mov        rax, qword [rsp+arg_8]
0000000000005ea5         cmp        byte [rax+1], 0x0
0000000000005ea9         setne      al

                     loc_5eac:
0000000000005eac         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_5e90+14
0000000000005eb1         sete       dl
0000000000005eb4         test       al, al
0000000000005eb6         je         loc_6108

                     loc_5ebc:
0000000000005ebc         xor        r12d, r12d                                  ; CODE XREF=sub_6100+11
0000000000005ebf         xor        eax, eax
0000000000005ec1         nop        dword [rax]
                        ; endp

                     loc_5ec8:
0000000000005ec8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_60b0+50, sub_6180+119
0000000000005ecd         jne        loc_5fe2

0000000000005ed3         test       dl, dl
0000000000005ed5         jne        loc_5fe2

                     loc_5edb:
0000000000005edb         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_5f90+87
0000000000005ee0         test       rsi, rsi
0000000000005ee3         je         loc_5ef9

0000000000005ee5         mov        edx, ebx
0000000000005ee7         shr        dl, 0x5
0000000000005eea         movzx      edx, dl
0000000000005eed         mov        edx, dword [rsi+rdx*4]
0000000000005ef0         bt         edx, ebx
0000000000005ef3         jb         loc_6043

                     loc_5ef9:
0000000000005ef9         test       r10b, r10b                                  ; CODE XREF=sub_5e90+83, sub_5f90+93
0000000000005efc         jne        loc_6043

0000000000005f02         xor        eax, 0x1
0000000000005f05         add        rbp, 0x1
0000000000005f09         and        eax, r8d

                     loc_5f0c:
0000000000005f0c         test       al, al                                      ; CODE XREF=sub_63e0+936
0000000000005f0e         je         loc_5f30

0000000000005f10         cmp        r13, r15
0000000000005f13         jbe        loc_5f1a

0000000000005f15         mov        byte [r14+r15], 0x27

                     loc_5f1a:
0000000000005f1a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_5e90+131
0000000000005f1e         cmp        r13, rax
0000000000005f21         jbe        loc_5f29

0000000000005f23         mov        byte [r14+r15+1], 0x27

                     loc_5f29:
0000000000005f29         add        r15, 0x2                                    ; CODE XREF=sub_5e90+145
0000000000005f2d         xor        r8d, r8d

                     loc_5f30:
0000000000005f30         cmp        r15, r13                                    ; CODE XREF=sub_5e90+126, sub_5f90+275, sub_63e0+869
0000000000005f33         jae        loc_5f39

0000000000005f35         mov        byte [r14+r15], bl

                     loc_5f39:
0000000000005f39         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_5e90+163
0000000000005f3e         add        r15, 0x1
0000000000005f42         mov        eax, 0x0
0000000000005f47         test       r12b, r12b
0000000000005f4a         cmove      edi, eax
0000000000005f4d         mov        byte [rsp+0xe8+var_DA], dil
0000000000005f52         jmp        loc_5d88
0000000000005f57         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_5f60:
0000000000005f60         xor        r10d, r10d
0000000000005f63         mov        eax, dword [rsp+arg_0]
0000000000005f67         cmp        eax, 0x2
0000000000005f6a         je         loc_6528

0000000000005f70         cmp        eax, 0x5
0000000000005f73         je         loc_64e8

0000000000005f79         cmp        eax, 0x2
0000000000005f7c         mov        ebx, 0x3f
0000000000005f81         sete       dl
0000000000005f84         xor        r12d, r12d
0000000000005f87         xor        eax, eax
0000000000005f89         jmp        sub_5e90+56
                        ; endp
0000000000005f8e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_5f90:
0000000000005f90         xor        r10d, r10d
0000000000005f93         cmp        dword [rsp+arg_0], 0x2
0000000000005f98         je         loc_64a0

0000000000005f9e         mov        byte [rsp+arg_74], r12b
0000000000005fa3         xor        edx, edx
0000000000005fa5         xor        eax, eax
0000000000005fa7         mov        ebx, 0x27
0000000000005fac         jmp        sub_5e90+56
                        ; endp
0000000000005fb1         nop        dword [rax]
0000000000005fb8         mov        edx, 0x9
0000000000005fbd         mov        ebx, 0x74

                     loc_5fc2:
0000000000005fc2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_6150+10, sub_6240+37, sub_6380+53
0000000000005fc7         sete       al
0000000000005fca         and        al, byte [rsp+arg_7]
0000000000005fce         jne        sub_6100+30

0000000000005fd4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_5f90+114
0000000000005fd9         jne        loc_6040

                     loc_5fdb:
0000000000005fdb         mov        ebx, edx                                    ; CODE XREF=sub_60b0+18
0000000000005fdd         xor        r12d, r12d
0000000000005fe0         xor        eax, eax
                        ; endp

                     loc_5fe2:
0000000000005fe2         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_5e90+61, sub_5e90+69
0000000000005fe7         jne        loc_5edb

0000000000005fed         jmp        loc_5ef9
0000000000005ff2         nop        word [rax+rax]
0000000000005ff8         mov        edx, 0x8
0000000000005ffd         mov        ebx, 0x62
0000000000006002         jmp        sub_5f90+68
0000000000006004         nop        dword [rax]
0000000000006008         cmp        dword [rsp+8], 0x2
000000000000600d         je         sub_63e0                                    ; sub_63e0
0000000000006013         cmp        byte [rsp+0xd], 0x0
0000000000006018         je         sub_6220+16

                     loc_601e:
000000000000601e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_6220+8
0000000000006023         je         loc_6230

0000000000006029         cmp        qword [rsp+arg_10], 0x0
000000000000602f         jne        loc_63eb

0000000000006035         mov        ebx, 0x5c
000000000000603a         nop        word [rax+rax]
                        ; endp

                     loc_6040:
0000000000006040         xor        r12d, r12d                                  ; CODE XREF=sub_5f90+73, sub_6380+29
                        ; endp

                     loc_6043:
0000000000006043         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_5e90+99, sub_5e90+108
0000000000006048         sete       dl
000000000000604b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000006050         mov        eax, edx
0000000000006052         jne        loc_68a8

0000000000006058         mov        eax, r8d
000000000000605b         xor        eax, 0x1
000000000000605e         and        al, dl
0000000000006060         je         loc_6091

0000000000006062         cmp        r13, r15
0000000000006065         jbe        loc_606c

0000000000006067         mov        byte [r14+r15], 0x27

                     loc_606c:
000000000000606c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_5f90+213
0000000000006070         cmp        r13, rdx
0000000000006073         jbe        loc_607b

0000000000006075         mov        byte [r14+r15+1], 0x24

                     loc_607b:
000000000000607b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_5f90+227
000000000000607f         cmp        r13, rdx
0000000000006082         jbe        loc_608a

0000000000006084         mov        byte [r14+r15+2], 0x27

                     loc_608a:
000000000000608a         add        r15, 0x3                                    ; CODE XREF=sub_5f90+242
000000000000608e         mov        r8d, eax

                     loc_6091:
0000000000006091         cmp        r13, r15                                    ; CODE XREF=sub_5f90+208
0000000000006094         jbe        loc_609b

0000000000006096         mov        byte [r14+r15], 0x5c

                     loc_609b:
000000000000609b         add        r15, 0x1                                    ; CODE XREF=sub_5f90+260
000000000000609f         add        rbp, 0x1
00000000000060a3         jmp        loc_5f30
00000000000060a8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_60b0:
00000000000060b0         cmp        byte [rsp+arg_5], 0x0
00000000000060b5         jne        loc_6283

00000000000060bb         xor        edx, edx
00000000000060bd         test       byte [rsp+arg_70], 0x1
00000000000060c2         je         loc_5fdb

00000000000060c8         add        rbp, 0x1
00000000000060cc         jmp        quotearg_buffer_restyled+232
                        ; endp
00000000000060d1         nop        dword [rax]
00000000000060d8         cmp        dword [rsp+8], 0x2
00000000000060dd         sete       dl
00000000000060e0         xor        eax, eax
00000000000060e2         jmp        sub_5e90+56
00000000000060e7         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_60f0:
00000000000060f0         mov        edx, 0x7
00000000000060f5         mov        ebx, 0x61
00000000000060fa         jmp        sub_5f90+68
                        ; endp
00000000000060ff         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6100:
0000000000006100         cmp        dword [rsp+8], 0x2
0000000000006105         sete       dl
                        ; endp

                     loc_6108:
0000000000006108         test       rbp, rbp                                    ; CODE XREF=sub_5e90+38, sub_6320+35
000000000000610b         jne        loc_5ebc

0000000000006111         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_6350+43
0000000000006116         and        al, dl
0000000000006118         je         sub_5e90+56

000000000000611e         mov        rbp, r11
0000000000006121         mov        dword [rsp+arg_0], 0x2
0000000000006129         jmp        sub_63e0+1097
                        ; endp
000000000000612e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6130:
0000000000006130         cmp        dword [rsp+arg_0], 0x2
0000000000006135         sete       dl
0000000000006138         xor        r12d, r12d
000000000000613b         jmp        sub_6100+17
                        ; endp
000000000000613d         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6140:
0000000000006140         cmp        dword [rsp+arg_0], 0x2
0000000000006145         mov        ebx, 0x20
000000000000614a         sete       dl
000000000000614d         jmp        sub_6100+17
                        ; endp
000000000000614f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_6150:
0000000000006150         mov        edx, 0xd
0000000000006155         mov        ebx, 0x72
000000000000615a         jmp        loc_5fc2
000000000000615f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6160:
0000000000006160         mov        edx, 0xc
0000000000006165         mov        ebx, 0x66
000000000000616a         jmp        sub_5f90+68
                        ; endp
000000000000616f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6170:
0000000000006170         mov        edx, 0xb
0000000000006175         mov        ebx, 0x76
000000000000617a         jmp        sub_5f90+68
                        ; endp
000000000000617f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6180:
0000000000006180         mov        edx, 0xa
0000000000006185         mov        ebx, 0x6e
000000000000618a         jmp        sub_5f90+50
                        ; endp
000000000000618f         align      16

                     loc_6190:
0000000000006190         xor        r10d, r10d                                  ; CODE XREF=sub_6180+135
0000000000006193         nop        dword [rax+rax]

                     loc_6198:
0000000000006198         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000619e         jne        loc_6548

00000000000061a4         mov        qword [rsp+0xe8+var_B0], r11
00000000000061a9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000061ae         mov        byte [rsp+0xe8+var_C0], r10b
00000000000061b3         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000061b8         mov        rcx, qword [rax]
00000000000061bb         movzx      edx, bl
00000000000061be         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000061c4         movzx      r8d, byte [rsp+0xe8+var_B8]
00000000000061ca         mov        r11, qword [rsp+0xe8+var_B0]
00000000000061cf         mov        edi, 0x1
00000000000061d4         movzx      eax, word [rcx+rdx*2]
00000000000061d8         and        ax, 0x4000
00000000000061dc         setne      r12b
00000000000061e0         sete       al
00000000000061e3         and        al, byte [rsp+0xe8+var_DB]

                     loc_61e7:
00000000000061e7         test       al, al                                      ; CODE XREF=sub_63e0+2221
00000000000061e9         jne        loc_6b81

00000000000061ef         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000061f4         sete       dl
00000000000061f7         jmp        loc_5ec8
00000000000061fc         align      512

                     loc_6200:
0000000000006200         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000006204         cmp        bl, 0x7e
0000000000006207         ja         loc_6190

0000000000006209         lea        rcx, qword [switch_table_c900+552]          ; 0xcb28
0000000000006210         movzx      edx, bl
0000000000006213         movsxd     rax, dword [rcx+rdx*4]
0000000000006217         add        rax, rcx
000000000000621a         jmp        rax
                        ; endp
000000000000621c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_6220:
0000000000006220         xor        r10d, r10d
0000000000006223         cmp        byte [rsp+arg_5], 0x0
0000000000006228         jne        loc_601e

000000000000622e         nop

                     loc_6230:
0000000000006230         mov        edx, 0x5c                                   ; CODE XREF=sub_5f90+136, sub_5f90+147
0000000000006235         mov        ebx, 0x5c
000000000000623a         jmp        sub_5f90+68
                        ; endp
000000000000623f         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6240:
0000000000006240         mov        edx, 0xc
0000000000006245         xor        r10d, r10d
0000000000006248         mov        ebx, 0x66
000000000000624d         jmp        sub_5f90+68
                        ; endp
0000000000006252         nop        word [rax+rax]
0000000000006258         mov        edx, 0xa
000000000000625d         xor        r10d, r10d
0000000000006260         mov        ebx, 0x6e
0000000000006265         jmp        sub_5f90+50
000000000000626a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6270:
0000000000006270         mov        ebx, 0x61
0000000000006275         jmp        sub_5f90+176
                        ; endp
000000000000627a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6280:
0000000000006280         xor        r10d, r10d
                        ; endp

                     loc_6283:
0000000000006283         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_60b0+5
0000000000006288         sete       dl
000000000000628b         cmp        byte [rsp+arg_7], 0x0
0000000000006290         jne        loc_6e2a

0000000000006296         mov        eax, r8d
0000000000006299         mov        rcx, r15
000000000000629c         xor        eax, 0x1
000000000000629f         and        al, dl
00000000000062a1         je         loc_62d0

00000000000062a3         cmp        r13, r15
00000000000062a6         jbe        loc_62ad

00000000000062a8         mov        byte [r14+r15], 0x27

                     loc_62ad:
00000000000062ad         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_6280+38
00000000000062b1         cmp        r13, rcx
00000000000062b4         jbe        loc_62bc

00000000000062b6         mov        byte [r14+r15+1], 0x24

                     loc_62bc:
00000000000062bc         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_6280+52
00000000000062c0         cmp        r13, rcx
00000000000062c3         ja         loc_68f9

                     loc_62c9:
00000000000062c9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_63e0+1311
00000000000062cd         mov        r8d, eax

                     loc_62d0:
00000000000062d0         cmp        r13, rcx                                    ; CODE XREF=sub_6280+33
00000000000062d3         jbe        loc_62da

00000000000062d5         mov        byte [r14+rcx], 0x5c

                     loc_62da:
00000000000062da         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_6280+83
00000000000062df         lea        r15, qword [rcx+1]
00000000000062e3         je         loc_68e9

00000000000062e9         lea        rax, qword [rbp+1]
00000000000062ed         cmp        rax, r11
00000000000062f0         jae        loc_630b

00000000000062f2         mov        rax, qword [rsp+arg_8]
00000000000062f7         movzx      eax, byte [rax+rbp+1]
00000000000062fc         mov        byte [rsp+arg_20], al
0000000000006300         sub        eax, 0x30
0000000000006303         cmp        al, 0x9
0000000000006305         jbe        loc_6b39

                     loc_630b:
000000000000630b         mov        eax, r12d                                   ; CODE XREF=sub_6280+112
000000000000630e         mov        ebx, 0x30
0000000000006313         xor        r12d, r12d
0000000000006316         jmp        sub_5e90+56
                        ; endp
000000000000631b         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6320:
0000000000006320         cmp        dword [rsp+arg_0], 0x2
0000000000006325         mov        r12d, r10d
0000000000006328         sete       dl
000000000000632b         xor        r10d, r10d
000000000000632e         xor        eax, eax
0000000000006330         jmp        sub_5e90+56
                        ; endp
0000000000006335         nop        dword [rax]
0000000000006338         cmp        dword [rsp+8], 0x2
000000000000633d         sete       dl
0000000000006340         xor        r10d, r10d
0000000000006343         jmp        sub_6100+8
0000000000006348         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6350:
0000000000006350         cmp        dword [rsp+8], 0x2
0000000000006355         sete       dl
0000000000006358         xor        r10d, r10d
000000000000635b         xor        r12d, r12d
000000000000635e         jmp        sub_6100+17
                        ; endp
0000000000006363         nop        dword [rax+rax]
0000000000006368         cmp        dword [rsp+8], 0x2
000000000000636d         mov        r12d, r10d
0000000000006370         mov        ebx, 0x20
0000000000006375         sete       dl
0000000000006378         xor        r10d, r10d
000000000000637b         jmp        sub_6100+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6380:
0000000000006380         mov        edx, 0xd
0000000000006385         xor        r10d, r10d
0000000000006388         mov        ebx, 0x72
000000000000638d         jmp        sub_5f90+50
                        ; endp
0000000000006392         nop        word [rax+rax]
0000000000006398         mov        ebx, 0x76
000000000000639d         jmp        sub_5f90+176
00000000000063a2         nop        word [rax+rax]
00000000000063a8         mov        edx, 0x9
00000000000063ad         xor        r10d, r10d
00000000000063b0         mov        ebx, 0x74
00000000000063b5         jmp        sub_5f90+50
00000000000063ba         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_63c0:
00000000000063c0         mov        ebx, 0x62
00000000000063c5         jmp        sub_5f90+176
                        ; endp
00000000000063ca         nop        word [rax+rax]

                     loc_63d0:
00000000000063d0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
00000000000063d3         jmp        loc_5e70
00000000000063d8         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_63e0:
00000000000063e0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_5f90+125
00000000000063e5         jne        sub_63e0+2416
                        ; endp

                     loc_63eb:
00000000000063eb         add        rbp, 0x1                                    ; CODE XREF=sub_5f90+159
00000000000063ef         mov        eax, r8d
00000000000063f2         xor        r12d, r12d
00000000000063f5         mov        ebx, 0x5c
00000000000063fa         jmp        sub_5e90+124
                        ; endp
00000000000063ff         align      1024

                     loc_6400:
0000000000006400         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000006405         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000640a         mov        r12d, r8d
000000000000640d         mov        rbp, r11
0000000000006410         sete       dl
0000000000006413         mov        eax, ebx
0000000000006415         test       r15, r15
0000000000006418         sete       cl
000000000000641b         and        eax, edx
000000000000641d         and        al, cl
000000000000641f         jne        loc_6e86

0000000000006425         mov        eax, ebx
0000000000006427         xor        eax, 0x1
000000000000642a         and        dl, al
000000000000642c         je         loc_6d9c

0000000000006432         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000006437         je         loc_6d9a

000000000000643d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000006442         jne        loc_6e3d

0000000000006448         test       r13, r13
000000000000644b         sete       al
000000000000644e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000006454         setne      dl
0000000000006457         and        al, dl
0000000000006459         je         loc_6e7c

000000000000645f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_6464:
0000000000006464         lea        rbx, qword [aInvalidSsArgum+25]             ; 0xd119, CODE XREF=sub_63e0+2781
000000000000646b         mov        byte [r14], 0x27
000000000000646f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000006477         mov        r15d, 0x1
000000000000647d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006486         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000648b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000006490         mov        byte [rsp+0xe8+var_6C], al
0000000000006494         jmp        loc_5d73
0000000000006499         align      32

                     loc_64a0:
00000000000064a0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_5f90+8
00000000000064a5         jne        sub_63e0+2416

00000000000064ab         test       r13, r13
00000000000064ae         je         loc_68b0

00000000000064b4         xor        edx, edx
00000000000064b6         cmp        qword [rsp+arg_48], 0x0
00000000000064bc         jne        loc_68b0

                     loc_64c2:
00000000000064c2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_63e0+1284, sub_63e0+2794
00000000000064c7         add        r15, 0x3
00000000000064cb         xor        eax, eax
00000000000064cd         mov        byte [rsp+arg_74], r12b
00000000000064d2         xor        r8d, r8d
00000000000064d5         mov        r13, rdx
00000000000064d8         mov        ebx, 0x27
00000000000064dd         jmp        sub_5e90+105
                        ; endp
00000000000064e2         align      8

                     loc_64e8:
00000000000064e8         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_5f60+19
00000000000064ed         je         loc_6510

00000000000064ef         lea        rcx, qword [rbp+2]
00000000000064f3         cmp        rcx, r11
00000000000064f6         jae        loc_6510

00000000000064f8         mov        rax, qword [rsp+arg_8]
00000000000064fd         cmp        byte [rax+rbp+1], 0x3f
0000000000006502         je         loc_6c92

0000000000006508         nop        dword [rax+rax]

                     loc_6510:
0000000000006510         xor        edx, edx                                    ; CODE XREF=sub_63e0+269, sub_63e0+278, sub_63e0+2233, sub_63e0+2253
0000000000006512         xor        r12d, r12d
0000000000006515         xor        eax, eax
0000000000006517         mov        ebx, 0x3f
000000000000651c         jmp        sub_5e90+56
                        ; endp
0000000000006521         align      8

                     loc_6528:
0000000000006528         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_5f60+10
000000000000652d         jne        loc_6d50

0000000000006533         xor        r12d, r12d
0000000000006536         xor        eax, eax
0000000000006538         mov        ebx, 0x3f
000000000000653d         jmp        sub_5e90+105
                        ; endp
0000000000006542         align      8

                     loc_6548:
0000000000006548         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_6180+30
0000000000006550         cmp        r11, 0xffffffffffffffff
0000000000006554         mov        qword [rsp+0xe8+var_48], 0x0
0000000000006560         mov        qword [rsp+0xe8+var_C0], rax
0000000000006565         jne        loc_6594

0000000000006567         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000656c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000006571         mov        byte [rsp+0xe8+var_B0], r10b
0000000000006576         mov        qword [rsp+0xe8+var_B8], r9
000000000000657b         call       j_strlen                                    ; strlen
0000000000006580         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000006586         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000658c         mov        r11, rax
000000000000658f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_6594:
0000000000006594         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_63e0+389
000000000000659c         xor        ecx, ecx
000000000000659e         mov        byte [rsp+0xe8+var_6A], bl
00000000000065a2         mov        byte [rsp+0xe8+var_6B], r8b
00000000000065a7         mov        rbx, rcx
00000000000065aa         mov        qword [rsp+0xe8+var_60], r9
00000000000065b2         mov        qword [rsp+0xe8+var_B0], rax
00000000000065b7         mov        byte [rsp+0xe8+var_69], r10b
00000000000065bc         mov        qword [rsp+0xe8+var_68], r15
00000000000065c4         mov        qword [rsp+0xe8+var_A8], r14
00000000000065c9         mov        qword [rsp+0xe8+var_78], r13
00000000000065ce         mov        qword [rsp+0xe8+var_B8], r11

                     loc_65d3:
00000000000065d3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_63e0+623
00000000000065d8         lea        r14, qword [rbp+rbx]
00000000000065dd         mov        rdx, qword [rsp+0xe8+var_B8]
00000000000065e2         mov        rcx, qword [rsp+0xe8+var_C0]
00000000000065e7         mov        rdi, qword [rsp+0xe8+var_B0]
00000000000065ec         lea        r13, qword [rax+r14]
00000000000065f0         sub        rdx, r14
00000000000065f3         mov        rsi, r13
00000000000065f6         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000065fb         test       rax, rax
00000000000065fe         mov        r15, rax
0000000000006601         je         loc_6651

0000000000006603         cmp        rax, 0xffffffffffffffff
0000000000006607         je         loc_6c25

000000000000660d         cmp        rax, 0xfffffffffffffffe
0000000000006611         je         loc_6bb1

0000000000006617         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000661c         sete       al
000000000000661f         and        al, byte [rsp+0xe8+var_D9]
0000000000006623         jne        loc_67c0

                     loc_6629:
0000000000006629         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_63e0+996, sub_63e0+1031
0000000000006630         call       j_iswprint                                  ; iswprint
0000000000006635         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
000000000000663a         test       eax, eax
000000000000663c         mov        eax, 0x0
0000000000006641         cmove      r12d, eax
0000000000006645         add        rbx, r15
0000000000006648         call       j_mbsinit                                   ; mbsinit
000000000000664d         test       eax, eax
000000000000664f         je         loc_65d3

                     loc_6651:
0000000000006651         mov        edx, r12d                                   ; CODE XREF=sub_63e0+545
0000000000006654         mov        rdi, rbx
0000000000006657         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000665d         xor        edx, 0x1
0000000000006660         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000006665         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000666b         and        dl, byte [rsp+0xe8+var_DB]
000000000000666f         mov        r15, qword [rsp+0xe8+var_68]
0000000000006677         mov        r14, qword [rsp+0xe8+var_A8]
000000000000667c         mov        r13, qword [rsp+0xe8+var_78]
0000000000006681         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_6686:
0000000000006686         cmp        rdi, 0x1                                    ; CODE XREF=sub_63e0+2112, sub_63e0+2168
000000000000668a         jbe        loc_6c8b

                     loc_6690:
0000000000006690         mov        rcx, rdi                                    ; CODE XREF=sub_63e0+1961
0000000000006693         xor        esi, esi
0000000000006695         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000669b         add        rcx, rbp
000000000000669e         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000066a3         jmp        loc_675e
00000000000066a8         align      16

                     loc_66b0:
00000000000066b0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_63e0+896
00000000000066b5         sete       al
00000000000066b8         test       r9b, r9b
00000000000066bb         jne        loc_6b70

00000000000066c1         mov        esi, r8d
00000000000066c4         xor        esi, 0x1
00000000000066c7         and        al, sil
00000000000066ca         je         loc_66fb

00000000000066cc         cmp        r13, r15
00000000000066cf         jbe        loc_66d6

00000000000066d1         mov        byte [r14+r15], 0x27

                     loc_66d6:
00000000000066d6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_63e0+751
00000000000066da         cmp        r13, rsi
00000000000066dd         jbe        loc_66e5

00000000000066df         mov        byte [r14+r15+1], 0x24

                     loc_66e5:
00000000000066e5         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_63e0+765
00000000000066e9         cmp        r13, rsi
00000000000066ec         jbe        loc_66f4

00000000000066ee         mov        byte [r14+r15+2], 0x27

                     loc_66f4:
00000000000066f4         add        r15, 0x3                                    ; CODE XREF=sub_63e0+780
00000000000066f8         mov        r8d, eax

                     loc_66fb:
00000000000066fb         cmp        r13, r15                                    ; CODE XREF=sub_63e0+746
00000000000066fe         jbe        loc_6705

0000000000006700         mov        byte [r14+r15], 0x5c

                     loc_6705:
0000000000006705         lea        rax, qword [r15+1]                          ; CODE XREF=sub_63e0+798
0000000000006709         cmp        r13, rax
000000000000670c         jbe        loc_671b

000000000000670e         mov        eax, ebx
0000000000006710         shr        al, 0x6
0000000000006713         add        eax, 0x30
0000000000006716         mov        byte [r14+r15+1], al

                     loc_671b:
000000000000671b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_63e0+812
000000000000671f         cmp        r13, rax
0000000000006722         jbe        loc_6734

0000000000006724         mov        eax, ebx
0000000000006726         shr        al, 0x3
0000000000006729         and        eax, 0x7
000000000000672c         add        eax, 0x30
000000000000672f         mov        byte [r14+r15+2], al

                     loc_6734:
0000000000006734         and        ebx, 0x7                                    ; CODE XREF=sub_63e0+834
0000000000006737         add        rbp, 0x1
000000000000673b         add        r15, 0x3
000000000000673f         add        ebx, 0x30
0000000000006742         cmp        rbp, rcx
0000000000006745         jae        loc_5f30

000000000000674b         mov        esi, edx

                     loc_674d:
000000000000674d         cmp        r13, r15                                    ; CODE XREF=sub_63e0+985, sub_63e0+1969
0000000000006750         jbe        loc_6756

0000000000006752         mov        byte [r14+r15], bl

                     loc_6756:
0000000000006756         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_63e0+880
000000000000675a         add        r15, 0x1

                     loc_675e:
000000000000675e         test       dl, dl                                      ; CODE XREF=sub_63e0+707
0000000000006760         jne        loc_66b0

0000000000006766         mov        eax, esi
0000000000006768         xor        eax, 0x1
000000000000676b         and        eax, r8d
000000000000676e         test       r10b, r10b
0000000000006771         je         loc_6781

0000000000006773         cmp        r13, r15
0000000000006776         jbe        loc_677d

0000000000006778         mov        byte [r14+r15], 0x5c

                     loc_677d:
000000000000677d         add        r15, 0x1                                    ; CODE XREF=sub_63e0+918

                     loc_6781:
0000000000006781         add        rbp, 0x1                                    ; CODE XREF=sub_63e0+913
0000000000006785         cmp        rbp, rcx
0000000000006788         jae        loc_5f0c

000000000000678e         test       al, al
0000000000006790         je         loc_6b8e

0000000000006796         cmp        r13, r15
0000000000006799         jbe        loc_67a0

000000000000679b         mov        byte [r14+r15], 0x27

                     loc_67a0:
00000000000067a0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_63e0+953
00000000000067a4         cmp        r13, rax
00000000000067a7         jbe        loc_67af

00000000000067a9         mov        byte [r14+r15+1], 0x27

                     loc_67af:
00000000000067af         add        r15, 0x2                                    ; CODE XREF=sub_63e0+967
00000000000067b3         xor        r10d, r10d
00000000000067b6         xor        r8d, r8d
00000000000067b9         jmp        loc_674d
00000000000067bb         align      64

                     loc_67c0:
00000000000067c0         cmp        r15, 0x1                                    ; CODE XREF=sub_63e0+579
00000000000067c4         je         loc_6629

00000000000067ca         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000067cf         lea        rcx, qword [rdi+r15]
00000000000067d3         lea        rdx, qword [rdi+r14+1]
00000000000067d8         lea        r8, qword [rcx+r14]
00000000000067dc         jmp        loc_67ed
00000000000067de         align      32

                     loc_67e0:
00000000000067e0         add        rdx, 0x1                                    ; CODE XREF=sub_63e0+1046, sub_63e0+1072
00000000000067e4         cmp        r8, rdx
00000000000067e7         je         loc_6629

                     loc_67ed:
00000000000067ed         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_63e0+1020
00000000000067f0         sub        ecx, 0x5b
00000000000067f3         cmp        cl, 0x21
00000000000067f6         ja         loc_67e0

00000000000067f8         mov        esi, 0x1
00000000000067fd         shl        rsi, cl
0000000000006800         mov        rcx, rsi
0000000000006803         movabs     rsi, 0x20000002b
000000000000680d         test       rcx, rsi
0000000000006810         je         loc_67e0

0000000000006812         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006817         mov        r13, qword [rsp+0xe8+var_78]
000000000000681c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000006821         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_6829:
0000000000006829         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_63e0+1227, sub_63e0+1948, sub_63e0+2585, sub_63e0+2734
000000000000682e         je         loc_6840

0000000000006830         test       al, al
0000000000006832         mov        eax, 0x4
0000000000006837         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000683c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_6840:
0000000000006840         sub        rsp, 0x8                                    ; CODE XREF=sub_63e0+1102
0000000000006844         mov        rcx, rbp
0000000000006847         mov        rsi, r13
000000000000684a         push       qword [rsp+0xf0+var_88]
000000000000684e         push       qword [rsp+0xf8+var_80]
0000000000006852         mov        rdi, r14
0000000000006855         push       0x0
0000000000006857         mov        r9d, dword [rsp+0x108+var_70]
000000000000685f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000006864         mov        rdx, qword [rsp+0x108+var_D8]
0000000000006869         and        r9d, 0xfffffffd
000000000000686d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000006872         add        rsp, 0x20
0000000000006876         mov        r15, rax

                     loc_6879:
0000000000006879         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_63e0+2549, sub_63e0+2560, sub_63e0+2711
0000000000006881         xor        rbx, qword [fs:0x28]
000000000000688a         mov        rax, r15
000000000000688d         jne        loc_6e93

0000000000006893         add        rsp, 0xb8
000000000000689a         pop        rbx
000000000000689b         pop        rbp
000000000000689c         pop        r12
000000000000689e         pop        r13
00000000000068a0         pop        r14
00000000000068a2         pop        r15
00000000000068a4         ret
                        ; endp
00000000000068a5         align      8

                     loc_68a8:
00000000000068a8         mov        rbp, r11                                    ; CODE XREF=sub_5f90+194
00000000000068ab         jmp        loc_6829

                     loc_68b0:
00000000000068b0         cmp        r13, r15                                    ; CODE XREF=sub_63e0+206, sub_63e0+220
00000000000068b3         jbe        loc_68ba

00000000000068b5         mov        byte [r14+r15], 0x27

                     loc_68ba:
00000000000068ba         lea        rax, qword [r15+1]                          ; CODE XREF=sub_63e0+1235
00000000000068be         cmp        r13, rax
00000000000068c1         jbe        loc_68c9

00000000000068c3         mov        byte [r14+r15+1], 0x5c

                     loc_68c9:
00000000000068c9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_63e0+1249
00000000000068cd         cmp        r13, rax
00000000000068d0         jbe        loc_6ec2

00000000000068d6         mov        rdx, r13
00000000000068d9         mov        byte [r14+r15+2], 0x27
00000000000068df         mov        r13, qword [rsp+arg_48]
00000000000068e4         jmp        loc_64c2

                     loc_68e9:
00000000000068e9         mov        eax, r12d                                   ; CODE XREF=sub_6280+99
00000000000068ec         mov        ebx, 0x30
00000000000068f1         xor        r12d, r12d
00000000000068f4         jmp        sub_5e90+105
                        ; endp

                     loc_68f9:
00000000000068f9         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_6280+67
00000000000068ff         jmp        loc_62c9

                     loc_6904:
0000000000006904         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000006906         jne        loc_5d33

000000000000690c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_6911:
0000000000006911         test       r13, r13                                    ; CODE XREF=sub_63e0+2749
0000000000006914         jne        loc_6eaa

000000000000691a         lea        rax, qword [aInvalidSsArgum+25]             ; 0xd119
0000000000006921         mov        qword [rsp+0xe8+var_98], 0x0
000000000000692a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000692f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006934         xor        r12d, r12d
0000000000006937         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000693c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006945         mov        qword [rsp+0xe8+var_A0], rax
000000000000694a         mov        r15d, 0x1
0000000000006950         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000006958         jmp        loc_5d73
000000000000695d         align      32

                     loc_6960:
0000000000006960         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000006962         jne        loc_6d5d

0000000000006968         test       r13, r13
000000000000696b         je         loc_6b96

0000000000006971         mov        byte [r14], 0x22
0000000000006975         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000697a         xor        r12d, r12d
000000000000697d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006982         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_698b:
000000000000698b         lea        rax, qword [aLibs+27]                       ; 0xc893, CODE XREF=sub_63e0+1996
0000000000006992         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006997         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000699c         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000069a5         mov        r15d, 0x1
00000000000069ab         mov        qword [rsp+0xe8+var_A0], rax
00000000000069b0         jmp        loc_5d73

                     loc_69b5:
00000000000069b5         lea        rax, qword [aLibs+27]                       ; case 6, 0xc893, CODE XREF=quotearg_buffer_restyled+145
00000000000069bc         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000069c1         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000069c6         xor        r12d, r12d
00000000000069c9         mov        qword [rsp+0xe8+var_98], 0x0
00000000000069d2         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000069d7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000069dc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000069e5         xor        r15d, r15d
00000000000069e8         mov        qword [rsp+0xe8+var_A0], rax
00000000000069ed         mov        dword [rsp+0xe8+var_E0], 0x5
00000000000069f5         jmp        loc_5d73

                     loc_69fa:
00000000000069fa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
00000000000069ff         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006a04         xor        r12d, r12d
0000000000006a07         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006a10         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006a15         xor        r15d, r15d
0000000000006a18         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006a1d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000006a26         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000006a2f         jmp        loc_5d73

                     loc_6a34:
0000000000006a34         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000006a39         je         loc_6a91

0000000000006a3b         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xc895
0000000000006a42         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a44         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a49         call       j_dcgettext                                 ; dcgettext
0000000000006a4e         mov        rcx, rax
0000000000006a51         mov        qword [rsp+0xe8+var_80], rax
0000000000006a56         lea        rax, qword [aLibs+29]                       ; 0xc895
0000000000006a5d         cmp        rcx, rax
0000000000006a60         je         loc_6dfe

                     loc_6a66:
0000000000006a66         lea        rsi, qword [aInvalidSsArgum+25]             ; argument "msgid" for method j_dcgettext, 0xd119, CODE XREF=sub_63e0+2607
0000000000006a6d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a6f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a74         call       j_dcgettext                                 ; dcgettext
0000000000006a79         mov        rcx, rax
0000000000006a7c         mov        qword [rsp+0xe8+var_88], rax
0000000000006a81         lea        rax, qword [aInvalidSsArgum+25]             ; 0xd119
0000000000006a88         cmp        rcx, rax
0000000000006a8b         je         loc_6e14

                     loc_6a91:
0000000000006a91         xor        r15d, r15d                                  ; CODE XREF=sub_63e0+1625, sub_63e0+2629
0000000000006a94         test       ebx, ebx
0000000000006a96         je         loc_6c5d

                     loc_6a9c:
0000000000006a9c         test       ebx, ebx                                    ; CODE XREF=sub_63e0+2183, sub_63e0+2214
0000000000006a9e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000006aa3         setne      byte [rsp+0xe8+var_D9]
0000000000006aa8         xor        r12d, r12d
0000000000006aab         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000006aae         call       j_strlen                                    ; strlen
0000000000006ab3         mov        qword [rsp+0xe8+var_A0], rbx
0000000000006ab8         mov        qword [rsp+0xe8+var_D0], rax
0000000000006abd         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006ac2         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ac7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006ad0         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006ad5         jmp        loc_5d73

                     loc_6ada:
0000000000006ada         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
0000000000006adf         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ae4         xor        r12d, r12d
0000000000006ae7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006af0         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006af5         xor        r15d, r15d
0000000000006af8         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000006afd         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000006b06         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000006b0f         jmp        loc_5d73

                     loc_6b14:
0000000000006b14         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000006b19         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006b1e         xor        r12d, r12d
0000000000006b21         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006b2a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006b2f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006b34         jmp        loc_5d53

                     loc_6b39:
0000000000006b39         cmp        r13, r15                                    ; CODE XREF=sub_6280+133
0000000000006b3c         jbe        loc_6b43

0000000000006b3e         mov        byte [r14+r15], 0x30

                     loc_6b43:
0000000000006b43         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_63e0+1884
0000000000006b47         cmp        r13, rax
0000000000006b4a         jbe        loc_6b52

0000000000006b4c         mov        byte [r14+rcx+2], 0x30

                     loc_6b52:
0000000000006b52         mov        eax, r12d                                   ; CODE XREF=sub_63e0+1898
0000000000006b55         lea        r15, qword [rcx+3]
0000000000006b59         xor        r12d, r12d
0000000000006b5c         mov        ebx, 0x30
0000000000006b61         jmp        sub_5e90+56
                        ; endp
0000000000006b66         align      16

                     loc_6b70:
0000000000006b70         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_63e0+731
0000000000006b75         mov        rbp, r11
0000000000006b78         mov        byte [rsp+0xe8+var_DB], bl
0000000000006b7c         jmp        loc_6829

                     loc_6b81:
0000000000006b81         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_6180+105
0000000000006b86         xor        r12d, r12d
0000000000006b89         jmp        loc_6690

                     loc_6b8e:
0000000000006b8e         xor        r10d, r10d                                  ; CODE XREF=sub_63e0+944
0000000000006b91         jmp        loc_674d

                     loc_6b96:
0000000000006b96         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_63e0+1419
0000000000006b9f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006ba4         xor        r12d, r12d
0000000000006ba7         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006bac         jmp        loc_698b

                     loc_6bb1:
0000000000006bb1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_63e0+561
0000000000006bb6         mov        rsi, r14
0000000000006bb9         mov        rcx, r13
0000000000006bbc         mov        rax, rbx
0000000000006bbf         mov        rdi, rbx
0000000000006bc2         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000006bc8         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000006bcd         mov        r9, qword [rsp+0xe8+var_60]
0000000000006bd5         cmp        rsi, r11
0000000000006bd8         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000006bde         mov        r15, qword [rsp+0xe8+var_68]
0000000000006be6         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006beb         mov        r13, qword [rsp+0xe8+var_78]
0000000000006bf0         jae        loc_6c18

0000000000006bf2         cmp        byte [rcx], 0x0
0000000000006bf5         jne        loc_6c07

0000000000006bf7         jmp        loc_6c18
0000000000006bf9         align      1024

                     loc_6c00:
0000000000006c00         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_63e0+2099
0000000000006c05         je         loc_6c15

                     loc_6c07:
0000000000006c07         add        rax, 0x1                                    ; CODE XREF=sub_63e0+2069
0000000000006c0b         lea        rdx, qword [rbp+rax]
0000000000006c10         cmp        r11, rdx
0000000000006c13         ja         loc_6c00

                     loc_6c15:
0000000000006c15         mov        rdi, rax                                    ; CODE XREF=sub_63e0+2085

                     loc_6c18:
0000000000006c18         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_63e0+2064, sub_63e0+2071
0000000000006c1d         xor        r12d, r12d
0000000000006c20         jmp        loc_6686

                     loc_6c25:
0000000000006c25         mov        rdi, rbx                                    ; CODE XREF=sub_63e0+551
0000000000006c28         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000006c2e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000006c33         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000006c39         mov        r15, qword [rsp+0xe8+var_68]
0000000000006c41         xor        r12d, r12d
0000000000006c44         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006c49         mov        r13, qword [rsp+0xe8+var_78]
0000000000006c4e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000006c53         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000006c58         jmp        loc_6686

                     loc_6c5d:
0000000000006c5d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_63e0+1718
0000000000006c62         movzx      eax, byte [rdx]
0000000000006c65         test       al, al
0000000000006c67         je         loc_6a9c

0000000000006c6d         nop        dword [rax]

                     loc_6c70:
0000000000006c70         cmp        r13, r15                                    ; CODE XREF=sub_63e0+2212
0000000000006c73         jbe        loc_6c79

0000000000006c75         mov        byte [r14+r15], al

                     loc_6c79:
0000000000006c79         add        r15, 0x1                                    ; CODE XREF=sub_63e0+2195
0000000000006c7d         movzx      eax, byte [rdx+r15]
0000000000006c82         test       al, al
0000000000006c84         jne        loc_6c70

0000000000006c86         jmp        loc_6a9c

                     loc_6c8b:
0000000000006c8b         mov        eax, edx                                    ; CODE XREF=sub_63e0+682
0000000000006c8d         jmp        loc_61e7

                     loc_6c92:
0000000000006c92         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_63e0+290
0000000000006c96         cmp        bl, 0x3e
0000000000006c99         ja         loc_6510

0000000000006c9f         movabs     rax, 0x7000a38200000000
0000000000006ca9         bt         rax, rbx
0000000000006cad         jae        loc_6510

0000000000006cb3         cmp        byte [rsp+arg_7], 0x0
0000000000006cb8         jne        loc_6ea2

0000000000006cbe         cmp        r13, r15
0000000000006cc1         jbe        loc_6cc8

0000000000006cc3         mov        byte [r14+r15], 0x3f

                     loc_6cc8:
0000000000006cc8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_63e0+2273
0000000000006ccc         cmp        r13, rax
0000000000006ccf         jbe        loc_6cd7

0000000000006cd1         mov        byte [r14+r15+1], 0x22

                     loc_6cd7:
0000000000006cd7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_63e0+2287
0000000000006cdb         cmp        r13, rax
0000000000006cde         jbe        loc_6ce6

0000000000006ce0         mov        byte [r14+r15+2], 0x22

                     loc_6ce6:
0000000000006ce6         lea        rax, qword [r15+3]                          ; CODE XREF=sub_63e0+2302
0000000000006cea         cmp        r13, rax
0000000000006ced         jbe        loc_6cf5

0000000000006cef         mov        byte [r14+r15+3], 0x3f

                     loc_6cf5:
0000000000006cf5         add        r15, 0x4                                    ; CODE XREF=sub_63e0+2317
0000000000006cf9         xor        edx, edx
0000000000006cfb         xor        r12d, r12d
0000000000006cfe         xor        eax, eax
0000000000006d00         mov        rbp, rcx
0000000000006d03         jmp        sub_5e90+56
                        ; endp

                     loc_6d08:
0000000000006d08         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
0000000000006d0a         je         loc_6e98

0000000000006d10         lea        rax, qword [aInvalidSsArgum+25]             ; 0xd119
0000000000006d17         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006d1c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006d21         xor        r12d, r12d
0000000000006d24         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006d2d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006d32         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000006d37         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006d40         xor        r15d, r15d
0000000000006d43         mov        qword [rsp+0xe8+var_A0], rax
0000000000006d48         jmp        loc_5d73
0000000000006d4d         align      16

                     loc_6d50:
0000000000006d50         mov        rbp, r11                                    ; CODE XREF=sub_63e0+333
0000000000006d53         movzx      eax, byte [rsp+arg_7]
0000000000006d58         jmp        sub_63e0+1097
                        ; endp

                     loc_6d5d:
0000000000006d5d         lea        rax, qword [aLibs+27]                       ; 0xc893, CODE XREF=sub_63e0+1410
0000000000006d64         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006d69         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006d6e         xor        r12d, r12d
0000000000006d71         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006d7a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006d7f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006d84         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006d8d         xor        r15d, r15d
0000000000006d90         mov        qword [rsp+0xe8+var_A0], rax
0000000000006d95         jmp        loc_5d73

                     loc_6d9a:
0000000000006d9a         mov        eax, edx                                    ; CODE XREF=sub_63e0+87

                     loc_6d9c:
0000000000006d9c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_63e0+76, sub_63e0+2721
0000000000006da1         test       rbx, rbx
0000000000006da4         je         loc_6dd2

0000000000006da6         test       al, al
0000000000006da8         je         loc_6dd2

0000000000006daa         movzx      ecx, byte [rbx]
0000000000006dad         mov        rax, rbx
0000000000006db0         test       cl, cl
0000000000006db2         je         loc_6dd2

0000000000006db4         mov        rdx, r15
0000000000006db7         sub        rax, r15

                     loc_6dba:
0000000000006dba         cmp        r13, rdx                                    ; CODE XREF=sub_63e0+2541
0000000000006dbd         jbe        loc_6dc3

0000000000006dbf         mov        byte [r14+rdx], cl

                     loc_6dc3:
0000000000006dc3         add        rdx, 0x1                                    ; CODE XREF=sub_63e0+2525
0000000000006dc7         movzx      ecx, byte [rax+rdx]
0000000000006dcb         test       cl, cl
0000000000006dcd         jne        loc_6dba

0000000000006dcf         mov        r15, rdx

                     loc_6dd2:
0000000000006dd2         cmp        r13, r15                                    ; CODE XREF=sub_63e0+2500, sub_63e0+2504, sub_63e0+2514
0000000000006dd5         jbe        loc_6879

0000000000006ddb         mov        byte [r14+r15], 0x0
0000000000006de0         jmp        loc_6879

                     loc_6de5:
0000000000006de5         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000006dea         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000006def         mov        rbp, r11
0000000000006df2         sete       al
0000000000006df5         mov        byte [rsp+0xe8+var_DB], bl
0000000000006df9         jmp        loc_6829

                     loc_6dfe:
0000000000006dfe         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_63e0+1664
0000000000006e02         mov        rdi, rcx
0000000000006e05         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000006e0a         mov        qword [rsp+0xe8+var_80], rax
0000000000006e0f         jmp        loc_6a66

                     loc_6e14:
0000000000006e14         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_63e0+1707
0000000000006e18         mov        rdi, rcx
0000000000006e1b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000006e20         mov        qword [rsp+0xe8+var_88], rax
0000000000006e25         jmp        loc_6a91

                     loc_6e2a:
0000000000006e2a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_6280+16
0000000000006e2f         mov        rbp, r11
0000000000006e32         mov        eax, edx
0000000000006e34         mov        byte [rsp+arg_5], bl
0000000000006e38         jmp        sub_63e0+1097
                        ; endp

                     loc_6e3d:
0000000000006e3d         sub        rsp, 0x8                                    ; CODE XREF=sub_63e0+98
0000000000006e41         mov        r8d, 0x5
0000000000006e47         mov        rcx, r11
0000000000006e4a         push       qword [rsp+0xf0+var_88]
0000000000006e4e         push       qword [rsp+0xf8+var_80]
0000000000006e52         mov        rdi, r14
0000000000006e55         push       qword [rsp+0x100+var_C8]
0000000000006e59         mov        r9d, dword [rsp+0x108+var_70]
0000000000006e61         mov        rdx, qword [rsp+0x108+var_D8]
0000000000006e66         mov        rsi, qword [rsp+0x108+var_98]
0000000000006e6b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000006e70         add        rsp, 0x20
0000000000006e74         mov        r15, rax
0000000000006e77         jmp        loc_6879

                     loc_6e7c:
0000000000006e7c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_63e0+121
0000000000006e81         jmp        loc_6d9c

                     loc_6e86:
0000000000006e86         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_63e0+63
0000000000006e8e         jmp        loc_6829

                     loc_6e93:
0000000000006e93         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_63e0+1197
                        ; endp

                     loc_6e98:
0000000000006e98         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_63e0+2346
0000000000006e9d         jmp        loc_6911

                     loc_6ea2:
0000000000006ea2         mov        rbp, r11                                    ; CODE XREF=sub_63e0+2264
0000000000006ea5         jmp        sub_63e0+1120
                        ; endp

                     loc_6eaa:
0000000000006eaa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_63e0+1332
0000000000006eaf         xor        eax, eax
0000000000006eb1         xor        r12d, r12d
0000000000006eb4         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006ebd         jmp        loc_6464

                     loc_6ec2:
0000000000006ec2         mov        rdx, r13                                    ; CODE XREF=sub_63e0+1264
0000000000006ec5         mov        r13, qword [rsp+arg_48]
0000000000006eca         jmp        loc_64c2

                     loc_6ecf:
0000000000006ecf         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000006ed4         align      32                                          ; End of unwind block (FDE at 0xe328)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000006ee0         push       r15                                         ; Begin of unwind block (FDE at 0xe3a0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000006ee2         push       r14
0000000000006ee4         movsxd     r15, edi
0000000000006ee7         push       r13
0000000000006ee9         push       r12
0000000000006eeb         mov        r14, rdx
0000000000006eee         push       rbp
0000000000006eef         push       rbx
0000000000006ef0         mov        rbp, rcx
0000000000006ef3         sub        rsp, 0x28
0000000000006ef7         mov        qword [rsp+0x58+var_50], rsi
0000000000006efc         call       j___errno_location                          ; __errno_location
0000000000006f01         mov        r13, rax
0000000000006f04         mov        eax, dword [rax]
0000000000006f06         test       r15d, r15d
0000000000006f09         mov        rbx, qword [nslots+8]                       ; 0x210080
0000000000006f10         mov        dword [rsp+0x58+var_40], eax
0000000000006f14         js         loc_7081

0000000000006f1a         cmp        dword [nslots], r15d                        ; nslots
0000000000006f21         jg         loc_6f85

0000000000006f23         cmp        r15d, 0x7fffffff
0000000000006f2a         je         loc_7086

0000000000006f30         lea        r12d, dword [r15+1]
0000000000006f34         lea        rax, qword [slotvec0]                       ; slotvec0
0000000000006f3b         movsxd     rsi, r12d
0000000000006f3e         shl        rsi, 0x4
0000000000006f42         cmp        rbx, rax
0000000000006f45         je         loc_7060

0000000000006f4b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
0000000000006f4e         call       xrealloc                                    ; xrealloc
0000000000006f53         mov        rbx, rax
0000000000006f56         mov        qword [nslots+8], rax                       ; 0x210080

                     loc_6f5d:
0000000000006f5d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000006f64         mov        edx, r12d
0000000000006f67         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000006f69         sub        edx, edi
0000000000006f6b         shl        rdi, 0x4
0000000000006f6f         movsxd     rdx, edx
0000000000006f72         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000006f75         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000006f79         call       j_memset                                    ; memset
0000000000006f7e         mov        dword [nslots], r12d                        ; nslots

                     loc_6f85:
0000000000006f85         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000006f88         shl        r15, 0x4
0000000000006f8c         sub        rsp, 0x8
0000000000006f90         add        rbx, r15
0000000000006f93         lea        r15, qword [rbp+8]
0000000000006f97         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000006f9b         mov        r11, qword [rbx]
0000000000006f9e         mov        r12, qword [rbx+8]
0000000000006fa2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000006fa5         or         eax, 0x1
0000000000006fa8         mov        dword [rsp+0x60+var_3C], eax
0000000000006fac         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000006faf         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000006fb2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000006fb5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000006fb7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000006fba         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000006fbf         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000006fc2         mov        qword [rsp+0x78+var_48], r11
0000000000006fc7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000006fcc         add        rsp, 0x20
0000000000006fd0         mov        r11, qword [rsp+0x58+var_48]
0000000000006fd5         cmp        r11, rax
0000000000006fd8         ja         loc_7041

0000000000006fda         lea        rsi, qword [rax+1]
0000000000006fde         lea        rax, qword [slot0]                          ; slot0
0000000000006fe5         cmp        r12, rax
0000000000006fe8         mov        qword [rbx], rsi
0000000000006feb         je         loc_6fff

0000000000006fed         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000006ff0         mov        qword [rsp+0x58+var_48], rsi
0000000000006ff5         call       j_free                                      ; free
0000000000006ffa         mov        rsi, qword [rsp+0x58+var_48]

                     loc_6fff:
0000000000006fff         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000007002         mov        qword [rsp+0x58+var_48], rsi
0000000000007007         call       xmalloc                                     ; xmalloc
000000000000700c         sub        rsp, 0x8
0000000000007010         mov        qword [rbx+8], rax
0000000000007014         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000007018         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000701b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000701e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000007021         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000007023         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000007028         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000702b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000007030         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000007035         mov        r12, rax
0000000000007038         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000703d         add        rsp, 0x20

                     loc_7041:
0000000000007041         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000007045         mov        dword [r13], eax
0000000000007049         add        rsp, 0x28
000000000000704d         mov        rax, r12
0000000000007050         pop        rbx
0000000000007051         pop        rbp
0000000000007052         pop        r12
0000000000007054         pop        r13
0000000000007056         pop        r14
0000000000007058         pop        r15
000000000000705a         ret
                        ; endp
000000000000705b         align      32

                     loc_7060:
0000000000007060         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000007062         call       xrealloc                                    ; xrealloc
0000000000007067         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000706f         mov        rbx, rax
0000000000007072         mov        qword [nslots+8], rax                       ; 0x210080
0000000000007079         movups     xmmword [rax], xmm0
000000000000707c         jmp        loc_6f5d

                     loc_7081:
0000000000007081         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_7086:
0000000000007086         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_708b:
000000000000708b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xe3a0)
                     clone_quoting_options:
0000000000007090         push       r12                                         ; Begin of unwind block (FDE at 0xe40c)
0000000000007092         push       rbp
0000000000007093         push       rbx
0000000000007094         mov        rbx, rdi
0000000000007097         call       j___errno_location                          ; __errno_location
000000000000709c         mov        r12d, dword [rax]
000000000000709f         mov        rbp, rax
00000000000070a2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000070a9         test       rbx, rbx
00000000000070ac         mov        esi, 0x38
00000000000070b1         cmove      rbx, rax
00000000000070b5         mov        rdi, rbx
00000000000070b8         call       xmemdup                                     ; xmemdup
00000000000070bd         mov        dword [rbp], r12d
00000000000070c1         pop        rbx
00000000000070c2         pop        rbp
00000000000070c3         pop        r12
00000000000070c5         ret
                        ; endp
00000000000070c6         align      16                                          ; End of unwind block (FDE at 0xe40c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
00000000000070d0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe438), default_quoting_options
00000000000070d7         test       rdi, rdi
00000000000070da         cmove      rdi, rax
00000000000070de         mov        eax, dword [rdi]
00000000000070e0         ret
                        ; endp
00000000000070e1         align      16                                          ; End of unwind block (FDE at 0xe438)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
00000000000070f0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe44c), default_quoting_options
00000000000070f7         test       rdi, rdi
00000000000070fa         cmove      rdi, rax
00000000000070fe         mov        dword [rdi], esi
0000000000007100         ret
                        ; endp
0000000000007101         align      16                                          ; End of unwind block (FDE at 0xe44c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000007110         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe460), default_quoting_options
0000000000007117         test       rdi, rdi
000000000000711a         mov        ecx, esi
000000000000711c         cmove      rdi, rax
0000000000007120         mov        eax, esi
0000000000007122         and        ecx, 0x1f
0000000000007125         shr        al, 0x5
0000000000007128         movzx      eax, al
000000000000712b         lea        rdi, qword [rdi+rax*4+8]
0000000000007130         mov        esi, dword [rdi]
0000000000007132         mov        eax, esi
0000000000007134         shr        eax, cl
0000000000007136         xor        edx, eax
0000000000007138         and        eax, 0x1
000000000000713b         and        edx, 0x1
000000000000713e         shl        edx, cl
0000000000007140         xor        edx, esi
0000000000007142         mov        dword [rdi], edx
0000000000007144         ret
                        ; endp
0000000000007145         align      16                                          ; End of unwind block (FDE at 0xe460)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000007150         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe474), default_quoting_options
0000000000007157         test       rdi, rdi
000000000000715a         cmove      rdi, rax
000000000000715e         mov        eax, dword [rdi+4]
0000000000007161         mov        dword [rdi+4], esi
0000000000007164         ret
                        ; endp
0000000000007165         align      16                                          ; End of unwind block (FDE at 0xe474)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000007170         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe488), default_quoting_options
0000000000007177         test       rdi, rdi
000000000000717a         cmove      rdi, rax
000000000000717e         test       rsi, rsi
0000000000007181         mov        dword [rdi], 0xa
0000000000007187         je         loc_7197

0000000000007189         test       rdx, rdx
000000000000718c         je         loc_7197

000000000000718e         mov        qword [rdi+0x28], rsi
0000000000007192         mov        qword [rdi+0x30], rdx
0000000000007196         ret
                        ; endp

                     loc_7197:
0000000000007197         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000719b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000071a0         push       r15                                         ; End of unwind block (FDE at 0xe488), Begin of unwind block (FDE at 0xe49c)
00000000000071a2         push       r14
00000000000071a4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000071ab         push       r13
00000000000071ad         push       r12
00000000000071af         mov        r13, rdi
00000000000071b2         push       rbp
00000000000071b3         push       rbx
00000000000071b4         mov        rbx, r8
00000000000071b7         mov        r14, rsi
00000000000071ba         mov        r15, rdx
00000000000071bd         sub        rsp, 0x18
00000000000071c1         test       r8, r8
00000000000071c4         cmove      rbx, rax
00000000000071c8         mov        qword [rsp+0x48+var_40], rcx
00000000000071cd         call       j___errno_location                          ; __errno_location
00000000000071d2         mov        r12d, dword [rax]
00000000000071d5         mov        rbp, rax
00000000000071d8         lea        rax, qword [rbx+8]
00000000000071dc         sub        rsp, 0x8
00000000000071e0         mov        r9d, dword [rbx+4]
00000000000071e4         push       qword [rbx+0x30]
00000000000071e7         mov        r8d, dword [rbx]
00000000000071ea         push       qword [rbx+0x28]
00000000000071ed         mov        rdx, r15
00000000000071f0         push       rax
00000000000071f1         mov        rcx, qword [rsp+0x68+var_40]
00000000000071f6         mov        rsi, r14
00000000000071f9         mov        rdi, r13
00000000000071fc         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007201         mov        dword [rbp], r12d
0000000000007205         add        rsp, 0x38
0000000000007209         pop        rbx
000000000000720a         pop        rbp
000000000000720b         pop        r12
000000000000720d         pop        r13
000000000000720f         pop        r14
0000000000007211         pop        r15
0000000000007213         ret
                        ; endp
0000000000007214         align      32                                          ; End of unwind block (FDE at 0xe49c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000007220         push       r15                                         ; Begin of unwind block (FDE at 0xe4f0), CODE XREF=quotearg_alloc+5
0000000000007222         push       r14
0000000000007224         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000722b         push       r13
000000000000722d         push       r12
000000000000722f         mov        r12, rdx
0000000000007232         push       rbp
0000000000007233         push       rbx
0000000000007234         mov        rbx, rcx
0000000000007237         mov        r14, rdi
000000000000723a         mov        r15, rsi
000000000000723d         sub        rsp, 0x38
0000000000007241         test       rcx, rcx
0000000000007244         cmove      rbx, rax
0000000000007248         xor        ebp, ebp
000000000000724a         call       j___errno_location                          ; __errno_location
000000000000724f         test       r12, r12
0000000000007252         mov        r13, rax
0000000000007255         mov        eax, dword [rax]
0000000000007257         sete       bpl
000000000000725b         or         ebp, dword [rbx+4]
000000000000725e         lea        r10, qword [rbx+8]
0000000000007262         sub        rsp, 0x8
0000000000007266         mov        r8d, dword [rbx]
0000000000007269         mov        rcx, r15
000000000000726c         mov        dword [rsp+0x70+var_5C], eax
0000000000007270         push       qword [rbx+0x30]
0000000000007273         mov        rdx, r14
0000000000007276         push       qword [rbx+0x28]
0000000000007279         push       r10
000000000000727b         xor        esi, esi
000000000000727d         mov        r9d, ebp
0000000000007280         xor        edi, edi
0000000000007282         mov        qword [rsp+0x88+var_48], r10
0000000000007287         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000728c         lea        rsi, qword [rax+1]
0000000000007290         mov        qword [rsp+0x88+var_40], rax
0000000000007295         add        rsp, 0x20
0000000000007299         mov        rdi, rsi
000000000000729c         mov        qword [rsp+0x68+var_50], rsi
00000000000072a1         call       xmalloc                                     ; xmalloc
00000000000072a6         mov        qword [rsp+0x68+var_58], rax
00000000000072ab         sub        rsp, 0x8
00000000000072af         push       qword [rbx+0x30]
00000000000072b2         push       qword [rbx+0x28]
00000000000072b5         mov        r10, qword [rsp+0x80+var_48]
00000000000072ba         mov        r9d, ebp
00000000000072bd         mov        r8d, dword [rbx]
00000000000072c0         mov        rcx, r15
00000000000072c3         mov        rdx, r14
00000000000072c6         mov        rdi, rax
00000000000072c9         push       r10
00000000000072cb         mov        rsi, qword [rsp+0x88+var_50]
00000000000072d0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000072d5         mov        eax, dword [rsp+0x88+var_5C]
00000000000072d9         add        rsp, 0x20
00000000000072dd         test       r12, r12
00000000000072e0         mov        dword [r13], eax
00000000000072e4         je         loc_72ef

00000000000072e6         mov        r11, qword [rsp+0x68+var_40]
00000000000072eb         mov        qword [r12], r11

                     loc_72ef:
00000000000072ef         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
00000000000072f4         add        rsp, 0x38
00000000000072f8         pop        rbx
00000000000072f9         pop        rbp
00000000000072fa         pop        r12
00000000000072fc         pop        r13
00000000000072fe         pop        r14
0000000000007300         pop        r15
0000000000007302         ret
                        ; endp
0000000000007303         align      16                                          ; End of unwind block (FDE at 0xe4f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000007310         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xe55c)
0000000000007313         xor        edx, edx
0000000000007315         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000731a         align      32                                          ; End of unwind block (FDE at 0xe55c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000007320         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xe570), nslots
0000000000007326         push       r12
0000000000007328         mov        r12, qword [nslots+8]                       ; 0x210080
000000000000732f         push       rbp
0000000000007330         push       rbx
0000000000007331         cmp        eax, 0x1
0000000000007334         jle        loc_7361

0000000000007336         sub        eax, 0x2
0000000000007339         lea        rbx, qword [r12+0x18]
000000000000733e         shl        rax, 0x4
0000000000007342         lea        rbp, qword [r12+rax+0x28]
0000000000007347         nop        word [rax+rax]

                     loc_7350:
0000000000007350         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000007353         add        rbx, 0x10
0000000000007357         call       j_free                                      ; free
000000000000735c         cmp        rbx, rbp
000000000000735f         jne        loc_7350

                     loc_7361:
0000000000007361         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000007366         lea        rbx, qword [slot0]                          ; slot0
000000000000736d         cmp        rdi, rbx
0000000000007370         je         loc_7389

0000000000007372         call       j_free                                      ; free
0000000000007377         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000007382         mov        qword [slotvec0+8], rbx                     ; 0x210098

                     loc_7389:
0000000000007389         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000007390         cmp        r12, rbx
0000000000007393         je         loc_73a4

0000000000007395         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000007398         call       j_free                                      ; free
000000000000739d         mov        qword [nslots+8], rbx                       ; 0x210080

                     loc_73a4:
00000000000073a4         pop        rbx                                         ; CODE XREF=quotearg_free+115
00000000000073a5         mov        dword [nslots], 0x1                         ; nslots
00000000000073af         pop        rbp
00000000000073b0         pop        r12
00000000000073b2         ret
                        ; endp
00000000000073b3         align      64                                          ; End of unwind block (FDE at 0xe570)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
00000000000073c0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe59c), default_quoting_options
00000000000073c7         mov        rdx, 0xffffffffffffffff
00000000000073ce         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000073d3         align      32                                          ; End of unwind block (FDE at 0xe59c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
00000000000073e0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5b0), default_quoting_options
00000000000073e7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000073ec         align      16                                          ; End of unwind block (FDE at 0xe5b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
00000000000073f0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5c4), default_quoting_options
00000000000073f7         mov        rsi, rdi
00000000000073fa         mov        rdx, 0xffffffffffffffff
0000000000007401         xor        edi, edi
0000000000007403         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007408         align      16                                          ; End of unwind block (FDE at 0xe5c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000007410         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5d8), default_quoting_options
0000000000007417         mov        rdx, rsi
000000000000741a         mov        rsi, rdi
000000000000741d         xor        edi, edi
000000000000741f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007424         align      16                                          ; End of unwind block (FDE at 0xe5d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000007430         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe5ec), CODE XREF=argmatch_invalid+64
0000000000007434         mov        rax, rdx
0000000000007437         mov        rdx, qword [fs:0x28]
0000000000007440         mov        qword [rsp+0x48+var_10], rdx
0000000000007445         xor        edx, edx
0000000000007447         cmp        esi, 0xa
000000000000744a         je         loc_74b4

000000000000744c         mov        dword [rsp+0x48+var_48], esi
000000000000744f         mov        rcx, rsp
0000000000007452         mov        rdx, 0xffffffffffffffff
0000000000007459         mov        rsi, rax
000000000000745c         mov        qword [rsp+0x48+var_44], 0x0
0000000000007465         mov        qword [rsp+0x48+var_3C], 0x0
000000000000746e         mov        qword [rsp+0x48+var_34], 0x0
0000000000007477         mov        qword [rsp+0x48+var_2C], 0x0
0000000000007480         mov        qword [rsp+0x48+var_24], 0x0
0000000000007489         mov        qword [rsp+0x48+var_1C], 0x0
0000000000007492         mov        dword [rsp+0x48+var_14], 0x0
000000000000749a         call       quotearg_n_options                          ; quotearg_n_options
000000000000749f         mov        rcx, qword [rsp+0x48+var_10]
00000000000074a4         xor        rcx, qword [fs:0x28]
00000000000074ad         jne        loc_74b9

00000000000074af         add        rsp, 0x48
00000000000074b3         ret
                        ; endp

                     loc_74b4:
00000000000074b4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_74b9:
00000000000074b9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
00000000000074be         align      64                                          ; End of unwind block (FDE at 0xe5ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
00000000000074c0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe608), CODE XREF=quotearg_style_mem+10
00000000000074c4         mov        rax, rdx
00000000000074c7         mov        rdx, rcx
00000000000074ca         mov        rcx, qword [fs:0x28]
00000000000074d3         mov        qword [rsp+0x48+var_10], rcx
00000000000074d8         xor        ecx, ecx
00000000000074da         cmp        esi, 0xa
00000000000074dd         je         loc_7540

00000000000074df         mov        dword [rsp+0x48+var_48], esi
00000000000074e2         mov        rcx, rsp
00000000000074e5         mov        rsi, rax
00000000000074e8         mov        qword [rsp+0x48+var_44], 0x0
00000000000074f1         mov        qword [rsp+0x48+var_3C], 0x0
00000000000074fa         mov        qword [rsp+0x48+var_34], 0x0
0000000000007503         mov        qword [rsp+0x48+var_2C], 0x0
000000000000750c         mov        qword [rsp+0x48+var_24], 0x0
0000000000007515         mov        qword [rsp+0x48+var_1C], 0x0
000000000000751e         mov        dword [rsp+0x48+var_14], 0x0
0000000000007526         call       quotearg_n_options                          ; quotearg_n_options
000000000000752b         mov        rdx, qword [rsp+0x48+var_10]
0000000000007530         xor        rdx, qword [fs:0x28]
0000000000007539         jne        loc_7545

000000000000753b         add        rsp, 0x48
000000000000753f         ret
                        ; endp

                     loc_7540:
0000000000007540         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_7545:
0000000000007545         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
000000000000754a         align      16                                          ; End of unwind block (FDE at 0xe608)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000007550         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xe624)
0000000000007553         mov        esi, edi
0000000000007555         xor        edi, edi
0000000000007557         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
000000000000755c         align      32                                          ; End of unwind block (FDE at 0xe624)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000007560         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xe638)
0000000000007563         mov        rdx, rsi
0000000000007566         mov        esi, edi
0000000000007568         xor        edi, edi
000000000000756a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000756f         align      16                                          ; End of unwind block (FDE at 0xe638)

                     quotearg_char_mem:
0000000000007570         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe64c), CODE XREF=quotearg_char+11
0000000000007574         mov        ecx, edx
0000000000007576         mov        rax, qword [fs:0x28]
000000000000757f         mov        qword [rsp+0x48+var_10], rax
0000000000007584         xor        eax, eax
0000000000007586         mov        rax, qword [qword_210370]                   ; qword_210370
000000000000758d         mov        r8, rsp
0000000000007590         and        ecx, 0x1f
0000000000007593         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000759b         mov        qword [rsp+0x48+var_18], rax
00000000000075a0         mov        eax, edx
00000000000075a2         movaps     xmmword [rsp+0x48+var_48], xmm0
00000000000075a6         shr        al, 0x5
00000000000075a9         movzx      eax, al
00000000000075ac         lea        r9, qword [r8+rax*4+8]
00000000000075b1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x210350
00000000000075b9         movaps     xmmword [rsp+0x48+var_38], xmm0
00000000000075be         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x210360
00000000000075c6         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000075cb         mov        edx, dword [r9]
00000000000075ce         mov        eax, edx
00000000000075d0         shr        eax, cl
00000000000075d2         not        eax
00000000000075d4         and        eax, 0x1
00000000000075d7         shl        eax, cl
00000000000075d9         mov        rcx, r8
00000000000075dc         xor        eax, edx
00000000000075de         mov        rdx, rsi
00000000000075e1         mov        rsi, rdi
00000000000075e4         mov        dword [r9], eax
00000000000075e7         xor        edi, edi
00000000000075e9         call       quotearg_n_options                          ; quotearg_n_options
00000000000075ee         mov        rsi, qword [rsp+0x48+var_10]
00000000000075f3         xor        rsi, qword [fs:0x28]
00000000000075fc         jne        loc_7603

00000000000075fe         add        rsp, 0x48
0000000000007602         ret
                        ; endp

                     loc_7603:
0000000000007603         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000007608         align      16                                          ; End of unwind block (FDE at 0xe64c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000007610         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xe668)
0000000000007614         mov        rsi, 0xffffffffffffffff
000000000000761b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000007620         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xe668), Begin of unwind block (FDE at 0xe67c), CODE XREF=close_stdout+101
0000000000007625         mov        rsi, 0xffffffffffffffff
000000000000762c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000007631         align      64                                          ; End of unwind block (FDE at 0xe67c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000007640         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xe690)
0000000000007645         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000764a         align      16                                          ; End of unwind block (FDE at 0xe690)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000007650         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe6a4), CODE XREF=check_and_close+158, check_and_close+294, open_next_file+206, skip+232
0000000000007654         mov        rax, rdx
0000000000007657         mov        rdx, qword [fs:0x28]
0000000000007660         mov        qword [rsp+0x48+var_10], rdx
0000000000007665         xor        edx, edx
0000000000007667         cmp        esi, 0xa
000000000000766a         je         loc_76d4

000000000000766c         mov        dword [rsp+0x48+var_48], esi
000000000000766f         mov        rcx, rsp
0000000000007672         mov        rdx, 0xffffffffffffffff
0000000000007679         mov        rsi, rax
000000000000767c         mov        qword [rsp+0x48+var_44], 0x0
0000000000007685         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000768e         mov        qword [rsp+0x48+var_34], 0x0
0000000000007697         mov        qword [rsp+0x48+var_2C], 0x0
00000000000076a0         mov        qword [rsp+0x48+var_24], 0x0
00000000000076a9         mov        qword [rsp+0x48+var_1C], 0x0
00000000000076b2         mov        dword [rsp+0x48+var_14], 0x0
00000000000076ba         call       quotearg_n_options                          ; quotearg_n_options
00000000000076bf         mov        rcx, qword [rsp+0x48+var_10]
00000000000076c4         xor        rcx, qword [fs:0x28]
00000000000076cd         jne        loc_76d9

00000000000076cf         add        rsp, 0x48
00000000000076d3         ret
                        ; endp

                     loc_76d4:
00000000000076d4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_76d9:
00000000000076d9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
00000000000076de         align      32                                          ; End of unwind block (FDE at 0xe6a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
00000000000076e0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe6c0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
00000000000076e4         mov        r9, rcx
00000000000076e7         mov        rcx, qword [qword_210370]                   ; qword_210370
00000000000076ee         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
00000000000076f6         mov        rax, qword [fs:0x28]
00000000000076ff         mov        qword [rsp+0x48+var_10], rax
0000000000007704         xor        eax, eax
0000000000007706         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000770a         test       rsi, rsi
000000000000770d         mov        qword [rsp+0x48+var_18], rcx
0000000000007712         mov        dword [rsp+0x48+var_48], 0xa
0000000000007719         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x210350
0000000000007721         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000007726         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x210360
000000000000772e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000007733         je         loc_7767

0000000000007735         test       rdx, rdx
0000000000007738         je         loc_7767

000000000000773a         mov        qword [rsp+0x48+var_20], rsi
000000000000773f         mov        qword [rsp+0x48+var_18], rdx
0000000000007744         mov        rcx, rsp
0000000000007747         mov        rdx, r8
000000000000774a         mov        rsi, r9
000000000000774d         call       quotearg_n_options                          ; quotearg_n_options
0000000000007752         mov        rdi, qword [rsp+0x48+var_10]
0000000000007757         xor        rdi, qword [fs:0x28]
0000000000007760         jne        loc_776c

0000000000007762         add        rsp, 0x48
0000000000007766         ret
                        ; endp

                     loc_7767:
0000000000007767         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_776c:
000000000000776c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000007771         align      128                                         ; End of unwind block (FDE at 0xe6c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000007780         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xe6dc)
0000000000007787         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000778c         align      16                                          ; End of unwind block (FDE at 0xe6dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000007790         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xe6f0)
0000000000007793         mov        r8, 0xffffffffffffffff
000000000000779a         mov        rdx, rsi
000000000000779d         mov        rsi, rdi
00000000000077a0         xor        edi, edi
00000000000077a2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
00000000000077a7         align      16                                          ; End of unwind block (FDE at 0xe6f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
00000000000077b0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xe704)
00000000000077b3         mov        rcx, rdx
00000000000077b6         mov        rdx, rsi
00000000000077b9         mov        rsi, rdi
00000000000077bc         xor        edi, edi
00000000000077be         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
00000000000077c3         align      16                                          ; End of unwind block (FDE at 0xe704)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
00000000000077d0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe718), quote_quoting_options
00000000000077d7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000077dc         align      32                                          ; End of unwind block (FDE at 0xe718)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
00000000000077e0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe72c), quote_quoting_options
00000000000077e7         mov        rdx, rsi
00000000000077ea         mov        rsi, rdi
00000000000077ed         xor        edi, edi
00000000000077ef         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000077f4         align      2048                                        ; End of unwind block (FDE at 0xe72c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000007800         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe740), quote_quoting_options, CODE XREF=argmatch_invalid+46
0000000000007807         mov        rdx, 0xffffffffffffffff
000000000000780e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007813         align      32                                          ; End of unwind block (FDE at 0xe740)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000007820         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe754), quote_quoting_options, CODE XREF=main+2324, decode_format_string+301, decode_format_string+668, sub_3dfe+464, sub_3dfe+934, argmatch_valid+90, argmatch_valid+169
0000000000007827         mov        rsi, rdi
000000000000782a         mov        rdx, 0xffffffffffffffff
0000000000007831         xor        edi, edi
0000000000007833         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007838         align      64                                          ; End of unwind block (FDE at 0xe754)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000007840         push       r15                                         ; Begin of unwind block (FDE at 0xe76c), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000007842         push       r14
0000000000007844         push       r13
0000000000007846         push       r12
0000000000007848         mov        r12, r9
000000000000784b         push       rbp
000000000000784c         push       rbx
000000000000784d         mov        rbp, rdi
0000000000007850         mov        rbx, r8
0000000000007853         sub        rsp, 0x28
0000000000007857         test       rsi, rsi
000000000000785a         je         loc_7978

0000000000007860         mov        r8, rdx
0000000000007863         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000786a         mov        r9, rcx
000000000000786d         xor        eax, eax
000000000000786f         mov        rcx, rsi
0000000000007872         mov        esi, 0x1
0000000000007877         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_787c:
000000000000787c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xcd7b, CODE XREF=version_etc_arn+337
0000000000007883         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007885         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000788a         call       j_dcgettext                                 ; dcgettext
000000000000788f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000007896         mov        rcx, rax
0000000000007899         mov        r8d, 0x7e3
000000000000789f         mov        esi, 0x1
00000000000078a4         mov        rdi, rbp
00000000000078a7         xor        eax, eax
00000000000078a9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000078ae         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
00000000000078b5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000078b7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000078bc         call       j_dcgettext                                 ; dcgettext
00000000000078c1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000078c4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000078c7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000078cc         cmp        r12, 0x9
00000000000078d0         ja         loc_7c10

00000000000078d6         lea        rdx, qword [switch_table_d064]              ; switch_table_d064
00000000000078dd         movsxd     rax, dword [rdx+r12*4]
00000000000078e1         add        rax, rdx
00000000000078e4         jmp        rax                                         ; switch statement using table at 0xd064, with 10 cases, 0x78f0,0x7966,0x79a0,0x79f8,0x7a38,0x7a80,0x7ad0,0x7b28,0x7b58,0x7bc0
00000000000078e6         align      16

                     loc_78f0:
00000000000078f0         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
00000000000078f4         mov        rax, qword [rbx+0x10]
00000000000078f8         lea        rsi, qword [aWrittenBySSSns_cf78]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
00000000000078ff         mov        r8, qword [rbx+8]
0000000000007903         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007908         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000790a         mov        r13, qword [rbx+0x30]
000000000000790e         mov        r12, qword [rbx+0x28]
0000000000007912         mov        qword [rsp+0x58+var_48], r9
0000000000007917         mov        r15, qword [rbx+0x20]
000000000000791b         mov        r14, qword [rbx+0x18]
000000000000791f         mov        qword [rsp+0x58+var_58], rax
0000000000007923         mov        qword [rsp+0x58+var_50], r8
0000000000007928         mov        rbx, qword [rbx]
000000000000792b         call       j_dcgettext                                 ; dcgettext
0000000000007930         sub        rsp, 0x8

                     loc_7934:
0000000000007934         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000007939         mov        rdx, rax
000000000000793c         mov        rcx, rbx
000000000000793f         mov        esi, 0x1
0000000000007944         mov        rdi, rbp
0000000000007947         xor        eax, eax
0000000000007949         push       r9
000000000000794b         push       r13
000000000000794d         push       r12
000000000000794f         push       r15
0000000000007951         push       r14
0000000000007953         mov        r9, qword [rsp+0x88+var_58]
0000000000007958         mov        r8, qword [rsp+0x88+var_50]
000000000000795d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007962         add        rsp, 0x30

                     loc_7966:
0000000000007966         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000796a         pop        rbx
000000000000796b         pop        rbp
000000000000796c         pop        r12
000000000000796e         pop        r13
0000000000007970         pop        r14
0000000000007972         pop        r15
0000000000007974         ret
                        ; endp
0000000000007975         align      8

                     loc_7978:
0000000000007978         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000797b         mov        rcx, rdx
000000000000797e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000007985         mov        esi, 0x1
000000000000798a         xor        eax, eax
000000000000798c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007991         jmp        loc_787c
0000000000007996         align      32

                     loc_79a0:
00000000000079a0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000079a4         mov        r9, qword [rbx+0x38]
00000000000079a8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000079af         mov        rax, qword [rbx+0x10]
00000000000079b3         mov        r8, qword [rbx+8]
00000000000079b7         mov        edx, 0x5
00000000000079bc         mov        r13, qword [rbx+0x30]
00000000000079c0         mov        r12, qword [rbx+0x28]
00000000000079c4         mov        r15, qword [rbx+0x20]
00000000000079c8         mov        r14, qword [rbx+0x18]
00000000000079cc         mov        rbx, qword [rbx]
00000000000079cf         mov        qword [rsp+0x58+var_40], r10
00000000000079d4         mov        qword [rsp+0x58+var_48], r9
00000000000079d9         mov        qword [rsp+0x58+var_58], rax
00000000000079dd         mov        qword [rsp+0x58+var_50], r8

                     loc_79e2:
00000000000079e2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
00000000000079e4         call       j_dcgettext                                 ; dcgettext
00000000000079e9         mov        r10, qword [rsp+0x58+var_40]
00000000000079ee         push       r10
00000000000079f0         jmp        loc_7934
00000000000079f5         align      8

                     loc_79f8:
00000000000079f8         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
00000000000079fb         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000007a02         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a07         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a09         call       j_dcgettext                                 ; dcgettext
0000000000007a0e         add        rsp, 0x28
0000000000007a12         mov        rcx, rbx
0000000000007a15         mov        rdi, rbp
0000000000007a18         pop        rbx
0000000000007a19         pop        rbp
0000000000007a1a         pop        r12
0000000000007a1c         pop        r13
0000000000007a1e         pop        r14
0000000000007a20         pop        r15
0000000000007a22         mov        rdx, rax
0000000000007a25         mov        esi, 0x1
0000000000007a2a         xor        eax, eax
0000000000007a2c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007a31         align      8

                     loc_7a38:
0000000000007a38         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
0000000000007a3c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000007a43         mov        rbx, qword [rbx]
0000000000007a46         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a4b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a4d         call       j_dcgettext                                 ; dcgettext
0000000000007a52         add        rsp, 0x28
0000000000007a56         mov        r8, r12
0000000000007a59         mov        rcx, rbx
0000000000007a5c         mov        rdi, rbp
0000000000007a5f         mov        rdx, rax
0000000000007a62         mov        esi, 0x1
0000000000007a67         pop        rbx
0000000000007a68         pop        rbp
0000000000007a69         pop        r12
0000000000007a6b         pop        r13
0000000000007a6d         pop        r14
0000000000007a6f         pop        r15
0000000000007a71         xor        eax, eax
0000000000007a73         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007a78         align      128

                     loc_7a80:
0000000000007a80         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000007a84         mov        r12, qword [rbx+8]
0000000000007a88         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
0000000000007a8f         mov        rbx, qword [rbx]
0000000000007a92         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a97         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a99         call       j_dcgettext                                 ; dcgettext
0000000000007a9e         add        rsp, 0x28
0000000000007aa2         mov        r9, r13
0000000000007aa5         mov        r8, r12
0000000000007aa8         mov        rcx, rbx
0000000000007aab         mov        rdi, rbp
0000000000007aae         mov        rdx, rax
0000000000007ab1         pop        rbx
0000000000007ab2         pop        rbp
0000000000007ab3         pop        r12
0000000000007ab5         pop        r13
0000000000007ab7         pop        r14
0000000000007ab9         pop        r15
0000000000007abb         mov        esi, 0x1
0000000000007ac0         xor        eax, eax
0000000000007ac2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007ac7         align      16

                     loc_7ad0:
0000000000007ad0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000007ad7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007adc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007ade         mov        r14, qword [rbx+0x18]
0000000000007ae2         mov        r13, qword [rbx+0x10]
0000000000007ae6         mov        r12, qword [rbx+8]
0000000000007aea         mov        rbx, qword [rbx]
0000000000007aed         call       j_dcgettext                                 ; dcgettext
0000000000007af2         sub        rsp, 0x8

                     loc_7af6:
0000000000007af6         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000007af8         mov        rdx, rax
0000000000007afb         mov        r9, r13
0000000000007afe         mov        r8, r12
0000000000007b01         mov        rcx, rbx
0000000000007b04         mov        rdi, rbp
0000000000007b07         mov        esi, 0x1
0000000000007b0c         xor        eax, eax
0000000000007b0e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007b13         pop        rax
0000000000007b14         pop        rdx
0000000000007b15         add        rsp, 0x28
0000000000007b19         pop        rbx
0000000000007b1a         pop        rbp
0000000000007b1b         pop        r12
0000000000007b1d         pop        r13
0000000000007b1f         pop        r14
0000000000007b21         pop        r15
0000000000007b23         ret
                        ; endp
0000000000007b24         align      8

                     loc_7b28:
0000000000007b28         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
0000000000007b2c         lea        rsi, qword [aWrittenBySSSns_cef8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000007b33         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007b38         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007b3a         mov        r14, qword [rbx+0x18]
0000000000007b3e         mov        r13, qword [rbx+0x10]
0000000000007b42         mov        r12, qword [rbx+8]
0000000000007b46         mov        rbx, qword [rbx]
0000000000007b49         call       j_dcgettext                                 ; dcgettext
0000000000007b4e         push       r15
0000000000007b50         jmp        loc_7af6
0000000000007b52         align      8

                     loc_7b58:
0000000000007b58         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
0000000000007b5c         mov        r12, qword [rbx+0x28]
0000000000007b60         lea        rsi, qword [aWrittenBySSSns_cf20]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000007b67         mov        r15, qword [rbx+0x20]
0000000000007b6b         mov        r14, qword [rbx+0x18]
0000000000007b6f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007b74         mov        r13, qword [rbx+0x10]
0000000000007b78         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007b7a         mov        rbx, qword [rbx]
0000000000007b7d         mov        qword [rsp+0x58+var_58], r8
0000000000007b81         call       j_dcgettext                                 ; dcgettext
0000000000007b86         sub        rsp, 0x8
0000000000007b8a         mov        r9, r13
0000000000007b8d         push       r12
0000000000007b8f         push       r15
0000000000007b91         push       r14

                     loc_7b93:
0000000000007b93         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000007b98         mov        rcx, rbx
0000000000007b9b         mov        rdx, rax
0000000000007b9e         mov        rdi, rbp
0000000000007ba1         mov        esi, 0x1
0000000000007ba6         xor        eax, eax
0000000000007ba8         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007bad         add        rsp, 0x20
0000000000007bb1         add        rsp, 0x28
0000000000007bb5         pop        rbx
0000000000007bb6         pop        rbp
0000000000007bb7         pop        r12
0000000000007bb9         pop        r13
0000000000007bbb         pop        r14
0000000000007bbd         pop        r15
0000000000007bbf         ret
                        ; endp

                     loc_7bc0:
0000000000007bc0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000007bc4         mov        r13, qword [rbx+0x30]
0000000000007bc8         lea        rsi, qword [aWrittenBySSSns_cf48]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
0000000000007bcf         mov        r12, qword [rbx+0x28]
0000000000007bd3         mov        r15, qword [rbx+0x20]
0000000000007bd7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007bdc         mov        r14, qword [rbx+0x18]
0000000000007be0         mov        r8, qword [rbx+8]
0000000000007be4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007be6         mov        qword [rsp+0x58+var_50], r9
0000000000007beb         mov        rbx, qword [rbx]
0000000000007bee         mov        qword [rsp+0x58+var_58], r8
0000000000007bf2         call       j_dcgettext                                 ; dcgettext
0000000000007bf7         push       r13
0000000000007bf9         push       r12
0000000000007bfb         push       r15
0000000000007bfd         push       r14
0000000000007bff         mov        r9, qword [rsp+0x78+var_50]
0000000000007c04         jmp        loc_7b93
0000000000007c06         align      16

                     loc_7c10:
0000000000007c10         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000007c14         mov        r9, qword [rbx+0x38]
0000000000007c18         mov        edx, 0x5
0000000000007c1d         mov        rax, qword [rbx+0x10]
0000000000007c21         mov        r8, qword [rbx+8]
0000000000007c25         lea        rsi, qword [aWrittenBySSSns+56]             ; 0xcfe0
0000000000007c2c         mov        r13, qword [rbx+0x30]
0000000000007c30         mov        r12, qword [rbx+0x28]
0000000000007c34         mov        r15, qword [rbx+0x20]
0000000000007c38         mov        r14, qword [rbx+0x18]
0000000000007c3c         mov        qword [rsp+0x58+var_40], r10
0000000000007c41         mov        qword [rsp+0x58+var_48], r9
0000000000007c46         mov        qword [rsp+0x58+var_58], rax
0000000000007c4a         mov        qword [rsp+0x58+var_50], r8
0000000000007c4f         mov        rbx, qword [rbx]
0000000000007c52         jmp        loc_79e2
0000000000007c57         align      32                                          ; End of unwind block (FDE at 0xe76c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000007c60         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xe880)
0000000000007c63         cmp        qword [r8], 0x0
0000000000007c67         je         j_version_etc_arn                           ; version_etc_arn

0000000000007c69         nop        dword [rax]

                     loc_7c70:
0000000000007c70         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000007c74         cmp        qword [r8+r9*8], 0x0
0000000000007c79         jne        loc_7c70

                     j_version_etc_arn:        // version_etc_arn
0000000000007c7b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000007c80         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xe880), Begin of unwind block (FDE at 0xe894)
0000000000007c84         mov        r10, r8
0000000000007c87         xor        r9d, r9d
0000000000007c8a         mov        rax, qword [fs:0x28]
0000000000007c93         mov        qword [rsp+0x68+var_10], rax
0000000000007c98         xor        eax, eax
0000000000007c9a         mov        r8, rsp
0000000000007c9d         nop        dword [rax]

                     loc_7ca0:
0000000000007ca0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000007ca3         cmp        eax, 0x2f
0000000000007ca6         ja         loc_7cea

0000000000007ca8         mov        r11d, eax
0000000000007cab         add        r11, qword [r10+0x10]
0000000000007caf         add        eax, 0x8
0000000000007cb2         mov        dword [r10], eax

                     loc_7cb5:
0000000000007cb5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000007cb8         test       rax, rax
0000000000007cbb         mov        qword [r8+r9*8], rax
0000000000007cbf         je         loc_7ccb

0000000000007cc1         add        r9, 0x1
0000000000007cc5         cmp        r9, 0xa
0000000000007cc9         jne        loc_7ca0

                     loc_7ccb:
0000000000007ccb         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000007cd0         mov        rax, qword [rsp+0x68+var_10]
0000000000007cd5         xor        rax, qword [fs:0x28]
0000000000007cde         jne        loc_7ce5

0000000000007ce0         add        rsp, 0x68
0000000000007ce4         ret
                        ; endp

                     loc_7ce5:
0000000000007ce5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_7cea:
0000000000007cea         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000007cee         lea        rax, qword [r11+8]
0000000000007cf2         mov        qword [r10+8], rax
0000000000007cf6         jmp        loc_7cb5
0000000000007cf8         align      256                                         ; End of unwind block (FDE at 0xe894)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000007d00         push       rbp                                         ; Begin of unwind block (FDE at 0xe8b0), CODE XREF=main+1360
0000000000007d01         push       rbx
0000000000007d02         mov        r10d, 0x20
0000000000007d08         xor        r11d, r11d
0000000000007d0b         sub        rsp, 0xb8
0000000000007d12         mov        rax, qword [fs:0x28]
0000000000007d1b         mov        qword [rsp+0xc8+var_50], rax
0000000000007d20         xor        eax, eax
0000000000007d22         lea        rax, qword [rsp+0xc8+arg_0]
0000000000007d2a         mov        qword [rsp+0xc8+var_28], r8
0000000000007d32         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000007d3a         lea        r8, qword [rsp+0xc8+var_A8]
0000000000007d3f         mov        qword [rsp+0xc8+var_20], r9
0000000000007d47         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000007d4f         mov        qword [rsp+0xc8+var_B8], rax
0000000000007d54         lea        rax, qword [rsp+0xc8+var_48]
0000000000007d5c         xor        r9d, r9d
0000000000007d5f         mov        qword [rsp+0xc8+var_B0], rax
0000000000007d64         mov        rbp, rax
0000000000007d67         nop        word [rax+rax]

                     loc_7d70:
0000000000007d70         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000007d74         ja         loc_7dcc

0000000000007d76         mov        eax, r10d
0000000000007d79         mov        r11d, 0x1
0000000000007d7f         add        r10d, 0x8
0000000000007d83         add        rax, rbp

                     loc_7d86:
0000000000007d86         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000007d89         test       rax, rax
0000000000007d8c         mov        qword [r8+r9*8], rax
0000000000007d90         je         loc_7d9c

0000000000007d92         add        r9, 0x1
0000000000007d96         cmp        r9, 0xa
0000000000007d9a         jne        loc_7d70

                     loc_7d9c:
0000000000007d9c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000007d9f         jne        loc_7dc5

                     loc_7da1:
0000000000007da1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000007da6         mov        rax, qword [rsp+0xc8+var_50]
0000000000007dab         xor        rax, qword [fs:0x28]
0000000000007db4         jne        loc_7dc0

0000000000007db6         add        rsp, 0xb8
0000000000007dbd         pop        rbx
0000000000007dbe         pop        rbp
0000000000007dbf         ret
                        ; endp

                     loc_7dc0:
0000000000007dc0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_7dc5:
0000000000007dc5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000007dca         jmp        loc_7da1

                     loc_7dcc:
0000000000007dcc         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000007dcf         add        rbx, 0x8
0000000000007dd3         jmp        loc_7d86
0000000000007dd5         align      32                                          ; End of unwind block (FDE at 0xe8b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000007de0         push       rbx                                         ; Begin of unwind block (FDE at 0xe8dc)
0000000000007de1         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000007de8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007ded         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007def         call       j_dcgettext                                 ; dcgettext
0000000000007df4         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000007dfb         mov        rsi, rax
0000000000007dfe         mov        edi, 0x1
0000000000007e03         xor        eax, eax
0000000000007e05         call       j___printf_chk                              ; __printf_chk
0000000000007e0a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000007e11         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007e16         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007e18         call       j_dcgettext                                 ; dcgettext
0000000000007e1d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000007e24         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xae36
0000000000007e2b         mov        rsi, rax
0000000000007e2e         mov        edi, 0x1
0000000000007e33         xor        eax, eax
0000000000007e35         call       j___printf_chk                              ; __printf_chk
0000000000007e3a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000007e41         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000007e48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007e4a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007e4f         call       j_dcgettext                                 ; dcgettext
0000000000007e54         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000007e57         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000007e5a         pop        rbx
0000000000007e5b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000007e60         push       rbx                                         ; End of unwind block (FDE at 0xe8dc), Begin of unwind block (FDE at 0xe8fc), CODE XREF=main+1971, main+2622, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000007e61         mov        rbx, rdi
0000000000007e64         call       j_malloc                                    ; malloc
0000000000007e69         test       rax, rax
0000000000007e6c         jne        loc_7e73

0000000000007e6e         test       rbx, rbx
0000000000007e71         jne        loc_7e75

                     loc_7e73:
0000000000007e73         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000007e74         ret
                        ; endp

                     loc_7e75:
0000000000007e75         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7e7a:
0000000000007e7a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xe8fc)
                     xnmalloc:
0000000000007e80         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xe918)
0000000000007e83         mul        rsi
0000000000007e86         mov        rdi, rax
0000000000007e89         seto       al
0000000000007e8c         test       rdi, rdi
0000000000007e8f         js         loc_7e9b

0000000000007e91         movzx      eax, al
0000000000007e94         test       rax, rax
0000000000007e97         jne        loc_7e9b

0000000000007e99         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_7e9b:
0000000000007e9b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000007e9f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7ea4:
0000000000007ea4         nop                                                    ; End of unwind block (FDE at 0xe918)
0000000000007ea6         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000007eb0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xe92c)
                        ; endp
0000000000007eb2         align      64                                          ; End of unwind block (FDE at 0xe92c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000007ec0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xe940), CODE XREF=decode_format_string+782, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000007ec3         push       rbx
0000000000007ec4         mov        rbx, rsi
0000000000007ec7         jne        loc_7ece

0000000000007ec9         test       rdi, rdi
0000000000007ecc         jne        loc_7ee8

                     loc_7ece:
0000000000007ece         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000007ed1         call       j_realloc                                   ; realloc
0000000000007ed6         test       rax, rax
0000000000007ed9         jne        loc_7ee0

0000000000007edb         test       rbx, rbx
0000000000007ede         jne        loc_7ef1

                     loc_7ee0:
0000000000007ee0         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000007ee1         ret
                        ; endp
0000000000007ee2         align      8

                     loc_7ee8:
0000000000007ee8         call       j_free                                      ; free, CODE XREF=xrealloc+12
0000000000007eed         xor        eax, eax
0000000000007eef         pop        rbx
0000000000007ef0         ret
                        ; endp

                     loc_7ef1:
0000000000007ef1         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7ef6:
0000000000007ef6         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xe940)
                     xnrealloc:
0000000000007f00         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xe964)
0000000000007f03         mul        rdx
0000000000007f06         mov        rsi, rax
0000000000007f09         seto       al
0000000000007f0c         test       rsi, rsi
0000000000007f0f         js         loc_7f1b

0000000000007f11         movzx      eax, al
0000000000007f14         test       rax, rax
0000000000007f17         jne        loc_7f1b

0000000000007f19         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_7f1b:
0000000000007f1b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000007f1f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7f24:
0000000000007f24         nop                                                    ; End of unwind block (FDE at 0xe964)
0000000000007f26         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000007f30         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xe978)
0000000000007f33         mov        r9, rdx
0000000000007f36         mov        rcx, qword [rsi]
0000000000007f39         je         loc_7f70

0000000000007f3b         xor        edx, edx
0000000000007f3d         movabs     rax, 0x5555555555555554
0000000000007f47         div        r9
0000000000007f4a         cmp        rax, rcx
0000000000007f4d         jbe        loc_7f8b

0000000000007f4f         mov        rax, rcx
0000000000007f52         shr        rax, 0x1
0000000000007f55         lea        rcx, qword [rax+rcx+1]

                     loc_7f5a:
0000000000007f5a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000007f5d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000007f61         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000007f64         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000007f69         align      16

                     loc_7f70:
0000000000007f70         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000007f73         je         loc_7f98

                     loc_7f75:
0000000000007f75         mov        rax, rcx                                    ; CODE XREF=sub_7f94+28
0000000000007f78         mul        r9
0000000000007f7b         seto       dl
0000000000007f7e         test       rax, rax
0000000000007f81         movzx      edx, dl
0000000000007f84         js         loc_7f8b

0000000000007f86         test       rdx, rdx
0000000000007f89         je         loc_7f5a

                     loc_7f8b:
0000000000007f8b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000007f8f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7f94:
0000000000007f94         nop        dword [rax]
                        ; endp

                     loc_7f98:
0000000000007f98         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000007f9a         mov        eax, 0x80
0000000000007f9f         xor        r8d, r8d
0000000000007fa2         div        r9
0000000000007fa5         test       rax, rax
0000000000007fa8         sete       r8b
0000000000007fac         lea        rcx, qword [r8+rax]
0000000000007fb0         jmp        loc_7f75
0000000000007fb2         align      64                                          ; End of unwind block (FDE at 0xe978)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000007fc0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xe990), CODE XREF=main+2986
0000000000007fc3         mov        rax, qword [rsi]
0000000000007fc6         je         loc_7ff0

0000000000007fc8         movabs     rdx, 0x5555555555555553
0000000000007fd2         cmp        rax, rdx
0000000000007fd5         ja         loc_8001

0000000000007fd7         mov        rdx, rax
0000000000007fda         shr        rdx, 0x1
0000000000007fdd         lea        rax, qword [rdx+rax+1]

                     loc_7fe2:
0000000000007fe2         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000007fe5         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000007fe8         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000007fed         align      16

                     loc_7ff0:
0000000000007ff0         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000007ff3         mov        edx, 0x80
0000000000007ff8         cmove      rax, rdx
0000000000007ffc         test       rax, rax
0000000000007fff         jns        loc_7fe2

                     loc_8001:
0000000000008001         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000008005         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_800a:
000000000000800a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xe990)
                     xzalloc:
0000000000008010         push       rbx                                         ; Begin of unwind block (FDE at 0xe9a8)
0000000000008011         mov        rbx, rdi
0000000000008014         call       xmalloc                                     ; xmalloc
0000000000008019         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000801c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000801e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000008021         pop        rbx
0000000000008022         jmp        j_memset                                    ; memset
                        ; endp
0000000000008027         align      16                                          ; End of unwind block (FDE at 0xe9a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000008030         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xe9c4)
0000000000008033         sub        rsp, 0x8
0000000000008037         mul        rsi
000000000000803a         seto       dl
000000000000803d         test       rax, rax
0000000000008040         js         loc_8059

0000000000008042         movzx      edx, dl
0000000000008045         test       rdx, rdx
0000000000008048         jne        loc_8059

000000000000804a         call       j_calloc                                    ; calloc
000000000000804f         test       rax, rax
0000000000008052         je         loc_8059

0000000000008054         add        rsp, 0x8
0000000000008058         ret
                        ; endp

                     loc_8059:
0000000000008059         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_805e:
000000000000805e         nop                                                    ; End of unwind block (FDE at 0xe9c4)
                        ; endp

                     xmemdup:
0000000000008060         push       rbp                                         ; Begin of unwind block (FDE at 0xe9e0), CODE XREF=clone_quoting_options+40, xstrdup+17
0000000000008061         push       rbx
0000000000008062         mov        rbp, rdi
0000000000008065         mov        rdi, rsi
0000000000008068         mov        rbx, rsi
000000000000806b         sub        rsp, 0x8
000000000000806f         call       xmalloc                                     ; xmalloc
0000000000008074         add        rsp, 0x8
0000000000008078         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000807b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000807e         pop        rbx
000000000000807f         pop        rbp
0000000000008080         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000008083         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000008088         align      16                                          ; End of unwind block (FDE at 0xe9e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000008090         push       rbx                                         ; Begin of unwind block (FDE at 0xea08)
0000000000008091         mov        rbx, rdi
0000000000008094         call       j_strlen                                    ; strlen
0000000000008099         mov        rdi, rbx
000000000000809c         lea        rsi, qword [rax+1]
00000000000080a0         pop        rbx
00000000000080a1         jmp        xmemdup                                     ; xmemdup
00000000000080a3         align      16                                          ; End of unwind block (FDE at 0xea08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
00000000000080b0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xea24), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+4346, decode_format_string+857, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
00000000000080b7         sub        rsp, 0x8
00000000000080bb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000080c0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000080c2         call       j_dcgettext                                 ; dcgettext
00000000000080c7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
00000000000080cd         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc7e0
00000000000080d4         mov        rcx, rax
00000000000080d7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000080d9         xor        eax, eax
00000000000080db         call       j_error                                     ; error
00000000000080e0         call       j_abort                                     ; abort
                        ; endp
00000000000080e5         align      16                                          ; End of unwind block (FDE at 0xea24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xvprintf:
00000000000080f0         push       rbp                                         ; Begin of unwind block (FDE at 0xea3c), CODE XREF=xprintf+148
00000000000080f1         push       rbx
00000000000080f2         sub        rsp, 0x8
00000000000080f6         call       rpl_vprintf                                 ; rpl_vprintf
00000000000080fb         test       eax, eax
00000000000080fd         mov        ebx, eax
00000000000080ff         js         loc_8110

                     loc_8101:
0000000000008101         add        rsp, 0x8                                    ; CODE XREF=xvprintf+46, xvprintf+93
0000000000008105         mov        eax, ebx
0000000000008107         pop        rbx
0000000000008108         pop        rbp
0000000000008109         ret
                        ; endp
000000000000810a         align      16

                     loc_8110:
0000000000008110         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_ferror, stdout@@GLIBC_2.2.5, CODE XREF=xvprintf+15
0000000000008117         call       j_ferror                                    ; ferror
000000000000811c         test       eax, eax
000000000000811e         jne        loc_8101

0000000000008120         lea        rsi, qword [aCannotPerformF]                ; argument "msgid" for method j_dcgettext, "cannot perform formatted output"
0000000000008127         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008129         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000812e         call       j_dcgettext                                 ; dcgettext
0000000000008133         mov        rbp, rax
0000000000008136         call       j___errno_location                          ; __errno_location
000000000000813b         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000008141         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000008143         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000008146         xor        eax, eax
0000000000008148         call       j_error                                     ; error
000000000000814d         jmp        loc_8101
000000000000814f         align      16                                          ; End of unwind block (FDE at 0xea3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     xprintf:
0000000000008150         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0xea68), CODE XREF=print_named_ascii+129, print_long_long+102, print_long+102, print_int+102, print_short+112, print_s_short+112, print_char+99, print_s_char+99, print_long_double+134, print_double+131, print_float+151
0000000000008157         test       al, al
0000000000008159         mov        qword [rsp+0xd8+var_B0], rsi
000000000000815e         mov        qword [rsp+0xd8+var_A8], rdx
0000000000008163         mov        qword [rsp+0xd8+var_A0], rcx
0000000000008168         mov        qword [rsp+0xd8+var_98], r8
000000000000816d         mov        qword [rsp+0xd8+var_90], r9
0000000000008172         je         loc_81ab

0000000000008174         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000008179         movaps     xmmword [rsp+0xd8+var_78], xmm1
000000000000817e         movaps     xmmword [rsp+0xd8+var_68], xmm2
0000000000008183         movaps     xmmword [rsp+0xd8+var_58], xmm3
000000000000818b         movaps     xmmword [rsp+0xd8+var_48], xmm4
0000000000008193         movaps     xmmword [rsp+0xd8+var_38], xmm5
000000000000819b         movaps     xmmword [rsp+0xd8+var_28], xmm6
00000000000081a3         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_81ab:
00000000000081ab         mov        rax, qword [fs:0x28]                        ; CODE XREF=xprintf+34
00000000000081b4         mov        qword [rsp+0xd8+var_C0], rax
00000000000081b9         xor        eax, eax
00000000000081bb         lea        rax, qword [rsp+0xd8+arg_0]
00000000000081c3         mov        rsi, rsp
00000000000081c6         mov        qword [rsp+0xd8+var_D0], rax
00000000000081cb         lea        rax, qword [rsp+0xd8+var_B8]
00000000000081d0         mov        dword [rsp+0xd8+var_D8], 0x8
00000000000081d7         mov        dword [rsp+0xd8+var_D4], 0x30
00000000000081df         mov        qword [rsp+0xd8+var_C8], rax
00000000000081e4         call       xvprintf                                    ; xvprintf
00000000000081e9         mov        rdx, qword [rsp+0xd8+var_C0]
00000000000081ee         xor        rdx, qword [fs:0x28]
00000000000081f7         jne        loc_8201

00000000000081f9         add        rsp, 0xd8
0000000000008200         ret
                        ; endp

                     loc_8201:
0000000000008201         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xprintf+167
                        ; endp
0000000000008206         align      16                                          ; End of unwind block (FDE at 0xea68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xvfprintf:
0000000000008210         push       rbp                                         ; Begin of unwind block (FDE at 0xea84), CODE XREF=xfprintf+143
0000000000008211         push       rbx
0000000000008212         mov        rbp, rdi
0000000000008215         sub        rsp, 0x8
0000000000008219         call       rpl_vfprintf                                ; rpl_vfprintf
000000000000821e         test       eax, eax
0000000000008220         mov        ebx, eax
0000000000008222         js         loc_8230

                     loc_8224:
0000000000008224         add        rsp, 0x8                                    ; CODE XREF=xvfprintf+42, xvfprintf+89
0000000000008228         mov        eax, ebx
000000000000822a         pop        rbx
000000000000822b         pop        rbp
000000000000822c         ret
                        ; endp
000000000000822d         align      16

                     loc_8230:
0000000000008230         mov        rdi, rbp                                    ; argument "__stream" for method j_ferror, CODE XREF=xvfprintf+18
0000000000008233         call       j_ferror                                    ; ferror
0000000000008238         test       eax, eax
000000000000823a         jne        loc_8224

000000000000823c         lea        rsi, qword [aCannotPerformF]                ; argument "msgid" for method j_dcgettext, "cannot perform formatted output"
0000000000008243         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008245         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000824a         call       j_dcgettext                                 ; dcgettext
000000000000824f         mov        rbp, rax
0000000000008252         call       j___errno_location                          ; __errno_location
0000000000008257         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000825d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000825f         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000008262         xor        eax, eax
0000000000008264         call       j_error                                     ; error
0000000000008269         jmp        loc_8224
000000000000826b         align      16                                          ; End of unwind block (FDE at 0xea84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     xfprintf:
0000000000008270         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0xeab0)
0000000000008277         test       al, al
0000000000008279         mov        qword [rsp+0xd8+var_A8], rdx
000000000000827e         mov        qword [rsp+0xd8+var_A0], rcx
0000000000008283         mov        qword [rsp+0xd8+var_98], r8
0000000000008288         mov        qword [rsp+0xd8+var_90], r9
000000000000828d         je         loc_82c6

000000000000828f         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000008294         movaps     xmmword [rsp+0xd8+var_78], xmm1
0000000000008299         movaps     xmmword [rsp+0xd8+var_68], xmm2
000000000000829e         movaps     xmmword [rsp+0xd8+var_58], xmm3
00000000000082a6         movaps     xmmword [rsp+0xd8+var_48], xmm4
00000000000082ae         movaps     xmmword [rsp+0xd8+var_38], xmm5
00000000000082b6         movaps     xmmword [rsp+0xd8+var_28], xmm6
00000000000082be         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_82c6:
00000000000082c6         mov        rax, qword [fs:0x28]                        ; CODE XREF=xfprintf+29
00000000000082cf         mov        qword [rsp+0xd8+var_C0], rax
00000000000082d4         xor        eax, eax
00000000000082d6         lea        rax, qword [rsp+0xd8+arg_0]
00000000000082de         mov        rdx, rsp
00000000000082e1         mov        qword [rsp+0xd8+var_D0], rax
00000000000082e6         lea        rax, qword [rsp+0xd8+var_B8]
00000000000082eb         mov        dword [rsp+0xd8+var_D8], 0x10
00000000000082f2         mov        dword [rsp+0xd8+var_D4], 0x30
00000000000082fa         mov        qword [rsp+0xd8+var_C8], rax
00000000000082ff         call       xvfprintf                                   ; xvfprintf
0000000000008304         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000008309         xor        rcx, qword [fs:0x28]
0000000000008312         jne        loc_831c

0000000000008314         add        rsp, 0xd8
000000000000831b         ret
                        ; endp

                     loc_831c:
000000000000831c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xfprintf+162
                        ; endp
0000000000008321         align      16                                          ; End of unwind block (FDE at 0xeab0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_31: int8_t, -49
        ;    var_32: int8_t, -50


                     xstrtol_fatal:
0000000000008330         push       r13                                         ; Begin of unwind block (FDE at 0xeacc), CODE XREF=main+1094, main+4493, main+4559, main+4589
0000000000008332         push       r12
0000000000008334         mov        r10d, esi
0000000000008337         push       rbp
0000000000008338         push       rbx
0000000000008339         mov        r12, r8
000000000000833c         sub        rsp, 0x18
0000000000008340         mov        rax, qword [fs:0x28]
0000000000008349         mov        qword [rsp+0x38+var_30], rax
000000000000834e         xor        eax, eax
0000000000008350         cmp        edi, 0x3
0000000000008353         mov        ebp, dword [exit_failure]                   ; exit_failure
0000000000008359         ja         loc_83b4

000000000000835b         cmp        edi, 0x2
000000000000835e         jae        loc_83ab

0000000000008360         sub        edi, 0x1
0000000000008363         lea        rsi, qword [aSsArgumentSToo]                ; "%s%s argument '%s' too large"
000000000000836a         jne        loc_83a6

                     loc_836c:
000000000000836c         test       r10d, r10d                                  ; CODE XREF=xstrtol_fatal+130, xstrtol_fatal+142
000000000000836f         movsxd     rax, r10d
0000000000008372         js         loc_83c2

0000000000008374         shl        rax, 0x5
0000000000008378         lea        rbx, qword [aSsArgumentSToo+29]             ; 0xd138
000000000000837f         mov        r13, qword [rcx+rax]

                     loc_8383:
0000000000008383         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext, CODE XREF=xstrtol_fatal+170
0000000000008388         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000838a         call       j_dcgettext                                 ; dcgettext
000000000000838f         mov        r9, r12
0000000000008392         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000008395         mov        r8, r13
0000000000008398         mov        rcx, rbx
000000000000839b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000839d         mov        edi, ebp                                    ; argument "__status" for method j_error
000000000000839f         xor        eax, eax
00000000000083a1         call       j_error                                     ; error

                     loc_83a6:
00000000000083a6         call       j_abort                                     ; abort, CODE XREF=xstrtol_fatal+58, xstrtol_fatal+144
                        ; endp

                     loc_83ab:
00000000000083ab         lea        rsi, qword [aInvalidSuffixI]                ; "invalid suffix in %s%s argument '%s'", CODE XREF=xstrtol_fatal+46
00000000000083b2         jmp        loc_836c

                     loc_83b4:
00000000000083b4         cmp        edi, 0x4                                    ; CODE XREF=xstrtol_fatal+41
00000000000083b7         lea        rsi, qword [aInvalidSsArgum]                ; "invalid %s%s argument '%s'"
00000000000083be         je         loc_836c

00000000000083c0         jmp        loc_83a6

                     loc_83c2:
00000000000083c2         lea        rbx, qword [aSsArgumentSToo+29]             ; 0xd138, CODE XREF=xstrtol_fatal+66
00000000000083c9         mov        byte [rsp+0x38+var_32], dl
00000000000083cd         mov        byte [rsp+0x38+var_31], 0x0
00000000000083d2         lea        r13, qword [rsp+0x38+var_32]
00000000000083d7         sub        rbx, rax
00000000000083da         jmp        loc_8383
00000000000083dc         align      32                                          ; End of unwind block (FDE at 0xeacc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
00000000000083e0         push       r15                                         ; Begin of unwind block (FDE at 0xeaf4), CODE XREF=main+571, main+721, main+952, main+1056, parse_old_offset+62
00000000000083e2         push       r14
00000000000083e4         push       r13
00000000000083e6         push       r12
00000000000083e8         push       rbp
00000000000083e9         push       rbx
00000000000083ea         sub        rsp, 0x28
00000000000083ee         mov        rax, qword [fs:0x28]
00000000000083f7         mov        qword [rsp+0x58+var_40], rax
00000000000083fc         xor        eax, eax
00000000000083fe         cmp        edx, 0x24
0000000000008401         ja         loc_8765

0000000000008407         lea        rax, qword [rsp+0x58+var_48]
000000000000840c         mov        r15, rsi
000000000000840f         test       rsi, rsi
0000000000008412         mov        rbp, rdi
0000000000008415         mov        dword [rsp+0x58+var_50], edx
0000000000008419         mov        r14, rcx
000000000000841c         mov        r13, r8
000000000000841f         cmove      r15, rax
0000000000008423         call       j___errno_location                          ; __errno_location
0000000000008428         mov        dword [rax], 0x0
000000000000842e         mov        r12, rax
0000000000008431         movzx      ebx, byte [rbp]
0000000000008435         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000843a         mov        edx, dword [rsp+0x58+var_50]
000000000000843e         mov        rsi, qword [rax]
0000000000008441         mov        rax, rbp
0000000000008444         jmp        loc_8457
0000000000008446         align      16

                     loc_8450:
0000000000008450         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
0000000000008454         movzx      ebx, byte [rax]

                     loc_8457:
0000000000008457         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
000000000000845a         test       byte [rsi+rcx*2+1], 0x20
000000000000845f         jne        loc_8450

0000000000008461         cmp        bl, 0x2d
0000000000008464         je         loc_84b8

0000000000008466         xor        ecx, ecx
0000000000008468         mov        rsi, r15
000000000000846b         mov        rdi, rbp
000000000000846e         call       j___strtoul_internal                        ; __strtoul_internal
0000000000008473         mov        rcx, qword [r15]
0000000000008476         mov        rbx, rax
0000000000008479         cmp        rcx, rbp
000000000000847c         je         loc_84a8

000000000000847e         mov        eax, dword [r12]
0000000000008482         test       eax, eax
0000000000008484         je         loc_84e8

0000000000008486         cmp        eax, 0x22
0000000000008489         mov        ebp, 0x1
000000000000848e         jne        loc_84b8

                     loc_8490:
0000000000008490         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
0000000000008493         je         loc_849e

0000000000008495         movzx      r12d, byte [rcx]
0000000000008499         test       r12b, r12b
000000000000849c         jne        loc_8517

                     loc_849e:
000000000000849e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
00000000000084a1         jmp        loc_84bd
00000000000084a3         align      8

                     loc_84a8:
00000000000084a8         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
00000000000084ab         mov        qword [rsp+0x58+var_50], rcx
00000000000084b0         jne        loc_84f0

00000000000084b2         nop        word [rax+rax]

                     loc_84b8:
00000000000084b8         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_84bd:
00000000000084bd         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
00000000000084c2         xor        rdi, qword [fs:0x28]
00000000000084cb         mov        eax, ebp
00000000000084cd         jne        loc_8760

00000000000084d3         add        rsp, 0x28
00000000000084d7         pop        rbx
00000000000084d8         pop        rbp
00000000000084d9         pop        r12
00000000000084db         pop        r13
00000000000084dd         pop        r14
00000000000084df         pop        r15
00000000000084e1         ret
                        ; endp
00000000000084e2         align      8

                     loc_84e8:
00000000000084e8         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
00000000000084ea         jmp        loc_8490
00000000000084ec         align      16

                     loc_84f0:
00000000000084f0         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
00000000000084f5         test       r12b, r12b
00000000000084f8         je         loc_84b8

00000000000084fa         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
00000000000084fe         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008501         xor        ebp, ebp
0000000000008503         call       j_strchr                                    ; strchr
0000000000008508         test       rax, rax
000000000000850b         mov        ebx, 0x1
0000000000008510         mov        rcx, qword [rsp+0x58+var_50]
0000000000008515         je         loc_84b8

                     loc_8517:
0000000000008517         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000851b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000851e         mov        qword [rsp+0x58+var_50], rcx
0000000000008523         call       j_strchr                                    ; strchr
0000000000008528         test       rax, rax
000000000000852b         mov        rcx, qword [rsp+0x58+var_50]
0000000000008530         je         loc_85fc

0000000000008536         lea        eax, dword [r12-0x45]
000000000000853b         cmp        al, 0x2f
000000000000853d         ja         loc_8590

000000000000853f         movabs     rdx, 0x814400308945
0000000000008549         bt         rdx, rax
000000000000854d         jae        loc_8590

000000000000854f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
0000000000008554         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008557         mov        qword [rsp+0x58+var_50], rcx
000000000000855c         call       j_strchr                                    ; strchr
0000000000008561         test       rax, rax
0000000000008564         mov        rcx, qword [rsp+0x58+var_50]
0000000000008569         je         loc_8590

000000000000856b         movzx      eax, byte [rcx+1]
000000000000856f         cmp        al, 0x44
0000000000008571         je         loc_857f

0000000000008573         cmp        al, 0x69
0000000000008575         je         loc_8748

000000000000857b         cmp        al, 0x42
000000000000857d         jne        loc_8590

                     loc_857f:
000000000000857f         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
0000000000008584         mov        esi, 0x3e8
0000000000008589         jmp        loc_859a
000000000000858b         align      16

                     loc_8590:
0000000000008590         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
0000000000008595         mov        esi, 0x400

                     loc_859a:
000000000000859a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000859e         cmp        r12b, 0x35
00000000000085a2         ja         loc_85fc

00000000000085a4         lea        rdx, qword [switch_table_d1b0]              ; switch_table_d1b0
00000000000085ab         movzx      r12d, r12b
00000000000085af         movsxd     rax, dword [rdx+r12*4]
00000000000085b3         add        rax, rdx
00000000000085b6         jmp        rax                                         ; switch statement using table at 0xd1b0, with 54 cases, 0x85b8,0x85e0,0x85fc,0x8607,0x861d,0x8634,0x865a,0x867f,0x869f,0x86c0,0x86e3,0x8706,0x871c

                     loc_85b8:
00000000000085b8         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
00000000000085bb         mul        rsi
00000000000085be         jo         loc_87b1

00000000000085c4         xor        r8d, r8d

                     loc_85c7:
00000000000085c7         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
00000000000085ca         jo         loc_87a2

00000000000085d0         mov        rbx, rax

                     loc_85d3:
00000000000085d3         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
00000000000085d6         nop        word [cs:rax+rax]

                     loc_85e0:
00000000000085e0         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
00000000000085e3         mov        eax, ebp
00000000000085e5         add        rcx, rdi
00000000000085e8         or         eax, 0x2
00000000000085eb         mov        qword [r15], rcx
00000000000085ee         cmp        byte [rcx], 0x0
00000000000085f1         mov        qword [r14], rbx
00000000000085f4         cmovne     ebp, eax
00000000000085f7         jmp        loc_84bd

                     loc_85fc:
00000000000085fc         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
00000000000085ff         or         ebp, 0x2
0000000000008602         jmp        loc_84bd

                     loc_8607:
0000000000008607         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000860c         mov        rax, rdx
000000000000860f         mul        rbx
0000000000008612         jo         loc_86ae

0000000000008618         add        rbx, rbx
000000000000861b         jmp        loc_85e0

                     loc_861d:
000000000000861d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
0000000000008622         mov        rax, rdx
0000000000008625         mul        rbx
0000000000008628         jo         loc_86ae

000000000000862e         shl        rbx, 0x9
0000000000008632         jmp        loc_85e0

                     loc_8634:
0000000000008634         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
000000000000863a         xor        r9d, r9d
000000000000863d         nop        dword [rax]

                     loc_8640:
0000000000008640         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
0000000000008643         mul        rsi
0000000000008646         mov        rbx, rax
0000000000008649         jo         loc_87de

                     loc_864f:
000000000000864f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
0000000000008653         jne        loc_8640

                     loc_8655:
0000000000008655         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
0000000000008658         jmp        loc_85e0

                     loc_865a:
000000000000865a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
0000000000008660         xor        r9d, r9d
0000000000008663         nop        dword [rax+rax]

                     loc_8668:
0000000000008668         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
000000000000866b         mul        rsi
000000000000866e         mov        rbx, rax
0000000000008671         jo         loc_87c0

                     loc_8677:
0000000000008677         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
000000000000867b         jne        loc_8668

000000000000867d         jmp        loc_8655

                     loc_867f:
000000000000867f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
0000000000008685         xor        r9d, r9d

                     loc_8688:
0000000000008688         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000868b         mul        rsi
000000000000868e         mov        rbx, rax
0000000000008691         jo         loc_8793

                     loc_8697:
0000000000008697         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000869b         jne        loc_8688

000000000000869d         jmp        loc_8655

                     loc_869f:
000000000000869f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
00000000000086a2         mul        rsi
00000000000086a5         mov        rbx, rax
00000000000086a8         jno        loc_85e0

                     loc_86ae:
00000000000086ae         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
00000000000086b3         or         rbx, 0xffffffffffffffff
00000000000086b7         jmp        loc_85e0
00000000000086bc         align      64

                     loc_86c0:
00000000000086c0         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
00000000000086c6         xor        r9d, r9d

                     loc_86c9:
00000000000086c9         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
00000000000086cc         mul        rsi
00000000000086cf         mov        rbx, rax
00000000000086d2         jo         loc_87cf

                     loc_86d8:
00000000000086d8         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
00000000000086dc         jne        loc_86c9

00000000000086de         jmp        loc_8655

                     loc_86e3:
00000000000086e3         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
00000000000086e9         xor        r9d, r9d

                     loc_86ec:
00000000000086ec         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
00000000000086ef         mul        rsi
00000000000086f2         mov        rbx, rax
00000000000086f5         jo         loc_8784

                     loc_86fb:
00000000000086fb         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
00000000000086ff         jne        loc_86ec

0000000000008701         jmp        loc_8655

                     loc_8706:
0000000000008706         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000870b         mov        rax, rdx
000000000000870e         mul        rbx
0000000000008711         jo         loc_86ae

0000000000008713         shl        rbx, 0xa
0000000000008717         jmp        loc_85e0

                     loc_871c:
000000000000871c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000871f         mul        rsi
0000000000008722         jo         loc_87ed

0000000000008728         xor        r8d, r8d

                     loc_872b:
000000000000872b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000872e         jno        loc_85c7

0000000000008734         mov        r8d, 0x1
000000000000873a         or         rax, 0xffffffffffffffff
000000000000873e         jmp        loc_85c7
0000000000008743         align      8

                     loc_8748:
0000000000008748         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
000000000000874a         cmp        byte [rcx+2], 0x42
000000000000874e         mov        esi, 0x400
0000000000008753         sete       dil
0000000000008757         lea        edi, dword [rdi+rdi+1]
000000000000875b         jmp        loc_859a

                     loc_8760:
0000000000008760         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_8765:
0000000000008765         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
000000000000876c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000008773         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000877a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000877f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_8784:
0000000000008784         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000878a         or         rbx, 0xffffffffffffffff
000000000000878e         jmp        loc_86fb

                     loc_8793:
0000000000008793         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
0000000000008799         or         rbx, 0xffffffffffffffff
000000000000879d         jmp        loc_8697

                     loc_87a2:
00000000000087a2         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
00000000000087a8         or         rbx, 0xffffffffffffffff
00000000000087ac         jmp        loc_85d3

                     loc_87b1:
00000000000087b1         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
00000000000087b5         mov        r8d, 0x1
00000000000087bb         jmp        loc_85c7

                     loc_87c0:
00000000000087c0         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
00000000000087c6         or         rbx, 0xffffffffffffffff
00000000000087ca         jmp        loc_8677

                     loc_87cf:
00000000000087cf         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
00000000000087d5         or         rbx, 0xffffffffffffffff
00000000000087d9         jmp        loc_86d8

                     loc_87de:
00000000000087de         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
00000000000087e4         or         rbx, 0xffffffffffffffff
00000000000087e8         jmp        loc_864f

                     loc_87ed:
00000000000087ed         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
00000000000087f3         or         rax, 0xffffffffffffffff
00000000000087f7         jmp        loc_872b
00000000000087fc         align      2048                                        ; End of unwind block (FDE at 0xeaf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000008800         push       r12                                         ; Begin of unwind block (FDE at 0xeb44), CODE XREF=main+2827, check_and_close+249, check_and_close+267, close_stream+21
0000000000008802         push       rbp
0000000000008803         push       rbx
0000000000008804         mov        rbx, rdi
0000000000008807         call       j_fileno                                    ; fileno
000000000000880c         test       eax, eax
000000000000880e         mov        rdi, rbx
0000000000008811         js         loc_8867

0000000000008813         call       j___freading                                ; __freading
0000000000008818         test       eax, eax
000000000000881a         jne        loc_8848

                     loc_881c:
000000000000881c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000881f         call       rpl_fflush                                  ; rpl_fflush
0000000000008824         test       eax, eax
0000000000008826         je         loc_8864

0000000000008828         call       j___errno_location                          ; __errno_location
000000000000882d         mov        r12d, dword [rax]
0000000000008830         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000008833         mov        rbp, rax
0000000000008836         call       j_fclose                                    ; fclose
000000000000883b         test       r12d, r12d
000000000000883e         jne        loc_8870

                     loc_8840:
0000000000008840         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000008841         pop        rbp
0000000000008842         pop        r12
0000000000008844         ret
                        ; endp
0000000000008845         align      8

                     loc_8848:
0000000000008848         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000884b         call       j_fileno                                    ; fileno
0000000000008850         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000008852         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000008857         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000008859         call       j_lseek                                     ; lseek
000000000000885e         cmp        rax, 0xffffffffffffffff
0000000000008862         jne        loc_881c

                     loc_8864:
0000000000008864         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_8867:
0000000000008867         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000008868         pop        rbp
0000000000008869         pop        r12
000000000000886b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_8870:
0000000000008870         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000008874         mov        eax, 0xffffffff
0000000000008879         jmp        loc_8840
000000000000887b         align      128                                         ; End of unwind block (FDE at 0xeb44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000008880         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xeb7c), CODE XREF=rpl_fclose+31
0000000000008883         push       rbx
0000000000008884         mov        rbx, rdi
0000000000008887         je         loc_889a

0000000000008889         call       j___freading                                ; __freading
000000000000888e         test       eax, eax
0000000000008890         je         loc_889a

0000000000008892         test       dword [rbx], 0x100
0000000000008898         jne        loc_88a8

                     loc_889a:
000000000000889a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000889d         pop        rbx
000000000000889e         jmp        j_fflush                                    ; fflush
                        ; endp
00000000000088a3         align      8

                     loc_88a8:
00000000000088a8         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
00000000000088ab         mov        edx, 0x1
00000000000088b0         xor        esi, esi
00000000000088b2         call       rpl_fseeko                                  ; rpl_fseeko
00000000000088b7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
00000000000088ba         pop        rbx
00000000000088bb         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
00000000000088c0         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xeb7c), Begin of unwind block (FDE at 0xeb9c), CODE XREF=skip+457, rpl_fflush+50
00000000000088c4         cmp        qword [rdi+0x10], rax
00000000000088c8         je         loc_88d0

                     j_j_fseeko:        // fseeko
00000000000088ca         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
00000000000088cf         align      16

                     loc_88d0:
00000000000088d0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
00000000000088d4         cmp        qword [rdi+0x28], rax
00000000000088d8         jne        j_j_fseeko                                  ; fseeko

00000000000088da         cmp        qword [rdi+0x48], 0x0
00000000000088df         jne        j_j_fseeko                                  ; fseeko

00000000000088e1         push       r12
00000000000088e3         push       rbp
00000000000088e4         mov        r12d, edx
00000000000088e7         push       rbx
00000000000088e8         mov        rbp, rsi
00000000000088eb         mov        rbx, rdi
00000000000088ee         call       j_fileno                                    ; fileno
00000000000088f3         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
00000000000088f6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
00000000000088f9         mov        edi, eax                                    ; argument "__fd" for method j_lseek
00000000000088fb         call       j_lseek                                     ; lseek
0000000000008900         cmp        rax, 0xffffffffffffffff
0000000000008904         je         loc_8912

0000000000008906         and        dword [rbx], 0xffffffef
0000000000008909         mov        qword [rbx+0x90], rax
0000000000008910         xor        eax, eax

                     loc_8912:
0000000000008912         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000008913         pop        rbp
0000000000008914         pop        r12
0000000000008916         ret
                        ; endp
0000000000008917         align      32                                          ; End of unwind block (FDE at 0xeb9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000008920         push       r13                                         ; Begin of unwind block (FDE at 0xebcc), CODE XREF=sub_63e0+534
0000000000008922         push       r12
0000000000008924         mov        r13, rsi
0000000000008927         push       rbp
0000000000008928         push       rbx
0000000000008929         mov        rbx, rdi
000000000000892c         mov        r12, rdx
000000000000892f         sub        rsp, 0x18
0000000000008933         mov        rax, qword [fs:0x28]
000000000000893c         mov        qword [rsp+0x38+var_30], rax
0000000000008941         xor        eax, eax
0000000000008943         lea        rax, qword [rsp+0x38+var_34]
0000000000008948         test       rdi, rdi
000000000000894b         cmove      rbx, rax
000000000000894f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000008952         call       j_mbrtowc                                   ; mbrtowc
0000000000008957         cmp        rax, 0xfffffffffffffffd
000000000000895b         mov        rbp, rax
000000000000895e         jbe        loc_8980

0000000000008960         test       r12, r12
0000000000008963         je         loc_8980

0000000000008965         xor        edi, edi
0000000000008967         call       hard_locale                                 ; hard_locale
000000000000896c         test       al, al
000000000000896e         jne        loc_8980

0000000000008970         movzx      eax, byte [r13]
0000000000008975         mov        ebp, 0x1
000000000000897a         mov        dword [rbx], eax
000000000000897c         nop        dword [rax]

                     loc_8980:
0000000000008980         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000008985         xor        rdx, qword [fs:0x28]
000000000000898e         mov        rax, rbp
0000000000008991         jne        loc_899e

0000000000008993         add        rsp, 0x18
0000000000008997         pop        rbx
0000000000008998         pop        rbp
0000000000008999         pop        r12
000000000000899b         pop        r13
000000000000899d         ret
                        ; endp

                     loc_899e:
000000000000899e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
00000000000089a3         align      16                                          ; End of unwind block (FDE at 0xebcc)

                     rpl_vfprintf:
00000000000089b0         push       r13                                         ; Begin of unwind block (FDE at 0xec0c), CODE XREF=xvfprintf+9, rpl_vprintf+13
00000000000089b2         push       r12
00000000000089b4         mov        rax, rsi
00000000000089b7         push       rbp
00000000000089b8         push       rbx
00000000000089b9         mov        r13, rdi
00000000000089bc         sub        rsp, 0x7f8
00000000000089c3         lea        r12, qword [rsp+0x818+var_808]
00000000000089c8         lea        rsi, qword [rsp+0x818+var_810]
00000000000089cd         mov        qword [rsp+0x818+var_810], 0x7d0
00000000000089d6         mov        rcx, qword [fs:0x28]
00000000000089df         mov        qword [rsp+0x818+var_30], rcx
00000000000089e7         xor        ecx, ecx
00000000000089e9         mov        rdi, r12
00000000000089ec         mov        rcx, rdx
00000000000089ef         mov        rdx, rax
00000000000089f2         call       vasnprintf                                  ; vasnprintf
00000000000089f7         test       rax, rax
00000000000089fa         mov        rbx, qword [rsp+0x818+var_810]
00000000000089ff         je         loc_8a8e

0000000000008a05         mov        rcx, r13                                    ; argument "__s" for method j_fwrite
0000000000008a08         mov        rdx, rbx                                    ; argument "__n" for method j_fwrite
0000000000008a0b         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000008a10         mov        rdi, rax                                    ; argument "__ptr" for method j_fwrite
0000000000008a13         mov        rbp, rax
0000000000008a16         call       j_fwrite                                    ; fwrite
0000000000008a1b         cmp        rax, rbx
0000000000008a1e         jb         loc_8a60

0000000000008a20         cmp        rbp, r12
0000000000008a23         je         loc_8a2d

0000000000008a25         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000008a28         call       j_free                                      ; free

                     loc_8a2d:
0000000000008a2d         cmp        rbx, 0x7fffffff                             ; CODE XREF=rpl_vfprintf+115
0000000000008a34         ja         loc_8a83

                     loc_8a36:
0000000000008a36         mov        rcx, qword [rsp+0x818+var_30]               ; CODE XREF=rpl_vfprintf+184, rpl_vfprintf+209, rpl_vfprintf+235
0000000000008a3e         xor        rcx, qword [fs:0x28]
0000000000008a47         mov        eax, ebx
0000000000008a49         jne        loc_8a9d

0000000000008a4b         add        rsp, 0x7f8
0000000000008a52         pop        rbx
0000000000008a53         pop        rbp
0000000000008a54         pop        r12
0000000000008a56         pop        r13
0000000000008a58         ret
                        ; endp
0000000000008a59         align      32

                     loc_8a60:
0000000000008a60         cmp        rbp, r12                                    ; CODE XREF=rpl_vfprintf+110
0000000000008a63         mov        ebx, 0xffffffff
0000000000008a68         je         loc_8a36

0000000000008a6a         call       j___errno_location                          ; __errno_location
0000000000008a6f         mov        r13d, dword [rax]
0000000000008a72         mov        r12, rax
0000000000008a75         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000008a78         call       j_free                                      ; free
0000000000008a7d         mov        dword [r12], r13d
0000000000008a81         jmp        loc_8a36

                     loc_8a83:
0000000000008a83         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_vfprintf+132
0000000000008a88         mov        dword [rax], 0x4b

                     loc_8a8e:
0000000000008a8e         mov        rdi, r13                                    ; CODE XREF=rpl_vfprintf+79
0000000000008a91         mov        ebx, 0xffffffff
0000000000008a96         call       fseterr                                     ; fseterr
0000000000008a9b         jmp        loc_8a36

                     loc_8a9d:
0000000000008a9d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vfprintf+153
                        ; endp
0000000000008aa2         align      16                                          ; End of unwind block (FDE at 0xec0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_808: int8_t, -2056
        ;    var_810: int64_t, -2064


                     rpl_vprintf:
0000000000008ab0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xec4c), CODE XREF=xvprintf+6
0000000000008ab3         mov        rsi, rdi
0000000000008ab6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000008abd         jmp        rpl_vfprintf                                ; rpl_vfprintf
0000000000008ac2         align      16                                          ; End of unwind block (FDE at 0xec4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000008ad0         push       r12                                         ; Begin of unwind block (FDE at 0xec64), CODE XREF=close_stdout+13, close_stdout+51
0000000000008ad2         push       rbp
0000000000008ad3         mov        rbp, rdi
0000000000008ad6         push       rbx
0000000000008ad7         call       j___fpending                                ; __fpending
0000000000008adc         mov        ebx, dword [rbp]
0000000000008adf         mov        rdi, rbp
0000000000008ae2         mov        r12, rax
0000000000008ae5         call       rpl_fclose                                  ; rpl_fclose
0000000000008aea         and        ebx, 0x20
0000000000008aed         test       ebx, ebx
0000000000008aef         jne        loc_8b08

0000000000008af1         test       eax, eax
0000000000008af3         je         loc_8aff

0000000000008af5         test       r12, r12
0000000000008af8         mov        eax, 0xffffffff
0000000000008afd         je         loc_8b38

                     loc_8aff:
0000000000008aff         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000008b00         pop        rbp
0000000000008b01         pop        r12
0000000000008b03         ret
                        ; endp
0000000000008b04         align      8

                     loc_8b08:
0000000000008b08         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000008b0a         jne        loc_8b28

0000000000008b0c         call       j___errno_location                          ; __errno_location
0000000000008b11         mov        dword [rax], 0x0
0000000000008b17         mov        eax, 0xffffffff
0000000000008b1c         pop        rbx
0000000000008b1d         pop        rbp
0000000000008b1e         pop        r12
0000000000008b20         ret
                        ; endp
0000000000008b21         align      8

                     loc_8b28:
0000000000008b28         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000008b29         mov        eax, 0xffffffff
0000000000008b2e         pop        rbp
0000000000008b2f         pop        r12
0000000000008b31         ret
                        ; endp
0000000000008b32         align      8

                     loc_8b38:
0000000000008b38         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000008b3d         cmp        dword [rax], 0x9
0000000000008b40         pop        rbx
0000000000008b41         pop        rbp
0000000000008b42         pop        r12
0000000000008b44         setne      al
0000000000008b47         movzx      eax, al
0000000000008b4a         neg        eax
0000000000008b4c         ret
                        ; endp
0000000000008b4d         align      16                                          ; End of unwind block (FDE at 0xec64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000008b50         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xecb4), CODE XREF=rpl_mbrtowc+71
0000000000008b54         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000008b56         call       j_setlocale                                 ; setlocale
0000000000008b5b         mov        rdx, rax
0000000000008b5e         mov        eax, 0x1
0000000000008b63         test       rdx, rdx
0000000000008b66         je         loc_8b85

0000000000008b68         lea        rdi, qword [__PRETTY_FUNCTION__.4162+11]    ; 0xd293
0000000000008b6f         mov        ecx, 0x2
0000000000008b74         mov        rsi, rdx
0000000000008b77         rep  cmpsb byte [rsi], byte [rdi]
0000000000008b79         seta       cl
0000000000008b7c         sbb        cl, 0x0
0000000000008b7f         xor        eax, eax
0000000000008b81         test       cl, cl
0000000000008b83         jne        loc_8b90

                     loc_8b85:
0000000000008b85         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000008b89         ret
                        ; endp
0000000000008b8a         align      16

                     loc_8b90:
0000000000008b90         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000008b97         mov        ecx, 0x6
0000000000008b9c         mov        rsi, rdx
0000000000008b9f         rep  cmpsb byte [rsi], byte [rdi]
0000000000008ba1         seta       al
0000000000008ba4         sbb        al, 0x0
0000000000008ba6         test       al, al
0000000000008ba8         setne      al
0000000000008bab         add        rsp, 0x8
0000000000008baf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000008bb0         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xecb4), Begin of unwind block (FDE at 0xecd4), CODE XREF=gettext_quote.part.1+11
0000000000008bb4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000008bb9         call       j_nl_langinfo                               ; nl_langinfo
0000000000008bbe         test       rax, rax
0000000000008bc1         je         loc_8be0

0000000000008bc3         cmp        byte [rax], 0x0
0000000000008bc6         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000008bcd         cmove      rax, rdx
0000000000008bd1         add        rsp, 0x8
0000000000008bd5         ret
                        ; endp
0000000000008bd6         align      32

                     loc_8be0:
0000000000008be0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000008be7         add        rsp, 0x8
0000000000008beb         ret
                        ; endp
0000000000008bec         align      16                                          ; End of unwind block (FDE at 0xecd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fseterr:
0000000000008bf0         or         dword [rdi], 0x20                           ; Begin of unwind block (FDE at 0xecf4), CODE XREF=rpl_vfprintf+230
0000000000008bf3         ret
                        ; endp
0000000000008bf4         align      1024                                        ; End of unwind block (FDE at 0xecf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
0000000000008c00         push       rbp                                         ; Begin of unwind block (FDE at 0xed0c), CODE XREF=rpl_vfprintf+66
0000000000008c01         mov        rbp, rsp
0000000000008c04         push       r15
0000000000008c06         push       r14
0000000000008c08         push       r13
0000000000008c0a         push       r12
0000000000008c0c         lea        r14, qword [rbp+var_3B0]
0000000000008c13         push       rbx
0000000000008c14         mov        rbx, rdx
0000000000008c17         mov        r12, rcx
0000000000008c1a         mov        rdx, r14
0000000000008c1d         sub        rsp, 0x408
0000000000008c24         mov        qword [rbp+var_418], rsi
0000000000008c2b         lea        rsi, qword [rbp+var_2C0]
0000000000008c32         mov        qword [rbp+var_3E8], rdi
0000000000008c39         mov        rdi, rbx
0000000000008c3c         mov        qword [rbp+var_410], r14
0000000000008c43         mov        rax, qword [fs:0x28]
0000000000008c4c         mov        qword [rbp+var_38], rax
0000000000008c50         xor        eax, eax
0000000000008c52         mov        qword [rbp+var_408], rsi
0000000000008c59         call       printf_parse                                ; printf_parse
0000000000008c5e         test       eax, eax
0000000000008c60         js         loc_9ac8

0000000000008c66         mov        rsi, r14
0000000000008c69         mov        rdi, r12
0000000000008c6c         call       printf_fetchargs                            ; printf_fetchargs
0000000000008c71         test       eax, eax
0000000000008c73         js         loc_9b30

0000000000008c79         mov        rax, qword [rbp+var_2B0]
0000000000008c80         mov        rdx, 0xffffffffffffffff
0000000000008c87         add        rax, 0x7
0000000000008c8b         cmp        rax, 0x6
0000000000008c8f         cmovbe     rax, rdx
0000000000008c93         add        rax, qword [rbp+var_2A8]
0000000000008c9a         jb         loc_96c8

0000000000008ca0         mov        rdi, rax
0000000000008ca3         xor        r8d, r8d
0000000000008ca6         add        rdi, 0x6
0000000000008caa         setb       r8b
0000000000008cae         jb         loc_96c8

0000000000008cb4         cmp        rdi, 0xf9f
0000000000008cbb         jbe        loc_8e08

0000000000008cc1         cmp        rdi, 0xffffffffffffffff
0000000000008cc5         mov        qword [rbp+var_3C8], r8
0000000000008ccc         je         loc_96c8

0000000000008cd2         call       j_malloc                                    ; malloc
0000000000008cd7         test       rax, rax
0000000000008cda         mov        qword [rbp+var_3D8], rax
0000000000008ce1         je         loc_96c8

0000000000008ce7         mov        r8, qword [rbp+var_3C8]
0000000000008cee         mov        qword [rbp+var_420], rax

                     loc_8cf5:
0000000000008cf5         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
0000000000008cf8         cmp        qword [rbp+var_3E8], 0x0
0000000000008d00         je         loc_8d0c

0000000000008d02         mov        rax, qword [rbp+var_418]
0000000000008d09         mov        r12, qword [rax]

                     loc_8d0c:
0000000000008d0c         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
0000000000008d13         lea        rax, qword [rbp+var_3BC]
0000000000008d1a         mov        r15, qword [rbp+var_3E8]
0000000000008d21         mov        qword [rbp+var_400], 0x0
0000000000008d2c         mov        qword [rbp+var_3F0], rax
0000000000008d33         mov        rax, rbx
0000000000008d36         mov        rbx, r8
0000000000008d39         mov        rcx, qword [r13]
0000000000008d3d         mov        r8, rax
0000000000008d40         cmp        rcx, r8
0000000000008d43         je         loc_96b1

                     loc_8d49:
0000000000008d49         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
0000000000008d4c         mov        rax, rbx
0000000000008d4f         add        rax, rcx
0000000000008d52         mov        r14, rax
0000000000008d55         jae        loc_8e38

0000000000008d5b         cmp        r12, 0xffffffffffffffff
0000000000008d5f         je         loc_9830

                     loc_8d65:
0000000000008d65         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_9770, vasnprintf+2950, vasnprintf+3039, loc_98c8, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_9ae0
0000000000008d6a         mov        qword [rbp+var_3C8], rax

                     loc_8d71:
0000000000008d71         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
0000000000008d78         je         loc_8d83

0000000000008d7a         test       r15, r15
0000000000008d7d         jne        loc_9860

                     loc_8d83:
0000000000008d83         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
0000000000008d8a         test       rax, rax
0000000000008d8d         je         loc_8d97

0000000000008d8f         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000008d92         call       j_free                                      ; free

                     loc_8d97:
0000000000008d97         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
0000000000008d9e         mov        rdi, qword [rbp+var_2B8]
0000000000008da5         add        rax, 0x20
0000000000008da9         cmp        rdi, rax
0000000000008dac         je         loc_8db3

0000000000008dae         call       j_free                                      ; free

                     loc_8db3:
0000000000008db3         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
0000000000008dba         mov        rdi, qword [rbp+var_3A8]
0000000000008dc1         add        rax, 0x10
0000000000008dc5         cmp        rdi, rax
0000000000008dc8         je         loc_8dcf

0000000000008dca         call       j_free                                      ; free

                     loc_8dcf:
0000000000008dcf         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
0000000000008dd6         xor        r15d, r15d
0000000000008dd9         mov        dword [rax], 0xc

                     loc_8ddf:
0000000000008ddf         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
0000000000008de3         xor        rdi, qword [fs:0x28]
0000000000008dec         mov        rax, r15
0000000000008def         jne        loc_9cf7

0000000000008df5         lea        rsp, qword [rbp+var_28]
0000000000008df9         pop        rbx
0000000000008dfa         pop        r12
0000000000008dfc         pop        r13
0000000000008dfe         pop        r14
0000000000008e00         pop        r15
0000000000008e02         pop        rbp
0000000000008e03         ret
                        ; endp
0000000000008e04         align      8

                     loc_8e08:
0000000000008e08         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
0000000000008e0c         mov        qword [rbp+var_420], 0x0
0000000000008e17         and        rax, 0xfffffffffffffff0
0000000000008e1b         sub        rsp, rax
0000000000008e1e         lea        rax, qword [rsp+0x430+var_421]
0000000000008e23         and        rax, 0xfffffffffffffff0
0000000000008e27         mov        qword [rbp+var_3D8], rax
0000000000008e2e         jmp        loc_8cf5
0000000000008e33         align      8

                     loc_8e38:
0000000000008e38         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
0000000000008e3b         jae        loc_8ea4

0000000000008e3d         test       r12, r12
0000000000008e40         jne        loc_9770

0000000000008e46         cmp        rax, 0xc
0000000000008e4a         ja         loc_9782

0000000000008e50         mov        r12d, 0xc

                     loc_8e56:
0000000000008e56         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
0000000000008e5d         sete       dl
0000000000008e60         test       r15, r15
0000000000008e63         je         loc_97a8

                     loc_8e69:
0000000000008e69         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
0000000000008e6b         jne        loc_97a8

0000000000008e71         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000008e74         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000008e77         mov        qword [rbp+var_3D0], r8
0000000000008e7e         mov        qword [rbp+var_3C8], rcx
0000000000008e85         call       j_realloc                                   ; realloc
0000000000008e8a         test       rax, rax
0000000000008e8d         mov        rcx, qword [rbp+var_3C8]
0000000000008e94         mov        r8, qword [rbp+var_3D0]
0000000000008e9b         je         loc_984b

0000000000008ea1         mov        r15, rax

                     loc_8ea4:
0000000000008ea4         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
0000000000008ea8         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000008eab         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
0000000000008eae         call       j_memcpy                                    ; memcpy

                     loc_8eb3:
0000000000008eb3         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
0000000000008eba         cmp        qword [rbp+var_2C0], rax
0000000000008ec1         je         loc_9b7b

0000000000008ec7         movzx      edx, byte [r13+0x48]
0000000000008ecc         mov        rax, qword [r13+0x50]
0000000000008ed0         cmp        dl, 0x25
0000000000008ed3         je         loc_9668

0000000000008ed9         cmp        rax, 0xffffffffffffffff
0000000000008edd         je         loc_9b26

0000000000008ee3         mov        r8, qword [rbp+var_3A8]
0000000000008eea         shl        rax, 0x5
0000000000008eee         add        rax, r8
0000000000008ef1         cmp        dl, 0x6e
0000000000008ef4         mov        edi, dword [rax]
0000000000008ef6         mov        dword [rbp+var_3D0], edi
0000000000008efc         je         loc_96e0

0000000000008f02         mov        eax, dword [r13+0x10]
0000000000008f06         mov        rdi, qword [rbp+var_3D8]
0000000000008f0d         test       al, 0x1
0000000000008f0f         mov        byte [rdi], 0x25
0000000000008f12         lea        rbx, qword [rdi+1]
0000000000008f16         je         loc_8f27

0000000000008f18         mov        rdi, qword [rbp+var_3D8]
0000000000008f1f         lea        rbx, qword [rdi+2]
0000000000008f23         mov        byte [rdi+1], 0x27

                     loc_8f27:
0000000000008f27         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
0000000000008f29         je         loc_8f32

0000000000008f2b         mov        byte [rbx], 0x2d
0000000000008f2e         add        rbx, 0x1

                     loc_8f32:
0000000000008f32         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
0000000000008f34         je         loc_8f3d

0000000000008f36         mov        byte [rbx], 0x2b
0000000000008f39         add        rbx, 0x1

                     loc_8f3d:
0000000000008f3d         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
0000000000008f3f         je         loc_8f48

0000000000008f41         mov        byte [rbx], 0x20
0000000000008f44         add        rbx, 0x1

                     loc_8f48:
0000000000008f48         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
0000000000008f4a         je         loc_8f53

0000000000008f4c         mov        byte [rbx], 0x23
0000000000008f4f         add        rbx, 0x1

                     loc_8f53:
0000000000008f53         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
0000000000008f55         je         loc_8f5e

0000000000008f57         mov        byte [rbx], 0x49
0000000000008f5a         add        rbx, 0x1

                     loc_8f5e:
0000000000008f5e         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
0000000000008f60         je         loc_8f69

0000000000008f62         mov        byte [rbx], 0x30
0000000000008f65         add        rbx, 0x1

                     loc_8f69:
0000000000008f69         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
0000000000008f6d         mov        rdx, qword [r13+0x20]
0000000000008f71         cmp        rsi, rdx
0000000000008f74         je         loc_8fa6

0000000000008f76         mov        rcx, rdx
0000000000008f79         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000008f7c         mov        qword [rbp+var_3E0], r8
0000000000008f83         sub        rcx, rsi
0000000000008f86         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000008f89         mov        qword [rbp+var_3C8], rcx
0000000000008f90         call       j_memcpy                                    ; memcpy
0000000000008f95         mov        rcx, qword [rbp+var_3C8]
0000000000008f9c         mov        r8, qword [rbp+var_3E0]
0000000000008fa3         add        rbx, rcx

                     loc_8fa6:
0000000000008fa6         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
0000000000008faa         mov        rdx, qword [r13+0x38]
0000000000008fae         cmp        rsi, rdx
0000000000008fb1         je         loc_8fe3

0000000000008fb3         mov        rcx, rdx
0000000000008fb6         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000008fb9         mov        qword [rbp+var_3E0], r8
0000000000008fc0         sub        rcx, rsi
0000000000008fc3         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000008fc6         mov        qword [rbp+var_3C8], rcx
0000000000008fcd         call       j_memcpy                                    ; memcpy
0000000000008fd2         mov        rcx, qword [rbp+var_3C8]
0000000000008fd9         mov        r8, qword [rbp+var_3E0]
0000000000008fe0         add        rbx, rcx

                     loc_8fe3:
0000000000008fe3         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
0000000000008fe9         cmp        edi, 0x10
0000000000008fec         ja         loc_901b

0000000000008fee         mov        eax, 0x1
0000000000008ff3         mov        ecx, edi
0000000000008ff5         shl        rax, cl
0000000000008ff8         test       eax, 0x14180
0000000000008ffd         jne        loc_9014

0000000000008fff         test       ah, 0x10
0000000000009002         jne        loc_9960

0000000000009008         test       ah, 0x6
000000000000900b         je         loc_901b

000000000000900d         mov        byte [rbx], 0x6c
0000000000009010         add        rbx, 0x1

                     loc_9014:
0000000000009014         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
0000000000009017         add        rbx, 0x1

                     loc_901b:
000000000000901b         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
0000000000009020         mov        byte [rbx+1], 0x0
0000000000009024         mov        byte [rbx], al
0000000000009026         mov        rax, qword [r13+0x28]
000000000000902a         cmp        rax, 0xffffffffffffffff
000000000000902e         je         loc_9760

0000000000009034         shl        rax, 0x5
0000000000009038         add        rax, r8
000000000000903b         cmp        dword [rax], 0x5
000000000000903e         jne        loc_9b26

0000000000009044         mov        eax, dword [rax+0x10]
0000000000009047         mov        dword [rbp+var_3E0], 0x1
0000000000009051         mov        dword [rbp+var_3B8], eax

                     loc_9057:
0000000000009057         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
000000000000905b         cmp        rax, 0xffffffffffffffff
000000000000905f         je         loc_908c

0000000000009061         shl        rax, 0x5
0000000000009065         add        r8, rax
0000000000009068         cmp        dword [r8], 0x5
000000000000906c         jne        loc_9b26

0000000000009072         mov        eax, dword [rbp+var_3E0]
0000000000009078         mov        edx, dword [r8+0x10]
000000000000907c         mov        dword [rbp+rax*4+var_3B8], edx
0000000000009083         lea        eax, dword [rax+1]
0000000000009086         mov        dword [rbp+var_3E0], eax

                     loc_908c:
000000000000908c         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000908f         xor        edx, edx
0000000000009091         add        rax, 0x2
0000000000009095         jb         loc_9cfc

000000000000909b         cmp        r12, rax
000000000000909e         jae        loc_90eb

00000000000090a0         test       r12, r12
00000000000090a3         jne        loc_98c8

00000000000090a9         cmp        rax, 0xc
00000000000090ad         ja         loc_98e0

00000000000090b3         mov        r12d, 0xc

                     loc_90b9:
00000000000090b9         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
00000000000090c0         sete       dl
00000000000090c3         test       r15, r15
00000000000090c6         je         loc_9910

                     loc_90cc:
00000000000090cc         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
00000000000090ce         jne        loc_9910

00000000000090d4         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000090d7         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000090da         call       j_realloc                                   ; realloc
00000000000090df         test       rax, rax
00000000000090e2         je         loc_8d65

00000000000090e8         mov        r15, rax

                     loc_90eb:
00000000000090eb         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
00000000000090f0         call       j___errno_location                          ; __errno_location
00000000000090f5         mov        qword [rbp+var_3C8], rax
00000000000090fc         mov        eax, dword [rax]
00000000000090fe         mov        qword [rbp+var_3F8], rbx
0000000000009105         mov        dword [rbp+var_424], eax
000000000000910b         nop        dword [rax+rax]

                     loc_9110:
0000000000009110         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
0000000000009117         mov        rbx, r12
000000000000911a         mov        r10d, 0x7fffffff
0000000000009120         sub        rbx, r14
0000000000009123         mov        dword [rbp+var_3BC], 0xffffffff
000000000000912d         cmp        rbx, 0x7fffffff
0000000000009134         mov        dword [rax], 0x0
000000000000913a         mov        eax, dword [rbp+var_3D0]
0000000000009140         cmovbe     r10, rbx
0000000000009144         cmp        eax, 0x11
0000000000009147         ja         loc_9b26

000000000000914d         lea        rsi, qword [switch_table_d2a4]              ; switch_table_d2a4
0000000000009154         movsxd     rax, dword [rsi+rax*4]
0000000000009158         add        rax, rsi
000000000000915b         jmp        rax                                         ; switch statement using table at 0xd2a4, with 18 cases, 0x9160,0x9298,0x93c0,0x9448,0x94c8,0x9508,0x9590,0x95c0,0x9b26
000000000000915d         align      32

                     loc_9160:
0000000000009160         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
0000000000009164         lea        rdi, qword [r15+r14]
0000000000009168         shl        rax, 0x5
000000000000916c         add        rax, qword [rbp+var_3A8]
0000000000009173         mov        r9, qword [rax+0x10]
0000000000009177         mov        eax, dword [rbp+var_3E0]
000000000000917d         cmp        eax, 0x1
0000000000009180         je         loc_9648

0000000000009186         cmp        eax, 0x2
0000000000009189         je         loc_9630

000000000000918f         sub        rsp, 0x8
0000000000009193         push       qword [rbp+var_3F0]

                     loc_9199:
0000000000009199         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
00000000000091a0         mov        rsi, r10
00000000000091a3         mov        rcx, 0xffffffffffffffff
00000000000091aa         mov        edx, 0x1
00000000000091af         xor        eax, eax
00000000000091b1         mov        qword [rbp+var_430], r10
00000000000091b8         call       j___snprintf_chk                            ; __snprintf_chk
00000000000091bd         pop        rsi
00000000000091be         pop        rdi
00000000000091bf         mov        r10, qword [rbp+var_430]

                     loc_91c6:
00000000000091c6         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
00000000000091cc         test       ecx, ecx
00000000000091ce         js         loc_930c

                     loc_91d4:
00000000000091d4         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
00000000000091d7         cmp        rdx, r10
00000000000091da         jae        loc_91ea

00000000000091dc         add        rdx, r15
00000000000091df         cmp        byte [rdx+r14], 0x0
00000000000091e4         jne        loc_9b26

                     loc_91ea:
00000000000091ea         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
00000000000091ec         jge        loc_91f6

                     loc_91ee:
00000000000091ee         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
00000000000091f4         mov        ecx, eax

                     loc_91f6:
00000000000091f6         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
00000000000091f9         cmp        rax, r10
00000000000091fc         jb         loc_9a30

0000000000009202         cmp        rbx, 0x7ffffffe
0000000000009209         ja         loc_9a50

000000000000920f         lea        rsi, qword [r12+r12]
0000000000009213         lea        edx, dword [rcx+2]
0000000000009216         test       r12, r12
0000000000009219         mov        rax, 0xffffffffffffffff
0000000000009220         cmovns     rax, rsi
0000000000009224         add        rdx, r14
0000000000009227         jb         loc_9ce8

000000000000922d         cmp        rax, rdx
0000000000009230         cmovb      rax, rdx
0000000000009234         cmp        r12, rax
0000000000009237         jae        loc_9110

000000000000923d         test       r12, r12
0000000000009240         js         loc_8d71

0000000000009246         cmp        rsi, rax
0000000000009249         mov        r12, rsi
000000000000924c         jae        loc_925b

000000000000924e         cmp        rax, 0xffffffffffffffff
0000000000009252         je         loc_8d71

0000000000009258         mov        r12, rax

                     loc_925b:
000000000000925b         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
0000000000009262         sete       bl
0000000000009265         test       r15, r15
0000000000009268         je         loc_95f0

000000000000926e         test       bl, bl
0000000000009270         jne        loc_95f0

0000000000009276         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000009279         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000927c         call       j_realloc                                   ; realloc
0000000000009281         test       rax, rax
0000000000009284         je         loc_8d71

000000000000928a         mov        r15, rax
000000000000928d         jmp        loc_9110
0000000000009292         align      8

                     loc_9298:
0000000000009298         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000929c         lea        rdi, qword [r15+r14]
00000000000092a0         shl        rax, 0x5
00000000000092a4         add        rax, qword [rbp+var_3A8]
00000000000092ab         mov        r9d, dword [rax+0x10]
00000000000092af         mov        eax, dword [rbp+var_3E0]
00000000000092b5         cmp        eax, 0x1
00000000000092b8         je         loc_94f0

                     loc_92be:
00000000000092be         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
00000000000092c1         je         loc_9538

                     loc_92c7:
00000000000092c7         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
00000000000092cb         push       qword [rbp+var_3F0]

                     loc_92d1:
00000000000092d1         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
00000000000092d8         mov        rcx, 0xffffffffffffffff
00000000000092df         mov        edx, 0x1
00000000000092e4         mov        rsi, r10
00000000000092e7         xor        eax, eax
00000000000092e9         mov        qword [rbp+var_430], r10
00000000000092f0         call       j___snprintf_chk                            ; __snprintf_chk
00000000000092f5         pop        rdx
00000000000092f6         pop        rcx
00000000000092f7         mov        ecx, dword [rbp+var_3BC]
00000000000092fd         mov        r10, qword [rbp+var_430]
0000000000009304         test       ecx, ecx
0000000000009306         jns        loc_91d4

                     loc_930c:
000000000000930c         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
0000000000009313         cmp        byte [rdi+1], 0x0
0000000000009317         jne        loc_9658

000000000000931d         test       eax, eax
000000000000931f         jns        loc_91ee

0000000000009325         mov        rax, qword [rbp+var_3C8]
000000000000932c         mov        ebx, dword [rax]
000000000000932e         test       ebx, ebx
0000000000009330         jne        loc_9350

0000000000009332         movzx      eax, byte [r13+0x48]
0000000000009337         mov        ebx, 0x16
000000000000933c         and        eax, 0xffffffef
000000000000933f         cmp        al, 0x63
0000000000009341         mov        eax, 0x54
0000000000009346         cmove      ebx, eax
0000000000009349         nop        dword [rax]

                     loc_9350:
0000000000009350         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
0000000000009357         je         loc_9362

0000000000009359         test       r15, r15
000000000000935c         jne        loc_9b0c

                     loc_9362:
0000000000009362         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
0000000000009369         test       rax, rax
000000000000936c         je         loc_9376

000000000000936e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000009371         call       j_free                                      ; free

                     loc_9376:
0000000000009376         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
000000000000937d         mov        rdi, qword [rbp+var_2B8]
0000000000009384         add        rax, 0x20
0000000000009388         cmp        rdi, rax
000000000000938b         je         loc_9392

000000000000938d         call       j_free                                      ; free

                     loc_9392:
0000000000009392         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
0000000000009399         mov        rdi, qword [rbp+var_3A8]
00000000000093a0         add        rax, 0x10
00000000000093a4         cmp        rdi, rax
00000000000093a7         je         loc_93ae

00000000000093a9         call       j_free                                      ; free

                     loc_93ae:
00000000000093ae         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
00000000000093b5         xor        r15d, r15d
00000000000093b8         mov        dword [rax], ebx
00000000000093ba         jmp        loc_8ddf
00000000000093bf         align      64

                     loc_93c0:
00000000000093c0         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
00000000000093c4         lea        rdi, qword [r15+r14]
00000000000093c8         shl        rax, 0x5
00000000000093cc         add        rax, qword [rbp+var_3A8]
00000000000093d3         fld        tword [rax+0x10]
00000000000093d6         mov        eax, dword [rbp+var_3E0]
00000000000093dc         cmp        eax, 0x1
00000000000093df         je         loc_9a10

00000000000093e5         cmp        eax, 0x2
00000000000093e8         jne        loc_98b0

00000000000093ee         mov        eax, dword [rbp+var_3B4]
00000000000093f4         sub        rsp, 0x8
00000000000093f8         push       qword [rbp+var_3F0]
00000000000093fe         mov        r9d, dword [rbp+var_3B8]
0000000000009405         mov        r8, qword [rbp+var_3D8]
000000000000940c         mov        rsi, r10
000000000000940f         sub        rsp, 0x18
0000000000009413         mov        rcx, 0xffffffffffffffff
000000000000941a         mov        edx, 0x1
000000000000941f         fstp       tword [rsp+0x458+var_450]
0000000000009423         push       rax
0000000000009424         xor        eax, eax
0000000000009426         mov        qword [rbp+var_430], r10
000000000000942d         call       j___snprintf_chk                            ; __snprintf_chk
0000000000009432         add        rsp, 0x30
0000000000009436         mov        r10, qword [rbp+var_430]
000000000000943d         jmp        loc_91c6
0000000000009442         align      8

                     loc_9448:
0000000000009448         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
000000000000944c         lea        rdi, qword [r15+r14]
0000000000009450         shl        rax, 0x5
0000000000009454         add        rax, qword [rbp+var_3A8]
000000000000945b         movsd      xmm0, qword [rax+0x10]
0000000000009460         mov        eax, dword [rbp+var_3E0]
0000000000009466         cmp        eax, 0x1
0000000000009469         je         loc_9a00

000000000000946f         cmp        eax, 0x2
0000000000009472         jne        loc_9870

0000000000009478         mov        eax, dword [rbp+var_3B4]
000000000000947e         push       qword [rbp+var_3F0]
0000000000009484         push       rax

                     loc_9485:
0000000000009485         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
000000000000948c         mov        r8, qword [rbp+var_3D8]
0000000000009493         mov        rsi, r10
0000000000009496         mov        rcx, 0xffffffffffffffff
000000000000949d         mov        edx, 0x1
00000000000094a2         mov        eax, 0x1
00000000000094a7         mov        qword [rbp+var_430], r10
00000000000094ae         call       j___snprintf_chk                            ; __snprintf_chk
00000000000094b3         pop        r8
00000000000094b5         mov        r10, qword [rbp+var_430]
00000000000094bc         pop        r9
00000000000094be         jmp        loc_91c6
00000000000094c3         align      8

                     loc_94c8:
00000000000094c8         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
00000000000094cc         lea        rdi, qword [r15+r14]
00000000000094d0         shl        rax, 0x5
00000000000094d4         add        rax, qword [rbp+var_3A8]
00000000000094db         movzx      r9d, word [rax+0x10]
00000000000094e0         mov        eax, dword [rbp+var_3E0]
00000000000094e6         cmp        eax, 0x1
00000000000094e9         jne        loc_92be

00000000000094ef         nop

                     loc_94f0:
00000000000094f0         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
00000000000094f6         push       r9

                     loc_94f8:
00000000000094f8         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
00000000000094ff         jmp        loc_92d1
0000000000009504         align      8

                     loc_9508:
0000000000009508         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
000000000000950c         lea        rdi, qword [r15+r14]
0000000000009510         shl        rax, 0x5
0000000000009514         add        rax, qword [rbp+var_3A8]
000000000000951b         movsx      r9d, word [rax+0x10]
0000000000009520         mov        eax, dword [rbp+var_3E0]
0000000000009526         cmp        eax, 0x1
0000000000009529         je         loc_94f0

000000000000952b         cmp        eax, 0x2
000000000000952e         jne        loc_92c7

0000000000009534         nop        dword [rax]

                     loc_9538:
0000000000009538         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
000000000000953c         push       qword [rbp+var_3F0]
0000000000009542         push       r9

                     loc_9544:
0000000000009544         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
000000000000954a         push       rax

                     loc_954b:
000000000000954b         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
0000000000009552         mov        r8, qword [rbp+var_3D8]
0000000000009559         mov        rsi, r10
000000000000955c         mov        rcx, 0xffffffffffffffff
0000000000009563         mov        edx, 0x1
0000000000009568         xor        eax, eax
000000000000956a         mov        qword [rbp+var_430], r10
0000000000009571         call       j___snprintf_chk                            ; __snprintf_chk
0000000000009576         add        rsp, 0x20
000000000000957a         mov        r10, qword [rbp+var_430]
0000000000009581         jmp        loc_91c6
0000000000009586         align      16

                     loc_9590:
0000000000009590         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
0000000000009594         lea        rdi, qword [r15+r14]
0000000000009598         shl        rax, 0x5
000000000000959c         add        rax, qword [rbp+var_3A8]
00000000000095a3         movzx      r9d, byte [rax+0x10]
00000000000095a8         mov        eax, dword [rbp+var_3E0]
00000000000095ae         cmp        eax, 0x1
00000000000095b1         jne        loc_92be

00000000000095b7         jmp        loc_94f0
00000000000095bc         align      64

                     loc_95c0:
00000000000095c0         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
00000000000095c4         lea        rdi, qword [r15+r14]
00000000000095c8         shl        rax, 0x5
00000000000095cc         add        rax, qword [rbp+var_3A8]
00000000000095d3         movsx      r9d, byte [rax+0x10]
00000000000095d8         mov        eax, dword [rbp+var_3E0]
00000000000095de         cmp        eax, 0x1
00000000000095e1         jne        loc_92be

00000000000095e7         jmp        loc_94f0
00000000000095ec         align      16

                     loc_95f0:
00000000000095f0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
00000000000095f3         call       j_malloc                                    ; malloc
00000000000095f8         test       rax, rax
00000000000095fb         mov        rcx, rax
00000000000095fe         je         loc_8d71

0000000000009604         test       r14, r14
0000000000009607         je         loc_96c0

000000000000960d         test       bl, bl
000000000000960f         je         loc_96c0

0000000000009615         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000009618         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000961b         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000961e         call       j_memcpy                                    ; memcpy
0000000000009623         mov        r15, rax
0000000000009626         jmp        loc_9110
000000000000962b         align      16

                     loc_9630:
0000000000009630         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
0000000000009634         push       qword [rbp+var_3F0]
000000000000963a         push       r9
000000000000963c         jmp        loc_9544
0000000000009641         align      8

                     loc_9648:
0000000000009648         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
000000000000964e         push       r9
0000000000009650         jmp        loc_94f8
0000000000009655         align      8

                     loc_9658:
0000000000009658         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
000000000000965c         jmp        loc_9110
0000000000009661         align      8

                     loc_9668:
0000000000009668         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
000000000000966c         jne        loc_9b26

0000000000009672         mov        rax, r14
0000000000009675         add        rax, 0x1
0000000000009679         mov        rbx, rax
000000000000967c         jae        loc_9708

0000000000009682         cmp        r12, 0xffffffffffffffff
0000000000009686         jne        loc_8d65

000000000000968c         mov        rbx, r12

                     loc_968f:
000000000000968f         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_9694:
0000000000009694         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
0000000000009698         add        r13, 0x58
000000000000969c         mov        rcx, qword [r13]
00000000000096a0         add        qword [rbp+var_400], 0x1
00000000000096a8         cmp        rcx, r8
00000000000096ab         jne        loc_8d49

                     loc_96b1:
00000000000096b1         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
00000000000096b4         jmp        loc_8eb3
00000000000096b9         align      64

                     loc_96c0:
00000000000096c0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
00000000000096c3         jmp        loc_9110

                     loc_96c8:
00000000000096c8         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
00000000000096cd         mov        qword [rbp+var_3C8], rax
00000000000096d4         jmp        loc_8d97
00000000000096d9         align      32

                     loc_96e0:
00000000000096e0         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
00000000000096e2         sub        edx, 0x12
00000000000096e5         cmp        edx, 0x4
00000000000096e8         ja         loc_9b26

00000000000096ee         lea        rdi, qword [switch_table_d2ec]              ; switch_table_d2ec
00000000000096f5         mov        rax, qword [rax+0x10]
00000000000096f9         movsxd     rdx, dword [rdi+rdx*4]
00000000000096fd         add        rdx, rdi
0000000000009700         jmp        rdx                                         ; switch statement using table at 0xd2ec, with 5 cases, 0x9840,0x9970,0x9980,0x9990
0000000000009702         align      8

                     loc_9708:
0000000000009708         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
000000000000970b         jae        loc_968f

000000000000970d         test       r12, r12
0000000000009710         jne        loc_9ae0

0000000000009716         cmp        rax, 0xc
000000000000971a         ja         loc_9af2

0000000000009720         mov        r12d, 0xc

                     loc_9726:
0000000000009726         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
000000000000972d         sete       dl
0000000000009730         test       r15, r15
0000000000009733         je         loc_99a0

0000000000009739         test       dl, dl
000000000000973b         jne        loc_99a0

0000000000009741         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000009744         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000009747         call       j_realloc                                   ; realloc
000000000000974c         test       rax, rax
000000000000974f         je         loc_984b

0000000000009755         mov        r15, rax
0000000000009758         jmp        loc_968f
000000000000975d         align      32

                     loc_9760:
0000000000009760         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
000000000000976a         jmp        loc_9057
000000000000976f         align      16

                     loc_9770:
0000000000009770         js         loc_8d65                                    ; CODE XREF=vasnprintf+576

0000000000009776         add        r12, r12
0000000000009779         cmp        r12, rax
000000000000977c         jae        loc_8e56

                     loc_9782:
0000000000009782         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
0000000000009786         je         loc_8d65

000000000000978c         cmp        r15, qword [rbp+var_3E8]
0000000000009793         mov        r12, rax
0000000000009796         sete       dl
0000000000009799         test       r15, r15
000000000000979c         jne        loc_8e69

00000000000097a2         nop        word [rax+rax]

                     loc_97a8:
00000000000097a8         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
00000000000097ab         mov        qword [rbp+var_3E0], r8
00000000000097b2         mov        byte [rbp+var_3D0], dl
00000000000097b8         mov        qword [rbp+var_3C8], rcx
00000000000097bf         call       j_malloc                                    ; malloc
00000000000097c4         test       rax, rax
00000000000097c7         mov        r9, rax
00000000000097ca         mov        rcx, qword [rbp+var_3C8]
00000000000097d1         movzx      edx, byte [rbp+var_3D0]
00000000000097d8         mov        r8, qword [rbp+var_3E0]
00000000000097df         je         loc_8d65

00000000000097e5         test       rbx, rbx
00000000000097e8         je         loc_99f0

00000000000097ee         test       dl, dl
00000000000097f0         je         loc_99f0

00000000000097f6         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000097f9         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000097fc         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000097ff         mov        qword [rbp+var_3D0], r8
0000000000009806         mov        qword [rbp+var_3C8], rcx
000000000000980d         call       j_memcpy                                    ; memcpy
0000000000009812         mov        rcx, qword [rbp+var_3C8]
0000000000009819         mov        r15, rax
000000000000981c         mov        r8, qword [rbp+var_3D0]
0000000000009823         jmp        loc_8ea4
0000000000009828         align      16

                     loc_9830:
0000000000009830         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
0000000000009833         jmp        loc_8ea4
0000000000009838         align      64

                     loc_9840:
0000000000009840         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
0000000000009843         mov        rbx, r14
0000000000009846         jmp        loc_9694

                     loc_984b:
000000000000984b         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
0000000000009850         mov        qword [rbp+var_3C8], rax
0000000000009857         nop        word [rax+rax]

                     loc_9860:
0000000000009860         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
0000000000009863         call       j_free                                      ; free
0000000000009868         jmp        loc_8d83
000000000000986d         align      16

                     loc_9870:
0000000000009870         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
0000000000009877         mov        r8, qword [rbp+var_3D8]
000000000000987e         mov        rsi, r10
0000000000009881         mov        rcx, 0xffffffffffffffff
0000000000009888         mov        edx, 0x1
000000000000988d         mov        eax, 0x1
0000000000009892         mov        qword [rbp+var_430], r10
0000000000009899         call       j___snprintf_chk                            ; __snprintf_chk
000000000000989e         mov        r10, qword [rbp+var_430]
00000000000098a5         jmp        loc_91c6
00000000000098aa         align      16

                     loc_98b0:
00000000000098b0         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
00000000000098b4         mov        r9, qword [rbp+var_3F0]
00000000000098bb         fstp       tword [rsp+0x440+var_440]
00000000000098be         jmp        loc_9199
00000000000098c3         align      8

                     loc_98c8:
00000000000098c8         js         loc_8d65                                    ; CODE XREF=vasnprintf+1187

00000000000098ce         add        r12, r12
00000000000098d1         cmp        r12, rax
00000000000098d4         jae        loc_90b9

00000000000098da         nop        word [rax+rax]

                     loc_98e0:
00000000000098e0         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
00000000000098e3         jne        loc_8d65

00000000000098e9         cmp        rax, 0xffffffffffffffff
00000000000098ed         je         loc_8d65

00000000000098f3         cmp        r15, qword [rbp+var_3E8]
00000000000098fa         mov        r12, rax
00000000000098fd         sete       dl
0000000000009900         test       r15, r15
0000000000009903         jne        loc_90cc

0000000000009909         nop        dword [rax]

                     loc_9910:
0000000000009910         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
0000000000009913         mov        byte [rbp+var_3C8], dl
0000000000009919         call       j_malloc                                    ; malloc
000000000000991e         test       rax, rax
0000000000009921         mov        rcx, rax
0000000000009924         movzx      edx, byte [rbp+var_3C8]
000000000000992b         je         loc_8d65

0000000000009931         test       r14, r14
0000000000009934         je         loc_9ad0

000000000000993a         test       dl, dl
000000000000993c         je         loc_9ad0

0000000000009942         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000009945         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000009948         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000994b         call       j_memcpy                                    ; memcpy
0000000000009950         mov        r15, rax
0000000000009953         jmp        loc_90eb
0000000000009958         align      32

                     loc_9960:
0000000000009960         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
0000000000009963         add        rbx, 0x1
0000000000009967         jmp        loc_901b
000000000000996c         align      16

                     loc_9970:
0000000000009970         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
0000000000009973         mov        rbx, r14
0000000000009976         jmp        loc_9694
000000000000997b         align      128

                     loc_9980:
0000000000009980         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
0000000000009983         mov        rbx, r14
0000000000009986         jmp        loc_9694
000000000000998b         align      16

                     loc_9990:
0000000000009990         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
0000000000009994         mov        rbx, r14
0000000000009997         jmp        loc_9694
000000000000999c         align      32

                     loc_99a0:
00000000000099a0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
00000000000099a3         mov        byte [rbp+var_3C8], dl
00000000000099a9         call       j_malloc                                    ; malloc
00000000000099ae         test       rax, rax
00000000000099b1         mov        rcx, rax
00000000000099b4         movzx      edx, byte [rbp+var_3C8]
00000000000099bb         je         loc_8d65

00000000000099c1         test       r14, r14
00000000000099c4         je         loc_9b04

00000000000099ca         test       dl, dl
00000000000099cc         je         loc_9b04

00000000000099d2         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000099d5         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000099d8         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000099db         call       j_memcpy                                    ; memcpy
00000000000099e0         mov        r15, rax
00000000000099e3         jmp        loc_968f
00000000000099e8         align      16

                     loc_99f0:
00000000000099f0         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
00000000000099f3         jmp        loc_8ea4
00000000000099f8         align      512

                     loc_9a00:
0000000000009a00         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
0000000000009a04         push       qword [rbp+var_3F0]
0000000000009a0a         jmp        loc_9485
0000000000009a0f         align      16

                     loc_9a10:
0000000000009a10         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
0000000000009a14         push       qword [rbp+var_3F0]
0000000000009a1a         sub        rsp, 0x10
0000000000009a1e         fstp       tword [rsp+0x450+var_450]
0000000000009a21         jmp        loc_954b
0000000000009a26         align      16

                     loc_9a30:
0000000000009a30         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
0000000000009a37         mov        edi, dword [rbp+var_424]
0000000000009a3d         movsxd     rbx, ecx
0000000000009a40         add        rbx, r14
0000000000009a43         mov        dword [rax], edi
0000000000009a45         jmp        loc_9694
0000000000009a4a         align      16

                     loc_9a50:
0000000000009a50         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
0000000000009a57         je         loc_9a62

0000000000009a59         test       r15, r15
0000000000009a5c         jne        loc_9b19

                     loc_9a62:
0000000000009a62         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
0000000000009a69         test       rax, rax
0000000000009a6c         je         loc_9a76

0000000000009a6e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000009a71         call       j_free                                      ; free

                     loc_9a76:
0000000000009a76         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
0000000000009a7d         mov        rdi, qword [rbp+var_2B8]
0000000000009a84         add        rax, 0x20
0000000000009a88         cmp        rdi, rax
0000000000009a8b         je         loc_9a92

0000000000009a8d         call       j_free                                      ; free

                     loc_9a92:
0000000000009a92         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
0000000000009a99         mov        rdi, qword [rbp+var_3A8]
0000000000009aa0         add        rax, 0x10
0000000000009aa4         cmp        rdi, rax
0000000000009aa7         je         loc_9aae

0000000000009aa9         call       j_free                                      ; free

                     loc_9aae:
0000000000009aae         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
0000000000009ab5         xor        r15d, r15d
0000000000009ab8         mov        dword [rax], 0x4b
0000000000009abe         jmp        loc_8ddf
0000000000009ac3         align      8

                     loc_9ac8:
0000000000009ac8         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
0000000000009acb         jmp        loc_8ddf

                     loc_9ad0:
0000000000009ad0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
0000000000009ad3         jmp        loc_90eb
0000000000009ad8         align      32

                     loc_9ae0:
0000000000009ae0         js         loc_8d65                                    ; CODE XREF=vasnprintf+2832

0000000000009ae6         add        r12, r12
0000000000009ae9         cmp        r12, rax
0000000000009aec         jae        loc_9726

                     loc_9af2:
0000000000009af2         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
0000000000009af6         je         loc_8d65

0000000000009afc         mov        r12, rax
0000000000009aff         jmp        loc_9726

                     loc_9b04:
0000000000009b04         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
0000000000009b07         jmp        loc_968f

                     loc_9b0c:
0000000000009b0c         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
0000000000009b0f         call       j_free                                      ; free
0000000000009b14         jmp        loc_9362

                     loc_9b19:
0000000000009b19         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
0000000000009b1c         call       j_free                                      ; free
0000000000009b21         jmp        loc_9a62

                     loc_9b26:
0000000000009b26         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
0000000000009b2b         align      16

                     loc_9b30:
0000000000009b30         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
0000000000009b37         mov        rdi, qword [rbp+var_2B8]
0000000000009b3e         add        rax, 0x20
0000000000009b42         cmp        rdi, rax
0000000000009b45         je         loc_9b4c

0000000000009b47         call       j_free                                      ; free

                     loc_9b4c:
0000000000009b4c         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
0000000000009b53         mov        rdi, qword [rbp+var_3A8]
0000000000009b5a         add        rax, 0x10
0000000000009b5e         cmp        rdi, rax
0000000000009b61         je         loc_9b68

0000000000009b63         call       j_free                                      ; free

                     loc_9b68:
0000000000009b68         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
0000000000009b6d         xor        r15d, r15d
0000000000009b70         mov        dword [rax], 0x16
0000000000009b76         jmp        loc_8ddf

                     loc_9b7b:
0000000000009b7b         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
0000000000009b7e         xor        eax, eax
0000000000009b80         add        rbx, 0x1
0000000000009b84         jb         loc_9c90

0000000000009b8a         cmp        r12, rbx
0000000000009b8d         jae        loc_9bdc

0000000000009b8f         test       r12, r12
0000000000009b92         jne        loc_9cc9

0000000000009b98         cmp        rbx, 0xc
0000000000009b9c         ja         loc_9cae

0000000000009ba2         mov        r12d, 0xc

                     loc_9ba8:
0000000000009ba8         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
0000000000009baf         sete       r13b
0000000000009bb3         test       r15, r15
0000000000009bb6         je         loc_9c5c

0000000000009bbc         test       r13b, r13b
0000000000009bbf         jne        loc_9c5c

0000000000009bc5         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000009bc8         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000009bcb         call       j_realloc                                   ; realloc
0000000000009bd0         test       rax, rax
0000000000009bd3         je         loc_984b

0000000000009bd9         mov        r15, rax

                     loc_9bdc:
0000000000009bdc         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
0000000000009be3         mov        byte [r15+r14], 0x0
0000000000009be8         je         loc_9c01

0000000000009bea         cmp        r12, rbx
0000000000009bed         jbe        loc_9c01

0000000000009bef         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000009bf2         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
0000000000009bf5         call       j_realloc                                   ; realloc
0000000000009bfa         test       rax, rax
0000000000009bfd         cmovne     r15, rax

                     loc_9c01:
0000000000009c01         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
0000000000009c08         test       rax, rax
0000000000009c0b         je         loc_9c15

0000000000009c0d         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000009c10         call       j_free                                      ; free

                     loc_9c15:
0000000000009c15         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
0000000000009c1c         mov        rdi, qword [rbp+var_2B8]
0000000000009c23         add        rax, 0x20
0000000000009c27         cmp        rdi, rax
0000000000009c2a         je         loc_9c31

0000000000009c2c         call       j_free                                      ; free

                     loc_9c31:
0000000000009c31         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
0000000000009c38         mov        rdi, qword [rbp+var_3A8]
0000000000009c3f         add        rax, 0x10
0000000000009c43         cmp        rdi, rax
0000000000009c46         je         loc_9c4d

0000000000009c48         call       j_free                                      ; free

                     loc_9c4d:
0000000000009c4d         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
0000000000009c54         mov        qword [rax], r14
0000000000009c57         jmp        loc_8ddf

                     loc_9c5c:
0000000000009c5c         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
0000000000009c5f         call       j_malloc                                    ; malloc
0000000000009c64         test       rax, rax
0000000000009c67         mov        rcx, rax
0000000000009c6a         je         loc_8d65

0000000000009c70         test       r14, r14
0000000000009c73         je         loc_9ce0

0000000000009c75         test       r13b, r13b
0000000000009c78         je         loc_9ce0

0000000000009c7a         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000009c7d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000009c80         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000009c83         call       j_memcpy                                    ; memcpy
0000000000009c88         mov        r15, rax
0000000000009c8b         jmp        loc_9bdc

                     loc_9c90:
0000000000009c90         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
0000000000009c94         mov        eax, 0x1
0000000000009c99         je         loc_9bdc

0000000000009c9f         test       r12, r12
0000000000009ca2         je         loc_8d65

0000000000009ca8         js         loc_8d65

                     loc_9cae:
0000000000009cae         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
0000000000009cb1         jne        loc_8d65

0000000000009cb7         cmp        rbx, 0xffffffffffffffff
0000000000009cbb         je         loc_8d65

0000000000009cc1         mov        r12, rbx
0000000000009cc4         jmp        loc_9ba8

                     loc_9cc9:
0000000000009cc9         js         loc_8d65                                    ; CODE XREF=vasnprintf+3986

0000000000009ccf         add        r12, r12
0000000000009cd2         cmp        r12, rbx
0000000000009cd5         jae        loc_9ba8

0000000000009cdb         jmp        loc_9cae
0000000000009cdd         align      32

                     loc_9ce0:
0000000000009ce0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
0000000000009ce3         jmp        loc_9bdc

                     loc_9ce8:
0000000000009ce8         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
0000000000009cec         je         loc_9110

0000000000009cf2         jmp        loc_8d71

                     loc_9cf7:
0000000000009cf7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_9cfc:
0000000000009cfc         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
0000000000009d00         mov        edx, 0x1
0000000000009d05         je         loc_90eb

0000000000009d0b         test       r12, r12
0000000000009d0e         je         loc_8d65

0000000000009d14         jns        loc_98e0

0000000000009d1a         jmp        loc_8d65
0000000000009d1f         align      32                                          ; End of unwind block (FDE at 0xed0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
0000000000009d20         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0xed3c), CODE XREF=vasnprintf+108
0000000000009d24         mov        rax, qword [rsi+8]
0000000000009d28         je         loc_9d8d

0000000000009d2a         lea        r8, qword [aNull+16]                        ; 0xd310
0000000000009d31         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
0000000000009d38         lea        r9, qword [aNull]                           ; "(NULL)"
0000000000009d3f         xor        ecx, ecx
0000000000009d41         nop        dword [rax]
0000000000009d48         cmp        dword [rax], 0x16
0000000000009d4b         ja         loc_9d90

0000000000009d4d         mov        edx, dword [rax]
0000000000009d4f         movsxd     rdx, dword [r8+rdx*4]
0000000000009d53         add        rdx, r8
0000000000009d56         jmp        rdx
                        ; endp
0000000000009d58         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d60:
0000000000009d60         mov        rdx, qword [rdi+8]
0000000000009d64         add        rdx, 0xf
0000000000009d68         and        rdx, 0xfffffffffffffff0
0000000000009d6c         lea        r11, qword [rdx+0x10]
0000000000009d70         mov        qword [rdi+8], r11
0000000000009d74         fld        tword [rdx]
0000000000009d76         fstp       tword [rax+0x10]
0000000000009d79         nop        dword [rax]
0000000000009d80         add        rcx, 0x1                                    ; CODE XREF=sub_9d96+137, sub_9d96+183
0000000000009d84         add        rax, 0x20
0000000000009d88         cmp        qword [rsi], rcx
0000000000009d8b         ja         printf_fetchargs+40
                        ; endp

                     loc_9d8d:
0000000000009d8d         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
0000000000009d8f         ret
                        ; endp

                     loc_9d90:
0000000000009d90         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
0000000000009d95         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d96:
0000000000009d96         mov        r11d, dword [rdi]
0000000000009d99         cmp        r11d, 0x2f
0000000000009d9d         ja         loc_9eda

0000000000009da3         mov        edx, r11d
0000000000009da6         add        rdx, qword [rdi+0x10]
0000000000009daa         add        r11d, 0x8
0000000000009dae         mov        dword [rdi], r11d

                     loc_9db1:
0000000000009db1         mov        rdx, qword [rdx]                            ; CODE XREF=sub_9e80+102
0000000000009db4         mov        qword [rax+0x10], rdx
0000000000009db8         jmp        sub_9d60+32
                        ; endp
0000000000009dba         mov        r11d, dword [rdi]
0000000000009dbd         cmp        r11d, 0x2f
0000000000009dc1         ja         sub_9efc                                    ; sub_9efc
0000000000009dc7         mov        edx, r11d
0000000000009dca         add        rdx, qword [rdi+0x10]
0000000000009dce         add        r11d, 0x8
0000000000009dd2         mov        dword [rdi], r11d

                     loc_9dd5:
0000000000009dd5         mov        edx, dword [rdx]                            ; CODE XREF=sub_9efc+12
0000000000009dd7         mov        dword [rax+0x10], edx
0000000000009dda         jmp        sub_9d60+32
                        ; endp
0000000000009ddc         mov        r11d, dword [rdi]
0000000000009ddf         cmp        r11d, 0x2f
0000000000009de3         ja         sub_9eeb                                    ; sub_9eeb
0000000000009de9         mov        edx, r11d
0000000000009dec         add        rdx, qword [rdi+0x10]
0000000000009df0         add        r11d, 0x8
0000000000009df4         mov        dword [rdi], r11d

                     loc_9df7:
0000000000009df7         mov        edx, dword [rdx]                            ; CODE XREF=sub_9eeb+12
0000000000009df9         mov        byte [rax+0x10], dl
0000000000009dfc         jmp        sub_9d60+32
                        ; endp
0000000000009dfe         mov        r11d, dword [rdi]
0000000000009e01         cmp        r11d, 0x2f
0000000000009e05         ja         sub_9e80+42
0000000000009e0b         mov        edx, r11d
0000000000009e0e         add        rdx, qword [rdi+0x10]
0000000000009e12         add        r11d, 0x8
0000000000009e16         mov        dword [rdi], r11d
0000000000009e19         mov        edx, dword [rdx]                            ; CODE XREF=sub_9e80+54
0000000000009e1b         mov        word [rax+0x10], dx
0000000000009e1f         jmp        sub_9d60+32
0000000000009e24         mov        r11d, dword [rdi]
0000000000009e27         cmp        r11d, 0x2f
0000000000009e2b         ja         sub_9e80+59
0000000000009e31         mov        edx, r11d
0000000000009e34         add        rdx, qword [rdi+0x10]
0000000000009e38         add        r11d, 0x8
0000000000009e3c         mov        dword [rdi], r11d
0000000000009e3f         mov        rdx, qword [rdx]                            ; CODE XREF=sub_9e80+71
0000000000009e42         test       rdx, rdx
0000000000009e45         cmove      rdx, r9
0000000000009e49         mov        qword [rax+0x10], rdx
0000000000009e4d         jmp        sub_9d60+32
0000000000009e52         mov        r11d, dword [rdi+4]
0000000000009e56         cmp        r11d, 0xaf
0000000000009e5d         ja         sub_9f0d                                    ; sub_9f0d
0000000000009e63         mov        edx, r11d
0000000000009e66         add        rdx, qword [rdi+0x10]
0000000000009e6a         add        r11d, 0x10
0000000000009e6e         mov        dword [rdi+4], r11d

                     loc_9e72:
0000000000009e72         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_9f0d+12
0000000000009e76         movsd      qword [rax+0x10], xmm0
0000000000009e7b         jmp        sub_9d60+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9e80:
0000000000009e80         mov        r11d, dword [rdi]
0000000000009e83         cmp        r11d, 0x2f
0000000000009e87         ja         loc_9ecc

0000000000009e89         mov        edx, r11d
0000000000009e8c         add        rdx, qword [rdi+0x10]
0000000000009e90         add        r11d, 0x8
0000000000009e94         mov        dword [rdi], r11d

                     loc_9e97:
0000000000009e97         mov        rdx, qword [rdx]                            ; CODE XREF=sub_9e80+88
0000000000009e9a         test       rdx, rdx
0000000000009e9d         cmove      rdx, r10
0000000000009ea1         mov        qword [rax+0x10], rdx
0000000000009ea5         jmp        sub_9d60+32
                        ; endp
0000000000009eaa         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9d96+111
0000000000009eae         lea        r11, qword [rdx+8]
0000000000009eb2         mov        qword [rdi+8], r11
0000000000009eb6         jmp        sub_9d96+131
0000000000009ebb         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9d96+149
0000000000009ebf         lea        r11, qword [rdx+8]
0000000000009ec3         mov        qword [rdi+8], r11
0000000000009ec7         jmp        sub_9d96+169

                     loc_9ecc:
0000000000009ecc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9e80+7
0000000000009ed0         lea        r11, qword [rdx+8]
0000000000009ed4         mov        qword [rdi+8], r11
0000000000009ed8         jmp        loc_9e97

                     loc_9eda:
0000000000009eda         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9d96+7
0000000000009ede         lea        r11, qword [rdx+8]
0000000000009ee2         mov        qword [rdi+8], r11
0000000000009ee6         jmp        loc_9db1


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9eeb:
0000000000009eeb         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9d96+77
0000000000009eef         lea        r11, qword [rdx+8]
0000000000009ef3         mov        qword [rdi+8], r11
0000000000009ef7         jmp        loc_9df7


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9efc:
0000000000009efc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9d96+43
0000000000009f00         lea        r11, qword [rdx+8]
0000000000009f04         mov        qword [rdi+8], r11
0000000000009f08         jmp        loc_9dd5


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9f0d:
0000000000009f0d         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_9d96+199
0000000000009f11         lea        r11, qword [rdx+8]
0000000000009f15         mov        qword [rdi+8], r11
0000000000009f19         jmp        loc_9e72


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9f1e:
0000000000009f1e         nop                                                    ; End of unwind block (FDE at 0xed3c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
0000000000009f20         push       r15                                         ; Begin of unwind block (FDE at 0xed54), CODE XREF=vasnprintf+89
0000000000009f22         push       r14
0000000000009f24         lea        rcx, qword [rsi+0x20]
0000000000009f28         push       r13
0000000000009f2a         push       r12
0000000000009f2c         lea        rax, qword [rdx+0x10]
0000000000009f30         push       rbp
0000000000009f31         push       rbx
0000000000009f32         mov        r14, rsi
0000000000009f35         mov        r15, rdx
0000000000009f38         xor        ebx, ebx
0000000000009f3a         mov        r9d, 0x7
0000000000009f40         sub        rsp, 0x58
0000000000009f44         mov        r10d, 0x7
0000000000009f4a         mov        qword [rsi], 0x0
0000000000009f51         mov        qword [rsi+8], rcx
0000000000009f55         mov        qword [rsp+0x88+var_60], rcx
0000000000009f5a         mov        r8, 0xffffffffffffffff
0000000000009f61         mov        qword [rdx], 0x0
0000000000009f68         mov        qword [rsp+0x88+var_80], rax
0000000000009f6d         mov        qword [rdx+8], rax
0000000000009f71         mov        qword [rsp+0x88+var_70], 0x0
0000000000009f7a         mov        qword [rsp+0x88+var_78], 0x0
0000000000009f83         mov        qword [rsp+0x88+var_68], 0x0
0000000000009f8c         jmp        loc_9f9b
0000000000009f8e         align      16

                     loc_9f90:
0000000000009f90         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
0000000000009f92         lea        rbp, qword [rdi+1]
0000000000009f96         je         loc_9fd8

                     loc_9f98:
0000000000009f98         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_9f9b:
0000000000009f9b         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
0000000000009f9e         test       al, al
0000000000009fa0         jne        loc_9f90

0000000000009fa2         lea        rax, qword [rbx+rbx*4]
0000000000009fa6         lea        rax, qword [rbx+rax*2]
0000000000009faa         mov        qword [rcx+rax*8], rdi
0000000000009fae         mov        rax, qword [rsp+0x88+var_78]
0000000000009fb3         mov        qword [r14+0x10], rax
0000000000009fb7         mov        rax, qword [rsp+0x88+var_70]
0000000000009fbc         mov        qword [r14+0x18], rax
0000000000009fc0         xor        eax, eax

                     loc_9fc2:
0000000000009fc2         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
0000000000009fc6         pop        rbx
0000000000009fc7         pop        rbp
0000000000009fc8         pop        r12
0000000000009fca         pop        r13
0000000000009fcc         pop        r14
0000000000009fce         pop        r15
0000000000009fd0         ret
                        ; endp
0000000000009fd1         align      8

                     loc_9fd8:
0000000000009fd8         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
0000000000009fdc         mov        r13, r8
0000000000009fdf         lea        rax, qword [rbx+rax*2]
0000000000009fe3         lea        r12, qword [rcx+rax*8]
0000000000009fe7         mov        qword [r12], rdi
0000000000009feb         mov        dword [r12+0x10], 0x0
0000000000009ff4         mov        qword [r12+0x18], 0x0
0000000000009ffd         mov        qword [r12+0x20], 0x0
000000000000a006         mov        qword [r12+0x28], r8
000000000000a00b         mov        qword [r12+0x30], 0x0
000000000000a014         mov        qword [r12+0x38], 0x0
000000000000a01d         mov        qword [r12+0x40], r8
000000000000a022         mov        qword [r12+0x50], r8
000000000000a027         movzx      ebx, byte [rdi+1]
000000000000a02b         lea        eax, dword [rbx-0x30]
000000000000a02e         cmp        al, 0x9
000000000000a030         ja         loc_a06e

000000000000a032         jmp        loc_a46a
000000000000a037         align      64

                     loc_a040:
000000000000a040         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
000000000000a043         je         loc_a088

000000000000a045         cmp        bl, 0x2b
000000000000a048         je         loc_a090

000000000000a04a         cmp        bl, 0x20
000000000000a04d         je         loc_a0a0

000000000000a04f         cmp        bl, 0x23
000000000000a052         je         loc_a0b0

000000000000a054         cmp        bl, 0x30
000000000000a057         je         loc_a0c0

000000000000a059         cmp        bl, 0x49
000000000000a05c         jne        loc_a0d0

000000000000a05e         or         dword [r12+0x10], 0x40
000000000000a064         nop        dword [rax]

                     loc_a068:
000000000000a068         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
000000000000a06b         mov        rbp, rax

                     loc_a06e:
000000000000a06e         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
000000000000a072         cmp        bl, 0x27
000000000000a075         mov        rdx, rax
000000000000a078         jne        loc_a040

000000000000a07a         or         dword [r12+0x10], 0x1
000000000000a080         jmp        loc_a068
000000000000a082         align      8

                     loc_a088:
000000000000a088         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000a08e         jmp        loc_a068

                     loc_a090:
000000000000a090         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
000000000000a096         jmp        loc_a068
000000000000a098         align      32

                     loc_a0a0:
000000000000a0a0         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
000000000000a0a6         jmp        loc_a068
000000000000a0a8         align      16

                     loc_a0b0:
000000000000a0b0         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
000000000000a0b6         jmp        loc_a068
000000000000a0b8         align      64

                     loc_a0c0:
000000000000a0c0         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
000000000000a0c6         jmp        loc_a068
000000000000a0c8         align      16

                     loc_a0d0:
000000000000a0d0         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
000000000000a0d3         je         loc_a289

000000000000a0d9         lea        ecx, dword [rbx-0x30]
000000000000a0dc         cmp        cl, 0x9
000000000000a0df         jbe        loc_a4f7

                     loc_a0e5:
000000000000a0e5         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
000000000000a0e8         je         loc_a3bf

                     loc_a0ee:
000000000000a0ee         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
000000000000a0f0         mov        esi, 0x1
000000000000a0f5         jmp        loc_a127
000000000000a0f7         align      256

                     loc_a100:
000000000000a100         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
000000000000a103         je         loc_a140

000000000000a105         cmp        bl, 0x6c
000000000000a108         je         loc_a120

000000000000a10a         cmp        bl, 0x6a
000000000000a10d         je         loc_a120

000000000000a10f         mov        edx, ebx
000000000000a111         and        edx, 0xffffffdf
000000000000a114         cmp        dl, 0x5a
000000000000a117         je         loc_a120

000000000000a119         cmp        bl, 0x74
000000000000a11c         jne        loc_a148

000000000000a11e         nop

                     loc_a120:
000000000000a120         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_a123:
000000000000a123         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_a127:
000000000000a127         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
000000000000a12b         cmp        bl, 0x68
000000000000a12e         jne        loc_a100

000000000000a130         mov        ecx, eax
000000000000a132         mov        edx, esi
000000000000a134         and        ecx, 0x1
000000000000a137         shl        edx, cl
000000000000a139         or         eax, edx
000000000000a13b         jmp        loc_a123
000000000000a13d         align      64

                     loc_a140:
000000000000a140         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
000000000000a143         jmp        loc_a123
000000000000a145         align      8

                     loc_a148:
000000000000a148         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000a14b         cmp        dl, 0x53
000000000000a14e         ja         loc_a76b

000000000000a154         lea        rcx, qword [switch_table_d38c]              ; switch_table_d38c
000000000000a15b         movzx      edx, dl
000000000000a15e         movsxd     rdx, dword [rcx+rdx*4]
000000000000a162         add        rdx, rcx
000000000000a165         jmp        rdx                                         ; switch statement using table at 0xd38c, with 84 cases, 0xa167,0xa1db,0xa61c,0xa668,0xa67b,0xa6c8,0xa6db,0xa6fc,0xa70c,0xa760,0xa76b

                     loc_a167:
000000000000a167         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
000000000000a16d         mov        ebx, 0x73
000000000000a172         nop        word [rax+rax]

                     loc_a178:
000000000000a178         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000a17c         je         loc_a837

000000000000a182         mov        qword [r12+0x50], r13

                     loc_a187:
000000000000a187         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000a18a         mov        rcx, qword [r15+8]
000000000000a18e         jbe        loc_a7b0

                     loc_a194:
000000000000a194         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
000000000000a197         mov        rdx, rax
000000000000a19a         shl        rdx, 0x5
000000000000a19e         add        rdx, rcx
000000000000a1a1         cmp        rax, r13
000000000000a1a4         ja         loc_a1c6

000000000000a1a6         nop        word [cs:rax+rax]

                     loc_a1b0:
000000000000a1b0         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
000000000000a1b4         mov        dword [rdx], 0x0
000000000000a1ba         add        rdx, 0x20
000000000000a1be         cmp        rax, r13
000000000000a1c1         jbe        loc_a1b0

000000000000a1c3         mov        qword [r15], rax

                     loc_a1c6:
000000000000a1c6         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000a1ca         lea        rax, qword [rcx+r13]
000000000000a1ce         mov        edx, dword [rax]
000000000000a1d0         test       edx, edx
000000000000a1d2         jne        loc_a7a3

000000000000a1d8         mov        dword [rax], r11d

                     loc_a1db:
000000000000a1db         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
000000000000a1e0         mov        rax, qword [r14]
000000000000a1e3         mov        qword [r12+8], rbp
000000000000a1e8         lea        rbx, qword [rax+1]
000000000000a1ec         cmp        r10, rbx
000000000000a1ef         mov        qword [r14], rbx
000000000000a1f2         ja         loc_a280

000000000000a1f8         test       r10, r10
000000000000a1fb         js         loc_aba7

000000000000a201         add        r10, r10
000000000000a204         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000a20e         cmp        r10, rax
000000000000a211         ja         loc_aba7

000000000000a217         lea        rax, qword [r10+r10*4]
000000000000a21b         mov        rdi, qword [r14+8]
000000000000a21f         cmp        qword [rsp+0x88+var_60], rdi
000000000000a224         mov        qword [rsp+0x88+var_48], r9
000000000000a229         mov        qword [rsp+0x88+var_50], r10
000000000000a22e         lea        rax, qword [r10+rax*2]
000000000000a232         mov        qword [rsp+0x88+var_58], r8
000000000000a237         lea        rsi, qword [rax*8]
000000000000a23f         je         loc_a8fd

000000000000a245         call       j_realloc                                   ; realloc
000000000000a24a         test       rax, rax
000000000000a24d         mov        rcx, rax
000000000000a250         mov        r8, qword [rsp+0x88+var_58]
000000000000a255         mov        r10, qword [rsp+0x88+var_50]
000000000000a25a         mov        r9, qword [rsp+0x88+var_48]
000000000000a25f         je         loc_aba7

000000000000a265         mov        rax, qword [rsp+0x88+var_60]
000000000000a26a         cmp        rax, qword [r14+8]
000000000000a26e         mov        rbx, qword [r14]
000000000000a271         je         loc_a920

                     loc_a277:
000000000000a277         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000a27b         jmp        loc_9f98

                     loc_a280:
000000000000a280         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
000000000000a284         jmp        loc_9f98

                     loc_a289:
000000000000a289         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000a28e         mov        ecx, 0x1
000000000000a293         mov        qword [r12+0x18], rbp
000000000000a298         mov        qword [r12+0x20], rax
000000000000a29d         test       rsi, rsi
000000000000a2a0         cmovne     rcx, rsi
000000000000a2a4         mov        qword [rsp+0x88+var_78], rcx
000000000000a2a9         movzx      ecx, byte [rbp+1]
000000000000a2ad         lea        esi, dword [rcx-0x30]
000000000000a2b0         cmp        sil, 0x9
000000000000a2b4         jbe        loc_a595

                     loc_a2ba:
000000000000a2ba         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000a2bf         cmp        rsi, 0xffffffffffffffff
000000000000a2c3         lea        rdx, qword [rsi+1]
000000000000a2c7         mov        qword [r12+0x28], rsi
000000000000a2cc         je         loc_a76b

000000000000a2d2         mov        rbx, qword [rsp+0x88+var_68]
000000000000a2d7         mov        rbp, rax
000000000000a2da         mov        qword [rsp+0x88+var_68], rdx

                     loc_a2df:
000000000000a2df         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
000000000000a2e2         mov        rcx, qword [r15+8]
000000000000a2e6         ja         loc_a962

000000000000a2ec         add        r9, r9
000000000000a2ef         lea        rax, qword [rbx+1]
000000000000a2f3         cmp        r9, rbx
000000000000a2f6         cmovbe     r9, rax
000000000000a2fa         movabs     rax, 0x7ffffffffffffff
000000000000a304         cmp        r9, rax
000000000000a307         ja         loc_abab

000000000000a30d         mov        rsi, r9
000000000000a310         mov        qword [rsp+0x88+var_48], r9
000000000000a315         mov        qword [rsp+0x88+var_50], r10
000000000000a31a         shl        rsi, 0x5
000000000000a31e         cmp        qword [rsp+0x88+var_80], rcx
000000000000a323         mov        qword [rsp+0x88+var_58], r8
000000000000a328         je         loc_aa41

000000000000a32e         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000a331         call       j_realloc                                   ; realloc
000000000000a336         mov        rdx, qword [r15+8]
000000000000a33a         mov        r8, qword [rsp+0x88+var_58]
000000000000a33f         mov        rcx, rax
000000000000a342         mov        r10, qword [rsp+0x88+var_50]
000000000000a347         mov        r9, qword [rsp+0x88+var_48]

                     loc_a34c:
000000000000a34c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
000000000000a34f         je         loc_ac07

000000000000a355         cmp        qword [rsp+0x88+var_80], rdx
000000000000a35a         mov        rax, qword [r15]
000000000000a35d         je         loc_ab1b

                     loc_a363:
000000000000a363         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_a367:
000000000000a367         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
000000000000a36a         shl        rdx, 0x5
000000000000a36e         add        rdx, rcx
000000000000a371         cmp        rax, rbx
000000000000a374         ja         loc_a396

000000000000a376         nop        word [cs:rax+rax]

                     loc_a380:
000000000000a380         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
000000000000a384         mov        dword [rdx], 0x0
000000000000a38a         add        rdx, 0x20
000000000000a38e         cmp        rax, rbx
000000000000a391         jbe        loc_a380

000000000000a393         mov        qword [r15], rax

                     loc_a396:
000000000000a396         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
000000000000a39a         lea        rax, qword [rcx+rbx]
000000000000a39e         mov        edx, dword [rax]
000000000000a3a0         test       edx, edx
000000000000a3a2         jne        loc_a87b

000000000000a3a8         mov        dword [rax], 0x5
000000000000a3ae         movzx      ebx, byte [rbp]
000000000000a3b2         lea        rdx, qword [rbp+1]
000000000000a3b6         cmp        bl, 0x2e
000000000000a3b9         jne        loc_a0ee

                     loc_a3bf:
000000000000a3bf         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
000000000000a3c3         mov        qword [r12+0x30], rbp
000000000000a3c8         jne        loc_a54e

000000000000a3ce         mov        rsi, qword [rsp+0x88+var_70]
000000000000a3d3         lea        r11, qword [rbp+2]
000000000000a3d7         mov        eax, 0x2
000000000000a3dc         mov        qword [r12+0x38], r11
000000000000a3e1         cmp        rsi, 0x2
000000000000a3e5         cmovae     rax, rsi
000000000000a3e9         mov        qword [rsp+0x88+var_70], rax
000000000000a3ee         movsx      eax, byte [rbp+2]
000000000000a3f2         lea        edx, dword [rax-0x30]
000000000000a3f5         cmp        dl, 0x9
000000000000a3f8         jbe        loc_aa8c

                     loc_a3fe:
000000000000a3fe         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
000000000000a403         cmp        rbx, 0xffffffffffffffff
000000000000a407         je         loc_aa65

                     loc_a40d:
000000000000a40d         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
000000000000a410         mov        rcx, qword [r15+8]
000000000000a414         jbe        loc_a97f

000000000000a41a         mov        rax, qword [r15]

                     loc_a41d:
000000000000a41d         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
000000000000a420         shl        rdx, 0x5
000000000000a424         add        rdx, rcx
000000000000a427         cmp        rax, rbx
000000000000a42a         ja         loc_a446

000000000000a42c         nop        dword [rax]

                     loc_a430:
000000000000a430         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
000000000000a434         mov        dword [rdx], 0x0
000000000000a43a         add        rdx, 0x20
000000000000a43e         cmp        rax, rbx
000000000000a441         jbe        loc_a430

000000000000a443         mov        qword [r15], rax

                     loc_a446:
000000000000a446         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
000000000000a44a         lea        rax, qword [rcx+rbx]
000000000000a44e         mov        edx, dword [rax]
000000000000a450         test       edx, edx
000000000000a452         jne        loc_a96a

000000000000a458         mov        dword [rax], 0x5
000000000000a45e         mov        rbp, r11
000000000000a461         movzx      ebx, byte [r11]
000000000000a465         jmp        loc_a0ee

                     loc_a46a:
000000000000a46a         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
000000000000a46d         nop        dword [rax]

                     loc_a470:
000000000000a470         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
000000000000a474         movzx      edx, byte [rax]
000000000000a477         lea        ecx, dword [rdx-0x30]
000000000000a47a         cmp        cl, 0x9
000000000000a47d         jbe        loc_a470

000000000000a47f         cmp        dl, 0x24
000000000000a482         mov        r13, r8
000000000000a485         jne        loc_a06e

000000000000a48b         xor        edx, edx

                     loc_a48d:
000000000000a48d         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
000000000000a490         movabs     rdi, 0x1999999999999999
000000000000a49a         mov        rsi, r8
000000000000a49d         sub        eax, 0x30
000000000000a4a0         cmp        rdx, rdi
000000000000a4a3         cdqe
000000000000a4a5         ja         loc_a4ae

000000000000a4a7         lea        rsi, qword [rdx+rdx*4]
000000000000a4ab         add        rsi, rsi

                     loc_a4ae:
000000000000a4ae         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_a4b1:
000000000000a4b1         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
000000000000a4b4         movzx      ebx, byte [rbp+1]
000000000000a4b8         setb       sil
000000000000a4bc         add        rbp, 0x1
000000000000a4c0         mov        rdx, rax
000000000000a4c3         movzx      esi, sil
000000000000a4c7         test       rsi, rsi
000000000000a4ca         lea        edi, dword [rbx-0x30]
000000000000a4cd         jne        loc_a85e

000000000000a4d3         cmp        dil, 0x9
000000000000a4d7         jbe        loc_a48d

000000000000a4d9         mov        r13, rax
000000000000a4dc         sub        r13, 0x1
000000000000a4e0         cmp        r13, 0xfffffffffffffffd
000000000000a4e4         ja         loc_a76b

000000000000a4ea         lea        rbp, qword [rcx+2]
000000000000a4ee         movzx      ebx, byte [rcx+2]
000000000000a4f2         jmp        loc_a06e

                     loc_a4f7:
000000000000a4f7         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
000000000000a4fc         movzx      edi, byte [rbp]
000000000000a500         mov        rsi, rbp
000000000000a503         lea        ecx, dword [rdi-0x30]
000000000000a506         cmp        cl, 0x9
000000000000a509         jbe        loc_a517

000000000000a50b         jmp        loc_a540
000000000000a50d         align      16

                     loc_a510:
000000000000a510         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
000000000000a513         add        rax, 0x1

                     loc_a517:
000000000000a517         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
000000000000a51a         lea        edx, dword [rdi-0x30]
000000000000a51d         cmp        dl, 0x9
000000000000a520         jbe        loc_a510

000000000000a522         mov        rcx, rax
000000000000a525         lea        rdx, qword [rbp+2]
000000000000a529         mov        rbp, rax
000000000000a52c         sub        rcx, rsi
000000000000a52f         mov        rsi, qword [rsp+0x88+var_78]
000000000000a534         cmp        rsi, rcx
000000000000a537         cmovae     rcx, rsi
000000000000a53b         mov        qword [rsp+0x88+var_78], rcx

                     loc_a540:
000000000000a540         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
000000000000a545         movzx      ebx, byte [rbp]
000000000000a549         jmp        loc_a0e5

                     loc_a54e:
000000000000a54e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
000000000000a552         sub        eax, 0x30
000000000000a555         cmp        al, 0x9
000000000000a557         ja         loc_a56e

000000000000a559         nop        dword [rax]

                     loc_a560:
000000000000a560         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
000000000000a564         movzx      eax, byte [rdx]
000000000000a567         sub        eax, 0x30
000000000000a56a         cmp        al, 0x9
000000000000a56c         jbe        loc_a560

                     loc_a56e:
000000000000a56e         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
000000000000a573         mov        rax, rdx
000000000000a576         mov        qword [r12+0x38], rdx
000000000000a57b         sub        rax, rbp
000000000000a57e         movzx      ebx, byte [rdx]
000000000000a581         mov        rbp, rdx
000000000000a584         cmp        rsi, rax
000000000000a587         cmovae     rax, rsi
000000000000a58b         mov        qword [rsp+0x88+var_70], rax
000000000000a590         jmp        loc_a0ee

                     loc_a595:
000000000000a595         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_a598:
000000000000a598         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
000000000000a59c         movzx      edi, byte [rsi]
000000000000a59f         lea        r11d, dword [rdi-0x30]
000000000000a5a3         cmp        r11b, 0x9
000000000000a5a7         jbe        loc_a598

000000000000a5a9         cmp        dil, 0x24
000000000000a5ad         jne        loc_a2ba

000000000000a5b3         xor        esi, esi

                     loc_a5b5:
000000000000a5b5         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
000000000000a5b8         movabs     rdi, 0x1999999999999999
000000000000a5c2         mov        rcx, r8
000000000000a5c5         sub        eax, 0x30
000000000000a5c8         cmp        rsi, rdi
000000000000a5cb         cdqe
000000000000a5cd         ja         loc_a5d6

000000000000a5cf         lea        rcx, qword [rsi+rsi*4]
000000000000a5d3         add        rcx, rcx

                     loc_a5d6:
000000000000a5d6         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_a5d9:
000000000000a5d9         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
000000000000a5dc         add        rax, rcx
000000000000a5df         movzx      ecx, byte [rdx+1]
000000000000a5e3         setb       r11b
000000000000a5e7         add        rdx, 0x1
000000000000a5eb         mov        rsi, rax
000000000000a5ee         test       r11, r11
000000000000a5f1         lea        edi, dword [rcx-0x30]
000000000000a5f4         jne        loc_aafe

000000000000a5fa         cmp        dil, 0x9
000000000000a5fe         jbe        loc_a5b5

000000000000a600         lea        rbx, qword [rax-1]
000000000000a604         cmp        rbx, 0xfffffffffffffffd
000000000000a608         ja         loc_a76b

000000000000a60e         mov        qword [r12+0x28], rbx
000000000000a613         add        rbp, 0x2
000000000000a617         jmp        loc_a2df

                     loc_a61c:
000000000000a61c         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
000000000000a61f         mov        r11d, 0x16
000000000000a625         jg         loc_a178

000000000000a62b         test       al, 0x4
000000000000a62d         jne        loc_a178

000000000000a633         cmp        eax, 0x7
000000000000a636         mov        r11d, 0x15
000000000000a63c         jg         loc_a178

000000000000a642         test       al, 0x2
000000000000a644         mov        r11d, 0x12
000000000000a64a         jne        loc_a178

000000000000a650         xor        r11d, r11d
000000000000a653         test       al, 0x1
000000000000a655         sete       r11b
000000000000a659         add        r11d, 0x13
000000000000a65d         jmp        loc_a178
000000000000a662         align      8

                     loc_a668:
000000000000a668         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
000000000000a66b         cmp        eax, 0x7
000000000000a66e         setg       r11b
000000000000a672         add        r11d, 0xd
000000000000a676         jmp        loc_a178

                     loc_a67b:
000000000000a67b         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
000000000000a67e         mov        r11d, 0x9
000000000000a684         jg         loc_a178

000000000000a68a         test       al, 0x4
000000000000a68c         jne        loc_a178

000000000000a692         cmp        eax, 0x7
000000000000a695         mov        r11d, 0x7
000000000000a69b         jg         loc_a178

000000000000a6a1         test       al, 0x2
000000000000a6a3         mov        r11d, 0x1
000000000000a6a9         jne        loc_a178

000000000000a6af         and        eax, 0x1
000000000000a6b2         cmp        eax, 0x1
000000000000a6b5         sbb        r11d, r11d
000000000000a6b8         and        r11d, 0x2
000000000000a6bc         add        r11d, 0x3
000000000000a6c0         jmp        loc_a178
000000000000a6c5         align      8

                     loc_a6c8:
000000000000a6c8         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
000000000000a6cb         cmp        eax, 0x7
000000000000a6ce         setg       r11b
000000000000a6d2         add        r11d, 0xf
000000000000a6d6         jmp        loc_a178

                     loc_a6db:
000000000000a6db         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
000000000000a6de         mov        r11d, 0xc
000000000000a6e4         jg         loc_a178

000000000000a6ea         xor        r11d, r11d
000000000000a6ed         test       al, 0x4
000000000000a6ef         setne      r11b
000000000000a6f3         add        r11d, 0xb
000000000000a6f7         jmp        loc_a178

                     loc_a6fc:
000000000000a6fc         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
000000000000a702         mov        ebx, 0x63
000000000000a707         jmp        loc_a178

                     loc_a70c:
000000000000a70c         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
000000000000a70f         mov        r11d, 0xa
000000000000a715         jg         loc_a178

000000000000a71b         test       al, 0x4
000000000000a71d         jne        loc_a178

000000000000a723         cmp        eax, 0x7
000000000000a726         mov        r11d, 0x8
000000000000a72c         jg         loc_a178

000000000000a732         test       al, 0x2
000000000000a734         mov        r11d, 0x2
000000000000a73a         jne        loc_a178

000000000000a740         and        eax, 0x1
000000000000a743         cmp        eax, 0x1
000000000000a746         sbb        r11d, r11d
000000000000a749         and        r11d, 0x2
000000000000a74d         add        r11d, 0x4
000000000000a751         jmp        loc_a178
000000000000a756         align      32

                     loc_a760:
000000000000a760         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
000000000000a766         jmp        loc_a178

                     loc_a76b:
000000000000a76b         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_a76f:
000000000000a76f         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
000000000000a774         je         loc_a77e

000000000000a776         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
000000000000a779         call       j_free                                      ; free

                     loc_a77e:
000000000000a77e         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
000000000000a782         cmp        qword [rsp+0x88+var_60], rdi
000000000000a787         je         loc_a78e

000000000000a789         call       j_free                                      ; free

                     loc_a78e:
000000000000a78e         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
000000000000a793         mov        dword [rax], 0x16
000000000000a799         mov        eax, 0xffffffff
000000000000a79e         jmp        loc_9fc2

                     loc_a7a3:
000000000000a7a3         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
000000000000a7a6         je         loc_a1db

000000000000a7ac         jmp        loc_a76f
000000000000a7ae         align      16

                     loc_a7b0:
000000000000a7b0         add        r9, r9                                      ; CODE XREF=printf_parse+622
000000000000a7b3         lea        rax, qword [r13+1]
000000000000a7b7         cmp        r9, r13
000000000000a7ba         cmovbe     r9, rax
000000000000a7be         movabs     rax, 0x7ffffffffffffff
000000000000a7c8         cmp        r9, rax
000000000000a7cb         ja         loc_abab

000000000000a7d1         mov        rsi, r9
000000000000a7d4         mov        qword [rsp+0x88+var_40], r9
000000000000a7d9         mov        qword [rsp+0x88+var_48], r10
000000000000a7de         shl        rsi, 0x5
000000000000a7e2         cmp        qword [rsp+0x88+var_80], rcx
000000000000a7e7         mov        qword [rsp+0x88+var_50], r8
000000000000a7ec         mov        dword [rsp+0x88+var_58], r11d
000000000000a7f1         je         loc_a891

000000000000a7f7         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000a7fa         call       j_realloc                                   ; realloc
000000000000a7ff         test       rax, rax
000000000000a802         mov        rcx, rax
000000000000a805         mov        r11d, dword [rsp+0x88+var_58]
000000000000a80a         mov        r8, qword [rsp+0x88+var_50]
000000000000a80f         mov        r10, qword [rsp+0x88+var_48]
000000000000a814         mov        r9, qword [rsp+0x88+var_40]
000000000000a819         je         loc_aba7

000000000000a81f         mov        rax, qword [rsp+0x88+var_80]
000000000000a824         cmp        rax, qword [r15+8]
000000000000a828         je         loc_a8b9

                     loc_a82e:
000000000000a82e         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
000000000000a832         jmp        loc_a194

                     loc_a837:
000000000000a837         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
000000000000a83c         cmp        rsi, 0xffffffffffffffff
000000000000a840         lea        rax, qword [rsi+1]
000000000000a844         mov        qword [r12+0x50], rsi
000000000000a849         je         loc_a76b

000000000000a84f         mov        r13, qword [rsp+0x88+var_68]
000000000000a854         mov        qword [rsp+0x88+var_68], rax
000000000000a859         jmp        loc_a187

                     loc_a85e:
000000000000a85e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
000000000000a862         ja         loc_a76b

000000000000a868         movsx      eax, bl
000000000000a86b         mov        rsi, r8
000000000000a86e         mov        rcx, rbp
000000000000a871         sub        eax, 0x30
000000000000a874         cdqe
000000000000a876         jmp        loc_a4b1

                     loc_a87b:
000000000000a87b         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
000000000000a87e         jne        loc_a76f

000000000000a884         movzx      ebx, byte [rbp]
000000000000a888         lea        rdx, qword [rbp+1]
000000000000a88c         jmp        loc_a0e5

                     loc_a891:
000000000000a891         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
000000000000a894         call       j_malloc                                    ; malloc
000000000000a899         test       rax, rax
000000000000a89c         mov        rcx, rax
000000000000a89f         mov        r11d, dword [rsp+0x88+var_58]
000000000000a8a4         mov        r8, qword [rsp+0x88+var_50]
000000000000a8a9         mov        r10, qword [rsp+0x88+var_48]
000000000000a8ae         mov        r9, qword [rsp+0x88+var_40]
000000000000a8b3         je         loc_aa1c

                     loc_a8b9:
000000000000a8b9         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
000000000000a8bc         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
000000000000a8c1         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000a8c4         mov        qword [rsp+0x88+var_40], r9
000000000000a8c9         mov        qword [rsp+0x88+var_48], r10
000000000000a8ce         mov        qword [rsp+0x88+var_50], r8
000000000000a8d3         mov        dword [rsp+0x88+var_58], r11d
000000000000a8d8         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
000000000000a8dc         call       j_memcpy                                    ; memcpy
000000000000a8e1         mov        r9, qword [rsp+0x88+var_40]
000000000000a8e6         mov        r10, qword [rsp+0x88+var_48]
000000000000a8eb         mov        rcx, rax
000000000000a8ee         mov        r8, qword [rsp+0x88+var_50]
000000000000a8f3         mov        r11d, dword [rsp+0x88+var_58]
000000000000a8f8         jmp        loc_a82e

                     loc_a8fd:
000000000000a8fd         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
000000000000a900         call       j_malloc                                    ; malloc
000000000000a905         test       rax, rax
000000000000a908         mov        rcx, rax
000000000000a90b         mov        r8, qword [rsp+0x88+var_58]
000000000000a910         mov        r10, qword [rsp+0x88+var_50]
000000000000a915         mov        r9, qword [rsp+0x88+var_48]
000000000000a91a         je         loc_aa09

                     loc_a920:
000000000000a920         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
000000000000a924         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
000000000000a929         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000a92c         mov        qword [rsp+0x88+var_48], r9
000000000000a931         mov        qword [rsp+0x88+var_50], r10
000000000000a936         lea        rdx, qword [rbx+rax*2]
000000000000a93a         mov        qword [rsp+0x88+var_58], r8
000000000000a93f         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000a943         call       j_memcpy                                    ; memcpy
000000000000a948         mov        rbx, qword [r14]
000000000000a94b         mov        rcx, rax
000000000000a94e         mov        r9, qword [rsp+0x88+var_48]
000000000000a953         mov        r10, qword [rsp+0x88+var_50]
000000000000a958         mov        r8, qword [rsp+0x88+var_58]
000000000000a95d         jmp        loc_a277

                     loc_a962:
000000000000a962         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
000000000000a965         jmp        loc_a367

                     loc_a96a:
000000000000a96a         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
000000000000a96d         jne        loc_a76f

000000000000a973         movzx      ebx, byte [r11]
000000000000a977         mov        rbp, r11
000000000000a97a         jmp        loc_a0ee

                     loc_a97f:
000000000000a97f         add        r9, r9                                      ; CODE XREF=printf_parse+1268
000000000000a982         lea        rax, qword [rbx+1]
000000000000a986         cmp        r9, rbx
000000000000a989         cmovbe     r9, rax
000000000000a98d         movabs     rax, 0x7ffffffffffffff
000000000000a997         cmp        r9, rax
000000000000a99a         ja         loc_abab

000000000000a9a0         mov        rsi, r9
000000000000a9a3         mov        qword [rsp+0x88+var_40], r9
000000000000a9a8         mov        qword [rsp+0x88+var_48], r10
000000000000a9ad         shl        rsi, 0x5
000000000000a9b1         cmp        qword [rsp+0x88+var_80], rcx
000000000000a9b6         mov        qword [rsp+0x88+var_50], r8
000000000000a9bb         mov        qword [rsp+0x88+var_58], r11
000000000000a9c0         je         loc_ab7e

000000000000a9c6         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000a9c9         call       j_realloc                                   ; realloc
000000000000a9ce         mov        rdx, qword [r15+8]
000000000000a9d2         mov        r11, qword [rsp+0x88+var_58]
000000000000a9d7         mov        rcx, rax
000000000000a9da         mov        r8, qword [rsp+0x88+var_50]
000000000000a9df         mov        r10, qword [rsp+0x88+var_48]
000000000000a9e4         mov        r9, qword [rsp+0x88+var_40]

                     loc_a9e9:
000000000000a9e9         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
000000000000a9ec         je         loc_ac07

000000000000a9f2         cmp        qword [rsp+0x88+var_80], rdx
000000000000a9f7         mov        rax, qword [r15]
000000000000a9fa         je         loc_abc0

                     loc_aa00:
000000000000aa00         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
000000000000aa04         jmp        loc_a41d

                     loc_aa09:
000000000000aa09         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
000000000000aa0d         cmp        qword [rsp+0x88+var_80], rcx
000000000000aa12         je         loc_aa2c

                     loc_aa14:
000000000000aa14         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
000000000000aa17         call       j_free                                      ; free

                     loc_aa1c:
000000000000aa1c         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
000000000000aa20         cmp        qword [rsp+0x88+var_60], rdi
000000000000aa25         je         loc_aa2c

000000000000aa27         call       j_free                                      ; free

                     loc_aa2c:
000000000000aa2c         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
000000000000aa31         mov        dword [rax], 0xc
000000000000aa37         mov        eax, 0xffffffff
000000000000aa3c         jmp        loc_9fc2

                     loc_aa41:
000000000000aa41         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
000000000000aa44         call       j_malloc                                    ; malloc
000000000000aa49         mov        rdx, qword [rsp+0x88+var_80]
000000000000aa4e         mov        rcx, rax
000000000000aa51         mov        r9, qword [rsp+0x88+var_48]
000000000000aa56         mov        r10, qword [rsp+0x88+var_50]
000000000000aa5b         mov        r8, qword [rsp+0x88+var_58]
000000000000aa60         jmp        loc_a34c

                     loc_aa65:
000000000000aa65         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
000000000000aa6a         cmp        rsi, 0xffffffffffffffff
000000000000aa6e         lea        rax, qword [rsi+1]
000000000000aa72         mov        qword [r12+0x40], rsi
000000000000aa77         je         loc_a76b

000000000000aa7d         mov        rbx, qword [rsp+0x88+var_68]
000000000000aa82         mov        qword [rsp+0x88+var_68], rax
000000000000aa87         jmp        loc_a40d

                     loc_aa8c:
000000000000aa8c         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_aa8f:
000000000000aa8f         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
000000000000aa93         movzx      ecx, byte [rdx]
000000000000aa96         lea        esi, dword [rcx-0x30]
000000000000aa99         cmp        sil, 0x9
000000000000aa9d         jbe        loc_aa8f

000000000000aa9f         cmp        cl, 0x24
000000000000aaa2         jne        loc_a3fe

000000000000aaa8         xor        ecx, ecx

                     loc_aaaa:
000000000000aaaa         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
000000000000aab4         sub        eax, 0x30
000000000000aab7         mov        rdx, r8
000000000000aaba         cmp        rcx, rsi
000000000000aabd         cdqe
000000000000aabf         ja         loc_aac8

000000000000aac1         lea        rdx, qword [rcx+rcx*4]
000000000000aac5         add        rdx, rdx

                     loc_aac8:
000000000000aac8         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_aacb:
000000000000aacb         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
000000000000aacd         add        rdx, rax
000000000000aad0         movsx      eax, byte [r11+1]
000000000000aad5         setb       bl
000000000000aad8         add        r11, 0x1
000000000000aadc         mov        rcx, rdx
000000000000aadf         test       rbx, rbx
000000000000aae2         lea        edi, dword [rax-0x30]
000000000000aae5         je         loc_ab58

000000000000aae7         cmp        dil, 0x9
000000000000aaeb         ja         loc_a76b

000000000000aaf1         sub        eax, 0x30
000000000000aaf4         mov        rdx, r8
000000000000aaf7         mov        rsi, r11
000000000000aafa         cdqe
000000000000aafc         jmp        loc_aacb

                     loc_aafe:
000000000000aafe         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
000000000000ab02         ja         loc_a76b

000000000000ab08         movsx      eax, cl
000000000000ab0b         mov        rbp, rdx
000000000000ab0e         mov        rcx, r8
000000000000ab11         sub        eax, 0x30
000000000000ab14         cdqe
000000000000ab16         jmp        loc_a5d9

                     loc_ab1b:
000000000000ab1b         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
000000000000ab20         shl        rax, 0x5
000000000000ab24         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000ab27         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000ab2a         mov        qword [rsp+0x88+var_48], r9
000000000000ab2f         mov        qword [rsp+0x88+var_50], r10
000000000000ab34         mov        qword [rsp+0x88+var_58], r8
000000000000ab39         call       j_memcpy                                    ; memcpy
000000000000ab3e         mov        r9, qword [rsp+0x88+var_48]
000000000000ab43         mov        rcx, rax
000000000000ab46         mov        r10, qword [rsp+0x88+var_50]
000000000000ab4b         mov        rax, qword [r15]
000000000000ab4e         mov        r8, qword [rsp+0x88+var_58]
000000000000ab53         jmp        loc_a363

                     loc_ab58:
000000000000ab58         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
000000000000ab5c         jbe        loc_aaaa

000000000000ab62         lea        rbx, qword [rdx-1]
000000000000ab66         cmp        rbx, 0xfffffffffffffffd
000000000000ab6a         ja         loc_a76b

000000000000ab70         mov        qword [r12+0x40], rbx
000000000000ab75         lea        r11, qword [rsi+2]
000000000000ab79         jmp        loc_a40d

                     loc_ab7e:
000000000000ab7e         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
000000000000ab81         call       j_malloc                                    ; malloc
000000000000ab86         mov        rdx, qword [rsp+0x88+var_80]
000000000000ab8b         mov        rcx, rax
000000000000ab8e         mov        r9, qword [rsp+0x88+var_40]
000000000000ab93         mov        r10, qword [rsp+0x88+var_48]
000000000000ab98         mov        r8, qword [rsp+0x88+var_50]
000000000000ab9d         mov        r11, qword [rsp+0x88+var_58]
000000000000aba2         jmp        loc_a9e9

                     loc_aba7:
000000000000aba7         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_abab:
000000000000abab         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
000000000000abb0         jne        loc_aa14

000000000000abb6         jmp        loc_aa1c
000000000000abbb         align      64

                     loc_abc0:
000000000000abc0         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
000000000000abc5         shl        rax, 0x5
000000000000abc9         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000abcc         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000abcf         mov        qword [rsp+0x88+var_40], r9
000000000000abd4         mov        qword [rsp+0x88+var_48], r10
000000000000abd9         mov        qword [rsp+0x88+var_50], r8
000000000000abde         mov        qword [rsp+0x88+var_58], r11
000000000000abe3         call       j_memcpy                                    ; memcpy
000000000000abe8         mov        r9, qword [rsp+0x88+var_40]
000000000000abed         mov        rcx, rax
000000000000abf0         mov        r10, qword [rsp+0x88+var_48]
000000000000abf5         mov        rax, qword [r15]
000000000000abf8         mov        r8, qword [rsp+0x88+var_50]
000000000000abfd         mov        r11, qword [rsp+0x88+var_58]
000000000000ac02         jmp        loc_aa00

                     loc_ac07:
000000000000ac07         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
000000000000ac0a         jmp        loc_abab
000000000000ac0c         align      16                                          ; End of unwind block (FDE at 0xed54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000ac10         push       r15                                         ; Begin of unwind block (FDE at 0xeda4), DATA XREF=_start+22
000000000000ac12         push       r14
000000000000ac14         mov        r15, rdx
000000000000ac17         push       r13
000000000000ac19         push       r12
000000000000ac1b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000ac22         push       rbp
000000000000ac23         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000ac2a         push       rbx
000000000000ac2b         mov        r13d, edi
000000000000ac2e         mov        r14, rsi
000000000000ac31         sub        rbp, r12
000000000000ac34         sub        rsp, 0x8
000000000000ac38         sar        rbp, 0x3
000000000000ac3c         call       _init                                       ; _init
000000000000ac41         test       rbp, rbp
000000000000ac44         je         loc_ac66

000000000000ac46         xor        ebx, ebx
000000000000ac48         nop        dword [rax+rax]

                     loc_ac50:
000000000000ac50         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000ac53         mov        rsi, r14
000000000000ac56         mov        edi, r13d
000000000000ac59         call       qword [r12+rbx*8]
000000000000ac5d         add        rbx, 0x1
000000000000ac61         cmp        rbp, rbx
000000000000ac64         jne        loc_ac50

                     loc_ac66:
000000000000ac66         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000ac6a         pop        rbx
000000000000ac6b         pop        rbp
000000000000ac6c         pop        r12
000000000000ac6e         pop        r13
000000000000ac70         pop        r14
000000000000ac72         pop        r15
000000000000ac74         ret
                        ; endp
000000000000ac75         align      128                                         ; End of unwind block (FDE at 0xeda4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000ac80         ret                                                    ; Begin of unwind block (FDE at 0xedec), DATA XREF=_start+15
                        ; endp
000000000000ac82         align      16                                          ; End of unwind block (FDE at 0xedec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000ac90         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xee04), __dso_handle, CODE XREF=main+99
000000000000ac97         xor        esi, esi
000000000000ac99         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000ac9e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xee04)
000000000000ac9f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xaca0; 0xaca9[ (9 bytes)
        ; File offset : [44192; 44201[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000aca0         sub        rsp, 0x8
000000000000aca4         add        rsp, 0x8
000000000000aca8         ret
                        ; endp
000000000000aca9         db  0x00 ; '.'
000000000000acaa         db  0x00 ; '.'
000000000000acab         db  0x00 ; '.'
000000000000acac         db  0x00 ; '.'
000000000000acad         db  0x00 ; '.'
000000000000acae         db  0x00 ; '.'
000000000000acaf         db  0x00 ; '.'
000000000000acb0         db  0x00 ; '.'
000000000000acb1         db  0x00 ; '.'
000000000000acb2         db  0x00 ; '.'
000000000000acb3         db  0x00 ; '.'
000000000000acb4         db  0x00 ; '.'
000000000000acb5         db  0x00 ; '.'
000000000000acb6         db  0x00 ; '.'
000000000000acb7         db  0x00 ; '.'
000000000000acb8         db  0x00 ; '.'
000000000000acb9         db  0x00 ; '.'
000000000000acba         db  0x00 ; '.'
000000000000acbb         db  0x00 ; '.'
000000000000acbc         db  0x00 ; '.'
000000000000acbd         db  0x00 ; '.'
000000000000acbe         db  0x00 ; '.'
000000000000acbf         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xacc0; 0xd4dc[ (10268 bytes)
        ; File offset : [44224; 54492[ (10268 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000acc0         db  0x01 ; '.'
000000000000acc1         db  0x00 ; '.'
000000000000acc2         db  0x02 ; '.'
000000000000acc3         db  0x00 ; '.'
                     a0123456789abcd:
000000000000acc4         db         "0123456789abcdef", 0                       ; DATA XREF=format_address_std+240
000000000000acd5         db  0x42 ; 'B'                                         ; DATA XREF=parse_old_offset+47
000000000000acd6         db  0x62 ; 'b'
000000000000acd7         db  0x00 ; '.'
000000000000acd8         db  0x64 ; 'd'                                         ; DATA XREF=print_named_ascii+155
000000000000acd9         db  0x65 ; 'e'
000000000000acda         db  0x6c ; 'l'
000000000000acdb         db  0x00 ; '.'
000000000000acdc         db  0x25 ; '%'                                         ; DATA XREF=print_named_ascii+113, print_long_double+118, print_double+119, print_float+136, print_ascii+151, write_block+289, write_block+637
000000000000acdd         db  0x2a ; '*'
000000000000acde         db  0x73 ; 's'
000000000000acdf         db  0x00 ; '.'
000000000000ace0         db  0x6c ; 'l'                                         ; DATA XREF=sub_3dfe+802
000000000000ace1         db  0x64 ; 'd'
000000000000ace2         db  0x00 ; '.'
000000000000ace3         db  0x6c ; 'l'                                         ; DATA XREF=decode_format_string+435
000000000000ace4         db  0x6f ; 'o'
000000000000ace5         db  0x00 ; '.'
000000000000ace6         db  0x6c ; 'l'                                         ; DATA XREF=sub_3dfe+888
000000000000ace7         db  0x75 ; 'u'                                         ; DATA XREF=sub_3dfe+870
000000000000ace8         db  0x00 ; '.'
000000000000ace9         db  0x6c ; 'l'                                         ; DATA XREF=sub_3dfe+99
000000000000acea         db  0x78 ; 'x'
000000000000aceb         db  0x00 ; '.'
                     aCoreutils831sr:
000000000000acec         db         "../coreutils-8.31/src/od.c", 0             ; DATA XREF=main+4368, main+4399, sub_3dfe+1095, sub_3dfe+1126, sub_3dfe+1157, sub_3dfe+1198, read_block+174
                     aSNull:
000000000000ad07         db         "s != NULL", 0                              ; DATA XREF=sub_3dfe+1205
                     aTspecNull:
000000000000ad11         db         "tspec != NULL", 0                          ; DATA XREF=sub_3dfe+1133
                     aS:
000000000000ad1f         db         "%%*%s", 0                                  ; DATA XREF=sub_3dfe+759, sub_3dfe+845
                     aDs:
000000000000ad25         db         "%%*.%d%s", 0                               ; DATA XREF=decode_format_string+415, sub_3dfe+79
                     aSNext:
000000000000ad2e         db         "s != next", 0                              ; DATA XREF=sub_3dfe+1102
                     aInvalidTypeStr_ad38:        // aInvalidTypeStr
000000000000ad38         db         "invalid type string %s", 0                 ; DATA XREF=sub_3dfe+939
000000000000ad4f         db  0x25 ; '%'                                         ; DATA XREF=sub_4410+55
000000000000ad50         db  0x63 ; 'c'                                         ; DATA XREF=main+848
000000000000ad51         db  0x00 ; '.'
000000000000ad52         db  0x25 ; '%'                                         ; DATA XREF=sub_4410+80
000000000000ad53         db  0x30 ; '0'
000000000000ad54         db  0x33 ; '3'
000000000000ad55         db  0x6f ; 'o'                                         ; DATA XREF=decode_format_string+404
000000000000ad56         db  0x00 ; '.'
000000000000ad57         db  0x5c ; '\'                                         ; DATA XREF=sub_43b0
000000000000ad58         db  0x30 ; '0'
000000000000ad59         db  0x00 ; '.'
000000000000ad5a         db  0x5c ; '\'                                         ; DATA XREF=main+4023, print_ascii+136
000000000000ad5b         db  0x61 ; 'a'                                         ; DATA XREF=main+896
000000000000ad5c         db  0x00 ; '.'
000000000000ad5d         db  0x5c ; '\'                                         ; DATA XREF=main+4009, sub_4410
000000000000ad5e         db  0x62 ; 'b'
000000000000ad5f         db  0x00 ; '.'
000000000000ad60         db  0x5c ; '\'                                         ; DATA XREF=main+3949, sub_43d0
000000000000ad61         db  0x66 ; 'f'
000000000000ad62         db  0x00 ; '.'
000000000000ad63         db  0x5c ; '\'                                         ; DATA XREF=main+3981, sub_43f0
000000000000ad64         db  0x6e ; 'n'
000000000000ad65         db  0x00 ; '.'
000000000000ad66         db  0x5c ; '\'                                         ; DATA XREF=main+4037, sub_43c0
000000000000ad67         db  0x72 ; 'r'                                         ; DATA XREF=open_next_file+136
000000000000ad68         db  0x00 ; '.'
000000000000ad69         db  0x5c ; '\'                                         ; DATA XREF=main+3995, sub_4400
000000000000ad6a         db  0x74 ; 't'
000000000000ad6b         db  0x00 ; '.'
000000000000ad6c         db  0x5c ; '\'                                         ; DATA XREF=main+3967, sub_43e0
000000000000ad6d         db  0x76 ; 'v'
000000000000ad6e         db  0x00 ; '.'
                     aSReadError:
000000000000ad6f         db         "%s: read error", 0                         ; DATA XREF=check_and_close+163
                     aWriteError:
000000000000ad7e         db         "write error", 0                            ; DATA XREF=check_and_close+97, close_stdout+67
                     aStandardInput:
000000000000ad8a         db         "standard input", 0                         ; DATA XREF=main+2841, open_next_file+77
000000000000ad99         db  0x2a ; '*'                                         ; DATA XREF=write_block+556
000000000000ad9a         db  0x00 ; '.'
000000000000ad9b         db  0x20 ; ' '                                         ; DATA XREF=write_block+336
000000000000ad9c         db  0x20 ; ' '
000000000000ad9d         db  0x3e ; '>'
000000000000ad9e         db  0x00 ; '.'
                     a0NNBytesperblo:
000000000000ad9f         db         "0 < n && n <= bytes_per_block", 0          ; DATA XREF=read_block+181
000000000000adbd         db  0x6f ; 'o'                                         ; DATA XREF=main+1348, usage+681, usage+996, usage+1180, usage+1199, usage+1233
000000000000adbe         db  0x64 ; 'd'
000000000000adbf         db  0x00 ; '.'
000000000000adc0         db  0x5b ; '['                                         ; DATA XREF=usage+693
000000000000adc1         db  0x00 ; '.'
                     aTestInvocation:
000000000000adc2         db         "test invocation", 0                        ; DATA XREF=usage+732
                     aMulticallInvoc:
000000000000add2         db         "Multi-call invocation", 0                  ; DATA XREF=usage+780
                     aSha224sum:
000000000000ade8         db         "sha224sum", 0                              ; DATA XREF=usage+797
                     aSha2Utilities:
000000000000adf2         db         "sha2 utilities", 0                         ; DATA XREF=usage+809
                     aSha256sum:
000000000000ae01         db         "sha256sum", 0                              ; DATA XREF=usage+700
                     aSha384sum:
000000000000ae0b         db         "sha384sum", 0                              ; DATA XREF=usage+744
                     aSha512sum:
000000000000ae15         db         "sha512sum", 0                              ; DATA XREF=usage+768
                     aNsOnlineHelpSn:
000000000000ae1f         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+882
000000000000ae36         db  0x47 ; 'G'                                         ; DATA XREF=main+1341, usage+910, usage+1103, emit_bug_reporting_address+68
000000000000ae37         db  0x4e ; 'N'
000000000000ae38         db  0x55 ; 'U'
000000000000ae39         db  0x20 ; ' '
                     aCoreutils:
000000000000ae3a         db         "coreutils", 0                              ; DATA XREF=main+68, main+80, usage+756
000000000000ae44         db  0x65 ; 'e'                                         ; DATA XREF=usage+949, usage+1142
000000000000ae45         db  0x6e ; 'n'
000000000000ae46         db  0x5f ; '_'
000000000000ae47         db  0x00 ; '.'
                     aFullDocumentat:
000000000000ae48         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+977, usage+1166
                     aUsrlocalsharel:
000000000000ae63         db         "/usr/local/share/locale", 0                ; DATA XREF=main+61
                     aEndian:
000000000000ae7b         db         "--endian", 0                               ; DATA XREF=main+460
000000000000ae84         db  0x6f ; 'o'                                         ; DATA XREF=main+872
000000000000ae85         db  0x31 ; '1'
000000000000ae86         db  0x00 ; '.'
000000000000ae87         db  0x75 ; 'u'                                         ; DATA XREF=main+1176
000000000000ae88         db  0x34 ; '4'
000000000000ae89         db  0x00 ; '.'
000000000000ae8a         db  0x75 ; 'u'                                         ; DATA XREF=main+824
000000000000ae8b         db  0x32 ; '2'
000000000000ae8c         db  0x00 ; '.'
000000000000ae8d         db  0x66 ; 'f'                                         ; DATA XREF=main+1152
000000000000ae8e         db  0x44 ; 'D'
000000000000ae8f         db  0x00 ; '.'
000000000000ae90         db  0x66 ; 'f'                                         ; DATA XREF=main+800
000000000000ae91         db  0x46 ; 'F'
000000000000ae92         db  0x00 ; '.'
000000000000ae93         db  0x78 ; 'x'                                         ; DATA XREF=main+1128
000000000000ae94         db  0x34 ; '4'
000000000000ae95         db  0x00 ; '.'
000000000000ae96         db  0x64 ; 'd'                                         ; DATA XREF=main+752
000000000000ae97         db  0x49 ; 'I'
000000000000ae98         db  0x00 ; '.'
000000000000ae99         db  0x64 ; 'd'                                         ; DATA XREF=main+1104
000000000000ae9a         db  0x4c ; 'L'
000000000000ae9b         db  0x00 ; '.'
000000000000ae9c         db  0x6f ; 'o'                                         ; DATA XREF=main+1000
000000000000ae9d         db  0x34 ; '4'
000000000000ae9e         db  0x00 ; '.'
000000000000ae9f         db  0x6f ; 'o'                                         ; DATA XREF=main+1200
000000000000aea0         db  0x32 ; '2'
000000000000aea1         db  0x00 ; '.'
000000000000aea2         db  0x64 ; 'd'                                         ; DATA XREF=main+672
000000000000aea3         db  0x32 ; '2'
000000000000aea4         db  0x00 ; '.'
000000000000aea5         db  0x78 ; 'x'                                         ; DATA XREF=main+776
000000000000aea6         db  0x32 ; '2'
000000000000aea7         db  0x00 ; '.'
                     aJimMeyering:
000000000000aea8         db         "Jim Meyering", 0                           ; DATA XREF=main+1334
                     aExtraOperandS:
000000000000aeb5         db         "extra operand %s", 0                       ; DATA XREF=main+2329
000000000000aec6         db  0x6f ; 'o'                                         ; DATA XREF=main+2803
000000000000aec7         db  0x53 ; 'S'
000000000000aec8         db  0x00 ; '.'
                     aSkipbytes:
000000000000aec9         db         "skip-bytes", 0
                     aAddressradix:
000000000000aed4         db         "address-radix", 0
                     aReadbytes:
000000000000aee2         db         "read-bytes", 0
                     aFormat:
000000000000aeed         db         "format", 0
                     aOutputduplicat:
000000000000aef4         db         "output-duplicates", 0
                     aStrings:
000000000000af06         db         "strings", 0
                     aTraditional:
000000000000af0e         db         "traditional", 0
                     aWidth:
000000000000af1a         db         "width", 0
                     aHelp:
000000000000af20         db         "help", 0
                     aVersion:
000000000000af25         db         "version", 0
                     aLittle:
000000000000af2d         db         "little", 0
000000000000af34         db  0x62 ; 'b'
000000000000af35         db  0x69 ; 'i'
000000000000af36         db  0x67 ; 'g'
000000000000af37         db  0x00 ; '.'
                     aInvalidTypeStr:
000000000000af38         db         "invalid type string %s;\nthis system doesn't provide a %lu-byte integral type", 0 ; DATA XREF=sub_3dfe+469
000000000000af85         align      8
                     aStrlenTspecfmt:
000000000000af88         db         "strlen (tspec->fmt_string) < FMT_BYTES_ALLOCATED", 0 ; DATA XREF=sub_3dfe+1164
000000000000afb9         align      64
                     aInvalidTypeStr_afc0:        // aInvalidTypeStr
000000000000afc0         db         "invalid type string %s;\nthis system doesn't provide a %lu-byte floating point type", 0 ; DATA XREF=decode_format_string+314
000000000000b013         align      8
                     aInvalidCharact:
000000000000b018         db         "invalid character '%c' in type string %s", 0 ; DATA XREF=decode_format_string+678
000000000000b041         align      8
                     aCannotSkipPast:
000000000000b048         db         "cannot skip past end of combined input", 0 ; DATA XREF=skip+270
000000000000b06f         align      16
                     aTrySHelpForMor:
000000000000b070         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000b097         align      8
                     aUsageSOptionFi:
000000000000b098         db         "Usage: %s [OPTION]... [FILE]...\n  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]\n  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]\n", 0 ; DATA XREF=usage+93
000000000000b13b         align      64
                     aNwriteAnUnambi:
000000000000b140         db         "\nWrite an unambiguous representation, octal bytes by default,\nof FILE to standard output.  With more than one FILE argument,\nconcatenate them in the listed order to form the input.\n", 0 ; DATA XREF=usage+138
000000000000b1f6         align      8
                     aNwithNoFileOrW:
000000000000b1f8         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+175
                     aNifFirstAndSec:
000000000000b230         db         "\nIf first and second call formats both apply, the second format is assumed\nif the last operand begins with + or (if there are 2 operands) a digit.\nAn OFFSET operand means -j OFFSET.  LABEL is the pseudo-address\nat first byte printed, incremented when dump " ; DATA XREF=usage+212
000000000000b330         db         "is progressing.\nFor OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;\nsuffixes may be . for octal and b for multiply by 512.\n", 0
000000000000b3b7         align      8
                     aNmandatoryArgu:
000000000000b3b8         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+249
000000000000b403         align      8
                     aAAddressradixr:
000000000000b408         db         "  -A, --address-radix=RADIX   output format for file offsets; RADIX is one\n                                of [doxn], for Decimal, Octal, Hex or None\n      --endian={big|little}   swap input bytes according the specified order\n  -j, --skip-bytes=BYTES     " ; DATA XREF=usage+286
000000000000b508         db         " skip BYTES input bytes first\n", 0
000000000000b527         align      8
                     aNReadbytesbyte:
000000000000b528         db         "  -N, --read-bytes=BYTES      limit dump to BYTES input bytes\n  -S BYTES, --strings[=BYTES]  output strings of at least BYTES graphic chars;\n                                3 is implied when BYTES is not specified\n  -t, --format=TYPE           select outpu" ; DATA XREF=usage+323
000000000000b628         db         "t format or formats\n  -v, --output-duplicates     do not use * to mark line suppression\n  -w[BYTES], --width[=BYTES]  output BYTES bytes per output line;\n                                32 is implied when BYTES is not specified\n      --traditional         "
000000000000b728         db         "  accept arguments in third form above\n", 0
                     aHelpDisplayThi:
000000000000b750         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+360
000000000000b77d         align      128
                     aVersionOutputV:
000000000000b780         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+397
000000000000b7b6         align      8
                     aNntraditionalF:
000000000000b7b8         db         "\n\nTraditional format specifications may be intermixed; they accumulate:\n  -a   same as -t a,  select named characters, ignoring high-order bit\n  -b   same as -t o1, select octal bytes\n  -c   same as -t c,  select printable characters or backslash escapes\n " ; DATA XREF=usage+434
000000000000b8b8         db         " -d   same as -t u2, select unsigned decimal 2-byte units\n", 0
000000000000b8f3         align      8
                     aFSameAsTFfSele:
000000000000b8f8         db         "  -f   same as -t fF, select floats\n  -i   same as -t dI, select decimal ints\n  -l   same as -t dL, select decimal longs\n  -o   same as -t o2, select octal 2-byte units\n  -s   same as -t d2, select decimal 2-byte units\n  -x   same as -t x2, select hexadeci" ; DATA XREF=usage+471
000000000000b9f8         db         "mal 2-byte units\n", 0
000000000000ba0a         align      16
                     aNntypeIsMadeUp:
000000000000ba10         db         "\n\nTYPE is made up of one or more of these specifications:\n  a          named character, ignoring high-order bit\n  c          printable character or backslash escape\n", 0 ; DATA XREF=usage+508
000000000000bab6         align      8
                     aDsizeSignedDec:
000000000000bab8         db         "  d[SIZE]    signed decimal, SIZE bytes per integer\n  f[SIZE]    floating point, SIZE bytes per float\n  o[SIZE]    octal, SIZE bytes per integer\n  u[SIZE]    unsigned decimal, SIZE bytes per integer\n  x[SIZE]    hexadecimal, SIZE bytes per integer\n", 0 ; DATA XREF=usage+545
000000000000bbb1         align      8
                     aNsizeIsANumber:
000000000000bbb8         db         "\nSIZE is a number.  For TYPE in [doux], SIZE may also be C for\nsizeof(char), S for sizeof(short), I for sizeof(int) or L for\nsizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D\nfor sizeof(double) or L for sizeof(long double).\n", 0 ; DATA XREF=usage+582
000000000000bcac         align      16
                     aNaddingAZSuffi:
000000000000bcb0         db         "\nAdding a z suffix to any type displays printable characters at the end of\neach output line.\n", 0 ; DATA XREF=usage+619
000000000000bd0e         align      16
                     aNnbytesIsHexWi:
000000000000bd10         db         "\n\nBYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:\n  b    512\n  KB   1000\n  K    1024\n  MB   1000*1000\n  M    1024*1024\nand so on for G, T, P, E, Z, Y.\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\n", 0 ; DATA XREF=usage+656
                     aHttpswwwgnuorg:
000000000000bdf8         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+903, usage+1003, usage+1096, usage+1206, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000be20         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1247
000000000000be67         align      8
                     aOrAvailableLoc:
000000000000be68         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+1046
000000000000be9b         align      32
                     aInvalidOutputA:
000000000000bea0         db         "invalid output address radix '%c'; it must be one character from [doxn]", 0 ; DATA XREF=main+4428
                     aNoTypeMayBeSpe:
000000000000bee8         db         "no type may be specified when dumping strings", 0 ; DATA XREF=main+4498
000000000000bf16         align      8
                     aCompatibilityM:
000000000000bf18         db         "compatibility mode supports at most one file", 0 ; DATA XREF=main+2368
000000000000bf45         align      8
                     aSkipbytesReadb:
000000000000bf48         db         "skip-bytes + read-bytes is too large", 0   ; DATA XREF=main+4300
000000000000bf6d         align      16
                     aWarningInvalid:
000000000000bf70         db         "warning: invalid width %lu; using %d instead", 0 ; DATA XREF=main+3670
000000000000bf9d         align      32
                     aNbytesreadByte:
000000000000bfa0         db         "n_bytes_read == bytes_per_block", 0        ; DATA XREF=main+4375, main+4406
                     switch_table_bfc0:        // switch_table
000000000000bfc0         dd         decode_format_string.loc_3d10-switch_table_bfc0, decode_format_string.loc_3d38-switch_table_bfc0, decode_format_string.loc_3c90-switch_table_bfc0, decode_format_string.loc_3bf0-switch_table_bfc0 ; switch table used at 0x3b1a containing 24 entries, DATA XREF=decode_format_string+40
000000000000bfd0         dd         decode_format_string.loc_3d38-switch_table_bfc0, decode_format_string.loc_3b20-switch_table_bfc0, 8 dup (decode_format_string.loc_3d38-switch_table_bfc0), decode_format_string.loc_3bf0-switch_table_bfc0
000000000000bffc         dd         5 dup (decode_format_string.loc_3d38-switch_table_bfc0), decode_format_string.loc_3bf0-switch_table_bfc0, 2 dup (decode_format_string.loc_3d38-switch_table_bfc0), decode_format_string.loc_3bf0-switch_table_bfc0
                     switch_table_c020:        // switch_table
000000000000c020         dd         decode_format_string.loc_4049-switch_table_c020, decode_format_string.loc_3f20-switch_table_c020, decode_format_string.loc_3f00-switch_table_c020, decode_format_string.loc_3ef0-switch_table_c020 ; switch table used at 0x3ec8 containing 6 entries, DATA XREF=sub_3dfe+185
000000000000c030         dd         decode_format_string.loc_3ee0-switch_table_c020, decode_format_string.loc_3ed0-switch_table_c020
000000000000c038         db  0x78 ; 'x'                                         ; DATA XREF=print_ascii+57
000000000000c039         db  0x83 ; '.'
000000000000c03a         db  0xff ; '.'
000000000000c03b         db  0xff ; '.'
000000000000c03c         db  0xe8 ; '.'
000000000000c03d         db  0x83 ; '.'
000000000000c03e         db  0xff ; '.'
000000000000c03f         db  0xff ; '.'
000000000000c040         db  0xe8 ; '.'
000000000000c041         db  0x83 ; '.'
000000000000c042         db  0xff ; '.'
000000000000c043         db  0xff ; '.'
000000000000c044         db  0xe8 ; '.'
000000000000c045         db  0x83 ; '.'
000000000000c046         db  0xff ; '.'
000000000000c047         db  0xff ; '.'
000000000000c048         db  0xe8 ; '.'
000000000000c049         db  0x83 ; '.'
000000000000c04a         db  0xff ; '.'
000000000000c04b         db  0xff ; '.'
000000000000c04c         db  0xe8 ; '.'
000000000000c04d         db  0x83 ; '.'
000000000000c04e         db  0xff ; '.'
000000000000c04f         db  0xff ; '.'
000000000000c050         db  0xe8 ; '.'
000000000000c051         db  0x83 ; '.'
000000000000c052         db  0xff ; '.'
000000000000c053         db  0xff ; '.'
000000000000c054         db  0x20 ; ' '
000000000000c055         db  0x83 ; '.'
000000000000c056         db  0xff ; '.'
000000000000c057         db  0xff ; '.'
000000000000c058         db  0xd8 ; '.'
000000000000c059         db  0x83 ; '.'
000000000000c05a         db  0xff ; '.'
000000000000c05b         db  0xff ; '.'
000000000000c05c         db  0xc8 ; '.'
000000000000c05d         db  0x83 ; '.'
000000000000c05e         db  0xff ; '.'
000000000000c05f         db  0xff ; '.'
000000000000c060         db  0xb8 ; '.'
000000000000c061         db  0x83 ; '.'
000000000000c062         db  0xff ; '.'
000000000000c063         db  0xff ; '.'
000000000000c064         db  0xa8 ; '.'
000000000000c065         db  0x83 ; '.'
000000000000c066         db  0xff ; '.'
000000000000c067         db  0xff ; '.'
000000000000c068         db  0x98 ; '.'
000000000000c069         db  0x83 ; '.'
000000000000c06a         db  0xff ; '.'
000000000000c06b         db  0xff ; '.'
000000000000c06c         db  0x88 ; '.'
000000000000c06d         db  0x83 ; '.'
000000000000c06e         db  0xff ; '.'
000000000000c06f         db  0xff ; '.'
                     switch_table_c070:        // switch_table
000000000000c070         dd         main.loc_2098-switch_table_c070, main.loc_27f8-switch_table_c070, 194 dup (main.loc_24d8-switch_table_c070), main.loc_2038-switch_table_c070 ; switch table used at 0x1d15 containing 261 entries, DATA XREF=main+219
000000000000c384         dd         main.loc_2020-switch_table_c070, main.loc_24d8-switch_table_c070, main.loc_2008-switch_table_c070, main.loc_24d8-switch_table_c070
000000000000c394         dd         main.loc_1ff0-switch_table_c070, main.loc_24d8-switch_table_c070, main.loc_1fd8-switch_table_c070, main.loc_1fc0-switch_table_c070
000000000000c3a4         dd         2 dup (main.loc_24d8-switch_table_c070), main.loc_1fc0-switch_table_c070, main.loc_24d8-switch_table_c070, main.loc_1f70-switch_table_c070
000000000000c3b8         dd         main.loc_1f58-switch_table_c070, 3 dup (main.loc_24d8-switch_table_c070), main.loc_1f08-switch_table_c070, 4 dup (main.loc_24d8-switch_table_c070)
000000000000c3dc         dd         main.loc_1fd8-switch_table_c070, 8 dup (main.loc_24d8-switch_table_c070), main.loc_1ef0-switch_table_c070, main.loc_1ed8-switch_table_c070
000000000000c408         dd         main.loc_1ec0-switch_table_c070, main.loc_1ea8-switch_table_c070, main.loc_1ff0-switch_table_c070, main.loc_1e90-switch_table_c070
000000000000c418         dd         main.loc_24d8-switch_table_c070, main.loc_1e78-switch_table_c070, main.loc_1e60-switch_table_c070, main.loc_1e28-switch_table_c070
000000000000c428         dd         main.loc_24d8-switch_table_c070, main.loc_1fc0-switch_table_c070, 2 dup (main.loc_24d8-switch_table_c070), main.loc_2020-switch_table_c070
000000000000c43c         dd         3 dup (main.loc_24d8-switch_table_c070), main.loc_1e10-switch_table_c070, main.loc_1df0-switch_table_c070, main.loc_24d8-switch_table_c070
000000000000c454         dd         main.loc_1dd8-switch_table_c070, main.loc_1d88-switch_table_c070, main.loc_1e78-switch_table_c070, 7 dup (main.loc_24d8-switch_table_c070)
000000000000c47c         dd         main.loc_1d78-switch_table_c070, main.loc_1d20-switch_table_c070
                     switch_table_c484:        // switch_table
000000000000c484         dd         main.loc_2b27-switch_table_c484, main.loc_2b19-switch_table_c484, main.loc_2b0b-switch_table_c484, main.loc_2afd-switch_table_c484 ; switch table used at 0x2adb containing 7 entries, DATA XREF=main+3920
000000000000c494         dd         main.loc_2aef-switch_table_c484, main.loc_2add-switch_table_c484, main.loc_2b35-switch_table_c484
                     __PRETTY_FUNCTION__.7548:
000000000000c4a0         db         "read_block", 0                             ; DATA XREF=read_block+167
                     __PRETTY_FUNCTION__.7577:
000000000000c4ab         db  0x64 ; 'd'                                         ; DATA XREF=main+4361, main+4392
000000000000c4ac         db  0x75 ; 'u'
000000000000c4ad         db  0x6d ; 'm'
000000000000c4ae         db  0x70 ; 'p'
000000000000c4af         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7407:
000000000000c4b0         db         "decode_one_format", 0                      ; DATA XREF=sub_3dfe+1119, sub_3dfe+1150
000000000000c4c2         align      16
                     __PRETTY_FUNCTION__.7462:
000000000000c4d0         db         "decode_format_string", 0                   ; DATA XREF=sub_3dfe+1088, sub_3dfe+1191
000000000000c4e5         align      8
                     multipliers.7627:
000000000000c4e8         db         "bEGKkMmPTYZ0", 0                           ; DATA XREF=main+703, main+941, main+1031
000000000000c4f5         db  0x00 ; '.'
000000000000c4f6         db  0x00 ; '.'
000000000000c4f7         db  0x00 ; '.'
                     endian_types:
000000000000c4f8         db  0x00 ; '.'                                         ; DATA XREF=main+453, main+478
000000000000c4f9         db  0x00 ; '.'
000000000000c4fa         db  0x00 ; '.'
000000000000c4fb         db  0x00 ; '.'
000000000000c4fc         db  0x01 ; '.'
000000000000c4fd         db  0x00 ; '.'
000000000000c4fe         db  0x00 ; '.'
000000000000c4ff         db  0x00 ; '.'
                     short_options:
000000000000c500         db         "A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx", 0     ; DATA XREF=main+359
000000000000c523         db  0x00 ; '.'
000000000000c524         db  0x00 ; '.'
000000000000c525         db  0x00 ; '.'
000000000000c526         db  0x00 ; '.'
000000000000c527         db  0x00 ; '.'
000000000000c528         db  0x00 ; '.'
000000000000c529         db  0x00 ; '.'
000000000000c52a         db  0x00 ; '.'
000000000000c52b         db  0x00 ; '.'
000000000000c52c         db  0x00 ; '.'
000000000000c52d         db  0x00 ; '.'
000000000000c52e         db  0x00 ; '.'
000000000000c52f         db  0x00 ; '.'
000000000000c530         db  0x00 ; '.'
000000000000c531         db  0x00 ; '.'
000000000000c532         db  0x00 ; '.'
000000000000c533         db  0x00 ; '.'
000000000000c534         db  0x00 ; '.'
000000000000c535         db  0x00 ; '.'
000000000000c536         db  0x00 ; '.'
000000000000c537         db  0x00 ; '.'
000000000000c538         db  0x00 ; '.'
000000000000c539         db  0x00 ; '.'
000000000000c53a         db  0x00 ; '.'
000000000000c53b         db  0x00 ; '.'
000000000000c53c         db  0x00 ; '.'
000000000000c53d         db  0x00 ; '.'
000000000000c53e         db  0x00 ; '.'
000000000000c53f         db  0x00 ; '.'
                     charname:
000000000000c540         db  0x6e ; 'n'                                         ; DATA XREF=print_named_ascii+96
000000000000c541         db  0x75 ; 'u'
000000000000c542         db  0x6c ; 'l'
000000000000c543         db  0x00 ; '.'
000000000000c544         db  0x73 ; 's'
000000000000c545         db  0x6f ; 'o'
000000000000c546         db  0x68 ; 'h'
000000000000c547         db  0x00 ; '.'
000000000000c548         db  0x73 ; 's'
000000000000c549         db  0x74 ; 't'
000000000000c54a         db  0x78 ; 'x'
000000000000c54b         db  0x00 ; '.'
000000000000c54c         db  0x65 ; 'e'
000000000000c54d         db  0x74 ; 't'
000000000000c54e         db  0x78 ; 'x'
000000000000c54f         db  0x00 ; '.'
000000000000c550         db  0x65 ; 'e'
000000000000c551         db  0x6f ; 'o'
000000000000c552         db  0x74 ; 't'
000000000000c553         db  0x00 ; '.'
000000000000c554         db  0x65 ; 'e'
000000000000c555         db  0x6e ; 'n'
000000000000c556         db  0x71 ; 'q'
000000000000c557         db  0x00 ; '.'
000000000000c558         db  0x61 ; 'a'
000000000000c559         db  0x63 ; 'c'
000000000000c55a         db  0x6b ; 'k'
000000000000c55b         db  0x00 ; '.'
000000000000c55c         db  0x62 ; 'b'
000000000000c55d         db  0x65 ; 'e'
000000000000c55e         db  0x6c ; 'l'
000000000000c55f         db  0x00 ; '.'
000000000000c560         db  0x62 ; 'b'
000000000000c561         db  0x73 ; 's'
000000000000c562         db  0x00 ; '.'
000000000000c563         db  0x00 ; '.'
000000000000c564         db  0x68 ; 'h'
000000000000c565         db  0x74 ; 't'
000000000000c566         db  0x00 ; '.'
000000000000c567         db  0x00 ; '.'
000000000000c568         db  0x6e ; 'n'
000000000000c569         db  0x6c ; 'l'
000000000000c56a         db  0x00 ; '.'
000000000000c56b         db  0x00 ; '.'
000000000000c56c         db  0x76 ; 'v'
000000000000c56d         db  0x74 ; 't'
000000000000c56e         db  0x00 ; '.'
000000000000c56f         db  0x00 ; '.'
000000000000c570         db  0x66 ; 'f'
000000000000c571         db  0x66 ; 'f'
000000000000c572         db  0x00 ; '.'
000000000000c573         db  0x00 ; '.'
000000000000c574         db  0x63 ; 'c'
000000000000c575         db  0x72 ; 'r'
000000000000c576         db  0x00 ; '.'
000000000000c577         db  0x00 ; '.'
000000000000c578         db  0x73 ; 's'
000000000000c579         db  0x6f ; 'o'
000000000000c57a         db  0x00 ; '.'
000000000000c57b         db  0x00 ; '.'
000000000000c57c         db  0x73 ; 's'
000000000000c57d         db  0x69 ; 'i'
000000000000c57e         db  0x00 ; '.'
000000000000c57f         db  0x00 ; '.'
000000000000c580         db  0x64 ; 'd'
000000000000c581         db  0x6c ; 'l'
000000000000c582         db  0x65 ; 'e'
000000000000c583         db  0x00 ; '.'
000000000000c584         db  0x64 ; 'd'
000000000000c585         db  0x63 ; 'c'
000000000000c586         db  0x31 ; '1'
000000000000c587         db  0x00 ; '.'
000000000000c588         db  0x64 ; 'd'
000000000000c589         db  0x63 ; 'c'
000000000000c58a         db  0x32 ; '2'
000000000000c58b         db  0x00 ; '.'
000000000000c58c         db  0x64 ; 'd'
000000000000c58d         db  0x63 ; 'c'
000000000000c58e         db  0x33 ; '3'
000000000000c58f         db  0x00 ; '.'
000000000000c590         db  0x64 ; 'd'
000000000000c591         db  0x63 ; 'c'
000000000000c592         db  0x34 ; '4'
000000000000c593         db  0x00 ; '.'
000000000000c594         db  0x6e ; 'n'
000000000000c595         db  0x61 ; 'a'
000000000000c596         db  0x6b ; 'k'
000000000000c597         db  0x00 ; '.'
000000000000c598         db  0x73 ; 's'
000000000000c599         db  0x79 ; 'y'
000000000000c59a         db  0x6e ; 'n'
000000000000c59b         db  0x00 ; '.'
000000000000c59c         db  0x65 ; 'e'
000000000000c59d         db  0x74 ; 't'
000000000000c59e         db  0x62 ; 'b'
000000000000c59f         db  0x00 ; '.'
000000000000c5a0         db  0x63 ; 'c'
000000000000c5a1         db  0x61 ; 'a'
000000000000c5a2         db  0x6e ; 'n'
000000000000c5a3         db  0x00 ; '.'
000000000000c5a4         db  0x65 ; 'e'
000000000000c5a5         db  0x6d ; 'm'
000000000000c5a6         db  0x00 ; '.'
000000000000c5a7         db  0x00 ; '.'
000000000000c5a8         db  0x73 ; 's'
000000000000c5a9         db  0x75 ; 'u'
000000000000c5aa         db  0x62 ; 'b'
000000000000c5ab         db  0x00 ; '.'
000000000000c5ac         db  0x65 ; 'e'
000000000000c5ad         db  0x73 ; 's'
000000000000c5ae         db  0x63 ; 'c'
000000000000c5af         db  0x00 ; '.'
000000000000c5b0         db  0x66 ; 'f'
000000000000c5b1         db  0x73 ; 's'
000000000000c5b2         db  0x00 ; '.'
000000000000c5b3         db  0x00 ; '.'
000000000000c5b4         db  0x67 ; 'g'
000000000000c5b5         db  0x73 ; 's'
000000000000c5b6         db  0x00 ; '.'
000000000000c5b7         db  0x00 ; '.'
000000000000c5b8         db  0x72 ; 'r'
000000000000c5b9         db  0x73 ; 's'
000000000000c5ba         db  0x00 ; '.'
000000000000c5bb         db  0x00 ; '.'
000000000000c5bc         db  0x75 ; 'u'
000000000000c5bd         db  0x73 ; 's'
000000000000c5be         db  0x00 ; '.'
000000000000c5bf         db  0x00 ; '.'
000000000000c5c0         db  0x73 ; 's'
000000000000c5c1         db  0x70 ; 'p'
000000000000c5c2         db  0x00 ; '.'
000000000000c5c3         db  0x00 ; '.'
000000000000c5c4         db  0x00 ; '.'
000000000000c5c5         db  0x00 ; '.'
000000000000c5c6         db  0x00 ; '.'
000000000000c5c7         db  0x00 ; '.'
000000000000c5c8         db  0x00 ; '.'
000000000000c5c9         db  0x00 ; '.'
000000000000c5ca         db  0x00 ; '.'
000000000000c5cb         db  0x00 ; '.'
000000000000c5cc         db  0x00 ; '.'
000000000000c5cd         db  0x00 ; '.'
000000000000c5ce         db  0x00 ; '.'
000000000000c5cf         db  0x00 ; '.'
000000000000c5d0         db  0x00 ; '.'
000000000000c5d1         db  0x00 ; '.'
000000000000c5d2         db  0x00 ; '.'
000000000000c5d3         db  0x00 ; '.'
000000000000c5d4         db  0x00 ; '.'
000000000000c5d5         db  0x00 ; '.'
000000000000c5d6         db  0x00 ; '.'
000000000000c5d7         db  0x00 ; '.'
000000000000c5d8         db  0x00 ; '.'
000000000000c5d9         db  0x00 ; '.'
000000000000c5da         db  0x00 ; '.'
000000000000c5db         db  0x00 ; '.'
000000000000c5dc         db  0x00 ; '.'
000000000000c5dd         db  0x00 ; '.'
000000000000c5de         db  0x00 ; '.'
000000000000c5df         db  0x00 ; '.'
                     width_bytes:
000000000000c5e0         db  0xff ; '.'                                         ; DATA XREF=main+1702, main+2486, main+2536, main+3556, write_block+156
000000000000c5e1         db  0xff ; '.'
000000000000c5e2         db  0xff ; '.'
000000000000c5e3         db  0xff ; '.'
000000000000c5e4         db  0x01 ; '.'
000000000000c5e5         db  0x00 ; '.'
000000000000c5e6         db  0x00 ; '.'
000000000000c5e7         db  0x00 ; '.'
000000000000c5e8         db  0x02 ; '.'
000000000000c5e9         db  0x00 ; '.'
000000000000c5ea         db  0x00 ; '.'
000000000000c5eb         db  0x00 ; '.'
000000000000c5ec         db  0x04 ; '.'
000000000000c5ed         db  0x00 ; '.'
000000000000c5ee         db  0x00 ; '.'
000000000000c5ef         db  0x00 ; '.'
000000000000c5f0         db  0x08 ; '.'
000000000000c5f1         db  0x00 ; '.'
000000000000c5f2         db  0x00 ; '.'
000000000000c5f3         db  0x00 ; '.'
000000000000c5f4         db  0x08 ; '.'
000000000000c5f5         db  0x00 ; '.'
000000000000c5f6         db  0x00 ; '.'
000000000000c5f7         db  0x00 ; '.'
000000000000c5f8         db  0x04 ; '.'
000000000000c5f9         db  0x00 ; '.'
000000000000c5fa         db  0x00 ; '.'
000000000000c5fb         db  0x00 ; '.'
000000000000c5fc         db  0x08 ; '.'
000000000000c5fd         db  0x00 ; '.'
000000000000c5fe         db  0x00 ; '.'
000000000000c5ff         db  0x00 ; '.'
000000000000c600         db  0x10 ; '.'
000000000000c601         db  0x00 ; '.'
000000000000c602         db  0x00 ; '.'
000000000000c603         db  0x00 ; '.'
000000000000c604         db  0x00 ; '.'
000000000000c605         db  0x00 ; '.'
000000000000c606         db  0x00 ; '.'
000000000000c607         db  0x00 ; '.'
000000000000c608         db  0x00 ; '.'
000000000000c609         db  0x00 ; '.'
000000000000c60a         db  0x00 ; '.'
000000000000c60b         db  0x00 ; '.'
000000000000c60c         db  0x00 ; '.'
000000000000c60d         db  0x00 ; '.'
000000000000c60e         db  0x00 ; '.'
000000000000c60f         db  0x00 ; '.'
000000000000c610         db  0x00 ; '.'
000000000000c611         db  0x00 ; '.'
000000000000c612         db  0x00 ; '.'
000000000000c613         db  0x00 ; '.'
000000000000c614         db  0x00 ; '.'
000000000000c615         db  0x00 ; '.'
000000000000c616         db  0x00 ; '.'
000000000000c617         db  0x00 ; '.'
000000000000c618         db  0x00 ; '.'
000000000000c619         db  0x00 ; '.'
000000000000c61a         db  0x00 ; '.'
000000000000c61b         db  0x00 ; '.'
000000000000c61c         db  0x00 ; '.'
000000000000c61d         db  0x00 ; '.'
000000000000c61e         db  0x00 ; '.'
000000000000c61f         db  0x00 ; '.'
                     bytes_to_hex_digits:
000000000000c620         db  0x00 ; '.'                                         ; DATA XREF=sub_3dfe+118
000000000000c621         db  0x00 ; '.'
000000000000c622         db  0x00 ; '.'
000000000000c623         db  0x00 ; '.'
000000000000c624         db  0x02 ; '.'
000000000000c625         db  0x00 ; '.'
000000000000c626         db  0x00 ; '.'
000000000000c627         db  0x00 ; '.'
000000000000c628         db  0x04 ; '.'
000000000000c629         db  0x00 ; '.'
000000000000c62a         db  0x00 ; '.'
000000000000c62b         db  0x00 ; '.'
000000000000c62c         db  0x06 ; '.'
000000000000c62d         db  0x00 ; '.'
000000000000c62e         db  0x00 ; '.'
000000000000c62f         db  0x00 ; '.'
000000000000c630         db  0x08 ; '.'
000000000000c631         db  0x00 ; '.'
000000000000c632         db  0x00 ; '.'
000000000000c633         db  0x00 ; '.'
000000000000c634         db  0x0a ; '.'
000000000000c635         db  0x00 ; '.'
000000000000c636         db  0x00 ; '.'
000000000000c637         db  0x00 ; '.'
000000000000c638         db  0x0c ; '.'
000000000000c639         db  0x00 ; '.'
000000000000c63a         db  0x00 ; '.'
000000000000c63b         db  0x00 ; '.'
000000000000c63c         db  0x0e ; '.'
000000000000c63d         db  0x00 ; '.'
000000000000c63e         db  0x00 ; '.'
000000000000c63f         db  0x00 ; '.'
000000000000c640         db  0x10 ; '.'
000000000000c641         db  0x00 ; '.'
000000000000c642         db  0x00 ; '.'
000000000000c643         db  0x00 ; '.'
000000000000c644         db  0x12 ; '.'
000000000000c645         db  0x00 ; '.'
000000000000c646         db  0x00 ; '.'
000000000000c647         db  0x00 ; '.'
000000000000c648         db  0x14 ; '.'
000000000000c649         db  0x00 ; '.'
000000000000c64a         db  0x00 ; '.'
000000000000c64b         db  0x00 ; '.'
000000000000c64c         db  0x16 ; '.'
000000000000c64d         db  0x00 ; '.'
000000000000c64e         db  0x00 ; '.'
000000000000c64f         db  0x00 ; '.'
000000000000c650         db  0x18 ; '.'
000000000000c651         db  0x00 ; '.'
000000000000c652         db  0x00 ; '.'
000000000000c653         db  0x00 ; '.'
000000000000c654         db  0x1a ; '.'
000000000000c655         db  0x00 ; '.'
000000000000c656         db  0x00 ; '.'
000000000000c657         db  0x00 ; '.'
000000000000c658         db  0x1c ; '.'
000000000000c659         db  0x00 ; '.'
000000000000c65a         db  0x00 ; '.'
000000000000c65b         db  0x00 ; '.'
000000000000c65c         db  0x1e ; '.'
000000000000c65d         db  0x00 ; '.'
000000000000c65e         db  0x00 ; '.'
000000000000c65f         db  0x00 ; '.'
000000000000c660         db  0x20 ; ' '
000000000000c661         db  0x00 ; '.'
000000000000c662         db  0x00 ; '.'
000000000000c663         db  0x00 ; '.'
000000000000c664         db  0x00 ; '.'
000000000000c665         db  0x00 ; '.'
000000000000c666         db  0x00 ; '.'
000000000000c667         db  0x00 ; '.'
000000000000c668         db  0x00 ; '.'
000000000000c669         db  0x00 ; '.'
000000000000c66a         db  0x00 ; '.'
000000000000c66b         db  0x00 ; '.'
000000000000c66c         db  0x00 ; '.'
000000000000c66d         db  0x00 ; '.'
000000000000c66e         db  0x00 ; '.'
000000000000c66f         db  0x00 ; '.'
000000000000c670         db  0x00 ; '.'
000000000000c671         db  0x00 ; '.'
000000000000c672         db  0x00 ; '.'
000000000000c673         db  0x00 ; '.'
000000000000c674         db  0x00 ; '.'
000000000000c675         db  0x00 ; '.'
000000000000c676         db  0x00 ; '.'
000000000000c677         db  0x00 ; '.'
000000000000c678         db  0x00 ; '.'
000000000000c679         db  0x00 ; '.'
000000000000c67a         db  0x00 ; '.'
000000000000c67b         db  0x00 ; '.'
000000000000c67c         db  0x00 ; '.'
000000000000c67d         db  0x00 ; '.'
000000000000c67e         db  0x00 ; '.'
000000000000c67f         db  0x00 ; '.'
                     bytes_to_unsigned_dec_digits:
000000000000c680         db  0x00 ; '.'                                         ; DATA XREF=sub_3dfe+834
000000000000c681         db  0x00 ; '.'
000000000000c682         db  0x00 ; '.'
000000000000c683         db  0x00 ; '.'
000000000000c684         db  0x03 ; '.'
000000000000c685         db  0x00 ; '.'
000000000000c686         db  0x00 ; '.'
000000000000c687         db  0x00 ; '.'
000000000000c688         db  0x05 ; '.'
000000000000c689         db  0x00 ; '.'
000000000000c68a         db  0x00 ; '.'
000000000000c68b         db  0x00 ; '.'
000000000000c68c         db  0x08 ; '.'
000000000000c68d         db  0x00 ; '.'
000000000000c68e         db  0x00 ; '.'
000000000000c68f         db  0x00 ; '.'
000000000000c690         db  0x0a ; '.'
000000000000c691         db  0x00 ; '.'
000000000000c692         db  0x00 ; '.'
000000000000c693         db  0x00 ; '.'
000000000000c694         db  0x0d ; '.'
000000000000c695         db  0x00 ; '.'
000000000000c696         db  0x00 ; '.'
000000000000c697         db  0x00 ; '.'
000000000000c698         db  0x0f ; '.'
000000000000c699         db  0x00 ; '.'
000000000000c69a         db  0x00 ; '.'
000000000000c69b         db  0x00 ; '.'
000000000000c69c         db  0x11 ; '.'
000000000000c69d         db  0x00 ; '.'
000000000000c69e         db  0x00 ; '.'
000000000000c69f         db  0x00 ; '.'
000000000000c6a0         db  0x14 ; '.'
000000000000c6a1         db  0x00 ; '.'
000000000000c6a2         db  0x00 ; '.'
000000000000c6a3         db  0x00 ; '.'
000000000000c6a4         db  0x16 ; '.'
000000000000c6a5         db  0x00 ; '.'
000000000000c6a6         db  0x00 ; '.'
000000000000c6a7         db  0x00 ; '.'
000000000000c6a8         db  0x19 ; '.'
000000000000c6a9         db  0x00 ; '.'
000000000000c6aa         db  0x00 ; '.'
000000000000c6ab         db  0x00 ; '.'
000000000000c6ac         db  0x1b ; '.'
000000000000c6ad         db  0x00 ; '.'
000000000000c6ae         db  0x00 ; '.'
000000000000c6af         db  0x00 ; '.'
000000000000c6b0         db  0x1d ; '.'
000000000000c6b1         db  0x00 ; '.'
000000000000c6b2         db  0x00 ; '.'
000000000000c6b3         db  0x00 ; '.'
000000000000c6b4         db  0x20 ; ' '
000000000000c6b5         db  0x00 ; '.'
000000000000c6b6         db  0x00 ; '.'
000000000000c6b7         db  0x00 ; '.'
000000000000c6b8         db  0x22 ; '"'
000000000000c6b9         db  0x00 ; '.'
000000000000c6ba         db  0x00 ; '.'
000000000000c6bb         db  0x00 ; '.'
000000000000c6bc         db  0x25 ; '%'
000000000000c6bd         db  0x00 ; '.'
000000000000c6be         db  0x00 ; '.'
000000000000c6bf         db  0x00 ; '.'
000000000000c6c0         db  0x27 ; '''
000000000000c6c1         db  0x00 ; '.'
000000000000c6c2         db  0x00 ; '.'
000000000000c6c3         db  0x00 ; '.'
000000000000c6c4         db  0x00 ; '.'
000000000000c6c5         db  0x00 ; '.'
000000000000c6c6         db  0x00 ; '.'
000000000000c6c7         db  0x00 ; '.'
000000000000c6c8         db  0x00 ; '.'
000000000000c6c9         db  0x00 ; '.'
000000000000c6ca         db  0x00 ; '.'
000000000000c6cb         db  0x00 ; '.'
000000000000c6cc         db  0x00 ; '.'
000000000000c6cd         db  0x00 ; '.'
000000000000c6ce         db  0x00 ; '.'
000000000000c6cf         db  0x00 ; '.'
000000000000c6d0         db  0x00 ; '.'
000000000000c6d1         db  0x00 ; '.'
000000000000c6d2         db  0x00 ; '.'
000000000000c6d3         db  0x00 ; '.'
000000000000c6d4         db  0x00 ; '.'
000000000000c6d5         db  0x00 ; '.'
000000000000c6d6         db  0x00 ; '.'
000000000000c6d7         db  0x00 ; '.'
000000000000c6d8         db  0x00 ; '.'
000000000000c6d9         db  0x00 ; '.'
000000000000c6da         db  0x00 ; '.'
000000000000c6db         db  0x00 ; '.'
000000000000c6dc         db  0x00 ; '.'
000000000000c6dd         db  0x00 ; '.'
000000000000c6de         db  0x00 ; '.'
000000000000c6df         db  0x00 ; '.'
                     bytes_to_signed_dec_digits:
000000000000c6e0         db  0x01 ; '.'                                         ; DATA XREF=sub_3dfe+748
000000000000c6e1         db  0x00 ; '.'
000000000000c6e2         db  0x00 ; '.'
000000000000c6e3         db  0x00 ; '.'
000000000000c6e4         db  0x04 ; '.'
000000000000c6e5         db  0x00 ; '.'
000000000000c6e6         db  0x00 ; '.'
000000000000c6e7         db  0x00 ; '.'
000000000000c6e8         db  0x06 ; '.'
000000000000c6e9         db  0x00 ; '.'
000000000000c6ea         db  0x00 ; '.'
000000000000c6eb         db  0x00 ; '.'
000000000000c6ec         db  0x08 ; '.'
000000000000c6ed         db  0x00 ; '.'
000000000000c6ee         db  0x00 ; '.'
000000000000c6ef         db  0x00 ; '.'
000000000000c6f0         db  0x0b ; '.'
000000000000c6f1         db  0x00 ; '.'
000000000000c6f2         db  0x00 ; '.'
000000000000c6f3         db  0x00 ; '.'
000000000000c6f4         db  0x0d ; '.'
000000000000c6f5         db  0x00 ; '.'
000000000000c6f6         db  0x00 ; '.'
000000000000c6f7         db  0x00 ; '.'
000000000000c6f8         db  0x10 ; '.'
000000000000c6f9         db  0x00 ; '.'
000000000000c6fa         db  0x00 ; '.'
000000000000c6fb         db  0x00 ; '.'
000000000000c6fc         db  0x12 ; '.'
000000000000c6fd         db  0x00 ; '.'
000000000000c6fe         db  0x00 ; '.'
000000000000c6ff         db  0x00 ; '.'
000000000000c700         db  0x14 ; '.'
000000000000c701         db  0x00 ; '.'
000000000000c702         db  0x00 ; '.'
000000000000c703         db  0x00 ; '.'
000000000000c704         db  0x17 ; '.'
000000000000c705         db  0x00 ; '.'
000000000000c706         db  0x00 ; '.'
000000000000c707         db  0x00 ; '.'
000000000000c708         db  0x19 ; '.'
000000000000c709         db  0x00 ; '.'
000000000000c70a         db  0x00 ; '.'
000000000000c70b         db  0x00 ; '.'
000000000000c70c         db  0x1c ; '.'
000000000000c70d         db  0x00 ; '.'
000000000000c70e         db  0x00 ; '.'
000000000000c70f         db  0x00 ; '.'
000000000000c710         db  0x1e ; '.'
000000000000c711         db  0x00 ; '.'
000000000000c712         db  0x00 ; '.'
000000000000c713         db  0x00 ; '.'
000000000000c714         db  0x21 ; '!'
000000000000c715         db  0x00 ; '.'
000000000000c716         db  0x00 ; '.'
000000000000c717         db  0x00 ; '.'
000000000000c718         db  0x23 ; '#'
000000000000c719         db  0x00 ; '.'
000000000000c71a         db  0x00 ; '.'
000000000000c71b         db  0x00 ; '.'
000000000000c71c         db  0x25 ; '%'
000000000000c71d         db  0x00 ; '.'
000000000000c71e         db  0x00 ; '.'
000000000000c71f         db  0x00 ; '.'
000000000000c720         db  0x28 ; '('
000000000000c721         db  0x00 ; '.'
000000000000c722         db  0x00 ; '.'
000000000000c723         db  0x00 ; '.'
000000000000c724         db  0x00 ; '.'
000000000000c725         db  0x00 ; '.'
000000000000c726         db  0x00 ; '.'
000000000000c727         db  0x00 ; '.'
000000000000c728         db  0x00 ; '.'
000000000000c729         db  0x00 ; '.'
000000000000c72a         db  0x00 ; '.'
000000000000c72b         db  0x00 ; '.'
000000000000c72c         db  0x00 ; '.'
000000000000c72d         db  0x00 ; '.'
000000000000c72e         db  0x00 ; '.'
000000000000c72f         db  0x00 ; '.'
000000000000c730         db  0x00 ; '.'
000000000000c731         db  0x00 ; '.'
000000000000c732         db  0x00 ; '.'
000000000000c733         db  0x00 ; '.'
000000000000c734         db  0x00 ; '.'
000000000000c735         db  0x00 ; '.'
000000000000c736         db  0x00 ; '.'
000000000000c737         db  0x00 ; '.'
000000000000c738         db  0x00 ; '.'
000000000000c739         db  0x00 ; '.'
000000000000c73a         db  0x00 ; '.'
000000000000c73b         db  0x00 ; '.'
000000000000c73c         db  0x00 ; '.'
000000000000c73d         db  0x00 ; '.'
000000000000c73e         db  0x00 ; '.'
000000000000c73f         db  0x00 ; '.'
                     bytes_to_oct_digits:
000000000000c740         db  0x00 ; '.'                                         ; DATA XREF=decode_format_string+454
000000000000c741         db  0x00 ; '.'
000000000000c742         db  0x00 ; '.'
000000000000c743         db  0x00 ; '.'
000000000000c744         db  0x03 ; '.'
000000000000c745         db  0x00 ; '.'
000000000000c746         db  0x00 ; '.'
000000000000c747         db  0x00 ; '.'
000000000000c748         db  0x06 ; '.'
000000000000c749         db  0x00 ; '.'
000000000000c74a         db  0x00 ; '.'
000000000000c74b         db  0x00 ; '.'
000000000000c74c         db  0x08 ; '.'
000000000000c74d         db  0x00 ; '.'
000000000000c74e         db  0x00 ; '.'
000000000000c74f         db  0x00 ; '.'
000000000000c750         db  0x0b ; '.'
000000000000c751         db  0x00 ; '.'
000000000000c752         db  0x00 ; '.'
000000000000c753         db  0x00 ; '.'
000000000000c754         db  0x0e ; '.'
000000000000c755         db  0x00 ; '.'
000000000000c756         db  0x00 ; '.'
000000000000c757         db  0x00 ; '.'
000000000000c758         db  0x10 ; '.'
000000000000c759         db  0x00 ; '.'
000000000000c75a         db  0x00 ; '.'
000000000000c75b         db  0x00 ; '.'
000000000000c75c         db  0x13 ; '.'
000000000000c75d         db  0x00 ; '.'
000000000000c75e         db  0x00 ; '.'
000000000000c75f         db  0x00 ; '.'
000000000000c760         db  0x16 ; '.'
000000000000c761         db  0x00 ; '.'
000000000000c762         db  0x00 ; '.'
000000000000c763         db  0x00 ; '.'
000000000000c764         db  0x19 ; '.'
000000000000c765         db  0x00 ; '.'
000000000000c766         db  0x00 ; '.'
000000000000c767         db  0x00 ; '.'
000000000000c768         db  0x1b ; '.'
000000000000c769         db  0x00 ; '.'
000000000000c76a         db  0x00 ; '.'
000000000000c76b         db  0x00 ; '.'
000000000000c76c         db  0x1e ; '.'
000000000000c76d         db  0x00 ; '.'
000000000000c76e         db  0x00 ; '.'
000000000000c76f         db  0x00 ; '.'
000000000000c770         db  0x20 ; ' '
000000000000c771         db  0x00 ; '.'
000000000000c772         db  0x00 ; '.'
000000000000c773         db  0x00 ; '.'
000000000000c774         db  0x23 ; '#'
000000000000c775         db  0x00 ; '.'
000000000000c776         db  0x00 ; '.'
000000000000c777         db  0x00 ; '.'
000000000000c778         db  0x26 ; '&'
000000000000c779         db  0x00 ; '.'
000000000000c77a         db  0x00 ; '.'
000000000000c77b         db  0x00 ; '.'
000000000000c77c         db  0x29 ; ')'
000000000000c77d         db  0x00 ; '.'
000000000000c77e         db  0x00 ; '.'
000000000000c77f         db  0x00 ; '.'
000000000000c780         db  0x2b ; '+'
000000000000c781         db  0x00 ; '.'
000000000000c782         db  0x00 ; '.'
000000000000c783         db  0x00 ; '.'
                     a831:
000000000000c784         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
000000000000c789         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000000c7a4         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000000c7c1         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000000c7d6         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000000c7de         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000000c7df         db  0x20 ; ' '
000000000000c7e0         db  0x25 ; '%'                                         ; DATA XREF=main+2387, check_and_close+309, open_next_file+221, skip+247, close_stdout+143, xalloc_die+29
000000000000c7e1         db  0x73 ; 's'
000000000000c7e2         db  0x00 ; '.'
                     aSS:
000000000000c7e3         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
000000000000c7ea         db  0x00 ; '.'
000000000000c7eb         db  0x00 ; '.'
000000000000c7ec         db  0x00 ; '.'
000000000000c7ed         db  0x00 ; '.'
000000000000c7ee         db  0x00 ; '.'
000000000000c7ef         db  0x00 ; '.'
000000000000c7f0         dq         -0.0, 0.0                                   ; DATA XREF=dtoastr+340
                     double_c800:        // double
000000000000c800         dq         2.22507e-308                                ; DATA XREF=dtoastr+119
000000000000c808         db  0x00 ; '.'
000000000000c809         db  0x00 ; '.'
000000000000c80a         db  0x00 ; '.'
000000000000c80b         db  0x00 ; '.'
000000000000c80c         db  0x00 ; '.'
000000000000c80d         db  0x00 ; '.'
000000000000c80e         db  0x00 ; '.'
000000000000c80f         db  0x00 ; '.'
000000000000c810         dq         1.061e-314, 0.0                             ; DATA XREF=ftoastr+347
                     float_c820:        // float
000000000000c820         dd         1.17549e-38f                                ; DATA XREF=ftoastr+134
000000000000c824         db  0x00 ; '.'
000000000000c825         db  0x00 ; '.'
000000000000c826         db  0x00 ; '.'
000000000000c827         db  0x00 ; '.'
000000000000c828         db  0x00 ; '.'
000000000000c829         db  0x00 ; '.'
000000000000c82a         db  0x00 ; '.'
000000000000c82b         db  0x00 ; '.'
000000000000c82c         db  0x00 ; '.'
000000000000c82d         db  0x00 ; '.'
000000000000c82e         db  0x00 ; '.'
000000000000c82f         db  0x00 ; '.'
000000000000c830         db  0x00 ; '.'                                         ; DATA XREF=ldtoastr+129
000000000000c831         db  0x00 ; '.'
000000000000c832         db  0x00 ; '.'
000000000000c833         db  0x00 ; '.'
000000000000c834         db  0x00 ; '.'
000000000000c835         db  0x00 ; '.'
000000000000c836         db  0x00 ; '.'
000000000000c837         db  0x80 ; '.'
000000000000c838         db  0x01 ; '.'
000000000000c839         db  0x00 ; '.'
000000000000c83a         db  0x00 ; '.'
000000000000c83b         db  0x00 ; '.'
000000000000c83c         db  0x00 ; '.'
000000000000c83d         db  0x00 ; '.'
000000000000c83e         db  0x00 ; '.'
000000000000c83f         db  0x00 ; '.'
                     aANullArgv0WasP:
000000000000c840         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000c878         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000c880         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000c881         db  0x74 ; 't'
000000000000c882         db  0x2d ; '-'
000000000000c883         db  0x00 ; '.'
000000000000c884         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000c885         db  0x80 ; '.'
000000000000c886         db  0x98 ; '.'
000000000000c887         db  0x00 ; '.'
000000000000c888         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000c889         db  0x80 ; '.'
000000000000c88a         db  0x99 ; '.'
000000000000c88b         db  0x00 ; '.'
000000000000c88c         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000c88d         db  0x07 ; '.'
000000000000c88e         db  0x65 ; 'e'
000000000000c88f         db  0x00 ; '.'
000000000000c890         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000c891         db  0xaf ; '.'
000000000000c892         db  0x00 ; '.'
000000000000c893         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_63e0+1451, sub_63e0+1493, sub_63e0+2429
000000000000c894         db  0x00 ; '.'
000000000000c895         db  0x60 ; '`'                                         ; DATA XREF=sub_63e0+1627, sub_63e0+1654
000000000000c896         db  0x00 ; '.'
                     aLiteral:
000000000000c897         db         "literal", 0
                     aShell:
000000000000c89f         db         "shell", 0
                     aShellalways:
000000000000c8a5         db         "shell-always", 0
000000000000c8b2         db  0x73 ; 's'
000000000000c8b3         db  0x68 ; 'h'
000000000000c8b4         db  0x65 ; 'e'
000000000000c8b5         db  0x6c ; 'l'
000000000000c8b6         db  0x6c ; 'l'
000000000000c8b7         db  0x2d ; '-'
                     aEscape:
000000000000c8b8         db         "escape", 0
                     aShellescapealw:
000000000000c8bf         db         "shell-escape-always", 0
                     aCmaybe:
000000000000c8d3         db         "c-maybe", 0
                     aClocale:
000000000000c8db         db         "clocale", 0
000000000000c8e3         align      256
                     switch_table_c900:        // switch_table
000000000000c900         dd         quotearg_buffer_restyled.loc_6ada-switch_table_c900, quotearg_buffer_restyled.loc_5d33-switch_table_c900, quotearg_buffer_restyled.loc_6d08-switch_table_c900, quotearg_buffer_restyled.loc_6b14-switch_table_c900 ; switch table used at 0x5d31 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000c910         dd         quotearg_buffer_restyled.loc_6904-switch_table_c900, quotearg_buffer_restyled.loc_6960-switch_table_c900, quotearg_buffer_restyled.loc_69b5-switch_table_c900, quotearg_buffer_restyled.loc_69fa-switch_table_c900
000000000000c920         dd         3 dup (quotearg_buffer_restyled.loc_6a34-switch_table_c900)
000000000000c92c         db  0x84 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000c92d         db  0x97 ; '.'
000000000000c92e         db  0xff ; '.'
000000000000c92f         db  0xff ; '.'
000000000000c930         db  0x6c ; 'l'
000000000000c931         db  0x98 ; '.'
000000000000c932         db  0xff ; '.'
000000000000c933         db  0xff ; '.'
000000000000c934         db  0x6c ; 'l'
000000000000c935         db  0x98 ; '.'
000000000000c936         db  0xff ; '.'
000000000000c937         db  0xff ; '.'
000000000000c938         db  0x6c ; 'l'
000000000000c939         db  0x98 ; '.'
000000000000c93a         db  0xff ; '.'
000000000000c93b         db  0xff ; '.'
000000000000c93c         db  0x6c ; 'l'
000000000000c93d         db  0x98 ; '.'
000000000000c93e         db  0xff ; '.'
000000000000c93f         db  0xff ; '.'
000000000000c940         db  0x6c ; 'l'
000000000000c941         db  0x98 ; '.'
000000000000c942         db  0xff ; '.'
000000000000c943         db  0xff ; '.'
000000000000c944         db  0x6c ; 'l'
000000000000c945         db  0x98 ; '.'
000000000000c946         db  0xff ; '.'
000000000000c947         db  0xff ; '.'
000000000000c948         db  0xc4 ; '.'
000000000000c949         db  0x97 ; '.'
000000000000c94a         db  0xff ; '.'
000000000000c94b         db  0xff ; '.'
000000000000c94c         db  0xcc ; '.'
000000000000c94d         db  0x96 ; '.'
000000000000c94e         db  0xff ; '.'
000000000000c94f         db  0xff ; '.'
000000000000c950         db  0x8c ; '.'
000000000000c951         db  0x96 ; '.'
000000000000c952         db  0xff ; '.'
000000000000c953         db  0xff ; '.'
000000000000c954         db  0x54 ; 'T'
000000000000c955         db  0x98 ; '.'
000000000000c956         db  0xff ; '.'
000000000000c957         db  0xff ; '.'
000000000000c958         db  0x44 ; 'D'
000000000000c959         db  0x98 ; '.'
000000000000c95a         db  0xff ; '.'
000000000000c95b         db  0xff ; '.'
000000000000c95c         db  0x34 ; '4'
000000000000c95d         db  0x98 ; '.'
000000000000c95e         db  0xff ; '.'
000000000000c95f         db  0xff ; '.'
000000000000c960         db  0x24 ; '$'
000000000000c961         db  0x98 ; '.'
000000000000c962         db  0xff ; '.'
000000000000c963         db  0xff ; '.'
000000000000c964         db  0x6c ; 'l'
000000000000c965         db  0x98 ; '.'
000000000000c966         db  0xff ; '.'
000000000000c967         db  0xff ; '.'
000000000000c968         db  0x6c ; 'l'
000000000000c969         db  0x98 ; '.'
000000000000c96a         db  0xff ; '.'
000000000000c96b         db  0xff ; '.'
000000000000c96c         db  0x6c ; 'l'
000000000000c96d         db  0x98 ; '.'
000000000000c96e         db  0xff ; '.'
000000000000c96f         db  0xff ; '.'
000000000000c970         db  0x6c ; 'l'
000000000000c971         db  0x98 ; '.'
000000000000c972         db  0xff ; '.'
000000000000c973         db  0xff ; '.'
000000000000c974         db  0x6c ; 'l'
000000000000c975         db  0x98 ; '.'
000000000000c976         db  0xff ; '.'
000000000000c977         db  0xff ; '.'
000000000000c978         db  0x6c ; 'l'
000000000000c979         db  0x98 ; '.'
000000000000c97a         db  0xff ; '.'
000000000000c97b         db  0xff ; '.'
000000000000c97c         db  0x6c ; 'l'
000000000000c97d         db  0x98 ; '.'
000000000000c97e         db  0xff ; '.'
000000000000c97f         db  0xff ; '.'
000000000000c980         db  0x6c ; 'l'
000000000000c981         db  0x98 ; '.'
000000000000c982         db  0xff ; '.'
000000000000c983         db  0xff ; '.'
000000000000c984         db  0x6c ; 'l'
000000000000c985         db  0x98 ; '.'
000000000000c986         db  0xff ; '.'
000000000000c987         db  0xff ; '.'
000000000000c988         db  0x6c ; 'l'
000000000000c989         db  0x98 ; '.'
000000000000c98a         db  0xff ; '.'
000000000000c98b         db  0xff ; '.'
000000000000c98c         db  0x6c ; 'l'
000000000000c98d         db  0x98 ; '.'
000000000000c98e         db  0xff ; '.'
000000000000c98f         db  0xff ; '.'
000000000000c990         db  0x6c ; 'l'
000000000000c991         db  0x98 ; '.'
000000000000c992         db  0xff ; '.'
000000000000c993         db  0xff ; '.'
000000000000c994         db  0x6c ; 'l'
000000000000c995         db  0x98 ; '.'
000000000000c996         db  0xff ; '.'
000000000000c997         db  0xff ; '.'
000000000000c998         db  0x6c ; 'l'
000000000000c999         db  0x98 ; '.'
000000000000c99a         db  0xff ; '.'
000000000000c99b         db  0xff ; '.'
000000000000c99c         db  0x6c ; 'l'
000000000000c99d         db  0x98 ; '.'
000000000000c99e         db  0xff ; '.'
000000000000c99f         db  0xff ; '.'
000000000000c9a0         db  0x6c ; 'l'
000000000000c9a1         db  0x98 ; '.'
000000000000c9a2         db  0xff ; '.'
000000000000c9a3         db  0xff ; '.'
000000000000c9a4         db  0x6c ; 'l'
000000000000c9a5         db  0x98 ; '.'
000000000000c9a6         db  0xff ; '.'
000000000000c9a7         db  0xff ; '.'
000000000000c9a8         db  0x6c ; 'l'
000000000000c9a9         db  0x98 ; '.'
000000000000c9aa         db  0xff ; '.'
000000000000c9ab         db  0xff ; '.'
000000000000c9ac         db  0x14 ; '.'
000000000000c9ad         db  0x98 ; '.'
000000000000c9ae         db  0xff ; '.'
000000000000c9af         db  0xff ; '.'
000000000000c9b0         db  0x04 ; '.'
000000000000c9b1         db  0x98 ; '.'
000000000000c9b2         db  0xff ; '.'
000000000000c9b3         db  0xff ; '.'
000000000000c9b4         db  0x04 ; '.'
000000000000c9b5         db  0x98 ; '.'
000000000000c9b6         db  0xff ; '.'
000000000000c9b7         db  0xff ; '.'
000000000000c9b8         db  0xd4 ; '.'
000000000000c9b9         db  0x97 ; '.'
000000000000c9ba         db  0xff ; '.'
000000000000c9bb         db  0xff ; '.'
000000000000c9bc         db  0x04 ; '.'
000000000000c9bd         db  0x98 ; '.'
000000000000c9be         db  0xff ; '.'
000000000000c9bf         db  0xff ; '.'
000000000000c9c0         db  0xac ; '.'
000000000000c9c1         db  0x97 ; '.'
000000000000c9c2         db  0xff ; '.'
000000000000c9c3         db  0xff ; '.'
000000000000c9c4         db  0x04 ; '.'
000000000000c9c5         db  0x98 ; '.'
000000000000c9c6         db  0xff ; '.'
000000000000c9c7         db  0xff ; '.'
000000000000c9c8         db  0x67 ; 'g'
000000000000c9c9         db  0x96 ; '.'
000000000000c9ca         db  0xff ; '.'
000000000000c9cb         db  0xff ; '.'
000000000000c9cc         db  0x04 ; '.'
000000000000c9cd         db  0x98 ; '.'
000000000000c9ce         db  0xff ; '.'
000000000000c9cf         db  0xff ; '.'
000000000000c9d0         db  0x04 ; '.'
000000000000c9d1         db  0x98 ; '.'
000000000000c9d2         db  0xff ; '.'
000000000000c9d3         db  0xff ; '.'
000000000000c9d4         db  0x04 ; '.'
000000000000c9d5         db  0x98 ; '.'
000000000000c9d6         db  0xff ; '.'
000000000000c9d7         db  0xff ; '.'
000000000000c9d8         db  0xac ; '.'
000000000000c9d9         db  0x97 ; '.'
000000000000c9da         db  0xff ; '.'
000000000000c9db         db  0xff ; '.'
000000000000c9dc         db  0xac ; '.'
000000000000c9dd         db  0x97 ; '.'
000000000000c9de         db  0xff ; '.'
000000000000c9df         db  0xff ; '.'
000000000000c9e0         db  0xac ; '.'
000000000000c9e1         db  0x97 ; '.'
000000000000c9e2         db  0xff ; '.'
000000000000c9e3         db  0xff ; '.'
000000000000c9e4         db  0xac ; '.'
000000000000c9e5         db  0x97 ; '.'
000000000000c9e6         db  0xff ; '.'
000000000000c9e7         db  0xff ; '.'
000000000000c9e8         db  0xac ; '.'
000000000000c9e9         db  0x97 ; '.'
000000000000c9ea         db  0xff ; '.'
000000000000c9eb         db  0xff ; '.'
000000000000c9ec         db  0xac ; '.'
000000000000c9ed         db  0x97 ; '.'
000000000000c9ee         db  0xff ; '.'
000000000000c9ef         db  0xff ; '.'
000000000000c9f0         db  0xac ; '.'
000000000000c9f1         db  0x97 ; '.'
000000000000c9f2         db  0xff ; '.'
000000000000c9f3         db  0xff ; '.'
000000000000c9f4         db  0xac ; '.'
000000000000c9f5         db  0x97 ; '.'
000000000000c9f6         db  0xff ; '.'
000000000000c9f7         db  0xff ; '.'
000000000000c9f8         db  0xac ; '.'
000000000000c9f9         db  0x97 ; '.'
000000000000c9fa         db  0xff ; '.'
000000000000c9fb         db  0xff ; '.'
000000000000c9fc         db  0xac ; '.'
000000000000c9fd         db  0x97 ; '.'
000000000000c9fe         db  0xff ; '.'
000000000000c9ff         db  0xff ; '.'
000000000000ca00         db  0xac ; '.'
000000000000ca01         db  0x97 ; '.'
000000000000ca02         db  0xff ; '.'
000000000000ca03         db  0xff ; '.'
000000000000ca04         db  0xac ; '.'
000000000000ca05         db  0x97 ; '.'
000000000000ca06         db  0xff ; '.'
000000000000ca07         db  0xff ; '.'
000000000000ca08         db  0xac ; '.'
000000000000ca09         db  0x97 ; '.'
000000000000ca0a         db  0xff ; '.'
000000000000ca0b         db  0xff ; '.'
000000000000ca0c         db  0xac ; '.'
000000000000ca0d         db  0x97 ; '.'
000000000000ca0e         db  0xff ; '.'
000000000000ca0f         db  0xff ; '.'
000000000000ca10         db  0xac ; '.'
000000000000ca11         db  0x97 ; '.'
000000000000ca12         db  0xff ; '.'
000000000000ca13         db  0xff ; '.'
000000000000ca14         db  0xac ; '.'
000000000000ca15         db  0x97 ; '.'
000000000000ca16         db  0xff ; '.'
000000000000ca17         db  0xff ; '.'
000000000000ca18         db  0x04 ; '.'
000000000000ca19         db  0x98 ; '.'
000000000000ca1a         db  0xff ; '.'
000000000000ca1b         db  0xff ; '.'
000000000000ca1c         db  0x04 ; '.'
000000000000ca1d         db  0x98 ; '.'
000000000000ca1e         db  0xff ; '.'
000000000000ca1f         db  0xff ; '.'
000000000000ca20         db  0x04 ; '.'
000000000000ca21         db  0x98 ; '.'
000000000000ca22         db  0xff ; '.'
000000000000ca23         db  0xff ; '.'
000000000000ca24         db  0x04 ; '.'
000000000000ca25         db  0x98 ; '.'
000000000000ca26         db  0xff ; '.'
000000000000ca27         db  0xff ; '.'
000000000000ca28         db  0x37 ; '7'
000000000000ca29         db  0x96 ; '.'
000000000000ca2a         db  0xff ; '.'
000000000000ca2b         db  0xff ; '.'
000000000000ca2c         db  0x6c ; 'l'
000000000000ca2d         db  0x98 ; '.'
000000000000ca2e         db  0xff ; '.'
000000000000ca2f         db  0xff ; '.'
000000000000ca30         db  0xac ; '.'
000000000000ca31         db  0x97 ; '.'
000000000000ca32         db  0xff ; '.'
000000000000ca33         db  0xff ; '.'
000000000000ca34         db  0xac ; '.'
000000000000ca35         db  0x97 ; '.'
000000000000ca36         db  0xff ; '.'
000000000000ca37         db  0xff ; '.'
000000000000ca38         db  0xac ; '.'
000000000000ca39         db  0x97 ; '.'
000000000000ca3a         db  0xff ; '.'
000000000000ca3b         db  0xff ; '.'
000000000000ca3c         db  0xac ; '.'
000000000000ca3d         db  0x97 ; '.'
000000000000ca3e         db  0xff ; '.'
000000000000ca3f         db  0xff ; '.'
000000000000ca40         db  0xac ; '.'
000000000000ca41         db  0x97 ; '.'
000000000000ca42         db  0xff ; '.'
000000000000ca43         db  0xff ; '.'
000000000000ca44         db  0xac ; '.'
000000000000ca45         db  0x97 ; '.'
000000000000ca46         db  0xff ; '.'
000000000000ca47         db  0xff ; '.'
000000000000ca48         db  0xac ; '.'
000000000000ca49         db  0x97 ; '.'
000000000000ca4a         db  0xff ; '.'
000000000000ca4b         db  0xff ; '.'
000000000000ca4c         db  0xac ; '.'
000000000000ca4d         db  0x97 ; '.'
000000000000ca4e         db  0xff ; '.'
000000000000ca4f         db  0xff ; '.'
000000000000ca50         db  0xac ; '.'
000000000000ca51         db  0x97 ; '.'
000000000000ca52         db  0xff ; '.'
000000000000ca53         db  0xff ; '.'
000000000000ca54         db  0xac ; '.'
000000000000ca55         db  0x97 ; '.'
000000000000ca56         db  0xff ; '.'
000000000000ca57         db  0xff ; '.'
000000000000ca58         db  0xac ; '.'
000000000000ca59         db  0x97 ; '.'
000000000000ca5a         db  0xff ; '.'
000000000000ca5b         db  0xff ; '.'
000000000000ca5c         db  0xac ; '.'
000000000000ca5d         db  0x97 ; '.'
000000000000ca5e         db  0xff ; '.'
000000000000ca5f         db  0xff ; '.'
000000000000ca60         db  0xac ; '.'
000000000000ca61         db  0x97 ; '.'
000000000000ca62         db  0xff ; '.'
000000000000ca63         db  0xff ; '.'
000000000000ca64         db  0xac ; '.'
000000000000ca65         db  0x97 ; '.'
000000000000ca66         db  0xff ; '.'
000000000000ca67         db  0xff ; '.'
000000000000ca68         db  0xac ; '.'
000000000000ca69         db  0x97 ; '.'
000000000000ca6a         db  0xff ; '.'
000000000000ca6b         db  0xff ; '.'
000000000000ca6c         db  0xac ; '.'
000000000000ca6d         db  0x97 ; '.'
000000000000ca6e         db  0xff ; '.'
000000000000ca6f         db  0xff ; '.'
000000000000ca70         db  0xac ; '.'
000000000000ca71         db  0x97 ; '.'
000000000000ca72         db  0xff ; '.'
000000000000ca73         db  0xff ; '.'
000000000000ca74         db  0xac ; '.'
000000000000ca75         db  0x97 ; '.'
000000000000ca76         db  0xff ; '.'
000000000000ca77         db  0xff ; '.'
000000000000ca78         db  0xac ; '.'
000000000000ca79         db  0x97 ; '.'
000000000000ca7a         db  0xff ; '.'
000000000000ca7b         db  0xff ; '.'
000000000000ca7c         db  0xac ; '.'
000000000000ca7d         db  0x97 ; '.'
000000000000ca7e         db  0xff ; '.'
000000000000ca7f         db  0xff ; '.'
000000000000ca80         db  0xac ; '.'
000000000000ca81         db  0x97 ; '.'
000000000000ca82         db  0xff ; '.'
000000000000ca83         db  0xff ; '.'
000000000000ca84         db  0xac ; '.'
000000000000ca85         db  0x97 ; '.'
000000000000ca86         db  0xff ; '.'
000000000000ca87         db  0xff ; '.'
000000000000ca88         db  0xac ; '.'
000000000000ca89         db  0x97 ; '.'
000000000000ca8a         db  0xff ; '.'
000000000000ca8b         db  0xff ; '.'
000000000000ca8c         db  0xac ; '.'
000000000000ca8d         db  0x97 ; '.'
000000000000ca8e         db  0xff ; '.'
000000000000ca8f         db  0xff ; '.'
000000000000ca90         db  0xac ; '.'
000000000000ca91         db  0x97 ; '.'
000000000000ca92         db  0xff ; '.'
000000000000ca93         db  0xff ; '.'
000000000000ca94         db  0xac ; '.'
000000000000ca95         db  0x97 ; '.'
000000000000ca96         db  0xff ; '.'
000000000000ca97         db  0xff ; '.'
000000000000ca98         db  0x04 ; '.'
000000000000ca99         db  0x98 ; '.'
000000000000ca9a         db  0xff ; '.'
000000000000ca9b         db  0xff ; '.'
000000000000ca9c         db  0xdc ; '.'
000000000000ca9d         db  0x96 ; '.'
000000000000ca9e         db  0xff ; '.'
000000000000ca9f         db  0xff ; '.'
000000000000caa0         db  0xac ; '.'
000000000000caa1         db  0x97 ; '.'
000000000000caa2         db  0xff ; '.'
000000000000caa3         db  0xff ; '.'
000000000000caa4         db  0x04 ; '.'
000000000000caa5         db  0x98 ; '.'
000000000000caa6         db  0xff ; '.'
000000000000caa7         db  0xff ; '.'
000000000000caa8         db  0xac ; '.'
000000000000caa9         db  0x97 ; '.'
000000000000caaa         db  0xff ; '.'
000000000000caab         db  0xff ; '.'
000000000000caac         db  0x04 ; '.'
000000000000caad         db  0x98 ; '.'
000000000000caae         db  0xff ; '.'
000000000000caaf         db  0xff ; '.'
000000000000cab0         db  0xac ; '.'
000000000000cab1         db  0x97 ; '.'
000000000000cab2         db  0xff ; '.'
000000000000cab3         db  0xff ; '.'
000000000000cab4         db  0xac ; '.'
000000000000cab5         db  0x97 ; '.'
000000000000cab6         db  0xff ; '.'
000000000000cab7         db  0xff ; '.'
000000000000cab8         db  0xac ; '.'
000000000000cab9         db  0x97 ; '.'
000000000000caba         db  0xff ; '.'
000000000000cabb         db  0xff ; '.'
000000000000cabc         db  0xac ; '.'
000000000000cabd         db  0x97 ; '.'
000000000000cabe         db  0xff ; '.'
000000000000cabf         db  0xff ; '.'
000000000000cac0         db  0xac ; '.'
000000000000cac1         db  0x97 ; '.'
000000000000cac2         db  0xff ; '.'
000000000000cac3         db  0xff ; '.'
000000000000cac4         db  0xac ; '.'
000000000000cac5         db  0x97 ; '.'
000000000000cac6         db  0xff ; '.'
000000000000cac7         db  0xff ; '.'
000000000000cac8         db  0xac ; '.'
000000000000cac9         db  0x97 ; '.'
000000000000caca         db  0xff ; '.'
000000000000cacb         db  0xff ; '.'
000000000000cacc         db  0xac ; '.'
000000000000cacd         db  0x97 ; '.'
000000000000cace         db  0xff ; '.'
000000000000cacf         db  0xff ; '.'
000000000000cad0         db  0xac ; '.'
000000000000cad1         db  0x97 ; '.'
000000000000cad2         db  0xff ; '.'
000000000000cad3         db  0xff ; '.'
000000000000cad4         db  0xac ; '.'
000000000000cad5         db  0x97 ; '.'
000000000000cad6         db  0xff ; '.'
000000000000cad7         db  0xff ; '.'
000000000000cad8         db  0xac ; '.'
000000000000cad9         db  0x97 ; '.'
000000000000cada         db  0xff ; '.'
000000000000cadb         db  0xff ; '.'
000000000000cadc         db  0xac ; '.'
000000000000cadd         db  0x97 ; '.'
000000000000cade         db  0xff ; '.'
000000000000cadf         db  0xff ; '.'
000000000000cae0         db  0xac ; '.'
000000000000cae1         db  0x97 ; '.'
000000000000cae2         db  0xff ; '.'
000000000000cae3         db  0xff ; '.'
000000000000cae4         db  0xac ; '.'
000000000000cae5         db  0x97 ; '.'
000000000000cae6         db  0xff ; '.'
000000000000cae7         db  0xff ; '.'
000000000000cae8         db  0xac ; '.'
000000000000cae9         db  0x97 ; '.'
000000000000caea         db  0xff ; '.'
000000000000caeb         db  0xff ; '.'
000000000000caec         db  0xac ; '.'
000000000000caed         db  0x97 ; '.'
000000000000caee         db  0xff ; '.'
000000000000caef         db  0xff ; '.'
000000000000caf0         db  0xac ; '.'
000000000000caf1         db  0x97 ; '.'
000000000000caf2         db  0xff ; '.'
000000000000caf3         db  0xff ; '.'
000000000000caf4         db  0xac ; '.'
000000000000caf5         db  0x97 ; '.'
000000000000caf6         db  0xff ; '.'
000000000000caf7         db  0xff ; '.'
000000000000caf8         db  0xac ; '.'
000000000000caf9         db  0x97 ; '.'
000000000000cafa         db  0xff ; '.'
000000000000cafb         db  0xff ; '.'
000000000000cafc         db  0xac ; '.'
000000000000cafd         db  0x97 ; '.'
000000000000cafe         db  0xff ; '.'
000000000000caff         db  0xff ; '.'
000000000000cb00         db  0xac ; '.'
000000000000cb01         db  0x97 ; '.'
000000000000cb02         db  0xff ; '.'
000000000000cb03         db  0xff ; '.'
000000000000cb04         db  0xac ; '.'
000000000000cb05         db  0x97 ; '.'
000000000000cb06         db  0xff ; '.'
000000000000cb07         db  0xff ; '.'
000000000000cb08         db  0xac ; '.'
000000000000cb09         db  0x97 ; '.'
000000000000cb0a         db  0xff ; '.'
000000000000cb0b         db  0xff ; '.'
000000000000cb0c         db  0xac ; '.'
000000000000cb0d         db  0x97 ; '.'
000000000000cb0e         db  0xff ; '.'
000000000000cb0f         db  0xff ; '.'
000000000000cb10         db  0xac ; '.'
000000000000cb11         db  0x97 ; '.'
000000000000cb12         db  0xff ; '.'
000000000000cb13         db  0xff ; '.'
000000000000cb14         db  0xac ; '.'
000000000000cb15         db  0x97 ; '.'
000000000000cb16         db  0xff ; '.'
000000000000cb17         db  0xff ; '.'
000000000000cb18         db  0x67 ; 'g'
000000000000cb19         db  0x95 ; '.'
000000000000cb1a         db  0xff ; '.'
000000000000cb1b         db  0xff ; '.'
000000000000cb1c         db  0x04 ; '.'
000000000000cb1d         db  0x98 ; '.'
000000000000cb1e         db  0xff ; '.'
000000000000cb1f         db  0xff ; '.'
000000000000cb20         db  0x67 ; 'g'
000000000000cb21         db  0x95 ; '.'
000000000000cb22         db  0xff ; '.'
000000000000cb23         db  0xff ; '.'
000000000000cb24         db  0xd4 ; '.'
000000000000cb25         db  0x97 ; '.'
000000000000cb26         db  0xff ; '.'
000000000000cb27         db  0xff ; '.'
000000000000cb28         db  0x58 ; 'X'                                         ; DATA XREF=sub_6180+137
000000000000cb29         db  0x97 ; '.'
000000000000cb2a         db  0xff ; '.'
000000000000cb2b         db  0xff ; '.'
000000000000cb2c         db  0x68 ; 'h'
000000000000cb2d         db  0x96 ; '.'
000000000000cb2e         db  0xff ; '.'
000000000000cb2f         db  0xff ; '.'
000000000000cb30         db  0x68 ; 'h'
000000000000cb31         db  0x96 ; '.'
000000000000cb32         db  0xff ; '.'
000000000000cb33         db  0xff ; '.'
000000000000cb34         db  0x68 ; 'h'
000000000000cb35         db  0x96 ; '.'
000000000000cb36         db  0xff ; '.'
000000000000cb37         db  0xff ; '.'
000000000000cb38         db  0x68 ; 'h'
000000000000cb39         db  0x96 ; '.'
000000000000cb3a         db  0xff ; '.'
000000000000cb3b         db  0xff ; '.'
000000000000cb3c         db  0x68 ; 'h'
000000000000cb3d         db  0x96 ; '.'
000000000000cb3e         db  0xff ; '.'
000000000000cb3f         db  0xff ; '.'
000000000000cb40         db  0x68 ; 'h'
000000000000cb41         db  0x96 ; '.'
000000000000cb42         db  0xff ; '.'
000000000000cb43         db  0xff ; '.'
000000000000cb44         db  0x48 ; 'H'
000000000000cb45         db  0x97 ; '.'
000000000000cb46         db  0xff ; '.'
000000000000cb47         db  0xff ; '.'
000000000000cb48         db  0x98 ; '.'
000000000000cb49         db  0x98 ; '.'
000000000000cb4a         db  0xff ; '.'
000000000000cb4b         db  0xff ; '.'
000000000000cb4c         db  0x80 ; '.'
000000000000cb4d         db  0x98 ; '.'
000000000000cb4e         db  0xff ; '.'
000000000000cb4f         db  0xff ; '.'
000000000000cb50         db  0x30 ; '0'
000000000000cb51         db  0x97 ; '.'
000000000000cb52         db  0xff ; '.'
000000000000cb53         db  0xff ; '.'
000000000000cb54         db  0x70 ; 'p'
000000000000cb55         db  0x98 ; '.'
000000000000cb56         db  0xff ; '.'
000000000000cb57         db  0xff ; '.'
000000000000cb58         db  0x18 ; '.'
000000000000cb59         db  0x97 ; '.'
000000000000cb5a         db  0xff ; '.'
000000000000cb5b         db  0xff ; '.'
000000000000cb5c         db  0x58 ; 'X'
000000000000cb5d         db  0x98 ; '.'
000000000000cb5e         db  0xff ; '.'
000000000000cb5f         db  0xff ; '.'
000000000000cb60         db  0x68 ; 'h'
000000000000cb61         db  0x96 ; '.'
000000000000cb62         db  0xff ; '.'
000000000000cb63         db  0xff ; '.'
000000000000cb64         db  0x68 ; 'h'
000000000000cb65         db  0x96 ; '.'
000000000000cb66         db  0xff ; '.'
000000000000cb67         db  0xff ; '.'
000000000000cb68         db  0x68 ; 'h'
000000000000cb69         db  0x96 ; '.'
000000000000cb6a         db  0xff ; '.'
000000000000cb6b         db  0xff ; '.'
000000000000cb6c         db  0x68 ; 'h'
000000000000cb6d         db  0x96 ; '.'
000000000000cb6e         db  0xff ; '.'
000000000000cb6f         db  0xff ; '.'
000000000000cb70         db  0x68 ; 'h'
000000000000cb71         db  0x96 ; '.'
000000000000cb72         db  0xff ; '.'
000000000000cb73         db  0xff ; '.'
000000000000cb74         db  0x68 ; 'h'
000000000000cb75         db  0x96 ; '.'
000000000000cb76         db  0xff ; '.'
000000000000cb77         db  0xff ; '.'
000000000000cb78         db  0x68 ; 'h'
000000000000cb79         db  0x96 ; '.'
000000000000cb7a         db  0xff ; '.'
000000000000cb7b         db  0xff ; '.'
000000000000cb7c         db  0x68 ; 'h'
000000000000cb7d         db  0x96 ; '.'
000000000000cb7e         db  0xff ; '.'
000000000000cb7f         db  0xff ; '.'
000000000000cb80         db  0x68 ; 'h'
000000000000cb81         db  0x96 ; '.'
000000000000cb82         db  0xff ; '.'
000000000000cb83         db  0xff ; '.'
000000000000cb84         db  0x68 ; 'h'
000000000000cb85         db  0x96 ; '.'
000000000000cb86         db  0xff ; '.'
000000000000cb87         db  0xff ; '.'
000000000000cb88         db  0x68 ; 'h'
000000000000cb89         db  0x96 ; '.'
000000000000cb8a         db  0xff ; '.'
000000000000cb8b         db  0xff ; '.'
000000000000cb8c         db  0x68 ; 'h'
000000000000cb8d         db  0x96 ; '.'
000000000000cb8e         db  0xff ; '.'
000000000000cb8f         db  0xff ; '.'
000000000000cb90         db  0x68 ; 'h'
000000000000cb91         db  0x96 ; '.'
000000000000cb92         db  0xff ; '.'
000000000000cb93         db  0xff ; '.'
000000000000cb94         db  0x68 ; 'h'
000000000000cb95         db  0x96 ; '.'
000000000000cb96         db  0xff ; '.'
000000000000cb97         db  0xff ; '.'
000000000000cb98         db  0x68 ; 'h'
000000000000cb99         db  0x96 ; '.'
000000000000cb9a         db  0xff ; '.'
000000000000cb9b         db  0xff ; '.'
000000000000cb9c         db  0x68 ; 'h'
000000000000cb9d         db  0x96 ; '.'
000000000000cb9e         db  0xff ; '.'
000000000000cb9f         db  0xff ; '.'
000000000000cba0         db  0x68 ; 'h'
000000000000cba1         db  0x96 ; '.'
000000000000cba2         db  0xff ; '.'
000000000000cba3         db  0xff ; '.'
000000000000cba4         db  0x68 ; 'h'
000000000000cba5         db  0x96 ; '.'
000000000000cba6         db  0xff ; '.'
000000000000cba7         db  0xff ; '.'
000000000000cba8         db  0x40 ; '@'
000000000000cba9         db  0x98 ; '.'
000000000000cbaa         db  0xff ; '.'
000000000000cbab         db  0xff ; '.'
000000000000cbac         db  0x28 ; '('
000000000000cbad         db  0x98 ; '.'
000000000000cbae         db  0xff ; '.'
000000000000cbaf         db  0xff ; '.'
000000000000cbb0         db  0x28 ; '('
000000000000cbb1         db  0x98 ; '.'
000000000000cbb2         db  0xff ; '.'
000000000000cbb3         db  0xff ; '.'
000000000000cbb4         db  0x10 ; '.'
000000000000cbb5         db  0x98 ; '.'
000000000000cbb6         db  0xff ; '.'
000000000000cbb7         db  0xff ; '.'
000000000000cbb8         db  0x28 ; '('
000000000000cbb9         db  0x98 ; '.'
000000000000cbba         db  0xff ; '.'
000000000000cbbb         db  0xff ; '.'
000000000000cbbc         db  0xf8 ; '.'
000000000000cbbd         db  0x97 ; '.'
000000000000cbbe         db  0xff ; '.'
000000000000cbbf         db  0xff ; '.'
000000000000cbc0         db  0x28 ; '('
000000000000cbc1         db  0x98 ; '.'
000000000000cbc2         db  0xff ; '.'
000000000000cbc3         db  0xff ; '.'
000000000000cbc4         db  0x68 ; 'h'
000000000000cbc5         db  0x94 ; '.'
000000000000cbc6         db  0xff ; '.'
000000000000cbc7         db  0xff ; '.'
000000000000cbc8         db  0x28 ; '('
000000000000cbc9         db  0x98 ; '.'
000000000000cbca         db  0xff ; '.'
000000000000cbcb         db  0xff ; '.'
000000000000cbcc         db  0x28 ; '('
000000000000cbcd         db  0x98 ; '.'
000000000000cbce         db  0xff ; '.'
000000000000cbcf         db  0xff ; '.'
000000000000cbd0         db  0x28 ; '('
000000000000cbd1         db  0x98 ; '.'
000000000000cbd2         db  0xff ; '.'
000000000000cbd3         db  0xff ; '.'
000000000000cbd4         db  0xf8 ; '.'
000000000000cbd5         db  0x97 ; '.'
000000000000cbd6         db  0xff ; '.'
000000000000cbd7         db  0xff ; '.'
000000000000cbd8         db  0xf8 ; '.'
000000000000cbd9         db  0x97 ; '.'
000000000000cbda         db  0xff ; '.'
000000000000cbdb         db  0xff ; '.'
000000000000cbdc         db  0xf8 ; '.'
000000000000cbdd         db  0x97 ; '.'
000000000000cbde         db  0xff ; '.'
000000000000cbdf         db  0xff ; '.'
000000000000cbe0         db  0xf8 ; '.'
000000000000cbe1         db  0x97 ; '.'
000000000000cbe2         db  0xff ; '.'
000000000000cbe3         db  0xff ; '.'
000000000000cbe4         db  0xf8 ; '.'
000000000000cbe5         db  0x97 ; '.'
000000000000cbe6         db  0xff ; '.'
000000000000cbe7         db  0xff ; '.'
000000000000cbe8         db  0xf8 ; '.'
000000000000cbe9         db  0x97 ; '.'
000000000000cbea         db  0xff ; '.'
000000000000cbeb         db  0xff ; '.'
000000000000cbec         db  0xf8 ; '.'
000000000000cbed         db  0x97 ; '.'
000000000000cbee         db  0xff ; '.'
000000000000cbef         db  0xff ; '.'
000000000000cbf0         db  0xf8 ; '.'
000000000000cbf1         db  0x97 ; '.'
000000000000cbf2         db  0xff ; '.'
000000000000cbf3         db  0xff ; '.'
000000000000cbf4         db  0xf8 ; '.'
000000000000cbf5         db  0x97 ; '.'
000000000000cbf6         db  0xff ; '.'
000000000000cbf7         db  0xff ; '.'
000000000000cbf8         db  0xf8 ; '.'
000000000000cbf9         db  0x97 ; '.'
000000000000cbfa         db  0xff ; '.'
000000000000cbfb         db  0xff ; '.'
000000000000cbfc         db  0xf8 ; '.'
000000000000cbfd         db  0x97 ; '.'
000000000000cbfe         db  0xff ; '.'
000000000000cbff         db  0xff ; '.'
000000000000cc00         db  0xf8 ; '.'
000000000000cc01         db  0x97 ; '.'
000000000000cc02         db  0xff ; '.'
000000000000cc03         db  0xff ; '.'
000000000000cc04         db  0xf8 ; '.'
000000000000cc05         db  0x97 ; '.'
000000000000cc06         db  0xff ; '.'
000000000000cc07         db  0xff ; '.'
000000000000cc08         db  0xf8 ; '.'
000000000000cc09         db  0x97 ; '.'
000000000000cc0a         db  0xff ; '.'
000000000000cc0b         db  0xff ; '.'
000000000000cc0c         db  0xf8 ; '.'
000000000000cc0d         db  0x97 ; '.'
000000000000cc0e         db  0xff ; '.'
000000000000cc0f         db  0xff ; '.'
000000000000cc10         db  0xf8 ; '.'
000000000000cc11         db  0x97 ; '.'
000000000000cc12         db  0xff ; '.'
000000000000cc13         db  0xff ; '.'
000000000000cc14         db  0x28 ; '('
000000000000cc15         db  0x98 ; '.'
000000000000cc16         db  0xff ; '.'
000000000000cc17         db  0xff ; '.'
000000000000cc18         db  0x28 ; '('
000000000000cc19         db  0x98 ; '.'
000000000000cc1a         db  0xff ; '.'
000000000000cc1b         db  0xff ; '.'
000000000000cc1c         db  0x28 ; '('
000000000000cc1d         db  0x98 ; '.'
000000000000cc1e         db  0xff ; '.'
000000000000cc1f         db  0xff ; '.'
000000000000cc20         db  0x28 ; '('
000000000000cc21         db  0x98 ; '.'
000000000000cc22         db  0xff ; '.'
000000000000cc23         db  0xff ; '.'
000000000000cc24         db  0x38 ; '8'
000000000000cc25         db  0x94 ; '.'
000000000000cc26         db  0xff ; '.'
000000000000cc27         db  0xff ; '.'
000000000000cc28         db  0x68 ; 'h'
000000000000cc29         db  0x96 ; '.'
000000000000cc2a         db  0xff ; '.'
000000000000cc2b         db  0xff ; '.'
000000000000cc2c         db  0xf8 ; '.'
000000000000cc2d         db  0x97 ; '.'
000000000000cc2e         db  0xff ; '.'
000000000000cc2f         db  0xff ; '.'
000000000000cc30         db  0xf8 ; '.'
000000000000cc31         db  0x97 ; '.'
000000000000cc32         db  0xff ; '.'
000000000000cc33         db  0xff ; '.'
000000000000cc34         db  0xf8 ; '.'
000000000000cc35         db  0x97 ; '.'
000000000000cc36         db  0xff ; '.'
000000000000cc37         db  0xff ; '.'
000000000000cc38         db  0xf8 ; '.'
000000000000cc39         db  0x97 ; '.'
000000000000cc3a         db  0xff ; '.'
000000000000cc3b         db  0xff ; '.'
000000000000cc3c         db  0xf8 ; '.'
000000000000cc3d         db  0x97 ; '.'
000000000000cc3e         db  0xff ; '.'
000000000000cc3f         db  0xff ; '.'
000000000000cc40         db  0xf8 ; '.'
000000000000cc41         db  0x97 ; '.'
000000000000cc42         db  0xff ; '.'
000000000000cc43         db  0xff ; '.'
000000000000cc44         db  0xf8 ; '.'
000000000000cc45         db  0x97 ; '.'
000000000000cc46         db  0xff ; '.'
000000000000cc47         db  0xff ; '.'
000000000000cc48         db  0xf8 ; '.'
000000000000cc49         db  0x97 ; '.'
000000000000cc4a         db  0xff ; '.'
000000000000cc4b         db  0xff ; '.'
000000000000cc4c         db  0xf8 ; '.'
000000000000cc4d         db  0x97 ; '.'
000000000000cc4e         db  0xff ; '.'
000000000000cc4f         db  0xff ; '.'
000000000000cc50         db  0xf8 ; '.'
000000000000cc51         db  0x97 ; '.'
000000000000cc52         db  0xff ; '.'
000000000000cc53         db  0xff ; '.'
000000000000cc54         db  0xf8 ; '.'
000000000000cc55         db  0x97 ; '.'
000000000000cc56         db  0xff ; '.'
000000000000cc57         db  0xff ; '.'
000000000000cc58         db  0xf8 ; '.'
000000000000cc59         db  0x97 ; '.'
000000000000cc5a         db  0xff ; '.'
000000000000cc5b         db  0xff ; '.'
000000000000cc5c         db  0xf8 ; '.'
000000000000cc5d         db  0x97 ; '.'
000000000000cc5e         db  0xff ; '.'
000000000000cc5f         db  0xff ; '.'
000000000000cc60         db  0xf8 ; '.'
000000000000cc61         db  0x97 ; '.'
000000000000cc62         db  0xff ; '.'
000000000000cc63         db  0xff ; '.'
000000000000cc64         db  0xf8 ; '.'
000000000000cc65         db  0x97 ; '.'
000000000000cc66         db  0xff ; '.'
000000000000cc67         db  0xff ; '.'
000000000000cc68         db  0xf8 ; '.'
000000000000cc69         db  0x97 ; '.'
000000000000cc6a         db  0xff ; '.'
000000000000cc6b         db  0xff ; '.'
000000000000cc6c         db  0xf8 ; '.'
000000000000cc6d         db  0x97 ; '.'
000000000000cc6e         db  0xff ; '.'
000000000000cc6f         db  0xff ; '.'
000000000000cc70         db  0xf8 ; '.'
000000000000cc71         db  0x97 ; '.'
000000000000cc72         db  0xff ; '.'
000000000000cc73         db  0xff ; '.'
000000000000cc74         db  0xf8 ; '.'
000000000000cc75         db  0x97 ; '.'
000000000000cc76         db  0xff ; '.'
000000000000cc77         db  0xff ; '.'
000000000000cc78         db  0xf8 ; '.'
000000000000cc79         db  0x97 ; '.'
000000000000cc7a         db  0xff ; '.'
000000000000cc7b         db  0xff ; '.'
000000000000cc7c         db  0xf8 ; '.'
000000000000cc7d         db  0x97 ; '.'
000000000000cc7e         db  0xff ; '.'
000000000000cc7f         db  0xff ; '.'
000000000000cc80         db  0xf8 ; '.'
000000000000cc81         db  0x97 ; '.'
000000000000cc82         db  0xff ; '.'
000000000000cc83         db  0xff ; '.'
000000000000cc84         db  0xf8 ; '.'
000000000000cc85         db  0x97 ; '.'
000000000000cc86         db  0xff ; '.'
000000000000cc87         db  0xff ; '.'
000000000000cc88         db  0xf8 ; '.'
000000000000cc89         db  0x97 ; '.'
000000000000cc8a         db  0xff ; '.'
000000000000cc8b         db  0xff ; '.'
000000000000cc8c         db  0xf8 ; '.'
000000000000cc8d         db  0x97 ; '.'
000000000000cc8e         db  0xff ; '.'
000000000000cc8f         db  0xff ; '.'
000000000000cc90         db  0xf8 ; '.'
000000000000cc91         db  0x97 ; '.'
000000000000cc92         db  0xff ; '.'
000000000000cc93         db  0xff ; '.'
000000000000cc94         db  0x28 ; '('
000000000000cc95         db  0x98 ; '.'
000000000000cc96         db  0xff ; '.'
000000000000cc97         db  0xff ; '.'
000000000000cc98         db  0xf8 ; '.'
000000000000cc99         db  0x96 ; '.'
000000000000cc9a         db  0xff ; '.'
000000000000cc9b         db  0xff ; '.'
000000000000cc9c         db  0xf8 ; '.'
000000000000cc9d         db  0x97 ; '.'
000000000000cc9e         db  0xff ; '.'
000000000000cc9f         db  0xff ; '.'
000000000000cca0         db  0x28 ; '('
000000000000cca1         db  0x98 ; '.'
000000000000cca2         db  0xff ; '.'
000000000000cca3         db  0xff ; '.'
000000000000cca4         db  0xf8 ; '.'
000000000000cca5         db  0x97 ; '.'
000000000000cca6         db  0xff ; '.'
000000000000cca7         db  0xff ; '.'
000000000000cca8         db  0x28 ; '('
000000000000cca9         db  0x98 ; '.'
000000000000ccaa         db  0xff ; '.'
000000000000ccab         db  0xff ; '.'
000000000000ccac         db  0xf8 ; '.'
000000000000ccad         db  0x97 ; '.'
000000000000ccae         db  0xff ; '.'
000000000000ccaf         db  0xff ; '.'
000000000000ccb0         db  0xf8 ; '.'
000000000000ccb1         db  0x97 ; '.'
000000000000ccb2         db  0xff ; '.'
000000000000ccb3         db  0xff ; '.'
000000000000ccb4         db  0xf8 ; '.'
000000000000ccb5         db  0x97 ; '.'
000000000000ccb6         db  0xff ; '.'
000000000000ccb7         db  0xff ; '.'
000000000000ccb8         db  0xf8 ; '.'
000000000000ccb9         db  0x97 ; '.'
000000000000ccba         db  0xff ; '.'
000000000000ccbb         db  0xff ; '.'
000000000000ccbc         db  0xf8 ; '.'
000000000000ccbd         db  0x97 ; '.'
000000000000ccbe         db  0xff ; '.'
000000000000ccbf         db  0xff ; '.'
000000000000ccc0         db  0xf8 ; '.'
000000000000ccc1         db  0x97 ; '.'
000000000000ccc2         db  0xff ; '.'
000000000000ccc3         db  0xff ; '.'
000000000000ccc4         db  0xf8 ; '.'
000000000000ccc5         db  0x97 ; '.'
000000000000ccc6         db  0xff ; '.'
000000000000ccc7         db  0xff ; '.'
000000000000ccc8         db  0xf8 ; '.'
000000000000ccc9         db  0x97 ; '.'
000000000000ccca         db  0xff ; '.'
000000000000cccb         db  0xff ; '.'
000000000000cccc         db  0xf8 ; '.'
000000000000cccd         db  0x97 ; '.'
000000000000ccce         db  0xff ; '.'
000000000000cccf         db  0xff ; '.'
000000000000ccd0         db  0xf8 ; '.'
000000000000ccd1         db  0x97 ; '.'
000000000000ccd2         db  0xff ; '.'
000000000000ccd3         db  0xff ; '.'
000000000000ccd4         db  0xf8 ; '.'
000000000000ccd5         db  0x97 ; '.'
000000000000ccd6         db  0xff ; '.'
000000000000ccd7         db  0xff ; '.'
000000000000ccd8         db  0xf8 ; '.'
000000000000ccd9         db  0x97 ; '.'
000000000000ccda         db  0xff ; '.'
000000000000ccdb         db  0xff ; '.'
000000000000ccdc         db  0xf8 ; '.'
000000000000ccdd         db  0x97 ; '.'
000000000000ccde         db  0xff ; '.'
000000000000ccdf         db  0xff ; '.'
000000000000cce0         db  0xf8 ; '.'
000000000000cce1         db  0x97 ; '.'
000000000000cce2         db  0xff ; '.'
000000000000cce3         db  0xff ; '.'
000000000000cce4         db  0xf8 ; '.'
000000000000cce5         db  0x97 ; '.'
000000000000cce6         db  0xff ; '.'
000000000000cce7         db  0xff ; '.'
000000000000cce8         db  0xf8 ; '.'
000000000000cce9         db  0x97 ; '.'
000000000000ccea         db  0xff ; '.'
000000000000cceb         db  0xff ; '.'
000000000000ccec         db  0xf8 ; '.'
000000000000cced         db  0x97 ; '.'
000000000000ccee         db  0xff ; '.'
000000000000ccef         db  0xff ; '.'
000000000000ccf0         db  0xf8 ; '.'
000000000000ccf1         db  0x97 ; '.'
000000000000ccf2         db  0xff ; '.'
000000000000ccf3         db  0xff ; '.'
000000000000ccf4         db  0xf8 ; '.'
000000000000ccf5         db  0x97 ; '.'
000000000000ccf6         db  0xff ; '.'
000000000000ccf7         db  0xff ; '.'
000000000000ccf8         db  0xf8 ; '.'
000000000000ccf9         db  0x97 ; '.'
000000000000ccfa         db  0xff ; '.'
000000000000ccfb         db  0xff ; '.'
000000000000ccfc         db  0xf8 ; '.'
000000000000ccfd         db  0x97 ; '.'
000000000000ccfe         db  0xff ; '.'
000000000000ccff         db  0xff ; '.'
000000000000cd00         db  0xf8 ; '.'
000000000000cd01         db  0x97 ; '.'
000000000000cd02         db  0xff ; '.'
000000000000cd03         db  0xff ; '.'
000000000000cd04         db  0xf8 ; '.'
000000000000cd05         db  0x97 ; '.'
000000000000cd06         db  0xff ; '.'
000000000000cd07         db  0xff ; '.'
000000000000cd08         db  0xf8 ; '.'
000000000000cd09         db  0x97 ; '.'
000000000000cd0a         db  0xff ; '.'
000000000000cd0b         db  0xff ; '.'
000000000000cd0c         db  0xf8 ; '.'
000000000000cd0d         db  0x97 ; '.'
000000000000cd0e         db  0xff ; '.'
000000000000cd0f         db  0xff ; '.'
000000000000cd10         db  0xf8 ; '.'
000000000000cd11         db  0x97 ; '.'
000000000000cd12         db  0xff ; '.'
000000000000cd13         db  0xff ; '.'
000000000000cd14         db  0x68 ; 'h'
000000000000cd15         db  0x93 ; '.'
000000000000cd16         db  0xff ; '.'
000000000000cd17         db  0xff ; '.'
000000000000cd18         db  0x28 ; '('
000000000000cd19         db  0x98 ; '.'
000000000000cd1a         db  0xff ; '.'
000000000000cd1b         db  0xff ; '.'
000000000000cd1c         db  0x68 ; 'h'
000000000000cd1d         db  0x93 ; '.'
000000000000cd1e         db  0xff ; '.'
000000000000cd1f         db  0xff ; '.'
000000000000cd20         db  0x10 ; '.'
000000000000cd21         db  0x98 ; '.'
000000000000cd22         db  0xff ; '.'
000000000000cd23         db  0xff ; '.'
000000000000cd24         db  0x00 ; '.'
000000000000cd25         db  0x00 ; '.'
000000000000cd26         db  0x00 ; '.'
000000000000cd27         db  0x00 ; '.'
000000000000cd28         db  0x00 ; '.'
000000000000cd29         db  0x00 ; '.'
000000000000cd2a         db  0x00 ; '.'
000000000000cd2b         db  0x00 ; '.'
000000000000cd2c         db  0x00 ; '.'
000000000000cd2d         db  0x00 ; '.'
000000000000cd2e         db  0x00 ; '.'
000000000000cd2f         db  0x00 ; '.'
000000000000cd30         db  0x00 ; '.'
000000000000cd31         db  0x00 ; '.'
000000000000cd32         db  0x00 ; '.'
000000000000cd33         db  0x00 ; '.'
000000000000cd34         db  0x00 ; '.'
000000000000cd35         db  0x00 ; '.'
000000000000cd36         db  0x00 ; '.'
000000000000cd37         db  0x00 ; '.'
000000000000cd38         db  0x00 ; '.'
000000000000cd39         db  0x00 ; '.'
000000000000cd3a         db  0x00 ; '.'
000000000000cd3b         db  0x00 ; '.'
000000000000cd3c         db  0x00 ; '.'
000000000000cd3d         db  0x00 ; '.'
000000000000cd3e         db  0x00 ; '.'
000000000000cd3f         db  0x00 ; '.'
                     quoting_style_vals:
000000000000cd40         db  0x00 ; '.'
000000000000cd41         db  0x00 ; '.'
000000000000cd42         db  0x00 ; '.'
000000000000cd43         db  0x00 ; '.'
000000000000cd44         db  0x01 ; '.'
000000000000cd45         db  0x00 ; '.'
000000000000cd46         db  0x00 ; '.'
000000000000cd47         db  0x00 ; '.'
000000000000cd48         db  0x02 ; '.'
000000000000cd49         db  0x00 ; '.'
000000000000cd4a         db  0x00 ; '.'
000000000000cd4b         db  0x00 ; '.'
000000000000cd4c         db  0x03 ; '.'
000000000000cd4d         db  0x00 ; '.'
000000000000cd4e         db  0x00 ; '.'
000000000000cd4f         db  0x00 ; '.'
000000000000cd50         db  0x04 ; '.'
000000000000cd51         db  0x00 ; '.'
000000000000cd52         db  0x00 ; '.'
000000000000cd53         db  0x00 ; '.'
000000000000cd54         db  0x05 ; '.'
000000000000cd55         db  0x00 ; '.'
000000000000cd56         db  0x00 ; '.'
000000000000cd57         db  0x00 ; '.'
000000000000cd58         db  0x06 ; '.'
000000000000cd59         db  0x00 ; '.'
000000000000cd5a         db  0x00 ; '.'
000000000000cd5b         db  0x00 ; '.'
000000000000cd5c         db  0x07 ; '.'
000000000000cd5d         db  0x00 ; '.'
000000000000cd5e         db  0x00 ; '.'
000000000000cd5f         db  0x00 ; '.'
000000000000cd60         db  0x08 ; '.'
000000000000cd61         db  0x00 ; '.'
000000000000cd62         db  0x00 ; '.'
000000000000cd63         db  0x00 ; '.'
000000000000cd64         db  0x09 ; '.'
000000000000cd65         db  0x00 ; '.'
000000000000cd66         db  0x00 ; '.'
000000000000cd67         db  0x00 ; '.'
                     aSSSn:
000000000000cd68         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000cd74         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000cd7b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000cd7c         db  0x43 ; 'C'
000000000000cd7d         db  0x29 ; ')'
000000000000cd7e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000cd7f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000cd8f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000cda6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000cdc2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000cdd7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000cded         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000ce01         align      8
                     aNlicenseGplv3G:
000000000000ce08         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000ced4         align      8
                     aWrittenBySSSna:
000000000000ced8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_cef8:        // aWrittenBySSSns
000000000000cef8         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000cf1c         align      32
                     aWrittenBySSSns_cf20:        // aWrittenBySSSns
000000000000cf20         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_cf48:        // aWrittenBySSSns
000000000000cf48         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000cf74         align      8
                     aWrittenBySSSns_cf78:        // aWrittenBySSSns
000000000000cf78         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000cfa8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000cfdc         db  0x00 ; '.'
000000000000cfdd         db  0x00 ; '.'
000000000000cfde         db  0x00 ; '.'
000000000000cfdf         db  0x00 ; '.'
000000000000cfe0         db  0x57 ; 'W'                                         ; DATA XREF=version_etc_arn+997
000000000000cfe1         db  0x72 ; 'r'
000000000000cfe2         db  0x69 ; 'i'
000000000000cfe3         db  0x74 ; 't'
000000000000cfe4         db  0x74 ; 't'
000000000000cfe5         db  0x65 ; 'e'
000000000000cfe6         db  0x6e ; 'n'
000000000000cfe7         db  0x20 ; ' '
000000000000cfe8         db  0x62 ; 'b'
000000000000cfe9         db  0x79 ; 'y'
000000000000cfea         db  0x20 ; ' '
000000000000cfeb         db  0x25 ; '%'
000000000000cfec         db  0x73 ; 's'
000000000000cfed         db  0x2c ; ','
000000000000cfee         db  0x20 ; ' '
000000000000cfef         db  0x25 ; '%'
000000000000cff0         db  0x73 ; 's'
000000000000cff1         db  0x2c ; ','
000000000000cff2         db  0x20 ; ' '
000000000000cff3         db  0x25 ; '%'
000000000000cff4         db  0x73 ; 's'
000000000000cff5         db  0x2c ; ','
000000000000cff6         db  0x0a ; '.'
000000000000cff7         db  0x25 ; '%'
000000000000cff8         db  0x73 ; 's'
000000000000cff9         db  0x2c ; ','
000000000000cffa         db  0x20 ; ' '
000000000000cffb         db  0x25 ; '%'
000000000000cffc         db  0x73 ; 's'
000000000000cffd         db  0x2c ; ','
000000000000cffe         db  0x20 ; ' '
000000000000cfff         db  0x25 ; '%'
                     aSSnsSAndOthers:
000000000000d000         db         "s, %s,\n%s, %s, and others.\n", 0          ; DATA XREF=skip+100
000000000000d01c         align      32
                     aGeneralHelpUsi:
000000000000d020         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000d061         align      4
                     switch_table_d064:        // switch_table
000000000000d064         dd         version_etc_arn.loc_7966-switch_table_d064, version_etc_arn.loc_79f8-switch_table_d064, version_etc_arn.loc_7a38-switch_table_d064, version_etc_arn.loc_7a80-switch_table_d064 ; switch table used at 0x78e4 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000d074         dd         version_etc_arn.loc_7ad0-switch_table_d064, version_etc_arn.loc_7b28-switch_table_d064, version_etc_arn.loc_7b58-switch_table_d064, version_etc_arn.loc_7bc0-switch_table_d064
000000000000d084         dd         version_etc_arn.loc_78f0-switch_table_d064, version_etc_arn.loc_79a0-switch_table_d064
000000000000d08c         align      32
                     version_etc_copyright:
000000000000d0a0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000d0cf         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCannotPerformF:
000000000000d0e0         db         "cannot perform formatted output", 0        ; DATA XREF=xvprintf+48, xvfprintf+44
                     aInvalidSsArgum:
000000000000d100         db         "invalid %s%s argument '%s'", 0             ; DATA XREF=xstrtol_fatal+135
                     aSsArgumentSToo:
000000000000d11b         db         "%s%s argument '%s' too large", 0           ; DATA XREF=xstrtol_fatal+51
000000000000d138         db  0x2d ; '-'                                         ; DATA XREF=xstrtol_fatal+72, xstrtol_fatal+146
000000000000d139         db  0x2d ; '-'                                         ; DATA XREF=check_and_close+37, check_and_close+209, open_next_file+2
000000000000d13a         db  0x00 ; '.'
000000000000d13b         db  0x00 ; '.'
000000000000d13c         db  0x00 ; '.'
000000000000d13d         db  0x00 ; '.'
000000000000d13e         db  0x00 ; '.'
000000000000d13f         db  0x00 ; '.'
                     aInvalidSuffixI:
000000000000d140         db         "invalid suffix in %s%s argument '%s'", 0   ; DATA XREF=xstrtol_fatal+123
000000000000d165         align      8
                     aCoreutils831li:
000000000000d168         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoumax+908
                     a0StrtolbaseStr:
000000000000d188         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoumax+915
000000000000d1ae         align      16
                     switch_table_d1b0:        // switch_table
000000000000d1b0         dd         xstrtoumax.loc_8706-switch_table_d1b0, 2 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_86e3-switch_table_d1b0, xstrtoumax.loc_85fc-switch_table_d1b0 ; switch table used at 0x85b6 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000d1c4         dd         xstrtoumax.loc_871c-switch_table_d1b0, 3 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_869f-switch_table_d1b0, xstrtoumax.loc_85fc-switch_table_d1b0
000000000000d1dc         dd         xstrtoumax.loc_85b8-switch_table_d1b0, 2 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_86c0-switch_table_d1b0, 3 dup (xstrtoumax.loc_85fc-switch_table_d1b0)
000000000000d1f8         dd         xstrtoumax.loc_867f-switch_table_d1b0, 4 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_865a-switch_table_d1b0, xstrtoumax.loc_8634-switch_table_d1b0
000000000000d214         dd         7 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_861d-switch_table_d1b0, xstrtoumax.loc_85e0-switch_table_d1b0, 3 dup (xstrtoumax.loc_85fc-switch_table_d1b0)
000000000000d244         dd         xstrtoumax.loc_871c-switch_table_d1b0, 3 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_869f-switch_table_d1b0, xstrtoumax.loc_85fc-switch_table_d1b0
000000000000d25c         dd         xstrtoumax.loc_85b8-switch_table_d1b0, 6 dup (xstrtoumax.loc_85fc-switch_table_d1b0), xstrtoumax.loc_867f-switch_table_d1b0, 2 dup (xstrtoumax.loc_85fc-switch_table_d1b0)
000000000000d284         dd         xstrtoumax.loc_8607-switch_table_d1b0
                     __PRETTY_FUNCTION__.4162:
000000000000d288         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
000000000000d293         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000d294         db  0x00 ; '.'
                     aPosix:
000000000000d295         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000000d29b         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000d2a1         align      4
                     switch_table_d2a4:        // switch_table
000000000000d2a4         dd         vasnprintf.loc_9b26-switch_table_d2a4, vasnprintf.loc_95c0-switch_table_d2a4, vasnprintf.loc_9590-switch_table_d2a4, vasnprintf.loc_9508-switch_table_d2a4 ; switch table used at 0x915b containing 18 entries, DATA XREF=vasnprintf+1357
000000000000d2b4         dd         vasnprintf.loc_94c8-switch_table_d2a4, 2 dup (vasnprintf.loc_9298-switch_table_d2a4), 4 dup (vasnprintf.loc_9160-switch_table_d2a4), vasnprintf.loc_9448-switch_table_d2a4
000000000000d2d4         dd         vasnprintf.loc_93c0-switch_table_d2a4, 2 dup (vasnprintf.loc_9298-switch_table_d2a4), 3 dup (vasnprintf.loc_9160-switch_table_d2a4)
                     switch_table_d2ec:        // switch_table
000000000000d2ec         dd         vasnprintf.loc_9970-switch_table_d2ec, vasnprintf.loc_9990-switch_table_d2ec, vasnprintf.loc_9980-switch_table_d2ec, 2 dup (vasnprintf.loc_9840-switch_table_d2ec) ; switch table used at 0x9700 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
000000000000d300         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
000000000000d307         db  0x00 ; '.'
000000000000d308         db  0x00 ; '.'
000000000000d309         db  0x00 ; '.'
000000000000d30a         db  0x00 ; '.'
000000000000d30b         db  0x00 ; '.'
000000000000d30c         db  0x00 ; '.'
000000000000d30d         db  0x00 ; '.'
000000000000d30e         db  0x00 ; '.'
000000000000d30f         db  0x00 ; '.'
000000000000d310         db  0x80 ; '.'                                         ; DATA XREF=printf_fetchargs+10
000000000000d311         db  0xca ; '.'
000000000000d312         db  0xff ; '.'
000000000000d313         db  0xff ; '.'
000000000000d314         db  0xcc ; '.'
000000000000d315         db  0xca ; '.'
000000000000d316         db  0xff ; '.'
000000000000d317         db  0xff ; '.'
000000000000d318         db  0xcc ; '.'
000000000000d319         db  0xca ; '.'
000000000000d31a         db  0xff ; '.'
000000000000d31b         db  0xff ; '.'
000000000000d31c         db  0xee ; '.'
000000000000d31d         db  0xca ; '.'
000000000000d31e         db  0xff ; '.'
000000000000d31f         db  0xff ; '.'
000000000000d320         db  0xee ; '.'
000000000000d321         db  0xca ; '.'
000000000000d322         db  0xff ; '.'
000000000000d323         db  0xff ; '.'
000000000000d324         db  0xaa ; '.'
000000000000d325         db  0xca ; '.'
000000000000d326         db  0xff ; '.'
000000000000d327         db  0xff ; '.'
000000000000d328         db  0xaa ; '.'
000000000000d329         db  0xca ; '.'
000000000000d32a         db  0xff ; '.'
000000000000d32b         db  0xff ; '.'
000000000000d32c         db  0x86 ; '.'
000000000000d32d         db  0xca ; '.'
000000000000d32e         db  0xff ; '.'
000000000000d32f         db  0xff ; '.'
000000000000d330         db  0x86 ; '.'
000000000000d331         db  0xca ; '.'
000000000000d332         db  0xff ; '.'
000000000000d333         db  0xff ; '.'
000000000000d334         db  0x86 ; '.'
000000000000d335         db  0xca ; '.'
000000000000d336         db  0xff ; '.'
000000000000d337         db  0xff ; '.'
000000000000d338         db  0x86 ; '.'
000000000000d339         db  0xca ; '.'
000000000000d33a         db  0xff ; '.'
000000000000d33b         db  0xff ; '.'
000000000000d33c         db  0x42 ; 'B'
000000000000d33d         db  0xcb ; '.'
000000000000d33e         db  0xff ; '.'
000000000000d33f         db  0xff ; '.'
000000000000d340         db  0x50 ; 'P'
000000000000d341         db  0xca ; '.'
000000000000d342         db  0xff ; '.'
000000000000d343         db  0xff ; '.'
000000000000d344         db  0xaa ; '.'
000000000000d345         db  0xca ; '.'
000000000000d346         db  0xff ; '.'
000000000000d347         db  0xff ; '.'
000000000000d348         db  0xaa ; '.'
000000000000d349         db  0xca ; '.'
000000000000d34a         db  0xff ; '.'
000000000000d34b         db  0xff ; '.'
000000000000d34c         db  0x14 ; '.'
000000000000d34d         db  0xcb ; '.'
000000000000d34e         db  0xff ; '.'
000000000000d34f         db  0xff ; '.'
000000000000d350         db  0x70 ; 'p'
000000000000d351         db  0xcb ; '.'
000000000000d352         db  0xff ; '.'
000000000000d353         db  0xff ; '.'
000000000000d354         db  0x86 ; '.'
000000000000d355         db  0xca ; '.'
000000000000d356         db  0xff ; '.'
000000000000d357         db  0xff ; '.'
000000000000d358         db  0x86 ; '.'
000000000000d359         db  0xca ; '.'
000000000000d35a         db  0xff ; '.'
000000000000d35b         db  0xff ; '.'
000000000000d35c         db  0x86 ; '.'
000000000000d35d         db  0xca ; '.'
000000000000d35e         db  0xff ; '.'
000000000000d35f         db  0xff ; '.'
000000000000d360         db  0x86 ; '.'
000000000000d361         db  0xca ; '.'
000000000000d362         db  0xff ; '.'
000000000000d363         db  0xff ; '.'
000000000000d364         db  0x86 ; '.'
000000000000d365         db  0xca ; '.'
000000000000d366         db  0xff ; '.'
000000000000d367         db  0xff ; '.'
000000000000d368         db  0x86 ; '.'
000000000000d369         db  0xca ; '.'
000000000000d36a         db  0xff ; '.'
000000000000d36b         db  0xff ; '.'
000000000000d36c         db  0x00 ; '.'
000000000000d36d         db  0x00 ; '.'
000000000000d36e         db  0x00 ; '.'
000000000000d36f         db  0x00 ; '.'
                     wide_null_string.2696:
000000000000d370         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
000000000000d371         db  0x00 ; '.'
000000000000d372         db  0x00 ; '.'
000000000000d373         db  0x00 ; '.'
000000000000d374         db  0x4e ; 'N'
000000000000d375         db  0x00 ; '.'
000000000000d376         db  0x00 ; '.'
000000000000d377         db  0x00 ; '.'
000000000000d378         db  0x55 ; 'U'
000000000000d379         db  0x00 ; '.'
000000000000d37a         db  0x00 ; '.'
000000000000d37b         db  0x00 ; '.'
000000000000d37c         db  0x4c ; 'L'
000000000000d37d         db  0x00 ; '.'
000000000000d37e         db  0x00 ; '.'
000000000000d37f         db  0x00 ; '.'
000000000000d380         db  0x4c ; 'L'
000000000000d381         db  0x00 ; '.'
000000000000d382         db  0x00 ; '.'
000000000000d383         db  0x00 ; '.'
000000000000d384         db  0x29 ; ')'
000000000000d385         db  0x00 ; '.'
000000000000d386         db  0x00 ; '.'
000000000000d387         db  0x00 ; '.'
000000000000d388         db  0x00 ; '.'
000000000000d389         db  0x00 ; '.'
000000000000d38a         db  0x00 ; '.'
000000000000d38b         db  0x00 ; '.'
                     switch_table_d38c:        // switch_table
000000000000d38c         dd         printf_parse.loc_a1db-switch_table_d38c, 27 dup (printf_parse.loc_a76b-switch_table_d38c), printf_parse.loc_a6db-switch_table_d38c, printf_parse.loc_a76b-switch_table_d38c ; switch table used at 0xa165 containing 84 entries, DATA XREF=printf_parse+564
000000000000d404         dd         printf_parse.loc_a6fc-switch_table_d38c, printf_parse.loc_a76b-switch_table_d38c, 3 dup (printf_parse.loc_a6db-switch_table_d38c), 11 dup (printf_parse.loc_a76b-switch_table_d38c)
000000000000d444         dd         printf_parse.loc_a167-switch_table_d38c, 4 dup (printf_parse.loc_a76b-switch_table_d38c), printf_parse.loc_a70c-switch_table_d38c, 8 dup (printf_parse.loc_a76b-switch_table_d38c)
000000000000d47c         dd         printf_parse.loc_a6db-switch_table_d38c, printf_parse.loc_a76b-switch_table_d38c, printf_parse.loc_a668-switch_table_d38c, printf_parse.loc_a67b-switch_table_d38c
000000000000d48c         dd         3 dup (printf_parse.loc_a6db-switch_table_d38c), printf_parse.loc_a76b-switch_table_d38c, printf_parse.loc_a67b-switch_table_d38c, 4 dup (printf_parse.loc_a76b-switch_table_d38c)
000000000000d4b0         dd         printf_parse.loc_a61c-switch_table_d38c, printf_parse.loc_a70c-switch_table_d38c, printf_parse.loc_a760-switch_table_d38c, 2 dup (printf_parse.loc_a76b-switch_table_d38c)
000000000000d4c4         dd         printf_parse.loc_a6c8-switch_table_d38c, printf_parse.loc_a76b-switch_table_d38c, printf_parse.loc_a70c-switch_table_d38c, 2 dup (printf_parse.loc_a76b-switch_table_d38c)
000000000000d4d8         dd         printf_parse.loc_a70c-switch_table_d38c


        ; Section .eh_frame_hdr
        ; Range: [0xd4dc; 0xd880[ (932 bytes)
        ; File offset : [54492; 55424[ (932 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000d4dc         db  0x01 ; '.'
000000000000d4dd         db  0x1b ; '.'
000000000000d4de         db  0x03 ; '.'
000000000000d4df         db  0x3b ; ';'
000000000000d4e0         db  0xa0 ; '.'
000000000000d4e1         db  0x03 ; '.'
000000000000d4e2         db  0x00 ; '.'
000000000000d4e3         db  0x00 ; '.'
000000000000d4e4         db  0x73 ; 's'
000000000000d4e5         db  0x00 ; '.'
000000000000d4e6         db  0x00 ; '.'
000000000000d4e7         db  0x00 ; '.'
000000000000d4e8         db  0xd4 ; '.'
000000000000d4e9         db  0x42 ; 'B'
000000000000d4ea         db  0xff ; '.'
000000000000d4eb         db  0xff ; '.'
000000000000d4ec         db  0xec ; '.'
000000000000d4ed         db  0x03 ; '.'
000000000000d4ee         db  0x00 ; '.'
000000000000d4ef         db  0x00 ; '.'
000000000000d4f0         db  0x84 ; '.'
000000000000d4f1         db  0x46 ; 'F'
000000000000d4f2         db  0xff ; '.'
000000000000d4f3         db  0xff ; '.'
000000000000d4f4         db  0x14 ; '.'
000000000000d4f5         db  0x04 ; '.'
000000000000d4f6         db  0x00 ; '.'
000000000000d4f7         db  0x00 ; '.'
000000000000d4f8         db  0x94 ; '.'
000000000000d4f9         db  0x46 ; 'F'
000000000000d4fa         db  0xff ; '.'
000000000000d4fb         db  0xff ; '.'
000000000000d4fc         db  0xb4 ; '.'
000000000000d4fd         db  0x0a ; '.'
000000000000d4fe         db  0x00 ; '.'
000000000000d4ff         db  0x00 ; '.'
000000000000d500         db  0x94 ; '.'
000000000000d501         db  0x58 ; 'X'
000000000000d502         db  0xff ; '.'
000000000000d503         db  0xff ; '.'
000000000000d504         db  0xbc ; '.'
000000000000d505         db  0x03 ; '.'
000000000000d506         db  0x00 ; '.'
000000000000d507         db  0x00 ; '.'
000000000000d508         db  0xa4 ; '.'
000000000000d509         db  0x59 ; 'Y'
000000000000d50a         db  0xff ; '.'
000000000000d50b         db  0xff ; '.'
000000000000d50c         db  0x2c ; ','
000000000000d50d         db  0x04 ; '.'
000000000000d50e         db  0x00 ; '.'
000000000000d50f         db  0x00 ; '.'
000000000000d510         db  0xb4 ; '.'
000000000000d511         db  0x59 ; 'Y'
000000000000d512         db  0xff ; '.'
000000000000d513         db  0xff ; '.'
000000000000d514         db  0x40 ; '@'
000000000000d515         db  0x04 ; '.'
000000000000d516         db  0x00 ; '.'
000000000000d517         db  0x00 ; '.'
000000000000d518         db  0xe4 ; '.'
000000000000d519         db  0x5a ; 'Z'
000000000000d51a         db  0xff ; '.'
000000000000d51b         db  0xff ; '.'
000000000000d51c         db  0x5c ; '\'
000000000000d51d         db  0x04 ; '.'
000000000000d51e         db  0x00 ; '.'
000000000000d51f         db  0x00 ; '.'
000000000000d520         db  0x64 ; 'd'
000000000000d521         db  0x5b ; '['
000000000000d522         db  0xff ; '.'
000000000000d523         db  0xff ; '.'
000000000000d524         db  0x90 ; '.'
000000000000d525         db  0x04 ; '.'
000000000000d526         db  0x00 ; '.'
000000000000d527         db  0x00 ; '.'
000000000000d528         db  0x54 ; 'T'
000000000000d529         db  0x5c ; '\'
000000000000d52a         db  0xff ; '.'
000000000000d52b         db  0xff ; '.'
000000000000d52c         db  0xdc ; '.'
000000000000d52d         db  0x04 ; '.'
000000000000d52e         db  0x00 ; '.'
000000000000d52f         db  0x00 ; '.'
000000000000d530         db  0x54 ; 'T'
000000000000d531         db  0x5d ; ']'
000000000000d532         db  0xff ; '.'
000000000000d533         db  0xff ; '.'
000000000000d534         db  0x28 ; '('
000000000000d535         db  0x05 ; '.'
000000000000d536         db  0x00 ; '.'
000000000000d537         db  0x00 ; '.'
000000000000d538         db  0x54 ; 'T'
000000000000d539         db  0x5e ; '^'
000000000000d53a         db  0xff ; '.'
000000000000d53b         db  0xff ; '.'
000000000000d53c         db  0x74 ; 't'
000000000000d53d         db  0x05 ; '.'
000000000000d53e         db  0x00 ; '.'
000000000000d53f         db  0x00 ; '.'
000000000000d540         db  0x54 ; 'T'
000000000000d541         db  0x5f ; '_'
000000000000d542         db  0xff ; '.'
000000000000d543         db  0xff ; '.'
000000000000d544         db  0xc0 ; '.'
000000000000d545         db  0x05 ; '.'
000000000000d546         db  0x00 ; '.'
000000000000d547         db  0x00 ; '.'
000000000000d548         db  0x44 ; 'D'
000000000000d549         db  0x60 ; '`'
000000000000d54a         db  0xff ; '.'
000000000000d54b         db  0xff ; '.'
000000000000d54c         db  0x0c ; '.'
000000000000d54d         db  0x06 ; '.'
000000000000d54e         db  0x00 ; '.'
000000000000d54f         db  0x00 ; '.'
000000000000d550         db  0x34 ; '4'
000000000000d551         db  0x61 ; 'a'
000000000000d552         db  0xff ; '.'
000000000000d553         db  0xff ; '.'
000000000000d554         db  0x58 ; 'X'
000000000000d555         db  0x06 ; '.'
000000000000d556         db  0x00 ; '.'
000000000000d557         db  0x00 ; '.'
000000000000d558         db  0xc4 ; '.'
000000000000d559         db  0x61 ; 'a'
000000000000d55a         db  0xff ; '.'
000000000000d55b         db  0xff ; '.'
000000000000d55c         db  0xa0 ; '.'
000000000000d55d         db  0x06 ; '.'
000000000000d55e         db  0x00 ; '.'
000000000000d55f         db  0x00 ; '.'
000000000000d560         db  0x54 ; 'T'
000000000000d561         db  0x62 ; 'b'
000000000000d562         db  0xff ; '.'
000000000000d563         db  0xff ; '.'
000000000000d564         db  0xe8 ; '.'
000000000000d565         db  0x06 ; '.'
000000000000d566         db  0x00 ; '.'
000000000000d567         db  0x00 ; '.'
000000000000d568         db  0x74 ; 't'
000000000000d569         db  0x63 ; 'c'
000000000000d56a         db  0xff ; '.'
000000000000d56b         db  0xff ; '.'
000000000000d56c         db  0x44 ; 'D'
000000000000d56d         db  0x07 ; '.'
000000000000d56e         db  0x00 ; '.'
000000000000d56f         db  0x00 ; '.'
000000000000d570         db  0x94 ; '.'
000000000000d571         db  0x64 ; 'd'
000000000000d572         db  0xff ; '.'
000000000000d573         db  0xff ; '.'
000000000000d574         db  0x90 ; '.'
000000000000d575         db  0x07 ; '.'
000000000000d576         db  0x00 ; '.'
000000000000d577         db  0x00 ; '.'
000000000000d578         db  0xc4 ; '.'
000000000000d579         db  0x65 ; 'e'
000000000000d57a         db  0xff ; '.'
000000000000d57b         db  0xff ; '.'
000000000000d57c         db  0xe0 ; '.'
000000000000d57d         db  0x07 ; '.'
000000000000d57e         db  0x00 ; '.'
000000000000d57f         db  0x00 ; '.'
000000000000d580         db  0xf4 ; '.'
000000000000d581         db  0x6d ; 'm'
000000000000d582         db  0xff ; '.'
000000000000d583         db  0xff ; '.'
000000000000d584         db  0x7c ; '|'
000000000000d585         db  0x08 ; '.'
000000000000d586         db  0x00 ; '.'
000000000000d587         db  0x00 ; '.'
000000000000d588         db  0xb4 ; '.'
000000000000d589         db  0x6f ; 'o'
000000000000d58a         db  0xff ; '.'
000000000000d58b         db  0xff ; '.'
000000000000d58c         db  0xc8 ; '.'
000000000000d58d         db  0x08 ; '.'
000000000000d58e         db  0x00 ; '.'
000000000000d58f         db  0x00 ; '.'
000000000000d590         db  0x04 ; '.'
000000000000d591         db  0x71 ; 'q'
000000000000d592         db  0xff ; '.'
000000000000d593         db  0xff ; '.'
000000000000d594         db  0xf4 ; '.'
000000000000d595         db  0x08 ; '.'
000000000000d596         db  0x00 ; '.'
000000000000d597         db  0x00 ; '.'
000000000000d598         db  0x24 ; '$'
000000000000d599         db  0x72 ; 'r'
000000000000d59a         db  0xff ; '.'
000000000000d59b         db  0xff ; '.'
000000000000d59c         db  0x20 ; ' '
000000000000d59d         db  0x09 ; '.'
000000000000d59e         db  0x00 ; '.'
000000000000d59f         db  0x00 ; '.'
000000000000d5a0         db  0x04 ; '.'
000000000000d5a1         db  0x74 ; 't'
000000000000d5a2         db  0xff ; '.'
000000000000d5a3         db  0xff ; '.'
000000000000d5a4         db  0x70 ; 'p'
000000000000d5a5         db  0x09 ; '.'
000000000000d5a6         db  0x00 ; '.'
000000000000d5a7         db  0x00 ; '.'
000000000000d5a8         db  0x64 ; 'd'
000000000000d5a9         db  0x74 ; 't'
000000000000d5aa         db  0xff ; '.'
000000000000d5ab         db  0xff ; '.'
000000000000d5ac         db  0x9c ; '.'
000000000000d5ad         db  0x09 ; '.'
000000000000d5ae         db  0x00 ; '.'
000000000000d5af         db  0x00 ; '.'
000000000000d5b0         db  0x14 ; '.'
000000000000d5b1         db  0x77 ; 'w'
000000000000d5b2         db  0xff ; '.'
000000000000d5b3         db  0xff ; '.'
000000000000d5b4         db  0xe8 ; '.'
000000000000d5b5         db  0x09 ; '.'
000000000000d5b6         db  0x00 ; '.'
000000000000d5b7         db  0x00 ; '.'
000000000000d5b8         db  0x94 ; '.'
000000000000d5b9         db  0x77 ; 'w'
000000000000d5ba         db  0xff ; '.'
000000000000d5bb         db  0xff ; '.'
000000000000d5bc         db  0x20 ; ' '
000000000000d5bd         db  0x0a ; '.'
000000000000d5be         db  0x00 ; '.'
000000000000d5bf         db  0x00 ; '.'
000000000000d5c0         db  0xc4 ; '.'
000000000000d5c1         db  0x77 ; 'w'
000000000000d5c2         db  0xff ; '.'
000000000000d5c3         db  0xff ; '.'
000000000000d5c4         db  0x48 ; 'H'
000000000000d5c5         db  0x0a ; '.'
000000000000d5c6         db  0x00 ; '.'
000000000000d5c7         db  0x00 ; '.'
000000000000d5c8         db  0x94 ; '.'
000000000000d5c9         db  0x78 ; 'x'
000000000000d5ca         db  0xff ; '.'
000000000000d5cb         db  0xff ; '.'
000000000000d5cc         db  0x88 ; '.'
000000000000d5cd         db  0x0a ; '.'
000000000000d5ce         db  0x00 ; '.'
000000000000d5cf         db  0x00 ; '.'
000000000000d5d0         db  0xa4 ; '.'
000000000000d5d1         db  0x7d ; '}'
000000000000d5d2         db  0xff ; '.'
000000000000d5d3         db  0xff ; '.'
000000000000d5d4         db  0x04 ; '.'
000000000000d5d5         db  0x0b ; '.'
000000000000d5d6         db  0x00 ; '.'
000000000000d5d7         db  0x00 ; '.'
000000000000d5d8         db  0xb4 ; '.'
000000000000d5d9         db  0x7d ; '}'
000000000000d5da         db  0xff ; '.'
000000000000d5db         db  0xff ; '.'
000000000000d5dc         db  0x18 ; '.'
000000000000d5dd         db  0x0b ; '.'
000000000000d5de         db  0x00 ; '.'
000000000000d5df         db  0x00 ; '.'
000000000000d5e0         db  0xd4 ; '.'
000000000000d5e1         db  0x7e ; '~'
000000000000d5e2         db  0xff ; '.'
000000000000d5e3         db  0xff ; '.'
000000000000d5e4         db  0x64 ; 'd'
000000000000d5e5         db  0x0b ; '.'
000000000000d5e6         db  0x00 ; '.'
000000000000d5e7         db  0x00 ; '.'
000000000000d5e8         db  0x54 ; 'T'
000000000000d5e9         db  0x7f ; '.'
000000000000d5ea         db  0xff ; '.'
000000000000d5eb         db  0xff ; '.'
000000000000d5ec         db  0x90 ; '.'
000000000000d5ed         db  0x0b ; '.'
000000000000d5ee         db  0x00 ; '.'
000000000000d5ef         db  0x00 ; '.'
000000000000d5f0         db  0x74 ; 't'
000000000000d5f1         db  0x80 ; '.'
000000000000d5f2         db  0xff ; '.'
000000000000d5f3         db  0xff ; '.'
000000000000d5f4         db  0xf0 ; '.'
000000000000d5f5         db  0x0b ; '.'
000000000000d5f6         db  0x00 ; '.'
000000000000d5f7         db  0x00 ; '.'
000000000000d5f8         db  0xe4 ; '.'
000000000000d5f9         db  0x80 ; '.'
000000000000d5fa         db  0xff ; '.'
000000000000d5fb         db  0xff ; '.'
000000000000d5fc         db  0x3c ; '<'
000000000000d5fd         db  0x0c ; '.'
000000000000d5fe         db  0x00 ; '.'
000000000000d5ff         db  0x00 ; '.'
000000000000d600         db  0x34 ; '4'
000000000000d601         db  0x81 ; '.'
000000000000d602         db  0xff ; '.'
000000000000d603         db  0xff ; '.'
000000000000d604         db  0x7c ; '|'
000000000000d605         db  0x0c ; '.'
000000000000d606         db  0x00 ; '.'
000000000000d607         db  0x00 ; '.'
000000000000d608         db  0x44 ; 'D'
000000000000d609         db  0x81 ; '.'
000000000000d60a         db  0xff ; '.'
000000000000d60b         db  0xff ; '.'
000000000000d60c         db  0x90 ; '.'
000000000000d60d         db  0x0c ; '.'
000000000000d60e         db  0x00 ; '.'
000000000000d60f         db  0x00 ; '.'
000000000000d610         db  0x54 ; 'T'
000000000000d611         db  0x81 ; '.'
000000000000d612         db  0xff ; '.'
000000000000d613         db  0xff ; '.'
000000000000d614         db  0xa4 ; '.'
000000000000d615         db  0x0c ; '.'
000000000000d616         db  0x00 ; '.'
000000000000d617         db  0x00 ; '.'
000000000000d618         db  0x04 ; '.'
000000000000d619         db  0x82 ; '.'
000000000000d61a         db  0xff ; '.'
000000000000d61b         db  0xff ; '.'
000000000000d61c         db  0xd4 ; '.'
000000000000d61d         db  0x0c ; '.'
000000000000d61e         db  0x00 ; '.'
000000000000d61f         db  0x00 ; '.'
000000000000d620         db  0x74 ; 't'
000000000000d621         db  0x83 ; '.'
000000000000d622         db  0xff ; '.'
000000000000d623         db  0xff ; '.'
000000000000d624         db  0x2c ; ','
000000000000d625         db  0x0d ; '.'
000000000000d626         db  0x00 ; '.'
000000000000d627         db  0x00 ; '.'
000000000000d628         db  0xe4 ; '.'
000000000000d629         db  0x84 ; '.'
000000000000d62a         db  0xff ; '.'
000000000000d62b         db  0xff ; '.'
000000000000d62c         db  0x84 ; '.'
000000000000d62d         db  0x0d ; '.'
000000000000d62e         db  0x00 ; '.'
000000000000d62f         db  0x00 ; '.'
000000000000d630         db  0x34 ; '4'
000000000000d631         db  0x86 ; '.'
000000000000d632         db  0xff ; '.'
000000000000d633         db  0xff ; '.'
000000000000d634         db  0xe4 ; '.'
000000000000d635         db  0x0d ; '.'
000000000000d636         db  0x00 ; '.'
000000000000d637         db  0x00 ; '.'
000000000000d638         db  0xd4 ; '.'
000000000000d639         db  0x86 ; '.'
000000000000d63a         db  0xff ; '.'
000000000000d63b         db  0xff ; '.'
000000000000d63c         db  0x04 ; '.'
000000000000d63d         db  0x0e ; '.'
000000000000d63e         db  0x00 ; '.'
000000000000d63f         db  0x00 ; '.'
000000000000d640         db  0xc4 ; '.'
000000000000d641         db  0x87 ; '.'
000000000000d642         db  0xff ; '.'
000000000000d643         db  0xff ; '.'
000000000000d644         db  0x48 ; 'H'
000000000000d645         db  0x0e ; '.'
000000000000d646         db  0x00 ; '.'
000000000000d647         db  0x00 ; '.'
000000000000d648         db  0x04 ; '.'
000000000000d649         db  0x9a ; '.'
000000000000d64a         db  0xff ; '.'
000000000000d64b         db  0xff ; '.'
000000000000d64c         db  0xc0 ; '.'
000000000000d64d         db  0x0e ; '.'
000000000000d64e         db  0x00 ; '.'
000000000000d64f         db  0x00 ; '.'
000000000000d650         db  0xb4 ; '.'
000000000000d651         db  0x9b ; '.'
000000000000d652         db  0xff ; '.'
000000000000d653         db  0xff ; '.'
000000000000d654         db  0x2c ; ','
000000000000d655         db  0x0f ; '.'
000000000000d656         db  0x00 ; '.'
000000000000d657         db  0x00 ; '.'
000000000000d658         db  0xf4 ; '.'
000000000000d659         db  0x9b ; '.'
000000000000d65a         db  0xff ; '.'
000000000000d65b         db  0xff ; '.'
000000000000d65c         db  0x58 ; 'X'
000000000000d65d         db  0x0f ; '.'
000000000000d65e         db  0x00 ; '.'
000000000000d65f         db  0x00 ; '.'
000000000000d660         db  0x14 ; '.'
000000000000d661         db  0x9c ; '.'
000000000000d662         db  0xff ; '.'
000000000000d663         db  0xff ; '.'
000000000000d664         db  0x6c ; 'l'
000000000000d665         db  0x0f ; '.'
000000000000d666         db  0x00 ; '.'
000000000000d667         db  0x00 ; '.'
000000000000d668         db  0x34 ; '4'
000000000000d669         db  0x9c ; '.'
000000000000d66a         db  0xff ; '.'
000000000000d66b         db  0xff ; '.'
000000000000d66c         db  0x80 ; '.'
000000000000d66d         db  0x0f ; '.'
000000000000d66e         db  0x00 ; '.'
000000000000d66f         db  0x00 ; '.'
000000000000d670         db  0x74 ; 't'
000000000000d671         db  0x9c ; '.'
000000000000d672         db  0xff ; '.'
000000000000d673         db  0xff ; '.'
000000000000d674         db  0x94 ; '.'
000000000000d675         db  0x0f ; '.'
000000000000d676         db  0x00 ; '.'
000000000000d677         db  0x00 ; '.'
000000000000d678         db  0x94 ; '.'
000000000000d679         db  0x9c ; '.'
000000000000d67a         db  0xff ; '.'
000000000000d67b         db  0xff ; '.'
000000000000d67c         db  0xa8 ; '.'
000000000000d67d         db  0x0f ; '.'
000000000000d67e         db  0x00 ; '.'
000000000000d67f         db  0x00 ; '.'
000000000000d680         db  0xc4 ; '.'
000000000000d681         db  0x9c ; '.'
000000000000d682         db  0xff ; '.'
000000000000d683         db  0xff ; '.'
000000000000d684         db  0xbc ; '.'
000000000000d685         db  0x0f ; '.'
000000000000d686         db  0x00 ; '.'
000000000000d687         db  0x00 ; '.'
000000000000d688         db  0x44 ; 'D'
000000000000d689         db  0x9d ; '.'
000000000000d68a         db  0xff ; '.'
000000000000d68b         db  0xff ; '.'
000000000000d68c         db  0x10 ; '.'
000000000000d68d         db  0x10 ; '.'
000000000000d68e         db  0x00 ; '.'
000000000000d68f         db  0x00 ; '.'
000000000000d690         db  0x34 ; '4'
000000000000d691         db  0x9e ; '.'
000000000000d692         db  0xff ; '.'
000000000000d693         db  0xff ; '.'
000000000000d694         db  0x7c ; '|'
000000000000d695         db  0x10 ; '.'
000000000000d696         db  0x00 ; '.'
000000000000d697         db  0x00 ; '.'
000000000000d698         db  0x44 ; 'D'
000000000000d699         db  0x9e ; '.'
000000000000d69a         db  0xff ; '.'
000000000000d69b         db  0xff ; '.'
000000000000d69c         db  0x90 ; '.'
000000000000d69d         db  0x10 ; '.'
000000000000d69e         db  0x00 ; '.'
000000000000d69f         db  0x00 ; '.'
000000000000d6a0         db  0xe4 ; '.'
000000000000d6a1         db  0x9e ; '.'
000000000000d6a2         db  0xff ; '.'
000000000000d6a3         db  0xff ; '.'
000000000000d6a4         db  0xbc ; '.'
000000000000d6a5         db  0x10 ; '.'
000000000000d6a6         db  0x00 ; '.'
000000000000d6a7         db  0x00 ; '.'
000000000000d6a8         db  0x04 ; '.'
000000000000d6a9         db  0x9f ; '.'
000000000000d6aa         db  0xff ; '.'
000000000000d6ab         db  0xff ; '.'
000000000000d6ac         db  0xd0 ; '.'
000000000000d6ad         db  0x10 ; '.'
000000000000d6ae         db  0x00 ; '.'
000000000000d6af         db  0x00 ; '.'
000000000000d6b0         db  0x14 ; '.'
000000000000d6b1         db  0x9f ; '.'
000000000000d6b2         db  0xff ; '.'
000000000000d6b3         db  0xff ; '.'
000000000000d6b4         db  0xe4 ; '.'
000000000000d6b5         db  0x10 ; '.'
000000000000d6b6         db  0x00 ; '.'
000000000000d6b7         db  0x00 ; '.'
000000000000d6b8         db  0x34 ; '4'
000000000000d6b9         db  0x9f ; '.'
000000000000d6ba         db  0xff ; '.'
000000000000d6bb         db  0xff ; '.'
000000000000d6bc         db  0xf8 ; '.'
000000000000d6bd         db  0x10 ; '.'
000000000000d6be         db  0x00 ; '.'
000000000000d6bf         db  0x00 ; '.'
000000000000d6c0         db  0x54 ; 'T'
000000000000d6c1         db  0x9f ; '.'
000000000000d6c2         db  0xff ; '.'
000000000000d6c3         db  0xff ; '.'
000000000000d6c4         db  0x0c ; '.'
000000000000d6c5         db  0x11 ; '.'
000000000000d6c6         db  0x00 ; '.'
000000000000d6c7         db  0x00 ; '.'
000000000000d6c8         db  0xe4 ; '.'
000000000000d6c9         db  0x9f ; '.'
000000000000d6ca         db  0xff ; '.'
000000000000d6cb         db  0xff ; '.'
000000000000d6cc         db  0x28 ; '('
000000000000d6cd         db  0x11 ; '.'
000000000000d6ce         db  0x00 ; '.'
000000000000d6cf         db  0x00 ; '.'
000000000000d6d0         db  0x74 ; 't'
000000000000d6d1         db  0xa0 ; '.'
000000000000d6d2         db  0xff ; '.'
000000000000d6d3         db  0xff ; '.'
000000000000d6d4         db  0x44 ; 'D'
000000000000d6d5         db  0x11 ; '.'
000000000000d6d6         db  0x00 ; '.'
000000000000d6d7         db  0x00 ; '.'
000000000000d6d8         db  0x84 ; '.'
000000000000d6d9         db  0xa0 ; '.'
000000000000d6da         db  0xff ; '.'
000000000000d6db         db  0xff ; '.'
000000000000d6dc         db  0x58 ; 'X'
000000000000d6dd         db  0x11 ; '.'
000000000000d6de         db  0x00 ; '.'
000000000000d6df         db  0x00 ; '.'
000000000000d6e0         db  0x94 ; '.'
000000000000d6e1         db  0xa0 ; '.'
000000000000d6e2         db  0xff ; '.'
000000000000d6e3         db  0xff ; '.'
000000000000d6e4         db  0x6c ; 'l'
000000000000d6e5         db  0x11 ; '.'
000000000000d6e6         db  0x00 ; '.'
000000000000d6e7         db  0x00 ; '.'
000000000000d6e8         db  0x34 ; '4'
000000000000d6e9         db  0xa1 ; '.'
000000000000d6ea         db  0xff ; '.'
000000000000d6eb         db  0xff ; '.'
000000000000d6ec         db  0x88 ; '.'
000000000000d6ed         db  0x11 ; '.'
000000000000d6ee         db  0x00 ; '.'
000000000000d6ef         db  0x00 ; '.'
000000000000d6f0         db  0x44 ; 'D'
000000000000d6f1         db  0xa1 ; '.'
000000000000d6f2         db  0xff ; '.'
000000000000d6f3         db  0xff ; '.'
000000000000d6f4         db  0x9c ; '.'
000000000000d6f5         db  0x11 ; '.'
000000000000d6f6         db  0x00 ; '.'
000000000000d6f7         db  0x00 ; '.'
000000000000d6f8         db  0x64 ; 'd'
000000000000d6f9         db  0xa1 ; '.'
000000000000d6fa         db  0xff ; '.'
000000000000d6fb         db  0xff ; '.'
000000000000d6fc         db  0xb0 ; '.'
000000000000d6fd         db  0x11 ; '.'
000000000000d6fe         db  0x00 ; '.'
000000000000d6ff         db  0x00 ; '.'
000000000000d700         db  0x74 ; 't'
000000000000d701         db  0xa1 ; '.'
000000000000d702         db  0xff ; '.'
000000000000d703         db  0xff ; '.'
000000000000d704         db  0xc4 ; '.'
000000000000d705         db  0x11 ; '.'
000000000000d706         db  0x00 ; '.'
000000000000d707         db  0x00 ; '.'
000000000000d708         db  0x04 ; '.'
000000000000d709         db  0xa2 ; '.'
000000000000d70a         db  0xff ; '.'
000000000000d70b         db  0xff ; '.'
000000000000d70c         db  0xe0 ; '.'
000000000000d70d         db  0x11 ; '.'
000000000000d70e         db  0x00 ; '.'
000000000000d70f         db  0x00 ; '.'
000000000000d710         db  0xa4 ; '.'
000000000000d711         db  0xa2 ; '.'
000000000000d712         db  0xff ; '.'
000000000000d713         db  0xff ; '.'
000000000000d714         db  0xfc ; '.'
000000000000d715         db  0x11 ; '.'
000000000000d716         db  0x00 ; '.'
000000000000d717         db  0x00 ; '.'
000000000000d718         db  0xb4 ; '.'
000000000000d719         db  0xa2 ; '.'
000000000000d71a         db  0xff ; '.'
000000000000d71b         db  0xff ; '.'
000000000000d71c         db  0x10 ; '.'
000000000000d71d         db  0x12 ; '.'
000000000000d71e         db  0x00 ; '.'
000000000000d71f         db  0x00 ; '.'
000000000000d720         db  0xd4 ; '.'
000000000000d721         db  0xa2 ; '.'
000000000000d722         db  0xff ; '.'
000000000000d723         db  0xff ; '.'
000000000000d724         db  0x24 ; '$'
000000000000d725         db  0x12 ; '.'
000000000000d726         db  0x00 ; '.'
000000000000d727         db  0x00 ; '.'
000000000000d728         db  0xf4 ; '.'
000000000000d729         db  0xa2 ; '.'
000000000000d72a         db  0xff ; '.'
000000000000d72b         db  0xff ; '.'
000000000000d72c         db  0x38 ; '8'
000000000000d72d         db  0x12 ; '.'
000000000000d72e         db  0x00 ; '.'
000000000000d72f         db  0x00 ; '.'
000000000000d730         db  0x04 ; '.'
000000000000d731         db  0xa3 ; '.'
000000000000d732         db  0xff ; '.'
000000000000d733         db  0xff ; '.'
000000000000d734         db  0x4c ; 'L'
000000000000d735         db  0x12 ; '.'
000000000000d736         db  0x00 ; '.'
000000000000d737         db  0x00 ; '.'
000000000000d738         db  0x24 ; '$'
000000000000d739         db  0xa3 ; '.'
000000000000d73a         db  0xff ; '.'
000000000000d73b         db  0xff ; '.'
000000000000d73c         db  0x60 ; '`'
000000000000d73d         db  0x12 ; '.'
000000000000d73e         db  0x00 ; '.'
000000000000d73f         db  0x00 ; '.'
000000000000d740         db  0x44 ; 'D'
000000000000d741         db  0xa3 ; '.'
000000000000d742         db  0xff ; '.'
000000000000d743         db  0xff ; '.'
000000000000d744         db  0x74 ; 't'
000000000000d745         db  0x12 ; '.'
000000000000d746         db  0x00 ; '.'
000000000000d747         db  0x00 ; '.'
000000000000d748         db  0x64 ; 'd'
000000000000d749         db  0xa3 ; '.'
000000000000d74a         db  0xff ; '.'
000000000000d74b         db  0xff ; '.'
000000000000d74c         db  0x8c ; '.'
000000000000d74d         db  0x12 ; '.'
000000000000d74e         db  0x00 ; '.'
000000000000d74f         db  0x00 ; '.'
000000000000d750         db  0x84 ; '.'
000000000000d751         db  0xa7 ; '.'
000000000000d752         db  0xff ; '.'
000000000000d753         db  0xff ; '.'
000000000000d754         db  0xa0 ; '.'
000000000000d755         db  0x13 ; '.'
000000000000d756         db  0x00 ; '.'
000000000000d757         db  0x00 ; '.'
000000000000d758         db  0xa4 ; '.'
000000000000d759         db  0xa7 ; '.'
000000000000d75a         db  0xff ; '.'
000000000000d75b         db  0xff ; '.'
000000000000d75c         db  0xb4 ; '.'
000000000000d75d         db  0x13 ; '.'
000000000000d75e         db  0x00 ; '.'
000000000000d75f         db  0x00 ; '.'
000000000000d760         db  0x24 ; '$'
000000000000d761         db  0xa8 ; '.'
000000000000d762         db  0xff ; '.'
000000000000d763         db  0xff ; '.'
000000000000d764         db  0xd0 ; '.'
000000000000d765         db  0x13 ; '.'
000000000000d766         db  0x00 ; '.'
000000000000d767         db  0x00 ; '.'
000000000000d768         db  0x04 ; '.'
000000000000d769         db  0xa9 ; '.'
000000000000d76a         db  0xff ; '.'
000000000000d76b         db  0xff ; '.'
000000000000d76c         db  0xfc ; '.'
000000000000d76d         db  0x13 ; '.'
000000000000d76e         db  0x00 ; '.'
000000000000d76f         db  0x00 ; '.'
000000000000d770         db  0x84 ; '.'
000000000000d771         db  0xa9 ; '.'
000000000000d772         db  0xff ; '.'
000000000000d773         db  0xff ; '.'
000000000000d774         db  0x1c ; '.'
000000000000d775         db  0x14 ; '.'
000000000000d776         db  0x00 ; '.'
000000000000d777         db  0x00 ; '.'
000000000000d778         db  0xa4 ; '.'
000000000000d779         db  0xa9 ; '.'
000000000000d77a         db  0xff ; '.'
000000000000d77b         db  0xff ; '.'
000000000000d77c         db  0x38 ; '8'
000000000000d77d         db  0x14 ; '.'
000000000000d77e         db  0x00 ; '.'
000000000000d77f         db  0x00 ; '.'
000000000000d780         db  0xd4 ; '.'
000000000000d781         db  0xa9 ; '.'
000000000000d782         db  0xff ; '.'
000000000000d783         db  0xff ; '.'
000000000000d784         db  0x4c ; 'L'
000000000000d785         db  0x14 ; '.'
000000000000d786         db  0x00 ; '.'
000000000000d787         db  0x00 ; '.'
000000000000d788         db  0xe4 ; '.'
000000000000d789         db  0xa9 ; '.'
000000000000d78a         db  0xff ; '.'
000000000000d78b         db  0xff ; '.'
000000000000d78c         db  0x60 ; '`'
000000000000d78d         db  0x14 ; '.'
000000000000d78e         db  0x00 ; '.'
000000000000d78f         db  0x00 ; '.'
000000000000d790         db  0x24 ; '$'
000000000000d791         db  0xaa ; '.'
000000000000d792         db  0xff ; '.'
000000000000d793         db  0xff ; '.'
000000000000d794         db  0x84 ; '.'
000000000000d795         db  0x14 ; '.'
000000000000d796         db  0x00 ; '.'
000000000000d797         db  0x00 ; '.'
000000000000d798         db  0x54 ; 'T'
000000000000d799         db  0xaa ; '.'
000000000000d79a         db  0xff ; '.'
000000000000d79b         db  0xff ; '.'
000000000000d79c         db  0x98 ; '.'
000000000000d79d         db  0x14 ; '.'
000000000000d79e         db  0x00 ; '.'
000000000000d79f         db  0x00 ; '.'
000000000000d7a0         db  0xe4 ; '.'
000000000000d7a1         db  0xaa ; '.'
000000000000d7a2         db  0xff ; '.'
000000000000d7a3         db  0xff ; '.'
000000000000d7a4         db  0xb0 ; '.'
000000000000d7a5         db  0x14 ; '.'
000000000000d7a6         db  0x00 ; '.'
000000000000d7a7         db  0x00 ; '.'
000000000000d7a8         db  0x34 ; '4'
000000000000d7a9         db  0xab ; '.'
000000000000d7aa         db  0xff ; '.'
000000000000d7ab         db  0xff ; '.'
000000000000d7ac         db  0xc8 ; '.'
000000000000d7ad         db  0x14 ; '.'
000000000000d7ae         db  0x00 ; '.'
000000000000d7af         db  0x00 ; '.'
000000000000d7b0         db  0x54 ; 'T'
000000000000d7b1         db  0xab ; '.'
000000000000d7b2         db  0xff ; '.'
000000000000d7b3         db  0xff ; '.'
000000000000d7b4         db  0xe4 ; '.'
000000000000d7b5         db  0x14 ; '.'
000000000000d7b6         db  0x00 ; '.'
000000000000d7b7         db  0x00 ; '.'
000000000000d7b8         db  0x84 ; '.'
000000000000d7b9         db  0xab ; '.'
000000000000d7ba         db  0xff ; '.'
000000000000d7bb         db  0xff ; '.'
000000000000d7bc         db  0x00 ; '.'
000000000000d7bd         db  0x15 ; '.'
000000000000d7be         db  0x00 ; '.'
000000000000d7bf         db  0x00 ; '.'
000000000000d7c0         db  0xb4 ; '.'
000000000000d7c1         db  0xab ; '.'
000000000000d7c2         db  0xff ; '.'
000000000000d7c3         db  0xff ; '.'
000000000000d7c4         db  0x28 ; '('
000000000000d7c5         db  0x15 ; '.'
000000000000d7c6         db  0x00 ; '.'
000000000000d7c7         db  0x00 ; '.'
000000000000d7c8         db  0xd4 ; '.'
000000000000d7c9         db  0xab ; '.'
000000000000d7ca         db  0xff ; '.'
000000000000d7cb         db  0xff ; '.'
000000000000d7cc         db  0x44 ; 'D'
000000000000d7cd         db  0x15 ; '.'
000000000000d7ce         db  0x00 ; '.'
000000000000d7cf         db  0x00 ; '.'
000000000000d7d0         db  0x14 ; '.'
000000000000d7d1         db  0xac ; '.'
000000000000d7d2         db  0xff ; '.'
000000000000d7d3         db  0xff ; '.'
000000000000d7d4         db  0x5c ; '\'
000000000000d7d5         db  0x15 ; '.'
000000000000d7d6         db  0x00 ; '.'
000000000000d7d7         db  0x00 ; '.'
000000000000d7d8         db  0x74 ; 't'
000000000000d7d9         db  0xac ; '.'
000000000000d7da         db  0xff ; '.'
000000000000d7db         db  0xff ; '.'
000000000000d7dc         db  0x88 ; '.'
000000000000d7dd         db  0x15 ; '.'
000000000000d7de         db  0x00 ; '.'
000000000000d7df         db  0x00 ; '.'
000000000000d7e0         db  0x34 ; '4'
000000000000d7e1         db  0xad ; '.'
000000000000d7e2         db  0xff ; '.'
000000000000d7e3         db  0xff ; '.'
000000000000d7e4         db  0xa4 ; '.'
000000000000d7e5         db  0x15 ; '.'
000000000000d7e6         db  0x00 ; '.'
000000000000d7e7         db  0x00 ; '.'
000000000000d7e8         db  0x94 ; '.'
000000000000d7e9         db  0xad ; '.'
000000000000d7ea         db  0xff ; '.'
000000000000d7eb         db  0xff ; '.'
000000000000d7ec         db  0xd0 ; '.'
000000000000d7ed         db  0x15 ; '.'
000000000000d7ee         db  0x00 ; '.'
000000000000d7ef         db  0x00 ; '.'
000000000000d7f0         db  0x54 ; 'T'
000000000000d7f1         db  0xae ; '.'
000000000000d7f2         db  0xff ; '.'
000000000000d7f3         db  0xff ; '.'
000000000000d7f4         db  0xec ; '.'
000000000000d7f5         db  0x15 ; '.'
000000000000d7f6         db  0x00 ; '.'
000000000000d7f7         db  0x00 ; '.'
000000000000d7f8         db  0x04 ; '.'
000000000000d7f9         db  0xaf ; '.'
000000000000d7fa         db  0xff ; '.'
000000000000d7fb         db  0xff ; '.'
000000000000d7fc         db  0x14 ; '.'
000000000000d7fd         db  0x16 ; '.'
000000000000d7fe         db  0x00 ; '.'
000000000000d7ff         db  0x00 ; '.'
000000000000d800         db  0x24 ; '$'
000000000000d801         db  0xb3 ; '.'
000000000000d802         db  0xff ; '.'
000000000000d803         db  0xff ; '.'
000000000000d804         db  0x64 ; 'd'
000000000000d805         db  0x16 ; '.'
000000000000d806         db  0x00 ; '.'
000000000000d807         db  0x00 ; '.'
000000000000d808         db  0xa4 ; '.'
000000000000d809         db  0xb3 ; '.'
000000000000d80a         db  0xff ; '.'
000000000000d80b         db  0xff ; '.'
000000000000d80c         db  0x9c ; '.'
000000000000d80d         db  0x16 ; '.'
000000000000d80e         db  0x00 ; '.'
000000000000d80f         db  0x00 ; '.'
000000000000d810         db  0xe4 ; '.'
000000000000d811         db  0xb3 ; '.'
000000000000d812         db  0xff ; '.'
000000000000d813         db  0xff ; '.'
000000000000d814         db  0xbc ; '.'
000000000000d815         db  0x16 ; '.'
000000000000d816         db  0x00 ; '.'
000000000000d817         db  0x00 ; '.'
000000000000d818         db  0x44 ; 'D'
000000000000d819         db  0xb4 ; '.'
000000000000d81a         db  0xff ; '.'
000000000000d81b         db  0xff ; '.'
000000000000d81c         db  0xec ; '.'
000000000000d81d         db  0x16 ; '.'
000000000000d81e         db  0x00 ; '.'
000000000000d81f         db  0x00 ; '.'
000000000000d820         db  0xd4 ; '.'
000000000000d821         db  0xb4 ; '.'
000000000000d822         db  0xff ; '.'
000000000000d823         db  0xff ; '.'
000000000000d824         db  0x2c ; ','
000000000000d825         db  0x17 ; '.'
000000000000d826         db  0x00 ; '.'
000000000000d827         db  0x00 ; '.'
000000000000d828         db  0xd4 ; '.'
000000000000d829         db  0xb5 ; '.'
000000000000d82a         db  0xff ; '.'
000000000000d82b         db  0xff ; '.'
000000000000d82c         db  0x6c ; 'l'
000000000000d82d         db  0x17 ; '.'
000000000000d82e         db  0x00 ; '.'
000000000000d82f         db  0x00 ; '.'
000000000000d830         db  0xf4 ; '.'
000000000000d831         db  0xb5 ; '.'
000000000000d832         db  0xff ; '.'
000000000000d833         db  0xff ; '.'
000000000000d834         db  0x84 ; '.'
000000000000d835         db  0x17 ; '.'
000000000000d836         db  0x00 ; '.'
000000000000d837         db  0x00 ; '.'
000000000000d838         db  0x74 ; 't'
000000000000d839         db  0xb6 ; '.'
000000000000d83a         db  0xff ; '.'
000000000000d83b         db  0xff ; '.'
000000000000d83c         db  0xd4 ; '.'
000000000000d83d         db  0x17 ; '.'
000000000000d83e         db  0x00 ; '.'
000000000000d83f         db  0x00 ; '.'
000000000000d840         db  0xd4 ; '.'
000000000000d841         db  0xb6 ; '.'
000000000000d842         db  0xff ; '.'
000000000000d843         db  0xff ; '.'
000000000000d844         db  0xf4 ; '.'
000000000000d845         db  0x17 ; '.'
000000000000d846         db  0x00 ; '.'
000000000000d847         db  0x00 ; '.'
000000000000d848         db  0x14 ; '.'
000000000000d849         db  0xb7 ; '.'
000000000000d84a         db  0xff ; '.'
000000000000d84b         db  0xff ; '.'
000000000000d84c         db  0x14 ; '.'
000000000000d84d         db  0x18 ; '.'
000000000000d84e         db  0x00 ; '.'
000000000000d84f         db  0x00 ; '.'
000000000000d850         db  0x24 ; '$'
000000000000d851         db  0xb7 ; '.'
000000000000d852         db  0xff ; '.'
000000000000d853         db  0xff ; '.'
000000000000d854         db  0x2c ; ','
000000000000d855         db  0x18 ; '.'
000000000000d856         db  0x00 ; '.'
000000000000d857         db  0x00 ; '.'
000000000000d858         db  0x44 ; 'D'
000000000000d859         db  0xc8 ; '.'
000000000000d85a         db  0xff ; '.'
000000000000d85b         db  0xff ; '.'
000000000000d85c         db  0x5c ; '\'
000000000000d85d         db  0x18 ; '.'
000000000000d85e         db  0x00 ; '.'
000000000000d85f         db  0x00 ; '.'
000000000000d860         db  0x44 ; 'D'
000000000000d861         db  0xca ; '.'
000000000000d862         db  0xff ; '.'
000000000000d863         db  0xff ; '.'
000000000000d864         db  0x74 ; 't'
000000000000d865         db  0x18 ; '.'
000000000000d866         db  0x00 ; '.'
000000000000d867         db  0x00 ; '.'
000000000000d868         db  0x34 ; '4'
000000000000d869         db  0xd7 ; '.'
000000000000d86a         db  0xff ; '.'
000000000000d86b         db  0xff ; '.'
000000000000d86c         db  0xc4 ; '.'
000000000000d86d         db  0x18 ; '.'
000000000000d86e         db  0x00 ; '.'
000000000000d86f         db  0x00 ; '.'
000000000000d870         db  0xa4 ; '.'
000000000000d871         db  0xd7 ; '.'
000000000000d872         db  0xff ; '.'
000000000000d873         db  0xff ; '.'
000000000000d874         db  0x0c ; '.'
000000000000d875         db  0x19 ; '.'
000000000000d876         db  0x00 ; '.'
000000000000d877         db  0x00 ; '.'
000000000000d878         db  0xb4 ; '.'
000000000000d879         db  0xd7 ; '.'
000000000000d87a         db  0xff ; '.'
000000000000d87b         db  0xff ; '.'
000000000000d87c         db  0x24 ; '$'
000000000000d87d         db  0x19 ; '.'
000000000000d87e         db  0x00 ; '.'
000000000000d87f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xd880; 0xee18[ (5528 bytes)
        ; File offset : [55424; 60952[ (5528 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000d880         dd         0x00000014                                  ; Length of the record
000000000000d884         dd         0x00000000                                  ; CIE ID
000000000000d888         db         0x01                                        ; Version
000000000000d889         db         "zR", 0                                     ; Augmentation String
000000000000d88c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000d88d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000d88e         db         0x10                                        ; Return address register
000000000000d88f         db         0x01                                        ; Augmentation data length
000000000000d890         db         0x1b                                        ; FDE encoding
000000000000d891         db  0x0c ; '.'
000000000000d892         db  0x07 ; '.'
000000000000d893         db  0x08 ; '.'
000000000000d894         db  0x90 ; '.'
000000000000d895         db  0x01 ; '.'
000000000000d896         db  0x07 ; '.'
000000000000d897         db  0x10 ; '.'
000000000000d898         dd         0x00000014                                  ; Length of the record
000000000000d89c         dd         0x0000001c                                  ; FDE: parent CIE at 0xd880 (FDE encoding = 0x1B)
000000000000d8a0         db         0xd0, 0x54, 2 dup (0xff)                    ; begin 0x2d70
000000000000d8a4         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x2d9b)
000000000000d8a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8a9         align      16
000000000000d8b0         dd         0x00000014                                  ; Length of the record
000000000000d8b4         dd         0x00000000                                  ; CIE ID
000000000000d8b8         db         0x01                                        ; Version
000000000000d8b9         db         "zR", 0                                     ; Augmentation String
000000000000d8bc         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000d8bd         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000d8be         db         0x10                                        ; Return address register
000000000000d8bf         db         0x01                                        ; Augmentation data length
000000000000d8c0         db         0x1b                                        ; FDE encoding
000000000000d8c1         db  0x0c ; '.'
000000000000d8c2         db  0x07 ; '.'
000000000000d8c3         db  0x08 ; '.'
000000000000d8c4         db  0x90 ; '.'
000000000000d8c5         db  0x01 ; '.'
000000000000d8c6         db  0x00 ; '.'
000000000000d8c7         db  0x00 ; '.'
000000000000d8c8         dd         0x00000024                                  ; Length of the record
000000000000d8cc         dd         0x0000001c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d8d0         db         0xe0, 0x3e, 2 dup (0xff)                    ; begin 0x17b0
000000000000d8d4         db         0xb0, 0x03, 2 dup (0x00)                    ; length 0x3b0 (end at 0x1b60)
000000000000d8d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8d9         db  0x0e ; '.'
000000000000d8da         db  0x10 ; '.'
000000000000d8db         db  0x46 ; 'F'
000000000000d8dc         db  0x0e ; '.'
000000000000d8dd         db  0x18 ; '.'
000000000000d8de         db  0x4a ; 'J'
000000000000d8df         db  0x0f ; '.'
000000000000d8e0         db  0x0b ; '.'
000000000000d8e1         db  0x77 ; 'w'
000000000000d8e2         db  0x08 ; '.'
000000000000d8e3         db  0x80 ; '.'
000000000000d8e4         db  0x00 ; '.'
000000000000d8e5         db  0x3f ; '?'
000000000000d8e6         db  0x1a ; '.'
000000000000d8e7         db  0x3b ; ';'
000000000000d8e8         db  0x2a ; '*'
000000000000d8e9         db  0x33 ; '3'
000000000000d8ea         db  0x24 ; '$'
000000000000d8eb         db  0x22 ; '"'
000000000000d8ec         db  0x00 ; '.'
000000000000d8ed         db  0x00 ; '.'
000000000000d8ee         db  0x00 ; '.'
000000000000d8ef         db  0x00 ; '.'
000000000000d8f0         dd         0x00000014                                  ; Length of the record
000000000000d8f4         dd         0x00000044                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d8f8         db         0x68, 0x42, 2 dup (0xff)                    ; begin 0x1b60
000000000000d8fc         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1b68)
000000000000d900         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d901         align      8
000000000000d908         dd         0x00000010                                  ; Length of the record
000000000000d90c         dd         0x0000005c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d910         db         0x70, 0x55, 2 dup (0xff)                    ; begin 0x2e80
000000000000d914         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x2e82)
000000000000d918         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d919         align      4
000000000000d91c         dd         0x00000018                                  ; Length of the record
000000000000d920         dd         0x00000070                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d924         db         0x6c, 0x55, 2 dup (0xff)                    ; begin 0x2e90
000000000000d928         db         0x23, 0x01, 2 dup (0x00)                    ; length 0x123 (end at 0x2fb3)
000000000000d92c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d92d         db  0x44 ; 'D'
000000000000d92e         db  0x0e ; '.'
000000000000d92f         db  0x40 ; '@'
000000000000d930         db  0x02 ; '.'
000000000000d931         db  0x87 ; '.'
000000000000d932         db  0x0a ; '.'
000000000000d933         db  0x0e ; '.'
000000000000d934         db  0x08 ; '.'
000000000000d935         db  0x45 ; 'E'
000000000000d936         db  0x0b ; '.'
000000000000d937         db  0x00 ; '.'
000000000000d938         dd         0x00000030                                  ; Length of the record
000000000000d93c         dd         0x0000008c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d940         db         0x80, 0x56, 2 dup (0xff)                    ; begin 0x2fc0
000000000000d944         db         0x76, 3 dup (0x00)                          ; length 0x76 (end at 0x3036)
000000000000d948         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d949         db  0x48 ; 'H'
000000000000d94a         db  0x0e ; '.'
000000000000d94b         db  0x10 ; '.'
000000000000d94c         db  0x86 ; '.'
000000000000d94d         db  0x02 ; '.'
000000000000d94e         db  0x41 ; 'A'
000000000000d94f         db  0x0e ; '.'
000000000000d950         db  0x18 ; '.'
000000000000d951         db  0x83 ; '.'
000000000000d952         db  0x03 ; '.'
000000000000d953         db  0x4a ; 'J'
000000000000d954         db  0x0e ; '.'
000000000000d955         db  0x20 ; ' '
000000000000d956         db  0x73 ; 's'
000000000000d957         db  0x0e ; '.'
000000000000d958         db  0x18 ; '.'
000000000000d959         db  0x44 ; 'D'
000000000000d95a         db  0x0e ; '.'
000000000000d95b         db  0x10 ; '.'
000000000000d95c         db  0x41 ; 'A'
000000000000d95d         db  0x0e ; '.'
000000000000d95e         db  0x08 ; '.'
000000000000d95f         db  0x41 ; 'A'
000000000000d960         db  0xc3 ; '.'
000000000000d961         db  0xc6 ; '.'
000000000000d962         db  0x43 ; 'C'
000000000000d963         db  0x0e ; '.'
000000000000d964         db  0x20 ; ' '
000000000000d965         db  0x83 ; '.'
000000000000d966         db  0x03 ; '.'
000000000000d967         db  0x86 ; '.'
000000000000d968         db  0x02 ; '.'
000000000000d969         db  0x00 ; '.'
000000000000d96a         db  0x00 ; '.'
000000000000d96b         db  0x00 ; '.'
000000000000d96c         dd         0x00000048                                  ; Length of the record
000000000000d970         dd         0x000000c0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d974         db         0xcc, 0x56, 2 dup (0xff)                    ; begin 0x3040
000000000000d978         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x312c)
000000000000d97c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d97d         db  0x42 ; 'B'
000000000000d97e         db  0x0e ; '.'
000000000000d97f         db  0x10 ; '.'
000000000000d980         db  0x8f ; '.'
000000000000d981         db  0x02 ; '.'
000000000000d982         db  0x42 ; 'B'
000000000000d983         db  0x0e ; '.'
000000000000d984         db  0x18 ; '.'
000000000000d985         db  0x8e ; '.'
000000000000d986         db  0x03 ; '.'
000000000000d987         db  0x42 ; 'B'
000000000000d988         db  0x0e ; '.'
000000000000d989         db  0x20 ; ' '
000000000000d98a         db  0x8d ; '.'
000000000000d98b         db  0x04 ; '.'
000000000000d98c         db  0x42 ; 'B'
000000000000d98d         db  0x0e ; '.'
000000000000d98e         db  0x28 ; '('
000000000000d98f         db  0x8c ; '.'
000000000000d990         db  0x05 ; '.'
000000000000d991         db  0x41 ; 'A'
000000000000d992         db  0x0e ; '.'
000000000000d993         db  0x30 ; '0'
000000000000d994         db  0x86 ; '.'
000000000000d995         db  0x06 ; '.'
000000000000d996         db  0x41 ; 'A'
000000000000d997         db  0x0e ; '.'
000000000000d998         db  0x38 ; '8'
000000000000d999         db  0x83 ; '.'
000000000000d99a         db  0x07 ; '.'
000000000000d99b         db  0x44 ; 'D'
000000000000d99c         db  0x0e ; '.'
000000000000d99d         db  0x60 ; '`'
000000000000d99e         db  0x02 ; '.'
000000000000d99f         db  0xce ; '.'
000000000000d9a0         db  0x0a ; '.'
000000000000d9a1         db  0x0e ; '.'
000000000000d9a2         db  0x38 ; '8'
000000000000d9a3         db  0x41 ; 'A'
000000000000d9a4         db  0x0e ; '.'
000000000000d9a5         db  0x30 ; '0'
000000000000d9a6         db  0x41 ; 'A'
000000000000d9a7         db  0x0e ; '.'
000000000000d9a8         db  0x28 ; '('
000000000000d9a9         db  0x42 ; 'B'
000000000000d9aa         db  0x0e ; '.'
000000000000d9ab         db  0x20 ; ' '
000000000000d9ac         db  0x42 ; 'B'
000000000000d9ad         db  0x0e ; '.'
000000000000d9ae         db  0x18 ; '.'
000000000000d9af         db  0x42 ; 'B'
000000000000d9b0         db  0x0e ; '.'
000000000000d9b1         db  0x10 ; '.'
000000000000d9b2         db  0x42 ; 'B'
000000000000d9b3         db  0x0e ; '.'
000000000000d9b4         db  0x08 ; '.'
000000000000d9b5         db  0x41 ; 'A'
000000000000d9b6         db  0x0b ; '.'
000000000000d9b7         db  0x00 ; '.'
000000000000d9b8         dd         0x00000048                                  ; Length of the record
000000000000d9bc         dd         0x0000010c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000d9c0         db         0x70, 0x57, 2 dup (0xff)                    ; begin 0x3130
000000000000d9c4         db         0xf4, 3 dup (0x00)                          ; length 0xf4 (end at 0x3224)
000000000000d9c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d9c9         db  0x42 ; 'B'
000000000000d9ca         db  0x0e ; '.'
000000000000d9cb         db  0x10 ; '.'
000000000000d9cc         db  0x8f ; '.'
000000000000d9cd         db  0x02 ; '.'
000000000000d9ce         db  0x42 ; 'B'
000000000000d9cf         db  0x0e ; '.'
000000000000d9d0         db  0x18 ; '.'
000000000000d9d1         db  0x8e ; '.'
000000000000d9d2         db  0x03 ; '.'
000000000000d9d3         db  0x42 ; 'B'
000000000000d9d4         db  0x0e ; '.'
000000000000d9d5         db  0x20 ; ' '
000000000000d9d6         db  0x8d ; '.'
000000000000d9d7         db  0x04 ; '.'
000000000000d9d8         db  0x42 ; 'B'
000000000000d9d9         db  0x0e ; '.'
000000000000d9da         db  0x28 ; '('
000000000000d9db         db  0x8c ; '.'
000000000000d9dc         db  0x05 ; '.'
000000000000d9dd         db  0x41 ; 'A'
000000000000d9de         db  0x0e ; '.'
000000000000d9df         db  0x30 ; '0'
000000000000d9e0         db  0x86 ; '.'
000000000000d9e1         db  0x06 ; '.'
000000000000d9e2         db  0x41 ; 'A'
000000000000d9e3         db  0x0e ; '.'
000000000000d9e4         db  0x38 ; '8'
000000000000d9e5         db  0x83 ; '.'
000000000000d9e6         db  0x07 ; '.'
000000000000d9e7         db  0x44 ; 'D'
000000000000d9e8         db  0x0e ; '.'
000000000000d9e9         db  0x70 ; 'p'
000000000000d9ea         db  0x02 ; '.'
000000000000d9eb         db  0xd6 ; '.'
000000000000d9ec         db  0x0a ; '.'
000000000000d9ed         db  0x0e ; '.'
000000000000d9ee         db  0x38 ; '8'
000000000000d9ef         db  0x41 ; 'A'
000000000000d9f0         db  0x0e ; '.'
000000000000d9f1         db  0x30 ; '0'
000000000000d9f2         db  0x41 ; 'A'
000000000000d9f3         db  0x0e ; '.'
000000000000d9f4         db  0x28 ; '('
000000000000d9f5         db  0x42 ; 'B'
000000000000d9f6         db  0x0e ; '.'
000000000000d9f7         db  0x20 ; ' '
000000000000d9f8         db  0x42 ; 'B'
000000000000d9f9         db  0x0e ; '.'
000000000000d9fa         db  0x18 ; '.'
000000000000d9fb         db  0x42 ; 'B'
000000000000d9fc         db  0x0e ; '.'
000000000000d9fd         db  0x10 ; '.'
000000000000d9fe         db  0x42 ; 'B'
000000000000d9ff         db  0x0e ; '.'
000000000000da00         db  0x08 ; '.'
000000000000da01         db  0x41 ; 'A'
000000000000da02         db  0x0b ; '.'
000000000000da03         db  0x00 ; '.'
000000000000da04         dd         0x00000048                                  ; Length of the record
000000000000da08         dd         0x00000158                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000da0c         db         0x24, 0x58, 2 dup (0xff)                    ; begin 0x3230
000000000000da10         db         0xf4, 3 dup (0x00)                          ; length 0xf4 (end at 0x3324)
000000000000da14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da15         db  0x42 ; 'B'
000000000000da16         db  0x0e ; '.'
000000000000da17         db  0x10 ; '.'
000000000000da18         db  0x8f ; '.'
000000000000da19         db  0x02 ; '.'
000000000000da1a         db  0x42 ; 'B'
000000000000da1b         db  0x0e ; '.'
000000000000da1c         db  0x18 ; '.'
000000000000da1d         db  0x8e ; '.'
000000000000da1e         db  0x03 ; '.'
000000000000da1f         db  0x42 ; 'B'
000000000000da20         db  0x0e ; '.'
000000000000da21         db  0x20 ; ' '
000000000000da22         db  0x8d ; '.'
000000000000da23         db  0x04 ; '.'
000000000000da24         db  0x42 ; 'B'
000000000000da25         db  0x0e ; '.'
000000000000da26         db  0x28 ; '('
000000000000da27         db  0x8c ; '.'
000000000000da28         db  0x05 ; '.'
000000000000da29         db  0x41 ; 'A'
000000000000da2a         db  0x0e ; '.'
000000000000da2b         db  0x30 ; '0'
000000000000da2c         db  0x86 ; '.'
000000000000da2d         db  0x06 ; '.'
000000000000da2e         db  0x41 ; 'A'
000000000000da2f         db  0x0e ; '.'
000000000000da30         db  0x38 ; '8'
000000000000da31         db  0x83 ; '.'
000000000000da32         db  0x07 ; '.'
000000000000da33         db  0x44 ; 'D'
000000000000da34         db  0x0e ; '.'
000000000000da35         db  0x70 ; 'p'
000000000000da36         db  0x02 ; '.'
000000000000da37         db  0xd6 ; '.'
000000000000da38         db  0x0a ; '.'
000000000000da39         db  0x0e ; '.'
000000000000da3a         db  0x38 ; '8'
000000000000da3b         db  0x41 ; 'A'
000000000000da3c         db  0x0e ; '.'
000000000000da3d         db  0x30 ; '0'
000000000000da3e         db  0x41 ; 'A'
000000000000da3f         db  0x0e ; '.'
000000000000da40         db  0x28 ; '('
000000000000da41         db  0x42 ; 'B'
000000000000da42         db  0x0e ; '.'
000000000000da43         db  0x20 ; ' '
000000000000da44         db  0x42 ; 'B'
000000000000da45         db  0x0e ; '.'
000000000000da46         db  0x18 ; '.'
000000000000da47         db  0x42 ; 'B'
000000000000da48         db  0x0e ; '.'
000000000000da49         db  0x10 ; '.'
000000000000da4a         db  0x42 ; 'B'
000000000000da4b         db  0x0e ; '.'
000000000000da4c         db  0x08 ; '.'
000000000000da4d         db  0x41 ; 'A'
000000000000da4e         db  0x0b ; '.'
000000000000da4f         db  0x00 ; '.'
000000000000da50         dd         0x00000048                                  ; Length of the record
000000000000da54         dd         0x000001a4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000da58         db         0xd8, 0x58, 2 dup (0xff)                    ; begin 0x3330
000000000000da5c         db         0xf4, 3 dup (0x00)                          ; length 0xf4 (end at 0x3424)
000000000000da60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da61         db  0x42 ; 'B'
000000000000da62         db  0x0e ; '.'
000000000000da63         db  0x10 ; '.'
000000000000da64         db  0x8f ; '.'
000000000000da65         db  0x02 ; '.'
000000000000da66         db  0x42 ; 'B'
000000000000da67         db  0x0e ; '.'
000000000000da68         db  0x18 ; '.'
000000000000da69         db  0x8e ; '.'
000000000000da6a         db  0x03 ; '.'
000000000000da6b         db  0x42 ; 'B'
000000000000da6c         db  0x0e ; '.'
000000000000da6d         db  0x20 ; ' '
000000000000da6e         db  0x8d ; '.'
000000000000da6f         db  0x04 ; '.'
000000000000da70         db  0x42 ; 'B'
000000000000da71         db  0x0e ; '.'
000000000000da72         db  0x28 ; '('
000000000000da73         db  0x8c ; '.'
000000000000da74         db  0x05 ; '.'
000000000000da75         db  0x41 ; 'A'
000000000000da76         db  0x0e ; '.'
000000000000da77         db  0x30 ; '0'
000000000000da78         db  0x86 ; '.'
000000000000da79         db  0x06 ; '.'
000000000000da7a         db  0x41 ; 'A'
000000000000da7b         db  0x0e ; '.'
000000000000da7c         db  0x38 ; '8'
000000000000da7d         db  0x83 ; '.'
000000000000da7e         db  0x07 ; '.'
000000000000da7f         db  0x47 ; 'G'
000000000000da80         db  0x0e ; '.'
000000000000da81         db  0x70 ; 'p'
000000000000da82         db  0x02 ; '.'
000000000000da83         db  0xd3 ; '.'
000000000000da84         db  0x0a ; '.'
000000000000da85         db  0x0e ; '.'
000000000000da86         db  0x38 ; '8'
000000000000da87         db  0x41 ; 'A'
000000000000da88         db  0x0e ; '.'
000000000000da89         db  0x30 ; '0'
000000000000da8a         db  0x41 ; 'A'
000000000000da8b         db  0x0e ; '.'
000000000000da8c         db  0x28 ; '('
000000000000da8d         db  0x42 ; 'B'
000000000000da8e         db  0x0e ; '.'
000000000000da8f         db  0x20 ; ' '
000000000000da90         db  0x42 ; 'B'
000000000000da91         db  0x0e ; '.'
000000000000da92         db  0x18 ; '.'
000000000000da93         db  0x42 ; 'B'
000000000000da94         db  0x0e ; '.'
000000000000da95         db  0x10 ; '.'
000000000000da96         db  0x42 ; 'B'
000000000000da97         db  0x0e ; '.'
000000000000da98         db  0x08 ; '.'
000000000000da99         db  0x41 ; 'A'
000000000000da9a         db  0x0b ; '.'
000000000000da9b         db  0x00 ; '.'
000000000000da9c         dd         0x00000048                                  ; Length of the record
000000000000daa0         dd         0x000001f0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000daa4         db         0x8c, 0x59, 2 dup (0xff)                    ; begin 0x3430
000000000000daa8         db         0xe4, 3 dup (0x00)                          ; length 0xe4 (end at 0x3514)
000000000000daac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000daad         db  0x42 ; 'B'
000000000000daae         db  0x0e ; '.'
000000000000daaf         db  0x10 ; '.'
000000000000dab0         db  0x8f ; '.'
000000000000dab1         db  0x02 ; '.'
000000000000dab2         db  0x42 ; 'B'
000000000000dab3         db  0x0e ; '.'
000000000000dab4         db  0x18 ; '.'
000000000000dab5         db  0x8e ; '.'
000000000000dab6         db  0x03 ; '.'
000000000000dab7         db  0x42 ; 'B'
000000000000dab8         db  0x0e ; '.'
000000000000dab9         db  0x20 ; ' '
000000000000daba         db  0x8d ; '.'
000000000000dabb         db  0x04 ; '.'
000000000000dabc         db  0x42 ; 'B'
000000000000dabd         db  0x0e ; '.'
000000000000dabe         db  0x28 ; '('
000000000000dabf         db  0x8c ; '.'
000000000000dac0         db  0x05 ; '.'
000000000000dac1         db  0x41 ; 'A'
000000000000dac2         db  0x0e ; '.'
000000000000dac3         db  0x30 ; '0'
000000000000dac4         db  0x86 ; '.'
000000000000dac5         db  0x06 ; '.'
000000000000dac6         db  0x41 ; 'A'
000000000000dac7         db  0x0e ; '.'
000000000000dac8         db  0x38 ; '8'
000000000000dac9         db  0x83 ; '.'
000000000000daca         db  0x07 ; '.'
000000000000dacb         db  0x44 ; 'D'
000000000000dacc         db  0x0e ; '.'
000000000000dacd         db  0x70 ; 'p'
000000000000dace         db  0x02 ; '.'
000000000000dacf         db  0xc6 ; '.'
000000000000dad0         db  0x0a ; '.'
000000000000dad1         db  0x0e ; '.'
000000000000dad2         db  0x38 ; '8'
000000000000dad3         db  0x41 ; 'A'
000000000000dad4         db  0x0e ; '.'
000000000000dad5         db  0x30 ; '0'
000000000000dad6         db  0x41 ; 'A'
000000000000dad7         db  0x0e ; '.'
000000000000dad8         db  0x28 ; '('
000000000000dad9         db  0x42 ; 'B'
000000000000dada         db  0x0e ; '.'
000000000000dadb         db  0x20 ; ' '
000000000000dadc         db  0x42 ; 'B'
000000000000dadd         db  0x0e ; '.'
000000000000dade         db  0x18 ; '.'
000000000000dadf         db  0x42 ; 'B'
000000000000dae0         db  0x0e ; '.'
000000000000dae1         db  0x10 ; '.'
000000000000dae2         db  0x42 ; 'B'
000000000000dae3         db  0x0e ; '.'
000000000000dae4         db  0x08 ; '.'
000000000000dae5         db  0x41 ; 'A'
000000000000dae6         db  0x0b ; '.'
000000000000dae7         db  0x00 ; '.'
000000000000dae8         dd         0x00000048                                  ; Length of the record
000000000000daec         dd         0x0000023c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000daf0         db         0x30, 0x5a, 2 dup (0xff)                    ; begin 0x3520
000000000000daf4         db         0xe4, 3 dup (0x00)                          ; length 0xe4 (end at 0x3604)
000000000000daf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000daf9         db  0x42 ; 'B'
000000000000dafa         db  0x0e ; '.'
000000000000dafb         db  0x10 ; '.'
000000000000dafc         db  0x8f ; '.'
000000000000dafd         db  0x02 ; '.'
000000000000dafe         db  0x42 ; 'B'
000000000000daff         db  0x0e ; '.'
000000000000db00         db  0x18 ; '.'
000000000000db01         db  0x8e ; '.'
000000000000db02         db  0x03 ; '.'
000000000000db03         db  0x42 ; 'B'
000000000000db04         db  0x0e ; '.'
000000000000db05         db  0x20 ; ' '
000000000000db06         db  0x8d ; '.'
000000000000db07         db  0x04 ; '.'
000000000000db08         db  0x42 ; 'B'
000000000000db09         db  0x0e ; '.'
000000000000db0a         db  0x28 ; '('
000000000000db0b         db  0x8c ; '.'
000000000000db0c         db  0x05 ; '.'
000000000000db0d         db  0x41 ; 'A'
000000000000db0e         db  0x0e ; '.'
000000000000db0f         db  0x30 ; '0'
000000000000db10         db  0x86 ; '.'
000000000000db11         db  0x06 ; '.'
000000000000db12         db  0x41 ; 'A'
000000000000db13         db  0x0e ; '.'
000000000000db14         db  0x38 ; '8'
000000000000db15         db  0x83 ; '.'
000000000000db16         db  0x07 ; '.'
000000000000db17         db  0x44 ; 'D'
000000000000db18         db  0x0e ; '.'
000000000000db19         db  0x70 ; 'p'
000000000000db1a         db  0x02 ; '.'
000000000000db1b         db  0xc6 ; '.'
000000000000db1c         db  0x0a ; '.'
000000000000db1d         db  0x0e ; '.'
000000000000db1e         db  0x38 ; '8'
000000000000db1f         db  0x41 ; 'A'
000000000000db20         db  0x0e ; '.'
000000000000db21         db  0x30 ; '0'
000000000000db22         db  0x41 ; 'A'
000000000000db23         db  0x0e ; '.'
000000000000db24         db  0x28 ; '('
000000000000db25         db  0x42 ; 'B'
000000000000db26         db  0x0e ; '.'
000000000000db27         db  0x20 ; ' '
000000000000db28         db  0x42 ; 'B'
000000000000db29         db  0x0e ; '.'
000000000000db2a         db  0x18 ; '.'
000000000000db2b         db  0x42 ; 'B'
000000000000db2c         db  0x0e ; '.'
000000000000db2d         db  0x10 ; '.'
000000000000db2e         db  0x42 ; 'B'
000000000000db2f         db  0x0e ; '.'
000000000000db30         db  0x08 ; '.'
000000000000db31         db  0x41 ; 'A'
000000000000db32         db  0x0b ; '.'
000000000000db33         db  0x00 ; '.'
000000000000db34         dd         0x00000044                                  ; Length of the record
000000000000db38         dd         0x00000288                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000db3c         db         0xd4, 0x5a, 2 dup (0xff)                    ; begin 0x3610
000000000000db40         db         0x81, 3 dup (0x00)                          ; length 0x81 (end at 0x3691)
000000000000db44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db45         db  0x42 ; 'B'
000000000000db46         db  0x0e ; '.'
000000000000db47         db  0x10 ; '.'
000000000000db48         db  0x8f ; '.'
000000000000db49         db  0x02 ; '.'
000000000000db4a         db  0x42 ; 'B'
000000000000db4b         db  0x0e ; '.'
000000000000db4c         db  0x18 ; '.'
000000000000db4d         db  0x8e ; '.'
000000000000db4e         db  0x03 ; '.'
000000000000db4f         db  0x42 ; 'B'
000000000000db50         db  0x0e ; '.'
000000000000db51         db  0x20 ; ' '
000000000000db52         db  0x8d ; '.'
000000000000db53         db  0x04 ; '.'
000000000000db54         db  0x42 ; 'B'
000000000000db55         db  0x0e ; '.'
000000000000db56         db  0x28 ; '('
000000000000db57         db  0x8c ; '.'
000000000000db58         db  0x05 ; '.'
000000000000db59         db  0x41 ; 'A'
000000000000db5a         db  0x0e ; '.'
000000000000db5b         db  0x30 ; '0'
000000000000db5c         db  0x86 ; '.'
000000000000db5d         db  0x06 ; '.'
000000000000db5e         db  0x41 ; 'A'
000000000000db5f         db  0x0e ; '.'
000000000000db60         db  0x38 ; '8'
000000000000db61         db  0x83 ; '.'
000000000000db62         db  0x07 ; '.'
000000000000db63         db  0x44 ; 'D'
000000000000db64         db  0x0e ; '.'
000000000000db65         db  0x50 ; 'P'
000000000000db66         db  0x02 ; '.'
000000000000db67         db  0x68 ; 'h'
000000000000db68         db  0x0e ; '.'
000000000000db69         db  0x38 ; '8'
000000000000db6a         db  0x41 ; 'A'
000000000000db6b         db  0x0e ; '.'
000000000000db6c         db  0x30 ; '0'
000000000000db6d         db  0x41 ; 'A'
000000000000db6e         db  0x0e ; '.'
000000000000db6f         db  0x28 ; '('
000000000000db70         db  0x42 ; 'B'
000000000000db71         db  0x0e ; '.'
000000000000db72         db  0x20 ; ' '
000000000000db73         db  0x42 ; 'B'
000000000000db74         db  0x0e ; '.'
000000000000db75         db  0x18 ; '.'
000000000000db76         db  0x42 ; 'B'
000000000000db77         db  0x0e ; '.'
000000000000db78         db  0x10 ; '.'
000000000000db79         db  0x42 ; 'B'
000000000000db7a         db  0x0e ; '.'
000000000000db7b         db  0x08 ; '.'
000000000000db7c         dd         0x00000044                                  ; Length of the record
000000000000db80         dd         0x000002d0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000db84         db         0x1c, 0x5b, 2 dup (0xff)                    ; begin 0x36a0
000000000000db88         db         0x81, 3 dup (0x00)                          ; length 0x81 (end at 0x3721)
000000000000db8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db8d         db  0x42 ; 'B'
000000000000db8e         db  0x0e ; '.'
000000000000db8f         db  0x10 ; '.'
000000000000db90         db  0x8f ; '.'
000000000000db91         db  0x02 ; '.'
000000000000db92         db  0x42 ; 'B'
000000000000db93         db  0x0e ; '.'
000000000000db94         db  0x18 ; '.'
000000000000db95         db  0x8e ; '.'
000000000000db96         db  0x03 ; '.'
000000000000db97         db  0x42 ; 'B'
000000000000db98         db  0x0e ; '.'
000000000000db99         db  0x20 ; ' '
000000000000db9a         db  0x8d ; '.'
000000000000db9b         db  0x04 ; '.'
000000000000db9c         db  0x42 ; 'B'
000000000000db9d         db  0x0e ; '.'
000000000000db9e         db  0x28 ; '('
000000000000db9f         db  0x8c ; '.'
000000000000dba0         db  0x05 ; '.'
000000000000dba1         db  0x41 ; 'A'
000000000000dba2         db  0x0e ; '.'
000000000000dba3         db  0x30 ; '0'
000000000000dba4         db  0x86 ; '.'
000000000000dba5         db  0x06 ; '.'
000000000000dba6         db  0x41 ; 'A'
000000000000dba7         db  0x0e ; '.'
000000000000dba8         db  0x38 ; '8'
000000000000dba9         db  0x83 ; '.'
000000000000dbaa         db  0x07 ; '.'
000000000000dbab         db  0x44 ; 'D'
000000000000dbac         db  0x0e ; '.'
000000000000dbad         db  0x50 ; 'P'
000000000000dbae         db  0x02 ; '.'
000000000000dbaf         db  0x68 ; 'h'
000000000000dbb0         db  0x0e ; '.'
000000000000dbb1         db  0x38 ; '8'
000000000000dbb2         db  0x41 ; 'A'
000000000000dbb3         db  0x0e ; '.'
000000000000dbb4         db  0x30 ; '0'
000000000000dbb5         db  0x41 ; 'A'
000000000000dbb6         db  0x0e ; '.'
000000000000dbb7         db  0x28 ; '('
000000000000dbb8         db  0x42 ; 'B'
000000000000dbb9         db  0x0e ; '.'
000000000000dbba         db  0x20 ; ' '
000000000000dbbb         db  0x42 ; 'B'
000000000000dbbc         db  0x0e ; '.'
000000000000dbbd         db  0x18 ; '.'
000000000000dbbe         db  0x42 ; 'B'
000000000000dbbf         db  0x0e ; '.'
000000000000dbc0         db  0x10 ; '.'
000000000000dbc1         db  0x42 ; 'B'
000000000000dbc2         db  0x0e ; '.'
000000000000dbc3         db  0x08 ; '.'
000000000000dbc4         dd         0x00000058                                  ; Length of the record
000000000000dbc8         dd         0x00000318                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dbcc         db         0x64, 0x5b, 2 dup (0xff)                    ; begin 0x3730
000000000000dbd0         db         0x14, 0x01, 2 dup (0x00)                    ; length 0x114 (end at 0x3844)
000000000000dbd4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbd5         db  0x42 ; 'B'
000000000000dbd6         db  0x0e ; '.'
000000000000dbd7         db  0x10 ; '.'
000000000000dbd8         db  0x8f ; '.'
000000000000dbd9         db  0x02 ; '.'
000000000000dbda         db  0x42 ; 'B'
000000000000dbdb         db  0x0e ; '.'
000000000000dbdc         db  0x18 ; '.'
000000000000dbdd         db  0x8e ; '.'
000000000000dbde         db  0x03 ; '.'
000000000000dbdf         db  0x42 ; 'B'
000000000000dbe0         db  0x0e ; '.'
000000000000dbe1         db  0x20 ; ' '
000000000000dbe2         db  0x8d ; '.'
000000000000dbe3         db  0x04 ; '.'
000000000000dbe4         db  0x42 ; 'B'
000000000000dbe5         db  0x0e ; '.'
000000000000dbe6         db  0x28 ; '('
000000000000dbe7         db  0x8c ; '.'
000000000000dbe8         db  0x05 ; '.'
000000000000dbe9         db  0x44 ; 'D'
000000000000dbea         db  0x0e ; '.'
000000000000dbeb         db  0x30 ; '0'
000000000000dbec         db  0x86 ; '.'
000000000000dbed         db  0x06 ; '.'
000000000000dbee         db  0x41 ; 'A'
000000000000dbef         db  0x0e ; '.'
000000000000dbf0         db  0x38 ; '8'
000000000000dbf1         db  0x83 ; '.'
000000000000dbf2         db  0x07 ; '.'
000000000000dbf3         db  0x44 ; 'D'
000000000000dbf4         db  0x0e ; '.'
000000000000dbf5         db  0xb0 ; '.'
000000000000dbf6         db  0x01 ; '.'
000000000000dbf7         db  0x02 ; '.'
000000000000dbf8         db  0x4d ; 'M'
000000000000dbf9         db  0x0e ; '.'
000000000000dbfa         db  0xc0 ; '.'
000000000000dbfb         db  0x01 ; '.'
000000000000dbfc         db  0x76 ; 'v'
000000000000dbfd         db  0x0e ; '.'
000000000000dbfe         db  0xb8 ; '.'
000000000000dbff         db  0x01 ; '.'
000000000000dc00         db  0x41 ; 'A'
000000000000dc01         db  0x0e ; '.'
000000000000dc02         db  0xb0 ; '.'
000000000000dc03         db  0x01 ; '.'
000000000000dc04         db  0x02 ; '.'
000000000000dc05         db  0x6f ; 'o'
000000000000dc06         db  0x0a ; '.'
000000000000dc07         db  0x0e ; '.'
000000000000dc08         db  0x38 ; '8'
000000000000dc09         db  0x41 ; 'A'
000000000000dc0a         db  0x0e ; '.'
000000000000dc0b         db  0x30 ; '0'
000000000000dc0c         db  0x41 ; 'A'
000000000000dc0d         db  0x0e ; '.'
000000000000dc0e         db  0x28 ; '('
000000000000dc0f         db  0x42 ; 'B'
000000000000dc10         db  0x0e ; '.'
000000000000dc11         db  0x20 ; ' '
000000000000dc12         db  0x42 ; 'B'
000000000000dc13         db  0x0e ; '.'
000000000000dc14         db  0x18 ; '.'
000000000000dc15         db  0x42 ; 'B'
000000000000dc16         db  0x0e ; '.'
000000000000dc17         db  0x10 ; '.'
000000000000dc18         db  0x42 ; 'B'
000000000000dc19         db  0x0e ; '.'
000000000000dc1a         db  0x08 ; '.'
000000000000dc1b         db  0x41 ; 'A'
000000000000dc1c         db  0x0b ; '.'
000000000000dc1d         db  0x00 ; '.'
000000000000dc1e         db  0x00 ; '.'
000000000000dc1f         db  0x00 ; '.'
000000000000dc20         dd         0x00000048                                  ; Length of the record
000000000000dc24         dd         0x00000374                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dc28         db         0x28, 0x5c, 2 dup (0xff)                    ; begin 0x3850
000000000000dc2c         db         0x14, 0x01, 2 dup (0x00)                    ; length 0x114 (end at 0x3964)
000000000000dc30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc31         db  0x42 ; 'B'
000000000000dc32         db  0x0e ; '.'
000000000000dc33         db  0x10 ; '.'
000000000000dc34         db  0x8f ; '.'
000000000000dc35         db  0x02 ; '.'
000000000000dc36         db  0x42 ; 'B'
000000000000dc37         db  0x0e ; '.'
000000000000dc38         db  0x18 ; '.'
000000000000dc39         db  0x8e ; '.'
000000000000dc3a         db  0x03 ; '.'
000000000000dc3b         db  0x42 ; 'B'
000000000000dc3c         db  0x0e ; '.'
000000000000dc3d         db  0x20 ; ' '
000000000000dc3e         db  0x8d ; '.'
000000000000dc3f         db  0x04 ; '.'
000000000000dc40         db  0x42 ; 'B'
000000000000dc41         db  0x0e ; '.'
000000000000dc42         db  0x28 ; '('
000000000000dc43         db  0x8c ; '.'
000000000000dc44         db  0x05 ; '.'
000000000000dc45         db  0x41 ; 'A'
000000000000dc46         db  0x0e ; '.'
000000000000dc47         db  0x30 ; '0'
000000000000dc48         db  0x86 ; '.'
000000000000dc49         db  0x06 ; '.'
000000000000dc4a         db  0x41 ; 'A'
000000000000dc4b         db  0x0e ; '.'
000000000000dc4c         db  0x38 ; '8'
000000000000dc4d         db  0x83 ; '.'
000000000000dc4e         db  0x07 ; '.'
000000000000dc4f         db  0x47 ; 'G'
000000000000dc50         db  0x0e ; '.'
000000000000dc51         db  0xa0 ; '.'
000000000000dc52         db  0x01 ; '.'
000000000000dc53         db  0x02 ; '.'
000000000000dc54         db  0xf3 ; '.'
000000000000dc55         db  0x0a ; '.'
000000000000dc56         db  0x0e ; '.'
000000000000dc57         db  0x38 ; '8'
000000000000dc58         db  0x41 ; 'A'
000000000000dc59         db  0x0e ; '.'
000000000000dc5a         db  0x30 ; '0'
000000000000dc5b         db  0x41 ; 'A'
000000000000dc5c         db  0x0e ; '.'
000000000000dc5d         db  0x28 ; '('
000000000000dc5e         db  0x42 ; 'B'
000000000000dc5f         db  0x0e ; '.'
000000000000dc60         db  0x20 ; ' '
000000000000dc61         db  0x42 ; 'B'
000000000000dc62         db  0x0e ; '.'
000000000000dc63         db  0x18 ; '.'
000000000000dc64         db  0x42 ; 'B'
000000000000dc65         db  0x0e ; '.'
000000000000dc66         db  0x10 ; '.'
000000000000dc67         db  0x42 ; 'B'
000000000000dc68         db  0x0e ; '.'
000000000000dc69         db  0x08 ; '.'
000000000000dc6a         db  0x41 ; 'A'
000000000000dc6b         db  0x0b ; '.'
000000000000dc6c         dd         0x0000004c                                  ; Length of the record
000000000000dc70         dd         0x000003c0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dc74         db         0xfc, 0x5c, 2 dup (0xff)                    ; begin 0x3970
000000000000dc78         db         0x24, 0x01, 2 dup (0x00)                    ; length 0x124 (end at 0x3a94)
000000000000dc7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc7d         db  0x42 ; 'B'
000000000000dc7e         db  0x0e ; '.'
000000000000dc7f         db  0x10 ; '.'
000000000000dc80         db  0x8f ; '.'
000000000000dc81         db  0x02 ; '.'
000000000000dc82         db  0x42 ; 'B'
000000000000dc83         db  0x0e ; '.'
000000000000dc84         db  0x18 ; '.'
000000000000dc85         db  0x8e ; '.'
000000000000dc86         db  0x03 ; '.'
000000000000dc87         db  0x45 ; 'E'
000000000000dc88         db  0x0e ; '.'
000000000000dc89         db  0x20 ; ' '
000000000000dc8a         db  0x8d ; '.'
000000000000dc8b         db  0x04 ; '.'
000000000000dc8c         db  0x42 ; 'B'
000000000000dc8d         db  0x0e ; '.'
000000000000dc8e         db  0x28 ; '('
000000000000dc8f         db  0x8c ; '.'
000000000000dc90         db  0x05 ; '.'
000000000000dc91         db  0x41 ; 'A'
000000000000dc92         db  0x0e ; '.'
000000000000dc93         db  0x30 ; '0'
000000000000dc94         db  0x86 ; '.'
000000000000dc95         db  0x06 ; '.'
000000000000dc96         db  0x41 ; 'A'
000000000000dc97         db  0x0e ; '.'
000000000000dc98         db  0x38 ; '8'
000000000000dc99         db  0x83 ; '.'
000000000000dc9a         db  0x07 ; '.'
000000000000dc9b         db  0x44 ; 'D'
000000000000dc9c         db  0x0e ; '.'
000000000000dc9d         db  0xa0 ; '.'
000000000000dc9e         db  0x01 ; '.'
000000000000dc9f         db  0x03 ; '.'
000000000000dca0         db  0x03 ; '.'
000000000000dca1         db  0x01 ; '.'
000000000000dca2         db  0x0a ; '.'
000000000000dca3         db  0x0e ; '.'
000000000000dca4         db  0x38 ; '8'
000000000000dca5         db  0x41 ; 'A'
000000000000dca6         db  0x0e ; '.'
000000000000dca7         db  0x30 ; '0'
000000000000dca8         db  0x41 ; 'A'
000000000000dca9         db  0x0e ; '.'
000000000000dcaa         db  0x28 ; '('
000000000000dcab         db  0x42 ; 'B'
000000000000dcac         db  0x0e ; '.'
000000000000dcad         db  0x20 ; ' '
000000000000dcae         db  0x42 ; 'B'
000000000000dcaf         db  0x0e ; '.'
000000000000dcb0         db  0x18 ; '.'
000000000000dcb1         db  0x42 ; 'B'
000000000000dcb2         db  0x0e ; '.'
000000000000dcb3         db  0x10 ; '.'
000000000000dcb4         db  0x42 ; 'B'
000000000000dcb5         db  0x0e ; '.'
000000000000dcb6         db  0x08 ; '.'
000000000000dcb7         db  0x41 ; 'A'
000000000000dcb8         db  0x0b ; '.'
000000000000dcb9         db  0x00 ; '.'
000000000000dcba         db  0x00 ; '.'
000000000000dcbb         db  0x00 ; '.'
000000000000dcbc         dd         0x00000098                                  ; Length of the record
000000000000dcc0         dd         0x00000410                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dcc4         db         0xdc, 0x5d, 2 dup (0xff)                    ; begin 0x3aa0
000000000000dcc8         db         0x24, 0x08, 2 dup (0x00)                    ; length 0x824 (end at 0x42c4)
000000000000dccc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dccd         db  0x42 ; 'B'
000000000000dcce         db  0x0e ; '.'
000000000000dccf         db  0x10 ; '.'
000000000000dcd0         db  0x8f ; '.'
000000000000dcd1         db  0x02 ; '.'
000000000000dcd2         db  0x42 ; 'B'
000000000000dcd3         db  0x0e ; '.'
000000000000dcd4         db  0x18 ; '.'
000000000000dcd5         db  0x8e ; '.'
000000000000dcd6         db  0x03 ; '.'
000000000000dcd7         db  0x42 ; 'B'
000000000000dcd8         db  0x0e ; '.'
000000000000dcd9         db  0x20 ; ' '
000000000000dcda         db  0x8d ; '.'
000000000000dcdb         db  0x04 ; '.'
000000000000dcdc         db  0x42 ; 'B'
000000000000dcdd         db  0x0e ; '.'
000000000000dcde         db  0x28 ; '('
000000000000dcdf         db  0x8c ; '.'
000000000000dce0         db  0x05 ; '.'
000000000000dce1         db  0x41 ; 'A'
000000000000dce2         db  0x0e ; '.'
000000000000dce3         db  0x30 ; '0'
000000000000dce4         db  0x86 ; '.'
000000000000dce5         db  0x06 ; '.'
000000000000dce6         db  0x41 ; 'A'
000000000000dce7         db  0x0e ; '.'
000000000000dce8         db  0x38 ; '8'
000000000000dce9         db  0x83 ; '.'
000000000000dcea         db  0x07 ; '.'
000000000000dceb         db  0x44 ; 'D'
000000000000dcec         db  0x0e ; '.'
000000000000dced         db  0x50 ; 'P'
000000000000dcee         db  0x03 ; '.'
000000000000dcef         db  0x48 ; 'H'
000000000000dcf0         db  0x02 ; '.'
000000000000dcf1         db  0x0a ; '.'
000000000000dcf2         db  0x0e ; '.'
000000000000dcf3         db  0x38 ; '8'
000000000000dcf4         db  0x46 ; 'F'
000000000000dcf5         db  0x0e ; '.'
000000000000dcf6         db  0x30 ; '0'
000000000000dcf7         db  0x41 ; 'A'
000000000000dcf8         db  0x0e ; '.'
000000000000dcf9         db  0x28 ; '('
000000000000dcfa         db  0x42 ; 'B'
000000000000dcfb         db  0x0e ; '.'
000000000000dcfc         db  0x20 ; ' '
000000000000dcfd         db  0x42 ; 'B'
000000000000dcfe         db  0x0e ; '.'
000000000000dcff         db  0x18 ; '.'
000000000000dd00         db  0x42 ; 'B'
000000000000dd01         db  0x0e ; '.'
000000000000dd02         db  0x10 ; '.'
000000000000dd03         db  0x42 ; 'B'
000000000000dd04         db  0x0e ; '.'
000000000000dd05         db  0x08 ; '.'
000000000000dd06         db  0x4b ; 'K'
000000000000dd07         db  0x0b ; '.'
000000000000dd08         db  0x02 ; '.'
000000000000dd09         db  0x63 ; 'c'
000000000000dd0a         db  0x0a ; '.'
000000000000dd0b         db  0x0e ; '.'
000000000000dd0c         db  0x38 ; '8'
000000000000dd0d         db  0x43 ; 'C'
000000000000dd0e         db  0x0e ; '.'
000000000000dd0f         db  0x30 ; '0'
000000000000dd10         db  0x41 ; 'A'
000000000000dd11         db  0x0e ; '.'
000000000000dd12         db  0x28 ; '('
000000000000dd13         db  0x42 ; 'B'
000000000000dd14         db  0x0e ; '.'
000000000000dd15         db  0x20 ; ' '
000000000000dd16         db  0x42 ; 'B'
000000000000dd17         db  0x0e ; '.'
000000000000dd18         db  0x18 ; '.'
000000000000dd19         db  0x42 ; 'B'
000000000000dd1a         db  0x0e ; '.'
000000000000dd1b         db  0x10 ; '.'
000000000000dd1c         db  0x42 ; 'B'
000000000000dd1d         db  0x0e ; '.'
000000000000dd1e         db  0x08 ; '.'
000000000000dd1f         db  0x41 ; 'A'
000000000000dd20         db  0x0b ; '.'
000000000000dd21         db  0x03 ; '.'
000000000000dd22         db  0x83 ; '.'
000000000000dd23         db  0x02 ; '.'
000000000000dd24         db  0x0a ; '.'
000000000000dd25         db  0x0e ; '.'
000000000000dd26         db  0x38 ; '8'
000000000000dd27         db  0x43 ; 'C'
000000000000dd28         db  0x0e ; '.'
000000000000dd29         db  0x30 ; '0'
000000000000dd2a         db  0x41 ; 'A'
000000000000dd2b         db  0x0e ; '.'
000000000000dd2c         db  0x28 ; '('
000000000000dd2d         db  0x42 ; 'B'
000000000000dd2e         db  0x0e ; '.'
000000000000dd2f         db  0x20 ; ' '
000000000000dd30         db  0x42 ; 'B'
000000000000dd31         db  0x0e ; '.'
000000000000dd32         db  0x18 ; '.'
000000000000dd33         db  0x42 ; 'B'
000000000000dd34         db  0x0e ; '.'
000000000000dd35         db  0x10 ; '.'
000000000000dd36         db  0x42 ; 'B'
000000000000dd37         db  0x0e ; '.'
000000000000dd38         db  0x08 ; '.'
000000000000dd39         db  0x41 ; 'A'
000000000000dd3a         db  0x0b ; '.'
000000000000dd3b         db  0x03 ; '.'
000000000000dd3c         db  0xc4 ; '.'
000000000000dd3d         db  0x01 ; '.'
000000000000dd3e         db  0x0a ; '.'
000000000000dd3f         db  0x0e ; '.'
000000000000dd40         db  0x38 ; '8'
000000000000dd41         db  0x43 ; 'C'
000000000000dd42         db  0x0e ; '.'
000000000000dd43         db  0x30 ; '0'
000000000000dd44         db  0x41 ; 'A'
000000000000dd45         db  0x0e ; '.'
000000000000dd46         db  0x28 ; '('
000000000000dd47         db  0x42 ; 'B'
000000000000dd48         db  0x0e ; '.'
000000000000dd49         db  0x20 ; ' '
000000000000dd4a         db  0x42 ; 'B'
000000000000dd4b         db  0x0e ; '.'
000000000000dd4c         db  0x18 ; '.'
000000000000dd4d         db  0x42 ; 'B'
000000000000dd4e         db  0x0e ; '.'
000000000000dd4f         db  0x10 ; '.'
000000000000dd50         db  0x42 ; 'B'
000000000000dd51         db  0x0e ; '.'
000000000000dd52         db  0x08 ; '.'
000000000000dd53         db  0x48 ; 'H'
000000000000dd54         db  0x0b ; '.'
000000000000dd55         db  0x00 ; '.'
000000000000dd56         db  0x00 ; '.'
000000000000dd57         db  0x00 ; '.'
000000000000dd58         dd         0x00000048                                  ; Length of the record
000000000000dd5c         dd         0x000004ac                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dd60         db         0x70, 0x65, 2 dup (0xff)                    ; begin 0x42d0
000000000000dd64         db         0xbe, 0x01, 2 dup (0x00)                    ; length 0x1be (end at 0x448e)
000000000000dd68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd69         db  0x42 ; 'B'
000000000000dd6a         db  0x0e ; '.'
000000000000dd6b         db  0x10 ; '.'
000000000000dd6c         db  0x8f ; '.'
000000000000dd6d         db  0x02 ; '.'
000000000000dd6e         db  0x42 ; 'B'
000000000000dd6f         db  0x0e ; '.'
000000000000dd70         db  0x18 ; '.'
000000000000dd71         db  0x8e ; '.'
000000000000dd72         db  0x03 ; '.'
000000000000dd73         db  0x42 ; 'B'
000000000000dd74         db  0x0e ; '.'
000000000000dd75         db  0x20 ; ' '
000000000000dd76         db  0x8d ; '.'
000000000000dd77         db  0x04 ; '.'
000000000000dd78         db  0x42 ; 'B'
000000000000dd79         db  0x0e ; '.'
000000000000dd7a         db  0x28 ; '('
000000000000dd7b         db  0x8c ; '.'
000000000000dd7c         db  0x05 ; '.'
000000000000dd7d         db  0x41 ; 'A'
000000000000dd7e         db  0x0e ; '.'
000000000000dd7f         db  0x30 ; '0'
000000000000dd80         db  0x86 ; '.'
000000000000dd81         db  0x06 ; '.'
000000000000dd82         db  0x41 ; 'A'
000000000000dd83         db  0x0e ; '.'
000000000000dd84         db  0x38 ; '8'
000000000000dd85         db  0x83 ; '.'
000000000000dd86         db  0x07 ; '.'
000000000000dd87         db  0x44 ; 'D'
000000000000dd88         db  0x0e ; '.'
000000000000dd89         db  0x70 ; 'p'
000000000000dd8a         db  0x02 ; '.'
000000000000dd8b         db  0xbf ; '.'
000000000000dd8c         db  0x0a ; '.'
000000000000dd8d         db  0x0e ; '.'
000000000000dd8e         db  0x38 ; '8'
000000000000dd8f         db  0x41 ; 'A'
000000000000dd90         db  0x0e ; '.'
000000000000dd91         db  0x30 ; '0'
000000000000dd92         db  0x41 ; 'A'
000000000000dd93         db  0x0e ; '.'
000000000000dd94         db  0x28 ; '('
000000000000dd95         db  0x42 ; 'B'
000000000000dd96         db  0x0e ; '.'
000000000000dd97         db  0x20 ; ' '
000000000000dd98         db  0x42 ; 'B'
000000000000dd99         db  0x0e ; '.'
000000000000dd9a         db  0x18 ; '.'
000000000000dd9b         db  0x42 ; 'B'
000000000000dd9c         db  0x0e ; '.'
000000000000dd9d         db  0x10 ; '.'
000000000000dd9e         db  0x42 ; 'B'
000000000000dd9f         db  0x0e ; '.'
000000000000dda0         db  0x08 ; '.'
000000000000dda1         db  0x49 ; 'I'
000000000000dda2         db  0x0b ; '.'
000000000000dda3         db  0x00 ; '.'
000000000000dda4         dd         0x00000028                                  ; Length of the record
000000000000dda8         dd         0x000004f8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ddac         db         0xe4, 0x66, 2 dup (0xff)                    ; begin 0x4490
000000000000ddb0         db         0x4f, 0x01, 2 dup (0x00)                    ; length 0x14f (end at 0x45df)
000000000000ddb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ddb5         db  0x41 ; 'A'
000000000000ddb6         db  0x0e ; '.'
000000000000ddb7         db  0x10 ; '.'
000000000000ddb8         db  0x86 ; '.'
000000000000ddb9         db  0x02 ; '.'
000000000000ddba         db  0x41 ; 'A'
000000000000ddbb         db  0x0e ; '.'
000000000000ddbc         db  0x18 ; '.'
000000000000ddbd         db  0x83 ; '.'
000000000000ddbe         db  0x03 ; '.'
000000000000ddbf         db  0x49 ; 'I'
000000000000ddc0         db  0x0e ; '.'
000000000000ddc1         db  0x20 ; ' '
000000000000ddc2         db  0x02 ; '.'
000000000000ddc3         db  0x7d ; '}'
000000000000ddc4         db  0x0a ; '.'
000000000000ddc5         db  0x0e ; '.'
000000000000ddc6         db  0x18 ; '.'
000000000000ddc7         db  0x43 ; 'C'
000000000000ddc8         db  0x0e ; '.'
000000000000ddc9         db  0x10 ; '.'
000000000000ddca         db  0x41 ; 'A'
000000000000ddcb         db  0x0e ; '.'
000000000000ddcc         db  0x08 ; '.'
000000000000ddcd         db  0x44 ; 'D'
000000000000ddce         db  0x0b ; '.'
000000000000ddcf         db  0x00 ; '.'
000000000000ddd0         dd         0x00000028                                  ; Length of the record
000000000000ddd4         dd         0x00000524                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ddd8         db         0x08, 0x68, 2 dup (0xff)                    ; begin 0x45e0
000000000000dddc         db         0x13, 0x01, 2 dup (0x00)                    ; length 0x113 (end at 0x46f3)
000000000000dde0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dde1         db  0x41 ; 'A'
000000000000dde2         db  0x0e ; '.'
000000000000dde3         db  0x10 ; '.'
000000000000dde4         db  0x86 ; '.'
000000000000dde5         db  0x02 ; '.'
000000000000dde6         db  0x41 ; 'A'
000000000000dde7         db  0x0e ; '.'
000000000000dde8         db  0x18 ; '.'
000000000000dde9         db  0x83 ; '.'
000000000000ddea         db  0x03 ; '.'
000000000000ddeb         db  0x50 ; 'P'
000000000000ddec         db  0x0e ; '.'
000000000000dded         db  0x20 ; ' '
000000000000ddee         db  0x02 ; '.'
000000000000ddef         db  0xa7 ; '.'
000000000000ddf0         db  0x0a ; '.'
000000000000ddf1         db  0x0e ; '.'
000000000000ddf2         db  0x18 ; '.'
000000000000ddf3         db  0x43 ; 'C'
000000000000ddf4         db  0x0e ; '.'
000000000000ddf5         db  0x10 ; '.'
000000000000ddf6         db  0x41 ; 'A'
000000000000ddf7         db  0x0e ; '.'
000000000000ddf8         db  0x08 ; '.'
000000000000ddf9         db  0x43 ; 'C'
000000000000ddfa         db  0x0b ; '.'
000000000000ddfb         db  0x00 ; '.'
000000000000ddfc         dd         0x0000004c                                  ; Length of the record
000000000000de00         dd         0x00000550                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000de04         db         0xfc, 0x68, 2 dup (0xff)                    ; begin 0x4700
000000000000de08         db         0xdf, 0x01, 2 dup (0x00)                    ; length 0x1df (end at 0x48df)
000000000000de0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de0d         db  0x42 ; 'B'
000000000000de0e         db  0x0e ; '.'
000000000000de0f         db  0x10 ; '.'
000000000000de10         db  0x8f ; '.'
000000000000de11         db  0x02 ; '.'
000000000000de12         db  0x42 ; 'B'
000000000000de13         db  0x0e ; '.'
000000000000de14         db  0x18 ; '.'
000000000000de15         db  0x8e ; '.'
000000000000de16         db  0x03 ; '.'
000000000000de17         db  0x42 ; 'B'
000000000000de18         db  0x0e ; '.'
000000000000de19         db  0x20 ; ' '
000000000000de1a         db  0x8d ; '.'
000000000000de1b         db  0x04 ; '.'
000000000000de1c         db  0x42 ; 'B'
000000000000de1d         db  0x0e ; '.'
000000000000de1e         db  0x28 ; '('
000000000000de1f         db  0x8c ; '.'
000000000000de20         db  0x05 ; '.'
000000000000de21         db  0x41 ; 'A'
000000000000de22         db  0x0e ; '.'
000000000000de23         db  0x30 ; '0'
000000000000de24         db  0x86 ; '.'
000000000000de25         db  0x06 ; '.'
000000000000de26         db  0x41 ; 'A'
000000000000de27         db  0x0e ; '.'
000000000000de28         db  0x38 ; '8'
000000000000de29         db  0x83 ; '.'
000000000000de2a         db  0x07 ; '.'
000000000000de2b         db  0x47 ; 'G'
000000000000de2c         db  0x0e ; '.'
000000000000de2d         db  0xe0 ; '.'
000000000000de2e         db  0x41 ; 'A'
000000000000de2f         db  0x03 ; '.'
000000000000de30         db  0x8c ; '.'
000000000000de31         db  0x01 ; '.'
000000000000de32         db  0x0a ; '.'
000000000000de33         db  0x0e ; '.'
000000000000de34         db  0x38 ; '8'
000000000000de35         db  0x41 ; 'A'
000000000000de36         db  0x0e ; '.'
000000000000de37         db  0x30 ; '0'
000000000000de38         db  0x41 ; 'A'
000000000000de39         db  0x0e ; '.'
000000000000de3a         db  0x28 ; '('
000000000000de3b         db  0x42 ; 'B'
000000000000de3c         db  0x0e ; '.'
000000000000de3d         db  0x20 ; ' '
000000000000de3e         db  0x42 ; 'B'
000000000000de3f         db  0x0e ; '.'
000000000000de40         db  0x18 ; '.'
000000000000de41         db  0x42 ; 'B'
000000000000de42         db  0x0e ; '.'
000000000000de43         db  0x10 ; '.'
000000000000de44         db  0x42 ; 'B'
000000000000de45         db  0x0e ; '.'
000000000000de46         db  0x08 ; '.'
000000000000de47         db  0x41 ; 'A'
000000000000de48         db  0x0b ; '.'
000000000000de49         db  0x00 ; '.'
000000000000de4a         db  0x00 ; '.'
000000000000de4b         db  0x00 ; '.'
000000000000de4c         dd         0x00000028                                  ; Length of the record
000000000000de50         dd         0x000005a0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000de54         db         0x8c, 0x6a, 2 dup (0xff)                    ; begin 0x48e0
000000000000de58         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x4938)
000000000000de5c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de5d         db  0x42 ; 'B'
000000000000de5e         db  0x0e ; '.'
000000000000de5f         db  0x10 ; '.'
000000000000de60         db  0x8c ; '.'
000000000000de61         db  0x02 ; '.'
000000000000de62         db  0x44 ; 'D'
000000000000de63         db  0x0e ; '.'
000000000000de64         db  0x18 ; '.'
000000000000de65         db  0x86 ; '.'
000000000000de66         db  0x03 ; '.'
000000000000de67         db  0x41 ; 'A'
000000000000de68         db  0x0e ; '.'
000000000000de69         db  0x20 ; ' '
000000000000de6a         db  0x83 ; '.'
000000000000de6b         db  0x04 ; '.'
000000000000de6c         db  0x02 ; '.'
000000000000de6d         db  0x4d ; 'M'
000000000000de6e         db  0x0e ; '.'
000000000000de6f         db  0x18 ; '.'
000000000000de70         db  0x41 ; 'A'
000000000000de71         db  0x0e ; '.'
000000000000de72         db  0x10 ; '.'
000000000000de73         db  0x42 ; 'B'
000000000000de74         db  0x0e ; '.'
000000000000de75         db  0x08 ; '.'
000000000000de76         db  0x00 ; '.'
000000000000de77         db  0x00 ; '.'
000000000000de78         dd         0x00000048                                  ; Length of the record
000000000000de7c         dd         0x000005cc                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000de80         db         0xc0, 0x6a, 2 dup (0xff)                    ; begin 0x4940
000000000000de84         db         0xa7, 0x02, 2 dup (0x00)                    ; length 0x2a7 (end at 0x4be7)
000000000000de88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de89         db  0x42 ; 'B'
000000000000de8a         db  0x0e ; '.'
000000000000de8b         db  0x10 ; '.'
000000000000de8c         db  0x8f ; '.'
000000000000de8d         db  0x02 ; '.'
000000000000de8e         db  0x42 ; 'B'
000000000000de8f         db  0x0e ; '.'
000000000000de90         db  0x18 ; '.'
000000000000de91         db  0x8e ; '.'
000000000000de92         db  0x03 ; '.'
000000000000de93         db  0x45 ; 'E'
000000000000de94         db  0x0e ; '.'
000000000000de95         db  0x20 ; ' '
000000000000de96         db  0x8d ; '.'
000000000000de97         db  0x04 ; '.'
000000000000de98         db  0x42 ; 'B'
000000000000de99         db  0x0e ; '.'
000000000000de9a         db  0x28 ; '('
000000000000de9b         db  0x8c ; '.'
000000000000de9c         db  0x05 ; '.'
000000000000de9d         db  0x41 ; 'A'
000000000000de9e         db  0x0e ; '.'
000000000000de9f         db  0x30 ; '0'
000000000000dea0         db  0x86 ; '.'
000000000000dea1         db  0x06 ; '.'
000000000000dea2         db  0x41 ; 'A'
000000000000dea3         db  0x0e ; '.'
000000000000dea4         db  0x38 ; '8'
000000000000dea5         db  0x83 ; '.'
000000000000dea6         db  0x07 ; '.'
000000000000dea7         db  0x44 ; 'D'
000000000000dea8         db  0x0e ; '.'
000000000000dea9         db  0x60 ; '`'
000000000000deaa         db  0x03 ; '.'
000000000000deab         db  0x39 ; '9'
000000000000deac         db  0x02 ; '.'
000000000000dead         db  0x0a ; '.'
000000000000deae         db  0x0e ; '.'
000000000000deaf         db  0x38 ; '8'
000000000000deb0         db  0x41 ; 'A'
000000000000deb1         db  0x0e ; '.'
000000000000deb2         db  0x30 ; '0'
000000000000deb3         db  0x41 ; 'A'
000000000000deb4         db  0x0e ; '.'
000000000000deb5         db  0x28 ; '('
000000000000deb6         db  0x42 ; 'B'
000000000000deb7         db  0x0e ; '.'
000000000000deb8         db  0x20 ; ' '
000000000000deb9         db  0x42 ; 'B'
000000000000deba         db  0x0e ; '.'
000000000000debb         db  0x18 ; '.'
000000000000debc         db  0x42 ; 'B'
000000000000debd         db  0x0e ; '.'
000000000000debe         db  0x10 ; '.'
000000000000debf         db  0x42 ; 'B'
000000000000dec0         db  0x0e ; '.'
000000000000dec1         db  0x08 ; '.'
000000000000dec2         db  0x44 ; 'D'
000000000000dec3         db  0x0b ; '.'
000000000000dec4         dd         0x00000034                                  ; Length of the record
000000000000dec8         dd         0x00000618                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000decc         db         0x24, 0x6d, 2 dup (0xff)                    ; begin 0x4bf0
000000000000ded0         db         0x7c, 3 dup (0x00)                          ; length 0x7c (end at 0x4c6c)
000000000000ded4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ded5         db  0x41 ; 'A'
000000000000ded6         db  0x0e ; '.'
000000000000ded7         db  0x10 ; '.'
000000000000ded8         db  0x86 ; '.'
000000000000ded9         db  0x02 ; '.'
000000000000deda         db  0x41 ; 'A'
000000000000dedb         db  0x0e ; '.'
000000000000dedc         db  0x18 ; '.'
000000000000dedd         db  0x83 ; '.'
000000000000dede         db  0x03 ; '.'
000000000000dedf         db  0x49 ; 'I'
000000000000dee0         db  0x0e ; '.'
000000000000dee1         db  0x20 ; ' '
000000000000dee2         db  0x02 ; '.'
000000000000dee3         db  0x4c ; 'L'
000000000000dee4         db  0x0a ; '.'
000000000000dee5         db  0x0e ; '.'
000000000000dee6         db  0x18 ; '.'
000000000000dee7         db  0x41 ; 'A'
000000000000dee8         db  0x0e ; '.'
000000000000dee9         db  0x10 ; '.'
000000000000deea         db  0x41 ; 'A'
000000000000deeb         db  0x0e ; '.'
000000000000deec         db  0x08 ; '.'
000000000000deed         db  0x47 ; 'G'
000000000000deee         db  0x0b ; '.'
000000000000deef         db  0x44 ; 'D'
000000000000def0         db  0x0a ; '.'
000000000000def1         db  0x0e ; '.'
000000000000def2         db  0x18 ; '.'
000000000000def3         db  0x44 ; 'D'
000000000000def4         db  0x0e ; '.'
000000000000def5         db  0x10 ; '.'
000000000000def6         db  0x41 ; 'A'
000000000000def7         db  0x0e ; '.'
000000000000def8         db  0x08 ; '.'
000000000000def9         db  0x47 ; 'G'
000000000000defa         db  0x0b ; '.'
000000000000defb         db  0x00 ; '.'
000000000000defc         dd         0x00000024                                  ; Length of the record
000000000000df00         dd         0x00000650                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000df04         db         0x6c, 0x6d, 2 dup (0xff)                    ; begin 0x4c70
000000000000df08         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x4c9e)
000000000000df0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df0d         db  0x41 ; 'A'
000000000000df0e         db  0x0e ; '.'
000000000000df0f         db  0x10 ; '.'
000000000000df10         db  0x86 ; '.'
000000000000df11         db  0x02 ; '.'
000000000000df12         db  0x41 ; 'A'
000000000000df13         db  0x0e ; '.'
000000000000df14         db  0x18 ; '.'
000000000000df15         db  0x83 ; '.'
000000000000df16         db  0x03 ; '.'
000000000000df17         db  0x4e ; 'N'
000000000000df18         db  0x0e ; '.'
000000000000df19         db  0x20 ; ' '
000000000000df1a         db  0x50 ; 'P'
000000000000df1b         db  0x0e ; '.'
000000000000df1c         db  0x18 ; '.'
000000000000df1d         db  0x48 ; 'H'
000000000000df1e         db  0x0e ; '.'
000000000000df1f         db  0x10 ; '.'
000000000000df20         db  0x41 ; 'A'
000000000000df21         db  0x0e ; '.'
000000000000df22         db  0x08 ; '.'
000000000000df23         db  0x00 ; '.'
000000000000df24         dd         0x0000003c                                  ; Length of the record
000000000000df28         dd         0x00000678                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000df2c         db         0x74, 0x6d, 2 dup (0xff)                    ; begin 0x4ca0
000000000000df30         db         0xc6, 3 dup (0x00)                          ; length 0xc6 (end at 0x4d66)
000000000000df34         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df35         db  0x45 ; 'E'
000000000000df36         db  0x0e ; '.'
000000000000df37         db  0x10 ; '.'
000000000000df38         db  0x8e ; '.'
000000000000df39         db  0x02 ; '.'
000000000000df3a         db  0x42 ; 'B'
000000000000df3b         db  0x0e ; '.'
000000000000df3c         db  0x18 ; '.'
000000000000df3d         db  0x8d ; '.'
000000000000df3e         db  0x03 ; '.'
000000000000df3f         db  0x42 ; 'B'
000000000000df40         db  0x0e ; '.'
000000000000df41         db  0x20 ; ' '
000000000000df42         db  0x8c ; '.'
000000000000df43         db  0x04 ; '.'
000000000000df44         db  0x41 ; 'A'
000000000000df45         db  0x0e ; '.'
000000000000df46         db  0x28 ; '('
000000000000df47         db  0x86 ; '.'
000000000000df48         db  0x05 ; '.'
000000000000df49         db  0x41 ; 'A'
000000000000df4a         db  0x0e ; '.'
000000000000df4b         db  0x30 ; '0'
000000000000df4c         db  0x83 ; '.'
000000000000df4d         db  0x06 ; '.'
000000000000df4e         db  0x02 ; '.'
000000000000df4f         db  0x85 ; '.'
000000000000df50         db  0x0a ; '.'
000000000000df51         db  0x0e ; '.'
000000000000df52         db  0x28 ; '('
000000000000df53         db  0x43 ; 'C'
000000000000df54         db  0x0e ; '.'
000000000000df55         db  0x20 ; ' '
000000000000df56         db  0x42 ; 'B'
000000000000df57         db  0x0e ; '.'
000000000000df58         db  0x18 ; '.'
000000000000df59         db  0x42 ; 'B'
000000000000df5a         db  0x0e ; '.'
000000000000df5b         db  0x10 ; '.'
000000000000df5c         db  0x42 ; 'B'
000000000000df5d         db  0x0e ; '.'
000000000000df5e         db  0x08 ; '.'
000000000000df5f         db  0x47 ; 'G'
000000000000df60         db  0x0b ; '.'
000000000000df61         db  0x00 ; '.'
000000000000df62         db  0x00 ; '.'
000000000000df63         db  0x00 ; '.'
000000000000df64         dd         0x00000028                                  ; Length of the record
000000000000df68         dd         0x000006b8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000df6c         db         0x04, 0x6e, 2 dup (0xff)                    ; begin 0x4d70
000000000000df70         db         0x02, 0x05, 2 dup (0x00)                    ; length 0x502 (end at 0x5272)
000000000000df74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df75         db  0x42 ; 'B'
000000000000df76         db  0x0e ; '.'
000000000000df77         db  0x10 ; '.'
000000000000df78         db  0x8d ; '.'
000000000000df79         db  0x02 ; '.'
000000000000df7a         db  0x42 ; 'B'
000000000000df7b         db  0x0e ; '.'
000000000000df7c         db  0x18 ; '.'
000000000000df7d         db  0x8c ; '.'
000000000000df7e         db  0x03 ; '.'
000000000000df7f         db  0x46 ; 'F'
000000000000df80         db  0x0e ; '.'
000000000000df81         db  0x20 ; ' '
000000000000df82         db  0x86 ; '.'
000000000000df83         db  0x04 ; '.'
000000000000df84         db  0x41 ; 'A'
000000000000df85         db  0x0e ; '.'
000000000000df86         db  0x28 ; '('
000000000000df87         db  0x83 ; '.'
000000000000df88         db  0x05 ; '.'
000000000000df89         db  0x49 ; 'I'
000000000000df8a         db  0x0e ; '.'
000000000000df8b         db  0xb0 ; '.'
000000000000df8c         db  0x01 ; '.'
000000000000df8d         db  0x00 ; '.'
000000000000df8e         db  0x00 ; '.'
000000000000df8f         db  0x00 ; '.'
000000000000df90         dd         0x0000004c                                  ; Length of the record
000000000000df94         dd         0x000006e4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000df98         db         0xd8, 0x3b, 2 dup (0xff)                    ; begin 0x1b70
000000000000df9c         db         0xf2, 0x11, 2 dup (0x00)                    ; length 0x11f2 (end at 0x2d62)
000000000000dfa0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfa1         db  0x42 ; 'B'
000000000000dfa2         db  0x0e ; '.'
000000000000dfa3         db  0x10 ; '.'
000000000000dfa4         db  0x8f ; '.'
000000000000dfa5         db  0x02 ; '.'
000000000000dfa6         db  0x42 ; 'B'
000000000000dfa7         db  0x0e ; '.'
000000000000dfa8         db  0x18 ; '.'
000000000000dfa9         db  0x8e ; '.'
000000000000dfaa         db  0x03 ; '.'
000000000000dfab         db  0x45 ; 'E'
000000000000dfac         db  0x0e ; '.'
000000000000dfad         db  0x20 ; ' '
000000000000dfae         db  0x8d ; '.'
000000000000dfaf         db  0x04 ; '.'
000000000000dfb0         db  0x42 ; 'B'
000000000000dfb1         db  0x0e ; '.'
000000000000dfb2         db  0x28 ; '('
000000000000dfb3         db  0x8c ; '.'
000000000000dfb4         db  0x05 ; '.'
000000000000dfb5         db  0x44 ; 'D'
000000000000dfb6         db  0x0e ; '.'
000000000000dfb7         db  0x30 ; '0'
000000000000dfb8         db  0x86 ; '.'
000000000000dfb9         db  0x06 ; '.'
000000000000dfba         db  0x41 ; 'A'
000000000000dfbb         db  0x0e ; '.'
000000000000dfbc         db  0x38 ; '8'
000000000000dfbd         db  0x83 ; '.'
000000000000dfbe         db  0x07 ; '.'
000000000000dfbf         db  0x44 ; 'D'
000000000000dfc0         db  0x0e ; '.'
000000000000dfc1         db  0x90 ; '.'
000000000000dfc2         db  0x01 ; '.'
000000000000dfc3         db  0x03 ; '.'
000000000000dfc4         db  0x6f ; 'o'
000000000000dfc5         db  0x07 ; '.'
000000000000dfc6         db  0x0a ; '.'
000000000000dfc7         db  0x0e ; '.'
000000000000dfc8         db  0x38 ; '8'
000000000000dfc9         db  0x41 ; 'A'
000000000000dfca         db  0x0e ; '.'
000000000000dfcb         db  0x30 ; '0'
000000000000dfcc         db  0x41 ; 'A'
000000000000dfcd         db  0x0e ; '.'
000000000000dfce         db  0x28 ; '('
000000000000dfcf         db  0x42 ; 'B'
000000000000dfd0         db  0x0e ; '.'
000000000000dfd1         db  0x20 ; ' '
000000000000dfd2         db  0x42 ; 'B'
000000000000dfd3         db  0x0e ; '.'
000000000000dfd4         db  0x18 ; '.'
000000000000dfd5         db  0x42 ; 'B'
000000000000dfd6         db  0x0e ; '.'
000000000000dfd7         db  0x10 ; '.'
000000000000dfd8         db  0x42 ; 'B'
000000000000dfd9         db  0x0e ; '.'
000000000000dfda         db  0x08 ; '.'
000000000000dfdb         db  0x41 ; 'A'
000000000000dfdc         db  0x0b ; '.'
000000000000dfdd         db  0x00 ; '.'
000000000000dfde         db  0x00 ; '.'
000000000000dfdf         db  0x00 ; '.'
000000000000dfe0         dd         0x00000010                                  ; Length of the record
000000000000dfe4         dd         0x00000734                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dfe8         db         0x98, 0x72, 2 dup (0xff)                    ; begin 0x5280
000000000000dfec         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x528a)
000000000000dff0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dff1         align      4
000000000000dff4         dd         0x00000048                                  ; Length of the record
000000000000dff8         dd         0x00000748                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000dffc         db         0x94, 0x72, 2 dup (0xff)                    ; begin 0x5290
000000000000e000         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x53a6)
000000000000e004         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e005         db  0x42 ; 'B'
000000000000e006         db  0x0e ; '.'
000000000000e007         db  0x10 ; '.'
000000000000e008         db  0x8f ; '.'
000000000000e009         db  0x02 ; '.'
000000000000e00a         db  0x42 ; 'B'
000000000000e00b         db  0x0e ; '.'
000000000000e00c         db  0x18 ; '.'
000000000000e00d         db  0x8e ; '.'
000000000000e00e         db  0x03 ; '.'
000000000000e00f         db  0x45 ; 'E'
000000000000e010         db  0x0e ; '.'
000000000000e011         db  0x20 ; ' '
000000000000e012         db  0x8d ; '.'
000000000000e013         db  0x04 ; '.'
000000000000e014         db  0x42 ; 'B'
000000000000e015         db  0x0e ; '.'
000000000000e016         db  0x28 ; '('
000000000000e017         db  0x8c ; '.'
000000000000e018         db  0x05 ; '.'
000000000000e019         db  0x44 ; 'D'
000000000000e01a         db  0x0e ; '.'
000000000000e01b         db  0x30 ; '0'
000000000000e01c         db  0x86 ; '.'
000000000000e01d         db  0x06 ; '.'
000000000000e01e         db  0x41 ; 'A'
000000000000e01f         db  0x0e ; '.'
000000000000e020         db  0x38 ; '8'
000000000000e021         db  0x83 ; '.'
000000000000e022         db  0x07 ; '.'
000000000000e023         db  0x47 ; 'G'
000000000000e024         db  0x0e ; '.'
000000000000e025         db  0x60 ; '`'
000000000000e026         db  0x02 ; '.'
000000000000e027         db  0xde ; '.'
000000000000e028         db  0x0a ; '.'
000000000000e029         db  0x0e ; '.'
000000000000e02a         db  0x38 ; '8'
000000000000e02b         db  0x41 ; 'A'
000000000000e02c         db  0x0e ; '.'
000000000000e02d         db  0x30 ; '0'
000000000000e02e         db  0x41 ; 'A'
000000000000e02f         db  0x0e ; '.'
000000000000e030         db  0x28 ; '('
000000000000e031         db  0x42 ; 'B'
000000000000e032         db  0x0e ; '.'
000000000000e033         db  0x20 ; ' '
000000000000e034         db  0x42 ; 'B'
000000000000e035         db  0x0e ; '.'
000000000000e036         db  0x18 ; '.'
000000000000e037         db  0x42 ; 'B'
000000000000e038         db  0x0e ; '.'
000000000000e039         db  0x10 ; '.'
000000000000e03a         db  0x42 ; 'B'
000000000000e03b         db  0x0e ; '.'
000000000000e03c         db  0x08 ; '.'
000000000000e03d         db  0x41 ; 'A'
000000000000e03e         db  0x0b ; '.'
000000000000e03f         db  0x00 ; '.'
000000000000e040         dd         0x00000028                                  ; Length of the record
000000000000e044         dd         0x00000794                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e048         db         0x68, 0x73, 2 dup (0xff)                    ; begin 0x53b0
000000000000e04c         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x5423)
000000000000e050         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e051         db  0x46 ; 'F'
000000000000e052         db  0x0e ; '.'
000000000000e053         db  0x10 ; '.'
000000000000e054         db  0x8c ; '.'
000000000000e055         db  0x02 ; '.'
000000000000e056         db  0x46 ; 'F'
000000000000e057         db  0x0e ; '.'
000000000000e058         db  0x18 ; '.'
000000000000e059         db  0x86 ; '.'
000000000000e05a         db  0x03 ; '.'
000000000000e05b         db  0x44 ; 'D'
000000000000e05c         db  0x0e ; '.'
000000000000e05d         db  0x20 ; ' '
000000000000e05e         db  0x83 ; '.'
000000000000e05f         db  0x04 ; '.'
000000000000e060         db  0x7f ; '.'
000000000000e061         db  0x0a ; '.'
000000000000e062         db  0x0e ; '.'
000000000000e063         db  0x18 ; '.'
000000000000e064         db  0x41 ; 'A'
000000000000e065         db  0x0e ; '.'
000000000000e066         db  0x10 ; '.'
000000000000e067         db  0x42 ; 'B'
000000000000e068         db  0x0e ; '.'
000000000000e069         db  0x08 ; '.'
000000000000e06a         db  0x4e ; 'N'
000000000000e06b         db  0x0b ; '.'
000000000000e06c         dd         0x0000005c                                  ; Length of the record
000000000000e070         dd         0x000007c0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e074         db         0xbc, 0x73, 2 dup (0xff)                    ; begin 0x5430
000000000000e078         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x5550)
000000000000e07c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e07d         db  0x42 ; 'B'
000000000000e07e         db  0x0e ; '.'
000000000000e07f         db  0x10 ; '.'
000000000000e080         db  0x8f ; '.'
000000000000e081         db  0x02 ; '.'
000000000000e082         db  0x42 ; 'B'
000000000000e083         db  0x0e ; '.'
000000000000e084         db  0x18 ; '.'
000000000000e085         db  0x8e ; '.'
000000000000e086         db  0x03 ; '.'
000000000000e087         db  0x45 ; 'E'
000000000000e088         db  0x0e ; '.'
000000000000e089         db  0x20 ; ' '
000000000000e08a         db  0x8d ; '.'
000000000000e08b         db  0x04 ; '.'
000000000000e08c         db  0x42 ; 'B'
000000000000e08d         db  0x0e ; '.'
000000000000e08e         db  0x28 ; '('
000000000000e08f         db  0x8c ; '.'
000000000000e090         db  0x05 ; '.'
000000000000e091         db  0x43 ; 'C'
000000000000e092         db  0x0e ; '.'
000000000000e093         db  0x30 ; '0'
000000000000e094         db  0x86 ; '.'
000000000000e095         db  0x06 ; '.'
000000000000e096         db  0x41 ; 'A'
000000000000e097         db  0x0e ; '.'
000000000000e098         db  0x38 ; '8'
000000000000e099         db  0x83 ; '.'
000000000000e09a         db  0x07 ; '.'
000000000000e09b         db  0x56 ; 'V'
000000000000e09c         db  0x0e ; '.'
000000000000e09d         db  0x40 ; '@'
000000000000e09e         db  0x02 ; '.'
000000000000e09f         db  0xd3 ; '.'
000000000000e0a0         db  0x0a ; '.'
000000000000e0a1         db  0x0e ; '.'
000000000000e0a2         db  0x38 ; '8'
000000000000e0a3         db  0x41 ; 'A'
000000000000e0a4         db  0x0e ; '.'
000000000000e0a5         db  0x30 ; '0'
000000000000e0a6         db  0x41 ; 'A'
000000000000e0a7         db  0x0e ; '.'
000000000000e0a8         db  0x28 ; '('
000000000000e0a9         db  0x42 ; 'B'
000000000000e0aa         db  0x0e ; '.'
000000000000e0ab         db  0x20 ; ' '
000000000000e0ac         db  0x42 ; 'B'
000000000000e0ad         db  0x0e ; '.'
000000000000e0ae         db  0x18 ; '.'
000000000000e0af         db  0x42 ; 'B'
000000000000e0b0         db  0x0e ; '.'
000000000000e0b1         db  0x10 ; '.'
000000000000e0b2         db  0x42 ; 'B'
000000000000e0b3         db  0x0e ; '.'
000000000000e0b4         db  0x08 ; '.'
000000000000e0b5         db  0x46 ; 'F'
000000000000e0b6         db  0x0b ; '.'
000000000000e0b7         db  0x44 ; 'D'
000000000000e0b8         db  0x0e ; '.'
000000000000e0b9         db  0x38 ; '8'
000000000000e0ba         db  0x46 ; 'F'
000000000000e0bb         db  0x0e ; '.'
000000000000e0bc         db  0x30 ; '0'
000000000000e0bd         db  0x41 ; 'A'
000000000000e0be         db  0x0e ; '.'
000000000000e0bf         db  0x28 ; '('
000000000000e0c0         db  0x42 ; 'B'
000000000000e0c1         db  0x0e ; '.'
000000000000e0c2         db  0x20 ; ' '
000000000000e0c3         db  0x42 ; 'B'
000000000000e0c4         db  0x0e ; '.'
000000000000e0c5         db  0x18 ; '.'
000000000000e0c6         db  0x42 ; 'B'
000000000000e0c7         db  0x0e ; '.'
000000000000e0c8         db  0x10 ; '.'
000000000000e0c9         db  0x42 ; 'B'
000000000000e0ca         db  0x0e ; '.'
000000000000e0cb         db  0x08 ; '.'
000000000000e0cc         dd         0x00000048                                  ; Length of the record
000000000000e0d0         dd         0x00000820                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e0d4         db         0x7c, 0x74, 2 dup (0xff)                    ; begin 0x5550
000000000000e0d8         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x55bd)
000000000000e0dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0dd         db  0x42 ; 'B'
000000000000e0de         db  0x0e ; '.'
000000000000e0df         db  0x10 ; '.'
000000000000e0e0         db  0x8f ; '.'
000000000000e0e1         db  0x02 ; '.'
000000000000e0e2         db  0x42 ; 'B'
000000000000e0e3         db  0x0e ; '.'
000000000000e0e4         db  0x18 ; '.'
000000000000e0e5         db  0x8e ; '.'
000000000000e0e6         db  0x03 ; '.'
000000000000e0e7         db  0x45 ; 'E'
000000000000e0e8         db  0x0e ; '.'
000000000000e0e9         db  0x20 ; ' '
000000000000e0ea         db  0x8d ; '.'
000000000000e0eb         db  0x04 ; '.'
000000000000e0ec         db  0x42 ; 'B'
000000000000e0ed         db  0x0e ; '.'
000000000000e0ee         db  0x28 ; '('
000000000000e0ef         db  0x8c ; '.'
000000000000e0f0         db  0x05 ; '.'
000000000000e0f1         db  0x44 ; 'D'
000000000000e0f2         db  0x0e ; '.'
000000000000e0f3         db  0x30 ; '0'
000000000000e0f4         db  0x86 ; '.'
000000000000e0f5         db  0x06 ; '.'
000000000000e0f6         db  0x41 ; 'A'
000000000000e0f7         db  0x0e ; '.'
000000000000e0f8         db  0x38 ; '8'
000000000000e0f9         db  0x83 ; '.'
000000000000e0fa         db  0x07 ; '.'
000000000000e0fb         db  0x50 ; 'P'
000000000000e0fc         db  0x0e ; '.'
000000000000e0fd         db  0x40 ; '@'
000000000000e0fe         db  0x5a ; 'Z'
000000000000e0ff         db  0x0a ; '.'
000000000000e100         db  0x0e ; '.'
000000000000e101         db  0x38 ; '8'
000000000000e102         db  0x41 ; 'A'
000000000000e103         db  0x0e ; '.'
000000000000e104         db  0x30 ; '0'
000000000000e105         db  0x41 ; 'A'
000000000000e106         db  0x0e ; '.'
000000000000e107         db  0x28 ; '('
000000000000e108         db  0x42 ; 'B'
000000000000e109         db  0x0e ; '.'
000000000000e10a         db  0x20 ; ' '
000000000000e10b         db  0x42 ; 'B'
000000000000e10c         db  0x0e ; '.'
000000000000e10d         db  0x18 ; '.'
000000000000e10e         db  0x42 ; 'B'
000000000000e10f         db  0x0e ; '.'
000000000000e110         db  0x10 ; '.'
000000000000e111         db  0x42 ; 'B'
000000000000e112         db  0x0e ; '.'
000000000000e113         db  0x08 ; '.'
000000000000e114         db  0x41 ; 'A'
000000000000e115         db  0x0b ; '.'
000000000000e116         db  0x00 ; '.'
000000000000e117         db  0x00 ; '.'
000000000000e118         dd         0x0000003c                                  ; Length of the record
000000000000e11c         dd         0x0000086c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e120         db         0xa0, 0x74, 2 dup (0xff)                    ; begin 0x55c0
000000000000e124         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x560d)
000000000000e128         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e129         db  0x42 ; 'B'
000000000000e12a         db  0x0e ; '.'
000000000000e12b         db  0x10 ; '.'
000000000000e12c         db  0x8e ; '.'
000000000000e12d         db  0x02 ; '.'
000000000000e12e         db  0x42 ; 'B'
000000000000e12f         db  0x0e ; '.'
000000000000e130         db  0x18 ; '.'
000000000000e131         db  0x8d ; '.'
000000000000e132         db  0x03 ; '.'
000000000000e133         db  0x42 ; 'B'
000000000000e134         db  0x0e ; '.'
000000000000e135         db  0x20 ; ' '
000000000000e136         db  0x8c ; '.'
000000000000e137         db  0x04 ; '.'
000000000000e138         db  0x41 ; 'A'
000000000000e139         db  0x0e ; '.'
000000000000e13a         db  0x28 ; '('
000000000000e13b         db  0x86 ; '.'
000000000000e13c         db  0x05 ; '.'
000000000000e13d         db  0x41 ; 'A'
000000000000e13e         db  0x0e ; '.'
000000000000e13f         db  0x30 ; '0'
000000000000e140         db  0x83 ; '.'
000000000000e141         db  0x06 ; '.'
000000000000e142         db  0x7a ; 'z'
000000000000e143         db  0x0e ; '.'
000000000000e144         db  0x28 ; '('
000000000000e145         db  0x44 ; 'D'
000000000000e146         db  0x0e ; '.'
000000000000e147         db  0x20 ; ' '
000000000000e148         db  0x42 ; 'B'
000000000000e149         db  0x0e ; '.'
000000000000e14a         db  0x18 ; '.'
000000000000e14b         db  0x42 ; 'B'
000000000000e14c         db  0x0e ; '.'
000000000000e14d         db  0x10 ; '.'
000000000000e14e         db  0x42 ; 'B'
000000000000e14f         db  0x0e ; '.'
000000000000e150         db  0x08 ; '.'
000000000000e151         db  0x00 ; '.'
000000000000e152         db  0x00 ; '.'
000000000000e153         db  0x00 ; '.'
000000000000e154         db  0x00 ; '.'
000000000000e155         db  0x00 ; '.'
000000000000e156         db  0x00 ; '.'
000000000000e157         db  0x00 ; '.'
000000000000e158         dd         0x00000010                                  ; Length of the record
000000000000e15c         dd         0x000008ac                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e160         db         0xb0, 0x74, 2 dup (0xff)                    ; begin 0x5610
000000000000e164         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5618)
000000000000e168         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e169         align      4
000000000000e16c         dd         0x00000010                                  ; Length of the record
000000000000e170         dd         0x000008c0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e174         db         0xac, 0x74, 2 dup (0xff)                    ; begin 0x5620
000000000000e178         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5628)
000000000000e17c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e17d         align      128
000000000000e180         dd         0x0000002c                                  ; Length of the record
000000000000e184         dd         0x000008d4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e188         db         0xa8, 0x74, 2 dup (0xff)                    ; begin 0x5630
000000000000e18c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x56d4)
000000000000e190         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e191         db  0x41 ; 'A'
000000000000e192         db  0x0e ; '.'
000000000000e193         db  0x10 ; '.'
000000000000e194         db  0x86 ; '.'
000000000000e195         db  0x02 ; '.'
000000000000e196         db  0x41 ; 'A'
000000000000e197         db  0x0e ; '.'
000000000000e198         db  0x18 ; '.'
000000000000e199         db  0x83 ; '.'
000000000000e19a         db  0x03 ; '.'
000000000000e19b         db  0x44 ; 'D'
000000000000e19c         db  0x0e ; '.'
000000000000e19d         db  0x20 ; ' '
000000000000e19e         db  0x7a ; 'z'
000000000000e19f         db  0x0a ; '.'
000000000000e1a0         db  0x0e ; '.'
000000000000e1a1         db  0x18 ; '.'
000000000000e1a2         db  0x41 ; 'A'
000000000000e1a3         db  0x0e ; '.'
000000000000e1a4         db  0x10 ; '.'
000000000000e1a5         db  0x41 ; 'A'
000000000000e1a6         db  0x0e ; '.'
000000000000e1a7         db  0x08 ; '.'
000000000000e1a8         db  0x41 ; 'A'
000000000000e1a9         db  0x0b ; '.'
000000000000e1aa         db  0x00 ; '.'
000000000000e1ab         db  0x00 ; '.'
000000000000e1ac         db  0x00 ; '.'
000000000000e1ad         db  0x00 ; '.'
000000000000e1ae         db  0x00 ; '.'
000000000000e1af         db  0x00 ; '.'
000000000000e1b0         dd         0x00000054                                  ; Length of the record
000000000000e1b4         dd         0x00000904                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e1b8         db         0x28, 0x75, 2 dup (0xff)                    ; begin 0x56e0
000000000000e1bc         db         0x66, 0x01, 2 dup (0x00)                    ; length 0x166 (end at 0x5846)
000000000000e1c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1c1         db  0x42 ; 'B'
000000000000e1c2         db  0x0e ; '.'
000000000000e1c3         db  0x10 ; '.'
000000000000e1c4         db  0x8f ; '.'
000000000000e1c5         db  0x02 ; '.'
000000000000e1c6         db  0x42 ; 'B'
000000000000e1c7         db  0x0e ; '.'
000000000000e1c8         db  0x18 ; '.'
000000000000e1c9         db  0x8e ; '.'
000000000000e1ca         db  0x03 ; '.'
000000000000e1cb         db  0x45 ; 'E'
000000000000e1cc         db  0x0e ; '.'
000000000000e1cd         db  0x20 ; ' '
000000000000e1ce         db  0x8d ; '.'
000000000000e1cf         db  0x04 ; '.'
000000000000e1d0         db  0x42 ; 'B'
000000000000e1d1         db  0x0e ; '.'
000000000000e1d2         db  0x28 ; '('
000000000000e1d3         db  0x8c ; '.'
000000000000e1d4         db  0x05 ; '.'
000000000000e1d5         db  0x44 ; 'D'
000000000000e1d6         db  0x0e ; '.'
000000000000e1d7         db  0x30 ; '0'
000000000000e1d8         db  0x86 ; '.'
000000000000e1d9         db  0x06 ; '.'
000000000000e1da         db  0x41 ; 'A'
000000000000e1db         db  0x0e ; '.'
000000000000e1dc         db  0x38 ; '8'
000000000000e1dd         db  0x83 ; '.'
000000000000e1de         db  0x07 ; '.'
000000000000e1df         db  0x4b ; 'K'
000000000000e1e0         db  0x0e ; '.'
000000000000e1e1         db  0x70 ; 'p'
000000000000e1e2         db  0x02 ; '.'
000000000000e1e3         db  0xbc ; '.'
000000000000e1e4         db  0x0e ; '.'
000000000000e1e5         db  0x78 ; 'x'
000000000000e1e6         db  0x49 ; 'I'
000000000000e1e7         db  0x0e ; '.'
000000000000e1e8         db  0x80 ; '.'
000000000000e1e9         db  0x01 ; '.'
000000000000e1ea         db  0x5f ; '_'
000000000000e1eb         db  0x0e ; '.'
000000000000e1ec         db  0x78 ; 'x'
000000000000e1ed         db  0x41 ; 'A'
000000000000e1ee         db  0x0e ; '.'
000000000000e1ef         db  0x70 ; 'p'
000000000000e1f0         db  0x7e ; '~'
000000000000e1f1         db  0x0a ; '.'
000000000000e1f2         db  0x0e ; '.'
000000000000e1f3         db  0x38 ; '8'
000000000000e1f4         db  0x41 ; 'A'
000000000000e1f5         db  0x0e ; '.'
000000000000e1f6         db  0x30 ; '0'
000000000000e1f7         db  0x41 ; 'A'
000000000000e1f8         db  0x0e ; '.'
000000000000e1f9         db  0x28 ; '('
000000000000e1fa         db  0x42 ; 'B'
000000000000e1fb         db  0x0e ; '.'
000000000000e1fc         db  0x20 ; ' '
000000000000e1fd         db  0x42 ; 'B'
000000000000e1fe         db  0x0e ; '.'
000000000000e1ff         db  0x18 ; '.'
000000000000e200         db  0x42 ; 'B'
000000000000e201         db  0x0e ; '.'
000000000000e202         db  0x10 ; '.'
000000000000e203         db  0x42 ; 'B'
000000000000e204         db  0x0e ; '.'
000000000000e205         db  0x08 ; '.'
000000000000e206         db  0x48 ; 'H'
000000000000e207         db  0x0b ; '.'
000000000000e208         dd         0x00000054                                  ; Length of the record
000000000000e20c         dd         0x0000095c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e210         db         0x40, 0x76, 2 dup (0xff)                    ; begin 0x5850
000000000000e214         db         0x6c, 0x01, 2 dup (0x00)                    ; length 0x16c (end at 0x59bc)
000000000000e218         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e219         db  0x42 ; 'B'
000000000000e21a         db  0x0e ; '.'
000000000000e21b         db  0x10 ; '.'
000000000000e21c         db  0x8f ; '.'
000000000000e21d         db  0x02 ; '.'
000000000000e21e         db  0x46 ; 'F'
000000000000e21f         db  0x0e ; '.'
000000000000e220         db  0x18 ; '.'
000000000000e221         db  0x8e ; '.'
000000000000e222         db  0x03 ; '.'
000000000000e223         db  0x42 ; 'B'
000000000000e224         db  0x0e ; '.'
000000000000e225         db  0x20 ; ' '
000000000000e226         db  0x8d ; '.'
000000000000e227         db  0x04 ; '.'
000000000000e228         db  0x45 ; 'E'
000000000000e229         db  0x0e ; '.'
000000000000e22a         db  0x28 ; '('
000000000000e22b         db  0x8c ; '.'
000000000000e22c         db  0x05 ; '.'
000000000000e22d         db  0x41 ; 'A'
000000000000e22e         db  0x0e ; '.'
000000000000e22f         db  0x30 ; '0'
000000000000e230         db  0x86 ; '.'
000000000000e231         db  0x06 ; '.'
000000000000e232         db  0x44 ; 'D'
000000000000e233         db  0x0e ; '.'
000000000000e234         db  0x38 ; '8'
000000000000e235         db  0x83 ; '.'
000000000000e236         db  0x07 ; '.'
000000000000e237         db  0x4e ; 'N'
000000000000e238         db  0x0e ; '.'
000000000000e239         db  0x70 ; 'p'
000000000000e23a         db  0x02 ; '.'
000000000000e23b         db  0xbd ; '.'
000000000000e23c         db  0x0e ; '.'
000000000000e23d         db  0x78 ; 'x'
000000000000e23e         db  0x49 ; 'I'
000000000000e23f         db  0x0e ; '.'
000000000000e240         db  0x80 ; '.'
000000000000e241         db  0x01 ; '.'
000000000000e242         db  0x5f ; '_'
000000000000e243         db  0x0e ; '.'
000000000000e244         db  0x78 ; 'x'
000000000000e245         db  0x41 ; 'A'
000000000000e246         db  0x0e ; '.'
000000000000e247         db  0x70 ; 'p'
000000000000e248         db  0x7e ; '~'
000000000000e249         db  0x0a ; '.'
000000000000e24a         db  0x0e ; '.'
000000000000e24b         db  0x38 ; '8'
000000000000e24c         db  0x41 ; 'A'
000000000000e24d         db  0x0e ; '.'
000000000000e24e         db  0x30 ; '0'
000000000000e24f         db  0x41 ; 'A'
000000000000e250         db  0x0e ; '.'
000000000000e251         db  0x28 ; '('
000000000000e252         db  0x42 ; 'B'
000000000000e253         db  0x0e ; '.'
000000000000e254         db  0x20 ; ' '
000000000000e255         db  0x42 ; 'B'
000000000000e256         db  0x0e ; '.'
000000000000e257         db  0x18 ; '.'
000000000000e258         db  0x42 ; 'B'
000000000000e259         db  0x0e ; '.'
000000000000e25a         db  0x10 ; '.'
000000000000e25b         db  0x42 ; 'B'
000000000000e25c         db  0x0e ; '.'
000000000000e25d         db  0x08 ; '.'
000000000000e25e         db  0x48 ; 'H'
000000000000e25f         db  0x0b ; '.'
000000000000e260         dd         0x0000005c                                  ; Length of the record
000000000000e264         dd         0x000009b4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e268         db         0x58, 0x77, 2 dup (0xff)                    ; begin 0x59c0
000000000000e26c         db         0x4c, 0x01, 2 dup (0x00)                    ; length 0x14c (end at 0x5b0c)
000000000000e270         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e271         db  0x42 ; 'B'
000000000000e272         db  0x0e ; '.'
000000000000e273         db  0x10 ; '.'
000000000000e274         db  0x8f ; '.'
000000000000e275         db  0x02 ; '.'
000000000000e276         db  0x42 ; 'B'
000000000000e277         db  0x0e ; '.'
000000000000e278         db  0x18 ; '.'
000000000000e279         db  0x8e ; '.'
000000000000e27a         db  0x03 ; '.'
000000000000e27b         db  0x44 ; 'D'
000000000000e27c         db  0x0e ; '.'
000000000000e27d         db  0x20 ; ' '
000000000000e27e         db  0x8d ; '.'
000000000000e27f         db  0x04 ; '.'
000000000000e280         db  0x42 ; 'B'
000000000000e281         db  0x0e ; '.'
000000000000e282         db  0x28 ; '('
000000000000e283         db  0x8c ; '.'
000000000000e284         db  0x05 ; '.'
000000000000e285         db  0x44 ; 'D'
000000000000e286         db  0x0e ; '.'
000000000000e287         db  0x30 ; '0'
000000000000e288         db  0x86 ; '.'
000000000000e289         db  0x06 ; '.'
000000000000e28a         db  0x41 ; 'A'
000000000000e28b         db  0x0e ; '.'
000000000000e28c         db  0x38 ; '8'
000000000000e28d         db  0x83 ; '.'
000000000000e28e         db  0x07 ; '.'
000000000000e28f         db  0x4a ; 'J'
000000000000e290         db  0x0e ; '.'
000000000000e291         db  0x70 ; 'p'
000000000000e292         db  0x02 ; '.'
000000000000e293         db  0xae ; '.'
000000000000e294         db  0x0e ; '.'
000000000000e295         db  0x78 ; 'x'
000000000000e296         db  0x44 ; 'D'
000000000000e297         db  0x0e ; '.'
000000000000e298         db  0x80 ; '.'
000000000000e299         db  0x01 ; '.'
000000000000e29a         db  0x4f ; 'O'
000000000000e29b         db  0x0e ; '.'
000000000000e29c         db  0x88 ; '.'
000000000000e29d         db  0x01 ; '.'
000000000000e29e         db  0x49 ; 'I'
000000000000e29f         db  0x0e ; '.'
000000000000e2a0         db  0x90 ; '.'
000000000000e2a1         db  0x01 ; '.'
000000000000e2a2         db  0x4c ; 'L'
000000000000e2a3         db  0x0e ; '.'
000000000000e2a4         db  0x70 ; 'p'
000000000000e2a5         db  0x02 ; '.'
000000000000e2a6         db  0x45 ; 'E'
000000000000e2a7         db  0x0a ; '.'
000000000000e2a8         db  0x0e ; '.'
000000000000e2a9         db  0x38 ; '8'
000000000000e2aa         db  0x41 ; 'A'
000000000000e2ab         db  0x0e ; '.'
000000000000e2ac         db  0x30 ; '0'
000000000000e2ad         db  0x41 ; 'A'
000000000000e2ae         db  0x0e ; '.'
000000000000e2af         db  0x28 ; '('
000000000000e2b0         db  0x42 ; 'B'
000000000000e2b1         db  0x0e ; '.'
000000000000e2b2         db  0x20 ; ' '
000000000000e2b3         db  0x42 ; 'B'
000000000000e2b4         db  0x0e ; '.'
000000000000e2b5         db  0x18 ; '.'
000000000000e2b6         db  0x42 ; 'B'
000000000000e2b7         db  0x0e ; '.'
000000000000e2b8         db  0x10 ; '.'
000000000000e2b9         db  0x42 ; 'B'
000000000000e2ba         db  0x0e ; '.'
000000000000e2bb         db  0x08 ; '.'
000000000000e2bc         db  0x42 ; 'B'
000000000000e2bd         db  0x0b ; '.'
000000000000e2be         db  0x00 ; '.'
000000000000e2bf         db  0x00 ; '.'
000000000000e2c0         dd         0x0000001c                                  ; Length of the record
000000000000e2c4         dd         0x00000a14                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e2c8         db         0x48, 0x78, 2 dup (0xff)                    ; begin 0x5b10
000000000000e2cc         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x5baf)
000000000000e2d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2d1         db  0x44 ; 'D'
000000000000e2d2         db  0x0e ; '.'
000000000000e2d3         db  0x10 ; '.'
000000000000e2d4         db  0x83 ; '.'
000000000000e2d5         db  0x02 ; '.'
000000000000e2d6         db  0x02 ; '.'
000000000000e2d7         db  0x78 ; 'x'
000000000000e2d8         db  0x0a ; '.'
000000000000e2d9         db  0x0e ; '.'
000000000000e2da         db  0x08 ; '.'
000000000000e2db         db  0x41 ; 'A'
000000000000e2dc         db  0x0b ; '.'
000000000000e2dd         db  0x00 ; '.'
000000000000e2de         db  0x00 ; '.'
000000000000e2df         db  0x00 ; '.'
000000000000e2e0         dd         0x00000040                                  ; Length of the record
000000000000e2e4         dd         0x00000a34                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e2e8         db         0xc8, 0x78, 2 dup (0xff)                    ; begin 0x5bb0
000000000000e2ec         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x5c97)
000000000000e2f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2f1         db  0x41 ; 'A'
000000000000e2f2         db  0x0e ; '.'
000000000000e2f3         db  0x10 ; '.'
000000000000e2f4         db  0x86 ; '.'
000000000000e2f5         db  0x02 ; '.'
000000000000e2f6         db  0x41 ; 'A'
000000000000e2f7         db  0x0e ; '.'
000000000000e2f8         db  0x18 ; '.'
000000000000e2f9         db  0x83 ; '.'
000000000000e2fa         db  0x03 ; '.'
000000000000e2fb         db  0x49 ; 'I'
000000000000e2fc         db  0x0e ; '.'
000000000000e2fd         db  0x20 ; ' '
000000000000e2fe         db  0x6e ; 'n'
000000000000e2ff         db  0x0a ; '.'
000000000000e300         db  0x0e ; '.'
000000000000e301         db  0x18 ; '.'
000000000000e302         db  0x41 ; 'A'
000000000000e303         db  0x0e ; '.'
000000000000e304         db  0x10 ; '.'
000000000000e305         db  0x41 ; 'A'
000000000000e306         db  0x0e ; '.'
000000000000e307         db  0x08 ; '.'
000000000000e308         db  0x45 ; 'E'
000000000000e309         db  0x0b ; '.'
000000000000e30a         db  0x02 ; '.'
000000000000e30b         db  0x4a ; 'J'
000000000000e30c         db  0x0a ; '.'
000000000000e30d         db  0x0e ; '.'
000000000000e30e         db  0x18 ; '.'
000000000000e30f         db  0x41 ; 'A'
000000000000e310         db  0x0e ; '.'
000000000000e311         db  0x10 ; '.'
000000000000e312         db  0x41 ; 'A'
000000000000e313         db  0x0e ; '.'
000000000000e314         db  0x08 ; '.'
000000000000e315         db  0x44 ; 'D'
000000000000e316         db  0x0b ; '.'
000000000000e317         db  0x02 ; '.'
000000000000e318         db  0x54 ; 'T'
000000000000e319         db  0x0e ; '.'
000000000000e31a         db  0x18 ; '.'
000000000000e31b         db  0x41 ; 'A'
000000000000e31c         db  0x0e ; '.'
000000000000e31d         db  0x10 ; '.'
000000000000e31e         db  0x41 ; 'A'
000000000000e31f         db  0x0e ; '.'
000000000000e320         db  0x08 ; '.'
000000000000e321         db  0x00 ; '.'
000000000000e322         db  0x00 ; '.'
000000000000e323         db  0x00 ; '.'
000000000000e324         dd         0x00000074                                  ; Length of the record
000000000000e328         dd         0x00000a78                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e32c         db         0x74, 0x79, 2 dup (0xff)                    ; begin 0x5ca0
000000000000e330         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x6ed4)
000000000000e334         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e335         db  0x42 ; 'B'
000000000000e336         db  0x0e ; '.'
000000000000e337         db  0x10 ; '.'
000000000000e338         db  0x8f ; '.'
000000000000e339         db  0x02 ; '.'
000000000000e33a         db  0x42 ; 'B'
000000000000e33b         db  0x0e ; '.'
000000000000e33c         db  0x18 ; '.'
000000000000e33d         db  0x8e ; '.'
000000000000e33e         db  0x03 ; '.'
000000000000e33f         db  0x45 ; 'E'
000000000000e340         db  0x0e ; '.'
000000000000e341         db  0x20 ; ' '
000000000000e342         db  0x8d ; '.'
000000000000e343         db  0x04 ; '.'
000000000000e344         db  0x42 ; 'B'
000000000000e345         db  0x0e ; '.'
000000000000e346         db  0x28 ; '('
000000000000e347         db  0x8c ; '.'
000000000000e348         db  0x05 ; '.'
000000000000e349         db  0x44 ; 'D'
000000000000e34a         db  0x0e ; '.'
000000000000e34b         db  0x30 ; '0'
000000000000e34c         db  0x86 ; '.'
000000000000e34d         db  0x06 ; '.'
000000000000e34e         db  0x41 ; 'A'
000000000000e34f         db  0x0e ; '.'
000000000000e350         db  0x38 ; '8'
000000000000e351         db  0x83 ; '.'
000000000000e352         db  0x07 ; '.'
000000000000e353         db  0x53 ; 'S'
000000000000e354         db  0x0e ; '.'
000000000000e355         db  0xf0 ; '.'
000000000000e356         db  0x01 ; '.'
000000000000e357         db  0x03 ; '.'
000000000000e358         db  0x81 ; '.'
000000000000e359         db  0x0b ; '.'
000000000000e35a         db  0x0e ; '.'
000000000000e35b         db  0xf8 ; '.'
000000000000e35c         db  0x01 ; '.'
000000000000e35d         db  0x4a ; 'J'
000000000000e35e         db  0x0e ; '.'
000000000000e35f         db  0x80 ; '.'
000000000000e360         db  0x02 ; '.'
000000000000e361         db  0x44 ; 'D'
000000000000e362         db  0x0e ; '.'
000000000000e363         db  0x88 ; '.'
000000000000e364         db  0x02 ; '.'
000000000000e365         db  0x45 ; 'E'
000000000000e366         db  0x0e ; '.'
000000000000e367         db  0x90 ; '.'
000000000000e368         db  0x02 ; '.'
000000000000e369         db  0x5f ; '_'
000000000000e36a         db  0x0e ; '.'
000000000000e36b         db  0xf0 ; '.'
000000000000e36c         db  0x01 ; '.'
000000000000e36d         db  0x64 ; 'd'
000000000000e36e         db  0x0a ; '.'
000000000000e36f         db  0x0e ; '.'
000000000000e370         db  0x38 ; '8'
000000000000e371         db  0x41 ; 'A'
000000000000e372         db  0x0e ; '.'
000000000000e373         db  0x30 ; '0'
000000000000e374         db  0x41 ; 'A'
000000000000e375         db  0x0e ; '.'
000000000000e376         db  0x28 ; '('
000000000000e377         db  0x42 ; 'B'
000000000000e378         db  0x0e ; '.'
000000000000e379         db  0x20 ; ' '
000000000000e37a         db  0x42 ; 'B'
000000000000e37b         db  0x0e ; '.'
000000000000e37c         db  0x18 ; '.'
000000000000e37d         db  0x42 ; 'B'
000000000000e37e         db  0x0e ; '.'
000000000000e37f         db  0x10 ; '.'
000000000000e380         db  0x42 ; 'B'
000000000000e381         db  0x0e ; '.'
000000000000e382         db  0x08 ; '.'
000000000000e383         db  0x44 ; 'D'
000000000000e384         db  0x0b ; '.'
000000000000e385         db  0x03 ; '.'
000000000000e386         db  0x99 ; '.'
000000000000e387         db  0x05 ; '.'
000000000000e388         db  0x0e ; '.'
000000000000e389         db  0xf8 ; '.'
000000000000e38a         db  0x01 ; '.'
000000000000e38b         db  0x4d ; 'M'
000000000000e38c         db  0x0e ; '.'
000000000000e38d         db  0x80 ; '.'
000000000000e38e         db  0x02 ; '.'
000000000000e38f         db  0x44 ; 'D'
000000000000e390         db  0x0e ; '.'
000000000000e391         db  0x88 ; '.'
000000000000e392         db  0x02 ; '.'
000000000000e393         db  0x47 ; 'G'
000000000000e394         db  0x0e ; '.'
000000000000e395         db  0x90 ; '.'
000000000000e396         db  0x02 ; '.'
000000000000e397         db  0x5b ; '['
000000000000e398         db  0x0e ; '.'
000000000000e399         db  0xf0 ; '.'
000000000000e39a         db  0x01 ; '.'
000000000000e39b         db  0x00 ; '.'
000000000000e39c         dd         0x00000068                                  ; Length of the record
000000000000e3a0         dd         0x00000af0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e3a4         db         0x3c, 0x8b, 2 dup (0xff)                    ; begin 0x6ee0
000000000000e3a8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x708b)
000000000000e3ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e3ad         db  0x42 ; 'B'
000000000000e3ae         db  0x0e ; '.'
000000000000e3af         db  0x10 ; '.'
000000000000e3b0         db  0x8f ; '.'
000000000000e3b1         db  0x02 ; '.'
000000000000e3b2         db  0x42 ; 'B'
000000000000e3b3         db  0x0e ; '.'
000000000000e3b4         db  0x18 ; '.'
000000000000e3b5         db  0x8e ; '.'
000000000000e3b6         db  0x03 ; '.'
000000000000e3b7         db  0x45 ; 'E'
000000000000e3b8         db  0x0e ; '.'
000000000000e3b9         db  0x20 ; ' '
000000000000e3ba         db  0x8d ; '.'
000000000000e3bb         db  0x04 ; '.'
000000000000e3bc         db  0x42 ; 'B'
000000000000e3bd         db  0x0e ; '.'
000000000000e3be         db  0x28 ; '('
000000000000e3bf         db  0x8c ; '.'
000000000000e3c0         db  0x05 ; '.'
000000000000e3c1         db  0x44 ; 'D'
000000000000e3c2         db  0x0e ; '.'
000000000000e3c3         db  0x30 ; '0'
000000000000e3c4         db  0x86 ; '.'
000000000000e3c5         db  0x06 ; '.'
000000000000e3c6         db  0x41 ; 'A'
000000000000e3c7         db  0x0e ; '.'
000000000000e3c8         db  0x38 ; '8'
000000000000e3c9         db  0x83 ; '.'
000000000000e3ca         db  0x07 ; '.'
000000000000e3cb         db  0x47 ; 'G'
000000000000e3cc         db  0x0e ; '.'
000000000000e3cd         db  0x60 ; '`'
000000000000e3ce         db  0x02 ; '.'
000000000000e3cf         db  0x99 ; '.'
000000000000e3d0         db  0x0e ; '.'
000000000000e3d1         db  0x68 ; 'h'
000000000000e3d2         db  0x5f ; '_'
000000000000e3d3         db  0x0e ; '.'
000000000000e3d4         db  0x70 ; 'p'
000000000000e3d5         db  0x46 ; 'F'
000000000000e3d6         db  0x0e ; '.'
000000000000e3d7         db  0x78 ; 'x'
000000000000e3d8         db  0x42 ; 'B'
000000000000e3d9         db  0x0e ; '.'
000000000000e3da         db  0x80 ; '.'
000000000000e3db         db  0x01 ; '.'
000000000000e3dc         db  0x59 ; 'Y'
000000000000e3dd         db  0x0e ; '.'
000000000000e3de         db  0x60 ; '`'
000000000000e3df         db  0x02 ; '.'
000000000000e3e0         db  0x40 ; '@'
000000000000e3e1         db  0x0e ; '.'
000000000000e3e2         db  0x68 ; 'h'
000000000000e3e3         db  0x4b ; 'K'
000000000000e3e4         db  0x0e ; '.'
000000000000e3e5         db  0x70 ; 'p'
000000000000e3e6         db  0x43 ; 'C'
000000000000e3e7         db  0x0e ; '.'
000000000000e3e8         db  0x78 ; 'x'
000000000000e3e9         db  0x45 ; 'E'
000000000000e3ea         db  0x0e ; '.'
000000000000e3eb         db  0x80 ; '.'
000000000000e3ec         db  0x01 ; '.'
000000000000e3ed         db  0x5e ; '^'
000000000000e3ee         db  0x0e ; '.'
000000000000e3ef         db  0x60 ; '`'
000000000000e3f0         db  0x4c ; 'L'
000000000000e3f1         db  0x0a ; '.'
000000000000e3f2         db  0x0e ; '.'
000000000000e3f3         db  0x38 ; '8'
000000000000e3f4         db  0x44 ; 'D'
000000000000e3f5         db  0x0e ; '.'
000000000000e3f6         db  0x30 ; '0'
000000000000e3f7         db  0x41 ; 'A'
000000000000e3f8         db  0x0e ; '.'
000000000000e3f9         db  0x28 ; '('
000000000000e3fa         db  0x42 ; 'B'
000000000000e3fb         db  0x0e ; '.'
000000000000e3fc         db  0x20 ; ' '
000000000000e3fd         db  0x42 ; 'B'
000000000000e3fe         db  0x0e ; '.'
000000000000e3ff         db  0x18 ; '.'
000000000000e400         db  0x42 ; 'B'
000000000000e401         db  0x0e ; '.'
000000000000e402         db  0x10 ; '.'
000000000000e403         db  0x42 ; 'B'
000000000000e404         db  0x0e ; '.'
000000000000e405         db  0x08 ; '.'
000000000000e406         db  0x46 ; 'F'
000000000000e407         db  0x0b ; '.'
000000000000e408         dd         0x00000028                                  ; Length of the record
000000000000e40c         dd         0x00000b5c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e410         db         0x80, 0x8c, 2 dup (0xff)                    ; begin 0x7090
000000000000e414         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x70c6)
000000000000e418         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e419         db  0x42 ; 'B'
000000000000e41a         db  0x0e ; '.'
000000000000e41b         db  0x10 ; '.'
000000000000e41c         db  0x8c ; '.'
000000000000e41d         db  0x02 ; '.'
000000000000e41e         db  0x41 ; 'A'
000000000000e41f         db  0x0e ; '.'
000000000000e420         db  0x18 ; '.'
000000000000e421         db  0x86 ; '.'
000000000000e422         db  0x03 ; '.'
000000000000e423         db  0x41 ; 'A'
000000000000e424         db  0x0e ; '.'
000000000000e425         db  0x20 ; ' '
000000000000e426         db  0x83 ; '.'
000000000000e427         db  0x04 ; '.'
000000000000e428         db  0x6e ; 'n'
000000000000e429         db  0x0e ; '.'
000000000000e42a         db  0x18 ; '.'
000000000000e42b         db  0x41 ; 'A'
000000000000e42c         db  0x0e ; '.'
000000000000e42d         db  0x10 ; '.'
000000000000e42e         db  0x42 ; 'B'
000000000000e42f         db  0x0e ; '.'
000000000000e430         db  0x08 ; '.'
000000000000e431         db  0x00 ; '.'
000000000000e432         db  0x00 ; '.'
000000000000e433         db  0x00 ; '.'
000000000000e434         dd         0x00000010                                  ; Length of the record
000000000000e438         dd         0x00000b88                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e43c         db         0x94, 0x8c, 2 dup (0xff)                    ; begin 0x70d0
000000000000e440         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x70e1)
000000000000e444         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e445         align      8
000000000000e448         dd         0x00000010                                  ; Length of the record
000000000000e44c         dd         0x00000b9c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e450         db         0xa0, 0x8c, 2 dup (0xff)                    ; begin 0x70f0
000000000000e454         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7101)
000000000000e458         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e459         align      4
000000000000e45c         dd         0x00000010                                  ; Length of the record
000000000000e460         dd         0x00000bb0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e464         db         0xac, 0x8c, 2 dup (0xff)                    ; begin 0x7110
000000000000e468         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x7145)
000000000000e46c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e46d         align      16
000000000000e470         dd         0x00000010                                  ; Length of the record
000000000000e474         dd         0x00000bc4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e478         db         0xd8, 0x8c, 2 dup (0xff)                    ; begin 0x7150
000000000000e47c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x7165)
000000000000e480         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e481         align      4
000000000000e484         dd         0x00000010                                  ; Length of the record
000000000000e488         dd         0x00000bd8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e48c         db         0xe4, 0x8c, 2 dup (0xff)                    ; begin 0x7170
000000000000e490         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x71a0)
000000000000e494         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e495         db  0x6b ; 'k'
000000000000e496         db  0x0e ; '.'
000000000000e497         db  0x10 ; '.'
000000000000e498         dd         0x00000050                                  ; Length of the record
000000000000e49c         dd         0x00000bec                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e4a0         db         0x00, 0x8d, 2 dup (0xff)                    ; begin 0x71a0
000000000000e4a4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x7214)
000000000000e4a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e4a9         db  0x42 ; 'B'
000000000000e4aa         db  0x0e ; '.'
000000000000e4ab         db  0x10 ; '.'
000000000000e4ac         db  0x8f ; '.'
000000000000e4ad         db  0x02 ; '.'
000000000000e4ae         db  0x42 ; 'B'
000000000000e4af         db  0x0e ; '.'
000000000000e4b0         db  0x18 ; '.'
000000000000e4b1         db  0x8e ; '.'
000000000000e4b2         db  0x03 ; '.'
000000000000e4b3         db  0x49 ; 'I'
000000000000e4b4         db  0x0e ; '.'
000000000000e4b5         db  0x20 ; ' '
000000000000e4b6         db  0x8d ; '.'
000000000000e4b7         db  0x04 ; '.'
000000000000e4b8         db  0x42 ; 'B'
000000000000e4b9         db  0x0e ; '.'
000000000000e4ba         db  0x28 ; '('
000000000000e4bb         db  0x8c ; '.'
000000000000e4bc         db  0x05 ; '.'
000000000000e4bd         db  0x44 ; 'D'
000000000000e4be         db  0x0e ; '.'
000000000000e4bf         db  0x30 ; '0'
000000000000e4c0         db  0x86 ; '.'
000000000000e4c1         db  0x06 ; '.'
000000000000e4c2         db  0x41 ; 'A'
000000000000e4c3         db  0x0e ; '.'
000000000000e4c4         db  0x38 ; '8'
000000000000e4c5         db  0x83 ; '.'
000000000000e4c6         db  0x07 ; '.'
000000000000e4c7         db  0x4d ; 'M'
000000000000e4c8         db  0x0e ; '.'
000000000000e4c9         db  0x50 ; 'P'
000000000000e4ca         db  0x5f ; '_'
000000000000e4cb         db  0x0e ; '.'
000000000000e4cc         db  0x58 ; 'X'
000000000000e4cd         db  0x47 ; 'G'
000000000000e4ce         db  0x0e ; '.'
000000000000e4cf         db  0x60 ; '`'
000000000000e4d0         db  0x46 ; 'F'
000000000000e4d1         db  0x0e ; '.'
000000000000e4d2         db  0x68 ; 'h'
000000000000e4d3         db  0x44 ; 'D'
000000000000e4d4         db  0x0e ; '.'
000000000000e4d5         db  0x70 ; 'p'
000000000000e4d6         db  0x58 ; 'X'
000000000000e4d7         db  0x0e ; '.'
000000000000e4d8         db  0x38 ; '8'
000000000000e4d9         db  0x41 ; 'A'
000000000000e4da         db  0x0e ; '.'
000000000000e4db         db  0x30 ; '0'
000000000000e4dc         db  0x41 ; 'A'
000000000000e4dd         db  0x0e ; '.'
000000000000e4de         db  0x28 ; '('
000000000000e4df         db  0x42 ; 'B'
000000000000e4e0         db  0x0e ; '.'
000000000000e4e1         db  0x20 ; ' '
000000000000e4e2         db  0x42 ; 'B'
000000000000e4e3         db  0x0e ; '.'
000000000000e4e4         db  0x18 ; '.'
000000000000e4e5         db  0x42 ; 'B'
000000000000e4e6         db  0x0e ; '.'
000000000000e4e7         db  0x10 ; '.'
000000000000e4e8         db  0x42 ; 'B'
000000000000e4e9         db  0x0e ; '.'
000000000000e4ea         db  0x08 ; '.'
000000000000e4eb         db  0x00 ; '.'
000000000000e4ec         dd         0x00000068                                  ; Length of the record
000000000000e4f0         dd         0x00000c40                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e4f4         db         0x2c, 0x8d, 2 dup (0xff)                    ; begin 0x7220
000000000000e4f8         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x7303)
000000000000e4fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e4fd         db  0x42 ; 'B'
000000000000e4fe         db  0x0e ; '.'
000000000000e4ff         db  0x10 ; '.'
000000000000e500         db  0x8f ; '.'
000000000000e501         db  0x02 ; '.'
000000000000e502         db  0x42 ; 'B'
000000000000e503         db  0x0e ; '.'
000000000000e504         db  0x18 ; '.'
000000000000e505         db  0x8e ; '.'
000000000000e506         db  0x03 ; '.'
000000000000e507         db  0x49 ; 'I'
000000000000e508         db  0x0e ; '.'
000000000000e509         db  0x20 ; ' '
000000000000e50a         db  0x8d ; '.'
000000000000e50b         db  0x04 ; '.'
000000000000e50c         db  0x42 ; 'B'
000000000000e50d         db  0x0e ; '.'
000000000000e50e         db  0x28 ; '('
000000000000e50f         db  0x8c ; '.'
000000000000e510         db  0x05 ; '.'
000000000000e511         db  0x44 ; 'D'
000000000000e512         db  0x0e ; '.'
000000000000e513         db  0x30 ; '0'
000000000000e514         db  0x86 ; '.'
000000000000e515         db  0x06 ; '.'
000000000000e516         db  0x41 ; 'A'
000000000000e517         db  0x0e ; '.'
000000000000e518         db  0x38 ; '8'
000000000000e519         db  0x83 ; '.'
000000000000e51a         db  0x07 ; '.'
000000000000e51b         db  0x4d ; 'M'
000000000000e51c         db  0x0e ; '.'
000000000000e51d         db  0x70 ; 'p'
000000000000e51e         db  0x65 ; 'e'
000000000000e51f         db  0x0e ; '.'
000000000000e520         db  0x78 ; 'x'
000000000000e521         db  0x4d ; 'M'
000000000000e522         db  0x0e ; '.'
000000000000e523         db  0x80 ; '.'
000000000000e524         db  0x01 ; '.'
000000000000e525         db  0x46 ; 'F'
000000000000e526         db  0x0e ; '.'
000000000000e527         db  0x88 ; '.'
000000000000e528         db  0x01 ; '.'
000000000000e529         db  0x42 ; 'B'
000000000000e52a         db  0x0e ; '.'
000000000000e52b         db  0x90 ; '.'
000000000000e52c         db  0x01 ; '.'
000000000000e52d         db  0x5e ; '^'
000000000000e52e         db  0x0e ; '.'
000000000000e52f         db  0x70 ; 'p'
000000000000e530         db  0x56 ; 'V'
000000000000e531         db  0x0e ; '.'
000000000000e532         db  0x78 ; 'x'
000000000000e533         db  0x43 ; 'C'
000000000000e534         db  0x0e ; '.'
000000000000e535         db  0x80 ; '.'
000000000000e536         db  0x01 ; '.'
000000000000e537         db  0x43 ; 'C'
000000000000e538         db  0x0e ; '.'
000000000000e539         db  0x88 ; '.'
000000000000e53a         db  0x01 ; '.'
000000000000e53b         db  0x56 ; 'V'
000000000000e53c         db  0x0e ; '.'
000000000000e53d         db  0x90 ; '.'
000000000000e53e         db  0x01 ; '.'
000000000000e53f         db  0x52 ; 'R'
000000000000e540         db  0x0e ; '.'
000000000000e541         db  0x70 ; 'p'
000000000000e542         db  0x5b ; '['
000000000000e543         db  0x0e ; '.'
000000000000e544         db  0x38 ; '8'
000000000000e545         db  0x41 ; 'A'
000000000000e546         db  0x0e ; '.'
000000000000e547         db  0x30 ; '0'
000000000000e548         db  0x41 ; 'A'
000000000000e549         db  0x0e ; '.'
000000000000e54a         db  0x28 ; '('
000000000000e54b         db  0x42 ; 'B'
000000000000e54c         db  0x0e ; '.'
000000000000e54d         db  0x20 ; ' '
000000000000e54e         db  0x42 ; 'B'
000000000000e54f         db  0x0e ; '.'
000000000000e550         db  0x18 ; '.'
000000000000e551         db  0x42 ; 'B'
000000000000e552         db  0x0e ; '.'
000000000000e553         db  0x10 ; '.'
000000000000e554         db  0x42 ; 'B'
000000000000e555         db  0x0e ; '.'
000000000000e556         db  0x08 ; '.'
000000000000e557         db  0x00 ; '.'
000000000000e558         dd         0x00000010                                  ; Length of the record
000000000000e55c         dd         0x00000cac                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e560         db         0xb0, 0x8d, 2 dup (0xff)                    ; begin 0x7310
000000000000e564         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x731a)
000000000000e568         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e569         align      4
000000000000e56c         dd         0x00000028                                  ; Length of the record
000000000000e570         dd         0x00000cc0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e574         db         0xac, 0x8d, 2 dup (0xff)                    ; begin 0x7320
000000000000e578         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x73b3)
000000000000e57c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e57d         db  0x48 ; 'H'
000000000000e57e         db  0x0e ; '.'
000000000000e57f         db  0x10 ; '.'
000000000000e580         db  0x8c ; '.'
000000000000e581         db  0x02 ; '.'
000000000000e582         db  0x48 ; 'H'
000000000000e583         db  0x0e ; '.'
000000000000e584         db  0x18 ; '.'
000000000000e585         db  0x86 ; '.'
000000000000e586         db  0x03 ; '.'
000000000000e587         db  0x41 ; 'A'
000000000000e588         db  0x0e ; '.'
000000000000e589         db  0x20 ; ' '
000000000000e58a         db  0x83 ; '.'
000000000000e58b         db  0x04 ; '.'
000000000000e58c         db  0x02 ; '.'
000000000000e58d         db  0x74 ; 't'
000000000000e58e         db  0x0e ; '.'
000000000000e58f         db  0x18 ; '.'
000000000000e590         db  0x4b ; 'K'
000000000000e591         db  0x0e ; '.'
000000000000e592         db  0x10 ; '.'
000000000000e593         db  0x42 ; 'B'
000000000000e594         db  0x0e ; '.'
000000000000e595         db  0x08 ; '.'
000000000000e596         db  0x00 ; '.'
000000000000e597         db  0x00 ; '.'
000000000000e598         dd         0x00000010                                  ; Length of the record
000000000000e59c         dd         0x00000cec                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e5a0         db         0x20, 0x8e, 2 dup (0xff)                    ; begin 0x73c0
000000000000e5a4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x73d3)
000000000000e5a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5a9         align      4
000000000000e5ac         dd         0x00000010                                  ; Length of the record
000000000000e5b0         dd         0x00000d00                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e5b4         db         0x2c, 0x8e, 2 dup (0xff)                    ; begin 0x73e0
000000000000e5b8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x73ec)
000000000000e5bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5bd         align      64
000000000000e5c0         dd         0x00000010                                  ; Length of the record
000000000000e5c4         dd         0x00000d14                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e5c8         db         0x28, 0x8e, 2 dup (0xff)                    ; begin 0x73f0
000000000000e5cc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x7408)
000000000000e5d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5d1         align      4
000000000000e5d4         dd         0x00000010                                  ; Length of the record
000000000000e5d8         dd         0x00000d28                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e5dc         db         0x34, 0x8e, 2 dup (0xff)                    ; begin 0x7410
000000000000e5e0         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x7424)
000000000000e5e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5e5         align      8
000000000000e5e8         dd         0x00000018                                  ; Length of the record
000000000000e5ec         dd         0x00000d3c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e5f0         db         0x40, 0x8e, 2 dup (0xff)                    ; begin 0x7430
000000000000e5f4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x74be)
000000000000e5f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5f9         db  0x44 ; 'D'
000000000000e5fa         db  0x0e ; '.'
000000000000e5fb         db  0x50 ; 'P'
000000000000e5fc         db  0x02 ; '.'
000000000000e5fd         db  0x7f ; '.'
000000000000e5fe         db  0x0a ; '.'
000000000000e5ff         db  0x0e ; '.'
000000000000e600         db  0x08 ; '.'
000000000000e601         db  0x41 ; 'A'
000000000000e602         db  0x0b ; '.'
000000000000e603         db  0x00 ; '.'
000000000000e604         dd         0x00000018                                  ; Length of the record
000000000000e608         dd         0x00000d58                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e60c         db         0xb4, 0x8e, 2 dup (0xff)                    ; begin 0x74c0
000000000000e610         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x754a)
000000000000e614         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e615         db  0x44 ; 'D'
000000000000e616         db  0x0e ; '.'
000000000000e617         db  0x50 ; 'P'
000000000000e618         db  0x02 ; '.'
000000000000e619         db  0x7b ; '{'
000000000000e61a         db  0x0a ; '.'
000000000000e61b         db  0x0e ; '.'
000000000000e61c         db  0x08 ; '.'
000000000000e61d         db  0x41 ; 'A'
000000000000e61e         db  0x0b ; '.'
000000000000e61f         db  0x00 ; '.'
000000000000e620         dd         0x00000010                                  ; Length of the record
000000000000e624         dd         0x00000d74                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e628         db         0x28, 0x8f, 2 dup (0xff)                    ; begin 0x7550
000000000000e62c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x755c)
000000000000e630         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e631         align      4
000000000000e634         dd         0x00000010                                  ; Length of the record
000000000000e638         dd         0x00000d88                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e63c         db         0x24, 0x8f, 2 dup (0xff)                    ; begin 0x7560
000000000000e640         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x756f)
000000000000e644         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e645         align      8
000000000000e648         dd         0x00000018                                  ; Length of the record
000000000000e64c         dd         0x00000d9c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e650         db         0x20, 0x8f, 2 dup (0xff)                    ; begin 0x7570
000000000000e654         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x7608)
000000000000e658         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e659         db  0x44 ; 'D'
000000000000e65a         db  0x0e ; '.'
000000000000e65b         db  0x50 ; 'P'
000000000000e65c         db  0x02 ; '.'
000000000000e65d         db  0x8e ; '.'
000000000000e65e         db  0x0a ; '.'
000000000000e65f         db  0x0e ; '.'
000000000000e660         db  0x08 ; '.'
000000000000e661         db  0x41 ; 'A'
000000000000e662         db  0x0b ; '.'
000000000000e663         db  0x00 ; '.'
000000000000e664         dd         0x00000010                                  ; Length of the record
000000000000e668         dd         0x00000db8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e66c         db         0xa4, 0x8f, 2 dup (0xff)                    ; begin 0x7610
000000000000e670         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x7620)
000000000000e674         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e675         align      8
000000000000e678         dd         0x00000010                                  ; Length of the record
000000000000e67c         dd         0x00000dcc                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e680         db         0xa0, 0x8f, 2 dup (0xff)                    ; begin 0x7620
000000000000e684         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7631)
000000000000e688         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e689         align      4
000000000000e68c         dd         0x00000010                                  ; Length of the record
000000000000e690         dd         0x00000de0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e694         db         0xac, 0x8f, 2 dup (0xff)                    ; begin 0x7640
000000000000e698         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x764a)
000000000000e69c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e69d         align      32
000000000000e6a0         dd         0x00000018                                  ; Length of the record
000000000000e6a4         dd         0x00000df4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e6a8         db         0xa8, 0x8f, 2 dup (0xff)                    ; begin 0x7650
000000000000e6ac         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x76de)
000000000000e6b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e6b1         db  0x44 ; 'D'
000000000000e6b2         db  0x0e ; '.'
000000000000e6b3         db  0x50 ; 'P'
000000000000e6b4         db  0x02 ; '.'
000000000000e6b5         db  0x7f ; '.'
000000000000e6b6         db  0x0a ; '.'
000000000000e6b7         db  0x0e ; '.'
000000000000e6b8         db  0x08 ; '.'
000000000000e6b9         db  0x41 ; 'A'
000000000000e6ba         db  0x0b ; '.'
000000000000e6bb         db  0x00 ; '.'
000000000000e6bc         dd         0x00000018                                  ; Length of the record
000000000000e6c0         dd         0x00000e10                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e6c4         db         0x1c, 0x90, 2 dup (0xff)                    ; begin 0x76e0
000000000000e6c8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x7771)
000000000000e6cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e6cd         db  0x44 ; 'D'
000000000000e6ce         db  0x0e ; '.'
000000000000e6cf         db  0x50 ; 'P'
000000000000e6d0         db  0x02 ; '.'
000000000000e6d1         db  0x82 ; '.'
000000000000e6d2         db  0x0a ; '.'
000000000000e6d3         db  0x0e ; '.'
000000000000e6d4         db  0x08 ; '.'
000000000000e6d5         db  0x41 ; 'A'
000000000000e6d6         db  0x0b ; '.'
000000000000e6d7         db  0x00 ; '.'
000000000000e6d8         dd         0x00000010                                  ; Length of the record
000000000000e6dc         dd         0x00000e2c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e6e0         db         0xa0, 0x90, 2 dup (0xff)                    ; begin 0x7780
000000000000e6e4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x778c)
000000000000e6e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e6e9         align      4
000000000000e6ec         dd         0x00000010                                  ; Length of the record
000000000000e6f0         dd         0x00000e40                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e6f4         db         0x9c, 0x90, 2 dup (0xff)                    ; begin 0x7790
000000000000e6f8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x77a7)
000000000000e6fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e6fd         align      256
000000000000e700         dd         0x00000010                                  ; Length of the record
000000000000e704         dd         0x00000e54                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e708         db         0xa8, 0x90, 2 dup (0xff)                    ; begin 0x77b0
000000000000e70c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x77c3)
000000000000e710         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e711         align      4
000000000000e714         dd         0x00000010                                  ; Length of the record
000000000000e718         dd         0x00000e68                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e71c         db         0xb4, 0x90, 2 dup (0xff)                    ; begin 0x77d0
000000000000e720         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x77dc)
000000000000e724         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e725         align      8
000000000000e728         dd         0x00000010                                  ; Length of the record
000000000000e72c         dd         0x00000e7c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e730         db         0xb0, 0x90, 2 dup (0xff)                    ; begin 0x77e0
000000000000e734         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x77f4)
000000000000e738         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e739         align      4
000000000000e73c         dd         0x00000010                                  ; Length of the record
000000000000e740         dd         0x00000e90                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e744         db         0xbc, 0x90, 2 dup (0xff)                    ; begin 0x7800
000000000000e748         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7813)
000000000000e74c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e74d         align      16
000000000000e750         dd         0x00000014                                  ; Length of the record
000000000000e754         dd         0x00000ea4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e758         db         0xc8, 0x90, 2 dup (0xff)                    ; begin 0x7820
000000000000e75c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x7838)
000000000000e760         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e761         align      8
000000000000e768         dd         0x00000110                                  ; Length of the record
000000000000e76c         dd         0x00000ebc                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e770         db         0xd0, 0x90, 2 dup (0xff)                    ; begin 0x7840
000000000000e774         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x7c57)
000000000000e778         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e779         db  0x42 ; 'B'
000000000000e77a         db  0x0e ; '.'
000000000000e77b         db  0x10 ; '.'
000000000000e77c         db  0x8f ; '.'
000000000000e77d         db  0x02 ; '.'
000000000000e77e         db  0x42 ; 'B'
000000000000e77f         db  0x0e ; '.'
000000000000e780         db  0x18 ; '.'
000000000000e781         db  0x8e ; '.'
000000000000e782         db  0x03 ; '.'
000000000000e783         db  0x42 ; 'B'
000000000000e784         db  0x0e ; '.'
000000000000e785         db  0x20 ; ' '
000000000000e786         db  0x8d ; '.'
000000000000e787         db  0x04 ; '.'
000000000000e788         db  0x42 ; 'B'
000000000000e789         db  0x0e ; '.'
000000000000e78a         db  0x28 ; '('
000000000000e78b         db  0x8c ; '.'
000000000000e78c         db  0x05 ; '.'
000000000000e78d         db  0x44 ; 'D'
000000000000e78e         db  0x0e ; '.'
000000000000e78f         db  0x30 ; '0'
000000000000e790         db  0x86 ; '.'
000000000000e791         db  0x06 ; '.'
000000000000e792         db  0x41 ; 'A'
000000000000e793         db  0x0e ; '.'
000000000000e794         db  0x38 ; '8'
000000000000e795         db  0x83 ; '.'
000000000000e796         db  0x07 ; '.'
000000000000e797         db  0x4a ; 'J'
000000000000e798         db  0x0e ; '.'
000000000000e799         db  0x60 ; '`'
000000000000e79a         db  0x02 ; '.'
000000000000e79b         db  0xdd ; '.'
000000000000e79c         db  0x0e ; '.'
000000000000e79d         db  0x68 ; 'h'
000000000000e79e         db  0x57 ; 'W'
000000000000e79f         db  0x0e ; '.'
000000000000e7a0         db  0x70 ; 'p'
000000000000e7a1         db  0x42 ; 'B'
000000000000e7a2         db  0x0e ; '.'
000000000000e7a3         db  0x78 ; 'x'
000000000000e7a4         db  0x42 ; 'B'
000000000000e7a5         db  0x0e ; '.'
000000000000e7a6         db  0x80 ; '.'
000000000000e7a7         db  0x01 ; '.'
000000000000e7a8         db  0x42 ; 'B'
000000000000e7a9         db  0x0e ; '.'
000000000000e7aa         db  0x88 ; '.'
000000000000e7ab         db  0x01 ; '.'
000000000000e7ac         db  0x42 ; 'B'
000000000000e7ad         db  0x0e ; '.'
000000000000e7ae         db  0x90 ; '.'
000000000000e7af         db  0x01 ; '.'
000000000000e7b0         db  0x53 ; 'S'
000000000000e7b1         db  0x0e ; '.'
000000000000e7b2         db  0x60 ; '`'
000000000000e7b3         db  0x44 ; 'D'
000000000000e7b4         db  0x0a ; '.'
000000000000e7b5         db  0x0e ; '.'
000000000000e7b6         db  0x38 ; '8'
000000000000e7b7         db  0x41 ; 'A'
000000000000e7b8         db  0x0e ; '.'
000000000000e7b9         db  0x30 ; '0'
000000000000e7ba         db  0x41 ; 'A'
000000000000e7bb         db  0x0e ; '.'
000000000000e7bc         db  0x28 ; '('
000000000000e7bd         db  0x42 ; 'B'
000000000000e7be         db  0x0e ; '.'
000000000000e7bf         db  0x20 ; ' '
000000000000e7c0         db  0x42 ; 'B'
000000000000e7c1         db  0x0e ; '.'
000000000000e7c2         db  0x18 ; '.'
000000000000e7c3         db  0x42 ; 'B'
000000000000e7c4         db  0x0e ; '.'
000000000000e7c5         db  0x10 ; '.'
000000000000e7c6         db  0x42 ; 'B'
000000000000e7c7         db  0x0e ; '.'
000000000000e7c8         db  0x08 ; '.'
000000000000e7c9         db  0x44 ; 'D'
000000000000e7ca         db  0x0b ; '.'
000000000000e7cb         db  0x02 ; '.'
000000000000e7cc         db  0x78 ; 'x'
000000000000e7cd         db  0x0a ; '.'
000000000000e7ce         db  0x0e ; '.'
000000000000e7cf         db  0x68 ; 'h'
000000000000e7d0         db  0x48 ; 'H'
000000000000e7d1         db  0x0b ; '.'
000000000000e7d2         db  0x5a ; 'Z'
000000000000e7d3         db  0x0a ; '.'
000000000000e7d4         db  0x0e ; '.'
000000000000e7d5         db  0x38 ; '8'
000000000000e7d6         db  0x47 ; 'G'
000000000000e7d7         db  0x0e ; '.'
000000000000e7d8         db  0x30 ; '0'
000000000000e7d9         db  0x41 ; 'A'
000000000000e7da         db  0x0e ; '.'
000000000000e7db         db  0x28 ; '('
000000000000e7dc         db  0x42 ; 'B'
000000000000e7dd         db  0x0e ; '.'
000000000000e7de         db  0x20 ; ' '
000000000000e7df         db  0x42 ; 'B'
000000000000e7e0         db  0x0e ; '.'
000000000000e7e1         db  0x18 ; '.'
000000000000e7e2         db  0x42 ; 'B'
000000000000e7e3         db  0x0e ; '.'
000000000000e7e4         db  0x10 ; '.'
000000000000e7e5         db  0x42 ; 'B'
000000000000e7e6         db  0x0e ; '.'
000000000000e7e7         db  0x08 ; '.'
000000000000e7e8         db  0x56 ; 'V'
000000000000e7e9         db  0x0b ; '.'
000000000000e7ea         db  0x5e ; '^'
000000000000e7eb         db  0x0a ; '.'
000000000000e7ec         db  0x0e ; '.'
000000000000e7ed         db  0x38 ; '8'
000000000000e7ee         db  0x52 ; 'R'
000000000000e7ef         db  0x0e ; '.'
000000000000e7f0         db  0x30 ; '0'
000000000000e7f1         db  0x41 ; 'A'
000000000000e7f2         db  0x0e ; '.'
000000000000e7f3         db  0x28 ; '('
000000000000e7f4         db  0x42 ; 'B'
000000000000e7f5         db  0x0e ; '.'
000000000000e7f6         db  0x20 ; ' '
000000000000e7f7         db  0x42 ; 'B'
000000000000e7f8         db  0x0e ; '.'
000000000000e7f9         db  0x18 ; '.'
000000000000e7fa         db  0x42 ; 'B'
000000000000e7fb         db  0x0e ; '.'
000000000000e7fc         db  0x10 ; '.'
000000000000e7fd         db  0x42 ; 'B'
000000000000e7fe         db  0x0e ; '.'
000000000000e7ff         db  0x08 ; '.'
000000000000e800         db  0x4f ; 'O'
000000000000e801         db  0x0b ; '.'
000000000000e802         db  0x62 ; 'b'
000000000000e803         db  0x0a ; '.'
000000000000e804         db  0x0e ; '.'
000000000000e805         db  0x38 ; '8'
000000000000e806         db  0x50 ; 'P'
000000000000e807         db  0x0e ; '.'
000000000000e808         db  0x30 ; '0'
000000000000e809         db  0x41 ; 'A'
000000000000e80a         db  0x0e ; '.'
000000000000e80b         db  0x28 ; '('
000000000000e80c         db  0x42 ; 'B'
000000000000e80d         db  0x0e ; '.'
000000000000e80e         db  0x20 ; ' '
000000000000e80f         db  0x42 ; 'B'
000000000000e810         db  0x0e ; '.'
000000000000e811         db  0x18 ; '.'
000000000000e812         db  0x42 ; 'B'
000000000000e813         db  0x0e ; '.'
000000000000e814         db  0x10 ; '.'
000000000000e815         db  0x42 ; 'B'
000000000000e816         db  0x0e ; '.'
000000000000e817         db  0x08 ; '.'
000000000000e818         db  0x55 ; 'U'
000000000000e819         db  0x0b ; '.'
000000000000e81a         db  0x66 ; 'f'
000000000000e81b         db  0x0e ; '.'
000000000000e81c         db  0x68 ; 'h'
000000000000e81d         db  0x42 ; 'B'
000000000000e81e         db  0x0e ; '.'
000000000000e81f         db  0x70 ; 'p'
000000000000e820         db  0x5c ; '\'
000000000000e821         db  0x0e ; '.'
000000000000e822         db  0x68 ; 'h'
000000000000e823         db  0x41 ; 'A'
000000000000e824         db  0x0e ; '.'
000000000000e825         db  0x60 ; '`'
000000000000e826         db  0x44 ; 'D'
000000000000e827         db  0x0a ; '.'
000000000000e828         db  0x0e ; '.'
000000000000e829         db  0x38 ; '8'
000000000000e82a         db  0x41 ; 'A'
000000000000e82b         db  0x0e ; '.'
000000000000e82c         db  0x30 ; '0'
000000000000e82d         db  0x41 ; 'A'
000000000000e82e         db  0x0e ; '.'
000000000000e82f         db  0x28 ; '('
000000000000e830         db  0x42 ; 'B'
000000000000e831         db  0x0e ; '.'
000000000000e832         db  0x20 ; ' '
000000000000e833         db  0x42 ; 'B'
000000000000e834         db  0x0e ; '.'
000000000000e835         db  0x18 ; '.'
000000000000e836         db  0x42 ; 'B'
000000000000e837         db  0x0e ; '.'
000000000000e838         db  0x10 ; '.'
000000000000e839         db  0x42 ; 'B'
000000000000e83a         db  0x0e ; '.'
000000000000e83b         db  0x08 ; '.'
000000000000e83c         db  0x45 ; 'E'
000000000000e83d         db  0x0b ; '.'
000000000000e83e         db  0x68 ; 'h'
000000000000e83f         db  0x0a ; '.'
000000000000e840         db  0x0e ; '.'
000000000000e841         db  0x68 ; 'h'
000000000000e842         db  0x48 ; 'H'
000000000000e843         db  0x0b ; '.'
000000000000e844         db  0x72 ; 'r'
000000000000e845         db  0x0e ; '.'
000000000000e846         db  0x68 ; 'h'
000000000000e847         db  0x45 ; 'E'
000000000000e848         db  0x0e ; '.'
000000000000e849         db  0x70 ; 'p'
000000000000e84a         db  0x42 ; 'B'
000000000000e84b         db  0x0e ; '.'
000000000000e84c         db  0x78 ; 'x'
000000000000e84d         db  0x42 ; 'B'
000000000000e84e         db  0x0e ; '.'
000000000000e84f         db  0x80 ; '.'
000000000000e850         db  0x01 ; '.'
000000000000e851         db  0x5e ; '^'
000000000000e852         db  0x0e ; '.'
000000000000e853         db  0x60 ; '`'
000000000000e854         db  0x44 ; 'D'
000000000000e855         db  0x0a ; '.'
000000000000e856         db  0x0e ; '.'
000000000000e857         db  0x38 ; '8'
000000000000e858         db  0x41 ; 'A'
000000000000e859         db  0x0e ; '.'
000000000000e85a         db  0x30 ; '0'
000000000000e85b         db  0x41 ; 'A'
000000000000e85c         db  0x0e ; '.'
000000000000e85d         db  0x28 ; '('
000000000000e85e         db  0x42 ; 'B'
000000000000e85f         db  0x0e ; '.'
000000000000e860         db  0x20 ; ' '
000000000000e861         db  0x42 ; 'B'
000000000000e862         db  0x0e ; '.'
000000000000e863         db  0x18 ; '.'
000000000000e864         db  0x42 ; 'B'
000000000000e865         db  0x0e ; '.'
000000000000e866         db  0x10 ; '.'
000000000000e867         db  0x42 ; 'B'
000000000000e868         db  0x0e ; '.'
000000000000e869         db  0x08 ; '.'
000000000000e86a         db  0x41 ; 'A'
000000000000e86b         db  0x0b ; '.'
000000000000e86c         db  0x79 ; 'y'
000000000000e86d         db  0x0a ; '.'
000000000000e86e         db  0x0e ; '.'
000000000000e86f         db  0x68 ; 'h'
000000000000e870         db  0x42 ; 'B'
000000000000e871         db  0x0e ; '.'
000000000000e872         db  0x70 ; 'p'
000000000000e873         db  0x42 ; 'B'
000000000000e874         db  0x0e ; '.'
000000000000e875         db  0x78 ; 'x'
000000000000e876         db  0x42 ; 'B'
000000000000e877         db  0x0e ; '.'
000000000000e878         db  0x80 ; '.'
000000000000e879         db  0x01 ; '.'
000000000000e87a         db  0x51 ; 'Q'
000000000000e87b         db  0x0b ; '.'
000000000000e87c         dd         0x00000010                                  ; Length of the record
000000000000e880         dd         0x00000fd0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e884         db         0xdc, 0x93, 2 dup (0xff)                    ; begin 0x7c60
000000000000e888         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x7c80)
000000000000e88c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e88d         align      16
000000000000e890         dd         0x00000018                                  ; Length of the record
000000000000e894         dd         0x00000fe4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e898         db         0xe8, 0x93, 2 dup (0xff)                    ; begin 0x7c80
000000000000e89c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x7cf8)
000000000000e8a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e8a1         db  0x44 ; 'D'
000000000000e8a2         db  0x0e ; '.'
000000000000e8a3         db  0x70 ; 'p'
000000000000e8a4         db  0x02 ; '.'
000000000000e8a5         db  0x60 ; '`'
000000000000e8a6         db  0x0a ; '.'
000000000000e8a7         db  0x0e ; '.'
000000000000e8a8         db  0x08 ; '.'
000000000000e8a9         db  0x41 ; 'A'
000000000000e8aa         db  0x0b ; '.'
000000000000e8ab         db  0x00 ; '.'
000000000000e8ac         dd         0x00000028                                  ; Length of the record
000000000000e8b0         dd         0x00001000                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e8b4         db         0x4c, 0x94, 2 dup (0xff)                    ; begin 0x7d00
000000000000e8b8         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x7dd5)
000000000000e8bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e8bd         db  0x41 ; 'A'
000000000000e8be         db  0x0e ; '.'
000000000000e8bf         db  0x10 ; '.'
000000000000e8c0         db  0x86 ; '.'
000000000000e8c1         db  0x02 ; '.'
000000000000e8c2         db  0x41 ; 'A'
000000000000e8c3         db  0x0e ; '.'
000000000000e8c4         db  0x18 ; '.'
000000000000e8c5         db  0x83 ; '.'
000000000000e8c6         db  0x03 ; '.'
000000000000e8c7         db  0x50 ; 'P'
000000000000e8c8         db  0x0e ; '.'
000000000000e8c9         db  0xd0 ; '.'
000000000000e8ca         db  0x01 ; '.'
000000000000e8cb         db  0x02 ; '.'
000000000000e8cc         db  0xab ; '.'
000000000000e8cd         db  0x0a ; '.'
000000000000e8ce         db  0x0e ; '.'
000000000000e8cf         db  0x18 ; '.'
000000000000e8d0         db  0x41 ; 'A'
000000000000e8d1         db  0x0e ; '.'
000000000000e8d2         db  0x10 ; '.'
000000000000e8d3         db  0x41 ; 'A'
000000000000e8d4         db  0x0e ; '.'
000000000000e8d5         db  0x08 ; '.'
000000000000e8d6         db  0x41 ; 'A'
000000000000e8d7         db  0x0b ; '.'
000000000000e8d8         dd         0x0000001c                                  ; Length of the record
000000000000e8dc         dd         0x0000102c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e8e0         db         0x00, 0x95, 2 dup (0xff)                    ; begin 0x7de0
000000000000e8e4         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x7e60)
000000000000e8e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e8e9         db  0x41 ; 'A'
000000000000e8ea         db  0x0e ; '.'
000000000000e8eb         db  0x10 ; '.'
000000000000e8ec         db  0x83 ; '.'
000000000000e8ed         db  0x02 ; '.'
000000000000e8ee         db  0x02 ; '.'
000000000000e8ef         db  0x7a ; 'z'
000000000000e8f0         db  0x0e ; '.'
000000000000e8f1         db  0x08 ; '.'
000000000000e8f2         db  0x00 ; '.'
000000000000e8f3         db  0x00 ; '.'
000000000000e8f4         db  0x00 ; '.'
000000000000e8f5         db  0x00 ; '.'
000000000000e8f6         db  0x00 ; '.'
000000000000e8f7         db  0x00 ; '.'
000000000000e8f8         dd         0x00000018                                  ; Length of the record
000000000000e8fc         dd         0x0000104c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e900         db         0x60, 0x95, 2 dup (0xff)                    ; begin 0x7e60
000000000000e904         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x7e7a)
000000000000e908         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e909         db  0x41 ; 'A'
000000000000e90a         db  0x0e ; '.'
000000000000e90b         db  0x10 ; '.'
000000000000e90c         db  0x83 ; '.'
000000000000e90d         db  0x02 ; '.'
000000000000e90e         db  0x53 ; 'S'
000000000000e90f         db  0x0a ; '.'
000000000000e910         db  0x0e ; '.'
000000000000e911         db  0x08 ; '.'
000000000000e912         db  0x41 ; 'A'
000000000000e913         db  0x0b ; '.'
000000000000e914         dd         0x00000010                                  ; Length of the record
000000000000e918         dd         0x00001068                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e91c         db         0x64, 0x95, 2 dup (0xff)                    ; begin 0x7e80
000000000000e920         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x7ea4)
000000000000e924         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e925         db  0x5f ; '_'
000000000000e926         db  0x0e ; '.'
000000000000e927         db  0x10 ; '.'
000000000000e928         dd         0x00000010                                  ; Length of the record
000000000000e92c         dd         0x0000107c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e930         db         0x80, 0x95, 2 dup (0xff)                    ; begin 0x7eb0
000000000000e934         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x7eb2)
000000000000e938         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e939         align      4
000000000000e93c         dd         0x00000020                                  ; Length of the record
000000000000e940         dd         0x00001090                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e944         db         0x7c, 0x95, 2 dup (0xff)                    ; begin 0x7ec0
000000000000e948         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x7ef6)
000000000000e94c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e94d         db  0x44 ; 'D'
000000000000e94e         db  0x0e ; '.'
000000000000e94f         db  0x10 ; '.'
000000000000e950         db  0x83 ; '.'
000000000000e951         db  0x02 ; '.'
000000000000e952         db  0x5d ; ']'
000000000000e953         db  0x0a ; '.'
000000000000e954         db  0x0e ; '.'
000000000000e955         db  0x08 ; '.'
000000000000e956         db  0x47 ; 'G'
000000000000e957         db  0x0b ; '.'
000000000000e958         db  0x48 ; 'H'
000000000000e959         db  0x0a ; '.'
000000000000e95a         db  0x0e ; '.'
000000000000e95b         db  0x08 ; '.'
000000000000e95c         db  0x41 ; 'A'
000000000000e95d         db  0x0b ; '.'
000000000000e95e         db  0x00 ; '.'
000000000000e95f         db  0x00 ; '.'
000000000000e960         dd         0x00000010                                  ; Length of the record
000000000000e964         dd         0x000010b4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e968         db         0x98, 0x95, 2 dup (0xff)                    ; begin 0x7f00
000000000000e96c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x7f24)
000000000000e970         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e971         db  0x5f ; '_'
000000000000e972         db  0x0e ; '.'
000000000000e973         db  0x10 ; '.'
000000000000e974         dd         0x00000014                                  ; Length of the record
000000000000e978         dd         0x000010c8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e97c         db         0xb4, 0x95, 2 dup (0xff)                    ; begin 0x7f30
000000000000e980         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x7fb2)
000000000000e984         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e985         db  0x02 ; '.'
000000000000e986         db  0x5f ; '_'
000000000000e987         db  0x0e ; '.'
000000000000e988         db  0x10 ; '.'
000000000000e989         db  0x49 ; 'I'
000000000000e98a         db  0x0e ; '.'
000000000000e98b         db  0x08 ; '.'
000000000000e98c         dd         0x00000014                                  ; Length of the record
000000000000e990         dd         0x000010e0                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e994         db         0x2c, 0x96, 2 dup (0xff)                    ; begin 0x7fc0
000000000000e998         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x800a)
000000000000e99c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e99d         db  0x02 ; '.'
000000000000e99e         db  0x45 ; 'E'
000000000000e99f         db  0x0e ; '.'
000000000000e9a0         db  0x10 ; '.'
000000000000e9a1         db  0x00 ; '.'
000000000000e9a2         db  0x00 ; '.'
000000000000e9a3         db  0x00 ; '.'
000000000000e9a4         dd         0x00000018                                  ; Length of the record
000000000000e9a8         dd         0x000010f8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e9ac         db         0x64, 0x96, 2 dup (0xff)                    ; begin 0x8010
000000000000e9b0         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x8027)
000000000000e9b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e9b5         db  0x41 ; 'A'
000000000000e9b6         db  0x0e ; '.'
000000000000e9b7         db  0x10 ; '.'
000000000000e9b8         db  0x83 ; '.'
000000000000e9b9         db  0x02 ; '.'
000000000000e9ba         db  0x51 ; 'Q'
000000000000e9bb         db  0x0e ; '.'
000000000000e9bc         db  0x08 ; '.'
000000000000e9bd         db  0x00 ; '.'
000000000000e9be         db  0x00 ; '.'
000000000000e9bf         db  0x00 ; '.'
000000000000e9c0         dd         0x00000018                                  ; Length of the record
000000000000e9c4         dd         0x00001114                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e9c8         db         0x68, 0x96, 2 dup (0xff)                    ; begin 0x8030
000000000000e9cc         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x805e)
000000000000e9d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e9d1         db  0x47 ; 'G'
000000000000e9d2         db  0x0e ; '.'
000000000000e9d3         db  0x10 ; '.'
000000000000e9d4         db  0x61 ; 'a'
000000000000e9d5         db  0x0a ; '.'
000000000000e9d6         db  0x0e ; '.'
000000000000e9d7         db  0x08 ; '.'
000000000000e9d8         db  0x41 ; 'A'
000000000000e9d9         db  0x0b ; '.'
000000000000e9da         db  0x00 ; '.'
000000000000e9db         db  0x00 ; '.'
000000000000e9dc         dd         0x00000024                                  ; Length of the record
000000000000e9e0         dd         0x00001130                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000e9e4         db         0x7c, 0x96, 2 dup (0xff)                    ; begin 0x8060
000000000000e9e8         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x8088)
000000000000e9ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e9ed         db  0x41 ; 'A'
000000000000e9ee         db  0x0e ; '.'
000000000000e9ef         db  0x10 ; '.'
000000000000e9f0         db  0x86 ; '.'
000000000000e9f1         db  0x02 ; '.'
000000000000e9f2         db  0x41 ; 'A'
000000000000e9f3         db  0x0e ; '.'
000000000000e9f4         db  0x18 ; '.'
000000000000e9f5         db  0x83 ; '.'
000000000000e9f6         db  0x03 ; '.'
000000000000e9f7         db  0x4d ; 'M'
000000000000e9f8         db  0x0e ; '.'
000000000000e9f9         db  0x20 ; ' '
000000000000e9fa         db  0x49 ; 'I'
000000000000e9fb         db  0x0e ; '.'
000000000000e9fc         db  0x18 ; '.'
000000000000e9fd         db  0x47 ; 'G'
000000000000e9fe         db  0x0e ; '.'
000000000000e9ff         db  0x10 ; '.'
000000000000ea00         db  0x41 ; 'A'
000000000000ea01         db  0x0e ; '.'
000000000000ea02         db  0x08 ; '.'
000000000000ea03         db  0x00 ; '.'
000000000000ea04         dd         0x00000018                                  ; Length of the record
000000000000ea08         dd         0x00001158                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ea0c         db         0x84, 0x96, 2 dup (0xff)                    ; begin 0x8090
000000000000ea10         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x80a3)
000000000000ea14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea15         db  0x41 ; 'A'
000000000000ea16         db  0x0e ; '.'
000000000000ea17         db  0x10 ; '.'
000000000000ea18         db  0x83 ; '.'
000000000000ea19         db  0x02 ; '.'
000000000000ea1a         db  0x50 ; 'P'
000000000000ea1b         db  0x0e ; '.'
000000000000ea1c         db  0x08 ; '.'
000000000000ea1d         db  0x00 ; '.'
000000000000ea1e         db  0x00 ; '.'
000000000000ea1f         db  0x00 ; '.'
000000000000ea20         dd         0x00000014                                  ; Length of the record
000000000000ea24         dd         0x00001174                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ea28         db         0x88, 0x96, 2 dup (0xff)                    ; begin 0x80b0
000000000000ea2c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x80e5)
000000000000ea30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea31         db  0x4b ; 'K'
000000000000ea32         db  0x0e ; '.'
000000000000ea33         db  0x10 ; '.'
000000000000ea34         db  0x00 ; '.'
000000000000ea35         db  0x00 ; '.'
000000000000ea36         db  0x00 ; '.'
000000000000ea37         db  0x00 ; '.'
000000000000ea38         dd         0x00000028                                  ; Length of the record
000000000000ea3c         dd         0x0000118c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ea40         db         0xb0, 0x96, 2 dup (0xff)                    ; begin 0x80f0
000000000000ea44         db         0x5f, 3 dup (0x00)                          ; length 0x5f (end at 0x814f)
000000000000ea48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea49         db  0x41 ; 'A'
000000000000ea4a         db  0x0e ; '.'
000000000000ea4b         db  0x10 ; '.'
000000000000ea4c         db  0x86 ; '.'
000000000000ea4d         db  0x02 ; '.'
000000000000ea4e         db  0x41 ; 'A'
000000000000ea4f         db  0x0e ; '.'
000000000000ea50         db  0x18 ; '.'
000000000000ea51         db  0x83 ; '.'
000000000000ea52         db  0x03 ; '.'
000000000000ea53         db  0x44 ; 'D'
000000000000ea54         db  0x0e ; '.'
000000000000ea55         db  0x20 ; ' '
000000000000ea56         db  0x4f ; 'O'
000000000000ea57         db  0x0a ; '.'
000000000000ea58         db  0x0e ; '.'
000000000000ea59         db  0x18 ; '.'
000000000000ea5a         db  0x43 ; 'C'
000000000000ea5b         db  0x0e ; '.'
000000000000ea5c         db  0x10 ; '.'
000000000000ea5d         db  0x41 ; 'A'
000000000000ea5e         db  0x0e ; '.'
000000000000ea5f         db  0x08 ; '.'
000000000000ea60         db  0x47 ; 'G'
000000000000ea61         db  0x0b ; '.'
000000000000ea62         db  0x00 ; '.'
000000000000ea63         db  0x00 ; '.'
000000000000ea64         dd         0x00000018                                  ; Length of the record
000000000000ea68         dd         0x000011b8                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ea6c         db         0xe4, 0x96, 2 dup (0xff)                    ; begin 0x8150
000000000000ea70         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x8206)
000000000000ea74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea75         db  0x47 ; 'G'
000000000000ea76         db  0x0e ; '.'
000000000000ea77         db  0xe0 ; '.'
000000000000ea78         db  0x01 ; '.'
000000000000ea79         db  0x02 ; '.'
000000000000ea7a         db  0xa9 ; '.'
000000000000ea7b         db  0x0a ; '.'
000000000000ea7c         db  0x0e ; '.'
000000000000ea7d         db  0x08 ; '.'
000000000000ea7e         db  0x41 ; 'A'
000000000000ea7f         db  0x0b ; '.'
000000000000ea80         dd         0x00000028                                  ; Length of the record
000000000000ea84         dd         0x000011d4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ea88         db         0x88, 0x97, 2 dup (0xff)                    ; begin 0x8210
000000000000ea8c         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x826b)
000000000000ea90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea91         db  0x41 ; 'A'
000000000000ea92         db  0x0e ; '.'
000000000000ea93         db  0x10 ; '.'
000000000000ea94         db  0x86 ; '.'
000000000000ea95         db  0x02 ; '.'
000000000000ea96         db  0x41 ; 'A'
000000000000ea97         db  0x0e ; '.'
000000000000ea98         db  0x18 ; '.'
000000000000ea99         db  0x83 ; '.'
000000000000ea9a         db  0x03 ; '.'
000000000000ea9b         db  0x47 ; 'G'
000000000000ea9c         db  0x0e ; '.'
000000000000ea9d         db  0x20 ; ' '
000000000000ea9e         db  0x4f ; 'O'
000000000000ea9f         db  0x0a ; '.'
000000000000eaa0         db  0x0e ; '.'
000000000000eaa1         db  0x18 ; '.'
000000000000eaa2         db  0x43 ; 'C'
000000000000eaa3         db  0x0e ; '.'
000000000000eaa4         db  0x10 ; '.'
000000000000eaa5         db  0x41 ; 'A'
000000000000eaa6         db  0x0e ; '.'
000000000000eaa7         db  0x08 ; '.'
000000000000eaa8         db  0x44 ; 'D'
000000000000eaa9         db  0x0b ; '.'
000000000000eaaa         db  0x00 ; '.'
000000000000eaab         db  0x00 ; '.'
000000000000eaac         dd         0x00000018                                  ; Length of the record
000000000000eab0         dd         0x00001200                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000eab4         db         0xbc, 0x97, 2 dup (0xff)                    ; begin 0x8270
000000000000eab8         db         0xb1, 3 dup (0x00)                          ; length 0xb1 (end at 0x8321)
000000000000eabc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eabd         db  0x47 ; 'G'
000000000000eabe         db  0x0e ; '.'
000000000000eabf         db  0xe0 ; '.'
000000000000eac0         db  0x01 ; '.'
000000000000eac1         db  0x02 ; '.'
000000000000eac2         db  0xa4 ; '.'
000000000000eac3         db  0x0a ; '.'
000000000000eac4         db  0x0e ; '.'
000000000000eac5         db  0x08 ; '.'
000000000000eac6         db  0x41 ; 'A'
000000000000eac7         db  0x0b ; '.'
000000000000eac8         dd         0x00000024                                  ; Length of the record
000000000000eacc         dd         0x0000121c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ead0         db         0x60, 0x98, 2 dup (0xff)                    ; begin 0x8330
000000000000ead4         db         0xac, 3 dup (0x00)                          ; length 0xac (end at 0x83dc)
000000000000ead8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ead9         db  0x42 ; 'B'
000000000000eada         db  0x0e ; '.'
000000000000eadb         db  0x10 ; '.'
000000000000eadc         db  0x8d ; '.'
000000000000eadd         db  0x02 ; '.'
000000000000eade         db  0x42 ; 'B'
000000000000eadf         db  0x0e ; '.'
000000000000eae0         db  0x18 ; '.'
000000000000eae1         db  0x8c ; '.'
000000000000eae2         db  0x03 ; '.'
000000000000eae3         db  0x44 ; 'D'
000000000000eae4         db  0x0e ; '.'
000000000000eae5         db  0x20 ; ' '
000000000000eae6         db  0x86 ; '.'
000000000000eae7         db  0x04 ; '.'
000000000000eae8         db  0x41 ; 'A'
000000000000eae9         db  0x0e ; '.'
000000000000eaea         db  0x28 ; '('
000000000000eaeb         db  0x83 ; '.'
000000000000eaec         db  0x05 ; '.'
000000000000eaed         db  0x47 ; 'G'
000000000000eaee         db  0x0e ; '.'
000000000000eaef         db  0x40 ; '@'
000000000000eaf0         dd         0x0000004c                                  ; Length of the record
000000000000eaf4         dd         0x00001244                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000eaf8         db         0xe8, 0x98, 2 dup (0xff)                    ; begin 0x83e0
000000000000eafc         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x87fc)
000000000000eb00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb01         db  0x42 ; 'B'
000000000000eb02         db  0x0e ; '.'
000000000000eb03         db  0x10 ; '.'
000000000000eb04         db  0x8f ; '.'
000000000000eb05         db  0x02 ; '.'
000000000000eb06         db  0x42 ; 'B'
000000000000eb07         db  0x0e ; '.'
000000000000eb08         db  0x18 ; '.'
000000000000eb09         db  0x8e ; '.'
000000000000eb0a         db  0x03 ; '.'
000000000000eb0b         db  0x42 ; 'B'
000000000000eb0c         db  0x0e ; '.'
000000000000eb0d         db  0x20 ; ' '
000000000000eb0e         db  0x8d ; '.'
000000000000eb0f         db  0x04 ; '.'
000000000000eb10         db  0x42 ; 'B'
000000000000eb11         db  0x0e ; '.'
000000000000eb12         db  0x28 ; '('
000000000000eb13         db  0x8c ; '.'
000000000000eb14         db  0x05 ; '.'
000000000000eb15         db  0x41 ; 'A'
000000000000eb16         db  0x0e ; '.'
000000000000eb17         db  0x30 ; '0'
000000000000eb18         db  0x86 ; '.'
000000000000eb19         db  0x06 ; '.'
000000000000eb1a         db  0x41 ; 'A'
000000000000eb1b         db  0x0e ; '.'
000000000000eb1c         db  0x38 ; '8'
000000000000eb1d         db  0x83 ; '.'
000000000000eb1e         db  0x07 ; '.'
000000000000eb1f         db  0x44 ; 'D'
000000000000eb20         db  0x0e ; '.'
000000000000eb21         db  0x60 ; '`'
000000000000eb22         db  0x02 ; '.'
000000000000eb23         db  0xe9 ; '.'
000000000000eb24         db  0x0a ; '.'
000000000000eb25         db  0x0e ; '.'
000000000000eb26         db  0x38 ; '8'
000000000000eb27         db  0x41 ; 'A'
000000000000eb28         db  0x0e ; '.'
000000000000eb29         db  0x30 ; '0'
000000000000eb2a         db  0x41 ; 'A'
000000000000eb2b         db  0x0e ; '.'
000000000000eb2c         db  0x28 ; '('
000000000000eb2d         db  0x42 ; 'B'
000000000000eb2e         db  0x0e ; '.'
000000000000eb2f         db  0x20 ; ' '
000000000000eb30         db  0x42 ; 'B'
000000000000eb31         db  0x0e ; '.'
000000000000eb32         db  0x18 ; '.'
000000000000eb33         db  0x42 ; 'B'
000000000000eb34         db  0x0e ; '.'
000000000000eb35         db  0x10 ; '.'
000000000000eb36         db  0x42 ; 'B'
000000000000eb37         db  0x0e ; '.'
000000000000eb38         db  0x08 ; '.'
000000000000eb39         db  0x47 ; 'G'
000000000000eb3a         db  0x0b ; '.'
000000000000eb3b         db  0x00 ; '.'
000000000000eb3c         db  0x00 ; '.'
000000000000eb3d         db  0x00 ; '.'
000000000000eb3e         db  0x00 ; '.'
000000000000eb3f         db  0x00 ; '.'
000000000000eb40         dd         0x00000034                                  ; Length of the record
000000000000eb44         dd         0x00001294                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000eb48         db         0xb8, 0x9c, 2 dup (0xff)                    ; begin 0x8800
000000000000eb4c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x887b)
000000000000eb50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb51         db  0x42 ; 'B'
000000000000eb52         db  0x0e ; '.'
000000000000eb53         db  0x10 ; '.'
000000000000eb54         db  0x8c ; '.'
000000000000eb55         db  0x02 ; '.'
000000000000eb56         db  0x41 ; 'A'
000000000000eb57         db  0x0e ; '.'
000000000000eb58         db  0x18 ; '.'
000000000000eb59         db  0x86 ; '.'
000000000000eb5a         db  0x03 ; '.'
000000000000eb5b         db  0x41 ; 'A'
000000000000eb5c         db  0x0e ; '.'
000000000000eb5d         db  0x20 ; ' '
000000000000eb5e         db  0x83 ; '.'
000000000000eb5f         db  0x04 ; '.'
000000000000eb60         db  0x7d ; '}'
000000000000eb61         db  0x0a ; '.'
000000000000eb62         db  0x0e ; '.'
000000000000eb63         db  0x18 ; '.'
000000000000eb64         db  0x41 ; 'A'
000000000000eb65         db  0x0e ; '.'
000000000000eb66         db  0x10 ; '.'
000000000000eb67         db  0x42 ; 'B'
000000000000eb68         db  0x0e ; '.'
000000000000eb69         db  0x08 ; '.'
000000000000eb6a         db  0x44 ; 'D'
000000000000eb6b         db  0x0b ; '.'
000000000000eb6c         db  0x60 ; '`'
000000000000eb6d         db  0x0a ; '.'
000000000000eb6e         db  0x0e ; '.'
000000000000eb6f         db  0x18 ; '.'
000000000000eb70         db  0x41 ; 'A'
000000000000eb71         db  0x0e ; '.'
000000000000eb72         db  0x10 ; '.'
000000000000eb73         db  0x42 ; 'B'
000000000000eb74         db  0x0e ; '.'
000000000000eb75         db  0x08 ; '.'
000000000000eb76         db  0x45 ; 'E'
000000000000eb77         db  0x0b ; '.'
000000000000eb78         dd         0x0000001c                                  ; Length of the record
000000000000eb7c         dd         0x000012cc                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000eb80         db         0x00, 0x9d, 2 dup (0xff)                    ; begin 0x8880
000000000000eb84         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x88c0)
000000000000eb88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb89         db  0x44 ; 'D'
000000000000eb8a         db  0x0e ; '.'
000000000000eb8b         db  0x10 ; '.'
000000000000eb8c         db  0x83 ; '.'
000000000000eb8d         db  0x02 ; '.'
000000000000eb8e         db  0x5a ; 'Z'
000000000000eb8f         db  0x0a ; '.'
000000000000eb90         db  0x0e ; '.'
000000000000eb91         db  0x08 ; '.'
000000000000eb92         db  0x4a ; 'J'
000000000000eb93         db  0x0b ; '.'
000000000000eb94         db  0x53 ; 'S'
000000000000eb95         db  0x0e ; '.'
000000000000eb96         db  0x08 ; '.'
000000000000eb97         db  0x00 ; '.'
000000000000eb98         dd         0x0000002c                                  ; Length of the record
000000000000eb9c         dd         0x000012ec                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000eba0         db         0x20, 0x9d, 2 dup (0xff)                    ; begin 0x88c0
000000000000eba4         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x8917)
000000000000eba8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eba9         db  0x63 ; 'c'
000000000000ebaa         db  0x0e ; '.'
000000000000ebab         db  0x10 ; '.'
000000000000ebac         db  0x8c ; '.'
000000000000ebad         db  0x02 ; '.'
000000000000ebae         db  0x41 ; 'A'
000000000000ebaf         db  0x0e ; '.'
000000000000ebb0         db  0x18 ; '.'
000000000000ebb1         db  0x86 ; '.'
000000000000ebb2         db  0x03 ; '.'
000000000000ebb3         db  0x44 ; 'D'
000000000000ebb4         db  0x0e ; '.'
000000000000ebb5         db  0x20 ; ' '
000000000000ebb6         db  0x83 ; '.'
000000000000ebb7         db  0x04 ; '.'
000000000000ebb8         db  0x6b ; 'k'
000000000000ebb9         db  0x0e ; '.'
000000000000ebba         db  0x18 ; '.'
000000000000ebbb         db  0x41 ; 'A'
000000000000ebbc         db  0x0e ; '.'
000000000000ebbd         db  0x10 ; '.'
000000000000ebbe         db  0x42 ; 'B'
000000000000ebbf         db  0x0e ; '.'
000000000000ebc0         db  0x08 ; '.'
000000000000ebc1         db  0x00 ; '.'
000000000000ebc2         db  0x00 ; '.'
000000000000ebc3         db  0x00 ; '.'
000000000000ebc4         db  0x00 ; '.'
000000000000ebc5         db  0x00 ; '.'
000000000000ebc6         db  0x00 ; '.'
000000000000ebc7         db  0x00 ; '.'
000000000000ebc8         dd         0x0000003c                                  ; Length of the record
000000000000ebcc         dd         0x0000131c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ebd0         db         0x50, 0x9d, 2 dup (0xff)                    ; begin 0x8920
000000000000ebd4         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x89a3)
000000000000ebd8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ebd9         db  0x42 ; 'B'
000000000000ebda         db  0x0e ; '.'
000000000000ebdb         db  0x10 ; '.'
000000000000ebdc         db  0x8d ; '.'
000000000000ebdd         db  0x02 ; '.'
000000000000ebde         db  0x42 ; 'B'
000000000000ebdf         db  0x0e ; '.'
000000000000ebe0         db  0x18 ; '.'
000000000000ebe1         db  0x8c ; '.'
000000000000ebe2         db  0x03 ; '.'
000000000000ebe3         db  0x44 ; 'D'
000000000000ebe4         db  0x0e ; '.'
000000000000ebe5         db  0x20 ; ' '
000000000000ebe6         db  0x86 ; '.'
000000000000ebe7         db  0x04 ; '.'
000000000000ebe8         db  0x41 ; 'A'
000000000000ebe9         db  0x0e ; '.'
000000000000ebea         db  0x28 ; '('
000000000000ebeb         db  0x83 ; '.'
000000000000ebec         db  0x05 ; '.'
000000000000ebed         db  0x4a ; 'J'
000000000000ebee         db  0x0e ; '.'
000000000000ebef         db  0x40 ; '@'
000000000000ebf0         db  0x02 ; '.'
000000000000ebf1         db  0x64 ; 'd'
000000000000ebf2         db  0x0a ; '.'
000000000000ebf3         db  0x0e ; '.'
000000000000ebf4         db  0x28 ; '('
000000000000ebf5         db  0x41 ; 'A'
000000000000ebf6         db  0x0e ; '.'
000000000000ebf7         db  0x20 ; ' '
000000000000ebf8         db  0x41 ; 'A'
000000000000ebf9         db  0x0e ; '.'
000000000000ebfa         db  0x18 ; '.'
000000000000ebfb         db  0x42 ; 'B'
000000000000ebfc         db  0x0e ; '.'
000000000000ebfd         db  0x10 ; '.'
000000000000ebfe         db  0x42 ; 'B'
000000000000ebff         db  0x0e ; '.'
000000000000ec00         db  0x08 ; '.'
000000000000ec01         db  0x41 ; 'A'
000000000000ec02         db  0x0b ; '.'
000000000000ec03         db  0x00 ; '.'
000000000000ec04         db  0x00 ; '.'
000000000000ec05         db  0x00 ; '.'
000000000000ec06         db  0x00 ; '.'
000000000000ec07         db  0x00 ; '.'
000000000000ec08         dd         0x0000003c                                  ; Length of the record
000000000000ec0c         dd         0x0000135c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ec10         db         0xa0, 0x9d, 2 dup (0xff)                    ; begin 0x89b0
000000000000ec14         db         0xf2, 3 dup (0x00)                          ; length 0xf2 (end at 0x8aa2)
000000000000ec18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec19         db  0x42 ; 'B'
000000000000ec1a         db  0x0e ; '.'
000000000000ec1b         db  0x10 ; '.'
000000000000ec1c         db  0x8d ; '.'
000000000000ec1d         db  0x02 ; '.'
000000000000ec1e         db  0x42 ; 'B'
000000000000ec1f         db  0x0e ; '.'
000000000000ec20         db  0x18 ; '.'
000000000000ec21         db  0x8c ; '.'
000000000000ec22         db  0x03 ; '.'
000000000000ec23         db  0x44 ; 'D'
000000000000ec24         db  0x0e ; '.'
000000000000ec25         db  0x20 ; ' '
000000000000ec26         db  0x86 ; '.'
000000000000ec27         db  0x04 ; '.'
000000000000ec28         db  0x41 ; 'A'
000000000000ec29         db  0x0e ; '.'
000000000000ec2a         db  0x28 ; '('
000000000000ec2b         db  0x83 ; '.'
000000000000ec2c         db  0x05 ; '.'
000000000000ec2d         db  0x4a ; 'J'
000000000000ec2e         db  0x0e ; '.'
000000000000ec2f         db  0xa0 ; '.'
000000000000ec30         db  0x10 ; '.'
000000000000ec31         db  0x02 ; '.'
000000000000ec32         db  0x8f ; '.'
000000000000ec33         db  0x0a ; '.'
000000000000ec34         db  0x0e ; '.'
000000000000ec35         db  0x28 ; '('
000000000000ec36         db  0x41 ; 'A'
000000000000ec37         db  0x0e ; '.'
000000000000ec38         db  0x20 ; ' '
000000000000ec39         db  0x41 ; 'A'
000000000000ec3a         db  0x0e ; '.'
000000000000ec3b         db  0x18 ; '.'
000000000000ec3c         db  0x42 ; 'B'
000000000000ec3d         db  0x0e ; '.'
000000000000ec3e         db  0x10 ; '.'
000000000000ec3f         db  0x42 ; 'B'
000000000000ec40         db  0x0e ; '.'
000000000000ec41         db  0x08 ; '.'
000000000000ec42         db  0x48 ; 'H'
000000000000ec43         db  0x0b ; '.'
000000000000ec44         db  0x00 ; '.'
000000000000ec45         db  0x00 ; '.'
000000000000ec46         db  0x00 ; '.'
000000000000ec47         db  0x00 ; '.'
000000000000ec48         dd         0x00000014                                  ; Length of the record
000000000000ec4c         dd         0x0000139c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ec50         db         0x60, 0x9e, 2 dup (0xff)                    ; begin 0x8ab0
000000000000ec54         db         0x12, 3 dup (0x00)                          ; length 0x12 (end at 0x8ac2)
000000000000ec58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec59         align      32
000000000000ec60         dd         0x0000004c                                  ; Length of the record
000000000000ec64         dd         0x000013b4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ec68         db         0x68, 0x9e, 2 dup (0xff)                    ; begin 0x8ad0
000000000000ec6c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x8b4d)
000000000000ec70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec71         db  0x42 ; 'B'
000000000000ec72         db  0x0e ; '.'
000000000000ec73         db  0x10 ; '.'
000000000000ec74         db  0x8c ; '.'
000000000000ec75         db  0x02 ; '.'
000000000000ec76         db  0x41 ; 'A'
000000000000ec77         db  0x0e ; '.'
000000000000ec78         db  0x18 ; '.'
000000000000ec79         db  0x86 ; '.'
000000000000ec7a         db  0x03 ; '.'
000000000000ec7b         db  0x44 ; 'D'
000000000000ec7c         db  0x0e ; '.'
000000000000ec7d         db  0x20 ; ' '
000000000000ec7e         db  0x83 ; '.'
000000000000ec7f         db  0x04 ; '.'
000000000000ec80         db  0x69 ; 'i'
000000000000ec81         db  0x0a ; '.'
000000000000ec82         db  0x0e ; '.'
000000000000ec83         db  0x18 ; '.'
000000000000ec84         db  0x41 ; 'A'
000000000000ec85         db  0x0e ; '.'
000000000000ec86         db  0x10 ; '.'
000000000000ec87         db  0x42 ; 'B'
000000000000ec88         db  0x0e ; '.'
000000000000ec89         db  0x08 ; '.'
000000000000ec8a         db  0x45 ; 'E'
000000000000ec8b         db  0x0b ; '.'
000000000000ec8c         db  0x55 ; 'U'
000000000000ec8d         db  0x0a ; '.'
000000000000ec8e         db  0x0e ; '.'
000000000000ec8f         db  0x18 ; '.'
000000000000ec90         db  0x41 ; 'A'
000000000000ec91         db  0x0e ; '.'
000000000000ec92         db  0x10 ; '.'
000000000000ec93         db  0x42 ; 'B'
000000000000ec94         db  0x0e ; '.'
000000000000ec95         db  0x08 ; '.'
000000000000ec96         db  0x48 ; 'H'
000000000000ec97         db  0x0b ; '.'
000000000000ec98         db  0x41 ; 'A'
000000000000ec99         db  0x0a ; '.'
000000000000ec9a         db  0x0e ; '.'
000000000000ec9b         db  0x18 ; '.'
000000000000ec9c         db  0x46 ; 'F'
000000000000ec9d         db  0x0e ; '.'
000000000000ec9e         db  0x10 ; '.'
000000000000ec9f         db  0x42 ; 'B'
000000000000eca0         db  0x0e ; '.'
000000000000eca1         db  0x08 ; '.'
000000000000eca2         db  0x47 ; 'G'
000000000000eca3         db  0x0b ; '.'
000000000000eca4         db  0x49 ; 'I'
000000000000eca5         db  0x0e ; '.'
000000000000eca6         db  0x18 ; '.'
000000000000eca7         db  0x41 ; 'A'
000000000000eca8         db  0x0e ; '.'
000000000000eca9         db  0x10 ; '.'
000000000000ecaa         db  0x42 ; 'B'
000000000000ecab         db  0x0e ; '.'
000000000000ecac         db  0x08 ; '.'
000000000000ecad         db  0x00 ; '.'
000000000000ecae         db  0x00 ; '.'
000000000000ecaf         db  0x00 ; '.'
000000000000ecb0         dd         0x0000001c                                  ; Length of the record
000000000000ecb4         dd         0x00001404                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ecb8         db         0x98, 0x9e, 2 dup (0xff)                    ; begin 0x8b50
000000000000ecbc         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x8bb0)
000000000000ecc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ecc1         db  0x44 ; 'D'
000000000000ecc2         db  0x0e ; '.'
000000000000ecc3         db  0x10 ; '.'
000000000000ecc4         db  0x75 ; 'u'
000000000000ecc5         db  0x0a ; '.'
000000000000ecc6         db  0x0e ; '.'
000000000000ecc7         db  0x08 ; '.'
000000000000ecc8         db  0x47 ; 'G'
000000000000ecc9         db  0x0b ; '.'
000000000000ecca         db  0x5f ; '_'
000000000000eccb         db  0x0e ; '.'
000000000000eccc         db  0x08 ; '.'
000000000000eccd         db  0x00 ; '.'
000000000000ecce         db  0x00 ; '.'
000000000000eccf         db  0x00 ; '.'
000000000000ecd0         dd         0x0000001c                                  ; Length of the record
000000000000ecd4         dd         0x00001424                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ecd8         db         0xd8, 0x9e, 2 dup (0xff)                    ; begin 0x8bb0
000000000000ecdc         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x8bec)
000000000000ece0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ece1         db  0x44 ; 'D'
000000000000ece2         db  0x0e ; '.'
000000000000ece3         db  0x10 ; '.'
000000000000ece4         db  0x61 ; 'a'
000000000000ece5         db  0x0a ; '.'
000000000000ece6         db  0x0e ; '.'
000000000000ece7         db  0x08 ; '.'
000000000000ece8         db  0x4b ; 'K'
000000000000ece9         db  0x0b ; '.'
000000000000ecea         db  0x4b ; 'K'
000000000000eceb         db  0x0e ; '.'
000000000000ecec         db  0x08 ; '.'
000000000000eced         db  0x00 ; '.'
000000000000ecee         db  0x00 ; '.'
000000000000ecef         db  0x00 ; '.'
000000000000ecf0         dd         0x00000014                                  ; Length of the record
000000000000ecf4         dd         0x00001444                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ecf8         db         0xf8, 0x9e, 2 dup (0xff)                    ; begin 0x8bf0
000000000000ecfc         db         0x04, 3 dup (0x00)                          ; length 0x4 (end at 0x8bf4)
000000000000ed00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed01         align      8
000000000000ed08         dd         0x0000002c                                  ; Length of the record
000000000000ed0c         dd         0x0000145c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ed10         db         0xf0, 0x9e, 2 dup (0xff)                    ; begin 0x8c00
000000000000ed14         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0x9d1f)
000000000000ed18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed19         db  0x41 ; 'A'
000000000000ed1a         db  0x0e ; '.'
000000000000ed1b         db  0x10 ; '.'
000000000000ed1c         db  0x86 ; '.'
000000000000ed1d         db  0x02 ; '.'
000000000000ed1e         db  0x43 ; 'C'
000000000000ed1f         db  0x0d ; '.'
000000000000ed20         db  0x06 ; '.'
000000000000ed21         db  0x48 ; 'H'
000000000000ed22         db  0x8f ; '.'
000000000000ed23         db  0x03 ; '.'
000000000000ed24         db  0x8e ; '.'
000000000000ed25         db  0x04 ; '.'
000000000000ed26         db  0x8d ; '.'
000000000000ed27         db  0x05 ; '.'
000000000000ed28         db  0x8c ; '.'
000000000000ed29         db  0x06 ; '.'
000000000000ed2a         db  0x48 ; 'H'
000000000000ed2b         db  0x83 ; '.'
000000000000ed2c         db  0x07 ; '.'
000000000000ed2d         db  0x03 ; '.'
000000000000ed2e         db  0xef ; '.'
000000000000ed2f         db  0x01 ; '.'
000000000000ed30         db  0x0a ; '.'
000000000000ed31         db  0x0c ; '.'
000000000000ed32         db  0x07 ; '.'
000000000000ed33         db  0x08 ; '.'
000000000000ed34         db  0x45 ; 'E'
000000000000ed35         db  0x0b ; '.'
000000000000ed36         db  0x00 ; '.'
000000000000ed37         db  0x00 ; '.'
000000000000ed38         dd         0x00000014                                  ; Length of the record
000000000000ed3c         dd         0x0000148c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ed40         db         0xe0, 0xaf, 2 dup (0xff)                    ; begin 0x9d20
000000000000ed44         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0x9f1e)
000000000000ed48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed49         align      16
000000000000ed50         dd         0x0000004c                                  ; Length of the record
000000000000ed54         dd         0x000014a4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ed58         db         0xc8, 0xb1, 2 dup (0xff)                    ; begin 0x9f20
000000000000ed5c         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0xac0c)
000000000000ed60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed61         db  0x42 ; 'B'
000000000000ed62         db  0x0e ; '.'
000000000000ed63         db  0x10 ; '.'
000000000000ed64         db  0x8f ; '.'
000000000000ed65         db  0x02 ; '.'
000000000000ed66         db  0x42 ; 'B'
000000000000ed67         db  0x0e ; '.'
000000000000ed68         db  0x18 ; '.'
000000000000ed69         db  0x8e ; '.'
000000000000ed6a         db  0x03 ; '.'
000000000000ed6b         db  0x46 ; 'F'
000000000000ed6c         db  0x0e ; '.'
000000000000ed6d         db  0x20 ; ' '
000000000000ed6e         db  0x8d ; '.'
000000000000ed6f         db  0x04 ; '.'
000000000000ed70         db  0x42 ; 'B'
000000000000ed71         db  0x0e ; '.'
000000000000ed72         db  0x28 ; '('
000000000000ed73         db  0x8c ; '.'
000000000000ed74         db  0x05 ; '.'
000000000000ed75         db  0x45 ; 'E'
000000000000ed76         db  0x0e ; '.'
000000000000ed77         db  0x30 ; '0'
000000000000ed78         db  0x86 ; '.'
000000000000ed79         db  0x06 ; '.'
000000000000ed7a         db  0x41 ; 'A'
000000000000ed7b         db  0x0e ; '.'
000000000000ed7c         db  0x38 ; '8'
000000000000ed7d         db  0x83 ; '.'
000000000000ed7e         db  0x07 ; '.'
000000000000ed7f         db  0x52 ; 'R'
000000000000ed80         db  0x0e ; '.'
000000000000ed81         db  0x90 ; '.'
000000000000ed82         db  0x01 ; '.'
000000000000ed83         db  0x02 ; '.'
000000000000ed84         db  0x82 ; '.'
000000000000ed85         db  0x0a ; '.'
000000000000ed86         db  0x0e ; '.'
000000000000ed87         db  0x38 ; '8'
000000000000ed88         db  0x41 ; 'A'
000000000000ed89         db  0x0e ; '.'
000000000000ed8a         db  0x30 ; '0'
000000000000ed8b         db  0x41 ; 'A'
000000000000ed8c         db  0x0e ; '.'
000000000000ed8d         db  0x28 ; '('
000000000000ed8e         db  0x42 ; 'B'
000000000000ed8f         db  0x0e ; '.'
000000000000ed90         db  0x20 ; ' '
000000000000ed91         db  0x42 ; 'B'
000000000000ed92         db  0x0e ; '.'
000000000000ed93         db  0x18 ; '.'
000000000000ed94         db  0x42 ; 'B'
000000000000ed95         db  0x0e ; '.'
000000000000ed96         db  0x10 ; '.'
000000000000ed97         db  0x42 ; 'B'
000000000000ed98         db  0x0e ; '.'
000000000000ed99         db  0x08 ; '.'
000000000000ed9a         db  0x48 ; 'H'
000000000000ed9b         db  0x0b ; '.'
000000000000ed9c         db  0x00 ; '.'
000000000000ed9d         db  0x00 ; '.'
000000000000ed9e         db  0x00 ; '.'
000000000000ed9f         db  0x00 ; '.'
000000000000eda0         dd         0x00000044                                  ; Length of the record
000000000000eda4         dd         0x000014f4                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000eda8         db         0x68, 0xbe, 2 dup (0xff)                    ; begin 0xac10
000000000000edac         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xac75)
000000000000edb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000edb1         db  0x42 ; 'B'
000000000000edb2         db  0x0e ; '.'
000000000000edb3         db  0x10 ; '.'
000000000000edb4         db  0x8f ; '.'
000000000000edb5         db  0x02 ; '.'
000000000000edb6         db  0x42 ; 'B'
000000000000edb7         db  0x0e ; '.'
000000000000edb8         db  0x18 ; '.'
000000000000edb9         db  0x8e ; '.'
000000000000edba         db  0x03 ; '.'
000000000000edbb         db  0x45 ; 'E'
000000000000edbc         db  0x0e ; '.'
000000000000edbd         db  0x20 ; ' '
000000000000edbe         db  0x8d ; '.'
000000000000edbf         db  0x04 ; '.'
000000000000edc0         db  0x42 ; 'B'
000000000000edc1         db  0x0e ; '.'
000000000000edc2         db  0x28 ; '('
000000000000edc3         db  0x8c ; '.'
000000000000edc4         db  0x05 ; '.'
000000000000edc5         db  0x48 ; 'H'
000000000000edc6         db  0x0e ; '.'
000000000000edc7         db  0x30 ; '0'
000000000000edc8         db  0x86 ; '.'
000000000000edc9         db  0x06 ; '.'
000000000000edca         db  0x48 ; 'H'
000000000000edcb         db  0x0e ; '.'
000000000000edcc         db  0x38 ; '8'
000000000000edcd         db  0x83 ; '.'
000000000000edce         db  0x07 ; '.'
000000000000edcf         db  0x4d ; 'M'
000000000000edd0         db  0x0e ; '.'
000000000000edd1         db  0x40 ; '@'
000000000000edd2         db  0x72 ; 'r'
000000000000edd3         db  0x0e ; '.'
000000000000edd4         db  0x38 ; '8'
000000000000edd5         db  0x41 ; 'A'
000000000000edd6         db  0x0e ; '.'
000000000000edd7         db  0x30 ; '0'
000000000000edd8         db  0x41 ; 'A'
000000000000edd9         db  0x0e ; '.'
000000000000edda         db  0x28 ; '('
000000000000eddb         db  0x42 ; 'B'
000000000000eddc         db  0x0e ; '.'
000000000000eddd         db  0x20 ; ' '
000000000000edde         db  0x42 ; 'B'
000000000000eddf         db  0x0e ; '.'
000000000000ede0         db  0x18 ; '.'
000000000000ede1         db  0x42 ; 'B'
000000000000ede2         db  0x0e ; '.'
000000000000ede3         db  0x10 ; '.'
000000000000ede4         db  0x42 ; 'B'
000000000000ede5         db  0x0e ; '.'
000000000000ede6         db  0x08 ; '.'
000000000000ede7         db  0x00 ; '.'
000000000000ede8         dd         0x00000014                                  ; Length of the record
000000000000edec         dd         0x0000153c                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000edf0         db         0x90, 0xbe, 2 dup (0xff)                    ; begin 0xac80
000000000000edf4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xac82)
000000000000edf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000edf9         align      512
000000000000ee00         dd         0x00000010                                  ; Length of the record
000000000000ee04         dd         0x00001554                                  ; FDE: parent CIE at 0xd8b0 (FDE encoding = 0x1B)
000000000000ee08         db         0x88, 0xbe, 2 dup (0xff)                    ; begin 0xac90
000000000000ee0c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xac9e)
000000000000ee10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee11         align      8


        ; Segment Segment 3
        ; Range: [0x20f9d0; 0x210378[ (2472 bytes)
        ; File offset : [63952; 65696[ (1744 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20f9d0; 0x20f9d8[ (8 bytes)
        ; File offset : [63952; 63960[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020f9d0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20f9d8; 0x20f9e0[ (8 bytes)
        ; File offset : [63960; 63968[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020f9d8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20f9e0; 0x20fbf8[ (536 bytes)
        ; File offset : [63968; 64504[ (536 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000020f9e0         db  0xc9 ; '.'                                         ; DATA XREF=main+352, main+1080, main+4479, main+4545, main+4575
000000000020f9e1         db  0xae ; '.'
000000000020f9e2         db  0x00 ; '.'
000000000020f9e3         db  0x00 ; '.'
000000000020f9e4         db  0x00 ; '.'
000000000020f9e5         db  0x00 ; '.'
000000000020f9e6         db  0x00 ; '.'
000000000020f9e7         db  0x00 ; '.'
000000000020f9e8         db  0x01 ; '.'
000000000020f9e9         db  0x00 ; '.'
000000000020f9ea         db  0x00 ; '.'
000000000020f9eb         db  0x00 ; '.'
000000000020f9ec         db  0x00 ; '.'
000000000020f9ed         db  0x00 ; '.'
000000000020f9ee         db  0x00 ; '.'
000000000020f9ef         db  0x00 ; '.'
000000000020f9f0         db  0x00 ; '.'
000000000020f9f1         db  0x00 ; '.'
000000000020f9f2         db  0x00 ; '.'
000000000020f9f3         db  0x00 ; '.'
000000000020f9f4         db  0x00 ; '.'
000000000020f9f5         db  0x00 ; '.'
000000000020f9f6         db  0x00 ; '.'
000000000020f9f7         db  0x00 ; '.'
000000000020f9f8         db  0x6a ; 'j'
000000000020f9f9         db  0x00 ; '.'
000000000020f9fa         db  0x00 ; '.'
000000000020f9fb         db  0x00 ; '.'
000000000020f9fc         db  0x00 ; '.'
000000000020f9fd         db  0x00 ; '.'
000000000020f9fe         db  0x00 ; '.'
000000000020f9ff         db  0x00 ; '.'
000000000020fa00         db  0xd4 ; '.'
000000000020fa01         db  0xae ; '.'
000000000020fa02         db  0x00 ; '.'
000000000020fa03         db  0x00 ; '.'
000000000020fa04         db  0x00 ; '.'
000000000020fa05         db  0x00 ; '.'
000000000020fa06         db  0x00 ; '.'
000000000020fa07         db  0x00 ; '.'
000000000020fa08         db  0x01 ; '.'
000000000020fa09         db  0x00 ; '.'
000000000020fa0a         db  0x00 ; '.'
000000000020fa0b         db  0x00 ; '.'
000000000020fa0c         db  0x00 ; '.'
000000000020fa0d         db  0x00 ; '.'
000000000020fa0e         db  0x00 ; '.'
000000000020fa0f         db  0x00 ; '.'
000000000020fa10         db  0x00 ; '.'
000000000020fa11         db  0x00 ; '.'
000000000020fa12         db  0x00 ; '.'
000000000020fa13         db  0x00 ; '.'
000000000020fa14         db  0x00 ; '.'
000000000020fa15         db  0x00 ; '.'
000000000020fa16         db  0x00 ; '.'
000000000020fa17         db  0x00 ; '.'
000000000020fa18         db  0x41 ; 'A'
000000000020fa19         db  0x00 ; '.'
000000000020fa1a         db  0x00 ; '.'
000000000020fa1b         db  0x00 ; '.'
000000000020fa1c         db  0x00 ; '.'
000000000020fa1d         db  0x00 ; '.'
000000000020fa1e         db  0x00 ; '.'
000000000020fa1f         db  0x00 ; '.'
000000000020fa20         db  0xe2 ; '.'
000000000020fa21         db  0xae ; '.'
000000000020fa22         db  0x00 ; '.'
000000000020fa23         db  0x00 ; '.'
000000000020fa24         db  0x00 ; '.'
000000000020fa25         db  0x00 ; '.'
000000000020fa26         db  0x00 ; '.'
000000000020fa27         db  0x00 ; '.'
000000000020fa28         db  0x01 ; '.'
000000000020fa29         db  0x00 ; '.'
000000000020fa2a         db  0x00 ; '.'
000000000020fa2b         db  0x00 ; '.'
000000000020fa2c         db  0x00 ; '.'
000000000020fa2d         db  0x00 ; '.'
000000000020fa2e         db  0x00 ; '.'
000000000020fa2f         db  0x00 ; '.'
000000000020fa30         db  0x00 ; '.'
000000000020fa31         db  0x00 ; '.'
000000000020fa32         db  0x00 ; '.'
000000000020fa33         db  0x00 ; '.'
000000000020fa34         db  0x00 ; '.'
000000000020fa35         db  0x00 ; '.'
000000000020fa36         db  0x00 ; '.'
000000000020fa37         db  0x00 ; '.'
000000000020fa38         db  0x4e ; 'N'
000000000020fa39         db  0x00 ; '.'
000000000020fa3a         db  0x00 ; '.'
000000000020fa3b         db  0x00 ; '.'
000000000020fa3c         db  0x00 ; '.'
000000000020fa3d         db  0x00 ; '.'
000000000020fa3e         db  0x00 ; '.'
000000000020fa3f         db  0x00 ; '.'
000000000020fa40         db  0xed ; '.'
000000000020fa41         db  0xae ; '.'
000000000020fa42         db  0x00 ; '.'
000000000020fa43         db  0x00 ; '.'
000000000020fa44         db  0x00 ; '.'
000000000020fa45         db  0x00 ; '.'
000000000020fa46         db  0x00 ; '.'
000000000020fa47         db  0x00 ; '.'
000000000020fa48         db  0x01 ; '.'
000000000020fa49         db  0x00 ; '.'
000000000020fa4a         db  0x00 ; '.'
000000000020fa4b         db  0x00 ; '.'
000000000020fa4c         db  0x00 ; '.'
000000000020fa4d         db  0x00 ; '.'
000000000020fa4e         db  0x00 ; '.'
000000000020fa4f         db  0x00 ; '.'
000000000020fa50         db  0x00 ; '.'
000000000020fa51         db  0x00 ; '.'
000000000020fa52         db  0x00 ; '.'
000000000020fa53         db  0x00 ; '.'
000000000020fa54         db  0x00 ; '.'
000000000020fa55         db  0x00 ; '.'
000000000020fa56         db  0x00 ; '.'
000000000020fa57         db  0x00 ; '.'
000000000020fa58         db  0x74 ; 't'
000000000020fa59         db  0x00 ; '.'
000000000020fa5a         db  0x00 ; '.'
000000000020fa5b         db  0x00 ; '.'
000000000020fa5c         db  0x00 ; '.'
000000000020fa5d         db  0x00 ; '.'
000000000020fa5e         db  0x00 ; '.'
000000000020fa5f         db  0x00 ; '.'
000000000020fa60         db  0xf4 ; '.'
000000000020fa61         db  0xae ; '.'
000000000020fa62         db  0x00 ; '.'
000000000020fa63         db  0x00 ; '.'
000000000020fa64         db  0x00 ; '.'
000000000020fa65         db  0x00 ; '.'
000000000020fa66         db  0x00 ; '.'
000000000020fa67         db  0x00 ; '.'
000000000020fa68         db  0x00 ; '.'
000000000020fa69         db  0x00 ; '.'
000000000020fa6a         db  0x00 ; '.'
000000000020fa6b         db  0x00 ; '.'
000000000020fa6c         db  0x00 ; '.'
000000000020fa6d         db  0x00 ; '.'
000000000020fa6e         db  0x00 ; '.'
000000000020fa6f         db  0x00 ; '.'
000000000020fa70         db  0x00 ; '.'
000000000020fa71         db  0x00 ; '.'
000000000020fa72         db  0x00 ; '.'
000000000020fa73         db  0x00 ; '.'
000000000020fa74         db  0x00 ; '.'
000000000020fa75         db  0x00 ; '.'
000000000020fa76         db  0x00 ; '.'
000000000020fa77         db  0x00 ; '.'
000000000020fa78         db  0x76 ; 'v'
000000000020fa79         db  0x00 ; '.'
000000000020fa7a         db  0x00 ; '.'
000000000020fa7b         db  0x00 ; '.'
000000000020fa7c         db  0x00 ; '.'
000000000020fa7d         db  0x00 ; '.'
000000000020fa7e         db  0x00 ; '.'
000000000020fa7f         db  0x00 ; '.'
000000000020fa80         db  0x06 ; '.'
000000000020fa81         db  0xaf ; '.'
000000000020fa82         db  0x00 ; '.'
000000000020fa83         db  0x00 ; '.'
000000000020fa84         db  0x00 ; '.'
000000000020fa85         db  0x00 ; '.'
000000000020fa86         db  0x00 ; '.'
000000000020fa87         db  0x00 ; '.'
000000000020fa88         db  0x02 ; '.'
000000000020fa89         db  0x00 ; '.'
000000000020fa8a         db  0x00 ; '.'
000000000020fa8b         db  0x00 ; '.'
000000000020fa8c         db  0x00 ; '.'
000000000020fa8d         db  0x00 ; '.'
000000000020fa8e         db  0x00 ; '.'
000000000020fa8f         db  0x00 ; '.'
000000000020fa90         db  0x00 ; '.'
000000000020fa91         db  0x00 ; '.'
000000000020fa92         db  0x00 ; '.'
000000000020fa93         db  0x00 ; '.'
000000000020fa94         db  0x00 ; '.'
000000000020fa95         db  0x00 ; '.'
000000000020fa96         db  0x00 ; '.'
000000000020fa97         db  0x00 ; '.'
000000000020fa98         db  0x53 ; 'S'
000000000020fa99         db  0x00 ; '.'
000000000020fa9a         db  0x00 ; '.'
000000000020fa9b         db  0x00 ; '.'
000000000020fa9c         db  0x00 ; '.'
000000000020fa9d         db  0x00 ; '.'
000000000020fa9e         db  0x00 ; '.'
000000000020fa9f         db  0x00 ; '.'
000000000020faa0         db  0x0e ; '.'
000000000020faa1         db  0xaf ; '.'
000000000020faa2         db  0x00 ; '.'
000000000020faa3         db  0x00 ; '.'
000000000020faa4         db  0x00 ; '.'
000000000020faa5         db  0x00 ; '.'
000000000020faa6         db  0x00 ; '.'
000000000020faa7         db  0x00 ; '.'
000000000020faa8         db  0x00 ; '.'
000000000020faa9         db  0x00 ; '.'
000000000020faaa         db  0x00 ; '.'
000000000020faab         db  0x00 ; '.'
000000000020faac         db  0x00 ; '.'
000000000020faad         db  0x00 ; '.'
000000000020faae         db  0x00 ; '.'
000000000020faaf         db  0x00 ; '.'
000000000020fab0         db  0x00 ; '.'
000000000020fab1         db  0x00 ; '.'
000000000020fab2         db  0x00 ; '.'
000000000020fab3         db  0x00 ; '.'
000000000020fab4         db  0x00 ; '.'
000000000020fab5         db  0x00 ; '.'
000000000020fab6         db  0x00 ; '.'
000000000020fab7         db  0x00 ; '.'
000000000020fab8         db  0x80 ; '.'
000000000020fab9         db  0x00 ; '.'
000000000020faba         db  0x00 ; '.'
000000000020fabb         db  0x00 ; '.'
000000000020fabc         db  0x00 ; '.'
000000000020fabd         db  0x00 ; '.'
000000000020fabe         db  0x00 ; '.'
000000000020fabf         db  0x00 ; '.'
000000000020fac0         db  0x1a ; '.'
000000000020fac1         db  0xaf ; '.'
000000000020fac2         db  0x00 ; '.'
000000000020fac3         db  0x00 ; '.'
000000000020fac4         db  0x00 ; '.'
000000000020fac5         db  0x00 ; '.'
000000000020fac6         db  0x00 ; '.'
000000000020fac7         db  0x00 ; '.'
000000000020fac8         db  0x02 ; '.'
000000000020fac9         db  0x00 ; '.'
000000000020faca         db  0x00 ; '.'
000000000020facb         db  0x00 ; '.'
000000000020facc         db  0x00 ; '.'
000000000020facd         db  0x00 ; '.'
000000000020face         db  0x00 ; '.'
000000000020facf         db  0x00 ; '.'
000000000020fad0         db  0x00 ; '.'
000000000020fad1         db  0x00 ; '.'
000000000020fad2         db  0x00 ; '.'
000000000020fad3         db  0x00 ; '.'
000000000020fad4         db  0x00 ; '.'
000000000020fad5         db  0x00 ; '.'
000000000020fad6         db  0x00 ; '.'
000000000020fad7         db  0x00 ; '.'
000000000020fad8         db  0x77 ; 'w'
000000000020fad9         db  0x00 ; '.'
000000000020fada         db  0x00 ; '.'
000000000020fadb         db  0x00 ; '.'
000000000020fadc         db  0x00 ; '.'
000000000020fadd         db  0x00 ; '.'
000000000020fade         db  0x00 ; '.'
000000000020fadf         db  0x00 ; '.'
000000000020fae0         db  0x7d ; '}'
000000000020fae1         db  0xae ; '.'
000000000020fae2         db  0x00 ; '.'
000000000020fae3         db  0x00 ; '.'
000000000020fae4         db  0x00 ; '.'
000000000020fae5         db  0x00 ; '.'
000000000020fae6         db  0x00 ; '.'
000000000020fae7         db  0x00 ; '.'
000000000020fae8         db  0x01 ; '.'
000000000020fae9         db  0x00 ; '.'
000000000020faea         db  0x00 ; '.'
000000000020faeb         db  0x00 ; '.'
000000000020faec         db  0x00 ; '.'
000000000020faed         db  0x00 ; '.'
000000000020faee         db  0x00 ; '.'
000000000020faef         db  0x00 ; '.'
000000000020faf0         db  0x00 ; '.'
000000000020faf1         db  0x00 ; '.'
000000000020faf2         db  0x00 ; '.'
000000000020faf3         db  0x00 ; '.'
000000000020faf4         db  0x00 ; '.'
000000000020faf5         db  0x00 ; '.'
000000000020faf6         db  0x00 ; '.'
000000000020faf7         db  0x00 ; '.'
000000000020faf8         db  0x81 ; '.'
000000000020faf9         db  0x00 ; '.'
000000000020fafa         db  0x00 ; '.'
000000000020fafb         db  0x00 ; '.'
000000000020fafc         db  0x00 ; '.'
000000000020fafd         db  0x00 ; '.'
000000000020fafe         db  0x00 ; '.'
000000000020faff         db  0x00 ; '.'
000000000020fb00         db  0x20 ; ' '
000000000020fb01         db  0xaf ; '.'
000000000020fb02         db  0x00 ; '.'
000000000020fb03         db  0x00 ; '.'
000000000020fb04         db  0x00 ; '.'
000000000020fb05         db  0x00 ; '.'
000000000020fb06         db  0x00 ; '.'
000000000020fb07         db  0x00 ; '.'
000000000020fb08         db  0x00 ; '.'
000000000020fb09         db  0x00 ; '.'
000000000020fb0a         db  0x00 ; '.'
000000000020fb0b         db  0x00 ; '.'
000000000020fb0c         db  0x00 ; '.'
000000000020fb0d         db  0x00 ; '.'
000000000020fb0e         db  0x00 ; '.'
000000000020fb0f         db  0x00 ; '.'
000000000020fb10         db  0x00 ; '.'
000000000020fb11         db  0x00 ; '.'
000000000020fb12         db  0x00 ; '.'
000000000020fb13         db  0x00 ; '.'
000000000020fb14         db  0x00 ; '.'
000000000020fb15         db  0x00 ; '.'
000000000020fb16         db  0x00 ; '.'
000000000020fb17         db  0x00 ; '.'
000000000020fb18         db  0x7e ; '~'
000000000020fb19         db  0xff ; '.'
000000000020fb1a         db  0xff ; '.'
000000000020fb1b         db  0xff ; '.'
000000000020fb1c         db  0x00 ; '.'
000000000020fb1d         db  0x00 ; '.'
000000000020fb1e         db  0x00 ; '.'
000000000020fb1f         db  0x00 ; '.'
000000000020fb20         db  0x25 ; '%'
000000000020fb21         db  0xaf ; '.'
000000000020fb22         db  0x00 ; '.'
000000000020fb23         db  0x00 ; '.'
000000000020fb24         db  0x00 ; '.'
000000000020fb25         db  0x00 ; '.'
000000000020fb26         db  0x00 ; '.'
000000000020fb27         db  0x00 ; '.'
000000000020fb28         db  0x00 ; '.'
000000000020fb29         db  0x00 ; '.'
000000000020fb2a         db  0x00 ; '.'
000000000020fb2b         db  0x00 ; '.'
000000000020fb2c         db  0x00 ; '.'
000000000020fb2d         db  0x00 ; '.'
000000000020fb2e         db  0x00 ; '.'
000000000020fb2f         db  0x00 ; '.'
000000000020fb30         db  0x00 ; '.'
000000000020fb31         db  0x00 ; '.'
000000000020fb32         db  0x00 ; '.'
000000000020fb33         db  0x00 ; '.'
000000000020fb34         db  0x00 ; '.'
000000000020fb35         db  0x00 ; '.'
000000000020fb36         db  0x00 ; '.'
000000000020fb37         db  0x00 ; '.'
000000000020fb38         db  0x7d ; '}'
000000000020fb39         db  0xff ; '.'
000000000020fb3a         db  0xff ; '.'
000000000020fb3b         db  0xff ; '.'
000000000020fb3c         db  0x00 ; '.'
000000000020fb3d         db  0x00 ; '.'
000000000020fb3e         db  0x00 ; '.'
000000000020fb3f         db  0x00 ; '.'
000000000020fb40         db  0x00 ; '.'
000000000020fb41         db  0x00 ; '.'
000000000020fb42         db  0x00 ; '.'
000000000020fb43         db  0x00 ; '.'
000000000020fb44         db  0x00 ; '.'
000000000020fb45         db  0x00 ; '.'
000000000020fb46         db  0x00 ; '.'
000000000020fb47         db  0x00 ; '.'
000000000020fb48         db  0x00 ; '.'
000000000020fb49         db  0x00 ; '.'
000000000020fb4a         db  0x00 ; '.'
000000000020fb4b         db  0x00 ; '.'
000000000020fb4c         db  0x00 ; '.'
000000000020fb4d         db  0x00 ; '.'
000000000020fb4e         db  0x00 ; '.'
000000000020fb4f         db  0x00 ; '.'
000000000020fb50         db  0x00 ; '.'
000000000020fb51         db  0x00 ; '.'
000000000020fb52         db  0x00 ; '.'
000000000020fb53         db  0x00 ; '.'
000000000020fb54         db  0x00 ; '.'
000000000020fb55         db  0x00 ; '.'
000000000020fb56         db  0x00 ; '.'
000000000020fb57         db  0x00 ; '.'
000000000020fb58         db  0x00 ; '.'
000000000020fb59         db  0x00 ; '.'
000000000020fb5a         db  0x00 ; '.'
000000000020fb5b         db  0x00 ; '.'
000000000020fb5c         db  0x00 ; '.'
000000000020fb5d         db  0x00 ; '.'
000000000020fb5e         db  0x00 ; '.'
000000000020fb5f         db  0x00 ; '.'
                     endian_args:
000000000020fb60         db  0x2d ; '-'                                         ; DATA XREF=main+446
000000000020fb61         db  0xaf ; '.'
000000000020fb62         db  0x00 ; '.'
000000000020fb63         db  0x00 ; '.'
000000000020fb64         db  0x00 ; '.'
000000000020fb65         db  0x00 ; '.'
000000000020fb66         db  0x00 ; '.'
000000000020fb67         db  0x00 ; '.'
000000000020fb68         db  0x34 ; '4'
000000000020fb69         db  0xaf ; '.'
000000000020fb6a         db  0x00 ; '.'
000000000020fb6b         db  0x00 ; '.'
000000000020fb6c         db  0x00 ; '.'
000000000020fb6d         db  0x00 ; '.'
000000000020fb6e         db  0x00 ; '.'
000000000020fb6f         db  0x00 ; '.'
000000000020fb70         db  0x00 ; '.'
000000000020fb71         db  0x00 ; '.'
000000000020fb72         db  0x00 ; '.'
000000000020fb73         db  0x00 ; '.'
000000000020fb74         db  0x00 ; '.'
000000000020fb75         db  0x00 ; '.'
000000000020fb76         db  0x00 ; '.'
000000000020fb77         db  0x00 ; '.'
000000000020fb78         db  0x00 ; '.'
000000000020fb79         db  0x00 ; '.'
000000000020fb7a         db  0x00 ; '.'
000000000020fb7b         db  0x00 ; '.'
000000000020fb7c         db  0x00 ; '.'
000000000020fb7d         db  0x00 ; '.'
000000000020fb7e         db  0x00 ; '.'
000000000020fb7f         db  0x00 ; '.'
                     default_file_list:
000000000020fb80         db  0x39 ; '9'                                         ; DATA XREF=main+2784
000000000020fb81         db  0xd1 ; '.'
000000000020fb82         db  0x00 ; '.'
000000000020fb83         db  0x00 ; '.'
000000000020fb84         db  0x00 ; '.'
000000000020fb85         db  0x00 ; '.'
000000000020fb86         db  0x00 ; '.'
000000000020fb87         db  0x00 ; '.'
000000000020fb88         db  0x00 ; '.'
000000000020fb89         db  0x00 ; '.'
000000000020fb8a         db  0x00 ; '.'
000000000020fb8b         db  0x00 ; '.'
000000000020fb8c         db  0x00 ; '.'
000000000020fb8d         db  0x00 ; '.'
000000000020fb8e         db  0x00 ; '.'
000000000020fb8f         db  0x00 ; '.'
000000000020fb90         db  0x00 ; '.'
000000000020fb91         db  0x00 ; '.'
000000000020fb92         db  0x00 ; '.'
000000000020fb93         db  0x00 ; '.'
000000000020fb94         db  0x00 ; '.'
000000000020fb95         db  0x00 ; '.'
000000000020fb96         db  0x00 ; '.'
000000000020fb97         db  0x00 ; '.'
000000000020fb98         db  0x00 ; '.'
000000000020fb99         db  0x00 ; '.'
000000000020fb9a         db  0x00 ; '.'
000000000020fb9b         db  0x00 ; '.'
000000000020fb9c         db  0x00 ; '.'
000000000020fb9d         db  0x00 ; '.'
000000000020fb9e         db  0x00 ; '.'
000000000020fb9f         db  0x00 ; '.'
                     quoting_style_args:
000000000020fba0         db  0x97 ; '.'
000000000020fba1         db  0xc8 ; '.'
000000000020fba2         db  0x00 ; '.'
000000000020fba3         db  0x00 ; '.'
000000000020fba4         db  0x00 ; '.'
000000000020fba5         db  0x00 ; '.'
000000000020fba6         db  0x00 ; '.'
000000000020fba7         db  0x00 ; '.'
000000000020fba8         db  0x9f ; '.'
000000000020fba9         db  0xc8 ; '.'
000000000020fbaa         db  0x00 ; '.'
000000000020fbab         db  0x00 ; '.'
000000000020fbac         db  0x00 ; '.'
000000000020fbad         db  0x00 ; '.'
000000000020fbae         db  0x00 ; '.'
000000000020fbaf         db  0x00 ; '.'
000000000020fbb0         db  0xa5 ; '.'
000000000020fbb1         db  0xc8 ; '.'
000000000020fbb2         db  0x00 ; '.'
000000000020fbb3         db  0x00 ; '.'
000000000020fbb4         db  0x00 ; '.'
000000000020fbb5         db  0x00 ; '.'
000000000020fbb6         db  0x00 ; '.'
000000000020fbb7         db  0x00 ; '.'
000000000020fbb8         db  0xb2 ; '.'
000000000020fbb9         db  0xc8 ; '.'
000000000020fbba         db  0x00 ; '.'
000000000020fbbb         db  0x00 ; '.'
000000000020fbbc         db  0x00 ; '.'
000000000020fbbd         db  0x00 ; '.'
000000000020fbbe         db  0x00 ; '.'
000000000020fbbf         db  0x00 ; '.'
000000000020fbc0         db  0xbf ; '.'
000000000020fbc1         db  0xc8 ; '.'
000000000020fbc2         db  0x00 ; '.'
000000000020fbc3         db  0x00 ; '.'
000000000020fbc4         db  0x00 ; '.'
000000000020fbc5         db  0x00 ; '.'
000000000020fbc6         db  0x00 ; '.'
000000000020fbc7         db  0x00 ; '.'
000000000020fbc8         db  0x50 ; 'P'
000000000020fbc9         db  0xad ; '.'
000000000020fbca         db  0x00 ; '.'
000000000020fbcb         db  0x00 ; '.'
000000000020fbcc         db  0x00 ; '.'
000000000020fbcd         db  0x00 ; '.'
000000000020fbce         db  0x00 ; '.'
000000000020fbcf         db  0x00 ; '.'
000000000020fbd0         db  0xd3 ; '.'
000000000020fbd1         db  0xc8 ; '.'
000000000020fbd2         db  0x00 ; '.'
000000000020fbd3         db  0x00 ; '.'
000000000020fbd4         db  0x00 ; '.'
000000000020fbd5         db  0x00 ; '.'
000000000020fbd6         db  0x00 ; '.'
000000000020fbd7         db  0x00 ; '.'
000000000020fbd8         db  0xb8 ; '.'
000000000020fbd9         db  0xc8 ; '.'
000000000020fbda         db  0x00 ; '.'
000000000020fbdb         db  0x00 ; '.'
000000000020fbdc         db  0x00 ; '.'
000000000020fbdd         db  0x00 ; '.'
000000000020fbde         db  0x00 ; '.'
000000000020fbdf         db  0x00 ; '.'
000000000020fbe0         db  0x74 ; 't'
000000000020fbe1         db  0xae ; '.'
000000000020fbe2         db  0x00 ; '.'
000000000020fbe3         db  0x00 ; '.'
000000000020fbe4         db  0x00 ; '.'
000000000020fbe5         db  0x00 ; '.'
000000000020fbe6         db  0x00 ; '.'
000000000020fbe7         db  0x00 ; '.'
000000000020fbe8         db  0xdb ; '.'
000000000020fbe9         db  0xc8 ; '.'
000000000020fbea         db  0x00 ; '.'
000000000020fbeb         db  0x00 ; '.'
000000000020fbec         db  0x00 ; '.'
000000000020fbed         db  0x00 ; '.'
000000000020fbee         db  0x00 ; '.'
000000000020fbef         db  0x00 ; '.'
000000000020fbf0         db  0x00 ; '.'
000000000020fbf1         db  0x00 ; '.'
000000000020fbf2         db  0x00 ; '.'
000000000020fbf3         db  0x00 ; '.'
000000000020fbf4         db  0x00 ; '.'
000000000020fbf5         db  0x00 ; '.'
000000000020fbf6         db  0x00 ; '.'
000000000020fbf7         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20fbf8; 0x20fde8[ (496 bytes)
        ; File offset : [64504; 65000[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020fbf8         db  0x01 ; '.'
000000000020fbf9         db  0x00 ; '.'
000000000020fbfa         db  0x00 ; '.'
000000000020fbfb         db  0x00 ; '.'
000000000020fbfc         db  0x00 ; '.'
000000000020fbfd         db  0x00 ; '.'
000000000020fbfe         db  0x00 ; '.'
000000000020fbff         db  0x00 ; '.'
000000000020fc00         db  0x01 ; '.'
000000000020fc01         db  0x00 ; '.'
000000000020fc02         db  0x00 ; '.'
000000000020fc03         db  0x00 ; '.'
000000000020fc04         db  0x00 ; '.'
000000000020fc05         db  0x00 ; '.'
000000000020fc06         db  0x00 ; '.'
000000000020fc07         db  0x00 ; '.'
000000000020fc08         db  0x0c ; '.'
000000000020fc09         db  0x00 ; '.'
000000000020fc0a         db  0x00 ; '.'
000000000020fc0b         db  0x00 ; '.'
000000000020fc0c         db  0x00 ; '.'
000000000020fc0d         db  0x00 ; '.'
000000000020fc0e         db  0x00 ; '.'
000000000020fc0f         db  0x00 ; '.'
000000000020fc10         db  0x90 ; '.'
000000000020fc11         db  0x17 ; '.'
000000000020fc12         db  0x00 ; '.'
000000000020fc13         db  0x00 ; '.'
000000000020fc14         db  0x00 ; '.'
000000000020fc15         db  0x00 ; '.'
000000000020fc16         db  0x00 ; '.'
000000000020fc17         db  0x00 ; '.'
000000000020fc18         db  0x0d ; '.'
000000000020fc19         db  0x00 ; '.'
000000000020fc1a         db  0x00 ; '.'
000000000020fc1b         db  0x00 ; '.'
000000000020fc1c         db  0x00 ; '.'
000000000020fc1d         db  0x00 ; '.'
000000000020fc1e         db  0x00 ; '.'
000000000020fc1f         db  0x00 ; '.'
000000000020fc20         db  0xa0 ; '.'
000000000020fc21         db  0xac ; '.'
000000000020fc22         db  0x00 ; '.'
000000000020fc23         db  0x00 ; '.'
000000000020fc24         db  0x00 ; '.'
000000000020fc25         db  0x00 ; '.'
000000000020fc26         db  0x00 ; '.'
000000000020fc27         db  0x00 ; '.'
000000000020fc28         db  0x19 ; '.'
000000000020fc29         db  0x00 ; '.'
000000000020fc2a         db  0x00 ; '.'
000000000020fc2b         db  0x00 ; '.'
000000000020fc2c         db  0x00 ; '.'
000000000020fc2d         db  0x00 ; '.'
000000000020fc2e         db  0x00 ; '.'
000000000020fc2f         db  0x00 ; '.'
000000000020fc30         db  0xd0 ; '.'
000000000020fc31         db  0xf9 ; '.'
000000000020fc32         db  0x20 ; ' '
000000000020fc33         db  0x00 ; '.'
000000000020fc34         db  0x00 ; '.'
000000000020fc35         db  0x00 ; '.'
000000000020fc36         db  0x00 ; '.'
000000000020fc37         db  0x00 ; '.'
000000000020fc38         db  0x1b ; '.'
000000000020fc39         db  0x00 ; '.'
000000000020fc3a         db  0x00 ; '.'
000000000020fc3b         db  0x00 ; '.'
000000000020fc3c         db  0x00 ; '.'
000000000020fc3d         db  0x00 ; '.'
000000000020fc3e         db  0x00 ; '.'
000000000020fc3f         db  0x00 ; '.'
000000000020fc40         db  0x08 ; '.'
000000000020fc41         db  0x00 ; '.'
000000000020fc42         db  0x00 ; '.'
000000000020fc43         db  0x00 ; '.'
000000000020fc44         db  0x00 ; '.'
000000000020fc45         db  0x00 ; '.'
000000000020fc46         db  0x00 ; '.'
000000000020fc47         db  0x00 ; '.'
000000000020fc48         db  0x1a ; '.'
000000000020fc49         db  0x00 ; '.'
000000000020fc4a         db  0x00 ; '.'
000000000020fc4b         db  0x00 ; '.'
000000000020fc4c         db  0x00 ; '.'
000000000020fc4d         db  0x00 ; '.'
000000000020fc4e         db  0x00 ; '.'
000000000020fc4f         db  0x00 ; '.'
000000000020fc50         db  0xd8 ; '.'
000000000020fc51         db  0xf9 ; '.'
000000000020fc52         db  0x20 ; ' '
000000000020fc53         db  0x00 ; '.'
000000000020fc54         db  0x00 ; '.'
000000000020fc55         db  0x00 ; '.'
000000000020fc56         db  0x00 ; '.'
000000000020fc57         db  0x00 ; '.'
000000000020fc58         db  0x1c ; '.'
000000000020fc59         db  0x00 ; '.'
000000000020fc5a         db  0x00 ; '.'
000000000020fc5b         db  0x00 ; '.'
000000000020fc5c         db  0x00 ; '.'
000000000020fc5d         db  0x00 ; '.'
000000000020fc5e         db  0x00 ; '.'
000000000020fc5f         db  0x00 ; '.'
000000000020fc60         db  0x08 ; '.'
000000000020fc61         db  0x00 ; '.'
000000000020fc62         db  0x00 ; '.'
000000000020fc63         db  0x00 ; '.'
000000000020fc64         db  0x00 ; '.'
000000000020fc65         db  0x00 ; '.'
000000000020fc66         db  0x00 ; '.'
000000000020fc67         db  0x00 ; '.'
000000000020fc68         db  0xf5 ; '.'
000000000020fc69         db  0xfe ; '.'
000000000020fc6a         db  0xff ; '.'
000000000020fc6b         db  0x6f ; 'o'
000000000020fc6c         db  0x00 ; '.'
000000000020fc6d         db  0x00 ; '.'
000000000020fc6e         db  0x00 ; '.'
000000000020fc6f         db  0x00 ; '.'
000000000020fc70         db  0x98 ; '.'
000000000020fc71         db  0x02 ; '.'
000000000020fc72         db  0x00 ; '.'
000000000020fc73         db  0x00 ; '.'
000000000020fc74         db  0x00 ; '.'
000000000020fc75         db  0x00 ; '.'
000000000020fc76         db  0x00 ; '.'
000000000020fc77         db  0x00 ; '.'
000000000020fc78         db  0x05 ; '.'
000000000020fc79         db  0x00 ; '.'
000000000020fc7a         db  0x00 ; '.'
000000000020fc7b         db  0x00 ; '.'
000000000020fc7c         db  0x00 ; '.'
000000000020fc7d         db  0x00 ; '.'
000000000020fc7e         db  0x00 ; '.'
000000000020fc7f         db  0x00 ; '.'
000000000020fc80         db  0xb8 ; '.'
000000000020fc81         db  0x09 ; '.'
000000000020fc82         db  0x00 ; '.'
000000000020fc83         db  0x00 ; '.'
000000000020fc84         db  0x00 ; '.'
000000000020fc85         db  0x00 ; '.'
000000000020fc86         db  0x00 ; '.'
000000000020fc87         db  0x00 ; '.'
000000000020fc88         db  0x06 ; '.'
000000000020fc89         db  0x00 ; '.'
000000000020fc8a         db  0x00 ; '.'
000000000020fc8b         db  0x00 ; '.'
000000000020fc8c         db  0x00 ; '.'
000000000020fc8d         db  0x00 ; '.'
000000000020fc8e         db  0x00 ; '.'
000000000020fc8f         db  0x00 ; '.'
000000000020fc90         db  0xe0 ; '.'
000000000020fc91         db  0x02 ; '.'
000000000020fc92         db  0x00 ; '.'
000000000020fc93         db  0x00 ; '.'
000000000020fc94         db  0x00 ; '.'
000000000020fc95         db  0x00 ; '.'
000000000020fc96         db  0x00 ; '.'
000000000020fc97         db  0x00 ; '.'
000000000020fc98         db  0x0a ; '.'
000000000020fc99         db  0x00 ; '.'
000000000020fc9a         db  0x00 ; '.'
000000000020fc9b         db  0x00 ; '.'
000000000020fc9c         db  0x00 ; '.'
000000000020fc9d         db  0x00 ; '.'
000000000020fc9e         db  0x00 ; '.'
000000000020fc9f         db  0x00 ; '.'
000000000020fca0         db  0x57 ; 'W'
000000000020fca1         db  0x03 ; '.'
000000000020fca2         db  0x00 ; '.'
000000000020fca3         db  0x00 ; '.'
000000000020fca4         db  0x00 ; '.'
000000000020fca5         db  0x00 ; '.'
000000000020fca6         db  0x00 ; '.'
000000000020fca7         db  0x00 ; '.'
000000000020fca8         db  0x0b ; '.'
000000000020fca9         db  0x00 ; '.'
000000000020fcaa         db  0x00 ; '.'
000000000020fcab         db  0x00 ; '.'
000000000020fcac         db  0x00 ; '.'
000000000020fcad         db  0x00 ; '.'
000000000020fcae         db  0x00 ; '.'
000000000020fcaf         db  0x00 ; '.'
000000000020fcb0         db  0x18 ; '.'
000000000020fcb1         db  0x00 ; '.'
000000000020fcb2         db  0x00 ; '.'
000000000020fcb3         db  0x00 ; '.'
000000000020fcb4         db  0x00 ; '.'
000000000020fcb5         db  0x00 ; '.'
000000000020fcb6         db  0x00 ; '.'
000000000020fcb7         db  0x00 ; '.'
000000000020fcb8         db  0x15 ; '.'
000000000020fcb9         db  0x00 ; '.'
000000000020fcba         db  0x00 ; '.'
000000000020fcbb         db  0x00 ; '.'
000000000020fcbc         db  0x00 ; '.'
000000000020fcbd         db  0x00 ; '.'
000000000020fcbe         db  0x00 ; '.'
000000000020fcbf         db  0x00 ; '.'
000000000020fcc0         db  0x00 ; '.'
000000000020fcc1         db  0x00 ; '.'
000000000020fcc2         db  0x00 ; '.'
000000000020fcc3         db  0x00 ; '.'
000000000020fcc4         db  0x00 ; '.'
000000000020fcc5         db  0x00 ; '.'
000000000020fcc6         db  0x00 ; '.'
000000000020fcc7         db  0x00 ; '.'
000000000020fcc8         db  0x03 ; '.'
000000000020fcc9         db  0x00 ; '.'
000000000020fcca         db  0x00 ; '.'
000000000020fccb         db  0x00 ; '.'
000000000020fccc         db  0x00 ; '.'
000000000020fccd         db  0x00 ; '.'
000000000020fcce         db  0x00 ; '.'
000000000020fccf         db  0x00 ; '.'
000000000020fcd0         db  0xe8 ; '.'
000000000020fcd1         db  0xfd ; '.'
000000000020fcd2         db  0x20 ; ' '
000000000020fcd3         db  0x00 ; '.'
000000000020fcd4         db  0x00 ; '.'
000000000020fcd5         db  0x00 ; '.'
000000000020fcd6         db  0x00 ; '.'
000000000020fcd7         db  0x00 ; '.'
000000000020fcd8         db  0x02 ; '.'
000000000020fcd9         db  0x00 ; '.'
000000000020fcda         db  0x00 ; '.'
000000000020fcdb         db  0x00 ; '.'
000000000020fcdc         db  0x00 ; '.'
000000000020fcdd         db  0x00 ; '.'
000000000020fcde         db  0x00 ; '.'
000000000020fcdf         db  0x00 ; '.'
000000000020fce0         db  0x70 ; 'p'
000000000020fce1         db  0x05 ; '.'
000000000020fce2         db  0x00 ; '.'
000000000020fce3         db  0x00 ; '.'
000000000020fce4         db  0x00 ; '.'
000000000020fce5         db  0x00 ; '.'
000000000020fce6         db  0x00 ; '.'
000000000020fce7         db  0x00 ; '.'
000000000020fce8         db  0x14 ; '.'
000000000020fce9         db  0x00 ; '.'
000000000020fcea         db  0x00 ; '.'
000000000020fceb         db  0x00 ; '.'
000000000020fcec         db  0x00 ; '.'
000000000020fced         db  0x00 ; '.'
000000000020fcee         db  0x00 ; '.'
000000000020fcef         db  0x00 ; '.'
000000000020fcf0         db  0x07 ; '.'
000000000020fcf1         db  0x00 ; '.'
000000000020fcf2         db  0x00 ; '.'
000000000020fcf3         db  0x00 ; '.'
000000000020fcf4         db  0x00 ; '.'
000000000020fcf5         db  0x00 ; '.'
000000000020fcf6         db  0x00 ; '.'
000000000020fcf7         db  0x00 ; '.'
000000000020fcf8         db  0x17 ; '.'
000000000020fcf9         db  0x00 ; '.'
000000000020fcfa         db  0x00 ; '.'
000000000020fcfb         db  0x00 ; '.'
000000000020fcfc         db  0x00 ; '.'
000000000020fcfd         db  0x00 ; '.'
000000000020fcfe         db  0x00 ; '.'
000000000020fcff         db  0x00 ; '.'
000000000020fd00         db  0x20 ; ' '
000000000020fd01         db  0x12 ; '.'
000000000020fd02         db  0x00 ; '.'
000000000020fd03         db  0x00 ; '.'
000000000020fd04         db  0x00 ; '.'
000000000020fd05         db  0x00 ; '.'
000000000020fd06         db  0x00 ; '.'
000000000020fd07         db  0x00 ; '.'
000000000020fd08         db  0x07 ; '.'
000000000020fd09         db  0x00 ; '.'
000000000020fd0a         db  0x00 ; '.'
000000000020fd0b         db  0x00 ; '.'
000000000020fd0c         db  0x00 ; '.'
000000000020fd0d         db  0x00 ; '.'
000000000020fd0e         db  0x00 ; '.'
000000000020fd0f         db  0x00 ; '.'
000000000020fd10         db  0x18 ; '.'
000000000020fd11         db  0x0e ; '.'
000000000020fd12         db  0x00 ; '.'
000000000020fd13         db  0x00 ; '.'
000000000020fd14         db  0x00 ; '.'
000000000020fd15         db  0x00 ; '.'
000000000020fd16         db  0x00 ; '.'
000000000020fd17         db  0x00 ; '.'
000000000020fd18         db  0x08 ; '.'
000000000020fd19         db  0x00 ; '.'
000000000020fd1a         db  0x00 ; '.'
000000000020fd1b         db  0x00 ; '.'
000000000020fd1c         db  0x00 ; '.'
000000000020fd1d         db  0x00 ; '.'
000000000020fd1e         db  0x00 ; '.'
000000000020fd1f         db  0x00 ; '.'
000000000020fd20         db  0x08 ; '.'
000000000020fd21         db  0x04 ; '.'
000000000020fd22         db  0x00 ; '.'
000000000020fd23         db  0x00 ; '.'
000000000020fd24         db  0x00 ; '.'
000000000020fd25         db  0x00 ; '.'
000000000020fd26         db  0x00 ; '.'
000000000020fd27         db  0x00 ; '.'
000000000020fd28         db  0x09 ; '.'
000000000020fd29         db  0x00 ; '.'
000000000020fd2a         db  0x00 ; '.'
000000000020fd2b         db  0x00 ; '.'
000000000020fd2c         db  0x00 ; '.'
000000000020fd2d         db  0x00 ; '.'
000000000020fd2e         db  0x00 ; '.'
000000000020fd2f         db  0x00 ; '.'
000000000020fd30         db  0x18 ; '.'
000000000020fd31         db  0x00 ; '.'
000000000020fd32         db  0x00 ; '.'
000000000020fd33         db  0x00 ; '.'
000000000020fd34         db  0x00 ; '.'
000000000020fd35         db  0x00 ; '.'
000000000020fd36         db  0x00 ; '.'
000000000020fd37         db  0x00 ; '.'
000000000020fd38         db  0x1e ; '.'
000000000020fd39         db  0x00 ; '.'
000000000020fd3a         db  0x00 ; '.'
000000000020fd3b         db  0x00 ; '.'
000000000020fd3c         db  0x00 ; '.'
000000000020fd3d         db  0x00 ; '.'
000000000020fd3e         db  0x00 ; '.'
000000000020fd3f         db  0x00 ; '.'
000000000020fd40         db  0x08 ; '.'
000000000020fd41         db  0x00 ; '.'
000000000020fd42         db  0x00 ; '.'
000000000020fd43         db  0x00 ; '.'
000000000020fd44         db  0x00 ; '.'
000000000020fd45         db  0x00 ; '.'
000000000020fd46         db  0x00 ; '.'
000000000020fd47         db  0x00 ; '.'
000000000020fd48         db  0xfb ; '.'
000000000020fd49         db  0xff ; '.'
000000000020fd4a         db  0xff ; '.'
000000000020fd4b         db  0x6f ; 'o'
000000000020fd4c         db  0x00 ; '.'
000000000020fd4d         db  0x00 ; '.'
000000000020fd4e         db  0x00 ; '.'
000000000020fd4f         db  0x00 ; '.'
000000000020fd50         db  0x01 ; '.'
000000000020fd51         db  0x00 ; '.'
000000000020fd52         db  0x00 ; '.'
000000000020fd53         db  0x08 ; '.'
000000000020fd54         db  0x00 ; '.'
000000000020fd55         db  0x00 ; '.'
000000000020fd56         db  0x00 ; '.'
000000000020fd57         db  0x00 ; '.'
000000000020fd58         db  0xfe ; '.'
000000000020fd59         db  0xff ; '.'
000000000020fd5a         db  0xff ; '.'
000000000020fd5b         db  0x6f ; 'o'
000000000020fd5c         db  0x00 ; '.'
000000000020fd5d         db  0x00 ; '.'
000000000020fd5e         db  0x00 ; '.'
000000000020fd5f         db  0x00 ; '.'
000000000020fd60         db  0xa8 ; '.'
000000000020fd61         db  0x0d ; '.'
000000000020fd62         db  0x00 ; '.'
000000000020fd63         db  0x00 ; '.'
000000000020fd64         db  0x00 ; '.'
000000000020fd65         db  0x00 ; '.'
000000000020fd66         db  0x00 ; '.'
000000000020fd67         db  0x00 ; '.'
000000000020fd68         db  0xff ; '.'
000000000020fd69         db  0xff ; '.'
000000000020fd6a         db  0xff ; '.'
000000000020fd6b         db  0x6f ; 'o'
000000000020fd6c         db  0x00 ; '.'
000000000020fd6d         db  0x00 ; '.'
000000000020fd6e         db  0x00 ; '.'
000000000020fd6f         db  0x00 ; '.'
000000000020fd70         db  0x01 ; '.'
000000000020fd71         db  0x00 ; '.'
000000000020fd72         db  0x00 ; '.'
000000000020fd73         db  0x00 ; '.'
000000000020fd74         db  0x00 ; '.'
000000000020fd75         db  0x00 ; '.'
000000000020fd76         db  0x00 ; '.'
000000000020fd77         db  0x00 ; '.'
000000000020fd78         db  0xf0 ; '.'
000000000020fd79         db  0xff ; '.'
000000000020fd7a         db  0xff ; '.'
000000000020fd7b         db  0x6f ; 'o'
000000000020fd7c         db  0x00 ; '.'
000000000020fd7d         db  0x00 ; '.'
000000000020fd7e         db  0x00 ; '.'
000000000020fd7f         db  0x00 ; '.'
000000000020fd80         db  0x10 ; '.'
000000000020fd81         db  0x0d ; '.'
000000000020fd82         db  0x00 ; '.'
000000000020fd83         db  0x00 ; '.'
000000000020fd84         db  0x00 ; '.'
000000000020fd85         db  0x00 ; '.'
000000000020fd86         db  0x00 ; '.'
000000000020fd87         db  0x00 ; '.'
000000000020fd88         db  0xf9 ; '.'
000000000020fd89         db  0xff ; '.'
000000000020fd8a         db  0xff ; '.'
000000000020fd8b         db  0x6f ; 'o'
000000000020fd8c         db  0x00 ; '.'
000000000020fd8d         db  0x00 ; '.'
000000000020fd8e         db  0x00 ; '.'
000000000020fd8f         db  0x00 ; '.'
000000000020fd90         db  0x1f ; '.'
000000000020fd91         db  0x00 ; '.'
000000000020fd92         db  0x00 ; '.'
000000000020fd93         db  0x00 ; '.'
000000000020fd94         db  0x00 ; '.'
000000000020fd95         db  0x00 ; '.'
000000000020fd96         db  0x00 ; '.'
000000000020fd97         db  0x00 ; '.'
000000000020fd98         db  0x00 ; '.'
000000000020fd99         db  0x00 ; '.'
000000000020fd9a         db  0x00 ; '.'
000000000020fd9b         db  0x00 ; '.'
000000000020fd9c         db  0x00 ; '.'
000000000020fd9d         db  0x00 ; '.'
000000000020fd9e         db  0x00 ; '.'
000000000020fd9f         db  0x00 ; '.'
000000000020fda0         db  0x00 ; '.'
000000000020fda1         db  0x00 ; '.'
000000000020fda2         db  0x00 ; '.'
000000000020fda3         db  0x00 ; '.'
000000000020fda4         db  0x00 ; '.'
000000000020fda5         db  0x00 ; '.'
000000000020fda6         db  0x00 ; '.'
000000000020fda7         db  0x00 ; '.'
000000000020fda8         db  0x00 ; '.'
000000000020fda9         db  0x00 ; '.'
000000000020fdaa         db  0x00 ; '.'
000000000020fdab         db  0x00 ; '.'
000000000020fdac         db  0x00 ; '.'
000000000020fdad         db  0x00 ; '.'
000000000020fdae         db  0x00 ; '.'
000000000020fdaf         db  0x00 ; '.'
000000000020fdb0         db  0x00 ; '.'
000000000020fdb1         db  0x00 ; '.'
000000000020fdb2         db  0x00 ; '.'
000000000020fdb3         db  0x00 ; '.'
000000000020fdb4         db  0x00 ; '.'
000000000020fdb5         db  0x00 ; '.'
000000000020fdb6         db  0x00 ; '.'
000000000020fdb7         db  0x00 ; '.'
000000000020fdb8         db  0x00 ; '.'
000000000020fdb9         db  0x00 ; '.'
000000000020fdba         db  0x00 ; '.'
000000000020fdbb         db  0x00 ; '.'
000000000020fdbc         db  0x00 ; '.'
000000000020fdbd         db  0x00 ; '.'
000000000020fdbe         db  0x00 ; '.'
000000000020fdbf         db  0x00 ; '.'
000000000020fdc0         db  0x00 ; '.'
000000000020fdc1         db  0x00 ; '.'
000000000020fdc2         db  0x00 ; '.'
000000000020fdc3         db  0x00 ; '.'
000000000020fdc4         db  0x00 ; '.'
000000000020fdc5         db  0x00 ; '.'
000000000020fdc6         db  0x00 ; '.'
000000000020fdc7         db  0x00 ; '.'
000000000020fdc8         db  0x00 ; '.'
000000000020fdc9         db  0x00 ; '.'
000000000020fdca         db  0x00 ; '.'
000000000020fdcb         db  0x00 ; '.'
000000000020fdcc         db  0x00 ; '.'
000000000020fdcd         db  0x00 ; '.'
000000000020fdce         db  0x00 ; '.'
000000000020fdcf         db  0x00 ; '.'
000000000020fdd0         db  0x00 ; '.'
000000000020fdd1         db  0x00 ; '.'
000000000020fdd2         db  0x00 ; '.'
000000000020fdd3         db  0x00 ; '.'
000000000020fdd4         db  0x00 ; '.'
000000000020fdd5         db  0x00 ; '.'
000000000020fdd6         db  0x00 ; '.'
000000000020fdd7         db  0x00 ; '.'
000000000020fdd8         db  0x00 ; '.'
000000000020fdd9         db  0x00 ; '.'
000000000020fdda         db  0x00 ; '.'
000000000020fddb         db  0x00 ; '.'
000000000020fddc         db  0x00 ; '.'
000000000020fddd         db  0x00 ; '.'
000000000020fdde         db  0x00 ; '.'
000000000020fddf         db  0x00 ; '.'
000000000020fde0         db  0x00 ; '.'
000000000020fde1         db  0x00 ; '.'
000000000020fde2         db  0x00 ; '.'
000000000020fde3         db  0x00 ; '.'
000000000020fde4         db  0x00 ; '.'
000000000020fde5         db  0x00 ; '.'
000000000020fde6         db  0x00 ; '.'
000000000020fde7         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20fde8; 0x20fff8[ (528 bytes)
        ; File offset : [65000; 65528[ (528 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020fde8         db  0xf8 ; '.'
000000000020fde9         db  0xfb ; '.'
000000000020fdea         db  0x20 ; ' '
000000000020fdeb         db  0x00 ; '.'
000000000020fdec         db  0x00 ; '.'
000000000020fded         db  0x00 ; '.'
000000000020fdee         db  0x00 ; '.'
000000000020fdef         db  0x00 ; '.'
                     qword_20fdf0:
000000000020fdf0         dq         0x0000000000000000                          ; DATA XREF=0x17b0
000000000020fdf8         db  0x00 ; '.'                                         ; DATA XREF=0x17b6
000000000020fdf9         db  0x00 ; '.'
000000000020fdfa         db  0x00 ; '.'
000000000020fdfb         db  0x00 ; '.'
000000000020fdfc         db  0x00 ; '.'
000000000020fdfd         db  0x00 ; '.'
000000000020fdfe         db  0x00 ; '.'
000000000020fdff         db  0x00 ; '.'
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000020fe00         dq         0x0000000000210380                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
000000000020fe08         dq         0x0000000000210388                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020fe10         dq         0x0000000000210390                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020fe18         dq         0x0000000000210398                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020fe20         dq         0x00000000002103a0                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020fe28         dq         0x00000000002103b0                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020fe30         dq         0x00000000002103b8                          ; DATA XREF=j___fpending
                     puts@GOT:        // puts
000000000020fe38         dq         0x00000000002103c0                          ; DATA XREF=j_puts
                     ferror@GOT:        // ferror
000000000020fe40         dq         0x00000000002103c8                          ; DATA XREF=j_ferror
                     strtod@GOT:        // strtod
000000000020fe48         dq         0x00000000002103d0                          ; DATA XREF=j_strtod
                     localeconv@GOT:        // localeconv
000000000020fe50         dq         0x00000000002103d8                          ; DATA XREF=j_localeconv
                     fread_unlocked@GOT:        // fread_unlocked
000000000020fe58         dq         0x00000000002103e0                          ; DATA XREF=j_fread_unlocked
                     textdomain@GOT:        // textdomain
000000000020fe60         dq         0x00000000002103e8                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020fe68         dq         0x00000000002103f0                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020fe70         dq         0x00000000002103f8                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020fe78         dq         0x0000000000210400                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020fe80         dq         0x0000000000210408                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020fe88         dq         0x0000000000210410                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020fe90         dq         0x0000000000210418                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020fe98         dq         0x0000000000210420                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020fea0         dq         0x0000000000210428                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020fea8         dq         0x0000000000210430                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
000000000020feb0         dq         0x0000000000210438                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000020feb8         dq         0x0000000000210440                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020fec0         dq         0x0000000000210448                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000020fec8         dq         0x0000000000210450                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000020fed0         dq         0x0000000000210458                          ; DATA XREF=j___strtoul_internal
                     strtof@GOT:        // strtof
000000000020fed8         dq         0x0000000000210460                          ; DATA XREF=j_strtof
                     memset@GOT:        // memset
000000000020fee0         dq         0x0000000000210468                          ; DATA XREF=j_memset
                     fgetc@GOT:        // fgetc
000000000020fee8         dq         0x0000000000210470                          ; DATA XREF=j_fgetc
                     memcmp@GOT:        // memcmp
000000000020fef0         dq         0x0000000000210480                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020fef8         dq         0x0000000000210488                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020ff00         dq         0x0000000000210490                          ; DATA XREF=j_calloc
                     memcpy@GOT:        // memcpy
000000000020ff08         dq         0x00000000002104a0                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020ff10         dq         0x00000000002104a8                          ; DATA XREF=j_fileno
                     malloc@GOT:        // malloc
000000000020ff18         dq         0x00000000002104b0                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020ff20         dq         0x00000000002104b8                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020ff28         dq         0x00000000002104c0                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
000000000020ff30         dq         0x00000000002104c8                          ; DATA XREF=j___fxstat
                     __freading@GOT:        // __freading
000000000020ff38         dq         0x00000000002104d0                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
000000000020ff40         dq         0x00000000002104d8                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
000000000020ff48         dq         0x00000000002104e0                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020ff50         dq         0x00000000002104e8                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020ff58         dq         0x00000000002104f0                          ; DATA XREF=j___printf_chk
                     setvbuf@GOT:        // setvbuf
000000000020ff60         dq         0x00000000002104f8                          ; DATA XREF=j_setvbuf
                     strtold@GOT:        // strtold
000000000020ff68         dq         0x0000000000210500                          ; DATA XREF=j_strtold
                     error@GOT:        // error
000000000020ff70         dq         0x0000000000210508                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020ff78         dq         0x0000000000210510                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
000000000020ff80         dq         0x0000000000210518                          ; DATA XREF=j_fopen
                     __fread_unlocked_chk@GOT:        // __fread_unlocked_chk
000000000020ff88         dq         0x0000000000210520                          ; DATA XREF=j___fread_unlocked_chk
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020ff90         dq         0x0000000000210528                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020ff98         dq         0x0000000000210530                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020ffa0         dq         0x0000000000210538                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020ffa8         dq         0x0000000000210540                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020ffb0         dq         0x0000000000210550                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020ffb8         dq         0x0000000000210558                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020ffc0         dq         0x0000000000210568                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
000000000020ffc8         dq         0x0000000000210570                          ; DATA XREF=j___sprintf_chk
                     qword_20ffd0:
000000000020ffd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020ffd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020ffd9         db  0x00 ; '.'
000000000020ffda         db  0x00 ; '.'
000000000020ffdb         db  0x00 ; '.'
000000000020ffdc         db  0x00 ; '.'
000000000020ffdd         db  0x00 ; '.'
000000000020ffde         db  0x00 ; '.'
000000000020ffdf         db  0x00 ; '.'
                     qword_20ffe0:
000000000020ffe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20ffe8:
000000000020ffe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20fff0:
000000000020fff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20fff0, __do_global_dtors_aux+9
000000000020fff8         db  0x00 ; '.'
000000000020fff9         db  0x00 ; '.'
000000000020fffa         db  0x00 ; '.'
000000000020fffb         db  0x00 ; '.'
000000000020fffc         db  0x00 ; '.'
000000000020fffd         db  0x00 ; '.'
000000000020fffe         db  0x00 ; '.'
000000000020ffff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x210000; 0x2100a0[ (160 bytes)
        ; File offset : [65536; 65696[ (160 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000210000         db  0x00 ; '.'
0000000000210001         db  0x00 ; '.'
0000000000210002         db  0x00 ; '.'
0000000000210003         db  0x00 ; '.'
0000000000210004         db  0x00 ; '.'
0000000000210005         db  0x00 ; '.'
0000000000210006         db  0x00 ; '.'
0000000000210007         db  0x00 ; '.'
                     __dso_handle:
0000000000210008         dq         0x0000000000210008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     first.7524:
0000000000210010         db         0x01                                        ; DATA XREF=write_block+36, write_block+575
                     abbreviate_duplicate_blocks:
0000000000210011         db         0x01                                        ; DATA XREF=main+616, write_block+17
0000000000210012         align      8
                     Version:
0000000000210018         dq         0x000000000000c784                          ; "8.31", DATA XREF=main+1327
                     argmatch_die:
0000000000210020         dq         0x0000000000005280                          ; DATA XREF=main+432
                     exit_failure:
0000000000210028         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23, xvprintf+75, xvfprintf+71, xstrtol_fatal+35
000000000021002c         db  0x00 ; '.'
000000000021002d         db  0x00 ; '.'
000000000021002e         db  0x00 ; '.'
000000000021002f         db  0x00 ; '.'
0000000000210030         db  0x00 ; '.'
0000000000210031         db  0x00 ; '.'
0000000000210032         db  0x00 ; '.'
0000000000210033         db  0x00 ; '.'
0000000000210034         db  0x00 ; '.'
0000000000210035         db  0x00 ; '.'
0000000000210036         db  0x00 ; '.'
0000000000210037         db  0x00 ; '.'
0000000000210038         db  0x00 ; '.'
0000000000210039         db  0x00 ; '.'
000000000021003a         db  0x00 ; '.'
000000000021003b         db  0x00 ; '.'
000000000021003c         db  0x00 ; '.'
000000000021003d         db  0x00 ; '.'
000000000021003e         db  0x00 ; '.'
000000000021003f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000210040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000210041         db  0x00 ; '.'
0000000000210042         db  0x00 ; '.'
0000000000210043         db  0x00 ; '.'
0000000000210044         db  0x00 ; '.'
0000000000210045         db  0x00 ; '.'
0000000000210046         db  0x00 ; '.'
0000000000210047         db  0x00 ; '.'
0000000000210048         db  0x00 ; '.'
0000000000210049         db  0x00 ; '.'
000000000021004a         db  0x00 ; '.'
000000000021004b         db  0x00 ; '.'
000000000021004c         db  0x00 ; '.'
000000000021004d         db  0x00 ; '.'
000000000021004e         db  0x00 ; '.'
000000000021004f         db  0x00 ; '.'
0000000000210050         db  0x00 ; '.'
0000000000210051         db  0x00 ; '.'
0000000000210052         db  0x00 ; '.'
0000000000210053         db  0x00 ; '.'
0000000000210054         db  0x00 ; '.'
0000000000210055         db  0x00 ; '.'
0000000000210056         db  0x00 ; '.'
0000000000210057         db  0x00 ; '.'
0000000000210058         db  0x00 ; '.'
0000000000210059         db  0x00 ; '.'
000000000021005a         db  0x00 ; '.'
000000000021005b         db  0x00 ; '.'
000000000021005c         db  0x00 ; '.'
000000000021005d         db  0x00 ; '.'
000000000021005e         db  0x00 ; '.'
000000000021005f         db  0x00 ; '.'
0000000000210060         db  0x00 ; '.'
0000000000210061         db  0x00 ; '.'
0000000000210062         db  0x00 ; '.'
0000000000210063         db  0x00 ; '.'
0000000000210064         db  0x00 ; '.'
0000000000210065         db  0x00 ; '.'
0000000000210066         db  0x00 ; '.'
0000000000210067         db  0x00 ; '.'
0000000000210068         db  0x00 ; '.'
0000000000210069         db  0x00 ; '.'
000000000021006a         db  0x00 ; '.'
000000000021006b         db  0x00 ; '.'
000000000021006c         db  0x00 ; '.'
000000000021006d         db  0x00 ; '.'
000000000021006e         db  0x00 ; '.'
000000000021006f         db  0x00 ; '.'
0000000000210070         db  0x00 ; '.'
0000000000210071         db  0x00 ; '.'
0000000000210072         db  0x00 ; '.'
0000000000210073         db  0x00 ; '.'
0000000000210074         db  0x00 ; '.'
0000000000210075         db  0x00 ; '.'
0000000000210076         db  0x00 ; '.'
0000000000210077         db  0x00 ; '.'
                     nslots:
0000000000210078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021007c         align      2
0000000000210082         db  0x21 ; '!'
0000000000210083         db  0x00 ; '.'
0000000000210084         db  0x00 ; '.'
0000000000210085         db  0x00 ; '.'
0000000000210086         db  0x00 ; '.'
0000000000210087         db  0x00 ; '.'
0000000000210088         db  0x00 ; '.'
0000000000210089         db  0x00 ; '.'
000000000021008a         db  0x00 ; '.'
000000000021008b         db  0x00 ; '.'
000000000021008c         db  0x00 ; '.'
000000000021008d         db  0x00 ; '.'
000000000021008e         db  0x00 ; '.'
000000000021008f         db  0x00 ; '.'
                     slotvec0:
0000000000210090         dq         1.26481e-321, 1.06879e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105


        ; Section .bss
        ; Range: [0x2100a0; 0x210378[ (728 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002100a0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002100a1         db  0x00 ; '.'
00000000002100a2         db  0x00 ; '.'
00000000002100a3         db  0x00 ; '.'
00000000002100a4         db  0x00 ; '.'
00000000002100a5         db  0x00 ; '.'
00000000002100a6         db  0x00 ; '.'
00000000002100a7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002100a8         db  0x00 ; '.'                                         ; DATA XREF=main+1320, main+3886, format_address_std+103, check_and_close+85, write_block+96, write_block+329, write_block+418, write_block+450, format_address_paren+11, format_address_paren+56, usage+131
00000000002100a9         db  0x00 ; '.'
00000000002100aa         db  0x00 ; '.'
00000000002100ab         db  0x00 ; '.'
00000000002100ac         db  0x00 ; '.'
00000000002100ad         db  0x00 ; '.'
00000000002100ae         db  0x00 ; '.'
00000000002100af         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
00000000002100b0         db  0x00 ; '.'                                         ; DATA XREF=main+2820, open_next_file+103
00000000002100b1         db  0x00 ; '.'
00000000002100b2         db  0x00 ; '.'
00000000002100b3         db  0x00 ; '.'
00000000002100b4         db  0x00 ; '.'
00000000002100b5         db  0x00 ; '.'
00000000002100b6         db  0x00 ; '.'
00000000002100b7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002100b8         db  0x00 ; '.'                                         ; DATA XREF=main+1456, main+1603, main+3196, main+3359, main+4077, main+4175, main+4240
00000000002100b9         db  0x00 ; '.'
00000000002100ba         db  0x00 ; '.'
00000000002100bb         db  0x00 ; '.'
00000000002100bc         db  0x00 ; '.'
00000000002100bd         db  0x00 ; '.'
00000000002100be         db  0x00 ; '.'
00000000002100bf         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
00000000002100c0         db  0x00 ; '.'                                         ; DATA XREF=main+439, main+536, main+640, main+696, main+920, main+1024, main+1069, main+1224, main+4468, main+4534, main+4564
00000000002100c1         db  0x00 ; '.'
00000000002100c2         db  0x00 ; '.'
00000000002100c3         db  0x00 ; '.'
00000000002100c4         db  0x00 ; '.'
00000000002100c5         db  0x00 ; '.'
00000000002100c6         db  0x00 ; '.'
00000000002100c7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002100c8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002100c9         db  0x00 ; '.'
00000000002100ca         db  0x00 ; '.'
00000000002100cb         db  0x00 ; '.'
00000000002100cc         db  0x00 ; '.'
00000000002100cd         db  0x00 ; '.'
00000000002100ce         db  0x00 ; '.'
00000000002100cf         db  0x00 ; '.'
00000000002100d0         db  0x00 ; '.'
00000000002100d1         db  0x00 ; '.'
00000000002100d2         db  0x00 ; '.'
00000000002100d3         db  0x00 ; '.'
00000000002100d4         db  0x00 ; '.'
00000000002100d5         db  0x00 ; '.'
00000000002100d6         db  0x00 ; '.'
00000000002100d7         db  0x00 ; '.'
00000000002100d8         db  0x00 ; '.'
00000000002100d9         db  0x00 ; '.'
00000000002100da         db  0x00 ; '.'
00000000002100db         db  0x00 ; '.'
00000000002100dc         db  0x00 ; '.'
00000000002100dd         db  0x00 ; '.'
00000000002100de         db  0x00 ; '.'
00000000002100df         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
00000000002100e0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
00000000002100e1         db  0x00 ; '.'
00000000002100e2         db  0x00 ; '.'
00000000002100e3         db  0x00 ; '.'
00000000002100e4         db  0x00 ; '.'
00000000002100e5         db  0x00 ; '.'
00000000002100e6         db  0x00 ; '.'
00000000002100e7         db  0x00 ; '.'
                     completed.7697:
00000000002100e8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
00000000002100e9         db  0x00 ; '.'
00000000002100ea         db  0x00 ; '.'
00000000002100eb         db  0x00 ; '.'
00000000002100ec         db  0x00 ; '.'
00000000002100ed         db  0x00 ; '.'
00000000002100ee         db  0x00 ; '.'
00000000002100ef         db  0x00 ; '.'
00000000002100f0         db  0x00 ; '.'
00000000002100f1         db  0x00 ; '.'
00000000002100f2         db  0x00 ; '.'
00000000002100f3         db  0x00 ; '.'
00000000002100f4         db  0x00 ; '.'
00000000002100f5         db  0x00 ; '.'
00000000002100f6         db  0x00 ; '.'
00000000002100f7         db  0x00 ; '.'
00000000002100f8         db  0x00 ; '.'
00000000002100f9         db  0x00 ; '.'
00000000002100fa         db  0x00 ; '.'
00000000002100fb         db  0x00 ; '.'
00000000002100fc         db  0x00 ; '.'
00000000002100fd         db  0x00 ; '.'
00000000002100fe         db  0x00 ; '.'
00000000002100ff         db  0x00 ; '.'
                     prev_pair_equal.7525:
0000000000210100         db  0x00 ; '.'                                         ; DATA XREF=write_block+57, write_block+547, write_block+568
                     input_swap:
0000000000210101         db  0x00 ; '.'                                         ; DATA XREF=main+505, main+1412, print_long_long+135, print_long+135, print_int+136, print_short+143, print_s_short+143, print_long_double+176, print_double+171, print_float+190
0000000000210102         db  0x00 ; '.'
0000000000210103         db  0x00 ; '.'
0000000000210104         db  0x00 ; '.'
0000000000210105         db  0x00 ; '.'
0000000000210106         db  0x00 ; '.'
0000000000210107         db  0x00 ; '.'
0000000000210108         db  0x00 ; '.'
0000000000210109         db  0x00 ; '.'
000000000021010a         db  0x00 ; '.'
000000000021010b         db  0x00 ; '.'
000000000021010c         db  0x00 ; '.'
000000000021010d         db  0x00 ; '.'
000000000021010e         db  0x00 ; '.'
000000000021010f         db  0x00 ; '.'
0000000000210110         db  0x00 ; '.'
0000000000210111         db  0x00 ; '.'
0000000000210112         db  0x00 ; '.'
0000000000210113         db  0x00 ; '.'
0000000000210114         db  0x00 ; '.'
0000000000210115         db  0x00 ; '.'
0000000000210116         db  0x00 ; '.'
0000000000210117         db  0x00 ; '.'
0000000000210118         db  0x00 ; '.'
0000000000210119         db  0x00 ; '.'
000000000021011a         db  0x00 ; '.'
000000000021011b         db  0x00 ; '.'
000000000021011c         db  0x00 ; '.'
000000000021011d         db  0x00 ; '.'
000000000021011e         db  0x00 ; '.'
000000000021011f         db  0x00 ; '.'
                     fp_type_size:
0000000000210120         db  0x00 ; '.'                                         ; DATA XREF=main+135, decode_format_string+272
0000000000210121         db  0x00 ; '.'
0000000000210122         db  0x00 ; '.'
0000000000210123         db  0x00 ; '.'
0000000000210124         db  0x00 ; '.'
0000000000210125         db  0x00 ; '.'
0000000000210126         db  0x00 ; '.'
0000000000210127         db  0x00 ; '.'
0000000000210128         db  0x00 ; '.'
0000000000210129         db  0x00 ; '.'
000000000021012a         db  0x00 ; '.'
000000000021012b         db  0x00 ; '.'
000000000021012c         db  0x00 ; '.'
000000000021012d         db  0x00 ; '.'
000000000021012e         db  0x00 ; '.'
000000000021012f         db  0x00 ; '.'
                     dword_210130:
0000000000210130         db  0x00 ; '.'                                         ; DATA XREF=main+226, sub_3dfe+719
0000000000210131         db  0x00 ; '.'
0000000000210132         db  0x00 ; '.'
0000000000210133         db  0x00 ; '.'
0000000000210134         db  0x00 ; '.'
0000000000210135         db  0x00 ; '.'
0000000000210136         db  0x00 ; '.'
0000000000210137         db  0x00 ; '.'
0000000000210138         db  0x00 ; '.'
0000000000210139         db  0x00 ; '.'
000000000021013a         db  0x00 ; '.'
000000000021013b         db  0x00 ; '.'
000000000021013c         db  0x00 ; '.'
000000000021013d         db  0x00 ; '.'
000000000021013e         db  0x00 ; '.'
000000000021013f         db  0x00 ; '.'
                     dword_210140:
0000000000210140         db  0x00 ; '.'                                         ; DATA XREF=main+264, decode_format_string+253, sub_3dfe+530, sub_3dfe+671
0000000000210141         db  0x00 ; '.'
0000000000210142         db  0x00 ; '.'
0000000000210143         db  0x00 ; '.'
0000000000210144         db  0x00 ; '.'
0000000000210145         db  0x00 ; '.'
0000000000210146         db  0x00 ; '.'
0000000000210147         db  0x00 ; '.'
0000000000210148         db  0x00 ; '.'
0000000000210149         db  0x00 ; '.'
000000000021014a         db  0x00 ; '.'
000000000021014b         db  0x00 ; '.'
000000000021014c         db  0x00 ; '.'
000000000021014d         db  0x00 ; '.'
000000000021014e         db  0x00 ; '.'
000000000021014f         db  0x00 ; '.'
0000000000210150         db  0x00 ; '.'
0000000000210151         db  0x00 ; '.'
0000000000210152         db  0x00 ; '.'
0000000000210153         db  0x00 ; '.'
0000000000210154         db  0x00 ; '.'
0000000000210155         db  0x00 ; '.'
0000000000210156         db  0x00 ; '.'
0000000000210157         db  0x00 ; '.'
0000000000210158         db  0x00 ; '.'
0000000000210159         db  0x00 ; '.'
000000000021015a         db  0x00 ; '.'
000000000021015b         db  0x00 ; '.'
000000000021015c         db  0x00 ; '.'
000000000021015d         db  0x00 ; '.'
000000000021015e         db  0x00 ; '.'
000000000021015f         db  0x00 ; '.'
                     dword_210160:
0000000000210160         db  0x00 ; '.'                                         ; DATA XREF=main+236, sub_3dfe+695
0000000000210161         db  0x00 ; '.'
0000000000210162         db  0x00 ; '.'
0000000000210163         db  0x00 ; '.'
0000000000210164         db  0x00 ; '.'
0000000000210165         db  0x00 ; '.'
0000000000210166         db  0x00 ; '.'
0000000000210167         db  0x00 ; '.'
0000000000210168         db  0x00 ; '.'
0000000000210169         db  0x00 ; '.'
000000000021016a         db  0x00 ; '.'
000000000021016b         db  0x00 ; '.'
000000000021016c         db  0x00 ; '.'
000000000021016d         db  0x00 ; '.'
000000000021016e         db  0x00 ; '.'
000000000021016f         db  0x00 ; '.'
0000000000210170         db  0x00 ; '.'
0000000000210171         db  0x00 ; '.'
0000000000210172         db  0x00 ; '.'
0000000000210173         db  0x00 ; '.'
0000000000210174         db  0x00 ; '.'
0000000000210175         db  0x00 ; '.'
0000000000210176         db  0x00 ; '.'
0000000000210177         db  0x00 ; '.'
0000000000210178         db  0x00 ; '.'
0000000000210179         db  0x00 ; '.'
000000000021017a         db  0x00 ; '.'
000000000021017b         db  0x00 ; '.'
000000000021017c         db  0x00 ; '.'
000000000021017d         db  0x00 ; '.'
000000000021017e         db  0x00 ; '.'
000000000021017f         db  0x00 ; '.'
                     integral_type_size:
0000000000210180         db  0x00 ; '.'                                         ; DATA XREF=main+104, sub_3dfe+435
0000000000210181         db  0x00 ; '.'
0000000000210182         db  0x00 ; '.'
0000000000210183         db  0x00 ; '.'
                     dword_210184:
0000000000210184         db  0x00 ; '.'                                         ; DATA XREF=main+142, sub_3dfe+10
0000000000210185         db  0x00 ; '.'
0000000000210186         db  0x00 ; '.'
0000000000210187         db  0x00 ; '.'
                     dword_210188:
0000000000210188         db  0x00 ; '.'                                         ; DATA XREF=main+152, decode_format_string+381
0000000000210189         db  0x00 ; '.'
000000000021018a         db  0x00 ; '.'
000000000021018b         db  0x00 ; '.'
000000000021018c         db  0x00 ; '.'
000000000021018d         db  0x00 ; '.'
000000000021018e         db  0x00 ; '.'
000000000021018f         db  0x00 ; '.'
                     dword_210190:
0000000000210190         db  0x00 ; '.'                                         ; DATA XREF=main+162, sub_3dfe+1031, sub_3dfe+1049, sub_3dfe+1067
0000000000210191         db  0x00 ; '.'
0000000000210192         db  0x00 ; '.'
0000000000210193         db  0x00 ; '.'
0000000000210194         db  0x00 ; '.'
0000000000210195         db  0x00 ; '.'
0000000000210196         db  0x00 ; '.'
0000000000210197         db  0x00 ; '.'
0000000000210198         db  0x00 ; '.'
0000000000210199         db  0x00 ; '.'
000000000021019a         db  0x00 ; '.'
000000000021019b         db  0x00 ; '.'
000000000021019c         db  0x00 ; '.'
000000000021019d         db  0x00 ; '.'
000000000021019e         db  0x00 ; '.'
000000000021019f         db  0x00 ; '.'
                     dword_2101a0:
00000000002101a0         db  0x00 ; '.'                                         ; DATA XREF=main+172, sub_3dfe+1007
00000000002101a1         db  0x00 ; '.'
00000000002101a2         db  0x00 ; '.'
00000000002101a3         db  0x00 ; '.'
                     have_read_stdin:
00000000002101a4         db  0x00 ; '.'                                         ; DATA XREF=main+2210, open_next_file+110
00000000002101a5         db  0x00 ; '.'
00000000002101a6         db  0x00 ; '.'
00000000002101a7         db  0x00 ; '.'
                     in_stream:
00000000002101a8         db  0x00 ; '.'                                         ; DATA XREF=main+1627, main+1659, check_and_close+11, check_and_close+74, check_and_close+242, open_next_file+117, open_next_file+154, open_next_file+242, skip+45, skip+177, skip+323
00000000002101a9         db  0x00 ; '.'
00000000002101aa         db  0x00 ; '.'
00000000002101ab         db  0x00 ; '.'
00000000002101ac         db  0x00 ; '.'
00000000002101ad         db  0x00 ; '.'
00000000002101ae         db  0x00 ; '.'
00000000002101af         db  0x00 ; '.'
                     file_list:
00000000002101b0         db  0x00 ; '.'                                         ; DATA XREF=main+1615, main+2791, check_and_close+30, check_and_close+202, open_next_file+18, open_next_file+61
00000000002101b1         db  0x00 ; '.'
00000000002101b2         db  0x00 ; '.'
00000000002101b3         db  0x00 ; '.'
00000000002101b4         db  0x00 ; '.'
00000000002101b5         db  0x00 ; '.'
00000000002101b6         db  0x00 ; '.'
00000000002101b7         db  0x00 ; '.'
                     input_filename:
00000000002101b8         db  0x00 ; '.'                                         ; DATA XREF=check_and_close+144, check_and_close+280, open_next_file+31, open_next_file+96, open_next_file+192, skip+218
00000000002101b9         db  0x00 ; '.'
00000000002101ba         db  0x00 ; '.'
00000000002101bb         db  0x00 ; '.'
00000000002101bc         db  0x00 ; '.'
00000000002101bd         db  0x00 ; '.'
00000000002101be         db  0x00 ; '.'
00000000002101bf         db  0x00 ; '.'
                     bytes_per_block:
00000000002101c0         db  0x00 ; '.'                                         ; DATA XREF=main+1983, main+2033, main+2076, main+2453, main+2468, main+3130, main+3483, main+3516, main+3716, main+3826, write_block+163
00000000002101c1         db  0x00 ; '.'
00000000002101c2         db  0x00 ; '.'
00000000002101c3         db  0x00 ; '.'
00000000002101c4         db  0x00 ; '.'
00000000002101c5         db  0x00 ; '.'
00000000002101c6         db  0x00 ; '.'
00000000002101c7         db  0x00 ; '.'
                     n_specs_allocated:
00000000002101c8         db  0x00 ; '.'                                         ; DATA XREF=main+285, decode_format_string+56, decode_format_string+771
00000000002101c9         db  0x00 ; '.'
00000000002101ca         db  0x00 ; '.'
00000000002101cb         db  0x00 ; '.'
00000000002101cc         db  0x00 ; '.'
00000000002101cd         db  0x00 ; '.'
00000000002101ce         db  0x00 ; '.'
00000000002101cf         db  0x00 ; '.'
                     n_specs:
00000000002101d0         db  0x00 ; '.'                                         ; DATA XREF=main+274, main+1442, main+1580, main+1688, main+3542, main+3723, decode_format_string+30, decode_format_string+564, decode_format_string+581, decode_format_string+797, write_block+49
00000000002101d1         db  0x00 ; '.'
00000000002101d2         db  0x00 ; '.'
00000000002101d3         db  0x00 ; '.'
00000000002101d4         db  0x00 ; '.'
00000000002101d5         db  0x00 ; '.'
00000000002101d6         db  0x00 ; '.'
00000000002101d7         db  0x00 ; '.'
                     spec:
00000000002101d8         db  0x00 ; '.'                                         ; DATA XREF=main+299, main+1695, main+3549, main+3730, decode_format_string+63, decode_format_string+790, write_block+149, write_block+230, write_block+266
00000000002101d9         db  0x00 ; '.'
00000000002101da         db  0x00 ; '.'
00000000002101db         db  0x00 ; '.'
00000000002101dc         db  0x00 ; '.'
00000000002101dd         db  0x00 ; '.'
00000000002101de         db  0x00 ; '.'
00000000002101df         db  0x00 ; '.'
                     end_offset:
00000000002101e0         db  0x00 ; '.'                                         ; DATA XREF=main+1567, main+2123, main+2172, main+2669, main+3074
00000000002101e1         db  0x00 ; '.'
00000000002101e2         db  0x00 ; '.'
00000000002101e3         db  0x00 ; '.'
00000000002101e4         db  0x00 ; '.'
00000000002101e5         db  0x00 ; '.'
00000000002101e6         db  0x00 ; '.'
00000000002101e7         db  0x00 ; '.'
                     max_bytes_to_format:
00000000002101e8         db  0x00 ; '.'                                         ; DATA XREF=main+1038, main+1544
00000000002101e9         db  0x00 ; '.'
00000000002101ea         db  0x00 ; '.'
00000000002101eb         db  0x00 ; '.'
00000000002101ec         db  0x00 ; '.'
00000000002101ed         db  0x00 ; '.'
00000000002101ee         db  0x00 ; '.'
00000000002101ef         db  0x00 ; '.'
                     limit_bytes_to_format:
00000000002101f0         db  0x00 ; '.'                                         ; DATA XREF=main+1049, main+1533, main+1976, main+2163, main+2653, main+3065, open_next_file+163
00000000002101f1         db  0x00 ; '.'
00000000002101f2         db  0x00 ; '.'
00000000002101f3         db  0x00 ; '.'
00000000002101f4         db  0x00 ; '.'
00000000002101f5         db  0x00 ; '.'
00000000002101f6         db  0x00 ; '.'
00000000002101f7         db  0x00 ; '.'
                     n_bytes_to_skip:
00000000002101f8         db  0x00 ; '.'                                         ; DATA XREF=main+710, main+1551, main+1644, main+1995, main+2627, main+2948, main+2965, main+3352, main+4124, main+4223
00000000002101f9         db  0x00 ; '.'
00000000002101fa         db  0x00 ; '.'
00000000002101fb         db  0x00 ; '.'
00000000002101fc         db  0x00 ; '.'
00000000002101fd         db  0x00 ; '.'
00000000002101fe         db  0x00 ; '.'
00000000002101ff         db  0x00 ; '.'
                     format_address:
0000000000210200         db  0x00 ; '.'                                         ; DATA XREF=main+252, main+1304, main+1506, main+1526, main+1837, main+1882, main+2157, main+2259, main+3412, main+3875, write_block+224
0000000000210201         db  0x00 ; '.'
0000000000210202         db  0x00 ; '.'
0000000000210203         db  0x00 ; '.'
0000000000210204         db  0x00 ; '.'
0000000000210205         db  0x00 ; '.'
0000000000210206         db  0x00 ; '.'
0000000000210207         db  0x00 ; '.'
                     pseudo_offset:
0000000000210208         db  0x00 ; '.'                                         ; DATA XREF=main+1709, format_address_label+21
0000000000210209         db  0x00 ; '.'
000000000021020a         db  0x00 ; '.'
000000000021020b         db  0x00 ; '.'
000000000021020c         db  0x00 ; '.'
000000000021020d         db  0x00 ; '.'
000000000021020e         db  0x00 ; '.'
000000000021020f         db  0x00 ; '.'
                     flag_pseudo_start:
0000000000210210         db  0x00 ; '.'                                         ; DATA XREF=main+1490, main+1675, main+4110, main+4210
                     traditional:
0000000000210211         db  0x00 ; '.'                                         ; DATA XREF=main+520, main+1463, main+3183, main+3328
                     flag_dump_strings:
0000000000210212         db  0x00 ; '.'                                         ; DATA XREF=main+330, main+977, main+1433, main+2580, open_next_file+172
0000000000210213         db  0x00 ; '.'
0000000000210214         db  0x00 ; '.'
0000000000210215         db  0x00 ; '.'
0000000000210216         db  0x00 ; '.'
0000000000210217         db  0x00 ; '.'
                     string_min:
0000000000210218         db  0x00 ; '.'                                         ; DATA XREF=main+970, main+1372, main+2596, main+2609, main+2662, main+2770
0000000000210219         db  0x00 ; '.'
000000000021021a         db  0x00 ; '.'
000000000021021b         db  0x00 ; '.'
000000000021021c         db  0x00 ; '.'
000000000021021d         db  0x00 ; '.'
000000000021021e         db  0x00 ; '.'
000000000021021f         db  0x00 ; '.'
                     address_pad_len:
0000000000210220         db  0x00 ; '.'                                         ; DATA XREF=main+320, main+1288, main+1821, main+1866, main+2243, main+3402, format_address_std+23, write_block+624
0000000000210221         db  0x00 ; '.'
0000000000210222         db  0x00 ; '.'
0000000000210223         db  0x00 ; '.'
                     address_base:
0000000000210224         db  0x00 ; '.'                                         ; DATA XREF=main+310, main+1278, main+1811, main+1856, main+3392, format_address_std+51
0000000000210225         db  0x00 ; '.'
0000000000210226         db  0x00 ; '.'
0000000000210227         db  0x00 ; '.'
                     ignore_EPIPE:
0000000000210228         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
0000000000210229         db  0x00 ; '.'
000000000021022a         db  0x00 ; '.'
000000000021022b         db  0x00 ; '.'
000000000021022c         db  0x00 ; '.'
000000000021022d         db  0x00 ; '.'
000000000021022e         db  0x00 ; '.'
000000000021022f         db  0x00 ; '.'
                     file_name:
0000000000210230         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
0000000000210231         db  0x00 ; '.'
0000000000210232         db  0x00 ; '.'
0000000000210233         db  0x00 ; '.'
0000000000210234         db  0x00 ; '.'
0000000000210235         db  0x00 ; '.'
0000000000210236         db  0x00 ; '.'
0000000000210237         db  0x00 ; '.'
                     program_name:
0000000000210238         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
0000000000210239         db  0x00 ; '.'
000000000021023a         db  0x00 ; '.'
000000000021023b         db  0x00 ; '.'
000000000021023c         db  0x00 ; '.'
000000000021023d         db  0x00 ; '.'
000000000021023e         db  0x00 ; '.'
000000000021023f         db  0x00 ; '.'
                     slot0:
0000000000210240         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
0000000000210241         db  0x00 ; '.'
0000000000210242         db  0x00 ; '.'
0000000000210243         db  0x00 ; '.'
0000000000210244         db  0x00 ; '.'
0000000000210245         db  0x00 ; '.'
0000000000210246         db  0x00 ; '.'
0000000000210247         db  0x00 ; '.'
0000000000210248         db  0x00 ; '.'
0000000000210249         db  0x00 ; '.'
000000000021024a         db  0x00 ; '.'
000000000021024b         db  0x00 ; '.'
000000000021024c         db  0x00 ; '.'
000000000021024d         db  0x00 ; '.'
000000000021024e         db  0x00 ; '.'
000000000021024f         db  0x00 ; '.'
0000000000210250         db  0x00 ; '.'
0000000000210251         db  0x00 ; '.'
0000000000210252         db  0x00 ; '.'
0000000000210253         db  0x00 ; '.'
0000000000210254         db  0x00 ; '.'
0000000000210255         db  0x00 ; '.'
0000000000210256         db  0x00 ; '.'
0000000000210257         db  0x00 ; '.'
0000000000210258         db  0x00 ; '.'
0000000000210259         db  0x00 ; '.'
000000000021025a         db  0x00 ; '.'
000000000021025b         db  0x00 ; '.'
000000000021025c         db  0x00 ; '.'
000000000021025d         db  0x00 ; '.'
000000000021025e         db  0x00 ; '.'
000000000021025f         db  0x00 ; '.'
0000000000210260         db  0x00 ; '.'
0000000000210261         db  0x00 ; '.'
0000000000210262         db  0x00 ; '.'
0000000000210263         db  0x00 ; '.'
0000000000210264         db  0x00 ; '.'
0000000000210265         db  0x00 ; '.'
0000000000210266         db  0x00 ; '.'
0000000000210267         db  0x00 ; '.'
0000000000210268         db  0x00 ; '.'
0000000000210269         db  0x00 ; '.'
000000000021026a         db  0x00 ; '.'
000000000021026b         db  0x00 ; '.'
000000000021026c         db  0x00 ; '.'
000000000021026d         db  0x00 ; '.'
000000000021026e         db  0x00 ; '.'
000000000021026f         db  0x00 ; '.'
0000000000210270         db  0x00 ; '.'
0000000000210271         db  0x00 ; '.'
0000000000210272         db  0x00 ; '.'
0000000000210273         db  0x00 ; '.'
0000000000210274         db  0x00 ; '.'
0000000000210275         db  0x00 ; '.'
0000000000210276         db  0x00 ; '.'
0000000000210277         db  0x00 ; '.'
0000000000210278         db  0x00 ; '.'
0000000000210279         db  0x00 ; '.'
000000000021027a         db  0x00 ; '.'
000000000021027b         db  0x00 ; '.'
000000000021027c         db  0x00 ; '.'
000000000021027d         db  0x00 ; '.'
000000000021027e         db  0x00 ; '.'
000000000021027f         db  0x00 ; '.'
0000000000210280         db  0x00 ; '.'
0000000000210281         db  0x00 ; '.'
0000000000210282         db  0x00 ; '.'
0000000000210283         db  0x00 ; '.'
0000000000210284         db  0x00 ; '.'
0000000000210285         db  0x00 ; '.'
0000000000210286         db  0x00 ; '.'
0000000000210287         db  0x00 ; '.'
0000000000210288         db  0x00 ; '.'
0000000000210289         db  0x00 ; '.'
000000000021028a         db  0x00 ; '.'
000000000021028b         db  0x00 ; '.'
000000000021028c         db  0x00 ; '.'
000000000021028d         db  0x00 ; '.'
000000000021028e         db  0x00 ; '.'
000000000021028f         db  0x00 ; '.'
0000000000210290         db  0x00 ; '.'
0000000000210291         db  0x00 ; '.'
0000000000210292         db  0x00 ; '.'
0000000000210293         db  0x00 ; '.'
0000000000210294         db  0x00 ; '.'
0000000000210295         db  0x00 ; '.'
0000000000210296         db  0x00 ; '.'
0000000000210297         db  0x00 ; '.'
0000000000210298         db  0x00 ; '.'
0000000000210299         db  0x00 ; '.'
000000000021029a         db  0x00 ; '.'
000000000021029b         db  0x00 ; '.'
000000000021029c         db  0x00 ; '.'
000000000021029d         db  0x00 ; '.'
000000000021029e         db  0x00 ; '.'
000000000021029f         db  0x00 ; '.'
00000000002102a0         db  0x00 ; '.'
00000000002102a1         db  0x00 ; '.'
00000000002102a2         db  0x00 ; '.'
00000000002102a3         db  0x00 ; '.'
00000000002102a4         db  0x00 ; '.'
00000000002102a5         db  0x00 ; '.'
00000000002102a6         db  0x00 ; '.'
00000000002102a7         db  0x00 ; '.'
00000000002102a8         db  0x00 ; '.'
00000000002102a9         db  0x00 ; '.'
00000000002102aa         db  0x00 ; '.'
00000000002102ab         db  0x00 ; '.'
00000000002102ac         db  0x00 ; '.'
00000000002102ad         db  0x00 ; '.'
00000000002102ae         db  0x00 ; '.'
00000000002102af         db  0x00 ; '.'
00000000002102b0         db  0x00 ; '.'
00000000002102b1         db  0x00 ; '.'
00000000002102b2         db  0x00 ; '.'
00000000002102b3         db  0x00 ; '.'
00000000002102b4         db  0x00 ; '.'
00000000002102b5         db  0x00 ; '.'
00000000002102b6         db  0x00 ; '.'
00000000002102b7         db  0x00 ; '.'
00000000002102b8         db  0x00 ; '.'
00000000002102b9         db  0x00 ; '.'
00000000002102ba         db  0x00 ; '.'
00000000002102bb         db  0x00 ; '.'
00000000002102bc         db  0x00 ; '.'
00000000002102bd         db  0x00 ; '.'
00000000002102be         db  0x00 ; '.'
00000000002102bf         db  0x00 ; '.'
00000000002102c0         db  0x00 ; '.'
00000000002102c1         db  0x00 ; '.'
00000000002102c2         db  0x00 ; '.'
00000000002102c3         db  0x00 ; '.'
00000000002102c4         db  0x00 ; '.'
00000000002102c5         db  0x00 ; '.'
00000000002102c6         db  0x00 ; '.'
00000000002102c7         db  0x00 ; '.'
00000000002102c8         db  0x00 ; '.'
00000000002102c9         db  0x00 ; '.'
00000000002102ca         db  0x00 ; '.'
00000000002102cb         db  0x00 ; '.'
00000000002102cc         db  0x00 ; '.'
00000000002102cd         db  0x00 ; '.'
00000000002102ce         db  0x00 ; '.'
00000000002102cf         db  0x00 ; '.'
00000000002102d0         db  0x00 ; '.'
00000000002102d1         db  0x00 ; '.'
00000000002102d2         db  0x00 ; '.'
00000000002102d3         db  0x00 ; '.'
00000000002102d4         db  0x00 ; '.'
00000000002102d5         db  0x00 ; '.'
00000000002102d6         db  0x00 ; '.'
00000000002102d7         db  0x00 ; '.'
00000000002102d8         db  0x00 ; '.'
00000000002102d9         db  0x00 ; '.'
00000000002102da         db  0x00 ; '.'
00000000002102db         db  0x00 ; '.'
00000000002102dc         db  0x00 ; '.'
00000000002102dd         db  0x00 ; '.'
00000000002102de         db  0x00 ; '.'
00000000002102df         db  0x00 ; '.'
00000000002102e0         db  0x00 ; '.'
00000000002102e1         db  0x00 ; '.'
00000000002102e2         db  0x00 ; '.'
00000000002102e3         db  0x00 ; '.'
00000000002102e4         db  0x00 ; '.'
00000000002102e5         db  0x00 ; '.'
00000000002102e6         db  0x00 ; '.'
00000000002102e7         db  0x00 ; '.'
00000000002102e8         db  0x00 ; '.'
00000000002102e9         db  0x00 ; '.'
00000000002102ea         db  0x00 ; '.'
00000000002102eb         db  0x00 ; '.'
00000000002102ec         db  0x00 ; '.'
00000000002102ed         db  0x00 ; '.'
00000000002102ee         db  0x00 ; '.'
00000000002102ef         db  0x00 ; '.'
00000000002102f0         db  0x00 ; '.'
00000000002102f1         db  0x00 ; '.'
00000000002102f2         db  0x00 ; '.'
00000000002102f3         db  0x00 ; '.'
00000000002102f4         db  0x00 ; '.'
00000000002102f5         db  0x00 ; '.'
00000000002102f6         db  0x00 ; '.'
00000000002102f7         db  0x00 ; '.'
00000000002102f8         db  0x00 ; '.'
00000000002102f9         db  0x00 ; '.'
00000000002102fa         db  0x00 ; '.'
00000000002102fb         db  0x00 ; '.'
00000000002102fc         db  0x00 ; '.'
00000000002102fd         db  0x00 ; '.'
00000000002102fe         db  0x00 ; '.'
00000000002102ff         db  0x00 ; '.'
0000000000210300         db  0x00 ; '.'
0000000000210301         db  0x00 ; '.'
0000000000210302         db  0x00 ; '.'
0000000000210303         db  0x00 ; '.'
0000000000210304         db  0x00 ; '.'
0000000000210305         db  0x00 ; '.'
0000000000210306         db  0x00 ; '.'
0000000000210307         db  0x00 ; '.'
0000000000210308         db  0x00 ; '.'
0000000000210309         db  0x00 ; '.'
000000000021030a         db  0x00 ; '.'
000000000021030b         db  0x00 ; '.'
000000000021030c         db  0x00 ; '.'
000000000021030d         db  0x00 ; '.'
000000000021030e         db  0x00 ; '.'
000000000021030f         db  0x00 ; '.'
0000000000210310         db  0x00 ; '.'
0000000000210311         db  0x00 ; '.'
0000000000210312         db  0x00 ; '.'
0000000000210313         db  0x00 ; '.'
0000000000210314         db  0x00 ; '.'
0000000000210315         db  0x00 ; '.'
0000000000210316         db  0x00 ; '.'
0000000000210317         db  0x00 ; '.'
0000000000210318         db  0x00 ; '.'
0000000000210319         db  0x00 ; '.'
000000000021031a         db  0x00 ; '.'
000000000021031b         db  0x00 ; '.'
000000000021031c         db  0x00 ; '.'
000000000021031d         db  0x00 ; '.'
000000000021031e         db  0x00 ; '.'
000000000021031f         db  0x00 ; '.'
0000000000210320         db  0x00 ; '.'
0000000000210321         db  0x00 ; '.'
0000000000210322         db  0x00 ; '.'
0000000000210323         db  0x00 ; '.'
0000000000210324         db  0x00 ; '.'
0000000000210325         db  0x00 ; '.'
0000000000210326         db  0x00 ; '.'
0000000000210327         db  0x00 ; '.'
0000000000210328         db  0x00 ; '.'
0000000000210329         db  0x00 ; '.'
000000000021032a         db  0x00 ; '.'
000000000021032b         db  0x00 ; '.'
000000000021032c         db  0x00 ; '.'
000000000021032d         db  0x00 ; '.'
000000000021032e         db  0x00 ; '.'
000000000021032f         db  0x00 ; '.'
0000000000210330         db  0x00 ; '.'
0000000000210331         db  0x00 ; '.'
0000000000210332         db  0x00 ; '.'
0000000000210333         db  0x00 ; '.'
0000000000210334         db  0x00 ; '.'
0000000000210335         db  0x00 ; '.'
0000000000210336         db  0x00 ; '.'
0000000000210337         db  0x00 ; '.'
0000000000210338         db  0x00 ; '.'
0000000000210339         db  0x00 ; '.'
000000000021033a         db  0x00 ; '.'
000000000021033b         db  0x00 ; '.'
000000000021033c         db  0x00 ; '.'
000000000021033d         db  0x00 ; '.'
000000000021033e         db  0x00 ; '.'
000000000021033f         db  0x00 ; '.'
                     default_quoting_options:
0000000000210340         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
0000000000210341         db  0x00 ; '.'
0000000000210342         db  0x00 ; '.'
0000000000210343         db  0x00 ; '.'
0000000000210344         db  0x00 ; '.'
0000000000210345         db  0x00 ; '.'
0000000000210346         db  0x00 ; '.'
0000000000210347         db  0x00 ; '.'
0000000000210348         db  0x00 ; '.'
0000000000210349         db  0x00 ; '.'
000000000021034a         db  0x00 ; '.'
000000000021034b         db  0x00 ; '.'
000000000021034c         db  0x00 ; '.'
000000000021034d         db  0x00 ; '.'
000000000021034e         db  0x00 ; '.'
000000000021034f         db  0x00 ; '.'
0000000000210350         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
0000000000210351         db  0x00 ; '.'
0000000000210352         db  0x00 ; '.'
0000000000210353         db  0x00 ; '.'
0000000000210354         db  0x00 ; '.'
0000000000210355         db  0x00 ; '.'
0000000000210356         db  0x00 ; '.'
0000000000210357         db  0x00 ; '.'
0000000000210358         db  0x00 ; '.'
0000000000210359         db  0x00 ; '.'
000000000021035a         db  0x00 ; '.'
000000000021035b         db  0x00 ; '.'
000000000021035c         db  0x00 ; '.'
000000000021035d         db  0x00 ; '.'
000000000021035e         db  0x00 ; '.'
000000000021035f         db  0x00 ; '.'
0000000000210360         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
0000000000210361         db  0x00 ; '.'
0000000000210362         db  0x00 ; '.'
0000000000210363         db  0x00 ; '.'
0000000000210364         db  0x00 ; '.'
0000000000210365         db  0x00 ; '.'
0000000000210366         db  0x00 ; '.'
0000000000210367         db  0x00 ; '.'
0000000000210368         db  0x00 ; '.'
0000000000210369         db  0x00 ; '.'
000000000021036a         db  0x00 ; '.'
000000000021036b         db  0x00 ; '.'
000000000021036c         db  0x00 ; '.'
000000000021036d         db  0x00 ; '.'
000000000021036e         db  0x00 ; '.'
000000000021036f         db  0x00 ; '.'
                     qword_210370:
0000000000210370         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
0000000000210371         db  0x00 ; '.'
0000000000210372         db  0x00 ; '.'
0000000000210373         db  0x00 ; '.'
0000000000210374         db  0x00 ; '.'
0000000000210375         db  0x00 ; '.'
0000000000210376         db  0x00 ; '.'
0000000000210377         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x210380; 0x210770[ (1008 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x210380; 0x420af0[ (2164592 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __snprintf_chk:
0000000000210380         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
0000000000210388         extern function code                                   ; DATA XREF=free@GOT
                     abort:
0000000000210390         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
0000000000210398         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
00000000002103a0         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
00000000002103a8         extern function code
                     _exit:
00000000002103b0         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
00000000002103b8         extern function code                                   ; DATA XREF=__fpending@GOT
                     puts:
00000000002103c0         extern function code                                   ; DATA XREF=puts@GOT
                     ferror:
00000000002103c8         extern function code                                   ; DATA XREF=ferror@GOT
                     strtod:
00000000002103d0         extern function code                                   ; DATA XREF=strtod@GOT
                     localeconv:
00000000002103d8         extern function code                                   ; DATA XREF=localeconv@GOT
                     fread_unlocked:
00000000002103e0         extern function code                                   ; DATA XREF=fread_unlocked@GOT
                     textdomain:
00000000002103e8         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
00000000002103f0         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
00000000002103f8         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
0000000000210400         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000210408         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000210410         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
0000000000210418         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000210420         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000210428         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
0000000000210430         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
0000000000210438         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000210440         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
0000000000210448         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
0000000000210450         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
0000000000210458         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     strtof:
0000000000210460         extern function code                                   ; DATA XREF=strtof@GOT
                     memset:
0000000000210468         extern function code                                   ; DATA XREF=memset@GOT
                     fgetc:
0000000000210470         extern function code                                   ; DATA XREF=fgetc@GOT
                     __libc_start_main:
0000000000210478         extern function code
                     memcmp:
0000000000210480         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
0000000000210488         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
0000000000210490         extern function code                                   ; DATA XREF=calloc@GOT
                     __gmon_start__:
0000000000210498         extern function code
                     memcpy:
00000000002104a0         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
00000000002104a8         extern function code                                   ; DATA XREF=fileno@GOT
                     malloc:
00000000002104b0         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
00000000002104b8         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
00000000002104c0         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
00000000002104c8         extern function code                                   ; DATA XREF=__fxstat@GOT
                     __freading:
00000000002104d0         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
00000000002104d8         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
00000000002104e0         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
00000000002104e8         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
00000000002104f0         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     setvbuf:
00000000002104f8         extern function code                                   ; DATA XREF=setvbuf@GOT
                     strtold:
0000000000210500         extern function code                                   ; DATA XREF=strtold@GOT
                     error:
0000000000210508         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
0000000000210510         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
0000000000210518         extern function code                                   ; DATA XREF=fopen@GOT
                     __fread_unlocked_chk:
0000000000210520         extern function code                                   ; DATA XREF=__fread_unlocked_chk@GOT
                     __cxa_atexit:
0000000000210528         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
0000000000210530         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
0000000000210538         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
0000000000210540         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
0000000000210548         extern function code
                     mbsinit:
0000000000210550         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
0000000000210558         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
0000000000210560         extern function code
                     __ctype_b_loc:
0000000000210568         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
0000000000210570         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __snprintf_chk@@GLIBC_2.3.4:
0000000000210578         extern function code
                     free@@GLIBC_2.2.5:
0000000000210580         extern function code
                     abort@@GLIBC_2.2.5:
0000000000210588         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000210590         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000210598         extern function code
                     _ITM_deregisterTMCloneTable_2105a0:        // _ITM_deregisterTMCloneTable
00000000002105a0         extern function code
                     _exit@@GLIBC_2.2.5:
00000000002105a8         extern function code
                     __fpending@@GLIBC_2.2.5:
00000000002105b0         extern function code
                     puts@@GLIBC_2.2.5:
00000000002105b8         extern function code
                     ferror@@GLIBC_2.2.5:
00000000002105c0         extern function code
                     strtod@@GLIBC_2.2.5:
00000000002105c8         extern function code
                     localeconv@@GLIBC_2.2.5:
00000000002105d0         extern function code
                     fread_unlocked@@GLIBC_2.2.5:
00000000002105d8         extern function code
                     textdomain@@GLIBC_2.2.5:
00000000002105e0         extern function code
                     fclose@@GLIBC_2.2.5:
00000000002105e8         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
00000000002105f0         extern function code
                     dcgettext@@GLIBC_2.2.5:
00000000002105f8         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000210600         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000210608         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
0000000000210610         extern function code
                     getopt_long@@GLIBC_2.2.5:
0000000000210618         extern function code
                     mbrtowc@@GLIBC_2.2.5:
0000000000210620         extern function code
                     strchr@@GLIBC_2.2.5:
0000000000210628         extern function code
                     __overflow@@GLIBC_2.2.5:
0000000000210630         extern function code
                     strrchr@@GLIBC_2.2.5:
0000000000210638         extern function code
                     lseek@@GLIBC_2.2.5:
0000000000210640         extern function code
                     __assert_fail@@GLIBC_2.2.5:
0000000000210648         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
0000000000210650         extern function code
                     strtof@@GLIBC_2.2.5:
0000000000210658         extern function code
                     memset@@GLIBC_2.2.5:
0000000000210660         extern function code
                     fgetc@@GLIBC_2.2.5:
0000000000210668         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
0000000000210670         extern function code
                     memcmp@@GLIBC_2.2.5:
0000000000210678         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000210680         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000210688         extern function code
                     __gmon_start___210690:        // __gmon_start__
0000000000210690         extern function code
                     memcpy@@GLIBC_2.14:
0000000000210698         extern function code
                     fileno@@GLIBC_2.2.5:
00000000002106a0         extern function code
                     malloc@@GLIBC_2.2.5:
00000000002106a8         extern function code
                     fflush@@GLIBC_2.2.5:
00000000002106b0         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
00000000002106b8         extern function code
                     __fxstat@@GLIBC_2.2.5:
00000000002106c0         extern function code
                     __freading@@GLIBC_2.2.5:
00000000002106c8         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
00000000002106d0         extern function code
                     realloc@@GLIBC_2.2.5:
00000000002106d8         extern function code
                     setlocale@@GLIBC_2.2.5:
00000000002106e0         extern function code
                     __printf_chk@@GLIBC_2.3.4:
00000000002106e8         extern function code
                     setvbuf@@GLIBC_2.2.5:
00000000002106f0         extern function code
                     strtold@@GLIBC_2.2.5:
00000000002106f8         extern function code
                     error@@GLIBC_2.2.5:
0000000000210700         extern function code
                     fseeko@@GLIBC_2.2.5:
0000000000210708         extern function code
                     fopen@@GLIBC_2.2.5:
0000000000210710         extern function code
                     __fread_unlocked_chk@@GLIBC_2.7:
0000000000210718         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
0000000000210720         extern function code
                     exit@@GLIBC_2.2.5:
0000000000210728         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000210730         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000210738         extern function code
                     _ITM_registerTMCloneTable_210740:        // _ITM_registerTMCloneTable
0000000000210740         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000210748         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000210750         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000210758         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000210760         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
0000000000210768         extern function code
