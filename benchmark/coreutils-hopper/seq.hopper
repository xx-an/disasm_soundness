
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/seq
        UUID: 9F50956B-0459-F04F-EB9E-E10F2251D51E
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xa338[ (41784 bytes)
        ; File offset : [0; 41784[ (41784 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x40 ; '@'
0000000000000019         db  0x25 ; '%'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xe0 ; '.'
0000000000000029         db  0x61 ; 'a'
000000000000002a         db  0x03 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x38 ; '8'
00000000000000d1         db  0xa3 ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x38 ; '8'
00000000000000d9         db  0xa3 ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xf0 ; '.'
00000000000000f1         db  0xaa ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xf0 ; '.'
00000000000000f9         db  0xaa ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xf0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xaa ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x90 ; '.'
0000000000000109         db  0x05 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x70 ; 'p'
0000000000000111         db  0x07 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x18 ; '.'
0000000000000129         db  0xac ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x18 ; '.'
0000000000000131         db  0xac ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x18 ; '.'
0000000000000139         db  0xac ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xfc ; '.'
0000000000000199         db  0x92 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xfc ; '.'
00000000000001a1         db  0x92 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xfc ; '.'
00000000000001a9         db  0x92 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x9c ; '.'
00000000000001b1         db  0x02 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x9c ; '.'
00000000000001b9         db  0x02 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xf0 ; '.'
0000000000000209         db  0xaa ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xf0 ; '.'
0000000000000211         db  0xaa ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xf0 ; '.'
0000000000000219         db  0xaa ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x10 ; '.'
0000000000000221         db  0x05 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x10 ; '.'
0000000000000229         db  0x05 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000000238         db  0x2f ; '/'
0000000000000239         db  0x6c ; 'l'
000000000000023a         db  0x69 ; 'i'
000000000000023b         db  0x62 ; 'b'
000000000000023c         db  0x36 ; '6'
000000000000023d         db  0x34 ; '4'
000000000000023e         db  0x2f ; '/'
000000000000023f         db  0x6c ; 'l'
0000000000000240         db  0x64 ; 'd'
0000000000000241         db  0x2d ; '-'
0000000000000242         db  0x6c ; 'l'
0000000000000243         db  0x69 ; 'i'
0000000000000244         db  0x6e ; 'n'
0000000000000245         db  0x75 ; 'u'
0000000000000246         db  0x78 ; 'x'
0000000000000247         db  0x2d ; '-'
0000000000000248         db  0x78 ; 'x'
0000000000000249         db  0x38 ; '8'
000000000000024a         db  0x36 ; '6'
000000000000024b         db  0x2d ; '-'
000000000000024c         db  0x36 ; '6'
000000000000024d         db  0x34 ; '4'
000000000000024e         db  0x2e ; '.'
000000000000024f         db  0x73 ; 's'
0000000000000250         db  0x6f ; 'o'
0000000000000251         db  0x2e ; '.'
0000000000000252         db  0x32 ; '2'
0000000000000253         db  0x00 ; '.'


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x9f ; '.'
0000000000000285         db  0x50 ; 'P'
0000000000000286         db  0x95 ; '.'
0000000000000287         db  0x6b ; 'k'
0000000000000288         db  0x04 ; '.'
0000000000000289         db  0x59 ; 'Y'
000000000000028a         db  0xf0 ; '.'
000000000000028b         db  0x4f ; 'O'
000000000000028c         db  0xeb ; '.'
000000000000028d         db  0x9e ; '.'
000000000000028e         db  0xe1 ; '.'
000000000000028f         db  0x0f ; '.'
0000000000000290         db  0x22 ; '"'
0000000000000291         db  0x51 ; 'Q'
0000000000000292         db  0xd5 ; '.'
0000000000000293         db  0x1e ; '.'
0000000000000294         db  0x1d ; '.'
0000000000000295         db  0xb0 ; '.'
0000000000000296         db  0x9e ; '.'
0000000000000297         db  0xed ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x3c ; '<'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x3c ; '<'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x3d ; '='
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x42 ; 'B'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0x940[ (1632 bytes)
        ; File offset : [736; 2368[ (1632 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xa0 ; '.'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x6c ; 'l'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xa5 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x15 ; '.'
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x4a ; 'J'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xd0 ; '.'
0000000000000371         db  0x02 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x20 ; ' '
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xab ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x12 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xc9 ; '.'
00000000000003b9         db  0x01 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x26 ; '&'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x22 ; '"'
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x57 ; 'W'
0000000000000401         db  0x01 ; '.'
0000000000000402         db  0x00 ; '.'
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x1e ; '.'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x61 ; 'a'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xd0 ; '.'
0000000000000449         db  0x00 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xf5 ; '.'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x7b ; '{'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xaf ; '.'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x42 ; 'B'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xd4 ; '.'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xfc ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x59 ; 'Y'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x4a ; 'J'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x06 ; '.'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0xb1 ; '.'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x0d ; '.'
0000000000000551         db  0x01 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x44 ; 'D'
0000000000000569         db  0x02 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x26 ; '&'
0000000000000581         db  0x01 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x5d ; ']'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0xee ; '.'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x3d ; '='
00000000000005c9         db  0x02 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xec ; '.'
00000000000005e1         db  0x02 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x20 ; ' '
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0xe7 ; '.'
00000000000005f9         db  0x00 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x50 ; 'P'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xbb ; '.'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x6b ; 'k'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x5e ; '^'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x0b ; '.'
0000000000000671         db  0x00 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x6d ; 'm'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x8e ; '.'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x2d ; '-'
00000000000006b9         db  0x02 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x95 ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x38 ; '8'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x19 ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x2d ; '-'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x16 ; '.'
0000000000000731         db  0x02 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x9d ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x75 ; 'u'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x56 ; 'V'
0000000000000779         db  0x02 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x8c ; '.'
0000000000000791         db  0x02 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0xac ; '.'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xc2 ; '.'
00000000000007c1         db  0x01 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x35 ; '5'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xfb ; '.'
00000000000007f1         db  0x02 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x20 ; ' '
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x65 ; 'e'
0000000000000809         db  0x01 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x8c ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xf9 ; '.'
0000000000000839         db  0x01 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x22 ; '"'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x79 ; 'y'
0000000000000851         db  0x01 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x08 ; '.'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x43 ; 'C'
0000000000000881         db  0x01 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x11 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x19 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x88 ; '.'
0000000000000889         db  0xb0 ; '.'
000000000000088a         db  0x20 ; ' '
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x08 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x71 ; 'q'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x11 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x19 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x80 ; '.'
00000000000008a1         db  0xb0 ; '.'
00000000000008a2         db  0x20 ; ' '
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x08 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0xb8 ; '.'
00000000000008b1         db  0x00 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x21 ; '!'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x19 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0xa0 ; '.'
00000000000008b9         db  0xb0 ; '.'
00000000000008ba         db  0x20 ; ' '
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x08 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x7c ; '|'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x11 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x19 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0xa0 ; '.'
00000000000008d1         db  0xb0 ; '.'
00000000000008d2         db  0x20 ; ' '
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x08 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xdb ; '.'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x21 ; '!'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x19 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x80 ; '.'
00000000000008e9         db  0xb0 ; '.'
00000000000008ea         db  0x20 ; ' '
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x08 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x99 ; '.'
00000000000008f9         db  0x01 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x11 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x19 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0xc0 ; '.'
0000000000000901         db  0xb0 ; '.'
0000000000000902         db  0x20 ; ' '
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x08 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x52 ; 'R'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x11 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x19 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x90 ; '.'
0000000000000919         db  0xb0 ; '.'
000000000000091a         db  0x20 ; ' '
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x04 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x87 ; '.'
0000000000000929         db  0x01 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x11 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x19 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x98 ; '.'
0000000000000931         db  0xb0 ; '.'
0000000000000932         db  0x20 ; ' '
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x08 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x940; 0xc55[ (789 bytes)
        ; File offset : [2368; 3157[ (789 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000940         db  0x00 ; '.'
0000000000000941         db  0x6c ; 'l'
0000000000000942         db  0x69 ; 'i'
0000000000000943         db  0x62 ; 'b'
0000000000000944         db  0x63 ; 'c'
0000000000000945         db  0x2e ; '.'
0000000000000946         db  0x73 ; 's'
0000000000000947         db  0x6f ; 'o'
0000000000000948         db  0x2e ; '.'
0000000000000949         db  0x36 ; '6'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x66 ; 'f'
000000000000094c         db  0x66 ; 'f'
000000000000094d         db  0x6c ; 'l'
000000000000094e         db  0x75 ; 'u'
000000000000094f         db  0x73 ; 's'
0000000000000950         db  0x68 ; 'h'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x73 ; 's'
0000000000000953         db  0x74 ; 't'
0000000000000954         db  0x72 ; 'r'
0000000000000955         db  0x63 ; 'c'
0000000000000956         db  0x70 ; 'p'
0000000000000957         db  0x79 ; 'y'
0000000000000958         db  0x00 ; '.'
0000000000000959         db  0x5f ; '_'
000000000000095a         db  0x5f ; '_'
000000000000095b         db  0x70 ; 'p'
000000000000095c         db  0x72 ; 'r'
000000000000095d         db  0x69 ; 'i'
000000000000095e         db  0x6e ; 'n'
000000000000095f         db  0x74 ; 't'
0000000000000960         db  0x66 ; 'f'
0000000000000961         db  0x5f ; '_'
0000000000000962         db  0x63 ; 'c'
0000000000000963         db  0x68 ; 'h'
0000000000000964         db  0x6b ; 'k'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x63 ; 'c'
0000000000000967         db  0x6c ; 'l'
0000000000000968         db  0x65 ; 'e'
0000000000000969         db  0x61 ; 'a'
000000000000096a         db  0x72 ; 'r'
000000000000096b         db  0x65 ; 'e'
000000000000096c         db  0x72 ; 'r'
000000000000096d         db  0x72 ; 'r'
000000000000096e         db  0x5f ; '_'
000000000000096f         db  0x75 ; 'u'
0000000000000970         db  0x6e ; 'n'
0000000000000971         db  0x6c ; 'l'
0000000000000972         db  0x6f ; 'o'
0000000000000973         db  0x63 ; 'c'
0000000000000974         db  0x6b ; 'k'
0000000000000975         db  0x65 ; 'e'
0000000000000976         db  0x64 ; 'd'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x73 ; 's'
0000000000000979         db  0x65 ; 'e'
000000000000097a         db  0x74 ; 't'
000000000000097b         db  0x6c ; 'l'
000000000000097c         db  0x6f ; 'o'
000000000000097d         db  0x63 ; 'c'
000000000000097e         db  0x61 ; 'a'
000000000000097f         db  0x6c ; 'l'
0000000000000980         db  0x65 ; 'e'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x6d ; 'm'
0000000000000983         db  0x62 ; 'b'
0000000000000984         db  0x72 ; 'r'
0000000000000985         db  0x74 ; 't'
0000000000000986         db  0x6f ; 'o'
0000000000000987         db  0x77 ; 'w'
0000000000000988         db  0x63 ; 'c'
0000000000000989         db  0x00 ; '.'
000000000000098a         db  0x73 ; 's'
000000000000098b         db  0x74 ; 't'
000000000000098c         db  0x72 ; 'r'
000000000000098d         db  0x6e ; 'n'
000000000000098e         db  0x63 ; 'c'
000000000000098f         db  0x6d ; 'm'
0000000000000990         db  0x70 ; 'p'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x6f ; 'o'
0000000000000993         db  0x70 ; 'p'
0000000000000994         db  0x74 ; 't'
0000000000000995         db  0x69 ; 'i'
0000000000000996         db  0x6e ; 'n'
0000000000000997         db  0x64 ; 'd'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x73 ; 's'
000000000000099a         db  0x74 ; 't'
000000000000099b         db  0x72 ; 'r'
000000000000099c         db  0x72 ; 'r'
000000000000099d         db  0x63 ; 'c'
000000000000099e         db  0x68 ; 'h'
000000000000099f         db  0x72 ; 'r'
00000000000009a0         db  0x00 ; '.'
00000000000009a1         db  0x64 ; 'd'
00000000000009a2         db  0x63 ; 'c'
00000000000009a3         db  0x67 ; 'g'
00000000000009a4         db  0x65 ; 'e'
00000000000009a5         db  0x74 ; 't'
00000000000009a6         db  0x74 ; 't'
00000000000009a7         db  0x65 ; 'e'
00000000000009a8         db  0x78 ; 'x'
00000000000009a9         db  0x74 ; 't'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x75 ; 'u'
00000000000009ac         db  0x73 ; 's'
00000000000009ad         db  0x65 ; 'e'
00000000000009ae         db  0x6c ; 'l'
00000000000009af         db  0x6f ; 'o'
00000000000009b0         db  0x63 ; 'c'
00000000000009b1         db  0x61 ; 'a'
00000000000009b2         db  0x6c ; 'l'
00000000000009b3         db  0x65 ; 'e'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x65 ; 'e'
00000000000009b6         db  0x72 ; 'r'
00000000000009b7         db  0x72 ; 'r'
00000000000009b8         db  0x6f ; 'o'
00000000000009b9         db  0x72 ; 'r'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x5f ; '_'
00000000000009bc         db  0x5f ; '_'
00000000000009bd         db  0x73 ; 's'
00000000000009be         db  0x74 ; 't'
00000000000009bf         db  0x61 ; 'a'
00000000000009c0         db  0x63 ; 'c'
00000000000009c1         db  0x6b ; 'k'
00000000000009c2         db  0x5f ; '_'
00000000000009c3         db  0x63 ; 'c'
00000000000009c4         db  0x68 ; 'h'
00000000000009c5         db  0x6b ; 'k'
00000000000009c6         db  0x5f ; '_'
00000000000009c7         db  0x66 ; 'f'
00000000000009c8         db  0x61 ; 'a'
00000000000009c9         db  0x69 ; 'i'
00000000000009ca         db  0x6c ; 'l'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x69 ; 'i'
00000000000009cd         db  0x73 ; 's'
00000000000009ce         db  0x77 ; 'w'
00000000000009cf         db  0x70 ; 'p'
00000000000009d0         db  0x72 ; 'r'
00000000000009d1         db  0x69 ; 'i'
00000000000009d2         db  0x6e ; 'n'
00000000000009d3         db  0x74 ; 't'
00000000000009d4         db  0x00 ; '.'
00000000000009d5         db  0x72 ; 'r'
00000000000009d6         db  0x65 ; 'e'
00000000000009d7         db  0x61 ; 'a'
00000000000009d8         db  0x6c ; 'l'
00000000000009d9         db  0x6c ; 'l'
00000000000009da         db  0x6f ; 'o'
00000000000009db         db  0x63 ; 'c'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x73 ; 's'
00000000000009de         db  0x74 ; 't'
00000000000009df         db  0x72 ; 'r'
00000000000009e0         db  0x74 ; 't'
00000000000009e1         db  0x6f ; 'o'
00000000000009e2         db  0x6c ; 'l'
00000000000009e3         db  0x64 ; 'd'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x61 ; 'a'
00000000000009e6         db  0x62 ; 'b'
00000000000009e7         db  0x6f ; 'o'
00000000000009e8         db  0x72 ; 'r'
00000000000009e9         db  0x74 ; 't'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x5f ; '_'
00000000000009ec         db  0x65 ; 'e'
00000000000009ed         db  0x78 ; 'x'
00000000000009ee         db  0x69 ; 'i'
00000000000009ef         db  0x74 ; 't'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x73 ; 's'
00000000000009f2         db  0x74 ; 't'
00000000000009f3         db  0x72 ; 'r'
00000000000009f4         db  0x73 ; 's'
00000000000009f5         db  0x70 ; 'p'
00000000000009f6         db  0x6e ; 'n'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x70 ; 'p'
00000000000009f9         db  0x72 ; 'r'
00000000000009fa         db  0x6f ; 'o'
00000000000009fb         db  0x67 ; 'g'
00000000000009fc         db  0x72 ; 'r'
00000000000009fd         db  0x61 ; 'a'
00000000000009fe         db  0x6d ; 'm'
00000000000009ff         db  0x5f ; '_'
                     aInvocationname:
0000000000000a00         db         "invocation_name", 0
0000000000000a10         db  0x5f ; '_'
0000000000000a11         db  0x5f ; '_'
0000000000000a12         db  0x63 ; 'c'
0000000000000a13         db  0x74 ; 't'
0000000000000a14         db  0x79 ; 'y'
0000000000000a15         db  0x70 ; 'p'
0000000000000a16         db  0x65 ; 'e'
0000000000000a17         db  0x5f ; '_'
0000000000000a18         db  0x67 ; 'g'
0000000000000a19         db  0x65 ; 'e'
0000000000000a1a         db  0x74 ; 't'
0000000000000a1b         db  0x5f ; '_'
0000000000000a1c         db  0x6d ; 'm'
0000000000000a1d         db  0x62 ; 'b'
0000000000000a1e         db  0x5f ; '_'
0000000000000a1f         db  0x63 ; 'c'
0000000000000a20         db  0x75 ; 'u'
0000000000000a21         db  0x72 ; 'r'
0000000000000a22         db  0x5f ; '_'
0000000000000a23         db  0x6d ; 'm'
0000000000000a24         db  0x61 ; 'a'
0000000000000a25         db  0x78 ; 'x'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x73 ; 's'
0000000000000a28         db  0x74 ; 't'
0000000000000a29         db  0x72 ; 'r'
0000000000000a2a         db  0x74 ; 't'
0000000000000a2b         db  0x6f ; 'o'
0000000000000a2c         db  0x6c ; 'l'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x63 ; 'c'
0000000000000a2f         db  0x61 ; 'a'
0000000000000a30         db  0x6c ; 'l'
0000000000000a31         db  0x6c ; 'l'
0000000000000a32         db  0x6f ; 'o'
0000000000000a33         db  0x63 ; 'c'
0000000000000a34         db  0x00 ; '.'
0000000000000a35         db  0x73 ; 's'
0000000000000a36         db  0x74 ; 't'
0000000000000a37         db  0x72 ; 'r'
0000000000000a38         db  0x6c ; 'l'
0000000000000a39         db  0x65 ; 'e'
0000000000000a3a         db  0x6e ; 'n'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x6e ; 'n'
0000000000000a3d         db  0x65 ; 'e'
0000000000000a3e         db  0x77 ; 'w'
0000000000000a3f         db  0x6c ; 'l'
0000000000000a40         db  0x6f ; 'o'
0000000000000a41         db  0x63 ; 'c'
0000000000000a42         db  0x61 ; 'a'
0000000000000a43         db  0x6c ; 'l'
0000000000000a44         db  0x65 ; 'e'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x6d ; 'm'
0000000000000a47         db  0x65 ; 'e'
0000000000000a48         db  0x6d ; 'm'
0000000000000a49         db  0x73 ; 's'
0000000000000a4a         db  0x65 ; 'e'
0000000000000a4b         db  0x74 ; 't'
0000000000000a4c         db  0x00 ; '.'
0000000000000a4d         db  0x73 ; 's'
0000000000000a4e         db  0x74 ; 't'
0000000000000a4f         db  0x72 ; 'r'
0000000000000a50         db  0x63 ; 'c'
0000000000000a51         db  0x73 ; 's'
0000000000000a52         db  0x70 ; 'p'
0000000000000a53         db  0x6e ; 'n'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x5f ; '_'
0000000000000a56         db  0x5f ; '_'
0000000000000a57         db  0x65 ; 'e'
0000000000000a58         db  0x72 ; 'r'
0000000000000a59         db  0x72 ; 'r'
0000000000000a5a         db  0x6e ; 'n'
0000000000000a5b         db  0x6f ; 'o'
0000000000000a5c         db  0x5f ; '_'
0000000000000a5d         db  0x6c ; 'l'
0000000000000a5e         db  0x6f ; 'o'
0000000000000a5f         db  0x63 ; 'c'
0000000000000a60         db  0x61 ; 'a'
0000000000000a61         db  0x74 ; 't'
0000000000000a62         db  0x69 ; 'i'
0000000000000a63         db  0x6f ; 'o'
0000000000000a64         db  0x6e ; 'n'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x6d ; 'm'
0000000000000a67         db  0x65 ; 'e'
0000000000000a68         db  0x6d ; 'm'
0000000000000a69         db  0x63 ; 'c'
0000000000000a6a         db  0x6d ; 'm'
0000000000000a6b         db  0x70 ; 'p'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x6d ; 'm'
0000000000000a6e         db  0x65 ; 'e'
0000000000000a6f         db  0x6d ; 'm'
0000000000000a70         db  0x70 ; 'p'
0000000000000a71         db  0x63 ; 'c'
0000000000000a72         db  0x70 ; 'p'
0000000000000a73         db  0x79 ; 'y'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x5f ; '_'
0000000000000a76         db  0x5f ; '_'
0000000000000a77         db  0x66 ; 'f'
0000000000000a78         db  0x70 ; 'p'
0000000000000a79         db  0x72 ; 'r'
0000000000000a7a         db  0x69 ; 'i'
0000000000000a7b         db  0x6e ; 'n'
0000000000000a7c         db  0x74 ; 't'
0000000000000a7d         db  0x66 ; 'f'
0000000000000a7e         db  0x5f ; '_'
0000000000000a7f         db  0x63 ; 'c'
0000000000000a80         db  0x68 ; 'h'
0000000000000a81         db  0x6b ; 'k'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x73 ; 's'
0000000000000a84         db  0x74 ; 't'
0000000000000a85         db  0x64 ; 'd'
0000000000000a86         db  0x6f ; 'o'
0000000000000a87         db  0x75 ; 'u'
0000000000000a88         db  0x74 ; 't'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x6c ; 'l'
0000000000000a8b         db  0x73 ; 's'
0000000000000a8c         db  0x65 ; 'e'
0000000000000a8d         db  0x65 ; 'e'
0000000000000a8e         db  0x6b ; 'k'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x6d ; 'm'
0000000000000a91         db  0x65 ; 'e'
0000000000000a92         db  0x6d ; 'm'
0000000000000a93         db  0x63 ; 'c'
0000000000000a94         db  0x70 ; 'p'
0000000000000a95         db  0x79 ; 'y'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x66 ; 'f'
0000000000000a98         db  0x63 ; 'c'
0000000000000a99         db  0x6c ; 'l'
0000000000000a9a         db  0x6f ; 'o'
0000000000000a9b         db  0x73 ; 's'
0000000000000a9c         db  0x65 ; 'e'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x6d ; 'm'
0000000000000a9f         db  0x61 ; 'a'
0000000000000aa0         db  0x6c ; 'l'
0000000000000aa1         db  0x6c ; 'l'
0000000000000aa2         db  0x6f ; 'o'
0000000000000aa3         db  0x63 ; 'c'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x6d ; 'm'
0000000000000aa6         db  0x62 ; 'b'
0000000000000aa7         db  0x73 ; 's'
0000000000000aa8         db  0x69 ; 'i'
0000000000000aa9         db  0x6e ; 'n'
0000000000000aaa         db  0x69 ; 'i'
0000000000000aab         db  0x74 ; 't'
0000000000000aac         db  0x00 ; '.'
0000000000000aad         db  0x6e ; 'n'
0000000000000aae         db  0x6c ; 'l'
0000000000000aaf         db  0x5f ; '_'
0000000000000ab0         db  0x6c ; 'l'
0000000000000ab1         db  0x61 ; 'a'
0000000000000ab2         db  0x6e ; 'n'
0000000000000ab3         db  0x67 ; 'g'
0000000000000ab4         db  0x69 ; 'i'
0000000000000ab5         db  0x6e ; 'n'
0000000000000ab6         db  0x66 ; 'f'
0000000000000ab7         db  0x6f ; 'o'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x5f ; '_'
0000000000000aba         db  0x5f ; '_'
0000000000000abb         db  0x63 ; 'c'
0000000000000abc         db  0x74 ; 't'
0000000000000abd         db  0x79 ; 'y'
0000000000000abe         db  0x70 ; 'p'
0000000000000abf         db  0x65 ; 'e'
0000000000000ac0         db  0x5f ; '_'
0000000000000ac1         db  0x62 ; 'b'
0000000000000ac2         db  0x5f ; '_'
0000000000000ac3         db  0x6c ; 'l'
0000000000000ac4         db  0x6f ; 'o'
0000000000000ac5         db  0x63 ; 'c'
0000000000000ac6         db  0x00 ; '.'
0000000000000ac7         db  0x6f ; 'o'
0000000000000ac8         db  0x70 ; 'p'
0000000000000ac9         db  0x74 ; 't'
0000000000000aca         db  0x61 ; 'a'
0000000000000acb         db  0x72 ; 'r'
0000000000000acc         db  0x67 ; 'g'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x5f ; '_'
0000000000000acf         db  0x5f ; '_'
0000000000000ad0         db  0x66 ; 'f'
0000000000000ad1         db  0x72 ; 'r'
0000000000000ad2         db  0x65 ; 'e'
0000000000000ad3         db  0x61 ; 'a'
0000000000000ad4         db  0x64 ; 'd'
0000000000000ad5         db  0x69 ; 'i'
0000000000000ad6         db  0x6e ; 'n'
0000000000000ad7         db  0x67 ; 'g'
0000000000000ad8         db  0x00 ; '.'
0000000000000ad9         db  0x73 ; 's'
0000000000000ada         db  0x74 ; 't'
0000000000000adb         db  0x64 ; 'd'
0000000000000adc         db  0x65 ; 'e'
0000000000000add         db  0x72 ; 'r'
0000000000000ade         db  0x72 ; 'r'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x5f ; '_'
0000000000000ae1         db  0x5f ; '_'
0000000000000ae2         db  0x73 ; 's'
0000000000000ae3         db  0x6e ; 'n'
0000000000000ae4         db  0x70 ; 'p'
0000000000000ae5         db  0x72 ; 'r'
0000000000000ae6         db  0x69 ; 'i'
0000000000000ae7         db  0x6e ; 'n'
0000000000000ae8         db  0x74 ; 't'
0000000000000ae9         db  0x66 ; 'f'
0000000000000aea         db  0x5f ; '_'
0000000000000aeb         db  0x63 ; 'c'
0000000000000aec         db  0x68 ; 'h'
0000000000000aed         db  0x6b ; 'k'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x67 ; 'g'
0000000000000af0         db  0x65 ; 'e'
0000000000000af1         db  0x74 ; 't'
0000000000000af2         db  0x6f ; 'o'
0000000000000af3         db  0x70 ; 'p'
0000000000000af4         db  0x74 ; 't'
0000000000000af5         db  0x5f ; '_'
0000000000000af6         db  0x6c ; 'l'
0000000000000af7         db  0x6f ; 'o'
0000000000000af8         db  0x6e ; 'n'
0000000000000af9         db  0x67 ; 'g'
0000000000000afa         db  0x00 ; '.'
0000000000000afb         db  0x66 ; 'f'
0000000000000afc         db  0x69 ; 'i'
0000000000000afd         db  0x6c ; 'l'
0000000000000afe         db  0x65 ; 'e'
0000000000000aff         db  0x6e ; 'n'
0000000000000b00         db  0x6f ; 'o'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x66 ; 'f'
0000000000000b03         db  0x77 ; 'w'
0000000000000b04         db  0x72 ; 'r'
0000000000000b05         db  0x69 ; 'i'
0000000000000b06         db  0x74 ; 't'
0000000000000b07         db  0x65 ; 'e'
0000000000000b08         db  0x00 ; '.'
0000000000000b09         db  0x5f ; '_'
0000000000000b0a         db  0x5f ; '_'
0000000000000b0b         db  0x66 ; 'f'
0000000000000b0c         db  0x70 ; 'p'
0000000000000b0d         db  0x65 ; 'e'
0000000000000b0e         db  0x6e ; 'n'
0000000000000b0f         db  0x64 ; 'd'
0000000000000b10         db  0x69 ; 'i'
0000000000000b11         db  0x6e ; 'n'
0000000000000b12         db  0x67 ; 'g'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x73 ; 's'
0000000000000b15         db  0x74 ; 't'
0000000000000b16         db  0x72 ; 'r'
0000000000000b17         db  0x63 ; 'c'
0000000000000b18         db  0x68 ; 'h'
0000000000000b19         db  0x72 ; 'r'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x70 ; 'p'
0000000000000b1c         db  0x72 ; 'r'
0000000000000b1d         db  0x6f ; 'o'
0000000000000b1e         db  0x67 ; 'g'
0000000000000b1f         db  0x72 ; 'r'
0000000000000b20         db  0x61 ; 'a'
0000000000000b21         db  0x6d ; 'm'
0000000000000b22         db  0x5f ; '_'
0000000000000b23         db  0x69 ; 'i'
0000000000000b24         db  0x6e ; 'n'
0000000000000b25         db  0x76 ; 'v'
0000000000000b26         db  0x6f ; 'o'
0000000000000b27         db  0x63 ; 'c'
0000000000000b28         db  0x61 ; 'a'
0000000000000b29         db  0x74 ; 't'
0000000000000b2a         db  0x69 ; 'i'
0000000000000b2b         db  0x6f ; 'o'
0000000000000b2c         db  0x6e ; 'n'
0000000000000b2d         db  0x5f ; '_'
0000000000000b2e         db  0x73 ; 's'
0000000000000b2f         db  0x68 ; 'h'
0000000000000b30         db  0x6f ; 'o'
0000000000000b31         db  0x72 ; 'r'
0000000000000b32         db  0x74 ; 't'
0000000000000b33         db  0x5f ; '_'
0000000000000b34         db  0x6e ; 'n'
0000000000000b35         db  0x61 ; 'a'
0000000000000b36         db  0x6d ; 'm'
0000000000000b37         db  0x65 ; 'e'
0000000000000b38         db  0x00 ; '.'
0000000000000b39         db  0x5f ; '_'
0000000000000b3a         db  0x5f ; '_'
0000000000000b3b         db  0x63 ; 'c'
0000000000000b3c         db  0x78 ; 'x'
0000000000000b3d         db  0x61 ; 'a'
0000000000000b3e         db  0x5f ; '_'
0000000000000b3f         db  0x66 ; 'f'
0000000000000b40         db  0x69 ; 'i'
0000000000000b41         db  0x6e ; 'n'
0000000000000b42         db  0x61 ; 'a'
                     aLize:
0000000000000b43         db         "lize", 0
0000000000000b48         db  0x5f ; '_'
0000000000000b49         db  0x5f ; '_'
0000000000000b4a         db  0x73 ; 's'
0000000000000b4b         db  0x70 ; 'p'
0000000000000b4c         db  0x72 ; 'r'
0000000000000b4d         db  0x69 ; 'i'
0000000000000b4e         db  0x6e ; 'n'
0000000000000b4f         db  0x74 ; 't'
0000000000000b50         db  0x66 ; 'f'
0000000000000b51         db  0x5f ; '_'
0000000000000b52         db  0x63 ; 'c'
0000000000000b53         db  0x68 ; 'h'
0000000000000b54         db  0x6b ; 'k'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x6d ; 'm'
0000000000000b57         db  0x65 ; 'e'
0000000000000b58         db  0x6d ; 'm'
0000000000000b59         db  0x6d ; 'm'
0000000000000b5a         db  0x6f ; 'o'
0000000000000b5b         db  0x76 ; 'v'
0000000000000b5c         db  0x65 ; 'e'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x62 ; 'b'
0000000000000b5f         db  0x69 ; 'i'
0000000000000b60         db  0x6e ; 'n'
0000000000000b61         db  0x64 ; 'd'
0000000000000b62         db  0x74 ; 't'
0000000000000b63         db  0x65 ; 'e'
0000000000000b64         db  0x78 ; 'x'
0000000000000b65         db  0x74 ; 't'
0000000000000b66         db  0x64 ; 'd'
0000000000000b67         db  0x6f ; 'o'
0000000000000b68         db  0x6d ; 'm'
0000000000000b69         db  0x61 ; 'a'
0000000000000b6a         db  0x69 ; 'i'
0000000000000b6b         db  0x6e ; 'n'
0000000000000b6c         db  0x00 ; '.'
0000000000000b6d         db  0x66 ; 'f'
0000000000000b6e         db  0x77 ; 'w'
0000000000000b6f         db  0x72 ; 'r'
0000000000000b70         db  0x69 ; 'i'
0000000000000b71         db  0x74 ; 't'
0000000000000b72         db  0x65 ; 'e'
0000000000000b73         db  0x5f ; '_'
0000000000000b74         db  0x75 ; 'u'
0000000000000b75         db  0x6e ; 'n'
0000000000000b76         db  0x6c ; 'l'
0000000000000b77         db  0x6f ; 'o'
0000000000000b78         db  0x63 ; 'c'
0000000000000b79         db  0x6b ; 'k'
0000000000000b7a         db  0x65 ; 'e'
0000000000000b7b         db  0x64 ; 'd'
0000000000000b7c         db  0x00 ; '.'
0000000000000b7d         db  0x73 ; 's'
0000000000000b7e         db  0x74 ; 't'
0000000000000b7f         db  0x72 ; 'r'
0000000000000b80         db  0x63 ; 'c'
0000000000000b81         db  0x6d ; 'm'
0000000000000b82         db  0x70 ; 'p'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x5f ; '_'
0000000000000b85         db  0x5f ; '_'
0000000000000b86         db  0x6c ; 'l'
0000000000000b87         db  0x69 ; 'i'
0000000000000b88         db  0x62 ; 'b'
0000000000000b89         db  0x63 ; 'c'
0000000000000b8a         db  0x5f ; '_'
0000000000000b8b         db  0x73 ; 's'
0000000000000b8c         db  0x74 ; 't'
0000000000000b8d         db  0x61 ; 'a'
0000000000000b8e         db  0x72 ; 'r'
0000000000000b8f         db  0x74 ; 't'
0000000000000b90         db  0x5f ; '_'
0000000000000b91         db  0x6d ; 'm'
0000000000000b92         db  0x61 ; 'a'
0000000000000b93         db  0x69 ; 'i'
0000000000000b94         db  0x6e ; 'n'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x66 ; 'f'
0000000000000b97         db  0x73 ; 's'
0000000000000b98         db  0x65 ; 'e'
0000000000000b99         db  0x65 ; 'e'
0000000000000b9a         db  0x6b ; 'k'
0000000000000b9b         db  0x6f ; 'o'
0000000000000b9c         db  0x00 ; '.'
0000000000000b9d         db  0x66 ; 'f'
0000000000000b9e         db  0x70 ; 'p'
0000000000000b9f         db  0x75 ; 'u'
0000000000000ba0         db  0x74 ; 't'
0000000000000ba1         db  0x73 ; 's'
0000000000000ba2         db  0x5f ; '_'
0000000000000ba3         db  0x75 ; 'u'
0000000000000ba4         db  0x6e ; 'n'
0000000000000ba5         db  0x6c ; 'l'
0000000000000ba6         db  0x6f ; 'o'
0000000000000ba7         db  0x63 ; 'c'
0000000000000ba8         db  0x6b ; 'k'
0000000000000ba9         db  0x65 ; 'e'
0000000000000baa         db  0x64 ; 'd'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x66 ; 'f'
0000000000000bad         db  0x72 ; 'r'
0000000000000bae         db  0x65 ; 'e'
0000000000000baf         db  0x65 ; 'e'
0000000000000bb0         db  0x00 ; '.'
0000000000000bb1         db  0x5f ; '_'
0000000000000bb2         db  0x5f ; '_'
0000000000000bb3         db  0x70 ; 'p'
0000000000000bb4         db  0x72 ; 'r'
0000000000000bb5         db  0x6f ; 'o'
0000000000000bb6         db  0x67 ; 'g'
0000000000000bb7         db  0x6e ; 'n'
0000000000000bb8         db  0x61 ; 'a'
0000000000000bb9         db  0x6d ; 'm'
0000000000000bba         db  0x65 ; 'e'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x5f ; '_'
0000000000000bbd         db  0x5f ; '_'
0000000000000bbe         db  0x70 ; 'p'
0000000000000bbf         db  0x72 ; 'r'
0000000000000bc0         db  0x6f ; 'o'
0000000000000bc1         db  0x67 ; 'g'
0000000000000bc2         db  0x6e ; 'n'
0000000000000bc3         db  0x61 ; 'a'
0000000000000bc4         db  0x6d ; 'm'
0000000000000bc5         db  0x65 ; 'e'
0000000000000bc6         db  0x5f ; '_'
0000000000000bc7         db  0x66 ; 'f'
0000000000000bc8         db  0x75 ; 'u'
0000000000000bc9         db  0x6c ; 'l'
0000000000000bca         db  0x6c ; 'l'
0000000000000bcb         db  0x00 ; '.'
0000000000000bcc         db  0x5f ; '_'
0000000000000bcd         db  0x5f ; '_'
0000000000000bce         db  0x63 ; 'c'
0000000000000bcf         db  0x78 ; 'x'
0000000000000bd0         db  0x61 ; 'a'
0000000000000bd1         db  0x5f ; '_'
0000000000000bd2         db  0x61 ; 'a'
0000000000000bd3         db  0x74 ; 't'
0000000000000bd4         db  0x65 ; 'e'
0000000000000bd5         db  0x78 ; 'x'
0000000000000bd6         db  0x69 ; 'i'
0000000000000bd7         db  0x74 ; 't'
0000000000000bd8         db  0x00 ; '.'
0000000000000bd9         db  0x47 ; 'G'
0000000000000bda         db  0x4c ; 'L'
0000000000000bdb         db  0x49 ; 'I'
0000000000000bdc         db  0x42 ; 'B'
0000000000000bdd         db  0x43 ; 'C'
0000000000000bde         db  0x5f ; '_'
0000000000000bdf         db  0x32 ; '2'
0000000000000be0         db  0x2e ; '.'
0000000000000be1         db  0x31 ; '1'
0000000000000be2         db  0x34 ; '4'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x47 ; 'G'
0000000000000be5         db  0x4c ; 'L'
0000000000000be6         db  0x49 ; 'I'
0000000000000be7         db  0x42 ; 'B'
0000000000000be8         db  0x43 ; 'C'
0000000000000be9         db  0x5f ; '_'
0000000000000bea         db  0x32 ; '2'
0000000000000beb         db  0x2e ; '.'
0000000000000bec         db  0x33 ; '3'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x47 ; 'G'
0000000000000bef         db  0x4c ; 'L'
0000000000000bf0         db  0x49 ; 'I'
0000000000000bf1         db  0x42 ; 'B'
0000000000000bf2         db  0x43 ; 'C'
0000000000000bf3         db  0x5f ; '_'
0000000000000bf4         db  0x32 ; '2'
0000000000000bf5         db  0x2e ; '.'
0000000000000bf6         db  0x34 ; '4'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0x47 ; 'G'
0000000000000bf9         db  0x4c ; 'L'
0000000000000bfa         db  0x49 ; 'I'
0000000000000bfb         db  0x42 ; 'B'
0000000000000bfc         db  0x43 ; 'C'
0000000000000bfd         db  0x5f ; '_'
0000000000000bfe         db  0x32 ; '2'
0000000000000bff         db  0x2e ; '.'
0000000000000c00         db  0x33 ; '3'
0000000000000c01         db  0x2e ; '.'
0000000000000c02         db  0x34 ; '4'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x47 ; 'G'
0000000000000c05         db  0x4c ; 'L'
0000000000000c06         db  0x49 ; 'I'
0000000000000c07         db  0x42 ; 'B'
0000000000000c08         db  0x43 ; 'C'
0000000000000c09         db  0x5f ; '_'
0000000000000c0a         db  0x32 ; '2'
0000000000000c0b         db  0x2e ; '.'
0000000000000c0c         db  0x32 ; '2'
0000000000000c0d         db  0x2e ; '.'
0000000000000c0e         db  0x35 ; '5'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x5f ; '_'
0000000000000c11         db  0x49 ; 'I'
0000000000000c12         db  0x54 ; 'T'
0000000000000c13         db  0x4d ; 'M'
0000000000000c14         db  0x5f ; '_'
0000000000000c15         db  0x64 ; 'd'
0000000000000c16         db  0x65 ; 'e'
0000000000000c17         db  0x72 ; 'r'
0000000000000c18         db  0x65 ; 'e'
0000000000000c19         db  0x67 ; 'g'
0000000000000c1a         db  0x69 ; 'i'
0000000000000c1b         db  0x73 ; 's'
0000000000000c1c         db  0x74 ; 't'
0000000000000c1d         db  0x65 ; 'e'
0000000000000c1e         db  0x72 ; 'r'
0000000000000c1f         db  0x54 ; 'T'
0000000000000c20         db  0x4d ; 'M'
0000000000000c21         db  0x43 ; 'C'
0000000000000c22         db  0x6c ; 'l'
0000000000000c23         db  0x6f ; 'o'
0000000000000c24         db  0x6e ; 'n'
0000000000000c25         db  0x65 ; 'e'
0000000000000c26         db  0x54 ; 'T'
0000000000000c27         db  0x61 ; 'a'
0000000000000c28         db  0x62 ; 'b'
0000000000000c29         db  0x6c ; 'l'
0000000000000c2a         db  0x65 ; 'e'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x5f ; '_'
0000000000000c2d         db  0x5f ; '_'
0000000000000c2e         db  0x67 ; 'g'
0000000000000c2f         db  0x6d ; 'm'
0000000000000c30         db  0x6f ; 'o'
0000000000000c31         db  0x6e ; 'n'
0000000000000c32         db  0x5f ; '_'
0000000000000c33         db  0x73 ; 's'
0000000000000c34         db  0x74 ; 't'
0000000000000c35         db  0x61 ; 'a'
0000000000000c36         db  0x72 ; 'r'
0000000000000c37         db  0x74 ; 't'
0000000000000c38         db  0x5f ; '_'
0000000000000c39         db  0x5f ; '_'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x5f ; '_'
0000000000000c3c         db  0x49 ; 'I'
0000000000000c3d         db  0x54 ; 'T'
0000000000000c3e         db  0x4d ; 'M'
0000000000000c3f         db  0x5f ; '_'
0000000000000c40         db  0x72 ; 'r'
0000000000000c41         db  0x65 ; 'e'
0000000000000c42         db  0x67 ; 'g'
0000000000000c43         db  0x69 ; 'i'
0000000000000c44         db  0x73 ; 's'
0000000000000c45         db  0x74 ; 't'
0000000000000c46         db  0x65 ; 'e'
0000000000000c47         db  0x72 ; 'r'
0000000000000c48         db  0x54 ; 'T'
0000000000000c49         db  0x4d ; 'M'
0000000000000c4a         db  0x43 ; 'C'
0000000000000c4b         db  0x6c ; 'l'
0000000000000c4c         db  0x6f ; 'o'
0000000000000c4d         db  0x6e ; 'n'
0000000000000c4e         db  0x65 ; 'e'
0000000000000c4f         db  0x54 ; 'T'
0000000000000c50         db  0x61 ; 'a'
0000000000000c51         db  0x62 ; 'b'
0000000000000c52         db  0x6c ; 'l'
0000000000000c53         db  0x65 ; 'e'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xc56; 0xcde[ (136 bytes)
        ; File offset : [3158; 3294[ (136 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x00 ; '.'
0000000000000c58         db  0x03 ; '.'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x02 ; '.'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x02 ; '.'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x02 ; '.'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0x02 ; '.'
0000000000000c61         db  0x00 ; '.'
0000000000000c62         db  0x00 ; '.'
0000000000000c63         db  0x00 ; '.'
0000000000000c64         db  0x02 ; '.'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x02 ; '.'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x02 ; '.'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x02 ; '.'
0000000000000c6b         db  0x00 ; '.'
0000000000000c6c         db  0x02 ; '.'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x02 ; '.'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0x02 ; '.'
0000000000000c71         db  0x00 ; '.'
0000000000000c72         db  0x02 ; '.'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x02 ; '.'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x02 ; '.'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x04 ; '.'
0000000000000c79         db  0x00 ; '.'
0000000000000c7a         db  0x02 ; '.'
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x02 ; '.'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x02 ; '.'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x05 ; '.'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x02 ; '.'
0000000000000c83         db  0x00 ; '.'
0000000000000c84         db  0x02 ; '.'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x02 ; '.'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0x02 ; '.'
0000000000000c89         db  0x00 ; '.'
0000000000000c8a         db  0x02 ; '.'
0000000000000c8b         db  0x00 ; '.'
0000000000000c8c         db  0x02 ; '.'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x02 ; '.'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0x02 ; '.'
0000000000000c91         db  0x00 ; '.'
0000000000000c92         db  0x02 ; '.'
0000000000000c93         db  0x00 ; '.'
0000000000000c94         db  0x02 ; '.'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x02 ; '.'
0000000000000c99         db  0x00 ; '.'
0000000000000c9a         db  0x06 ; '.'
0000000000000c9b         db  0x00 ; '.'
0000000000000c9c         db  0x02 ; '.'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x05 ; '.'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x02 ; '.'
0000000000000ca1         db  0x00 ; '.'
0000000000000ca2         db  0x02 ; '.'
0000000000000ca3         db  0x00 ; '.'
0000000000000ca4         db  0x02 ; '.'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x02 ; '.'
0000000000000ca7         db  0x00 ; '.'
0000000000000ca8         db  0x02 ; '.'
0000000000000ca9         db  0x00 ; '.'
0000000000000caa         db  0x02 ; '.'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x02 ; '.'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x03 ; '.'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x02 ; '.'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x02 ; '.'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x02 ; '.'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x02 ; '.'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0x02 ; '.'
0000000000000cb9         db  0x00 ; '.'
0000000000000cba         db  0x02 ; '.'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x02 ; '.'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x02 ; '.'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x03 ; '.'
0000000000000cc1         db  0x00 ; '.'
0000000000000cc2         db  0x00 ; '.'
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x02 ; '.'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x02 ; '.'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x02 ; '.'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x05 ; '.'
0000000000000ccb         db  0x00 ; '.'
0000000000000ccc         db  0x03 ; '.'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x02 ; '.'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0x02 ; '.'
0000000000000cd1         db  0x00 ; '.'
0000000000000cd2         db  0x02 ; '.'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x02 ; '.'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x02 ; '.'
0000000000000cd7         db  0x00 ; '.'
0000000000000cd8         db  0x02 ; '.'
0000000000000cd9         db  0x00 ; '.'
0000000000000cda         db  0x02 ; '.'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x02 ; '.'
0000000000000cdd         db  0x00 ; '.'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xce0; 0xd40[ (96 bytes)
        ; File offset : [3296; 3392[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000ce0         db  0x01 ; '.'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x05 ; '.'
0000000000000ce3         db  0x00 ; '.'
0000000000000ce4         db  0x01 ; '.'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0x10 ; '.'
0000000000000ce9         db  0x00 ; '.'
0000000000000cea         db  0x00 ; '.'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x00 ; '.'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x94 ; '.'
0000000000000cf1         db  0x91 ; '.'
0000000000000cf2         db  0x96 ; '.'
0000000000000cf3         db  0x06 ; '.'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x06 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x99 ; '.'
0000000000000cf9         db  0x02 ; '.'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x10 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x00 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0x13 ; '.'
0000000000000d01         db  0x69 ; 'i'
0000000000000d02         db  0x69 ; 'i'
0000000000000d03         db  0x0d ; '.'
0000000000000d04         db  0x00 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x05 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0xa4 ; '.'
0000000000000d09         db  0x02 ; '.'
0000000000000d0a         db  0x00 ; '.'
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x10 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x00 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x14 ; '.'
0000000000000d11         db  0x69 ; 'i'
0000000000000d12         db  0x69 ; 'i'
0000000000000d13         db  0x0d ; '.'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x04 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0xae ; '.'
0000000000000d19         db  0x02 ; '.'
0000000000000d1a         db  0x00 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x10 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x74 ; 't'
0000000000000d21         db  0x19 ; '.'
0000000000000d22         db  0x69 ; 'i'
0000000000000d23         db  0x09 ; '.'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x03 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0xb8 ; '.'
0000000000000d29         db  0x02 ; '.'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x10 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x75 ; 'u'
0000000000000d31         db  0x1a ; '.'
0000000000000d32         db  0x69 ; 'i'
0000000000000d33         db  0x09 ; '.'
0000000000000d34         db  0x00 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x02 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0xc4 ; '.'
0000000000000d39         db  0x02 ; '.'
0000000000000d3a         db  0x00 ; '.'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xd40; 0x1040[ (768 bytes)
        ; File offset : [3392; 4160[ (768 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000d40         db  0xf0 ; '.'
0000000000000d41         db  0xaa ; '.'
0000000000000d42         db  0x20 ; ' '
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x00 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x08 ; '.'
0000000000000d49         db  0x00 ; '.'
0000000000000d4a         db  0x00 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x00 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x40 ; '@'
0000000000000d51         db  0x26 ; '&'
0000000000000d52         db  0x00 ; '.'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x00 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0xf8 ; '.'
0000000000000d59         db  0xaa ; '.'
0000000000000d5a         db  0x20 ; ' '
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x08 ; '.'
0000000000000d61         db  0x00 ; '.'
0000000000000d62         db  0x00 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x00 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x00 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x00 ; '.'
0000000000000d69         db  0x26 ; '&'
0000000000000d6a         db  0x00 ; '.'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x00 ; '.'
0000000000000d71         db  0xab ; '.'
0000000000000d72         db  0x20 ; ' '
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x00 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x08 ; '.'
0000000000000d79         db  0x00 ; '.'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x00 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x22 ; '"'
0000000000000d81         db  0x81 ; '.'
0000000000000d82         db  0x00 ; '.'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x20 ; ' '
0000000000000d89         db  0xab ; '.'
0000000000000d8a         db  0x20 ; ' '
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x00 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x08 ; '.'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x00 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x2e ; '.'
0000000000000d99         db  0x81 ; '.'
0000000000000d9a         db  0x00 ; '.'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x40 ; '@'
0000000000000da1         db  0xab ; '.'
0000000000000da2         db  0x20 ; ' '
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x00 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x08 ; '.'
0000000000000da9         db  0x00 ; '.'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x00 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x35 ; '5'
0000000000000db1         db  0x81 ; '.'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x60 ; '`'
0000000000000db9         db  0xab ; '.'
0000000000000dba         db  0x20 ; ' '
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x08 ; '.'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x00 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x3f ; '?'
0000000000000dc9         db  0x81 ; '.'
0000000000000dca         db  0x00 ; '.'
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x80 ; '.'
0000000000000dd1         db  0xab ; '.'
0000000000000dd2         db  0x20 ; ' '
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x00 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x08 ; '.'
0000000000000dd9         db  0x00 ; '.'
0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0x44 ; 'D'
0000000000000de1         db  0x81 ; '.'
0000000000000de2         db  0x00 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0xc0 ; '.'
0000000000000de9         db  0xab ; '.'
0000000000000dea         db  0x20 ; ' '
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x08 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x00 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x77 ; 'w'
0000000000000df9         db  0x88 ; '.'
0000000000000dfa         db  0x00 ; '.'
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x00 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0xc8 ; '.'
0000000000000e01         db  0xab ; '.'
0000000000000e02         db  0x20 ; ' '
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x00 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x08 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x00 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x7f ; '.'
0000000000000e11         db  0x88 ; '.'
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0xd0 ; '.'
0000000000000e19         db  0xab ; '.'
0000000000000e1a         db  0x20 ; ' '
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x08 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x85 ; '.'
0000000000000e29         db  0x88 ; '.'
0000000000000e2a         db  0x00 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0xd8 ; '.'
0000000000000e31         db  0xab ; '.'
0000000000000e32         db  0x20 ; ' '
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x00 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x08 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x92 ; '.'
0000000000000e41         db  0x88 ; '.'
0000000000000e42         db  0x00 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0xe0 ; '.'
0000000000000e49         db  0xab ; '.'
0000000000000e4a         db  0x20 ; ' '
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x00 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x08 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x9f ; '.'
0000000000000e59         db  0x88 ; '.'
0000000000000e5a         db  0x00 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0xe8 ; '.'
0000000000000e61         db  0xab ; '.'
0000000000000e62         db  0x20 ; ' '
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x08 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0xb3 ; '.'
0000000000000e71         db  0x88 ; '.'
0000000000000e72         db  0x00 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0xf0 ; '.'
0000000000000e79         db  0xab ; '.'
0000000000000e7a         db  0x20 ; ' '
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x08 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0xb5 ; '.'
0000000000000e89         db  0x88 ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0xf8 ; '.'
0000000000000e91         db  0xab ; '.'
0000000000000e92         db  0x20 ; ' '
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x08 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x98 ; '.'
0000000000000ea1         db  0x88 ; '.'
0000000000000ea2         db  0x00 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x00 ; '.'
0000000000000ea9         db  0xac ; '.'
0000000000000eaa         db  0x20 ; ' '
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x08 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x86 ; '.'
0000000000000eb9         db  0x80 ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x08 ; '.'
0000000000000ec1         db  0xac ; '.'
0000000000000ec2         db  0x20 ; ' '
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x08 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0xbd ; '.'
0000000000000ed1         db  0x88 ; '.'
0000000000000ed2         db  0x00 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x08 ; '.'
0000000000000ed9         db  0xb0 ; '.'
0000000000000eda         db  0x20 ; ' '
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x08 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x08 ; '.'
0000000000000ee9         db  0xb0 ; '.'
0000000000000eea         db  0x20 ; ' '
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x10 ; '.'
0000000000000ef1         db  0xb0 ; '.'
0000000000000ef2         db  0x20 ; ' '
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x08 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x13 ; '.'
0000000000000f01         db  0x88 ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x60 ; '`'
0000000000000f09         db  0xb0 ; '.'
0000000000000f0a         db  0x20 ; ' '
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x08 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x70 ; 'p'
0000000000000f19         db  0xb0 ; '.'
0000000000000f1a         db  0x20 ; ' '
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x78 ; 'x'
0000000000000f21         db  0xb0 ; '.'
0000000000000f22         db  0x20 ; ' '
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x08 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x20 ; ' '
0000000000000f31         db  0xb1 ; '.'
0000000000000f32         db  0x20 ; ' '
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0xd0 ; '.'
0000000000000f39         db  0xaf ; '.'
0000000000000f3a         db  0x20 ; ' '
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x06 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x06 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x00 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0xd8 ; '.'
0000000000000f51         db  0xaf ; '.'
0000000000000f52         db  0x20 ; ' '
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x06 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x1b ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x00 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0xe0 ; '.'
0000000000000f69         db  0xaf ; '.'
0000000000000f6a         db  0x20 ; ' '
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x06 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x20 ; ' '
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x00 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0xe8 ; '.'
0000000000000f81         db  0xaf ; '.'
0000000000000f82         db  0x20 ; ' '
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x06 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x36 ; '6'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x00 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0xf0 ; '.'
0000000000000f99         db  0xaf ; '.'
0000000000000f9a         db  0x20 ; ' '
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x06 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x39 ; '9'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x00 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x80 ; '.'
0000000000000fb1         db  0xb0 ; '.'
0000000000000fb2         db  0x20 ; ' '
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x05 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x3d ; '='
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x00 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x88 ; '.'
0000000000000fc9         db  0xb0 ; '.'
0000000000000fca         db  0x20 ; ' '
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x05 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x3c ; '<'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x00 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x90 ; '.'
0000000000000fe1         db  0xb0 ; '.'
0000000000000fe2         db  0x20 ; ' '
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x05 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x42 ; 'B'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x00 ; '.'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x98 ; '.'
0000000000000ff9         db  0xb0 ; '.'
0000000000000ffa         db  0x20 ; ' '
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x05 ; '.'
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x43 ; 'C'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x00 ; '.'
0000000000001009         db  0x00 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0xa0 ; '.'
0000000000001011         db  0xb0 ; '.'
0000000000001012         db  0x20 ; ' '
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x05 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x3f ; '?'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x00 ; '.'
0000000000001021         db  0x00 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xc0 ; '.'
0000000000001029         db  0xb0 ; '.'
000000000000102a         db  0x20 ; ' '
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x05 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x41 ; 'A'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x00 ; '.'
0000000000001039         db  0x00 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1040; 0x1550[ (1296 bytes)
        ; File offset : [4160; 5456[ (1296 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001040         db  0x20 ; ' '
0000000000001041         db  0xae ; '.'
0000000000001042         db  0x20 ; ' '
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x07 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x01 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x00 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x28 ; '('
0000000000001059         db  0xae ; '.'
000000000000105a         db  0x20 ; ' '
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x07 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x02 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x00 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x30 ; '0'
0000000000001071         db  0xae ; '.'
0000000000001072         db  0x20 ; ' '
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x07 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x03 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x00 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x38 ; '8'
0000000000001089         db  0xae ; '.'
000000000000108a         db  0x20 ; ' '
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x07 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x04 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x00 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x40 ; '@'
00000000000010a1         db  0xae ; '.'
00000000000010a2         db  0x20 ; ' '
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x07 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x05 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x00 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x48 ; 'H'
00000000000010b9         db  0xae ; '.'
00000000000010ba         db  0x20 ; ' '
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x07 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x07 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x00 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x50 ; 'P'
00000000000010d1         db  0xae ; '.'
00000000000010d2         db  0x20 ; ' '
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x07 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x08 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x00 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x58 ; 'X'
00000000000010e9         db  0xae ; '.'
00000000000010ea         db  0x20 ; ' '
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x07 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x09 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x00 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x60 ; '`'
0000000000001101         db  0xae ; '.'
0000000000001102         db  0x20 ; ' '
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x07 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x0a ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x00 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x68 ; 'h'
0000000000001119         db  0xae ; '.'
000000000000111a         db  0x20 ; ' '
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x07 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x0b ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x00 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x70 ; 'p'
0000000000001131         db  0xae ; '.'
0000000000001132         db  0x20 ; ' '
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x07 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x0c ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x00 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x78 ; 'x'
0000000000001149         db  0xae ; '.'
000000000000114a         db  0x20 ; ' '
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x07 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x0d ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x00 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x80 ; '.'
0000000000001161         db  0xae ; '.'
0000000000001162         db  0x20 ; ' '
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x07 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x0e ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x00 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x88 ; '.'
0000000000001179         db  0xae ; '.'
000000000000117a         db  0x20 ; ' '
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x07 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x0f ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x00 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x90 ; '.'
0000000000001191         db  0xae ; '.'
0000000000001192         db  0x20 ; ' '
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x07 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x10 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x00 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x98 ; '.'
00000000000011a9         db  0xae ; '.'
00000000000011aa         db  0x20 ; ' '
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x07 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x11 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x00 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0xa0 ; '.'
00000000000011c1         db  0xae ; '.'
00000000000011c2         db  0x20 ; ' '
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x07 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x12 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x00 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0xa8 ; '.'
00000000000011d9         db  0xae ; '.'
00000000000011da         db  0x20 ; ' '
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x07 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x13 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x00 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xb0 ; '.'
00000000000011f1         db  0xae ; '.'
00000000000011f2         db  0x20 ; ' '
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x07 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x14 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x00 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0xb8 ; '.'
0000000000001209         db  0xae ; '.'
000000000000120a         db  0x20 ; ' '
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x07 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x15 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x00 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0xc0 ; '.'
0000000000001221         db  0xae ; '.'
0000000000001222         db  0x20 ; ' '
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x07 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x16 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x00 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xc8 ; '.'
0000000000001239         db  0xae ; '.'
000000000000123a         db  0x20 ; ' '
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x07 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x17 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x00 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0xd0 ; '.'
0000000000001251         db  0xae ; '.'
0000000000001252         db  0x20 ; ' '
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x07 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x18 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x00 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0xd8 ; '.'
0000000000001269         db  0xae ; '.'
000000000000126a         db  0x20 ; ' '
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x07 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x19 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x00 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0xe0 ; '.'
0000000000001281         db  0xae ; '.'
0000000000001282         db  0x20 ; ' '
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x07 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x1a ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x00 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0xe8 ; '.'
0000000000001299         db  0xae ; '.'
000000000000129a         db  0x20 ; ' '
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x07 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x1c ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x00 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0xf0 ; '.'
00000000000012b1         db  0xae ; '.'
00000000000012b2         db  0x20 ; ' '
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x07 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x1d ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x00 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0xf8 ; '.'
00000000000012c9         db  0xae ; '.'
00000000000012ca         db  0x20 ; ' '
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x07 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x1e ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x00 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0xaf ; '.'
00000000000012e2         db  0x20 ; ' '
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x07 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x1f ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x00 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x08 ; '.'
00000000000012f9         db  0xaf ; '.'
00000000000012fa         db  0x20 ; ' '
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x07 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x21 ; '!'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x10 ; '.'
0000000000001311         db  0xaf ; '.'
0000000000001312         db  0x20 ; ' '
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x07 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x22 ; '"'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x18 ; '.'
0000000000001329         db  0xaf ; '.'
000000000000132a         db  0x20 ; ' '
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x07 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x23 ; '#'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x20 ; ' '
0000000000001341         db  0xaf ; '.'
0000000000001342         db  0x20 ; ' '
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x07 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x24 ; '$'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x28 ; '('
0000000000001359         db  0xaf ; '.'
000000000000135a         db  0x20 ; ' '
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x07 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x25 ; '%'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x30 ; '0'
0000000000001371         db  0xaf ; '.'
0000000000001372         db  0x20 ; ' '
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x07 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x26 ; '&'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x38 ; '8'
0000000000001389         db  0xaf ; '.'
000000000000138a         db  0x20 ; ' '
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x07 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x27 ; '''
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x40 ; '@'
00000000000013a1         db  0xaf ; '.'
00000000000013a2         db  0x20 ; ' '
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x07 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x28 ; '('
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x48 ; 'H'
00000000000013b9         db  0xaf ; '.'
00000000000013ba         db  0x20 ; ' '
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x07 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x29 ; ')'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x50 ; 'P'
00000000000013d1         db  0xaf ; '.'
00000000000013d2         db  0x20 ; ' '
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x07 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x2a ; '*'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x58 ; 'X'
00000000000013e9         db  0xaf ; '.'
00000000000013ea         db  0x20 ; ' '
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x07 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x2b ; '+'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x60 ; '`'
0000000000001401         db  0xaf ; '.'
0000000000001402         db  0x20 ; ' '
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x2c ; ','
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x68 ; 'h'
0000000000001419         db  0xaf ; '.'
000000000000141a         db  0x20 ; ' '
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x2d ; '-'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x70 ; 'p'
0000000000001431         db  0xaf ; '.'
0000000000001432         db  0x20 ; ' '
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x2e ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x78 ; 'x'
0000000000001449         db  0xaf ; '.'
000000000000144a         db  0x20 ; ' '
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x2f ; '/'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x80 ; '.'
0000000000001461         db  0xaf ; '.'
0000000000001462         db  0x20 ; ' '
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x30 ; '0'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x88 ; '.'
0000000000001479         db  0xaf ; '.'
000000000000147a         db  0x20 ; ' '
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x31 ; '1'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x90 ; '.'
0000000000001491         db  0xaf ; '.'
0000000000001492         db  0x20 ; ' '
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x32 ; '2'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x98 ; '.'
00000000000014a9         db  0xaf ; '.'
00000000000014aa         db  0x20 ; ' '
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x33 ; '3'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0xa0 ; '.'
00000000000014c1         db  0xaf ; '.'
00000000000014c2         db  0x20 ; ' '
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x34 ; '4'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0xa8 ; '.'
00000000000014d9         db  0xaf ; '.'
00000000000014da         db  0x20 ; ' '
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x35 ; '5'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0xb0 ; '.'
00000000000014f1         db  0xaf ; '.'
00000000000014f2         db  0x20 ; ' '
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x37 ; '7'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0xb8 ; '.'
0000000000001509         db  0xaf ; '.'
000000000000150a         db  0x20 ; ' '
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x38 ; '8'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0xc0 ; '.'
0000000000001521         db  0xaf ; '.'
0000000000001522         db  0x20 ; ' '
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x3a ; ':'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0xc8 ; '.'
0000000000001539         db  0xaf ; '.'
000000000000153a         db  0x20 ; ' '
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x3b ; ';'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1550; 0x1567[ (23 bytes)
        ; File offset : [5456; 5479[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001550         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001554         mov        rax, qword [qword_20afe0]                   ; qword_20afe0
000000000000155b         test       rax, rax
000000000000155e         je         loc_1562

0000000000001560         call       rax

                     loc_1562:
0000000000001562         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001566         ret
                        ; endp
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1570; 0x18e0[ (880 bytes)
        ; File offset : [5488; 6368[ (880 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1570:
0000000000001570         push       qword [qword_20ae10]                        ; Begin of unwind block (FDE at 0x95e4), qword_20ae10, CODE XREF=sub_1586+5
0000000000001576         jmp        qword [qword_20ae10+8]                      ; 0x20ae18
                        ; endp
000000000000157c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001580         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1586:
0000000000001586         push       0x0
000000000000158b         jmp        loc_1570


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001590         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+1049, main+1062, main+1268, main+2847, main+2857, seq_fast+830, seq_fast+840, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1596:
0000000000001596         push       0x1
000000000000159b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000015a0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_4100+1567, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, c_strtold+177, vasnprintf+3878
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15a6:
00000000000015a6         push       0x2
00000000000015ab         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000015b0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=io_error+35, cl_strtold+101, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, xstrtold+40, rpl_vasprintf+96, c_strtold+65, close_stream+60
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15b6:
00000000000015b6         push       0x3
00000000000015bb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000015c0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+668, usage+861
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15c6:
00000000000015c6         push       0x4
00000000000015cb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000015d0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15d6:
00000000000015d6         push       0x5
00000000000015db         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
00000000000015e0         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=main+1573
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15e6:
00000000000015e6         push       0x6
00000000000015eb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
00000000000015f0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15f6:
00000000000015f6         push       0x7
00000000000015fb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clearerr_unlocked:        // clearerr_unlocked
0000000000001600         jmp        qword [clearerr_unlocked@GOT]               ; clearerr_unlocked, clearerr_unlocked@GOT, CODE XREF=io_error+8
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1606:
0000000000001606         push       0x8
000000000000160b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001610         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+112
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1616:
0000000000001616         push       0x9
000000000000161b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001620         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1626:
0000000000001626         push       0xa
000000000000162b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001630         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+100
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1636:
0000000000001636         push       0xb
000000000000163b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001640         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+2495, main+2669, main+2892, main+2960, main+3014, main+3064, main+3119, io_error+27, usage+56, usage+102, usage+152
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1646:
0000000000001646         push       0xc
000000000000164b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001650         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1656:
0000000000001656         push       0xd
000000000000165b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001660         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=all_digits_p+9, seq_fast+152, quotearg_buffer_restyled+343, sub_3c30+411, sub_4100+510, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1666:
0000000000001666         push       0xe
000000000000166b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001670         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+2701, scan_arg+851, cl_strtold+162, sub_4100+1507, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, version_etc_va+101, version_etc+192
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1676:
0000000000001676         push       0xf
000000000000167b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001680         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+209
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1686:
0000000000001686         push       0x10
000000000000168b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001690         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1696:
0000000000001696         push       0x11
000000000000169b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
00000000000016a0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=main+1457, scan_arg+140, scan_arg+319, scan_arg+530, scan_arg+591
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16a6:
00000000000016a6         push       0x12
00000000000016ab         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_newlocale:        // newlocale
00000000000016b0         jmp        qword [newlocale@GOT]                       ; newlocale, newlocale@GOT, CODE XREF=c_strtold+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16b6:
00000000000016b6         push       0x13
00000000000016bb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
00000000000016c0         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16c6:
00000000000016c6         push       0x14
00000000000016cb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
00000000000016d0         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16d6:
00000000000016d6         push       0x15
00000000000016db         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
00000000000016e0         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16e6:
00000000000016e6         push       0x16
00000000000016eb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strspn:        // strspn
00000000000016f0         jmp        qword [strspn@GOT]                          ; strspn, strspn@GOT, CODE XREF=main+1351, main+1370, main+1401, all_digits_p+38
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16f6:
00000000000016f6         push       0x17
00000000000016fb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcspn:        // strcspn
0000000000001700         jmp        qword [strcspn@GOT]                         ; strcspn, strcspn@GOT, CODE XREF=scan_arg+167, scan_arg+255
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1706:
0000000000001706         push       0x18
000000000000170b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001710         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1716:
0000000000001716         push       0x19
000000000000171b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001720         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=main+1090, main+1287, usage+163, usage+200, usage+237, usage+274, usage+311, usage+348, usage+392, usage+976, version_etc_arn+135
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1726:
0000000000001726         push       0x1a
000000000000172b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001730         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1736:
0000000000001736         push       0x1b
000000000000173b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001740         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+1038, main+1831, seq_fast+762, seq_fast+946
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1746:
0000000000001746         push       0x1c
000000000000174b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
0000000000001750         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=scan_arg+347
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1756:
0000000000001756         push       0x1d
000000000000175b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001760         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=main+1548, seq_fast+259, seq_fast+305, seq_fast+903, xmemdup+35, vasnprintf+686, vasnprintf+912, vasnprintf+973, vasnprintf+2590, vasnprintf+3085, vasnprintf+3403
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1766:
0000000000001766         push       0x1e
000000000000176b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001770         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1776:
0000000000001776         push       0x1f
000000000000177b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_uselocale:        // uselocale
0000000000001780         jmp        qword [uselocale@GOT]                       ; uselocale, uselocale@GOT, CODE XREF=c_strtold+38, c_strtold+78
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1786:
0000000000001786         push       0x20
000000000000178b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001790         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497, vasnprintf+4191, printf_parse+2420, printf_parse+2528, printf_parse+2852, printf_parse+3169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1796:
0000000000001796         push       0x21
000000000000179b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
00000000000017a0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17a6:
00000000000017a6         push       0x22
00000000000017ab         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
00000000000017b0         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17b6:
00000000000017b6         push       0x23
00000000000017bb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
00000000000017c0         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17c6:
00000000000017c6         push       0x24
00000000000017cb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
00000000000017d0         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=seq_fast+531, seq_fast+805
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17d6:
00000000000017d6         push       0x25
00000000000017db         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
00000000000017e0         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17e6:
00000000000017e6         push       0x26
00000000000017eb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
00000000000017f0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+69, main+1228, main+1250, usage+643, usage+836, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17f6:
00000000000017f6         push       0x27
00000000000017fb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001800         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=main+1141, usage+126, usage+631, usage+724, usage+785, usage+824, usage+927, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1806:
0000000000001806         push       0x28
000000000000180b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000001810         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=seq_fast+383, seq_fast+488
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1816:
0000000000001816         push       0x29
000000000000181b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001820         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=seq_fast+646
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1826:
0000000000001826         push       0x2a
000000000000182b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtold:        // strtold
0000000000001830         jmp        qword [strtold@GOT]                         ; strtold, strtold@GOT, CODE XREF=cl_strtold+37, c_strtold+57
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1836:
0000000000001836         push       0x2b
000000000000183b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001840         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+2515, main+2686, main+2906, main+2974, main+3034, main+3089, main+3139, io_error+52, scan_arg+779, scan_arg+836, close_stdout+125
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1846:
0000000000001846         push       0x2c
000000000000184b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001850         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1856:
0000000000001856         push       0x2d
000000000000185b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001860         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1866:
0000000000001866         push       0x2e
000000000000186b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001870         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+434, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1876:
0000000000001876         push       0x2f
000000000000187b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001880         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1886:
0000000000001886         push       0x30
000000000000188b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001890         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1896:
0000000000001896         push       0x31
000000000000189b         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
00000000000018a0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3c30+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18a6:
00000000000018a6         push       0x32
00000000000018ab         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
00000000000018b0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3c30+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18b6:
00000000000018b6         push       0x33
00000000000018bb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
00000000000018c0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=scan_arg+83, sub_39d0+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18c6:
00000000000018c6         push       0x34
00000000000018cb         jmp        0x1570
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
00000000000018d0         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=main+2240, main+2395
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18d6:
00000000000018d6         push       0x35
00000000000018db         jmp        0x1570
                        ; endp


        ; Section .plt.got
        ; Range: [0x18e0; 0x18e8[ (8 bytes)
        ; File offset : [6368; 6376[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20aff0:        // qword_20aff0
00000000000018e0         jmp        qword [qword_20aff0]                        ; qword, End of unwind block (FDE at 0x95e4), Begin of unwind block (FDE at 0x960c), qword_20aff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
00000000000018e6         align      8
00000000000018e8         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x960c)
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x18f0; 0x7f6e[ (26238 bytes)
        ; File offset : [6384; 32622[ (26238 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int8_t, -104
        ;    var_78: int8_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A4: int32_t, -164
        ;    var_B8: -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     main:
00000000000018f0         push       r15                                         ; Begin of unwind block (FDE at 0x9734), DATA XREF=_start+29
00000000000018f2         push       r14
00000000000018f4         push       r13
00000000000018f6         push       r12
00000000000018f8         mov        r13d, edi
00000000000018fb         push       rbp
00000000000018fc         push       rbx
00000000000018fd         mov        r12, rsi
0000000000001900         lea        rbp, qword [long_options]                   ; long_options
0000000000001907         sub        rsp, 0xd8
000000000000190e         mov        rdi, qword [rsi]
0000000000001911         mov        rax, qword [fs:0x28]
000000000000191a         mov        qword [rsp+0x108+var_40], rax
0000000000001922         xor        eax, eax
0000000000001924         call       set_program_name                            ; set_program_name
0000000000001929         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x8da1
0000000000001930         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001935         call       j_setlocale                                 ; setlocale
000000000000193a         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001941         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001948         test       rax, rax
000000000000194b         setne      byte [locale_ok]                            ; locale_ok
0000000000001952         xor        ebx, ebx
0000000000001954         call       j_bindtextdomain                            ; bindtextdomain
0000000000001959         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001960         call       j_textdomain                                ; textdomain
0000000000001965         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
000000000000196c         call       atexit                                      ; atexit
0000000000001971         lea        rax, qword [aWrittenBySSAnd+26]             ; 0x8da0
0000000000001978         mov        byte [equal_width], 0x0                     ; equal_width
000000000000197f         mov        qword [separator], rax                      ; separator

                     loc_1986:
0000000000001986         mov        r15d, dword [optind@@GLIBC_2.2.5]           ; optind@@GLIBC_2.2.5, CODE XREF=main+455, main+478
000000000000198d         cmp        r15d, r13d
0000000000001990         jge        loc_1a03

                     loc_1992:
0000000000001992         movsxd     rax, r15d                                   ; CODE XREF=main+273
0000000000001995         mov        rax, qword [r12+rax*8]
0000000000001999         cmp        byte [rax], 0x2d
000000000000199c         jne        loc_19ae

000000000000199e         movsx      eax, byte [rax+1]
00000000000019a2         cmp        al, 0x2e
00000000000019a4         je         loc_1a03

00000000000019a6         sub        eax, 0x30
00000000000019a9         cmp        eax, 0x9
00000000000019ac         jbe        loc_1a03

                     loc_19ae:
00000000000019ae         lea        rdx, qword [aFsw]                           ; argument "__shortopts" for method j_getopt_long, "+f:s:w", CODE XREF=main+172
00000000000019b5         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
00000000000019b8         mov        rcx, rbp                                    ; argument "__longopts" for method j_getopt_long
00000000000019bb         mov        rsi, r12                                    ; argument "___argv" for method j_getopt_long
00000000000019be         mov        edi, r13d                                   ; argument "___argc" for method j_getopt_long
00000000000019c1         call       j_getopt_long                               ; getopt_long
00000000000019c6         cmp        eax, 0xffffffff
00000000000019c9         je         loc_1ff9

00000000000019cf         cmp        eax, 0x66
00000000000019d2         je         loc_1ab0

00000000000019d8         jle        loc_1a68

00000000000019de         cmp        eax, 0x73
00000000000019e1         je         loc_1ac0

00000000000019e7         cmp        eax, 0x77
00000000000019ea         jne        loc_2373

00000000000019f0         mov        r15d, dword [optind@@GLIBC_2.2.5]           ; optind@@GLIBC_2.2.5
00000000000019f7         mov        byte [equal_width], 0x1                     ; equal_width
00000000000019fe         cmp        r15d, r13d
0000000000001a01         jl         loc_1992

                     loc_1a03:
0000000000001a03         mov        eax, r13d                                   ; CODE XREF=main+160, main+180, main+188, main+1808
0000000000001a06         sub        eax, r15d
0000000000001a09         mov        dword [rsp+0x108+var_108], eax
0000000000001a0c         je         loc_242e

0000000000001a12         cmp        dword [rsp+0x108+var_108], 0x3
0000000000001a16         ja         loc_233f

0000000000001a1c         test       rbx, rbx
0000000000001a1f         je         loc_1ad3

0000000000001a25         xor        ebp, ebp
0000000000001a27         xor        eax, eax
0000000000001a29         jmp        loc_1a44
0000000000001a2b         align      16

                     loc_1a30:
0000000000001a30         test       dl, dl                                      ; CODE XREF=main+347
0000000000001a32         je         loc_2296

0000000000001a38         mov        edx, 0x1

                     loc_1a3d:
0000000000001a3d         add        rax, rdx                                    ; CODE XREF=main+371
0000000000001a40         add        rbp, 0x1

                     loc_1a44:
0000000000001a44         movzx      edx, byte [rbx+rax]                         ; CODE XREF=main+313
0000000000001a48         cmp        dl, 0x25
0000000000001a4b         jne        loc_1a30

0000000000001a4d         lea        r14, qword [rax+1]
0000000000001a51         lea        rdi, qword [rbx+r14]
0000000000001a55         cmp        byte [rdi], 0x25
0000000000001a58         jne        loc_1e30

0000000000001a5e         mov        edx, 0x2
0000000000001a63         jmp        loc_1a3d
0000000000001a65         align      8

                     loc_1a68:
0000000000001a68         cmp        eax, 0xffffff7d                             ; CODE XREF=main+232
0000000000001a6d         jne        loc_22c8

0000000000001a73         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001a7a         mov        rcx, qword [Version]                        ; Version
0000000000001a81         lea        r8, qword [aUlrichDrepper]                  ; "Ulrich Drepper"
0000000000001a88         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8019
0000000000001a8f         lea        rsi, qword [aWriteError+16]                 ; 0x7f9f
0000000000001a96         xor        r9d, r9d
0000000000001a99         xor        eax, eax
0000000000001a9b         call       version_etc                                 ; version_etc
0000000000001aa0         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001aa2         call       j_exit                                      ; exit
                        ; endp
0000000000001aa7         align      16

                     loc_1ab0:
0000000000001ab0         mov        rbx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+226
0000000000001ab7         jmp        loc_1986
0000000000001abc         align      64

                     loc_1ac0:
0000000000001ac0         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+241
0000000000001ac7         mov        qword [separator], rax                      ; separator
0000000000001ace         jmp        loc_1986

                     loc_1ad3:
0000000000001ad3         xor        r14d, r14d                                  ; CODE XREF=main+303
0000000000001ad6         xor        ebp, ebp

                     loc_1ad8:
0000000000001ad8         movsxd     rax, r15d                                   ; CODE XREF=main+1606
0000000000001adb         lea        rcx, qword [rax*8]
0000000000001ae3         mov        rax, qword [r12+rax*8]
0000000000001ae7         mov        qword [rsp+0x108+var_F8], rcx
0000000000001aec         mov        rdi, rax                                    ; argument #1 for method all_digits_p
0000000000001aef         mov        qword [rsp+0x108+var_E8], rax
0000000000001af4         call       all_digits_p                                ; all_digits_p
0000000000001af9         test       al, al
0000000000001afb         je         loc_1b26

0000000000001afd         cmp        dword [rsp+0x108+var_108], 0x1
0000000000001b01         je         loc_203b

0000000000001b07         mov        rcx, qword [rsp+0x108+var_F8]
0000000000001b0c         mov        rsi, qword [r12+rcx+8]
0000000000001b11         mov        rdi, rsi                                    ; argument #1 for method all_digits_p
0000000000001b14         mov        qword [rsp+0x108+var_D8], rsi
0000000000001b19         call       all_digits_p                                ; all_digits_p
0000000000001b1e         test       al, al
0000000000001b20         jne        loc_2005

                     loc_1b26:
0000000000001b26         movsxd     rdx, r15d                                   ; CODE XREF=main+523, main+1838, main+1861, main+1874, main+1883, main+1908, main+1965
0000000000001b29         lea        eax, dword [r15+1]
0000000000001b2d         lea        rdi, qword [rsp+0x108+var_68]               ; argument #1 for method scan_arg
0000000000001b35         mov        rsi, qword [r12+rdx*8]                      ; argument #2 for method scan_arg
0000000000001b39         mov        dword [optind@@GLIBC_2.2.5], eax            ; optind@@GLIBC_2.2.5
0000000000001b3f         mov        qword [rsp+0x108+var_108], rdi
0000000000001b43         call       scan_arg                                    ; scan_arg
0000000000001b48         fld        tword [rsp+0x108+var_68]
0000000000001b4f         movsxd     rdx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000001b56         mov        r10, qword [rsp+0x108+var_58]
0000000000001b5e         mov        eax, dword [rsp+0x108+var_50]
0000000000001b65         cmp        edx, r13d
0000000000001b68         fstp       tword [rsp+0x108+var_C8]
0000000000001b6c         jl         loc_1f50

0000000000001b72         test       eax, eax
0000000000001b74         je         loc_21cd

0000000000001b7a         mov        ecx, eax
0000000000001b7c         mov        r12, r10
0000000000001b7f         xor        r9d, r9d
0000000000001b82         xor        eax, eax
0000000000001b84         mov        r10d, 0x1
0000000000001b8a         fld        tword [rsp+0x108+var_C8]
0000000000001b8e         pxor       xmm0, xmm0
0000000000001b92         movss      dword [rsp+0x108+var_A4], xmm0
0000000000001b98         fstp       tword [rsp+0x108+var_D8]
0000000000001b9c         fld1
0000000000001b9e         fld        st0
0000000000001ba0         fstp       tword [rsp+0x108+var_B8]
0000000000001ba4         fstp       tword [rsp+0x108+var_C8]
0000000000001ba8         jmp        loc_1bb0

                     loc_1baa:
0000000000001baa         fstp       st0                                         ; CODE XREF=main+1767
0000000000001bac         jmp        loc_1bb0

                     loc_1bae:
0000000000001bae         fstp       st0                                         ; CODE XREF=main+1775

                     loc_1bb0:
0000000000001bb0         test       rbx, rbx                                    ; CODE XREF=main+696, main+700, main+1796, main+2451, main+2582
0000000000001bb3         je         loc_211c

0000000000001bb9         jmp        loc_1bbd

                     loc_1bbb:
0000000000001bbb         fstp       st0                                         ; CODE XREF=main+2330

                     loc_1bbd:
0000000000001bbd         fld        tword [rsp+0x108+var_B8]                    ; CODE XREF=main+713, main+2205, main+2252, main+2264, main+2407
0000000000001bc1         fldz
0000000000001bc3         fucomip    st1
0000000000001bc5         fstp       st0
0000000000001bc7         ja         loc_1f3b

0000000000001bcd         fld        tword [rsp+0x108+var_D8]
0000000000001bd1         fld        tword [rsp+0x108+var_C8]
0000000000001bd5         fucomip    st1
0000000000001bd7         fstp       st0
0000000000001bd9         seta       r13b

                     loc_1bdd:
0000000000001bdd         test       r13b, r13b                                  ; CODE XREF=main+1627
0000000000001be0         jne        loc_1e05

0000000000001be6         fld        tword [rsp+0x108+var_C8]
0000000000001bea         lea        rax, qword [rsp+0x108+var_88]
0000000000001bf2         mov        qword [rsp+0x108+var_A0], rax
0000000000001bf7         fstp       tword [rsp+0x108+var_E8]
0000000000001bfb         fld1
0000000000001bfd         fstp       tword [rsp+0x108+var_F8]
0000000000001c01         jmp        loc_1d53
0000000000001c06         align      16

                     loc_1c10:
0000000000001c10         fld        tword [rsp+0x108+var_D8]                    ; CODE XREF=main+1190
0000000000001c14         fld        tword [rsp+0x108+var_108]
0000000000001c17         fucomip    st1
0000000000001c19         fstp       st0
0000000000001c1b         seta       r13b

                     loc_1c1f:
0000000000001c1f         test       r13b, r13b                                  ; CODE XREF=main+1211
0000000000001c22         je         loc_1d24

0000000000001c28         cmp        byte [locale_ok], 0x0                       ; locale_ok
0000000000001c2f         jne        loc_1dc6

                     loc_1c35:
0000000000001c35         push       qword [rsp+0x108+var_100]                   ; CODE XREF=main+1255
0000000000001c39         push       qword [rsp+0x110+var_108]
0000000000001c3d         mov        rsi, rbx
0000000000001c40         mov        rdi, qword [rsp+0x118+var_A0]
0000000000001c45         xor        eax, eax
0000000000001c47         call       rpl_asprintf                                ; rpl_asprintf
0000000000001c4c         cmp        byte [locale_ok], 0x0                       ; locale_ok
0000000000001c53         movsxd     r12, eax
0000000000001c56         pop        rsi
0000000000001c57         pop        rdi
0000000000001c58         jne        loc_1db0

                     loc_1c5e:
0000000000001c5e         test       r12d, r12d                                  ; CODE XREF=main+1233
0000000000001c61         js         loc_233a

0000000000001c67         mov        rax, qword [rsp+0x108+var_88]
0000000000001c6f         sub        r12, r14
0000000000001c72         lea        rcx, qword [cl_strtold]                     ; cl_strtold
0000000000001c79         lea        rdx, qword [rsp+0x108+var_78]
0000000000001c81         xor        esi, esi
0000000000001c83         mov        byte [rax+r12], 0x0
0000000000001c88         mov        rdi, qword [rsp+0x108+var_88]
0000000000001c90         add        rdi, rbp
0000000000001c93         call       xstrtold                                    ; xstrtold
0000000000001c98         test       al, al
0000000000001c9a         je         loc_1ddc

0000000000001ca0         fld        tword [rsp+0x108+var_D8]
0000000000001ca4         fld        tword [rsp+0x108+var_78]
0000000000001cab         fucomip    st1
0000000000001cad         fstp       st0
0000000000001caf         jp         loc_1ddc

0000000000001cb5         jne        loc_1ddc

0000000000001cbb         mov        qword [rsp+0x108+var_80], 0x0
0000000000001cc7         lea        rdi, qword [rsp+0x108+var_80]
0000000000001ccf         push       qword [rsp+0x108+var_E0]
0000000000001cd3         push       qword [rsp+0x110+var_E8]
0000000000001cd7         xor        eax, eax
0000000000001cd9         mov        rsi, rbx
0000000000001cdc         call       rpl_asprintf                                ; rpl_asprintf
0000000000001ce1         test       eax, eax
0000000000001ce3         pop        rdx
0000000000001ce4         pop        rcx
0000000000001ce5         js         loc_233a

0000000000001ceb         mov        r12, qword [rsp+0x108+var_80]
0000000000001cf3         mov        rsi, qword [rsp+0x108+var_88]               ; argument "__s2" for method j_strcmp
0000000000001cfb         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
0000000000001cfe         call       j_strcmp                                    ; strcmp
0000000000001d03         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000001d06         mov        r15d, eax
0000000000001d09         call       j_free                                      ; free
0000000000001d0e         mov        rdi, qword [rsp+0x108+var_88]               ; argument "__ptr" for method j_free
0000000000001d16         call       j_free                                      ; free
0000000000001d1b         test       r15d, r15d
0000000000001d1e         je         loc_1de9

                     loc_1d24:
0000000000001d24         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=main+818
0000000000001d2b         mov        rdi, qword [separator]                      ; argument "__s" for method j_fputs_unlocked, separator
0000000000001d32         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000001d37         cmp        eax, 0xffffffff
0000000000001d3a         je         loc_2291

0000000000001d40         fld        tword [rsp+0x108+var_F8]
0000000000001d44         fld1
0000000000001d46         faddp      st1
0000000000001d48         fstp       tword [rsp+0x108+var_F8]
0000000000001d4c         fld        tword [rsp+0x108+var_108]
0000000000001d4f         fstp       tword [rsp+0x108+var_E8]

                     loc_1d53:
0000000000001d53         push       qword [rsp+0x108+var_E0]                    ; CODE XREF=main+785
0000000000001d57         push       qword [rsp+0x110+var_E8]
0000000000001d5b         xor        eax, eax
0000000000001d5d         mov        rsi, rbx
0000000000001d60         mov        edi, 0x1
0000000000001d65         call       j___printf_chk                              ; __printf_chk
0000000000001d6a         test       eax, eax
0000000000001d6c         pop        r8
0000000000001d6e         pop        r9
0000000000001d70         js         loc_2291

0000000000001d76         test       r13b, r13b
0000000000001d79         jne        loc_1de9

0000000000001d7b         fld        tword [rsp+0x108+var_F8]
0000000000001d7f         fld        tword [rsp+0x108+var_B8]
0000000000001d83         fmul       st1, st0
0000000000001d85         fld        tword [rsp+0x108+var_C8]
0000000000001d89         faddp      st2
0000000000001d8b         fxch       st1
0000000000001d8d         fstp       tword [rsp+0x108+var_108]
0000000000001d90         fldz
0000000000001d92         fucomip    st1
0000000000001d94         fstp       st0
0000000000001d96         jbe        loc_1c10

0000000000001d9c         fld        tword [rsp+0x108+var_108]
0000000000001d9f         fld        tword [rsp+0x108+var_D8]
0000000000001da3         fucomip    st1
0000000000001da5         fstp       st0
0000000000001da7         seta       r13b
0000000000001dab         jmp        loc_1c1f

                     loc_1db0:
0000000000001db0         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x8da1, CODE XREF=main+872
0000000000001db7         mov        edi, 0x1                                    ; argument "__category" for method j_setlocale
0000000000001dbc         call       j_setlocale                                 ; setlocale
0000000000001dc1         jmp        loc_1c5e

                     loc_1dc6:
0000000000001dc6         lea        rsi, qword [aDlf+8]                         ; argument "__locale" for method j_setlocale, 0x8120, CODE XREF=main+831
0000000000001dcd         mov        edi, 0x1                                    ; argument "__category" for method j_setlocale
0000000000001dd2         call       j_setlocale                                 ; setlocale
0000000000001dd7         jmp        loc_1c35

                     loc_1ddc:
0000000000001ddc         mov        rdi, qword [rsp+0x108+var_88]               ; argument "__ptr" for method j_free, CODE XREF=main+938, main+959, main+965
0000000000001de4         call       j_free                                      ; free

                     loc_1de9:
0000000000001de9         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=main+1070, main+1161
0000000000001df0         lea        rdi, qword [terminator]                     ; argument "__s" for method j_fputs_unlocked, terminator
0000000000001df7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000001dfc         add        eax, 0x1
0000000000001dff         je         loc_2291

                     loc_1e05:
0000000000001e05         xor        eax, eax                                    ; CODE XREF=main+752, main+1952, main+2828
0000000000001e07         mov        rcx, qword [rsp+0x108+var_40]
0000000000001e0f         xor        rcx, qword [fs:0x28]
0000000000001e18         jne        loc_237d

0000000000001e1e         add        rsp, 0xd8
0000000000001e25         pop        rbx
0000000000001e26         pop        rbp
0000000000001e27         pop        r12
0000000000001e29         pop        r13
0000000000001e2b         pop        r14
0000000000001e2d         pop        r15
0000000000001e2f         ret
                        ; endp

                     loc_1e30:
0000000000001e30         lea        rsi, qword [a0]                             ; argument "__accept" for method j_strspn, "-+#0 '", CODE XREF=main+360
0000000000001e37         call       j_strspn                                    ; strspn
0000000000001e3c         add        r14, rax
0000000000001e3f         lea        rsi, qword [a0123456789]                    ; argument "__accept" for method j_strspn, "0123456789"
0000000000001e46         lea        rdi, qword [rbx+r14]                        ; argument "__s" for method j_strspn
0000000000001e4a         call       j_strspn                                    ; strspn
0000000000001e4f         lea        r15, qword [r14+rax]
0000000000001e53         cmp        byte [rbx+r15], 0x2e
0000000000001e58         jne        loc_1e71

0000000000001e5a         add        r15, 0x1
0000000000001e5e         lea        rsi, qword [a0123456789]                    ; argument "__accept" for method j_strspn, "0123456789"
0000000000001e65         lea        rdi, qword [rbx+r15]                        ; argument "__s" for method j_strspn
0000000000001e69         call       j_strspn                                    ; strspn
0000000000001e6e         add        r15, rax

                     loc_1e71:
0000000000001e71         xor        edi, edi                                    ; CODE XREF=main+1384
0000000000001e73         cmp        byte [rbx+r15], 0x4c
0000000000001e78         sete       dil
0000000000001e7c         lea        r14, qword [r15+rdi]
0000000000001e80         lea        rax, qword [rbx+r14]
0000000000001e84         mov        qword [rsp+0x108+var_E8], rax
0000000000001e89         movsx      eax, byte [rax]
0000000000001e8c         test       al, al
0000000000001e8e         je         loc_2506

0000000000001e94         lea        rdi, qword [aEfgaefga]                      ; argument "__s" for method j_strchr, "efgaEFGA"
0000000000001e9b         mov        esi, eax                                    ; argument "__c" for method j_strchr
0000000000001e9d         mov        dword [rsp+0x108+var_F8], eax
0000000000001ea1         call       j_strchr                                    ; strchr
0000000000001ea6         lea        rdi, qword [r14+1]
0000000000001eaa         xor        r14d, r14d
0000000000001ead         test       rax, rax
0000000000001eb0         jne        loc_1ed0

0000000000001eb2         jmp        loc_24cf
0000000000001eb7         align      64

                     loc_1ec0:
0000000000001ec0         test       al, al                                      ; CODE XREF=main+1510
0000000000001ec2         je         loc_1eea

0000000000001ec4         mov        eax, 0x1

                     loc_1ec9:
0000000000001ec9         add        rdi, rax                                    ; CODE XREF=main+1528
0000000000001ecc         add        r14, 0x1

                     loc_1ed0:
0000000000001ed0         movzx      eax, byte [rbx+rdi]                         ; CODE XREF=main+1472
0000000000001ed4         cmp        al, 0x25
0000000000001ed6         jne        loc_1ec0

0000000000001ed8         cmp        byte [rbx+rdi+1], 0x25
0000000000001edd         jne        loc_249d

0000000000001ee3         mov        eax, 0x2
0000000000001ee8         jmp        loc_1ec9

                     loc_1eea:
0000000000001eea         add        rdi, 0x2                                    ; argument #1 for method xmalloc, CODE XREF=main+1490
0000000000001eee         call       xmalloc                                     ; xmalloc
0000000000001ef3         mov        rdx, r15                                    ; argument "__n" for method j_memcpy
0000000000001ef6         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000001ef9         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000001efc         call       j_memcpy                                    ; memcpy
0000000000001f01         mov        rsi, qword [rsp+0x108+var_E8]               ; argument "__src" for method j_strcpy
0000000000001f06         lea        rdi, qword [rax+r15+1]                      ; argument "__dest" for method j_strcpy
0000000000001f0b         mov        byte [rax+r15], 0x4c
0000000000001f10         mov        qword [rsp+0x108+var_F8], rax
0000000000001f15         call       j_strcpy                                    ; strcpy
0000000000001f1a         cmp        byte [equal_width], 0x0                     ; equal_width
0000000000001f21         jne        loc_2472

0000000000001f27         mov        r8, qword [rsp+0x108+var_F8]
0000000000001f2c         mov        r15d, dword [optind@@GLIBC_2.2.5]           ; optind@@GLIBC_2.2.5
0000000000001f33         mov        rbx, r8
0000000000001f36         jmp        loc_1ad8

                     loc_1f3b:
0000000000001f3b         fld        tword [rsp+0x108+var_C8]                    ; CODE XREF=main+727
0000000000001f3f         fld        tword [rsp+0x108+var_D8]
0000000000001f43         fucomip    st1
0000000000001f45         fstp       st0
0000000000001f47         seta       r13b
0000000000001f4b         jmp        loc_1bdd

                     loc_1f50:
0000000000001f50         mov        rsi, qword [r12+rdx*8]                      ; argument #2 for method scan_arg, CODE XREF=main+636
0000000000001f54         mov        rdi, qword [rsp+0x108+var_108]              ; argument #1 for method scan_arg
0000000000001f58         lea        ecx, dword [rdx+1]
0000000000001f5b         mov        dword [rsp+0x108+var_E8], eax
0000000000001f5f         mov        qword [rsp+0x108+var_F8], r10
0000000000001f64         mov        dword [optind@@GLIBC_2.2.5], ecx            ; optind@@GLIBC_2.2.5
0000000000001f6a         call       scan_arg                                    ; scan_arg
0000000000001f6f         fld        tword [rsp+0x108+var_68]
0000000000001f76         mov        ecx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000001f7c         mov        r9d, dword [rsp+0x108+var_50]
0000000000001f84         mov        r10, qword [rsp+0x108+var_F8]
0000000000001f89         mov        eax, dword [rsp+0x108+var_E8]
0000000000001f8d         cmp        ecx, r13d
0000000000001f90         fld        st0
0000000000001f92         fstp       tword [rsp+0x108+var_B8]
0000000000001f96         jl         loc_20a2

0000000000001f9c         mov        ecx, r9d
0000000000001f9f         xor        r9d, r9d
0000000000001fa2         mov        r12, qword [rsp+0x108+var_58]
0000000000001faa         fstp       tword [rsp+0x108+var_D8]
0000000000001fae         pxor       xmm1, xmm1
0000000000001fb2         fld1
0000000000001fb4         movss      dword [rsp+0x108+var_A4], xmm1
0000000000001fba         fstp       tword [rsp+0x108+var_B8]

                     loc_1fbe:
0000000000001fbe         mov        edi, 0x0                                    ; CODE XREF=main+2087
0000000000001fc3         fldz
0000000000001fc5         fld        tword [rsp+0x108+var_C8]
0000000000001fc9         fmul       st1
0000000000001fcb         fucomip    st1
0000000000001fcd         setnp      sil
0000000000001fd1         cmovne     esi, edi
0000000000001fd4         test       sil, sil
0000000000001fd7         je         loc_1baa

0000000000001fdd         test       eax, eax
0000000000001fdf         jne        loc_1bae

0000000000001fe5         mov        eax, ecx
0000000000001fe7         or         eax, r9d
0000000000001fea         je         loc_22da

0000000000001ff0         fstp       st0
0000000000001ff2         xor        eax, eax
0000000000001ff4         jmp        loc_1bb0

                     loc_1ff9:
0000000000001ff9         mov        r15d, dword [optind@@GLIBC_2.2.5]           ; optind@@GLIBC_2.2.5, CODE XREF=main+217
0000000000002000         jmp        loc_1a03                                    ; DATA XREF=seq_fast+330, seq_fast+338

                     loc_2005:
0000000000002005         cmp        dword [rsp+0x108+var_108], 0x3              ; CODE XREF=main+560
0000000000002009         jne        loc_203b

000000000000200b         mov        rsi, qword [rsp+0x108+var_D8]               ; argument "__s2" for method j_strcmp
0000000000002010         lea        rdi, qword [a831+3]                         ; argument "__s1" for method j_strcmp, 0x8816
0000000000002017         call       j_strcmp                                    ; strcmp
000000000000201c         test       eax, eax
000000000000201e         jne        loc_1b26

0000000000002024         mov        rcx, qword [rsp+0x108+var_F8]
0000000000002029         mov        rdi, qword [r12+rcx+0x10]                   ; argument #1 for method all_digits_p
000000000000202e         call       all_digits_p                                ; all_digits_p
0000000000002033         test       al, al
0000000000002035         je         loc_1b26

                     loc_203b:
000000000000203b         cmp        byte [equal_width], 0x1                     ; equal_width, CODE XREF=main+529, main+1817
0000000000002042         je         loc_1b26

0000000000002048         test       rbx, rbx
000000000000204b         jne        loc_1b26

0000000000002051         mov        rdi, qword [separator]                      ; separator
0000000000002058         or         rcx, 0xffffffffffffffff
000000000000205c         xor        eax, eax
000000000000205e         repne scasb al, byte [rdi]
0000000000002060         cmp        rcx, 0xfffffffffffffffd
0000000000002064         jne        loc_1b26

000000000000206a         mov        ecx, dword [rsp+0x108+var_108]
000000000000206d         lea        rax, qword [a831+3]                         ; 0x8816
0000000000002074         cmp        ecx, 0x1
0000000000002077         cmovne     rax, qword [rsp+0x108+var_E8]
000000000000207d         mov        rdi, rax
0000000000002080         lea        eax, dword [rcx+r15-1]
0000000000002085         mov        rsi, qword [r12+rax*8]
0000000000002089         call       seq_fast                                    ; seq_fast
000000000000208e         test       al, al
0000000000002090         jne        loc_1e05

0000000000002096         mov        r15d, dword [optind@@GLIBC_2.2.5]           ; optind@@GLIBC_2.2.5
000000000000209d         jmp        loc_1b26

                     loc_20a2:
00000000000020a2         fstp       st0                                         ; CODE XREF=main+1702
00000000000020a4         fldz
00000000000020a6         pxor       xmm2, xmm2
00000000000020aa         movsxd     rsi, ecx
00000000000020ad         fld        tword [rsp+0x108+var_B8]
00000000000020b1         lea        rdi, qword [rsi*8]
00000000000020b9         movss      dword [rsp+0x108+var_A4], xmm2
00000000000020bf         fucomip    st1
00000000000020c1         fstp       st0
00000000000020c3         jp         loc_20cb

00000000000020c5         je         loc_2454

                     loc_20cb:
00000000000020cb         mov        rsi, qword [r12+rsi*8]                      ; argument #2 for method scan_arg, CODE XREF=main+2003
00000000000020cf         mov        rdi, qword [rsp+0x108+var_108]              ; argument #1 for method scan_arg
00000000000020d3         add        ecx, 0x1
00000000000020d6         mov        dword [rsp+0x108+var_A0], eax
00000000000020da         mov        qword [rsp+0x108+var_E8], r10
00000000000020df         mov        dword [rsp+0x108+var_F8], r9d
00000000000020e4         mov        dword [optind@@GLIBC_2.2.5], ecx            ; optind@@GLIBC_2.2.5
00000000000020ea         call       scan_arg                                    ; scan_arg
00000000000020ef         fld        tword [rsp+0x108+var_68]
00000000000020f6         mov        r12, qword [rsp+0x108+var_58]
00000000000020fe         mov        ecx, dword [rsp+0x108+var_50]
0000000000002105         mov        eax, dword [rsp+0x108+var_A0]
0000000000002109         mov        r10, qword [rsp+0x108+var_E8]
000000000000210e         mov        r9d, dword [rsp+0x108+var_F8]
0000000000002113         fstp       tword [rsp+0x108+var_D8]
0000000000002117         jmp        loc_1fbe

                     loc_211c:
000000000000211c         cmp        eax, r9d                                    ; CODE XREF=main+707
000000000000211f         cmovge     r9d, eax
0000000000002123         cmp        ecx, 0x7fffffff
0000000000002129         je         loc_21c1

000000000000212f         cmp        r9d, 0x7fffffff
0000000000002136         je         loc_21c1

                     loc_213c:
000000000000213c         cmp        byte [equal_width], 0x0                     ; equal_width, CODE XREF=main+2873
0000000000002143         je         loc_222e

0000000000002149         mov        edx, r9d
000000000000214c         sub        edx, eax
000000000000214e         movsxd     rdx, edx
0000000000002151         add        r10, rdx
0000000000002154         mov        edx, r9d
0000000000002157         sub        edx, ecx
0000000000002159         movsxd     rdx, edx
000000000000215c         add        r12, rdx
000000000000215f         test       ecx, ecx
0000000000002161         je         loc_225c

0000000000002167         test       r9d, r9d
000000000000216a         je         loc_2288

0000000000002170         test       eax, eax
0000000000002172         jne        loc_2178

                     loc_2174:
0000000000002174         add        r10, 0x1                                    ; CODE XREF=main+2427

                     loc_2178:
0000000000002178         cmp        r10, r12                                    ; CODE XREF=main+2178, main+2415, main+2433, main+2460
000000000000217b         lea        rbx, qword [aInvalidSArgume+30]             ; 0x8071
0000000000002182         cmovb      r10, r12
0000000000002186         cmp        r10, 0x7fffffff
000000000000218d         ja         loc_1bbd

0000000000002193         lea        rcx, qword [a0ddlf]                         ; "%%0%d.%dLf"
000000000000219a         lea        rdi, qword [format_buf.6939]                ; format_buf.6939
00000000000021a1         mov        r8d, r10d
00000000000021a4         mov        edx, 0x1c
00000000000021a9         mov        esi, 0x1
00000000000021ae         xor        eax, eax
00000000000021b0         call       j___sprintf_chk                             ; __sprintf_chk
00000000000021b5         lea        rbx, qword [format_buf.6939]                ; format_buf.6939
00000000000021bc         jmp        loc_1bbd

                     loc_21c1:
00000000000021c1         lea        rbx, qword [aInvalidSArgume+30]             ; 0x8071, CODE XREF=main+2105, main+2118
00000000000021c8         jmp        loc_1bbd

                     loc_21cd:
00000000000021cd         fld        tword [rsp+0x108+var_C8]                    ; CODE XREF=main+644
00000000000021d1         mov        r12, r10
00000000000021d4         mov        r10d, 0x1
00000000000021da         pxor       xmm3, xmm3
00000000000021de         movss      dword [rsp+0x108+var_A4], xmm3
00000000000021e4         fstp       tword [rsp+0x108+var_D8]
00000000000021e8         fld1
00000000000021ea         fld        st0
00000000000021ec         fstp       tword [rsp+0x108+var_B8]
00000000000021f0         fstp       tword [rsp+0x108+var_C8]

                     loc_21f4:
00000000000021f4         fldz                                                   ; CODE XREF=main+2567
00000000000021f6         fld        tword [rsp+0x108+var_D8]
00000000000021fa         fucomip    st1
00000000000021fc         jb         loc_2276

00000000000021fe         cmp        byte [equal_width], 0x0                     ; equal_width
0000000000002205         jne        loc_227a

0000000000002207         test       rbx, rbx
000000000000220a         jne        loc_1bbb

0000000000002210         mov        rdi, qword [separator]                      ; separator
0000000000002217         or         rcx, 0xffffffffffffffff
000000000000221b         xor        eax, eax
000000000000221d         xor        r9d, r9d
0000000000002220         repne scasb al, byte [rdi]
0000000000002222         cmp        rcx, 0xfffffffffffffffd
0000000000002226         je         loc_2382

000000000000222c         fstp       st0

                     loc_222e:
000000000000222e         lea        rcx, qword [aDlf]                           ; "%%.%dLf", CODE XREF=main+2131
0000000000002235         lea        rdi, qword [format_buf.6939]                ; format_buf.6939
000000000000223c         mov        r8d, r9d
000000000000223f         mov        edx, 0x1c
0000000000002244         mov        esi, 0x1
0000000000002249         xor        eax, eax
000000000000224b         call       j___sprintf_chk                             ; __sprintf_chk
0000000000002250         lea        rbx, qword [format_buf.6939]                ; format_buf.6939
0000000000002257         jmp        loc_1bbd

                     loc_225c:
000000000000225c         test       r9d, r9d                                    ; CODE XREF=main+2161
000000000000225f         je         loc_2178

0000000000002265         add        r12, 0x1
0000000000002269         test       eax, eax
000000000000226b         je         loc_2174

0000000000002271         jmp        loc_2178

                     loc_2276:
0000000000002276         fstp       st0                                         ; CODE XREF=main+2316
0000000000002278         jmp        loc_227c

                     loc_227a:
000000000000227a         fstp       st0                                         ; CODE XREF=main+2325

                     loc_227c:
000000000000227c         xor        r9d, r9d                                    ; CODE XREF=main+2440
000000000000227f         xor        eax, eax
0000000000002281         xor        ecx, ecx
0000000000002283         jmp        loc_1bb0

                     loc_2288:
0000000000002288         sub        r12, 0x1                                    ; CODE XREF=main+2170
000000000000228c         jmp        loc_2178

                     loc_2291:
0000000000002291         call       io_error                                    ; io_error, CODE XREF=main+1098, main+1152, main+1295

                     loc_2296:
0000000000002296         mov        rdi, rbx                                    ; CODE XREF=main+322
0000000000002299         call       quote                                       ; quote
000000000000229e         lea        rsi, qword [aFormatSHasNoDi]                ; argument "msgid" for method j_dcgettext, "format %s has no %% directive"
00000000000022a5         mov        rbx, rax
00000000000022a8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000022ad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000022af         call       j_dcgettext                                 ; dcgettext
00000000000022b4         mov        rcx, rbx
00000000000022b7         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000022ba         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000022bc         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000022c1         xor        eax, eax
00000000000022c3         call       j_error                                     ; error

                     loc_22c8:
00000000000022c8         cmp        eax, 0xffffff7e                             ; CODE XREF=main+381
00000000000022cd         jne        loc_2373

00000000000022d3         xor        edi, edi
00000000000022d5         call       usage                                       ; usage

                     loc_22da:
00000000000022da         fld1                                                   ; CODE XREF=main+1786
00000000000022dc         fld        tword [rsp+0x108+var_B8]
00000000000022e0         fucomip    st1
00000000000022e2         fstp       st0
00000000000022e4         setnp      dl
00000000000022e7         cmove      edi, edx
00000000000022ea         test       dil, dil
00000000000022ed         je         loc_22ff

00000000000022ef         fld        tword [rsp+0x108+var_C8]
00000000000022f3         fucomip    st1
00000000000022f5         fstp       st0
00000000000022f7         jae        loc_21f4

00000000000022fd         jmp        loc_2301

                     loc_22ff:
00000000000022ff         fstp       st0                                         ; CODE XREF=main+2557

                     loc_2301:
0000000000002301         xor        r9d, r9d                                    ; CODE XREF=main+2573
0000000000002304         xor        ecx, ecx
0000000000002306         jmp        loc_1bb0

                     loc_230b:
000000000000230b         lea        rdi, qword [rsp+0x108+var_90]               ; CODE XREF=main+2770
0000000000002310         lea        rsi, qword [a0lf]                           ; "%0.Lf"
0000000000002317         push       qword [rsp+0x108+var_D0]
000000000000231b         push       qword [rsp+0x110+var_D8]
000000000000231f         xor        eax, eax
0000000000002321         call       rpl_asprintf                                ; rpl_asprintf
0000000000002326         pop        r10
0000000000002328         test       eax, eax
000000000000232a         pop        r11
000000000000232c         mov        r10, qword [rsp+0x108+var_108]
0000000000002330         jns        loc_23dd

0000000000002336         jmp        loc_233a

                     loc_2338:
0000000000002338         fstp       st0                                         ; CODE XREF=main+2752

                     loc_233a:
000000000000233a         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+881, main+1013, main+2630
                        ; endp

                     loc_233f:
000000000000233f         movsxd     rdx, r15d                                   ; CODE XREF=main+294
0000000000002342         mov        rdi, qword [r12+rdx*8+0x18]
0000000000002347         call       quote                                       ; quote
000000000000234c         lea        rsi, qword [aExtraOperandS]                 ; "extra operand %s"
0000000000002353         mov        rbx, rax
0000000000002356         mov        edx, 0x5

                     loc_235b:
000000000000235b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+2941
000000000000235d         call       j_dcgettext                                 ; dcgettext
0000000000002362         mov        rcx, rbx
0000000000002365         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002368         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000236a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000236c         xor        eax, eax
000000000000236e         call       j_error                                     ; error

                     loc_2373:
0000000000002373         mov        edi, 0x1                                    ; CODE XREF=main+250, main+2525, main+2911
0000000000002378         call       usage                                       ; usage

                     loc_237d:
000000000000237d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+1320
                        ; endp

                     loc_2382:
0000000000002382         fstp       tword [rsp+0x108+var_F8]                    ; CODE XREF=main+2358
0000000000002386         mov        qword [rsp+0x108+var_108], r10
000000000000238a         lea        rdi, qword [rsp+0x108+var_98]
000000000000238f         lea        rsi, qword [a0lf]                           ; "%0.Lf"
0000000000002396         push       qword [rsp+0x108+var_C0]
000000000000239a         push       qword [rsp+0x110+var_C8]
000000000000239e         call       rpl_asprintf                                ; rpl_asprintf
00000000000023a3         pop        rbx
00000000000023a4         pop        r13
00000000000023a6         test       eax, eax
00000000000023a8         mov        r10, qword [rsp+0x108+var_108]
00000000000023ac         fld        tword [rsp+0x108+var_F8]
00000000000023b0         js         loc_2338

00000000000023b2         mov        qword [rsp+0x108+var_108], r10
00000000000023b6         fld        tword [rsp+0x108+var_D8]
00000000000023ba         fmul       st1
00000000000023bc         fucomip    st1
00000000000023be         fstp       st0
00000000000023c0         jp         loc_23c8

00000000000023c2         je         loc_230b

                     loc_23c8:
00000000000023c8         lea        rdi, qword [aWriteError+12]                 ; 0x7f9b, CODE XREF=main+2768
00000000000023cf         call       xstrdup                                     ; xstrdup
00000000000023d4         mov        r10, qword [rsp+0x108+var_108]
00000000000023d8         mov        qword [rsp+0x108+var_90], rax

                     loc_23dd:
00000000000023dd         mov        rdi, qword [rsp+0x108+var_98]               ; CODE XREF=main+2624
00000000000023e2         cmp        byte [rdi], 0x2d
00000000000023e5         je         loc_240b

00000000000023e7         mov        rsi, qword [rsp+0x108+var_90]
00000000000023ec         cmp        byte [rsi], 0x2d
00000000000023ef         je         loc_240b

00000000000023f1         mov        qword [rsp+0x108+var_108], r10
00000000000023f5         call       seq_fast                                    ; seq_fast
00000000000023fa         test       al, al
00000000000023fc         jne        loc_1e05

0000000000002402         mov        rdi, qword [rsp+0x108+var_98]
0000000000002407         mov        r10, qword [rsp+0x108+var_108]

                     loc_240b:
000000000000240b         mov        qword [rsp+0x108+var_108], r10              ; CODE XREF=main+2805, main+2815
000000000000240f         call       j_free                                      ; free
0000000000002414         mov        rdi, qword [rsp+0x108+var_90]               ; argument "__ptr" for method j_free
0000000000002419         call       j_free                                      ; free
000000000000241e         xor        eax, eax
0000000000002420         xor        ecx, ecx
0000000000002422         xor        r9d, r9d
0000000000002425         mov        r10, qword [rsp+0x108+var_108]
0000000000002429         jmp        loc_213c

                     loc_242e:
000000000000242e         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand", CODE XREF=main+284
0000000000002435         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002437         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000243c         call       j_dcgettext                                 ; dcgettext
0000000000002441         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002443         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002446         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002448         xor        eax, eax
000000000000244a         call       j_error                                     ; error
000000000000244f         jmp        loc_2373

                     loc_2454:
0000000000002454         mov        rdi, qword [r12+rdi-8]                      ; CODE XREF=main+2005
0000000000002459         call       quote                                       ; quote
000000000000245e         mov        edx, 0x5
0000000000002463         mov        rbx, rax
0000000000002466         lea        rsi, qword [aInvalidZeroInc]                ; "invalid Zero increment value: %s"
000000000000246d         jmp        loc_235b

                     loc_2472:
0000000000002472         lea        rsi, qword [aFormatStringMa]                ; argument "msgid" for method j_dcgettext, "format string may not be specified when printing equal width strings", CODE XREF=main+1585
0000000000002479         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000247e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002480         call       j_dcgettext                                 ; dcgettext
0000000000002485         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002487         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000248a         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000248c         xor        eax, eax
000000000000248e         call       j_error                                     ; error
0000000000002493         mov        edi, 0x1
0000000000002498         call       usage                                       ; usage

                     loc_249d:
000000000000249d         mov        rdi, rbx                                    ; CODE XREF=main+1517
00000000000024a0         call       quote                                       ; quote
00000000000024a5         lea        rsi, qword [aFormatSHasTooM]                ; argument "msgid" for method j_dcgettext, "format %s has too many %% directives"
00000000000024ac         mov        rbx, rax
00000000000024af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024b4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024b6         call       j_dcgettext                                 ; dcgettext
00000000000024bb         mov        rcx, rbx
00000000000024be         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000024c1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024c3         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000024c8         xor        eax, eax
00000000000024ca         call       j_error                                     ; error

                     loc_24cf:
00000000000024cf         mov        rdi, rbx                                    ; CODE XREF=main+1474
00000000000024d2         call       quote                                       ; quote
00000000000024d7         lea        rsi, qword [aFormatSHasUnkn]                ; argument "msgid" for method j_dcgettext, "format %s has unknown %%%c directive"
00000000000024de         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024e3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024e5         mov        rbx, rax
00000000000024e8         call       j_dcgettext                                 ; dcgettext
00000000000024ed         mov        r8d, dword [rsp+0x108+var_F8]
00000000000024f2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000024f5         mov        rcx, rbx
00000000000024f8         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024fa         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000024ff         xor        eax, eax
0000000000002501         call       j_error                                     ; error

                     loc_2506:
0000000000002506         mov        rdi, rbx                                    ; CODE XREF=main+1438
0000000000002509         call       quote                                       ; quote
000000000000250e         lea        rsi, qword [aFormatSEndsIn]                 ; argument "msgid" for method j_dcgettext, "format %s ends in %%"
0000000000002515         mov        rbx, rax
0000000000002518         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000251d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000251f         call       j_dcgettext                                 ; dcgettext
0000000000002524         mov        rcx, rbx
0000000000002527         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000252a         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000252c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002531         xor        eax, eax
0000000000002533         call       j_error                                     ; error
0000000000002538         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x9734)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002540         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x95b4)
0000000000002542         mov        r9, rdx
0000000000002545         pop        rsi
0000000000002546         mov        rdx, rsp
0000000000002549         and        rsp, 0xfffffffffffffff0
000000000000254d         push       rax
000000000000254e         push       rsp
000000000000254f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002556         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000255d         lea        rdi, qword [main]                           ; main
0000000000002564         call       qword [qword_20afd0+8]                      ; 0x20afd8
000000000000256a         hlt
                        ; endp
000000000000256b         align      16                                          ; End of unwind block (FDE at 0x95b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002570         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002577         push       rbp
0000000000002578         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000257f         cmp        rax, rdi
0000000000002582         mov        rbp, rsp
0000000000002585         je         loc_25a0

0000000000002587         mov        rax, qword [qword_20afd0]                   ; qword_20afd0
000000000000258e         test       rax, rax
0000000000002591         je         loc_25a0

0000000000002593         pop        rbp
0000000000002594         jmp        rax
                        ; endp
0000000000002596         align      32

                     loc_25a0:
00000000000025a0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
00000000000025a1         ret
                        ; endp
00000000000025a2         align      16

                     register_tm_clones:
00000000000025b0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
00000000000025b7         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000025be         push       rbp
00000000000025bf         sub        rsi, rdi
00000000000025c2         mov        rbp, rsp
00000000000025c5         sar        rsi, 0x3
00000000000025c9         mov        rax, rsi
00000000000025cc         shr        rax, 0x3f
00000000000025d0         add        rsi, rax
00000000000025d3         sar        rsi, 0x1
00000000000025d6         je         loc_25f0

00000000000025d8         mov        rax, qword [qword_20afe8]                   ; qword_20afe8
00000000000025df         test       rax, rax
00000000000025e2         je         loc_25f0

00000000000025e4         pop        rbp
00000000000025e5         jmp        rax
                        ; endp
00000000000025e7         align      16

                     loc_25f0:
00000000000025f0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000025f1         ret
                        ; endp
00000000000025f2         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002600         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002607         jne        loc_2638

0000000000002609         cmp        qword [qword_20aff0], 0x0                   ; qword_20aff0
0000000000002611         push       rbp
0000000000002612         mov        rbp, rsp
0000000000002615         je         loc_2623

0000000000002617         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000261e         call       j_qword_20aff0                              ; qword_20aff0

                     loc_2623:
0000000000002623         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002628         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000262f         pop        rbp
0000000000002630         ret
                        ; endp
0000000000002631         align      8

                     loc_2638:
0000000000002638         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000263a         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002640         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002641         mov        rbp, rsp
0000000000002644         pop        rbp
0000000000002645         jmp        register_tm_clones                          ; register_tm_clones
000000000000264a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     all_digits_p:
0000000000002650         push       rbp                                         ; Begin of unwind block (FDE at 0x9624), CODE XREF=main+516, main+553, main+1854
0000000000002651         push       rbx
0000000000002652         mov        rbx, rdi
0000000000002655         sub        rsp, 0x8
0000000000002659         call       j_strlen                                    ; strlen
000000000000265e         movsx      edx, byte [rbx]
0000000000002661         sub        edx, 0x30
0000000000002664         cmp        edx, 0x9
0000000000002667         ja         loc_2688

0000000000002669         lea        rsi, qword [a0123456789]                    ; argument "__accept" for method j_strspn, "0123456789"
0000000000002670         mov        rbp, rax
0000000000002673         mov        rdi, rbx                                    ; argument "__s" for method j_strspn
0000000000002676         call       j_strspn                                    ; strspn
000000000000267b         cmp        rax, rbp
000000000000267e         sete       al

                     loc_2681:
0000000000002681         add        rsp, 0x8                                    ; CODE XREF=all_digits_p+58
0000000000002685         pop        rbx
0000000000002686         pop        rbp
0000000000002687         ret
                        ; endp

                     loc_2688:
0000000000002688         xor        eax, eax                                    ; CODE XREF=all_digits_p+23
000000000000268a         jmp        loc_2681
000000000000268c         align      16                                          ; End of unwind block (FDE at 0x9624)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_B0: int64_t, -176
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296


                     io_error:
0000000000002690         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; Begin of unwind block (FDE at 0x9650), argument "__stream" for method j_clearerr_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=main+2465, loc_2a96
0000000000002697         push       rbx
0000000000002698         call       j_clearerr_unlocked                         ; clearerr_unlocked
000000000000269d         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error"
00000000000026a4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000026a9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000026ab         call       j_dcgettext                                 ; dcgettext
00000000000026b0         mov        rbx, rax
00000000000026b3         call       j___errno_location                          ; __errno_location
00000000000026b8         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000026ba         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000026bd         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000026c2         xor        eax, eax
00000000000026c4         call       j_error                                     ; error
00000000000026c9         nop        dword [rax]                                 ; End of unwind block (FDE at 0x9650)
                     seq_fast:
00000000000026d0         push       r15                                         ; Begin of unwind block (FDE at 0x9668), CODE XREF=main+1945, main+2821
00000000000026d2         push       r14
00000000000026d4         mov        r9, rdi
00000000000026d7         push       r13
00000000000026d9         push       r12
00000000000026db         lea        rdi, qword [aWriteError+12]                 ; 0x7f9b
00000000000026e2         push       rbp
00000000000026e3         push       rbx
00000000000026e4         mov        ecx, 0x4
00000000000026e9         mov        r8, rsi
00000000000026ec         mov        r13, r9
00000000000026ef         sub        rsp, 0x48
00000000000026f3         rep  cmpsb byte [rsi], byte [rdi]
00000000000026f5         seta       al
00000000000026f8         sbb        al, 0x0
00000000000026fa         cmp        byte [r9], 0x30
00000000000026fe         movsx      eax, al
0000000000002701         mov        dword [rsp+0x80+var_78], eax
0000000000002705         je         loc_2713

0000000000002707         jmp        loc_2731
0000000000002709         align      16

                     loc_2710:
0000000000002710         mov        r13, rdx                                    ; CODE XREF=seq_fast+78

                     loc_2713:
0000000000002713         movzx      eax, byte [r13+1]                           ; CODE XREF=seq_fast+53
0000000000002718         lea        rdx, qword [r13+1]
000000000000271c         cmp        al, 0x30
000000000000271e         je         loc_2710

0000000000002720         test       al, al
0000000000002722         jne        loc_2902

0000000000002728         cmp        r9, rdx
000000000000272b         je         loc_2902

                     loc_2731:
0000000000002731         cmp        byte [r8], 0x30                             ; CODE XREF=seq_fast+55, seq_fast+565
0000000000002735         mov        rbp, r8
0000000000002738         je         loc_2743

000000000000273a         jmp        loc_2760
000000000000273c         align      64

                     loc_2740:
0000000000002740         mov        rbp, rdx                                    ; CODE XREF=seq_fast+125

                     loc_2743:
0000000000002743         movzx      eax, byte [rbp+1]                           ; CODE XREF=seq_fast+104
0000000000002747         lea        rdx, qword [rbp+1]
000000000000274b         cmp        al, 0x30
000000000000274d         je         loc_2740

000000000000274f         cmp        r8, rdx
0000000000002752         je         loc_28fa

0000000000002758         test       al, al
000000000000275a         jne        loc_28fa

                     loc_2760:
0000000000002760         mov        rdi, r13                                    ; argument "__s" for method j_strlen, CODE XREF=seq_fast+106, seq_fast+557
0000000000002763         mov        ebx, 0x1f
0000000000002768         call       j_strlen                                    ; strlen
000000000000276d         mov        edx, dword [rsp+0x80+var_78]
0000000000002771         lea        r14, qword [rax+1]
0000000000002775         mov        r15, rax
0000000000002778         mov        qword [rsp+0x80+var_80], rax
000000000000277c         cmp        r14, 0x1f
0000000000002780         cmovae     rbx, r14
0000000000002784         test       edx, edx
0000000000002786         je         loc_2a2e

000000000000278c         xor        eax, eax
000000000000278e         or         rcx, 0xffffffffffffffff
0000000000002792         mov        rdi, rbp
0000000000002795         repne scasb al, byte [rdi]
0000000000002797         mov        rsi, rcx
000000000000279a         not        rsi
000000000000279d         lea        r12, qword [rsi-1]
00000000000027a1         mov        qword [rsp+0x80+var_60], rsi
00000000000027a6         cmp        rbx, r12
00000000000027a9         cmovb      rbx, r12
00000000000027ad         lea        rdi, qword [rbx+1]
00000000000027b1         mov        qword [rsp+0x80+var_68], rdi
00000000000027b6         call       xmalloc                                     ; xmalloc
00000000000027bb         mov        rsi, rbx
00000000000027be         sub        rsi, qword [rsp+0x80+var_80]
00000000000027c2         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000027c5         mov        qword [rsp+0x80+var_70], rax
00000000000027ca         mov        rdi, rsi
00000000000027cd         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
00000000000027d0         add        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000027d3         call       j_memcpy                                    ; memcpy
00000000000027d8         mov        rdi, qword [rsp+0x80+var_68]
00000000000027dd         mov        r13, rax
00000000000027e0         mov        r14, rax
00000000000027e3         call       xmalloc                                     ; xmalloc
00000000000027e8         mov        rcx, qword [rsp+0x80+var_60]
00000000000027ed         mov        rdi, rbx
00000000000027f0         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000027f3         sub        rdi, r12
00000000000027f6         mov        qword [rsp+0x80+var_48], rax
00000000000027fb         add        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000027fe         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000002801         call       j_memcpy                                    ; memcpy
0000000000002806         cmp        qword [rsp+0x80+var_80], r12
000000000000280a         mov        qword [rsp+0x80+var_50], rax
000000000000280f         jae        loc_2a76

                     loc_2815:
0000000000002815         mov        rdi, qword [rsp+0x80+var_68]                ; CODE XREF=seq_fast+929, seq_fast+953
000000000000281a         mov        eax, 0x2000
000000000000281f         add        rdi, rdi
0000000000002822         cmp        rdi, 0x2000
0000000000002829         cmovae     rax, rdi
000000000000282d         mov        rdi, rax
0000000000002830         mov        r13, rax
0000000000002833         mov        qword [rsp+0x80+var_58], rax
0000000000002838         call       xmalloc                                     ; xmalloc
000000000000283d         mov        rdx, qword [rsp+0x80+var_80]                ; argument "__n" for method j_mempcpy
0000000000002841         mov        rbp, rax
0000000000002844         mov        rsi, r14                                    ; argument "__src" for method j_mempcpy
0000000000002847         mov        rdi, rbp                                    ; argument "__dest" for method j_mempcpy
000000000000284a         lea        r13, qword [rbp+r13]
000000000000284f         call       j_mempcpy                                   ; mempcpy
0000000000002854         mov        rdx, rax
0000000000002857         mov        eax, dword [rsp+0x80+var_78]
000000000000285b         test       eax, eax
000000000000285d         sete       byte [rsp+0x80+var_80]
0000000000002861         nop        dword [rax]

                     loc_2868:
0000000000002868         cmp        r15, r12                                    ; CODE XREF=seq_fast+508, seq_fast+549
000000000000286b         jb         loc_2877

000000000000286d         cmp        byte [rsp+0x80+var_80], 0x0
0000000000002871         je         loc_29b8

                     loc_2877:
0000000000002877         mov        rax, qword [separator]                      ; separator, CODE XREF=seq_fast+411, seq_fast+774
000000000000287e         lea        rcx, qword [rdx+1]
0000000000002882         movzx      eax, byte [rax]
0000000000002885         mov        byte [rdx], al
0000000000002887         lea        rax, qword [r14+r15-1]
000000000000288c         jmp        loc_289d
000000000000288e         align      16

                     loc_2890:
0000000000002890         sub        rax, 0x1                                    ; CODE XREF=seq_fast+467
0000000000002894         mov        byte [rax+1], 0x30
0000000000002898         cmp        rax, r14
000000000000289b         jb         loc_2910

                     loc_289d:
000000000000289d         movzx      edx, byte [rax]                             ; CODE XREF=seq_fast+444
00000000000028a0         cmp        dl, 0x38
00000000000028a3         jg         loc_2890

00000000000028a5         add        edx, 0x1
00000000000028a8         cmp        rbx, r15
00000000000028ab         mov        byte [rax], dl
00000000000028ad         je         loc_2922

                     loc_28af:
00000000000028af         mov        rdx, r15                                    ; argument "__n" for method j_mempcpy, CODE XREF=seq_fast+592, seq_fast+680, seq_fast+735
00000000000028b2         mov        rsi, r14                                    ; argument "__src" for method j_mempcpy
00000000000028b5         mov        rdi, rcx                                    ; argument "__dest" for method j_mempcpy
00000000000028b8         call       j_mempcpy                                   ; mempcpy
00000000000028bd         mov        rdx, rax
00000000000028c0         mov        rax, r15
00000000000028c3         not        rax
00000000000028c6         add        rax, r13
00000000000028c9         cmp        rdx, rax
00000000000028cc         jbe        loc_2868

00000000000028ce         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
00000000000028d5         mov        rsi, rdx
00000000000028d8         mov        rdi, rbp                                    ; argument "__ptr" for method j_fwrite_unlocked
00000000000028db         sub        rsi, rbp                                    ; argument "__size" for method j_fwrite_unlocked
00000000000028de         mov        edx, 0x1                                    ; argument "__n" for method j_fwrite_unlocked
00000000000028e3         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000028e8         cmp        rax, 0x1
00000000000028ec         jne        loc_2a96

00000000000028f2         mov        rdx, rbp
00000000000028f5         jmp        loc_2868

                     loc_28fa:
00000000000028fa         mov        rbp, rdx                                    ; CODE XREF=seq_fast+130, seq_fast+138
00000000000028fd         jmp        loc_2760

                     loc_2902:
0000000000002902         mov        r13, rdx                                    ; CODE XREF=seq_fast+82, seq_fast+91
0000000000002905         jmp        loc_2731
000000000000290a         align      16

                     loc_2910:
0000000000002910         add        r15, 0x1                                    ; CODE XREF=seq_fast+459
0000000000002914         mov        byte [r14-1], 0x31
0000000000002919         sub        r14, 0x1
000000000000291d         cmp        rbx, r15
0000000000002920         jne        loc_28af

                     loc_2922:
0000000000002922         lea        r11, qword [rbx+rbx]                        ; CODE XREF=seq_fast+477
0000000000002926         mov        rdi, qword [rsp+0x80+var_70]
000000000000292b         mov        qword [rsp+0x80+var_60], rcx
0000000000002930         lea        r10, qword [r11+1]
0000000000002934         mov        qword [rsp+0x80+var_68], r11
0000000000002939         mov        rsi, r10
000000000000293c         mov        qword [rsp+0x80+var_78], r10
0000000000002941         call       xrealloc                                    ; xrealloc
0000000000002946         lea        rdx, qword [rbx+1]                          ; argument "__n" for method j_memmove
000000000000294a         lea        rdi, qword [rax+rbx]                        ; argument "__dest" for method j_memmove
000000000000294e         mov        rsi, rax                                    ; argument "__src" for method j_memmove
0000000000002951         mov        qword [rsp+0x80+var_70], rax
0000000000002956         call       j_memmove                                   ; memmove
000000000000295b         mov        r10, qword [rsp+0x80+var_78]
0000000000002960         mov        r11, qword [rsp+0x80+var_68]
0000000000002965         mov        r14, rax
0000000000002968         mov        rcx, qword [rsp+0x80+var_60]
000000000000296d         add        r10, r10
0000000000002970         cmp        r10, qword [rsp+0x80+var_58]
0000000000002975         mov        rbx, r11
0000000000002978         jbe        loc_28af

000000000000297e         sub        rcx, rbp
0000000000002981         mov        rsi, r10
0000000000002984         mov        rdi, rbp
0000000000002987         mov        qword [rsp+0x80+var_78], rcx
000000000000298c         mov        qword [rsp+0x80+var_68], r10
0000000000002991         call       xrealloc                                    ; xrealloc
0000000000002996         mov        r10, qword [rsp+0x80+var_68]
000000000000299b         mov        rcx, qword [rsp+0x80+var_78]
00000000000029a0         mov        rbp, rax
00000000000029a3         lea        r13, qword [rax+r10]
00000000000029a7         add        rcx, rax
00000000000029aa         mov        qword [rsp+0x80+var_58], r10
00000000000029af         jmp        loc_28af
00000000000029b4         align      8

                     loc_29b8:
00000000000029b8         cmp        r15, r12                                    ; CODE XREF=seq_fast+417
00000000000029bb         ja         loc_29dc

00000000000029bd         mov        rsi, qword [rsp+0x80+var_50]                ; argument "__s2" for method j_strcmp
00000000000029c2         mov        rdi, r14                                    ; argument "__s1" for method j_strcmp
00000000000029c5         mov        qword [rsp+0x80+var_78], rdx
00000000000029ca         call       j_strcmp                                    ; strcmp
00000000000029cf         test       eax, eax
00000000000029d1         mov        rdx, qword [rsp+0x80+var_78]
00000000000029d6         js         loc_2877

                     loc_29dc:
00000000000029dc         mov        byte [rdx], 0xa                             ; CODE XREF=seq_fast+747
00000000000029df         lea        rsi, qword [rdx+1]
00000000000029e3         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
00000000000029ea         mov        edx, 0x1                                    ; argument "__n" for method j_fwrite_unlocked
00000000000029ef         mov        rdi, rbp                                    ; argument "__ptr" for method j_fwrite_unlocked
00000000000029f2         sub        rsi, rbp                                    ; argument "__size" for method j_fwrite_unlocked
00000000000029f5         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000029fa         sub        rax, 0x1
00000000000029fe         jne        loc_2a96

0000000000002a04         mov        ebx, 0x1

                     loc_2a09:
0000000000002a09         mov        rdi, qword [rsp+0x80+var_70]                ; argument "__ptr" for method j_free, CODE XREF=seq_fast+938, seq_fast+961
0000000000002a0e         call       j_free                                      ; free
0000000000002a13         mov        rdi, qword [rsp+0x80+var_48]                ; argument "__ptr" for method j_free
0000000000002a18         call       j_free                                      ; free
0000000000002a1d         add        rsp, 0x48
0000000000002a21         mov        eax, ebx
0000000000002a23         pop        rbx
0000000000002a24         pop        rbp
0000000000002a25         pop        r12
0000000000002a27         pop        r13
0000000000002a29         pop        r14
0000000000002a2b         pop        r15
0000000000002a2d         ret
                        ; endp

                     loc_2a2e:
0000000000002a2e         lea        rax, qword [rbx+1]                          ; CODE XREF=seq_fast+182
0000000000002a32         xor        r12d, r12d
0000000000002a35         mov        rdi, rax
0000000000002a38         mov        qword [rsp+0x80+var_68], rax
0000000000002a3d         call       xmalloc                                     ; xmalloc
0000000000002a42         mov        rdi, rbx
0000000000002a45         sub        rdi, qword [rsp+0x80+var_80]
0000000000002a49         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000002a4c         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000002a4f         mov        qword [rsp+0x80+var_70], rax
0000000000002a54         add        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000002a57         call       j_memcpy                                    ; memcpy
0000000000002a5c         mov        qword [rsp+0x80+var_48], 0x0
0000000000002a65         mov        r14, rax
0000000000002a68         mov        qword [rsp+0x80+var_50], 0x0
0000000000002a71         jmp        loc_2815

                     loc_2a76:
0000000000002a76         jbe        loc_2a7c                                    ; CODE XREF=seq_fast+319

0000000000002a78         xor        ebx, ebx
0000000000002a7a         jmp        loc_2a09

                     loc_2a7c:
0000000000002a7c         mov        rsi, rax                                    ; argument "__s2" for method j_strcmp, CODE XREF=loc_2a76
0000000000002a7f         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000002a82         call       j_strcmp                                    ; strcmp
0000000000002a87         test       eax, eax
0000000000002a89         jle        loc_2815

0000000000002a8f         xor        ebx, ebx
0000000000002a91         jmp        loc_2a09

                     loc_2a96:
0000000000002a96         call       io_error                                    ; io_error, CODE XREF=seq_fast+540, seq_fast+814
0000000000002a9b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x9668)
                     usage:
0000000000002aa0         push       r13                                         ; Begin of unwind block (FDE at 0x96b8), CODE XREF=main+2533, main+2696, main+2984, scan_arg+789, scan_arg+846
0000000000002aa2         push       r12
0000000000002aa4         mov        edx, 0x5
0000000000002aa9         push       rbp
0000000000002aaa         push       rbx
0000000000002aab         mov        ebp, edi
0000000000002aad         sub        rsp, 0x88
0000000000002ab4         mov        rbx, qword [program_name]                   ; program_name
0000000000002abb         mov        rax, qword [fs:0x28]
0000000000002ac4         mov        qword [rsp+0x128+var_B0], rax
0000000000002ac9         xor        eax, eax
0000000000002acb         test       edi, edi
0000000000002acd         je         loc_2afd

0000000000002acf         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002ad6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ad8         call       j_dcgettext                                 ; dcgettext
0000000000002add         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002ae4         mov        rdx, rax
0000000000002ae7         mov        rcx, rbx
0000000000002aea         mov        esi, 0x1
0000000000002aef         xor        eax, eax
0000000000002af1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2af6:
0000000000002af6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+790
0000000000002af8         call       j_exit                                      ; exit
                        ; endp

                     loc_2afd:
0000000000002afd         lea        rsi, qword [aUsageSOptionLa]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... LAST\\n  or:  %s [OPTION]... FIRST LAST\\n  or:  %s [OPTION]... FIRST INCREMENT LAST\\n", CODE XREF=usage+45
0000000000002b04         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b06         call       j_dcgettext                                 ; dcgettext
0000000000002b0b         mov        rcx, rbx
0000000000002b0e         mov        r8, rbx
0000000000002b11         mov        rdx, rbx
0000000000002b14         mov        rsi, rax
0000000000002b17         mov        edi, 0x1
0000000000002b1c         xor        eax, eax
0000000000002b1e         call       j___printf_chk                              ; __printf_chk
0000000000002b23         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b2a         lea        rsi, qword [aPrintNumbersFr]                ; argument "msgid" for method j_dcgettext, "Print numbers from FIRST to LAST, in steps of INCREMENT.\\n"
0000000000002b31         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b36         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b38         call       j_dcgettext                                 ; dcgettext
0000000000002b3d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b40         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b43         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b48         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b4f         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000002b56         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b5b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b5d         call       j_dcgettext                                 ; dcgettext
0000000000002b62         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b65         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b68         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b6d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b74         lea        rsi, qword [aFFormatformatU]                ; argument "msgid" for method j_dcgettext, "  -f, --format=FORMAT      use printf style floating-point FORMAT\\n  -s, --separator=STRING   use STRING to separate numbers (default: \\n)\\n  -w, --equal-width        equalize width by padding with leading zeroes\\n"
0000000000002b7b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b80         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b82         call       j_dcgettext                                 ; dcgettext
0000000000002b87         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b8a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b8d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b92         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b99         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002ba0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ba5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ba7         call       j_dcgettext                                 ; dcgettext
0000000000002bac         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002baf         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002bb2         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002bb7         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002bbe         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002bc5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002bca         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002bcc         call       j_dcgettext                                 ; dcgettext
0000000000002bd1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002bd4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002bd7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002bdc         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002be3         lea        rsi, qword [aNifFirstOrIncr]                ; argument "msgid" for method j_dcgettext, "\\nIf FIRST or INCREMENT is omitted, it defaults to 1.  That is, an\\nomitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.\\nThe sequence of numbers ends when the sum of the current number and\\nINCREMENT would become greater than LAST.\\nFIRST, INC…"
0000000000002bea         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002bef         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002bf1         call       j_dcgettext                                 ; dcgettext
0000000000002bf6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002bf9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002bfc         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002c01         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002c08         lea        rsi, qword [aFormatMustBeSu]                ; argument "msgid" for method j_dcgettext, "FORMAT must be suitable for printing one argument of type 'double';\\nit defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixed point\\ndecimal numbers with maximum precision PREC, and to %g otherwise.\\n"
0000000000002c0f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c14         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c16         call       j_dcgettext                                 ; dcgettext
0000000000002c1b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002c1e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002c21         lea        rbx, qword [aWriteError+16]                 ; 0x7f9f
0000000000002c28         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002c2d         lea        rax, qword [aWriteError+20]                 ; 0x7fa3
0000000000002c34         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000002c3b         mov        qword [rsp+0x128+var_C8], 0x0
0000000000002c44         mov        qword [rsp+0x128+var_C0], 0x0
0000000000002c4d         mov        rdx, rsp
0000000000002c50         mov        qword [rsp+0x128+var_128], rax
0000000000002c54         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002c5b         mov        qword [rsp+0x128+var_F8], rcx
0000000000002c60         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000002c67         mov        qword [rsp+0x128+var_120], rax
0000000000002c6c         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000002c73         mov        qword [rsp+0x128+var_E8], rcx
0000000000002c78         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000002c7f         mov        qword [rsp+0x128+var_118], rax
0000000000002c84         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000002c8b         mov        qword [rsp+0x128+var_D8], rcx
0000000000002c90         mov        qword [rsp+0x128+var_110], rax
0000000000002c95         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000002c9c         mov        qword [rsp+0x128+var_108], rax
0000000000002ca1         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000002ca8         mov        qword [rsp+0x128+var_100], rax
0000000000002cad         mov        qword [rsp+0x128+var_F0], rax
0000000000002cb2         mov        qword [rsp+0x128+var_E0], rax
0000000000002cb7         mov        qword [rsp+0x128+var_D0], rax
0000000000002cbc         nop        dword [rax]

                     loc_2cc0:
0000000000002cc0         add        rdx, 0x10                                   ; CODE XREF=usage+573
0000000000002cc4         mov        rdi, qword [rdx]
0000000000002cc7         test       rdi, rdi
0000000000002cca         je         loc_2cdf

0000000000002ccc         mov        ecx, 0x4
0000000000002cd1         mov        rsi, rbx
0000000000002cd4         rep  cmpsb byte [rsi], byte [rdi]
0000000000002cd6         seta       al
0000000000002cd9         sbb        al, 0x0
0000000000002cdb         test       al, al
0000000000002cdd         jne        loc_2cc0

                     loc_2cdf:
0000000000002cdf         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+554
0000000000002ce3         xor        edi, edi
0000000000002ce5         mov        edx, 0x5
0000000000002cea         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002cf1         test       r12, r12
0000000000002cf4         je         loc_2dbb

0000000000002cfa         call       j_dcgettext                                 ; dcgettext
0000000000002cff         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002d06         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8019
0000000000002d0d         mov        rsi, rax
0000000000002d10         mov        edi, 0x1
0000000000002d15         xor        eax, eax
0000000000002d17         call       j___printf_chk                              ; __printf_chk
0000000000002d1c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002d1e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002d23         call       j_setlocale                                 ; setlocale
0000000000002d28         test       rax, rax
0000000000002d2b         je         loc_2d49

0000000000002d2d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x8027
0000000000002d34         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002d39         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002d3c         call       j_strncmp                                   ; strncmp
0000000000002d41         test       eax, eax
0000000000002d43         jne        loc_2e50

                     loc_2d49:
0000000000002d49         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+651, usage+981
0000000000002d50         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d52         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d57         call       j_dcgettext                                 ; dcgettext
0000000000002d5c         lea        rcx, qword [aWriteError+16]                 ; 0x7f9f
0000000000002d63         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002d6a         mov        rsi, rax
0000000000002d6d         mov        edi, 0x1
0000000000002d72         xor        eax, eax
0000000000002d74         call       j___printf_chk                              ; __printf_chk
0000000000002d79         cmp        r12, rbx
0000000000002d7c         lea        rcx, qword [aMulticallInvoc+10]             ; 0x7fbf
0000000000002d83         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x8da1
0000000000002d8a         cmove      rbx, rcx

                     loc_2d8e:
0000000000002d8e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+932
0000000000002d95         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d97         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d9c         call       j_dcgettext                                 ; dcgettext
0000000000002da1         mov        rcx, rbx
0000000000002da4         mov        rsi, rax
0000000000002da7         mov        rdx, r12
0000000000002daa         mov        edi, 0x1
0000000000002daf         xor        eax, eax
0000000000002db1         call       j___printf_chk                              ; __printf_chk
0000000000002db6         jmp        loc_2af6

                     loc_2dbb:
0000000000002dbb         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+596
0000000000002dc0         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002dc7         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8019
0000000000002dce         mov        rsi, rax
0000000000002dd1         mov        edi, 0x1
0000000000002dd6         xor        eax, eax
0000000000002dd8         call       j___printf_chk                              ; __printf_chk
0000000000002ddd         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002ddf         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002de4         call       j_setlocale                                 ; setlocale
0000000000002de9         test       rax, rax
0000000000002dec         je         loc_2e06

0000000000002dee         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x8027
0000000000002df5         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002dfa         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002dfd         call       j_strncmp                                   ; strncmp
0000000000002e02         test       eax, eax
0000000000002e04         jne        loc_2e49

                     loc_2e06:
0000000000002e06         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+844
0000000000002e0d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e12         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e14         lea        r12, qword [aWriteError+16]                 ; 0x7f9f
0000000000002e1b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x7fbf
0000000000002e22         call       j_dcgettext                                 ; dcgettext
0000000000002e27         lea        rcx, qword [aWriteError+16]                 ; 0x7f9f
0000000000002e2e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002e35         mov        rsi, rax
0000000000002e38         mov        edi, 0x1
0000000000002e3d         xor        eax, eax
0000000000002e3f         call       j___printf_chk                              ; __printf_chk
0000000000002e44         jmp        loc_2d8e

                     loc_2e49:
0000000000002e49         lea        r12, qword [aWriteError+16]                 ; 0x7f9f, CODE XREF=usage+868

                     loc_2e50:
0000000000002e50         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+675
0000000000002e57         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000002e5e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e60         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e65         call       j_dcgettext                                 ; dcgettext
0000000000002e6a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e6d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e70         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e75         jmp        loc_2d49
0000000000002e7a         align      128                                         ; End of unwind block (FDE at 0x96b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int8_t, -104
        ;    var_78: -120


                     scan_arg:
0000000000002e80         push       r15                                         ; Begin of unwind block (FDE at 0x96e4), CODE XREF=main+595, main+1658, main+2042
0000000000002e82         push       r14
0000000000002e84         push       r13
0000000000002e86         push       r12
0000000000002e88         push       rbp
0000000000002e89         push       rbx
0000000000002e8a         mov        rbx, rsi
0000000000002e8d         mov        rbp, rdi
0000000000002e90         xor        esi, esi
0000000000002e92         mov        rdi, rbx
0000000000002e95         sub        rsp, 0x48
0000000000002e99         lea        rcx, qword [cl_strtold]                     ; cl_strtold
0000000000002ea0         lea        rdx, qword [rsp+0x78+var_68]
0000000000002ea5         mov        rax, qword [fs:0x28]
0000000000002eae         mov        qword [rsp+0x78+var_40], rax
0000000000002eb3         xor        eax, eax
0000000000002eb5         call       xstrtold                                    ; xstrtold
0000000000002eba         test       al, al
0000000000002ebc         je         loc_319a

0000000000002ec2         fld        tword [rsp+0x78+var_68]
0000000000002ec6         fld        st0
0000000000002ec8         fstp       tword [rsp+0x78+var_78]
0000000000002ecb         fucomip    st0
0000000000002ecd         jp         loc_3148

0000000000002ed3         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000002ed8         mov        rcx, qword [rax]
0000000000002edb         jmp        loc_2ee4
0000000000002edd         align      32

                     loc_2ee0:
0000000000002ee0         add        rbx, 0x1                                    ; CODE XREF=scan_arg+108, scan_arg+113

                     loc_2ee4:
0000000000002ee4         movzx      edx, byte [rbx]                             ; CODE XREF=scan_arg+91
0000000000002ee7         test       byte [rcx+rdx*2+1], 0x20
0000000000002eec         jne        loc_2ee0

0000000000002eee         cmp        dl, 0x2b
0000000000002ef1         je         loc_2ee0

0000000000002ef3         mov        esi, 0x2e                                   ; argument "__c" for method j_strchr
0000000000002ef8         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
0000000000002efb         mov        qword [rsp+0x78+var_58], 0x0
0000000000002f04         mov        dword [rsp+0x78+var_50], 0x7fffffff
0000000000002f0c         call       j_strchr                                    ; strchr
0000000000002f11         test       rax, rax
0000000000002f14         mov        r12, rax
0000000000002f17         je         loc_308a

                     loc_2f1d:
0000000000002f1d         lea        rsi, qword [aInvalidSArgume+24]             ; argument "__reject" for method j_strcspn, 0x806b, CODE XREF=scan_arg+538, scan_arg+552
0000000000002f24         mov        rdi, rbx                                    ; argument "__s" for method j_strcspn
0000000000002f27         call       j_strcspn                                   ; strcspn
0000000000002f2c         cmp        byte [rbx+rax], 0x0
0000000000002f30         jne        loc_3050

0000000000002f36         fldz
0000000000002f38         fld        tword [rsp+0x78+var_78]
0000000000002f3b         fmul       st1
0000000000002f3d         fucomip    st1
0000000000002f3f         fstp       st0
0000000000002f41         jp         loc_3050

0000000000002f47         jne        loc_3050

0000000000002f4d         or         r15, 0xffffffffffffffff
0000000000002f51         xor        eax, eax
0000000000002f53         mov        rdi, rbx
0000000000002f56         mov        rcx, r15
0000000000002f59         repne scasb al, byte [rdi]
0000000000002f5b         test       r12, r12
0000000000002f5e         mov        rax, rcx
0000000000002f61         not        rax
0000000000002f64         lea        r13, qword [rax+r15]
0000000000002f68         mov        qword [rsp+0x78+var_58], r13
0000000000002f6d         je         loc_30bf

0000000000002f73         lea        rdi, qword [r12+1]                          ; argument "__s" for method j_strcspn
0000000000002f78         lea        rsi, qword [aInvalidSArgume+27]             ; argument "__reject" for method j_strcspn, 0x806e
0000000000002f7f         call       j_strcspn                                   ; strcspn
0000000000002f84         cmp        rax, 0x7fffffff
0000000000002f8a         mov        r14, rax
0000000000002f8d         jbe        loc_30ad

                     loc_2f93:
0000000000002f93         cmp        rbx, r12                                    ; CODE XREF=scan_arg+570
0000000000002f96         je         loc_313d

0000000000002f9c         movsx      eax, byte [r12-1]
0000000000002fa2         xor        r15d, r15d
0000000000002fa5         sub        eax, 0x30
0000000000002fa8         cmp        eax, 0x9
0000000000002fab         seta       r15b

                     loc_2faf:
0000000000002faf         add        r13, r15                                    ; CODE XREF=scan_arg+564, scan_arg+707
0000000000002fb2         mov        qword [rsp+0x78+var_58], r13

                     loc_2fb7:
0000000000002fb7         mov        esi, 0x65                                   ; argument "__c" for method j_strchr, CODE XREF=scan_arg+578
0000000000002fbc         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
0000000000002fbf         call       j_strchr                                    ; strchr
0000000000002fc4         test       rax, rax
0000000000002fc7         mov        r13, rax
0000000000002fca         je         loc_30c7

                     loc_2fd0:
0000000000002fd0         lea        rdi, qword [r13+1]                          ; argument "__nptr" for method j_strtol, CODE XREF=scan_arg+608
0000000000002fd4         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
0000000000002fd9         xor        esi, esi                                    ; argument "__endptr" for method j_strtol
0000000000002fdb         call       j_strtol                                    ; strtol
0000000000002fe0         mov        r8, r13
0000000000002fe3         mov        rdx, rax
0000000000002fe6         mov        ecx, dword [rsp+0x78+var_50]
0000000000002fea         sub        r8, rbx
0000000000002fed         test       rax, rax
0000000000002ff0         js         loc_30e5

0000000000002ff6         movsxd     rax, ecx
0000000000002ff9         mov        esi, ecx
0000000000002ffb         mov        rdi, rbx
0000000000002ffe         cmp        rax, rdx
0000000000003001         cmovg      rax, rdx
0000000000003005         or         rcx, 0xffffffffffffffff
0000000000003009         sub        esi, eax
000000000000300b         xor        eax, eax
000000000000300d         mov        dword [rsp+0x78+var_50], esi
0000000000003011         repne scasb al, byte [rdi]
0000000000003013         mov        rax, qword [rsp+0x78+var_58]
0000000000003018         add        rax, r8
000000000000301b         test       r12, r12
000000000000301e         setne      dil
0000000000003022         test       r14, r14
0000000000003025         lea        rax, qword [rcx+rax+2]
000000000000302a         setne      cl
000000000000302d         test       dil, cl
0000000000003030         mov        qword [rsp+0x78+var_58], rax
0000000000003035         je         loc_303f

0000000000003037         test       esi, esi
0000000000003039         je         loc_3124

                     loc_303f:
000000000000303f         cmp        rdx, r14                                    ; CODE XREF=scan_arg+437, scan_arg+685
0000000000003042         cmovbe     r14, rdx
0000000000003046         sub        rdx, r14

                     loc_3049:
0000000000003049         add        qword [rsp+0x78+var_58], rdx                ; CODE XREF=scan_arg+671
000000000000304e         nop

                     loc_3050:
0000000000003050         movdqa     xmm0, xmmword [rsp+0x78+var_68]             ; CODE XREF=scan_arg+176, scan_arg+193, scan_arg+199, scan_arg+602
0000000000003056         mov        rax, rbp
0000000000003059         mov        rsi, qword [rsp+0x78+var_40]
000000000000305e         xor        rsi, qword [fs:0x28]
0000000000003067         movaps     xmmword [rbp], xmm0
000000000000306b         movdqa     xmm0, xmmword [rsp+0x78+var_58]
0000000000003071         movaps     xmmword [rbp+0x10], xmm0
0000000000003075         jne        loc_31d3

000000000000307b         add        rsp, 0x48
000000000000307f         pop        rbx
0000000000003080         pop        rbp
0000000000003081         pop        r12
0000000000003083         pop        r13
0000000000003085         pop        r14
0000000000003087         pop        r15
0000000000003089         ret
                        ; endp

                     loc_308a:
000000000000308a         mov        esi, 0x70                                   ; argument "__c" for method j_strchr, CODE XREF=scan_arg+151
000000000000308f         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
0000000000003092         call       j_strchr                                    ; strchr
0000000000003097         test       rax, rax
000000000000309a         jne        loc_2f1d

00000000000030a0         mov        dword [rsp+0x78+var_50], 0x0
00000000000030a8         jmp        loc_2f1d

                     loc_30ad:
00000000000030ad         test       rax, rax                                    ; CODE XREF=scan_arg+269
00000000000030b0         mov        dword [rsp+0x78+var_50], eax
00000000000030b4         je         loc_2faf

00000000000030ba         jmp        loc_2f93

                     loc_30bf:
00000000000030bf         xor        r14d, r14d                                  ; CODE XREF=scan_arg+237
00000000000030c2         jmp        loc_2fb7

                     loc_30c7:
00000000000030c7         mov        esi, 0x45                                   ; argument "__c" for method j_strchr, CODE XREF=scan_arg+330
00000000000030cc         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
00000000000030cf         call       j_strchr                                    ; strchr
00000000000030d4         test       rax, rax
00000000000030d7         mov        r13, rax
00000000000030da         je         loc_3050

00000000000030e0         jmp        loc_2fd0

                     loc_30e5:
00000000000030e5         sub        ecx, eax                                    ; CODE XREF=scan_arg+368
00000000000030e7         mov        rdi, rbx
00000000000030ea         xor        eax, eax
00000000000030ec         mov        dword [rsp+0x78+var_50], ecx
00000000000030f0         or         rcx, 0xffffffffffffffff
00000000000030f4         repne scasb al, byte [rdi]
00000000000030f6         mov        rax, qword [rsp+0x78+var_58]
00000000000030fb         add        rax, r8
00000000000030fe         test       r12, r12
0000000000003101         lea        rax, qword [rcx+rax+2]
0000000000003106         je         loc_3132

0000000000003108         add        r12, 0x1
000000000000310c         lea        rcx, qword [rax+1]
0000000000003110         cmp        r13, r12
0000000000003113         cmove      rax, rcx
0000000000003117         mov        qword [rsp+0x78+var_58], rax

                     loc_311c:
000000000000311c         neg        rdx                                         ; CODE XREF=scan_arg+699
000000000000311f         jmp        loc_3049

                     loc_3124:
0000000000003124         sub        rax, 0x1                                    ; CODE XREF=scan_arg+441
0000000000003128         mov        qword [rsp+0x78+var_58], rax
000000000000312d         jmp        loc_303f

                     loc_3132:
0000000000003132         add        rax, 0x1                                    ; CODE XREF=scan_arg+646
0000000000003136         mov        qword [rsp+0x78+var_58], rax
000000000000313b         jmp        loc_311c

                     loc_313d:
000000000000313d         mov        r15d, 0x1                                   ; CODE XREF=scan_arg+278
0000000000003143         jmp        loc_2faf

                     loc_3148:
0000000000003148         mov        rsi, rbx                                    ; CODE XREF=scan_arg+77
000000000000314b         mov        edi, 0x1
0000000000003150         call       quote_n                                     ; quote_n
0000000000003155         lea        rsi, qword [aNotanumber]                    ; "not-a-number"
000000000000315c         xor        edi, edi
000000000000315e         mov        rbp, rax
0000000000003161         call       quote_n                                     ; quote_n
0000000000003166         lea        rsi, qword [aInvalidSArgume]                ; argument "msgid" for method j_dcgettext, "invalid %s argument: %s"
000000000000316d         mov        rbx, rax
0000000000003170         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003175         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003177         call       j_dcgettext                                 ; dcgettext
000000000000317c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000317e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003181         mov        r8, rbp
0000000000003184         mov        rcx, rbx
0000000000003187         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003189         xor        eax, eax
000000000000318b         call       j_error                                     ; error
0000000000003190         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000003195         call       usage                                       ; usage

                     loc_319a:
000000000000319a         mov        rdi, rbx                                    ; CODE XREF=scan_arg+60
000000000000319d         call       quote                                       ; quote
00000000000031a2         lea        rsi, qword [aInvalidFloatin]                ; argument "msgid" for method j_dcgettext, "invalid floating point argument: %s"
00000000000031a9         mov        rbx, rax
00000000000031ac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000031b1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000031b3         call       j_dcgettext                                 ; dcgettext
00000000000031b8         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000031ba         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000031bd         mov        rcx, rbx
00000000000031c0         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000031c2         xor        eax, eax
00000000000031c4         call       j_error                                     ; error
00000000000031c9         mov        edi, 0x1                                    ; argument #1 for method usage
00000000000031ce         call       usage                                       ; usage

                     loc_31d3:
00000000000031d3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=scan_arg+501
                        ; endp
00000000000031d8         align      32                                          ; End of unwind block (FDE at 0x96e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_58: -88


                     cl_strtold:
00000000000031e0         push       r13                                         ; Begin of unwind block (FDE at 0x97dc), DATA XREF=main+898, scan_arg+25
00000000000031e2         push       r12
00000000000031e4         push       rbp
00000000000031e5         push       rbx
00000000000031e6         mov        rbx, rsi
00000000000031e9         mov        rbp, rdi
00000000000031ec         sub        rsp, 0x38
00000000000031f0         lea        rsi, qword [rsp+0x58+var_40]                ; argument "__endptr" for method j_strtold
00000000000031f5         mov        rax, qword [fs:0x28]
00000000000031fe         mov        qword [rsp+0x58+var_30], rax
0000000000003203         xor        eax, eax
0000000000003205         call       j_strtold                                   ; strtold
000000000000320a         mov        rax, qword [rsp+0x58+var_40]
000000000000320f         fld        st0
0000000000003211         cmp        byte [rax], 0x0
0000000000003214         jne        loc_3240

0000000000003216         fstp       st1

                     loc_3218:
0000000000003218         test       rbx, rbx                                    ; CODE XREF=cl_strtold+147, cl_strtold+158
000000000000321b         je         loc_3225

000000000000321d         mov        rax, qword [rsp+0x58+var_40]
0000000000003222         mov        qword [rbx], rax

                     loc_3225:
0000000000003225         mov        rax, qword [rsp+0x58+var_30]                ; CODE XREF=cl_strtold+59
000000000000322a         xor        rax, qword [fs:0x28]
0000000000003233         jne        loc_3280

0000000000003235         add        rsp, 0x38
0000000000003239         pop        rbx
000000000000323a         pop        rbp
000000000000323b         pop        r12
000000000000323d         pop        r13
000000000000323f         ret
                        ; endp

                     loc_3240:
0000000000003240         fstp       st0                                         ; CODE XREF=cl_strtold+52
0000000000003242         fstp       tword [rsp+0x58+var_58]
0000000000003245         call       j___errno_location                          ; __errno_location
000000000000324a         lea        rsi, qword [rsp+0x58+var_38]
000000000000324f         mov        rdi, rbp
0000000000003252         mov        r12, rax
0000000000003255         mov        r13d, dword [rax]
0000000000003258         call       c_strtold                                   ; c_strtold
000000000000325d         mov        rax, qword [rsp+0x58+var_38]
0000000000003262         cmp        qword [rsp+0x58+var_40], rax
0000000000003267         fld        tword [rsp+0x58+var_58]
000000000000326a         jae        loc_3278

000000000000326c         fstp       st0
000000000000326e         mov        qword [rsp+0x58+var_40], rax
0000000000003273         jmp        loc_3218
0000000000003275         align      8

                     loc_3278:
0000000000003278         fstp       st1                                         ; CODE XREF=cl_strtold+138
000000000000327a         mov        dword [r12], r13d
000000000000327e         jmp        loc_3218

                     loc_3280:
0000000000003280         fstp       st0                                         ; CODE XREF=cl_strtold+83
0000000000003282         call       j___stack_chk_fail                          ; __stack_chk_fail
                        ; endp
0000000000003287         align      16                                          ; End of unwind block (FDE at 0x97dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000003290         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x981c), file_name
0000000000003297         ret
                        ; endp
0000000000003298         align      32                                          ; End of unwind block (FDE at 0x981c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
00000000000032a0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x9830), ignore_EPIPE
00000000000032a7         ret
                        ; endp
00000000000032a8         align      16                                          ; End of unwind block (FDE at 0x9830)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
00000000000032b0         push       rbp                                         ; Begin of unwind block (FDE at 0x9844), DATA XREF=main+117
00000000000032b1         push       rbx
00000000000032b2         sub        rsp, 0x8
00000000000032b6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000032bd         call       close_stream                                ; close_stream
00000000000032c2         test       eax, eax
00000000000032c4         je         loc_32dc

00000000000032c6         call       j___errno_location                          ; __errno_location
00000000000032cb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
00000000000032d2         mov        rbx, rax
00000000000032d5         je         loc_32f3

00000000000032d7         cmp        dword [rax], 0x20
00000000000032da         jne        loc_32f3

                     loc_32dc:
00000000000032dc         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
00000000000032e3         call       close_stream                                ; close_stream
00000000000032e8         test       eax, eax
00000000000032ea         jne        loc_3332

00000000000032ec         add        rsp, 0x8
00000000000032f0         pop        rbx
00000000000032f1         pop        rbp
00000000000032f2         ret
                        ; endp

                     loc_32f3:
00000000000032f3         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
00000000000032fa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032fc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003301         call       j_dcgettext                                 ; dcgettext
0000000000003306         mov        rdi, qword [file_name]                      ; file_name
000000000000330d         mov        rbp, rax
0000000000003310         test       rdi, rdi
0000000000003313         je         loc_333d

0000000000003315         call       quotearg_colon                              ; quotearg_colon
000000000000331a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000331c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003323         mov        rcx, rax
0000000000003326         mov        r8, rbp
0000000000003329         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000332b         xor        eax, eax
000000000000332d         call       j_error                                     ; error

                     loc_3332:
0000000000003332         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003338         call       j__exit                                     ; _exit
                        ; endp

                     loc_333d:
000000000000333d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000333f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x881c
0000000000003346         mov        rcx, rax
0000000000003349         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000334b         xor        eax, eax
000000000000334d         call       j_error                                     ; error
0000000000003352         jmp        loc_3332
0000000000003354         align      32                                          ; End of unwind block (FDE at 0x9844)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003360         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x9874), CODE XREF=main+52
0000000000003363         push       rbx
0000000000003364         je         loc_33dd

0000000000003366         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000336b         mov        rbx, rdi
000000000000336e         call       j_strrchr                                   ; strrchr
0000000000003373         test       rax, rax
0000000000003376         je         loc_33cd

0000000000003378         lea        r8, qword [rax+1]
000000000000337c         mov        rdx, r8
000000000000337f         sub        rdx, rbx
0000000000003382         cmp        rdx, 0x6
0000000000003386         jle        loc_33cd

0000000000003388         lea        rsi, qword [rax-6]
000000000000338c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000003393         mov        ecx, 0x7
0000000000003398         rep  cmpsb byte [rsi], byte [rdi]
000000000000339a         seta       dl
000000000000339d         sbb        dl, 0x0
00000000000033a0         test       dl, dl
00000000000033a2         jne        loc_33cd

00000000000033a4         lea        rdi, qword [aLibs+8]                        ; 0x8860
00000000000033ab         mov        ecx, 0x3
00000000000033b0         mov        rsi, r8
00000000000033b3         mov        rbx, r8
00000000000033b6         rep  cmpsb byte [rsi], byte [rdi]
00000000000033b8         seta       dl
00000000000033bb         sbb        dl, 0x0
00000000000033be         test       dl, dl
00000000000033c0         jne        loc_33cd

00000000000033c2         lea        rbx, qword [rax+4]
00000000000033c6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_33cd:
00000000000033cd         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000033d4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000033db         pop        rbx
00000000000033dc         ret
                        ; endp

                     loc_33dd:
00000000000033dd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000033e4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000033eb         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000033f0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000033f5         call       j_fwrite                                    ; fwrite
00000000000033fa         call       j_abort                                     ; abort
                        ; endp
00000000000033ff         align      1024                                        ; End of unwind block (FDE at 0x9874)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000003400         push       rbp                                         ; Begin of unwind block (FDE at 0x9894), CODE XREF=sub_4100+1365, sub_4100+1387
0000000000003401         push       rbx
0000000000003402         mov        rbp, rdi
0000000000003405         mov        ebx, esi
0000000000003407         sub        rsp, 0x8
000000000000340b         call       locale_charset                              ; locale_charset
0000000000003410         movzx      edx, byte [rax]
0000000000003413         and        edx, 0xffffffdf
0000000000003416         cmp        dl, 0x55
0000000000003419         je         loc_3490

000000000000341b         cmp        dl, 0x47
000000000000341e         je         loc_3440

                     loc_3420:
0000000000003420         lea        rax, qword [aLibs+27]                       ; 0x8873, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000003427         lea        rdx, qword [a0+5]                           ; 0x80e7
000000000000342e         cmp        ebx, 0x9
0000000000003431         cmovne     rax, rdx
0000000000003435         add        rsp, 0x8
0000000000003439         pop        rbx
000000000000343a         pop        rbp
000000000000343b         ret
                        ; endp
000000000000343c         align      64

                     loc_3440:
0000000000003440         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003444         and        edx, 0xffffffdf
0000000000003447         cmp        dl, 0x42
000000000000344a         jne        loc_3420

000000000000344c         cmp        byte [rax+2], 0x31
0000000000003450         jne        loc_3420

0000000000003452         cmp        byte [rax+3], 0x38
0000000000003456         jne        loc_3420

0000000000003458         cmp        byte [rax+4], 0x30
000000000000345c         jne        loc_3420

000000000000345e         cmp        byte [rax+5], 0x33
0000000000003462         jne        loc_3420

0000000000003464         cmp        byte [rax+6], 0x30
0000000000003468         jne        loc_3420

000000000000346a         cmp        byte [rax+7], 0x0
000000000000346e         jne        loc_3420

0000000000003470         cmp        byte [rbp], 0x60
0000000000003474         lea        rax, qword [aLibs+20]                       ; 0x886c
000000000000347b         lea        rdx, qword [aLibs+24]                       ; 0x8870
0000000000003482         cmovne     rax, rdx
0000000000003486         add        rsp, 0x8
000000000000348a         pop        rbx
000000000000348b         pop        rbp
000000000000348c         ret
                        ; endp
000000000000348d         align      16

                     loc_3490:
0000000000003490         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000003494         and        edx, 0xffffffdf
0000000000003497         cmp        dl, 0x54
000000000000349a         jne        loc_3420

000000000000349c         movzx      edx, byte [rax+2]
00000000000034a0         and        edx, 0xffffffdf
00000000000034a3         cmp        dl, 0x46
00000000000034a6         jne        loc_3420

00000000000034ac         cmp        byte [rax+3], 0x2d
00000000000034b0         jne        loc_3420

00000000000034b6         cmp        byte [rax+4], 0x38
00000000000034ba         jne        loc_3420

00000000000034c0         cmp        byte [rax+5], 0x0
00000000000034c4         jne        loc_3420

00000000000034ca         cmp        byte [rbp], 0x60
00000000000034ce         lea        rax, qword [aLibs+12]                       ; 0x8864
00000000000034d5         lea        rdx, qword [aLibs+16]                       ; 0x8868
00000000000034dc         cmovne     rax, rdx
00000000000034e0         add        rsp, 0x8
00000000000034e4         pop        rbx
00000000000034e5         pop        rbp
00000000000034e6         ret
                        ; endp
00000000000034e7         align      16                                          ; End of unwind block (FDE at 0x9894)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000034f0         push       r15                                         ; Begin of unwind block (FDE at 0x98d8), CODE XREF=sub_3c30+1165, sub_4100+1467, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000034f2         push       r14
00000000000034f4         mov        r15d, r8d
00000000000034f7         push       r13
00000000000034f9         push       r12
00000000000034fb         mov        r14, rdi
00000000000034fe         push       rbp
00000000000034ff         push       rbx
0000000000003500         mov        ebx, r9d
0000000000003503         mov        r13, rsi
0000000000003506         mov        rbp, rcx
0000000000003509         and        ebx, 0x2
000000000000350c         sub        rsp, 0xb8
0000000000003513         mov        rax, qword [rsp+0xe8+arg_0]
000000000000351b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000003520         mov        dword [rsp+0xe8+var_E0], r8d
0000000000003525         mov        dword [rsp+0xe8+var_70], r9d
000000000000352a         mov        qword [rsp+0xe8+var_C8], rax
000000000000352f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003537         mov        qword [rsp+0xe8+var_80], rax
000000000000353c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003544         mov        qword [rsp+0xe8+var_88], rax
0000000000003549         mov        rax, qword [fs:0x28]
0000000000003552         mov        qword [rsp+0xe8+var_40], rax
000000000000355a         xor        eax, eax
000000000000355c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003561         cmp        r15d, 0xa
0000000000003565         mov        qword [rsp+0xe8+var_90], rax
000000000000356a         ja         loc_471f

0000000000003570         lea        rcx, qword [switch_table_88e0]              ; switch_table_88e0
0000000000003577         mov        edx, r15d
000000000000357a         movsxd     rax, dword [rcx+rdx*4]
000000000000357e         add        rax, rcx
0000000000003581         jmp        rax                                         ; switch statement using table at 0x88e0, with 11 cases, 0x3583,0x4154,0x41b0,0x4205,0x424a,0x4284,0x432a,0x4364,0x4558

                     loc_3583:
0000000000003583         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_4100+86
0000000000003588         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000358d         xor        r12d, r12d
0000000000003590         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003599         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000359e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_35a3:
00000000000035a3         lea        rax, qword [a0+5]                           ; 0x80e7, CODE XREF=sub_4100+644
00000000000035aa         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000035b3         xor        r15d, r15d
00000000000035b6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000035be         mov        qword [rsp+0xe8+var_A0], rax

                     loc_35c3:
00000000000035c3         xor        r11d, r11d                                  ; CODE XREF=sub_3c30+180, sub_4100+168, sub_4100+256, sub_4100+325, sub_4100+383, sub_4100+549, sub_4100+607, sub_4100+1176, sub_4100+1253
00000000000035c6         mov        rax, rbp
00000000000035c9         mov        r8d, r12d
00000000000035cc         mov        rbp, r11
00000000000035cf         mov        r11, rax
00000000000035d2         nop        word [rax+rax]

                     loc_35d8:
00000000000035d8         cmp        r11, rbp                                    ; CODE XREF=sub_36e0+194
00000000000035db         setne      r12b
00000000000035df         cmp        r11, 0xffffffffffffffff
00000000000035e3         jne        loc_35f2

00000000000035e5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000035ea         cmp        byte [rax+rbp], 0x0
00000000000035ee         setne      r12b

                     loc_35f2:
00000000000035f2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000035f5         je         loc_3c50

00000000000035fb         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003600         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003605         lea        r9, qword [rdi+rbp]
0000000000003609         setne      al
000000000000360c         and        al, byte [rsp+0xe8+var_DB]
0000000000003610         mov        r10d, eax
0000000000003613         je         loc_36c0

0000000000003619         mov        rax, qword [rsp+0xe8+var_D0]
000000000000361e         test       rax, rax
0000000000003621         je         loc_3a50

0000000000003627         cmp        r11, 0xffffffffffffffff
000000000000362b         lea        rbx, qword [rbp+rax]
0000000000003630         jne        loc_3660

0000000000003632         cmp        rax, 0x1
0000000000003636         jbe        loc_3660

0000000000003638         mov        byte [rsp+0xe8+var_B0], r8b
000000000000363d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003642         mov        qword [rsp+0xe8+var_C0], r9
0000000000003647         call       j_strlen                                    ; strlen
000000000000364c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003652         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003658         mov        r11, rax
000000000000365b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3660:
0000000000003660         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003663         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003668         ja         loc_3c20

000000000000366e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003673         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003678         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000367b         mov        qword [rsp+0xe8+var_A8], r11
0000000000003680         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003685         mov        qword [rsp+0xe8+var_B8], r9
000000000000368a         call       j_memcmp                                    ; memcmp
000000000000368f         test       eax, eax
0000000000003691         mov        r9, qword [rsp+0xe8+var_B8]
0000000000003696         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000369c         mov        r11, qword [rsp+0xe8+var_A8]
00000000000036a1         jne        loc_3c20

00000000000036a7         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000036ac         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000036b2         jne        loc_4635

00000000000036b8         nop        dword [rax+rax]

                     loc_36c0:
00000000000036c0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_3c10+19
00000000000036c4         cmp        bl, 0x7e
00000000000036c7         ja         loc_39e8

00000000000036cd         lea        rcx, qword [switch_table_88e0+44]           ; 0x890c
00000000000036d4         movzx      edx, bl
00000000000036d7         movsxd     rax, dword [rcx+rdx*4]
00000000000036db         add        rax, rcx
00000000000036de         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_36e0:
00000000000036e0         xor        r10d, r10d
00000000000036e3         cmp        r11, 0x1
00000000000036e7         setne      al
00000000000036ea         cmp        r11, 0xffffffffffffffff
00000000000036ee         jne        loc_36fc

00000000000036f0         mov        rax, qword [rsp+arg_8]
00000000000036f5         cmp        byte [rax+1], 0x0
00000000000036f9         setne      al

                     loc_36fc:
00000000000036fc         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_36e0+14
0000000000003701         sete       dl
0000000000003704         test       al, al
0000000000003706         je         loc_3958

                     loc_370c:
000000000000370c         xor        r12d, r12d                                  ; CODE XREF=sub_3950+11
000000000000370f         xor        eax, eax
0000000000003711         nop        dword [rax]
                        ; endp

                     loc_3718:
0000000000003718         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_3900+50, sub_39d0+119
000000000000371d         jne        loc_3832

0000000000003723         test       dl, dl
0000000000003725         jne        loc_3832

                     loc_372b:
000000000000372b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_37e0+87
0000000000003730         test       rsi, rsi
0000000000003733         je         loc_3749

0000000000003735         mov        edx, ebx
0000000000003737         shr        dl, 0x5
000000000000373a         movzx      edx, dl
000000000000373d         mov        edx, dword [rsi+rdx*4]
0000000000003740         bt         edx, ebx
0000000000003743         jb         loc_3893

                     loc_3749:
0000000000003749         test       r10b, r10b                                  ; CODE XREF=sub_36e0+83, sub_37e0+93
000000000000374c         jne        loc_3893

0000000000003752         xor        eax, 0x1
0000000000003755         add        rbp, 0x1
0000000000003759         and        eax, r8d

                     loc_375c:
000000000000375c         test       al, al                                      ; CODE XREF=sub_3c30+936
000000000000375e         je         loc_3780

0000000000003760         cmp        r13, r15
0000000000003763         jbe        loc_376a

0000000000003765         mov        byte [r14+r15], 0x27

                     loc_376a:
000000000000376a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_36e0+131
000000000000376e         cmp        r13, rax
0000000000003771         jbe        loc_3779

0000000000003773         mov        byte [r14+r15+1], 0x27

                     loc_3779:
0000000000003779         add        r15, 0x2                                    ; CODE XREF=sub_36e0+145
000000000000377d         xor        r8d, r8d

                     loc_3780:
0000000000003780         cmp        r15, r13                                    ; CODE XREF=sub_36e0+126, sub_37e0+275, sub_3c30+869
0000000000003783         jae        loc_3789

0000000000003785         mov        byte [r14+r15], bl

                     loc_3789:
0000000000003789         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_36e0+163
000000000000378e         add        r15, 0x1
0000000000003792         mov        eax, 0x0
0000000000003797         test       r12b, r12b
000000000000379a         cmove      edi, eax
000000000000379d         mov        byte [rsp+0xe8+var_DA], dil
00000000000037a2         jmp        loc_35d8
00000000000037a7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_37b0:
00000000000037b0         xor        r10d, r10d
00000000000037b3         mov        eax, dword [rsp+arg_0]
00000000000037b7         cmp        eax, 0x2
00000000000037ba         je         loc_3d78

00000000000037c0         cmp        eax, 0x5
00000000000037c3         je         loc_3d38

00000000000037c9         cmp        eax, 0x2
00000000000037cc         mov        ebx, 0x3f
00000000000037d1         sete       dl
00000000000037d4         xor        r12d, r12d
00000000000037d7         xor        eax, eax
00000000000037d9         jmp        sub_36e0+56
                        ; endp
00000000000037de         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_37e0:
00000000000037e0         xor        r10d, r10d
00000000000037e3         cmp        dword [rsp+arg_0], 0x2
00000000000037e8         je         loc_3cf0

00000000000037ee         mov        byte [rsp+arg_74], r12b
00000000000037f3         xor        edx, edx
00000000000037f5         xor        eax, eax
00000000000037f7         mov        ebx, 0x27
00000000000037fc         jmp        sub_36e0+56
                        ; endp
0000000000003801         nop        dword [rax]
0000000000003808         mov        edx, 0x9
000000000000380d         mov        ebx, 0x74

                     loc_3812:
0000000000003812         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_39a0+10, sub_3a90+37, sub_3bd0+53
0000000000003817         sete       al
000000000000381a         and        al, byte [rsp+arg_7]
000000000000381e         jne        sub_3950+30

0000000000003824         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_37e0+114
0000000000003829         jne        loc_3890

                     loc_382b:
000000000000382b         mov        ebx, edx                                    ; CODE XREF=sub_3900+18
000000000000382d         xor        r12d, r12d
0000000000003830         xor        eax, eax
                        ; endp

                     loc_3832:
0000000000003832         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_36e0+61, sub_36e0+69
0000000000003837         jne        loc_372b

000000000000383d         jmp        loc_3749
0000000000003842         nop        word [rax+rax]
0000000000003848         mov        edx, 0x8
000000000000384d         mov        ebx, 0x62
0000000000003852         jmp        sub_37e0+68
0000000000003854         nop        dword [rax]
0000000000003858         cmp        dword [rsp+8], 0x2
000000000000385d         je         sub_3c30                                    ; sub_3c30
0000000000003863         cmp        byte [rsp+0xd], 0x0
0000000000003868         je         sub_3a70+16

                     loc_386e:
000000000000386e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3a70+8
0000000000003873         je         loc_3a80

0000000000003879         cmp        qword [rsp+arg_10], 0x0
000000000000387f         jne        loc_3c3b

0000000000003885         mov        ebx, 0x5c
000000000000388a         nop        word [rax+rax]
                        ; endp

                     loc_3890:
0000000000003890         xor        r12d, r12d                                  ; CODE XREF=sub_37e0+73, sub_3bd0+29
                        ; endp

                     loc_3893:
0000000000003893         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_36e0+99, sub_36e0+108
0000000000003898         sete       dl
000000000000389b         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000038a0         mov        eax, edx
00000000000038a2         jne        loc_40f8

00000000000038a8         mov        eax, r8d
00000000000038ab         xor        eax, 0x1
00000000000038ae         and        al, dl
00000000000038b0         je         loc_38e1

00000000000038b2         cmp        r13, r15
00000000000038b5         jbe        loc_38bc

00000000000038b7         mov        byte [r14+r15], 0x27

                     loc_38bc:
00000000000038bc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_37e0+213
00000000000038c0         cmp        r13, rdx
00000000000038c3         jbe        loc_38cb

00000000000038c5         mov        byte [r14+r15+1], 0x24

                     loc_38cb:
00000000000038cb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_37e0+227
00000000000038cf         cmp        r13, rdx
00000000000038d2         jbe        loc_38da

00000000000038d4         mov        byte [r14+r15+2], 0x27

                     loc_38da:
00000000000038da         add        r15, 0x3                                    ; CODE XREF=sub_37e0+242
00000000000038de         mov        r8d, eax

                     loc_38e1:
00000000000038e1         cmp        r13, r15                                    ; CODE XREF=sub_37e0+208
00000000000038e4         jbe        loc_38eb

00000000000038e6         mov        byte [r14+r15], 0x5c

                     loc_38eb:
00000000000038eb         add        r15, 0x1                                    ; CODE XREF=sub_37e0+260
00000000000038ef         add        rbp, 0x1
00000000000038f3         jmp        loc_3780
00000000000038f8         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3900:
0000000000003900         cmp        byte [rsp+arg_5], 0x0
0000000000003905         jne        loc_3ad3

000000000000390b         xor        edx, edx
000000000000390d         test       byte [rsp+arg_70], 0x1
0000000000003912         je         loc_382b

0000000000003918         add        rbp, 0x1
000000000000391c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000003921         nop        dword [rax]
0000000000003928         cmp        dword [rsp+8], 0x2
000000000000392d         sete       dl
0000000000003930         xor        eax, eax
0000000000003932         jmp        sub_36e0+56
0000000000003937         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3940:
0000000000003940         mov        edx, 0x7
0000000000003945         mov        ebx, 0x61
000000000000394a         jmp        sub_37e0+68
                        ; endp
000000000000394f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3950:
0000000000003950         cmp        dword [rsp+8], 0x2
0000000000003955         sete       dl
                        ; endp

                     loc_3958:
0000000000003958         test       rbp, rbp                                    ; CODE XREF=sub_36e0+38, sub_3b70+35
000000000000395b         jne        loc_370c

0000000000003961         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_3ba0+43
0000000000003966         and        al, dl
0000000000003968         je         sub_36e0+56

000000000000396e         mov        rbp, r11
0000000000003971         mov        dword [rsp+arg_0], 0x2
0000000000003979         jmp        sub_3c30+1097
                        ; endp
000000000000397e         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3980:
0000000000003980         cmp        dword [rsp+arg_0], 0x2
0000000000003985         sete       dl
0000000000003988         xor        r12d, r12d
000000000000398b         jmp        sub_3950+17
                        ; endp
000000000000398d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3990:
0000000000003990         cmp        dword [rsp+arg_0], 0x2
0000000000003995         mov        ebx, 0x20
000000000000399a         sete       dl
000000000000399d         jmp        sub_3950+17
                        ; endp
000000000000399f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_39a0:
00000000000039a0         mov        edx, 0xd
00000000000039a5         mov        ebx, 0x72
00000000000039aa         jmp        loc_3812
00000000000039af         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39b0:
00000000000039b0         mov        edx, 0xc
00000000000039b5         mov        ebx, 0x66
00000000000039ba         jmp        sub_37e0+68
                        ; endp
00000000000039bf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39c0:
00000000000039c0         mov        edx, 0xb
00000000000039c5         mov        ebx, 0x76
00000000000039ca         jmp        sub_37e0+68
                        ; endp
00000000000039cf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39d0:
00000000000039d0         mov        edx, 0xa
00000000000039d5         mov        ebx, 0x6e
00000000000039da         jmp        sub_37e0+50
                        ; endp
00000000000039df         align      32

                     loc_39e0:
00000000000039e0         xor        r10d, r10d                                  ; CODE XREF=sub_39d0+135
00000000000039e3         nop        dword [rax+rax]

                     loc_39e8:
00000000000039e8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
00000000000039ee         jne        loc_3d98

00000000000039f4         mov        qword [rsp+0xe8+var_B0], r11
00000000000039f9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000039fe         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003a03         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003a08         mov        rcx, qword [rax]
0000000000003a0b         movzx      edx, bl
0000000000003a0e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003a14         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000003a1a         mov        r11, qword [rsp+0xe8+var_B0]
0000000000003a1f         mov        edi, 0x1
0000000000003a24         movzx      eax, word [rcx+rdx*2]
0000000000003a28         and        ax, 0x4000
0000000000003a2c         setne      r12b
0000000000003a30         sete       al
0000000000003a33         and        al, byte [rsp+0xe8+var_DB]

                     loc_3a37:
0000000000003a37         test       al, al                                      ; CODE XREF=sub_4100+989
0000000000003a39         jne        loc_43d1

0000000000003a3f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003a44         sete       dl
0000000000003a47         jmp        loc_3718
0000000000003a4c         align      16

                     loc_3a50:
0000000000003a50         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003a54         cmp        bl, 0x7e
0000000000003a57         ja         loc_39e0

0000000000003a59         lea        rcx, qword [switch_table_88e0+552]          ; 0x8b08
0000000000003a60         movzx      edx, bl
0000000000003a63         movsxd     rax, dword [rcx+rdx*4]
0000000000003a67         add        rax, rcx
0000000000003a6a         jmp        rax
                        ; endp
0000000000003a6c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3a70:
0000000000003a70         xor        r10d, r10d
0000000000003a73         cmp        byte [rsp+arg_5], 0x0
0000000000003a78         jne        loc_386e

0000000000003a7e         nop

                     loc_3a80:
0000000000003a80         mov        edx, 0x5c                                   ; CODE XREF=sub_37e0+136, sub_37e0+147
0000000000003a85         mov        ebx, 0x5c
0000000000003a8a         jmp        sub_37e0+68
                        ; endp
0000000000003a8f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a90:
0000000000003a90         mov        edx, 0xc
0000000000003a95         xor        r10d, r10d
0000000000003a98         mov        ebx, 0x66
0000000000003a9d         jmp        sub_37e0+68
                        ; endp
0000000000003aa2         nop        word [rax+rax]
0000000000003aa8         mov        edx, 0xa
0000000000003aad         xor        r10d, r10d
0000000000003ab0         mov        ebx, 0x6e
0000000000003ab5         jmp        sub_37e0+50
0000000000003aba         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3ac0:
0000000000003ac0         mov        ebx, 0x61
0000000000003ac5         jmp        sub_37e0+176
                        ; endp
0000000000003aca         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3ad0:
0000000000003ad0         xor        r10d, r10d
                        ; endp

                     loc_3ad3:
0000000000003ad3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3900+5
0000000000003ad8         sete       dl
0000000000003adb         cmp        byte [rsp+arg_7], 0x0
0000000000003ae0         jne        loc_467a

0000000000003ae6         mov        eax, r8d
0000000000003ae9         mov        rcx, r15
0000000000003aec         xor        eax, 0x1
0000000000003aef         and        al, dl
0000000000003af1         je         loc_3b20

0000000000003af3         cmp        r13, r15
0000000000003af6         jbe        loc_3afd

0000000000003af8         mov        byte [r14+r15], 0x27

                     loc_3afd:
0000000000003afd         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_3ad0+38
0000000000003b01         cmp        r13, rcx
0000000000003b04         jbe        loc_3b0c

0000000000003b06         mov        byte [r14+r15+1], 0x24

                     loc_3b0c:
0000000000003b0c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_3ad0+52
0000000000003b10         cmp        r13, rcx
0000000000003b13         ja         loc_4149

                     loc_3b19:
0000000000003b19         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_4100+79
0000000000003b1d         mov        r8d, eax

                     loc_3b20:
0000000000003b20         cmp        r13, rcx                                    ; CODE XREF=sub_3ad0+33
0000000000003b23         jbe        loc_3b2a

0000000000003b25         mov        byte [r14+rcx], 0x5c

                     loc_3b2a:
0000000000003b2a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3ad0+83
0000000000003b2f         lea        r15, qword [rcx+1]
0000000000003b33         je         loc_4139

0000000000003b39         lea        rax, qword [rbp+1]
0000000000003b3d         cmp        rax, r11
0000000000003b40         jae        loc_3b5b

0000000000003b42         mov        rax, qword [rsp+arg_8]
0000000000003b47         movzx      eax, byte [rax+rbp+1]
0000000000003b4c         mov        byte [rsp+arg_20], al
0000000000003b50         sub        eax, 0x30
0000000000003b53         cmp        al, 0x9
0000000000003b55         jbe        loc_4389

                     loc_3b5b:
0000000000003b5b         mov        eax, r12d                                   ; CODE XREF=sub_3ad0+112
0000000000003b5e         mov        ebx, 0x30
0000000000003b63         xor        r12d, r12d
0000000000003b66         jmp        sub_36e0+56
                        ; endp
0000000000003b6b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3b70:
0000000000003b70         cmp        dword [rsp+arg_0], 0x2
0000000000003b75         mov        r12d, r10d
0000000000003b78         sete       dl
0000000000003b7b         xor        r10d, r10d
0000000000003b7e         xor        eax, eax
0000000000003b80         jmp        sub_36e0+56
                        ; endp
0000000000003b85         nop        dword [rax]
0000000000003b88         cmp        dword [rsp+8], 0x2
0000000000003b8d         sete       dl
0000000000003b90         xor        r10d, r10d
0000000000003b93         jmp        sub_3950+8
0000000000003b98         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3ba0:
0000000000003ba0         cmp        dword [rsp+8], 0x2
0000000000003ba5         sete       dl
0000000000003ba8         xor        r10d, r10d
0000000000003bab         xor        r12d, r12d
0000000000003bae         jmp        sub_3950+17
                        ; endp
0000000000003bb3         nop        dword [rax+rax]
0000000000003bb8         cmp        dword [rsp+8], 0x2
0000000000003bbd         mov        r12d, r10d
0000000000003bc0         mov        ebx, 0x20
0000000000003bc5         sete       dl
0000000000003bc8         xor        r10d, r10d
0000000000003bcb         jmp        sub_3950+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3bd0:
0000000000003bd0         mov        edx, 0xd
0000000000003bd5         xor        r10d, r10d
0000000000003bd8         mov        ebx, 0x72
0000000000003bdd         jmp        sub_37e0+50
                        ; endp
0000000000003be2         nop        word [rax+rax]
0000000000003be8         mov        ebx, 0x76
0000000000003bed         jmp        sub_37e0+176
0000000000003bf2         nop        word [rax+rax]
0000000000003bf8         mov        edx, 0x9
0000000000003bfd         xor        r10d, r10d
0000000000003c00         mov        ebx, 0x74
0000000000003c05         jmp        sub_37e0+50
0000000000003c0a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3c10:
0000000000003c10         mov        ebx, 0x62
0000000000003c15         jmp        sub_37e0+176
                        ; endp
0000000000003c1a         nop        word [rax+rax]

                     loc_3c20:
0000000000003c20         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000003c23         jmp        loc_36c0
0000000000003c28         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3c30:
0000000000003c30         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_37e0+125
0000000000003c35         jne        sub_4100+1184
                        ; endp

                     loc_3c3b:
0000000000003c3b         add        rbp, 0x1                                    ; CODE XREF=sub_37e0+159
0000000000003c3f         mov        eax, r8d
0000000000003c42         xor        r12d, r12d
0000000000003c45         mov        ebx, 0x5c
0000000000003c4a         jmp        sub_36e0+124
                        ; endp
0000000000003c4f         align      16

                     loc_3c50:
0000000000003c50         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003c55         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000003c5a         mov        r12d, r8d
0000000000003c5d         mov        rbp, r11
0000000000003c60         sete       dl
0000000000003c63         mov        eax, ebx
0000000000003c65         test       r15, r15
0000000000003c68         sete       cl
0000000000003c6b         and        eax, edx
0000000000003c6d         and        al, cl
0000000000003c6f         jne        loc_46d6

0000000000003c75         mov        eax, ebx
0000000000003c77         xor        eax, 0x1
0000000000003c7a         and        dl, al
0000000000003c7c         je         loc_45ec

0000000000003c82         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003c87         je         loc_45ea

0000000000003c8d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003c92         jne        loc_468d

0000000000003c98         test       r13, r13
0000000000003c9b         sete       al
0000000000003c9e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003ca4         setne      dl
0000000000003ca7         and        al, dl
0000000000003ca9         je         loc_46cc

0000000000003caf         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3cb4:
0000000000003cb4         lea        rbx, qword [a0+5]                           ; 0x80e7, CODE XREF=sub_4100+1549
0000000000003cbb         mov        byte [r14], 0x27
0000000000003cbf         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003cc7         mov        r15d, 0x1
0000000000003ccd         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003cd6         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003cdb         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003ce0         mov        byte [rsp+0xe8+var_6C], al
0000000000003ce4         jmp        loc_35c3
0000000000003ce9         align      16

                     loc_3cf0:
0000000000003cf0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_37e0+8
0000000000003cf5         jne        sub_4100+1184

0000000000003cfb         test       r13, r13
0000000000003cfe         je         sub_4100                                    ; sub_4100

0000000000003d04         xor        edx, edx
0000000000003d06         cmp        qword [rsp+arg_48], 0x0
0000000000003d0c         jne        sub_4100                                    ; sub_4100
                        ; endp

                     loc_3d12:
0000000000003d12         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_4100+52, sub_4100+1562
0000000000003d17         add        r15, 0x3
0000000000003d1b         xor        eax, eax
0000000000003d1d         mov        byte [rsp+arg_74], r12b
0000000000003d22         xor        r8d, r8d
0000000000003d25         mov        r13, rdx
0000000000003d28         mov        ebx, 0x27
0000000000003d2d         jmp        sub_36e0+105
                        ; endp
0000000000003d32         align      8

                     loc_3d38:
0000000000003d38         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_37b0+19
0000000000003d3d         je         loc_3d60

0000000000003d3f         lea        rcx, qword [rbp+2]
0000000000003d43         cmp        rcx, r11
0000000000003d46         jae        loc_3d60

0000000000003d48         mov        rax, qword [rsp+arg_8]
0000000000003d4d         cmp        byte [rax+rbp+1], 0x3f
0000000000003d52         je         loc_44e2

0000000000003d58         nop        dword [rax+rax]

                     loc_3d60:
0000000000003d60         xor        edx, edx                                    ; CODE XREF=sub_3c30+269, sub_3c30+278, sub_4100+1001, sub_4100+1021
0000000000003d62         xor        r12d, r12d
0000000000003d65         xor        eax, eax
0000000000003d67         mov        ebx, 0x3f
0000000000003d6c         jmp        sub_36e0+56
                        ; endp
0000000000003d71         align      8

                     loc_3d78:
0000000000003d78         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_37b0+10
0000000000003d7d         jne        loc_45a0

0000000000003d83         xor        r12d, r12d
0000000000003d86         xor        eax, eax
0000000000003d88         mov        ebx, 0x3f
0000000000003d8d         jmp        sub_36e0+105
                        ; endp
0000000000003d92         align      8

                     loc_3d98:
0000000000003d98         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_39d0+30
0000000000003da0         cmp        r11, 0xffffffffffffffff
0000000000003da4         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003db0         mov        qword [rsp+0xe8+var_C0], rax
0000000000003db5         jne        loc_3de4

0000000000003db7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003dbc         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003dc1         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003dc6         mov        qword [rsp+0xe8+var_B8], r9
0000000000003dcb         call       j_strlen                                    ; strlen
0000000000003dd0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003dd6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003ddc         mov        r11, rax
0000000000003ddf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_3de4:
0000000000003de4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3c30+389
0000000000003dec         xor        ecx, ecx
0000000000003dee         mov        byte [rsp+0xe8+var_6A], bl
0000000000003df2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000003df7         mov        rbx, rcx
0000000000003dfa         mov        qword [rsp+0xe8+var_60], r9
0000000000003e02         mov        qword [rsp+0xe8+var_B0], rax
0000000000003e07         mov        byte [rsp+0xe8+var_69], r10b
0000000000003e0c         mov        qword [rsp+0xe8+var_68], r15
0000000000003e14         mov        qword [rsp+0xe8+var_A8], r14
0000000000003e19         mov        qword [rsp+0xe8+var_78], r13
0000000000003e1e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_3e23:
0000000000003e23         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3c30+623
0000000000003e28         lea        r14, qword [rbp+rbx]
0000000000003e2d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000003e32         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000003e37         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000003e3c         lea        r13, qword [rax+r14]
0000000000003e40         sub        rdx, r14
0000000000003e43         mov        rsi, r13
0000000000003e46         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003e4b         test       rax, rax
0000000000003e4e         mov        r15, rax
0000000000003e51         je         loc_3ea1

0000000000003e53         cmp        rax, 0xffffffffffffffff
0000000000003e57         je         loc_4475

0000000000003e5d         cmp        rax, 0xfffffffffffffffe
0000000000003e61         je         loc_4401

0000000000003e67         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003e6c         sete       al
0000000000003e6f         and        al, byte [rsp+0xe8+var_D9]
0000000000003e73         jne        loc_4010

                     loc_3e79:
0000000000003e79         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3c30+996, sub_3c30+1031
0000000000003e80         call       j_iswprint                                  ; iswprint
0000000000003e85         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000003e8a         test       eax, eax
0000000000003e8c         mov        eax, 0x0
0000000000003e91         cmove      r12d, eax
0000000000003e95         add        rbx, r15
0000000000003e98         call       j_mbsinit                                   ; mbsinit
0000000000003e9d         test       eax, eax
0000000000003e9f         je         loc_3e23

                     loc_3ea1:
0000000000003ea1         mov        edx, r12d                                   ; CODE XREF=sub_3c30+545
0000000000003ea4         mov        rdi, rbx
0000000000003ea7         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000003ead         xor        edx, 0x1
0000000000003eb0         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000003eb5         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000003ebb         and        dl, byte [rsp+0xe8+var_DB]
0000000000003ebf         mov        r15, qword [rsp+0xe8+var_68]
0000000000003ec7         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003ecc         mov        r13, qword [rsp+0xe8+var_78]
0000000000003ed1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_3ed6:
0000000000003ed6         cmp        rdi, 0x1                                    ; CODE XREF=sub_4100+880, sub_4100+936
0000000000003eda         jbe        loc_44db

                     loc_3ee0:
0000000000003ee0         mov        rcx, rdi                                    ; CODE XREF=sub_4100+729
0000000000003ee3         xor        esi, esi
0000000000003ee5         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000003eeb         add        rcx, rbp
0000000000003eee         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003ef3         jmp        loc_3fae
0000000000003ef8         align      256

                     loc_3f00:
0000000000003f00         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3c30+896
0000000000003f05         sete       al
0000000000003f08         test       r9b, r9b
0000000000003f0b         jne        loc_43c0

0000000000003f11         mov        esi, r8d
0000000000003f14         xor        esi, 0x1
0000000000003f17         and        al, sil
0000000000003f1a         je         loc_3f4b

0000000000003f1c         cmp        r13, r15
0000000000003f1f         jbe        loc_3f26

0000000000003f21         mov        byte [r14+r15], 0x27

                     loc_3f26:
0000000000003f26         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3c30+751
0000000000003f2a         cmp        r13, rsi
0000000000003f2d         jbe        loc_3f35

0000000000003f2f         mov        byte [r14+r15+1], 0x24

                     loc_3f35:
0000000000003f35         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3c30+765
0000000000003f39         cmp        r13, rsi
0000000000003f3c         jbe        loc_3f44

0000000000003f3e         mov        byte [r14+r15+2], 0x27

                     loc_3f44:
0000000000003f44         add        r15, 0x3                                    ; CODE XREF=sub_3c30+780
0000000000003f48         mov        r8d, eax

                     loc_3f4b:
0000000000003f4b         cmp        r13, r15                                    ; CODE XREF=sub_3c30+746
0000000000003f4e         jbe        loc_3f55

0000000000003f50         mov        byte [r14+r15], 0x5c

                     loc_3f55:
0000000000003f55         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3c30+798
0000000000003f59         cmp        r13, rax
0000000000003f5c         jbe        loc_3f6b

0000000000003f5e         mov        eax, ebx
0000000000003f60         shr        al, 0x6
0000000000003f63         add        eax, 0x30
0000000000003f66         mov        byte [r14+r15+1], al

                     loc_3f6b:
0000000000003f6b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3c30+812
0000000000003f6f         cmp        r13, rax
0000000000003f72         jbe        loc_3f84

0000000000003f74         mov        eax, ebx
0000000000003f76         shr        al, 0x3
0000000000003f79         and        eax, 0x7
0000000000003f7c         add        eax, 0x30
0000000000003f7f         mov        byte [r14+r15+2], al

                     loc_3f84:
0000000000003f84         and        ebx, 0x7                                    ; CODE XREF=sub_3c30+834
0000000000003f87         add        rbp, 0x1
0000000000003f8b         add        r15, 0x3
0000000000003f8f         add        ebx, 0x30
0000000000003f92         cmp        rbp, rcx
0000000000003f95         jae        loc_3780

0000000000003f9b         mov        esi, edx

                     loc_3f9d:
0000000000003f9d         cmp        r13, r15                                    ; CODE XREF=sub_3c30+985, sub_4100+737
0000000000003fa0         jbe        loc_3fa6

0000000000003fa2         mov        byte [r14+r15], bl

                     loc_3fa6:
0000000000003fa6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3c30+880
0000000000003faa         add        r15, 0x1

                     loc_3fae:
0000000000003fae         test       dl, dl                                      ; CODE XREF=sub_3c30+707
0000000000003fb0         jne        loc_3f00

0000000000003fb6         mov        eax, esi
0000000000003fb8         xor        eax, 0x1
0000000000003fbb         and        eax, r8d
0000000000003fbe         test       r10b, r10b
0000000000003fc1         je         loc_3fd1

0000000000003fc3         cmp        r13, r15
0000000000003fc6         jbe        loc_3fcd

0000000000003fc8         mov        byte [r14+r15], 0x5c

                     loc_3fcd:
0000000000003fcd         add        r15, 0x1                                    ; CODE XREF=sub_3c30+918

                     loc_3fd1:
0000000000003fd1         add        rbp, 0x1                                    ; CODE XREF=sub_3c30+913
0000000000003fd5         cmp        rbp, rcx
0000000000003fd8         jae        loc_375c

0000000000003fde         test       al, al
0000000000003fe0         je         loc_43de

0000000000003fe6         cmp        r13, r15
0000000000003fe9         jbe        loc_3ff0

0000000000003feb         mov        byte [r14+r15], 0x27

                     loc_3ff0:
0000000000003ff0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3c30+953
0000000000003ff4         cmp        r13, rax
0000000000003ff7         jbe        loc_3fff

0000000000003ff9         mov        byte [r14+r15+1], 0x27

                     loc_3fff:
0000000000003fff         add        r15, 0x2                                    ; CODE XREF=sub_3c30+967
0000000000004003         xor        r10d, r10d
0000000000004006         xor        r8d, r8d
0000000000004009         jmp        loc_3f9d
000000000000400b         align      16

                     loc_4010:
0000000000004010         cmp        r15, 0x1                                    ; CODE XREF=sub_3c30+579
0000000000004014         je         loc_3e79

000000000000401a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000401f         lea        rcx, qword [rdi+r15]
0000000000004023         lea        rdx, qword [rdi+r14+1]
0000000000004028         lea        r8, qword [rcx+r14]
000000000000402c         jmp        loc_403d
000000000000402e         align      16

                     loc_4030:
0000000000004030         add        rdx, 0x1                                    ; CODE XREF=sub_3c30+1046, sub_3c30+1072
0000000000004034         cmp        r8, rdx
0000000000004037         je         loc_3e79

                     loc_403d:
000000000000403d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3c30+1020
0000000000004040         sub        ecx, 0x5b
0000000000004043         cmp        cl, 0x21
0000000000004046         ja         loc_4030

0000000000004048         mov        esi, 0x1
000000000000404d         shl        rsi, cl
0000000000004050         mov        rcx, rsi
0000000000004053         movabs     rsi, 0x20000002b
000000000000405d         test       rcx, rsi
0000000000004060         je         loc_4030

0000000000004062         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004067         mov        r13, qword [rsp+0xe8+var_78]
000000000000406c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000004071         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_4079:
0000000000004079         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3c30+1227, sub_4100+716, sub_4100+1353, sub_4100+1502
000000000000407e         je         loc_4090

0000000000004080         test       al, al
0000000000004082         mov        eax, 0x4
0000000000004087         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000408c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_4090:
0000000000004090         sub        rsp, 0x8                                    ; CODE XREF=sub_3c30+1102
0000000000004094         mov        rcx, rbp
0000000000004097         mov        rsi, r13
000000000000409a         push       qword [rsp+0xf0+var_88]
000000000000409e         push       qword [rsp+0xf8+var_80]
00000000000040a2         mov        rdi, r14
00000000000040a5         push       0x0
00000000000040a7         mov        r9d, dword [rsp+0x108+var_70]
00000000000040af         mov        r8d, dword [rsp+0x108+var_E0]
00000000000040b4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000040b9         and        r9d, 0xfffffffd
00000000000040bd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000040c2         add        rsp, 0x20
00000000000040c6         mov        r15, rax

                     loc_40c9:
00000000000040c9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_4100+1317, sub_4100+1328, sub_4100+1479
00000000000040d1         xor        rbx, qword [fs:0x28]
00000000000040da         mov        rax, r15
00000000000040dd         jne        loc_46e3

00000000000040e3         add        rsp, 0xb8
00000000000040ea         pop        rbx
00000000000040eb         pop        rbp
00000000000040ec         pop        r12
00000000000040ee         pop        r13
00000000000040f0         pop        r14
00000000000040f2         pop        r15
00000000000040f4         ret
                        ; endp
00000000000040f5         align      8

                     loc_40f8:
00000000000040f8         mov        rbp, r11                                    ; CODE XREF=sub_37e0+194
00000000000040fb         jmp        loc_4079


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_4100:
0000000000004100         cmp        r13, r15
0000000000004103         jbe        loc_410a

0000000000004105         mov        byte [r14+r15], 0x27

                     loc_410a:
000000000000410a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4100+3
000000000000410e         cmp        r13, rax
0000000000004111         jbe        loc_4119

0000000000004113         mov        byte [r14+r15+1], 0x5c

                     loc_4119:
0000000000004119         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4100+17
000000000000411d         cmp        r13, rax
0000000000004120         jbe        loc_4712

0000000000004126         mov        rdx, r13
0000000000004129         mov        byte [r14+r15+2], 0x27
000000000000412f         mov        r13, qword [rsp+arg_48]
0000000000004134         jmp        loc_3d12

                     loc_4139:
0000000000004139         mov        eax, r12d                                   ; CODE XREF=sub_3ad0+99
000000000000413c         mov        ebx, 0x30
0000000000004141         xor        r12d, r12d
0000000000004144         jmp        sub_36e0+105
                        ; endp

                     loc_4149:
0000000000004149         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_3ad0+67
000000000000414f         jmp        loc_3b19

                     loc_4154:
0000000000004154         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000004156         jne        loc_3583

000000000000415c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_4161:
0000000000004161         test       r13, r13                                    ; CODE XREF=sub_4100+1517
0000000000004164         jne        loc_46fa

000000000000416a         lea        rax, qword [a0+5]                           ; 0x80e7
0000000000004171         mov        qword [rsp+0xe8+var_98], 0x0
000000000000417a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000417f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004184         xor        r12d, r12d
0000000000004187         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000418c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004195         mov        qword [rsp+0xe8+var_A0], rax
000000000000419a         mov        r15d, 0x1
00000000000041a0         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000041a8         jmp        loc_35c3
00000000000041ad         align      16

                     loc_41b0:
00000000000041b0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
00000000000041b2         jne        loc_45ad

00000000000041b8         test       r13, r13
00000000000041bb         je         loc_43e6

00000000000041c1         mov        byte [r14], 0x22
00000000000041c5         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000041ca         xor        r12d, r12d
00000000000041cd         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000041d2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_41db:
00000000000041db         lea        rax, qword [aLibs+27]                       ; 0x8873, CODE XREF=sub_4100+764
00000000000041e2         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000041e7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000041ec         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000041f5         mov        r15d, 0x1
00000000000041fb         mov        qword [rsp+0xe8+var_A0], rax
0000000000004200         jmp        loc_35c3

                     loc_4205:
0000000000004205         lea        rax, qword [aLibs+27]                       ; case 6, 0x8873, CODE XREF=quotearg_buffer_restyled+145
000000000000420c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004211         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004216         xor        r12d, r12d
0000000000004219         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004222         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004227         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000422c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004235         xor        r15d, r15d
0000000000004238         mov        qword [rsp+0xe8+var_A0], rax
000000000000423d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000004245         jmp        loc_35c3

                     loc_424a:
000000000000424a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000424f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004254         xor        r12d, r12d
0000000000004257         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004260         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004265         xor        r15d, r15d
0000000000004268         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000426d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004276         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000427f         jmp        loc_35c3

                     loc_4284:
0000000000004284         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000004289         je         loc_42e1

000000000000428b         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x8875
0000000000004292         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004294         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004299         call       j_dcgettext                                 ; dcgettext
000000000000429e         mov        rcx, rax
00000000000042a1         mov        qword [rsp+0xe8+var_80], rax
00000000000042a6         lea        rax, qword [aLibs+29]                       ; 0x8875
00000000000042ad         cmp        rcx, rax
00000000000042b0         je         loc_464e

                     loc_42b6:
00000000000042b6         lea        rsi, qword [a0+5]                           ; argument "msgid" for method j_dcgettext, 0x80e7, CODE XREF=sub_4100+1375
00000000000042bd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042c4         call       j_dcgettext                                 ; dcgettext
00000000000042c9         mov        rcx, rax
00000000000042cc         mov        qword [rsp+0xe8+var_88], rax
00000000000042d1         lea        rax, qword [a0+5]                           ; 0x80e7
00000000000042d8         cmp        rcx, rax
00000000000042db         je         loc_4664

                     loc_42e1:
00000000000042e1         xor        r15d, r15d                                  ; CODE XREF=sub_4100+393, sub_4100+1397
00000000000042e4         test       ebx, ebx
00000000000042e6         je         loc_44ad

                     loc_42ec:
00000000000042ec         test       ebx, ebx                                    ; CODE XREF=sub_4100+951, sub_4100+982
00000000000042ee         mov        rbx, qword [rsp+0xe8+var_88]
00000000000042f3         setne      byte [rsp+0xe8+var_D9]
00000000000042f8         xor        r12d, r12d
00000000000042fb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
00000000000042fe         call       j_strlen                                    ; strlen
0000000000004303         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004308         mov        qword [rsp+0xe8+var_D0], rax
000000000000430d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004312         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004317         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004320         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004325         jmp        loc_35c3

                     loc_432a:
000000000000432a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000432f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004334         xor        r12d, r12d
0000000000004337         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004340         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004345         xor        r15d, r15d
0000000000004348         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000434d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004356         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000435f         jmp        loc_35c3

                     loc_4364:
0000000000004364         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004369         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000436e         xor        r12d, r12d
0000000000004371         mov        qword [rsp+0xe8+var_98], 0x0
000000000000437a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000437f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004384         jmp        loc_35a3

                     loc_4389:
0000000000004389         cmp        r13, r15                                    ; CODE XREF=sub_3ad0+133
000000000000438c         jbe        loc_4393

000000000000438e         mov        byte [r14+r15], 0x30

                     loc_4393:
0000000000004393         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_4100+652
0000000000004397         cmp        r13, rax
000000000000439a         jbe        loc_43a2

000000000000439c         mov        byte [r14+rcx+2], 0x30

                     loc_43a2:
00000000000043a2         mov        eax, r12d                                   ; CODE XREF=sub_4100+666
00000000000043a5         lea        r15, qword [rcx+3]
00000000000043a9         xor        r12d, r12d
00000000000043ac         mov        ebx, 0x30
00000000000043b1         jmp        sub_36e0+56
                        ; endp
00000000000043b6         align      64

                     loc_43c0:
00000000000043c0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3c30+731
00000000000043c5         mov        rbp, r11
00000000000043c8         mov        byte [rsp+0xe8+var_DB], bl
00000000000043cc         jmp        loc_4079

                     loc_43d1:
00000000000043d1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_39d0+105
00000000000043d6         xor        r12d, r12d
00000000000043d9         jmp        loc_3ee0

                     loc_43de:
00000000000043de         xor        r10d, r10d                                  ; CODE XREF=sub_3c30+944
00000000000043e1         jmp        loc_3f9d

                     loc_43e6:
00000000000043e6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_4100+187
00000000000043ef         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000043f4         xor        r12d, r12d
00000000000043f7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043fc         jmp        loc_41db

                     loc_4401:
0000000000004401         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3c30+561
0000000000004406         mov        rsi, r14
0000000000004409         mov        rcx, r13
000000000000440c         mov        rax, rbx
000000000000440f         mov        rdi, rbx
0000000000004412         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004418         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000441d         mov        r9, qword [rsp+0xe8+var_60]
0000000000004425         cmp        rsi, r11
0000000000004428         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000442e         mov        r15, qword [rsp+0xe8+var_68]
0000000000004436         mov        r14, qword [rsp+0xe8+var_A8]
000000000000443b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004440         jae        loc_4468

0000000000004442         cmp        byte [rcx], 0x0
0000000000004445         jne        loc_4457

0000000000004447         jmp        loc_4468
0000000000004449         align      16

                     loc_4450:
0000000000004450         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_4100+867
0000000000004455         je         loc_4465

                     loc_4457:
0000000000004457         add        rax, 0x1                                    ; CODE XREF=sub_4100+837
000000000000445b         lea        rdx, qword [rbp+rax]
0000000000004460         cmp        r11, rdx
0000000000004463         ja         loc_4450

                     loc_4465:
0000000000004465         mov        rdi, rax                                    ; CODE XREF=sub_4100+853

                     loc_4468:
0000000000004468         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4100+832, sub_4100+839
000000000000446d         xor        r12d, r12d
0000000000004470         jmp        loc_3ed6

                     loc_4475:
0000000000004475         mov        rdi, rbx                                    ; CODE XREF=sub_3c30+551
0000000000004478         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000447e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004483         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004489         mov        r15, qword [rsp+0xe8+var_68]
0000000000004491         xor        r12d, r12d
0000000000004494         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004499         mov        r13, qword [rsp+0xe8+var_78]
000000000000449e         mov        r11, qword [rsp+0xe8+var_B8]
00000000000044a3         movzx      edx, byte [rsp+0xe8+var_DB]
00000000000044a8         jmp        loc_3ed6

                     loc_44ad:
00000000000044ad         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_4100+486
00000000000044b2         movzx      eax, byte [rdx]
00000000000044b5         test       al, al
00000000000044b7         je         loc_42ec

00000000000044bd         nop        dword [rax]

                     loc_44c0:
00000000000044c0         cmp        r13, r15                                    ; CODE XREF=sub_4100+980
00000000000044c3         jbe        loc_44c9

00000000000044c5         mov        byte [r14+r15], al

                     loc_44c9:
00000000000044c9         add        r15, 0x1                                    ; CODE XREF=sub_4100+963
00000000000044cd         movzx      eax, byte [rdx+r15]
00000000000044d2         test       al, al
00000000000044d4         jne        loc_44c0

00000000000044d6         jmp        loc_42ec

                     loc_44db:
00000000000044db         mov        eax, edx                                    ; CODE XREF=sub_3c30+682
00000000000044dd         jmp        loc_3a37

                     loc_44e2:
00000000000044e2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3c30+290
00000000000044e6         cmp        bl, 0x3e
00000000000044e9         ja         loc_3d60

00000000000044ef         movabs     rax, 0x7000a38200000000
00000000000044f9         bt         rax, rbx
00000000000044fd         jae        loc_3d60

0000000000004503         cmp        byte [rsp+arg_7], 0x0
0000000000004508         jne        loc_46f2

000000000000450e         cmp        r13, r15
0000000000004511         jbe        loc_4518

0000000000004513         mov        byte [r14+r15], 0x3f

                     loc_4518:
0000000000004518         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4100+1041
000000000000451c         cmp        r13, rax
000000000000451f         jbe        loc_4527

0000000000004521         mov        byte [r14+r15+1], 0x22

                     loc_4527:
0000000000004527         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4100+1055
000000000000452b         cmp        r13, rax
000000000000452e         jbe        loc_4536

0000000000004530         mov        byte [r14+r15+2], 0x22

                     loc_4536:
0000000000004536         lea        rax, qword [r15+3]                          ; CODE XREF=sub_4100+1070
000000000000453a         cmp        r13, rax
000000000000453d         jbe        loc_4545

000000000000453f         mov        byte [r14+r15+3], 0x3f

                     loc_4545:
0000000000004545         add        r15, 0x4                                    ; CODE XREF=sub_4100+1085
0000000000004549         xor        edx, edx
000000000000454b         xor        r12d, r12d
000000000000454e         xor        eax, eax
0000000000004550         mov        rbp, rcx
0000000000004553         jmp        sub_36e0+56
                        ; endp

                     loc_4558:
0000000000004558         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000455a         je         loc_46e8

0000000000004560         lea        rax, qword [a0+5]                           ; 0x80e7
0000000000004567         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000456c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004571         xor        r12d, r12d
0000000000004574         mov        qword [rsp+0xe8+var_98], 0x0
000000000000457d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004582         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004587         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004590         xor        r15d, r15d
0000000000004593         mov        qword [rsp+0xe8+var_A0], rax
0000000000004598         jmp        loc_35c3
000000000000459d         align      32

                     loc_45a0:
00000000000045a0         mov        rbp, r11                                    ; CODE XREF=sub_3c30+333
00000000000045a3         movzx      eax, byte [rsp+arg_7]
00000000000045a8         jmp        sub_3c30+1097
                        ; endp

                     loc_45ad:
00000000000045ad         lea        rax, qword [aLibs+27]                       ; 0x8873, CODE XREF=sub_4100+178
00000000000045b4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000045b9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000045be         xor        r12d, r12d
00000000000045c1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000045ca         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000045cf         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000045d4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000045dd         xor        r15d, r15d
00000000000045e0         mov        qword [rsp+0xe8+var_A0], rax
00000000000045e5         jmp        loc_35c3

                     loc_45ea:
00000000000045ea         mov        eax, edx                                    ; CODE XREF=sub_3c30+87

                     loc_45ec:
00000000000045ec         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3c30+76, sub_4100+1489
00000000000045f1         test       rbx, rbx
00000000000045f4         je         loc_4622

00000000000045f6         test       al, al
00000000000045f8         je         loc_4622

00000000000045fa         movzx      ecx, byte [rbx]
00000000000045fd         mov        rax, rbx
0000000000004600         test       cl, cl
0000000000004602         je         loc_4622

0000000000004604         mov        rdx, r15
0000000000004607         sub        rax, r15

                     loc_460a:
000000000000460a         cmp        r13, rdx                                    ; CODE XREF=sub_4100+1309
000000000000460d         jbe        loc_4613

000000000000460f         mov        byte [r14+rdx], cl

                     loc_4613:
0000000000004613         add        rdx, 0x1                                    ; CODE XREF=sub_4100+1293
0000000000004617         movzx      ecx, byte [rax+rdx]
000000000000461b         test       cl, cl
000000000000461d         jne        loc_460a

000000000000461f         mov        r15, rdx

                     loc_4622:
0000000000004622         cmp        r13, r15                                    ; CODE XREF=sub_4100+1268, sub_4100+1272, sub_4100+1282
0000000000004625         jbe        loc_40c9

000000000000462b         mov        byte [r14+r15], 0x0
0000000000004630         jmp        loc_40c9

                     loc_4635:
0000000000004635         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000463a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000463f         mov        rbp, r11
0000000000004642         sete       al
0000000000004645         mov        byte [rsp+0xe8+var_DB], bl
0000000000004649         jmp        loc_4079

                     loc_464e:
000000000000464e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4100+432
0000000000004652         mov        rdi, rcx
0000000000004655         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000465a         mov        qword [rsp+0xe8+var_80], rax
000000000000465f         jmp        loc_42b6

                     loc_4664:
0000000000004664         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4100+475
0000000000004668         mov        rdi, rcx
000000000000466b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004670         mov        qword [rsp+0xe8+var_88], rax
0000000000004675         jmp        loc_42e1

                     loc_467a:
000000000000467a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_3ad0+16
000000000000467f         mov        rbp, r11
0000000000004682         mov        eax, edx
0000000000004684         mov        byte [rsp+arg_5], bl
0000000000004688         jmp        sub_3c30+1097
                        ; endp

                     loc_468d:
000000000000468d         sub        rsp, 0x8                                    ; CODE XREF=sub_3c30+98
0000000000004691         mov        r8d, 0x5
0000000000004697         mov        rcx, r11
000000000000469a         push       qword [rsp+0xf0+var_88]
000000000000469e         push       qword [rsp+0xf8+var_80]
00000000000046a2         mov        rdi, r14
00000000000046a5         push       qword [rsp+0x100+var_C8]
00000000000046a9         mov        r9d, dword [rsp+0x108+var_70]
00000000000046b1         mov        rdx, qword [rsp+0x108+var_D8]
00000000000046b6         mov        rsi, qword [rsp+0x108+var_98]
00000000000046bb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000046c0         add        rsp, 0x20
00000000000046c4         mov        r15, rax
00000000000046c7         jmp        loc_40c9

                     loc_46cc:
00000000000046cc         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3c30+121
00000000000046d1         jmp        loc_45ec

                     loc_46d6:
00000000000046d6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3c30+63
00000000000046de         jmp        loc_4079

                     loc_46e3:
00000000000046e3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3c30+1197
                        ; endp

                     loc_46e8:
00000000000046e8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4100+1114
00000000000046ed         jmp        loc_4161

                     loc_46f2:
00000000000046f2         mov        rbp, r11                                    ; CODE XREF=sub_4100+1032
00000000000046f5         jmp        sub_3c30+1120
                        ; endp

                     loc_46fa:
00000000000046fa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_4100+100
00000000000046ff         xor        eax, eax
0000000000004701         xor        r12d, r12d
0000000000004704         mov        qword [rsp+0xe8+var_98], 0x0
000000000000470d         jmp        loc_3cb4

                     loc_4712:
0000000000004712         mov        rdx, r13                                    ; CODE XREF=sub_4100+32
0000000000004715         mov        r13, qword [rsp+arg_48]
000000000000471a         jmp        loc_3d12

                     loc_471f:
000000000000471f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000004724         align      16                                          ; End of unwind block (FDE at 0x98d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004730         push       r15                                         ; Begin of unwind block (FDE at 0x9950), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004732         push       r14
0000000000004734         movsxd     r15, edi
0000000000004737         push       r13
0000000000004739         push       r12
000000000000473b         mov        r14, rdx
000000000000473e         push       rbp
000000000000473f         push       rbx
0000000000004740         mov        rbp, rcx
0000000000004743         sub        rsp, 0x28
0000000000004747         mov        qword [rsp+0x58+var_50], rsi
000000000000474c         call       j___errno_location                          ; __errno_location
0000000000004751         mov        r13, rax
0000000000004754         mov        eax, dword [rax]
0000000000004756         test       r15d, r15d
0000000000004759         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004760         mov        dword [rsp+0x58+var_40], eax
0000000000004764         js         loc_48d1

000000000000476a         cmp        dword [nslots], r15d                        ; nslots
0000000000004771         jg         loc_47d5

0000000000004773         cmp        r15d, 0x7fffffff
000000000000477a         je         loc_48d6

0000000000004780         lea        r12d, dword [r15+1]
0000000000004784         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000478b         movsxd     rsi, r12d
000000000000478e         shl        rsi, 0x4
0000000000004792         cmp        rbx, rax
0000000000004795         je         loc_48b0

000000000000479b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000479e         call       xrealloc                                    ; xrealloc
00000000000047a3         mov        rbx, rax
00000000000047a6         mov        qword [slotvec], rax                        ; slotvec

                     loc_47ad:
00000000000047ad         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000047b4         mov        edx, r12d
00000000000047b7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000047b9         sub        edx, edi
00000000000047bb         shl        rdi, 0x4
00000000000047bf         movsxd     rdx, edx
00000000000047c2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000047c5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000047c9         call       j_memset                                    ; memset
00000000000047ce         mov        dword [nslots], r12d                        ; nslots

                     loc_47d5:
00000000000047d5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000047d8         shl        r15, 0x4
00000000000047dc         sub        rsp, 0x8
00000000000047e0         add        rbx, r15
00000000000047e3         lea        r15, qword [rbp+8]
00000000000047e7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000047eb         mov        r11, qword [rbx]
00000000000047ee         mov        r12, qword [rbx+8]
00000000000047f2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000047f5         or         eax, 0x1
00000000000047f8         mov        dword [rsp+0x60+var_3C], eax
00000000000047fc         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000047ff         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000004802         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004805         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004807         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000480a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000480f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004812         mov        qword [rsp+0x78+var_48], r11
0000000000004817         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000481c         add        rsp, 0x20
0000000000004820         mov        r11, qword [rsp+0x58+var_48]
0000000000004825         cmp        r11, rax
0000000000004828         ja         loc_4891

000000000000482a         lea        rsi, qword [rax+1]
000000000000482e         lea        rax, qword [slot0]                          ; slot0
0000000000004835         cmp        r12, rax
0000000000004838         mov        qword [rbx], rsi
000000000000483b         je         loc_484f

000000000000483d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004840         mov        qword [rsp+0x58+var_48], rsi
0000000000004845         call       j_free                                      ; free
000000000000484a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_484f:
000000000000484f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004852         mov        qword [rsp+0x58+var_48], rsi
0000000000004857         call       xmalloc                                     ; xmalloc
000000000000485c         sub        rsp, 0x8
0000000000004860         mov        qword [rbx+8], rax
0000000000004864         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004868         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000486b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000486e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004871         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004873         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004878         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000487b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004880         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004885         mov        r12, rax
0000000000004888         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000488d         add        rsp, 0x20

                     loc_4891:
0000000000004891         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004895         mov        dword [r13], eax
0000000000004899         add        rsp, 0x28
000000000000489d         mov        rax, r12
00000000000048a0         pop        rbx
00000000000048a1         pop        rbp
00000000000048a2         pop        r12
00000000000048a4         pop        r13
00000000000048a6         pop        r14
00000000000048a8         pop        r15
00000000000048aa         ret
                        ; endp
00000000000048ab         align      16

                     loc_48b0:
00000000000048b0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
00000000000048b2         call       xrealloc                                    ; xrealloc
00000000000048b7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
00000000000048bf         mov        rbx, rax
00000000000048c2         mov        qword [slotvec], rax                        ; slotvec
00000000000048c9         movups     xmmword [rax], xmm0
00000000000048cc         jmp        loc_47ad

                     loc_48d1:
00000000000048d1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_48d6:
00000000000048d6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_48db:
00000000000048db         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x9950)
                     clone_quoting_options:
00000000000048e0         push       r12                                         ; Begin of unwind block (FDE at 0x99bc)
00000000000048e2         push       rbp
00000000000048e3         push       rbx
00000000000048e4         mov        rbx, rdi
00000000000048e7         call       j___errno_location                          ; __errno_location
00000000000048ec         mov        r12d, dword [rax]
00000000000048ef         mov        rbp, rax
00000000000048f2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000048f9         test       rbx, rbx
00000000000048fc         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000004901         cmove      rbx, rax
0000000000004905         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000004908         call       xmemdup                                     ; xmemdup
000000000000490d         mov        dword [rbp], r12d
0000000000004911         pop        rbx
0000000000004912         pop        rbp
0000000000004913         pop        r12
0000000000004915         ret
                        ; endp
0000000000004916         align      32                                          ; End of unwind block (FDE at 0x99bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000004920         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x99e8), default_quoting_options
0000000000004927         test       rdi, rdi
000000000000492a         cmove      rdi, rax
000000000000492e         mov        eax, dword [rdi]
0000000000004930         ret
                        ; endp
0000000000004931         align      64                                          ; End of unwind block (FDE at 0x99e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000004940         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x99fc), default_quoting_options
0000000000004947         test       rdi, rdi
000000000000494a         cmove      rdi, rax
000000000000494e         mov        dword [rdi], esi
0000000000004950         ret
                        ; endp
0000000000004951         align      32                                          ; End of unwind block (FDE at 0x99fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000004960         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9a10), default_quoting_options
0000000000004967         test       rdi, rdi
000000000000496a         mov        ecx, esi
000000000000496c         cmove      rdi, rax
0000000000004970         mov        eax, esi
0000000000004972         and        ecx, 0x1f
0000000000004975         shr        al, 0x5
0000000000004978         movzx      eax, al
000000000000497b         lea        rdi, qword [rdi+rax*4+8]
0000000000004980         mov        esi, dword [rdi]
0000000000004982         mov        eax, esi
0000000000004984         shr        eax, cl
0000000000004986         xor        edx, eax
0000000000004988         and        eax, 0x1
000000000000498b         and        edx, 0x1
000000000000498e         shl        edx, cl
0000000000004990         xor        edx, esi
0000000000004992         mov        dword [rdi], edx
0000000000004994         ret
                        ; endp
0000000000004995         align      32                                          ; End of unwind block (FDE at 0x9a10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
00000000000049a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9a24), default_quoting_options
00000000000049a7         test       rdi, rdi
00000000000049aa         cmove      rdi, rax
00000000000049ae         mov        eax, dword [rdi+4]
00000000000049b1         mov        dword [rdi+4], esi
00000000000049b4         ret
                        ; endp
00000000000049b5         align      64                                          ; End of unwind block (FDE at 0x9a24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
00000000000049c0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9a38), default_quoting_options
00000000000049c7         test       rdi, rdi
00000000000049ca         cmove      rdi, rax
00000000000049ce         test       rsi, rsi
00000000000049d1         mov        dword [rdi], 0xa
00000000000049d7         je         loc_49e7

00000000000049d9         test       rdx, rdx
00000000000049dc         je         loc_49e7

00000000000049de         mov        qword [rdi+0x28], rsi
00000000000049e2         mov        qword [rdi+0x30], rdx
00000000000049e6         ret
                        ; endp

                     loc_49e7:
00000000000049e7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
00000000000049eb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000049f0         push       r15                                         ; End of unwind block (FDE at 0x9a38), Begin of unwind block (FDE at 0x9a4c)
00000000000049f2         push       r14
00000000000049f4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000049fb         push       r13
00000000000049fd         push       r12
00000000000049ff         mov        r13, rdi
0000000000004a02         push       rbp
0000000000004a03         push       rbx
0000000000004a04         mov        rbx, r8
0000000000004a07         mov        r14, rsi
0000000000004a0a         mov        r15, rdx
0000000000004a0d         sub        rsp, 0x18
0000000000004a11         test       r8, r8
0000000000004a14         cmove      rbx, rax
0000000000004a18         mov        qword [rsp+0x48+var_40], rcx
0000000000004a1d         call       j___errno_location                          ; __errno_location
0000000000004a22         mov        r12d, dword [rax]
0000000000004a25         mov        rbp, rax
0000000000004a28         lea        rax, qword [rbx+8]
0000000000004a2c         sub        rsp, 0x8
0000000000004a30         mov        r9d, dword [rbx+4]
0000000000004a34         push       qword [rbx+0x30]
0000000000004a37         mov        r8d, dword [rbx]
0000000000004a3a         push       qword [rbx+0x28]
0000000000004a3d         mov        rdx, r15
0000000000004a40         push       rax
0000000000004a41         mov        rcx, qword [rsp+0x68+var_40]
0000000000004a46         mov        rsi, r14
0000000000004a49         mov        rdi, r13
0000000000004a4c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004a51         mov        dword [rbp], r12d
0000000000004a55         add        rsp, 0x38
0000000000004a59         pop        rbx
0000000000004a5a         pop        rbp
0000000000004a5b         pop        r12
0000000000004a5d         pop        r13
0000000000004a5f         pop        r14
0000000000004a61         pop        r15
0000000000004a63         ret
                        ; endp
0000000000004a64         align      16                                          ; End of unwind block (FDE at 0x9a4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004a70         push       r15                                         ; Begin of unwind block (FDE at 0x9aa0), CODE XREF=quotearg_alloc+5
0000000000004a72         push       r14
0000000000004a74         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004a7b         push       r13
0000000000004a7d         push       r12
0000000000004a7f         mov        r12, rdx
0000000000004a82         push       rbp
0000000000004a83         push       rbx
0000000000004a84         mov        rbx, rcx
0000000000004a87         mov        r14, rdi
0000000000004a8a         mov        r15, rsi
0000000000004a8d         sub        rsp, 0x38
0000000000004a91         test       rcx, rcx
0000000000004a94         cmove      rbx, rax
0000000000004a98         xor        ebp, ebp
0000000000004a9a         call       j___errno_location                          ; __errno_location
0000000000004a9f         test       r12, r12
0000000000004aa2         mov        r13, rax
0000000000004aa5         mov        eax, dword [rax]
0000000000004aa7         sete       bpl
0000000000004aab         or         ebp, dword [rbx+4]
0000000000004aae         lea        r10, qword [rbx+8]
0000000000004ab2         sub        rsp, 0x8
0000000000004ab6         mov        r8d, dword [rbx]
0000000000004ab9         mov        rcx, r15
0000000000004abc         mov        dword [rsp+0x70+var_5C], eax
0000000000004ac0         push       qword [rbx+0x30]
0000000000004ac3         mov        rdx, r14
0000000000004ac6         push       qword [rbx+0x28]
0000000000004ac9         push       r10
0000000000004acb         xor        esi, esi
0000000000004acd         mov        r9d, ebp
0000000000004ad0         xor        edi, edi
0000000000004ad2         mov        qword [rsp+0x88+var_48], r10
0000000000004ad7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004adc         lea        rsi, qword [rax+1]
0000000000004ae0         mov        qword [rsp+0x88+var_40], rax
0000000000004ae5         add        rsp, 0x20
0000000000004ae9         mov        rdi, rsi
0000000000004aec         mov        qword [rsp+0x68+var_50], rsi
0000000000004af1         call       xmalloc                                     ; xmalloc
0000000000004af6         mov        qword [rsp+0x68+var_58], rax
0000000000004afb         sub        rsp, 0x8
0000000000004aff         push       qword [rbx+0x30]
0000000000004b02         push       qword [rbx+0x28]
0000000000004b05         mov        r10, qword [rsp+0x80+var_48]
0000000000004b0a         mov        r9d, ebp
0000000000004b0d         mov        r8d, dword [rbx]
0000000000004b10         mov        rcx, r15
0000000000004b13         mov        rdx, r14
0000000000004b16         mov        rdi, rax
0000000000004b19         push       r10
0000000000004b1b         mov        rsi, qword [rsp+0x88+var_50]
0000000000004b20         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004b25         mov        eax, dword [rsp+0x88+var_5C]
0000000000004b29         add        rsp, 0x20
0000000000004b2d         test       r12, r12
0000000000004b30         mov        dword [r13], eax
0000000000004b34         je         loc_4b3f

0000000000004b36         mov        r11, qword [rsp+0x68+var_40]
0000000000004b3b         mov        qword [r12], r11

                     loc_4b3f:
0000000000004b3f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004b44         add        rsp, 0x38
0000000000004b48         pop        rbx
0000000000004b49         pop        rbp
0000000000004b4a         pop        r12
0000000000004b4c         pop        r13
0000000000004b4e         pop        r14
0000000000004b50         pop        r15
0000000000004b52         ret
                        ; endp
0000000000004b53         align      32                                          ; End of unwind block (FDE at 0x9aa0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004b60         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x9b0c)
0000000000004b63         xor        edx, edx
0000000000004b65         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000004b6a         align      16                                          ; End of unwind block (FDE at 0x9b0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004b70         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x9b20), nslots
0000000000004b76         push       r12
0000000000004b78         mov        r12, qword [slotvec]                        ; slotvec
0000000000004b7f         push       rbp
0000000000004b80         push       rbx
0000000000004b81         cmp        eax, 0x1
0000000000004b84         jle        loc_4bb1

0000000000004b86         sub        eax, 0x2
0000000000004b89         lea        rbx, qword [r12+0x18]
0000000000004b8e         shl        rax, 0x4
0000000000004b92         lea        rbp, qword [r12+rax+0x28]
0000000000004b97         nop        word [rax+rax]

                     loc_4ba0:
0000000000004ba0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000004ba3         add        rbx, 0x10
0000000000004ba7         call       j_free                                      ; free
0000000000004bac         cmp        rbx, rbp
0000000000004baf         jne        loc_4ba0

                     loc_4bb1:
0000000000004bb1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000004bb6         lea        rbx, qword [slot0]                          ; slot0
0000000000004bbd         cmp        rdi, rbx
0000000000004bc0         je         loc_4bd9

0000000000004bc2         call       j_free                                      ; free
0000000000004bc7         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000004bd2         mov        qword [slotvec0+8], rbx                     ; 0x20b078

                     loc_4bd9:
0000000000004bd9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000004be0         cmp        r12, rbx
0000000000004be3         je         loc_4bf4

0000000000004be5         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004be8         call       j_free                                      ; free
0000000000004bed         mov        qword [slotvec], rbx                        ; slotvec

                     loc_4bf4:
0000000000004bf4         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000004bf5         mov        dword [nslots], 0x1                         ; nslots
0000000000004bff         pop        rbp
0000000000004c00         pop        r12
0000000000004c02         ret
                        ; endp
0000000000004c03         align      16                                          ; End of unwind block (FDE at 0x9b20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000004c10         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9b4c), default_quoting_options
0000000000004c17         mov        rdx, 0xffffffffffffffff
0000000000004c1e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c23         align      16                                          ; End of unwind block (FDE at 0x9b4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004c30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9b60), default_quoting_options
0000000000004c37         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c3c         align      64                                          ; End of unwind block (FDE at 0x9b60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004c40         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9b74), default_quoting_options
0000000000004c47         mov        rsi, rdi
0000000000004c4a         mov        rdx, 0xffffffffffffffff
0000000000004c51         xor        edi, edi
0000000000004c53         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c58         align      32                                          ; End of unwind block (FDE at 0x9b74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004c60         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9b88), default_quoting_options
0000000000004c67         mov        rdx, rsi
0000000000004c6a         mov        rsi, rdi
0000000000004c6d         xor        edi, edi
0000000000004c6f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c74         align      128                                         ; End of unwind block (FDE at 0x9b88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004c80         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9b9c)
0000000000004c84         mov        rax, rdx
0000000000004c87         mov        rdx, qword [fs:0x28]
0000000000004c90         mov        qword [rsp+0x48+var_10], rdx
0000000000004c95         xor        edx, edx
0000000000004c97         cmp        esi, 0xa
0000000000004c9a         je         loc_4d04

0000000000004c9c         mov        dword [rsp+0x48+var_48], esi
0000000000004c9f         mov        rcx, rsp
0000000000004ca2         mov        rdx, 0xffffffffffffffff
0000000000004ca9         mov        rsi, rax
0000000000004cac         mov        qword [rsp+0x48+var_44], 0x0
0000000000004cb5         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004cbe         mov        qword [rsp+0x48+var_34], 0x0
0000000000004cc7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004cd0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004cd9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004ce2         mov        dword [rsp+0x48+var_14], 0x0
0000000000004cea         call       quotearg_n_options                          ; quotearg_n_options
0000000000004cef         mov        rcx, qword [rsp+0x48+var_10]
0000000000004cf4         xor        rcx, qword [fs:0x28]
0000000000004cfd         jne        loc_4d09

0000000000004cff         add        rsp, 0x48
0000000000004d03         ret
                        ; endp

                     loc_4d04:
0000000000004d04         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_4d09:
0000000000004d09         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000004d0e         align      16                                          ; End of unwind block (FDE at 0x9b9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000004d10         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9bb8), CODE XREF=quotearg_style_mem+10
0000000000004d14         mov        rax, rdx
0000000000004d17         mov        rdx, rcx
0000000000004d1a         mov        rcx, qword [fs:0x28]
0000000000004d23         mov        qword [rsp+0x48+var_10], rcx
0000000000004d28         xor        ecx, ecx
0000000000004d2a         cmp        esi, 0xa
0000000000004d2d         je         loc_4d90

0000000000004d2f         mov        dword [rsp+0x48+var_48], esi
0000000000004d32         mov        rcx, rsp
0000000000004d35         mov        rsi, rax
0000000000004d38         mov        qword [rsp+0x48+var_44], 0x0
0000000000004d41         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004d4a         mov        qword [rsp+0x48+var_34], 0x0
0000000000004d53         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004d5c         mov        qword [rsp+0x48+var_24], 0x0
0000000000004d65         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004d6e         mov        dword [rsp+0x48+var_14], 0x0
0000000000004d76         call       quotearg_n_options                          ; quotearg_n_options
0000000000004d7b         mov        rdx, qword [rsp+0x48+var_10]
0000000000004d80         xor        rdx, qword [fs:0x28]
0000000000004d89         jne        loc_4d95

0000000000004d8b         add        rsp, 0x48
0000000000004d8f         ret
                        ; endp

                     loc_4d90:
0000000000004d90         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4d95:
0000000000004d95         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004d9a         align      32                                          ; End of unwind block (FDE at 0x9bb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004da0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x9bd4)
0000000000004da3         mov        esi, edi
0000000000004da5         xor        edi, edi
0000000000004da7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004dac         align      16                                          ; End of unwind block (FDE at 0x9bd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004db0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x9be8)
0000000000004db3         mov        rdx, rsi
0000000000004db6         mov        esi, edi
0000000000004db8         xor        edi, edi
0000000000004dba         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004dbf         align      64                                          ; End of unwind block (FDE at 0x9be8)

                     quotearg_char_mem:
0000000000004dc0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9bfc), CODE XREF=quotearg_char+11
0000000000004dc4         mov        ecx, edx
0000000000004dc6         mov        rax, qword [fs:0x28]
0000000000004dcf         mov        qword [rsp+0x48+var_10], rax
0000000000004dd4         xor        eax, eax
0000000000004dd6         mov        rax, qword [qword_20b250]                   ; qword_20b250
0000000000004ddd         mov        r8, rsp
0000000000004de0         and        ecx, 0x1f
0000000000004de3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004deb         mov        qword [rsp+0x48+var_18], rax
0000000000004df0         mov        eax, edx
0000000000004df2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004df6         shr        al, 0x5
0000000000004df9         movzx      eax, al
0000000000004dfc         lea        r9, qword [r8+rax*4+8]
0000000000004e01         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20b230
0000000000004e09         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004e0e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20b240
0000000000004e16         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004e1b         mov        edx, dword [r9]
0000000000004e1e         mov        eax, edx
0000000000004e20         shr        eax, cl
0000000000004e22         not        eax
0000000000004e24         and        eax, 0x1
0000000000004e27         shl        eax, cl
0000000000004e29         mov        rcx, r8
0000000000004e2c         xor        eax, edx
0000000000004e2e         mov        rdx, rsi
0000000000004e31         mov        rsi, rdi
0000000000004e34         mov        dword [r9], eax
0000000000004e37         xor        edi, edi
0000000000004e39         call       quotearg_n_options                          ; quotearg_n_options
0000000000004e3e         mov        rsi, qword [rsp+0x48+var_10]
0000000000004e43         xor        rsi, qword [fs:0x28]
0000000000004e4c         jne        loc_4e53

0000000000004e4e         add        rsp, 0x48
0000000000004e52         ret
                        ; endp

                     loc_4e53:
0000000000004e53         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000004e58         align      32                                          ; End of unwind block (FDE at 0x9bfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000004e60         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x9c18)
0000000000004e64         mov        rsi, 0xffffffffffffffff
0000000000004e6b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000004e70         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x9c18), Begin of unwind block (FDE at 0x9c2c), CODE XREF=close_stdout+101
0000000000004e75         mov        rsi, 0xffffffffffffffff
0000000000004e7c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004e81         align      16                                          ; End of unwind block (FDE at 0x9c2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000004e90         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x9c40)
0000000000004e95         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004e9a         align      32                                          ; End of unwind block (FDE at 0x9c40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000004ea0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9c54)
0000000000004ea4         mov        rax, rdx
0000000000004ea7         mov        rdx, qword [fs:0x28]
0000000000004eb0         mov        qword [rsp+0x48+var_10], rdx
0000000000004eb5         xor        edx, edx
0000000000004eb7         cmp        esi, 0xa
0000000000004eba         je         loc_4f24

0000000000004ebc         mov        dword [rsp+0x48+var_48], esi
0000000000004ebf         mov        rcx, rsp
0000000000004ec2         mov        rdx, 0xffffffffffffffff
0000000000004ec9         mov        rsi, rax
0000000000004ecc         mov        qword [rsp+0x48+var_44], 0x0
0000000000004ed5         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000004ede         mov        qword [rsp+0x48+var_34], 0x0
0000000000004ee7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004ef0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004ef9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004f02         mov        dword [rsp+0x48+var_14], 0x0
0000000000004f0a         call       quotearg_n_options                          ; quotearg_n_options
0000000000004f0f         mov        rcx, qword [rsp+0x48+var_10]
0000000000004f14         xor        rcx, qword [fs:0x28]
0000000000004f1d         jne        loc_4f29

0000000000004f1f         add        rsp, 0x48
0000000000004f23         ret
                        ; endp

                     loc_4f24:
0000000000004f24         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_4f29:
0000000000004f29         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000004f2e         align      16                                          ; End of unwind block (FDE at 0x9c54)

                     quotearg_n_custom_mem:
0000000000004f30         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9c70), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000004f34         mov        r9, rcx
0000000000004f37         mov        rcx, qword [qword_20b250]                   ; qword_20b250
0000000000004f3e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004f46         mov        rax, qword [fs:0x28]
0000000000004f4f         mov        qword [rsp+0x48+var_10], rax
0000000000004f54         xor        eax, eax
0000000000004f56         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004f5a         test       rsi, rsi
0000000000004f5d         mov        qword [rsp+0x48+var_18], rcx
0000000000004f62         mov        dword [rsp+0x48+var_48], 0xa
0000000000004f69         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20b230
0000000000004f71         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004f76         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20b240
0000000000004f7e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004f83         je         loc_4fb7

0000000000004f85         test       rdx, rdx
0000000000004f88         je         loc_4fb7

0000000000004f8a         mov        qword [rsp+0x48+var_20], rsi
0000000000004f8f         mov        qword [rsp+0x48+var_18], rdx
0000000000004f94         mov        rcx, rsp
0000000000004f97         mov        rdx, r8
0000000000004f9a         mov        rsi, r9
0000000000004f9d         call       quotearg_n_options                          ; quotearg_n_options
0000000000004fa2         mov        rdi, qword [rsp+0x48+var_10]
0000000000004fa7         xor        rdi, qword [fs:0x28]
0000000000004fb0         jne        loc_4fbc

0000000000004fb2         add        rsp, 0x48
0000000000004fb6         ret
                        ; endp

                     loc_4fb7:
0000000000004fb7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_4fbc:
0000000000004fbc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000004fc1         align      16                                          ; End of unwind block (FDE at 0x9c70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000004fd0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x9c8c)
0000000000004fd7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
0000000000004fdc         align      32                                          ; End of unwind block (FDE at 0x9c8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000004fe0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x9ca0)
0000000000004fe3         mov        r8, 0xffffffffffffffff
0000000000004fea         mov        rdx, rsi
0000000000004fed         mov        rsi, rdi
0000000000004ff0         xor        edi, edi
0000000000004ff2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004ff7         align      4096                                        ; End of unwind block (FDE at 0x9ca0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000005000         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x9cb4)
0000000000005003         mov        rcx, rdx
0000000000005006         mov        rdx, rsi
0000000000005009         mov        rsi, rdi
000000000000500c         xor        edi, edi
000000000000500e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005013         align      32                                          ; End of unwind block (FDE at 0x9cb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000005020         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9cc8), quote_quoting_options
0000000000005027         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000502c         align      16                                          ; End of unwind block (FDE at 0x9cc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000005030         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9cdc), quote_quoting_options
0000000000005037         mov        rdx, rsi
000000000000503a         mov        rsi, rdi
000000000000503d         xor        edi, edi
000000000000503f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005044         align      16                                          ; End of unwind block (FDE at 0x9cdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000005050         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9cf0), quote_quoting_options, CODE XREF=scan_arg+720, scan_arg+737
0000000000005057         mov        rdx, 0xffffffffffffffff
000000000000505e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005063         align      16                                          ; End of unwind block (FDE at 0x9cf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000005070         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9d04), quote_quoting_options, CODE XREF=main+2473, main+2647, main+2921, main+2992, main+3042, main+3097, scan_arg+797
0000000000005077         mov        rsi, rdi
000000000000507a         mov        rdx, 0xffffffffffffffff
0000000000005081         xor        edi, edi
0000000000005083         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005088         align      16                                          ; End of unwind block (FDE at 0x9d04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000005090         push       r15                                         ; Begin of unwind block (FDE at 0x9d1c), CODE XREF=version_etc_va+75, version_etc+161
0000000000005092         push       r14
0000000000005094         push       r13
0000000000005096         push       r12
0000000000005098         mov        r12, r9
000000000000509b         push       rbp
000000000000509c         push       rbx
000000000000509d         mov        rbp, rdi
00000000000050a0         mov        rbx, r8
00000000000050a3         sub        rsp, 0x28
00000000000050a7         test       rsi, rsi
00000000000050aa         je         loc_51c8

00000000000050b0         mov        r8, rdx
00000000000050b3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
00000000000050ba         mov        r9, rcx
00000000000050bd         xor        eax, eax
00000000000050bf         mov        rcx, rsi
00000000000050c2         mov        esi, 0x1
00000000000050c7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_50cc:
00000000000050cc         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x8d5b, CODE XREF=version_etc_arn+337
00000000000050d3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000050d5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000050da         call       j_dcgettext                                 ; dcgettext
00000000000050df         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000050e6         mov        rcx, rax
00000000000050e9         mov        r8d, 0x7e3
00000000000050ef         mov        esi, 0x1
00000000000050f4         mov        rdi, rbp
00000000000050f7         xor        eax, eax
00000000000050f9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000050fe         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000005105         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005107         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000510c         call       j_dcgettext                                 ; dcgettext
0000000000005111         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005114         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005117         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000511c         cmp        r12, 0x9
0000000000005120         ja         loc_5460

0000000000005126         lea        rdx, qword [switch_table_9048]              ; switch_table_9048
000000000000512d         movsxd     rax, dword [rdx+r12*4]
0000000000005131         add        rax, rdx
0000000000005134         jmp        rax                                         ; switch statement using table at 0x9048, with 10 cases, 0x5140,0x51b6,0x51f0,0x5248,0x5288,0x52d0,0x5320,0x5378,0x53a8,0x5410
0000000000005136         align      64

                     loc_5140:
0000000000005140         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000005144         mov        rax, qword [rbx+0x10]
0000000000005148         lea        rsi, qword [aWrittenBySSSns_8f58]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000514f         mov        r8, qword [rbx+8]
0000000000005153         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005158         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000515a         mov        r13, qword [rbx+0x30]
000000000000515e         mov        r12, qword [rbx+0x28]
0000000000005162         mov        qword [rsp+0x58+var_48], r9
0000000000005167         mov        r15, qword [rbx+0x20]
000000000000516b         mov        r14, qword [rbx+0x18]
000000000000516f         mov        qword [rsp+0x58+var_58], rax
0000000000005173         mov        qword [rsp+0x58+var_50], r8
0000000000005178         mov        rbx, qword [rbx]
000000000000517b         call       j_dcgettext                                 ; dcgettext
0000000000005180         sub        rsp, 0x8

                     loc_5184:
0000000000005184         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000005189         mov        rdx, rax
000000000000518c         mov        rcx, rbx
000000000000518f         mov        esi, 0x1
0000000000005194         mov        rdi, rbp
0000000000005197         xor        eax, eax
0000000000005199         push       r9
000000000000519b         push       r13
000000000000519d         push       r12
000000000000519f         push       r15
00000000000051a1         push       r14
00000000000051a3         mov        r9, qword [rsp+0x88+var_58]
00000000000051a8         mov        r8, qword [rsp+0x88+var_50]
00000000000051ad         call       j___fprintf_chk                             ; __fprintf_chk
00000000000051b2         add        rsp, 0x30

                     loc_51b6:
00000000000051b6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
00000000000051ba         pop        rbx
00000000000051bb         pop        rbp
00000000000051bc         pop        r12
00000000000051be         pop        r13
00000000000051c0         pop        r14
00000000000051c2         pop        r15
00000000000051c4         ret
                        ; endp
00000000000051c5         align      8

                     loc_51c8:
00000000000051c8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
00000000000051cb         mov        rcx, rdx
00000000000051ce         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000051d5         mov        esi, 0x1
00000000000051da         xor        eax, eax
00000000000051dc         call       j___fprintf_chk                             ; __fprintf_chk
00000000000051e1         jmp        loc_50cc
00000000000051e6         align      16

                     loc_51f0:
00000000000051f0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000051f4         mov        r9, qword [rbx+0x38]
00000000000051f8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000051ff         mov        rax, qword [rbx+0x10]
0000000000005203         mov        r8, qword [rbx+8]
0000000000005207         mov        edx, 0x5
000000000000520c         mov        r13, qword [rbx+0x30]
0000000000005210         mov        r12, qword [rbx+0x28]
0000000000005214         mov        r15, qword [rbx+0x20]
0000000000005218         mov        r14, qword [rbx+0x18]
000000000000521c         mov        rbx, qword [rbx]
000000000000521f         mov        qword [rsp+0x58+var_40], r10
0000000000005224         mov        qword [rsp+0x58+var_48], r9
0000000000005229         mov        qword [rsp+0x58+var_58], rax
000000000000522d         mov        qword [rsp+0x58+var_50], r8

                     loc_5232:
0000000000005232         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000005234         call       j_dcgettext                                 ; dcgettext
0000000000005239         mov        r10, qword [rsp+0x58+var_40]
000000000000523e         push       r10
0000000000005240         jmp        loc_5184
0000000000005245         align      8

                     loc_5248:
0000000000005248         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000524b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000005252         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005257         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005259         call       j_dcgettext                                 ; dcgettext
000000000000525e         add        rsp, 0x28
0000000000005262         mov        rcx, rbx
0000000000005265         mov        rdi, rbp
0000000000005268         pop        rbx
0000000000005269         pop        rbp
000000000000526a         pop        r12
000000000000526c         pop        r13
000000000000526e         pop        r14
0000000000005270         pop        r15
0000000000005272         mov        rdx, rax
0000000000005275         mov        esi, 0x1
000000000000527a         xor        eax, eax
000000000000527c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005281         align      8

                     loc_5288:
0000000000005288         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000528c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000005293         mov        rbx, qword [rbx]
0000000000005296         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000529b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000529d         call       j_dcgettext                                 ; dcgettext
00000000000052a2         add        rsp, 0x28
00000000000052a6         mov        r8, r12
00000000000052a9         mov        rcx, rbx
00000000000052ac         mov        rdi, rbp
00000000000052af         mov        rdx, rax
00000000000052b2         mov        esi, 0x1
00000000000052b7         pop        rbx
00000000000052b8         pop        rbp
00000000000052b9         pop        r12
00000000000052bb         pop        r13
00000000000052bd         pop        r14
00000000000052bf         pop        r15
00000000000052c1         xor        eax, eax
00000000000052c3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000052c8         align      16

                     loc_52d0:
00000000000052d0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000052d4         mov        r12, qword [rbx+8]
00000000000052d8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000052df         mov        rbx, qword [rbx]
00000000000052e2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000052e7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052e9         call       j_dcgettext                                 ; dcgettext
00000000000052ee         add        rsp, 0x28
00000000000052f2         mov        r9, r13
00000000000052f5         mov        r8, r12
00000000000052f8         mov        rcx, rbx
00000000000052fb         mov        rdi, rbp
00000000000052fe         mov        rdx, rax
0000000000005301         pop        rbx
0000000000005302         pop        rbp
0000000000005303         pop        r12
0000000000005305         pop        r13
0000000000005307         pop        r14
0000000000005309         pop        r15
000000000000530b         mov        esi, 0x1
0000000000005310         xor        eax, eax
0000000000005312         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005317         align      32

                     loc_5320:
0000000000005320         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000005327         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000532c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000532e         mov        r14, qword [rbx+0x18]
0000000000005332         mov        r13, qword [rbx+0x10]
0000000000005336         mov        r12, qword [rbx+8]
000000000000533a         mov        rbx, qword [rbx]
000000000000533d         call       j_dcgettext                                 ; dcgettext
0000000000005342         sub        rsp, 0x8

                     loc_5346:
0000000000005346         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000005348         mov        rdx, rax
000000000000534b         mov        r9, r13
000000000000534e         mov        r8, r12
0000000000005351         mov        rcx, rbx
0000000000005354         mov        rdi, rbp
0000000000005357         mov        esi, 0x1
000000000000535c         xor        eax, eax
000000000000535e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005363         pop        rax
0000000000005364         pop        rdx
0000000000005365         add        rsp, 0x28
0000000000005369         pop        rbx
000000000000536a         pop        rbp
000000000000536b         pop        r12
000000000000536d         pop        r13
000000000000536f         pop        r14
0000000000005371         pop        r15
0000000000005373         ret
                        ; endp
0000000000005374         align      8

                     loc_5378:
0000000000005378         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000537c         lea        rsi, qword [aWrittenBySSSns_8ed8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000005383         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005388         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000538a         mov        r14, qword [rbx+0x18]
000000000000538e         mov        r13, qword [rbx+0x10]
0000000000005392         mov        r12, qword [rbx+8]
0000000000005396         mov        rbx, qword [rbx]
0000000000005399         call       j_dcgettext                                 ; dcgettext
000000000000539e         push       r15
00000000000053a0         jmp        loc_5346
00000000000053a2         align      8

                     loc_53a8:
00000000000053a8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
00000000000053ac         mov        r12, qword [rbx+0x28]
00000000000053b0         lea        rsi, qword [aWrittenBySSSns_8f00]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
00000000000053b7         mov        r15, qword [rbx+0x20]
00000000000053bb         mov        r14, qword [rbx+0x18]
00000000000053bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000053c4         mov        r13, qword [rbx+0x10]
00000000000053c8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053ca         mov        rbx, qword [rbx]
00000000000053cd         mov        qword [rsp+0x58+var_58], r8
00000000000053d1         call       j_dcgettext                                 ; dcgettext
00000000000053d6         sub        rsp, 0x8
00000000000053da         mov        r9, r13
00000000000053dd         push       r12
00000000000053df         push       r15
00000000000053e1         push       r14

                     loc_53e3:
00000000000053e3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000053e8         mov        rcx, rbx
00000000000053eb         mov        rdx, rax
00000000000053ee         mov        rdi, rbp
00000000000053f1         mov        esi, 0x1
00000000000053f6         xor        eax, eax
00000000000053f8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000053fd         add        rsp, 0x20
0000000000005401         add        rsp, 0x28
0000000000005405         pop        rbx
0000000000005406         pop        rbp
0000000000005407         pop        r12
0000000000005409         pop        r13
000000000000540b         pop        r14
000000000000540d         pop        r15
000000000000540f         ret
                        ; endp

                     loc_5410:
0000000000005410         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000005414         mov        r13, qword [rbx+0x30]
0000000000005418         lea        rsi, qword [aWrittenBySSSns_8f28]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000541f         mov        r12, qword [rbx+0x28]
0000000000005423         mov        r15, qword [rbx+0x20]
0000000000005427         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000542c         mov        r14, qword [rbx+0x18]
0000000000005430         mov        r8, qword [rbx+8]
0000000000005434         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005436         mov        qword [rsp+0x58+var_50], r9
000000000000543b         mov        rbx, qword [rbx]
000000000000543e         mov        qword [rsp+0x58+var_58], r8
0000000000005442         call       j_dcgettext                                 ; dcgettext
0000000000005447         push       r13
0000000000005449         push       r12
000000000000544b         push       r15
000000000000544d         push       r14
000000000000544f         mov        r9, qword [rsp+0x78+var_50]
0000000000005454         jmp        loc_53e3
0000000000005456         align      32

                     loc_5460:
0000000000005460         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000005464         mov        r9, qword [rbx+0x38]
0000000000005468         mov        edx, 0x5
000000000000546d         mov        rax, qword [rbx+0x10]
0000000000005471         mov        r8, qword [rbx+8]
0000000000005475         lea        rsi, qword [aWrittenBySSSns_8fc0]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000547c         mov        r13, qword [rbx+0x30]
0000000000005480         mov        r12, qword [rbx+0x28]
0000000000005484         mov        r15, qword [rbx+0x20]
0000000000005488         mov        r14, qword [rbx+0x18]
000000000000548c         mov        qword [rsp+0x58+var_40], r10
0000000000005491         mov        qword [rsp+0x58+var_48], r9
0000000000005496         mov        qword [rsp+0x58+var_58], rax
000000000000549a         mov        qword [rsp+0x58+var_50], r8
000000000000549f         mov        rbx, qword [rbx]
00000000000054a2         jmp        loc_5232
00000000000054a7         align      16                                          ; End of unwind block (FDE at 0x9d1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
00000000000054b0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x9e30)
00000000000054b3         cmp        qword [r8], 0x0
00000000000054b7         je         j_version_etc_arn                           ; version_etc_arn

00000000000054b9         nop        dword [rax]

                     loc_54c0:
00000000000054c0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
00000000000054c4         cmp        qword [r8+r9*8], 0x0
00000000000054c9         jne        loc_54c0

                     j_version_etc_arn:        // version_etc_arn
00000000000054cb         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000054d0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x9e30), Begin of unwind block (FDE at 0x9e44)
00000000000054d4         mov        r10, r8
00000000000054d7         xor        r9d, r9d
00000000000054da         mov        rax, qword [fs:0x28]
00000000000054e3         mov        qword [rsp+0x68+var_10], rax
00000000000054e8         xor        eax, eax
00000000000054ea         mov        r8, rsp
00000000000054ed         nop        dword [rax]

                     loc_54f0:
00000000000054f0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000054f3         cmp        eax, 0x2f
00000000000054f6         ja         loc_553a

00000000000054f8         mov        r11d, eax
00000000000054fb         add        r11, qword [r10+0x10]
00000000000054ff         add        eax, 0x8
0000000000005502         mov        dword [r10], eax

                     loc_5505:
0000000000005505         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000005508         test       rax, rax
000000000000550b         mov        qword [r8+r9*8], rax
000000000000550f         je         loc_551b

0000000000005511         add        r9, 0x1
0000000000005515         cmp        r9, 0xa
0000000000005519         jne        loc_54f0

                     loc_551b:
000000000000551b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000005520         mov        rax, qword [rsp+0x68+var_10]
0000000000005525         xor        rax, qword [fs:0x28]
000000000000552e         jne        loc_5535

0000000000005530         add        rsp, 0x68
0000000000005534         ret
                        ; endp

                     loc_5535:
0000000000005535         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_553a:
000000000000553a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000553e         lea        rax, qword [r11+8]
0000000000005542         mov        qword [r10+8], rax
0000000000005546         jmp        loc_5505
0000000000005548         align      16                                          ; End of unwind block (FDE at 0x9e44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000005550         push       rbp                                         ; Begin of unwind block (FDE at 0x9e60), CODE XREF=main+427
0000000000005551         push       rbx
0000000000005552         mov        r10d, 0x20
0000000000005558         xor        r11d, r11d
000000000000555b         sub        rsp, 0xb8
0000000000005562         mov        rax, qword [fs:0x28]
000000000000556b         mov        qword [rsp+0xc8+var_50], rax
0000000000005570         xor        eax, eax
0000000000005572         lea        rax, qword [rsp+0xc8+arg_0]
000000000000557a         mov        qword [rsp+0xc8+var_28], r8
0000000000005582         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000558a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000558f         mov        qword [rsp+0xc8+var_20], r9
0000000000005597         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000559f         mov        qword [rsp+0xc8+var_B8], rax
00000000000055a4         lea        rax, qword [rsp+0xc8+var_48]
00000000000055ac         xor        r9d, r9d
00000000000055af         mov        qword [rsp+0xc8+var_B0], rax
00000000000055b4         mov        rbp, rax
00000000000055b7         nop        word [rax+rax]

                     loc_55c0:
00000000000055c0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
00000000000055c4         ja         loc_561c

00000000000055c6         mov        eax, r10d
00000000000055c9         mov        r11d, 0x1
00000000000055cf         add        r10d, 0x8
00000000000055d3         add        rax, rbp

                     loc_55d6:
00000000000055d6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
00000000000055d9         test       rax, rax
00000000000055dc         mov        qword [r8+r9*8], rax
00000000000055e0         je         loc_55ec

00000000000055e2         add        r9, 0x1
00000000000055e6         cmp        r9, 0xa
00000000000055ea         jne        loc_55c0

                     loc_55ec:
00000000000055ec         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000055ef         jne        loc_5615

                     loc_55f1:
00000000000055f1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
00000000000055f6         mov        rax, qword [rsp+0xc8+var_50]
00000000000055fb         xor        rax, qword [fs:0x28]
0000000000005604         jne        loc_5610

0000000000005606         add        rsp, 0xb8
000000000000560d         pop        rbx
000000000000560e         pop        rbp
000000000000560f         ret
                        ; endp

                     loc_5610:
0000000000005610         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_5615:
0000000000005615         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000561a         jmp        loc_55f1

                     loc_561c:
000000000000561c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000561f         add        rbx, 0x8
0000000000005623         jmp        loc_55d6
0000000000005625         align      16                                          ; End of unwind block (FDE at 0x9e60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000005630         push       rbx                                         ; Begin of unwind block (FDE at 0x9e8c)
0000000000005631         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000005638         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000563d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000563f         call       j_dcgettext                                 ; dcgettext
0000000000005644         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000564b         mov        rsi, rax
000000000000564e         mov        edi, 0x1
0000000000005653         xor        eax, eax
0000000000005655         call       j___printf_chk                              ; __printf_chk
000000000000565a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000005661         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005666         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005668         call       j_dcgettext                                 ; dcgettext
000000000000566d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005674         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8019
000000000000567b         mov        rsi, rax
000000000000567e         mov        edi, 0x1
0000000000005683         xor        eax, eax
0000000000005685         call       j___printf_chk                              ; __printf_chk
000000000000568a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005691         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000005698         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000569a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000569f         call       j_dcgettext                                 ; dcgettext
00000000000056a4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000056a7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000056aa         pop        rbx
00000000000056ab         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
00000000000056b0         push       rbx                                         ; End of unwind block (FDE at 0x9e8c), Begin of unwind block (FDE at 0x9eac), CODE XREF=main+1534, seq_fast+230, seq_fast+275, seq_fast+360, seq_fast+877, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
00000000000056b1         mov        rbx, rdi
00000000000056b4         call       j_malloc                                    ; malloc
00000000000056b9         test       rax, rax
00000000000056bc         jne        loc_56c3

00000000000056be         test       rbx, rbx
00000000000056c1         jne        loc_56c5

                     loc_56c3:
00000000000056c3         pop        rbx                                         ; CODE XREF=xmalloc+12
00000000000056c4         ret
                        ; endp

                     loc_56c5:
00000000000056c5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_56ca:
00000000000056ca         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x9eac)
                     xnmalloc:
00000000000056d0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x9ec8)
00000000000056d3         mul        rsi
00000000000056d6         mov        rdi, rax
00000000000056d9         seto       al
00000000000056dc         test       rdi, rdi
00000000000056df         js         loc_56eb

00000000000056e1         movzx      eax, al
00000000000056e4         test       rax, rax
00000000000056e7         jne        loc_56eb

00000000000056e9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_56eb:
00000000000056eb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000056ef         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_56f4:
00000000000056f4         nop                                                    ; End of unwind block (FDE at 0x9ec8)
00000000000056f6         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000005700         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x9edc)
                        ; endp
0000000000005702         align      16                                          ; End of unwind block (FDE at 0x9edc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000005710         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x9ef0), CODE XREF=seq_fast+625, seq_fast+705, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000005713         push       rbx
0000000000005714         mov        rbx, rsi
0000000000005717         jne        loc_571e

0000000000005719         test       rdi, rdi
000000000000571c         jne        loc_5738

                     loc_571e:
000000000000571e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000005721         call       j_realloc                                   ; realloc
0000000000005726         test       rax, rax
0000000000005729         jne        loc_5730

000000000000572b         test       rbx, rbx
000000000000572e         jne        loc_5741

                     loc_5730:
0000000000005730         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000005731         ret
                        ; endp
0000000000005732         align      8

                     loc_5738:
0000000000005738         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000573d         xor        eax, eax
000000000000573f         pop        rbx
0000000000005740         ret
                        ; endp

                     loc_5741:
0000000000005741         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5746:
0000000000005746         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x9ef0)
                     xnrealloc:
0000000000005750         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x9f14)
0000000000005753         mul        rdx
0000000000005756         mov        rsi, rax
0000000000005759         seto       al
000000000000575c         test       rsi, rsi
000000000000575f         js         loc_576b

0000000000005761         movzx      eax, al
0000000000005764         test       rax, rax
0000000000005767         jne        loc_576b

0000000000005769         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_576b:
000000000000576b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000576f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5774:
0000000000005774         nop                                                    ; End of unwind block (FDE at 0x9f14)
0000000000005776         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000005780         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x9f28)
0000000000005783         mov        r9, rdx
0000000000005786         mov        rcx, qword [rsi]
0000000000005789         je         loc_57c0

000000000000578b         xor        edx, edx
000000000000578d         movabs     rax, 0x5555555555555554
0000000000005797         div        r9
000000000000579a         cmp        rax, rcx
000000000000579d         jbe        loc_57db

000000000000579f         mov        rax, rcx
00000000000057a2         shr        rax, 0x1
00000000000057a5         lea        rcx, qword [rax+rcx+1]

                     loc_57aa:
00000000000057aa         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
00000000000057ad         imul       rcx, r9                                     ; argument #4 for method xrealloc
00000000000057b1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
00000000000057b4         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000057b9         align      64

                     loc_57c0:
00000000000057c0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
00000000000057c3         je         loc_57e8

                     loc_57c5:
00000000000057c5         mov        rax, rcx                                    ; CODE XREF=sub_57e4+28
00000000000057c8         mul        r9
00000000000057cb         seto       dl
00000000000057ce         test       rax, rax
00000000000057d1         movzx      edx, dl
00000000000057d4         js         loc_57db

00000000000057d6         test       rdx, rdx
00000000000057d9         je         loc_57aa

                     loc_57db:
00000000000057db         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000057df         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_57e4:
00000000000057e4         nop        dword [rax]
                        ; endp

                     loc_57e8:
00000000000057e8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000057ea         mov        eax, 0x80
00000000000057ef         xor        r8d, r8d
00000000000057f2         div        r9
00000000000057f5         test       rax, rax
00000000000057f8         sete       r8b
00000000000057fc         lea        rcx, qword [r8+rax]
0000000000005800         jmp        loc_57c5
0000000000005802         align      16                                          ; End of unwind block (FDE at 0x9f28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000005810         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x9f40)
0000000000005813         mov        rax, qword [rsi]
0000000000005816         je         loc_5840

0000000000005818         movabs     rdx, 0x5555555555555553
0000000000005822         cmp        rax, rdx
0000000000005825         ja         loc_5851

0000000000005827         mov        rdx, rax
000000000000582a         shr        rdx, 0x1
000000000000582d         lea        rax, qword [rdx+rax+1]

                     loc_5832:
0000000000005832         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000005835         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000005838         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000583d         align      64

                     loc_5840:
0000000000005840         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000005843         mov        edx, 0x80
0000000000005848         cmove      rax, rdx
000000000000584c         test       rax, rax
000000000000584f         jns        loc_5832

                     loc_5851:
0000000000005851         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000005855         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_585a:
000000000000585a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x9f40)
                     xzalloc:
0000000000005860         push       rbx                                         ; Begin of unwind block (FDE at 0x9f58)
0000000000005861         mov        rbx, rdi
0000000000005864         call       xmalloc                                     ; xmalloc
0000000000005869         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000586c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000586e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000005871         pop        rbx
0000000000005872         jmp        j_memset                                    ; memset
                        ; endp
0000000000005877         align      128                                         ; End of unwind block (FDE at 0x9f58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000005880         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x9f74)
0000000000005883         sub        rsp, 0x8
0000000000005887         mul        rsi
000000000000588a         seto       dl
000000000000588d         test       rax, rax
0000000000005890         js         loc_58a9

0000000000005892         movzx      edx, dl
0000000000005895         test       rdx, rdx
0000000000005898         jne        loc_58a9

000000000000589a         call       j_calloc                                    ; calloc
000000000000589f         test       rax, rax
00000000000058a2         je         loc_58a9

00000000000058a4         add        rsp, 0x8
00000000000058a8         ret
                        ; endp

                     loc_58a9:
00000000000058a9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_58ae:
00000000000058ae         nop                                                    ; End of unwind block (FDE at 0x9f74)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
00000000000058b0         push       rbp                                         ; Begin of unwind block (FDE at 0x9f90), CODE XREF=clone_quoting_options+40
00000000000058b1         push       rbx
00000000000058b2         mov        rbp, rdi
00000000000058b5         mov        rdi, rsi
00000000000058b8         mov        rbx, rsi
00000000000058bb         sub        rsp, 0x8
00000000000058bf         call       xmalloc                                     ; xmalloc
00000000000058c4         add        rsp, 0x8
00000000000058c8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000058cb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000058ce         pop        rbx
00000000000058cf         pop        rbp
00000000000058d0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000058d3         jmp        j_memcpy                                    ; memcpy
                        ; endp
00000000000058d8         align      32                                          ; End of unwind block (FDE at 0x9f90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
00000000000058e0         push       rbx                                         ; Begin of unwind block (FDE at 0x9fb8), CODE XREF=main+2783
00000000000058e1         mov        rbx, rdi
00000000000058e4         call       j_strlen                                    ; strlen
00000000000058e9         mov        rdi, rbx
00000000000058ec         lea        rsi, qword [rax+1]
00000000000058f0         pop        rbx
00000000000058f1         jmp        xmemdup                                     ; xmemdup
                        ; endp
00000000000058f3         align      256                                         ; End of unwind block (FDE at 0x9fb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000005900         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x9fd4), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+2634, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000005907         sub        rsp, 0x8
000000000000590b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005910         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005912         call       j_dcgettext                                 ; dcgettext
0000000000005917         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000591d         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x881c
0000000000005924         mov        rcx, rax
0000000000005927         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005929         xor        eax, eax
000000000000592b         call       j_error                                     ; error
0000000000005930         call       j_abort                                     ; abort
                        ; endp
0000000000005935         align      64                                          ; End of unwind block (FDE at 0x9fd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     xstrtold:
0000000000005940         push       r14                                         ; Begin of unwind block (FDE at 0x9fec), CODE XREF=main+931, scan_arg+53
0000000000005942         push       r13
0000000000005944         mov        r14, rcx
0000000000005947         push       r12
0000000000005949         push       rbp
000000000000594a         mov        rbp, rdi
000000000000594d         push       rbx
000000000000594e         mov        r13, rdx
0000000000005951         mov        rbx, rsi
0000000000005954         sub        rsp, 0x10
0000000000005958         mov        rax, qword [fs:0x28]
0000000000005961         mov        qword [rsp+0x38+var_30], rax
0000000000005966         xor        eax, eax
0000000000005968         call       j___errno_location                          ; __errno_location
000000000000596d         mov        rsi, rsp
0000000000005970         mov        r12, rax
0000000000005973         mov        dword [rax], 0x0
0000000000005979         mov        rdi, rbp
000000000000597c         call       r14
000000000000597f         mov        rcx, qword [rsp+0x38+var_38]
0000000000005983         cmp        rcx, rbp
0000000000005986         je         loc_59f0

0000000000005988         test       rbx, rbx
000000000000598b         je         loc_59d0

000000000000598d         fldz
000000000000598f         fxch       st1
0000000000005991         fucomi     st1
0000000000005993         fstp       st1
0000000000005995         jp         loc_599e

0000000000005997         mov        eax, 0x1
000000000000599c         je         loc_59ab

                     loc_599e:
000000000000599e         cmp        dword [r12], 0x22                           ; CODE XREF=xstrtold+85, xstrtold+159, xstrtold+161
00000000000059a3         setne      al

                     loc_59a6:
00000000000059a6         test       rbx, rbx                                    ; CODE XREF=xstrtold+178
00000000000059a9         je         loc_59ae

                     loc_59ab:
00000000000059ab         mov        qword [rbx], rcx                            ; CODE XREF=xstrtold+92

                     loc_59ae:
00000000000059ae         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=xstrtold+105, xstrtold+149, xstrtold+168
00000000000059b3         xor        rdx, qword [fs:0x28]
00000000000059bc         fstp       tword [r13]
00000000000059c0         jne        loc_59f4

00000000000059c2         add        rsp, 0x10
00000000000059c6         pop        rbx
00000000000059c7         pop        rbp
00000000000059c8         pop        r12
00000000000059ca         pop        r13
00000000000059cc         pop        r14
00000000000059ce         ret
                        ; endp
00000000000059cf         align      16

                     loc_59d0:
00000000000059d0         xor        eax, eax                                    ; CODE XREF=xstrtold+75
00000000000059d2         cmp        byte [rcx], 0x0
00000000000059d5         jne        loc_59ae

00000000000059d7         fldz
00000000000059d9         fxch       st1
00000000000059db         fucomi     st1
00000000000059dd         fstp       st1
00000000000059df         jp         loc_599e

00000000000059e1         jne        loc_599e

00000000000059e3         mov        eax, 0x1
00000000000059e8         jmp        loc_59ae
00000000000059ea         align      16

                     loc_59f0:
00000000000059f0         xor        eax, eax                                    ; CODE XREF=xstrtold+70
00000000000059f2         jmp        loc_59a6

                     loc_59f4:
00000000000059f4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtold+128
                        ; endp
00000000000059f9         align      512                                         ; End of unwind block (FDE at 0x9fec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     rpl_asprintf:
0000000000005a00         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0xa034), CODE XREF=main+855, main+1004, main+2609, main+2734
0000000000005a07         test       al, al
0000000000005a09         mov        qword [rsp+0xd8+var_A8], rdx
0000000000005a0e         mov        qword [rsp+0xd8+var_A0], rcx
0000000000005a13         mov        qword [rsp+0xd8+var_98], r8
0000000000005a18         mov        qword [rsp+0xd8+var_90], r9
0000000000005a1d         je         loc_5a56

0000000000005a1f         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000005a24         movaps     xmmword [rsp+0xd8+var_78], xmm1
0000000000005a29         movaps     xmmword [rsp+0xd8+var_68], xmm2
0000000000005a2e         movaps     xmmword [rsp+0xd8+var_58], xmm3
0000000000005a36         movaps     xmmword [rsp+0xd8+var_48], xmm4
0000000000005a3e         movaps     xmmword [rsp+0xd8+var_38], xmm5
0000000000005a46         movaps     xmmword [rsp+0xd8+var_28], xmm6
0000000000005a4e         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_5a56:
0000000000005a56         mov        rax, qword [fs:0x28]                        ; CODE XREF=rpl_asprintf+29
0000000000005a5f         mov        qword [rsp+0xd8+var_C0], rax
0000000000005a64         xor        eax, eax
0000000000005a66         lea        rax, qword [rsp+0xd8+arg_0]
0000000000005a6e         mov        rdx, rsp
0000000000005a71         mov        qword [rsp+0xd8+var_D0], rax
0000000000005a76         lea        rax, qword [rsp+0xd8+var_B8]
0000000000005a7b         mov        dword [rsp+0xd8+var_D8], 0x10
0000000000005a82         mov        dword [rsp+0xd8+var_D4], 0x30
0000000000005a8a         mov        qword [rsp+0xd8+var_C8], rax
0000000000005a8f         call       rpl_vasprintf                               ; rpl_vasprintf
0000000000005a94         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000005a99         xor        rcx, qword [fs:0x28]
0000000000005aa2         jne        loc_5aac

0000000000005aa4         add        rsp, 0xd8
0000000000005aab         ret
                        ; endp

                     loc_5aac:
0000000000005aac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_asprintf+162
                        ; endp
0000000000005ab1         align      64                                          ; End of unwind block (FDE at 0xa034)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000005ac0         push       r13                                         ; Begin of unwind block (FDE at 0xa054), CODE XREF=sub_3c30+534
0000000000005ac2         push       r12
0000000000005ac4         mov        r13, rsi
0000000000005ac7         push       rbp
0000000000005ac8         push       rbx
0000000000005ac9         mov        rbx, rdi
0000000000005acc         mov        r12, rdx
0000000000005acf         sub        rsp, 0x18
0000000000005ad3         mov        rax, qword [fs:0x28]
0000000000005adc         mov        qword [rsp+0x38+var_30], rax
0000000000005ae1         xor        eax, eax
0000000000005ae3         lea        rax, qword [rsp+0x38+var_34]
0000000000005ae8         test       rdi, rdi
0000000000005aeb         cmove      rbx, rax
0000000000005aef         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000005af2         call       j_mbrtowc                                   ; mbrtowc
0000000000005af7         cmp        rax, 0xfffffffffffffffd
0000000000005afb         mov        rbp, rax
0000000000005afe         jbe        loc_5b20

0000000000005b00         test       r12, r12
0000000000005b03         je         loc_5b20

0000000000005b05         xor        edi, edi
0000000000005b07         call       hard_locale                                 ; hard_locale
0000000000005b0c         test       al, al
0000000000005b0e         jne        loc_5b20

0000000000005b10         movzx      eax, byte [r13]
0000000000005b15         mov        ebp, 0x1
0000000000005b1a         mov        dword [rbx], eax
0000000000005b1c         nop        dword [rax]

                     loc_5b20:
0000000000005b20         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000005b25         xor        rdx, qword [fs:0x28]
0000000000005b2e         mov        rax, rbp
0000000000005b31         jne        loc_5b3e

0000000000005b33         add        rsp, 0x18
0000000000005b37         pop        rbx
0000000000005b38         pop        rbp
0000000000005b39         pop        r12
0000000000005b3b         pop        r13
0000000000005b3d         ret
                        ; endp

                     loc_5b3e:
0000000000005b3e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000005b43         align      16                                          ; End of unwind block (FDE at 0xa054)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     rpl_vasprintf:
0000000000005b50         push       rbx                                         ; Begin of unwind block (FDE at 0xa094), CODE XREF=rpl_asprintf+143
0000000000005b51         mov        rax, rsi
0000000000005b54         mov        rbx, rdi
0000000000005b57         xor        edi, edi
0000000000005b59         sub        rsp, 0x10
0000000000005b5d         mov        rcx, qword [fs:0x28]
0000000000005b66         mov        qword [rsp+0x18+var_10], rcx
0000000000005b6b         xor        ecx, ecx
0000000000005b6d         mov        rsi, rsp
0000000000005b70         mov        rcx, rdx
0000000000005b73         mov        rdx, rax
0000000000005b76         call       vasnprintf                                  ; vasnprintf
0000000000005b7b         test       rax, rax
0000000000005b7e         je         loc_5bc2

0000000000005b80         mov        rdx, qword [rsp+0x18+var_18]
0000000000005b84         cmp        rdx, 0x7fffffff
0000000000005b8b         ja         loc_5ba8

0000000000005b8d         mov        qword [rbx], rax
0000000000005b90         mov        eax, edx

                     loc_5b92:
0000000000005b92         mov        rbx, qword [rsp+0x18+var_10]                ; CODE XREF=rpl_vasprintf+112, rpl_vasprintf+119
0000000000005b97         xor        rbx, qword [fs:0x28]
0000000000005ba0         jne        loc_5bc9

0000000000005ba2         add        rsp, 0x10
0000000000005ba6         pop        rbx
0000000000005ba7         ret
                        ; endp

                     loc_5ba8:
0000000000005ba8         mov        rdi, rax                                    ; argument "__ptr" for method j_free, CODE XREF=rpl_vasprintf+59
0000000000005bab         call       j_free                                      ; free
0000000000005bb0         call       j___errno_location                          ; __errno_location
0000000000005bb5         mov        dword [rax], 0x4b
0000000000005bbb         mov        eax, 0xffffffff
0000000000005bc0         jmp        loc_5b92

                     loc_5bc2:
0000000000005bc2         mov        eax, 0xffffffff                             ; CODE XREF=rpl_vasprintf+46
0000000000005bc7         jmp        loc_5b92

                     loc_5bc9:
0000000000005bc9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vasprintf+80
                        ; endp
0000000000005bce         align      16                                          ; End of unwind block (FDE at 0xa094)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: -40


                     c_strtold:
0000000000005bd0         push       r12                                         ; Begin of unwind block (FDE at 0xa0bc), CODE XREF=cl_strtold+120
0000000000005bd2         push       rbp
0000000000005bd3         mov        rbp, rdi
0000000000005bd6         push       rbx
0000000000005bd7         mov        rbx, rsi
0000000000005bda         sub        rsp, 0x10
0000000000005bde         mov        rax, qword [c_locale_cache]                 ; c_locale_cache
0000000000005be5         test       rax, rax
0000000000005be8         je         loc_5c60

                     loc_5bea:
0000000000005bea         mov        rdi, qword [c_locale_cache]                 ; c_locale_cache, CODE XREF=c_strtold+170
0000000000005bf1         test       rdi, rdi
0000000000005bf4         je         loc_5c40

0000000000005bf6         call       j_uselocale                                 ; uselocale
0000000000005bfb         test       rax, rax
0000000000005bfe         mov        r12, rax
0000000000005c01         je         loc_5c40

0000000000005c03         mov        rsi, rbx                                    ; argument "__endptr" for method j_strtold
0000000000005c06         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtold
0000000000005c09         call       j_strtold                                   ; strtold
0000000000005c0e         fstp       tword [rsp+0x28+var_28]
0000000000005c11         call       j___errno_location                          ; __errno_location
0000000000005c16         mov        rdi, r12                                    ; argument "__dataset" for method j_uselocale
0000000000005c19         mov        rbx, rax
0000000000005c1c         mov        ebp, dword [rax]
0000000000005c1e         call       j_uselocale                                 ; uselocale
0000000000005c23         test       rax, rax
0000000000005c26         fld        tword [rsp+0x28+var_28]
0000000000005c29         je         loc_5c7f

0000000000005c2b         mov        dword [rbx], ebp
0000000000005c2d         add        rsp, 0x10
0000000000005c31         pop        rbx
0000000000005c32         pop        rbp
0000000000005c33         pop        r12
0000000000005c35         ret
                        ; endp
0000000000005c36         align      64

                     loc_5c40:
0000000000005c40         test       rbx, rbx                                    ; CODE XREF=c_strtold+36, c_strtold+49
0000000000005c43         jne        loc_5c50

0000000000005c45         add        rsp, 0x10
0000000000005c49         fldz
0000000000005c4b         pop        rbx
0000000000005c4c         pop        rbp
0000000000005c4d         pop        r12
0000000000005c4f         ret
                        ; endp

                     loc_5c50:
0000000000005c50         mov        qword [rbx], rbp                            ; CODE XREF=c_strtold+115
0000000000005c53         add        rsp, 0x10
0000000000005c57         fldz
0000000000005c59         pop        rbx
0000000000005c5a         pop        rbp
0000000000005c5b         pop        r12
0000000000005c5d         ret
                        ; endp
0000000000005c5e         align      32

                     loc_5c60:
0000000000005c60         lea        rsi, qword [aDlf+8]                         ; argument "__locale" for method j_newlocale, 0x8120, CODE XREF=c_strtold+24
0000000000005c67         xor        edx, edx                                    ; argument "__base" for method j_newlocale
0000000000005c69         mov        edi, 0x1fbf                                 ; argument "__category_mask" for method j_newlocale
0000000000005c6e         call       j_newlocale                                 ; newlocale
0000000000005c73         mov        qword [c_locale_cache], rax                 ; c_locale_cache
0000000000005c7a         jmp        loc_5bea

                     loc_5c7f:
0000000000005c7f         fstp       st0                                         ; CODE XREF=c_strtold+89
0000000000005c81         call       j_abort                                     ; abort
                        ; endp
0000000000005c86         align      16                                          ; End of unwind block (FDE at 0xa0bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000005c90         push       r12                                         ; Begin of unwind block (FDE at 0xa114), CODE XREF=close_stdout+13, close_stdout+51
0000000000005c92         push       rbp
0000000000005c93         mov        rbp, rdi
0000000000005c96         push       rbx
0000000000005c97         call       j___fpending                                ; __fpending
0000000000005c9c         mov        ebx, dword [rbp]
0000000000005c9f         mov        rdi, rbp
0000000000005ca2         mov        r12, rax
0000000000005ca5         call       rpl_fclose                                  ; rpl_fclose
0000000000005caa         and        ebx, 0x20
0000000000005cad         test       ebx, ebx
0000000000005caf         jne        loc_5cc8

0000000000005cb1         test       eax, eax
0000000000005cb3         je         loc_5cbf

0000000000005cb5         test       r12, r12
0000000000005cb8         mov        eax, 0xffffffff
0000000000005cbd         je         loc_5cf8

                     loc_5cbf:
0000000000005cbf         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000005cc0         pop        rbp
0000000000005cc1         pop        r12
0000000000005cc3         ret
                        ; endp
0000000000005cc4         align      8

                     loc_5cc8:
0000000000005cc8         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000005cca         jne        loc_5ce8

0000000000005ccc         call       j___errno_location                          ; __errno_location
0000000000005cd1         mov        dword [rax], 0x0
0000000000005cd7         mov        eax, 0xffffffff
0000000000005cdc         pop        rbx
0000000000005cdd         pop        rbp
0000000000005cde         pop        r12
0000000000005ce0         ret
                        ; endp
0000000000005ce1         align      8

                     loc_5ce8:
0000000000005ce8         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000005ce9         mov        eax, 0xffffffff
0000000000005cee         pop        rbp
0000000000005cef         pop        r12
0000000000005cf1         ret
                        ; endp
0000000000005cf2         align      8

                     loc_5cf8:
0000000000005cf8         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000005cfd         cmp        dword [rax], 0x9
0000000000005d00         pop        rbx
0000000000005d01         pop        rbp
0000000000005d02         pop        r12
0000000000005d04         setne      al
0000000000005d07         movzx      eax, al
0000000000005d0a         neg        eax
0000000000005d0c         ret
                        ; endp
0000000000005d0d         align      16                                          ; End of unwind block (FDE at 0xa114)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000005d10         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xa164), CODE XREF=rpl_mbrtowc+71
0000000000005d14         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000005d16         call       j_setlocale                                 ; setlocale
0000000000005d1b         mov        rdx, rax
0000000000005d1e         mov        eax, 0x1
0000000000005d23         test       rdx, rdx
0000000000005d26         je         loc_5d45

0000000000005d28         lea        rdi, qword [aDlf+8]                         ; 0x8120
0000000000005d2f         mov        ecx, 0x2
0000000000005d34         mov        rsi, rdx
0000000000005d37         rep  cmpsb byte [rsi], byte [rdi]
0000000000005d39         seta       cl
0000000000005d3c         sbb        cl, 0x0
0000000000005d3f         xor        eax, eax
0000000000005d41         test       cl, cl
0000000000005d43         jne        loc_5d50

                     loc_5d45:
0000000000005d45         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000005d49         ret
                        ; endp
0000000000005d4a         align      16

                     loc_5d50:
0000000000005d50         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000005d57         mov        ecx, 0x6
0000000000005d5c         mov        rsi, rdx
0000000000005d5f         rep  cmpsb byte [rsi], byte [rdi]
0000000000005d61         seta       al
0000000000005d64         sbb        al, 0x0
0000000000005d66         test       al, al
0000000000005d68         setne      al
0000000000005d6b         add        rsp, 0x8
0000000000005d6f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000005d70         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xa164), Begin of unwind block (FDE at 0xa184), CODE XREF=gettext_quote.part.1+11
0000000000005d74         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000005d79         call       j_nl_langinfo                               ; nl_langinfo
0000000000005d7e         test       rax, rax
0000000000005d81         je         loc_5da0

0000000000005d83         cmp        byte [rax], 0x0
0000000000005d86         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000005d8d         cmove      rax, rdx
0000000000005d91         add        rsp, 0x8
0000000000005d95         ret
                        ; endp
0000000000005d96         align      32

                     loc_5da0:
0000000000005da0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000005da7         add        rsp, 0x8
0000000000005dab         ret
                        ; endp
0000000000005dac         align      16                                          ; End of unwind block (FDE at 0xa184)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000005db0         push       r12                                         ; Begin of unwind block (FDE at 0xa1a4), CODE XREF=close_stream+21
0000000000005db2         push       rbp
0000000000005db3         push       rbx
0000000000005db4         mov        rbx, rdi
0000000000005db7         call       j_fileno                                    ; fileno
0000000000005dbc         test       eax, eax
0000000000005dbe         mov        rdi, rbx
0000000000005dc1         js         loc_5e17

0000000000005dc3         call       j___freading                                ; __freading
0000000000005dc8         test       eax, eax
0000000000005dca         jne        loc_5df8

                     loc_5dcc:
0000000000005dcc         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000005dcf         call       rpl_fflush                                  ; rpl_fflush
0000000000005dd4         test       eax, eax
0000000000005dd6         je         loc_5e14

0000000000005dd8         call       j___errno_location                          ; __errno_location
0000000000005ddd         mov        r12d, dword [rax]
0000000000005de0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000005de3         mov        rbp, rax
0000000000005de6         call       j_fclose                                    ; fclose
0000000000005deb         test       r12d, r12d
0000000000005dee         jne        loc_5e20

                     loc_5df0:
0000000000005df0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000005df1         pop        rbp
0000000000005df2         pop        r12
0000000000005df4         ret
                        ; endp
0000000000005df5         align      8

                     loc_5df8:
0000000000005df8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000005dfb         call       j_fileno                                    ; fileno
0000000000005e00         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000005e02         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000005e07         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000005e09         call       j_lseek                                     ; lseek
0000000000005e0e         cmp        rax, 0xffffffffffffffff
0000000000005e12         jne        loc_5dcc

                     loc_5e14:
0000000000005e14         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_5e17:
0000000000005e17         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000005e18         pop        rbp
0000000000005e19         pop        r12
0000000000005e1b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_5e20:
0000000000005e20         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000005e24         mov        eax, 0xffffffff
0000000000005e29         jmp        loc_5df0
0000000000005e2b         align      16                                          ; End of unwind block (FDE at 0xa1a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000005e30         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa1dc), CODE XREF=rpl_fclose+31
0000000000005e33         push       rbx
0000000000005e34         mov        rbx, rdi
0000000000005e37         je         loc_5e4a

0000000000005e39         call       j___freading                                ; __freading
0000000000005e3e         test       eax, eax
0000000000005e40         je         loc_5e4a

0000000000005e42         test       dword [rbx], 0x100
0000000000005e48         jne        loc_5e58

                     loc_5e4a:
0000000000005e4a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
0000000000005e4d         pop        rbx
0000000000005e4e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000005e53         align      8

                     loc_5e58:
0000000000005e58         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
0000000000005e5b         mov        edx, 0x1
0000000000005e60         xor        esi, esi
0000000000005e62         call       rpl_fseeko                                  ; rpl_fseeko
0000000000005e67         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
0000000000005e6a         pop        rbx
0000000000005e6b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000005e70         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xa1dc), Begin of unwind block (FDE at 0xa1fc), CODE XREF=rpl_fflush+50
0000000000005e74         cmp        qword [rdi+0x10], rax
0000000000005e78         je         loc_5e80

                     j_j_fseeko:        // fseeko
0000000000005e7a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
0000000000005e7f         align      128

                     loc_5e80:
0000000000005e80         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000005e84         cmp        qword [rdi+0x28], rax
0000000000005e88         jne        j_j_fseeko                                  ; fseeko

0000000000005e8a         cmp        qword [rdi+0x48], 0x0
0000000000005e8f         jne        j_j_fseeko                                  ; fseeko

0000000000005e91         push       r12
0000000000005e93         push       rbp
0000000000005e94         mov        r12d, edx
0000000000005e97         push       rbx
0000000000005e98         mov        rbp, rsi
0000000000005e9b         mov        rbx, rdi
0000000000005e9e         call       j_fileno                                    ; fileno
0000000000005ea3         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000005ea6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000005ea9         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000005eab         call       j_lseek                                     ; lseek
0000000000005eb0         cmp        rax, 0xffffffffffffffff
0000000000005eb4         je         loc_5ec2

0000000000005eb6         and        dword [rbx], 0xffffffef
0000000000005eb9         mov        qword [rbx+0x90], rax
0000000000005ec0         xor        eax, eax

                     loc_5ec2:
0000000000005ec2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000005ec3         pop        rbp
0000000000005ec4         pop        r12
0000000000005ec6         ret
                        ; endp
0000000000005ec7         align      16                                          ; End of unwind block (FDE at 0xa1fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
0000000000005ed0         push       rbp                                         ; Begin of unwind block (FDE at 0xa22c), CODE XREF=rpl_vasprintf+38
0000000000005ed1         mov        rbp, rsp
0000000000005ed4         push       r15
0000000000005ed6         push       r14
0000000000005ed8         push       r13
0000000000005eda         push       r12
0000000000005edc         lea        r14, qword [rbp+var_3B0]
0000000000005ee3         push       rbx
0000000000005ee4         mov        rbx, rdx
0000000000005ee7         mov        r12, rcx
0000000000005eea         mov        rdx, r14
0000000000005eed         sub        rsp, 0x408
0000000000005ef4         mov        qword [rbp+var_418], rsi
0000000000005efb         lea        rsi, qword [rbp+var_2C0]
0000000000005f02         mov        qword [rbp+var_3E8], rdi
0000000000005f09         mov        rdi, rbx
0000000000005f0c         mov        qword [rbp+var_410], r14
0000000000005f13         mov        rax, qword [fs:0x28]
0000000000005f1c         mov        qword [rbp+var_38], rax
0000000000005f20         xor        eax, eax
0000000000005f22         mov        qword [rbp+var_408], rsi
0000000000005f29         call       printf_parse                                ; printf_parse
0000000000005f2e         test       eax, eax
0000000000005f30         js         loc_6d98

0000000000005f36         mov        rsi, r14
0000000000005f39         mov        rdi, r12
0000000000005f3c         call       printf_fetchargs                            ; printf_fetchargs
0000000000005f41         test       eax, eax
0000000000005f43         js         loc_6e00

0000000000005f49         mov        rax, qword [rbp+var_2B0]
0000000000005f50         mov        rdx, 0xffffffffffffffff
0000000000005f57         add        rax, 0x7
0000000000005f5b         cmp        rax, 0x6
0000000000005f5f         cmovbe     rax, rdx
0000000000005f63         add        rax, qword [rbp+var_2A8]
0000000000005f6a         jb         loc_6998

0000000000005f70         mov        rdi, rax
0000000000005f73         xor        r8d, r8d
0000000000005f76         add        rdi, 0x6
0000000000005f7a         setb       r8b
0000000000005f7e         jb         loc_6998

0000000000005f84         cmp        rdi, 0xf9f
0000000000005f8b         jbe        loc_60d8

0000000000005f91         cmp        rdi, 0xffffffffffffffff
0000000000005f95         mov        qword [rbp+var_3C8], r8
0000000000005f9c         je         loc_6998

0000000000005fa2         call       j_malloc                                    ; malloc
0000000000005fa7         test       rax, rax
0000000000005faa         mov        qword [rbp+var_3D8], rax
0000000000005fb1         je         loc_6998

0000000000005fb7         mov        r8, qword [rbp+var_3C8]
0000000000005fbe         mov        qword [rbp+var_420], rax

                     loc_5fc5:
0000000000005fc5         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
0000000000005fc8         cmp        qword [rbp+var_3E8], 0x0
0000000000005fd0         je         loc_5fdc

0000000000005fd2         mov        rax, qword [rbp+var_418]
0000000000005fd9         mov        r12, qword [rax]

                     loc_5fdc:
0000000000005fdc         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
0000000000005fe3         lea        rax, qword [rbp+var_3BC]
0000000000005fea         mov        r15, qword [rbp+var_3E8]
0000000000005ff1         mov        qword [rbp+var_400], 0x0
0000000000005ffc         mov        qword [rbp+var_3F0], rax
0000000000006003         mov        rax, rbx
0000000000006006         mov        rbx, r8
0000000000006009         mov        rcx, qword [r13]
000000000000600d         mov        r8, rax
0000000000006010         cmp        rcx, r8
0000000000006013         je         loc_6981

                     loc_6019:
0000000000006019         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
000000000000601c         mov        rax, rbx
000000000000601f         add        rax, rcx
0000000000006022         mov        r14, rax
0000000000006025         jae        loc_6108

000000000000602b         cmp        r12, 0xffffffffffffffff
000000000000602f         je         loc_6b00

                     loc_6035:
0000000000006035         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_6a40, vasnprintf+2950, vasnprintf+3039, loc_6b98, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_6db0
000000000000603a         mov        qword [rbp+var_3C8], rax

                     loc_6041:
0000000000006041         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
0000000000006048         je         loc_6053

000000000000604a         test       r15, r15
000000000000604d         jne        loc_6b30

                     loc_6053:
0000000000006053         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
000000000000605a         test       rax, rax
000000000000605d         je         loc_6067

000000000000605f         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006062         call       j_free                                      ; free

                     loc_6067:
0000000000006067         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
000000000000606e         mov        rdi, qword [rbp+var_2B8]
0000000000006075         add        rax, 0x20
0000000000006079         cmp        rdi, rax
000000000000607c         je         loc_6083

000000000000607e         call       j_free                                      ; free

                     loc_6083:
0000000000006083         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
000000000000608a         mov        rdi, qword [rbp+var_3A8]
0000000000006091         add        rax, 0x10
0000000000006095         cmp        rdi, rax
0000000000006098         je         loc_609f

000000000000609a         call       j_free                                      ; free

                     loc_609f:
000000000000609f         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
00000000000060a6         xor        r15d, r15d
00000000000060a9         mov        dword [rax], 0xc

                     loc_60af:
00000000000060af         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
00000000000060b3         xor        rdi, qword [fs:0x28]
00000000000060bc         mov        rax, r15
00000000000060bf         jne        loc_6fc7

00000000000060c5         lea        rsp, qword [rbp+var_28]
00000000000060c9         pop        rbx
00000000000060ca         pop        r12
00000000000060cc         pop        r13
00000000000060ce         pop        r14
00000000000060d0         pop        r15
00000000000060d2         pop        rbp
00000000000060d3         ret
                        ; endp
00000000000060d4         align      8

                     loc_60d8:
00000000000060d8         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
00000000000060dc         mov        qword [rbp+var_420], 0x0
00000000000060e7         and        rax, 0xfffffffffffffff0
00000000000060eb         sub        rsp, rax
00000000000060ee         lea        rax, qword [rsp+0x430+var_421]
00000000000060f3         and        rax, 0xfffffffffffffff0
00000000000060f7         mov        qword [rbp+var_3D8], rax
00000000000060fe         jmp        loc_5fc5
0000000000006103         align      8

                     loc_6108:
0000000000006108         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
000000000000610b         jae        loc_6174

000000000000610d         test       r12, r12
0000000000006110         jne        loc_6a40

0000000000006116         cmp        rax, 0xc
000000000000611a         ja         loc_6a52

0000000000006120         mov        r12d, 0xc

                     loc_6126:
0000000000006126         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
000000000000612d         sete       dl
0000000000006130         test       r15, r15
0000000000006133         je         loc_6a78

                     loc_6139:
0000000000006139         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
000000000000613b         jne        loc_6a78

0000000000006141         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006144         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006147         mov        qword [rbp+var_3D0], r8
000000000000614e         mov        qword [rbp+var_3C8], rcx
0000000000006155         call       j_realloc                                   ; realloc
000000000000615a         test       rax, rax
000000000000615d         mov        rcx, qword [rbp+var_3C8]
0000000000006164         mov        r8, qword [rbp+var_3D0]
000000000000616b         je         loc_6b1b

0000000000006171         mov        r15, rax

                     loc_6174:
0000000000006174         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
0000000000006178         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000617b         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
000000000000617e         call       j_memcpy                                    ; memcpy

                     loc_6183:
0000000000006183         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
000000000000618a         cmp        qword [rbp+var_2C0], rax
0000000000006191         je         loc_6e4b

0000000000006197         movzx      edx, byte [r13+0x48]
000000000000619c         mov        rax, qword [r13+0x50]
00000000000061a0         cmp        dl, 0x25
00000000000061a3         je         loc_6938

00000000000061a9         cmp        rax, 0xffffffffffffffff
00000000000061ad         je         loc_6df6

00000000000061b3         mov        r8, qword [rbp+var_3A8]
00000000000061ba         shl        rax, 0x5
00000000000061be         add        rax, r8
00000000000061c1         cmp        dl, 0x6e
00000000000061c4         mov        edi, dword [rax]
00000000000061c6         mov        dword [rbp+var_3D0], edi
00000000000061cc         je         loc_69b0

00000000000061d2         mov        eax, dword [r13+0x10]
00000000000061d6         mov        rdi, qword [rbp+var_3D8]
00000000000061dd         test       al, 0x1
00000000000061df         mov        byte [rdi], 0x25
00000000000061e2         lea        rbx, qword [rdi+1]
00000000000061e6         je         loc_61f7

00000000000061e8         mov        rdi, qword [rbp+var_3D8]
00000000000061ef         lea        rbx, qword [rdi+2]
00000000000061f3         mov        byte [rdi+1], 0x27

                     loc_61f7:
00000000000061f7         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
00000000000061f9         je         loc_6202

00000000000061fb         mov        byte [rbx], 0x2d
00000000000061fe         add        rbx, 0x1

                     loc_6202:
0000000000006202         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
0000000000006204         je         loc_620d

0000000000006206         mov        byte [rbx], 0x2b
0000000000006209         add        rbx, 0x1

                     loc_620d:
000000000000620d         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
000000000000620f         je         loc_6218

0000000000006211         mov        byte [rbx], 0x20
0000000000006214         add        rbx, 0x1

                     loc_6218:
0000000000006218         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
000000000000621a         je         loc_6223

000000000000621c         mov        byte [rbx], 0x23
000000000000621f         add        rbx, 0x1

                     loc_6223:
0000000000006223         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
0000000000006225         je         loc_622e

0000000000006227         mov        byte [rbx], 0x49
000000000000622a         add        rbx, 0x1

                     loc_622e:
000000000000622e         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
0000000000006230         je         loc_6239

0000000000006232         mov        byte [rbx], 0x30
0000000000006235         add        rbx, 0x1

                     loc_6239:
0000000000006239         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
000000000000623d         mov        rdx, qword [r13+0x20]
0000000000006241         cmp        rsi, rdx
0000000000006244         je         loc_6276

0000000000006246         mov        rcx, rdx
0000000000006249         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000624c         mov        qword [rbp+var_3E0], r8
0000000000006253         sub        rcx, rsi
0000000000006256         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000006259         mov        qword [rbp+var_3C8], rcx
0000000000006260         call       j_memcpy                                    ; memcpy
0000000000006265         mov        rcx, qword [rbp+var_3C8]
000000000000626c         mov        r8, qword [rbp+var_3E0]
0000000000006273         add        rbx, rcx

                     loc_6276:
0000000000006276         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
000000000000627a         mov        rdx, qword [r13+0x38]
000000000000627e         cmp        rsi, rdx
0000000000006281         je         loc_62b3

0000000000006283         mov        rcx, rdx
0000000000006286         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000006289         mov        qword [rbp+var_3E0], r8
0000000000006290         sub        rcx, rsi
0000000000006293         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000006296         mov        qword [rbp+var_3C8], rcx
000000000000629d         call       j_memcpy                                    ; memcpy
00000000000062a2         mov        rcx, qword [rbp+var_3C8]
00000000000062a9         mov        r8, qword [rbp+var_3E0]
00000000000062b0         add        rbx, rcx

                     loc_62b3:
00000000000062b3         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
00000000000062b9         cmp        edi, 0x10
00000000000062bc         ja         loc_62eb

00000000000062be         mov        eax, 0x1
00000000000062c3         mov        ecx, edi
00000000000062c5         shl        rax, cl
00000000000062c8         test       eax, 0x14180
00000000000062cd         jne        loc_62e4

00000000000062cf         test       ah, 0x10
00000000000062d2         jne        loc_6c30

00000000000062d8         test       ah, 0x6
00000000000062db         je         loc_62eb

00000000000062dd         mov        byte [rbx], 0x6c
00000000000062e0         add        rbx, 0x1

                     loc_62e4:
00000000000062e4         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
00000000000062e7         add        rbx, 0x1

                     loc_62eb:
00000000000062eb         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
00000000000062f0         mov        byte [rbx+1], 0x0
00000000000062f4         mov        byte [rbx], al
00000000000062f6         mov        rax, qword [r13+0x28]
00000000000062fa         cmp        rax, 0xffffffffffffffff
00000000000062fe         je         loc_6a30

0000000000006304         shl        rax, 0x5
0000000000006308         add        rax, r8
000000000000630b         cmp        dword [rax], 0x5
000000000000630e         jne        loc_6df6

0000000000006314         mov        eax, dword [rax+0x10]
0000000000006317         mov        dword [rbp+var_3E0], 0x1
0000000000006321         mov        dword [rbp+var_3B8], eax

                     loc_6327:
0000000000006327         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
000000000000632b         cmp        rax, 0xffffffffffffffff
000000000000632f         je         loc_635c

0000000000006331         shl        rax, 0x5
0000000000006335         add        r8, rax
0000000000006338         cmp        dword [r8], 0x5
000000000000633c         jne        loc_6df6

0000000000006342         mov        eax, dword [rbp+var_3E0]
0000000000006348         mov        edx, dword [r8+0x10]
000000000000634c         mov        dword [rbp+rax*4+var_3B8], edx
0000000000006353         lea        eax, dword [rax+1]
0000000000006356         mov        dword [rbp+var_3E0], eax

                     loc_635c:
000000000000635c         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000635f         xor        edx, edx
0000000000006361         add        rax, 0x2
0000000000006365         jb         loc_6fcc

000000000000636b         cmp        r12, rax
000000000000636e         jae        loc_63bb

0000000000006370         test       r12, r12
0000000000006373         jne        loc_6b98

0000000000006379         cmp        rax, 0xc
000000000000637d         ja         loc_6bb0

0000000000006383         mov        r12d, 0xc

                     loc_6389:
0000000000006389         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
0000000000006390         sete       dl
0000000000006393         test       r15, r15
0000000000006396         je         loc_6be0

                     loc_639c:
000000000000639c         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
000000000000639e         jne        loc_6be0

00000000000063a4         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000063a7         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000063aa         call       j_realloc                                   ; realloc
00000000000063af         test       rax, rax
00000000000063b2         je         loc_6035

00000000000063b8         mov        r15, rax

                     loc_63bb:
00000000000063bb         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
00000000000063c0         call       j___errno_location                          ; __errno_location
00000000000063c5         mov        qword [rbp+var_3C8], rax
00000000000063cc         mov        eax, dword [rax]
00000000000063ce         mov        qword [rbp+var_3F8], rbx
00000000000063d5         mov        dword [rbp+var_424], eax
00000000000063db         nop        dword [rax+rax]

                     loc_63e0:
00000000000063e0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
00000000000063e7         mov        rbx, r12
00000000000063ea         mov        r10d, 0x7fffffff
00000000000063f0         sub        rbx, r14
00000000000063f3         mov        dword [rbp+var_3BC], 0xffffffff
00000000000063fd         cmp        rbx, 0x7fffffff
0000000000006404         mov        dword [rax], 0x0
000000000000640a         mov        eax, dword [rbp+var_3D0]
0000000000006410         cmovbe     r10, rbx
0000000000006414         cmp        eax, 0x11
0000000000006417         ja         loc_6df6

000000000000641d         lea        rsi, qword [switch_table_90cc]              ; switch_table_90cc
0000000000006424         movsxd     rax, dword [rsi+rax*4]
0000000000006428         add        rax, rsi
000000000000642b         jmp        rax                                         ; switch statement using table at 0x90cc, with 18 cases, 0x6430,0x6568,0x6690,0x6718,0x6798,0x67d8,0x6860,0x6890,0x6df6
000000000000642d         align      16

                     loc_6430:
0000000000006430         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
0000000000006434         lea        rdi, qword [r15+r14]
0000000000006438         shl        rax, 0x5
000000000000643c         add        rax, qword [rbp+var_3A8]
0000000000006443         mov        r9, qword [rax+0x10]
0000000000006447         mov        eax, dword [rbp+var_3E0]
000000000000644d         cmp        eax, 0x1
0000000000006450         je         loc_6918

0000000000006456         cmp        eax, 0x2
0000000000006459         je         loc_6900

000000000000645f         sub        rsp, 0x8
0000000000006463         push       qword [rbp+var_3F0]

                     loc_6469:
0000000000006469         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
0000000000006470         mov        rsi, r10
0000000000006473         mov        rcx, 0xffffffffffffffff
000000000000647a         mov        edx, 0x1
000000000000647f         xor        eax, eax
0000000000006481         mov        qword [rbp+var_430], r10
0000000000006488         call       j___snprintf_chk                            ; __snprintf_chk
000000000000648d         pop        rsi
000000000000648e         pop        rdi
000000000000648f         mov        r10, qword [rbp+var_430]

                     loc_6496:
0000000000006496         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
000000000000649c         test       ecx, ecx
000000000000649e         js         loc_65dc

                     loc_64a4:
00000000000064a4         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
00000000000064a7         cmp        rdx, r10
00000000000064aa         jae        loc_64ba

00000000000064ac         add        rdx, r15
00000000000064af         cmp        byte [rdx+r14], 0x0
00000000000064b4         jne        loc_6df6

                     loc_64ba:
00000000000064ba         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
00000000000064bc         jge        loc_64c6

                     loc_64be:
00000000000064be         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
00000000000064c4         mov        ecx, eax

                     loc_64c6:
00000000000064c6         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
00000000000064c9         cmp        rax, r10
00000000000064cc         jb         loc_6d00

00000000000064d2         cmp        rbx, 0x7ffffffe
00000000000064d9         ja         loc_6d20

00000000000064df         lea        rsi, qword [r12+r12]
00000000000064e3         lea        edx, dword [rcx+2]
00000000000064e6         test       r12, r12
00000000000064e9         mov        rax, 0xffffffffffffffff
00000000000064f0         cmovns     rax, rsi
00000000000064f4         add        rdx, r14
00000000000064f7         jb         loc_6fb8

00000000000064fd         cmp        rax, rdx
0000000000006500         cmovb      rax, rdx
0000000000006504         cmp        r12, rax
0000000000006507         jae        loc_63e0

000000000000650d         test       r12, r12
0000000000006510         js         loc_6041

0000000000006516         cmp        rsi, rax
0000000000006519         mov        r12, rsi
000000000000651c         jae        loc_652b

000000000000651e         cmp        rax, 0xffffffffffffffff
0000000000006522         je         loc_6041

0000000000006528         mov        r12, rax

                     loc_652b:
000000000000652b         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
0000000000006532         sete       bl
0000000000006535         test       r15, r15
0000000000006538         je         loc_68c0

000000000000653e         test       bl, bl
0000000000006540         jne        loc_68c0

0000000000006546         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006549         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000654c         call       j_realloc                                   ; realloc
0000000000006551         test       rax, rax
0000000000006554         je         loc_6041

000000000000655a         mov        r15, rax
000000000000655d         jmp        loc_63e0
0000000000006562         align      8

                     loc_6568:
0000000000006568         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000656c         lea        rdi, qword [r15+r14]
0000000000006570         shl        rax, 0x5
0000000000006574         add        rax, qword [rbp+var_3A8]
000000000000657b         mov        r9d, dword [rax+0x10]
000000000000657f         mov        eax, dword [rbp+var_3E0]
0000000000006585         cmp        eax, 0x1
0000000000006588         je         loc_67c0

                     loc_658e:
000000000000658e         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
0000000000006591         je         loc_6808

                     loc_6597:
0000000000006597         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
000000000000659b         push       qword [rbp+var_3F0]

                     loc_65a1:
00000000000065a1         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
00000000000065a8         mov        rcx, 0xffffffffffffffff
00000000000065af         mov        edx, 0x1
00000000000065b4         mov        rsi, r10
00000000000065b7         xor        eax, eax
00000000000065b9         mov        qword [rbp+var_430], r10
00000000000065c0         call       j___snprintf_chk                            ; __snprintf_chk
00000000000065c5         pop        rdx
00000000000065c6         pop        rcx
00000000000065c7         mov        ecx, dword [rbp+var_3BC]
00000000000065cd         mov        r10, qword [rbp+var_430]
00000000000065d4         test       ecx, ecx
00000000000065d6         jns        loc_64a4

                     loc_65dc:
00000000000065dc         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
00000000000065e3         cmp        byte [rdi+1], 0x0
00000000000065e7         jne        loc_6928

00000000000065ed         test       eax, eax
00000000000065ef         jns        loc_64be

00000000000065f5         mov        rax, qword [rbp+var_3C8]
00000000000065fc         mov        ebx, dword [rax]
00000000000065fe         test       ebx, ebx
0000000000006600         jne        loc_6620

0000000000006602         movzx      eax, byte [r13+0x48]
0000000000006607         mov        ebx, 0x16
000000000000660c         and        eax, 0xffffffef
000000000000660f         cmp        al, 0x63
0000000000006611         mov        eax, 0x54
0000000000006616         cmove      ebx, eax
0000000000006619         nop        dword [rax]

                     loc_6620:
0000000000006620         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
0000000000006627         je         loc_6632

0000000000006629         test       r15, r15
000000000000662c         jne        loc_6ddc

                     loc_6632:
0000000000006632         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
0000000000006639         test       rax, rax
000000000000663c         je         loc_6646

000000000000663e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006641         call       j_free                                      ; free

                     loc_6646:
0000000000006646         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
000000000000664d         mov        rdi, qword [rbp+var_2B8]
0000000000006654         add        rax, 0x20
0000000000006658         cmp        rdi, rax
000000000000665b         je         loc_6662

000000000000665d         call       j_free                                      ; free

                     loc_6662:
0000000000006662         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
0000000000006669         mov        rdi, qword [rbp+var_3A8]
0000000000006670         add        rax, 0x10
0000000000006674         cmp        rdi, rax
0000000000006677         je         loc_667e

0000000000006679         call       j_free                                      ; free

                     loc_667e:
000000000000667e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
0000000000006685         xor        r15d, r15d
0000000000006688         mov        dword [rax], ebx
000000000000668a         jmp        loc_60af
000000000000668f         align      16

                     loc_6690:
0000000000006690         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
0000000000006694         lea        rdi, qword [r15+r14]
0000000000006698         shl        rax, 0x5
000000000000669c         add        rax, qword [rbp+var_3A8]
00000000000066a3         fld        tword [rax+0x10]
00000000000066a6         mov        eax, dword [rbp+var_3E0]
00000000000066ac         cmp        eax, 0x1
00000000000066af         je         loc_6ce0

00000000000066b5         cmp        eax, 0x2
00000000000066b8         jne        loc_6b80

00000000000066be         mov        eax, dword [rbp+var_3B4]
00000000000066c4         sub        rsp, 0x8
00000000000066c8         push       qword [rbp+var_3F0]
00000000000066ce         mov        r9d, dword [rbp+var_3B8]
00000000000066d5         mov        r8, qword [rbp+var_3D8]
00000000000066dc         mov        rsi, r10
00000000000066df         sub        rsp, 0x18
00000000000066e3         mov        rcx, 0xffffffffffffffff
00000000000066ea         mov        edx, 0x1
00000000000066ef         fstp       tword [rsp+0x458+var_450]
00000000000066f3         push       rax
00000000000066f4         xor        eax, eax
00000000000066f6         mov        qword [rbp+var_430], r10
00000000000066fd         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006702         add        rsp, 0x30
0000000000006706         mov        r10, qword [rbp+var_430]
000000000000670d         jmp        loc_6496
0000000000006712         align      8

                     loc_6718:
0000000000006718         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
000000000000671c         lea        rdi, qword [r15+r14]
0000000000006720         shl        rax, 0x5
0000000000006724         add        rax, qword [rbp+var_3A8]
000000000000672b         movsd      xmm0, qword [rax+0x10]
0000000000006730         mov        eax, dword [rbp+var_3E0]
0000000000006736         cmp        eax, 0x1
0000000000006739         je         loc_6cd0

000000000000673f         cmp        eax, 0x2
0000000000006742         jne        loc_6b40

0000000000006748         mov        eax, dword [rbp+var_3B4]
000000000000674e         push       qword [rbp+var_3F0]
0000000000006754         push       rax

                     loc_6755:
0000000000006755         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
000000000000675c         mov        r8, qword [rbp+var_3D8]
0000000000006763         mov        rsi, r10
0000000000006766         mov        rcx, 0xffffffffffffffff
000000000000676d         mov        edx, 0x1
0000000000006772         mov        eax, 0x1
0000000000006777         mov        qword [rbp+var_430], r10
000000000000677e         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006783         pop        r8
0000000000006785         mov        r10, qword [rbp+var_430]
000000000000678c         pop        r9
000000000000678e         jmp        loc_6496
0000000000006793         align      8

                     loc_6798:
0000000000006798         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
000000000000679c         lea        rdi, qword [r15+r14]
00000000000067a0         shl        rax, 0x5
00000000000067a4         add        rax, qword [rbp+var_3A8]
00000000000067ab         movzx      r9d, word [rax+0x10]
00000000000067b0         mov        eax, dword [rbp+var_3E0]
00000000000067b6         cmp        eax, 0x1
00000000000067b9         jne        loc_658e

00000000000067bf         nop

                     loc_67c0:
00000000000067c0         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
00000000000067c6         push       r9

                     loc_67c8:
00000000000067c8         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
00000000000067cf         jmp        loc_65a1
00000000000067d4         align      8

                     loc_67d8:
00000000000067d8         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
00000000000067dc         lea        rdi, qword [r15+r14]
00000000000067e0         shl        rax, 0x5
00000000000067e4         add        rax, qword [rbp+var_3A8]
00000000000067eb         movsx      r9d, word [rax+0x10]
00000000000067f0         mov        eax, dword [rbp+var_3E0]
00000000000067f6         cmp        eax, 0x1
00000000000067f9         je         loc_67c0

00000000000067fb         cmp        eax, 0x2
00000000000067fe         jne        loc_6597

0000000000006804         nop        dword [rax]

                     loc_6808:
0000000000006808         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
000000000000680c         push       qword [rbp+var_3F0]
0000000000006812         push       r9

                     loc_6814:
0000000000006814         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
000000000000681a         push       rax

                     loc_681b:
000000000000681b         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
0000000000006822         mov        r8, qword [rbp+var_3D8]
0000000000006829         mov        rsi, r10
000000000000682c         mov        rcx, 0xffffffffffffffff
0000000000006833         mov        edx, 0x1
0000000000006838         xor        eax, eax
000000000000683a         mov        qword [rbp+var_430], r10
0000000000006841         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006846         add        rsp, 0x20
000000000000684a         mov        r10, qword [rbp+var_430]
0000000000006851         jmp        loc_6496
0000000000006856         align      32

                     loc_6860:
0000000000006860         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
0000000000006864         lea        rdi, qword [r15+r14]
0000000000006868         shl        rax, 0x5
000000000000686c         add        rax, qword [rbp+var_3A8]
0000000000006873         movzx      r9d, byte [rax+0x10]
0000000000006878         mov        eax, dword [rbp+var_3E0]
000000000000687e         cmp        eax, 0x1
0000000000006881         jne        loc_658e

0000000000006887         jmp        loc_67c0
000000000000688c         align      16

                     loc_6890:
0000000000006890         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
0000000000006894         lea        rdi, qword [r15+r14]
0000000000006898         shl        rax, 0x5
000000000000689c         add        rax, qword [rbp+var_3A8]
00000000000068a3         movsx      r9d, byte [rax+0x10]
00000000000068a8         mov        eax, dword [rbp+var_3E0]
00000000000068ae         cmp        eax, 0x1
00000000000068b1         jne        loc_658e

00000000000068b7         jmp        loc_67c0
00000000000068bc         align      64

                     loc_68c0:
00000000000068c0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
00000000000068c3         call       j_malloc                                    ; malloc
00000000000068c8         test       rax, rax
00000000000068cb         mov        rcx, rax
00000000000068ce         je         loc_6041

00000000000068d4         test       r14, r14
00000000000068d7         je         loc_6990

00000000000068dd         test       bl, bl
00000000000068df         je         loc_6990

00000000000068e5         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000068e8         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000068eb         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000068ee         call       j_memcpy                                    ; memcpy
00000000000068f3         mov        r15, rax
00000000000068f6         jmp        loc_63e0
00000000000068fb         align      256

                     loc_6900:
0000000000006900         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
0000000000006904         push       qword [rbp+var_3F0]
000000000000690a         push       r9
000000000000690c         jmp        loc_6814
0000000000006911         align      8

                     loc_6918:
0000000000006918         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
000000000000691e         push       r9
0000000000006920         jmp        loc_67c8
0000000000006925         align      8

                     loc_6928:
0000000000006928         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
000000000000692c         jmp        loc_63e0
0000000000006931         align      8

                     loc_6938:
0000000000006938         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
000000000000693c         jne        loc_6df6

0000000000006942         mov        rax, r14
0000000000006945         add        rax, 0x1
0000000000006949         mov        rbx, rax
000000000000694c         jae        loc_69d8

0000000000006952         cmp        r12, 0xffffffffffffffff
0000000000006956         jne        loc_6035

000000000000695c         mov        rbx, r12

                     loc_695f:
000000000000695f         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_6964:
0000000000006964         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
0000000000006968         add        r13, 0x58
000000000000696c         mov        rcx, qword [r13]
0000000000006970         add        qword [rbp+var_400], 0x1
0000000000006978         cmp        rcx, r8
000000000000697b         jne        loc_6019

                     loc_6981:
0000000000006981         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
0000000000006984         jmp        loc_6183
0000000000006989         align      16

                     loc_6990:
0000000000006990         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
0000000000006993         jmp        loc_63e0

                     loc_6998:
0000000000006998         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
000000000000699d         mov        qword [rbp+var_3C8], rax
00000000000069a4         jmp        loc_6067
00000000000069a9         align      16

                     loc_69b0:
00000000000069b0         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
00000000000069b2         sub        edx, 0x12
00000000000069b5         cmp        edx, 0x4
00000000000069b8         ja         loc_6df6

00000000000069be         lea        rdi, qword [switch_table_9114]              ; switch_table_9114
00000000000069c5         mov        rax, qword [rax+0x10]
00000000000069c9         movsxd     rdx, dword [rdi+rdx*4]
00000000000069cd         add        rdx, rdi
00000000000069d0         jmp        rdx                                         ; switch statement using table at 0x9114, with 5 cases, 0x6b10,0x6c40,0x6c50,0x6c60
00000000000069d2         align      8

                     loc_69d8:
00000000000069d8         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
00000000000069db         jae        loc_695f

00000000000069dd         test       r12, r12
00000000000069e0         jne        loc_6db0

00000000000069e6         cmp        rax, 0xc
00000000000069ea         ja         loc_6dc2

00000000000069f0         mov        r12d, 0xc

                     loc_69f6:
00000000000069f6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
00000000000069fd         sete       dl
0000000000006a00         test       r15, r15
0000000000006a03         je         loc_6c70

0000000000006a09         test       dl, dl
0000000000006a0b         jne        loc_6c70

0000000000006a11         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006a14         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006a17         call       j_realloc                                   ; realloc
0000000000006a1c         test       rax, rax
0000000000006a1f         je         loc_6b1b

0000000000006a25         mov        r15, rax
0000000000006a28         jmp        loc_695f
0000000000006a2d         align      16

                     loc_6a30:
0000000000006a30         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
0000000000006a3a         jmp        loc_6327
0000000000006a3f         align      64

                     loc_6a40:
0000000000006a40         js         loc_6035                                    ; CODE XREF=vasnprintf+576

0000000000006a46         add        r12, r12
0000000000006a49         cmp        r12, rax
0000000000006a4c         jae        loc_6126

                     loc_6a52:
0000000000006a52         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
0000000000006a56         je         loc_6035

0000000000006a5c         cmp        r15, qword [rbp+var_3E8]
0000000000006a63         mov        r12, rax
0000000000006a66         sete       dl
0000000000006a69         test       r15, r15
0000000000006a6c         jne        loc_6139

0000000000006a72         nop        word [rax+rax]

                     loc_6a78:
0000000000006a78         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
0000000000006a7b         mov        qword [rbp+var_3E0], r8
0000000000006a82         mov        byte [rbp+var_3D0], dl
0000000000006a88         mov        qword [rbp+var_3C8], rcx
0000000000006a8f         call       j_malloc                                    ; malloc
0000000000006a94         test       rax, rax
0000000000006a97         mov        r9, rax
0000000000006a9a         mov        rcx, qword [rbp+var_3C8]
0000000000006aa1         movzx      edx, byte [rbp+var_3D0]
0000000000006aa8         mov        r8, qword [rbp+var_3E0]
0000000000006aaf         je         loc_6035

0000000000006ab5         test       rbx, rbx
0000000000006ab8         je         loc_6cc0

0000000000006abe         test       dl, dl
0000000000006ac0         je         loc_6cc0

0000000000006ac6         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006ac9         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006acc         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006acf         mov        qword [rbp+var_3D0], r8
0000000000006ad6         mov        qword [rbp+var_3C8], rcx
0000000000006add         call       j_memcpy                                    ; memcpy
0000000000006ae2         mov        rcx, qword [rbp+var_3C8]
0000000000006ae9         mov        r15, rax
0000000000006aec         mov        r8, qword [rbp+var_3D0]
0000000000006af3         jmp        loc_6174
0000000000006af8         align      256

                     loc_6b00:
0000000000006b00         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
0000000000006b03         jmp        loc_6174
0000000000006b08         align      16

                     loc_6b10:
0000000000006b10         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
0000000000006b13         mov        rbx, r14
0000000000006b16         jmp        loc_6964

                     loc_6b1b:
0000000000006b1b         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
0000000000006b20         mov        qword [rbp+var_3C8], rax
0000000000006b27         nop        word [rax+rax]

                     loc_6b30:
0000000000006b30         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
0000000000006b33         call       j_free                                      ; free
0000000000006b38         jmp        loc_6053
0000000000006b3d         align      64

                     loc_6b40:
0000000000006b40         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
0000000000006b47         mov        r8, qword [rbp+var_3D8]
0000000000006b4e         mov        rsi, r10
0000000000006b51         mov        rcx, 0xffffffffffffffff
0000000000006b58         mov        edx, 0x1
0000000000006b5d         mov        eax, 0x1
0000000000006b62         mov        qword [rbp+var_430], r10
0000000000006b69         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006b6e         mov        r10, qword [rbp+var_430]
0000000000006b75         jmp        loc_6496
0000000000006b7a         align      128

                     loc_6b80:
0000000000006b80         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
0000000000006b84         mov        r9, qword [rbp+var_3F0]
0000000000006b8b         fstp       tword [rsp+0x440+var_440]
0000000000006b8e         jmp        loc_6469
0000000000006b93         align      8

                     loc_6b98:
0000000000006b98         js         loc_6035                                    ; CODE XREF=vasnprintf+1187

0000000000006b9e         add        r12, r12
0000000000006ba1         cmp        r12, rax
0000000000006ba4         jae        loc_6389

0000000000006baa         nop        word [rax+rax]

                     loc_6bb0:
0000000000006bb0         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
0000000000006bb3         jne        loc_6035

0000000000006bb9         cmp        rax, 0xffffffffffffffff
0000000000006bbd         je         loc_6035

0000000000006bc3         cmp        r15, qword [rbp+var_3E8]
0000000000006bca         mov        r12, rax
0000000000006bcd         sete       dl
0000000000006bd0         test       r15, r15
0000000000006bd3         jne        loc_639c

0000000000006bd9         nop        dword [rax]

                     loc_6be0:
0000000000006be0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
0000000000006be3         mov        byte [rbp+var_3C8], dl
0000000000006be9         call       j_malloc                                    ; malloc
0000000000006bee         test       rax, rax
0000000000006bf1         mov        rcx, rax
0000000000006bf4         movzx      edx, byte [rbp+var_3C8]
0000000000006bfb         je         loc_6035

0000000000006c01         test       r14, r14
0000000000006c04         je         loc_6da0

0000000000006c0a         test       dl, dl
0000000000006c0c         je         loc_6da0

0000000000006c12         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006c15         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006c18         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006c1b         call       j_memcpy                                    ; memcpy
0000000000006c20         mov        r15, rax
0000000000006c23         jmp        loc_63bb
0000000000006c28         align      16

                     loc_6c30:
0000000000006c30         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
0000000000006c33         add        rbx, 0x1
0000000000006c37         jmp        loc_62eb
0000000000006c3c         align      64

                     loc_6c40:
0000000000006c40         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
0000000000006c43         mov        rbx, r14
0000000000006c46         jmp        loc_6964
0000000000006c4b         align      16

                     loc_6c50:
0000000000006c50         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
0000000000006c53         mov        rbx, r14
0000000000006c56         jmp        loc_6964
0000000000006c5b         align      32

                     loc_6c60:
0000000000006c60         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
0000000000006c64         mov        rbx, r14
0000000000006c67         jmp        loc_6964
0000000000006c6c         align      16

                     loc_6c70:
0000000000006c70         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
0000000000006c73         mov        byte [rbp+var_3C8], dl
0000000000006c79         call       j_malloc                                    ; malloc
0000000000006c7e         test       rax, rax
0000000000006c81         mov        rcx, rax
0000000000006c84         movzx      edx, byte [rbp+var_3C8]
0000000000006c8b         je         loc_6035

0000000000006c91         test       r14, r14
0000000000006c94         je         loc_6dd4

0000000000006c9a         test       dl, dl
0000000000006c9c         je         loc_6dd4

0000000000006ca2         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006ca5         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006ca8         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006cab         call       j_memcpy                                    ; memcpy
0000000000006cb0         mov        r15, rax
0000000000006cb3         jmp        loc_695f
0000000000006cb8         align      64

                     loc_6cc0:
0000000000006cc0         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
0000000000006cc3         jmp        loc_6174
0000000000006cc8         align      16

                     loc_6cd0:
0000000000006cd0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
0000000000006cd4         push       qword [rbp+var_3F0]
0000000000006cda         jmp        loc_6755
0000000000006cdf         align      32

                     loc_6ce0:
0000000000006ce0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
0000000000006ce4         push       qword [rbp+var_3F0]
0000000000006cea         sub        rsp, 0x10
0000000000006cee         fstp       tword [rsp+0x450+var_450]
0000000000006cf1         jmp        loc_681b
0000000000006cf6         align      256

                     loc_6d00:
0000000000006d00         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
0000000000006d07         mov        edi, dword [rbp+var_424]
0000000000006d0d         movsxd     rbx, ecx
0000000000006d10         add        rbx, r14
0000000000006d13         mov        dword [rax], edi
0000000000006d15         jmp        loc_6964
0000000000006d1a         align      32

                     loc_6d20:
0000000000006d20         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
0000000000006d27         je         loc_6d32

0000000000006d29         test       r15, r15
0000000000006d2c         jne        loc_6de9

                     loc_6d32:
0000000000006d32         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
0000000000006d39         test       rax, rax
0000000000006d3c         je         loc_6d46

0000000000006d3e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006d41         call       j_free                                      ; free

                     loc_6d46:
0000000000006d46         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
0000000000006d4d         mov        rdi, qword [rbp+var_2B8]
0000000000006d54         add        rax, 0x20
0000000000006d58         cmp        rdi, rax
0000000000006d5b         je         loc_6d62

0000000000006d5d         call       j_free                                      ; free

                     loc_6d62:
0000000000006d62         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
0000000000006d69         mov        rdi, qword [rbp+var_3A8]
0000000000006d70         add        rax, 0x10
0000000000006d74         cmp        rdi, rax
0000000000006d77         je         loc_6d7e

0000000000006d79         call       j_free                                      ; free

                     loc_6d7e:
0000000000006d7e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
0000000000006d85         xor        r15d, r15d
0000000000006d88         mov        dword [rax], 0x4b
0000000000006d8e         jmp        loc_60af
0000000000006d93         align      8

                     loc_6d98:
0000000000006d98         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
0000000000006d9b         jmp        loc_60af

                     loc_6da0:
0000000000006da0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
0000000000006da3         jmp        loc_63bb
0000000000006da8         align      16

                     loc_6db0:
0000000000006db0         js         loc_6035                                    ; CODE XREF=vasnprintf+2832

0000000000006db6         add        r12, r12
0000000000006db9         cmp        r12, rax
0000000000006dbc         jae        loc_69f6

                     loc_6dc2:
0000000000006dc2         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
0000000000006dc6         je         loc_6035

0000000000006dcc         mov        r12, rax
0000000000006dcf         jmp        loc_69f6

                     loc_6dd4:
0000000000006dd4         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
0000000000006dd7         jmp        loc_695f

                     loc_6ddc:
0000000000006ddc         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
0000000000006ddf         call       j_free                                      ; free
0000000000006de4         jmp        loc_6632

                     loc_6de9:
0000000000006de9         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
0000000000006dec         call       j_free                                      ; free
0000000000006df1         jmp        loc_6d32

                     loc_6df6:
0000000000006df6         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
0000000000006dfb         align      512

                     loc_6e00:
0000000000006e00         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
0000000000006e07         mov        rdi, qword [rbp+var_2B8]
0000000000006e0e         add        rax, 0x20
0000000000006e12         cmp        rdi, rax
0000000000006e15         je         loc_6e1c

0000000000006e17         call       j_free                                      ; free

                     loc_6e1c:
0000000000006e1c         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
0000000000006e23         mov        rdi, qword [rbp+var_3A8]
0000000000006e2a         add        rax, 0x10
0000000000006e2e         cmp        rdi, rax
0000000000006e31         je         loc_6e38

0000000000006e33         call       j_free                                      ; free

                     loc_6e38:
0000000000006e38         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
0000000000006e3d         xor        r15d, r15d
0000000000006e40         mov        dword [rax], 0x16
0000000000006e46         jmp        loc_60af

                     loc_6e4b:
0000000000006e4b         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
0000000000006e4e         xor        eax, eax
0000000000006e50         add        rbx, 0x1
0000000000006e54         jb         loc_6f60

0000000000006e5a         cmp        r12, rbx
0000000000006e5d         jae        loc_6eac

0000000000006e5f         test       r12, r12
0000000000006e62         jne        loc_6f99

0000000000006e68         cmp        rbx, 0xc
0000000000006e6c         ja         loc_6f7e

0000000000006e72         mov        r12d, 0xc

                     loc_6e78:
0000000000006e78         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
0000000000006e7f         sete       r13b
0000000000006e83         test       r15, r15
0000000000006e86         je         loc_6f2c

0000000000006e8c         test       r13b, r13b
0000000000006e8f         jne        loc_6f2c

0000000000006e95         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006e98         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006e9b         call       j_realloc                                   ; realloc
0000000000006ea0         test       rax, rax
0000000000006ea3         je         loc_6b1b

0000000000006ea9         mov        r15, rax

                     loc_6eac:
0000000000006eac         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
0000000000006eb3         mov        byte [r15+r14], 0x0
0000000000006eb8         je         loc_6ed1

0000000000006eba         cmp        r12, rbx
0000000000006ebd         jbe        loc_6ed1

0000000000006ebf         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006ec2         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
0000000000006ec5         call       j_realloc                                   ; realloc
0000000000006eca         test       rax, rax
0000000000006ecd         cmovne     r15, rax

                     loc_6ed1:
0000000000006ed1         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
0000000000006ed8         test       rax, rax
0000000000006edb         je         loc_6ee5

0000000000006edd         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006ee0         call       j_free                                      ; free

                     loc_6ee5:
0000000000006ee5         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
0000000000006eec         mov        rdi, qword [rbp+var_2B8]
0000000000006ef3         add        rax, 0x20
0000000000006ef7         cmp        rdi, rax
0000000000006efa         je         loc_6f01

0000000000006efc         call       j_free                                      ; free

                     loc_6f01:
0000000000006f01         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
0000000000006f08         mov        rdi, qword [rbp+var_3A8]
0000000000006f0f         add        rax, 0x10
0000000000006f13         cmp        rdi, rax
0000000000006f16         je         loc_6f1d

0000000000006f18         call       j_free                                      ; free

                     loc_6f1d:
0000000000006f1d         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
0000000000006f24         mov        qword [rax], r14
0000000000006f27         jmp        loc_60af

                     loc_6f2c:
0000000000006f2c         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
0000000000006f2f         call       j_malloc                                    ; malloc
0000000000006f34         test       rax, rax
0000000000006f37         mov        rcx, rax
0000000000006f3a         je         loc_6035

0000000000006f40         test       r14, r14
0000000000006f43         je         loc_6fb0

0000000000006f45         test       r13b, r13b
0000000000006f48         je         loc_6fb0

0000000000006f4a         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006f4d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006f50         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006f53         call       j_memcpy                                    ; memcpy
0000000000006f58         mov        r15, rax
0000000000006f5b         jmp        loc_6eac

                     loc_6f60:
0000000000006f60         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
0000000000006f64         mov        eax, 0x1
0000000000006f69         je         loc_6eac

0000000000006f6f         test       r12, r12
0000000000006f72         je         loc_6035

0000000000006f78         js         loc_6035

                     loc_6f7e:
0000000000006f7e         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
0000000000006f81         jne        loc_6035

0000000000006f87         cmp        rbx, 0xffffffffffffffff
0000000000006f8b         je         loc_6035

0000000000006f91         mov        r12, rbx
0000000000006f94         jmp        loc_6e78

                     loc_6f99:
0000000000006f99         js         loc_6035                                    ; CODE XREF=vasnprintf+3986

0000000000006f9f         add        r12, r12
0000000000006fa2         cmp        r12, rbx
0000000000006fa5         jae        loc_6e78

0000000000006fab         jmp        loc_6f7e
0000000000006fad         align      16

                     loc_6fb0:
0000000000006fb0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
0000000000006fb3         jmp        loc_6eac

                     loc_6fb8:
0000000000006fb8         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
0000000000006fbc         je         loc_63e0

0000000000006fc2         jmp        loc_6041

                     loc_6fc7:
0000000000006fc7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_6fcc:
0000000000006fcc         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
0000000000006fd0         mov        edx, 0x1
0000000000006fd5         je         loc_63bb

0000000000006fdb         test       r12, r12
0000000000006fde         je         loc_6035

0000000000006fe4         jns        loc_6bb0

0000000000006fea         jmp        loc_6035
0000000000006fef         align      16                                          ; End of unwind block (FDE at 0xa22c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
0000000000006ff0         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0xa25c), CODE XREF=vasnprintf+108
0000000000006ff4         mov        rax, qword [rsi+8]
0000000000006ff8         je         loc_705d

0000000000006ffa         lea        r8, qword [aNull+8]                         ; 0x9130
0000000000007001         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
0000000000007008         lea        r9, qword [aNull]                           ; "(NULL)"
000000000000700f         xor        ecx, ecx
0000000000007011         nop        dword [rax]
0000000000007018         cmp        dword [rax], 0x16
000000000000701b         ja         loc_7060

000000000000701d         mov        edx, dword [rax]
000000000000701f         movsxd     rdx, dword [r8+rdx*4]
0000000000007023         add        rdx, r8
0000000000007026         jmp        rdx
                        ; endp
0000000000007028         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7030:
0000000000007030         mov        rdx, qword [rdi+8]
0000000000007034         add        rdx, 0xf
0000000000007038         and        rdx, 0xfffffffffffffff0
000000000000703c         lea        r11, qword [rdx+0x10]
0000000000007040         mov        qword [rdi+8], r11
0000000000007044         fld        tword [rdx]
0000000000007046         fstp       tword [rax+0x10]
0000000000007049         nop        dword [rax]
0000000000007050         add        rcx, 0x1                                    ; CODE XREF=sub_7066+137, sub_7066+183
0000000000007054         add        rax, 0x20
0000000000007058         cmp        qword [rsi], rcx
000000000000705b         ja         printf_fetchargs+40
                        ; endp

                     loc_705d:
000000000000705d         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
000000000000705f         ret
                        ; endp

                     loc_7060:
0000000000007060         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
0000000000007065         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7066:
0000000000007066         mov        r11d, dword [rdi]
0000000000007069         cmp        r11d, 0x2f
000000000000706d         ja         loc_71aa

0000000000007073         mov        edx, r11d
0000000000007076         add        rdx, qword [rdi+0x10]
000000000000707a         add        r11d, 0x8
000000000000707e         mov        dword [rdi], r11d

                     loc_7081:
0000000000007081         mov        rdx, qword [rdx]                            ; CODE XREF=sub_7150+102
0000000000007084         mov        qword [rax+0x10], rdx
0000000000007088         jmp        sub_7030+32
                        ; endp
000000000000708a         mov        r11d, dword [rdi]
000000000000708d         cmp        r11d, 0x2f
0000000000007091         ja         sub_71cc                                    ; sub_71cc
0000000000007097         mov        edx, r11d
000000000000709a         add        rdx, qword [rdi+0x10]
000000000000709e         add        r11d, 0x8
00000000000070a2         mov        dword [rdi], r11d

                     loc_70a5:
00000000000070a5         mov        edx, dword [rdx]                            ; CODE XREF=sub_71cc+12
00000000000070a7         mov        dword [rax+0x10], edx
00000000000070aa         jmp        sub_7030+32
                        ; endp
00000000000070ac         mov        r11d, dword [rdi]
00000000000070af         cmp        r11d, 0x2f
00000000000070b3         ja         sub_71bb                                    ; sub_71bb
00000000000070b9         mov        edx, r11d
00000000000070bc         add        rdx, qword [rdi+0x10]
00000000000070c0         add        r11d, 0x8
00000000000070c4         mov        dword [rdi], r11d

                     loc_70c7:
00000000000070c7         mov        edx, dword [rdx]                            ; CODE XREF=sub_71bb+12
00000000000070c9         mov        byte [rax+0x10], dl
00000000000070cc         jmp        sub_7030+32
                        ; endp
00000000000070ce         mov        r11d, dword [rdi]
00000000000070d1         cmp        r11d, 0x2f
00000000000070d5         ja         sub_7150+42
00000000000070db         mov        edx, r11d
00000000000070de         add        rdx, qword [rdi+0x10]
00000000000070e2         add        r11d, 0x8
00000000000070e6         mov        dword [rdi], r11d
00000000000070e9         mov        edx, dword [rdx]                            ; CODE XREF=sub_7150+54
00000000000070eb         mov        word [rax+0x10], dx
00000000000070ef         jmp        sub_7030+32
00000000000070f4         mov        r11d, dword [rdi]
00000000000070f7         cmp        r11d, 0x2f
00000000000070fb         ja         sub_7150+59
0000000000007101         mov        edx, r11d
0000000000007104         add        rdx, qword [rdi+0x10]
0000000000007108         add        r11d, 0x8
000000000000710c         mov        dword [rdi], r11d
000000000000710f         mov        rdx, qword [rdx]                            ; CODE XREF=sub_7150+71
0000000000007112         test       rdx, rdx
0000000000007115         cmove      rdx, r9
0000000000007119         mov        qword [rax+0x10], rdx
000000000000711d         jmp        sub_7030+32
0000000000007122         mov        r11d, dword [rdi+4]
0000000000007126         cmp        r11d, 0xaf
000000000000712d         ja         sub_71dd                                    ; sub_71dd
0000000000007133         mov        edx, r11d
0000000000007136         add        rdx, qword [rdi+0x10]
000000000000713a         add        r11d, 0x10
000000000000713e         mov        dword [rdi+4], r11d

                     loc_7142:
0000000000007142         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_71dd+12
0000000000007146         movsd      qword [rax+0x10], xmm0
000000000000714b         jmp        sub_7030+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7150:
0000000000007150         mov        r11d, dword [rdi]
0000000000007153         cmp        r11d, 0x2f
0000000000007157         ja         loc_719c

0000000000007159         mov        edx, r11d
000000000000715c         add        rdx, qword [rdi+0x10]
0000000000007160         add        r11d, 0x8
0000000000007164         mov        dword [rdi], r11d

                     loc_7167:
0000000000007167         mov        rdx, qword [rdx]                            ; CODE XREF=sub_7150+88
000000000000716a         test       rdx, rdx
000000000000716d         cmove      rdx, r10
0000000000007171         mov        qword [rax+0x10], rdx
0000000000007175         jmp        sub_7030+32
                        ; endp
000000000000717a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7066+111
000000000000717e         lea        r11, qword [rdx+8]
0000000000007182         mov        qword [rdi+8], r11
0000000000007186         jmp        sub_7066+131
000000000000718b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7066+149
000000000000718f         lea        r11, qword [rdx+8]
0000000000007193         mov        qword [rdi+8], r11
0000000000007197         jmp        sub_7066+169

                     loc_719c:
000000000000719c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7150+7
00000000000071a0         lea        r11, qword [rdx+8]
00000000000071a4         mov        qword [rdi+8], r11
00000000000071a8         jmp        loc_7167

                     loc_71aa:
00000000000071aa         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7066+7
00000000000071ae         lea        r11, qword [rdx+8]
00000000000071b2         mov        qword [rdi+8], r11
00000000000071b6         jmp        loc_7081


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_71bb:
00000000000071bb         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7066+77
00000000000071bf         lea        r11, qword [rdx+8]
00000000000071c3         mov        qword [rdi+8], r11
00000000000071c7         jmp        loc_70c7


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_71cc:
00000000000071cc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7066+43
00000000000071d0         lea        r11, qword [rdx+8]
00000000000071d4         mov        qword [rdi+8], r11
00000000000071d8         jmp        loc_70a5


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_71dd:
00000000000071dd         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7066+199
00000000000071e1         lea        r11, qword [rdx+8]
00000000000071e5         mov        qword [rdi+8], r11
00000000000071e9         jmp        loc_7142


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_71ee:
00000000000071ee         nop                                                    ; End of unwind block (FDE at 0xa25c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
00000000000071f0         push       r15                                         ; Begin of unwind block (FDE at 0xa274), CODE XREF=vasnprintf+89
00000000000071f2         push       r14
00000000000071f4         lea        rcx, qword [rsi+0x20]
00000000000071f8         push       r13
00000000000071fa         push       r12
00000000000071fc         lea        rax, qword [rdx+0x10]
0000000000007200         push       rbp
0000000000007201         push       rbx
0000000000007202         mov        r14, rsi
0000000000007205         mov        r15, rdx
0000000000007208         xor        ebx, ebx
000000000000720a         mov        r9d, 0x7
0000000000007210         sub        rsp, 0x58
0000000000007214         mov        r10d, 0x7
000000000000721a         mov        qword [rsi], 0x0
0000000000007221         mov        qword [rsi+8], rcx
0000000000007225         mov        qword [rsp+0x88+var_60], rcx
000000000000722a         mov        r8, 0xffffffffffffffff
0000000000007231         mov        qword [rdx], 0x0
0000000000007238         mov        qword [rsp+0x88+var_80], rax
000000000000723d         mov        qword [rdx+8], rax
0000000000007241         mov        qword [rsp+0x88+var_70], 0x0
000000000000724a         mov        qword [rsp+0x88+var_78], 0x0
0000000000007253         mov        qword [rsp+0x88+var_68], 0x0
000000000000725c         jmp        loc_726b
000000000000725e         align      32

                     loc_7260:
0000000000007260         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
0000000000007262         lea        rbp, qword [rdi+1]
0000000000007266         je         loc_72a8

                     loc_7268:
0000000000007268         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_726b:
000000000000726b         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
000000000000726e         test       al, al
0000000000007270         jne        loc_7260

0000000000007272         lea        rax, qword [rbx+rbx*4]
0000000000007276         lea        rax, qword [rbx+rax*2]
000000000000727a         mov        qword [rcx+rax*8], rdi
000000000000727e         mov        rax, qword [rsp+0x88+var_78]
0000000000007283         mov        qword [r14+0x10], rax
0000000000007287         mov        rax, qword [rsp+0x88+var_70]
000000000000728c         mov        qword [r14+0x18], rax
0000000000007290         xor        eax, eax

                     loc_7292:
0000000000007292         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
0000000000007296         pop        rbx
0000000000007297         pop        rbp
0000000000007298         pop        r12
000000000000729a         pop        r13
000000000000729c         pop        r14
000000000000729e         pop        r15
00000000000072a0         ret
                        ; endp
00000000000072a1         align      8

                     loc_72a8:
00000000000072a8         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
00000000000072ac         mov        r13, r8
00000000000072af         lea        rax, qword [rbx+rax*2]
00000000000072b3         lea        r12, qword [rcx+rax*8]
00000000000072b7         mov        qword [r12], rdi
00000000000072bb         mov        dword [r12+0x10], 0x0
00000000000072c4         mov        qword [r12+0x18], 0x0
00000000000072cd         mov        qword [r12+0x20], 0x0
00000000000072d6         mov        qword [r12+0x28], r8
00000000000072db         mov        qword [r12+0x30], 0x0
00000000000072e4         mov        qword [r12+0x38], 0x0
00000000000072ed         mov        qword [r12+0x40], r8
00000000000072f2         mov        qword [r12+0x50], r8
00000000000072f7         movzx      ebx, byte [rdi+1]
00000000000072fb         lea        eax, dword [rbx-0x30]
00000000000072fe         cmp        al, 0x9
0000000000007300         ja         loc_733e

0000000000007302         jmp        loc_773a
0000000000007307         align      16

                     loc_7310:
0000000000007310         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
0000000000007313         je         loc_7358

0000000000007315         cmp        bl, 0x2b
0000000000007318         je         loc_7360

000000000000731a         cmp        bl, 0x20
000000000000731d         je         loc_7370

000000000000731f         cmp        bl, 0x23
0000000000007322         je         loc_7380

0000000000007324         cmp        bl, 0x30
0000000000007327         je         loc_7390

0000000000007329         cmp        bl, 0x49
000000000000732c         jne        loc_73a0

000000000000732e         or         dword [r12+0x10], 0x40
0000000000007334         nop        dword [rax]

                     loc_7338:
0000000000007338         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
000000000000733b         mov        rbp, rax

                     loc_733e:
000000000000733e         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
0000000000007342         cmp        bl, 0x27
0000000000007345         mov        rdx, rax
0000000000007348         jne        loc_7310

000000000000734a         or         dword [r12+0x10], 0x1
0000000000007350         jmp        loc_7338
0000000000007352         align      8

                     loc_7358:
0000000000007358         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000735e         jmp        loc_7338

                     loc_7360:
0000000000007360         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
0000000000007366         jmp        loc_7338
0000000000007368         align      16

                     loc_7370:
0000000000007370         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
0000000000007376         jmp        loc_7338
0000000000007378         align      128

                     loc_7380:
0000000000007380         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
0000000000007386         jmp        loc_7338
0000000000007388         align      16

                     loc_7390:
0000000000007390         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
0000000000007396         jmp        loc_7338
0000000000007398         align      32

                     loc_73a0:
00000000000073a0         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
00000000000073a3         je         loc_7559

00000000000073a9         lea        ecx, dword [rbx-0x30]
00000000000073ac         cmp        cl, 0x9
00000000000073af         jbe        loc_77c7

                     loc_73b5:
00000000000073b5         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
00000000000073b8         je         loc_768f

                     loc_73be:
00000000000073be         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
00000000000073c0         mov        esi, 0x1
00000000000073c5         jmp        loc_73f7
00000000000073c7         align      16

                     loc_73d0:
00000000000073d0         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
00000000000073d3         je         loc_7410

00000000000073d5         cmp        bl, 0x6c
00000000000073d8         je         loc_73f0

00000000000073da         cmp        bl, 0x6a
00000000000073dd         je         loc_73f0

00000000000073df         mov        edx, ebx
00000000000073e1         and        edx, 0xffffffdf
00000000000073e4         cmp        dl, 0x5a
00000000000073e7         je         loc_73f0

00000000000073e9         cmp        bl, 0x74
00000000000073ec         jne        loc_7418

00000000000073ee         nop

                     loc_73f0:
00000000000073f0         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_73f3:
00000000000073f3         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_73f7:
00000000000073f7         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
00000000000073fb         cmp        bl, 0x68
00000000000073fe         jne        loc_73d0

0000000000007400         mov        ecx, eax
0000000000007402         mov        edx, esi
0000000000007404         and        ecx, 0x1
0000000000007407         shl        edx, cl
0000000000007409         or         eax, edx
000000000000740b         jmp        loc_73f3
000000000000740d         align      16

                     loc_7410:
0000000000007410         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
0000000000007413         jmp        loc_73f3
0000000000007415         align      8

                     loc_7418:
0000000000007418         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000741b         cmp        dl, 0x53
000000000000741e         ja         loc_7a3b

0000000000007424         lea        rcx, qword [switch_table_91ac]              ; switch_table_91ac
000000000000742b         movzx      edx, dl
000000000000742e         movsxd     rdx, dword [rcx+rdx*4]
0000000000007432         add        rdx, rcx
0000000000007435         jmp        rdx                                         ; switch statement using table at 0x91ac, with 84 cases, 0x7437,0x74ab,0x78ec,0x7938,0x794b,0x7998,0x79ab,0x79cc,0x79dc,0x7a30,0x7a3b

                     loc_7437:
0000000000007437         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
000000000000743d         mov        ebx, 0x73
0000000000007442         nop        word [rax+rax]

                     loc_7448:
0000000000007448         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000744c         je         loc_7b07

0000000000007452         mov        qword [r12+0x50], r13

                     loc_7457:
0000000000007457         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000745a         mov        rcx, qword [r15+8]
000000000000745e         jbe        loc_7a80

                     loc_7464:
0000000000007464         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
0000000000007467         mov        rdx, rax
000000000000746a         shl        rdx, 0x5
000000000000746e         add        rdx, rcx
0000000000007471         cmp        rax, r13
0000000000007474         ja         loc_7496

0000000000007476         nop        word [cs:rax+rax]

                     loc_7480:
0000000000007480         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
0000000000007484         mov        dword [rdx], 0x0
000000000000748a         add        rdx, 0x20
000000000000748e         cmp        rax, r13
0000000000007491         jbe        loc_7480

0000000000007493         mov        qword [r15], rax

                     loc_7496:
0000000000007496         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000749a         lea        rax, qword [rcx+r13]
000000000000749e         mov        edx, dword [rax]
00000000000074a0         test       edx, edx
00000000000074a2         jne        loc_7a73

00000000000074a8         mov        dword [rax], r11d

                     loc_74ab:
00000000000074ab         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
00000000000074b0         mov        rax, qword [r14]
00000000000074b3         mov        qword [r12+8], rbp
00000000000074b8         lea        rbx, qword [rax+1]
00000000000074bc         cmp        r10, rbx
00000000000074bf         mov        qword [r14], rbx
00000000000074c2         ja         loc_7550

00000000000074c8         test       r10, r10
00000000000074cb         js         loc_7e77

00000000000074d1         add        r10, r10
00000000000074d4         movabs     rax, 0x2e8ba2e8ba2e8ba
00000000000074de         cmp        r10, rax
00000000000074e1         ja         loc_7e77

00000000000074e7         lea        rax, qword [r10+r10*4]
00000000000074eb         mov        rdi, qword [r14+8]
00000000000074ef         cmp        qword [rsp+0x88+var_60], rdi
00000000000074f4         mov        qword [rsp+0x88+var_48], r9
00000000000074f9         mov        qword [rsp+0x88+var_50], r10
00000000000074fe         lea        rax, qword [r10+rax*2]
0000000000007502         mov        qword [rsp+0x88+var_58], r8
0000000000007507         lea        rsi, qword [rax*8]
000000000000750f         je         loc_7bcd

0000000000007515         call       j_realloc                                   ; realloc
000000000000751a         test       rax, rax
000000000000751d         mov        rcx, rax
0000000000007520         mov        r8, qword [rsp+0x88+var_58]
0000000000007525         mov        r10, qword [rsp+0x88+var_50]
000000000000752a         mov        r9, qword [rsp+0x88+var_48]
000000000000752f         je         loc_7e77

0000000000007535         mov        rax, qword [rsp+0x88+var_60]
000000000000753a         cmp        rax, qword [r14+8]
000000000000753e         mov        rbx, qword [r14]
0000000000007541         je         loc_7bf0

                     loc_7547:
0000000000007547         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000754b         jmp        loc_7268

                     loc_7550:
0000000000007550         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
0000000000007554         jmp        loc_7268

                     loc_7559:
0000000000007559         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000755e         mov        ecx, 0x1
0000000000007563         mov        qword [r12+0x18], rbp
0000000000007568         mov        qword [r12+0x20], rax
000000000000756d         test       rsi, rsi
0000000000007570         cmovne     rcx, rsi
0000000000007574         mov        qword [rsp+0x88+var_78], rcx
0000000000007579         movzx      ecx, byte [rbp+1]
000000000000757d         lea        esi, dword [rcx-0x30]
0000000000007580         cmp        sil, 0x9
0000000000007584         jbe        loc_7865

                     loc_758a:
000000000000758a         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000758f         cmp        rsi, 0xffffffffffffffff
0000000000007593         lea        rdx, qword [rsi+1]
0000000000007597         mov        qword [r12+0x28], rsi
000000000000759c         je         loc_7a3b

00000000000075a2         mov        rbx, qword [rsp+0x88+var_68]
00000000000075a7         mov        rbp, rax
00000000000075aa         mov        qword [rsp+0x88+var_68], rdx

                     loc_75af:
00000000000075af         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
00000000000075b2         mov        rcx, qword [r15+8]
00000000000075b6         ja         loc_7c32

00000000000075bc         add        r9, r9
00000000000075bf         lea        rax, qword [rbx+1]
00000000000075c3         cmp        r9, rbx
00000000000075c6         cmovbe     r9, rax
00000000000075ca         movabs     rax, 0x7ffffffffffffff
00000000000075d4         cmp        r9, rax
00000000000075d7         ja         loc_7e7b

00000000000075dd         mov        rsi, r9
00000000000075e0         mov        qword [rsp+0x88+var_48], r9
00000000000075e5         mov        qword [rsp+0x88+var_50], r10
00000000000075ea         shl        rsi, 0x5
00000000000075ee         cmp        qword [rsp+0x88+var_80], rcx
00000000000075f3         mov        qword [rsp+0x88+var_58], r8
00000000000075f8         je         loc_7d11

00000000000075fe         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007601         call       j_realloc                                   ; realloc
0000000000007606         mov        rdx, qword [r15+8]
000000000000760a         mov        r8, qword [rsp+0x88+var_58]
000000000000760f         mov        rcx, rax
0000000000007612         mov        r10, qword [rsp+0x88+var_50]
0000000000007617         mov        r9, qword [rsp+0x88+var_48]

                     loc_761c:
000000000000761c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
000000000000761f         je         loc_7ed7

0000000000007625         cmp        qword [rsp+0x88+var_80], rdx
000000000000762a         mov        rax, qword [r15]
000000000000762d         je         loc_7deb

                     loc_7633:
0000000000007633         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_7637:
0000000000007637         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
000000000000763a         shl        rdx, 0x5
000000000000763e         add        rdx, rcx
0000000000007641         cmp        rax, rbx
0000000000007644         ja         loc_7666

0000000000007646         nop        word [cs:rax+rax]

                     loc_7650:
0000000000007650         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
0000000000007654         mov        dword [rdx], 0x0
000000000000765a         add        rdx, 0x20
000000000000765e         cmp        rax, rbx
0000000000007661         jbe        loc_7650

0000000000007663         mov        qword [r15], rax

                     loc_7666:
0000000000007666         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
000000000000766a         lea        rax, qword [rcx+rbx]
000000000000766e         mov        edx, dword [rax]
0000000000007670         test       edx, edx
0000000000007672         jne        loc_7b4b

0000000000007678         mov        dword [rax], 0x5
000000000000767e         movzx      ebx, byte [rbp]
0000000000007682         lea        rdx, qword [rbp+1]
0000000000007686         cmp        bl, 0x2e
0000000000007689         jne        loc_73be

                     loc_768f:
000000000000768f         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
0000000000007693         mov        qword [r12+0x30], rbp
0000000000007698         jne        loc_781e

000000000000769e         mov        rsi, qword [rsp+0x88+var_70]
00000000000076a3         lea        r11, qword [rbp+2]
00000000000076a7         mov        eax, 0x2
00000000000076ac         mov        qword [r12+0x38], r11
00000000000076b1         cmp        rsi, 0x2
00000000000076b5         cmovae     rax, rsi
00000000000076b9         mov        qword [rsp+0x88+var_70], rax
00000000000076be         movsx      eax, byte [rbp+2]
00000000000076c2         lea        edx, dword [rax-0x30]
00000000000076c5         cmp        dl, 0x9
00000000000076c8         jbe        loc_7d5c

                     loc_76ce:
00000000000076ce         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
00000000000076d3         cmp        rbx, 0xffffffffffffffff
00000000000076d7         je         loc_7d35

                     loc_76dd:
00000000000076dd         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
00000000000076e0         mov        rcx, qword [r15+8]
00000000000076e4         jbe        loc_7c4f

00000000000076ea         mov        rax, qword [r15]

                     loc_76ed:
00000000000076ed         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
00000000000076f0         shl        rdx, 0x5
00000000000076f4         add        rdx, rcx
00000000000076f7         cmp        rax, rbx
00000000000076fa         ja         loc_7716

00000000000076fc         nop        dword [rax]

                     loc_7700:
0000000000007700         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
0000000000007704         mov        dword [rdx], 0x0
000000000000770a         add        rdx, 0x20
000000000000770e         cmp        rax, rbx
0000000000007711         jbe        loc_7700

0000000000007713         mov        qword [r15], rax

                     loc_7716:
0000000000007716         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
000000000000771a         lea        rax, qword [rcx+rbx]
000000000000771e         mov        edx, dword [rax]
0000000000007720         test       edx, edx
0000000000007722         jne        loc_7c3a

0000000000007728         mov        dword [rax], 0x5
000000000000772e         mov        rbp, r11
0000000000007731         movzx      ebx, byte [r11]
0000000000007735         jmp        loc_73be

                     loc_773a:
000000000000773a         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
000000000000773d         nop        dword [rax]

                     loc_7740:
0000000000007740         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
0000000000007744         movzx      edx, byte [rax]
0000000000007747         lea        ecx, dword [rdx-0x30]
000000000000774a         cmp        cl, 0x9
000000000000774d         jbe        loc_7740

000000000000774f         cmp        dl, 0x24
0000000000007752         mov        r13, r8
0000000000007755         jne        loc_733e

000000000000775b         xor        edx, edx

                     loc_775d:
000000000000775d         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
0000000000007760         movabs     rdi, 0x1999999999999999
000000000000776a         mov        rsi, r8
000000000000776d         sub        eax, 0x30
0000000000007770         cmp        rdx, rdi
0000000000007773         cdqe
0000000000007775         ja         loc_777e

0000000000007777         lea        rsi, qword [rdx+rdx*4]
000000000000777b         add        rsi, rsi

                     loc_777e:
000000000000777e         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_7781:
0000000000007781         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
0000000000007784         movzx      ebx, byte [rbp+1]
0000000000007788         setb       sil
000000000000778c         add        rbp, 0x1
0000000000007790         mov        rdx, rax
0000000000007793         movzx      esi, sil
0000000000007797         test       rsi, rsi
000000000000779a         lea        edi, dword [rbx-0x30]
000000000000779d         jne        loc_7b2e

00000000000077a3         cmp        dil, 0x9
00000000000077a7         jbe        loc_775d

00000000000077a9         mov        r13, rax
00000000000077ac         sub        r13, 0x1
00000000000077b0         cmp        r13, 0xfffffffffffffffd
00000000000077b4         ja         loc_7a3b

00000000000077ba         lea        rbp, qword [rcx+2]
00000000000077be         movzx      ebx, byte [rcx+2]
00000000000077c2         jmp        loc_733e

                     loc_77c7:
00000000000077c7         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
00000000000077cc         movzx      edi, byte [rbp]
00000000000077d0         mov        rsi, rbp
00000000000077d3         lea        ecx, dword [rdi-0x30]
00000000000077d6         cmp        cl, 0x9
00000000000077d9         jbe        loc_77e7

00000000000077db         jmp        loc_7810
00000000000077dd         align      32

                     loc_77e0:
00000000000077e0         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
00000000000077e3         add        rax, 0x1

                     loc_77e7:
00000000000077e7         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
00000000000077ea         lea        edx, dword [rdi-0x30]
00000000000077ed         cmp        dl, 0x9
00000000000077f0         jbe        loc_77e0

00000000000077f2         mov        rcx, rax
00000000000077f5         lea        rdx, qword [rbp+2]
00000000000077f9         mov        rbp, rax
00000000000077fc         sub        rcx, rsi
00000000000077ff         mov        rsi, qword [rsp+0x88+var_78]
0000000000007804         cmp        rsi, rcx
0000000000007807         cmovae     rcx, rsi
000000000000780b         mov        qword [rsp+0x88+var_78], rcx

                     loc_7810:
0000000000007810         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
0000000000007815         movzx      ebx, byte [rbp]
0000000000007819         jmp        loc_73b5

                     loc_781e:
000000000000781e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
0000000000007822         sub        eax, 0x30
0000000000007825         cmp        al, 0x9
0000000000007827         ja         loc_783e

0000000000007829         nop        dword [rax]

                     loc_7830:
0000000000007830         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
0000000000007834         movzx      eax, byte [rdx]
0000000000007837         sub        eax, 0x30
000000000000783a         cmp        al, 0x9
000000000000783c         jbe        loc_7830

                     loc_783e:
000000000000783e         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
0000000000007843         mov        rax, rdx
0000000000007846         mov        qword [r12+0x38], rdx
000000000000784b         sub        rax, rbp
000000000000784e         movzx      ebx, byte [rdx]
0000000000007851         mov        rbp, rdx
0000000000007854         cmp        rsi, rax
0000000000007857         cmovae     rax, rsi
000000000000785b         mov        qword [rsp+0x88+var_70], rax
0000000000007860         jmp        loc_73be

                     loc_7865:
0000000000007865         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_7868:
0000000000007868         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
000000000000786c         movzx      edi, byte [rsi]
000000000000786f         lea        r11d, dword [rdi-0x30]
0000000000007873         cmp        r11b, 0x9
0000000000007877         jbe        loc_7868

0000000000007879         cmp        dil, 0x24
000000000000787d         jne        loc_758a

0000000000007883         xor        esi, esi

                     loc_7885:
0000000000007885         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
0000000000007888         movabs     rdi, 0x1999999999999999
0000000000007892         mov        rcx, r8
0000000000007895         sub        eax, 0x30
0000000000007898         cmp        rsi, rdi
000000000000789b         cdqe
000000000000789d         ja         loc_78a6

000000000000789f         lea        rcx, qword [rsi+rsi*4]
00000000000078a3         add        rcx, rcx

                     loc_78a6:
00000000000078a6         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_78a9:
00000000000078a9         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
00000000000078ac         add        rax, rcx
00000000000078af         movzx      ecx, byte [rdx+1]
00000000000078b3         setb       r11b
00000000000078b7         add        rdx, 0x1
00000000000078bb         mov        rsi, rax
00000000000078be         test       r11, r11
00000000000078c1         lea        edi, dword [rcx-0x30]
00000000000078c4         jne        loc_7dce

00000000000078ca         cmp        dil, 0x9
00000000000078ce         jbe        loc_7885

00000000000078d0         lea        rbx, qword [rax-1]
00000000000078d4         cmp        rbx, 0xfffffffffffffffd
00000000000078d8         ja         loc_7a3b

00000000000078de         mov        qword [r12+0x28], rbx
00000000000078e3         add        rbp, 0x2
00000000000078e7         jmp        loc_75af

                     loc_78ec:
00000000000078ec         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
00000000000078ef         mov        r11d, 0x16
00000000000078f5         jg         loc_7448

00000000000078fb         test       al, 0x4
00000000000078fd         jne        loc_7448

0000000000007903         cmp        eax, 0x7
0000000000007906         mov        r11d, 0x15
000000000000790c         jg         loc_7448

0000000000007912         test       al, 0x2
0000000000007914         mov        r11d, 0x12
000000000000791a         jne        loc_7448

0000000000007920         xor        r11d, r11d
0000000000007923         test       al, 0x1
0000000000007925         sete       r11b
0000000000007929         add        r11d, 0x13
000000000000792d         jmp        loc_7448
0000000000007932         align      8

                     loc_7938:
0000000000007938         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
000000000000793b         cmp        eax, 0x7
000000000000793e         setg       r11b
0000000000007942         add        r11d, 0xd
0000000000007946         jmp        loc_7448

                     loc_794b:
000000000000794b         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
000000000000794e         mov        r11d, 0x9
0000000000007954         jg         loc_7448

000000000000795a         test       al, 0x4
000000000000795c         jne        loc_7448

0000000000007962         cmp        eax, 0x7
0000000000007965         mov        r11d, 0x7
000000000000796b         jg         loc_7448

0000000000007971         test       al, 0x2
0000000000007973         mov        r11d, 0x1
0000000000007979         jne        loc_7448

000000000000797f         and        eax, 0x1
0000000000007982         cmp        eax, 0x1
0000000000007985         sbb        r11d, r11d
0000000000007988         and        r11d, 0x2
000000000000798c         add        r11d, 0x3
0000000000007990         jmp        loc_7448
0000000000007995         align      8

                     loc_7998:
0000000000007998         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
000000000000799b         cmp        eax, 0x7
000000000000799e         setg       r11b
00000000000079a2         add        r11d, 0xf
00000000000079a6         jmp        loc_7448

                     loc_79ab:
00000000000079ab         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
00000000000079ae         mov        r11d, 0xc
00000000000079b4         jg         loc_7448

00000000000079ba         xor        r11d, r11d
00000000000079bd         test       al, 0x4
00000000000079bf         setne      r11b
00000000000079c3         add        r11d, 0xb
00000000000079c7         jmp        loc_7448

                     loc_79cc:
00000000000079cc         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
00000000000079d2         mov        ebx, 0x63
00000000000079d7         jmp        loc_7448

                     loc_79dc:
00000000000079dc         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
00000000000079df         mov        r11d, 0xa
00000000000079e5         jg         loc_7448

00000000000079eb         test       al, 0x4
00000000000079ed         jne        loc_7448

00000000000079f3         cmp        eax, 0x7
00000000000079f6         mov        r11d, 0x8
00000000000079fc         jg         loc_7448

0000000000007a02         test       al, 0x2
0000000000007a04         mov        r11d, 0x2
0000000000007a0a         jne        loc_7448

0000000000007a10         and        eax, 0x1
0000000000007a13         cmp        eax, 0x1
0000000000007a16         sbb        r11d, r11d
0000000000007a19         and        r11d, 0x2
0000000000007a1d         add        r11d, 0x4
0000000000007a21         jmp        loc_7448
0000000000007a26         align      16

                     loc_7a30:
0000000000007a30         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
0000000000007a36         jmp        loc_7448

                     loc_7a3b:
0000000000007a3b         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_7a3f:
0000000000007a3f         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
0000000000007a44         je         loc_7a4e

0000000000007a46         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000007a49         call       j_free                                      ; free

                     loc_7a4e:
0000000000007a4e         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
0000000000007a52         cmp        qword [rsp+0x88+var_60], rdi
0000000000007a57         je         loc_7a5e

0000000000007a59         call       j_free                                      ; free

                     loc_7a5e:
0000000000007a5e         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
0000000000007a63         mov        dword [rax], 0x16
0000000000007a69         mov        eax, 0xffffffff
0000000000007a6e         jmp        loc_7292

                     loc_7a73:
0000000000007a73         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
0000000000007a76         je         loc_74ab

0000000000007a7c         jmp        loc_7a3f
0000000000007a7e         align      128

                     loc_7a80:
0000000000007a80         add        r9, r9                                      ; CODE XREF=printf_parse+622
0000000000007a83         lea        rax, qword [r13+1]
0000000000007a87         cmp        r9, r13
0000000000007a8a         cmovbe     r9, rax
0000000000007a8e         movabs     rax, 0x7ffffffffffffff
0000000000007a98         cmp        r9, rax
0000000000007a9b         ja         loc_7e7b

0000000000007aa1         mov        rsi, r9
0000000000007aa4         mov        qword [rsp+0x88+var_40], r9
0000000000007aa9         mov        qword [rsp+0x88+var_48], r10
0000000000007aae         shl        rsi, 0x5
0000000000007ab2         cmp        qword [rsp+0x88+var_80], rcx
0000000000007ab7         mov        qword [rsp+0x88+var_50], r8
0000000000007abc         mov        dword [rsp+0x88+var_58], r11d
0000000000007ac1         je         loc_7b61

0000000000007ac7         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007aca         call       j_realloc                                   ; realloc
0000000000007acf         test       rax, rax
0000000000007ad2         mov        rcx, rax
0000000000007ad5         mov        r11d, dword [rsp+0x88+var_58]
0000000000007ada         mov        r8, qword [rsp+0x88+var_50]
0000000000007adf         mov        r10, qword [rsp+0x88+var_48]
0000000000007ae4         mov        r9, qword [rsp+0x88+var_40]
0000000000007ae9         je         loc_7e77

0000000000007aef         mov        rax, qword [rsp+0x88+var_80]
0000000000007af4         cmp        rax, qword [r15+8]
0000000000007af8         je         loc_7b89

                     loc_7afe:
0000000000007afe         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
0000000000007b02         jmp        loc_7464

                     loc_7b07:
0000000000007b07         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
0000000000007b0c         cmp        rsi, 0xffffffffffffffff
0000000000007b10         lea        rax, qword [rsi+1]
0000000000007b14         mov        qword [r12+0x50], rsi
0000000000007b19         je         loc_7a3b

0000000000007b1f         mov        r13, qword [rsp+0x88+var_68]
0000000000007b24         mov        qword [rsp+0x88+var_68], rax
0000000000007b29         jmp        loc_7457

                     loc_7b2e:
0000000000007b2e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
0000000000007b32         ja         loc_7a3b

0000000000007b38         movsx      eax, bl
0000000000007b3b         mov        rsi, r8
0000000000007b3e         mov        rcx, rbp
0000000000007b41         sub        eax, 0x30
0000000000007b44         cdqe
0000000000007b46         jmp        loc_7781

                     loc_7b4b:
0000000000007b4b         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
0000000000007b4e         jne        loc_7a3f

0000000000007b54         movzx      ebx, byte [rbp]
0000000000007b58         lea        rdx, qword [rbp+1]
0000000000007b5c         jmp        loc_73b5

                     loc_7b61:
0000000000007b61         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
0000000000007b64         call       j_malloc                                    ; malloc
0000000000007b69         test       rax, rax
0000000000007b6c         mov        rcx, rax
0000000000007b6f         mov        r11d, dword [rsp+0x88+var_58]
0000000000007b74         mov        r8, qword [rsp+0x88+var_50]
0000000000007b79         mov        r10, qword [rsp+0x88+var_48]
0000000000007b7e         mov        r9, qword [rsp+0x88+var_40]
0000000000007b83         je         loc_7cec

                     loc_7b89:
0000000000007b89         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
0000000000007b8c         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
0000000000007b91         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007b94         mov        qword [rsp+0x88+var_40], r9
0000000000007b99         mov        qword [rsp+0x88+var_48], r10
0000000000007b9e         mov        qword [rsp+0x88+var_50], r8
0000000000007ba3         mov        dword [rsp+0x88+var_58], r11d
0000000000007ba8         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
0000000000007bac         call       j_memcpy                                    ; memcpy
0000000000007bb1         mov        r9, qword [rsp+0x88+var_40]
0000000000007bb6         mov        r10, qword [rsp+0x88+var_48]
0000000000007bbb         mov        rcx, rax
0000000000007bbe         mov        r8, qword [rsp+0x88+var_50]
0000000000007bc3         mov        r11d, dword [rsp+0x88+var_58]
0000000000007bc8         jmp        loc_7afe

                     loc_7bcd:
0000000000007bcd         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
0000000000007bd0         call       j_malloc                                    ; malloc
0000000000007bd5         test       rax, rax
0000000000007bd8         mov        rcx, rax
0000000000007bdb         mov        r8, qword [rsp+0x88+var_58]
0000000000007be0         mov        r10, qword [rsp+0x88+var_50]
0000000000007be5         mov        r9, qword [rsp+0x88+var_48]
0000000000007bea         je         loc_7cd9

                     loc_7bf0:
0000000000007bf0         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
0000000000007bf4         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
0000000000007bf9         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007bfc         mov        qword [rsp+0x88+var_48], r9
0000000000007c01         mov        qword [rsp+0x88+var_50], r10
0000000000007c06         lea        rdx, qword [rbx+rax*2]
0000000000007c0a         mov        qword [rsp+0x88+var_58], r8
0000000000007c0f         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000007c13         call       j_memcpy                                    ; memcpy
0000000000007c18         mov        rbx, qword [r14]
0000000000007c1b         mov        rcx, rax
0000000000007c1e         mov        r9, qword [rsp+0x88+var_48]
0000000000007c23         mov        r10, qword [rsp+0x88+var_50]
0000000000007c28         mov        r8, qword [rsp+0x88+var_58]
0000000000007c2d         jmp        loc_7547

                     loc_7c32:
0000000000007c32         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
0000000000007c35         jmp        loc_7637

                     loc_7c3a:
0000000000007c3a         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
0000000000007c3d         jne        loc_7a3f

0000000000007c43         movzx      ebx, byte [r11]
0000000000007c47         mov        rbp, r11
0000000000007c4a         jmp        loc_73be

                     loc_7c4f:
0000000000007c4f         add        r9, r9                                      ; CODE XREF=printf_parse+1268
0000000000007c52         lea        rax, qword [rbx+1]
0000000000007c56         cmp        r9, rbx
0000000000007c59         cmovbe     r9, rax
0000000000007c5d         movabs     rax, 0x7ffffffffffffff
0000000000007c67         cmp        r9, rax
0000000000007c6a         ja         loc_7e7b

0000000000007c70         mov        rsi, r9
0000000000007c73         mov        qword [rsp+0x88+var_40], r9
0000000000007c78         mov        qword [rsp+0x88+var_48], r10
0000000000007c7d         shl        rsi, 0x5
0000000000007c81         cmp        qword [rsp+0x88+var_80], rcx
0000000000007c86         mov        qword [rsp+0x88+var_50], r8
0000000000007c8b         mov        qword [rsp+0x88+var_58], r11
0000000000007c90         je         loc_7e4e

0000000000007c96         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007c99         call       j_realloc                                   ; realloc
0000000000007c9e         mov        rdx, qword [r15+8]
0000000000007ca2         mov        r11, qword [rsp+0x88+var_58]
0000000000007ca7         mov        rcx, rax
0000000000007caa         mov        r8, qword [rsp+0x88+var_50]
0000000000007caf         mov        r10, qword [rsp+0x88+var_48]
0000000000007cb4         mov        r9, qword [rsp+0x88+var_40]

                     loc_7cb9:
0000000000007cb9         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
0000000000007cbc         je         loc_7ed7

0000000000007cc2         cmp        qword [rsp+0x88+var_80], rdx
0000000000007cc7         mov        rax, qword [r15]
0000000000007cca         je         loc_7e90

                     loc_7cd0:
0000000000007cd0         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
0000000000007cd4         jmp        loc_76ed

                     loc_7cd9:
0000000000007cd9         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
0000000000007cdd         cmp        qword [rsp+0x88+var_80], rcx
0000000000007ce2         je         loc_7cfc

                     loc_7ce4:
0000000000007ce4         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
0000000000007ce7         call       j_free                                      ; free

                     loc_7cec:
0000000000007cec         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
0000000000007cf0         cmp        qword [rsp+0x88+var_60], rdi
0000000000007cf5         je         loc_7cfc

0000000000007cf7         call       j_free                                      ; free

                     loc_7cfc:
0000000000007cfc         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
0000000000007d01         mov        dword [rax], 0xc
0000000000007d07         mov        eax, 0xffffffff
0000000000007d0c         jmp        loc_7292

                     loc_7d11:
0000000000007d11         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
0000000000007d14         call       j_malloc                                    ; malloc
0000000000007d19         mov        rdx, qword [rsp+0x88+var_80]
0000000000007d1e         mov        rcx, rax
0000000000007d21         mov        r9, qword [rsp+0x88+var_48]
0000000000007d26         mov        r10, qword [rsp+0x88+var_50]
0000000000007d2b         mov        r8, qword [rsp+0x88+var_58]
0000000000007d30         jmp        loc_761c

                     loc_7d35:
0000000000007d35         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
0000000000007d3a         cmp        rsi, 0xffffffffffffffff
0000000000007d3e         lea        rax, qword [rsi+1]
0000000000007d42         mov        qword [r12+0x40], rsi
0000000000007d47         je         loc_7a3b

0000000000007d4d         mov        rbx, qword [rsp+0x88+var_68]
0000000000007d52         mov        qword [rsp+0x88+var_68], rax
0000000000007d57         jmp        loc_76dd

                     loc_7d5c:
0000000000007d5c         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_7d5f:
0000000000007d5f         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
0000000000007d63         movzx      ecx, byte [rdx]
0000000000007d66         lea        esi, dword [rcx-0x30]
0000000000007d69         cmp        sil, 0x9
0000000000007d6d         jbe        loc_7d5f

0000000000007d6f         cmp        cl, 0x24
0000000000007d72         jne        loc_76ce

0000000000007d78         xor        ecx, ecx

                     loc_7d7a:
0000000000007d7a         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
0000000000007d84         sub        eax, 0x30
0000000000007d87         mov        rdx, r8
0000000000007d8a         cmp        rcx, rsi
0000000000007d8d         cdqe
0000000000007d8f         ja         loc_7d98

0000000000007d91         lea        rdx, qword [rcx+rcx*4]
0000000000007d95         add        rdx, rdx

                     loc_7d98:
0000000000007d98         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_7d9b:
0000000000007d9b         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
0000000000007d9d         add        rdx, rax
0000000000007da0         movsx      eax, byte [r11+1]
0000000000007da5         setb       bl
0000000000007da8         add        r11, 0x1
0000000000007dac         mov        rcx, rdx
0000000000007daf         test       rbx, rbx
0000000000007db2         lea        edi, dword [rax-0x30]
0000000000007db5         je         loc_7e28

0000000000007db7         cmp        dil, 0x9
0000000000007dbb         ja         loc_7a3b

0000000000007dc1         sub        eax, 0x30
0000000000007dc4         mov        rdx, r8
0000000000007dc7         mov        rsi, r11
0000000000007dca         cdqe
0000000000007dcc         jmp        loc_7d9b

                     loc_7dce:
0000000000007dce         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
0000000000007dd2         ja         loc_7a3b

0000000000007dd8         movsx      eax, cl
0000000000007ddb         mov        rbp, rdx
0000000000007dde         mov        rcx, r8
0000000000007de1         sub        eax, 0x30
0000000000007de4         cdqe
0000000000007de6         jmp        loc_78a9

                     loc_7deb:
0000000000007deb         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
0000000000007df0         shl        rax, 0x5
0000000000007df4         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007df7         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000007dfa         mov        qword [rsp+0x88+var_48], r9
0000000000007dff         mov        qword [rsp+0x88+var_50], r10
0000000000007e04         mov        qword [rsp+0x88+var_58], r8
0000000000007e09         call       j_memcpy                                    ; memcpy
0000000000007e0e         mov        r9, qword [rsp+0x88+var_48]
0000000000007e13         mov        rcx, rax
0000000000007e16         mov        r10, qword [rsp+0x88+var_50]
0000000000007e1b         mov        rax, qword [r15]
0000000000007e1e         mov        r8, qword [rsp+0x88+var_58]
0000000000007e23         jmp        loc_7633

                     loc_7e28:
0000000000007e28         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
0000000000007e2c         jbe        loc_7d7a

0000000000007e32         lea        rbx, qword [rdx-1]
0000000000007e36         cmp        rbx, 0xfffffffffffffffd
0000000000007e3a         ja         loc_7a3b

0000000000007e40         mov        qword [r12+0x40], rbx
0000000000007e45         lea        r11, qword [rsi+2]
0000000000007e49         jmp        loc_76dd

                     loc_7e4e:
0000000000007e4e         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
0000000000007e51         call       j_malloc                                    ; malloc
0000000000007e56         mov        rdx, qword [rsp+0x88+var_80]
0000000000007e5b         mov        rcx, rax
0000000000007e5e         mov        r9, qword [rsp+0x88+var_40]
0000000000007e63         mov        r10, qword [rsp+0x88+var_48]
0000000000007e68         mov        r8, qword [rsp+0x88+var_50]
0000000000007e6d         mov        r11, qword [rsp+0x88+var_58]
0000000000007e72         jmp        loc_7cb9

                     loc_7e77:
0000000000007e77         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_7e7b:
0000000000007e7b         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
0000000000007e80         jne        loc_7ce4

0000000000007e86         jmp        loc_7cec
0000000000007e8b         align      16

                     loc_7e90:
0000000000007e90         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
0000000000007e95         shl        rax, 0x5
0000000000007e99         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007e9c         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000007e9f         mov        qword [rsp+0x88+var_40], r9
0000000000007ea4         mov        qword [rsp+0x88+var_48], r10
0000000000007ea9         mov        qword [rsp+0x88+var_50], r8
0000000000007eae         mov        qword [rsp+0x88+var_58], r11
0000000000007eb3         call       j_memcpy                                    ; memcpy
0000000000007eb8         mov        r9, qword [rsp+0x88+var_40]
0000000000007ebd         mov        rcx, rax
0000000000007ec0         mov        r10, qword [rsp+0x88+var_48]
0000000000007ec5         mov        rax, qword [r15]
0000000000007ec8         mov        r8, qword [rsp+0x88+var_50]
0000000000007ecd         mov        r11, qword [rsp+0x88+var_58]
0000000000007ed2         jmp        loc_7cd0

                     loc_7ed7:
0000000000007ed7         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
0000000000007eda         jmp        loc_7e7b
0000000000007edc         align      32                                          ; End of unwind block (FDE at 0xa274)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000007ee0         push       r15                                         ; Begin of unwind block (FDE at 0xa2c4), DATA XREF=_start+22
0000000000007ee2         push       r14
0000000000007ee4         mov        r15, rdx
0000000000007ee7         push       r13
0000000000007ee9         push       r12
0000000000007eeb         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000007ef2         push       rbp
0000000000007ef3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
0000000000007efa         push       rbx
0000000000007efb         mov        r13d, edi
0000000000007efe         mov        r14, rsi
0000000000007f01         sub        rbp, r12
0000000000007f04         sub        rsp, 0x8
0000000000007f08         sar        rbp, 0x3
0000000000007f0c         call       _init                                       ; _init
0000000000007f11         test       rbp, rbp
0000000000007f14         je         loc_7f36

0000000000007f16         xor        ebx, ebx
0000000000007f18         nop        dword [rax+rax]

                     loc_7f20:
0000000000007f20         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000007f23         mov        rsi, r14
0000000000007f26         mov        edi, r13d
0000000000007f29         call       qword [r12+rbx*8]
0000000000007f2d         add        rbx, 0x1
0000000000007f31         cmp        rbp, rbx
0000000000007f34         jne        loc_7f20

                     loc_7f36:
0000000000007f36         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
0000000000007f3a         pop        rbx
0000000000007f3b         pop        rbp
0000000000007f3c         pop        r12
0000000000007f3e         pop        r13
0000000000007f40         pop        r14
0000000000007f42         pop        r15
0000000000007f44         ret
                        ; endp
0000000000007f45         align      16                                          ; End of unwind block (FDE at 0xa2c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000007f50         ret                                                    ; Begin of unwind block (FDE at 0xa30c), DATA XREF=_start+15
                        ; endp
0000000000007f52         align      32                                          ; End of unwind block (FDE at 0xa30c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000007f60         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xa324), __dso_handle, CODE XREF=main+124
0000000000007f67         xor        esi, esi
0000000000007f69         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
0000000000007f6e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xa324)
0000000000007f6f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x7f70; 0x7f79[ (9 bytes)
        ; File offset : [32624; 32633[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000007f70         sub        rsp, 0x8
0000000000007f74         add        rsp, 0x8
0000000000007f78         ret
                        ; endp
0000000000007f79         db  0x00 ; '.'
0000000000007f7a         db  0x00 ; '.'
0000000000007f7b         db  0x00 ; '.'
0000000000007f7c         db  0x00 ; '.'
0000000000007f7d         db  0x00 ; '.'
0000000000007f7e         db  0x00 ; '.'
0000000000007f7f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x7f80; 0x92fc[ (4988 bytes)
        ; File offset : [32640; 37628[ (4988 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000007f80         db  0x01 ; '.'
0000000000007f81         db  0x00 ; '.'
0000000000007f82         db  0x02 ; '.'
0000000000007f83         db  0x00 ; '.'
                     a0123456789:
0000000000007f84         db         "0123456789", 0                             ; DATA XREF=main+1359, main+1390, all_digits_p+25
                     aWriteError:
0000000000007f8f         db         "write error", 0                            ; DATA XREF=io_error+13, close_stdout+67
0000000000007f9b         db  0x69 ; 'i'                                         ; DATA XREF=main+2776, seq_fast+11
0000000000007f9c         db  0x6e ; 'n'
0000000000007f9d         db  0x66 ; 'f'
0000000000007f9e         db  0x00 ; '.'
0000000000007f9f         db  0x73 ; 's'                                         ; DATA XREF=main+415, usage+385, usage+700, usage+884, usage+903, usage+937
0000000000007fa0         db  0x65 ; 'e'
0000000000007fa1         db  0x71 ; 'q'
0000000000007fa2         db  0x00 ; '.'
0000000000007fa3         db  0x5b ; '['                                         ; DATA XREF=usage+397
0000000000007fa4         db  0x00 ; '.'
                     aTestInvocation:
0000000000007fa5         db         "test invocation", 0                        ; DATA XREF=usage+436
                     aMulticallInvoc:
0000000000007fb5         db         "Multi-call invocation", 0                  ; DATA XREF=usage+484
                     aSha224sum:
0000000000007fcb         db         "sha224sum", 0                              ; DATA XREF=usage+501
                     aSha2Utilities:
0000000000007fd5         db         "sha2 utilities", 0                         ; DATA XREF=usage+513
                     aSha256sum:
0000000000007fe4         db         "sha256sum", 0                              ; DATA XREF=usage+404
                     aSha384sum:
0000000000007fee         db         "sha384sum", 0                              ; DATA XREF=usage+448
                     aSha512sum:
0000000000007ff8         db         "sha512sum", 0                              ; DATA XREF=usage+472
                     aNsOnlineHelpSn:
0000000000008002         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+586
0000000000008019         db  0x47 ; 'G'                                         ; DATA XREF=main+408, usage+614, usage+807, emit_bug_reporting_address+68
000000000000801a         db  0x4e ; 'N'
000000000000801b         db  0x55 ; 'U'
000000000000801c         db  0x20 ; ' '
                     aCoreutils:
000000000000801d         db         "coreutils", 0                              ; DATA XREF=main+81, main+105, usage+460
0000000000008027         db  0x65 ; 'e'                                         ; DATA XREF=usage+653, usage+846
0000000000008028         db  0x6e ; 'n'
0000000000008029         db  0x5f ; '_'
000000000000802a         db  0x00 ; '.'
                     aFullDocumentat:
000000000000802b         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+681, usage+870
                     aNotanumber:
0000000000008046         db         "not-a-number", 0                           ; DATA XREF=scan_arg+725
                     aInvalidSArgume:
0000000000008053         db         "invalid %s argument: %s", 0                ; DATA XREF=scan_arg+742
000000000000806b         db  0x78 ; 'x'                                         ; DATA XREF=scan_arg+157
000000000000806c         db  0x58 ; 'X'
000000000000806d         db  0x00 ; '.'
000000000000806e         db  0x65 ; 'e'                                         ; DATA XREF=scan_arg+248
000000000000806f         db  0x45 ; 'E'
0000000000008070         db  0x00 ; '.'
0000000000008071         db  0x25 ; '%'                                         ; DATA XREF=main+2187, main+2257
0000000000008072         db  0x4c ; 'L'
0000000000008073         db  0x67 ; 'g'
0000000000008074         db  0x00 ; '.'
                     aUsrlocalsharel:
0000000000008075         db         "/usr/local/share/locale", 0                ; DATA XREF=main+74
                     aFsw:
000000000000808d         db         "+f:s:w", 0                                 ; DATA XREF=main+190
                     aUlrichDrepper:
0000000000008094         db         "Ulrich Drepper", 0                         ; DATA XREF=main+401
                     aMissingOperand:
00000000000080a3         db         "missing operand", 0                        ; DATA XREF=main+2878
                     aExtraOperandS:
00000000000080b3         db         "extra operand %s", 0                       ; DATA XREF=main+2652
                     aFormatSHasNoDi:
00000000000080c4         db         "format %s has no %% directive", 0          ; DATA XREF=main+2478
                     a0:
00000000000080e2         db         "-+#0 '", 0                                 ; DATA XREF=main+1344
                     aFormatSEndsIn:
00000000000080e9         db         "format %s ends in %%", 0                   ; DATA XREF=main+3102
                     aEfgaefga:
00000000000080fe         db         "efgaEFGA", 0                               ; DATA XREF=main+1444
                     a0lf:
0000000000008107         db         "%0.Lf", 0                                  ; DATA XREF=main+2592, main+2719
                     a0ddlf:
000000000000810d         db         "%%0%d.%dLf", 0                             ; DATA XREF=main+2211
                     aDlf:
0000000000008118         db         "%%.%dLf", 0                                ; DATA XREF=main+2366
0000000000008120         db  0x43 ; 'C'                                         ; DATA XREF=main+1238, c_strtold+144, hard_locale+24
0000000000008121         db  0x00 ; '.'
                     aEqualwidth:
0000000000008122         db         "equal-width", 0
                     aFormat:
000000000000812e         db         "format", 0
                     aSeparator:
0000000000008135         db         "separator", 0
                     aHelp:
000000000000813f         db         "help", 0
                     aVersion:
0000000000008144         db         "version", 0
000000000000814c         align      16
                     aTrySHelpForMor:
0000000000008150         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
0000000000008177         align      8
                     aUsageSOptionLa:
0000000000008178         db         "Usage: %s [OPTION]... LAST\n  or:  %s [OPTION]... FIRST LAST\n  or:  %s [OPTION]... FIRST INCREMENT LAST\n", 0 ; DATA XREF=usage+93
                     aPrintNumbersFr:
00000000000081e0         db         "Print numbers from FIRST to LAST, in steps of INCREMENT.\n", 0 ; DATA XREF=usage+138
000000000000821a         align      32
                     aNmandatoryArgu:
0000000000008220         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+175
000000000000826b         align      16
                     aFFormatformatU:
0000000000008270         db         "  -f, --format=FORMAT      use printf style floating-point FORMAT\n  -s, --separator=STRING   use STRING to separate numbers (default: \n)\n  -w, --equal-width        equalize width by padding with leading zeroes\n", 0 ; DATA XREF=usage+212
0000000000008344         align      8
                     aHelpDisplayThi:
0000000000008348         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+249
0000000000008375         align      8
                     aVersionOutputV:
0000000000008378         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+286
00000000000083ae         align      16
                     aNifFirstOrIncr:
00000000000083b0         db         "\nIf FIRST or INCREMENT is omitted, it defaults to 1.  That is, an\nomitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.\nThe sequence of numbers ends when the sum of the current number and\nINCREMENT would become greater than LAST.\nFIRST, INC" ; DATA XREF=usage+323
00000000000084b0         db         "REMENT, and LAST are interpreted as floating point values.\nINCREMENT is usually positive if FIRST is smaller than LAST, and\nINCREMENT is usually negative if FIRST is greater than LAST.\nINCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be NaN.\n"
00000000000085b0         db         "", 0
00000000000085b1         align      8
                     aFormatMustBeSu:
00000000000085b8         db         "FORMAT must be suitable for printing one argument of type 'double';\nit defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixed point\ndecimal numbers with maximum precision PREC, and to %g otherwise.\n", 0 ; DATA XREF=usage+360
                     aHttpswwwgnuorg:
0000000000008688         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+607, usage+707, usage+800, usage+910, emit_bug_reporting_address+61
                     aReportAnyTrans:
00000000000086b0         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+951
00000000000086f7         align      8
                     aOrAvailableLoc:
00000000000086f8         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+750
000000000000872b         align      16
                     aInvalidFloatin:
0000000000008730         db         "invalid floating point argument: %s", 0    ; DATA XREF=scan_arg+802
0000000000008754         align      8
                     aFormatSHasUnkn:
0000000000008758         db         "format %s has unknown %%%c directive", 0   ; DATA XREF=main+3047
000000000000877d         align      128
                     aFormatSHasTooM:
0000000000008780         db         "format %s has too many %% directives", 0   ; DATA XREF=main+2997
00000000000087a5         align      8
                     aFormatStringMa:
00000000000087a8         db         "format string may not be specified when printing equal width strings", 0 ; DATA XREF=main+2946
00000000000087ed         align      16
                     aInvalidZeroInc:
00000000000087f0         db         "invalid Zero increment value: %s", 0       ; DATA XREF=main+2934
                     terminator:
0000000000008811         db  0x0a ; '.'                                         ; DATA XREF=main+1280
0000000000008812         db  0x00 ; '.'
                     a831:
0000000000008813         db         "8.31", 0                                   ; DATA XREF=Version
                     aSS:
0000000000008818         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
000000000000881f         align      32
                     aANullArgv0WasP:
0000000000008820         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000008858         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000008860         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000008861         db  0x74 ; 't'
0000000000008862         db  0x2d ; '-'
0000000000008863         db  0x00 ; '.'
0000000000008864         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000008865         db  0x80 ; '.'
0000000000008866         db  0x98 ; '.'
0000000000008867         db  0x00 ; '.'
0000000000008868         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000008869         db  0x80 ; '.'
000000000000886a         db  0x99 ; '.'
000000000000886b         db  0x00 ; '.'
000000000000886c         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000886d         db  0x07 ; '.'
000000000000886e         db  0x65 ; 'e'
000000000000886f         db  0x00 ; '.'
0000000000008870         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000008871         db  0xaf ; '.'
0000000000008872         db  0x00 ; '.'
0000000000008873         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_4100+219, sub_4100+261, sub_4100+1197
0000000000008874         db  0x00 ; '.'
0000000000008875         db  0x60 ; '`'                                         ; DATA XREF=sub_4100+395, sub_4100+422
0000000000008876         db  0x00 ; '.'
                     aLiteral:
0000000000008877         db         "literal", 0
                     aShell:
000000000000887f         db         "shell", 0
                     aShellalways:
0000000000008885         db         "shell-always", 0
0000000000008892         db  0x73 ; 's'
0000000000008893         db  0x68 ; 'h'
0000000000008894         db  0x65 ; 'e'
0000000000008895         db  0x6c ; 'l'
0000000000008896         db  0x6c ; 'l'
0000000000008897         db  0x2d ; '-'
                     aEscape:
0000000000008898         db         "escape", 0
                     aShellescapealw:
000000000000889f         db         "shell-escape-always", 0
00000000000088b3         db  0x63 ; 'c'
00000000000088b4         db  0x00 ; '.'
                     aCmaybe:
00000000000088b5         db         "c-maybe", 0
                     aClocale:
00000000000088bd         db         "clocale", 0
00000000000088c5         align      32
                     switch_table_88e0:        // switch_table
00000000000088e0         dd         quotearg_buffer_restyled.loc_432a-switch_table_88e0, quotearg_buffer_restyled.loc_3583-switch_table_88e0, quotearg_buffer_restyled.loc_4558-switch_table_88e0, quotearg_buffer_restyled.loc_4364-switch_table_88e0 ; switch table used at 0x3581 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
00000000000088f0         dd         quotearg_buffer_restyled.loc_4154-switch_table_88e0, quotearg_buffer_restyled.loc_41b0-switch_table_88e0, quotearg_buffer_restyled.loc_4205-switch_table_88e0, quotearg_buffer_restyled.loc_424a-switch_table_88e0
0000000000008900         dd         3 dup (quotearg_buffer_restyled.loc_4284-switch_table_88e0)
000000000000890c         db  0xf4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000890d         db  0xaf ; '.'
000000000000890e         db  0xff ; '.'
000000000000890f         db  0xff ; '.'
0000000000008910         db  0xdc ; '.'
0000000000008911         db  0xb0 ; '.'
0000000000008912         db  0xff ; '.'
0000000000008913         db  0xff ; '.'
0000000000008914         db  0xdc ; '.'
0000000000008915         db  0xb0 ; '.'
0000000000008916         db  0xff ; '.'
0000000000008917         db  0xff ; '.'
0000000000008918         db  0xdc ; '.'
0000000000008919         db  0xb0 ; '.'
000000000000891a         db  0xff ; '.'
000000000000891b         db  0xff ; '.'
000000000000891c         db  0xdc ; '.'
000000000000891d         db  0xb0 ; '.'
000000000000891e         db  0xff ; '.'
000000000000891f         db  0xff ; '.'
0000000000008920         db  0xdc ; '.'
0000000000008921         db  0xb0 ; '.'
0000000000008922         db  0xff ; '.'
0000000000008923         db  0xff ; '.'
0000000000008924         db  0xdc ; '.'
0000000000008925         db  0xb0 ; '.'
0000000000008926         db  0xff ; '.'
0000000000008927         db  0xff ; '.'
0000000000008928         db  0x34 ; '4'
0000000000008929         db  0xb0 ; '.'
000000000000892a         db  0xff ; '.'
000000000000892b         db  0xff ; '.'
000000000000892c         db  0x3c ; '<'
000000000000892d         db  0xaf ; '.'
000000000000892e         db  0xff ; '.'
000000000000892f         db  0xff ; '.'
0000000000008930         db  0xfc ; '.'
0000000000008931         db  0xae ; '.'
0000000000008932         db  0xff ; '.'
0000000000008933         db  0xff ; '.'
0000000000008934         db  0xc4 ; '.'
0000000000008935         db  0xb0 ; '.'
0000000000008936         db  0xff ; '.'
0000000000008937         db  0xff ; '.'
0000000000008938         db  0xb4 ; '.'
0000000000008939         db  0xb0 ; '.'
000000000000893a         db  0xff ; '.'
000000000000893b         db  0xff ; '.'
000000000000893c         db  0xa4 ; '.'
000000000000893d         db  0xb0 ; '.'
000000000000893e         db  0xff ; '.'
000000000000893f         db  0xff ; '.'
0000000000008940         db  0x94 ; '.'
0000000000008941         db  0xb0 ; '.'
0000000000008942         db  0xff ; '.'
0000000000008943         db  0xff ; '.'
0000000000008944         db  0xdc ; '.'
0000000000008945         db  0xb0 ; '.'
0000000000008946         db  0xff ; '.'
0000000000008947         db  0xff ; '.'
0000000000008948         db  0xdc ; '.'
0000000000008949         db  0xb0 ; '.'
000000000000894a         db  0xff ; '.'
000000000000894b         db  0xff ; '.'
000000000000894c         db  0xdc ; '.'
000000000000894d         db  0xb0 ; '.'
000000000000894e         db  0xff ; '.'
000000000000894f         db  0xff ; '.'
0000000000008950         db  0xdc ; '.'
0000000000008951         db  0xb0 ; '.'
0000000000008952         db  0xff ; '.'
0000000000008953         db  0xff ; '.'
0000000000008954         db  0xdc ; '.'
0000000000008955         db  0xb0 ; '.'
0000000000008956         db  0xff ; '.'
0000000000008957         db  0xff ; '.'
0000000000008958         db  0xdc ; '.'
0000000000008959         db  0xb0 ; '.'
000000000000895a         db  0xff ; '.'
000000000000895b         db  0xff ; '.'
000000000000895c         db  0xdc ; '.'
000000000000895d         db  0xb0 ; '.'
000000000000895e         db  0xff ; '.'
000000000000895f         db  0xff ; '.'
0000000000008960         db  0xdc ; '.'
0000000000008961         db  0xb0 ; '.'
0000000000008962         db  0xff ; '.'
0000000000008963         db  0xff ; '.'
0000000000008964         db  0xdc ; '.'
0000000000008965         db  0xb0 ; '.'
0000000000008966         db  0xff ; '.'
0000000000008967         db  0xff ; '.'
0000000000008968         db  0xdc ; '.'
0000000000008969         db  0xb0 ; '.'
000000000000896a         db  0xff ; '.'
000000000000896b         db  0xff ; '.'
000000000000896c         db  0xdc ; '.'
000000000000896d         db  0xb0 ; '.'
000000000000896e         db  0xff ; '.'
000000000000896f         db  0xff ; '.'
0000000000008970         db  0xdc ; '.'
0000000000008971         db  0xb0 ; '.'
0000000000008972         db  0xff ; '.'
0000000000008973         db  0xff ; '.'
0000000000008974         db  0xdc ; '.'
0000000000008975         db  0xb0 ; '.'
0000000000008976         db  0xff ; '.'
0000000000008977         db  0xff ; '.'
0000000000008978         db  0xdc ; '.'
0000000000008979         db  0xb0 ; '.'
000000000000897a         db  0xff ; '.'
000000000000897b         db  0xff ; '.'
000000000000897c         db  0xdc ; '.'
000000000000897d         db  0xb0 ; '.'
000000000000897e         db  0xff ; '.'
000000000000897f         db  0xff ; '.'
0000000000008980         db  0xdc ; '.'
0000000000008981         db  0xb0 ; '.'
0000000000008982         db  0xff ; '.'
0000000000008983         db  0xff ; '.'
0000000000008984         db  0xdc ; '.'
0000000000008985         db  0xb0 ; '.'
0000000000008986         db  0xff ; '.'
0000000000008987         db  0xff ; '.'
0000000000008988         db  0xdc ; '.'
0000000000008989         db  0xb0 ; '.'
000000000000898a         db  0xff ; '.'
000000000000898b         db  0xff ; '.'
000000000000898c         db  0x84 ; '.'
000000000000898d         db  0xb0 ; '.'
000000000000898e         db  0xff ; '.'
000000000000898f         db  0xff ; '.'
0000000000008990         db  0x74 ; 't'
0000000000008991         db  0xb0 ; '.'
0000000000008992         db  0xff ; '.'
0000000000008993         db  0xff ; '.'
0000000000008994         db  0x74 ; 't'
0000000000008995         db  0xb0 ; '.'
0000000000008996         db  0xff ; '.'
0000000000008997         db  0xff ; '.'
0000000000008998         db  0x44 ; 'D'
0000000000008999         db  0xb0 ; '.'
000000000000899a         db  0xff ; '.'
000000000000899b         db  0xff ; '.'
000000000000899c         db  0x74 ; 't'
000000000000899d         db  0xb0 ; '.'
000000000000899e         db  0xff ; '.'
000000000000899f         db  0xff ; '.'
00000000000089a0         db  0x1c ; '.'
00000000000089a1         db  0xb0 ; '.'
00000000000089a2         db  0xff ; '.'
00000000000089a3         db  0xff ; '.'
00000000000089a4         db  0x74 ; 't'
00000000000089a5         db  0xb0 ; '.'
00000000000089a6         db  0xff ; '.'
00000000000089a7         db  0xff ; '.'
00000000000089a8         db  0xd7 ; '.'
00000000000089a9         db  0xae ; '.'
00000000000089aa         db  0xff ; '.'
00000000000089ab         db  0xff ; '.'
00000000000089ac         db  0x74 ; 't'
00000000000089ad         db  0xb0 ; '.'
00000000000089ae         db  0xff ; '.'
00000000000089af         db  0xff ; '.'
00000000000089b0         db  0x74 ; 't'
00000000000089b1         db  0xb0 ; '.'
00000000000089b2         db  0xff ; '.'
00000000000089b3         db  0xff ; '.'
00000000000089b4         db  0x74 ; 't'
00000000000089b5         db  0xb0 ; '.'
00000000000089b6         db  0xff ; '.'
00000000000089b7         db  0xff ; '.'
00000000000089b8         db  0x1c ; '.'
00000000000089b9         db  0xb0 ; '.'
00000000000089ba         db  0xff ; '.'
00000000000089bb         db  0xff ; '.'
00000000000089bc         db  0x1c ; '.'
00000000000089bd         db  0xb0 ; '.'
00000000000089be         db  0xff ; '.'
00000000000089bf         db  0xff ; '.'
00000000000089c0         db  0x1c ; '.'
00000000000089c1         db  0xb0 ; '.'
00000000000089c2         db  0xff ; '.'
00000000000089c3         db  0xff ; '.'
00000000000089c4         db  0x1c ; '.'
00000000000089c5         db  0xb0 ; '.'
00000000000089c6         db  0xff ; '.'
00000000000089c7         db  0xff ; '.'
00000000000089c8         db  0x1c ; '.'
00000000000089c9         db  0xb0 ; '.'
00000000000089ca         db  0xff ; '.'
00000000000089cb         db  0xff ; '.'
00000000000089cc         db  0x1c ; '.'
00000000000089cd         db  0xb0 ; '.'
00000000000089ce         db  0xff ; '.'
00000000000089cf         db  0xff ; '.'
00000000000089d0         db  0x1c ; '.'
00000000000089d1         db  0xb0 ; '.'
00000000000089d2         db  0xff ; '.'
00000000000089d3         db  0xff ; '.'
00000000000089d4         db  0x1c ; '.'
00000000000089d5         db  0xb0 ; '.'
00000000000089d6         db  0xff ; '.'
00000000000089d7         db  0xff ; '.'
00000000000089d8         db  0x1c ; '.'
00000000000089d9         db  0xb0 ; '.'
00000000000089da         db  0xff ; '.'
00000000000089db         db  0xff ; '.'
00000000000089dc         db  0x1c ; '.'
00000000000089dd         db  0xb0 ; '.'
00000000000089de         db  0xff ; '.'
00000000000089df         db  0xff ; '.'
00000000000089e0         db  0x1c ; '.'
00000000000089e1         db  0xb0 ; '.'
00000000000089e2         db  0xff ; '.'
00000000000089e3         db  0xff ; '.'
00000000000089e4         db  0x1c ; '.'
00000000000089e5         db  0xb0 ; '.'
00000000000089e6         db  0xff ; '.'
00000000000089e7         db  0xff ; '.'
00000000000089e8         db  0x1c ; '.'
00000000000089e9         db  0xb0 ; '.'
00000000000089ea         db  0xff ; '.'
00000000000089eb         db  0xff ; '.'
00000000000089ec         db  0x1c ; '.'
00000000000089ed         db  0xb0 ; '.'
00000000000089ee         db  0xff ; '.'
00000000000089ef         db  0xff ; '.'
00000000000089f0         db  0x1c ; '.'
00000000000089f1         db  0xb0 ; '.'
00000000000089f2         db  0xff ; '.'
00000000000089f3         db  0xff ; '.'
00000000000089f4         db  0x1c ; '.'
00000000000089f5         db  0xb0 ; '.'
00000000000089f6         db  0xff ; '.'
00000000000089f7         db  0xff ; '.'
00000000000089f8         db  0x74 ; 't'
00000000000089f9         db  0xb0 ; '.'
00000000000089fa         db  0xff ; '.'
00000000000089fb         db  0xff ; '.'
00000000000089fc         db  0x74 ; 't'
00000000000089fd         db  0xb0 ; '.'
00000000000089fe         db  0xff ; '.'
00000000000089ff         db  0xff ; '.'
0000000000008a00         db  0x74 ; 't'
0000000000008a01         db  0xb0 ; '.'
0000000000008a02         db  0xff ; '.'
0000000000008a03         db  0xff ; '.'
0000000000008a04         db  0x74 ; 't'
0000000000008a05         db  0xb0 ; '.'
0000000000008a06         db  0xff ; '.'
0000000000008a07         db  0xff ; '.'
0000000000008a08         db  0xa7 ; '.'
0000000000008a09         db  0xae ; '.'
0000000000008a0a         db  0xff ; '.'
0000000000008a0b         db  0xff ; '.'
0000000000008a0c         db  0xdc ; '.'
0000000000008a0d         db  0xb0 ; '.'
0000000000008a0e         db  0xff ; '.'
0000000000008a0f         db  0xff ; '.'
0000000000008a10         db  0x1c ; '.'
0000000000008a11         db  0xb0 ; '.'
0000000000008a12         db  0xff ; '.'
0000000000008a13         db  0xff ; '.'
0000000000008a14         db  0x1c ; '.'
0000000000008a15         db  0xb0 ; '.'
0000000000008a16         db  0xff ; '.'
0000000000008a17         db  0xff ; '.'
0000000000008a18         db  0x1c ; '.'
0000000000008a19         db  0xb0 ; '.'
0000000000008a1a         db  0xff ; '.'
0000000000008a1b         db  0xff ; '.'
0000000000008a1c         db  0x1c ; '.'
0000000000008a1d         db  0xb0 ; '.'
0000000000008a1e         db  0xff ; '.'
0000000000008a1f         db  0xff ; '.'
0000000000008a20         db  0x1c ; '.'
0000000000008a21         db  0xb0 ; '.'
0000000000008a22         db  0xff ; '.'
0000000000008a23         db  0xff ; '.'
0000000000008a24         db  0x1c ; '.'
0000000000008a25         db  0xb0 ; '.'
0000000000008a26         db  0xff ; '.'
0000000000008a27         db  0xff ; '.'
0000000000008a28         db  0x1c ; '.'
0000000000008a29         db  0xb0 ; '.'
0000000000008a2a         db  0xff ; '.'
0000000000008a2b         db  0xff ; '.'
0000000000008a2c         db  0x1c ; '.'
0000000000008a2d         db  0xb0 ; '.'
0000000000008a2e         db  0xff ; '.'
0000000000008a2f         db  0xff ; '.'
0000000000008a30         db  0x1c ; '.'
0000000000008a31         db  0xb0 ; '.'
0000000000008a32         db  0xff ; '.'
0000000000008a33         db  0xff ; '.'
0000000000008a34         db  0x1c ; '.'
0000000000008a35         db  0xb0 ; '.'
0000000000008a36         db  0xff ; '.'
0000000000008a37         db  0xff ; '.'
0000000000008a38         db  0x1c ; '.'
0000000000008a39         db  0xb0 ; '.'
0000000000008a3a         db  0xff ; '.'
0000000000008a3b         db  0xff ; '.'
0000000000008a3c         db  0x1c ; '.'
0000000000008a3d         db  0xb0 ; '.'
0000000000008a3e         db  0xff ; '.'
0000000000008a3f         db  0xff ; '.'
0000000000008a40         db  0x1c ; '.'
0000000000008a41         db  0xb0 ; '.'
0000000000008a42         db  0xff ; '.'
0000000000008a43         db  0xff ; '.'
0000000000008a44         db  0x1c ; '.'
0000000000008a45         db  0xb0 ; '.'
0000000000008a46         db  0xff ; '.'
0000000000008a47         db  0xff ; '.'
0000000000008a48         db  0x1c ; '.'
0000000000008a49         db  0xb0 ; '.'
0000000000008a4a         db  0xff ; '.'
0000000000008a4b         db  0xff ; '.'
0000000000008a4c         db  0x1c ; '.'
0000000000008a4d         db  0xb0 ; '.'
0000000000008a4e         db  0xff ; '.'
0000000000008a4f         db  0xff ; '.'
0000000000008a50         db  0x1c ; '.'
0000000000008a51         db  0xb0 ; '.'
0000000000008a52         db  0xff ; '.'
0000000000008a53         db  0xff ; '.'
0000000000008a54         db  0x1c ; '.'
0000000000008a55         db  0xb0 ; '.'
0000000000008a56         db  0xff ; '.'
0000000000008a57         db  0xff ; '.'
0000000000008a58         db  0x1c ; '.'
0000000000008a59         db  0xb0 ; '.'
0000000000008a5a         db  0xff ; '.'
0000000000008a5b         db  0xff ; '.'
0000000000008a5c         db  0x1c ; '.'
0000000000008a5d         db  0xb0 ; '.'
0000000000008a5e         db  0xff ; '.'
0000000000008a5f         db  0xff ; '.'
0000000000008a60         db  0x1c ; '.'
0000000000008a61         db  0xb0 ; '.'
0000000000008a62         db  0xff ; '.'
0000000000008a63         db  0xff ; '.'
0000000000008a64         db  0x1c ; '.'
0000000000008a65         db  0xb0 ; '.'
0000000000008a66         db  0xff ; '.'
0000000000008a67         db  0xff ; '.'
0000000000008a68         db  0x1c ; '.'
0000000000008a69         db  0xb0 ; '.'
0000000000008a6a         db  0xff ; '.'
0000000000008a6b         db  0xff ; '.'
0000000000008a6c         db  0x1c ; '.'
0000000000008a6d         db  0xb0 ; '.'
0000000000008a6e         db  0xff ; '.'
0000000000008a6f         db  0xff ; '.'
0000000000008a70         db  0x1c ; '.'
0000000000008a71         db  0xb0 ; '.'
0000000000008a72         db  0xff ; '.'
0000000000008a73         db  0xff ; '.'
0000000000008a74         db  0x1c ; '.'
0000000000008a75         db  0xb0 ; '.'
0000000000008a76         db  0xff ; '.'
0000000000008a77         db  0xff ; '.'
0000000000008a78         db  0x74 ; 't'
0000000000008a79         db  0xb0 ; '.'
0000000000008a7a         db  0xff ; '.'
0000000000008a7b         db  0xff ; '.'
0000000000008a7c         db  0x4c ; 'L'
0000000000008a7d         db  0xaf ; '.'
0000000000008a7e         db  0xff ; '.'
0000000000008a7f         db  0xff ; '.'
0000000000008a80         db  0x1c ; '.'
0000000000008a81         db  0xb0 ; '.'
0000000000008a82         db  0xff ; '.'
0000000000008a83         db  0xff ; '.'
0000000000008a84         db  0x74 ; 't'
0000000000008a85         db  0xb0 ; '.'
0000000000008a86         db  0xff ; '.'
0000000000008a87         db  0xff ; '.'
0000000000008a88         db  0x1c ; '.'
0000000000008a89         db  0xb0 ; '.'
0000000000008a8a         db  0xff ; '.'
0000000000008a8b         db  0xff ; '.'
0000000000008a8c         db  0x74 ; 't'
0000000000008a8d         db  0xb0 ; '.'
0000000000008a8e         db  0xff ; '.'
0000000000008a8f         db  0xff ; '.'
0000000000008a90         db  0x1c ; '.'
0000000000008a91         db  0xb0 ; '.'
0000000000008a92         db  0xff ; '.'
0000000000008a93         db  0xff ; '.'
0000000000008a94         db  0x1c ; '.'
0000000000008a95         db  0xb0 ; '.'
0000000000008a96         db  0xff ; '.'
0000000000008a97         db  0xff ; '.'
0000000000008a98         db  0x1c ; '.'
0000000000008a99         db  0xb0 ; '.'
0000000000008a9a         db  0xff ; '.'
0000000000008a9b         db  0xff ; '.'
0000000000008a9c         db  0x1c ; '.'
0000000000008a9d         db  0xb0 ; '.'
0000000000008a9e         db  0xff ; '.'
0000000000008a9f         db  0xff ; '.'
0000000000008aa0         db  0x1c ; '.'
0000000000008aa1         db  0xb0 ; '.'
0000000000008aa2         db  0xff ; '.'
0000000000008aa3         db  0xff ; '.'
0000000000008aa4         db  0x1c ; '.'
0000000000008aa5         db  0xb0 ; '.'
0000000000008aa6         db  0xff ; '.'
0000000000008aa7         db  0xff ; '.'
0000000000008aa8         db  0x1c ; '.'
0000000000008aa9         db  0xb0 ; '.'
0000000000008aaa         db  0xff ; '.'
0000000000008aab         db  0xff ; '.'
0000000000008aac         db  0x1c ; '.'
0000000000008aad         db  0xb0 ; '.'
0000000000008aae         db  0xff ; '.'
0000000000008aaf         db  0xff ; '.'
0000000000008ab0         db  0x1c ; '.'
0000000000008ab1         db  0xb0 ; '.'
0000000000008ab2         db  0xff ; '.'
0000000000008ab3         db  0xff ; '.'
0000000000008ab4         db  0x1c ; '.'
0000000000008ab5         db  0xb0 ; '.'
0000000000008ab6         db  0xff ; '.'
0000000000008ab7         db  0xff ; '.'
0000000000008ab8         db  0x1c ; '.'
0000000000008ab9         db  0xb0 ; '.'
0000000000008aba         db  0xff ; '.'
0000000000008abb         db  0xff ; '.'
0000000000008abc         db  0x1c ; '.'
0000000000008abd         db  0xb0 ; '.'
0000000000008abe         db  0xff ; '.'
0000000000008abf         db  0xff ; '.'
0000000000008ac0         db  0x1c ; '.'
0000000000008ac1         db  0xb0 ; '.'
0000000000008ac2         db  0xff ; '.'
0000000000008ac3         db  0xff ; '.'
0000000000008ac4         db  0x1c ; '.'
0000000000008ac5         db  0xb0 ; '.'
0000000000008ac6         db  0xff ; '.'
0000000000008ac7         db  0xff ; '.'
0000000000008ac8         db  0x1c ; '.'
0000000000008ac9         db  0xb0 ; '.'
0000000000008aca         db  0xff ; '.'
0000000000008acb         db  0xff ; '.'
0000000000008acc         db  0x1c ; '.'
0000000000008acd         db  0xb0 ; '.'
0000000000008ace         db  0xff ; '.'
0000000000008acf         db  0xff ; '.'
0000000000008ad0         db  0x1c ; '.'
0000000000008ad1         db  0xb0 ; '.'
0000000000008ad2         db  0xff ; '.'
0000000000008ad3         db  0xff ; '.'
0000000000008ad4         db  0x1c ; '.'
0000000000008ad5         db  0xb0 ; '.'
0000000000008ad6         db  0xff ; '.'
0000000000008ad7         db  0xff ; '.'
0000000000008ad8         db  0x1c ; '.'
0000000000008ad9         db  0xb0 ; '.'
0000000000008ada         db  0xff ; '.'
0000000000008adb         db  0xff ; '.'
0000000000008adc         db  0x1c ; '.'
0000000000008add         db  0xb0 ; '.'
0000000000008ade         db  0xff ; '.'
0000000000008adf         db  0xff ; '.'
0000000000008ae0         db  0x1c ; '.'
0000000000008ae1         db  0xb0 ; '.'
0000000000008ae2         db  0xff ; '.'
0000000000008ae3         db  0xff ; '.'
0000000000008ae4         db  0x1c ; '.'
0000000000008ae5         db  0xb0 ; '.'
0000000000008ae6         db  0xff ; '.'
0000000000008ae7         db  0xff ; '.'
0000000000008ae8         db  0x1c ; '.'
0000000000008ae9         db  0xb0 ; '.'
0000000000008aea         db  0xff ; '.'
0000000000008aeb         db  0xff ; '.'
0000000000008aec         db  0x1c ; '.'
0000000000008aed         db  0xb0 ; '.'
0000000000008aee         db  0xff ; '.'
0000000000008aef         db  0xff ; '.'
0000000000008af0         db  0x1c ; '.'
0000000000008af1         db  0xb0 ; '.'
0000000000008af2         db  0xff ; '.'
0000000000008af3         db  0xff ; '.'
0000000000008af4         db  0x1c ; '.'
0000000000008af5         db  0xb0 ; '.'
0000000000008af6         db  0xff ; '.'
0000000000008af7         db  0xff ; '.'
0000000000008af8         db  0xd7 ; '.'
0000000000008af9         db  0xad ; '.'
0000000000008afa         db  0xff ; '.'
0000000000008afb         db  0xff ; '.'
0000000000008afc         db  0x74 ; 't'
0000000000008afd         db  0xb0 ; '.'
0000000000008afe         db  0xff ; '.'
0000000000008aff         db  0xff ; '.'
0000000000008b00         db  0xd7 ; '.'
0000000000008b01         db  0xad ; '.'
0000000000008b02         db  0xff ; '.'
0000000000008b03         db  0xff ; '.'
0000000000008b04         db  0x44 ; 'D'
0000000000008b05         db  0xb0 ; '.'
0000000000008b06         db  0xff ; '.'
0000000000008b07         db  0xff ; '.'
0000000000008b08         db  0xc8 ; '.'                                         ; DATA XREF=sub_39d0+137
0000000000008b09         db  0xaf ; '.'
0000000000008b0a         db  0xff ; '.'
0000000000008b0b         db  0xff ; '.'
0000000000008b0c         db  0xd8 ; '.'
0000000000008b0d         db  0xae ; '.'
0000000000008b0e         db  0xff ; '.'
0000000000008b0f         db  0xff ; '.'
0000000000008b10         db  0xd8 ; '.'
0000000000008b11         db  0xae ; '.'
0000000000008b12         db  0xff ; '.'
0000000000008b13         db  0xff ; '.'
0000000000008b14         db  0xd8 ; '.'
0000000000008b15         db  0xae ; '.'
0000000000008b16         db  0xff ; '.'
0000000000008b17         db  0xff ; '.'
0000000000008b18         db  0xd8 ; '.'
0000000000008b19         db  0xae ; '.'
0000000000008b1a         db  0xff ; '.'
0000000000008b1b         db  0xff ; '.'
0000000000008b1c         db  0xd8 ; '.'
0000000000008b1d         db  0xae ; '.'
0000000000008b1e         db  0xff ; '.'
0000000000008b1f         db  0xff ; '.'
0000000000008b20         db  0xd8 ; '.'
0000000000008b21         db  0xae ; '.'
0000000000008b22         db  0xff ; '.'
0000000000008b23         db  0xff ; '.'
0000000000008b24         db  0xb8 ; '.'
0000000000008b25         db  0xaf ; '.'
0000000000008b26         db  0xff ; '.'
0000000000008b27         db  0xff ; '.'
0000000000008b28         db  0x08 ; '.'
0000000000008b29         db  0xb1 ; '.'
0000000000008b2a         db  0xff ; '.'
0000000000008b2b         db  0xff ; '.'
0000000000008b2c         db  0xf0 ; '.'
0000000000008b2d         db  0xb0 ; '.'
0000000000008b2e         db  0xff ; '.'
0000000000008b2f         db  0xff ; '.'
0000000000008b30         db  0xa0 ; '.'
0000000000008b31         db  0xaf ; '.'
0000000000008b32         db  0xff ; '.'
0000000000008b33         db  0xff ; '.'
0000000000008b34         db  0xe0 ; '.'
0000000000008b35         db  0xb0 ; '.'
0000000000008b36         db  0xff ; '.'
0000000000008b37         db  0xff ; '.'
0000000000008b38         db  0x88 ; '.'
0000000000008b39         db  0xaf ; '.'
0000000000008b3a         db  0xff ; '.'
0000000000008b3b         db  0xff ; '.'
0000000000008b3c         db  0xc8 ; '.'
0000000000008b3d         db  0xb0 ; '.'
0000000000008b3e         db  0xff ; '.'
0000000000008b3f         db  0xff ; '.'
0000000000008b40         db  0xd8 ; '.'
0000000000008b41         db  0xae ; '.'
0000000000008b42         db  0xff ; '.'
0000000000008b43         db  0xff ; '.'
0000000000008b44         db  0xd8 ; '.'
0000000000008b45         db  0xae ; '.'
0000000000008b46         db  0xff ; '.'
0000000000008b47         db  0xff ; '.'
0000000000008b48         db  0xd8 ; '.'
0000000000008b49         db  0xae ; '.'
0000000000008b4a         db  0xff ; '.'
0000000000008b4b         db  0xff ; '.'
0000000000008b4c         db  0xd8 ; '.'
0000000000008b4d         db  0xae ; '.'
0000000000008b4e         db  0xff ; '.'
0000000000008b4f         db  0xff ; '.'
0000000000008b50         db  0xd8 ; '.'
0000000000008b51         db  0xae ; '.'
0000000000008b52         db  0xff ; '.'
0000000000008b53         db  0xff ; '.'
0000000000008b54         db  0xd8 ; '.'
0000000000008b55         db  0xae ; '.'
0000000000008b56         db  0xff ; '.'
0000000000008b57         db  0xff ; '.'
0000000000008b58         db  0xd8 ; '.'
0000000000008b59         db  0xae ; '.'
0000000000008b5a         db  0xff ; '.'
0000000000008b5b         db  0xff ; '.'
0000000000008b5c         db  0xd8 ; '.'
0000000000008b5d         db  0xae ; '.'
0000000000008b5e         db  0xff ; '.'
0000000000008b5f         db  0xff ; '.'
0000000000008b60         db  0xd8 ; '.'
0000000000008b61         db  0xae ; '.'
0000000000008b62         db  0xff ; '.'
0000000000008b63         db  0xff ; '.'
0000000000008b64         db  0xd8 ; '.'
0000000000008b65         db  0xae ; '.'
0000000000008b66         db  0xff ; '.'
0000000000008b67         db  0xff ; '.'
0000000000008b68         db  0xd8 ; '.'
0000000000008b69         db  0xae ; '.'
0000000000008b6a         db  0xff ; '.'
0000000000008b6b         db  0xff ; '.'
0000000000008b6c         db  0xd8 ; '.'
0000000000008b6d         db  0xae ; '.'
0000000000008b6e         db  0xff ; '.'
0000000000008b6f         db  0xff ; '.'
0000000000008b70         db  0xd8 ; '.'
0000000000008b71         db  0xae ; '.'
0000000000008b72         db  0xff ; '.'
0000000000008b73         db  0xff ; '.'
0000000000008b74         db  0xd8 ; '.'
0000000000008b75         db  0xae ; '.'
0000000000008b76         db  0xff ; '.'
0000000000008b77         db  0xff ; '.'
0000000000008b78         db  0xd8 ; '.'
0000000000008b79         db  0xae ; '.'
0000000000008b7a         db  0xff ; '.'
0000000000008b7b         db  0xff ; '.'
0000000000008b7c         db  0xd8 ; '.'
0000000000008b7d         db  0xae ; '.'
0000000000008b7e         db  0xff ; '.'
0000000000008b7f         db  0xff ; '.'
0000000000008b80         db  0xd8 ; '.'
0000000000008b81         db  0xae ; '.'
0000000000008b82         db  0xff ; '.'
0000000000008b83         db  0xff ; '.'
0000000000008b84         db  0xd8 ; '.'
0000000000008b85         db  0xae ; '.'
0000000000008b86         db  0xff ; '.'
0000000000008b87         db  0xff ; '.'
0000000000008b88         db  0xb0 ; '.'
0000000000008b89         db  0xb0 ; '.'
0000000000008b8a         db  0xff ; '.'
0000000000008b8b         db  0xff ; '.'
0000000000008b8c         db  0x98 ; '.'
0000000000008b8d         db  0xb0 ; '.'
0000000000008b8e         db  0xff ; '.'
0000000000008b8f         db  0xff ; '.'
0000000000008b90         db  0x98 ; '.'
0000000000008b91         db  0xb0 ; '.'
0000000000008b92         db  0xff ; '.'
0000000000008b93         db  0xff ; '.'
0000000000008b94         db  0x80 ; '.'
0000000000008b95         db  0xb0 ; '.'
0000000000008b96         db  0xff ; '.'
0000000000008b97         db  0xff ; '.'
0000000000008b98         db  0x98 ; '.'
0000000000008b99         db  0xb0 ; '.'
0000000000008b9a         db  0xff ; '.'
0000000000008b9b         db  0xff ; '.'
0000000000008b9c         db  0x68 ; 'h'
0000000000008b9d         db  0xb0 ; '.'
0000000000008b9e         db  0xff ; '.'
0000000000008b9f         db  0xff ; '.'
0000000000008ba0         db  0x98 ; '.'
0000000000008ba1         db  0xb0 ; '.'
0000000000008ba2         db  0xff ; '.'
0000000000008ba3         db  0xff ; '.'
0000000000008ba4         db  0xd8 ; '.'
0000000000008ba5         db  0xac ; '.'
0000000000008ba6         db  0xff ; '.'
0000000000008ba7         db  0xff ; '.'
0000000000008ba8         db  0x98 ; '.'
0000000000008ba9         db  0xb0 ; '.'
0000000000008baa         db  0xff ; '.'
0000000000008bab         db  0xff ; '.'
0000000000008bac         db  0x98 ; '.'
0000000000008bad         db  0xb0 ; '.'
0000000000008bae         db  0xff ; '.'
0000000000008baf         db  0xff ; '.'
0000000000008bb0         db  0x98 ; '.'
0000000000008bb1         db  0xb0 ; '.'
0000000000008bb2         db  0xff ; '.'
0000000000008bb3         db  0xff ; '.'
0000000000008bb4         db  0x68 ; 'h'
0000000000008bb5         db  0xb0 ; '.'
0000000000008bb6         db  0xff ; '.'
0000000000008bb7         db  0xff ; '.'
0000000000008bb8         db  0x68 ; 'h'
0000000000008bb9         db  0xb0 ; '.'
0000000000008bba         db  0xff ; '.'
0000000000008bbb         db  0xff ; '.'
0000000000008bbc         db  0x68 ; 'h'
0000000000008bbd         db  0xb0 ; '.'
0000000000008bbe         db  0xff ; '.'
0000000000008bbf         db  0xff ; '.'
0000000000008bc0         db  0x68 ; 'h'
0000000000008bc1         db  0xb0 ; '.'
0000000000008bc2         db  0xff ; '.'
0000000000008bc3         db  0xff ; '.'
0000000000008bc4         db  0x68 ; 'h'
0000000000008bc5         db  0xb0 ; '.'
0000000000008bc6         db  0xff ; '.'
0000000000008bc7         db  0xff ; '.'
0000000000008bc8         db  0x68 ; 'h'
0000000000008bc9         db  0xb0 ; '.'
0000000000008bca         db  0xff ; '.'
0000000000008bcb         db  0xff ; '.'
0000000000008bcc         db  0x68 ; 'h'
0000000000008bcd         db  0xb0 ; '.'
0000000000008bce         db  0xff ; '.'
0000000000008bcf         db  0xff ; '.'
0000000000008bd0         db  0x68 ; 'h'
0000000000008bd1         db  0xb0 ; '.'
0000000000008bd2         db  0xff ; '.'
0000000000008bd3         db  0xff ; '.'
0000000000008bd4         db  0x68 ; 'h'
0000000000008bd5         db  0xb0 ; '.'
0000000000008bd6         db  0xff ; '.'
0000000000008bd7         db  0xff ; '.'
0000000000008bd8         db  0x68 ; 'h'
0000000000008bd9         db  0xb0 ; '.'
0000000000008bda         db  0xff ; '.'
0000000000008bdb         db  0xff ; '.'
0000000000008bdc         db  0x68 ; 'h'
0000000000008bdd         db  0xb0 ; '.'
0000000000008bde         db  0xff ; '.'
0000000000008bdf         db  0xff ; '.'
0000000000008be0         db  0x68 ; 'h'
0000000000008be1         db  0xb0 ; '.'
0000000000008be2         db  0xff ; '.'
0000000000008be3         db  0xff ; '.'
0000000000008be4         db  0x68 ; 'h'
0000000000008be5         db  0xb0 ; '.'
0000000000008be6         db  0xff ; '.'
0000000000008be7         db  0xff ; '.'
0000000000008be8         db  0x68 ; 'h'
0000000000008be9         db  0xb0 ; '.'
0000000000008bea         db  0xff ; '.'
0000000000008beb         db  0xff ; '.'
0000000000008bec         db  0x68 ; 'h'
0000000000008bed         db  0xb0 ; '.'
0000000000008bee         db  0xff ; '.'
0000000000008bef         db  0xff ; '.'
0000000000008bf0         db  0x68 ; 'h'
0000000000008bf1         db  0xb0 ; '.'
0000000000008bf2         db  0xff ; '.'
0000000000008bf3         db  0xff ; '.'
0000000000008bf4         db  0x98 ; '.'
0000000000008bf5         db  0xb0 ; '.'
0000000000008bf6         db  0xff ; '.'
0000000000008bf7         db  0xff ; '.'
0000000000008bf8         db  0x98 ; '.'
0000000000008bf9         db  0xb0 ; '.'
0000000000008bfa         db  0xff ; '.'
0000000000008bfb         db  0xff ; '.'
0000000000008bfc         db  0x98 ; '.'
0000000000008bfd         db  0xb0 ; '.'
0000000000008bfe         db  0xff ; '.'
0000000000008bff         db  0xff ; '.'
0000000000008c00         db  0x98 ; '.'
0000000000008c01         db  0xb0 ; '.'
0000000000008c02         db  0xff ; '.'
0000000000008c03         db  0xff ; '.'
0000000000008c04         db  0xa8 ; '.'
0000000000008c05         db  0xac ; '.'
0000000000008c06         db  0xff ; '.'
0000000000008c07         db  0xff ; '.'
0000000000008c08         db  0xd8 ; '.'
0000000000008c09         db  0xae ; '.'
0000000000008c0a         db  0xff ; '.'
0000000000008c0b         db  0xff ; '.'
0000000000008c0c         db  0x68 ; 'h'
0000000000008c0d         db  0xb0 ; '.'
0000000000008c0e         db  0xff ; '.'
0000000000008c0f         db  0xff ; '.'
0000000000008c10         db  0x68 ; 'h'
0000000000008c11         db  0xb0 ; '.'
0000000000008c12         db  0xff ; '.'
0000000000008c13         db  0xff ; '.'
0000000000008c14         db  0x68 ; 'h'
0000000000008c15         db  0xb0 ; '.'
0000000000008c16         db  0xff ; '.'
0000000000008c17         db  0xff ; '.'
0000000000008c18         db  0x68 ; 'h'
0000000000008c19         db  0xb0 ; '.'
0000000000008c1a         db  0xff ; '.'
0000000000008c1b         db  0xff ; '.'
0000000000008c1c         db  0x68 ; 'h'
0000000000008c1d         db  0xb0 ; '.'
0000000000008c1e         db  0xff ; '.'
0000000000008c1f         db  0xff ; '.'
0000000000008c20         db  0x68 ; 'h'
0000000000008c21         db  0xb0 ; '.'
0000000000008c22         db  0xff ; '.'
0000000000008c23         db  0xff ; '.'
0000000000008c24         db  0x68 ; 'h'
0000000000008c25         db  0xb0 ; '.'
0000000000008c26         db  0xff ; '.'
0000000000008c27         db  0xff ; '.'
0000000000008c28         db  0x68 ; 'h'
0000000000008c29         db  0xb0 ; '.'
0000000000008c2a         db  0xff ; '.'
0000000000008c2b         db  0xff ; '.'
0000000000008c2c         db  0x68 ; 'h'
0000000000008c2d         db  0xb0 ; '.'
0000000000008c2e         db  0xff ; '.'
0000000000008c2f         db  0xff ; '.'
0000000000008c30         db  0x68 ; 'h'
0000000000008c31         db  0xb0 ; '.'
0000000000008c32         db  0xff ; '.'
0000000000008c33         db  0xff ; '.'
0000000000008c34         db  0x68 ; 'h'
0000000000008c35         db  0xb0 ; '.'
0000000000008c36         db  0xff ; '.'
0000000000008c37         db  0xff ; '.'
0000000000008c38         db  0x68 ; 'h'
0000000000008c39         db  0xb0 ; '.'
0000000000008c3a         db  0xff ; '.'
0000000000008c3b         db  0xff ; '.'
0000000000008c3c         db  0x68 ; 'h'
0000000000008c3d         db  0xb0 ; '.'
0000000000008c3e         db  0xff ; '.'
0000000000008c3f         db  0xff ; '.'
0000000000008c40         db  0x68 ; 'h'
0000000000008c41         db  0xb0 ; '.'
0000000000008c42         db  0xff ; '.'
0000000000008c43         db  0xff ; '.'
0000000000008c44         db  0x68 ; 'h'
0000000000008c45         db  0xb0 ; '.'
0000000000008c46         db  0xff ; '.'
0000000000008c47         db  0xff ; '.'
0000000000008c48         db  0x68 ; 'h'
0000000000008c49         db  0xb0 ; '.'
0000000000008c4a         db  0xff ; '.'
0000000000008c4b         db  0xff ; '.'
0000000000008c4c         db  0x68 ; 'h'
0000000000008c4d         db  0xb0 ; '.'
0000000000008c4e         db  0xff ; '.'
0000000000008c4f         db  0xff ; '.'
0000000000008c50         db  0x68 ; 'h'
0000000000008c51         db  0xb0 ; '.'
0000000000008c52         db  0xff ; '.'
0000000000008c53         db  0xff ; '.'
0000000000008c54         db  0x68 ; 'h'
0000000000008c55         db  0xb0 ; '.'
0000000000008c56         db  0xff ; '.'
0000000000008c57         db  0xff ; '.'
0000000000008c58         db  0x68 ; 'h'
0000000000008c59         db  0xb0 ; '.'
0000000000008c5a         db  0xff ; '.'
0000000000008c5b         db  0xff ; '.'
0000000000008c5c         db  0x68 ; 'h'
0000000000008c5d         db  0xb0 ; '.'
0000000000008c5e         db  0xff ; '.'
0000000000008c5f         db  0xff ; '.'
0000000000008c60         db  0x68 ; 'h'
0000000000008c61         db  0xb0 ; '.'
0000000000008c62         db  0xff ; '.'
0000000000008c63         db  0xff ; '.'
0000000000008c64         db  0x68 ; 'h'
0000000000008c65         db  0xb0 ; '.'
0000000000008c66         db  0xff ; '.'
0000000000008c67         db  0xff ; '.'
0000000000008c68         db  0x68 ; 'h'
0000000000008c69         db  0xb0 ; '.'
0000000000008c6a         db  0xff ; '.'
0000000000008c6b         db  0xff ; '.'
0000000000008c6c         db  0x68 ; 'h'
0000000000008c6d         db  0xb0 ; '.'
0000000000008c6e         db  0xff ; '.'
0000000000008c6f         db  0xff ; '.'
0000000000008c70         db  0x68 ; 'h'
0000000000008c71         db  0xb0 ; '.'
0000000000008c72         db  0xff ; '.'
0000000000008c73         db  0xff ; '.'
0000000000008c74         db  0x98 ; '.'
0000000000008c75         db  0xb0 ; '.'
0000000000008c76         db  0xff ; '.'
0000000000008c77         db  0xff ; '.'
0000000000008c78         db  0x68 ; 'h'
0000000000008c79         db  0xaf ; '.'
0000000000008c7a         db  0xff ; '.'
0000000000008c7b         db  0xff ; '.'
0000000000008c7c         db  0x68 ; 'h'
0000000000008c7d         db  0xb0 ; '.'
0000000000008c7e         db  0xff ; '.'
0000000000008c7f         db  0xff ; '.'
0000000000008c80         db  0x98 ; '.'
0000000000008c81         db  0xb0 ; '.'
0000000000008c82         db  0xff ; '.'
0000000000008c83         db  0xff ; '.'
0000000000008c84         db  0x68 ; 'h'
0000000000008c85         db  0xb0 ; '.'
0000000000008c86         db  0xff ; '.'
0000000000008c87         db  0xff ; '.'
0000000000008c88         db  0x98 ; '.'
0000000000008c89         db  0xb0 ; '.'
0000000000008c8a         db  0xff ; '.'
0000000000008c8b         db  0xff ; '.'
0000000000008c8c         db  0x68 ; 'h'
0000000000008c8d         db  0xb0 ; '.'
0000000000008c8e         db  0xff ; '.'
0000000000008c8f         db  0xff ; '.'
0000000000008c90         db  0x68 ; 'h'
0000000000008c91         db  0xb0 ; '.'
0000000000008c92         db  0xff ; '.'
0000000000008c93         db  0xff ; '.'
0000000000008c94         db  0x68 ; 'h'
0000000000008c95         db  0xb0 ; '.'
0000000000008c96         db  0xff ; '.'
0000000000008c97         db  0xff ; '.'
0000000000008c98         db  0x68 ; 'h'
0000000000008c99         db  0xb0 ; '.'
0000000000008c9a         db  0xff ; '.'
0000000000008c9b         db  0xff ; '.'
0000000000008c9c         db  0x68 ; 'h'
0000000000008c9d         db  0xb0 ; '.'
0000000000008c9e         db  0xff ; '.'
0000000000008c9f         db  0xff ; '.'
0000000000008ca0         db  0x68 ; 'h'
0000000000008ca1         db  0xb0 ; '.'
0000000000008ca2         db  0xff ; '.'
0000000000008ca3         db  0xff ; '.'
0000000000008ca4         db  0x68 ; 'h'
0000000000008ca5         db  0xb0 ; '.'
0000000000008ca6         db  0xff ; '.'
0000000000008ca7         db  0xff ; '.'
0000000000008ca8         db  0x68 ; 'h'
0000000000008ca9         db  0xb0 ; '.'
0000000000008caa         db  0xff ; '.'
0000000000008cab         db  0xff ; '.'
0000000000008cac         db  0x68 ; 'h'
0000000000008cad         db  0xb0 ; '.'
0000000000008cae         db  0xff ; '.'
0000000000008caf         db  0xff ; '.'
0000000000008cb0         db  0x68 ; 'h'
0000000000008cb1         db  0xb0 ; '.'
0000000000008cb2         db  0xff ; '.'
0000000000008cb3         db  0xff ; '.'
0000000000008cb4         db  0x68 ; 'h'
0000000000008cb5         db  0xb0 ; '.'
0000000000008cb6         db  0xff ; '.'
0000000000008cb7         db  0xff ; '.'
0000000000008cb8         db  0x68 ; 'h'
0000000000008cb9         db  0xb0 ; '.'
0000000000008cba         db  0xff ; '.'
0000000000008cbb         db  0xff ; '.'
0000000000008cbc         db  0x68 ; 'h'
0000000000008cbd         db  0xb0 ; '.'
0000000000008cbe         db  0xff ; '.'
0000000000008cbf         db  0xff ; '.'
0000000000008cc0         db  0x68 ; 'h'
0000000000008cc1         db  0xb0 ; '.'
0000000000008cc2         db  0xff ; '.'
0000000000008cc3         db  0xff ; '.'
0000000000008cc4         db  0x68 ; 'h'
0000000000008cc5         db  0xb0 ; '.'
0000000000008cc6         db  0xff ; '.'
0000000000008cc7         db  0xff ; '.'
0000000000008cc8         db  0x68 ; 'h'
0000000000008cc9         db  0xb0 ; '.'
0000000000008cca         db  0xff ; '.'
0000000000008ccb         db  0xff ; '.'
0000000000008ccc         db  0x68 ; 'h'
0000000000008ccd         db  0xb0 ; '.'
0000000000008cce         db  0xff ; '.'
0000000000008ccf         db  0xff ; '.'
0000000000008cd0         db  0x68 ; 'h'
0000000000008cd1         db  0xb0 ; '.'
0000000000008cd2         db  0xff ; '.'
0000000000008cd3         db  0xff ; '.'
0000000000008cd4         db  0x68 ; 'h'
0000000000008cd5         db  0xb0 ; '.'
0000000000008cd6         db  0xff ; '.'
0000000000008cd7         db  0xff ; '.'
0000000000008cd8         db  0x68 ; 'h'
0000000000008cd9         db  0xb0 ; '.'
0000000000008cda         db  0xff ; '.'
0000000000008cdb         db  0xff ; '.'
0000000000008cdc         db  0x68 ; 'h'
0000000000008cdd         db  0xb0 ; '.'
0000000000008cde         db  0xff ; '.'
0000000000008cdf         db  0xff ; '.'
0000000000008ce0         db  0x68 ; 'h'
0000000000008ce1         db  0xb0 ; '.'
0000000000008ce2         db  0xff ; '.'
0000000000008ce3         db  0xff ; '.'
0000000000008ce4         db  0x68 ; 'h'
0000000000008ce5         db  0xb0 ; '.'
0000000000008ce6         db  0xff ; '.'
0000000000008ce7         db  0xff ; '.'
0000000000008ce8         db  0x68 ; 'h'
0000000000008ce9         db  0xb0 ; '.'
0000000000008cea         db  0xff ; '.'
0000000000008ceb         db  0xff ; '.'
0000000000008cec         db  0x68 ; 'h'
0000000000008ced         db  0xb0 ; '.'
0000000000008cee         db  0xff ; '.'
0000000000008cef         db  0xff ; '.'
0000000000008cf0         db  0x68 ; 'h'
0000000000008cf1         db  0xb0 ; '.'
0000000000008cf2         db  0xff ; '.'
0000000000008cf3         db  0xff ; '.'
0000000000008cf4         db  0xd8 ; '.'
0000000000008cf5         db  0xab ; '.'
0000000000008cf6         db  0xff ; '.'
0000000000008cf7         db  0xff ; '.'
0000000000008cf8         db  0x98 ; '.'
0000000000008cf9         db  0xb0 ; '.'
0000000000008cfa         db  0xff ; '.'
0000000000008cfb         db  0xff ; '.'
0000000000008cfc         db  0xd8 ; '.'
0000000000008cfd         db  0xab ; '.'
0000000000008cfe         db  0xff ; '.'
0000000000008cff         db  0xff ; '.'
0000000000008d00         db  0x80 ; '.'
0000000000008d01         db  0xb0 ; '.'
0000000000008d02         db  0xff ; '.'
0000000000008d03         db  0xff ; '.'
0000000000008d04         db  0x00 ; '.'
0000000000008d05         db  0x00 ; '.'
0000000000008d06         db  0x00 ; '.'
0000000000008d07         db  0x00 ; '.'
0000000000008d08         db  0x00 ; '.'
0000000000008d09         db  0x00 ; '.'
0000000000008d0a         db  0x00 ; '.'
0000000000008d0b         db  0x00 ; '.'
0000000000008d0c         db  0x00 ; '.'
0000000000008d0d         db  0x00 ; '.'
0000000000008d0e         db  0x00 ; '.'
0000000000008d0f         db  0x00 ; '.'
0000000000008d10         db  0x00 ; '.'
0000000000008d11         db  0x00 ; '.'
0000000000008d12         db  0x00 ; '.'
0000000000008d13         db  0x00 ; '.'
0000000000008d14         db  0x00 ; '.'
0000000000008d15         db  0x00 ; '.'
0000000000008d16         db  0x00 ; '.'
0000000000008d17         db  0x00 ; '.'
0000000000008d18         db  0x00 ; '.'
0000000000008d19         db  0x00 ; '.'
0000000000008d1a         db  0x00 ; '.'
0000000000008d1b         db  0x00 ; '.'
0000000000008d1c         db  0x00 ; '.'
0000000000008d1d         db  0x00 ; '.'
0000000000008d1e         db  0x00 ; '.'
0000000000008d1f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000008d20         db  0x00 ; '.'
0000000000008d21         db  0x00 ; '.'
0000000000008d22         db  0x00 ; '.'
0000000000008d23         db  0x00 ; '.'
0000000000008d24         db  0x01 ; '.'
0000000000008d25         db  0x00 ; '.'
0000000000008d26         db  0x00 ; '.'
0000000000008d27         db  0x00 ; '.'
0000000000008d28         db  0x02 ; '.'
0000000000008d29         db  0x00 ; '.'
0000000000008d2a         db  0x00 ; '.'
0000000000008d2b         db  0x00 ; '.'
0000000000008d2c         db  0x03 ; '.'
0000000000008d2d         db  0x00 ; '.'
0000000000008d2e         db  0x00 ; '.'
0000000000008d2f         db  0x00 ; '.'
0000000000008d30         db  0x04 ; '.'
0000000000008d31         db  0x00 ; '.'
0000000000008d32         db  0x00 ; '.'
0000000000008d33         db  0x00 ; '.'
0000000000008d34         db  0x05 ; '.'
0000000000008d35         db  0x00 ; '.'
0000000000008d36         db  0x00 ; '.'
0000000000008d37         db  0x00 ; '.'
0000000000008d38         db  0x06 ; '.'
0000000000008d39         db  0x00 ; '.'
0000000000008d3a         db  0x00 ; '.'
0000000000008d3b         db  0x00 ; '.'
0000000000008d3c         db  0x07 ; '.'
0000000000008d3d         db  0x00 ; '.'
0000000000008d3e         db  0x00 ; '.'
0000000000008d3f         db  0x00 ; '.'
0000000000008d40         db  0x08 ; '.'
0000000000008d41         db  0x00 ; '.'
0000000000008d42         db  0x00 ; '.'
0000000000008d43         db  0x00 ; '.'
0000000000008d44         db  0x09 ; '.'
0000000000008d45         db  0x00 ; '.'
0000000000008d46         db  0x00 ; '.'
0000000000008d47         db  0x00 ; '.'
                     aSSSn:
0000000000008d48         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000008d54         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
0000000000008d5b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
0000000000008d5c         db  0x43 ; 'C'
0000000000008d5d         db  0x29 ; ')'
0000000000008d5e         db  0x00 ; '.'
                     aWrittenBySn:
0000000000008d5f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
0000000000008d6f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
0000000000008d86         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000008da2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000008db7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
0000000000008dcd         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000008de1         align      8
                     aNlicenseGplv3G:
0000000000008de8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000008eb4         align      8
                     aWrittenBySSSna:
0000000000008eb8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_8ed8:        // aWrittenBySSSns
0000000000008ed8         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
0000000000008efc         align      256
                     aWrittenBySSSns_8f00:        // aWrittenBySSSns
0000000000008f00         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_8f28:        // aWrittenBySSSns
0000000000008f28         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000008f54         align      8
                     aWrittenBySSSns_8f58:        // aWrittenBySSSns
0000000000008f58         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
0000000000008f88         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
0000000000008fbc         align      64
                     aWrittenBySSSns_8fc0:        // aWrittenBySSSns
0000000000008fc0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
0000000000008ffc         align      4096
                     aGeneralHelpUsi:
0000000000009000         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000009041         align      8
                     switch_table_9048:        // switch_table
0000000000009048         dd         version_etc_arn.loc_51b6-switch_table_9048, version_etc_arn.loc_5248-switch_table_9048, version_etc_arn.loc_5288-switch_table_9048, version_etc_arn.loc_52d0-switch_table_9048 ; switch table used at 0x5134 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000009058         dd         version_etc_arn.loc_5320-switch_table_9048, version_etc_arn.loc_5378-switch_table_9048, version_etc_arn.loc_53a8-switch_table_9048, version_etc_arn.loc_5410-switch_table_9048
0000000000009068         dd         version_etc_arn.loc_5140-switch_table_9048, version_etc_arn.loc_51f0-switch_table_9048
0000000000009070         align      128
                     version_etc_copyright:
0000000000009080         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
00000000000090af         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aPosix:
00000000000090c0         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
00000000000090c6         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
                     switch_table_90cc:        // switch_table
00000000000090cc         dd         vasnprintf.loc_6df6-switch_table_90cc, vasnprintf.loc_6890-switch_table_90cc, vasnprintf.loc_6860-switch_table_90cc, vasnprintf.loc_67d8-switch_table_90cc ; switch table used at 0x642b containing 18 entries, DATA XREF=vasnprintf+1357
00000000000090dc         dd         vasnprintf.loc_6798-switch_table_90cc, 2 dup (vasnprintf.loc_6568-switch_table_90cc), 4 dup (vasnprintf.loc_6430-switch_table_90cc), vasnprintf.loc_6718-switch_table_90cc
00000000000090fc         dd         vasnprintf.loc_6690-switch_table_90cc, 2 dup (vasnprintf.loc_6568-switch_table_90cc), 3 dup (vasnprintf.loc_6430-switch_table_90cc)
                     switch_table_9114:        // switch_table
0000000000009114         dd         vasnprintf.loc_6c40-switch_table_9114, vasnprintf.loc_6c60-switch_table_9114, vasnprintf.loc_6c50-switch_table_9114, 2 dup (vasnprintf.loc_6b10-switch_table_9114) ; switch table used at 0x69d0 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
0000000000009128         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
000000000000912f         db  0x00 ; '.'
0000000000009130         db  0x30 ; '0'                                         ; DATA XREF=printf_fetchargs+10
0000000000009131         db  0xdf ; '.'
0000000000009132         db  0xff ; '.'
0000000000009133         db  0xff ; '.'
0000000000009134         db  0x7c ; '|'
0000000000009135         db  0xdf ; '.'
0000000000009136         db  0xff ; '.'
0000000000009137         db  0xff ; '.'
0000000000009138         db  0x7c ; '|'
0000000000009139         db  0xdf ; '.'
000000000000913a         db  0xff ; '.'
000000000000913b         db  0xff ; '.'
000000000000913c         db  0x9e ; '.'
000000000000913d         db  0xdf ; '.'
000000000000913e         db  0xff ; '.'
000000000000913f         db  0xff ; '.'
0000000000009140         db  0x9e ; '.'
0000000000009141         db  0xdf ; '.'
0000000000009142         db  0xff ; '.'
0000000000009143         db  0xff ; '.'
0000000000009144         db  0x5a ; 'Z'
0000000000009145         db  0xdf ; '.'
0000000000009146         db  0xff ; '.'
0000000000009147         db  0xff ; '.'
0000000000009148         db  0x5a ; 'Z'
0000000000009149         db  0xdf ; '.'
000000000000914a         db  0xff ; '.'
000000000000914b         db  0xff ; '.'
000000000000914c         db  0x36 ; '6'
000000000000914d         db  0xdf ; '.'
000000000000914e         db  0xff ; '.'
000000000000914f         db  0xff ; '.'
0000000000009150         db  0x36 ; '6'
0000000000009151         db  0xdf ; '.'
0000000000009152         db  0xff ; '.'
0000000000009153         db  0xff ; '.'
0000000000009154         db  0x36 ; '6'
0000000000009155         db  0xdf ; '.'
0000000000009156         db  0xff ; '.'
0000000000009157         db  0xff ; '.'
0000000000009158         db  0x36 ; '6'
0000000000009159         db  0xdf ; '.'
000000000000915a         db  0xff ; '.'
000000000000915b         db  0xff ; '.'
000000000000915c         db  0xf2 ; '.'
000000000000915d         db  0xdf ; '.'
000000000000915e         db  0xff ; '.'
000000000000915f         db  0xff ; '.'
0000000000009160         db  0x00 ; '.'
0000000000009161         db  0xdf ; '.'
0000000000009162         db  0xff ; '.'
0000000000009163         db  0xff ; '.'
0000000000009164         db  0x5a ; 'Z'
0000000000009165         db  0xdf ; '.'
0000000000009166         db  0xff ; '.'
0000000000009167         db  0xff ; '.'
0000000000009168         db  0x5a ; 'Z'
0000000000009169         db  0xdf ; '.'
000000000000916a         db  0xff ; '.'
000000000000916b         db  0xff ; '.'
000000000000916c         db  0xc4 ; '.'
000000000000916d         db  0xdf ; '.'
000000000000916e         db  0xff ; '.'
000000000000916f         db  0xff ; '.'
0000000000009170         db  0x20 ; ' '
0000000000009171         db  0xe0 ; '.'
0000000000009172         db  0xff ; '.'
0000000000009173         db  0xff ; '.'
0000000000009174         db  0x36 ; '6'
0000000000009175         db  0xdf ; '.'
0000000000009176         db  0xff ; '.'
0000000000009177         db  0xff ; '.'
0000000000009178         db  0x36 ; '6'
0000000000009179         db  0xdf ; '.'
000000000000917a         db  0xff ; '.'
000000000000917b         db  0xff ; '.'
000000000000917c         db  0x36 ; '6'
000000000000917d         db  0xdf ; '.'
000000000000917e         db  0xff ; '.'
000000000000917f         db  0xff ; '.'
0000000000009180         db  0x36 ; '6'
0000000000009181         db  0xdf ; '.'
0000000000009182         db  0xff ; '.'
0000000000009183         db  0xff ; '.'
0000000000009184         db  0x36 ; '6'
0000000000009185         db  0xdf ; '.'
0000000000009186         db  0xff ; '.'
0000000000009187         db  0xff ; '.'
0000000000009188         db  0x36 ; '6'
0000000000009189         db  0xdf ; '.'
000000000000918a         db  0xff ; '.'
000000000000918b         db  0xff ; '.'
000000000000918c         db  0x00 ; '.'
000000000000918d         db  0x00 ; '.'
000000000000918e         db  0x00 ; '.'
000000000000918f         db  0x00 ; '.'
                     wide_null_string.2696:
0000000000009190         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
0000000000009191         db  0x00 ; '.'
0000000000009192         db  0x00 ; '.'
0000000000009193         db  0x00 ; '.'
0000000000009194         db  0x4e ; 'N'
0000000000009195         db  0x00 ; '.'
0000000000009196         db  0x00 ; '.'
0000000000009197         db  0x00 ; '.'
0000000000009198         db  0x55 ; 'U'
0000000000009199         db  0x00 ; '.'
000000000000919a         db  0x00 ; '.'
000000000000919b         db  0x00 ; '.'
000000000000919c         db  0x4c ; 'L'
000000000000919d         db  0x00 ; '.'
000000000000919e         db  0x00 ; '.'
000000000000919f         db  0x00 ; '.'
00000000000091a0         db  0x4c ; 'L'
00000000000091a1         db  0x00 ; '.'
00000000000091a2         db  0x00 ; '.'
00000000000091a3         db  0x00 ; '.'
00000000000091a4         db  0x29 ; ')'
00000000000091a5         db  0x00 ; '.'
00000000000091a6         db  0x00 ; '.'
00000000000091a7         db  0x00 ; '.'
00000000000091a8         db  0x00 ; '.'
00000000000091a9         db  0x00 ; '.'
00000000000091aa         db  0x00 ; '.'
00000000000091ab         db  0x00 ; '.'
                     switch_table_91ac:        // switch_table
00000000000091ac         dd         printf_parse.loc_74ab-switch_table_91ac, 27 dup (printf_parse.loc_7a3b-switch_table_91ac), printf_parse.loc_79ab-switch_table_91ac, printf_parse.loc_7a3b-switch_table_91ac ; switch table used at 0x7435 containing 84 entries, DATA XREF=printf_parse+564
0000000000009224         dd         printf_parse.loc_79cc-switch_table_91ac, printf_parse.loc_7a3b-switch_table_91ac, 3 dup (printf_parse.loc_79ab-switch_table_91ac), 11 dup (printf_parse.loc_7a3b-switch_table_91ac)
0000000000009264         dd         printf_parse.loc_7437-switch_table_91ac, 4 dup (printf_parse.loc_7a3b-switch_table_91ac), printf_parse.loc_79dc-switch_table_91ac, 8 dup (printf_parse.loc_7a3b-switch_table_91ac)
000000000000929c         dd         printf_parse.loc_79ab-switch_table_91ac, printf_parse.loc_7a3b-switch_table_91ac, printf_parse.loc_7938-switch_table_91ac, printf_parse.loc_794b-switch_table_91ac
00000000000092ac         dd         3 dup (printf_parse.loc_79ab-switch_table_91ac), printf_parse.loc_7a3b-switch_table_91ac, printf_parse.loc_794b-switch_table_91ac, 4 dup (printf_parse.loc_7a3b-switch_table_91ac)
00000000000092d0         dd         printf_parse.loc_78ec-switch_table_91ac, printf_parse.loc_79dc-switch_table_91ac, printf_parse.loc_7a30-switch_table_91ac, 2 dup (printf_parse.loc_7a3b-switch_table_91ac)
00000000000092e4         dd         printf_parse.loc_7998-switch_table_91ac, printf_parse.loc_7a3b-switch_table_91ac, printf_parse.loc_79dc-switch_table_91ac, 2 dup (printf_parse.loc_7a3b-switch_table_91ac)
00000000000092f8         dd         printf_parse.loc_79dc-switch_table_91ac


        ; Section .eh_frame_hdr
        ; Range: [0x92fc; 0x9598[ (668 bytes)
        ; File offset : [37628; 38296[ (668 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000092fc         db  0x01 ; '.'
00000000000092fd         db  0x1b ; '.'
00000000000092fe         db  0x03 ; '.'
00000000000092ff         db  0x3b ; ';'
0000000000009300         db  0x98 ; '.'
0000000000009301         db  0x02 ; '.'
0000000000009302         db  0x00 ; '.'
0000000000009303         db  0x00 ; '.'
0000000000009304         db  0x52 ; 'R'
0000000000009305         db  0x00 ; '.'
0000000000009306         db  0x00 ; '.'
0000000000009307         db  0x00 ; '.'
0000000000009308         db  0x74 ; 't'
0000000000009309         db  0x82 ; '.'
000000000000930a         db  0xff ; '.'
000000000000930b         db  0xff ; '.'
000000000000930c         db  0xe4 ; '.'
000000000000930d         db  0x02 ; '.'
000000000000930e         db  0x00 ; '.'
000000000000930f         db  0x00 ; '.'
0000000000009310         db  0xe4 ; '.'
0000000000009311         db  0x85 ; '.'
0000000000009312         db  0xff ; '.'
0000000000009313         db  0xff ; '.'
0000000000009314         db  0x0c ; '.'
0000000000009315         db  0x03 ; '.'
0000000000009316         db  0x00 ; '.'
0000000000009317         db  0x00 ; '.'
0000000000009318         db  0xf4 ; '.'
0000000000009319         db  0x85 ; '.'
000000000000931a         db  0xff ; '.'
000000000000931b         db  0xff ; '.'
000000000000931c         db  0x34 ; '4'
000000000000931d         db  0x04 ; '.'
000000000000931e         db  0x00 ; '.'
000000000000931f         db  0x00 ; '.'
0000000000009320         db  0x44 ; 'D'
0000000000009321         db  0x92 ; '.'
0000000000009322         db  0xff ; '.'
0000000000009323         db  0xff ; '.'
0000000000009324         db  0xb4 ; '.'
0000000000009325         db  0x02 ; '.'
0000000000009326         db  0x00 ; '.'
0000000000009327         db  0x00 ; '.'
0000000000009328         db  0x54 ; 'T'
0000000000009329         db  0x93 ; '.'
000000000000932a         db  0xff ; '.'
000000000000932b         db  0xff ; '.'
000000000000932c         db  0x24 ; '$'
000000000000932d         db  0x03 ; '.'
000000000000932e         db  0x00 ; '.'
000000000000932f         db  0x00 ; '.'
0000000000009330         db  0x94 ; '.'
0000000000009331         db  0x93 ; '.'
0000000000009332         db  0xff ; '.'
0000000000009333         db  0xff ; '.'
0000000000009334         db  0x50 ; 'P'
0000000000009335         db  0x03 ; '.'
0000000000009336         db  0x00 ; '.'
0000000000009337         db  0x00 ; '.'
0000000000009338         db  0xd4 ; '.'
0000000000009339         db  0x93 ; '.'
000000000000933a         db  0xff ; '.'
000000000000933b         db  0xff ; '.'
000000000000933c         db  0x68 ; 'h'
000000000000933d         db  0x03 ; '.'
000000000000933e         db  0x00 ; '.'
000000000000933f         db  0x00 ; '.'
0000000000009340         db  0xa4 ; '.'
0000000000009341         db  0x97 ; '.'
0000000000009342         db  0xff ; '.'
0000000000009343         db  0xff ; '.'
0000000000009344         db  0xb8 ; '.'
0000000000009345         db  0x03 ; '.'
0000000000009346         db  0x00 ; '.'
0000000000009347         db  0x00 ; '.'
0000000000009348         db  0x84 ; '.'
0000000000009349         db  0x9b ; '.'
000000000000934a         db  0xff ; '.'
000000000000934b         db  0xff ; '.'
000000000000934c         db  0xe4 ; '.'
000000000000934d         db  0x03 ; '.'
000000000000934e         db  0x00 ; '.'
000000000000934f         db  0x00 ; '.'
0000000000009350         db  0xe4 ; '.'
0000000000009351         db  0x9e ; '.'
0000000000009352         db  0xff ; '.'
0000000000009353         db  0xff ; '.'
0000000000009354         db  0xdc ; '.'
0000000000009355         db  0x04 ; '.'
0000000000009356         db  0x00 ; '.'
0000000000009357         db  0x00 ; '.'
0000000000009358         db  0x94 ; '.'
0000000000009359         db  0x9f ; '.'
000000000000935a         db  0xff ; '.'
000000000000935b         db  0xff ; '.'
000000000000935c         db  0x1c ; '.'
000000000000935d         db  0x05 ; '.'
000000000000935e         db  0x00 ; '.'
000000000000935f         db  0x00 ; '.'
0000000000009360         db  0xa4 ; '.'
0000000000009361         db  0x9f ; '.'
0000000000009362         db  0xff ; '.'
0000000000009363         db  0xff ; '.'
0000000000009364         db  0x30 ; '0'
0000000000009365         db  0x05 ; '.'
0000000000009366         db  0x00 ; '.'
0000000000009367         db  0x00 ; '.'
0000000000009368         db  0xb4 ; '.'
0000000000009369         db  0x9f ; '.'
000000000000936a         db  0xff ; '.'
000000000000936b         db  0xff ; '.'
000000000000936c         db  0x44 ; 'D'
000000000000936d         db  0x05 ; '.'
000000000000936e         db  0x00 ; '.'
000000000000936f         db  0x00 ; '.'
0000000000009370         db  0x64 ; 'd'
0000000000009371         db  0xa0 ; '.'
0000000000009372         db  0xff ; '.'
0000000000009373         db  0xff ; '.'
0000000000009374         db  0x74 ; 't'
0000000000009375         db  0x05 ; '.'
0000000000009376         db  0x00 ; '.'
0000000000009377         db  0x00 ; '.'
0000000000009378         db  0x04 ; '.'
0000000000009379         db  0xa1 ; '.'
000000000000937a         db  0xff ; '.'
000000000000937b         db  0xff ; '.'
000000000000937c         db  0x94 ; '.'
000000000000937d         db  0x05 ; '.'
000000000000937e         db  0x00 ; '.'
000000000000937f         db  0x00 ; '.'
0000000000009380         db  0xf4 ; '.'
0000000000009381         db  0xa1 ; '.'
0000000000009382         db  0xff ; '.'
0000000000009383         db  0xff ; '.'
0000000000009384         db  0xd8 ; '.'
0000000000009385         db  0x05 ; '.'
0000000000009386         db  0x00 ; '.'
0000000000009387         db  0x00 ; '.'
0000000000009388         db  0x34 ; '4'
0000000000009389         db  0xb4 ; '.'
000000000000938a         db  0xff ; '.'
000000000000938b         db  0xff ; '.'
000000000000938c         db  0x50 ; 'P'
000000000000938d         db  0x06 ; '.'
000000000000938e         db  0x00 ; '.'
000000000000938f         db  0x00 ; '.'
0000000000009390         db  0xe4 ; '.'
0000000000009391         db  0xb5 ; '.'
0000000000009392         db  0xff ; '.'
0000000000009393         db  0xff ; '.'
0000000000009394         db  0xbc ; '.'
0000000000009395         db  0x06 ; '.'
0000000000009396         db  0x00 ; '.'
0000000000009397         db  0x00 ; '.'
0000000000009398         db  0x24 ; '$'
0000000000009399         db  0xb6 ; '.'
000000000000939a         db  0xff ; '.'
000000000000939b         db  0xff ; '.'
000000000000939c         db  0xe8 ; '.'
000000000000939d         db  0x06 ; '.'
000000000000939e         db  0x00 ; '.'
000000000000939f         db  0x00 ; '.'
00000000000093a0         db  0x44 ; 'D'
00000000000093a1         db  0xb6 ; '.'
00000000000093a2         db  0xff ; '.'
00000000000093a3         db  0xff ; '.'
00000000000093a4         db  0xfc ; '.'
00000000000093a5         db  0x06 ; '.'
00000000000093a6         db  0x00 ; '.'
00000000000093a7         db  0x00 ; '.'
00000000000093a8         db  0x64 ; 'd'
00000000000093a9         db  0xb6 ; '.'
00000000000093aa         db  0xff ; '.'
00000000000093ab         db  0xff ; '.'
00000000000093ac         db  0x10 ; '.'
00000000000093ad         db  0x07 ; '.'
00000000000093ae         db  0x00 ; '.'
00000000000093af         db  0x00 ; '.'
00000000000093b0         db  0xa4 ; '.'
00000000000093b1         db  0xb6 ; '.'
00000000000093b2         db  0xff ; '.'
00000000000093b3         db  0xff ; '.'
00000000000093b4         db  0x24 ; '$'
00000000000093b5         db  0x07 ; '.'
00000000000093b6         db  0x00 ; '.'
00000000000093b7         db  0x00 ; '.'
00000000000093b8         db  0xc4 ; '.'
00000000000093b9         db  0xb6 ; '.'
00000000000093ba         db  0xff ; '.'
00000000000093bb         db  0xff ; '.'
00000000000093bc         db  0x38 ; '8'
00000000000093bd         db  0x07 ; '.'
00000000000093be         db  0x00 ; '.'
00000000000093bf         db  0x00 ; '.'
00000000000093c0         db  0xf4 ; '.'
00000000000093c1         db  0xb6 ; '.'
00000000000093c2         db  0xff ; '.'
00000000000093c3         db  0xff ; '.'
00000000000093c4         db  0x4c ; 'L'
00000000000093c5         db  0x07 ; '.'
00000000000093c6         db  0x00 ; '.'
00000000000093c7         db  0x00 ; '.'
00000000000093c8         db  0x74 ; 't'
00000000000093c9         db  0xb7 ; '.'
00000000000093ca         db  0xff ; '.'
00000000000093cb         db  0xff ; '.'
00000000000093cc         db  0xa0 ; '.'
00000000000093cd         db  0x07 ; '.'
00000000000093ce         db  0x00 ; '.'
00000000000093cf         db  0x00 ; '.'
00000000000093d0         db  0x64 ; 'd'
00000000000093d1         db  0xb8 ; '.'
00000000000093d2         db  0xff ; '.'
00000000000093d3         db  0xff ; '.'
00000000000093d4         db  0x0c ; '.'
00000000000093d5         db  0x08 ; '.'
00000000000093d6         db  0x00 ; '.'
00000000000093d7         db  0x00 ; '.'
00000000000093d8         db  0x74 ; 't'
00000000000093d9         db  0xb8 ; '.'
00000000000093da         db  0xff ; '.'
00000000000093db         db  0xff ; '.'
00000000000093dc         db  0x20 ; ' '
00000000000093dd         db  0x08 ; '.'
00000000000093de         db  0x00 ; '.'
00000000000093df         db  0x00 ; '.'
00000000000093e0         db  0x14 ; '.'
00000000000093e1         db  0xb9 ; '.'
00000000000093e2         db  0xff ; '.'
00000000000093e3         db  0xff ; '.'
00000000000093e4         db  0x4c ; 'L'
00000000000093e5         db  0x08 ; '.'
00000000000093e6         db  0x00 ; '.'
00000000000093e7         db  0x00 ; '.'
00000000000093e8         db  0x34 ; '4'
00000000000093e9         db  0xb9 ; '.'
00000000000093ea         db  0xff ; '.'
00000000000093eb         db  0xff ; '.'
00000000000093ec         db  0x60 ; '`'
00000000000093ed         db  0x08 ; '.'
00000000000093ee         db  0x00 ; '.'
00000000000093ef         db  0x00 ; '.'
00000000000093f0         db  0x44 ; 'D'
00000000000093f1         db  0xb9 ; '.'
00000000000093f2         db  0xff ; '.'
00000000000093f3         db  0xff ; '.'
00000000000093f4         db  0x74 ; 't'
00000000000093f5         db  0x08 ; '.'
00000000000093f6         db  0x00 ; '.'
00000000000093f7         db  0x00 ; '.'
00000000000093f8         db  0x64 ; 'd'
00000000000093f9         db  0xb9 ; '.'
00000000000093fa         db  0xff ; '.'
00000000000093fb         db  0xff ; '.'
00000000000093fc         db  0x88 ; '.'
00000000000093fd         db  0x08 ; '.'
00000000000093fe         db  0x00 ; '.'
00000000000093ff         db  0x00 ; '.'
0000000000009400         db  0x84 ; '.'
0000000000009401         db  0xb9 ; '.'
0000000000009402         db  0xff ; '.'
0000000000009403         db  0xff ; '.'
0000000000009404         db  0x9c ; '.'
0000000000009405         db  0x08 ; '.'
0000000000009406         db  0x00 ; '.'
0000000000009407         db  0x00 ; '.'
0000000000009408         db  0x14 ; '.'
0000000000009409         db  0xba ; '.'
000000000000940a         db  0xff ; '.'
000000000000940b         db  0xff ; '.'
000000000000940c         db  0xb8 ; '.'
000000000000940d         db  0x08 ; '.'
000000000000940e         db  0x00 ; '.'
000000000000940f         db  0x00 ; '.'
0000000000009410         db  0xa4 ; '.'
0000000000009411         db  0xba ; '.'
0000000000009412         db  0xff ; '.'
0000000000009413         db  0xff ; '.'
0000000000009414         db  0xd4 ; '.'
0000000000009415         db  0x08 ; '.'
0000000000009416         db  0x00 ; '.'
0000000000009417         db  0x00 ; '.'
0000000000009418         db  0xb4 ; '.'
0000000000009419         db  0xba ; '.'
000000000000941a         db  0xff ; '.'
000000000000941b         db  0xff ; '.'
000000000000941c         db  0xe8 ; '.'
000000000000941d         db  0x08 ; '.'
000000000000941e         db  0x00 ; '.'
000000000000941f         db  0x00 ; '.'
0000000000009420         db  0xc4 ; '.'
0000000000009421         db  0xba ; '.'
0000000000009422         db  0xff ; '.'
0000000000009423         db  0xff ; '.'
0000000000009424         db  0xfc ; '.'
0000000000009425         db  0x08 ; '.'
0000000000009426         db  0x00 ; '.'
0000000000009427         db  0x00 ; '.'
0000000000009428         db  0x64 ; 'd'
0000000000009429         db  0xbb ; '.'
000000000000942a         db  0xff ; '.'
000000000000942b         db  0xff ; '.'
000000000000942c         db  0x18 ; '.'
000000000000942d         db  0x09 ; '.'
000000000000942e         db  0x00 ; '.'
000000000000942f         db  0x00 ; '.'
0000000000009430         db  0x74 ; 't'
0000000000009431         db  0xbb ; '.'
0000000000009432         db  0xff ; '.'
0000000000009433         db  0xff ; '.'
0000000000009434         db  0x2c ; ','
0000000000009435         db  0x09 ; '.'
0000000000009436         db  0x00 ; '.'
0000000000009437         db  0x00 ; '.'
0000000000009438         db  0x94 ; '.'
0000000000009439         db  0xbb ; '.'
000000000000943a         db  0xff ; '.'
000000000000943b         db  0xff ; '.'
000000000000943c         db  0x40 ; '@'
000000000000943d         db  0x09 ; '.'
000000000000943e         db  0x00 ; '.'
000000000000943f         db  0x00 ; '.'
0000000000009440         db  0xa4 ; '.'
0000000000009441         db  0xbb ; '.'
0000000000009442         db  0xff ; '.'
0000000000009443         db  0xff ; '.'
0000000000009444         db  0x54 ; 'T'
0000000000009445         db  0x09 ; '.'
0000000000009446         db  0x00 ; '.'
0000000000009447         db  0x00 ; '.'
0000000000009448         db  0x34 ; '4'
0000000000009449         db  0xbc ; '.'
000000000000944a         db  0xff ; '.'
000000000000944b         db  0xff ; '.'
000000000000944c         db  0x70 ; 'p'
000000000000944d         db  0x09 ; '.'
000000000000944e         db  0x00 ; '.'
000000000000944f         db  0x00 ; '.'
0000000000009450         db  0xd4 ; '.'
0000000000009451         db  0xbc ; '.'
0000000000009452         db  0xff ; '.'
0000000000009453         db  0xff ; '.'
0000000000009454         db  0x8c ; '.'
0000000000009455         db  0x09 ; '.'
0000000000009456         db  0x00 ; '.'
0000000000009457         db  0x00 ; '.'
0000000000009458         db  0xe4 ; '.'
0000000000009459         db  0xbc ; '.'
000000000000945a         db  0xff ; '.'
000000000000945b         db  0xff ; '.'
000000000000945c         db  0xa0 ; '.'
000000000000945d         db  0x09 ; '.'
000000000000945e         db  0x00 ; '.'
000000000000945f         db  0x00 ; '.'
0000000000009460         db  0x04 ; '.'
0000000000009461         db  0xbd ; '.'
0000000000009462         db  0xff ; '.'
0000000000009463         db  0xff ; '.'
0000000000009464         db  0xb4 ; '.'
0000000000009465         db  0x09 ; '.'
0000000000009466         db  0x00 ; '.'
0000000000009467         db  0x00 ; '.'
0000000000009468         db  0x24 ; '$'
0000000000009469         db  0xbd ; '.'
000000000000946a         db  0xff ; '.'
000000000000946b         db  0xff ; '.'
000000000000946c         db  0xc8 ; '.'
000000000000946d         db  0x09 ; '.'
000000000000946e         db  0x00 ; '.'
000000000000946f         db  0x00 ; '.'
0000000000009470         db  0x34 ; '4'
0000000000009471         db  0xbd ; '.'
0000000000009472         db  0xff ; '.'
0000000000009473         db  0xff ; '.'
0000000000009474         db  0xdc ; '.'
0000000000009475         db  0x09 ; '.'
0000000000009476         db  0x00 ; '.'
0000000000009477         db  0x00 ; '.'
0000000000009478         db  0x54 ; 'T'
0000000000009479         db  0xbd ; '.'
000000000000947a         db  0xff ; '.'
000000000000947b         db  0xff ; '.'
000000000000947c         db  0xf0 ; '.'
000000000000947d         db  0x09 ; '.'
000000000000947e         db  0x00 ; '.'
000000000000947f         db  0x00 ; '.'
0000000000009480         db  0x74 ; 't'
0000000000009481         db  0xbd ; '.'
0000000000009482         db  0xff ; '.'
0000000000009483         db  0xff ; '.'
0000000000009484         db  0x04 ; '.'
0000000000009485         db  0x0a ; '.'
0000000000009486         db  0x00 ; '.'
0000000000009487         db  0x00 ; '.'
0000000000009488         db  0x94 ; '.'
0000000000009489         db  0xbd ; '.'
000000000000948a         db  0xff ; '.'
000000000000948b         db  0xff ; '.'
000000000000948c         db  0x1c ; '.'
000000000000948d         db  0x0a ; '.'
000000000000948e         db  0x00 ; '.'
000000000000948f         db  0x00 ; '.'
0000000000009490         db  0xb4 ; '.'
0000000000009491         db  0xc1 ; '.'
0000000000009492         db  0xff ; '.'
0000000000009493         db  0xff ; '.'
0000000000009494         db  0x30 ; '0'
0000000000009495         db  0x0b ; '.'
0000000000009496         db  0x00 ; '.'
0000000000009497         db  0x00 ; '.'
0000000000009498         db  0xd4 ; '.'
0000000000009499         db  0xc1 ; '.'
000000000000949a         db  0xff ; '.'
000000000000949b         db  0xff ; '.'
000000000000949c         db  0x44 ; 'D'
000000000000949d         db  0x0b ; '.'
000000000000949e         db  0x00 ; '.'
000000000000949f         db  0x00 ; '.'
00000000000094a0         db  0x54 ; 'T'
00000000000094a1         db  0xc2 ; '.'
00000000000094a2         db  0xff ; '.'
00000000000094a3         db  0xff ; '.'
00000000000094a4         db  0x60 ; '`'
00000000000094a5         db  0x0b ; '.'
00000000000094a6         db  0x00 ; '.'
00000000000094a7         db  0x00 ; '.'
00000000000094a8         db  0x34 ; '4'
00000000000094a9         db  0xc3 ; '.'
00000000000094aa         db  0xff ; '.'
00000000000094ab         db  0xff ; '.'
00000000000094ac         db  0x8c ; '.'
00000000000094ad         db  0x0b ; '.'
00000000000094ae         db  0x00 ; '.'
00000000000094af         db  0x00 ; '.'
00000000000094b0         db  0xb4 ; '.'
00000000000094b1         db  0xc3 ; '.'
00000000000094b2         db  0xff ; '.'
00000000000094b3         db  0xff ; '.'
00000000000094b4         db  0xac ; '.'
00000000000094b5         db  0x0b ; '.'
00000000000094b6         db  0x00 ; '.'
00000000000094b7         db  0x00 ; '.'
00000000000094b8         db  0xd4 ; '.'
00000000000094b9         db  0xc3 ; '.'
00000000000094ba         db  0xff ; '.'
00000000000094bb         db  0xff ; '.'
00000000000094bc         db  0xc8 ; '.'
00000000000094bd         db  0x0b ; '.'
00000000000094be         db  0x00 ; '.'
00000000000094bf         db  0x00 ; '.'
00000000000094c0         db  0x04 ; '.'
00000000000094c1         db  0xc4 ; '.'
00000000000094c2         db  0xff ; '.'
00000000000094c3         db  0xff ; '.'
00000000000094c4         db  0xdc ; '.'
00000000000094c5         db  0x0b ; '.'
00000000000094c6         db  0x00 ; '.'
00000000000094c7         db  0x00 ; '.'
00000000000094c8         db  0x14 ; '.'
00000000000094c9         db  0xc4 ; '.'
00000000000094ca         db  0xff ; '.'
00000000000094cb         db  0xff ; '.'
00000000000094cc         db  0xf0 ; '.'
00000000000094cd         db  0x0b ; '.'
00000000000094ce         db  0x00 ; '.'
00000000000094cf         db  0x00 ; '.'
00000000000094d0         db  0x54 ; 'T'
00000000000094d1         db  0xc4 ; '.'
00000000000094d2         db  0xff ; '.'
00000000000094d3         db  0xff ; '.'
00000000000094d4         db  0x14 ; '.'
00000000000094d5         db  0x0c ; '.'
00000000000094d6         db  0x00 ; '.'
00000000000094d7         db  0x00 ; '.'
00000000000094d8         db  0x84 ; '.'
00000000000094d9         db  0xc4 ; '.'
00000000000094da         db  0xff ; '.'
00000000000094db         db  0xff ; '.'
00000000000094dc         db  0x28 ; '('
00000000000094dd         db  0x0c ; '.'
00000000000094de         db  0x00 ; '.'
00000000000094df         db  0x00 ; '.'
00000000000094e0         db  0x14 ; '.'
00000000000094e1         db  0xc5 ; '.'
00000000000094e2         db  0xff ; '.'
00000000000094e3         db  0xff ; '.'
00000000000094e4         db  0x40 ; '@'
00000000000094e5         db  0x0c ; '.'
00000000000094e6         db  0x00 ; '.'
00000000000094e7         db  0x00 ; '.'
00000000000094e8         db  0x64 ; 'd'
00000000000094e9         db  0xc5 ; '.'
00000000000094ea         db  0xff ; '.'
00000000000094eb         db  0xff ; '.'
00000000000094ec         db  0x58 ; 'X'
00000000000094ed         db  0x0c ; '.'
00000000000094ee         db  0x00 ; '.'
00000000000094ef         db  0x00 ; '.'
00000000000094f0         db  0x84 ; '.'
00000000000094f1         db  0xc5 ; '.'
00000000000094f2         db  0xff ; '.'
00000000000094f3         db  0xff ; '.'
00000000000094f4         db  0x74 ; 't'
00000000000094f5         db  0x0c ; '.'
00000000000094f6         db  0x00 ; '.'
00000000000094f7         db  0x00 ; '.'
00000000000094f8         db  0xb4 ; '.'
00000000000094f9         db  0xc5 ; '.'
00000000000094fa         db  0xff ; '.'
00000000000094fb         db  0xff ; '.'
00000000000094fc         db  0x90 ; '.'
00000000000094fd         db  0x0c ; '.'
00000000000094fe         db  0x00 ; '.'
00000000000094ff         db  0x00 ; '.'
0000000000009500         db  0xe4 ; '.'
0000000000009501         db  0xc5 ; '.'
0000000000009502         db  0xff ; '.'
0000000000009503         db  0xff ; '.'
0000000000009504         db  0xb8 ; '.'
0000000000009505         db  0x0c ; '.'
0000000000009506         db  0x00 ; '.'
0000000000009507         db  0x00 ; '.'
0000000000009508         db  0x04 ; '.'
0000000000009509         db  0xc6 ; '.'
000000000000950a         db  0xff ; '.'
000000000000950b         db  0xff ; '.'
000000000000950c         db  0xd4 ; '.'
000000000000950d         db  0x0c ; '.'
000000000000950e         db  0x00 ; '.'
000000000000950f         db  0x00 ; '.'
0000000000009510         db  0x44 ; 'D'
0000000000009511         db  0xc6 ; '.'
0000000000009512         db  0xff ; '.'
0000000000009513         db  0xff ; '.'
0000000000009514         db  0xec ; '.'
0000000000009515         db  0x0c ; '.'
0000000000009516         db  0x00 ; '.'
0000000000009517         db  0x00 ; '.'
0000000000009518         db  0x04 ; '.'
0000000000009519         db  0xc7 ; '.'
000000000000951a         db  0xff ; '.'
000000000000951b         db  0xff ; '.'
000000000000951c         db  0x34 ; '4'
000000000000951d         db  0x0d ; '.'
000000000000951e         db  0x00 ; '.'
000000000000951f         db  0x00 ; '.'
0000000000009520         db  0xc4 ; '.'
0000000000009521         db  0xc7 ; '.'
0000000000009522         db  0xff ; '.'
0000000000009523         db  0xff ; '.'
0000000000009524         db  0x54 ; 'T'
0000000000009525         db  0x0d ; '.'
0000000000009526         db  0x00 ; '.'
0000000000009527         db  0x00 ; '.'
0000000000009528         db  0x54 ; 'T'
0000000000009529         db  0xc8 ; '.'
000000000000952a         db  0xff ; '.'
000000000000952b         db  0xff ; '.'
000000000000952c         db  0x94 ; '.'
000000000000952d         db  0x0d ; '.'
000000000000952e         db  0x00 ; '.'
000000000000952f         db  0x00 ; '.'
0000000000009530         db  0xd4 ; '.'
0000000000009531         db  0xc8 ; '.'
0000000000009532         db  0xff ; '.'
0000000000009533         db  0xff ; '.'
0000000000009534         db  0xbc ; '.'
0000000000009535         db  0x0d ; '.'
0000000000009536         db  0x00 ; '.'
0000000000009537         db  0x00 ; '.'
0000000000009538         db  0x94 ; '.'
0000000000009539         db  0xc9 ; '.'
000000000000953a         db  0xff ; '.'
000000000000953b         db  0xff ; '.'
000000000000953c         db  0x14 ; '.'
000000000000953d         db  0x0e ; '.'
000000000000953e         db  0x00 ; '.'
000000000000953f         db  0x00 ; '.'
0000000000009540         db  0x14 ; '.'
0000000000009541         db  0xca ; '.'
0000000000009542         db  0xff ; '.'
0000000000009543         db  0xff ; '.'
0000000000009544         db  0x64 ; 'd'
0000000000009545         db  0x0e ; '.'
0000000000009546         db  0x00 ; '.'
0000000000009547         db  0x00 ; '.'
0000000000009548         db  0x74 ; 't'
0000000000009549         db  0xca ; '.'
000000000000954a         db  0xff ; '.'
000000000000954b         db  0xff ; '.'
000000000000954c         db  0x84 ; '.'
000000000000954d         db  0x0e ; '.'
000000000000954e         db  0x00 ; '.'
000000000000954f         db  0x00 ; '.'
0000000000009550         db  0xb4 ; '.'
0000000000009551         db  0xca ; '.'
0000000000009552         db  0xff ; '.'
0000000000009553         db  0xff ; '.'
0000000000009554         db  0xa4 ; '.'
0000000000009555         db  0x0e ; '.'
0000000000009556         db  0x00 ; '.'
0000000000009557         db  0x00 ; '.'
0000000000009558         db  0x34 ; '4'
0000000000009559         db  0xcb ; '.'
000000000000955a         db  0xff ; '.'
000000000000955b         db  0xff ; '.'
000000000000955c         db  0xdc ; '.'
000000000000955d         db  0x0e ; '.'
000000000000955e         db  0x00 ; '.'
000000000000955f         db  0x00 ; '.'
0000000000009560         db  0x74 ; 't'
0000000000009561         db  0xcb ; '.'
0000000000009562         db  0xff ; '.'
0000000000009563         db  0xff ; '.'
0000000000009564         db  0xfc ; '.'
0000000000009565         db  0x0e ; '.'
0000000000009566         db  0x00 ; '.'
0000000000009567         db  0x00 ; '.'
0000000000009568         db  0xd4 ; '.'
0000000000009569         db  0xcb ; '.'
000000000000956a         db  0xff ; '.'
000000000000956b         db  0xff ; '.'
000000000000956c         db  0x2c ; ','
000000000000956d         db  0x0f ; '.'
000000000000956e         db  0x00 ; '.'
000000000000956f         db  0x00 ; '.'
0000000000009570         db  0xf4 ; '.'
0000000000009571         db  0xdc ; '.'
0000000000009572         db  0xff ; '.'
0000000000009573         db  0xff ; '.'
0000000000009574         db  0x5c ; '\'
0000000000009575         db  0x0f ; '.'
0000000000009576         db  0x00 ; '.'
0000000000009577         db  0x00 ; '.'
0000000000009578         db  0xf4 ; '.'
0000000000009579         db  0xde ; '.'
000000000000957a         db  0xff ; '.'
000000000000957b         db  0xff ; '.'
000000000000957c         db  0x74 ; 't'
000000000000957d         db  0x0f ; '.'
000000000000957e         db  0x00 ; '.'
000000000000957f         db  0x00 ; '.'
0000000000009580         db  0xe4 ; '.'
0000000000009581         db  0xeb ; '.'
0000000000009582         db  0xff ; '.'
0000000000009583         db  0xff ; '.'
0000000000009584         db  0xc4 ; '.'
0000000000009585         db  0x0f ; '.'
0000000000009586         db  0x00 ; '.'
0000000000009587         db  0x00 ; '.'
0000000000009588         db  0x54 ; 'T'
0000000000009589         db  0xec ; '.'
000000000000958a         db  0xff ; '.'
000000000000958b         db  0xff ; '.'
000000000000958c         db  0x0c ; '.'
000000000000958d         db  0x10 ; '.'
000000000000958e         db  0x00 ; '.'
000000000000958f         db  0x00 ; '.'
0000000000009590         db  0x64 ; 'd'
0000000000009591         db  0xec ; '.'
0000000000009592         db  0xff ; '.'
0000000000009593         db  0xff ; '.'
0000000000009594         db  0x24 ; '$'
0000000000009595         db  0x10 ; '.'
0000000000009596         db  0x00 ; '.'
0000000000009597         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x9598; 0xa338[ (3488 bytes)
        ; File offset : [38296; 41784[ (3488 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000009598         dd         0x00000014                                  ; Length of the record
000000000000959c         dd         0x00000000                                  ; CIE ID
00000000000095a0         db         0x01                                        ; Version
00000000000095a1         db         "zR", 0                                     ; Augmentation String
00000000000095a4         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
00000000000095a5         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
00000000000095a6         db         0x10                                        ; Return address register
00000000000095a7         db         0x01                                        ; Augmentation data length
00000000000095a8         db         0x1b                                        ; FDE encoding
00000000000095a9         db  0x0c ; '.'
00000000000095aa         db  0x07 ; '.'
00000000000095ab         db  0x08 ; '.'
00000000000095ac         db  0x90 ; '.'
00000000000095ad         db  0x01 ; '.'
00000000000095ae         db  0x07 ; '.'
00000000000095af         db  0x10 ; '.'
00000000000095b0         dd         0x00000014                                  ; Length of the record
00000000000095b4         dd         0x0000001c                                  ; FDE: parent CIE at 0x9598 (FDE encoding = 0x1B)
00000000000095b8         db         0x88, 0x8f, 2 dup (0xff)                    ; begin 0x2540
00000000000095bc         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x256b)
00000000000095c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000095c1         align      8
00000000000095c8         dd         0x00000014                                  ; Length of the record
00000000000095cc         dd         0x00000000                                  ; CIE ID
00000000000095d0         db         0x01                                        ; Version
00000000000095d1         db         "zR", 0                                     ; Augmentation String
00000000000095d4         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
00000000000095d5         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
00000000000095d6         db         0x10                                        ; Return address register
00000000000095d7         db         0x01                                        ; Augmentation data length
00000000000095d8         db         0x1b                                        ; FDE encoding
00000000000095d9         db  0x0c ; '.'
00000000000095da         db  0x07 ; '.'
00000000000095db         db  0x08 ; '.'
00000000000095dc         db  0x90 ; '.'
00000000000095dd         db  0x01 ; '.'
00000000000095de         db  0x00 ; '.'
00000000000095df         db  0x00 ; '.'
00000000000095e0         dd         0x00000024                                  ; Length of the record
00000000000095e4         dd         0x0000001c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000095e8         db         0x88, 0x7f, 2 dup (0xff)                    ; begin 0x1570
00000000000095ec         db         0x70, 0x03, 2 dup (0x00)                    ; length 0x370 (end at 0x18e0)
00000000000095f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000095f1         db  0x0e ; '.'
00000000000095f2         db  0x10 ; '.'
00000000000095f3         db  0x46 ; 'F'
00000000000095f4         db  0x0e ; '.'
00000000000095f5         db  0x18 ; '.'
00000000000095f6         db  0x4a ; 'J'
00000000000095f7         db  0x0f ; '.'
00000000000095f8         db  0x0b ; '.'
00000000000095f9         db  0x77 ; 'w'
00000000000095fa         db  0x08 ; '.'
00000000000095fb         db  0x80 ; '.'
00000000000095fc         db  0x00 ; '.'
00000000000095fd         db  0x3f ; '?'
00000000000095fe         db  0x1a ; '.'
00000000000095ff         db  0x3b ; ';'
0000000000009600         db  0x2a ; '*'
0000000000009601         db  0x33 ; '3'
0000000000009602         db  0x24 ; '$'
0000000000009603         db  0x22 ; '"'
0000000000009604         db  0x00 ; '.'
0000000000009605         db  0x00 ; '.'
0000000000009606         db  0x00 ; '.'
0000000000009607         db  0x00 ; '.'
0000000000009608         dd         0x00000014                                  ; Length of the record
000000000000960c         dd         0x00000044                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009610         db         0xd0, 0x82, 2 dup (0xff)                    ; begin 0x18e0
0000000000009614         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x18e8)
0000000000009618         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009619         align      32
0000000000009620         dd         0x00000028                                  ; Length of the record
0000000000009624         dd         0x0000005c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009628         db         0x28, 0x90, 2 dup (0xff)                    ; begin 0x2650
000000000000962c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x268c)
0000000000009630         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009631         db  0x41 ; 'A'
0000000000009632         db  0x0e ; '.'
0000000000009633         db  0x10 ; '.'
0000000000009634         db  0x86 ; '.'
0000000000009635         db  0x02 ; '.'
0000000000009636         db  0x41 ; 'A'
0000000000009637         db  0x0e ; '.'
0000000000009638         db  0x18 ; '.'
0000000000009639         db  0x83 ; '.'
000000000000963a         db  0x03 ; '.'
000000000000963b         db  0x47 ; 'G'
000000000000963c         db  0x0e ; '.'
000000000000963d         db  0x20 ; ' '
000000000000963e         db  0x6c ; 'l'
000000000000963f         db  0x0a ; '.'
0000000000009640         db  0x0e ; '.'
0000000000009641         db  0x18 ; '.'
0000000000009642         db  0x41 ; 'A'
0000000000009643         db  0x0e ; '.'
0000000000009644         db  0x10 ; '.'
0000000000009645         db  0x41 ; 'A'
0000000000009646         db  0x0e ; '.'
0000000000009647         db  0x08 ; '.'
0000000000009648         db  0x41 ; 'A'
0000000000009649         db  0x0b ; '.'
000000000000964a         db  0x00 ; '.'
000000000000964b         db  0x00 ; '.'
000000000000964c         dd         0x00000014                                  ; Length of the record
0000000000009650         dd         0x00000088                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009654         db         0x3c, 0x90, 2 dup (0xff)                    ; begin 0x2690
0000000000009658         db         0x39, 3 dup (0x00)                          ; length 0x39 (end at 0x26c9)
000000000000965c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000965d         db  0x48 ; 'H'
000000000000965e         db  0x0e ; '.'
000000000000965f         db  0x10 ; '.'
0000000000009660         db  0x83 ; '.'
0000000000009661         db  0x02 ; '.'
0000000000009662         db  0x00 ; '.'
0000000000009663         db  0x00 ; '.'
0000000000009664         dd         0x0000004c                                  ; Length of the record
0000000000009668         dd         0x000000a0                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000966c         db         0x64, 0x90, 2 dup (0xff)                    ; begin 0x26d0
0000000000009670         db         0xcb, 0x03, 2 dup (0x00)                    ; length 0x3cb (end at 0x2a9b)
0000000000009674         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009675         db  0x42 ; 'B'
0000000000009676         db  0x0e ; '.'
0000000000009677         db  0x10 ; '.'
0000000000009678         db  0x8f ; '.'
0000000000009679         db  0x02 ; '.'
000000000000967a         db  0x42 ; 'B'
000000000000967b         db  0x0e ; '.'
000000000000967c         db  0x18 ; '.'
000000000000967d         db  0x8e ; '.'
000000000000967e         db  0x03 ; '.'
000000000000967f         db  0x45 ; 'E'
0000000000009680         db  0x0e ; '.'
0000000000009681         db  0x20 ; ' '
0000000000009682         db  0x8d ; '.'
0000000000009683         db  0x04 ; '.'
0000000000009684         db  0x42 ; 'B'
0000000000009685         db  0x0e ; '.'
0000000000009686         db  0x28 ; '('
0000000000009687         db  0x8c ; '.'
0000000000009688         db  0x05 ; '.'
0000000000009689         db  0x48 ; 'H'
000000000000968a         db  0x0e ; '.'
000000000000968b         db  0x30 ; '0'
000000000000968c         db  0x86 ; '.'
000000000000968d         db  0x06 ; '.'
000000000000968e         db  0x41 ; 'A'
000000000000968f         db  0x0e ; '.'
0000000000009690         db  0x38 ; '8'
0000000000009691         db  0x83 ; '.'
0000000000009692         db  0x07 ; '.'
0000000000009693         db  0x4f ; 'O'
0000000000009694         db  0x0e ; '.'
0000000000009695         db  0x80 ; '.'
0000000000009696         db  0x01 ; '.'
0000000000009697         db  0x03 ; '.'
0000000000009698         db  0x2e ; '.'
0000000000009699         db  0x03 ; '.'
000000000000969a         db  0x0a ; '.'
000000000000969b         db  0x0e ; '.'
000000000000969c         db  0x38 ; '8'
000000000000969d         db  0x43 ; 'C'
000000000000969e         db  0x0e ; '.'
000000000000969f         db  0x30 ; '0'
00000000000096a0         db  0x41 ; 'A'
00000000000096a1         db  0x0e ; '.'
00000000000096a2         db  0x28 ; '('
00000000000096a3         db  0x42 ; 'B'
00000000000096a4         db  0x0e ; '.'
00000000000096a5         db  0x20 ; ' '
00000000000096a6         db  0x42 ; 'B'
00000000000096a7         db  0x0e ; '.'
00000000000096a8         db  0x18 ; '.'
00000000000096a9         db  0x42 ; 'B'
00000000000096aa         db  0x0e ; '.'
00000000000096ab         db  0x10 ; '.'
00000000000096ac         db  0x42 ; 'B'
00000000000096ad         db  0x0e ; '.'
00000000000096ae         db  0x08 ; '.'
00000000000096af         db  0x41 ; 'A'
00000000000096b0         db  0x0b ; '.'
00000000000096b1         db  0x00 ; '.'
00000000000096b2         db  0x00 ; '.'
00000000000096b3         db  0x00 ; '.'
00000000000096b4         dd         0x00000028                                  ; Length of the record
00000000000096b8         dd         0x000000f0                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000096bc         db         0xe4, 0x93, 2 dup (0xff)                    ; begin 0x2aa0
00000000000096c0         db         0xda, 0x03, 2 dup (0x00)                    ; length 0x3da (end at 0x2e7a)
00000000000096c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000096c5         db  0x42 ; 'B'
00000000000096c6         db  0x0e ; '.'
00000000000096c7         db  0x10 ; '.'
00000000000096c8         db  0x8d ; '.'
00000000000096c9         db  0x02 ; '.'
00000000000096ca         db  0x42 ; 'B'
00000000000096cb         db  0x0e ; '.'
00000000000096cc         db  0x18 ; '.'
00000000000096cd         db  0x8c ; '.'
00000000000096ce         db  0x03 ; '.'
00000000000096cf         db  0x46 ; 'F'
00000000000096d0         db  0x0e ; '.'
00000000000096d1         db  0x20 ; ' '
00000000000096d2         db  0x86 ; '.'
00000000000096d3         db  0x04 ; '.'
00000000000096d4         db  0x41 ; 'A'
00000000000096d5         db  0x0e ; '.'
00000000000096d6         db  0x28 ; '('
00000000000096d7         db  0x83 ; '.'
00000000000096d8         db  0x05 ; '.'
00000000000096d9         db  0x49 ; 'I'
00000000000096da         db  0x0e ; '.'
00000000000096db         db  0xb0 ; '.'
00000000000096dc         db  0x01 ; '.'
00000000000096dd         db  0x00 ; '.'
00000000000096de         db  0x00 ; '.'
00000000000096df         db  0x00 ; '.'
00000000000096e0         dd         0x0000004c                                  ; Length of the record
00000000000096e4         dd         0x0000011c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000096e8         db         0x98, 0x97, 2 dup (0xff)                    ; begin 0x2e80
00000000000096ec         db         0x58, 0x03, 2 dup (0x00)                    ; length 0x358 (end at 0x31d8)
00000000000096f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000096f1         db  0x42 ; 'B'
00000000000096f2         db  0x0e ; '.'
00000000000096f3         db  0x10 ; '.'
00000000000096f4         db  0x8f ; '.'
00000000000096f5         db  0x02 ; '.'
00000000000096f6         db  0x42 ; 'B'
00000000000096f7         db  0x0e ; '.'
00000000000096f8         db  0x18 ; '.'
00000000000096f9         db  0x8e ; '.'
00000000000096fa         db  0x03 ; '.'
00000000000096fb         db  0x42 ; 'B'
00000000000096fc         db  0x0e ; '.'
00000000000096fd         db  0x20 ; ' '
00000000000096fe         db  0x8d ; '.'
00000000000096ff         db  0x04 ; '.'
0000000000009700         db  0x42 ; 'B'
0000000000009701         db  0x0e ; '.'
0000000000009702         db  0x28 ; '('
0000000000009703         db  0x8c ; '.'
0000000000009704         db  0x05 ; '.'
0000000000009705         db  0x41 ; 'A'
0000000000009706         db  0x0e ; '.'
0000000000009707         db  0x30 ; '0'
0000000000009708         db  0x86 ; '.'
0000000000009709         db  0x06 ; '.'
000000000000970a         db  0x41 ; 'A'
000000000000970b         db  0x0e ; '.'
000000000000970c         db  0x38 ; '8'
000000000000970d         db  0x83 ; '.'
000000000000970e         db  0x07 ; '.'
000000000000970f         db  0x4f ; 'O'
0000000000009710         db  0x0e ; '.'
0000000000009711         db  0x80 ; '.'
0000000000009712         db  0x01 ; '.'
0000000000009713         db  0x03 ; '.'
0000000000009714         db  0xe6 ; '.'
0000000000009715         db  0x01 ; '.'
0000000000009716         db  0x0a ; '.'
0000000000009717         db  0x0e ; '.'
0000000000009718         db  0x38 ; '8'
0000000000009719         db  0x41 ; 'A'
000000000000971a         db  0x0e ; '.'
000000000000971b         db  0x30 ; '0'
000000000000971c         db  0x41 ; 'A'
000000000000971d         db  0x0e ; '.'
000000000000971e         db  0x28 ; '('
000000000000971f         db  0x42 ; 'B'
0000000000009720         db  0x0e ; '.'
0000000000009721         db  0x20 ; ' '
0000000000009722         db  0x42 ; 'B'
0000000000009723         db  0x0e ; '.'
0000000000009724         db  0x18 ; '.'
0000000000009725         db  0x42 ; 'B'
0000000000009726         db  0x0e ; '.'
0000000000009727         db  0x10 ; '.'
0000000000009728         db  0x42 ; 'B'
0000000000009729         db  0x0e ; '.'
000000000000972a         db  0x08 ; '.'
000000000000972b         db  0x41 ; 'A'
000000000000972c         db  0x0b ; '.'
000000000000972d         db  0x00 ; '.'
000000000000972e         db  0x00 ; '.'
000000000000972f         db  0x00 ; '.'
0000000000009730         dd         0x000000a4                                  ; Length of the record
0000000000009734         dd         0x0000016c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009738         db         0xb8, 0x81, 2 dup (0xff)                    ; begin 0x18f0
000000000000973c         db         0x48, 0x0c, 2 dup (0x00)                    ; length 0xc48 (end at 0x2538)
0000000000009740         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009741         db  0x42 ; 'B'
0000000000009742         db  0x0e ; '.'
0000000000009743         db  0x10 ; '.'
0000000000009744         db  0x8f ; '.'
0000000000009745         db  0x02 ; '.'
0000000000009746         db  0x42 ; 'B'
0000000000009747         db  0x0e ; '.'
0000000000009748         db  0x18 ; '.'
0000000000009749         db  0x8e ; '.'
000000000000974a         db  0x03 ; '.'
000000000000974b         db  0x42 ; 'B'
000000000000974c         db  0x0e ; '.'
000000000000974d         db  0x20 ; ' '
000000000000974e         db  0x8d ; '.'
000000000000974f         db  0x04 ; '.'
0000000000009750         db  0x42 ; 'B'
0000000000009751         db  0x0e ; '.'
0000000000009752         db  0x28 ; '('
0000000000009753         db  0x8c ; '.'
0000000000009754         db  0x05 ; '.'
0000000000009755         db  0x44 ; 'D'
0000000000009756         db  0x0e ; '.'
0000000000009757         db  0x30 ; '0'
0000000000009758         db  0x86 ; '.'
0000000000009759         db  0x06 ; '.'
000000000000975a         db  0x41 ; 'A'
000000000000975b         db  0x0e ; '.'
000000000000975c         db  0x38 ; '8'
000000000000975d         db  0x83 ; '.'
000000000000975e         db  0x07 ; '.'
000000000000975f         db  0x51 ; 'Q'
0000000000009760         db  0x0e ; '.'
0000000000009761         db  0x90 ; '.'
0000000000009762         db  0x02 ; '.'
0000000000009763         db  0x03 ; '.'
0000000000009764         db  0x2b ; '+'
0000000000009765         db  0x03 ; '.'
0000000000009766         db  0x0e ; '.'
0000000000009767         db  0x98 ; '.'
0000000000009768         db  0x02 ; '.'
0000000000009769         db  0x44 ; 'D'
000000000000976a         db  0x0e ; '.'
000000000000976b         db  0xa0 ; '.'
000000000000976c         db  0x02 ; '.'
000000000000976d         db  0x5a ; 'Z'
000000000000976e         db  0x0e ; '.'
000000000000976f         db  0x98 ; '.'
0000000000009770         db  0x02 ; '.'
0000000000009771         db  0x41 ; 'A'
0000000000009772         db  0x0e ; '.'
0000000000009773         db  0x90 ; '.'
0000000000009774         db  0x02 ; '.'
0000000000009775         db  0x02 ; '.'
0000000000009776         db  0x7b ; '{'
0000000000009777         db  0x0e ; '.'
0000000000009778         db  0x98 ; '.'
0000000000009779         db  0x02 ; '.'
000000000000977a         db  0x44 ; 'D'
000000000000977b         db  0x0e ; '.'
000000000000977c         db  0xa0 ; '.'
000000000000977d         db  0x02 ; '.'
000000000000977e         db  0x4d ; 'M'
000000000000977f         db  0x0e ; '.'
0000000000009780         db  0x98 ; '.'
0000000000009781         db  0x02 ; '.'
0000000000009782         db  0x41 ; 'A'
0000000000009783         db  0x0e ; '.'
0000000000009784         db  0x90 ; '.'
0000000000009785         db  0x02 ; '.'
0000000000009786         db  0x02 ; '.'
0000000000009787         db  0x72 ; 'r'
0000000000009788         db  0x0e ; '.'
0000000000009789         db  0x98 ; '.'
000000000000978a         db  0x02 ; '.'
000000000000978b         db  0x44 ; 'D'
000000000000978c         db  0x0e ; '.'
000000000000978d         db  0xa0 ; '.'
000000000000978e         db  0x02 ; '.'
000000000000978f         db  0x53 ; 'S'
0000000000009790         db  0x0e ; '.'
0000000000009791         db  0x98 ; '.'
0000000000009792         db  0x02 ; '.'
0000000000009793         db  0x42 ; 'B'
0000000000009794         db  0x0e ; '.'
0000000000009795         db  0x90 ; '.'
0000000000009796         db  0x02 ; '.'
0000000000009797         db  0x02 ; '.'
0000000000009798         db  0xb5 ; '.'
0000000000009799         db  0x0a ; '.'
000000000000979a         db  0x0e ; '.'
000000000000979b         db  0x38 ; '8'
000000000000979c         db  0x41 ; 'A'
000000000000979d         db  0x0e ; '.'
000000000000979e         db  0x30 ; '0'
000000000000979f         db  0x41 ; 'A'
00000000000097a0         db  0x0e ; '.'
00000000000097a1         db  0x28 ; '('
00000000000097a2         db  0x42 ; 'B'
00000000000097a3         db  0x0e ; '.'
00000000000097a4         db  0x20 ; ' '
00000000000097a5         db  0x42 ; 'B'
00000000000097a6         db  0x0e ; '.'
00000000000097a7         db  0x18 ; '.'
00000000000097a8         db  0x42 ; 'B'
00000000000097a9         db  0x0e ; '.'
00000000000097aa         db  0x10 ; '.'
00000000000097ab         db  0x42 ; 'B'
00000000000097ac         db  0x0e ; '.'
00000000000097ad         db  0x08 ; '.'
00000000000097ae         db  0x41 ; 'A'
00000000000097af         db  0x0b ; '.'
00000000000097b0         db  0x03 ; '.'
00000000000097b1         db  0xeb ; '.'
00000000000097b2         db  0x04 ; '.'
00000000000097b3         db  0x0e ; '.'
00000000000097b4         db  0x98 ; '.'
00000000000097b5         db  0x02 ; '.'
00000000000097b6         db  0x44 ; 'D'
00000000000097b7         db  0x0e ; '.'
00000000000097b8         db  0xa0 ; '.'
00000000000097b9         db  0x02 ; '.'
00000000000097ba         db  0x49 ; 'I'
00000000000097bb         db  0x0e ; '.'
00000000000097bc         db  0x98 ; '.'
00000000000097bd         db  0x02 ; '.'
00000000000097be         db  0x44 ; 'D'
00000000000097bf         db  0x0e ; '.'
00000000000097c0         db  0x90 ; '.'
00000000000097c1         db  0x02 ; '.'
00000000000097c2         db  0x02 ; '.'
00000000000097c3         db  0x6e ; 'n'
00000000000097c4         db  0x0e ; '.'
00000000000097c5         db  0x98 ; '.'
00000000000097c6         db  0x02 ; '.'
00000000000097c7         db  0x44 ; 'D'
00000000000097c8         db  0x0e ; '.'
00000000000097c9         db  0xa0 ; '.'
00000000000097ca         db  0x02 ; '.'
00000000000097cb         db  0x46 ; 'F'
00000000000097cc         db  0x0e ; '.'
00000000000097cd         db  0x98 ; '.'
00000000000097ce         db  0x02 ; '.'
00000000000097cf         db  0x42 ; 'B'
00000000000097d0         db  0x0e ; '.'
00000000000097d1         db  0x90 ; '.'
00000000000097d2         db  0x02 ; '.'
00000000000097d3         db  0x00 ; '.'
00000000000097d4         db  0x00 ; '.'
00000000000097d5         db  0x00 ; '.'
00000000000097d6         db  0x00 ; '.'
00000000000097d7         db  0x00 ; '.'
00000000000097d8         dd         0x0000003c                                  ; Length of the record
00000000000097dc         dd         0x00000214                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000097e0         db         0x00, 0x9a, 2 dup (0xff)                    ; begin 0x31e0
00000000000097e4         db         0xa7, 3 dup (0x00)                          ; length 0xa7 (end at 0x3287)
00000000000097e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000097e9         db  0x42 ; 'B'
00000000000097ea         db  0x0e ; '.'
00000000000097eb         db  0x10 ; '.'
00000000000097ec         db  0x8d ; '.'
00000000000097ed         db  0x02 ; '.'
00000000000097ee         db  0x42 ; 'B'
00000000000097ef         db  0x0e ; '.'
00000000000097f0         db  0x18 ; '.'
00000000000097f1         db  0x8c ; '.'
00000000000097f2         db  0x03 ; '.'
00000000000097f3         db  0x41 ; 'A'
00000000000097f4         db  0x0e ; '.'
00000000000097f5         db  0x20 ; ' '
00000000000097f6         db  0x86 ; '.'
00000000000097f7         db  0x04 ; '.'
00000000000097f8         db  0x41 ; 'A'
00000000000097f9         db  0x0e ; '.'
00000000000097fa         db  0x28 ; '('
00000000000097fb         db  0x83 ; '.'
00000000000097fc         db  0x05 ; '.'
00000000000097fd         db  0x4a ; 'J'
00000000000097fe         db  0x0e ; '.'
00000000000097ff         db  0x60 ; '`'
0000000000009800         db  0x02 ; '.'
0000000000009801         db  0x49 ; 'I'
0000000000009802         db  0x0a ; '.'
0000000000009803         db  0x0e ; '.'
0000000000009804         db  0x28 ; '('
0000000000009805         db  0x41 ; 'A'
0000000000009806         db  0x0e ; '.'
0000000000009807         db  0x20 ; ' '
0000000000009808         db  0x41 ; 'A'
0000000000009809         db  0x0e ; '.'
000000000000980a         db  0x18 ; '.'
000000000000980b         db  0x42 ; 'B'
000000000000980c         db  0x0e ; '.'
000000000000980d         db  0x10 ; '.'
000000000000980e         db  0x42 ; 'B'
000000000000980f         db  0x0e ; '.'
0000000000009810         db  0x08 ; '.'
0000000000009811         db  0x41 ; 'A'
0000000000009812         db  0x0b ; '.'
0000000000009813         db  0x00 ; '.'
0000000000009814         db  0x00 ; '.'
0000000000009815         db  0x00 ; '.'
0000000000009816         db  0x00 ; '.'
0000000000009817         db  0x00 ; '.'
0000000000009818         dd         0x00000010                                  ; Length of the record
000000000000981c         dd         0x00000254                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009820         db         0x70, 0x9a, 2 dup (0xff)                    ; begin 0x3290
0000000000009824         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3298)
0000000000009828         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009829         align      4
000000000000982c         dd         0x00000010                                  ; Length of the record
0000000000009830         dd         0x00000268                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009834         db         0x6c, 0x9a, 2 dup (0xff)                    ; begin 0x32a0
0000000000009838         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x32a8)
000000000000983c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000983d         align      64
0000000000009840         dd         0x0000002c                                  ; Length of the record
0000000000009844         dd         0x0000027c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009848         db         0x68, 0x9a, 2 dup (0xff)                    ; begin 0x32b0
000000000000984c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3354)
0000000000009850         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009851         db  0x41 ; 'A'
0000000000009852         db  0x0e ; '.'
0000000000009853         db  0x10 ; '.'
0000000000009854         db  0x86 ; '.'
0000000000009855         db  0x02 ; '.'
0000000000009856         db  0x41 ; 'A'
0000000000009857         db  0x0e ; '.'
0000000000009858         db  0x18 ; '.'
0000000000009859         db  0x83 ; '.'
000000000000985a         db  0x03 ; '.'
000000000000985b         db  0x44 ; 'D'
000000000000985c         db  0x0e ; '.'
000000000000985d         db  0x20 ; ' '
000000000000985e         db  0x7a ; 'z'
000000000000985f         db  0x0a ; '.'
0000000000009860         db  0x0e ; '.'
0000000000009861         db  0x18 ; '.'
0000000000009862         db  0x41 ; 'A'
0000000000009863         db  0x0e ; '.'
0000000000009864         db  0x10 ; '.'
0000000000009865         db  0x41 ; 'A'
0000000000009866         db  0x0e ; '.'
0000000000009867         db  0x08 ; '.'
0000000000009868         db  0x41 ; 'A'
0000000000009869         db  0x0b ; '.'
000000000000986a         db  0x00 ; '.'
000000000000986b         db  0x00 ; '.'
000000000000986c         db  0x00 ; '.'
000000000000986d         db  0x00 ; '.'
000000000000986e         db  0x00 ; '.'
000000000000986f         db  0x00 ; '.'
0000000000009870         dd         0x0000001c                                  ; Length of the record
0000000000009874         dd         0x000002ac                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009878         db         0xe8, 0x9a, 2 dup (0xff)                    ; begin 0x3360
000000000000987c         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x33ff)
0000000000009880         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009881         db  0x44 ; 'D'
0000000000009882         db  0x0e ; '.'
0000000000009883         db  0x10 ; '.'
0000000000009884         db  0x83 ; '.'
0000000000009885         db  0x02 ; '.'
0000000000009886         db  0x02 ; '.'
0000000000009887         db  0x78 ; 'x'
0000000000009888         db  0x0a ; '.'
0000000000009889         db  0x0e ; '.'
000000000000988a         db  0x08 ; '.'
000000000000988b         db  0x41 ; 'A'
000000000000988c         db  0x0b ; '.'
000000000000988d         db  0x00 ; '.'
000000000000988e         db  0x00 ; '.'
000000000000988f         db  0x00 ; '.'
0000000000009890         dd         0x00000040                                  ; Length of the record
0000000000009894         dd         0x000002cc                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009898         db         0x68, 0x9b, 2 dup (0xff)                    ; begin 0x3400
000000000000989c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x34e7)
00000000000098a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000098a1         db  0x41 ; 'A'
00000000000098a2         db  0x0e ; '.'
00000000000098a3         db  0x10 ; '.'
00000000000098a4         db  0x86 ; '.'
00000000000098a5         db  0x02 ; '.'
00000000000098a6         db  0x41 ; 'A'
00000000000098a7         db  0x0e ; '.'
00000000000098a8         db  0x18 ; '.'
00000000000098a9         db  0x83 ; '.'
00000000000098aa         db  0x03 ; '.'
00000000000098ab         db  0x49 ; 'I'
00000000000098ac         db  0x0e ; '.'
00000000000098ad         db  0x20 ; ' '
00000000000098ae         db  0x6e ; 'n'
00000000000098af         db  0x0a ; '.'
00000000000098b0         db  0x0e ; '.'
00000000000098b1         db  0x18 ; '.'
00000000000098b2         db  0x41 ; 'A'
00000000000098b3         db  0x0e ; '.'
00000000000098b4         db  0x10 ; '.'
00000000000098b5         db  0x41 ; 'A'
00000000000098b6         db  0x0e ; '.'
00000000000098b7         db  0x08 ; '.'
00000000000098b8         db  0x45 ; 'E'
00000000000098b9         db  0x0b ; '.'
00000000000098ba         db  0x02 ; '.'
00000000000098bb         db  0x4a ; 'J'
00000000000098bc         db  0x0a ; '.'
00000000000098bd         db  0x0e ; '.'
00000000000098be         db  0x18 ; '.'
00000000000098bf         db  0x41 ; 'A'
00000000000098c0         db  0x0e ; '.'
00000000000098c1         db  0x10 ; '.'
00000000000098c2         db  0x41 ; 'A'
00000000000098c3         db  0x0e ; '.'
00000000000098c4         db  0x08 ; '.'
00000000000098c5         db  0x44 ; 'D'
00000000000098c6         db  0x0b ; '.'
00000000000098c7         db  0x02 ; '.'
00000000000098c8         db  0x54 ; 'T'
00000000000098c9         db  0x0e ; '.'
00000000000098ca         db  0x18 ; '.'
00000000000098cb         db  0x41 ; 'A'
00000000000098cc         db  0x0e ; '.'
00000000000098cd         db  0x10 ; '.'
00000000000098ce         db  0x41 ; 'A'
00000000000098cf         db  0x0e ; '.'
00000000000098d0         db  0x08 ; '.'
00000000000098d1         db  0x00 ; '.'
00000000000098d2         db  0x00 ; '.'
00000000000098d3         db  0x00 ; '.'
00000000000098d4         dd         0x00000074                                  ; Length of the record
00000000000098d8         dd         0x00000310                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000098dc         db         0x14, 0x9c, 2 dup (0xff)                    ; begin 0x34f0
00000000000098e0         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x4724)
00000000000098e4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000098e5         db  0x42 ; 'B'
00000000000098e6         db  0x0e ; '.'
00000000000098e7         db  0x10 ; '.'
00000000000098e8         db  0x8f ; '.'
00000000000098e9         db  0x02 ; '.'
00000000000098ea         db  0x42 ; 'B'
00000000000098eb         db  0x0e ; '.'
00000000000098ec         db  0x18 ; '.'
00000000000098ed         db  0x8e ; '.'
00000000000098ee         db  0x03 ; '.'
00000000000098ef         db  0x45 ; 'E'
00000000000098f0         db  0x0e ; '.'
00000000000098f1         db  0x20 ; ' '
00000000000098f2         db  0x8d ; '.'
00000000000098f3         db  0x04 ; '.'
00000000000098f4         db  0x42 ; 'B'
00000000000098f5         db  0x0e ; '.'
00000000000098f6         db  0x28 ; '('
00000000000098f7         db  0x8c ; '.'
00000000000098f8         db  0x05 ; '.'
00000000000098f9         db  0x44 ; 'D'
00000000000098fa         db  0x0e ; '.'
00000000000098fb         db  0x30 ; '0'
00000000000098fc         db  0x86 ; '.'
00000000000098fd         db  0x06 ; '.'
00000000000098fe         db  0x41 ; 'A'
00000000000098ff         db  0x0e ; '.'
0000000000009900         db  0x38 ; '8'
0000000000009901         db  0x83 ; '.'
0000000000009902         db  0x07 ; '.'
0000000000009903         db  0x53 ; 'S'
0000000000009904         db  0x0e ; '.'
0000000000009905         db  0xf0 ; '.'
0000000000009906         db  0x01 ; '.'
0000000000009907         db  0x03 ; '.'
0000000000009908         db  0x81 ; '.'
0000000000009909         db  0x0b ; '.'
000000000000990a         db  0x0e ; '.'
000000000000990b         db  0xf8 ; '.'
000000000000990c         db  0x01 ; '.'
000000000000990d         db  0x4a ; 'J'
000000000000990e         db  0x0e ; '.'
000000000000990f         db  0x80 ; '.'
0000000000009910         db  0x02 ; '.'
0000000000009911         db  0x44 ; 'D'
0000000000009912         db  0x0e ; '.'
0000000000009913         db  0x88 ; '.'
0000000000009914         db  0x02 ; '.'
0000000000009915         db  0x45 ; 'E'
0000000000009916         db  0x0e ; '.'
0000000000009917         db  0x90 ; '.'
0000000000009918         db  0x02 ; '.'
0000000000009919         db  0x5f ; '_'
000000000000991a         db  0x0e ; '.'
000000000000991b         db  0xf0 ; '.'
000000000000991c         db  0x01 ; '.'
000000000000991d         db  0x64 ; 'd'
000000000000991e         db  0x0a ; '.'
000000000000991f         db  0x0e ; '.'
0000000000009920         db  0x38 ; '8'
0000000000009921         db  0x41 ; 'A'
0000000000009922         db  0x0e ; '.'
0000000000009923         db  0x30 ; '0'
0000000000009924         db  0x41 ; 'A'
0000000000009925         db  0x0e ; '.'
0000000000009926         db  0x28 ; '('
0000000000009927         db  0x42 ; 'B'
0000000000009928         db  0x0e ; '.'
0000000000009929         db  0x20 ; ' '
000000000000992a         db  0x42 ; 'B'
000000000000992b         db  0x0e ; '.'
000000000000992c         db  0x18 ; '.'
000000000000992d         db  0x42 ; 'B'
000000000000992e         db  0x0e ; '.'
000000000000992f         db  0x10 ; '.'
0000000000009930         db  0x42 ; 'B'
0000000000009931         db  0x0e ; '.'
0000000000009932         db  0x08 ; '.'
0000000000009933         db  0x44 ; 'D'
0000000000009934         db  0x0b ; '.'
0000000000009935         db  0x03 ; '.'
0000000000009936         db  0x99 ; '.'
0000000000009937         db  0x05 ; '.'
0000000000009938         db  0x0e ; '.'
0000000000009939         db  0xf8 ; '.'
000000000000993a         db  0x01 ; '.'
000000000000993b         db  0x4d ; 'M'
000000000000993c         db  0x0e ; '.'
000000000000993d         db  0x80 ; '.'
000000000000993e         db  0x02 ; '.'
000000000000993f         db  0x44 ; 'D'
0000000000009940         db  0x0e ; '.'
0000000000009941         db  0x88 ; '.'
0000000000009942         db  0x02 ; '.'
0000000000009943         db  0x47 ; 'G'
0000000000009944         db  0x0e ; '.'
0000000000009945         db  0x90 ; '.'
0000000000009946         db  0x02 ; '.'
0000000000009947         db  0x5b ; '['
0000000000009948         db  0x0e ; '.'
0000000000009949         db  0xf0 ; '.'
000000000000994a         db  0x01 ; '.'
000000000000994b         db  0x00 ; '.'
000000000000994c         dd         0x00000068                                  ; Length of the record
0000000000009950         dd         0x00000388                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009954         db         0xdc, 0xad, 2 dup (0xff)                    ; begin 0x4730
0000000000009958         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x48db)
000000000000995c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000995d         db  0x42 ; 'B'
000000000000995e         db  0x0e ; '.'
000000000000995f         db  0x10 ; '.'
0000000000009960         db  0x8f ; '.'
0000000000009961         db  0x02 ; '.'
0000000000009962         db  0x42 ; 'B'
0000000000009963         db  0x0e ; '.'
0000000000009964         db  0x18 ; '.'
0000000000009965         db  0x8e ; '.'
0000000000009966         db  0x03 ; '.'
0000000000009967         db  0x45 ; 'E'
0000000000009968         db  0x0e ; '.'
0000000000009969         db  0x20 ; ' '
000000000000996a         db  0x8d ; '.'
000000000000996b         db  0x04 ; '.'
000000000000996c         db  0x42 ; 'B'
000000000000996d         db  0x0e ; '.'
000000000000996e         db  0x28 ; '('
000000000000996f         db  0x8c ; '.'
0000000000009970         db  0x05 ; '.'
0000000000009971         db  0x44 ; 'D'
0000000000009972         db  0x0e ; '.'
0000000000009973         db  0x30 ; '0'
0000000000009974         db  0x86 ; '.'
0000000000009975         db  0x06 ; '.'
0000000000009976         db  0x41 ; 'A'
0000000000009977         db  0x0e ; '.'
0000000000009978         db  0x38 ; '8'
0000000000009979         db  0x83 ; '.'
000000000000997a         db  0x07 ; '.'
000000000000997b         db  0x47 ; 'G'
000000000000997c         db  0x0e ; '.'
000000000000997d         db  0x60 ; '`'
000000000000997e         db  0x02 ; '.'
000000000000997f         db  0x99 ; '.'
0000000000009980         db  0x0e ; '.'
0000000000009981         db  0x68 ; 'h'
0000000000009982         db  0x5f ; '_'
0000000000009983         db  0x0e ; '.'
0000000000009984         db  0x70 ; 'p'
0000000000009985         db  0x46 ; 'F'
0000000000009986         db  0x0e ; '.'
0000000000009987         db  0x78 ; 'x'
0000000000009988         db  0x42 ; 'B'
0000000000009989         db  0x0e ; '.'
000000000000998a         db  0x80 ; '.'
000000000000998b         db  0x01 ; '.'
000000000000998c         db  0x59 ; 'Y'
000000000000998d         db  0x0e ; '.'
000000000000998e         db  0x60 ; '`'
000000000000998f         db  0x02 ; '.'
0000000000009990         db  0x40 ; '@'
0000000000009991         db  0x0e ; '.'
0000000000009992         db  0x68 ; 'h'
0000000000009993         db  0x4b ; 'K'
0000000000009994         db  0x0e ; '.'
0000000000009995         db  0x70 ; 'p'
0000000000009996         db  0x43 ; 'C'
0000000000009997         db  0x0e ; '.'
0000000000009998         db  0x78 ; 'x'
0000000000009999         db  0x45 ; 'E'
000000000000999a         db  0x0e ; '.'
000000000000999b         db  0x80 ; '.'
000000000000999c         db  0x01 ; '.'
000000000000999d         db  0x5e ; '^'
000000000000999e         db  0x0e ; '.'
000000000000999f         db  0x60 ; '`'
00000000000099a0         db  0x4c ; 'L'
00000000000099a1         db  0x0a ; '.'
00000000000099a2         db  0x0e ; '.'
00000000000099a3         db  0x38 ; '8'
00000000000099a4         db  0x44 ; 'D'
00000000000099a5         db  0x0e ; '.'
00000000000099a6         db  0x30 ; '0'
00000000000099a7         db  0x41 ; 'A'
00000000000099a8         db  0x0e ; '.'
00000000000099a9         db  0x28 ; '('
00000000000099aa         db  0x42 ; 'B'
00000000000099ab         db  0x0e ; '.'
00000000000099ac         db  0x20 ; ' '
00000000000099ad         db  0x42 ; 'B'
00000000000099ae         db  0x0e ; '.'
00000000000099af         db  0x18 ; '.'
00000000000099b0         db  0x42 ; 'B'
00000000000099b1         db  0x0e ; '.'
00000000000099b2         db  0x10 ; '.'
00000000000099b3         db  0x42 ; 'B'
00000000000099b4         db  0x0e ; '.'
00000000000099b5         db  0x08 ; '.'
00000000000099b6         db  0x46 ; 'F'
00000000000099b7         db  0x0b ; '.'
00000000000099b8         dd         0x00000028                                  ; Length of the record
00000000000099bc         dd         0x000003f4                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000099c0         db         0x20, 0xaf, 2 dup (0xff)                    ; begin 0x48e0
00000000000099c4         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x4916)
00000000000099c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000099c9         db  0x42 ; 'B'
00000000000099ca         db  0x0e ; '.'
00000000000099cb         db  0x10 ; '.'
00000000000099cc         db  0x8c ; '.'
00000000000099cd         db  0x02 ; '.'
00000000000099ce         db  0x41 ; 'A'
00000000000099cf         db  0x0e ; '.'
00000000000099d0         db  0x18 ; '.'
00000000000099d1         db  0x86 ; '.'
00000000000099d2         db  0x03 ; '.'
00000000000099d3         db  0x41 ; 'A'
00000000000099d4         db  0x0e ; '.'
00000000000099d5         db  0x20 ; ' '
00000000000099d6         db  0x83 ; '.'
00000000000099d7         db  0x04 ; '.'
00000000000099d8         db  0x6e ; 'n'
00000000000099d9         db  0x0e ; '.'
00000000000099da         db  0x18 ; '.'
00000000000099db         db  0x41 ; 'A'
00000000000099dc         db  0x0e ; '.'
00000000000099dd         db  0x10 ; '.'
00000000000099de         db  0x42 ; 'B'
00000000000099df         db  0x0e ; '.'
00000000000099e0         db  0x08 ; '.'
00000000000099e1         db  0x00 ; '.'
00000000000099e2         db  0x00 ; '.'
00000000000099e3         db  0x00 ; '.'
00000000000099e4         dd         0x00000010                                  ; Length of the record
00000000000099e8         dd         0x00000420                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
00000000000099ec         db         0x34, 0xaf, 2 dup (0xff)                    ; begin 0x4920
00000000000099f0         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4931)
00000000000099f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000099f5         align      8
00000000000099f8         dd         0x00000010                                  ; Length of the record
00000000000099fc         dd         0x00000434                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009a00         db         0x40, 0xaf, 2 dup (0xff)                    ; begin 0x4940
0000000000009a04         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4951)
0000000000009a08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a09         align      4
0000000000009a0c         dd         0x00000010                                  ; Length of the record
0000000000009a10         dd         0x00000448                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009a14         db         0x4c, 0xaf, 2 dup (0xff)                    ; begin 0x4960
0000000000009a18         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x4995)
0000000000009a1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a1d         align      32
0000000000009a20         dd         0x00000010                                  ; Length of the record
0000000000009a24         dd         0x0000045c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009a28         db         0x78, 0xaf, 2 dup (0xff)                    ; begin 0x49a0
0000000000009a2c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x49b5)
0000000000009a30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a31         align      4
0000000000009a34         dd         0x00000010                                  ; Length of the record
0000000000009a38         dd         0x00000470                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009a3c         db         0x84, 0xaf, 2 dup (0xff)                    ; begin 0x49c0
0000000000009a40         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x49f0)
0000000000009a44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a45         db  0x6b ; 'k'
0000000000009a46         db  0x0e ; '.'
0000000000009a47         db  0x10 ; '.'
0000000000009a48         dd         0x00000050                                  ; Length of the record
0000000000009a4c         dd         0x00000484                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009a50         db         0xa0, 0xaf, 2 dup (0xff)                    ; begin 0x49f0
0000000000009a54         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4a64)
0000000000009a58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a59         db  0x42 ; 'B'
0000000000009a5a         db  0x0e ; '.'
0000000000009a5b         db  0x10 ; '.'
0000000000009a5c         db  0x8f ; '.'
0000000000009a5d         db  0x02 ; '.'
0000000000009a5e         db  0x42 ; 'B'
0000000000009a5f         db  0x0e ; '.'
0000000000009a60         db  0x18 ; '.'
0000000000009a61         db  0x8e ; '.'
0000000000009a62         db  0x03 ; '.'
0000000000009a63         db  0x49 ; 'I'
0000000000009a64         db  0x0e ; '.'
0000000000009a65         db  0x20 ; ' '
0000000000009a66         db  0x8d ; '.'
0000000000009a67         db  0x04 ; '.'
0000000000009a68         db  0x42 ; 'B'
0000000000009a69         db  0x0e ; '.'
0000000000009a6a         db  0x28 ; '('
0000000000009a6b         db  0x8c ; '.'
0000000000009a6c         db  0x05 ; '.'
0000000000009a6d         db  0x44 ; 'D'
0000000000009a6e         db  0x0e ; '.'
0000000000009a6f         db  0x30 ; '0'
0000000000009a70         db  0x86 ; '.'
0000000000009a71         db  0x06 ; '.'
0000000000009a72         db  0x41 ; 'A'
0000000000009a73         db  0x0e ; '.'
0000000000009a74         db  0x38 ; '8'
0000000000009a75         db  0x83 ; '.'
0000000000009a76         db  0x07 ; '.'
0000000000009a77         db  0x4d ; 'M'
0000000000009a78         db  0x0e ; '.'
0000000000009a79         db  0x50 ; 'P'
0000000000009a7a         db  0x5f ; '_'
0000000000009a7b         db  0x0e ; '.'
0000000000009a7c         db  0x58 ; 'X'
0000000000009a7d         db  0x47 ; 'G'
0000000000009a7e         db  0x0e ; '.'
0000000000009a7f         db  0x60 ; '`'
0000000000009a80         db  0x46 ; 'F'
0000000000009a81         db  0x0e ; '.'
0000000000009a82         db  0x68 ; 'h'
0000000000009a83         db  0x44 ; 'D'
0000000000009a84         db  0x0e ; '.'
0000000000009a85         db  0x70 ; 'p'
0000000000009a86         db  0x58 ; 'X'
0000000000009a87         db  0x0e ; '.'
0000000000009a88         db  0x38 ; '8'
0000000000009a89         db  0x41 ; 'A'
0000000000009a8a         db  0x0e ; '.'
0000000000009a8b         db  0x30 ; '0'
0000000000009a8c         db  0x41 ; 'A'
0000000000009a8d         db  0x0e ; '.'
0000000000009a8e         db  0x28 ; '('
0000000000009a8f         db  0x42 ; 'B'
0000000000009a90         db  0x0e ; '.'
0000000000009a91         db  0x20 ; ' '
0000000000009a92         db  0x42 ; 'B'
0000000000009a93         db  0x0e ; '.'
0000000000009a94         db  0x18 ; '.'
0000000000009a95         db  0x42 ; 'B'
0000000000009a96         db  0x0e ; '.'
0000000000009a97         db  0x10 ; '.'
0000000000009a98         db  0x42 ; 'B'
0000000000009a99         db  0x0e ; '.'
0000000000009a9a         db  0x08 ; '.'
0000000000009a9b         db  0x00 ; '.'
0000000000009a9c         dd         0x00000068                                  ; Length of the record
0000000000009aa0         dd         0x000004d8                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009aa4         db         0xcc, 0xaf, 2 dup (0xff)                    ; begin 0x4a70
0000000000009aa8         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4b53)
0000000000009aac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009aad         db  0x42 ; 'B'
0000000000009aae         db  0x0e ; '.'
0000000000009aaf         db  0x10 ; '.'
0000000000009ab0         db  0x8f ; '.'
0000000000009ab1         db  0x02 ; '.'
0000000000009ab2         db  0x42 ; 'B'
0000000000009ab3         db  0x0e ; '.'
0000000000009ab4         db  0x18 ; '.'
0000000000009ab5         db  0x8e ; '.'
0000000000009ab6         db  0x03 ; '.'
0000000000009ab7         db  0x49 ; 'I'
0000000000009ab8         db  0x0e ; '.'
0000000000009ab9         db  0x20 ; ' '
0000000000009aba         db  0x8d ; '.'
0000000000009abb         db  0x04 ; '.'
0000000000009abc         db  0x42 ; 'B'
0000000000009abd         db  0x0e ; '.'
0000000000009abe         db  0x28 ; '('
0000000000009abf         db  0x8c ; '.'
0000000000009ac0         db  0x05 ; '.'
0000000000009ac1         db  0x44 ; 'D'
0000000000009ac2         db  0x0e ; '.'
0000000000009ac3         db  0x30 ; '0'
0000000000009ac4         db  0x86 ; '.'
0000000000009ac5         db  0x06 ; '.'
0000000000009ac6         db  0x41 ; 'A'
0000000000009ac7         db  0x0e ; '.'
0000000000009ac8         db  0x38 ; '8'
0000000000009ac9         db  0x83 ; '.'
0000000000009aca         db  0x07 ; '.'
0000000000009acb         db  0x4d ; 'M'
0000000000009acc         db  0x0e ; '.'
0000000000009acd         db  0x70 ; 'p'
0000000000009ace         db  0x65 ; 'e'
0000000000009acf         db  0x0e ; '.'
0000000000009ad0         db  0x78 ; 'x'
0000000000009ad1         db  0x4d ; 'M'
0000000000009ad2         db  0x0e ; '.'
0000000000009ad3         db  0x80 ; '.'
0000000000009ad4         db  0x01 ; '.'
0000000000009ad5         db  0x46 ; 'F'
0000000000009ad6         db  0x0e ; '.'
0000000000009ad7         db  0x88 ; '.'
0000000000009ad8         db  0x01 ; '.'
0000000000009ad9         db  0x42 ; 'B'
0000000000009ada         db  0x0e ; '.'
0000000000009adb         db  0x90 ; '.'
0000000000009adc         db  0x01 ; '.'
0000000000009add         db  0x5e ; '^'
0000000000009ade         db  0x0e ; '.'
0000000000009adf         db  0x70 ; 'p'
0000000000009ae0         db  0x56 ; 'V'
0000000000009ae1         db  0x0e ; '.'
0000000000009ae2         db  0x78 ; 'x'
0000000000009ae3         db  0x43 ; 'C'
0000000000009ae4         db  0x0e ; '.'
0000000000009ae5         db  0x80 ; '.'
0000000000009ae6         db  0x01 ; '.'
0000000000009ae7         db  0x43 ; 'C'
0000000000009ae8         db  0x0e ; '.'
0000000000009ae9         db  0x88 ; '.'
0000000000009aea         db  0x01 ; '.'
0000000000009aeb         db  0x56 ; 'V'
0000000000009aec         db  0x0e ; '.'
0000000000009aed         db  0x90 ; '.'
0000000000009aee         db  0x01 ; '.'
0000000000009aef         db  0x52 ; 'R'
0000000000009af0         db  0x0e ; '.'
0000000000009af1         db  0x70 ; 'p'
0000000000009af2         db  0x5b ; '['
0000000000009af3         db  0x0e ; '.'
0000000000009af4         db  0x38 ; '8'
0000000000009af5         db  0x41 ; 'A'
0000000000009af6         db  0x0e ; '.'
0000000000009af7         db  0x30 ; '0'
0000000000009af8         db  0x41 ; 'A'
0000000000009af9         db  0x0e ; '.'
0000000000009afa         db  0x28 ; '('
0000000000009afb         db  0x42 ; 'B'
0000000000009afc         db  0x0e ; '.'
0000000000009afd         db  0x20 ; ' '
0000000000009afe         db  0x42 ; 'B'
0000000000009aff         db  0x0e ; '.'
0000000000009b00         db  0x18 ; '.'
0000000000009b01         db  0x42 ; 'B'
0000000000009b02         db  0x0e ; '.'
0000000000009b03         db  0x10 ; '.'
0000000000009b04         db  0x42 ; 'B'
0000000000009b05         db  0x0e ; '.'
0000000000009b06         db  0x08 ; '.'
0000000000009b07         db  0x00 ; '.'
0000000000009b08         dd         0x00000010                                  ; Length of the record
0000000000009b0c         dd         0x00000544                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009b10         db         0x50, 0xb0, 2 dup (0xff)                    ; begin 0x4b60
0000000000009b14         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4b6a)
0000000000009b18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b19         align      4
0000000000009b1c         dd         0x00000028                                  ; Length of the record
0000000000009b20         dd         0x00000558                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009b24         db         0x4c, 0xb0, 2 dup (0xff)                    ; begin 0x4b70
0000000000009b28         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x4c03)
0000000000009b2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b2d         db  0x48 ; 'H'
0000000000009b2e         db  0x0e ; '.'
0000000000009b2f         db  0x10 ; '.'
0000000000009b30         db  0x8c ; '.'
0000000000009b31         db  0x02 ; '.'
0000000000009b32         db  0x48 ; 'H'
0000000000009b33         db  0x0e ; '.'
0000000000009b34         db  0x18 ; '.'
0000000000009b35         db  0x86 ; '.'
0000000000009b36         db  0x03 ; '.'
0000000000009b37         db  0x41 ; 'A'
0000000000009b38         db  0x0e ; '.'
0000000000009b39         db  0x20 ; ' '
0000000000009b3a         db  0x83 ; '.'
0000000000009b3b         db  0x04 ; '.'
0000000000009b3c         db  0x02 ; '.'
0000000000009b3d         db  0x74 ; 't'
0000000000009b3e         db  0x0e ; '.'
0000000000009b3f         db  0x18 ; '.'
0000000000009b40         db  0x4b ; 'K'
0000000000009b41         db  0x0e ; '.'
0000000000009b42         db  0x10 ; '.'
0000000000009b43         db  0x42 ; 'B'
0000000000009b44         db  0x0e ; '.'
0000000000009b45         db  0x08 ; '.'
0000000000009b46         db  0x00 ; '.'
0000000000009b47         db  0x00 ; '.'
0000000000009b48         dd         0x00000010                                  ; Length of the record
0000000000009b4c         dd         0x00000584                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009b50         db         0xc0, 0xb0, 2 dup (0xff)                    ; begin 0x4c10
0000000000009b54         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4c23)
0000000000009b58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b59         align      4
0000000000009b5c         dd         0x00000010                                  ; Length of the record
0000000000009b60         dd         0x00000598                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009b64         db         0xcc, 0xb0, 2 dup (0xff)                    ; begin 0x4c30
0000000000009b68         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4c3c)
0000000000009b6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b6d         align      16
0000000000009b70         dd         0x00000010                                  ; Length of the record
0000000000009b74         dd         0x000005ac                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009b78         db         0xc8, 0xb0, 2 dup (0xff)                    ; begin 0x4c40
0000000000009b7c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4c58)
0000000000009b80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b81         align      4
0000000000009b84         dd         0x00000010                                  ; Length of the record
0000000000009b88         dd         0x000005c0                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009b8c         db         0xd4, 0xb0, 2 dup (0xff)                    ; begin 0x4c60
0000000000009b90         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4c74)
0000000000009b94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b95         align      8
0000000000009b98         dd         0x00000018                                  ; Length of the record
0000000000009b9c         dd         0x000005d4                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ba0         db         0xe0, 0xb0, 2 dup (0xff)                    ; begin 0x4c80
0000000000009ba4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4d0e)
0000000000009ba8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ba9         db  0x44 ; 'D'
0000000000009baa         db  0x0e ; '.'
0000000000009bab         db  0x50 ; 'P'
0000000000009bac         db  0x02 ; '.'
0000000000009bad         db  0x7f ; '.'
0000000000009bae         db  0x0a ; '.'
0000000000009baf         db  0x0e ; '.'
0000000000009bb0         db  0x08 ; '.'
0000000000009bb1         db  0x41 ; 'A'
0000000000009bb2         db  0x0b ; '.'
0000000000009bb3         db  0x00 ; '.'
0000000000009bb4         dd         0x00000018                                  ; Length of the record
0000000000009bb8         dd         0x000005f0                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009bbc         db         0x54, 0xb1, 2 dup (0xff)                    ; begin 0x4d10
0000000000009bc0         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4d9a)
0000000000009bc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009bc5         db  0x44 ; 'D'
0000000000009bc6         db  0x0e ; '.'
0000000000009bc7         db  0x50 ; 'P'
0000000000009bc8         db  0x02 ; '.'
0000000000009bc9         db  0x7b ; '{'
0000000000009bca         db  0x0a ; '.'
0000000000009bcb         db  0x0e ; '.'
0000000000009bcc         db  0x08 ; '.'
0000000000009bcd         db  0x41 ; 'A'
0000000000009bce         db  0x0b ; '.'
0000000000009bcf         db  0x00 ; '.'
0000000000009bd0         dd         0x00000010                                  ; Length of the record
0000000000009bd4         dd         0x0000060c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009bd8         db         0xc8, 0xb1, 2 dup (0xff)                    ; begin 0x4da0
0000000000009bdc         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4dac)
0000000000009be0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009be1         align      4
0000000000009be4         dd         0x00000010                                  ; Length of the record
0000000000009be8         dd         0x00000620                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009bec         db         0xc4, 0xb1, 2 dup (0xff)                    ; begin 0x4db0
0000000000009bf0         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4dbf)
0000000000009bf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009bf5         align      8
0000000000009bf8         dd         0x00000018                                  ; Length of the record
0000000000009bfc         dd         0x00000634                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c00         db         0xc0, 0xb1, 2 dup (0xff)                    ; begin 0x4dc0
0000000000009c04         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x4e58)
0000000000009c08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c09         db  0x44 ; 'D'
0000000000009c0a         db  0x0e ; '.'
0000000000009c0b         db  0x50 ; 'P'
0000000000009c0c         db  0x02 ; '.'
0000000000009c0d         db  0x8e ; '.'
0000000000009c0e         db  0x0a ; '.'
0000000000009c0f         db  0x0e ; '.'
0000000000009c10         db  0x08 ; '.'
0000000000009c11         db  0x41 ; 'A'
0000000000009c12         db  0x0b ; '.'
0000000000009c13         db  0x00 ; '.'
0000000000009c14         dd         0x00000010                                  ; Length of the record
0000000000009c18         dd         0x00000650                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c1c         db         0x44, 0xb2, 2 dup (0xff)                    ; begin 0x4e60
0000000000009c20         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x4e70)
0000000000009c24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c25         align      8
0000000000009c28         dd         0x00000010                                  ; Length of the record
0000000000009c2c         dd         0x00000664                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c30         db         0x40, 0xb2, 2 dup (0xff)                    ; begin 0x4e70
0000000000009c34         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4e81)
0000000000009c38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c39         align      4
0000000000009c3c         dd         0x00000010                                  ; Length of the record
0000000000009c40         dd         0x00000678                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c44         db         0x4c, 0xb2, 2 dup (0xff)                    ; begin 0x4e90
0000000000009c48         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4e9a)
0000000000009c4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c4d         align      16
0000000000009c50         dd         0x00000018                                  ; Length of the record
0000000000009c54         dd         0x0000068c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c58         db         0x48, 0xb2, 2 dup (0xff)                    ; begin 0x4ea0
0000000000009c5c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4f2e)
0000000000009c60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c61         db  0x44 ; 'D'
0000000000009c62         db  0x0e ; '.'
0000000000009c63         db  0x50 ; 'P'
0000000000009c64         db  0x02 ; '.'
0000000000009c65         db  0x7f ; '.'
0000000000009c66         db  0x0a ; '.'
0000000000009c67         db  0x0e ; '.'
0000000000009c68         db  0x08 ; '.'
0000000000009c69         db  0x41 ; 'A'
0000000000009c6a         db  0x0b ; '.'
0000000000009c6b         db  0x00 ; '.'
0000000000009c6c         dd         0x00000018                                  ; Length of the record
0000000000009c70         dd         0x000006a8                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c74         db         0xbc, 0xb2, 2 dup (0xff)                    ; begin 0x4f30
0000000000009c78         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x4fc1)
0000000000009c7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c7d         db  0x44 ; 'D'
0000000000009c7e         db  0x0e ; '.'
0000000000009c7f         db  0x50 ; 'P'
0000000000009c80         db  0x02 ; '.'
0000000000009c81         db  0x82 ; '.'
0000000000009c82         db  0x0a ; '.'
0000000000009c83         db  0x0e ; '.'
0000000000009c84         db  0x08 ; '.'
0000000000009c85         db  0x41 ; 'A'
0000000000009c86         db  0x0b ; '.'
0000000000009c87         db  0x00 ; '.'
0000000000009c88         dd         0x00000010                                  ; Length of the record
0000000000009c8c         dd         0x000006c4                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009c90         db         0x40, 0xb3, 2 dup (0xff)                    ; begin 0x4fd0
0000000000009c94         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4fdc)
0000000000009c98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c99         align      4
0000000000009c9c         dd         0x00000010                                  ; Length of the record
0000000000009ca0         dd         0x000006d8                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ca4         db         0x3c, 0xb3, 2 dup (0xff)                    ; begin 0x4fe0
0000000000009ca8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x4ff7)
0000000000009cac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009cad         align      16
0000000000009cb0         dd         0x00000010                                  ; Length of the record
0000000000009cb4         dd         0x000006ec                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009cb8         db         0x48, 0xb3, 2 dup (0xff)                    ; begin 0x5000
0000000000009cbc         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5013)
0000000000009cc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009cc1         align      4
0000000000009cc4         dd         0x00000010                                  ; Length of the record
0000000000009cc8         dd         0x00000700                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ccc         db         0x54, 0xb3, 2 dup (0xff)                    ; begin 0x5020
0000000000009cd0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x502c)
0000000000009cd4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009cd5         align      8
0000000000009cd8         dd         0x00000010                                  ; Length of the record
0000000000009cdc         dd         0x00000714                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ce0         db         0x50, 0xb3, 2 dup (0xff)                    ; begin 0x5030
0000000000009ce4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x5044)
0000000000009ce8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ce9         align      4
0000000000009cec         dd         0x00000010                                  ; Length of the record
0000000000009cf0         dd         0x00000728                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009cf4         db         0x5c, 0xb3, 2 dup (0xff)                    ; begin 0x5050
0000000000009cf8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5063)
0000000000009cfc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009cfd         align      256
0000000000009d00         dd         0x00000014                                  ; Length of the record
0000000000009d04         dd         0x0000073c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009d08         db         0x68, 0xb3, 2 dup (0xff)                    ; begin 0x5070
0000000000009d0c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5088)
0000000000009d10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009d11         align      8
0000000000009d18         dd         0x00000110                                  ; Length of the record
0000000000009d1c         dd         0x00000754                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009d20         db         0x70, 0xb3, 2 dup (0xff)                    ; begin 0x5090
0000000000009d24         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x54a7)
0000000000009d28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009d29         db  0x42 ; 'B'
0000000000009d2a         db  0x0e ; '.'
0000000000009d2b         db  0x10 ; '.'
0000000000009d2c         db  0x8f ; '.'
0000000000009d2d         db  0x02 ; '.'
0000000000009d2e         db  0x42 ; 'B'
0000000000009d2f         db  0x0e ; '.'
0000000000009d30         db  0x18 ; '.'
0000000000009d31         db  0x8e ; '.'
0000000000009d32         db  0x03 ; '.'
0000000000009d33         db  0x42 ; 'B'
0000000000009d34         db  0x0e ; '.'
0000000000009d35         db  0x20 ; ' '
0000000000009d36         db  0x8d ; '.'
0000000000009d37         db  0x04 ; '.'
0000000000009d38         db  0x42 ; 'B'
0000000000009d39         db  0x0e ; '.'
0000000000009d3a         db  0x28 ; '('
0000000000009d3b         db  0x8c ; '.'
0000000000009d3c         db  0x05 ; '.'
0000000000009d3d         db  0x44 ; 'D'
0000000000009d3e         db  0x0e ; '.'
0000000000009d3f         db  0x30 ; '0'
0000000000009d40         db  0x86 ; '.'
0000000000009d41         db  0x06 ; '.'
0000000000009d42         db  0x41 ; 'A'
0000000000009d43         db  0x0e ; '.'
0000000000009d44         db  0x38 ; '8'
0000000000009d45         db  0x83 ; '.'
0000000000009d46         db  0x07 ; '.'
0000000000009d47         db  0x4a ; 'J'
0000000000009d48         db  0x0e ; '.'
0000000000009d49         db  0x60 ; '`'
0000000000009d4a         db  0x02 ; '.'
0000000000009d4b         db  0xdd ; '.'
0000000000009d4c         db  0x0e ; '.'
0000000000009d4d         db  0x68 ; 'h'
0000000000009d4e         db  0x57 ; 'W'
0000000000009d4f         db  0x0e ; '.'
0000000000009d50         db  0x70 ; 'p'
0000000000009d51         db  0x42 ; 'B'
0000000000009d52         db  0x0e ; '.'
0000000000009d53         db  0x78 ; 'x'
0000000000009d54         db  0x42 ; 'B'
0000000000009d55         db  0x0e ; '.'
0000000000009d56         db  0x80 ; '.'
0000000000009d57         db  0x01 ; '.'
0000000000009d58         db  0x42 ; 'B'
0000000000009d59         db  0x0e ; '.'
0000000000009d5a         db  0x88 ; '.'
0000000000009d5b         db  0x01 ; '.'
0000000000009d5c         db  0x42 ; 'B'
0000000000009d5d         db  0x0e ; '.'
0000000000009d5e         db  0x90 ; '.'
0000000000009d5f         db  0x01 ; '.'
0000000000009d60         db  0x53 ; 'S'
0000000000009d61         db  0x0e ; '.'
0000000000009d62         db  0x60 ; '`'
0000000000009d63         db  0x44 ; 'D'
0000000000009d64         db  0x0a ; '.'
0000000000009d65         db  0x0e ; '.'
0000000000009d66         db  0x38 ; '8'
0000000000009d67         db  0x41 ; 'A'
0000000000009d68         db  0x0e ; '.'
0000000000009d69         db  0x30 ; '0'
0000000000009d6a         db  0x41 ; 'A'
0000000000009d6b         db  0x0e ; '.'
0000000000009d6c         db  0x28 ; '('
0000000000009d6d         db  0x42 ; 'B'
0000000000009d6e         db  0x0e ; '.'
0000000000009d6f         db  0x20 ; ' '
0000000000009d70         db  0x42 ; 'B'
0000000000009d71         db  0x0e ; '.'
0000000000009d72         db  0x18 ; '.'
0000000000009d73         db  0x42 ; 'B'
0000000000009d74         db  0x0e ; '.'
0000000000009d75         db  0x10 ; '.'
0000000000009d76         db  0x42 ; 'B'
0000000000009d77         db  0x0e ; '.'
0000000000009d78         db  0x08 ; '.'
0000000000009d79         db  0x44 ; 'D'
0000000000009d7a         db  0x0b ; '.'
0000000000009d7b         db  0x02 ; '.'
0000000000009d7c         db  0x78 ; 'x'
0000000000009d7d         db  0x0a ; '.'
0000000000009d7e         db  0x0e ; '.'
0000000000009d7f         db  0x68 ; 'h'
0000000000009d80         db  0x48 ; 'H'
0000000000009d81         db  0x0b ; '.'
0000000000009d82         db  0x5a ; 'Z'
0000000000009d83         db  0x0a ; '.'
0000000000009d84         db  0x0e ; '.'
0000000000009d85         db  0x38 ; '8'
0000000000009d86         db  0x47 ; 'G'
0000000000009d87         db  0x0e ; '.'
0000000000009d88         db  0x30 ; '0'
0000000000009d89         db  0x41 ; 'A'
0000000000009d8a         db  0x0e ; '.'
0000000000009d8b         db  0x28 ; '('
0000000000009d8c         db  0x42 ; 'B'
0000000000009d8d         db  0x0e ; '.'
0000000000009d8e         db  0x20 ; ' '
0000000000009d8f         db  0x42 ; 'B'
0000000000009d90         db  0x0e ; '.'
0000000000009d91         db  0x18 ; '.'
0000000000009d92         db  0x42 ; 'B'
0000000000009d93         db  0x0e ; '.'
0000000000009d94         db  0x10 ; '.'
0000000000009d95         db  0x42 ; 'B'
0000000000009d96         db  0x0e ; '.'
0000000000009d97         db  0x08 ; '.'
0000000000009d98         db  0x56 ; 'V'
0000000000009d99         db  0x0b ; '.'
0000000000009d9a         db  0x5e ; '^'
0000000000009d9b         db  0x0a ; '.'
0000000000009d9c         db  0x0e ; '.'
0000000000009d9d         db  0x38 ; '8'
0000000000009d9e         db  0x52 ; 'R'
0000000000009d9f         db  0x0e ; '.'
0000000000009da0         db  0x30 ; '0'
0000000000009da1         db  0x41 ; 'A'
0000000000009da2         db  0x0e ; '.'
0000000000009da3         db  0x28 ; '('
0000000000009da4         db  0x42 ; 'B'
0000000000009da5         db  0x0e ; '.'
0000000000009da6         db  0x20 ; ' '
0000000000009da7         db  0x42 ; 'B'
0000000000009da8         db  0x0e ; '.'
0000000000009da9         db  0x18 ; '.'
0000000000009daa         db  0x42 ; 'B'
0000000000009dab         db  0x0e ; '.'
0000000000009dac         db  0x10 ; '.'
0000000000009dad         db  0x42 ; 'B'
0000000000009dae         db  0x0e ; '.'
0000000000009daf         db  0x08 ; '.'
0000000000009db0         db  0x4f ; 'O'
0000000000009db1         db  0x0b ; '.'
0000000000009db2         db  0x62 ; 'b'
0000000000009db3         db  0x0a ; '.'
0000000000009db4         db  0x0e ; '.'
0000000000009db5         db  0x38 ; '8'
0000000000009db6         db  0x50 ; 'P'
0000000000009db7         db  0x0e ; '.'
0000000000009db8         db  0x30 ; '0'
0000000000009db9         db  0x41 ; 'A'
0000000000009dba         db  0x0e ; '.'
0000000000009dbb         db  0x28 ; '('
0000000000009dbc         db  0x42 ; 'B'
0000000000009dbd         db  0x0e ; '.'
0000000000009dbe         db  0x20 ; ' '
0000000000009dbf         db  0x42 ; 'B'
0000000000009dc0         db  0x0e ; '.'
0000000000009dc1         db  0x18 ; '.'
0000000000009dc2         db  0x42 ; 'B'
0000000000009dc3         db  0x0e ; '.'
0000000000009dc4         db  0x10 ; '.'
0000000000009dc5         db  0x42 ; 'B'
0000000000009dc6         db  0x0e ; '.'
0000000000009dc7         db  0x08 ; '.'
0000000000009dc8         db  0x55 ; 'U'
0000000000009dc9         db  0x0b ; '.'
0000000000009dca         db  0x66 ; 'f'
0000000000009dcb         db  0x0e ; '.'
0000000000009dcc         db  0x68 ; 'h'
0000000000009dcd         db  0x42 ; 'B'
0000000000009dce         db  0x0e ; '.'
0000000000009dcf         db  0x70 ; 'p'
0000000000009dd0         db  0x5c ; '\'
0000000000009dd1         db  0x0e ; '.'
0000000000009dd2         db  0x68 ; 'h'
0000000000009dd3         db  0x41 ; 'A'
0000000000009dd4         db  0x0e ; '.'
0000000000009dd5         db  0x60 ; '`'
0000000000009dd6         db  0x44 ; 'D'
0000000000009dd7         db  0x0a ; '.'
0000000000009dd8         db  0x0e ; '.'
0000000000009dd9         db  0x38 ; '8'
0000000000009dda         db  0x41 ; 'A'
0000000000009ddb         db  0x0e ; '.'
0000000000009ddc         db  0x30 ; '0'
0000000000009ddd         db  0x41 ; 'A'
0000000000009dde         db  0x0e ; '.'
0000000000009ddf         db  0x28 ; '('
0000000000009de0         db  0x42 ; 'B'
0000000000009de1         db  0x0e ; '.'
0000000000009de2         db  0x20 ; ' '
0000000000009de3         db  0x42 ; 'B'
0000000000009de4         db  0x0e ; '.'
0000000000009de5         db  0x18 ; '.'
0000000000009de6         db  0x42 ; 'B'
0000000000009de7         db  0x0e ; '.'
0000000000009de8         db  0x10 ; '.'
0000000000009de9         db  0x42 ; 'B'
0000000000009dea         db  0x0e ; '.'
0000000000009deb         db  0x08 ; '.'
0000000000009dec         db  0x45 ; 'E'
0000000000009ded         db  0x0b ; '.'
0000000000009dee         db  0x68 ; 'h'
0000000000009def         db  0x0a ; '.'
0000000000009df0         db  0x0e ; '.'
0000000000009df1         db  0x68 ; 'h'
0000000000009df2         db  0x48 ; 'H'
0000000000009df3         db  0x0b ; '.'
0000000000009df4         db  0x72 ; 'r'
0000000000009df5         db  0x0e ; '.'
0000000000009df6         db  0x68 ; 'h'
0000000000009df7         db  0x45 ; 'E'
0000000000009df8         db  0x0e ; '.'
0000000000009df9         db  0x70 ; 'p'
0000000000009dfa         db  0x42 ; 'B'
0000000000009dfb         db  0x0e ; '.'
0000000000009dfc         db  0x78 ; 'x'
0000000000009dfd         db  0x42 ; 'B'
0000000000009dfe         db  0x0e ; '.'
0000000000009dff         db  0x80 ; '.'
0000000000009e00         db  0x01 ; '.'
0000000000009e01         db  0x5e ; '^'
0000000000009e02         db  0x0e ; '.'
0000000000009e03         db  0x60 ; '`'
0000000000009e04         db  0x44 ; 'D'
0000000000009e05         db  0x0a ; '.'
0000000000009e06         db  0x0e ; '.'
0000000000009e07         db  0x38 ; '8'
0000000000009e08         db  0x41 ; 'A'
0000000000009e09         db  0x0e ; '.'
0000000000009e0a         db  0x30 ; '0'
0000000000009e0b         db  0x41 ; 'A'
0000000000009e0c         db  0x0e ; '.'
0000000000009e0d         db  0x28 ; '('
0000000000009e0e         db  0x42 ; 'B'
0000000000009e0f         db  0x0e ; '.'
0000000000009e10         db  0x20 ; ' '
0000000000009e11         db  0x42 ; 'B'
0000000000009e12         db  0x0e ; '.'
0000000000009e13         db  0x18 ; '.'
0000000000009e14         db  0x42 ; 'B'
0000000000009e15         db  0x0e ; '.'
0000000000009e16         db  0x10 ; '.'
0000000000009e17         db  0x42 ; 'B'
0000000000009e18         db  0x0e ; '.'
0000000000009e19         db  0x08 ; '.'
0000000000009e1a         db  0x41 ; 'A'
0000000000009e1b         db  0x0b ; '.'
0000000000009e1c         db  0x79 ; 'y'
0000000000009e1d         db  0x0a ; '.'
0000000000009e1e         db  0x0e ; '.'
0000000000009e1f         db  0x68 ; 'h'
0000000000009e20         db  0x42 ; 'B'
0000000000009e21         db  0x0e ; '.'
0000000000009e22         db  0x70 ; 'p'
0000000000009e23         db  0x42 ; 'B'
0000000000009e24         db  0x0e ; '.'
0000000000009e25         db  0x78 ; 'x'
0000000000009e26         db  0x42 ; 'B'
0000000000009e27         db  0x0e ; '.'
0000000000009e28         db  0x80 ; '.'
0000000000009e29         db  0x01 ; '.'
0000000000009e2a         db  0x51 ; 'Q'
0000000000009e2b         db  0x0b ; '.'
0000000000009e2c         dd         0x00000010                                  ; Length of the record
0000000000009e30         dd         0x00000868                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009e34         db         0x7c, 0xb6, 2 dup (0xff)                    ; begin 0x54b0
0000000000009e38         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x54d0)
0000000000009e3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e3d         align      64
0000000000009e40         dd         0x00000018                                  ; Length of the record
0000000000009e44         dd         0x0000087c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009e48         db         0x88, 0xb6, 2 dup (0xff)                    ; begin 0x54d0
0000000000009e4c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x5548)
0000000000009e50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e51         db  0x44 ; 'D'
0000000000009e52         db  0x0e ; '.'
0000000000009e53         db  0x70 ; 'p'
0000000000009e54         db  0x02 ; '.'
0000000000009e55         db  0x60 ; '`'
0000000000009e56         db  0x0a ; '.'
0000000000009e57         db  0x0e ; '.'
0000000000009e58         db  0x08 ; '.'
0000000000009e59         db  0x41 ; 'A'
0000000000009e5a         db  0x0b ; '.'
0000000000009e5b         db  0x00 ; '.'
0000000000009e5c         dd         0x00000028                                  ; Length of the record
0000000000009e60         dd         0x00000898                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009e64         db         0xec, 0xb6, 2 dup (0xff)                    ; begin 0x5550
0000000000009e68         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x5625)
0000000000009e6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e6d         db  0x41 ; 'A'
0000000000009e6e         db  0x0e ; '.'
0000000000009e6f         db  0x10 ; '.'
0000000000009e70         db  0x86 ; '.'
0000000000009e71         db  0x02 ; '.'
0000000000009e72         db  0x41 ; 'A'
0000000000009e73         db  0x0e ; '.'
0000000000009e74         db  0x18 ; '.'
0000000000009e75         db  0x83 ; '.'
0000000000009e76         db  0x03 ; '.'
0000000000009e77         db  0x50 ; 'P'
0000000000009e78         db  0x0e ; '.'
0000000000009e79         db  0xd0 ; '.'
0000000000009e7a         db  0x01 ; '.'
0000000000009e7b         db  0x02 ; '.'
0000000000009e7c         db  0xab ; '.'
0000000000009e7d         db  0x0a ; '.'
0000000000009e7e         db  0x0e ; '.'
0000000000009e7f         db  0x18 ; '.'
0000000000009e80         db  0x41 ; 'A'
0000000000009e81         db  0x0e ; '.'
0000000000009e82         db  0x10 ; '.'
0000000000009e83         db  0x41 ; 'A'
0000000000009e84         db  0x0e ; '.'
0000000000009e85         db  0x08 ; '.'
0000000000009e86         db  0x41 ; 'A'
0000000000009e87         db  0x0b ; '.'
0000000000009e88         dd         0x0000001c                                  ; Length of the record
0000000000009e8c         dd         0x000008c4                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009e90         db         0xa0, 0xb7, 2 dup (0xff)                    ; begin 0x5630
0000000000009e94         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x56b0)
0000000000009e98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e99         db  0x41 ; 'A'
0000000000009e9a         db  0x0e ; '.'
0000000000009e9b         db  0x10 ; '.'
0000000000009e9c         db  0x83 ; '.'
0000000000009e9d         db  0x02 ; '.'
0000000000009e9e         db  0x02 ; '.'
0000000000009e9f         db  0x7a ; 'z'
0000000000009ea0         db  0x0e ; '.'
0000000000009ea1         db  0x08 ; '.'
0000000000009ea2         db  0x00 ; '.'
0000000000009ea3         db  0x00 ; '.'
0000000000009ea4         db  0x00 ; '.'
0000000000009ea5         db  0x00 ; '.'
0000000000009ea6         db  0x00 ; '.'
0000000000009ea7         db  0x00 ; '.'
0000000000009ea8         dd         0x00000018                                  ; Length of the record
0000000000009eac         dd         0x000008e4                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009eb0         db         0x00, 0xb8, 2 dup (0xff)                    ; begin 0x56b0
0000000000009eb4         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x56ca)
0000000000009eb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009eb9         db  0x41 ; 'A'
0000000000009eba         db  0x0e ; '.'
0000000000009ebb         db  0x10 ; '.'
0000000000009ebc         db  0x83 ; '.'
0000000000009ebd         db  0x02 ; '.'
0000000000009ebe         db  0x53 ; 'S'
0000000000009ebf         db  0x0a ; '.'
0000000000009ec0         db  0x0e ; '.'
0000000000009ec1         db  0x08 ; '.'
0000000000009ec2         db  0x41 ; 'A'
0000000000009ec3         db  0x0b ; '.'
0000000000009ec4         dd         0x00000010                                  ; Length of the record
0000000000009ec8         dd         0x00000900                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ecc         db         0x04, 0xb8, 2 dup (0xff)                    ; begin 0x56d0
0000000000009ed0         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x56f4)
0000000000009ed4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ed5         db  0x5f ; '_'
0000000000009ed6         db  0x0e ; '.'
0000000000009ed7         db  0x10 ; '.'
0000000000009ed8         dd         0x00000010                                  ; Length of the record
0000000000009edc         dd         0x00000914                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ee0         db         0x20, 0xb8, 2 dup (0xff)                    ; begin 0x5700
0000000000009ee4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x5702)
0000000000009ee8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ee9         align      4
0000000000009eec         dd         0x00000020                                  ; Length of the record
0000000000009ef0         dd         0x00000928                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ef4         db         0x1c, 0xb8, 2 dup (0xff)                    ; begin 0x5710
0000000000009ef8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5746)
0000000000009efc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009efd         db  0x44 ; 'D'
0000000000009efe         db  0x0e ; '.'
0000000000009eff         db  0x10 ; '.'
0000000000009f00         db  0x83 ; '.'
0000000000009f01         db  0x02 ; '.'
0000000000009f02         db  0x5d ; ']'
0000000000009f03         db  0x0a ; '.'
0000000000009f04         db  0x0e ; '.'
0000000000009f05         db  0x08 ; '.'
0000000000009f06         db  0x47 ; 'G'
0000000000009f07         db  0x0b ; '.'
0000000000009f08         db  0x48 ; 'H'
0000000000009f09         db  0x0a ; '.'
0000000000009f0a         db  0x0e ; '.'
0000000000009f0b         db  0x08 ; '.'
0000000000009f0c         db  0x41 ; 'A'
0000000000009f0d         db  0x0b ; '.'
0000000000009f0e         db  0x00 ; '.'
0000000000009f0f         db  0x00 ; '.'
0000000000009f10         dd         0x00000010                                  ; Length of the record
0000000000009f14         dd         0x0000094c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009f18         db         0x38, 0xb8, 2 dup (0xff)                    ; begin 0x5750
0000000000009f1c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5774)
0000000000009f20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f21         db  0x5f ; '_'
0000000000009f22         db  0x0e ; '.'
0000000000009f23         db  0x10 ; '.'
0000000000009f24         dd         0x00000014                                  ; Length of the record
0000000000009f28         dd         0x00000960                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009f2c         db         0x54, 0xb8, 2 dup (0xff)                    ; begin 0x5780
0000000000009f30         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x5802)
0000000000009f34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f35         db  0x02 ; '.'
0000000000009f36         db  0x5f ; '_'
0000000000009f37         db  0x0e ; '.'
0000000000009f38         db  0x10 ; '.'
0000000000009f39         db  0x49 ; 'I'
0000000000009f3a         db  0x0e ; '.'
0000000000009f3b         db  0x08 ; '.'
0000000000009f3c         dd         0x00000014                                  ; Length of the record
0000000000009f40         dd         0x00000978                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009f44         db         0xcc, 0xb8, 2 dup (0xff)                    ; begin 0x5810
0000000000009f48         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x585a)
0000000000009f4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f4d         db  0x02 ; '.'
0000000000009f4e         db  0x45 ; 'E'
0000000000009f4f         db  0x0e ; '.'
0000000000009f50         db  0x10 ; '.'
0000000000009f51         db  0x00 ; '.'
0000000000009f52         db  0x00 ; '.'
0000000000009f53         db  0x00 ; '.'
0000000000009f54         dd         0x00000018                                  ; Length of the record
0000000000009f58         dd         0x00000990                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009f5c         db         0x04, 0xb9, 2 dup (0xff)                    ; begin 0x5860
0000000000009f60         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5877)
0000000000009f64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f65         db  0x41 ; 'A'
0000000000009f66         db  0x0e ; '.'
0000000000009f67         db  0x10 ; '.'
0000000000009f68         db  0x83 ; '.'
0000000000009f69         db  0x02 ; '.'
0000000000009f6a         db  0x51 ; 'Q'
0000000000009f6b         db  0x0e ; '.'
0000000000009f6c         db  0x08 ; '.'
0000000000009f6d         db  0x00 ; '.'
0000000000009f6e         db  0x00 ; '.'
0000000000009f6f         db  0x00 ; '.'
0000000000009f70         dd         0x00000018                                  ; Length of the record
0000000000009f74         dd         0x000009ac                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009f78         db         0x08, 0xb9, 2 dup (0xff)                    ; begin 0x5880
0000000000009f7c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x58ae)
0000000000009f80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f81         db  0x47 ; 'G'
0000000000009f82         db  0x0e ; '.'
0000000000009f83         db  0x10 ; '.'
0000000000009f84         db  0x61 ; 'a'
0000000000009f85         db  0x0a ; '.'
0000000000009f86         db  0x0e ; '.'
0000000000009f87         db  0x08 ; '.'
0000000000009f88         db  0x41 ; 'A'
0000000000009f89         db  0x0b ; '.'
0000000000009f8a         db  0x00 ; '.'
0000000000009f8b         db  0x00 ; '.'
0000000000009f8c         dd         0x00000024                                  ; Length of the record
0000000000009f90         dd         0x000009c8                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009f94         db         0x1c, 0xb9, 2 dup (0xff)                    ; begin 0x58b0
0000000000009f98         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x58d8)
0000000000009f9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f9d         db  0x41 ; 'A'
0000000000009f9e         db  0x0e ; '.'
0000000000009f9f         db  0x10 ; '.'
0000000000009fa0         db  0x86 ; '.'
0000000000009fa1         db  0x02 ; '.'
0000000000009fa2         db  0x41 ; 'A'
0000000000009fa3         db  0x0e ; '.'
0000000000009fa4         db  0x18 ; '.'
0000000000009fa5         db  0x83 ; '.'
0000000000009fa6         db  0x03 ; '.'
0000000000009fa7         db  0x4d ; 'M'
0000000000009fa8         db  0x0e ; '.'
0000000000009fa9         db  0x20 ; ' '
0000000000009faa         db  0x49 ; 'I'
0000000000009fab         db  0x0e ; '.'
0000000000009fac         db  0x18 ; '.'
0000000000009fad         db  0x47 ; 'G'
0000000000009fae         db  0x0e ; '.'
0000000000009faf         db  0x10 ; '.'
0000000000009fb0         db  0x41 ; 'A'
0000000000009fb1         db  0x0e ; '.'
0000000000009fb2         db  0x08 ; '.'
0000000000009fb3         db  0x00 ; '.'
0000000000009fb4         dd         0x00000018                                  ; Length of the record
0000000000009fb8         dd         0x000009f0                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009fbc         db         0x24, 0xb9, 2 dup (0xff)                    ; begin 0x58e0
0000000000009fc0         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x58f3)
0000000000009fc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009fc5         db  0x41 ; 'A'
0000000000009fc6         db  0x0e ; '.'
0000000000009fc7         db  0x10 ; '.'
0000000000009fc8         db  0x83 ; '.'
0000000000009fc9         db  0x02 ; '.'
0000000000009fca         db  0x50 ; 'P'
0000000000009fcb         db  0x0e ; '.'
0000000000009fcc         db  0x08 ; '.'
0000000000009fcd         db  0x00 ; '.'
0000000000009fce         db  0x00 ; '.'
0000000000009fcf         db  0x00 ; '.'
0000000000009fd0         dd         0x00000014                                  ; Length of the record
0000000000009fd4         dd         0x00000a0c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009fd8         db         0x28, 0xb9, 2 dup (0xff)                    ; begin 0x5900
0000000000009fdc         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5935)
0000000000009fe0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009fe1         db  0x4b ; 'K'
0000000000009fe2         db  0x0e ; '.'
0000000000009fe3         db  0x10 ; '.'
0000000000009fe4         db  0x00 ; '.'
0000000000009fe5         db  0x00 ; '.'
0000000000009fe6         db  0x00 ; '.'
0000000000009fe7         db  0x00 ; '.'
0000000000009fe8         dd         0x00000044                                  ; Length of the record
0000000000009fec         dd         0x00000a24                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
0000000000009ff0         db         0x50, 0xb9, 2 dup (0xff)                    ; begin 0x5940
0000000000009ff4         db         0xb9, 3 dup (0x00)                          ; length 0xb9 (end at 0x59f9)
0000000000009ff8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ff9         db  0x42 ; 'B'
0000000000009ffa         db  0x0e ; '.'
0000000000009ffb         db  0x10 ; '.'
0000000000009ffc         db  0x8e ; '.'
0000000000009ffd         db  0x02 ; '.'
0000000000009ffe         db  0x42 ; 'B'
0000000000009fff         db  0x0e ; '.'
000000000000a000         db  0x18 ; '.'
000000000000a001         db  0x8d ; '.'
000000000000a002         db  0x03 ; '.'
000000000000a003         db  0x45 ; 'E'
000000000000a004         db  0x0e ; '.'
000000000000a005         db  0x20 ; ' '
000000000000a006         db  0x8c ; '.'
000000000000a007         db  0x04 ; '.'
000000000000a008         db  0x41 ; 'A'
000000000000a009         db  0x0e ; '.'
000000000000a00a         db  0x28 ; '('
000000000000a00b         db  0x86 ; '.'
000000000000a00c         db  0x05 ; '.'
000000000000a00d         db  0x44 ; 'D'
000000000000a00e         db  0x0e ; '.'
000000000000a00f         db  0x30 ; '0'
000000000000a010         db  0x83 ; '.'
000000000000a011         db  0x06 ; '.'
000000000000a012         db  0x4a ; 'J'
000000000000a013         db  0x0e ; '.'
000000000000a014         db  0x40 ; '@'
000000000000a015         db  0x02 ; '.'
000000000000a016         db  0x6e ; 'n'
000000000000a017         db  0x0a ; '.'
000000000000a018         db  0x0e ; '.'
000000000000a019         db  0x30 ; '0'
000000000000a01a         db  0x41 ; 'A'
000000000000a01b         db  0x0e ; '.'
000000000000a01c         db  0x28 ; '('
000000000000a01d         db  0x41 ; 'A'
000000000000a01e         db  0x0e ; '.'
000000000000a01f         db  0x20 ; ' '
000000000000a020         db  0x42 ; 'B'
000000000000a021         db  0x0e ; '.'
000000000000a022         db  0x18 ; '.'
000000000000a023         db  0x42 ; 'B'
000000000000a024         db  0x0e ; '.'
000000000000a025         db  0x10 ; '.'
000000000000a026         db  0x42 ; 'B'
000000000000a027         db  0x0e ; '.'
000000000000a028         db  0x08 ; '.'
000000000000a029         db  0x42 ; 'B'
000000000000a02a         db  0x0b ; '.'
000000000000a02b         db  0x00 ; '.'
000000000000a02c         db  0x00 ; '.'
000000000000a02d         db  0x00 ; '.'
000000000000a02e         db  0x00 ; '.'
000000000000a02f         db  0x00 ; '.'
000000000000a030         dd         0x0000001c                                  ; Length of the record
000000000000a034         dd         0x00000a6c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a038         db         0xc8, 0xb9, 2 dup (0xff)                    ; begin 0x5a00
000000000000a03c         db         0xb1, 3 dup (0x00)                          ; length 0xb1 (end at 0x5ab1)
000000000000a040         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a041         db  0x47 ; 'G'
000000000000a042         db  0x0e ; '.'
000000000000a043         db  0xe0 ; '.'
000000000000a044         db  0x01 ; '.'
000000000000a045         db  0x02 ; '.'
000000000000a046         db  0xa4 ; '.'
000000000000a047         db  0x0a ; '.'
000000000000a048         db  0x0e ; '.'
000000000000a049         db  0x08 ; '.'
000000000000a04a         db  0x41 ; 'A'
000000000000a04b         db  0x0b ; '.'
000000000000a04c         db  0x00 ; '.'
000000000000a04d         db  0x00 ; '.'
000000000000a04e         db  0x00 ; '.'
000000000000a04f         db  0x00 ; '.'
000000000000a050         dd         0x0000003c                                  ; Length of the record
000000000000a054         dd         0x00000a8c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a058         db         0x68, 0xba, 2 dup (0xff)                    ; begin 0x5ac0
000000000000a05c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x5b43)
000000000000a060         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a061         db  0x42 ; 'B'
000000000000a062         db  0x0e ; '.'
000000000000a063         db  0x10 ; '.'
000000000000a064         db  0x8d ; '.'
000000000000a065         db  0x02 ; '.'
000000000000a066         db  0x42 ; 'B'
000000000000a067         db  0x0e ; '.'
000000000000a068         db  0x18 ; '.'
000000000000a069         db  0x8c ; '.'
000000000000a06a         db  0x03 ; '.'
000000000000a06b         db  0x44 ; 'D'
000000000000a06c         db  0x0e ; '.'
000000000000a06d         db  0x20 ; ' '
000000000000a06e         db  0x86 ; '.'
000000000000a06f         db  0x04 ; '.'
000000000000a070         db  0x41 ; 'A'
000000000000a071         db  0x0e ; '.'
000000000000a072         db  0x28 ; '('
000000000000a073         db  0x83 ; '.'
000000000000a074         db  0x05 ; '.'
000000000000a075         db  0x4a ; 'J'
000000000000a076         db  0x0e ; '.'
000000000000a077         db  0x40 ; '@'
000000000000a078         db  0x02 ; '.'
000000000000a079         db  0x64 ; 'd'
000000000000a07a         db  0x0a ; '.'
000000000000a07b         db  0x0e ; '.'
000000000000a07c         db  0x28 ; '('
000000000000a07d         db  0x41 ; 'A'
000000000000a07e         db  0x0e ; '.'
000000000000a07f         db  0x20 ; ' '
000000000000a080         db  0x41 ; 'A'
000000000000a081         db  0x0e ; '.'
000000000000a082         db  0x18 ; '.'
000000000000a083         db  0x42 ; 'B'
000000000000a084         db  0x0e ; '.'
000000000000a085         db  0x10 ; '.'
000000000000a086         db  0x42 ; 'B'
000000000000a087         db  0x0e ; '.'
000000000000a088         db  0x08 ; '.'
000000000000a089         db  0x41 ; 'A'
000000000000a08a         db  0x0b ; '.'
000000000000a08b         db  0x00 ; '.'
000000000000a08c         db  0x00 ; '.'
000000000000a08d         db  0x00 ; '.'
000000000000a08e         db  0x00 ; '.'
000000000000a08f         db  0x00 ; '.'
000000000000a090         dd         0x00000024                                  ; Length of the record
000000000000a094         dd         0x00000acc                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a098         db         0xb8, 0xba, 2 dup (0xff)                    ; begin 0x5b50
000000000000a09c         db         0x7e, 3 dup (0x00)                          ; length 0x7e (end at 0x5bce)
000000000000a0a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0a1         db  0x41 ; 'A'
000000000000a0a2         db  0x0e ; '.'
000000000000a0a3         db  0x10 ; '.'
000000000000a0a4         db  0x83 ; '.'
000000000000a0a5         db  0x02 ; '.'
000000000000a0a6         db  0x4c ; 'L'
000000000000a0a7         db  0x0e ; '.'
000000000000a0a8         db  0x20 ; ' '
000000000000a0a9         db  0x02 ; '.'
000000000000a0aa         db  0x49 ; 'I'
000000000000a0ab         db  0x0a ; '.'
000000000000a0ac         db  0x0e ; '.'
000000000000a0ad         db  0x10 ; '.'
000000000000a0ae         db  0x41 ; 'A'
000000000000a0af         db  0x0e ; '.'
000000000000a0b0         db  0x08 ; '.'
000000000000a0b1         db  0x41 ; 'A'
000000000000a0b2         db  0x0b ; '.'
000000000000a0b3         db  0x00 ; '.'
000000000000a0b4         db  0x00 ; '.'
000000000000a0b5         db  0x00 ; '.'
000000000000a0b6         db  0x00 ; '.'
000000000000a0b7         db  0x00 ; '.'
000000000000a0b8         dd         0x00000054                                  ; Length of the record
000000000000a0bc         dd         0x00000af4                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a0c0         db         0x10, 0xbb, 2 dup (0xff)                    ; begin 0x5bd0
000000000000a0c4         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x5c86)
000000000000a0c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0c9         db  0x42 ; 'B'
000000000000a0ca         db  0x0e ; '.'
000000000000a0cb         db  0x10 ; '.'
000000000000a0cc         db  0x8c ; '.'
000000000000a0cd         db  0x02 ; '.'
000000000000a0ce         db  0x41 ; 'A'
000000000000a0cf         db  0x0e ; '.'
000000000000a0d0         db  0x18 ; '.'
000000000000a0d1         db  0x86 ; '.'
000000000000a0d2         db  0x03 ; '.'
000000000000a0d3         db  0x44 ; 'D'
000000000000a0d4         db  0x0e ; '.'
000000000000a0d5         db  0x20 ; ' '
000000000000a0d6         db  0x83 ; '.'
000000000000a0d7         db  0x04 ; '.'
000000000000a0d8         db  0x47 ; 'G'
000000000000a0d9         db  0x0e ; '.'
000000000000a0da         db  0x30 ; '0'
000000000000a0db         db  0x02 ; '.'
000000000000a0dc         db  0x53 ; 'S'
000000000000a0dd         db  0x0a ; '.'
000000000000a0de         db  0x0e ; '.'
000000000000a0df         db  0x20 ; ' '
000000000000a0e0         db  0x41 ; 'A'
000000000000a0e1         db  0x0e ; '.'
000000000000a0e2         db  0x18 ; '.'
000000000000a0e3         db  0x41 ; 'A'
000000000000a0e4         db  0x0e ; '.'
000000000000a0e5         db  0x10 ; '.'
000000000000a0e6         db  0x42 ; 'B'
000000000000a0e7         db  0x0e ; '.'
000000000000a0e8         db  0x08 ; '.'
000000000000a0e9         db  0x4b ; 'K'
000000000000a0ea         db  0x0b ; '.'
000000000000a0eb         db  0x49 ; 'I'
000000000000a0ec         db  0x0a ; '.'
000000000000a0ed         db  0x0e ; '.'
000000000000a0ee         db  0x20 ; ' '
000000000000a0ef         db  0x43 ; 'C'
000000000000a0f0         db  0x0e ; '.'
000000000000a0f1         db  0x18 ; '.'
000000000000a0f2         db  0x41 ; 'A'
000000000000a0f3         db  0x0e ; '.'
000000000000a0f4         db  0x10 ; '.'
000000000000a0f5         db  0x42 ; 'B'
000000000000a0f6         db  0x0e ; '.'
000000000000a0f7         db  0x08 ; '.'
000000000000a0f8         db  0x41 ; 'A'
000000000000a0f9         db  0x0b ; '.'
000000000000a0fa         db  0x47 ; 'G'
000000000000a0fb         db  0x0a ; '.'
000000000000a0fc         db  0x0e ; '.'
000000000000a0fd         db  0x20 ; ' '
000000000000a0fe         db  0x43 ; 'C'
000000000000a0ff         db  0x0e ; '.'
000000000000a100         db  0x18 ; '.'
000000000000a101         db  0x41 ; 'A'
000000000000a102         db  0x0e ; '.'
000000000000a103         db  0x10 ; '.'
000000000000a104         db  0x42 ; 'B'
000000000000a105         db  0x0e ; '.'
000000000000a106         db  0x08 ; '.'
000000000000a107         db  0x43 ; 'C'
000000000000a108         db  0x0b ; '.'
000000000000a109         db  0x00 ; '.'
000000000000a10a         db  0x00 ; '.'
000000000000a10b         db  0x00 ; '.'
000000000000a10c         db  0x00 ; '.'
000000000000a10d         db  0x00 ; '.'
000000000000a10e         db  0x00 ; '.'
000000000000a10f         db  0x00 ; '.'
000000000000a110         dd         0x0000004c                                  ; Length of the record
000000000000a114         dd         0x00000b4c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a118         db         0x78, 0xbb, 2 dup (0xff)                    ; begin 0x5c90
000000000000a11c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x5d0d)
000000000000a120         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a121         db  0x42 ; 'B'
000000000000a122         db  0x0e ; '.'
000000000000a123         db  0x10 ; '.'
000000000000a124         db  0x8c ; '.'
000000000000a125         db  0x02 ; '.'
000000000000a126         db  0x41 ; 'A'
000000000000a127         db  0x0e ; '.'
000000000000a128         db  0x18 ; '.'
000000000000a129         db  0x86 ; '.'
000000000000a12a         db  0x03 ; '.'
000000000000a12b         db  0x44 ; 'D'
000000000000a12c         db  0x0e ; '.'
000000000000a12d         db  0x20 ; ' '
000000000000a12e         db  0x83 ; '.'
000000000000a12f         db  0x04 ; '.'
000000000000a130         db  0x69 ; 'i'
000000000000a131         db  0x0a ; '.'
000000000000a132         db  0x0e ; '.'
000000000000a133         db  0x18 ; '.'
000000000000a134         db  0x41 ; 'A'
000000000000a135         db  0x0e ; '.'
000000000000a136         db  0x10 ; '.'
000000000000a137         db  0x42 ; 'B'
000000000000a138         db  0x0e ; '.'
000000000000a139         db  0x08 ; '.'
000000000000a13a         db  0x45 ; 'E'
000000000000a13b         db  0x0b ; '.'
000000000000a13c         db  0x55 ; 'U'
000000000000a13d         db  0x0a ; '.'
000000000000a13e         db  0x0e ; '.'
000000000000a13f         db  0x18 ; '.'
000000000000a140         db  0x41 ; 'A'
000000000000a141         db  0x0e ; '.'
000000000000a142         db  0x10 ; '.'
000000000000a143         db  0x42 ; 'B'
000000000000a144         db  0x0e ; '.'
000000000000a145         db  0x08 ; '.'
000000000000a146         db  0x48 ; 'H'
000000000000a147         db  0x0b ; '.'
000000000000a148         db  0x41 ; 'A'
000000000000a149         db  0x0a ; '.'
000000000000a14a         db  0x0e ; '.'
000000000000a14b         db  0x18 ; '.'
000000000000a14c         db  0x46 ; 'F'
000000000000a14d         db  0x0e ; '.'
000000000000a14e         db  0x10 ; '.'
000000000000a14f         db  0x42 ; 'B'
000000000000a150         db  0x0e ; '.'
000000000000a151         db  0x08 ; '.'
000000000000a152         db  0x47 ; 'G'
000000000000a153         db  0x0b ; '.'
000000000000a154         db  0x49 ; 'I'
000000000000a155         db  0x0e ; '.'
000000000000a156         db  0x18 ; '.'
000000000000a157         db  0x41 ; 'A'
000000000000a158         db  0x0e ; '.'
000000000000a159         db  0x10 ; '.'
000000000000a15a         db  0x42 ; 'B'
000000000000a15b         db  0x0e ; '.'
000000000000a15c         db  0x08 ; '.'
000000000000a15d         db  0x00 ; '.'
000000000000a15e         db  0x00 ; '.'
000000000000a15f         db  0x00 ; '.'
000000000000a160         dd         0x0000001c                                  ; Length of the record
000000000000a164         dd         0x00000b9c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a168         db         0xa8, 0xbb, 2 dup (0xff)                    ; begin 0x5d10
000000000000a16c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x5d70)
000000000000a170         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a171         db  0x44 ; 'D'
000000000000a172         db  0x0e ; '.'
000000000000a173         db  0x10 ; '.'
000000000000a174         db  0x75 ; 'u'
000000000000a175         db  0x0a ; '.'
000000000000a176         db  0x0e ; '.'
000000000000a177         db  0x08 ; '.'
000000000000a178         db  0x47 ; 'G'
000000000000a179         db  0x0b ; '.'
000000000000a17a         db  0x5f ; '_'
000000000000a17b         db  0x0e ; '.'
000000000000a17c         db  0x08 ; '.'
000000000000a17d         db  0x00 ; '.'
000000000000a17e         db  0x00 ; '.'
000000000000a17f         db  0x00 ; '.'
000000000000a180         dd         0x0000001c                                  ; Length of the record
000000000000a184         dd         0x00000bbc                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a188         db         0xe8, 0xbb, 2 dup (0xff)                    ; begin 0x5d70
000000000000a18c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x5dac)
000000000000a190         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a191         db  0x44 ; 'D'
000000000000a192         db  0x0e ; '.'
000000000000a193         db  0x10 ; '.'
000000000000a194         db  0x61 ; 'a'
000000000000a195         db  0x0a ; '.'
000000000000a196         db  0x0e ; '.'
000000000000a197         db  0x08 ; '.'
000000000000a198         db  0x4b ; 'K'
000000000000a199         db  0x0b ; '.'
000000000000a19a         db  0x4b ; 'K'
000000000000a19b         db  0x0e ; '.'
000000000000a19c         db  0x08 ; '.'
000000000000a19d         db  0x00 ; '.'
000000000000a19e         db  0x00 ; '.'
000000000000a19f         db  0x00 ; '.'
000000000000a1a0         dd         0x00000034                                  ; Length of the record
000000000000a1a4         dd         0x00000bdc                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a1a8         db         0x08, 0xbc, 2 dup (0xff)                    ; begin 0x5db0
000000000000a1ac         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x5e2b)
000000000000a1b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1b1         db  0x42 ; 'B'
000000000000a1b2         db  0x0e ; '.'
000000000000a1b3         db  0x10 ; '.'
000000000000a1b4         db  0x8c ; '.'
000000000000a1b5         db  0x02 ; '.'
000000000000a1b6         db  0x41 ; 'A'
000000000000a1b7         db  0x0e ; '.'
000000000000a1b8         db  0x18 ; '.'
000000000000a1b9         db  0x86 ; '.'
000000000000a1ba         db  0x03 ; '.'
000000000000a1bb         db  0x41 ; 'A'
000000000000a1bc         db  0x0e ; '.'
000000000000a1bd         db  0x20 ; ' '
000000000000a1be         db  0x83 ; '.'
000000000000a1bf         db  0x04 ; '.'
000000000000a1c0         db  0x7d ; '}'
000000000000a1c1         db  0x0a ; '.'
000000000000a1c2         db  0x0e ; '.'
000000000000a1c3         db  0x18 ; '.'
000000000000a1c4         db  0x41 ; 'A'
000000000000a1c5         db  0x0e ; '.'
000000000000a1c6         db  0x10 ; '.'
000000000000a1c7         db  0x42 ; 'B'
000000000000a1c8         db  0x0e ; '.'
000000000000a1c9         db  0x08 ; '.'
000000000000a1ca         db  0x44 ; 'D'
000000000000a1cb         db  0x0b ; '.'
000000000000a1cc         db  0x60 ; '`'
000000000000a1cd         db  0x0a ; '.'
000000000000a1ce         db  0x0e ; '.'
000000000000a1cf         db  0x18 ; '.'
000000000000a1d0         db  0x41 ; 'A'
000000000000a1d1         db  0x0e ; '.'
000000000000a1d2         db  0x10 ; '.'
000000000000a1d3         db  0x42 ; 'B'
000000000000a1d4         db  0x0e ; '.'
000000000000a1d5         db  0x08 ; '.'
000000000000a1d6         db  0x45 ; 'E'
000000000000a1d7         db  0x0b ; '.'
000000000000a1d8         dd         0x0000001c                                  ; Length of the record
000000000000a1dc         dd         0x00000c14                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a1e0         db         0x50, 0xbc, 2 dup (0xff)                    ; begin 0x5e30
000000000000a1e4         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x5e70)
000000000000a1e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1e9         db  0x44 ; 'D'
000000000000a1ea         db  0x0e ; '.'
000000000000a1eb         db  0x10 ; '.'
000000000000a1ec         db  0x83 ; '.'
000000000000a1ed         db  0x02 ; '.'
000000000000a1ee         db  0x5a ; 'Z'
000000000000a1ef         db  0x0a ; '.'
000000000000a1f0         db  0x0e ; '.'
000000000000a1f1         db  0x08 ; '.'
000000000000a1f2         db  0x4a ; 'J'
000000000000a1f3         db  0x0b ; '.'
000000000000a1f4         db  0x53 ; 'S'
000000000000a1f5         db  0x0e ; '.'
000000000000a1f6         db  0x08 ; '.'
000000000000a1f7         db  0x00 ; '.'
000000000000a1f8         dd         0x0000002c                                  ; Length of the record
000000000000a1fc         dd         0x00000c34                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a200         db         0x70, 0xbc, 2 dup (0xff)                    ; begin 0x5e70
000000000000a204         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x5ec7)
000000000000a208         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a209         db  0x63 ; 'c'
000000000000a20a         db  0x0e ; '.'
000000000000a20b         db  0x10 ; '.'
000000000000a20c         db  0x8c ; '.'
000000000000a20d         db  0x02 ; '.'
000000000000a20e         db  0x41 ; 'A'
000000000000a20f         db  0x0e ; '.'
000000000000a210         db  0x18 ; '.'
000000000000a211         db  0x86 ; '.'
000000000000a212         db  0x03 ; '.'
000000000000a213         db  0x44 ; 'D'
000000000000a214         db  0x0e ; '.'
000000000000a215         db  0x20 ; ' '
000000000000a216         db  0x83 ; '.'
000000000000a217         db  0x04 ; '.'
000000000000a218         db  0x6b ; 'k'
000000000000a219         db  0x0e ; '.'
000000000000a21a         db  0x18 ; '.'
000000000000a21b         db  0x41 ; 'A'
000000000000a21c         db  0x0e ; '.'
000000000000a21d         db  0x10 ; '.'
000000000000a21e         db  0x42 ; 'B'
000000000000a21f         db  0x0e ; '.'
000000000000a220         db  0x08 ; '.'
000000000000a221         db  0x00 ; '.'
000000000000a222         db  0x00 ; '.'
000000000000a223         db  0x00 ; '.'
000000000000a224         db  0x00 ; '.'
000000000000a225         db  0x00 ; '.'
000000000000a226         db  0x00 ; '.'
000000000000a227         db  0x00 ; '.'
000000000000a228         dd         0x0000002c                                  ; Length of the record
000000000000a22c         dd         0x00000c64                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a230         db         0xa0, 0xbc, 2 dup (0xff)                    ; begin 0x5ed0
000000000000a234         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0x6fef)
000000000000a238         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a239         db  0x41 ; 'A'
000000000000a23a         db  0x0e ; '.'
000000000000a23b         db  0x10 ; '.'
000000000000a23c         db  0x86 ; '.'
000000000000a23d         db  0x02 ; '.'
000000000000a23e         db  0x43 ; 'C'
000000000000a23f         db  0x0d ; '.'
000000000000a240         db  0x06 ; '.'
000000000000a241         db  0x48 ; 'H'
000000000000a242         db  0x8f ; '.'
000000000000a243         db  0x03 ; '.'
000000000000a244         db  0x8e ; '.'
000000000000a245         db  0x04 ; '.'
000000000000a246         db  0x8d ; '.'
000000000000a247         db  0x05 ; '.'
000000000000a248         db  0x8c ; '.'
000000000000a249         db  0x06 ; '.'
000000000000a24a         db  0x48 ; 'H'
000000000000a24b         db  0x83 ; '.'
000000000000a24c         db  0x07 ; '.'
000000000000a24d         db  0x03 ; '.'
000000000000a24e         db  0xef ; '.'
000000000000a24f         db  0x01 ; '.'
000000000000a250         db  0x0a ; '.'
000000000000a251         db  0x0c ; '.'
000000000000a252         db  0x07 ; '.'
000000000000a253         db  0x08 ; '.'
000000000000a254         db  0x45 ; 'E'
000000000000a255         db  0x0b ; '.'
000000000000a256         db  0x00 ; '.'
000000000000a257         db  0x00 ; '.'
000000000000a258         dd         0x00000014                                  ; Length of the record
000000000000a25c         dd         0x00000c94                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a260         db         0x90, 0xcd, 2 dup (0xff)                    ; begin 0x6ff0
000000000000a264         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0x71ee)
000000000000a268         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a269         align      16
000000000000a270         dd         0x0000004c                                  ; Length of the record
000000000000a274         dd         0x00000cac                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a278         db         0x78, 0xcf, 2 dup (0xff)                    ; begin 0x71f0
000000000000a27c         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0x7edc)
000000000000a280         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a281         db  0x42 ; 'B'
000000000000a282         db  0x0e ; '.'
000000000000a283         db  0x10 ; '.'
000000000000a284         db  0x8f ; '.'
000000000000a285         db  0x02 ; '.'
000000000000a286         db  0x42 ; 'B'
000000000000a287         db  0x0e ; '.'
000000000000a288         db  0x18 ; '.'
000000000000a289         db  0x8e ; '.'
000000000000a28a         db  0x03 ; '.'
000000000000a28b         db  0x46 ; 'F'
000000000000a28c         db  0x0e ; '.'
000000000000a28d         db  0x20 ; ' '
000000000000a28e         db  0x8d ; '.'
000000000000a28f         db  0x04 ; '.'
000000000000a290         db  0x42 ; 'B'
000000000000a291         db  0x0e ; '.'
000000000000a292         db  0x28 ; '('
000000000000a293         db  0x8c ; '.'
000000000000a294         db  0x05 ; '.'
000000000000a295         db  0x45 ; 'E'
000000000000a296         db  0x0e ; '.'
000000000000a297         db  0x30 ; '0'
000000000000a298         db  0x86 ; '.'
000000000000a299         db  0x06 ; '.'
000000000000a29a         db  0x41 ; 'A'
000000000000a29b         db  0x0e ; '.'
000000000000a29c         db  0x38 ; '8'
000000000000a29d         db  0x83 ; '.'
000000000000a29e         db  0x07 ; '.'
000000000000a29f         db  0x52 ; 'R'
000000000000a2a0         db  0x0e ; '.'
000000000000a2a1         db  0x90 ; '.'
000000000000a2a2         db  0x01 ; '.'
000000000000a2a3         db  0x02 ; '.'
000000000000a2a4         db  0x82 ; '.'
000000000000a2a5         db  0x0a ; '.'
000000000000a2a6         db  0x0e ; '.'
000000000000a2a7         db  0x38 ; '8'
000000000000a2a8         db  0x41 ; 'A'
000000000000a2a9         db  0x0e ; '.'
000000000000a2aa         db  0x30 ; '0'
000000000000a2ab         db  0x41 ; 'A'
000000000000a2ac         db  0x0e ; '.'
000000000000a2ad         db  0x28 ; '('
000000000000a2ae         db  0x42 ; 'B'
000000000000a2af         db  0x0e ; '.'
000000000000a2b0         db  0x20 ; ' '
000000000000a2b1         db  0x42 ; 'B'
000000000000a2b2         db  0x0e ; '.'
000000000000a2b3         db  0x18 ; '.'
000000000000a2b4         db  0x42 ; 'B'
000000000000a2b5         db  0x0e ; '.'
000000000000a2b6         db  0x10 ; '.'
000000000000a2b7         db  0x42 ; 'B'
000000000000a2b8         db  0x0e ; '.'
000000000000a2b9         db  0x08 ; '.'
000000000000a2ba         db  0x48 ; 'H'
000000000000a2bb         db  0x0b ; '.'
000000000000a2bc         db  0x00 ; '.'
000000000000a2bd         db  0x00 ; '.'
000000000000a2be         db  0x00 ; '.'
000000000000a2bf         db  0x00 ; '.'
000000000000a2c0         dd         0x00000044                                  ; Length of the record
000000000000a2c4         dd         0x00000cfc                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a2c8         db         0x18, 0xdc, 2 dup (0xff)                    ; begin 0x7ee0
000000000000a2cc         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x7f45)
000000000000a2d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2d1         db  0x42 ; 'B'
000000000000a2d2         db  0x0e ; '.'
000000000000a2d3         db  0x10 ; '.'
000000000000a2d4         db  0x8f ; '.'
000000000000a2d5         db  0x02 ; '.'
000000000000a2d6         db  0x42 ; 'B'
000000000000a2d7         db  0x0e ; '.'
000000000000a2d8         db  0x18 ; '.'
000000000000a2d9         db  0x8e ; '.'
000000000000a2da         db  0x03 ; '.'
000000000000a2db         db  0x45 ; 'E'
000000000000a2dc         db  0x0e ; '.'
000000000000a2dd         db  0x20 ; ' '
000000000000a2de         db  0x8d ; '.'
000000000000a2df         db  0x04 ; '.'
000000000000a2e0         db  0x42 ; 'B'
000000000000a2e1         db  0x0e ; '.'
000000000000a2e2         db  0x28 ; '('
000000000000a2e3         db  0x8c ; '.'
000000000000a2e4         db  0x05 ; '.'
000000000000a2e5         db  0x48 ; 'H'
000000000000a2e6         db  0x0e ; '.'
000000000000a2e7         db  0x30 ; '0'
000000000000a2e8         db  0x86 ; '.'
000000000000a2e9         db  0x06 ; '.'
000000000000a2ea         db  0x48 ; 'H'
000000000000a2eb         db  0x0e ; '.'
000000000000a2ec         db  0x38 ; '8'
000000000000a2ed         db  0x83 ; '.'
000000000000a2ee         db  0x07 ; '.'
000000000000a2ef         db  0x4d ; 'M'
000000000000a2f0         db  0x0e ; '.'
000000000000a2f1         db  0x40 ; '@'
000000000000a2f2         db  0x72 ; 'r'
000000000000a2f3         db  0x0e ; '.'
000000000000a2f4         db  0x38 ; '8'
000000000000a2f5         db  0x41 ; 'A'
000000000000a2f6         db  0x0e ; '.'
000000000000a2f7         db  0x30 ; '0'
000000000000a2f8         db  0x41 ; 'A'
000000000000a2f9         db  0x0e ; '.'
000000000000a2fa         db  0x28 ; '('
000000000000a2fb         db  0x42 ; 'B'
000000000000a2fc         db  0x0e ; '.'
000000000000a2fd         db  0x20 ; ' '
000000000000a2fe         db  0x42 ; 'B'
000000000000a2ff         db  0x0e ; '.'
000000000000a300         db  0x18 ; '.'
000000000000a301         db  0x42 ; 'B'
000000000000a302         db  0x0e ; '.'
000000000000a303         db  0x10 ; '.'
000000000000a304         db  0x42 ; 'B'
000000000000a305         db  0x0e ; '.'
000000000000a306         db  0x08 ; '.'
000000000000a307         db  0x00 ; '.'
000000000000a308         dd         0x00000014                                  ; Length of the record
000000000000a30c         dd         0x00000d44                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a310         db         0x40, 0xdc, 2 dup (0xff)                    ; begin 0x7f50
000000000000a314         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x7f52)
000000000000a318         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a319         align      32
000000000000a320         dd         0x00000010                                  ; Length of the record
000000000000a324         dd         0x00000d5c                                  ; FDE: parent CIE at 0x95c8 (FDE encoding = 0x1B)
000000000000a328         db         0x38, 0xdc, 2 dup (0xff)                    ; begin 0x7f60
000000000000a32c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x7f6e)
000000000000a330         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a331         align      8


        ; Segment Segment 3
        ; Range: [0x20aaf0; 0x20b260[ (1904 bytes)
        ; File offset : [43760; 45184[ (1424 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20aaf0; 0x20aaf8[ (8 bytes)
        ; File offset : [43760; 43768[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020aaf0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20aaf8; 0x20ab00[ (8 bytes)
        ; File offset : [43768; 43776[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020aaf8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20ab00; 0x20ac18[ (280 bytes)
        ; File offset : [43776; 44056[ (280 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000020ab00         db  0x22 ; '"'                                         ; DATA XREF=main+16
000000000020ab01         db  0x81 ; '.'
000000000020ab02         db  0x00 ; '.'
000000000020ab03         db  0x00 ; '.'
000000000020ab04         db  0x00 ; '.'
000000000020ab05         db  0x00 ; '.'
000000000020ab06         db  0x00 ; '.'
000000000020ab07         db  0x00 ; '.'
000000000020ab08         db  0x00 ; '.'
000000000020ab09         db  0x00 ; '.'
000000000020ab0a         db  0x00 ; '.'
000000000020ab0b         db  0x00 ; '.'
000000000020ab0c         db  0x00 ; '.'
000000000020ab0d         db  0x00 ; '.'
000000000020ab0e         db  0x00 ; '.'
000000000020ab0f         db  0x00 ; '.'
000000000020ab10         db  0x00 ; '.'
000000000020ab11         db  0x00 ; '.'
000000000020ab12         db  0x00 ; '.'
000000000020ab13         db  0x00 ; '.'
000000000020ab14         db  0x00 ; '.'
000000000020ab15         db  0x00 ; '.'
000000000020ab16         db  0x00 ; '.'
000000000020ab17         db  0x00 ; '.'
000000000020ab18         db  0x77 ; 'w'
000000000020ab19         db  0x00 ; '.'
000000000020ab1a         db  0x00 ; '.'
000000000020ab1b         db  0x00 ; '.'
000000000020ab1c         db  0x00 ; '.'
000000000020ab1d         db  0x00 ; '.'
000000000020ab1e         db  0x00 ; '.'
000000000020ab1f         db  0x00 ; '.'
000000000020ab20         db  0x2e ; '.'
000000000020ab21         db  0x81 ; '.'
000000000020ab22         db  0x00 ; '.'
000000000020ab23         db  0x00 ; '.'
000000000020ab24         db  0x00 ; '.'
000000000020ab25         db  0x00 ; '.'
000000000020ab26         db  0x00 ; '.'
000000000020ab27         db  0x00 ; '.'
000000000020ab28         db  0x01 ; '.'
000000000020ab29         db  0x00 ; '.'
000000000020ab2a         db  0x00 ; '.'
000000000020ab2b         db  0x00 ; '.'
000000000020ab2c         db  0x00 ; '.'
000000000020ab2d         db  0x00 ; '.'
000000000020ab2e         db  0x00 ; '.'
000000000020ab2f         db  0x00 ; '.'
000000000020ab30         db  0x00 ; '.'
000000000020ab31         db  0x00 ; '.'
000000000020ab32         db  0x00 ; '.'
000000000020ab33         db  0x00 ; '.'
000000000020ab34         db  0x00 ; '.'
000000000020ab35         db  0x00 ; '.'
000000000020ab36         db  0x00 ; '.'
000000000020ab37         db  0x00 ; '.'
000000000020ab38         db  0x66 ; 'f'
000000000020ab39         db  0x00 ; '.'
000000000020ab3a         db  0x00 ; '.'
000000000020ab3b         db  0x00 ; '.'
000000000020ab3c         db  0x00 ; '.'
000000000020ab3d         db  0x00 ; '.'
000000000020ab3e         db  0x00 ; '.'
000000000020ab3f         db  0x00 ; '.'
000000000020ab40         db  0x35 ; '5'
000000000020ab41         db  0x81 ; '.'
000000000020ab42         db  0x00 ; '.'
000000000020ab43         db  0x00 ; '.'
000000000020ab44         db  0x00 ; '.'
000000000020ab45         db  0x00 ; '.'
000000000020ab46         db  0x00 ; '.'
000000000020ab47         db  0x00 ; '.'
000000000020ab48         db  0x01 ; '.'
000000000020ab49         db  0x00 ; '.'
000000000020ab4a         db  0x00 ; '.'
000000000020ab4b         db  0x00 ; '.'
000000000020ab4c         db  0x00 ; '.'
000000000020ab4d         db  0x00 ; '.'
000000000020ab4e         db  0x00 ; '.'
000000000020ab4f         db  0x00 ; '.'
000000000020ab50         db  0x00 ; '.'
000000000020ab51         db  0x00 ; '.'
000000000020ab52         db  0x00 ; '.'
000000000020ab53         db  0x00 ; '.'
000000000020ab54         db  0x00 ; '.'
000000000020ab55         db  0x00 ; '.'
000000000020ab56         db  0x00 ; '.'
000000000020ab57         db  0x00 ; '.'
000000000020ab58         db  0x73 ; 's'
000000000020ab59         db  0x00 ; '.'
000000000020ab5a         db  0x00 ; '.'
000000000020ab5b         db  0x00 ; '.'
000000000020ab5c         db  0x00 ; '.'
000000000020ab5d         db  0x00 ; '.'
000000000020ab5e         db  0x00 ; '.'
000000000020ab5f         db  0x00 ; '.'
000000000020ab60         db  0x3f ; '?'
000000000020ab61         db  0x81 ; '.'
000000000020ab62         db  0x00 ; '.'
000000000020ab63         db  0x00 ; '.'
000000000020ab64         db  0x00 ; '.'
000000000020ab65         db  0x00 ; '.'
000000000020ab66         db  0x00 ; '.'
000000000020ab67         db  0x00 ; '.'
000000000020ab68         db  0x00 ; '.'
000000000020ab69         db  0x00 ; '.'
000000000020ab6a         db  0x00 ; '.'
000000000020ab6b         db  0x00 ; '.'
000000000020ab6c         db  0x00 ; '.'
000000000020ab6d         db  0x00 ; '.'
000000000020ab6e         db  0x00 ; '.'
000000000020ab6f         db  0x00 ; '.'
000000000020ab70         db  0x00 ; '.'
000000000020ab71         db  0x00 ; '.'
000000000020ab72         db  0x00 ; '.'
000000000020ab73         db  0x00 ; '.'
000000000020ab74         db  0x00 ; '.'
000000000020ab75         db  0x00 ; '.'
000000000020ab76         db  0x00 ; '.'
000000000020ab77         db  0x00 ; '.'
000000000020ab78         db  0x7e ; '~'
000000000020ab79         db  0xff ; '.'
000000000020ab7a         db  0xff ; '.'
000000000020ab7b         db  0xff ; '.'
000000000020ab7c         db  0x00 ; '.'
000000000020ab7d         db  0x00 ; '.'
000000000020ab7e         db  0x00 ; '.'
000000000020ab7f         db  0x00 ; '.'
000000000020ab80         db  0x44 ; 'D'
000000000020ab81         db  0x81 ; '.'
000000000020ab82         db  0x00 ; '.'
000000000020ab83         db  0x00 ; '.'
000000000020ab84         db  0x00 ; '.'
000000000020ab85         db  0x00 ; '.'
000000000020ab86         db  0x00 ; '.'
000000000020ab87         db  0x00 ; '.'
000000000020ab88         db  0x00 ; '.'
000000000020ab89         db  0x00 ; '.'
000000000020ab8a         db  0x00 ; '.'
000000000020ab8b         db  0x00 ; '.'
000000000020ab8c         db  0x00 ; '.'
000000000020ab8d         db  0x00 ; '.'
000000000020ab8e         db  0x00 ; '.'
000000000020ab8f         db  0x00 ; '.'
000000000020ab90         db  0x00 ; '.'
000000000020ab91         db  0x00 ; '.'
000000000020ab92         db  0x00 ; '.'
000000000020ab93         db  0x00 ; '.'
000000000020ab94         db  0x00 ; '.'
000000000020ab95         db  0x00 ; '.'
000000000020ab96         db  0x00 ; '.'
000000000020ab97         db  0x00 ; '.'
000000000020ab98         db  0x7d ; '}'
000000000020ab99         db  0xff ; '.'
000000000020ab9a         db  0xff ; '.'
000000000020ab9b         db  0xff ; '.'
000000000020ab9c         db  0x00 ; '.'
000000000020ab9d         db  0x00 ; '.'
000000000020ab9e         db  0x00 ; '.'
000000000020ab9f         db  0x00 ; '.'
000000000020aba0         db  0x00 ; '.'
000000000020aba1         db  0x00 ; '.'
000000000020aba2         db  0x00 ; '.'
000000000020aba3         db  0x00 ; '.'
000000000020aba4         db  0x00 ; '.'
000000000020aba5         db  0x00 ; '.'
000000000020aba6         db  0x00 ; '.'
000000000020aba7         db  0x00 ; '.'
000000000020aba8         db  0x00 ; '.'
000000000020aba9         db  0x00 ; '.'
000000000020abaa         db  0x00 ; '.'
000000000020abab         db  0x00 ; '.'
000000000020abac         db  0x00 ; '.'
000000000020abad         db  0x00 ; '.'
000000000020abae         db  0x00 ; '.'
000000000020abaf         db  0x00 ; '.'
000000000020abb0         db  0x00 ; '.'
000000000020abb1         db  0x00 ; '.'
000000000020abb2         db  0x00 ; '.'
000000000020abb3         db  0x00 ; '.'
000000000020abb4         db  0x00 ; '.'
000000000020abb5         db  0x00 ; '.'
000000000020abb6         db  0x00 ; '.'
000000000020abb7         db  0x00 ; '.'
000000000020abb8         db  0x00 ; '.'
000000000020abb9         db  0x00 ; '.'
000000000020abba         db  0x00 ; '.'
000000000020abbb         db  0x00 ; '.'
000000000020abbc         db  0x00 ; '.'
000000000020abbd         db  0x00 ; '.'
000000000020abbe         db  0x00 ; '.'
000000000020abbf         db  0x00 ; '.'
                     quoting_style_args:
000000000020abc0         db  0x77 ; 'w'
000000000020abc1         db  0x88 ; '.'
000000000020abc2         db  0x00 ; '.'
000000000020abc3         db  0x00 ; '.'
000000000020abc4         db  0x00 ; '.'
000000000020abc5         db  0x00 ; '.'
000000000020abc6         db  0x00 ; '.'
000000000020abc7         db  0x00 ; '.'
000000000020abc8         db  0x7f ; '.'
000000000020abc9         db  0x88 ; '.'
000000000020abca         db  0x00 ; '.'
000000000020abcb         db  0x00 ; '.'
000000000020abcc         db  0x00 ; '.'
000000000020abcd         db  0x00 ; '.'
000000000020abce         db  0x00 ; '.'
000000000020abcf         db  0x00 ; '.'
000000000020abd0         db  0x85 ; '.'
000000000020abd1         db  0x88 ; '.'
000000000020abd2         db  0x00 ; '.'
000000000020abd3         db  0x00 ; '.'
000000000020abd4         db  0x00 ; '.'
000000000020abd5         db  0x00 ; '.'
000000000020abd6         db  0x00 ; '.'
000000000020abd7         db  0x00 ; '.'
000000000020abd8         db  0x92 ; '.'
000000000020abd9         db  0x88 ; '.'
000000000020abda         db  0x00 ; '.'
000000000020abdb         db  0x00 ; '.'
000000000020abdc         db  0x00 ; '.'
000000000020abdd         db  0x00 ; '.'
000000000020abde         db  0x00 ; '.'
000000000020abdf         db  0x00 ; '.'
000000000020abe0         db  0x9f ; '.'
000000000020abe1         db  0x88 ; '.'
000000000020abe2         db  0x00 ; '.'
000000000020abe3         db  0x00 ; '.'
000000000020abe4         db  0x00 ; '.'
000000000020abe5         db  0x00 ; '.'
000000000020abe6         db  0x00 ; '.'
000000000020abe7         db  0x00 ; '.'
000000000020abe8         db  0xb3 ; '.'
000000000020abe9         db  0x88 ; '.'
000000000020abea         db  0x00 ; '.'
000000000020abeb         db  0x00 ; '.'
000000000020abec         db  0x00 ; '.'
000000000020abed         db  0x00 ; '.'
000000000020abee         db  0x00 ; '.'
000000000020abef         db  0x00 ; '.'
000000000020abf0         db  0xb5 ; '.'
000000000020abf1         db  0x88 ; '.'
000000000020abf2         db  0x00 ; '.'
000000000020abf3         db  0x00 ; '.'
000000000020abf4         db  0x00 ; '.'
000000000020abf5         db  0x00 ; '.'
000000000020abf6         db  0x00 ; '.'
000000000020abf7         db  0x00 ; '.'
000000000020abf8         db  0x98 ; '.'
000000000020abf9         db  0x88 ; '.'
000000000020abfa         db  0x00 ; '.'
000000000020abfb         db  0x00 ; '.'
000000000020abfc         db  0x00 ; '.'
000000000020abfd         db  0x00 ; '.'
000000000020abfe         db  0x00 ; '.'
000000000020abff         db  0x00 ; '.'
000000000020ac00         db  0x86 ; '.'
000000000020ac01         db  0x80 ; '.'
000000000020ac02         db  0x00 ; '.'
000000000020ac03         db  0x00 ; '.'
000000000020ac04         db  0x00 ; '.'
000000000020ac05         db  0x00 ; '.'
000000000020ac06         db  0x00 ; '.'
000000000020ac07         db  0x00 ; '.'
000000000020ac08         db  0xbd ; '.'
000000000020ac09         db  0x88 ; '.'
000000000020ac0a         db  0x00 ; '.'
000000000020ac0b         db  0x00 ; '.'
000000000020ac0c         db  0x00 ; '.'
000000000020ac0d         db  0x00 ; '.'
000000000020ac0e         db  0x00 ; '.'
000000000020ac0f         db  0x00 ; '.'
000000000020ac10         db  0x00 ; '.'
000000000020ac11         db  0x00 ; '.'
000000000020ac12         db  0x00 ; '.'
000000000020ac13         db  0x00 ; '.'
000000000020ac14         db  0x00 ; '.'
000000000020ac15         db  0x00 ; '.'
000000000020ac16         db  0x00 ; '.'
000000000020ac17         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20ac18; 0x20ae08[ (496 bytes)
        ; File offset : [44056; 44552[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020ac18         db  0x01 ; '.'
000000000020ac19         db  0x00 ; '.'
000000000020ac1a         db  0x00 ; '.'
000000000020ac1b         db  0x00 ; '.'
000000000020ac1c         db  0x00 ; '.'
000000000020ac1d         db  0x00 ; '.'
000000000020ac1e         db  0x00 ; '.'
000000000020ac1f         db  0x00 ; '.'
000000000020ac20         db  0x01 ; '.'
000000000020ac21         db  0x00 ; '.'
000000000020ac22         db  0x00 ; '.'
000000000020ac23         db  0x00 ; '.'
000000000020ac24         db  0x00 ; '.'
000000000020ac25         db  0x00 ; '.'
000000000020ac26         db  0x00 ; '.'
000000000020ac27         db  0x00 ; '.'
000000000020ac28         db  0x0c ; '.'
000000000020ac29         db  0x00 ; '.'
000000000020ac2a         db  0x00 ; '.'
000000000020ac2b         db  0x00 ; '.'
000000000020ac2c         db  0x00 ; '.'
000000000020ac2d         db  0x00 ; '.'
000000000020ac2e         db  0x00 ; '.'
000000000020ac2f         db  0x00 ; '.'
000000000020ac30         db  0x50 ; 'P'
000000000020ac31         db  0x15 ; '.'
000000000020ac32         db  0x00 ; '.'
000000000020ac33         db  0x00 ; '.'
000000000020ac34         db  0x00 ; '.'
000000000020ac35         db  0x00 ; '.'
000000000020ac36         db  0x00 ; '.'
000000000020ac37         db  0x00 ; '.'
000000000020ac38         db  0x0d ; '.'
000000000020ac39         db  0x00 ; '.'
000000000020ac3a         db  0x00 ; '.'
000000000020ac3b         db  0x00 ; '.'
000000000020ac3c         db  0x00 ; '.'
000000000020ac3d         db  0x00 ; '.'
000000000020ac3e         db  0x00 ; '.'
000000000020ac3f         db  0x00 ; '.'
000000000020ac40         db  0x70 ; 'p'
000000000020ac41         db  0x7f ; '.'
000000000020ac42         db  0x00 ; '.'
000000000020ac43         db  0x00 ; '.'
000000000020ac44         db  0x00 ; '.'
000000000020ac45         db  0x00 ; '.'
000000000020ac46         db  0x00 ; '.'
000000000020ac47         db  0x00 ; '.'
000000000020ac48         db  0x19 ; '.'
000000000020ac49         db  0x00 ; '.'
000000000020ac4a         db  0x00 ; '.'
000000000020ac4b         db  0x00 ; '.'
000000000020ac4c         db  0x00 ; '.'
000000000020ac4d         db  0x00 ; '.'
000000000020ac4e         db  0x00 ; '.'
000000000020ac4f         db  0x00 ; '.'
000000000020ac50         db  0xf0 ; '.'
000000000020ac51         db  0xaa ; '.'
000000000020ac52         db  0x20 ; ' '
000000000020ac53         db  0x00 ; '.'
000000000020ac54         db  0x00 ; '.'
000000000020ac55         db  0x00 ; '.'
000000000020ac56         db  0x00 ; '.'
000000000020ac57         db  0x00 ; '.'
000000000020ac58         db  0x1b ; '.'
000000000020ac59         db  0x00 ; '.'
000000000020ac5a         db  0x00 ; '.'
000000000020ac5b         db  0x00 ; '.'
000000000020ac5c         db  0x00 ; '.'
000000000020ac5d         db  0x00 ; '.'
000000000020ac5e         db  0x00 ; '.'
000000000020ac5f         db  0x00 ; '.'
000000000020ac60         db  0x08 ; '.'
000000000020ac61         db  0x00 ; '.'
000000000020ac62         db  0x00 ; '.'
000000000020ac63         db  0x00 ; '.'
000000000020ac64         db  0x00 ; '.'
000000000020ac65         db  0x00 ; '.'
000000000020ac66         db  0x00 ; '.'
000000000020ac67         db  0x00 ; '.'
000000000020ac68         db  0x1a ; '.'
000000000020ac69         db  0x00 ; '.'
000000000020ac6a         db  0x00 ; '.'
000000000020ac6b         db  0x00 ; '.'
000000000020ac6c         db  0x00 ; '.'
000000000020ac6d         db  0x00 ; '.'
000000000020ac6e         db  0x00 ; '.'
000000000020ac6f         db  0x00 ; '.'
000000000020ac70         db  0xf8 ; '.'
000000000020ac71         db  0xaa ; '.'
000000000020ac72         db  0x20 ; ' '
000000000020ac73         db  0x00 ; '.'
000000000020ac74         db  0x00 ; '.'
000000000020ac75         db  0x00 ; '.'
000000000020ac76         db  0x00 ; '.'
000000000020ac77         db  0x00 ; '.'
000000000020ac78         db  0x1c ; '.'
000000000020ac79         db  0x00 ; '.'
000000000020ac7a         db  0x00 ; '.'
000000000020ac7b         db  0x00 ; '.'
000000000020ac7c         db  0x00 ; '.'
000000000020ac7d         db  0x00 ; '.'
000000000020ac7e         db  0x00 ; '.'
000000000020ac7f         db  0x00 ; '.'
000000000020ac80         db  0x08 ; '.'
000000000020ac81         db  0x00 ; '.'
000000000020ac82         db  0x00 ; '.'
000000000020ac83         db  0x00 ; '.'
000000000020ac84         db  0x00 ; '.'
000000000020ac85         db  0x00 ; '.'
000000000020ac86         db  0x00 ; '.'
000000000020ac87         db  0x00 ; '.'
000000000020ac88         db  0xf5 ; '.'
000000000020ac89         db  0xfe ; '.'
000000000020ac8a         db  0xff ; '.'
000000000020ac8b         db  0x6f ; 'o'
000000000020ac8c         db  0x00 ; '.'
000000000020ac8d         db  0x00 ; '.'
000000000020ac8e         db  0x00 ; '.'
000000000020ac8f         db  0x00 ; '.'
000000000020ac90         db  0x98 ; '.'
000000000020ac91         db  0x02 ; '.'
000000000020ac92         db  0x00 ; '.'
000000000020ac93         db  0x00 ; '.'
000000000020ac94         db  0x00 ; '.'
000000000020ac95         db  0x00 ; '.'
000000000020ac96         db  0x00 ; '.'
000000000020ac97         db  0x00 ; '.'
000000000020ac98         db  0x05 ; '.'
000000000020ac99         db  0x00 ; '.'
000000000020ac9a         db  0x00 ; '.'
000000000020ac9b         db  0x00 ; '.'
000000000020ac9c         db  0x00 ; '.'
000000000020ac9d         db  0x00 ; '.'
000000000020ac9e         db  0x00 ; '.'
000000000020ac9f         db  0x00 ; '.'
000000000020aca0         db  0x40 ; '@'
000000000020aca1         db  0x09 ; '.'
000000000020aca2         db  0x00 ; '.'
000000000020aca3         db  0x00 ; '.'
000000000020aca4         db  0x00 ; '.'
000000000020aca5         db  0x00 ; '.'
000000000020aca6         db  0x00 ; '.'
000000000020aca7         db  0x00 ; '.'
000000000020aca8         db  0x06 ; '.'
000000000020aca9         db  0x00 ; '.'
000000000020acaa         db  0x00 ; '.'
000000000020acab         db  0x00 ; '.'
000000000020acac         db  0x00 ; '.'
000000000020acad         db  0x00 ; '.'
000000000020acae         db  0x00 ; '.'
000000000020acaf         db  0x00 ; '.'
000000000020acb0         db  0xe0 ; '.'
000000000020acb1         db  0x02 ; '.'
000000000020acb2         db  0x00 ; '.'
000000000020acb3         db  0x00 ; '.'
000000000020acb4         db  0x00 ; '.'
000000000020acb5         db  0x00 ; '.'
000000000020acb6         db  0x00 ; '.'
000000000020acb7         db  0x00 ; '.'
000000000020acb8         db  0x0a ; '.'
000000000020acb9         db  0x00 ; '.'
000000000020acba         db  0x00 ; '.'
000000000020acbb         db  0x00 ; '.'
000000000020acbc         db  0x00 ; '.'
000000000020acbd         db  0x00 ; '.'
000000000020acbe         db  0x00 ; '.'
000000000020acbf         db  0x00 ; '.'
000000000020acc0         db  0x15 ; '.'
000000000020acc1         db  0x03 ; '.'
000000000020acc2         db  0x00 ; '.'
000000000020acc3         db  0x00 ; '.'
000000000020acc4         db  0x00 ; '.'
000000000020acc5         db  0x00 ; '.'
000000000020acc6         db  0x00 ; '.'
000000000020acc7         db  0x00 ; '.'
000000000020acc8         db  0x0b ; '.'
000000000020acc9         db  0x00 ; '.'
000000000020acca         db  0x00 ; '.'
000000000020accb         db  0x00 ; '.'
000000000020accc         db  0x00 ; '.'
000000000020accd         db  0x00 ; '.'
000000000020acce         db  0x00 ; '.'
000000000020accf         db  0x00 ; '.'
000000000020acd0         db  0x18 ; '.'
000000000020acd1         db  0x00 ; '.'
000000000020acd2         db  0x00 ; '.'
000000000020acd3         db  0x00 ; '.'
000000000020acd4         db  0x00 ; '.'
000000000020acd5         db  0x00 ; '.'
000000000020acd6         db  0x00 ; '.'
000000000020acd7         db  0x00 ; '.'
000000000020acd8         db  0x15 ; '.'
000000000020acd9         db  0x00 ; '.'
000000000020acda         db  0x00 ; '.'
000000000020acdb         db  0x00 ; '.'
000000000020acdc         db  0x00 ; '.'
000000000020acdd         db  0x00 ; '.'
000000000020acde         db  0x00 ; '.'
000000000020acdf         db  0x00 ; '.'
000000000020ace0         db  0x00 ; '.'
000000000020ace1         db  0x00 ; '.'
000000000020ace2         db  0x00 ; '.'
000000000020ace3         db  0x00 ; '.'
000000000020ace4         db  0x00 ; '.'
000000000020ace5         db  0x00 ; '.'
000000000020ace6         db  0x00 ; '.'
000000000020ace7         db  0x00 ; '.'
000000000020ace8         db  0x03 ; '.'
000000000020ace9         db  0x00 ; '.'
000000000020acea         db  0x00 ; '.'
000000000020aceb         db  0x00 ; '.'
000000000020acec         db  0x00 ; '.'
000000000020aced         db  0x00 ; '.'
000000000020acee         db  0x00 ; '.'
000000000020acef         db  0x00 ; '.'
000000000020acf0         db  0x08 ; '.'
000000000020acf1         db  0xae ; '.'
000000000020acf2         db  0x20 ; ' '
000000000020acf3         db  0x00 ; '.'
000000000020acf4         db  0x00 ; '.'
000000000020acf5         db  0x00 ; '.'
000000000020acf6         db  0x00 ; '.'
000000000020acf7         db  0x00 ; '.'
000000000020acf8         db  0x02 ; '.'
000000000020acf9         db  0x00 ; '.'
000000000020acfa         db  0x00 ; '.'
000000000020acfb         db  0x00 ; '.'
000000000020acfc         db  0x00 ; '.'
000000000020acfd         db  0x00 ; '.'
000000000020acfe         db  0x00 ; '.'
000000000020acff         db  0x00 ; '.'
000000000020ad00         db  0x10 ; '.'
000000000020ad01         db  0x05 ; '.'
000000000020ad02         db  0x00 ; '.'
000000000020ad03         db  0x00 ; '.'
000000000020ad04         db  0x00 ; '.'
000000000020ad05         db  0x00 ; '.'
000000000020ad06         db  0x00 ; '.'
000000000020ad07         db  0x00 ; '.'
000000000020ad08         db  0x14 ; '.'
000000000020ad09         db  0x00 ; '.'
000000000020ad0a         db  0x00 ; '.'
000000000020ad0b         db  0x00 ; '.'
000000000020ad0c         db  0x00 ; '.'
000000000020ad0d         db  0x00 ; '.'
000000000020ad0e         db  0x00 ; '.'
000000000020ad0f         db  0x00 ; '.'
000000000020ad10         db  0x07 ; '.'
000000000020ad11         db  0x00 ; '.'
000000000020ad12         db  0x00 ; '.'
000000000020ad13         db  0x00 ; '.'
000000000020ad14         db  0x00 ; '.'
000000000020ad15         db  0x00 ; '.'
000000000020ad16         db  0x00 ; '.'
000000000020ad17         db  0x00 ; '.'
000000000020ad18         db  0x17 ; '.'
000000000020ad19         db  0x00 ; '.'
000000000020ad1a         db  0x00 ; '.'
000000000020ad1b         db  0x00 ; '.'
000000000020ad1c         db  0x00 ; '.'
000000000020ad1d         db  0x00 ; '.'
000000000020ad1e         db  0x00 ; '.'
000000000020ad1f         db  0x00 ; '.'
000000000020ad20         db  0x40 ; '@'
000000000020ad21         db  0x10 ; '.'
000000000020ad22         db  0x00 ; '.'
000000000020ad23         db  0x00 ; '.'
000000000020ad24         db  0x00 ; '.'
000000000020ad25         db  0x00 ; '.'
000000000020ad26         db  0x00 ; '.'
000000000020ad27         db  0x00 ; '.'
000000000020ad28         db  0x07 ; '.'
000000000020ad29         db  0x00 ; '.'
000000000020ad2a         db  0x00 ; '.'
000000000020ad2b         db  0x00 ; '.'
000000000020ad2c         db  0x00 ; '.'
000000000020ad2d         db  0x00 ; '.'
000000000020ad2e         db  0x00 ; '.'
000000000020ad2f         db  0x00 ; '.'
000000000020ad30         db  0x40 ; '@'
000000000020ad31         db  0x0d ; '.'
000000000020ad32         db  0x00 ; '.'
000000000020ad33         db  0x00 ; '.'
000000000020ad34         db  0x00 ; '.'
000000000020ad35         db  0x00 ; '.'
000000000020ad36         db  0x00 ; '.'
000000000020ad37         db  0x00 ; '.'
000000000020ad38         db  0x08 ; '.'
000000000020ad39         db  0x00 ; '.'
000000000020ad3a         db  0x00 ; '.'
000000000020ad3b         db  0x00 ; '.'
000000000020ad3c         db  0x00 ; '.'
000000000020ad3d         db  0x00 ; '.'
000000000020ad3e         db  0x00 ; '.'
000000000020ad3f         db  0x00 ; '.'
000000000020ad40         db  0x00 ; '.'
000000000020ad41         db  0x03 ; '.'
000000000020ad42         db  0x00 ; '.'
000000000020ad43         db  0x00 ; '.'
000000000020ad44         db  0x00 ; '.'
000000000020ad45         db  0x00 ; '.'
000000000020ad46         db  0x00 ; '.'
000000000020ad47         db  0x00 ; '.'
000000000020ad48         db  0x09 ; '.'
000000000020ad49         db  0x00 ; '.'
000000000020ad4a         db  0x00 ; '.'
000000000020ad4b         db  0x00 ; '.'
000000000020ad4c         db  0x00 ; '.'
000000000020ad4d         db  0x00 ; '.'
000000000020ad4e         db  0x00 ; '.'
000000000020ad4f         db  0x00 ; '.'
000000000020ad50         db  0x18 ; '.'
000000000020ad51         db  0x00 ; '.'
000000000020ad52         db  0x00 ; '.'
000000000020ad53         db  0x00 ; '.'
000000000020ad54         db  0x00 ; '.'
000000000020ad55         db  0x00 ; '.'
000000000020ad56         db  0x00 ; '.'
000000000020ad57         db  0x00 ; '.'
000000000020ad58         db  0x1e ; '.'
000000000020ad59         db  0x00 ; '.'
000000000020ad5a         db  0x00 ; '.'
000000000020ad5b         db  0x00 ; '.'
000000000020ad5c         db  0x00 ; '.'
000000000020ad5d         db  0x00 ; '.'
000000000020ad5e         db  0x00 ; '.'
000000000020ad5f         db  0x00 ; '.'
000000000020ad60         db  0x08 ; '.'
000000000020ad61         db  0x00 ; '.'
000000000020ad62         db  0x00 ; '.'
000000000020ad63         db  0x00 ; '.'
000000000020ad64         db  0x00 ; '.'
000000000020ad65         db  0x00 ; '.'
000000000020ad66         db  0x00 ; '.'
000000000020ad67         db  0x00 ; '.'
000000000020ad68         db  0xfb ; '.'
000000000020ad69         db  0xff ; '.'
000000000020ad6a         db  0xff ; '.'
000000000020ad6b         db  0x6f ; 'o'
000000000020ad6c         db  0x00 ; '.'
000000000020ad6d         db  0x00 ; '.'
000000000020ad6e         db  0x00 ; '.'
000000000020ad6f         db  0x00 ; '.'
000000000020ad70         db  0x01 ; '.'
000000000020ad71         db  0x00 ; '.'
000000000020ad72         db  0x00 ; '.'
000000000020ad73         db  0x08 ; '.'
000000000020ad74         db  0x00 ; '.'
000000000020ad75         db  0x00 ; '.'
000000000020ad76         db  0x00 ; '.'
000000000020ad77         db  0x00 ; '.'
000000000020ad78         db  0xfe ; '.'
000000000020ad79         db  0xff ; '.'
000000000020ad7a         db  0xff ; '.'
000000000020ad7b         db  0x6f ; 'o'
000000000020ad7c         db  0x00 ; '.'
000000000020ad7d         db  0x00 ; '.'
000000000020ad7e         db  0x00 ; '.'
000000000020ad7f         db  0x00 ; '.'
000000000020ad80         db  0xe0 ; '.'
000000000020ad81         db  0x0c ; '.'
000000000020ad82         db  0x00 ; '.'
000000000020ad83         db  0x00 ; '.'
000000000020ad84         db  0x00 ; '.'
000000000020ad85         db  0x00 ; '.'
000000000020ad86         db  0x00 ; '.'
000000000020ad87         db  0x00 ; '.'
000000000020ad88         db  0xff ; '.'
000000000020ad89         db  0xff ; '.'
000000000020ad8a         db  0xff ; '.'
000000000020ad8b         db  0x6f ; 'o'
000000000020ad8c         db  0x00 ; '.'
000000000020ad8d         db  0x00 ; '.'
000000000020ad8e         db  0x00 ; '.'
000000000020ad8f         db  0x00 ; '.'
000000000020ad90         db  0x01 ; '.'
000000000020ad91         db  0x00 ; '.'
000000000020ad92         db  0x00 ; '.'
000000000020ad93         db  0x00 ; '.'
000000000020ad94         db  0x00 ; '.'
000000000020ad95         db  0x00 ; '.'
000000000020ad96         db  0x00 ; '.'
000000000020ad97         db  0x00 ; '.'
000000000020ad98         db  0xf0 ; '.'
000000000020ad99         db  0xff ; '.'
000000000020ad9a         db  0xff ; '.'
000000000020ad9b         db  0x6f ; 'o'
000000000020ad9c         db  0x00 ; '.'
000000000020ad9d         db  0x00 ; '.'
000000000020ad9e         db  0x00 ; '.'
000000000020ad9f         db  0x00 ; '.'
000000000020ada0         db  0x56 ; 'V'
000000000020ada1         db  0x0c ; '.'
000000000020ada2         db  0x00 ; '.'
000000000020ada3         db  0x00 ; '.'
000000000020ada4         db  0x00 ; '.'
000000000020ada5         db  0x00 ; '.'
000000000020ada6         db  0x00 ; '.'
000000000020ada7         db  0x00 ; '.'
000000000020ada8         db  0xf9 ; '.'
000000000020ada9         db  0xff ; '.'
000000000020adaa         db  0xff ; '.'
000000000020adab         db  0x6f ; 'o'
000000000020adac         db  0x00 ; '.'
000000000020adad         db  0x00 ; '.'
000000000020adae         db  0x00 ; '.'
000000000020adaf         db  0x00 ; '.'
000000000020adb0         db  0x15 ; '.'
000000000020adb1         db  0x00 ; '.'
000000000020adb2         db  0x00 ; '.'
000000000020adb3         db  0x00 ; '.'
000000000020adb4         db  0x00 ; '.'
000000000020adb5         db  0x00 ; '.'
000000000020adb6         db  0x00 ; '.'
000000000020adb7         db  0x00 ; '.'
000000000020adb8         db  0x00 ; '.'
000000000020adb9         db  0x00 ; '.'
000000000020adba         db  0x00 ; '.'
000000000020adbb         db  0x00 ; '.'
000000000020adbc         db  0x00 ; '.'
000000000020adbd         db  0x00 ; '.'
000000000020adbe         db  0x00 ; '.'
000000000020adbf         db  0x00 ; '.'
000000000020adc0         db  0x00 ; '.'
000000000020adc1         db  0x00 ; '.'
000000000020adc2         db  0x00 ; '.'
000000000020adc3         db  0x00 ; '.'
000000000020adc4         db  0x00 ; '.'
000000000020adc5         db  0x00 ; '.'
000000000020adc6         db  0x00 ; '.'
000000000020adc7         db  0x00 ; '.'
000000000020adc8         db  0x00 ; '.'
000000000020adc9         db  0x00 ; '.'
000000000020adca         db  0x00 ; '.'
000000000020adcb         db  0x00 ; '.'
000000000020adcc         db  0x00 ; '.'
000000000020adcd         db  0x00 ; '.'
000000000020adce         db  0x00 ; '.'
000000000020adcf         db  0x00 ; '.'
000000000020add0         db  0x00 ; '.'
000000000020add1         db  0x00 ; '.'
000000000020add2         db  0x00 ; '.'
000000000020add3         db  0x00 ; '.'
000000000020add4         db  0x00 ; '.'
000000000020add5         db  0x00 ; '.'
000000000020add6         db  0x00 ; '.'
000000000020add7         db  0x00 ; '.'
000000000020add8         db  0x00 ; '.'
000000000020add9         db  0x00 ; '.'
000000000020adda         db  0x00 ; '.'
000000000020addb         db  0x00 ; '.'
000000000020addc         db  0x00 ; '.'
000000000020addd         db  0x00 ; '.'
000000000020adde         db  0x00 ; '.'
000000000020addf         db  0x00 ; '.'
000000000020ade0         db  0x00 ; '.'
000000000020ade1         db  0x00 ; '.'
000000000020ade2         db  0x00 ; '.'
000000000020ade3         db  0x00 ; '.'
000000000020ade4         db  0x00 ; '.'
000000000020ade5         db  0x00 ; '.'
000000000020ade6         db  0x00 ; '.'
000000000020ade7         db  0x00 ; '.'
000000000020ade8         db  0x00 ; '.'
000000000020ade9         db  0x00 ; '.'
000000000020adea         db  0x00 ; '.'
000000000020adeb         db  0x00 ; '.'
000000000020adec         db  0x00 ; '.'
000000000020aded         db  0x00 ; '.'
000000000020adee         db  0x00 ; '.'
000000000020adef         db  0x00 ; '.'
000000000020adf0         db  0x00 ; '.'
000000000020adf1         db  0x00 ; '.'
000000000020adf2         db  0x00 ; '.'
000000000020adf3         db  0x00 ; '.'
000000000020adf4         db  0x00 ; '.'
000000000020adf5         db  0x00 ; '.'
000000000020adf6         db  0x00 ; '.'
000000000020adf7         db  0x00 ; '.'
000000000020adf8         db  0x00 ; '.'
000000000020adf9         db  0x00 ; '.'
000000000020adfa         db  0x00 ; '.'
000000000020adfb         db  0x00 ; '.'
000000000020adfc         db  0x00 ; '.'
000000000020adfd         db  0x00 ; '.'
000000000020adfe         db  0x00 ; '.'
000000000020adff         db  0x00 ; '.'
000000000020ae00         db  0x00 ; '.'
000000000020ae01         db  0x00 ; '.'
000000000020ae02         db  0x00 ; '.'
000000000020ae03         db  0x00 ; '.'
000000000020ae04         db  0x00 ; '.'
000000000020ae05         db  0x00 ; '.'
000000000020ae06         db  0x00 ; '.'
000000000020ae07         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20ae08; 0x20aff8[ (496 bytes)
        ; File offset : [44552; 45048[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020ae08         db  0x18 ; '.'
000000000020ae09         db  0xac ; '.'
000000000020ae0a         db  0x20 ; ' '
000000000020ae0b         db  0x00 ; '.'
000000000020ae0c         db  0x00 ; '.'
000000000020ae0d         db  0x00 ; '.'
000000000020ae0e         db  0x00 ; '.'
000000000020ae0f         db  0x00 ; '.'
                     qword_20ae10:
000000000020ae10         dq         0x0000000000000000                          ; DATA XREF=0x1570
000000000020ae18         db  0x00 ; '.'                                         ; DATA XREF=0x1576
000000000020ae19         db  0x00 ; '.'
000000000020ae1a         db  0x00 ; '.'
000000000020ae1b         db  0x00 ; '.'
000000000020ae1c         db  0x00 ; '.'
000000000020ae1d         db  0x00 ; '.'
000000000020ae1e         db  0x00 ; '.'
000000000020ae1f         db  0x00 ; '.'
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000020ae20         dq         0x000000000020b270                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
000000000020ae28         dq         0x000000000020b278                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020ae30         dq         0x000000000020b280                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020ae38         dq         0x000000000020b288                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020ae40         dq         0x000000000020b290                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020ae48         dq         0x000000000020b2a0                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
000000000020ae50         dq         0x000000000020b2a8                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
000000000020ae58         dq         0x000000000020b2b0                          ; DATA XREF=j___fpending
                     clearerr_unlocked@GOT:        // clearerr_unlocked
000000000020ae60         dq         0x000000000020b2b8                          ; DATA XREF=j_clearerr_unlocked
                     textdomain@GOT:        // textdomain
000000000020ae68         dq         0x000000000020b2c0                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020ae70         dq         0x000000000020b2c8                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020ae78         dq         0x000000000020b2d0                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020ae80         dq         0x000000000020b2d8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020ae88         dq         0x000000000020b2e0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020ae90         dq         0x000000000020b2e8                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020ae98         dq         0x000000000020b2f0                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020aea0         dq         0x000000000020b2f8                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020aea8         dq         0x000000000020b300                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020aeb0         dq         0x000000000020b308                          ; DATA XREF=j_strchr
                     newlocale@GOT:        // newlocale
000000000020aeb8         dq         0x000000000020b310                          ; DATA XREF=j_newlocale
                     strrchr@GOT:        // strrchr
000000000020aec0         dq         0x000000000020b318                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020aec8         dq         0x000000000020b320                          ; DATA XREF=j_lseek
                     memset@GOT:        // memset
000000000020aed0         dq         0x000000000020b328                          ; DATA XREF=j_memset
                     strspn@GOT:        // strspn
000000000020aed8         dq         0x000000000020b330                          ; DATA XREF=j_strspn
                     strcspn@GOT:        // strcspn
000000000020aee0         dq         0x000000000020b338                          ; DATA XREF=j_strcspn
                     memcmp@GOT:        // memcmp
000000000020aee8         dq         0x000000000020b348                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020aef0         dq         0x000000000020b350                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020aef8         dq         0x000000000020b358                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020af00         dq         0x000000000020b360                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
000000000020af08         dq         0x000000000020b370                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
000000000020af10         dq         0x000000000020b378                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020af18         dq         0x000000000020b380                          ; DATA XREF=j_fileno
                     uselocale@GOT:        // uselocale
000000000020af20         dq         0x000000000020b388                          ; DATA XREF=j_uselocale
                     malloc@GOT:        // malloc
000000000020af28         dq         0x000000000020b390                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020af30         dq         0x000000000020b398                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020af38         dq         0x000000000020b3a0                          ; DATA XREF=j_nl_langinfo
                     __freading@GOT:        // __freading
000000000020af40         dq         0x000000000020b3a8                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
000000000020af48         dq         0x000000000020b3b0                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
000000000020af50         dq         0x000000000020b3b8                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020af58         dq         0x000000000020b3c0                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020af60         dq         0x000000000020b3c8                          ; DATA XREF=j___printf_chk
                     mempcpy@GOT:        // mempcpy
000000000020af68         dq         0x000000000020b3d0                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
000000000020af70         dq         0x000000000020b3d8                          ; DATA XREF=j_memmove
                     strtold@GOT:        // strtold
000000000020af78         dq         0x000000000020b3e0                          ; DATA XREF=j_strtold
                     error@GOT:        // error
000000000020af80         dq         0x000000000020b3e8                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020af88         dq         0x000000000020b3f0                          ; DATA XREF=j_fseeko
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020af90         dq         0x000000000020b3f8                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020af98         dq         0x000000000020b400                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020afa0         dq         0x000000000020b408                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020afa8         dq         0x000000000020b410                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020afb0         dq         0x000000000020b420                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020afb8         dq         0x000000000020b428                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020afc0         dq         0x000000000020b438                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
000000000020afc8         dq         0x000000000020b440                          ; DATA XREF=j___sprintf_chk
                     qword_20afd0:
000000000020afd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020afd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020afd9         db  0x00 ; '.'
000000000020afda         db  0x00 ; '.'
000000000020afdb         db  0x00 ; '.'
000000000020afdc         db  0x00 ; '.'
000000000020afdd         db  0x00 ; '.'
000000000020afde         db  0x00 ; '.'
000000000020afdf         db  0x00 ; '.'
                     qword_20afe0:
000000000020afe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20afe8:
000000000020afe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20aff0:
000000000020aff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20aff0, __do_global_dtors_aux+9
000000000020aff8         db  0x00 ; '.'
000000000020aff9         db  0x00 ; '.'
000000000020affa         db  0x00 ; '.'
000000000020affb         db  0x00 ; '.'
000000000020affc         db  0x00 ; '.'
000000000020affd         db  0x00 ; '.'
000000000020affe         db  0x00 ; '.'
000000000020afff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20b000; 0x20b080[ (128 bytes)
        ; File offset : [45056; 45184[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020b000         db  0x00 ; '.'
000000000020b001         db  0x00 ; '.'
000000000020b002         db  0x00 ; '.'
000000000020b003         db  0x00 ; '.'
000000000020b004         db  0x00 ; '.'
000000000020b005         db  0x00 ; '.'
000000000020b006         db  0x00 ; '.'
000000000020b007         db  0x00 ; '.'
                     __dso_handle:
000000000020b008         dq         0x000000000020b008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
000000000020b010         dq         0x0000000000008813                          ; "8.31", DATA XREF=main+394
                     exit_failure:
000000000020b018         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000020b01c         db  0x00 ; '.'
000000000020b01d         db  0x00 ; '.'
000000000020b01e         db  0x00 ; '.'
000000000020b01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020b020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020b021         db  0x00 ; '.'
000000000020b022         db  0x00 ; '.'
000000000020b023         db  0x00 ; '.'
000000000020b024         db  0x00 ; '.'
000000000020b025         db  0x00 ; '.'
000000000020b026         db  0x00 ; '.'
000000000020b027         db  0x00 ; '.'
000000000020b028         db  0x00 ; '.'
000000000020b029         db  0x00 ; '.'
000000000020b02a         db  0x00 ; '.'
000000000020b02b         db  0x00 ; '.'
000000000020b02c         db  0x00 ; '.'
000000000020b02d         db  0x00 ; '.'
000000000020b02e         db  0x00 ; '.'
000000000020b02f         db  0x00 ; '.'
000000000020b030         db  0x00 ; '.'
000000000020b031         db  0x00 ; '.'
000000000020b032         db  0x00 ; '.'
000000000020b033         db  0x00 ; '.'
000000000020b034         db  0x00 ; '.'
000000000020b035         db  0x00 ; '.'
000000000020b036         db  0x00 ; '.'
000000000020b037         db  0x00 ; '.'
000000000020b038         db  0x00 ; '.'
000000000020b039         db  0x00 ; '.'
000000000020b03a         db  0x00 ; '.'
000000000020b03b         db  0x00 ; '.'
000000000020b03c         db  0x00 ; '.'
000000000020b03d         db  0x00 ; '.'
000000000020b03e         db  0x00 ; '.'
000000000020b03f         db  0x00 ; '.'
000000000020b040         db  0x00 ; '.'
000000000020b041         db  0x00 ; '.'
000000000020b042         db  0x00 ; '.'
000000000020b043         db  0x00 ; '.'
000000000020b044         db  0x00 ; '.'
000000000020b045         db  0x00 ; '.'
000000000020b046         db  0x00 ; '.'
000000000020b047         db  0x00 ; '.'
000000000020b048         db  0x00 ; '.'
000000000020b049         db  0x00 ; '.'
000000000020b04a         db  0x00 ; '.'
000000000020b04b         db  0x00 ; '.'
000000000020b04c         db  0x00 ; '.'
000000000020b04d         db  0x00 ; '.'
000000000020b04e         db  0x00 ; '.'
000000000020b04f         db  0x00 ; '.'
000000000020b050         db  0x00 ; '.'
000000000020b051         db  0x00 ; '.'
000000000020b052         db  0x00 ; '.'
000000000020b053         db  0x00 ; '.'
000000000020b054         db  0x00 ; '.'
000000000020b055         db  0x00 ; '.'
000000000020b056         db  0x00 ; '.'
000000000020b057         db  0x00 ; '.'
                     nslots:
000000000020b058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020b05c         align      32
                     slotvec:
000000000020b060         dq         0x000000000020b070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020b068         db  0x00 ; '.'
000000000020b069         db  0x00 ; '.'
000000000020b06a         db  0x00 ; '.'
000000000020b06b         db  0x00 ; '.'
000000000020b06c         db  0x00 ; '.'
000000000020b06d         db  0x00 ; '.'
000000000020b06e         db  0x00 ; '.'
000000000020b06f         db  0x00 ; '.'
                     slotvec0:
000000000020b070         dq         1.26481e-321, 1.05853e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20b080; 0x20b260[ (480 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020b080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020b081         db  0x00 ; '.'
000000000020b082         db  0x00 ; '.'
000000000020b083         db  0x00 ; '.'
000000000020b084         db  0x00 ; '.'
000000000020b085         db  0x00 ; '.'
000000000020b086         db  0x00 ; '.'
000000000020b087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020b088         db  0x00 ; '.'                                         ; DATA XREF=main+387, main+1076, main+1273, io_error, seq_fast+510, seq_fast+787, usage+131, usage+168, usage+205, usage+242, usage+279
000000000020b089         db  0x00 ; '.'
000000000020b08a         db  0x00 ; '.'
000000000020b08b         db  0x00 ; '.'
000000000020b08c         db  0x00 ; '.'
000000000020b08d         db  0x00 ; '.'
000000000020b08e         db  0x00 ; '.'
000000000020b08f         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000020b090         db  0x00 ; '.'                                         ; DATA XREF=main+150, main+256, main+585, main+607, main+1596, main+1652, main+1670, main+1801, main+1958, main+2036
000000000020b091         db  0x00 ; '.'
000000000020b092         db  0x00 ; '.'
000000000020b093         db  0x00 ; '.'
000000000020b094         db  0x00 ; '.'
000000000020b095         db  0x00 ; '.'
000000000020b096         db  0x00 ; '.'
000000000020b097         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000020b098         db  0x00 ; '.'                                         ; DATA XREF=main+448, main+464
000000000020b099         db  0x00 ; '.'
000000000020b09a         db  0x00 ; '.'
000000000020b09b         db  0x00 ; '.'
000000000020b09c         db  0x00 ; '.'
000000000020b09d         db  0x00 ; '.'
000000000020b09e         db  0x00 ; '.'
000000000020b09f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020b0a0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020b0a1         db  0x00 ; '.'
000000000020b0a2         db  0x00 ; '.'
000000000020b0a3         db  0x00 ; '.'
000000000020b0a4         db  0x00 ; '.'
000000000020b0a5         db  0x00 ; '.'
000000000020b0a6         db  0x00 ; '.'
000000000020b0a7         db  0x00 ; '.'
000000000020b0a8         db  0x00 ; '.'
000000000020b0a9         db  0x00 ; '.'
000000000020b0aa         db  0x00 ; '.'
000000000020b0ab         db  0x00 ; '.'
000000000020b0ac         db  0x00 ; '.'
000000000020b0ad         db  0x00 ; '.'
000000000020b0ae         db  0x00 ; '.'
000000000020b0af         db  0x00 ; '.'
000000000020b0b0         db  0x00 ; '.'
000000000020b0b1         db  0x00 ; '.'
000000000020b0b2         db  0x00 ; '.'
000000000020b0b3         db  0x00 ; '.'
000000000020b0b4         db  0x00 ; '.'
000000000020b0b5         db  0x00 ; '.'
000000000020b0b6         db  0x00 ; '.'
000000000020b0b7         db  0x00 ; '.'
000000000020b0b8         db  0x00 ; '.'
000000000020b0b9         db  0x00 ; '.'
000000000020b0ba         db  0x00 ; '.'
000000000020b0bb         db  0x00 ; '.'
000000000020b0bc         db  0x00 ; '.'
000000000020b0bd         db  0x00 ; '.'
000000000020b0be         db  0x00 ; '.'
000000000020b0bf         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020b0c0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
000000000020b0c1         db  0x00 ; '.'
000000000020b0c2         db  0x00 ; '.'
000000000020b0c3         db  0x00 ; '.'
000000000020b0c4         db  0x00 ; '.'
000000000020b0c5         db  0x00 ; '.'
000000000020b0c6         db  0x00 ; '.'
000000000020b0c7         db  0x00 ; '.'
                     completed.7697:
000000000020b0c8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020b0c9         db  0x00 ; '.'
000000000020b0ca         db  0x00 ; '.'
000000000020b0cb         db  0x00 ; '.'
000000000020b0cc         db  0x00 ; '.'
000000000020b0cd         db  0x00 ; '.'
000000000020b0ce         db  0x00 ; '.'
000000000020b0cf         db  0x00 ; '.'
                     format_buf.6939:
000000000020b0d0         db  0x00 ; '.'                                         ; DATA XREF=main+2218, main+2245, main+2373, main+2400
000000000020b0d1         db  0x00 ; '.'
000000000020b0d2         db  0x00 ; '.'
000000000020b0d3         db  0x00 ; '.'
000000000020b0d4         db  0x00 ; '.'
000000000020b0d5         db  0x00 ; '.'
000000000020b0d6         db  0x00 ; '.'
000000000020b0d7         db  0x00 ; '.'
000000000020b0d8         db  0x00 ; '.'
000000000020b0d9         db  0x00 ; '.'
000000000020b0da         db  0x00 ; '.'
000000000020b0db         db  0x00 ; '.'
000000000020b0dc         db  0x00 ; '.'
000000000020b0dd         db  0x00 ; '.'
000000000020b0de         db  0x00 ; '.'
000000000020b0df         db  0x00 ; '.'
000000000020b0e0         db  0x00 ; '.'
000000000020b0e1         db  0x00 ; '.'
000000000020b0e2         db  0x00 ; '.'
000000000020b0e3         db  0x00 ; '.'
000000000020b0e4         db  0x00 ; '.'
000000000020b0e5         db  0x00 ; '.'
000000000020b0e6         db  0x00 ; '.'
000000000020b0e7         db  0x00 ; '.'
000000000020b0e8         db  0x00 ; '.'
000000000020b0e9         db  0x00 ; '.'
000000000020b0ea         db  0x00 ; '.'
000000000020b0eb         db  0x00 ; '.'
000000000020b0ec         db  0x00 ; '.'
000000000020b0ed         db  0x00 ; '.'
000000000020b0ee         db  0x00 ; '.'
000000000020b0ef         db  0x00 ; '.'
                     separator:
000000000020b0f0         db  0x00 ; '.'                                         ; DATA XREF=main+143, main+471, main+1083, main+1889, main+2336, seq_fast+423
000000000020b0f1         db  0x00 ; '.'
000000000020b0f2         db  0x00 ; '.'
000000000020b0f3         db  0x00 ; '.'
000000000020b0f4         db  0x00 ; '.'
000000000020b0f5         db  0x00 ; '.'
000000000020b0f6         db  0x00 ; '.'
000000000020b0f7         db  0x00 ; '.'
                     equal_width:
000000000020b0f8         db  0x00 ; '.'                                         ; DATA XREF=main+136, main+263, main+1578, main+1867, main+2124, main+2318
                     locale_ok:
000000000020b0f9         db  0x00 ; '.'                                         ; DATA XREF=main+91, main+824, main+860
000000000020b0fa         db  0x00 ; '.'
000000000020b0fb         db  0x00 ; '.'
000000000020b0fc         db  0x00 ; '.'
000000000020b0fd         db  0x00 ; '.'
000000000020b0fe         db  0x00 ; '.'
000000000020b0ff         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020b100         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020b101         db  0x00 ; '.'
000000000020b102         db  0x00 ; '.'
000000000020b103         db  0x00 ; '.'
000000000020b104         db  0x00 ; '.'
000000000020b105         db  0x00 ; '.'
000000000020b106         db  0x00 ; '.'
000000000020b107         db  0x00 ; '.'
                     file_name:
000000000020b108         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020b109         db  0x00 ; '.'
000000000020b10a         db  0x00 ; '.'
000000000020b10b         db  0x00 ; '.'
000000000020b10c         db  0x00 ; '.'
000000000020b10d         db  0x00 ; '.'
000000000020b10e         db  0x00 ; '.'
000000000020b10f         db  0x00 ; '.'
                     program_name:
000000000020b110         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
000000000020b111         db  0x00 ; '.'
000000000020b112         db  0x00 ; '.'
000000000020b113         db  0x00 ; '.'
000000000020b114         db  0x00 ; '.'
000000000020b115         db  0x00 ; '.'
000000000020b116         db  0x00 ; '.'
000000000020b117         db  0x00 ; '.'
000000000020b118         db  0x00 ; '.'
000000000020b119         db  0x00 ; '.'
000000000020b11a         db  0x00 ; '.'
000000000020b11b         db  0x00 ; '.'
000000000020b11c         db  0x00 ; '.'
000000000020b11d         db  0x00 ; '.'
000000000020b11e         db  0x00 ; '.'
000000000020b11f         db  0x00 ; '.'
                     slot0:
000000000020b120         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020b121         db  0x00 ; '.'
000000000020b122         db  0x00 ; '.'
000000000020b123         db  0x00 ; '.'
000000000020b124         db  0x00 ; '.'
000000000020b125         db  0x00 ; '.'
000000000020b126         db  0x00 ; '.'
000000000020b127         db  0x00 ; '.'
000000000020b128         db  0x00 ; '.'
000000000020b129         db  0x00 ; '.'
000000000020b12a         db  0x00 ; '.'
000000000020b12b         db  0x00 ; '.'
000000000020b12c         db  0x00 ; '.'
000000000020b12d         db  0x00 ; '.'
000000000020b12e         db  0x00 ; '.'
000000000020b12f         db  0x00 ; '.'
000000000020b130         db  0x00 ; '.'
000000000020b131         db  0x00 ; '.'
000000000020b132         db  0x00 ; '.'
000000000020b133         db  0x00 ; '.'
000000000020b134         db  0x00 ; '.'
000000000020b135         db  0x00 ; '.'
000000000020b136         db  0x00 ; '.'
000000000020b137         db  0x00 ; '.'
000000000020b138         db  0x00 ; '.'
000000000020b139         db  0x00 ; '.'
000000000020b13a         db  0x00 ; '.'
000000000020b13b         db  0x00 ; '.'
000000000020b13c         db  0x00 ; '.'
000000000020b13d         db  0x00 ; '.'
000000000020b13e         db  0x00 ; '.'
000000000020b13f         db  0x00 ; '.'
000000000020b140         db  0x00 ; '.'
000000000020b141         db  0x00 ; '.'
000000000020b142         db  0x00 ; '.'
000000000020b143         db  0x00 ; '.'
000000000020b144         db  0x00 ; '.'
000000000020b145         db  0x00 ; '.'
000000000020b146         db  0x00 ; '.'
000000000020b147         db  0x00 ; '.'
000000000020b148         db  0x00 ; '.'
000000000020b149         db  0x00 ; '.'
000000000020b14a         db  0x00 ; '.'
000000000020b14b         db  0x00 ; '.'
000000000020b14c         db  0x00 ; '.'
000000000020b14d         db  0x00 ; '.'
000000000020b14e         db  0x00 ; '.'
000000000020b14f         db  0x00 ; '.'
000000000020b150         db  0x00 ; '.'
000000000020b151         db  0x00 ; '.'
000000000020b152         db  0x00 ; '.'
000000000020b153         db  0x00 ; '.'
000000000020b154         db  0x00 ; '.'
000000000020b155         db  0x00 ; '.'
000000000020b156         db  0x00 ; '.'
000000000020b157         db  0x00 ; '.'
000000000020b158         db  0x00 ; '.'
000000000020b159         db  0x00 ; '.'
000000000020b15a         db  0x00 ; '.'
000000000020b15b         db  0x00 ; '.'
000000000020b15c         db  0x00 ; '.'
000000000020b15d         db  0x00 ; '.'
000000000020b15e         db  0x00 ; '.'
000000000020b15f         db  0x00 ; '.'
000000000020b160         db  0x00 ; '.'
000000000020b161         db  0x00 ; '.'
000000000020b162         db  0x00 ; '.'
000000000020b163         db  0x00 ; '.'
000000000020b164         db  0x00 ; '.'
000000000020b165         db  0x00 ; '.'
000000000020b166         db  0x00 ; '.'
000000000020b167         db  0x00 ; '.'
000000000020b168         db  0x00 ; '.'
000000000020b169         db  0x00 ; '.'
000000000020b16a         db  0x00 ; '.'
000000000020b16b         db  0x00 ; '.'
000000000020b16c         db  0x00 ; '.'
000000000020b16d         db  0x00 ; '.'
000000000020b16e         db  0x00 ; '.'
000000000020b16f         db  0x00 ; '.'
000000000020b170         db  0x00 ; '.'
000000000020b171         db  0x00 ; '.'
000000000020b172         db  0x00 ; '.'
000000000020b173         db  0x00 ; '.'
000000000020b174         db  0x00 ; '.'
000000000020b175         db  0x00 ; '.'
000000000020b176         db  0x00 ; '.'
000000000020b177         db  0x00 ; '.'
000000000020b178         db  0x00 ; '.'
000000000020b179         db  0x00 ; '.'
000000000020b17a         db  0x00 ; '.'
000000000020b17b         db  0x00 ; '.'
000000000020b17c         db  0x00 ; '.'
000000000020b17d         db  0x00 ; '.'
000000000020b17e         db  0x00 ; '.'
000000000020b17f         db  0x00 ; '.'
000000000020b180         db  0x00 ; '.'
000000000020b181         db  0x00 ; '.'
000000000020b182         db  0x00 ; '.'
000000000020b183         db  0x00 ; '.'
000000000020b184         db  0x00 ; '.'
000000000020b185         db  0x00 ; '.'
000000000020b186         db  0x00 ; '.'
000000000020b187         db  0x00 ; '.'
000000000020b188         db  0x00 ; '.'
000000000020b189         db  0x00 ; '.'
000000000020b18a         db  0x00 ; '.'
000000000020b18b         db  0x00 ; '.'
000000000020b18c         db  0x00 ; '.'
000000000020b18d         db  0x00 ; '.'
000000000020b18e         db  0x00 ; '.'
000000000020b18f         db  0x00 ; '.'
000000000020b190         db  0x00 ; '.'
000000000020b191         db  0x00 ; '.'
000000000020b192         db  0x00 ; '.'
000000000020b193         db  0x00 ; '.'
000000000020b194         db  0x00 ; '.'
000000000020b195         db  0x00 ; '.'
000000000020b196         db  0x00 ; '.'
000000000020b197         db  0x00 ; '.'
000000000020b198         db  0x00 ; '.'
000000000020b199         db  0x00 ; '.'
000000000020b19a         db  0x00 ; '.'
000000000020b19b         db  0x00 ; '.'
000000000020b19c         db  0x00 ; '.'
000000000020b19d         db  0x00 ; '.'
000000000020b19e         db  0x00 ; '.'
000000000020b19f         db  0x00 ; '.'
000000000020b1a0         db  0x00 ; '.'
000000000020b1a1         db  0x00 ; '.'
000000000020b1a2         db  0x00 ; '.'
000000000020b1a3         db  0x00 ; '.'
000000000020b1a4         db  0x00 ; '.'
000000000020b1a5         db  0x00 ; '.'
000000000020b1a6         db  0x00 ; '.'
000000000020b1a7         db  0x00 ; '.'
000000000020b1a8         db  0x00 ; '.'
000000000020b1a9         db  0x00 ; '.'
000000000020b1aa         db  0x00 ; '.'
000000000020b1ab         db  0x00 ; '.'
000000000020b1ac         db  0x00 ; '.'
000000000020b1ad         db  0x00 ; '.'
000000000020b1ae         db  0x00 ; '.'
000000000020b1af         db  0x00 ; '.'
000000000020b1b0         db  0x00 ; '.'
000000000020b1b1         db  0x00 ; '.'
000000000020b1b2         db  0x00 ; '.'
000000000020b1b3         db  0x00 ; '.'
000000000020b1b4         db  0x00 ; '.'
000000000020b1b5         db  0x00 ; '.'
000000000020b1b6         db  0x00 ; '.'
000000000020b1b7         db  0x00 ; '.'
000000000020b1b8         db  0x00 ; '.'
000000000020b1b9         db  0x00 ; '.'
000000000020b1ba         db  0x00 ; '.'
000000000020b1bb         db  0x00 ; '.'
000000000020b1bc         db  0x00 ; '.'
000000000020b1bd         db  0x00 ; '.'
000000000020b1be         db  0x00 ; '.'
000000000020b1bf         db  0x00 ; '.'
000000000020b1c0         db  0x00 ; '.'
000000000020b1c1         db  0x00 ; '.'
000000000020b1c2         db  0x00 ; '.'
000000000020b1c3         db  0x00 ; '.'
000000000020b1c4         db  0x00 ; '.'
000000000020b1c5         db  0x00 ; '.'
000000000020b1c6         db  0x00 ; '.'
000000000020b1c7         db  0x00 ; '.'
000000000020b1c8         db  0x00 ; '.'
000000000020b1c9         db  0x00 ; '.'
000000000020b1ca         db  0x00 ; '.'
000000000020b1cb         db  0x00 ; '.'
000000000020b1cc         db  0x00 ; '.'
000000000020b1cd         db  0x00 ; '.'
000000000020b1ce         db  0x00 ; '.'
000000000020b1cf         db  0x00 ; '.'
000000000020b1d0         db  0x00 ; '.'
000000000020b1d1         db  0x00 ; '.'
000000000020b1d2         db  0x00 ; '.'
000000000020b1d3         db  0x00 ; '.'
000000000020b1d4         db  0x00 ; '.'
000000000020b1d5         db  0x00 ; '.'
000000000020b1d6         db  0x00 ; '.'
000000000020b1d7         db  0x00 ; '.'
000000000020b1d8         db  0x00 ; '.'
000000000020b1d9         db  0x00 ; '.'
000000000020b1da         db  0x00 ; '.'
000000000020b1db         db  0x00 ; '.'
000000000020b1dc         db  0x00 ; '.'
000000000020b1dd         db  0x00 ; '.'
000000000020b1de         db  0x00 ; '.'
000000000020b1df         db  0x00 ; '.'
000000000020b1e0         db  0x00 ; '.'
000000000020b1e1         db  0x00 ; '.'
000000000020b1e2         db  0x00 ; '.'
000000000020b1e3         db  0x00 ; '.'
000000000020b1e4         db  0x00 ; '.'
000000000020b1e5         db  0x00 ; '.'
000000000020b1e6         db  0x00 ; '.'
000000000020b1e7         db  0x00 ; '.'
000000000020b1e8         db  0x00 ; '.'
000000000020b1e9         db  0x00 ; '.'
000000000020b1ea         db  0x00 ; '.'
000000000020b1eb         db  0x00 ; '.'
000000000020b1ec         db  0x00 ; '.'
000000000020b1ed         db  0x00 ; '.'
000000000020b1ee         db  0x00 ; '.'
000000000020b1ef         db  0x00 ; '.'
000000000020b1f0         db  0x00 ; '.'
000000000020b1f1         db  0x00 ; '.'
000000000020b1f2         db  0x00 ; '.'
000000000020b1f3         db  0x00 ; '.'
000000000020b1f4         db  0x00 ; '.'
000000000020b1f5         db  0x00 ; '.'
000000000020b1f6         db  0x00 ; '.'
000000000020b1f7         db  0x00 ; '.'
000000000020b1f8         db  0x00 ; '.'
000000000020b1f9         db  0x00 ; '.'
000000000020b1fa         db  0x00 ; '.'
000000000020b1fb         db  0x00 ; '.'
000000000020b1fc         db  0x00 ; '.'
000000000020b1fd         db  0x00 ; '.'
000000000020b1fe         db  0x00 ; '.'
000000000020b1ff         db  0x00 ; '.'
000000000020b200         db  0x00 ; '.'
000000000020b201         db  0x00 ; '.'
000000000020b202         db  0x00 ; '.'
000000000020b203         db  0x00 ; '.'
000000000020b204         db  0x00 ; '.'
000000000020b205         db  0x00 ; '.'
000000000020b206         db  0x00 ; '.'
000000000020b207         db  0x00 ; '.'
000000000020b208         db  0x00 ; '.'
000000000020b209         db  0x00 ; '.'
000000000020b20a         db  0x00 ; '.'
000000000020b20b         db  0x00 ; '.'
000000000020b20c         db  0x00 ; '.'
000000000020b20d         db  0x00 ; '.'
000000000020b20e         db  0x00 ; '.'
000000000020b20f         db  0x00 ; '.'
000000000020b210         db  0x00 ; '.'
000000000020b211         db  0x00 ; '.'
000000000020b212         db  0x00 ; '.'
000000000020b213         db  0x00 ; '.'
000000000020b214         db  0x00 ; '.'
000000000020b215         db  0x00 ; '.'
000000000020b216         db  0x00 ; '.'
000000000020b217         db  0x00 ; '.'
000000000020b218         db  0x00 ; '.'
000000000020b219         db  0x00 ; '.'
000000000020b21a         db  0x00 ; '.'
000000000020b21b         db  0x00 ; '.'
000000000020b21c         db  0x00 ; '.'
000000000020b21d         db  0x00 ; '.'
000000000020b21e         db  0x00 ; '.'
000000000020b21f         db  0x00 ; '.'
                     default_quoting_options:
000000000020b220         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020b221         db  0x00 ; '.'
000000000020b222         db  0x00 ; '.'
000000000020b223         db  0x00 ; '.'
000000000020b224         db  0x00 ; '.'
000000000020b225         db  0x00 ; '.'
000000000020b226         db  0x00 ; '.'
000000000020b227         db  0x00 ; '.'
000000000020b228         db  0x00 ; '.'
000000000020b229         db  0x00 ; '.'
000000000020b22a         db  0x00 ; '.'
000000000020b22b         db  0x00 ; '.'
000000000020b22c         db  0x00 ; '.'
000000000020b22d         db  0x00 ; '.'
000000000020b22e         db  0x00 ; '.'
000000000020b22f         db  0x00 ; '.'
000000000020b230         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020b231         db  0x00 ; '.'
000000000020b232         db  0x00 ; '.'
000000000020b233         db  0x00 ; '.'
000000000020b234         db  0x00 ; '.'
000000000020b235         db  0x00 ; '.'
000000000020b236         db  0x00 ; '.'
000000000020b237         db  0x00 ; '.'
000000000020b238         db  0x00 ; '.'
000000000020b239         db  0x00 ; '.'
000000000020b23a         db  0x00 ; '.'
000000000020b23b         db  0x00 ; '.'
000000000020b23c         db  0x00 ; '.'
000000000020b23d         db  0x00 ; '.'
000000000020b23e         db  0x00 ; '.'
000000000020b23f         db  0x00 ; '.'
000000000020b240         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020b241         db  0x00 ; '.'
000000000020b242         db  0x00 ; '.'
000000000020b243         db  0x00 ; '.'
000000000020b244         db  0x00 ; '.'
000000000020b245         db  0x00 ; '.'
000000000020b246         db  0x00 ; '.'
000000000020b247         db  0x00 ; '.'
000000000020b248         db  0x00 ; '.'
000000000020b249         db  0x00 ; '.'
000000000020b24a         db  0x00 ; '.'
000000000020b24b         db  0x00 ; '.'
000000000020b24c         db  0x00 ; '.'
000000000020b24d         db  0x00 ; '.'
000000000020b24e         db  0x00 ; '.'
000000000020b24f         db  0x00 ; '.'
                     qword_20b250:
000000000020b250         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020b251         db  0x00 ; '.'
000000000020b252         db  0x00 ; '.'
000000000020b253         db  0x00 ; '.'
000000000020b254         db  0x00 ; '.'
000000000020b255         db  0x00 ; '.'
000000000020b256         db  0x00 ; '.'
000000000020b257         db  0x00 ; '.'
                     c_locale_cache:
000000000020b258         db  0x00 ; '.'                                         ; DATA XREF=c_strtold+14, c_strtold+26, c_strtold+163
000000000020b259         db  0x00 ; '.'
000000000020b25a         db  0x00 ; '.'
000000000020b25b         db  0x00 ; '.'
000000000020b25c         db  0x00 ; '.'
000000000020b25d         db  0x00 ; '.'
000000000020b25e         db  0x00 ; '.'
000000000020b25f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20b270; 0x20b620[ (944 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20b270; 0x416890[ (2143776 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __snprintf_chk:
000000000020b270         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
000000000020b278         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000020b280         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020b288         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020b290         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020b298         extern function code
                     _exit:
000000000020b2a0         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
000000000020b2a8         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
000000000020b2b0         extern function code                                   ; DATA XREF=__fpending@GOT
                     clearerr_unlocked:
000000000020b2b8         extern function code                                   ; DATA XREF=clearerr_unlocked@GOT
                     textdomain:
000000000020b2c0         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020b2c8         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020b2d0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020b2d8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020b2e0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020b2e8         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000020b2f0         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000020b2f8         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000020b300         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
000000000020b308         extern function code                                   ; DATA XREF=strchr@GOT
                     newlocale:
000000000020b310         extern function code                                   ; DATA XREF=newlocale@GOT
                     strrchr:
000000000020b318         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020b320         extern function code                                   ; DATA XREF=lseek@GOT
                     memset:
000000000020b328         extern function code                                   ; DATA XREF=memset@GOT
                     strspn:
000000000020b330         extern function code                                   ; DATA XREF=strspn@GOT
                     strcspn:
000000000020b338         extern function code                                   ; DATA XREF=strcspn@GOT
                     __libc_start_main:
000000000020b340         extern function code
                     memcmp:
000000000020b348         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020b350         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020b358         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000020b360         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000020b368         extern function code
                     strtol:
000000000020b370         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
000000000020b378         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020b380         extern function code                                   ; DATA XREF=fileno@GOT
                     uselocale:
000000000020b388         extern function code                                   ; DATA XREF=uselocale@GOT
                     malloc:
000000000020b390         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020b398         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020b3a0         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __freading:
000000000020b3a8         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
000000000020b3b0         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
000000000020b3b8         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020b3c0         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020b3c8         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     mempcpy:
000000000020b3d0         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
000000000020b3d8         extern function code                                   ; DATA XREF=memmove@GOT
                     strtold:
000000000020b3e0         extern function code                                   ; DATA XREF=strtold@GOT
                     error:
000000000020b3e8         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000020b3f0         extern function code                                   ; DATA XREF=fseeko@GOT
                     __cxa_atexit:
000000000020b3f8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000020b400         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020b408         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020b410         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020b418         extern function code
                     mbsinit:
000000000020b420         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020b428         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020b430         extern function code
                     __ctype_b_loc:
000000000020b438         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
000000000020b440         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __snprintf_chk@@GLIBC_2.3.4:
000000000020b448         extern function code
                     free@@GLIBC_2.2.5:
000000000020b450         extern function code
                     abort@@GLIBC_2.2.5:
000000000020b458         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020b460         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020b468         extern function code
                     _ITM_deregisterTMCloneTable_20b470:        // _ITM_deregisterTMCloneTable
000000000020b470         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020b478         extern function code
                     strcpy@@GLIBC_2.2.5:
000000000020b480         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020b488         extern function code
                     clearerr_unlocked@@GLIBC_2.2.5:
000000000020b490         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020b498         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020b4a0         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020b4a8         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020b4b0         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020b4b8         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020b4c0         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020b4c8         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000020b4d0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020b4d8         extern function code
                     strchr@@GLIBC_2.2.5:
000000000020b4e0         extern function code
                     newlocale@@GLIBC_2.3:
000000000020b4e8         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020b4f0         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020b4f8         extern function code
                     memset@@GLIBC_2.2.5:
000000000020b500         extern function code
                     strspn@@GLIBC_2.2.5:
000000000020b508         extern function code
                     strcspn@@GLIBC_2.2.5:
000000000020b510         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020b518         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020b520         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020b528         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020b530         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020b538         extern function code
                     __gmon_start___20b540:        // __gmon_start__
000000000020b540         extern function code
                     strtol@@GLIBC_2.2.5:
000000000020b548         extern function code
                     memcpy@@GLIBC_2.14:
000000000020b550         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020b558         extern function code
                     uselocale@@GLIBC_2.3:
000000000020b560         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020b568         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020b570         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020b578         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020b580         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
000000000020b588         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020b590         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020b598         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020b5a0         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000020b5a8         extern function code
                     memmove@@GLIBC_2.2.5:
000000000020b5b0         extern function code
                     strtold@@GLIBC_2.2.5:
000000000020b5b8         extern function code
                     error@@GLIBC_2.2.5:
000000000020b5c0         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020b5c8         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020b5d0         extern function code
                     exit@@GLIBC_2.2.5:
000000000020b5d8         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020b5e0         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020b5e8         extern function code
                     _ITM_registerTMCloneTable_20b5f0:        // _ITM_registerTMCloneTable
000000000020b5f0         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020b5f8         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020b600         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020b608         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020b610         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
000000000020b618         extern function code
