
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/printf
        UUID: 2D8A3829-D1E2-408B-053E-CD3910B696B4
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xabf8[ (44024 bytes)
        ; File offset : [0; 44024[ (44024 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x10 ; '.'
0000000000000019         db  0x25 ; '%'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x90 ; '.'
0000000000000029         db  0x9b ; '.'
000000000000002a         db  0x03 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xf8 ; '.'
00000000000000d1         db  0xab ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xf8 ; '.'
00000000000000d9         db  0xab ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xb0 ; '.'
00000000000000f1         db  0xbb ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xb0 ; '.'
00000000000000f9         db  0xbb ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xb0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xbb ; '.'                                         ; DATA XREF=main+813
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xd0 ; '.'
0000000000000109         db  0x04 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x80 ; '.'
0000000000000111         db  0x06 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x18 ; '.'
0000000000000129         db  0xbc ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x18 ; '.'
0000000000000131         db  0xbc ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x18 ; '.'
0000000000000139         db  0xbc ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'                                         ; DATA XREF=main+15, main+504
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x7c ; '|'
0000000000000199         db  0x9a ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x7c ; '|'
00000000000001a1         db  0x9a ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x7c ; '|'
00000000000001a9         db  0x9a ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xe4 ; '.'
00000000000001b1         db  0x02 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xe4 ; '.'
00000000000001b9         db  0x02 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xb0 ; '.'
0000000000000209         db  0xbb ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xb0 ; '.'
0000000000000211         db  0xbb ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xb0 ; '.'
0000000000000219         db  0xbb ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x50 ; 'P'
0000000000000221         db  0x04 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x50 ; 'P'
0000000000000229         db  0x04 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000000238         db  0x2f ; '/'
0000000000000239         db  0x6c ; 'l'
000000000000023a         db  0x69 ; 'i'
000000000000023b         db  0x62 ; 'b'
000000000000023c         db  0x36 ; '6'
000000000000023d         db  0x34 ; '4'
000000000000023e         db  0x2f ; '/'
000000000000023f         db  0x6c ; 'l'
0000000000000240         db  0x64 ; 'd'
0000000000000241         db  0x2d ; '-'
0000000000000242         db  0x6c ; 'l'
0000000000000243         db  0x69 ; 'i'
0000000000000244         db  0x6e ; 'n'
0000000000000245         db  0x75 ; 'u'
0000000000000246         db  0x78 ; 'x'
0000000000000247         db  0x2d ; '-'
0000000000000248         db  0x78 ; 'x'
0000000000000249         db  0x38 ; '8'
000000000000024a         db  0x36 ; '6'
000000000000024b         db  0x2d ; '-'
000000000000024c         db  0x36 ; '6'
000000000000024d         db  0x34 ; '4'
000000000000024e         db  0x2e ; '.'
000000000000024f         db  0x73 ; 's'
0000000000000250         db  0x6f ; 'o'
0000000000000251         db  0x2e ; '.'
0000000000000252         db  0x32 ; '2'
0000000000000253         db  0x00 ; '.'


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x2d ; '-'
0000000000000285         db  0x8a ; '.'
0000000000000286         db  0x38 ; '8'
0000000000000287         db  0x29 ; ')'
0000000000000288         db  0xd1 ; '.'
0000000000000289         db  0xe2 ; '.'
000000000000028a         db  0x40 ; '@'
000000000000028b         db  0x8b ; '.'
000000000000028c         db  0x05 ; '.'
000000000000028d         db  0x3e ; '>'
000000000000028e         db  0xcd ; '.'
000000000000028f         db  0x39 ; '9'
0000000000000290         db  0x10 ; '.'
0000000000000291         db  0xb6 ; '.'
0000000000000292         db  0x96 ; '.'
0000000000000293         db  0xb4 ; '.'
0000000000000294         db  0x73 ; 's'
0000000000000295         db  0xd4 ; '.'
0000000000000296         db  0x25 ; '%'
0000000000000297         db  0xd5 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2d4[ (60 bytes)
        ; File offset : [664; 724[ (60 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x3a ; ':'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x49 ; 'I'
00000000000002aa         db  0x40 ; '@'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x18 ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x3a ; ':'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x3b ; ';'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x00 ; '.'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x00 ; '.'
00000000000002d5         db  0x00 ; '.'
00000000000002d6         db  0x00 ; '.'
00000000000002d7         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2d8; 0x8d8[ (1536 bytes)
        ; File offset : [728; 2264[ (1536 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002d8         db  0x00 ; '.'
00000000000002d9         db  0x00 ; '.'
00000000000002da         db  0x00 ; '.'
00000000000002db         db  0x00 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'
00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x5d ; ']'
00000000000002f1         db  0x01 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x12 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x00 ; '.'
00000000000002f9         db  0x00 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x00 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x76 ; 'v'
0000000000000309         db  0x01 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x12 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x00 ; '.'
0000000000000311         db  0x00 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x00 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x46 ; 'F'
0000000000000321         db  0x02 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x12 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x00 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x00 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x7f ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x12 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x00 ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x00 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0xd9 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x12 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x00 ; '.'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x00 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x31 ; '1'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x12 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x00 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x00 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0xaa ; '.'
0000000000000381         db  0x02 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x20 ; ' '
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x00 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x00 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x85 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x12 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x00 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x00 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x93 ; '.'
00000000000003b1         db  0x01 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x12 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x00 ; '.'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x00 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0xa5 ; '.'
00000000000003c9         db  0x01 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x12 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x00 ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x00 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x0b ; '.'
00000000000003e1         db  0x02 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x12 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x00 ; '.'
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x00 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0xe7 ; '.'
00000000000003f9         db  0x01 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x12 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x00 ; '.'
0000000000000401         db  0x00 ; '.'
0000000000000402         db  0x00 ; '.'
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x00 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x22 ; '"'
0000000000000411         db  0x01 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x12 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x00 ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x00 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x1b ; '.'
0000000000000429         db  0x01 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x12 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x00 ; '.'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x00 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0xe3 ; '.'
0000000000000441         db  0x01 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x12 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x00 ; '.'
0000000000000449         db  0x00 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x00 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x41 ; 'A'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x12 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x00 ; '.'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x00 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0xa3 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x12 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x00 ; '.'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x00 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0xc1 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x12 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x00 ; '.'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x00 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x55 ; 'U'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x12 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x00 ; '.'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x00 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x29 ; ')'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x12 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x00 ; '.'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x00 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x9e ; '.'
00000000000004d1         db  0x01 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x12 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x00 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x00 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0xc8 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x12 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x00 ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x00 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x19 ; '.'
0000000000000501         db  0x02 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x12 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x00 ; '.'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x00 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x39 ; '9'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x12 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x00 ; '.'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x00 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x0e ; '.'
0000000000000531         db  0x01 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x12 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x00 ; '.'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x00 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x24 ; '$'
0000000000000549         db  0x02 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x12 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x00 ; '.'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x00 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0xd2 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x12 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x00 ; '.'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x00 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0xf9 ; '.'
0000000000000579         db  0x01 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x12 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x00 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x00 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0xea ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x12 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x00 ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x00 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x37 ; '7'
00000000000005a9         db  0x02 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x12 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x00 ; '.'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x00 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0xba ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x12 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x00 ; '.'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x00 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0xf2 ; '.'
00000000000005d9         db  0x01 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x12 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x00 ; '.'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x00 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0xc6 ; '.'
00000000000005f1         db  0x02 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x20 ; ' '
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x00 ; '.'
00000000000005f9         db  0x00 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x00 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x14 ; '.'
0000000000000609         db  0x01 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x12 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x00 ; '.'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x00 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x85 ; '.'
0000000000000621         db  0x01 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x12 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x00 ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x00 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x4b ; 'K'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x12 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x00 ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x00 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x34 ; '4'
0000000000000651         db  0x01 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x12 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x00 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x00 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x0b ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x12 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x00 ; '.'
0000000000000671         db  0x00 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x00 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x43 ; 'C'
0000000000000681         db  0x01 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x12 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x00 ; '.'
0000000000000689         db  0x00 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x00 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x64 ; 'd'
0000000000000699         db  0x01 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x12 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x00 ; '.'
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x00 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x6f ; 'o'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x12 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x00 ; '.'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x00 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x1f ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x12 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x00 ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x00 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x12 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x12 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x00 ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x00 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0xf1 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x12 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x00 ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x00 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x77 ; 'w'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x12 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x00 ; '.'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x00 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x0c ; '.'
0000000000000729         db  0x02 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x12 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x00 ; '.'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x00 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x12 ; '.'
0000000000000741         db  0x02 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x12 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x00 ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x00 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x66 ; 'f'
0000000000000759         db  0x02 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x12 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x00 ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x00 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x86 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x12 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x00 ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x00 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x8c ; '.'
0000000000000789         db  0x01 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x12 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x00 ; '.'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x00 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0xf9 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x12 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x00 ; '.'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x00 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0xd5 ; '.'
00000000000007b9         db  0x02 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x20 ; ' '
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x00 ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x00 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x3b ; ';'                                         ; DATA XREF=rpl_vfprintf+29
00000000000007d1         db  0x01 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x12 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x00 ; '.'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x00 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x66 ; 'f'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x12 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x00 ; '.'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x00 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'                                         ; DATA XREF=rpl_vfprintf+12, rpl_vfprintf+155
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'                                         ; DATA XREF=print_esc+617, u8_uctomb_aux+9, u8_uctomb_aux+31
0000000000000800         db  0xd4 ; '.'                                         ; DATA XREF=u8_uctomb_aux+60
0000000000000801         db  0x01 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x22 ; '"'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x00 ; '.'
0000000000000809         db  0x00 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x00 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x4f ; 'O'
0000000000000819         db  0x01 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x12 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x00 ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x00 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0xc9 ; '.'
0000000000000831         db  0x01 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x12 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x00 ; '.'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x00 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x07 ; '.'
0000000000000849         db  0x01 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x11 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x19 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x88 ; '.'
0000000000000851         db  0xc0 ; '.'
0000000000000852         db  0x20 ; ' '
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x00 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x08 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x4b ; 'K'
0000000000000861         db  0x02 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x11 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x19 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x80 ; '.'
0000000000000869         db  0xc0 ; '.'
000000000000086a         db  0x20 ; ' '
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x00 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x08 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x8b ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x21 ; '!'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x19 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x90 ; '.'
0000000000000881         db  0xc0 ; '.'
0000000000000882         db  0x20 ; ' '
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x00 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x08 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x56 ; 'V'
0000000000000891         db  0x02 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x11 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x19 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x90 ; '.'
0000000000000899         db  0xc0 ; '.'
000000000000089a         db  0x20 ; ' '
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x00 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x08 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0xab ; '.'
00000000000008a9         db  0x01 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x21 ; '!'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x19 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x80 ; '.'
00000000000008b1         db  0xc0 ; '.'
00000000000008b2         db  0x20 ; ' '
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x00 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x08 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x6f ; 'o'
00000000000008c1         db  0x01 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x11 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x19 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xa0 ; '.'
00000000000008c9         db  0xc0 ; '.'
00000000000008ca         db  0x20 ; ' '
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x00 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x08 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x8d8; 0xbc7[ (751 bytes)
        ; File offset : [2264; 3015[ (751 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x6c ; 'l'
00000000000008da         db  0x69 ; 'i'
00000000000008db         db  0x62 ; 'b'
00000000000008dc         db  0x63 ; 'c'
00000000000008dd         db  0x2e ; '.'
00000000000008de         db  0x73 ; 's'
00000000000008df         db  0x6f ; 'o'
00000000000008e0         db  0x2e ; '.'
00000000000008e1         db  0x36 ; '6'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x66 ; 'f'
00000000000008e4         db  0x66 ; 'f'
00000000000008e5         db  0x6c ; 'l'
00000000000008e6         db  0x75 ; 'u'
00000000000008e7         db  0x73 ; 's'
00000000000008e8         db  0x68 ; 'h'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x5f ; '_'
00000000000008eb         db  0x5f ; '_'
00000000000008ec         db  0x70 ; 'p'
00000000000008ed         db  0x72 ; 'r'
00000000000008ee         db  0x69 ; 'i'
00000000000008ef         db  0x6e ; 'n'
00000000000008f0         db  0x74 ; 't'
00000000000008f1         db  0x66 ; 'f'
00000000000008f2         db  0x5f ; '_'
00000000000008f3         db  0x63 ; 'c'
00000000000008f4         db  0x68 ; 'h'
00000000000008f5         db  0x6b ; 'k'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x73 ; 's'
00000000000008f8         db  0x65 ; 'e'
00000000000008f9         db  0x74 ; 't'
00000000000008fa         db  0x6c ; 'l'
00000000000008fb         db  0x6f ; 'o'
00000000000008fc         db  0x63 ; 'c'
00000000000008fd         db  0x61 ; 'a'
00000000000008fe         db  0x6c ; 'l'
00000000000008ff         db  0x65 ; 'e'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x6d ; 'm'
0000000000000902         db  0x62 ; 'b'
0000000000000903         db  0x72 ; 'r'
0000000000000904         db  0x74 ; 't'
0000000000000905         db  0x6f ; 'o'
0000000000000906         db  0x77 ; 'w'
0000000000000907         db  0x63 ; 'c'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x73 ; 's'
000000000000090a         db  0x74 ; 't'
000000000000090b         db  0x72 ; 'r'
000000000000090c         db  0x6e ; 'n'
000000000000090d         db  0x63 ; 'c'
000000000000090e         db  0x6d ; 'm'
000000000000090f         db  0x70 ; 'p'
0000000000000910         db  0x00 ; '.'
0000000000000911         db  0x73 ; 's'
0000000000000912         db  0x74 ; 't'
0000000000000913         db  0x72 ; 'r'
0000000000000914         db  0x72 ; 'r'
0000000000000915         db  0x63 ; 'c'
0000000000000916         db  0x68 ; 'h'
0000000000000917         db  0x72 ; 'r'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x64 ; 'd'
000000000000091a         db  0x63 ; 'c'
000000000000091b         db  0x67 ; 'g'
000000000000091c         db  0x65 ; 'e'
000000000000091d         db  0x74 ; 't'
000000000000091e         db  0x74 ; 't'
000000000000091f         db  0x65 ; 'e'
0000000000000920         db  0x78 ; 'x'
0000000000000921         db  0x74 ; 't'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x75 ; 'u'
0000000000000924         db  0x73 ; 's'
0000000000000925         db  0x65 ; 'e'
0000000000000926         db  0x6c ; 'l'
0000000000000927         db  0x6f ; 'o'
0000000000000928         db  0x63 ; 'c'
0000000000000929         db  0x61 ; 'a'
000000000000092a         db  0x6c ; 'l'
000000000000092b         db  0x65 ; 'e'
000000000000092c         db  0x00 ; '.'
000000000000092d         db  0x5f ; '_'
000000000000092e         db  0x5f ; '_'
000000000000092f         db  0x73 ; 's'
0000000000000930         db  0x74 ; 't'
0000000000000931         db  0x61 ; 'a'
0000000000000932         db  0x63 ; 'c'
0000000000000933         db  0x6b ; 'k'
0000000000000934         db  0x5f ; '_'
0000000000000935         db  0x63 ; 'c'
0000000000000936         db  0x68 ; 'h'
0000000000000937         db  0x6b ; 'k'
0000000000000938         db  0x5f ; '_'
0000000000000939         db  0x66 ; 'f'
000000000000093a         db  0x61 ; 'a'
000000000000093b         db  0x69 ; 'i'
000000000000093c         db  0x6c ; 'l'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x69 ; 'i'
000000000000093f         db  0x73 ; 's'
0000000000000940         db  0x77 ; 'w'
0000000000000941         db  0x70 ; 'p'
0000000000000942         db  0x72 ; 'r'
0000000000000943         db  0x69 ; 'i'
0000000000000944         db  0x6e ; 'n'
0000000000000945         db  0x74 ; 't'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x72 ; 'r'
0000000000000948         db  0x65 ; 'e'
0000000000000949         db  0x61 ; 'a'
000000000000094a         db  0x6c ; 'l'
000000000000094b         db  0x6c ; 'l'
000000000000094c         db  0x6f ; 'o'
000000000000094d         db  0x63 ; 'c'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x73 ; 's'
0000000000000950         db  0x74 ; 't'
0000000000000951         db  0x72 ; 'r'
0000000000000952         db  0x74 ; 't'
0000000000000953         db  0x6f ; 'o'
0000000000000954         db  0x6c ; 'l'
0000000000000955         db  0x64 ; 'd'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x61 ; 'a'
0000000000000958         db  0x62 ; 'b'
0000000000000959         db  0x6f ; 'o'
000000000000095a         db  0x72 ; 'r'
000000000000095b         db  0x74 ; 't'
000000000000095c         db  0x00 ; '.'
000000000000095d         db  0x5f ; '_'
000000000000095e         db  0x65 ; 'e'
000000000000095f         db  0x78 ; 'x'
0000000000000960         db  0x69 ; 'i'
0000000000000961         db  0x74 ; 't'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x70 ; 'p'
0000000000000964         db  0x72 ; 'r'
0000000000000965         db  0x6f ; 'o'
0000000000000966         db  0x67 ; 'g'
0000000000000967         db  0x72 ; 'r'
0000000000000968         db  0x61 ; 'a'
0000000000000969         db  0x6d ; 'm'
000000000000096a         db  0x5f ; '_'
000000000000096b         db  0x69 ; 'i'
000000000000096c         db  0x6e ; 'n'
000000000000096d         db  0x76 ; 'v'
000000000000096e         db  0x6f ; 'o'
000000000000096f         db  0x63 ; 'c'
0000000000000970         db  0x61 ; 'a'
0000000000000971         db  0x74 ; 't'
0000000000000972         db  0x69 ; 'i'
0000000000000973         db  0x6f ; 'o'
0000000000000974         db  0x6e ; 'n'
0000000000000975         db  0x5f ; '_'
0000000000000976         db  0x6e ; 'n'
0000000000000977         db  0x61 ; 'a'
0000000000000978         db  0x6d ; 'm'
0000000000000979         db  0x65 ; 'e'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x5f ; '_'
000000000000097c         db  0x5f ; '_'
000000000000097d         db  0x63 ; 'c'
000000000000097e         db  0x74 ; 't'
000000000000097f         db  0x79 ; 'y'
0000000000000980         db  0x70 ; 'p'
0000000000000981         db  0x65 ; 'e'
0000000000000982         db  0x5f ; '_'
0000000000000983         db  0x67 ; 'g'
0000000000000984         db  0x65 ; 'e'
0000000000000985         db  0x74 ; 't'
0000000000000986         db  0x5f ; '_'
0000000000000987         db  0x6d ; 'm'
0000000000000988         db  0x62 ; 'b'
0000000000000989         db  0x5f ; '_'
000000000000098a         db  0x63 ; 'c'
000000000000098b         db  0x75 ; 'u'
000000000000098c         db  0x72 ; 'r'
000000000000098d         db  0x5f ; '_'
000000000000098e         db  0x6d ; 'm'
000000000000098f         db  0x61 ; 'a'
0000000000000990         db  0x78 ; 'x'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x63 ; 'c'
0000000000000993         db  0x61 ; 'a'
0000000000000994         db  0x6c ; 'l'
0000000000000995         db  0x6c ; 'l'
0000000000000996         db  0x6f ; 'o'
0000000000000997         db  0x63 ; 'c'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x73 ; 's'
000000000000099a         db  0x74 ; 't'
000000000000099b         db  0x72 ; 'r'
000000000000099c         db  0x6c ; 'l'
000000000000099d         db  0x65 ; 'e'
000000000000099e         db  0x6e ; 'n'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x6e ; 'n'
00000000000009a1         db  0x65 ; 'e'
00000000000009a2         db  0x77 ; 'w'
00000000000009a3         db  0x6c ; 'l'
00000000000009a4         db  0x6f ; 'o'
00000000000009a5         db  0x63 ; 'c'
00000000000009a6         db  0x61 ; 'a'
00000000000009a7         db  0x6c ; 'l'
00000000000009a8         db  0x65 ; 'e'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x6d ; 'm'
00000000000009ab         db  0x65 ; 'e'
00000000000009ac         db  0x6d ; 'm'
00000000000009ad         db  0x73 ; 's'
00000000000009ae         db  0x65 ; 'e'
00000000000009af         db  0x74 ; 't'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x5f ; '_'
00000000000009b2         db  0x5f ; '_'
00000000000009b3         db  0x65 ; 'e'
00000000000009b4         db  0x72 ; 'r'
00000000000009b5         db  0x72 ; 'r'
00000000000009b6         db  0x6e ; 'n'
00000000000009b7         db  0x6f ; 'o'
00000000000009b8         db  0x5f ; '_'
00000000000009b9         db  0x6c ; 'l'
00000000000009ba         db  0x6f ; 'o'
00000000000009bb         db  0x63 ; 'c'
00000000000009bc         db  0x61 ; 'a'
00000000000009bd         db  0x74 ; 't'
00000000000009be         db  0x69 ; 'i'
00000000000009bf         db  0x6f ; 'o'
00000000000009c0         db  0x6e ; 'n'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x6d ; 'm'
00000000000009c3         db  0x65 ; 'e'
00000000000009c4         db  0x6d ; 'm'
00000000000009c5         db  0x63 ; 'c'
00000000000009c6         db  0x6d ; 'm'
00000000000009c7         db  0x70 ; 'p'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x6d ; 'm'
00000000000009ca         db  0x65 ; 'e'
00000000000009cb         db  0x6d ; 'm'
00000000000009cc         db  0x70 ; 'p'
00000000000009cd         db  0x63 ; 'c'
00000000000009ce         db  0x70 ; 'p'
00000000000009cf         db  0x79 ; 'y'
00000000000009d0         db  0x00 ; '.'
00000000000009d1         db  0x5f ; '_'
00000000000009d2         db  0x5f ; '_'
00000000000009d3         db  0x66 ; 'f'
00000000000009d4         db  0x70 ; 'p'
00000000000009d5         db  0x72 ; 'r'
00000000000009d6         db  0x69 ; 'i'
00000000000009d7         db  0x6e ; 'n'
00000000000009d8         db  0x74 ; 't'
00000000000009d9         db  0x66 ; 'f'
00000000000009da         db  0x5f ; '_'
00000000000009db         db  0x63 ; 'c'
00000000000009dc         db  0x68 ; 'h'
00000000000009dd         db  0x6b ; 'k'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x73 ; 's'
00000000000009e0         db  0x74 ; 't'
00000000000009e1         db  0x64 ; 'd'
00000000000009e2         db  0x6f ; 'o'
00000000000009e3         db  0x75 ; 'u'
00000000000009e4         db  0x74 ; 't'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x6c ; 'l'
00000000000009e7         db  0x73 ; 's'
00000000000009e8         db  0x65 ; 'e'
00000000000009e9         db  0x65 ; 'e'
00000000000009ea         db  0x6b ; 'k'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x6d ; 'm'
00000000000009ed         db  0x65 ; 'e'
00000000000009ee         db  0x6d ; 'm'
00000000000009ef         db  0x63 ; 'c'
00000000000009f0         db  0x70 ; 'p'
00000000000009f1         db  0x79 ; 'y'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x66 ; 'f'
00000000000009f4         db  0x63 ; 'c'
00000000000009f5         db  0x6c ; 'l'
00000000000009f6         db  0x6f ; 'o'
00000000000009f7         db  0x73 ; 's'
00000000000009f8         db  0x65 ; 'e'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x5f ; '_'
00000000000009fb         db  0x5f ; '_'
00000000000009fc         db  0x73 ; 's'
00000000000009fd         db  0x74 ; 't'
00000000000009fe         db  0x72 ; 'r'
00000000000009ff         db  0x74 ; 't'
                     aOlinternal:
0000000000000a00         db         "ol_internal", 0
0000000000000a0c         db  0x6d ; 'm'
0000000000000a0d         db  0x61 ; 'a'
0000000000000a0e         db  0x6c ; 'l'
0000000000000a0f         db  0x6c ; 'l'
0000000000000a10         db  0x6f ; 'o'
0000000000000a11         db  0x63 ; 'c'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x6d ; 'm'
0000000000000a14         db  0x62 ; 'b'
0000000000000a15         db  0x73 ; 's'
0000000000000a16         db  0x69 ; 'i'
0000000000000a17         db  0x6e ; 'n'
0000000000000a18         db  0x69 ; 'i'
0000000000000a19         db  0x74 ; 't'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x6e ; 'n'
0000000000000a1c         db  0x6c ; 'l'
0000000000000a1d         db  0x5f ; '_'
0000000000000a1e         db  0x6c ; 'l'
0000000000000a1f         db  0x61 ; 'a'
0000000000000a20         db  0x6e ; 'n'
0000000000000a21         db  0x67 ; 'g'
0000000000000a22         db  0x69 ; 'i'
0000000000000a23         db  0x6e ; 'n'
0000000000000a24         db  0x66 ; 'f'
0000000000000a25         db  0x6f ; 'o'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x5f ; '_'
0000000000000a28         db  0x5f ; '_'
0000000000000a29         db  0x63 ; 'c'
0000000000000a2a         db  0x74 ; 't'
0000000000000a2b         db  0x79 ; 'y'
0000000000000a2c         db  0x70 ; 'p'
0000000000000a2d         db  0x65 ; 'e'
0000000000000a2e         db  0x5f ; '_'
0000000000000a2f         db  0x62 ; 'b'
0000000000000a30         db  0x5f ; '_'
0000000000000a31         db  0x6c ; 'l'
0000000000000a32         db  0x6f ; 'o'
0000000000000a33         db  0x63 ; 'c'
0000000000000a34         db  0x00 ; '.'
0000000000000a35         db  0x67 ; 'g'
0000000000000a36         db  0x65 ; 'e'
0000000000000a37         db  0x74 ; 't'
0000000000000a38         db  0x65 ; 'e'
0000000000000a39         db  0x6e ; 'n'
0000000000000a3a         db  0x76 ; 'v'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x5f ; '_'
0000000000000a3d         db  0x5f ; '_'
0000000000000a3e         db  0x66 ; 'f'
0000000000000a3f         db  0x72 ; 'r'
0000000000000a40         db  0x65 ; 'e'
0000000000000a41         db  0x61 ; 'a'
0000000000000a42         db  0x64 ; 'd'
0000000000000a43         db  0x69 ; 'i'
0000000000000a44         db  0x6e ; 'n'
0000000000000a45         db  0x67 ; 'g'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x73 ; 's'
0000000000000a48         db  0x74 ; 't'
0000000000000a49         db  0x64 ; 'd'
0000000000000a4a         db  0x65 ; 'e'
0000000000000a4b         db  0x72 ; 'r'
0000000000000a4c         db  0x72 ; 'r'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x5f ; '_'
0000000000000a4f         db  0x5f ; '_'
0000000000000a50         db  0x73 ; 's'
0000000000000a51         db  0x6e ; 'n'
0000000000000a52         db  0x70 ; 'p'
0000000000000a53         db  0x72 ; 'r'
0000000000000a54         db  0x69 ; 'i'
0000000000000a55         db  0x6e ; 'n'
0000000000000a56         db  0x74 ; 't'
0000000000000a57         db  0x66 ; 'f'
0000000000000a58         db  0x5f ; '_'
0000000000000a59         db  0x63 ; 'c'
0000000000000a5a         db  0x68 ; 'h'
0000000000000a5b         db  0x6b ; 'k'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x66 ; 'f'
0000000000000a5e         db  0x69 ; 'i'
0000000000000a5f         db  0x6c ; 'l'
0000000000000a60         db  0x65 ; 'e'
0000000000000a61         db  0x6e ; 'n'
0000000000000a62         db  0x6f ; 'o'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x66 ; 'f'
0000000000000a65         db  0x77 ; 'w'
0000000000000a66         db  0x72 ; 'r'
0000000000000a67         db  0x69 ; 'i'
0000000000000a68         db  0x74 ; 't'
0000000000000a69         db  0x65 ; 'e'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x5f ; '_'
0000000000000a6c         db  0x5f ; '_'
0000000000000a6d         db  0x66 ; 'f'
0000000000000a6e         db  0x70 ; 'p'
0000000000000a6f         db  0x65 ; 'e'
0000000000000a70         db  0x6e ; 'n'
0000000000000a71         db  0x64 ; 'd'
0000000000000a72         db  0x69 ; 'i'
0000000000000a73         db  0x6e ; 'n'
0000000000000a74         db  0x67 ; 'g'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x73 ; 's'
0000000000000a77         db  0x74 ; 't'
0000000000000a78         db  0x72 ; 'r'
0000000000000a79         db  0x63 ; 'c'
0000000000000a7a         db  0x68 ; 'h'
0000000000000a7b         db  0x72 ; 'r'
0000000000000a7c         db  0x00 ; '.'
0000000000000a7d         db  0x69 ; 'i'
0000000000000a7e         db  0x63 ; 'c'
0000000000000a7f         db  0x6f ; 'o'
0000000000000a80         db  0x6e ; 'n'
0000000000000a81         db  0x76 ; 'v'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x70 ; 'p'
0000000000000a84         db  0x72 ; 'r'
0000000000000a85         db  0x6f ; 'o'
0000000000000a86         db  0x67 ; 'g'
0000000000000a87         db  0x72 ; 'r'
0000000000000a88         db  0x61 ; 'a'
0000000000000a89         db  0x6d ; 'm'
0000000000000a8a         db  0x5f ; '_'
0000000000000a8b         db  0x69 ; 'i'
0000000000000a8c         db  0x6e ; 'n'
0000000000000a8d         db  0x76 ; 'v'
0000000000000a8e         db  0x6f ; 'o'
0000000000000a8f         db  0x63 ; 'c'
0000000000000a90         db  0x61 ; 'a'
0000000000000a91         db  0x74 ; 't'
0000000000000a92         db  0x69 ; 'i'
0000000000000a93         db  0x6f ; 'o'
0000000000000a94         db  0x6e ; 'n'
0000000000000a95         db  0x5f ; '_'
0000000000000a96         db  0x73 ; 's'
0000000000000a97         db  0x68 ; 'h'
0000000000000a98         db  0x6f ; 'o'
0000000000000a99         db  0x72 ; 'r'
0000000000000a9a         db  0x74 ; 't'
0000000000000a9b         db  0x5f ; '_'
0000000000000a9c         db  0x6e ; 'n'
0000000000000a9d         db  0x61 ; 'a'
0000000000000a9e         db  0x6d ; 'm'
0000000000000a9f         db  0x65 ; 'e'
0000000000000aa0         db  0x00 ; '.'
0000000000000aa1         db  0x69 ; 'i'
0000000000000aa2         db  0x63 ; 'c'
0000000000000aa3         db  0x6f ; 'o'
0000000000000aa4         db  0x6e ; 'n'
0000000000000aa5         db  0x76 ; 'v'
0000000000000aa6         db  0x5f ; '_'
0000000000000aa7         db  0x6f ; 'o'
0000000000000aa8         db  0x70 ; 'p'
0000000000000aa9         db  0x65 ; 'e'
0000000000000aaa         db  0x6e ; 'n'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x5f ; '_'
0000000000000aad         db  0x5f ; '_'
0000000000000aae         db  0x63 ; 'c'
0000000000000aaf         db  0x78 ; 'x'
0000000000000ab0         db  0x61 ; 'a'
0000000000000ab1         db  0x5f ; '_'
0000000000000ab2         db  0x66 ; 'f'
0000000000000ab3         db  0x69 ; 'i'
0000000000000ab4         db  0x6e ; 'n'
0000000000000ab5         db  0x61 ; 'a'
0000000000000ab6         db  0x6c ; 'l'
0000000000000ab7         db  0x69 ; 'i'
0000000000000ab8         db  0x7a ; 'z'
0000000000000ab9         db  0x65 ; 'e'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x62 ; 'b'
0000000000000abc         db  0x69 ; 'i'
0000000000000abd         db  0x6e ; 'n'
0000000000000abe         db  0x64 ; 'd'
0000000000000abf         db  0x74 ; 't'
0000000000000ac0         db  0x65 ; 'e'
0000000000000ac1         db  0x78 ; 'x'
0000000000000ac2         db  0x74 ; 't'
0000000000000ac3         db  0x64 ; 'd'
0000000000000ac4         db  0x6f ; 'o'
0000000000000ac5         db  0x6d ; 'm'
0000000000000ac6         db  0x61 ; 'a'
0000000000000ac7         db  0x69 ; 'i'
0000000000000ac8         db  0x6e ; 'n'
0000000000000ac9         db  0x00 ; '.'
0000000000000aca         db  0x73 ; 's'
0000000000000acb         db  0x74 ; 't'
0000000000000acc         db  0x72 ; 'r'
0000000000000acd         db  0x63 ; 'c'
0000000000000ace         db  0x6d ; 'm'
0000000000000acf         db  0x70 ; 'p'
0000000000000ad0         db  0x00 ; '.'
0000000000000ad1         db  0x5f ; '_'
0000000000000ad2         db  0x5f ; '_'
0000000000000ad3         db  0x6c ; 'l'
0000000000000ad4         db  0x69 ; 'i'
0000000000000ad5         db  0x62 ; 'b'
0000000000000ad6         db  0x63 ; 'c'
0000000000000ad7         db  0x5f ; '_'
0000000000000ad8         db  0x73 ; 's'
0000000000000ad9         db  0x74 ; 't'
0000000000000ada         db  0x61 ; 'a'
0000000000000adb         db  0x72 ; 'r'
0000000000000adc         db  0x74 ; 't'
0000000000000add         db  0x5f ; '_'
0000000000000ade         db  0x6d ; 'm'
0000000000000adf         db  0x61 ; 'a'
0000000000000ae0         db  0x69 ; 'i'
0000000000000ae1         db  0x6e ; 'n'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x66 ; 'f'
0000000000000ae4         db  0x65 ; 'e'
0000000000000ae5         db  0x72 ; 'r'
0000000000000ae6         db  0x72 ; 'r'
0000000000000ae7         db  0x6f ; 'o'
0000000000000ae8         db  0x72 ; 'r'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x66 ; 'f'
0000000000000aeb         db  0x73 ; 's'
0000000000000aec         db  0x65 ; 'e'
0000000000000aed         db  0x65 ; 'e'
0000000000000aee         db  0x6b ; 'k'
0000000000000aef         db  0x6f ; 'o'
0000000000000af0         db  0x00 ; '.'
0000000000000af1         db  0x5f ; '_'
0000000000000af2         db  0x5f ; '_'
0000000000000af3         db  0x6f ; 'o'
0000000000000af4         db  0x76 ; 'v'
0000000000000af5         db  0x65 ; 'e'
0000000000000af6         db  0x72 ; 'r'
0000000000000af7         db  0x66 ; 'f'
0000000000000af8         db  0x6c ; 'l'
0000000000000af9         db  0x6f ; 'o'
0000000000000afa         db  0x77 ; 'w'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x5f ; '_'
0000000000000afd         db  0x5f ; '_'
0000000000000afe         db  0x73 ; 's'
0000000000000aff         db  0x74 ; 't'
                     aRtoulinternal:
0000000000000b00         db         "rtoul_internal", 0
0000000000000b0f         db  0x66 ; 'f'
0000000000000b10         db  0x70 ; 'p'
0000000000000b11         db  0x75 ; 'u'
0000000000000b12         db  0x74 ; 't'
0000000000000b13         db  0x73 ; 's'
0000000000000b14         db  0x5f ; '_'
0000000000000b15         db  0x75 ; 'u'
0000000000000b16         db  0x6e ; 'n'
0000000000000b17         db  0x6c ; 'l'
0000000000000b18         db  0x6f ; 'o'
0000000000000b19         db  0x63 ; 'c'
0000000000000b1a         db  0x6b ; 'k'
0000000000000b1b         db  0x65 ; 'e'
0000000000000b1c         db  0x64 ; 'd'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x66 ; 'f'
0000000000000b1f         db  0x72 ; 'r'
0000000000000b20         db  0x65 ; 'e'
0000000000000b21         db  0x65 ; 'e'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x5f ; '_'
0000000000000b24         db  0x5f ; '_'
0000000000000b25         db  0x70 ; 'p'
0000000000000b26         db  0x72 ; 'r'
0000000000000b27         db  0x6f ; 'o'
0000000000000b28         db  0x67 ; 'g'
0000000000000b29         db  0x6e ; 'n'
0000000000000b2a         db  0x61 ; 'a'
0000000000000b2b         db  0x6d ; 'm'
0000000000000b2c         db  0x65 ; 'e'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x5f ; '_'
0000000000000b2f         db  0x5f ; '_'
0000000000000b30         db  0x70 ; 'p'
0000000000000b31         db  0x72 ; 'r'
0000000000000b32         db  0x6f ; 'o'
0000000000000b33         db  0x67 ; 'g'
0000000000000b34         db  0x6e ; 'n'
0000000000000b35         db  0x61 ; 'a'
0000000000000b36         db  0x6d ; 'm'
0000000000000b37         db  0x65 ; 'e'
0000000000000b38         db  0x5f ; '_'
0000000000000b39         db  0x66 ; 'f'
0000000000000b3a         db  0x75 ; 'u'
0000000000000b3b         db  0x6c ; 'l'
0000000000000b3c         db  0x6c ; 'l'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x5f ; '_'
0000000000000b3f         db  0x5f ; '_'
0000000000000b40         db  0x63 ; 'c'
0000000000000b41         db  0x78 ; 'x'
0000000000000b42         db  0x61 ; 'a'
                     aAtexit:
0000000000000b43         db         "_atexit", 0
0000000000000b4b         db  0x47 ; 'G'
0000000000000b4c         db  0x4c ; 'L'
0000000000000b4d         db  0x49 ; 'I'
0000000000000b4e         db  0x42 ; 'B'
0000000000000b4f         db  0x43 ; 'C'
0000000000000b50         db  0x5f ; '_'
0000000000000b51         db  0x32 ; '2'
0000000000000b52         db  0x2e ; '.'
0000000000000b53         db  0x31 ; '1'
0000000000000b54         db  0x34 ; '4'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x47 ; 'G'
0000000000000b57         db  0x4c ; 'L'
0000000000000b58         db  0x49 ; 'I'
0000000000000b59         db  0x42 ; 'B'
0000000000000b5a         db  0x43 ; 'C'
0000000000000b5b         db  0x5f ; '_'
0000000000000b5c         db  0x32 ; '2'
0000000000000b5d         db  0x2e ; '.'
0000000000000b5e         db  0x33 ; '3'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x47 ; 'G'
0000000000000b61         db  0x4c ; 'L'
0000000000000b62         db  0x49 ; 'I'
0000000000000b63         db  0x42 ; 'B'
0000000000000b64         db  0x43 ; 'C'
0000000000000b65         db  0x5f ; '_'
0000000000000b66         db  0x32 ; '2'
0000000000000b67         db  0x2e ; '.'
0000000000000b68         db  0x34 ; '4'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x47 ; 'G'
0000000000000b6b         db  0x4c ; 'L'
0000000000000b6c         db  0x49 ; 'I'
0000000000000b6d         db  0x42 ; 'B'
0000000000000b6e         db  0x43 ; 'C'
0000000000000b6f         db  0x5f ; '_'
0000000000000b70         db  0x32 ; '2'
0000000000000b71         db  0x2e ; '.'
0000000000000b72         db  0x33 ; '3'
0000000000000b73         db  0x2e ; '.'
0000000000000b74         db  0x34 ; '4'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x47 ; 'G'
0000000000000b77         db  0x4c ; 'L'
0000000000000b78         db  0x49 ; 'I'
0000000000000b79         db  0x42 ; 'B'
0000000000000b7a         db  0x43 ; 'C'
0000000000000b7b         db  0x5f ; '_'
0000000000000b7c         db  0x32 ; '2'
0000000000000b7d         db  0x2e ; '.'
0000000000000b7e         db  0x32 ; '2'
0000000000000b7f         db  0x2e ; '.'
0000000000000b80         db  0x35 ; '5'
0000000000000b81         db  0x00 ; '.'
0000000000000b82         db  0x5f ; '_'
0000000000000b83         db  0x49 ; 'I'
0000000000000b84         db  0x54 ; 'T'
0000000000000b85         db  0x4d ; 'M'
0000000000000b86         db  0x5f ; '_'
0000000000000b87         db  0x64 ; 'd'
0000000000000b88         db  0x65 ; 'e'
0000000000000b89         db  0x72 ; 'r'
0000000000000b8a         db  0x65 ; 'e'
0000000000000b8b         db  0x67 ; 'g'
0000000000000b8c         db  0x69 ; 'i'
0000000000000b8d         db  0x73 ; 's'
0000000000000b8e         db  0x74 ; 't'
0000000000000b8f         db  0x65 ; 'e'
0000000000000b90         db  0x72 ; 'r'
0000000000000b91         db  0x54 ; 'T'
0000000000000b92         db  0x4d ; 'M'
0000000000000b93         db  0x43 ; 'C'
0000000000000b94         db  0x6c ; 'l'
0000000000000b95         db  0x6f ; 'o'
0000000000000b96         db  0x6e ; 'n'
0000000000000b97         db  0x65 ; 'e'
0000000000000b98         db  0x54 ; 'T'
0000000000000b99         db  0x61 ; 'a'
0000000000000b9a         db  0x62 ; 'b'
0000000000000b9b         db  0x6c ; 'l'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x5f ; '_'
0000000000000b9f         db  0x5f ; '_'
0000000000000ba0         db  0x67 ; 'g'
0000000000000ba1         db  0x6d ; 'm'
0000000000000ba2         db  0x6f ; 'o'
0000000000000ba3         db  0x6e ; 'n'
0000000000000ba4         db  0x5f ; '_'
0000000000000ba5         db  0x73 ; 's'
0000000000000ba6         db  0x74 ; 't'
0000000000000ba7         db  0x61 ; 'a'
0000000000000ba8         db  0x72 ; 'r'
0000000000000ba9         db  0x74 ; 't'
0000000000000baa         db  0x5f ; '_'
0000000000000bab         db  0x5f ; '_'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x5f ; '_'
0000000000000bae         db  0x49 ; 'I'
0000000000000baf         db  0x54 ; 'T'
0000000000000bb0         db  0x4d ; 'M'
0000000000000bb1         db  0x5f ; '_'
0000000000000bb2         db  0x72 ; 'r'
0000000000000bb3         db  0x65 ; 'e'
0000000000000bb4         db  0x67 ; 'g'
0000000000000bb5         db  0x69 ; 'i'
0000000000000bb6         db  0x73 ; 's'
0000000000000bb7         db  0x74 ; 't'
0000000000000bb8         db  0x65 ; 'e'
0000000000000bb9         db  0x72 ; 'r'
0000000000000bba         db  0x54 ; 'T'
0000000000000bbb         db  0x4d ; 'M'
0000000000000bbc         db  0x43 ; 'C'
0000000000000bbd         db  0x6c ; 'l'
0000000000000bbe         db  0x6f ; 'o'
0000000000000bbf         db  0x6e ; 'n'
0000000000000bc0         db  0x65 ; 'e'
0000000000000bc1         db  0x54 ; 'T'
0000000000000bc2         db  0x61 ; 'a'
0000000000000bc3         db  0x62 ; 'b'
0000000000000bc4         db  0x6c ; 'l'
0000000000000bc5         db  0x65 ; 'e'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xbc8; 0xc48[ (128 bytes)
        ; File offset : [3016; 3144[ (128 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000bc8         db  0x00 ; '.'
0000000000000bc9         db  0x00 ; '.'
0000000000000bca         db  0x02 ; '.'
0000000000000bcb         db  0x00 ; '.'
0000000000000bcc         db  0x03 ; '.'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x02 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x02 ; '.'
0000000000000bd1         db  0x00 ; '.'
0000000000000bd2         db  0x02 ; '.'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x02 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x02 ; '.'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x02 ; '.'
0000000000000bdb         db  0x00 ; '.'
0000000000000bdc         db  0x02 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x02 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0x02 ; '.'
0000000000000be1         db  0x00 ; '.'
0000000000000be2         db  0x02 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x02 ; '.'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x02 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0x02 ; '.'
0000000000000be9         db  0x00 ; '.'
0000000000000bea         db  0x02 ; '.'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x02 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x04 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x02 ; '.'
0000000000000bf1         db  0x00 ; '.'
0000000000000bf2         db  0x02 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x05 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x02 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0x02 ; '.'
0000000000000bf9         db  0x00 ; '.'
0000000000000bfa         db  0x02 ; '.'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x02 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x02 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x02 ; '.'
0000000000000c01         db  0x00 ; '.'
0000000000000c02         db  0x02 ; '.'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x02 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x02 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x02 ; '.'
0000000000000c09         db  0x00 ; '.'
0000000000000c0a         db  0x00 ; '.'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x06 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x02 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x05 ; '.'
0000000000000c11         db  0x00 ; '.'
0000000000000c12         db  0x02 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x02 ; '.'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x02 ; '.'
0000000000000c17         db  0x00 ; '.'
0000000000000c18         db  0x02 ; '.'
0000000000000c19         db  0x00 ; '.'
0000000000000c1a         db  0x02 ; '.'
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x02 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x03 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x02 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x02 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x02 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x02 ; '.'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0x02 ; '.'
0000000000000c29         db  0x00 ; '.'
0000000000000c2a         db  0x02 ; '.'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x02 ; '.'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x03 ; '.'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0x00 ; '.'
0000000000000c31         db  0x00 ; '.'
0000000000000c32         db  0x02 ; '.'
0000000000000c33         db  0x00 ; '.'
0000000000000c34         db  0x02 ; '.'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x02 ; '.'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x05 ; '.'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x02 ; '.'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x02 ; '.'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x02 ; '.'
0000000000000c3f         db  0x00 ; '.'
0000000000000c40         db  0x02 ; '.'
0000000000000c41         db  0x00 ; '.'
0000000000000c42         db  0x02 ; '.'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x02 ; '.'
0000000000000c45         db  0x00 ; '.'
0000000000000c46         db  0x02 ; '.'
0000000000000c47         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xc48; 0xca8[ (96 bytes)
        ; File offset : [3144; 3240[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000c48         db  0x01 ; '.'
0000000000000c49         db  0x00 ; '.'
0000000000000c4a         db  0x05 ; '.'
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x01 ; '.'
0000000000000c4d         db  0x00 ; '.'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x00 ; '.'
0000000000000c50         db  0x10 ; '.'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x00 ; '.'
0000000000000c53         db  0x00 ; '.'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x00 ; '.'
0000000000000c58         db  0x94 ; '.'
0000000000000c59         db  0x91 ; '.'
0000000000000c5a         db  0x96 ; '.'
0000000000000c5b         db  0x06 ; '.'
0000000000000c5c         db  0x00 ; '.'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x06 ; '.'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0x73 ; 's'
0000000000000c61         db  0x02 ; '.'
0000000000000c62         db  0x00 ; '.'
0000000000000c63         db  0x00 ; '.'
0000000000000c64         db  0x10 ; '.'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x00 ; '.'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x13 ; '.'
0000000000000c69         db  0x69 ; 'i'
0000000000000c6a         db  0x69 ; 'i'
0000000000000c6b         db  0x0d ; '.'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x05 ; '.'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0x7e ; '~'
0000000000000c71         db  0x02 ; '.'
0000000000000c72         db  0x00 ; '.'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x10 ; '.'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x14 ; '.'
0000000000000c79         db  0x69 ; 'i'
0000000000000c7a         db  0x69 ; 'i'
0000000000000c7b         db  0x0d ; '.'
0000000000000c7c         db  0x00 ; '.'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x04 ; '.'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x88 ; '.'
0000000000000c81         db  0x02 ; '.'
0000000000000c82         db  0x00 ; '.'
0000000000000c83         db  0x00 ; '.'
0000000000000c84         db  0x10 ; '.'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x00 ; '.'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0x74 ; 't'
0000000000000c89         db  0x19 ; '.'
0000000000000c8a         db  0x69 ; 'i'
0000000000000c8b         db  0x09 ; '.'
0000000000000c8c         db  0x00 ; '.'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x03 ; '.'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0x92 ; '.'
0000000000000c91         db  0x02 ; '.'
0000000000000c92         db  0x00 ; '.'
0000000000000c93         db  0x00 ; '.'
0000000000000c94         db  0x10 ; '.'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x75 ; 'u'
0000000000000c99         db  0x1a ; '.'
0000000000000c9a         db  0x69 ; 'i'
0000000000000c9b         db  0x09 ; '.'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x02 ; '.'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x9e ; '.'
0000000000000ca1         db  0x02 ; '.'
0000000000000ca2         db  0x00 ; '.'
0000000000000ca3         db  0x00 ; '.'
0000000000000ca4         db  0x00 ; '.'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x00 ; '.'
0000000000000ca7         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xca8; 0xf00[ (600 bytes)
        ; File offset : [3240; 3840[ (600 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000ca8         db  0xb0 ; '.'
0000000000000ca9         db  0xbb ; '.'
0000000000000caa         db  0x20 ; ' '
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x00 ; '.'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x00 ; '.'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x08 ; '.'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x00 ; '.'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x00 ; '.'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0x10 ; '.'
0000000000000cb9         db  0x26 ; '&'
0000000000000cba         db  0x00 ; '.'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x00 ; '.'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x00 ; '.'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0xb8 ; '.'
0000000000000cc1         db  0xbb ; '.'
0000000000000cc2         db  0x20 ; ' '
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x08 ; '.'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x00 ; '.'
0000000000000ccb         db  0x00 ; '.'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x00 ; '.'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0xd0 ; '.'
0000000000000cd1         db  0x25 ; '%'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x00 ; '.'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x00 ; '.'
0000000000000cd7         db  0x00 ; '.'
0000000000000cd8         db  0xc0 ; '.'
0000000000000cd9         db  0xbb ; '.'
0000000000000cda         db  0x20 ; ' '
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x00 ; '.'
0000000000000cdd         db  0x00 ; '.'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x00 ; '.'
0000000000000ce0         db  0x08 ; '.'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x00 ; '.'
0000000000000ce4         db  0x00 ; '.'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0x39 ; '9'
0000000000000ce9         db  0x8f ; '.'
0000000000000cea         db  0x00 ; '.'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x00 ; '.'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0xc8 ; '.'
0000000000000cf1         db  0xbb ; '.'
0000000000000cf2         db  0x20 ; ' '
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x00 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x08 ; '.'
0000000000000cf9         db  0x00 ; '.'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x00 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x00 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0x41 ; 'A'
0000000000000d01         db  0x8f ; '.'
0000000000000d02         db  0x00 ; '.'
0000000000000d03         db  0x00 ; '.'
0000000000000d04         db  0x00 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x00 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0xd0 ; '.'
0000000000000d09         db  0xbb ; '.'
0000000000000d0a         db  0x20 ; ' '
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x00 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x00 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x08 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x47 ; 'G'
0000000000000d19         db  0x8f ; '.'
0000000000000d1a         db  0x00 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x00 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0xd8 ; '.'
0000000000000d21         db  0xbb ; '.'
0000000000000d22         db  0x20 ; ' '
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x00 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x08 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x00 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x54 ; 'T'
0000000000000d31         db  0x8f ; '.'
0000000000000d32         db  0x00 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x00 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x00 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0xe0 ; '.'
0000000000000d39         db  0xbb ; '.'
0000000000000d3a         db  0x20 ; ' '
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x08 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x00 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x61 ; 'a'
0000000000000d49         db  0x8f ; '.'
0000000000000d4a         db  0x00 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x00 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0xe8 ; '.'
0000000000000d51         db  0xbb ; '.'
0000000000000d52         db  0x20 ; ' '
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x00 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x08 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x00 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x75 ; 'u'
0000000000000d61         db  0x8f ; '.'
0000000000000d62         db  0x00 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x00 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x00 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0xf0 ; '.'
0000000000000d69         db  0xbb ; '.'
0000000000000d6a         db  0x20 ; ' '
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x08 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x00 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x00 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x77 ; 'w'
0000000000000d79         db  0x8f ; '.'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x00 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0xf8 ; '.'
0000000000000d81         db  0xbb ; '.'
0000000000000d82         db  0x20 ; ' '
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x08 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x00 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x5a ; 'Z'
0000000000000d91         db  0x8f ; '.'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x00 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x00 ; '.'
0000000000000d99         db  0xbc ; '.'
0000000000000d9a         db  0x20 ; ' '
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x08 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x00 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x6e ; 'n'
0000000000000da9         db  0x8c ; '.'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x00 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x08 ; '.'
0000000000000db1         db  0xbc ; '.'
0000000000000db2         db  0x20 ; ' '
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x08 ; '.'
0000000000000db9         db  0x00 ; '.'
0000000000000dba         db  0x00 ; '.'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x7f ; '.'
0000000000000dc1         db  0x8f ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x00 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x08 ; '.'
0000000000000dc9         db  0xc0 ; '.'
0000000000000dca         db  0x20 ; ' '
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x08 ; '.'
0000000000000dd1         db  0x00 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x00 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x08 ; '.'
0000000000000dd9         db  0xc0 ; '.'
0000000000000dda         db  0x20 ; ' '
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0x10 ; '.'
0000000000000de1         db  0xc0 ; '.'
0000000000000de2         db  0x20 ; ' '
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x08 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x00 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0xc8 ; '.'
0000000000000df1         db  0x8e ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x00 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x60 ; '`'
0000000000000df9         db  0xc0 ; '.'
0000000000000dfa         db  0x20 ; ' '
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x00 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x08 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x00 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x70 ; 'p'
0000000000000e09         db  0xc0 ; '.'
0000000000000e0a         db  0x20 ; ' '
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x78 ; 'x'
0000000000000e11         db  0xc0 ; '.'
0000000000000e12         db  0x20 ; ' '
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x08 ; '.'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x00 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0xe0 ; '.'
0000000000000e21         db  0xc0 ; '.'
0000000000000e22         db  0x20 ; ' '
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0xc0 ; '.'
0000000000000e29         db  0xbf ; '.'
0000000000000e2a         db  0x20 ; ' '
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x06 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x00 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x07 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0xc8 ; '.'
0000000000000e41         db  0xbf ; '.'
0000000000000e42         db  0x20 ; ' '
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x06 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x00 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x1c ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x00 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0xd0 ; '.'
0000000000000e59         db  0xbf ; '.'
0000000000000e5a         db  0x20 ; ' '
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x06 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x00 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x21 ; '!'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x00 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0xd8 ; '.'
0000000000000e71         db  0xbf ; '.'
0000000000000e72         db  0x20 ; ' '
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x06 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x34 ; '4'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x00 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0xe0 ; '.'
0000000000000e89         db  0xbf ; '.'
0000000000000e8a         db  0x20 ; ' '
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x06 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x37 ; '7'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x00 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x80 ; '.'
0000000000000ea1         db  0xc0 ; '.'
0000000000000ea2         db  0x20 ; ' '
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x05 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x3b ; ';'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x00 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x88 ; '.'
0000000000000eb9         db  0xc0 ; '.'
0000000000000eba         db  0x20 ; ' '
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x05 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x00 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x3a ; ':'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x00 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x90 ; '.'
0000000000000ed1         db  0xc0 ; '.'
0000000000000ed2         db  0x20 ; ' '
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x05 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x3d ; '='
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x00 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0xa0 ; '.'
0000000000000ee9         db  0xc0 ; '.'
0000000000000eea         db  0x20 ; ' '
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x05 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x3f ; '?'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x00 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0xf00; 0x13e0[ (1248 bytes)
        ; File offset : [3840; 5088[ (1248 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000f00         db  0x20 ; ' '
0000000000000f01         db  0xbe ; '.'
0000000000000f02         db  0x20 ; ' '
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x07 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x00 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x01 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x00 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x28 ; '('
0000000000000f19         db  0xbe ; '.'
0000000000000f1a         db  0x20 ; ' '
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x07 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x02 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x00 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x30 ; '0'
0000000000000f31         db  0xbe ; '.'
0000000000000f32         db  0x20 ; ' '
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x07 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x03 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x00 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x38 ; '8'
0000000000000f49         db  0xbe ; '.'
0000000000000f4a         db  0x20 ; ' '
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x07 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x00 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x04 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x00 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x40 ; '@'
0000000000000f61         db  0xbe ; '.'
0000000000000f62         db  0x20 ; ' '
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x07 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x05 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x00 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x48 ; 'H'
0000000000000f79         db  0xbe ; '.'
0000000000000f7a         db  0x20 ; ' '
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x07 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x06 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x00 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x50 ; 'P'
0000000000000f91         db  0xbe ; '.'
0000000000000f92         db  0x20 ; ' '
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x07 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x08 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x00 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x58 ; 'X'
0000000000000fa9         db  0xbe ; '.'
0000000000000faa         db  0x20 ; ' '
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x07 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x09 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x00 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x60 ; '`'
0000000000000fc1         db  0xbe ; '.'
0000000000000fc2         db  0x20 ; ' '
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x07 ; '.'
0000000000000fc9         db  0x00 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x0a ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x00 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x68 ; 'h'
0000000000000fd9         db  0xbe ; '.'
0000000000000fda         db  0x20 ; ' '
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x07 ; '.'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x0b ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x00 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x70 ; 'p'
0000000000000ff1         db  0xbe ; '.'
0000000000000ff2         db  0x20 ; ' '
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x07 ; '.'
0000000000000ff9         db  0x00 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x0c ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x00 ; '.'
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x78 ; 'x'
0000000000001009         db  0xbe ; '.'
000000000000100a         db  0x20 ; ' '
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x07 ; '.'
0000000000001011         db  0x00 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x0d ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x00 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x80 ; '.'
0000000000001021         db  0xbe ; '.'
0000000000001022         db  0x20 ; ' '
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x07 ; '.'
0000000000001029         db  0x00 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x0e ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x00 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x88 ; '.'
0000000000001039         db  0xbe ; '.'
000000000000103a         db  0x20 ; ' '
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x07 ; '.'
0000000000001041         db  0x00 ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x0f ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x00 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x90 ; '.'
0000000000001051         db  0xbe ; '.'
0000000000001052         db  0x20 ; ' '
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x07 ; '.'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x10 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x00 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x98 ; '.'
0000000000001069         db  0xbe ; '.'
000000000000106a         db  0x20 ; ' '
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x07 ; '.'
0000000000001071         db  0x00 ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x11 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x00 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xa0 ; '.'
0000000000001081         db  0xbe ; '.'
0000000000001082         db  0x20 ; ' '
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x07 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x12 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x00 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0xa8 ; '.'
0000000000001099         db  0xbe ; '.'
000000000000109a         db  0x20 ; ' '
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x07 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x00 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x13 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x00 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0xb0 ; '.'
00000000000010b1         db  0xbe ; '.'
00000000000010b2         db  0x20 ; ' '
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x07 ; '.'
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x14 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x00 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0xb8 ; '.'
00000000000010c9         db  0xbe ; '.'
00000000000010ca         db  0x20 ; ' '
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x07 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x15 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x00 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0xc0 ; '.'
00000000000010e1         db  0xbe ; '.'
00000000000010e2         db  0x20 ; ' '
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x07 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x00 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x16 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x00 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0xc8 ; '.'
00000000000010f9         db  0xbe ; '.'
00000000000010fa         db  0x20 ; ' '
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x07 ; '.'
0000000000001101         db  0x00 ; '.'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x17 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x00 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0xd0 ; '.'
0000000000001111         db  0xbe ; '.'
0000000000001112         db  0x20 ; ' '
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x07 ; '.'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x18 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x00 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0xd8 ; '.'
0000000000001129         db  0xbe ; '.'
000000000000112a         db  0x20 ; ' '
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x07 ; '.'
0000000000001131         db  0x00 ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x19 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x00 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0xe0 ; '.'
0000000000001141         db  0xbe ; '.'
0000000000001142         db  0x20 ; ' '
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x07 ; '.'
0000000000001149         db  0x00 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x1a ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x00 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0xe8 ; '.'
0000000000001159         db  0xbe ; '.'
000000000000115a         db  0x20 ; ' '
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x07 ; '.'
0000000000001161         db  0x00 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x1b ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x00 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0xf0 ; '.'
0000000000001171         db  0xbe ; '.'
0000000000001172         db  0x20 ; ' '
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x07 ; '.'
0000000000001179         db  0x00 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x1d ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x00 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0xf8 ; '.'
0000000000001189         db  0xbe ; '.'
000000000000118a         db  0x20 ; ' '
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x07 ; '.'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x1e ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x00 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x00 ; '.'
00000000000011a1         db  0xbf ; '.'
00000000000011a2         db  0x20 ; ' '
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x07 ; '.'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x00 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x1f ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x00 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x08 ; '.'
00000000000011b9         db  0xbf ; '.'
00000000000011ba         db  0x20 ; ' '
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x07 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x20 ; ' '
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x00 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x10 ; '.'
00000000000011d1         db  0xbf ; '.'
00000000000011d2         db  0x20 ; ' '
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x07 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x22 ; '"'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x00 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x18 ; '.'
00000000000011e9         db  0xbf ; '.'
00000000000011ea         db  0x20 ; ' '
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x07 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x23 ; '#'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x00 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x20 ; ' '
0000000000001201         db  0xbf ; '.'
0000000000001202         db  0x20 ; ' '
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x07 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x24 ; '$'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x00 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x28 ; '('
0000000000001219         db  0xbf ; '.'
000000000000121a         db  0x20 ; ' '
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x07 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x25 ; '%'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x00 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x30 ; '0'
0000000000001231         db  0xbf ; '.'
0000000000001232         db  0x20 ; ' '
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x07 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x26 ; '&'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x00 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x38 ; '8'
0000000000001249         db  0xbf ; '.'
000000000000124a         db  0x20 ; ' '
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x07 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x27 ; '''
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x00 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x40 ; '@'
0000000000001261         db  0xbf ; '.'
0000000000001262         db  0x20 ; ' '
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x07 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x28 ; '('
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x00 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x48 ; 'H'
0000000000001279         db  0xbf ; '.'
000000000000127a         db  0x20 ; ' '
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x07 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x29 ; ')'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x00 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x50 ; 'P'
0000000000001291         db  0xbf ; '.'
0000000000001292         db  0x20 ; ' '
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x07 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x2a ; '*'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x00 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x58 ; 'X'
00000000000012a9         db  0xbf ; '.'
00000000000012aa         db  0x20 ; ' '
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x07 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x2b ; '+'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x00 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x60 ; '`'
00000000000012c1         db  0xbf ; '.'
00000000000012c2         db  0x20 ; ' '
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x07 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x2c ; ','
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x00 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x68 ; 'h'
00000000000012d9         db  0xbf ; '.'
00000000000012da         db  0x20 ; ' '
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x07 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x2d ; '-'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x00 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x70 ; 'p'
00000000000012f1         db  0xbf ; '.'
00000000000012f2         db  0x20 ; ' '
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x07 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x2e ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x00 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x78 ; 'x'
0000000000001309         db  0xbf ; '.'
000000000000130a         db  0x20 ; ' '
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x07 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x2f ; '/'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x00 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x80 ; '.'
0000000000001321         db  0xbf ; '.'
0000000000001322         db  0x20 ; ' '
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x07 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x30 ; '0'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x00 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x88 ; '.'
0000000000001339         db  0xbf ; '.'
000000000000133a         db  0x20 ; ' '
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x07 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x31 ; '1'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x00 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x90 ; '.'
0000000000001351         db  0xbf ; '.'
0000000000001352         db  0x20 ; ' '
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x07 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x32 ; '2'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x00 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x98 ; '.'
0000000000001369         db  0xbf ; '.'
000000000000136a         db  0x20 ; ' '
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x07 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x33 ; '3'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x00 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0xa0 ; '.'
0000000000001381         db  0xbf ; '.'
0000000000001382         db  0x20 ; ' '
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x07 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x35 ; '5'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x00 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0xa8 ; '.'
0000000000001399         db  0xbf ; '.'
000000000000139a         db  0x20 ; ' '
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x07 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x36 ; '6'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x00 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0xb0 ; '.'
00000000000013b1         db  0xbf ; '.'
00000000000013b2         db  0x20 ; ' '
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x07 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x38 ; '8'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x00 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0xb8 ; '.'
00000000000013c9         db  0xbf ; '.'
00000000000013ca         db  0x20 ; ' '
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x07 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x39 ; '9'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x00 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x13e0; 0x13f7[ (23 bytes)
        ; File offset : [5088; 5111[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
00000000000013e0         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
00000000000013e4         mov        rax, qword [qword_20bfd0]                   ; qword_20bfd0
00000000000013eb         test       rax, rax
00000000000013ee         je         loc_13f2

00000000000013f0         call       rax

                     loc_13f2:
00000000000013f2         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000013f6         ret
                        ; endp
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1400; 0x1750[ (848 bytes)
        ; File offset : [5120; 5968[ (848 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1400:
0000000000001400         push       qword [qword_20be10]                        ; Begin of unwind block (FDE at 0x9dac), qword_20be10, CODE XREF=sub_1416+5
0000000000001406         jmp        qword [qword_20be10+8]                      ; 0x20be18
                        ; endp
000000000000140c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000001410         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+126
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1416:
0000000000001416         push       0x0
000000000000141b         jmp        loc_1400


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001420         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1426:
0000000000001426         push       0x1
000000000000142b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001430         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+2075, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40, rpl_vfprintf+120, rpl_vfprintf+200, vasnprintf+402, vasnprintf+430, vasnprintf+458
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1436:
0000000000001436         push       0x2
000000000000143b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001440         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_3b00+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, c_strtold+177, vasnprintf+3878
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1446:
0000000000001446         push       0x3
000000000000144b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001450         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+2760, main+2853, verify_numeric+10, vstrtoimax+45, cl_strtold+101, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, xvprintf+70
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1456:
0000000000001456         push       0x4
000000000000145b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001460         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+708, usage+901
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1466:
0000000000001466         push       0x5
000000000000146b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001470         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1476:
0000000000001476         push       0x6
000000000000147b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001480         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1486:
0000000000001486         push       0x7
000000000000148b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iconv:        // iconv
0000000000001490         jmp        qword [iconv@GOT]                           ; iconv, iconv@GOT, CODE XREF=unicode_to_mb+403, unicode_to_mb+486
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1496:
0000000000001496         push       0x8
000000000000149b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ferror:        // ferror
00000000000014a0         jmp        qword [ferror@GOT]                          ; ferror, ferror@GOT, CODE XREF=xvprintf+39, xvfprintf+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14a6:
00000000000014a6         push       0x9
00000000000014ab         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
00000000000014b0         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+92
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14b6:
00000000000014b6         push       0xa
00000000000014bb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtol_internal:        // __strtol_internal
00000000000014c0         jmp        qword [__strtol_internal@GOT]               ; __strtol_internal, __strtol_internal@GOT, CODE XREF=vstrtoimax+66
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14c6:
00000000000014c6         push       0xb
00000000000014cb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
00000000000014d0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14d6:
00000000000014d6         push       0xc
00000000000014db         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
00000000000014e0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+80
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14e6:
00000000000014e6         push       0xd
00000000000014eb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
00000000000014f0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+449, main+1867, main+2238, main+2385, main+3325, main+3398, main+3452, print_esc+1110, print_esc+1270, verify_numeric+57, vstrtoimax+141
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14f6:
00000000000014f6         push       0xe
00000000000014fb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001500         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1506:
0000000000001506         push       0xf
000000000000150b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001510         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=quotearg_buffer_restyled+343, sub_3b00+411, sub_3b00+1742, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1516:
0000000000001516         push       0x10
000000000000151b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001520         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+3477, vstrtoimax+166, cl_strtold+162, sub_3b00+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, unicode_to_mb+519, version_etc_va+101
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1526:
0000000000001526         push       0x11
000000000000152b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001530         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1536:
0000000000001536         push       0x12
000000000000153b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001540         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=print_esc+389
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1546:
0000000000001546         push       0x13
000000000000154b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_newlocale:        // newlocale
0000000000001550         jmp        qword [newlocale@GOT]                       ; newlocale, newlocale@GOT, CODE XREF=c_strtold+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1556:
0000000000001556         push       0x14
000000000000155b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001560         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=main+1737, main+1750, main+1771, print_esc+1028, print_esc+1043, print_esc+1058, print_esc+1071, print_esc+1086, print_esc+1137, print_esc+1152, print_esc+1167
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1566:
0000000000001566         push       0x15
000000000000156b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001570         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1576:
0000000000001576         push       0x16
000000000000157b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001580         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1586:
0000000000001586         push       0x17
000000000000158b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001590         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=main+2788
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1596:
0000000000001596         push       0x18
000000000000159b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
00000000000015a0         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15a6:
00000000000015a6         push       0x19
00000000000015ab         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
00000000000015b0         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15b6:
00000000000015b6         push       0x1a
00000000000015bb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
00000000000015c0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=main+614, usage+160, usage+197, usage+234, usage+271, usage+308, usage+345, usage+389, usage+1016, version_etc_arn+135, emit_bug_reporting_address+123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15c6:
00000000000015c6         push       0x1b
00000000000015cb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
00000000000015d0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15d6:
00000000000015d6         push       0x1c
00000000000015db         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
00000000000015e0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+170, main+1795, main+1818, main+1840
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15e6:
00000000000015e6         push       0x1d
00000000000015eb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
00000000000015f0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, vasnprintf+686, vasnprintf+912, vasnprintf+973, vasnprintf+2590, vasnprintf+3085, vasnprintf+3403, vasnprintf+3547, vasnprintf+4227, printf_parse+2492, printf_parse+2595
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15f6:
00000000000015f6         push       0x1e
00000000000015fb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001600         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1606:
0000000000001606         push       0x1f
000000000000160b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_uselocale:        // uselocale
0000000000001610         jmp        qword [uselocale@GOT]                       ; uselocale, uselocale@GOT, CODE XREF=c_strtold+38, c_strtold+78
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1616:
0000000000001616         push       0x20
000000000000161b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001620         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497, vasnprintf+4191, printf_parse+2420, printf_parse+2528, printf_parse+2852, printf_parse+3169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1626:
0000000000001626         push       0x21
000000000000162b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001630         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1636:
0000000000001636         push       0x22
000000000000163b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001640         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1646:
0000000000001646         push       0x23
000000000000164b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001650         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1656:
0000000000001656         push       0x24
000000000000165b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001660         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1666:
0000000000001666         push       0x25
000000000000166b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001670         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+61, usage+683, usage+876, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1676:
0000000000001676         push       0x26
000000000000167b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001680         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+123, usage+430, usage+671, usage+764, usage+825, usage+864, usage+967, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1686:
0000000000001686         push       0x27
000000000000168b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000001690         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=main+1661, main+1682
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1696:
0000000000001696         push       0x28
000000000000169b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtold:        // strtold
00000000000016a0         jmp        qword [strtold@GOT]                         ; strtold, strtold@GOT, CODE XREF=cl_strtold+37, c_strtold+57
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16a6:
00000000000016a6         push       0x29
00000000000016ab         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
00000000000016b0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+466, main+1881, main+2261, main+2408, main+3351, main+3418, main+3472, print_esc+1127, print_esc+1297, verify_numeric+74, verify_numeric+123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16b6:
00000000000016b6         push       0x2a
00000000000016bb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
00000000000016c0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16c6:
00000000000016c6         push       0x2b
00000000000016cb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
00000000000016d0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16d6:
00000000000016d6         push       0x2c
00000000000016db         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
00000000000016e0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=print_esc+888, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16e6:
00000000000016e6         push       0x2d
00000000000016eb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
00000000000016f0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149, fwrite_success_callback+15, rpl_vfprintf+102
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_16f6:
00000000000016f6         push       0x2e
00000000000016fb         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001700         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, fallback_failure_callback+31, fallback_failure_callback+62, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1706:
0000000000001706         push       0x2f
000000000000170b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001710         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3b00+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1716:
0000000000001716         push       0x30
000000000000171b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001720         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3b00+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1726:
0000000000001726         push       0x31
000000000000172b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001730         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=print_esc+249, print_esc+479, sub_38a0+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1736:
0000000000001736         push       0x32
000000000000173b         jmp        0x1400
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iconv_open:        // iconv_open
0000000000001740         jmp        qword [iconv_open@GOT]                      ; iconv_open, iconv_open@GOT, CODE XREF=unicode_to_mb+310, unicode_to_mb+450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1746:
0000000000001746         push       0x33
000000000000174b         jmp        0x1400
                        ; endp


        ; Section .plt.got
        ; Range: [0x1750; 0x1758[ (8 bytes)
        ; File offset : [5968; 5976[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20bfe0:        // qword_20bfe0
0000000000001750         jmp        qword [qword_20bfe0]                        ; qword, End of unwind block (FDE at 0x9dac), Begin of unwind block (FDE at 0x9dd4), qword_20bfe0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001756         align      8
0000000000001758         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x9dd4)
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1760; 0x839e[ (27710 bytes)
        ; File offset : [5984; 33694[ (27710 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D0: int8_t, -208
        ;    var_D3: int8_t, -211
        ;    var_D5: int8_t, -213
        ;    var_D9: int8_t, -217
        ;    var_DF: int8_t, -223
        ;    var_E1: int8_t, -225
        ;    var_E3: int8_t, -227
        ;    var_E4: int8_t, -228
        ;    var_E5: int32_t, -229
        ;    var_E7: int8_t, -231
        ;    var_F0: int8_t, -240
        ;    var_101: int8_t, -257
        ;    var_103: int16_t, -259
        ;    var_107: int8_t, -263
        ;    var_148: int8_t, -328
        ;    var_150: int64_t, -336
        ;    var_160: int64_t, -352
        ;    var_161: int8_t, -353
        ;    var_162: int8_t, -354
        ;    var_168: int32_t, -360
        ;    var_16C: int32_t, -364
        ;    var_170: int32_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_198: int64_t, -408
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1C8: -456


                     main:
0000000000001760         push       r15                                         ; Begin of unwind block (FDE at 0x9ebc), DATA XREF=_start+29
0000000000001762         push       r14
0000000000001764         push       r13
0000000000001766         push       r12
0000000000001768         push       rbp
0000000000001769         push       rbx
000000000000176a         mov        ebp, edi
000000000000176c         mov        rbx, rsi
000000000000176f         sub        rsp, 0x188
0000000000001776         mov        rdi, qword [rsi]
0000000000001779         mov        rax, qword [fs:0x28]
0000000000001782         mov        qword [rsp+0x1b8+var_40], rax
000000000000178a         xor        eax, eax
000000000000178c         call       set_program_name                            ; set_program_name
0000000000001791         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x9512
0000000000001798         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
000000000000179d         call       j_setlocale                                 ; setlocale
00000000000017a2         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
00000000000017a9         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
00000000000017b0         call       j_bindtextdomain                            ; bindtextdomain
00000000000017b5         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
00000000000017bc         call       j_textdomain                                ; textdomain
00000000000017c1         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
00000000000017c8         call       atexit                                      ; atexit
00000000000017cd         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
00000000000017d4         mov        dword [exit_status], 0x0                    ; exit_status
00000000000017de         call       j_getenv                                    ; getenv
00000000000017e3         test       rax, rax
00000000000017e6         setne      byte [posixly_correct]                      ; posixly_correct
00000000000017ed         cmp        ebp, 0x2
00000000000017f0         je         loc_1e55

00000000000017f6         cmp        ebp, 0x1
00000000000017f9         jle        loc_1e9d

00000000000017ff         mov        rdi, qword [rbx+8]                          ; argument "__s1" for method j_strcmp
0000000000001803         lea        rsi, qword [aDavidMackenzie+16]             ; argument "__s2" for method j_strcmp, 0x8ca6
000000000000180a         call       j_strcmp                                    ; strcmp
000000000000180f         test       eax, eax
0000000000001811         jne        loc_181a

0000000000001813         sub        ebp, 0x1
0000000000001816         add        rbx, 0x8

                     loc_181a:
000000000000181a         mov        rax, qword [rbx+8]                          ; CODE XREF=main+177, main+1847
000000000000181e         movabs     r13, 0x410150000001
0000000000001828         mov        qword [rsp+0x1b8+var_160], rax
000000000000182d         lea        eax, dword [rbp-2]
0000000000001830         mov        dword [rsp+0x1b8+var_170], eax
0000000000001834         lea        rax, qword [rbx+0x10]
0000000000001838         mov        qword [rsp+0x1b8+var_188], rax
000000000000183d         nop        dword [rax]

                     loc_1840:
0000000000001840         mov        r14, qword [rsp+0x1b8+var_160]              ; CODE XREF=main+405
0000000000001845         movzx      eax, byte [r14]
0000000000001849         test       al, al
000000000000184b         je         loc_1ec8

0000000000001851         mov        rsi, qword [rsp+0x1b8+var_188]
0000000000001856         mov        r15d, dword [rsp+0x1b8+var_170]
000000000000185b         mov        dword [rsp+0x1b8+var_168], 0x0
0000000000001863         mov        dword [rsp+0x1b8+var_16C], 0x0
000000000000186b         mov        qword [rsp+0x1b8+var_1B8], rsi
000000000000186f         jmp        loc_1894
0000000000001871         align      8

                     loc_1878:
0000000000001878         mov        rdi, r14                                    ; CODE XREF=main+318
000000000000187b         xor        esi, esi
000000000000187d         call       print_esc                                   ; print_esc
0000000000001882         movsxd     rbx, eax
0000000000001885         add        rbx, r14
0000000000001888         lea        r14, qword [rbx+1]

                     loc_188c:
000000000000188c         movzx      eax, byte [rbx+1]                           ; CODE XREF=main+569, main+623, main+667, main+678, main+796, main+1742, main+1776, main+2085
0000000000001890         test       al, al
0000000000001892         je         loc_18d1

                     loc_1894:
0000000000001894         cmp        al, 0x25                                    ; CODE XREF=main+271, main+367
0000000000001896         je         loc_1970

000000000000189c         cmp        al, 0x5c
000000000000189e         je         loc_1878

00000000000018a0         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000018a7         lea        rbp, qword [r14+1]
00000000000018ab         mov        rdx, qword [rdi+0x28]
00000000000018af         cmp        rdx, qword [rdi+0x30]
00000000000018b3         jae        loc_1e20

00000000000018b9         lea        rcx, qword [rdx+1]
00000000000018bd         mov        rbx, r14
00000000000018c0         mov        r14, rbp
00000000000018c3         mov        qword [rdi+0x28], rcx
00000000000018c7         mov        byte [rdx], al
00000000000018c9         movzx      eax, byte [rbx+1]
00000000000018cd         test       al, al
00000000000018cf         jne        loc_1894

                     loc_18d1:
00000000000018d1         mov        eax, dword [rsp+0x1b8+var_170]              ; CODE XREF=main+306
00000000000018d5         mov        rsi, qword [rsp+0x1b8+var_188]
00000000000018da         mov        dword [rsp+0x1b8+var_170], r15d
00000000000018df         sub        eax, r15d
00000000000018e2         movsxd     rdx, eax
00000000000018e5         test       eax, eax
00000000000018e7         lea        rsi, qword [rsi+rdx*8]
00000000000018eb         mov        qword [rsp+0x1b8+var_188], rsi
00000000000018f0         jle        loc_18fb

00000000000018f2         test       r15d, r15d
00000000000018f5         jg         loc_1840

                     loc_18fb:
00000000000018fb         mov        r14d, r15d                                  ; CODE XREF=main+400

                     loc_18fe:
00000000000018fe         test       r14d, r14d                                  ; CODE XREF=main+1901
0000000000001901         je         loc_1937

0000000000001903         mov        rax, qword [rsp+0x1b8+var_188]
0000000000001908         mov        rdi, qword [rax]
000000000000190b         call       quote                                       ; quote
0000000000001910         lea        rsi, qword [aWarningIgnorin]                ; argument "msgid" for method j_dcgettext, "warning: ignoring excess arguments, starting with %s"
0000000000001917         mov        rbx, rax
000000000000191a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000191f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001921         call       j_dcgettext                                 ; dcgettext
0000000000001926         mov        rcx, rbx
0000000000001929         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000192c         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000192e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000001930         xor        eax, eax
0000000000001932         call       j_error                                     ; error

                     loc_1937:
0000000000001937         mov        r12d, dword [exit_status]                   ; exit_status, CODE XREF=main+417

                     loc_193e:
000000000000193e         mov        rsi, qword [rsp+0x1b8+var_40]               ; CODE XREF=main+1951
0000000000001946         xor        rsi, qword [fs:0x28]
000000000000194f         mov        eax, r12d
0000000000001952         jne        loc_24f5

0000000000001958         add        rsp, 0x188
000000000000195f         pop        rbx
0000000000001960         pop        rbp
0000000000001961         pop        r12
0000000000001963         pop        r13
0000000000001965         pop        r14
0000000000001967         pop        r15
0000000000001969         ret
                        ; endp
000000000000196a         align      16

                     loc_1970:
0000000000001970         movzx      r12d, byte [r14+1]                          ; CODE XREF=main+310
0000000000001975         lea        rbx, qword [r14+1]
0000000000001979         lea        rbp, qword [r14+2]
000000000000197d         cmp        r12b, 0x25
0000000000001981         je         loc_19d8

0000000000001983         cmp        r12b, 0x62
0000000000001987         je         loc_1a00

0000000000001989         cmp        r12b, 0x71
000000000000198d         jne        loc_1a88

0000000000001993         test       r15d, r15d
0000000000001996         mov        r14, rbp
0000000000001999         je         loc_188c

000000000000199f         mov        r12, qword [rsp+0x1b8+var_1B8]
00000000000019a3         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000019aa         mov        edi, 0x3
00000000000019af         sub        r15d, 0x1
00000000000019b3         mov        rsi, qword [r12]
00000000000019b7         add        r12, 0x8
00000000000019bb         call       quotearg_style                              ; quotearg_style
00000000000019c0         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000019c3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000019c6         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000019cb         mov        qword [rsp+0x1b8+var_1B8], r12
00000000000019cf         jmp        loc_188c
00000000000019d4         align      8

                     loc_19d8:
00000000000019d8         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+545
00000000000019df         mov        rax, qword [rdi+0x28]
00000000000019e3         cmp        rax, qword [rdi+0x30]
00000000000019e7         jae        loc_1e43

00000000000019ed         lea        rdx, qword [rax+1]
00000000000019f1         mov        r14, rbp
00000000000019f4         mov        qword [rdi+0x28], rdx
00000000000019f8         mov        byte [rax], 0x25
00000000000019fb         jmp        loc_188c

                     loc_1a00:
0000000000001a00         test       r15d, r15d                                  ; CODE XREF=main+551
0000000000001a03         mov        r14, rbp
0000000000001a06         je         loc_188c

0000000000001a0c         mov        rax, qword [rsp+0x1b8+var_1B8]
0000000000001a10         mov        r12, qword [rax]
0000000000001a13         movzx      eax, byte [r12]
0000000000001a18         test       al, al
0000000000001a1a         jne        loc_1a4e

0000000000001a1c         jmp        loc_1a70
0000000000001a1e         align      32

                     loc_1a20:
0000000000001a20         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+752
0000000000001a27         mov        rdx, qword [rdi+0x28]
0000000000001a2b         cmp        rdx, qword [rdi+0x30]
0000000000001a2f         jae        loc_1e33

0000000000001a35         lea        rcx, qword [rdx+1]
0000000000001a39         mov        qword [rdi+0x28], rcx
0000000000001a3d         mov        byte [rdx], al
0000000000001a3f         mov        rax, r12

                     loc_1a42:
0000000000001a42         lea        r12, qword [rax+1]                          ; CODE XREF=main+1758
0000000000001a46         movzx      eax, byte [rax+1]
0000000000001a4a         test       al, al
0000000000001a4c         je         loc_1a70

                     loc_1a4e:
0000000000001a4e         cmp        al, 0x5c                                    ; CODE XREF=main+698, main+782
0000000000001a50         jne        loc_1a20

0000000000001a52         mov        rdi, r12
0000000000001a55         mov        esi, 0x1
0000000000001a5a         call       print_esc                                   ; print_esc
0000000000001a5f         cdqe
0000000000001a61         add        rax, r12
0000000000001a64         lea        r12, qword [rax+1]
0000000000001a68         movzx      eax, byte [rax+1]
0000000000001a6c         test       al, al
0000000000001a6e         jne        loc_1a4e

                     loc_1a70:
0000000000001a70         add        qword [rsp+0x1b8+var_1B8], 0x8              ; CODE XREF=main+700, main+748
0000000000001a75         sub        r15d, 0x1
0000000000001a79         mov        r14, rbp
0000000000001a7c         jmp        loc_188c
0000000000001a81         align      8

                     loc_1a88:
0000000000001a88         lea        rdx, qword [rsp+0x1b8+var_148]              ; CODE XREF=main+557
0000000000001a8d         mov        r11d, 0x101
0000000000001a93         mov        ecx, 0x20
0000000000001a98         xor        eax, eax
0000000000001a9a         xor        r8d, r8d
0000000000001a9d         mov        byte [rsp+0x1b8+var_1B0], 0x0
0000000000001aa2         mov        rdi, rdx
0000000000001aa5         mov        byte [rsp+0x1b8+var_1A8], 0x0
0000000000001aaa         mov        ebp, 0x1
0000000000001aaf         rep stosq  qword [rdi], rax
0000000000001ab2         xor        r9d, r9d
0000000000001ab5         mov        word [rsp+0x1b8+var_103], r11w
0000000000001abe         mov        byte [rsp+0x1b8+var_F0], 0x1
0000000000001ac6         mov        byte [rsp+0x1b8+var_D0], 0x1
0000000000001ace         mov        byte [rsp+0x1b8+var_D3], 0x1
0000000000001ad6         xor        edx, edx
0000000000001ad8         mov        byte [rsp+0x1b8+var_D5], 0x1
0000000000001ae0         mov        byte [rsp+0x1b8+var_D9], 0x1
0000000000001ae8         mov        edi, 0x1
0000000000001aed         mov        byte [rsp+0x1b8+var_DF], 0x1
0000000000001af5         mov        byte [rsp+0x1b8+var_101], 0x1
0000000000001afd         xor        r10d, r10d
0000000000001b00         mov        dword [rsp+0x1b8+var_E5], 0x1010101
0000000000001b0b         mov        byte [rsp+0x1b8+var_E1], 0x1
0000000000001b13         mov        r11d, 0x1
0000000000001b19         mov        byte [rsp+0x1b8+var_107], 0x1
0000000000001b21         mov        byte [rsp+0x1b8+var_E7], 0x1
0000000000001b29         mov        dword [rsp+0x1b8+var_198], r15d

                     loc_1b2e:
0000000000001b2e         lea        eax, dword [r12-0x20]                       ; CODE XREF=main+1054, main+1095, main+1125
0000000000001b33         mov        rcx, rbx
0000000000001b36         mov        rsi, rbx
0000000000001b39         sub        rcx, r14
0000000000001b3c         cmp        al, 0x29
0000000000001b3e         ja         loc_1bd0

0000000000001b44         lea        r15, qword [switch_table_8d40]              ; switch_table_8d40
0000000000001b4b         movzx      eax, al
0000000000001b4e         movsxd     rax, dword [r15+rax*4]
0000000000001b52         add        rax, r15
0000000000001b55         jmp        rax                                         ; switch statement using table at 0x8d40, with 42 cases, 0x1b60,0x1b76,0x1b80,0x1bb0,0x1bd0
0000000000001b57         align      32

                     loc_1b60:
0000000000001b60         mov        r9d, 0x1                                    ; case 41, CODE XREF=main+1013
0000000000001b66         mov        edx, 0x1
0000000000001b6b         xor        edi, edi
0000000000001b6d         mov        r10d, 0x1
0000000000001b73         xor        r11d, r11d

                     loc_1b76:
0000000000001b76         add        rbx, 0x1                                    ; case 13, CODE XREF=main+1013
0000000000001b7a         movzx      r12d, byte [rbx]
0000000000001b7e         jmp        loc_1b2e

                     loc_1b80:
0000000000001b80         add        rbx, 0x1                                    ; case 3, CODE XREF=main+1013
0000000000001b84         mov        r8d, 0x1
0000000000001b8a         mov        byte [rsp+0x1b8+var_1B0], 0x1
0000000000001b8f         mov        byte [rsp+0x1b8+var_1A8], 0x1
0000000000001b94         xor        ebp, ebp
0000000000001b96         mov        r9d, 0x1
0000000000001b9c         mov        edx, 0x1
0000000000001ba1         xor        edi, edi
0000000000001ba3         movzx      r12d, byte [rbx]
0000000000001ba7         jmp        loc_1b2e
0000000000001ba9         align      16

                     loc_1bb0:
0000000000001bb0         add        rbx, 0x1                                    ; case 16, CODE XREF=main+1013
0000000000001bb4         mov        r9d, 0x1
0000000000001bba         mov        edx, 0x1
0000000000001bbf         xor        edi, edi
0000000000001bc1         movzx      r12d, byte [rbx]
0000000000001bc5         jmp        loc_1b2e
0000000000001bca         align      16

                     loc_1bd0:
0000000000001bd0         test       r10b, r10b                                  ; case 40, CODE XREF=main+990, main+1013
0000000000001bd3         mov        r15d, dword [rsp+0x1b8+var_198]
0000000000001bd8         jne        loc_1f04

0000000000001bde         test       dl, dl
0000000000001be0         jne        loc_1f35

                     loc_1be6:
0000000000001be6         test       r9b, r9b                                    ; CODE XREF=main+2000, main+2016
0000000000001be9         jne        loc_247c

                     loc_1bef:
0000000000001bef         test       r10b, r10b                                  ; CODE XREF=main+3364
0000000000001bf2         je         loc_1c04

0000000000001bf4         mov        byte [rsp+0x1b8+var_107], r11b
0000000000001bfc         mov        byte [rsp+0x1b8+var_E7], r11b

                     loc_1c04:
0000000000001c04         cmp        byte [rsp+0x1b8+var_1A8], 0x0               ; CODE XREF=main+1170
0000000000001c09         je         loc_1c13

0000000000001c0b         mov        byte [rsp+0x1b8+var_D3], bpl

                     loc_1c13:
0000000000001c13         cmp        byte [rsp+0x1b8+var_1B0], 0x0               ; CODE XREF=main+1193
0000000000001c18         je         loc_1c22

0000000000001c1a         mov        byte [rsp+0x1b8+var_DF], bpl

                     loc_1c22:
0000000000001c22         test       r8b, r8b                                    ; CODE XREF=main+1208
0000000000001c25         je         loc_1c2f

0000000000001c27         mov        byte [rsp+0x1b8+var_E4], bpl

                     loc_1c2f:
0000000000001c2f         cmp        r12b, 0x2a                                  ; CODE XREF=main+1221
0000000000001c33         lea        rbp, qword [rbx+1]
0000000000001c37         je         loc_2130

0000000000001c3d         movsx      eax, r12b
0000000000001c41         sub        eax, 0x30
0000000000001c44         cmp        eax, 0x9
0000000000001c47         jbe        loc_1c57

0000000000001c49         jmp        loc_2367
0000000000001c4e         align      16

                     loc_1c50:
0000000000001c50         mov        rbx, rbp                                    ; CODE XREF=main+1292
0000000000001c53         add        rbp, 0x1

                     loc_1c57:
0000000000001c57         movsx      eax, byte [rbp]                             ; CODE XREF=main+1255
0000000000001c5b         lea        rdx, qword [rbp+rcx]
0000000000001c60         sub        rdx, rsi
0000000000001c63         mov        r12d, eax
0000000000001c66         sub        eax, 0x30
0000000000001c69         cmp        eax, 0x9
0000000000001c6c         jbe        loc_1c50

0000000000001c6e         lea        rax, qword [rbx+2]
0000000000001c72         mov        byte [rsp+0x1b8+var_162], 0x0
0000000000001c77         mov        rbx, rbp
0000000000001c7a         mov        qword [rsp+0x1b8+var_1B0], rax

                     loc_1c7f:
0000000000001c7f         cmp        r12b, 0x2e                                  ; CODE XREF=main+2555, main+2755, main+3092
0000000000001c83         jne        loc_2120

0000000000001c89         movzx      r12d, byte [rbx+1]
0000000000001c8e         mov        byte [rsp+0x1b8+var_E5], 0x0
0000000000001c96         cmp        r12b, 0x2a
0000000000001c9a         je         loc_216c

0000000000001ca0         movsx      eax, r12b
0000000000001ca4         add        rdx, 0x1
0000000000001ca8         mov        r9, qword [rsp+0x1b8+var_1B0]
0000000000001cad         sub        eax, 0x30
0000000000001cb0         cmp        eax, 0x9
0000000000001cb3         jbe        loc_1cc3

0000000000001cb5         jmp        loc_242f
0000000000001cba         align      64

                     loc_1cc0:
0000000000001cc0         mov        r9, rbx                                     ; CODE XREF=main+1401

                     loc_1cc3:
0000000000001cc3         movsx      eax, byte [r9+1]                            ; CODE XREF=main+1363
0000000000001cc8         add        rdx, 0x1
0000000000001ccc         lea        rbx, qword [r9+1]
0000000000001cd0         mov        r12d, eax
0000000000001cd3         sub        eax, 0x30
0000000000001cd6         cmp        eax, 0x9
0000000000001cd9         jbe        loc_1cc0

0000000000001cdb         mov        rax, r9
0000000000001cde         mov        byte [rsp+0x1b8+var_161], 0x0
0000000000001ce3         add        rax, 0x2
0000000000001ce7         mov        qword [rsp+0x1b8+var_1B0], rax

                     loc_1cec:
0000000000001cec         lea        eax, dword [r12-0x4c]                       ; CODE XREF=main+2501, main+2667, main+2983, main+3301
0000000000001cf1         cmp        al, 0x2e
0000000000001cf3         ja         loc_1d22

0000000000001cf5         bt         r13, rax
0000000000001cf9         jae        loc_1d22

0000000000001cfb         nop        dword [rax+rax]

                     loc_1d00:
0000000000001d00         movzx      r12d, byte [rbx+1]                          ; CODE XREF=main+2485
0000000000001d05         lea        rcx, qword [rbx+1]
0000000000001d09         lea        eax, dword [r12-0x4c]
0000000000001d0e         cmp        al, 0x2e
0000000000001d10         jbe        loc_2108

                     loc_1d16:
0000000000001d16         lea        rax, qword [rbx+2]                          ; CODE XREF=main+2476
0000000000001d1a         mov        rbx, rcx
0000000000001d1d         mov        qword [rsp+0x1b8+var_1B0], rax

                     loc_1d22:
0000000000001d22         movzx      eax, r12b                                   ; CODE XREF=main+1427, main+1433
0000000000001d26         cmp        byte [rsp+rax+0x1b8+var_148], 0x0
0000000000001d2b         je         loc_244a

0000000000001d31         lea        rax, qword [aWrittenBySSAnd+27]             ; 0x9512
0000000000001d38         test       r15d, r15d
0000000000001d3b         mov        qword [rsp+0x1b8+var_1A8], rax
0000000000001d40         je         loc_1d5a

0000000000001d42         mov        rax, qword [rsp+0x1b8+var_1B8]
0000000000001d46         sub        r15d, 0x1
0000000000001d4a         mov        rsi, qword [rax]
0000000000001d4d         add        rax, 0x8
0000000000001d51         mov        qword [rsp+0x1b8+var_1B8], rax
0000000000001d55         mov        qword [rsp+0x1b8+var_1A8], rsi

                     loc_1d5a:
0000000000001d5a         lea        ecx, dword [r12-0x41]                       ; CODE XREF=main+1504
0000000000001d5f         cmp        cl, 0x37
0000000000001d62         ja         loc_2160

0000000000001d68         lea        rsi, qword [aFullDocumentat+27]             ; 0x8c58
0000000000001d6f         mov        eax, 0x1
0000000000001d74         shl        rax, cl
0000000000001d77         mov        ecx, 0x1
0000000000001d7c         mov        qword [rsp+0x1b8+var_198], rsi
0000000000001d81         movabs     rsi, 0x90410800800000
0000000000001d8b         test       rax, rsi
0000000000001d8e         jne        loc_1dbb

0000000000001d90         movabs     rcx, 0x7100000071
0000000000001d9a         and        rax, rcx
0000000000001d9d         cmp        rax, 0x1
0000000000001da1         sbb        rcx, rcx
0000000000001da4         add        rcx, 0x1
0000000000001da8         test       rax, rax
0000000000001dab         lea        rax, qword [aFullDocumentat+30]             ; 0x8c5b
0000000000001db2         cmove      rax, r14
0000000000001db6         mov        qword [rsp+0x1b8+var_198], rax

                     loc_1dbb:
0000000000001dbb         lea        rdi, qword [rdx+rcx+2]                      ; CODE XREF=main+1582, main+2567
0000000000001dc0         mov        qword [rsp+0x1b8+var_178], rcx
0000000000001dc5         mov        qword [rsp+0x1b8+var_180], rdx
0000000000001dca         call       xmalloc                                     ; xmalloc
0000000000001dcf         mov        rdx, qword [rsp+0x1b8+var_180]              ; argument "__n" for method j_mempcpy
0000000000001dd4         mov        rsi, r14                                    ; argument "__src" for method j_mempcpy
0000000000001dd7         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
0000000000001dda         mov        rbp, rax
0000000000001ddd         call       j_mempcpy                                   ; mempcpy
0000000000001de2         mov        rcx, qword [rsp+0x1b8+var_178]
0000000000001de7         mov        rsi, qword [rsp+0x1b8+var_198]              ; argument "__src" for method j_mempcpy
0000000000001dec         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
0000000000001def         mov        rdx, rcx                                    ; argument "__n" for method j_mempcpy
0000000000001df2         call       j_mempcpy                                   ; mempcpy
0000000000001df7         mov        byte [rax], r12b
0000000000001dfa         sub        r12d, 0x41
0000000000001dfe         mov        byte [rax+1], 0x0
0000000000001e02         cmp        r12b, 0x37
0000000000001e06         ja         loc_1f78

0000000000001e0c         lea        rdx, qword [switch_table_8de8]              ; switch_table_8de8
0000000000001e13         movzx      r12d, r12b
0000000000001e17         movsxd     rax, dword [rdx+r12*4]
0000000000001e1b         add        rax, rdx
0000000000001e1e         jmp        rax                                         ; switch statement using table at 0x8de8, with 56 cases, 0x1f50,0x1f78,0x1f8a,0x1fb9,0x1fda,0x2062

                     loc_1e20:
0000000000001e20         movzx      esi, al                                     ; argument #2 for method j___overflow, CODE XREF=main+339
0000000000001e23         mov        rbx, r14
0000000000001e26         mov        r14, rbp
0000000000001e29         call       j___overflow                                ; __overflow
0000000000001e2e         jmp        loc_188c

                     loc_1e33:
0000000000001e33         movzx      esi, al                                     ; argument #2 for method j___overflow, CODE XREF=main+719
0000000000001e36         call       j___overflow                                ; __overflow
0000000000001e3b         mov        rax, r12
0000000000001e3e         jmp        loc_1a42

                     loc_1e43:
0000000000001e43         mov        esi, 0x25                                   ; argument #2 for method j___overflow, CODE XREF=main+647
0000000000001e48         mov        r14, rbp
0000000000001e4b         call       j___overflow                                ; __overflow
0000000000001e50         jmp        loc_188c

                     loc_1e55:
0000000000001e55         mov        r13, qword [rbx+8]                          ; CODE XREF=main+144
0000000000001e59         lea        rsi, qword [aHelp]                          ; argument "__s2" for method j_strcmp, "--help"
0000000000001e60         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000001e63         call       j_strcmp                                    ; strcmp
0000000000001e68         test       eax, eax
0000000000001e6a         je         loc_24fa

0000000000001e70         lea        rsi, qword [aVersion]                       ; argument "__s2" for method j_strcmp, "--version"
0000000000001e77         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000001e7a         call       j_strcmp                                    ; strcmp
0000000000001e7f         test       eax, eax
0000000000001e81         mov        r12d, eax
0000000000001e84         je         loc_1ed2

0000000000001e86         lea        rsi, qword [aDavidMackenzie+16]             ; argument "__s2" for method j_strcmp, 0x8ca6
0000000000001e8d         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000001e90         call       j_strcmp                                    ; strcmp
0000000000001e95         test       eax, eax
0000000000001e97         jne        loc_181a

                     loc_1e9d:
0000000000001e9d         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand", CODE XREF=main+153
0000000000001ea4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001ea9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001eab         call       j_dcgettext                                 ; dcgettext
0000000000001eb0         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000001eb2         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000001eb5         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000001eb7         xor        eax, eax
0000000000001eb9         call       j_error                                     ; error
0000000000001ebe         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000001ec3         call       usage                                       ; usage

                     loc_1ec8:
0000000000001ec8         mov        r14d, dword [rsp+0x1b8+var_170]             ; CODE XREF=main+235
0000000000001ecd         jmp        loc_18fe

                     loc_1ed2:
0000000000001ed2         mov        rcx, qword [Version]                        ; Version, CODE XREF=main+1828
0000000000001ed9         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001ee0         lea        r8, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000001ee7         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8c2b
0000000000001eee         lea        rsi, qword [aPrintf]                        ; "printf"
0000000000001ef5         xor        r9d, r9d
0000000000001ef8         xor        eax, eax
0000000000001efa         call       version_etc                                 ; version_etc
0000000000001eff         jmp        loc_193e

                     loc_1f04:
0000000000001f04         test       dl, dl                                      ; CODE XREF=main+1144
0000000000001f06         mov        byte [rsp+0x1b8+var_F0], r11b
0000000000001f0e         mov        byte [rsp+0x1b8+var_D0], r11b
0000000000001f16         jne        loc_1f35

                     loc_1f18:
0000000000001f18         mov        byte [rsp+0x1b8+var_D9], r11b               ; CODE XREF=main+2022
0000000000001f20         mov        byte [rsp+0x1b8+var_103], r11b
0000000000001f28         mov        byte [rsp+0x1b8+var_E3], r11b
0000000000001f30         jmp        loc_1be6

                     loc_1f35:
0000000000001f35         test       r10b, r10b                                  ; CODE XREF=main+1152, main+1974
0000000000001f38         mov        byte [rsp+0x1b8+var_D5], dil
0000000000001f40         je         loc_1be6

0000000000001f46         jmp        loc_1f18
0000000000001f48         align      16

                     loc_1f50:
0000000000001f50         cmp        byte [rsp+0x1b8+var_162], 0x0               ; case 50, CODE XREF=main+1726
0000000000001f55         jne        loc_231f

0000000000001f5b         cmp        byte [rsp+0x1b8+var_161], 0x0
0000000000001f60         jne        loc_2386

0000000000001f66         mov        rsi, qword [rsp+0x1b8+var_1A8]
0000000000001f6b         mov        rdi, rbp
0000000000001f6e         xor        eax, eax
0000000000001f70         call       xprintf                                     ; xprintf
0000000000001f75         nop        dword [rax]

                     loc_1f78:
0000000000001f78         mov        rdi, rbp                                    ; case 54, argument "__ptr" for method j_free, CODE XREF=main+1702, main+1726, main+2135, main+2168, main+2301, main+2460, main+2848, main+2948, main+3002, main+3041, main+3074
0000000000001f7b         call       j_free                                      ; free
0000000000001f80         mov        r14, qword [rsp+0x1b8+var_1B0]
0000000000001f85         jmp        loc_188c

                     loc_1f8a:
0000000000001f8a         mov        rdi, qword [rsp+0x1b8+var_1A8]              ; case 40, CODE XREF=main+1726
0000000000001f8f         call       vstrtoimax                                  ; vstrtoimax
0000000000001f94         cmp        byte [rsp+0x1b8+var_162], 0x0
0000000000001f99         jne        loc_2346

0000000000001f9f         cmp        byte [rsp+0x1b8+var_161], 0x0
0000000000001fa4         jne        loc_239e

0000000000001faa         mov        rsi, rax
0000000000001fad         mov        rdi, rbp
0000000000001fb0         xor        eax, eax
0000000000001fb2         call       xprintf                                     ; xprintf
0000000000001fb7         jmp        loc_1f78

                     loc_1fb9:
0000000000001fb9         cmp        byte [rsp+0x1b8+var_162], 0x0               ; case 34, CODE XREF=main+1726
0000000000001fbe         mov        rax, qword [rsp+0x1b8+var_1A8]
0000000000001fc3         movsx      edx, byte [rax]
0000000000001fc6         jne        loc_230c

0000000000001fcc         mov        esi, edx
0000000000001fce         mov        rdi, rbp
0000000000001fd1         xor        eax, eax
0000000000001fd3         call       xprintf                                     ; xprintf
0000000000001fd8         jmp        loc_1f78

                     loc_1fda:
0000000000001fda         mov        rax, qword [rsp+0x1b8+var_1A8]              ; case 55, CODE XREF=main+1726
0000000000001fdf         movzx      eax, byte [rax]
0000000000001fe2         cmp        al, 0x22
0000000000001fe4         je         loc_1fee

0000000000001fe6         cmp        al, 0x27
0000000000001fe8         jne        loc_2228

                     loc_1fee:
0000000000001fee         mov        rax, qword [rsp+0x1b8+var_1A8]              ; CODE XREF=main+2180
0000000000001ff3         movzx      r12d, byte [rax+1]
0000000000001ff8         test       r12b, r12b
0000000000001ffb         je         loc_2228

0000000000002001         cmp        byte [rax+2], 0x0
0000000000002005         je         loc_203a

0000000000002007         cmp        byte [posixly_correct], 0x0                 ; posixly_correct
000000000000200e         jne        loc_203a

0000000000002010         lea        rsi, qword [aWarningSCharac]                ; argument "msgid" for method j_dcgettext, "warning: %s: character(s) following character constant have been ignored"
0000000000002017         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000201c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000201e         call       j_dcgettext                                 ; dcgettext
0000000000002023         mov        rcx, qword [rsp+0x1b8+var_1A8]
0000000000002028         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000202b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000202d         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000202f         xor        eax, eax
0000000000002031         add        rcx, 0x2
0000000000002035         call       j_error                                     ; error

                     loc_203a:
000000000000203a         cmp        byte [rsp+0x1b8+var_162], 0x0               ; CODE XREF=main+2213, main+2222
000000000000203f         jne        loc_2264

                     loc_2045:
0000000000002045         cmp        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+2814
000000000000204a         jne        loc_23b4

0000000000002050         mov        rsi, r12
0000000000002053         mov        rdi, rbp
0000000000002056         xor        eax, eax
0000000000002058         call       xprintf                                     ; xprintf
000000000000205d         jmp        loc_1f78

                     loc_2062:
0000000000002062         mov        rax, qword [rsp+0x1b8+var_1A8]              ; case 38, CODE XREF=main+1726
0000000000002067         movzx      eax, byte [rax]
000000000000206a         cmp        al, 0x22
000000000000206c         je         loc_2076

000000000000206e         cmp        al, 0x27
0000000000002070         jne        loc_2285

                     loc_2076:
0000000000002076         mov        rsi, qword [rsp+0x1b8+var_1A8]              ; CODE XREF=main+2316
000000000000207b         movzx      eax, byte [rsi+1]
000000000000207f         test       al, al
0000000000002081         je         loc_2285

0000000000002087         cmp        byte [rsi+2], 0x0
000000000000208b         mov        word [rsp+0x1b8+var_198], ax
0000000000002090         fild       word [rsp+0x1b8+var_198]
0000000000002094         je         loc_20d1

0000000000002096         cmp        byte [posixly_correct], 0x0                 ; posixly_correct
000000000000209d         jne        loc_20d1

000000000000209f         fstp       tword [rsp+0x1b8+var_198]
00000000000020a3         lea        rsi, qword [aWarningSCharac]                ; argument "msgid" for method j_dcgettext, "warning: %s: character(s) following character constant have been ignored"
00000000000020aa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000020af         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000020b1         call       j_dcgettext                                 ; dcgettext
00000000000020b6         mov        rcx, qword [rsp+0x1b8+var_1A8]
00000000000020bb         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000020be         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000020c0         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000020c2         xor        eax, eax
00000000000020c4         add        rcx, 0x2
00000000000020c8         call       j_error                                     ; error
00000000000020cd         fld        tword [rsp+0x1b8+var_198]

                     loc_20d1:
00000000000020d1         cmp        byte [rsp+0x1b8+var_162], 0x0               ; CODE XREF=main+2356, main+2365
00000000000020d6         jne        loc_22c2

                     loc_20dc:
00000000000020dc         cmp        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+2908
00000000000020e1         jne        loc_23ea

00000000000020e7         sub        rsp, 0x10
00000000000020eb         mov        rdi, rbp
00000000000020ee         xor        eax, eax
00000000000020f0         fstp       tword [rsp+0x1c8+var_1C8]
00000000000020f3         call       xprintf                                     ; xprintf
00000000000020f8         pop        r9
00000000000020fa         pop        r10
00000000000020fc         jmp        loc_1f78
0000000000002101         align      8

                     loc_2108:
0000000000002108         bt         r13, rax                                    ; CODE XREF=main+1456
000000000000210c         jae        loc_1d16

0000000000002112         mov        rbx, rcx
0000000000002115         jmp        loc_1d00
000000000000211a         align      32

                     loc_2120:
0000000000002120         mov        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+1315
0000000000002125         jmp        loc_1cec
000000000000212a         align      16

                     loc_2130:
0000000000002130         test       r15d, r15d                                  ; CODE XREF=main+1239
0000000000002133         lea        rdx, qword [rcx+1]
0000000000002137         jne        loc_21d0

000000000000213d         lea        rax, qword [rbx+2]
0000000000002141         movzx      r12d, byte [rbx+1]
0000000000002146         mov        dword [rsp+0x1b8+var_16C], 0x0
000000000000214e         mov        rbx, rbp
0000000000002151         mov        byte [rsp+0x1b8+var_162], 0x1
0000000000002156         mov        qword [rsp+0x1b8+var_1B0], rax
000000000000215b         jmp        loc_1c7f

                     loc_2160:
0000000000002160         mov        qword [rsp+0x1b8+var_198], r14              ; CODE XREF=main+1538
0000000000002165         xor        ecx, ecx
0000000000002167         jmp        loc_1dbb

                     loc_216c:
000000000000216c         add        rdx, 0x2                                    ; CODE XREF=main+1338
0000000000002170         test       r15d, r15d
0000000000002173         lea        rbp, qword [rbx+2]
0000000000002177         je         loc_22e9

000000000000217d         mov        rax, qword [rsp+0x1b8+var_1B8]
0000000000002181         mov        qword [rsp+0x1b8+var_1B0], rdx
0000000000002186         mov        rdi, qword [rax]
0000000000002189         call       vstrtoimax                                  ; vstrtoimax
000000000000218e         test       rax, rax
0000000000002191         mov        rdx, qword [rsp+0x1b8+var_1B0]
0000000000002196         js         loc_2379

000000000000219c         cmp        rax, 0x7fffffff
00000000000021a2         jg         loc_2489

00000000000021a8         mov        dword [rsp+0x1b8+var_168], eax

                     loc_21ac:
00000000000021ac         lea        rax, qword [rbx+3]                          ; CODE XREF=main+3105
00000000000021b0         movzx      r12d, byte [rbx+2]
00000000000021b5         add        qword [rsp+0x1b8+var_1B8], 0x8
00000000000021ba         sub        r15d, 0x1
00000000000021be         mov        rbx, rbp
00000000000021c1         mov        byte [rsp+0x1b8+var_161], 0x1
00000000000021c6         mov        qword [rsp+0x1b8+var_1B0], rax
00000000000021cb         jmp        loc_1cec

                     loc_21d0:
00000000000021d0         mov        r12, qword [rsp+0x1b8+var_1B8]              ; CODE XREF=main+2519
00000000000021d4         mov        qword [rsp+0x1b8+var_1A8], rdx
00000000000021d9         mov        rdi, qword [r12]
00000000000021dd         call       vstrtoimax                                  ; vstrtoimax
00000000000021e2         mov        ecx, 0x80000000
00000000000021e7         mov        esi, 0xffffffff
00000000000021ec         add        rcx, rax
00000000000021ef         cmp        rcx, rsi
00000000000021f2         ja         loc_24bf

00000000000021f8         mov        dword [rsp+0x1b8+var_16C], eax
00000000000021fc         lea        rax, qword [rbx+2]
0000000000002200         add        r12, 0x8
0000000000002204         mov        qword [rsp+0x1b8+var_1B8], r12
0000000000002208         sub        r15d, 0x1
000000000000220c         movzx      r12d, byte [rbx+1]
0000000000002211         mov        qword [rsp+0x1b8+var_1B0], rax
0000000000002216         mov        rbx, rbp
0000000000002219         mov        byte [rsp+0x1b8+var_162], 0x1
000000000000221e         mov        rdx, qword [rsp+0x1b8+var_1A8]
0000000000002223         jmp        loc_1c7f

                     loc_2228:
0000000000002228         call       j___errno_location                          ; __errno_location, CODE XREF=main+2184, main+2203
000000000000222d         mov        r14, qword [rsp+0x1b8+var_1A8]
0000000000002232         lea        rsi, qword [rsp+0x1b8+var_150]
0000000000002237         xor        ecx, ecx
0000000000002239         xor        edx, edx
000000000000223b         mov        dword [rax], 0x0
0000000000002241         mov        rdi, r14
0000000000002244         call       j___strtoul_internal                        ; __strtoul_internal
0000000000002249         mov        rsi, qword [rsp+0x1b8+var_150]
000000000000224e         mov        rdi, r14
0000000000002251         mov        r12, rax
0000000000002254         call       verify_numeric                              ; verify_numeric
0000000000002259         cmp        byte [rsp+0x1b8+var_162], 0x0
000000000000225e         je         loc_2045

                     loc_2264:
0000000000002264         cmp        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+2271
0000000000002269         jne        loc_240f

000000000000226f         mov        esi, dword [rsp+0x1b8+var_16C]
0000000000002273         mov        rdx, r12
0000000000002276         mov        rdi, rbp
0000000000002279         xor        eax, eax
000000000000227b         call       xprintf                                     ; xprintf
0000000000002280         jmp        loc_1f78

                     loc_2285:
0000000000002285         call       j___errno_location                          ; __errno_location, CODE XREF=main+2320, main+2337
000000000000228a         mov        r14, qword [rsp+0x1b8+var_1A8]
000000000000228f         lea        rsi, qword [rsp+0x1b8+var_150]
0000000000002294         mov        dword [rax], 0x0
000000000000229a         mov        rdi, r14
000000000000229d         call       cl_strtold                                  ; cl_strtold
00000000000022a2         fstp       tword [rsp+0x1b8+var_1A8]
00000000000022a6         mov        rsi, qword [rsp+0x1b8+var_150]
00000000000022ab         mov        rdi, r14
00000000000022ae         call       verify_numeric                              ; verify_numeric
00000000000022b3         cmp        byte [rsp+0x1b8+var_162], 0x0
00000000000022b8         fld        tword [rsp+0x1b8+var_1A8]
00000000000022bc         je         loc_20dc

                     loc_22c2:
00000000000022c2         cmp        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+2422
00000000000022c7         jne        loc_23ca

00000000000022cd         sub        rsp, 0x10
00000000000022d1         mov        rdi, rbp
00000000000022d4         xor        eax, eax
00000000000022d6         mov        esi, dword [rsp+0x1c8+var_16C]
00000000000022da         fstp       tword [rsp+0x1c8+var_1C8]
00000000000022dd         call       xprintf                                     ; xprintf
00000000000022e2         pop        rcx
00000000000022e3         pop        rsi
00000000000022e4         jmp        loc_1f78

                     loc_22e9:
00000000000022e9         lea        rax, qword [rbx+3]                          ; CODE XREF=main+2583
00000000000022ed         movzx      r12d, byte [rbx+2]
00000000000022f2         mov        dword [rsp+0x1b8+var_168], 0x0
00000000000022fa         mov        rbx, rbp
00000000000022fd         mov        byte [rsp+0x1b8+var_161], 0x1
0000000000002302         mov        qword [rsp+0x1b8+var_1B0], rax
0000000000002307         jmp        loc_1cec

                     loc_230c:
000000000000230c         mov        esi, dword [rsp+0x1b8+var_16C]              ; CODE XREF=main+2150
0000000000002310         mov        rdi, rbp
0000000000002313         xor        eax, eax
0000000000002315         call       xprintf                                     ; xprintf
000000000000231a         jmp        loc_1f78

                     loc_231f:
000000000000231f         cmp        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+2037
0000000000002324         je         loc_2417

000000000000232a         mov        rcx, qword [rsp+0x1b8+var_1A8]

                     loc_232f:
000000000000232f         mov        edx, dword [rsp+0x1b8+var_168]              ; CODE XREF=main+3242, main+3250
0000000000002333         mov        esi, dword [rsp+0x1b8+var_16C]
0000000000002337         mov        rdi, rbp
000000000000233a         xor        eax, eax
000000000000233c         call       xprintf                                     ; xprintf
0000000000002341         jmp        loc_1f78

                     loc_2346:
0000000000002346         cmp        byte [rsp+0x1b8+var_161], 0x0               ; CODE XREF=main+2105
000000000000234b         jne        loc_2407

0000000000002351         mov        esi, dword [rsp+0x1b8+var_16C]
0000000000002355         mov        rdx, rax
0000000000002358         mov        rdi, rbp
000000000000235b         xor        eax, eax
000000000000235d         call       xprintf                                     ; xprintf
0000000000002362         jmp        loc_1f78

                     loc_2367:
0000000000002367         mov        qword [rsp+0x1b8+var_1B0], rbp              ; CODE XREF=main+1257
000000000000236c         mov        rdx, rcx
000000000000236f         mov        byte [rsp+0x1b8+var_162], 0x0
0000000000002374         jmp        loc_1c7f

                     loc_2379:
0000000000002379         mov        dword [rsp+0x1b8+var_168], 0xffffffff       ; CODE XREF=main+2614
0000000000002381         jmp        loc_21ac

                     loc_2386:
0000000000002386         mov        rdx, qword [rsp+0x1b8+var_1A8]              ; CODE XREF=main+2048
000000000000238b         mov        esi, dword [rsp+0x1b8+var_168]
000000000000238f         mov        rdi, rbp
0000000000002392         xor        eax, eax
0000000000002394         call       xprintf                                     ; xprintf
0000000000002399         jmp        loc_1f78

                     loc_239e:
000000000000239e         mov        esi, dword [rsp+0x1b8+var_168]              ; CODE XREF=main+2116
00000000000023a2         mov        rdx, rax
00000000000023a5         mov        rdi, rbp
00000000000023a8         xor        eax, eax
00000000000023aa         call       xprintf                                     ; xprintf
00000000000023af         jmp        loc_1f78

                     loc_23b4:
00000000000023b4         mov        esi, dword [rsp+0x1b8+var_168]              ; CODE XREF=main+2282
00000000000023b8         mov        rdx, r12
00000000000023bb         mov        rdi, rbp
00000000000023be         xor        eax, eax
00000000000023c0         call       xprintf                                     ; xprintf
00000000000023c5         jmp        loc_1f78

                     loc_23ca:
00000000000023ca         sub        rsp, 0x10                                   ; CODE XREF=main+2919
00000000000023ce         mov        rdi, rbp
00000000000023d1         xor        eax, eax
00000000000023d3         mov        edx, dword [rsp+0x1c8+var_168]
00000000000023d7         mov        esi, dword [rsp+0x1c8+var_16C]
00000000000023db         fstp       tword [rsp+0x1c8+var_1C8]
00000000000023de         call       xprintf                                     ; xprintf
00000000000023e3         pop        rax
00000000000023e4         pop        rdx
00000000000023e5         jmp        loc_1f78

                     loc_23ea:
00000000000023ea         sub        rsp, 0x10                                   ; CODE XREF=main+2433
00000000000023ee         mov        rdi, rbp
00000000000023f1         xor        eax, eax
00000000000023f3         mov        esi, dword [rsp+0x1c8+var_168]
00000000000023f7         fstp       tword [rsp+0x1c8+var_1C8]
00000000000023fa         call       xprintf                                     ; xprintf
00000000000023ff         pop        rdi
0000000000002400         pop        r8
0000000000002402         jmp        loc_1f78

                     loc_2407:
0000000000002407         mov        rcx, rax                                    ; CODE XREF=main+3051
000000000000240a         jmp        loc_232f

                     loc_240f:
000000000000240f         mov        rcx, r12                                    ; CODE XREF=main+2825
0000000000002412         jmp        loc_232f

                     loc_2417:
0000000000002417         mov        rdx, qword [rsp+0x1b8+var_1A8]              ; CODE XREF=main+3012
000000000000241c         mov        esi, dword [rsp+0x1b8+var_16C]
0000000000002420         mov        rdi, rbp
0000000000002423         xor        eax, eax
0000000000002425         call       xprintf                                     ; xprintf
000000000000242a         jmp        loc_1f78

                     loc_242f:
000000000000242f         mov        rax, qword [rsp+0x1b8+var_1B0]              ; CODE XREF=main+1365
0000000000002434         mov        byte [rsp+0x1b8+var_161], 0x0
0000000000002439         mov        rbx, rax
000000000000243c         add        rax, 0x1
0000000000002440         mov        qword [rsp+0x1b8+var_1B0], rax
0000000000002445         jmp        loc_1cec

                     loc_244a:
000000000000244a         mov        r12, qword [rsp+0x1b8+var_1B0]              ; CODE XREF=main+1483
000000000000244f         lea        rsi, qword [aSInvalidConver]                ; argument "msgid" for method j_dcgettext, "%.*s: invalid conversion specification"
0000000000002456         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000245b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000245d         call       j_dcgettext                                 ; dcgettext
0000000000002462         mov        rcx, r12
0000000000002465         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002468         mov        r8, r14
000000000000246b         sub        rcx, r14
000000000000246e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002470         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002475         xor        eax, eax
0000000000002477         call       j_error                                     ; error

                     loc_247c:
000000000000247c         mov        byte [rsp+0x1b8+var_E5], dil                ; CODE XREF=main+1161
0000000000002484         jmp        loc_1bef

                     loc_2489:
0000000000002489         mov        rax, qword [rsp+0x1b8+var_1B8]              ; CODE XREF=main+2626
000000000000248d         mov        rdi, qword [rax]
0000000000002490         call       quote                                       ; quote
0000000000002495         lea        rsi, qword [aInvalidPrecisi]                ; argument "msgid" for method j_dcgettext, "invalid precision: %s"
000000000000249c         mov        rbx, rax
000000000000249f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024a4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024a6         call       j_dcgettext                                 ; dcgettext
00000000000024ab         mov        rcx, rbx
00000000000024ae         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000024b1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024b3         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000024b8         xor        eax, eax
00000000000024ba         call       j_error                                     ; error

                     loc_24bf:
00000000000024bf         mov        rax, qword [rsp+0x1b8+var_1B8]              ; CODE XREF=main+2706
00000000000024c3         mov        rdi, qword [rax]
00000000000024c6         call       quote                                       ; quote
00000000000024cb         lea        rsi, qword [aInvalidFieldWi]                ; argument "msgid" for method j_dcgettext, "invalid field width: %s"
00000000000024d2         mov        rbx, rax
00000000000024d5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024da         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024dc         call       j_dcgettext                                 ; dcgettext
00000000000024e1         mov        rcx, rbx
00000000000024e4         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000024e7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024e9         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000024ee         xor        eax, eax
00000000000024f0         call       j_error                                     ; error

                     loc_24f5:
00000000000024f5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+498
                        ; endp

                     loc_24fa:
00000000000024fa         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+1802
00000000000024fc         call       usage                                       ; usage
0000000000002501         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x9ebc)
000000000000250b         nop        dword [rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002510         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x9d7c)
0000000000002512         mov        r9, rdx
0000000000002515         pop        rsi
0000000000002516         mov        rdx, rsp
0000000000002519         and        rsp, 0xfffffffffffffff0
000000000000251d         push       rax
000000000000251e         push       rsp
000000000000251f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002526         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000252d         lea        rdi, qword [main]                           ; main
0000000000002534         call       qword [qword_20bfc0+8]                      ; 0x20bfc8
000000000000253a         hlt
                        ; endp
000000000000253b         align      64                                          ; End of unwind block (FDE at 0x9d7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002540         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002547         push       rbp
0000000000002548         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000254f         cmp        rax, rdi
0000000000002552         mov        rbp, rsp
0000000000002555         je         loc_2570

0000000000002557         mov        rax, qword [qword_20bfc0]                   ; qword_20bfc0
000000000000255e         test       rax, rax
0000000000002561         je         loc_2570

0000000000002563         pop        rbp
0000000000002564         jmp        rax
                        ; endp
0000000000002566         align      16

                     loc_2570:
0000000000002570         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002571         ret
                        ; endp
0000000000002572         align      128

                     register_tm_clones:
0000000000002580         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002587         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000258e         push       rbp
000000000000258f         sub        rsi, rdi
0000000000002592         mov        rbp, rsp
0000000000002595         sar        rsi, 0x3
0000000000002599         mov        rax, rsi
000000000000259c         shr        rax, 0x3f
00000000000025a0         add        rsi, rax
00000000000025a3         sar        rsi, 0x1
00000000000025a6         je         loc_25c0

00000000000025a8         mov        rax, qword [qword_20bfd8]                   ; qword_20bfd8
00000000000025af         test       rax, rax
00000000000025b2         je         loc_25c0

00000000000025b4         pop        rbp
00000000000025b5         jmp        rax
                        ; endp
00000000000025b7         align      64

                     loc_25c0:
00000000000025c0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000025c1         ret
                        ; endp
00000000000025c2         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000025d0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000025d7         jne        loc_2608

00000000000025d9         cmp        qword [qword_20bfe0], 0x0                   ; qword_20bfe0
00000000000025e1         push       rbp
00000000000025e2         mov        rbp, rsp
00000000000025e5         je         loc_25f3

00000000000025e7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000025ee         call       j_qword_20bfe0                              ; qword_20bfe0

                     loc_25f3:
00000000000025f3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000025f8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000025ff         pop        rbp
0000000000002600         ret
                        ; endp
0000000000002601         align      8

                     loc_2608:
0000000000002608         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000260a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002610         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002611         mov        rbp, rsp
0000000000002614         pop        rbp
0000000000002615         jmp        register_tm_clones                          ; register_tm_clones
000000000000261a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_2C: int32_t, -44


                     print_esc:
0000000000002620         push       r13                                         ; Begin of unwind block (FDE at 0x9dec), CODE XREF=main+285, main+762
0000000000002622         push       r12
0000000000002624         mov        r12, rdi
0000000000002627         push       rbp
0000000000002628         push       rbx
0000000000002629         sub        rsp, 0x18
000000000000262d         movzx      r13d, byte [rdi+1]
0000000000002632         cmp        r13b, 0x78
0000000000002636         je         loc_2710

000000000000263c         lea        eax, dword [r13-0x30]
0000000000002640         lea        rbx, qword [rdi+1]
0000000000002644         cmp        al, 0x7
0000000000002646         ja         loc_26b0

0000000000002648         xor        eax, eax
000000000000264a         cmp        r13b, 0x30
000000000000264e         sete       al
0000000000002651         xor        edx, edx
0000000000002653         and        rsi, rax
0000000000002656         add        rsi, rbx
0000000000002659         lea        rbx, qword [rsi+3]

                     loc_265d:
000000000000265d         movsx      eax, byte [rsi]                             ; CODE XREF=print_esc+87
0000000000002660         lea        ecx, dword [rax-0x30]
0000000000002663         cmp        cl, 0x7
0000000000002666         ja         loc_28b0

000000000000266c         add        rsi, 0x1
0000000000002670         lea        edx, dword [rax+rdx*8-0x30]
0000000000002674         cmp        rsi, rbx
0000000000002677         jne        loc_265d

                     loc_2679:
0000000000002679         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_esc+659
0000000000002680         mov        rax, qword [rdi+0x28]
0000000000002684         cmp        rax, qword [rdi+0x30]
0000000000002688         jae        loc_2a30

000000000000268e         lea        rcx, qword [rax+1]
0000000000002692         mov        qword [rdi+0x28], rcx
0000000000002696         mov        byte [rax], dl

                     loc_2698:
0000000000002698         add        rsp, 0x18                                   ; CODE XREF=print_esc+193, print_esc+231, print_esc+342, print_esc+645, print_esc+696, print_esc+733, print_esc+770, print_esc+807, print_esc+844, print_esc+881, print_esc+925
000000000000269c         sub        rbx, r12
000000000000269f         lea        eax, dword [rbx-1]
00000000000026a2         pop        rbx
00000000000026a3         pop        rbp
00000000000026a4         pop        r12
00000000000026a6         pop        r13
00000000000026a8         ret
                        ; endp
00000000000026a9         align      16

                     loc_26b0:
00000000000026b0         test       r13b, r13b                                  ; CODE XREF=print_esc+38
00000000000026b3         jne        loc_2798

                     loc_26b9:
00000000000026b9         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_esc+448
00000000000026c0         mov        rax, qword [rdi+0x28]
00000000000026c4         cmp        rax, qword [rdi+0x30]
00000000000026c8         jae        loc_2a3d

00000000000026ce         lea        rdx, qword [rax+1]
00000000000026d2         mov        qword [rdi+0x28], rdx
00000000000026d6         mov        byte [rax], 0x5c

                     loc_26d9:
00000000000026d9         movzx      eax, byte [r12+1]                           ; CODE XREF=print_esc+1063
00000000000026df         test       al, al
00000000000026e1         je         loc_2698

00000000000026e3         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000026ea         mov        rdx, qword [rdi+0x28]
00000000000026ee         cmp        rdx, qword [rdi+0x30]
00000000000026f2         jae        loc_2a4c

00000000000026f8         lea        rcx, qword [rdx+1]
00000000000026fc         mov        qword [rdi+0x28], rcx
0000000000002700         mov        byte [rdx], al

                     loc_2702:
0000000000002702         lea        rbx, qword [r12+2]                          ; CODE XREF=print_esc+1076
0000000000002707         jmp        loc_2698
0000000000002709         align      16

                     loc_2710:
0000000000002710         lea        rbp, qword [rdi+2]                          ; CODE XREF=print_esc+22
0000000000002714         lea        rbx, qword [r12+4]
0000000000002719         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000271e         mov        r8, qword [rax]
0000000000002721         mov        rdi, rbp
0000000000002724         xor        esi, esi
0000000000002726         mov        r10d, ebp

                     loc_2729:
0000000000002729         movsx      edx, byte [rdi]                             ; CODE XREF=print_esc+308
000000000000272c         movzx      ecx, dl
000000000000272f         mov        eax, edx
0000000000002731         test       byte [r8+rcx*2+1], 0x10
0000000000002737         je         loc_2a10

000000000000273d         lea        ecx, dword [rax-0x61]
0000000000002740         shl        esi, 0x4
0000000000002743         cmp        cl, 0x5
0000000000002746         ja         loc_2780

0000000000002748         sub        edx, 0x57

                     loc_274b:
000000000000274b         add        rdi, 0x1                                    ; CODE XREF=print_esc+370
000000000000274f         add        esi, edx
0000000000002751         cmp        rdi, rbx
0000000000002754         jne        loc_2729

                     loc_2756:
0000000000002756         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_esc+1016
000000000000275d         mov        rax, qword [rdi+0x28]
0000000000002761         cmp        rax, qword [rdi+0x30]
0000000000002765         jae        loc_2a20

000000000000276b         lea        rdx, qword [rax+1]
000000000000276f         mov        qword [rdi+0x28], rdx
0000000000002773         mov        byte [rax], sil
0000000000002776         jmp        loc_2698
000000000000277b         align      128

                     loc_2780:
0000000000002780         lea        r9d, dword [rdx-0x37]                       ; CODE XREF=print_esc+294
0000000000002784         lea        ecx, dword [rdx-0x30]
0000000000002787         sub        eax, 0x41
000000000000278a         cmp        al, 0x5
000000000000278c         mov        edx, r9d
000000000000278f         cmova      edx, ecx
0000000000002792         jmp        loc_274b
0000000000002794         align      8

                     loc_2798:
0000000000002798         movsx      ebp, r13b                                   ; CODE XREF=print_esc+147
000000000000279c         lea        rdi, qword [aAbcefnrtv]                     ; argument "__s" for method j_strchr, "\\\"\\abcefnrtv"
00000000000027a3         mov        esi, ebp                                    ; argument "__c" for method j_strchr
00000000000027a5         call       j_strchr                                    ; strchr
00000000000027aa         test       rax, rax
00000000000027ad         je         loc_27d8

00000000000027af         lea        eax, dword [r13-0x61]
00000000000027b3         lea        rbx, qword [r12+2]
00000000000027b8         cmp        al, 0x15
00000000000027ba         ja         loc_29e7

00000000000027c0         lea        rdx, qword [switch_table_8ce8]              ; switch_table_8ce8
00000000000027c7         movzx      eax, al
00000000000027ca         movsxd     rax, dword [rdx+rax*4]
00000000000027ce         add        rax, rdx
00000000000027d1         jmp        rax                                         ; switch statement using table at 0x8ce8, with 22 cases, 0x28b8,0x28dd,0x2902,0x2927,0x294c,0x2971,0x2996,0x299d,0x29c2,0x29e7
00000000000027d3         align      8

                     loc_27d8:
00000000000027d8         mov        eax, r13d                                   ; CODE XREF=print_esc+397
00000000000027db         and        eax, 0xffffffdf
00000000000027de         cmp        al, 0x55
00000000000027e0         jne        loc_26b9

00000000000027e6         cmp        r13b, 0x75
00000000000027ea         lea        rbx, qword [r12+2]
00000000000027ef         setne      r13b
00000000000027f3         movzx      r13d, r13b
00000000000027f7         lea        r13d, dword [0x4+r13*4]
00000000000027ff         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000002804         mov        rsi, qword [rax]
0000000000002807         lea        eax, dword [r13-1]
000000000000280b         xor        r9d, r9d
000000000000280e         lea        rdi, qword [rbx+rax+1]
0000000000002813         jmp        loc_2827
0000000000002815         align      8

                     loc_2818:
0000000000002818         sub        edx, 0x57                                   ; CODE XREF=print_esc+548
000000000000281b         add        rbx, 0x1
000000000000281f         add        r9d, edx
0000000000002822         cmp        rbx, rdi
0000000000002825         je         loc_2864

                     loc_2827:
0000000000002827         movsx      edx, byte [rbx]                             ; CODE XREF=print_esc+499, print_esc+578
000000000000282a         movzx      ecx, dl
000000000000282d         mov        eax, edx
000000000000282f         test       byte [rsi+rcx*2+1], 0x10
0000000000002834         je         loc_2a68

000000000000283a         lea        ecx, dword [rdx-0x61]
000000000000283d         shl        r9d, 0x4
0000000000002841         cmp        cl, 0x5
0000000000002844         jbe        loc_2818

0000000000002846         lea        r8d, dword [rdx-0x37]
000000000000284a         lea        ecx, dword [rdx-0x30]
000000000000284d         sub        eax, 0x41
0000000000002850         cmp        al, 0x5
0000000000002852         mov        edx, r8d
0000000000002855         cmova      edx, ecx
0000000000002858         add        rbx, 0x1
000000000000285c         add        r9d, edx
000000000000285f         cmp        rbx, rdi
0000000000002862         jne        loc_2827

                     loc_2864:
0000000000002864         cmp        r9d, 0x9f                                   ; CODE XREF=print_esc+517
000000000000286b         ja         loc_2882

000000000000286d         cmp        r9d, 0x24
0000000000002871         je         loc_2882

0000000000002873         mov        eax, r9d
0000000000002876         and        eax, 0xffffffdf
0000000000002879         cmp        eax, 0x40
000000000000287c         jne        loc_2b03

                     loc_2882:
0000000000002882         lea        eax, dword [r9-0xd800]                      ; CODE XREF=print_esc+587, print_esc+593
0000000000002889         cmp        eax, 0x7ff
000000000000288e         jbe        loc_2b03

0000000000002894         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000289b         xor        edx, edx
000000000000289d         mov        esi, r9d
00000000000028a0         call       print_unicode_char                          ; print_unicode_char
00000000000028a5         jmp        loc_2698
00000000000028aa         align      16

                     loc_28b0:
00000000000028b0         mov        rbx, rsi                                    ; CODE XREF=print_esc+70
00000000000028b3         jmp        loc_2679

                     loc_28b8:
00000000000028b8         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 21, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
00000000000028bf         mov        rax, qword [rdi+0x28]
00000000000028c3         cmp        rax, qword [rdi+0x30]
00000000000028c7         jae        loc_2ac8

00000000000028cd         lea        rdx, qword [rax+1]
00000000000028d1         mov        qword [rdi+0x28], rdx
00000000000028d5         mov        byte [rax], 0xb
00000000000028d8         jmp        loc_2698

                     loc_28dd:
00000000000028dd         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 19, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
00000000000028e4         mov        rax, qword [rdi+0x28]
00000000000028e8         cmp        rax, qword [rdi+0x30]
00000000000028ec         jae        loc_2a8c

00000000000028f2         lea        rdx, qword [rax+1]
00000000000028f6         mov        qword [rdi+0x28], rdx
00000000000028fa         mov        byte [rax], 0x9
00000000000028fd         jmp        loc_2698

                     loc_2902:
0000000000002902         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 4, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
0000000000002909         mov        rax, qword [rdi+0x28]
000000000000290d         cmp        rax, qword [rdi+0x30]
0000000000002911         jae        loc_2ae6

0000000000002917         lea        rdx, qword [rax+1]
000000000000291b         mov        qword [rdi+0x28], rdx
000000000000291f         mov        byte [rax], 0x1b
0000000000002922         jmp        loc_2698

                     loc_2927:
0000000000002927         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 13, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
000000000000292e         mov        rax, qword [rdi+0x28]
0000000000002932         cmp        rax, qword [rdi+0x30]
0000000000002936         jae        loc_2aaa

000000000000293c         lea        rdx, qword [rax+1]
0000000000002940         mov        qword [rdi+0x28], rdx
0000000000002944         mov        byte [rax], 0xa
0000000000002947         jmp        loc_2698

                     loc_294c:
000000000000294c         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 1, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
0000000000002953         mov        rax, qword [rdi+0x28]
0000000000002957         cmp        rax, qword [rdi+0x30]
000000000000295b         jae        loc_2ad7

0000000000002961         lea        rdx, qword [rax+1]
0000000000002965         mov        qword [rdi+0x28], rdx
0000000000002969         mov        byte [rax], 0x8
000000000000296c         jmp        loc_2698

                     loc_2971:
0000000000002971         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 17, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
0000000000002978         mov        rax, qword [rdi+0x28]
000000000000297c         cmp        rax, qword [rdi+0x30]
0000000000002980         jae        loc_2a9b

0000000000002986         lea        rdx, qword [rax+1]
000000000000298a         mov        qword [rdi+0x28], rdx
000000000000298e         mov        byte [rax], 0xd
0000000000002991         jmp        loc_2698

                     loc_2996:
0000000000002996         xor        edi, edi                                    ; case 2, argument "__status" for method j_exit, CODE XREF=print_esc+433
0000000000002998         call       j_exit                                      ; exit
                        ; endp

                     loc_299d:
000000000000299d         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 5, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
00000000000029a4         mov        rax, qword [rdi+0x28]
00000000000029a8         cmp        rax, qword [rdi+0x30]
00000000000029ac         jae        loc_2ab9

00000000000029b2         lea        rdx, qword [rax+1]
00000000000029b6         mov        qword [rdi+0x28], rdx
00000000000029ba         mov        byte [rax], 0xc
00000000000029bd         jmp        loc_2698

                     loc_29c2:
00000000000029c2         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 0, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+433
00000000000029c9         mov        rax, qword [rdi+0x28]
00000000000029cd         cmp        rax, qword [rdi+0x30]
00000000000029d1         jae        loc_2a59

00000000000029d7         lea        rdx, qword [rax+1]
00000000000029db         mov        qword [rdi+0x28], rdx
00000000000029df         mov        byte [rax], 0x7
00000000000029e2         jmp        loc_2698

                     loc_29e7:
00000000000029e7         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 20, stdout@@GLIBC_2.2.5, CODE XREF=print_esc+410, print_esc+433
00000000000029ee         mov        rax, qword [rdi+0x28]
00000000000029f2         cmp        rax, qword [rdi+0x30]
00000000000029f6         jae        loc_2af5

00000000000029fc         lea        rdx, qword [rax+1]
0000000000002a00         mov        qword [rdi+0x28], rdx
0000000000002a04         mov        byte [rax], r13b
0000000000002a07         jmp        loc_2698
0000000000002a0c         align      16

                     loc_2a10:
0000000000002a10         cmp        r10d, edi                                   ; CODE XREF=print_esc+279
0000000000002a13         je         loc_2a68

0000000000002a15         mov        rbx, rdi
0000000000002a18         jmp        loc_2756
0000000000002a1d         align      32

                     loc_2a20:
0000000000002a20         movzx      esi, sil                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+325
0000000000002a24         call       j___overflow                                ; __overflow
0000000000002a29         jmp        loc_2698
0000000000002a2e         align      16

                     loc_2a30:
0000000000002a30         movzx      esi, dl                                     ; argument #2 for method j___overflow, CODE XREF=print_esc+104
0000000000002a33         call       j___overflow                                ; __overflow
0000000000002a38         jmp        loc_2698

                     loc_2a3d:
0000000000002a3d         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=print_esc+168
0000000000002a42         call       j___overflow                                ; __overflow
0000000000002a47         jmp        loc_26d9

                     loc_2a4c:
0000000000002a4c         movzx      esi, al                                     ; argument #2 for method j___overflow, CODE XREF=print_esc+210
0000000000002a4f         call       j___overflow                                ; __overflow
0000000000002a54         jmp        loc_2702

                     loc_2a59:
0000000000002a59         mov        esi, 0x7                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+945
0000000000002a5e         call       j___overflow                                ; __overflow
0000000000002a63         jmp        loc_2698

                     loc_2a68:
0000000000002a68         lea        rsi, qword [aMissingHexadec]                ; argument "msgid" for method j_dcgettext, "missing hexadecimal number in escape", CODE XREF=print_esc+532, print_esc+1011
0000000000002a6f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a74         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a76         call       j_dcgettext                                 ; dcgettext
0000000000002a7b         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002a7d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002a80         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002a85         xor        eax, eax
0000000000002a87         call       j_error                                     ; error

                     loc_2a8c:
0000000000002a8c         mov        esi, 0x9                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+716
0000000000002a91         call       j___overflow                                ; __overflow
0000000000002a96         jmp        loc_2698

                     loc_2a9b:
0000000000002a9b         mov        esi, 0xd                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+864
0000000000002aa0         call       j___overflow                                ; __overflow
0000000000002aa5         jmp        loc_2698

                     loc_2aaa:
0000000000002aaa         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+790
0000000000002aaf         call       j___overflow                                ; __overflow
0000000000002ab4         jmp        loc_2698

                     loc_2ab9:
0000000000002ab9         mov        esi, 0xc                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+908
0000000000002abe         call       j___overflow                                ; __overflow
0000000000002ac3         jmp        loc_2698

                     loc_2ac8:
0000000000002ac8         mov        esi, 0xb                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+679
0000000000002acd         call       j___overflow                                ; __overflow
0000000000002ad2         jmp        loc_2698

                     loc_2ad7:
0000000000002ad7         mov        esi, 0x8                                    ; argument #2 for method j___overflow, CODE XREF=print_esc+827
0000000000002adc         call       j___overflow                                ; __overflow
0000000000002ae1         jmp        loc_2698

                     loc_2ae6:
0000000000002ae6         mov        esi, 0x1b                                   ; argument #2 for method j___overflow, CODE XREF=print_esc+753
0000000000002aeb         call       j___overflow                                ; __overflow
0000000000002af0         jmp        loc_2698

                     loc_2af5:
0000000000002af5         movzx      esi, r13b                                   ; argument #2 for method j___overflow, CODE XREF=print_esc+982
0000000000002af9         call       j___overflow                                ; __overflow
0000000000002afe         jmp        loc_2698

                     loc_2b03:
0000000000002b03         lea        rsi, qword [aInvalidUnivers]                ; argument "msgid" for method j_dcgettext, "invalid universal character name \\%c%0*x", CODE XREF=print_esc+604, print_esc+622
0000000000002b0a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b0f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b11         mov        dword [rsp+0x38+var_2C], r9d
0000000000002b16         call       j_dcgettext                                 ; dcgettext
0000000000002b1b         mov        r9d, dword [rsp+0x38+var_2C]
0000000000002b20         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b23         mov        r8d, r13d
0000000000002b26         mov        ecx, ebp
0000000000002b28         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b2a         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b2f         xor        eax, eax
0000000000002b31         call       j_error                                     ; error
0000000000002b36         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x9dec)
                     verify_numeric:
0000000000002b40         push       r12                                         ; Begin of unwind block (FDE at 0x9e28), CODE XREF=main+2804, main+2894, vstrtoimax+81
0000000000002b42         push       rbp
0000000000002b43         mov        r12, rdi
0000000000002b46         push       rbx
0000000000002b47         mov        rbp, rsi
0000000000002b4a         call       j___errno_location                          ; __errno_location
0000000000002b4f         mov        edx, dword [rax]
0000000000002b51         test       edx, edx
0000000000002b53         jne        loc_2ba0

0000000000002b55         cmp        byte [rbp], 0x0
0000000000002b59         je         loc_2b99

0000000000002b5b         cmp        rbp, r12
0000000000002b5e         je         loc_2bd0

0000000000002b60         mov        rdi, r12
0000000000002b63         call       quote                                       ; quote
0000000000002b68         lea        rsi, qword [aSValueNotCompl]                ; "%s: value not completely converted"
0000000000002b6f         mov        rbx, rax
0000000000002b72         mov        edx, 0x5

                     loc_2b77:
0000000000002b77         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=verify_numeric+167
0000000000002b79         call       j_dcgettext                                 ; dcgettext
0000000000002b7e         mov        rcx, rbx
0000000000002b81         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b84         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b86         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002b88         xor        eax, eax
0000000000002b8a         call       j_error                                     ; error
0000000000002b8f         mov        dword [exit_status], 0x1                    ; exit_status

                     loc_2b99:
0000000000002b99         pop        rbx                                         ; CODE XREF=verify_numeric+25
0000000000002b9a         pop        rbp
0000000000002b9b         pop        r12
0000000000002b9d         ret
                        ; endp
0000000000002b9e         align      32

                     loc_2ba0:
0000000000002ba0         mov        rbx, rax                                    ; CODE XREF=verify_numeric+19
0000000000002ba3         mov        rdi, r12
0000000000002ba6         call       quote                                       ; quote
0000000000002bab         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000002bad         lea        rdx, qword [aInvalidFieldWi+21]             ; argument "__format" for method j_error, 0x8cce
0000000000002bb4         mov        rcx, rax
0000000000002bb7         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002bb9         xor        eax, eax
0000000000002bbb         call       j_error                                     ; error
0000000000002bc0         pop        rbx
0000000000002bc1         mov        dword [exit_status], 0x1                    ; exit_status
0000000000002bcb         pop        rbp
0000000000002bcc         pop        r12
0000000000002bce         ret
                        ; endp
0000000000002bcf         align      16

                     loc_2bd0:
0000000000002bd0         mov        rdi, rbp                                    ; CODE XREF=verify_numeric+30
0000000000002bd3         call       quote                                       ; quote
0000000000002bd8         mov        edx, 0x5
0000000000002bdd         mov        rbx, rax
0000000000002be0         lea        rsi, qword [aSExpectedANume]                ; "%s: expected a numeric value"
0000000000002be7         jmp        loc_2b77
0000000000002be9         align      16                                          ; End of unwind block (FDE at 0x9e28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     vstrtoimax:
0000000000002bf0         push       rbp                                         ; Begin of unwind block (FDE at 0x9e64), CODE XREF=main+2095, main+2601, main+2685
0000000000002bf1         push       rbx
0000000000002bf2         mov        rbx, rdi
0000000000002bf5         sub        rsp, 0x18
0000000000002bf9         mov        rax, qword [fs:0x28]
0000000000002c02         mov        qword [rsp+0x28+var_20], rax
0000000000002c07         xor        eax, eax
0000000000002c09         movzx      eax, byte [rdi]
0000000000002c0c         cmp        al, 0x22
0000000000002c0e         je         loc_2c14

0000000000002c10         cmp        al, 0x27
0000000000002c12         jne        loc_2c1d

                     loc_2c14:
0000000000002c14         movzx      ebp, byte [rbx+1]                           ; CODE XREF=vstrtoimax+30
0000000000002c18         test       bpl, bpl
0000000000002c1b         jne        loc_2c60

                     loc_2c1d:
0000000000002c1d         call       j___errno_location                          ; __errno_location, CODE XREF=vstrtoimax+34
0000000000002c22         mov        rsi, rsp
0000000000002c25         mov        rdi, rbx
0000000000002c28         mov        dword [rax], 0x0
0000000000002c2e         xor        ecx, ecx
0000000000002c30         xor        edx, edx
0000000000002c32         call       j___strtol_internal                         ; __strtol_internal
0000000000002c37         mov        rsi, qword [rsp+0x28+var_28]
0000000000002c3b         mov        rdi, rbx
0000000000002c3e         mov        rbp, rax
0000000000002c41         call       verify_numeric                              ; verify_numeric

                     loc_2c46:
0000000000002c46         mov        rdx, qword [rsp+0x28+var_20]                ; CODE XREF=vstrtoimax+116, vstrtoimax+125, vstrtoimax+164
0000000000002c4b         xor        rdx, qword [fs:0x28]
0000000000002c54         mov        rax, rbp
0000000000002c57         jne        loc_2c96

0000000000002c59         add        rsp, 0x18
0000000000002c5d         pop        rbx
0000000000002c5e         pop        rbp
0000000000002c5f         ret
                        ; endp

                     loc_2c60:
0000000000002c60         cmp        byte [rbx+2], 0x0                           ; CODE XREF=vstrtoimax+43
0000000000002c64         je         loc_2c46

0000000000002c66         cmp        byte [posixly_correct], 0x0                 ; posixly_correct
0000000000002c6d         jne        loc_2c46

0000000000002c6f         lea        rsi, qword [aWarningSCharac]                ; argument "msgid" for method j_dcgettext, "warning: %s: character(s) following character constant have been ignored"
0000000000002c76         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c78         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c7d         call       j_dcgettext                                 ; dcgettext
0000000000002c82         lea        rcx, qword [rbx+2]
0000000000002c86         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c89         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c8b         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002c8d         xor        eax, eax
0000000000002c8f         call       j_error                                     ; error
0000000000002c94         jmp        loc_2c46

                     loc_2c96:
0000000000002c96         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vstrtoimax+103
                        ; endp
0000000000002c9b         align      32                                          ; End of unwind block (FDE at 0x9e64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000002ca0         push       r13                                         ; Begin of unwind block (FDE at 0x9e90), CODE XREF=main+1891, main+3484
0000000000002ca2         push       r12
0000000000002ca4         mov        edx, 0x5
0000000000002ca9         push       rbp
0000000000002caa         push       rbx
0000000000002cab         mov        ebp, edi
0000000000002cad         sub        rsp, 0x88
0000000000002cb4         mov        rbx, qword [program_name]                   ; program_name
0000000000002cbb         mov        rax, qword [fs:0x28]
0000000000002cc4         mov        qword [rsp+0xa8+var_30], rax
0000000000002cc9         xor        eax, eax
0000000000002ccb         test       edi, edi
0000000000002ccd         je         loc_2cfd

0000000000002ccf         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002cd6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cd8         call       j_dcgettext                                 ; dcgettext
0000000000002cdd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002ce4         mov        rdx, rax
0000000000002ce7         mov        rcx, rbx
0000000000002cea         mov        esi, 0x1
0000000000002cef         xor        eax, eax
0000000000002cf1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2cf6:
0000000000002cf6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+830
0000000000002cf8         call       j_exit                                      ; exit
                        ; endp

                     loc_2cfd:
0000000000002cfd         lea        rsi, qword [aUsageSFormatAr]                ; argument "msgid" for method j_dcgettext, "Usage: %s FORMAT [ARGUMENT]...\\n  or:  %s OPTION\\n", CODE XREF=usage+45
0000000000002d04         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d06         call       j_dcgettext                                 ; dcgettext
0000000000002d0b         mov        rcx, rbx
0000000000002d0e         mov        rdx, rbx
0000000000002d11         mov        rsi, rax
0000000000002d14         mov        edi, 0x1
0000000000002d19         xor        eax, eax
0000000000002d1b         call       j___printf_chk                              ; __printf_chk
0000000000002d20         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002d27         lea        rsi, qword [aPrintArguments]                ; argument "msgid" for method j_dcgettext, "Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:\\n\\n"
0000000000002d2e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d33         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d35         call       j_dcgettext                                 ; dcgettext
0000000000002d3a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002d3d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002d40         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002d45         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002d4c         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002d53         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d58         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d5a         call       j_dcgettext                                 ; dcgettext
0000000000002d5f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002d62         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002d65         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002d6a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002d71         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002d78         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d7d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d7f         call       j_dcgettext                                 ; dcgettext
0000000000002d84         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002d87         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002d8a         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002d8f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002d96         lea        rsi, qword [aNformatControl]                ; argument "msgid" for method j_dcgettext, "\\nFORMAT controls the output as in C printf.  Interpreted sequences are:\\n\\n  \\\\\"      double quote\\n"
0000000000002d9d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002da2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002da4         call       j_dcgettext                                 ; dcgettext
0000000000002da9         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002dac         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002daf         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002db4         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002dbb         lea        rsi, qword [aBackslashnAAle]                ; argument "msgid" for method j_dcgettext, "  \\\\      backslash\\n  \\a      alert (BEL)\\n  \\b      backspace\\n  \\c      produce no further output\\n  \\e      escape\\n  \\f      form feed\\n  \\n      new line\\n  \\r      carriage return\\n  \\t      horizontal tab\\n  \\v      vertical tab\\n"
0000000000002dc2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002dc7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002dc9         call       j_dcgettext                                 ; dcgettext
0000000000002dce         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002dd1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002dd4         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002dd9         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002de0         lea        rsi, qword [aNnnByteWithOct]                ; argument "msgid" for method j_dcgettext, "  \\NNN    byte with octal value NNN (1 to 3 digits)\\n  \\xHH    byte with hexadecimal value HH (1 to 2 digits)\\n  \\uHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)\\n  \\UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits)\\n"
0000000000002de7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002dec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002dee         call       j_dcgettext                                 ; dcgettext
0000000000002df3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002df6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002df9         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002dfe         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e05         lea        rsi, qword [aASingleNBArgum]                ; argument "msgid" for method j_dcgettext, "  %%      a single %\\n  %b      ARGUMENT as a string with '\\' escapes interpreted,\\n          except that octal escapes are of the form \\0 or \\0NNN\\n  %q      ARGUMENT is printed in a format that can be reused as shell input,\\n          escaping non-printable …"
0000000000002e0c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e11         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e13         call       j_dcgettext                                 ; dcgettext
0000000000002e18         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e1b         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e1e         lea        rbx, qword [aPrintf]                        ; "printf"
0000000000002e25         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e2a         lea        rsi, qword [aNnoteYourShell]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n"
0000000000002e31         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e36         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e38         call       j_dcgettext                                 ; dcgettext
0000000000002e3d         lea        rdx, qword [aPrintf]                        ; "printf"
0000000000002e44         mov        rsi, rax
0000000000002e47         mov        edi, 0x1
0000000000002e4c         xor        eax, eax
0000000000002e4e         call       j___printf_chk                              ; __printf_chk
0000000000002e53         lea        rax, qword [aPrintf+7]                      ; 0x8bb5
0000000000002e5a         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000002e61         mov        qword [rsp+0xa8+var_48], 0x0
0000000000002e6a         mov        qword [rsp+0xa8+var_40], 0x0
0000000000002e73         mov        rdx, rsp
0000000000002e76         mov        qword [rsp+0xa8+var_A8], rax
0000000000002e7a         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002e81         mov        qword [rsp+0xa8+var_78], rcx
0000000000002e86         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000002e8d         mov        qword [rsp+0xa8+var_A0], rax
0000000000002e92         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000002e99         mov        qword [rsp+0xa8+var_68], rcx
0000000000002e9e         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000002ea5         mov        qword [rsp+0xa8+var_98], rax
0000000000002eaa         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000002eb1         mov        qword [rsp+0xa8+var_58], rcx
0000000000002eb6         mov        qword [rsp+0xa8+var_90], rax
0000000000002ebb         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000002ec2         mov        qword [rsp+0xa8+var_88], rax
0000000000002ec7         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000002ece         mov        qword [rsp+0xa8+var_80], rax
0000000000002ed3         mov        qword [rsp+0xa8+var_70], rax
0000000000002ed8         mov        qword [rsp+0xa8+var_60], rax
0000000000002edd         mov        qword [rsp+0xa8+var_50], rax
0000000000002ee2         nop        word [rax+rax]

                     loc_2ee8:
0000000000002ee8         add        rdx, 0x10                                   ; CODE XREF=usage+613
0000000000002eec         mov        rdi, qword [rdx]
0000000000002eef         test       rdi, rdi
0000000000002ef2         je         loc_2f07

0000000000002ef4         mov        ecx, 0x7
0000000000002ef9         mov        rsi, rbx
0000000000002efc         rep  cmpsb byte [rsi], byte [rdi]
0000000000002efe         seta       al
0000000000002f01         sbb        al, 0x0
0000000000002f03         test       al, al
0000000000002f05         jne        loc_2ee8

                     loc_2f07:
0000000000002f07         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+594
0000000000002f0b         xor        edi, edi
0000000000002f0d         mov        edx, 0x5
0000000000002f12         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002f19         test       r12, r12
0000000000002f1c         je         loc_2fe3

0000000000002f22         call       j_dcgettext                                 ; dcgettext
0000000000002f27         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002f2e         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8c2b
0000000000002f35         mov        rsi, rax
0000000000002f38         mov        edi, 0x1
0000000000002f3d         xor        eax, eax
0000000000002f3f         call       j___printf_chk                              ; __printf_chk
0000000000002f44         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002f46         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002f4b         call       j_setlocale                                 ; setlocale
0000000000002f50         test       rax, rax
0000000000002f53         je         loc_2f71

0000000000002f55         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x8c39
0000000000002f5c         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002f61         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002f64         call       j_strncmp                                   ; strncmp
0000000000002f69         test       eax, eax
0000000000002f6b         jne        loc_3078

                     loc_2f71:
0000000000002f71         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+691, usage+1021
0000000000002f78         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f7a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f7f         call       j_dcgettext                                 ; dcgettext
0000000000002f84         lea        rcx, qword [aPrintf]                        ; "printf"
0000000000002f8b         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002f92         mov        rsi, rax
0000000000002f95         mov        edi, 0x1
0000000000002f9a         xor        eax, eax
0000000000002f9c         call       j___printf_chk                              ; __printf_chk
0000000000002fa1         cmp        r12, rbx
0000000000002fa4         lea        rcx, qword [aMulticallInvoc+10]             ; 0x8bd1
0000000000002fab         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x9512
0000000000002fb2         cmove      rbx, rcx

                     loc_2fb6:
0000000000002fb6         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+972
0000000000002fbd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fbf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fc4         call       j_dcgettext                                 ; dcgettext
0000000000002fc9         mov        rcx, rbx
0000000000002fcc         mov        rsi, rax
0000000000002fcf         mov        rdx, r12
0000000000002fd2         mov        edi, 0x1
0000000000002fd7         xor        eax, eax
0000000000002fd9         call       j___printf_chk                              ; __printf_chk
0000000000002fde         jmp        loc_2cf6

                     loc_2fe3:
0000000000002fe3         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+636
0000000000002fe8         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002fef         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8c2b
0000000000002ff6         mov        rsi, rax
0000000000002ff9         mov        edi, 0x1
0000000000002ffe         xor        eax, eax
0000000000003000         call       j___printf_chk                              ; __printf_chk
0000000000003005         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000003007         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
000000000000300c         call       j_setlocale                                 ; setlocale
0000000000003011         test       rax, rax
0000000000003014         je         loc_302e

0000000000003016         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x8c39
000000000000301d         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000003022         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000003025         call       j_strncmp                                   ; strncmp
000000000000302a         test       eax, eax
000000000000302c         jne        loc_3071

                     loc_302e:
000000000000302e         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+884
0000000000003035         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000303a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000303c         lea        r12, qword [aPrintf]                        ; "printf"
0000000000003043         lea        rbx, qword [aMulticallInvoc+10]             ; 0x8bd1
000000000000304a         call       j_dcgettext                                 ; dcgettext
000000000000304f         lea        rcx, qword [aPrintf]                        ; "printf"
0000000000003056         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000305d         mov        rsi, rax
0000000000003060         mov        edi, 0x1
0000000000003065         xor        eax, eax
0000000000003067         call       j___printf_chk                              ; __printf_chk
000000000000306c         jmp        loc_2fb6

                     loc_3071:
0000000000003071         lea        r12, qword [aPrintf]                        ; "printf", CODE XREF=usage+908

                     loc_3078:
0000000000003078         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+715
000000000000307f         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000003086         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003088         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000308d         call       j_dcgettext                                 ; dcgettext
0000000000003092         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003095         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003098         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000309d         jmp        loc_2f71
00000000000030a2         align      16                                          ; End of unwind block (FDE at 0x9e90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_58: -88


                     cl_strtold:
00000000000030b0         push       r13                                         ; Begin of unwind block (FDE at 0x9f44), CODE XREF=main+2877
00000000000030b2         push       r12
00000000000030b4         push       rbp
00000000000030b5         push       rbx
00000000000030b6         mov        rbx, rsi
00000000000030b9         mov        rbp, rdi
00000000000030bc         sub        rsp, 0x38
00000000000030c0         lea        rsi, qword [rsp+0x58+var_40]                ; argument "__endptr" for method j_strtold
00000000000030c5         mov        rax, qword [fs:0x28]
00000000000030ce         mov        qword [rsp+0x58+var_30], rax
00000000000030d3         xor        eax, eax
00000000000030d5         call       j_strtold                                   ; strtold
00000000000030da         mov        rax, qword [rsp+0x58+var_40]
00000000000030df         fld        st0
00000000000030e1         cmp        byte [rax], 0x0
00000000000030e4         jne        loc_3110

00000000000030e6         fstp       st1

                     loc_30e8:
00000000000030e8         test       rbx, rbx                                    ; CODE XREF=cl_strtold+147, cl_strtold+158
00000000000030eb         je         loc_30f5

00000000000030ed         mov        rax, qword [rsp+0x58+var_40]
00000000000030f2         mov        qword [rbx], rax

                     loc_30f5:
00000000000030f5         mov        rax, qword [rsp+0x58+var_30]                ; CODE XREF=cl_strtold+59
00000000000030fa         xor        rax, qword [fs:0x28]
0000000000003103         jne        loc_3150

0000000000003105         add        rsp, 0x38
0000000000003109         pop        rbx
000000000000310a         pop        rbp
000000000000310b         pop        r12
000000000000310d         pop        r13
000000000000310f         ret
                        ; endp

                     loc_3110:
0000000000003110         fstp       st0                                         ; CODE XREF=cl_strtold+52
0000000000003112         fstp       tword [rsp+0x58+var_58]
0000000000003115         call       j___errno_location                          ; __errno_location
000000000000311a         lea        rsi, qword [rsp+0x58+var_38]
000000000000311f         mov        rdi, rbp
0000000000003122         mov        r12, rax
0000000000003125         mov        r13d, dword [rax]
0000000000003128         call       c_strtold                                   ; c_strtold
000000000000312d         mov        rax, qword [rsp+0x58+var_38]
0000000000003132         cmp        qword [rsp+0x58+var_40], rax
0000000000003137         fld        tword [rsp+0x58+var_58]
000000000000313a         jae        loc_3148

000000000000313c         fstp       st0
000000000000313e         mov        qword [rsp+0x58+var_40], rax
0000000000003143         jmp        loc_30e8
0000000000003145         align      8

                     loc_3148:
0000000000003148         fstp       st1                                         ; CODE XREF=cl_strtold+138
000000000000314a         mov        dword [r12], r13d
000000000000314e         jmp        loc_30e8

                     loc_3150:
0000000000003150         fstp       st0                                         ; CODE XREF=cl_strtold+83
0000000000003152         call       j___stack_chk_fail                          ; __stack_chk_fail
                        ; endp
0000000000003157         align      32                                          ; End of unwind block (FDE at 0x9f44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000003160         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x9f84), file_name
0000000000003167         ret
                        ; endp
0000000000003168         align      16                                          ; End of unwind block (FDE at 0x9f84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000003170         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x9f98), ignore_EPIPE
0000000000003177         ret
                        ; endp
0000000000003178         align      128                                         ; End of unwind block (FDE at 0x9f98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000003180         push       rbp                                         ; Begin of unwind block (FDE at 0x9fac), DATA XREF=main+97
0000000000003181         push       rbx
0000000000003182         sub        rsp, 0x8
0000000000003186         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000318d         call       close_stream                                ; close_stream
0000000000003192         test       eax, eax
0000000000003194         je         loc_31ac

0000000000003196         call       j___errno_location                          ; __errno_location
000000000000319b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
00000000000031a2         mov        rbx, rax
00000000000031a5         je         loc_31c3

00000000000031a7         cmp        dword [rax], 0x20
00000000000031aa         jne        loc_31c3

                     loc_31ac:
00000000000031ac         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
00000000000031b3         call       close_stream                                ; close_stream
00000000000031b8         test       eax, eax
00000000000031ba         jne        loc_3202

00000000000031bc         add        rsp, 0x8
00000000000031c0         pop        rbx
00000000000031c1         pop        rbp
00000000000031c2         ret
                        ; endp

                     loc_31c3:
00000000000031c3         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
00000000000031ca         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000031cc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000031d1         call       j_dcgettext                                 ; dcgettext
00000000000031d6         mov        rdi, qword [file_name]                      ; file_name
00000000000031dd         mov        rbp, rax
00000000000031e0         test       rdi, rdi
00000000000031e3         je         loc_320d

00000000000031e5         call       quotearg_colon                              ; quotearg_colon
00000000000031ea         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000031ec         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
00000000000031f3         mov        rcx, rax
00000000000031f6         mov        r8, rbp
00000000000031f9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000031fb         xor        eax, eax
00000000000031fd         call       j_error                                     ; error

                     loc_3202:
0000000000003202         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003208         call       j__exit                                     ; _exit
                        ; endp

                     loc_320d:
000000000000320d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000320f         lea        rdx, qword [aInvalidFieldWi+21]             ; argument "__format" for method j_error, 0x8cce
0000000000003216         mov        rcx, rax
0000000000003219         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000321b         xor        eax, eax
000000000000321d         call       j_error                                     ; error
0000000000003222         jmp        loc_3202
0000000000003224         align      16                                          ; End of unwind block (FDE at 0x9fac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003230         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x9fdc), CODE XREF=main+44
0000000000003233         push       rbx
0000000000003234         je         loc_32ad

0000000000003236         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000323b         mov        rbx, rdi
000000000000323e         call       j_strrchr                                   ; strrchr
0000000000003243         test       rax, rax
0000000000003246         je         loc_329d

0000000000003248         lea        r8, qword [rax+1]
000000000000324c         mov        rdx, r8
000000000000324f         sub        rdx, rbx
0000000000003252         cmp        rdx, 0x6
0000000000003256         jle        loc_329d

0000000000003258         lea        rsi, qword [rax-6]
000000000000325c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000003263         mov        ecx, 0x7
0000000000003268         rep  cmpsb byte [rsi], byte [rdi]
000000000000326a         seta       dl
000000000000326d         sbb        dl, 0x0
0000000000003270         test       dl, dl
0000000000003272         jne        loc_329d

0000000000003274         lea        rdi, qword [aLibs+8]                        ; 0x8f20
000000000000327b         mov        ecx, 0x3
0000000000003280         mov        rsi, r8
0000000000003283         mov        rbx, r8
0000000000003286         rep  cmpsb byte [rsi], byte [rdi]
0000000000003288         seta       dl
000000000000328b         sbb        dl, 0x0
000000000000328e         test       dl, dl
0000000000003290         jne        loc_329d

0000000000003292         lea        rbx, qword [rax+4]
0000000000003296         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_329d:
000000000000329d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000032a4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000032ab         pop        rbx
00000000000032ac         ret
                        ; endp

                     loc_32ad:
00000000000032ad         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000032b4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000032bb         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000032c0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000032c5         call       j_fwrite                                    ; fwrite
00000000000032ca         call       j_abort                                     ; abort
                        ; endp
00000000000032cf         align      16                                          ; End of unwind block (FDE at 0x9fdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000032d0         push       rbp                                         ; Begin of unwind block (FDE at 0x9ffc), CODE XREF=sub_3b00+2597, sub_3b00+2619
00000000000032d1         push       rbx
00000000000032d2         mov        rbp, rdi
00000000000032d5         mov        ebx, esi
00000000000032d7         sub        rsp, 0x8
00000000000032db         call       locale_charset                              ; locale_charset
00000000000032e0         movzx      edx, byte [rax]
00000000000032e3         and        edx, 0xffffffdf
00000000000032e6         cmp        dl, 0x55
00000000000032e9         je         loc_3360

00000000000032eb         cmp        dl, 0x47
00000000000032ee         je         loc_3310

                     loc_32f0:
00000000000032f0         lea        rax, qword [aLibs+27]                       ; 0x8f33, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
00000000000032f7         lea        rdx, qword [aLibs+29]                       ; 0x8f35
00000000000032fe         cmp        ebx, 0x9
0000000000003301         cmovne     rax, rdx
0000000000003305         add        rsp, 0x8
0000000000003309         pop        rbx
000000000000330a         pop        rbp
000000000000330b         ret
                        ; endp
000000000000330c         align      16

                     loc_3310:
0000000000003310         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003314         and        edx, 0xffffffdf
0000000000003317         cmp        dl, 0x42
000000000000331a         jne        loc_32f0

000000000000331c         cmp        byte [rax+2], 0x31
0000000000003320         jne        loc_32f0

0000000000003322         cmp        byte [rax+3], 0x38
0000000000003326         jne        loc_32f0

0000000000003328         cmp        byte [rax+4], 0x30
000000000000332c         jne        loc_32f0

000000000000332e         cmp        byte [rax+5], 0x33
0000000000003332         jne        loc_32f0

0000000000003334         cmp        byte [rax+6], 0x30
0000000000003338         jne        loc_32f0

000000000000333a         cmp        byte [rax+7], 0x0
000000000000333e         jne        loc_32f0

0000000000003340         cmp        byte [rbp], 0x60
0000000000003344         lea        rax, qword [aLibs+20]                       ; 0x8f2c
000000000000334b         lea        rdx, qword [aLibs+24]                       ; 0x8f30
0000000000003352         cmovne     rax, rdx
0000000000003356         add        rsp, 0x8
000000000000335a         pop        rbx
000000000000335b         pop        rbp
000000000000335c         ret
                        ; endp
000000000000335d         align      32

                     loc_3360:
0000000000003360         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000003364         and        edx, 0xffffffdf
0000000000003367         cmp        dl, 0x54
000000000000336a         jne        loc_32f0

000000000000336c         movzx      edx, byte [rax+2]
0000000000003370         and        edx, 0xffffffdf
0000000000003373         cmp        dl, 0x46
0000000000003376         jne        loc_32f0

000000000000337c         cmp        byte [rax+3], 0x2d
0000000000003380         jne        loc_32f0

0000000000003386         cmp        byte [rax+4], 0x38
000000000000338a         jne        loc_32f0

0000000000003390         cmp        byte [rax+5], 0x0
0000000000003394         jne        loc_32f0

000000000000339a         cmp        byte [rbp], 0x60
000000000000339e         lea        rax, qword [aLibs+12]                       ; 0x8f24
00000000000033a5         lea        rdx, qword [aLibs+16]                       ; 0x8f28
00000000000033ac         cmovne     rax, rdx
00000000000033b0         add        rsp, 0x8
00000000000033b4         pop        rbx
00000000000033b5         pop        rbp
00000000000033b6         ret
                        ; endp
00000000000033b7         align      64                                          ; End of unwind block (FDE at 0x9ffc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000033c0         push       r15                                         ; Begin of unwind block (FDE at 0xa040), CODE XREF=sub_3b00+1165, sub_3b00+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000033c2         push       r14
00000000000033c4         mov        r15d, r8d
00000000000033c7         push       r13
00000000000033c9         push       r12
00000000000033cb         mov        r14, rdi
00000000000033ce         push       rbp
00000000000033cf         push       rbx
00000000000033d0         mov        ebx, r9d
00000000000033d3         mov        r13, rsi
00000000000033d6         mov        rbp, rcx
00000000000033d9         and        ebx, 0x2
00000000000033dc         sub        rsp, 0xb8
00000000000033e3         mov        rax, qword [rsp+0xe8+arg_0]
00000000000033eb         mov        qword [rsp+0xe8+var_D8], rdx
00000000000033f0         mov        dword [rsp+0xe8+var_E0], r8d
00000000000033f5         mov        dword [rsp+0xe8+var_70], r9d
00000000000033fa         mov        qword [rsp+0xe8+var_C8], rax
00000000000033ff         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003407         mov        qword [rsp+0xe8+var_80], rax
000000000000340c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003414         mov        qword [rsp+0xe8+var_88], rax
0000000000003419         mov        rax, qword [fs:0x28]
0000000000003422         mov        qword [rsp+0xe8+var_40], rax
000000000000342a         xor        eax, eax
000000000000342c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003431         cmp        r15d, 0xa
0000000000003435         mov        qword [rsp+0xe8+var_90], rax
000000000000343a         ja         loc_45ef

0000000000003440         lea        rcx, qword [switch_table_8fa0]              ; switch_table_8fa0
0000000000003447         mov        edx, r15d
000000000000344a         movsxd     rax, dword [rcx+rdx*4]
000000000000344e         add        rax, rcx
0000000000003451         jmp        rax                                         ; switch statement using table at 0x8fa0, with 11 cases, 0x3453,0x4024,0x4080,0x40d5,0x411a,0x4154,0x41fa,0x4234,0x4428

                     loc_3453:
0000000000003453         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_3b00+1318
0000000000003458         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000345d         xor        r12d, r12d
0000000000003460         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003469         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000346e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_3473:
0000000000003473         lea        rax, qword [aLibs+29]                       ; 0x8f35, CODE XREF=sub_3b00+1876
000000000000347a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003483         xor        r15d, r15d
0000000000003486         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000348e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_3493:
0000000000003493         xor        r11d, r11d                                  ; CODE XREF=sub_3b00+180, sub_3b00+1400, sub_3b00+1488, sub_3b00+1557, sub_3b00+1615, sub_3b00+1781, sub_3b00+1839, sub_3b00+2408, sub_3b00+2485
0000000000003496         mov        rax, rbp
0000000000003499         mov        r8d, r12d
000000000000349c         mov        rbp, r11
000000000000349f         mov        r11, rax
00000000000034a2         nop        word [rax+rax]

                     loc_34a8:
00000000000034a8         cmp        r11, rbp                                    ; CODE XREF=sub_35b0+194
00000000000034ab         setne      r12b
00000000000034af         cmp        r11, 0xffffffffffffffff
00000000000034b3         jne        loc_34c2

00000000000034b5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000034ba         cmp        byte [rax+rbp], 0x0
00000000000034be         setne      r12b

                     loc_34c2:
00000000000034c2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000034c5         je         loc_3b20

00000000000034cb         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000034d0         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000034d5         lea        r9, qword [rdi+rbp]
00000000000034d9         setne      al
00000000000034dc         and        al, byte [rsp+0xe8+var_DB]
00000000000034e0         mov        r10d, eax
00000000000034e3         je         loc_3590

00000000000034e9         mov        rax, qword [rsp+0xe8+var_D0]
00000000000034ee         test       rax, rax
00000000000034f1         je         loc_3920

00000000000034f7         cmp        r11, 0xffffffffffffffff
00000000000034fb         lea        rbx, qword [rbp+rax]
0000000000003500         jne        loc_3530

0000000000003502         cmp        rax, 0x1
0000000000003506         jbe        loc_3530

0000000000003508         mov        byte [rsp+0xe8+var_B0], r8b
000000000000350d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003512         mov        qword [rsp+0xe8+var_C0], r9
0000000000003517         call       j_strlen                                    ; strlen
000000000000351c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003522         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003528         mov        r11, rax
000000000000352b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3530:
0000000000003530         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003533         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003538         ja         loc_3af0

000000000000353e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003543         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003548         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000354b         mov        qword [rsp+0xe8+var_A8], r11
0000000000003550         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003555         mov        qword [rsp+0xe8+var_B8], r9
000000000000355a         call       j_memcmp                                    ; memcmp
000000000000355f         test       eax, eax
0000000000003561         mov        r9, qword [rsp+0xe8+var_B8]
0000000000003566         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000356c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000003571         jne        loc_3af0

0000000000003577         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000357c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003582         jne        loc_4505

0000000000003588         nop        dword [rax+rax]

                     loc_3590:
0000000000003590         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_3ae0+19
0000000000003594         cmp        bl, 0x7e
0000000000003597         ja         loc_38b8

000000000000359d         lea        rcx, qword [switch_table_8fa0+44]           ; 0x8fcc
00000000000035a4         movzx      edx, bl
00000000000035a7         movsxd     rax, dword [rcx+rdx*4]
00000000000035ab         add        rax, rcx
00000000000035ae         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_35b0:
00000000000035b0         xor        r10d, r10d
00000000000035b3         cmp        r11, 0x1
00000000000035b7         setne      al
00000000000035ba         cmp        r11, 0xffffffffffffffff
00000000000035be         jne        loc_35cc

00000000000035c0         mov        rax, qword [rsp+arg_8]
00000000000035c5         cmp        byte [rax+1], 0x0
00000000000035c9         setne      al

                     loc_35cc:
00000000000035cc         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_35b0+14
00000000000035d1         sete       dl
00000000000035d4         test       al, al
00000000000035d6         je         loc_3828

                     loc_35dc:
00000000000035dc         xor        r12d, r12d                                  ; CODE XREF=sub_3820+11
00000000000035df         xor        eax, eax
00000000000035e1         nop        dword [rax]
                        ; endp

                     loc_35e8:
00000000000035e8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_37d0+50, sub_38a0+119
00000000000035ed         jne        loc_3702

00000000000035f3         test       dl, dl
00000000000035f5         jne        loc_3702

                     loc_35fb:
00000000000035fb         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_36b0+87
0000000000003600         test       rsi, rsi
0000000000003603         je         loc_3619

0000000000003605         mov        edx, ebx
0000000000003607         shr        dl, 0x5
000000000000360a         movzx      edx, dl
000000000000360d         mov        edx, dword [rsi+rdx*4]
0000000000003610         bt         edx, ebx
0000000000003613         jb         loc_3763

                     loc_3619:
0000000000003619         test       r10b, r10b                                  ; CODE XREF=sub_35b0+83, sub_36b0+93
000000000000361c         jne        loc_3763

0000000000003622         xor        eax, 0x1
0000000000003625         add        rbp, 0x1
0000000000003629         and        eax, r8d

                     loc_362c:
000000000000362c         test       al, al                                      ; CODE XREF=sub_3b00+936
000000000000362e         je         loc_3650

0000000000003630         cmp        r13, r15
0000000000003633         jbe        loc_363a

0000000000003635         mov        byte [r14+r15], 0x27

                     loc_363a:
000000000000363a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_35b0+131
000000000000363e         cmp        r13, rax
0000000000003641         jbe        loc_3649

0000000000003643         mov        byte [r14+r15+1], 0x27

                     loc_3649:
0000000000003649         add        r15, 0x2                                    ; CODE XREF=sub_35b0+145
000000000000364d         xor        r8d, r8d

                     loc_3650:
0000000000003650         cmp        r15, r13                                    ; CODE XREF=sub_35b0+126, sub_36b0+275, sub_3b00+869
0000000000003653         jae        loc_3659

0000000000003655         mov        byte [r14+r15], bl

                     loc_3659:
0000000000003659         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_35b0+163
000000000000365e         add        r15, 0x1
0000000000003662         mov        eax, 0x0
0000000000003667         test       r12b, r12b
000000000000366a         cmove      edi, eax
000000000000366d         mov        byte [rsp+0xe8+var_DA], dil
0000000000003672         jmp        loc_34a8
0000000000003677         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3680:
0000000000003680         xor        r10d, r10d
0000000000003683         mov        eax, dword [rsp+arg_0]
0000000000003687         cmp        eax, 0x2
000000000000368a         je         loc_3c48

0000000000003690         cmp        eax, 0x5
0000000000003693         je         loc_3c08

0000000000003699         cmp        eax, 0x2
000000000000369c         mov        ebx, 0x3f
00000000000036a1         sete       dl
00000000000036a4         xor        r12d, r12d
00000000000036a7         xor        eax, eax
00000000000036a9         jmp        sub_35b0+56
                        ; endp
00000000000036ae         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_36b0:
00000000000036b0         xor        r10d, r10d
00000000000036b3         cmp        dword [rsp+arg_0], 0x2
00000000000036b8         je         loc_3bc0

00000000000036be         mov        byte [rsp+arg_74], r12b
00000000000036c3         xor        edx, edx
00000000000036c5         xor        eax, eax
00000000000036c7         mov        ebx, 0x27
00000000000036cc         jmp        sub_35b0+56
                        ; endp
00000000000036d1         nop        dword [rax]
00000000000036d8         mov        edx, 0x9
00000000000036dd         mov        ebx, 0x74

                     loc_36e2:
00000000000036e2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3870+10, sub_3960+37, sub_3aa0+53
00000000000036e7         sete       al
00000000000036ea         and        al, byte [rsp+arg_7]
00000000000036ee         jne        sub_3820+30

00000000000036f4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_36b0+114
00000000000036f9         jne        loc_3760

                     loc_36fb:
00000000000036fb         mov        ebx, edx                                    ; CODE XREF=sub_37d0+18
00000000000036fd         xor        r12d, r12d
0000000000003700         xor        eax, eax
                        ; endp

                     loc_3702:
0000000000003702         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_35b0+61, sub_35b0+69
0000000000003707         jne        loc_35fb

000000000000370d         jmp        loc_3619
0000000000003712         nop        word [rax+rax]
0000000000003718         mov        edx, 0x8
000000000000371d         mov        ebx, 0x62
0000000000003722         jmp        sub_36b0+68
0000000000003724         nop        dword [rax]
0000000000003728         cmp        dword [rsp+8], 0x2
000000000000372d         je         sub_3b00                                    ; sub_3b00
0000000000003733         cmp        byte [rsp+0xd], 0x0
0000000000003738         je         sub_3940+16

                     loc_373e:
000000000000373e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3940+8
0000000000003743         je         loc_3950

0000000000003749         cmp        qword [rsp+arg_10], 0x0
000000000000374f         jne        sub_3b00+11

0000000000003755         mov        ebx, 0x5c
000000000000375a         nop        word [rax+rax]
                        ; endp

                     loc_3760:
0000000000003760         xor        r12d, r12d                                  ; CODE XREF=sub_36b0+73, sub_3aa0+29
                        ; endp

                     loc_3763:
0000000000003763         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_35b0+99, sub_35b0+108
0000000000003768         sete       dl
000000000000376b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000003770         mov        eax, edx
0000000000003772         jne        loc_3fc8

0000000000003778         mov        eax, r8d
000000000000377b         xor        eax, 0x1
000000000000377e         and        al, dl
0000000000003780         je         loc_37b1

0000000000003782         cmp        r13, r15
0000000000003785         jbe        loc_378c

0000000000003787         mov        byte [r14+r15], 0x27

                     loc_378c:
000000000000378c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_36b0+213
0000000000003790         cmp        r13, rdx
0000000000003793         jbe        loc_379b

0000000000003795         mov        byte [r14+r15+1], 0x24

                     loc_379b:
000000000000379b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_36b0+227
000000000000379f         cmp        r13, rdx
00000000000037a2         jbe        loc_37aa

00000000000037a4         mov        byte [r14+r15+2], 0x27

                     loc_37aa:
00000000000037aa         add        r15, 0x3                                    ; CODE XREF=sub_36b0+242
00000000000037ae         mov        r8d, eax

                     loc_37b1:
00000000000037b1         cmp        r13, r15                                    ; CODE XREF=sub_36b0+208
00000000000037b4         jbe        loc_37bb

00000000000037b6         mov        byte [r14+r15], 0x5c

                     loc_37bb:
00000000000037bb         add        r15, 0x1                                    ; CODE XREF=sub_36b0+260
00000000000037bf         add        rbp, 0x1
00000000000037c3         jmp        loc_3650
00000000000037c8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_37d0:
00000000000037d0         cmp        byte [rsp+arg_5], 0x0
00000000000037d5         jne        loc_39a3

00000000000037db         xor        edx, edx
00000000000037dd         test       byte [rsp+arg_70], 0x1
00000000000037e2         je         loc_36fb

00000000000037e8         add        rbp, 0x1
00000000000037ec         jmp        quotearg_buffer_restyled+232
                        ; endp
00000000000037f1         nop        dword [rax]
00000000000037f8         cmp        dword [rsp+8], 0x2
00000000000037fd         sete       dl
0000000000003800         xor        eax, eax
0000000000003802         jmp        sub_35b0+56
0000000000003807         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3810:
0000000000003810         mov        edx, 0x7
0000000000003815         mov        ebx, 0x61
000000000000381a         jmp        sub_36b0+68
                        ; endp
000000000000381f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3820:
0000000000003820         cmp        dword [rsp+8], 0x2
0000000000003825         sete       dl
                        ; endp

                     loc_3828:
0000000000003828         test       rbp, rbp                                    ; CODE XREF=sub_35b0+38, sub_3a40+35
000000000000382b         jne        loc_35dc

0000000000003831         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_3a70+43
0000000000003836         and        al, dl
0000000000003838         je         sub_35b0+56

000000000000383e         mov        rbp, r11
0000000000003841         mov        dword [rsp+arg_0], 0x2
0000000000003849         jmp        sub_3b00+1097
                        ; endp
000000000000384e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3850:
0000000000003850         cmp        dword [rsp+arg_0], 0x2
0000000000003855         sete       dl
0000000000003858         xor        r12d, r12d
000000000000385b         jmp        sub_3820+17
                        ; endp
000000000000385d         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3860:
0000000000003860         cmp        dword [rsp+arg_0], 0x2
0000000000003865         mov        ebx, 0x20
000000000000386a         sete       dl
000000000000386d         jmp        sub_3820+17
                        ; endp
000000000000386f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3870:
0000000000003870         mov        edx, 0xd
0000000000003875         mov        ebx, 0x72
000000000000387a         jmp        loc_36e2
000000000000387f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3880:
0000000000003880         mov        edx, 0xc
0000000000003885         mov        ebx, 0x66
000000000000388a         jmp        sub_36b0+68
                        ; endp
000000000000388f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3890:
0000000000003890         mov        edx, 0xb
0000000000003895         mov        ebx, 0x76
000000000000389a         jmp        sub_36b0+68
                        ; endp
000000000000389f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_38a0:
00000000000038a0         mov        edx, 0xa
00000000000038a5         mov        ebx, 0x6e
00000000000038aa         jmp        sub_36b0+50
                        ; endp
00000000000038af         align      16

                     loc_38b0:
00000000000038b0         xor        r10d, r10d                                  ; CODE XREF=sub_38a0+135
00000000000038b3         nop        dword [rax+rax]

                     loc_38b8:
00000000000038b8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
00000000000038be         jne        loc_3c68

00000000000038c4         mov        qword [rsp+0xe8+var_B0], r11
00000000000038c9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000038ce         mov        byte [rsp+0xe8+var_C0], r10b
00000000000038d3         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000038d8         mov        rcx, qword [rax]
00000000000038db         movzx      edx, bl
00000000000038de         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000038e4         movzx      r8d, byte [rsp+0xe8+var_B8]
00000000000038ea         mov        r11, qword [rsp+0xe8+var_B0]
00000000000038ef         mov        edi, 0x1
00000000000038f4         movzx      eax, word [rcx+rdx*2]
00000000000038f8         and        ax, 0x4000
00000000000038fc         setne      r12b
0000000000003900         sete       al
0000000000003903         and        al, byte [rsp+0xe8+var_DB]

                     loc_3907:
0000000000003907         test       al, al                                      ; CODE XREF=sub_3b00+2221
0000000000003909         jne        loc_42a1

000000000000390f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003914         sete       dl
0000000000003917         jmp        loc_35e8
000000000000391c         align      32

                     loc_3920:
0000000000003920         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003924         cmp        bl, 0x7e
0000000000003927         ja         loc_38b0

0000000000003929         lea        rcx, qword [switch_table_8fa0+552]          ; 0x91c8
0000000000003930         movzx      edx, bl
0000000000003933         movsxd     rax, dword [rcx+rdx*4]
0000000000003937         add        rax, rcx
000000000000393a         jmp        rax
                        ; endp
000000000000393c         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3940:
0000000000003940         xor        r10d, r10d
0000000000003943         cmp        byte [rsp+arg_5], 0x0
0000000000003948         jne        loc_373e

000000000000394e         nop

                     loc_3950:
0000000000003950         mov        edx, 0x5c                                   ; CODE XREF=sub_36b0+136, sub_36b0+147
0000000000003955         mov        ebx, 0x5c
000000000000395a         jmp        sub_36b0+68
                        ; endp
000000000000395f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3960:
0000000000003960         mov        edx, 0xc
0000000000003965         xor        r10d, r10d
0000000000003968         mov        ebx, 0x66
000000000000396d         jmp        sub_36b0+68
                        ; endp
0000000000003972         nop        word [rax+rax]
0000000000003978         mov        edx, 0xa
000000000000397d         xor        r10d, r10d
0000000000003980         mov        ebx, 0x6e
0000000000003985         jmp        sub_36b0+50
000000000000398a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3990:
0000000000003990         mov        ebx, 0x61
0000000000003995         jmp        sub_36b0+176
                        ; endp
000000000000399a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39a0:
00000000000039a0         xor        r10d, r10d
                        ; endp

                     loc_39a3:
00000000000039a3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_37d0+5
00000000000039a8         sete       dl
00000000000039ab         cmp        byte [rsp+arg_7], 0x0
00000000000039b0         jne        loc_454a

00000000000039b6         mov        eax, r8d
00000000000039b9         mov        rcx, r15
00000000000039bc         xor        eax, 0x1
00000000000039bf         and        al, dl
00000000000039c1         je         loc_39f0

00000000000039c3         cmp        r13, r15
00000000000039c6         jbe        loc_39cd

00000000000039c8         mov        byte [r14+r15], 0x27

                     loc_39cd:
00000000000039cd         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_39a0+38
00000000000039d1         cmp        r13, rcx
00000000000039d4         jbe        loc_39dc

00000000000039d6         mov        byte [r14+r15+1], 0x24

                     loc_39dc:
00000000000039dc         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_39a0+52
00000000000039e0         cmp        r13, rcx
00000000000039e3         ja         loc_4019

                     loc_39e9:
00000000000039e9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_3b00+1311
00000000000039ed         mov        r8d, eax

                     loc_39f0:
00000000000039f0         cmp        r13, rcx                                    ; CODE XREF=sub_39a0+33
00000000000039f3         jbe        loc_39fa

00000000000039f5         mov        byte [r14+rcx], 0x5c

                     loc_39fa:
00000000000039fa         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_39a0+83
00000000000039ff         lea        r15, qword [rcx+1]
0000000000003a03         je         loc_4009

0000000000003a09         lea        rax, qword [rbp+1]
0000000000003a0d         cmp        rax, r11
0000000000003a10         jae        loc_3a2b

0000000000003a12         mov        rax, qword [rsp+arg_8]
0000000000003a17         movzx      eax, byte [rax+rbp+1]
0000000000003a1c         mov        byte [rsp+arg_20], al
0000000000003a20         sub        eax, 0x30
0000000000003a23         cmp        al, 0x9
0000000000003a25         jbe        loc_4259

                     loc_3a2b:
0000000000003a2b         mov        eax, r12d                                   ; CODE XREF=sub_39a0+112
0000000000003a2e         mov        ebx, 0x30
0000000000003a33         xor        r12d, r12d
0000000000003a36         jmp        sub_35b0+56
                        ; endp
0000000000003a3b         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3a40:
0000000000003a40         cmp        dword [rsp+arg_0], 0x2
0000000000003a45         mov        r12d, r10d
0000000000003a48         sete       dl
0000000000003a4b         xor        r10d, r10d
0000000000003a4e         xor        eax, eax
0000000000003a50         jmp        sub_35b0+56
                        ; endp
0000000000003a55         nop        dword [rax]
0000000000003a58         cmp        dword [rsp+8], 0x2
0000000000003a5d         sete       dl
0000000000003a60         xor        r10d, r10d
0000000000003a63         jmp        sub_3820+8
0000000000003a68         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a70:
0000000000003a70         cmp        dword [rsp+8], 0x2
0000000000003a75         sete       dl
0000000000003a78         xor        r10d, r10d
0000000000003a7b         xor        r12d, r12d
0000000000003a7e         jmp        sub_3820+17
                        ; endp
0000000000003a83         nop        dword [rax+rax]
0000000000003a88         cmp        dword [rsp+8], 0x2
0000000000003a8d         mov        r12d, r10d
0000000000003a90         mov        ebx, 0x20
0000000000003a95         sete       dl
0000000000003a98         xor        r10d, r10d
0000000000003a9b         jmp        sub_3820+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3aa0:
0000000000003aa0         mov        edx, 0xd
0000000000003aa5         xor        r10d, r10d
0000000000003aa8         mov        ebx, 0x72
0000000000003aad         jmp        sub_36b0+50
                        ; endp
0000000000003ab2         nop        word [rax+rax]
0000000000003ab8         mov        ebx, 0x76
0000000000003abd         jmp        sub_36b0+176
0000000000003ac2         nop        word [rax+rax]
0000000000003ac8         mov        edx, 0x9
0000000000003acd         xor        r10d, r10d
0000000000003ad0         mov        ebx, 0x74
0000000000003ad5         jmp        sub_36b0+50
0000000000003ada         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3ae0:
0000000000003ae0         mov        ebx, 0x62
0000000000003ae5         jmp        sub_36b0+176
                        ; endp
0000000000003aea         nop        word [rax+rax]

                     loc_3af0:
0000000000003af0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000003af3         jmp        loc_3590
0000000000003af8         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3b00:
0000000000003b00         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_36b0+125
0000000000003b05         jne        loc_4470

0000000000003b0b         add        rbp, 0x1
0000000000003b0f         mov        eax, r8d
0000000000003b12         xor        r12d, r12d
0000000000003b15         mov        ebx, 0x5c
0000000000003b1a         jmp        sub_35b0+124
                        ; endp
0000000000003b1f         align      32

                     loc_3b20:
0000000000003b20         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003b25         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000003b2a         mov        r12d, r8d
0000000000003b2d         mov        rbp, r11
0000000000003b30         sete       dl
0000000000003b33         mov        eax, ebx
0000000000003b35         test       r15, r15
0000000000003b38         sete       cl
0000000000003b3b         and        eax, edx
0000000000003b3d         and        al, cl
0000000000003b3f         jne        loc_45a6

0000000000003b45         mov        eax, ebx
0000000000003b47         xor        eax, 0x1
0000000000003b4a         and        dl, al
0000000000003b4c         je         loc_44bc

0000000000003b52         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003b57         je         loc_44ba

0000000000003b5d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003b62         jne        loc_455d

0000000000003b68         test       r13, r13
0000000000003b6b         sete       al
0000000000003b6e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003b74         setne      dl
0000000000003b77         and        al, dl
0000000000003b79         je         loc_459c

0000000000003b7f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3b84:
0000000000003b84         lea        rbx, qword [aLibs+29]                       ; 0x8f35, CODE XREF=sub_3b00+2781
0000000000003b8b         mov        byte [r14], 0x27
0000000000003b8f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003b97         mov        r15d, 0x1
0000000000003b9d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003ba6         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003bab         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003bb0         mov        byte [rsp+0xe8+var_6C], al
0000000000003bb4         jmp        loc_3493
0000000000003bb9         align      64

                     loc_3bc0:
0000000000003bc0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_36b0+8
0000000000003bc5         jne        sub_3b00+2416

0000000000003bcb         test       r13, r13
0000000000003bce         je         loc_3fd0

0000000000003bd4         xor        edx, edx
0000000000003bd6         cmp        qword [rsp+arg_48], 0x0
0000000000003bdc         jne        loc_3fd0

                     loc_3be2:
0000000000003be2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_3b00+1284, sub_3b00+2794
0000000000003be7         add        r15, 0x3
0000000000003beb         xor        eax, eax
0000000000003bed         mov        byte [rsp+arg_74], r12b
0000000000003bf2         xor        r8d, r8d
0000000000003bf5         mov        r13, rdx
0000000000003bf8         mov        ebx, 0x27
0000000000003bfd         jmp        sub_35b0+105
                        ; endp
0000000000003c02         align      8

                     loc_3c08:
0000000000003c08         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_3680+19
0000000000003c0d         je         loc_3c30

0000000000003c0f         lea        rcx, qword [rbp+2]
0000000000003c13         cmp        rcx, r11
0000000000003c16         jae        loc_3c30

0000000000003c18         mov        rax, qword [rsp+arg_8]
0000000000003c1d         cmp        byte [rax+rbp+1], 0x3f
0000000000003c22         je         loc_43b2

0000000000003c28         nop        dword [rax+rax]

                     loc_3c30:
0000000000003c30         xor        edx, edx                                    ; CODE XREF=sub_3b00+269, sub_3b00+278, sub_3b00+2233, sub_3b00+2253
0000000000003c32         xor        r12d, r12d
0000000000003c35         xor        eax, eax
0000000000003c37         mov        ebx, 0x3f
0000000000003c3c         jmp        sub_35b0+56
                        ; endp
0000000000003c41         align      8

                     loc_3c48:
0000000000003c48         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3680+10
0000000000003c4d         jne        sub_3b00+2416

0000000000003c53         xor        r12d, r12d
0000000000003c56         xor        eax, eax
0000000000003c58         mov        ebx, 0x3f
0000000000003c5d         jmp        sub_35b0+105
                        ; endp
0000000000003c62         align      8

                     loc_3c68:
0000000000003c68         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_38a0+30
0000000000003c70         cmp        r11, 0xffffffffffffffff
0000000000003c74         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003c80         mov        qword [rsp+0xe8+var_C0], rax
0000000000003c85         jne        loc_3cb4

0000000000003c87         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003c8c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003c91         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003c96         mov        qword [rsp+0xe8+var_B8], r9
0000000000003c9b         call       j_strlen                                    ; strlen
0000000000003ca0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003ca6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003cac         mov        r11, rax
0000000000003caf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_3cb4:
0000000000003cb4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3b00+389
0000000000003cbc         xor        ecx, ecx
0000000000003cbe         mov        byte [rsp+0xe8+var_6A], bl
0000000000003cc2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000003cc7         mov        rbx, rcx
0000000000003cca         mov        qword [rsp+0xe8+var_60], r9
0000000000003cd2         mov        qword [rsp+0xe8+var_B0], rax
0000000000003cd7         mov        byte [rsp+0xe8+var_69], r10b
0000000000003cdc         mov        qword [rsp+0xe8+var_68], r15
0000000000003ce4         mov        qword [rsp+0xe8+var_A8], r14
0000000000003ce9         mov        qword [rsp+0xe8+var_78], r13
0000000000003cee         mov        qword [rsp+0xe8+var_B8], r11

                     loc_3cf3:
0000000000003cf3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3b00+623
0000000000003cf8         lea        r14, qword [rbp+rbx]
0000000000003cfd         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000003d02         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000003d07         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000003d0c         lea        r13, qword [rax+r14]
0000000000003d10         sub        rdx, r14
0000000000003d13         mov        rsi, r13
0000000000003d16         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003d1b         test       rax, rax
0000000000003d1e         mov        r15, rax
0000000000003d21         je         loc_3d71

0000000000003d23         cmp        rax, 0xffffffffffffffff
0000000000003d27         je         loc_4345

0000000000003d2d         cmp        rax, 0xfffffffffffffffe
0000000000003d31         je         loc_42d1

0000000000003d37         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003d3c         sete       al
0000000000003d3f         and        al, byte [rsp+0xe8+var_D9]
0000000000003d43         jne        loc_3ee0

                     loc_3d49:
0000000000003d49         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3b00+996, sub_3b00+1031
0000000000003d50         call       j_iswprint                                  ; iswprint
0000000000003d55         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000003d5a         test       eax, eax
0000000000003d5c         mov        eax, 0x0
0000000000003d61         cmove      r12d, eax
0000000000003d65         add        rbx, r15
0000000000003d68         call       j_mbsinit                                   ; mbsinit
0000000000003d6d         test       eax, eax
0000000000003d6f         je         loc_3cf3

                     loc_3d71:
0000000000003d71         mov        edx, r12d                                   ; CODE XREF=sub_3b00+545
0000000000003d74         mov        rdi, rbx
0000000000003d77         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000003d7d         xor        edx, 0x1
0000000000003d80         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000003d85         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000003d8b         and        dl, byte [rsp+0xe8+var_DB]
0000000000003d8f         mov        r15, qword [rsp+0xe8+var_68]
0000000000003d97         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003d9c         mov        r13, qword [rsp+0xe8+var_78]
0000000000003da1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_3da6:
0000000000003da6         cmp        rdi, 0x1                                    ; CODE XREF=sub_3b00+2112, sub_3b00+2168
0000000000003daa         jbe        loc_43ab

                     loc_3db0:
0000000000003db0         mov        rcx, rdi                                    ; CODE XREF=sub_3b00+1961
0000000000003db3         xor        esi, esi
0000000000003db5         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000003dbb         add        rcx, rbp
0000000000003dbe         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003dc3         jmp        loc_3e7e
0000000000003dc8         align      16

                     loc_3dd0:
0000000000003dd0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3b00+896
0000000000003dd5         sete       al
0000000000003dd8         test       r9b, r9b
0000000000003ddb         jne        loc_4290

0000000000003de1         mov        esi, r8d
0000000000003de4         xor        esi, 0x1
0000000000003de7         and        al, sil
0000000000003dea         je         loc_3e1b

0000000000003dec         cmp        r13, r15
0000000000003def         jbe        loc_3df6

0000000000003df1         mov        byte [r14+r15], 0x27

                     loc_3df6:
0000000000003df6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3b00+751
0000000000003dfa         cmp        r13, rsi
0000000000003dfd         jbe        loc_3e05

0000000000003dff         mov        byte [r14+r15+1], 0x24

                     loc_3e05:
0000000000003e05         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3b00+765
0000000000003e09         cmp        r13, rsi
0000000000003e0c         jbe        loc_3e14

0000000000003e0e         mov        byte [r14+r15+2], 0x27

                     loc_3e14:
0000000000003e14         add        r15, 0x3                                    ; CODE XREF=sub_3b00+780
0000000000003e18         mov        r8d, eax

                     loc_3e1b:
0000000000003e1b         cmp        r13, r15                                    ; CODE XREF=sub_3b00+746
0000000000003e1e         jbe        loc_3e25

0000000000003e20         mov        byte [r14+r15], 0x5c

                     loc_3e25:
0000000000003e25         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3b00+798
0000000000003e29         cmp        r13, rax
0000000000003e2c         jbe        loc_3e3b

0000000000003e2e         mov        eax, ebx
0000000000003e30         shr        al, 0x6
0000000000003e33         add        eax, 0x30
0000000000003e36         mov        byte [r14+r15+1], al

                     loc_3e3b:
0000000000003e3b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3b00+812
0000000000003e3f         cmp        r13, rax
0000000000003e42         jbe        loc_3e54

0000000000003e44         mov        eax, ebx
0000000000003e46         shr        al, 0x3
0000000000003e49         and        eax, 0x7
0000000000003e4c         add        eax, 0x30
0000000000003e4f         mov        byte [r14+r15+2], al

                     loc_3e54:
0000000000003e54         and        ebx, 0x7                                    ; CODE XREF=sub_3b00+834
0000000000003e57         add        rbp, 0x1
0000000000003e5b         add        r15, 0x3
0000000000003e5f         add        ebx, 0x30
0000000000003e62         cmp        rbp, rcx
0000000000003e65         jae        loc_3650

0000000000003e6b         mov        esi, edx

                     loc_3e6d:
0000000000003e6d         cmp        r13, r15                                    ; CODE XREF=sub_3b00+985, sub_3b00+1969
0000000000003e70         jbe        loc_3e76

0000000000003e72         mov        byte [r14+r15], bl

                     loc_3e76:
0000000000003e76         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3b00+880
0000000000003e7a         add        r15, 0x1

                     loc_3e7e:
0000000000003e7e         test       dl, dl                                      ; CODE XREF=sub_3b00+707
0000000000003e80         jne        loc_3dd0

0000000000003e86         mov        eax, esi
0000000000003e88         xor        eax, 0x1
0000000000003e8b         and        eax, r8d
0000000000003e8e         test       r10b, r10b
0000000000003e91         je         loc_3ea1

0000000000003e93         cmp        r13, r15
0000000000003e96         jbe        loc_3e9d

0000000000003e98         mov        byte [r14+r15], 0x5c

                     loc_3e9d:
0000000000003e9d         add        r15, 0x1                                    ; CODE XREF=sub_3b00+918

                     loc_3ea1:
0000000000003ea1         add        rbp, 0x1                                    ; CODE XREF=sub_3b00+913
0000000000003ea5         cmp        rbp, rcx
0000000000003ea8         jae        loc_362c

0000000000003eae         test       al, al
0000000000003eb0         je         loc_42ae

0000000000003eb6         cmp        r13, r15
0000000000003eb9         jbe        loc_3ec0

0000000000003ebb         mov        byte [r14+r15], 0x27

                     loc_3ec0:
0000000000003ec0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3b00+953
0000000000003ec4         cmp        r13, rax
0000000000003ec7         jbe        loc_3ecf

0000000000003ec9         mov        byte [r14+r15+1], 0x27

                     loc_3ecf:
0000000000003ecf         add        r15, 0x2                                    ; CODE XREF=sub_3b00+967
0000000000003ed3         xor        r10d, r10d
0000000000003ed6         xor        r8d, r8d
0000000000003ed9         jmp        loc_3e6d
0000000000003edb         align      32

                     loc_3ee0:
0000000000003ee0         cmp        r15, 0x1                                    ; CODE XREF=sub_3b00+579
0000000000003ee4         je         loc_3d49

0000000000003eea         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003eef         lea        rcx, qword [rdi+r15]
0000000000003ef3         lea        rdx, qword [rdi+r14+1]
0000000000003ef8         lea        r8, qword [rcx+r14]
0000000000003efc         jmp        loc_3f0d
0000000000003efe         align      256

                     loc_3f00:
0000000000003f00         add        rdx, 0x1                                    ; CODE XREF=sub_3b00+1046, sub_3b00+1072
0000000000003f04         cmp        r8, rdx
0000000000003f07         je         loc_3d49

                     loc_3f0d:
0000000000003f0d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3b00+1020
0000000000003f10         sub        ecx, 0x5b
0000000000003f13         cmp        cl, 0x21
0000000000003f16         ja         loc_3f00

0000000000003f18         mov        esi, 0x1
0000000000003f1d         shl        rsi, cl
0000000000003f20         mov        rcx, rsi
0000000000003f23         movabs     rsi, 0x20000002b
0000000000003f2d         test       rcx, rsi
0000000000003f30         je         loc_3f00

0000000000003f32         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003f37         mov        r13, qword [rsp+0xe8+var_78]
0000000000003f3c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000003f41         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_3f49:
0000000000003f49         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3b00+1227, sub_3b00+1948, sub_3b00+2585, sub_3b00+2734
0000000000003f4e         je         loc_3f60

0000000000003f50         test       al, al
0000000000003f52         mov        eax, 0x4
0000000000003f57         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000003f5c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_3f60:
0000000000003f60         sub        rsp, 0x8                                    ; CODE XREF=sub_3b00+1102
0000000000003f64         mov        rcx, rbp
0000000000003f67         mov        rsi, r13
0000000000003f6a         push       qword [rsp+0xf0+var_88]
0000000000003f6e         push       qword [rsp+0xf8+var_80]
0000000000003f72         mov        rdi, r14
0000000000003f75         push       0x0
0000000000003f77         mov        r9d, dword [rsp+0x108+var_70]
0000000000003f7f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000003f84         mov        rdx, qword [rsp+0x108+var_D8]
0000000000003f89         and        r9d, 0xfffffffd
0000000000003f8d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000003f92         add        rsp, 0x20
0000000000003f96         mov        r15, rax

                     loc_3f99:
0000000000003f99         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_3b00+2549, sub_3b00+2560, sub_3b00+2711
0000000000003fa1         xor        rbx, qword [fs:0x28]
0000000000003faa         mov        rax, r15
0000000000003fad         jne        loc_45b3

0000000000003fb3         add        rsp, 0xb8
0000000000003fba         pop        rbx
0000000000003fbb         pop        rbp
0000000000003fbc         pop        r12
0000000000003fbe         pop        r13
0000000000003fc0         pop        r14
0000000000003fc2         pop        r15
0000000000003fc4         ret
                        ; endp
0000000000003fc5         align      8

                     loc_3fc8:
0000000000003fc8         mov        rbp, r11                                    ; CODE XREF=sub_36b0+194
0000000000003fcb         jmp        loc_3f49

                     loc_3fd0:
0000000000003fd0         cmp        r13, r15                                    ; CODE XREF=sub_3b00+206, sub_3b00+220
0000000000003fd3         jbe        loc_3fda

0000000000003fd5         mov        byte [r14+r15], 0x27

                     loc_3fda:
0000000000003fda         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3b00+1235
0000000000003fde         cmp        r13, rax
0000000000003fe1         jbe        loc_3fe9

0000000000003fe3         mov        byte [r14+r15+1], 0x5c

                     loc_3fe9:
0000000000003fe9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3b00+1249
0000000000003fed         cmp        r13, rax
0000000000003ff0         jbe        loc_45e2

0000000000003ff6         mov        rdx, r13
0000000000003ff9         mov        byte [r14+r15+2], 0x27
0000000000003fff         mov        r13, qword [rsp+arg_48]
0000000000004004         jmp        loc_3be2

                     loc_4009:
0000000000004009         mov        eax, r12d                                   ; CODE XREF=sub_39a0+99
000000000000400c         mov        ebx, 0x30
0000000000004011         xor        r12d, r12d
0000000000004014         jmp        sub_35b0+105
                        ; endp

                     loc_4019:
0000000000004019         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_39a0+67
000000000000401f         jmp        loc_39e9

                     loc_4024:
0000000000004024         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000004026         jne        loc_3453

000000000000402c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_4031:
0000000000004031         test       r13, r13                                    ; CODE XREF=sub_3b00+2749
0000000000004034         jne        loc_45ca

000000000000403a         lea        rax, qword [aLibs+29]                       ; 0x8f35
0000000000004041         mov        qword [rsp+0xe8+var_98], 0x0
000000000000404a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000404f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004054         xor        r12d, r12d
0000000000004057         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000405c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004065         mov        qword [rsp+0xe8+var_A0], rax
000000000000406a         mov        r15d, 0x1
0000000000004070         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004078         jmp        loc_3493
000000000000407d         align      128

                     loc_4080:
0000000000004080         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000004082         jne        loc_447d

0000000000004088         test       r13, r13
000000000000408b         je         loc_42b6

0000000000004091         mov        byte [r14], 0x22
0000000000004095         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000409a         xor        r12d, r12d
000000000000409d         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000040a2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_40ab:
00000000000040ab         lea        rax, qword [aLibs+27]                       ; 0x8f33, CODE XREF=sub_3b00+1996
00000000000040b2         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000040b7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000040bc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000040c5         mov        r15d, 0x1
00000000000040cb         mov        qword [rsp+0xe8+var_A0], rax
00000000000040d0         jmp        loc_3493

                     loc_40d5:
00000000000040d5         lea        rax, qword [aLibs+27]                       ; case 6, 0x8f33, CODE XREF=quotearg_buffer_restyled+145
00000000000040dc         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000040e1         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000040e6         xor        r12d, r12d
00000000000040e9         mov        qword [rsp+0xe8+var_98], 0x0
00000000000040f2         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000040f7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000040fc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004105         xor        r15d, r15d
0000000000004108         mov        qword [rsp+0xe8+var_A0], rax
000000000000410d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000004115         jmp        loc_3493

                     loc_411a:
000000000000411a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000411f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004124         xor        r12d, r12d
0000000000004127         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004130         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004135         xor        r15d, r15d
0000000000004138         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000413d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004146         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000414f         jmp        loc_3493

                     loc_4154:
0000000000004154         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000004159         je         loc_41b1

000000000000415b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x8f37
0000000000004162         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004164         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004169         call       j_dcgettext                                 ; dcgettext
000000000000416e         mov        rcx, rax
0000000000004171         mov        qword [rsp+0xe8+var_80], rax
0000000000004176         lea        rax, qword [aLibs+31]                       ; 0x8f37
000000000000417d         cmp        rcx, rax
0000000000004180         je         loc_451e

                     loc_4186:
0000000000004186         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x8f35, CODE XREF=sub_3b00+2607
000000000000418d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000418f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004194         call       j_dcgettext                                 ; dcgettext
0000000000004199         mov        rcx, rax
000000000000419c         mov        qword [rsp+0xe8+var_88], rax
00000000000041a1         lea        rax, qword [aLibs+29]                       ; 0x8f35
00000000000041a8         cmp        rcx, rax
00000000000041ab         je         loc_4534

                     loc_41b1:
00000000000041b1         xor        r15d, r15d                                  ; CODE XREF=sub_3b00+1625, sub_3b00+2629
00000000000041b4         test       ebx, ebx
00000000000041b6         je         loc_437d

                     loc_41bc:
00000000000041bc         test       ebx, ebx                                    ; CODE XREF=sub_3b00+2183, sub_3b00+2214
00000000000041be         mov        rbx, qword [rsp+0xe8+var_88]
00000000000041c3         setne      byte [rsp+0xe8+var_D9]
00000000000041c8         xor        r12d, r12d
00000000000041cb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
00000000000041ce         call       j_strlen                                    ; strlen
00000000000041d3         mov        qword [rsp+0xe8+var_A0], rbx
00000000000041d8         mov        qword [rsp+0xe8+var_D0], rax
00000000000041dd         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000041e2         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000041e7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000041f0         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000041f5         jmp        loc_3493

                     loc_41fa:
00000000000041fa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
00000000000041ff         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004204         xor        r12d, r12d
0000000000004207         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004210         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004215         xor        r15d, r15d
0000000000004218         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000421d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004226         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000422f         jmp        loc_3493

                     loc_4234:
0000000000004234         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004239         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000423e         xor        r12d, r12d
0000000000004241         mov        qword [rsp+0xe8+var_98], 0x0
000000000000424a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000424f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004254         jmp        loc_3473

                     loc_4259:
0000000000004259         cmp        r13, r15                                    ; CODE XREF=sub_39a0+133
000000000000425c         jbe        loc_4263

000000000000425e         mov        byte [r14+r15], 0x30

                     loc_4263:
0000000000004263         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_3b00+1884
0000000000004267         cmp        r13, rax
000000000000426a         jbe        loc_4272

000000000000426c         mov        byte [r14+rcx+2], 0x30

                     loc_4272:
0000000000004272         mov        eax, r12d                                   ; CODE XREF=sub_3b00+1898
0000000000004275         lea        r15, qword [rcx+3]
0000000000004279         xor        r12d, r12d
000000000000427c         mov        ebx, 0x30
0000000000004281         jmp        sub_35b0+56
                        ; endp
0000000000004286         align      16

                     loc_4290:
0000000000004290         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3b00+731
0000000000004295         mov        rbp, r11
0000000000004298         mov        byte [rsp+0xe8+var_DB], bl
000000000000429c         jmp        loc_3f49

                     loc_42a1:
00000000000042a1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_38a0+105
00000000000042a6         xor        r12d, r12d
00000000000042a9         jmp        loc_3db0

                     loc_42ae:
00000000000042ae         xor        r10d, r10d                                  ; CODE XREF=sub_3b00+944
00000000000042b1         jmp        loc_3e6d

                     loc_42b6:
00000000000042b6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_3b00+1419
00000000000042bf         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000042c4         xor        r12d, r12d
00000000000042c7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000042cc         jmp        loc_40ab

                     loc_42d1:
00000000000042d1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3b00+561
00000000000042d6         mov        rsi, r14
00000000000042d9         mov        rcx, r13
00000000000042dc         mov        rax, rbx
00000000000042df         mov        rdi, rbx
00000000000042e2         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000042e8         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000042ed         mov        r9, qword [rsp+0xe8+var_60]
00000000000042f5         cmp        rsi, r11
00000000000042f8         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000042fe         mov        r15, qword [rsp+0xe8+var_68]
0000000000004306         mov        r14, qword [rsp+0xe8+var_A8]
000000000000430b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004310         jae        loc_4338

0000000000004312         cmp        byte [rcx], 0x0
0000000000004315         jne        loc_4327

0000000000004317         jmp        loc_4338
0000000000004319         align      32

                     loc_4320:
0000000000004320         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_3b00+2099
0000000000004325         je         loc_4335

                     loc_4327:
0000000000004327         add        rax, 0x1                                    ; CODE XREF=sub_3b00+2069
000000000000432b         lea        rdx, qword [rbp+rax]
0000000000004330         cmp        r11, rdx
0000000000004333         ja         loc_4320

                     loc_4335:
0000000000004335         mov        rdi, rax                                    ; CODE XREF=sub_3b00+2085

                     loc_4338:
0000000000004338         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3b00+2064, sub_3b00+2071
000000000000433d         xor        r12d, r12d
0000000000004340         jmp        loc_3da6

                     loc_4345:
0000000000004345         mov        rdi, rbx                                    ; CODE XREF=sub_3b00+551
0000000000004348         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000434e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004353         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004359         mov        r15, qword [rsp+0xe8+var_68]
0000000000004361         xor        r12d, r12d
0000000000004364         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004369         mov        r13, qword [rsp+0xe8+var_78]
000000000000436e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000004373         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000004378         jmp        loc_3da6

                     loc_437d:
000000000000437d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_3b00+1718
0000000000004382         movzx      eax, byte [rdx]
0000000000004385         test       al, al
0000000000004387         je         loc_41bc

000000000000438d         nop        dword [rax]

                     loc_4390:
0000000000004390         cmp        r13, r15                                    ; CODE XREF=sub_3b00+2212
0000000000004393         jbe        loc_4399

0000000000004395         mov        byte [r14+r15], al

                     loc_4399:
0000000000004399         add        r15, 0x1                                    ; CODE XREF=sub_3b00+2195
000000000000439d         movzx      eax, byte [rdx+r15]
00000000000043a2         test       al, al
00000000000043a4         jne        loc_4390

00000000000043a6         jmp        loc_41bc

                     loc_43ab:
00000000000043ab         mov        eax, edx                                    ; CODE XREF=sub_3b00+682
00000000000043ad         jmp        loc_3907

                     loc_43b2:
00000000000043b2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3b00+290
00000000000043b6         cmp        bl, 0x3e
00000000000043b9         ja         loc_3c30

00000000000043bf         movabs     rax, 0x7000a38200000000
00000000000043c9         bt         rax, rbx
00000000000043cd         jae        loc_3c30

00000000000043d3         cmp        byte [rsp+arg_7], 0x0
00000000000043d8         jne        loc_45c2

00000000000043de         cmp        r13, r15
00000000000043e1         jbe        loc_43e8

00000000000043e3         mov        byte [r14+r15], 0x3f

                     loc_43e8:
00000000000043e8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3b00+2273
00000000000043ec         cmp        r13, rax
00000000000043ef         jbe        loc_43f7

00000000000043f1         mov        byte [r14+r15+1], 0x22

                     loc_43f7:
00000000000043f7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3b00+2287
00000000000043fb         cmp        r13, rax
00000000000043fe         jbe        loc_4406

0000000000004400         mov        byte [r14+r15+2], 0x22

                     loc_4406:
0000000000004406         lea        rax, qword [r15+3]                          ; CODE XREF=sub_3b00+2302
000000000000440a         cmp        r13, rax
000000000000440d         jbe        loc_4415

000000000000440f         mov        byte [r14+r15+3], 0x3f

                     loc_4415:
0000000000004415         add        r15, 0x4                                    ; CODE XREF=sub_3b00+2317
0000000000004419         xor        edx, edx
000000000000441b         xor        r12d, r12d
000000000000441e         xor        eax, eax
0000000000004420         mov        rbp, rcx
0000000000004423         jmp        sub_35b0+56
                        ; endp

                     loc_4428:
0000000000004428         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000442a         je         loc_45b8

0000000000004430         lea        rax, qword [aLibs+29]                       ; 0x8f35
0000000000004437         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000443c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004441         xor        r12d, r12d
0000000000004444         mov        qword [rsp+0xe8+var_98], 0x0
000000000000444d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004452         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004457         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004460         xor        r15d, r15d
0000000000004463         mov        qword [rsp+0xe8+var_A0], rax
0000000000004468         jmp        loc_3493
000000000000446d         align      16

                     loc_4470:
0000000000004470         mov        rbp, r11                                    ; CODE XREF=sub_3b00+5
0000000000004473         movzx      eax, byte [rsp+arg_7]
0000000000004478         jmp        sub_3b00+1097
                        ; endp

                     loc_447d:
000000000000447d         lea        rax, qword [aLibs+27]                       ; 0x8f33, CODE XREF=sub_3b00+1410
0000000000004484         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004489         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000448e         xor        r12d, r12d
0000000000004491         mov        qword [rsp+0xe8+var_98], 0x0
000000000000449a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000449f         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000044a4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000044ad         xor        r15d, r15d
00000000000044b0         mov        qword [rsp+0xe8+var_A0], rax
00000000000044b5         jmp        loc_3493

                     loc_44ba:
00000000000044ba         mov        eax, edx                                    ; CODE XREF=sub_3b00+87

                     loc_44bc:
00000000000044bc         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3b00+76, sub_3b00+2721
00000000000044c1         test       rbx, rbx
00000000000044c4         je         loc_44f2

00000000000044c6         test       al, al
00000000000044c8         je         loc_44f2

00000000000044ca         movzx      ecx, byte [rbx]
00000000000044cd         mov        rax, rbx
00000000000044d0         test       cl, cl
00000000000044d2         je         loc_44f2

00000000000044d4         mov        rdx, r15
00000000000044d7         sub        rax, r15

                     loc_44da:
00000000000044da         cmp        r13, rdx                                    ; CODE XREF=sub_3b00+2541
00000000000044dd         jbe        loc_44e3

00000000000044df         mov        byte [r14+rdx], cl

                     loc_44e3:
00000000000044e3         add        rdx, 0x1                                    ; CODE XREF=sub_3b00+2525
00000000000044e7         movzx      ecx, byte [rax+rdx]
00000000000044eb         test       cl, cl
00000000000044ed         jne        loc_44da

00000000000044ef         mov        r15, rdx

                     loc_44f2:
00000000000044f2         cmp        r13, r15                                    ; CODE XREF=sub_3b00+2500, sub_3b00+2504, sub_3b00+2514
00000000000044f5         jbe        loc_3f99

00000000000044fb         mov        byte [r14+r15], 0x0
0000000000004500         jmp        loc_3f99

                     loc_4505:
0000000000004505         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000450a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000450f         mov        rbp, r11
0000000000004512         sete       al
0000000000004515         mov        byte [rsp+0xe8+var_DB], bl
0000000000004519         jmp        loc_3f49

                     loc_451e:
000000000000451e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3b00+1664
0000000000004522         mov        rdi, rcx
0000000000004525         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000452a         mov        qword [rsp+0xe8+var_80], rax
000000000000452f         jmp        loc_4186

                     loc_4534:
0000000000004534         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3b00+1707
0000000000004538         mov        rdi, rcx
000000000000453b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004540         mov        qword [rsp+0xe8+var_88], rax
0000000000004545         jmp        loc_41b1

                     loc_454a:
000000000000454a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_39a0+16
000000000000454f         mov        rbp, r11
0000000000004552         mov        eax, edx
0000000000004554         mov        byte [rsp+arg_5], bl
0000000000004558         jmp        sub_3b00+1097
                        ; endp

                     loc_455d:
000000000000455d         sub        rsp, 0x8                                    ; CODE XREF=sub_3b00+98
0000000000004561         mov        r8d, 0x5
0000000000004567         mov        rcx, r11
000000000000456a         push       qword [rsp+0xf0+var_88]
000000000000456e         push       qword [rsp+0xf8+var_80]
0000000000004572         mov        rdi, r14
0000000000004575         push       qword [rsp+0x100+var_C8]
0000000000004579         mov        r9d, dword [rsp+0x108+var_70]
0000000000004581         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004586         mov        rsi, qword [rsp+0x108+var_98]
000000000000458b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004590         add        rsp, 0x20
0000000000004594         mov        r15, rax
0000000000004597         jmp        loc_3f99

                     loc_459c:
000000000000459c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3b00+121
00000000000045a1         jmp        loc_44bc

                     loc_45a6:
00000000000045a6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3b00+63
00000000000045ae         jmp        loc_3f49

                     loc_45b3:
00000000000045b3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3b00+1197
                        ; endp

                     loc_45b8:
00000000000045b8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3b00+2346
00000000000045bd         jmp        loc_4031

                     loc_45c2:
00000000000045c2         mov        rbp, r11                                    ; CODE XREF=sub_3b00+2264
00000000000045c5         jmp        sub_3b00+1120
                        ; endp

                     loc_45ca:
00000000000045ca         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_3b00+1332
00000000000045cf         xor        eax, eax
00000000000045d1         xor        r12d, r12d
00000000000045d4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000045dd         jmp        loc_3b84

                     loc_45e2:
00000000000045e2         mov        rdx, r13                                    ; CODE XREF=sub_3b00+1264
00000000000045e5         mov        r13, qword [rsp+arg_48]
00000000000045ea         jmp        loc_3be2

                     loc_45ef:
00000000000045ef         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
00000000000045f4         align      512                                         ; End of unwind block (FDE at 0xa040)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004600         push       r15                                         ; Begin of unwind block (FDE at 0xa0b8), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004602         push       r14
0000000000004604         movsxd     r15, edi
0000000000004607         push       r13
0000000000004609         push       r12
000000000000460b         mov        r14, rdx
000000000000460e         push       rbp
000000000000460f         push       rbx
0000000000004610         mov        rbp, rcx
0000000000004613         sub        rsp, 0x28
0000000000004617         mov        qword [rsp+0x58+var_50], rsi
000000000000461c         call       j___errno_location                          ; __errno_location
0000000000004621         mov        r13, rax
0000000000004624         mov        eax, dword [rax]
0000000000004626         test       r15d, r15d
0000000000004629         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004630         mov        dword [rsp+0x58+var_40], eax
0000000000004634         js         loc_47a1

000000000000463a         cmp        dword [nslots], r15d                        ; nslots
0000000000004641         jg         loc_46a5

0000000000004643         cmp        r15d, 0x7fffffff
000000000000464a         je         loc_47a6

0000000000004650         lea        r12d, dword [r15+1]
0000000000004654         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000465b         movsxd     rsi, r12d
000000000000465e         shl        rsi, 0x4
0000000000004662         cmp        rbx, rax
0000000000004665         je         loc_4780

000000000000466b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000466e         call       xrealloc                                    ; xrealloc
0000000000004673         mov        rbx, rax
0000000000004676         mov        qword [slotvec], rax                        ; slotvec

                     loc_467d:
000000000000467d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000004684         mov        edx, r12d
0000000000004687         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000004689         sub        edx, edi
000000000000468b         shl        rdi, 0x4
000000000000468f         movsxd     rdx, edx
0000000000004692         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000004695         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000004699         call       j_memset                                    ; memset
000000000000469e         mov        dword [nslots], r12d                        ; nslots

                     loc_46a5:
00000000000046a5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000046a8         shl        r15, 0x4
00000000000046ac         sub        rsp, 0x8
00000000000046b0         add        rbx, r15
00000000000046b3         lea        r15, qword [rbp+8]
00000000000046b7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000046bb         mov        r11, qword [rbx]
00000000000046be         mov        r12, qword [rbx+8]
00000000000046c2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000046c5         or         eax, 0x1
00000000000046c8         mov        dword [rsp+0x60+var_3C], eax
00000000000046cc         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000046cf         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
00000000000046d2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000046d5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000046d7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
00000000000046da         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000046df         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
00000000000046e2         mov        qword [rsp+0x78+var_48], r11
00000000000046e7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000046ec         add        rsp, 0x20
00000000000046f0         mov        r11, qword [rsp+0x58+var_48]
00000000000046f5         cmp        r11, rax
00000000000046f8         ja         loc_4761

00000000000046fa         lea        rsi, qword [rax+1]
00000000000046fe         lea        rax, qword [slot0]                          ; slot0
0000000000004705         cmp        r12, rax
0000000000004708         mov        qword [rbx], rsi
000000000000470b         je         loc_471f

000000000000470d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004710         mov        qword [rsp+0x58+var_48], rsi
0000000000004715         call       j_free                                      ; free
000000000000471a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_471f:
000000000000471f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004722         mov        qword [rsp+0x58+var_48], rsi
0000000000004727         call       xmalloc                                     ; xmalloc
000000000000472c         sub        rsp, 0x8
0000000000004730         mov        qword [rbx+8], rax
0000000000004734         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004738         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000473b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000473e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004741         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004743         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004748         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000474b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004750         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004755         mov        r12, rax
0000000000004758         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000475d         add        rsp, 0x20

                     loc_4761:
0000000000004761         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004765         mov        dword [r13], eax
0000000000004769         add        rsp, 0x28
000000000000476d         mov        rax, r12
0000000000004770         pop        rbx
0000000000004771         pop        rbp
0000000000004772         pop        r12
0000000000004774         pop        r13
0000000000004776         pop        r14
0000000000004778         pop        r15
000000000000477a         ret
                        ; endp
000000000000477b         align      128

                     loc_4780:
0000000000004780         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000004782         call       xrealloc                                    ; xrealloc
0000000000004787         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000478f         mov        rbx, rax
0000000000004792         mov        qword [slotvec], rax                        ; slotvec
0000000000004799         movups     xmmword [rax], xmm0
000000000000479c         jmp        loc_467d

                     loc_47a1:
00000000000047a1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_47a6:
00000000000047a6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_47ab:
00000000000047ab         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xa0b8)
                     clone_quoting_options:
00000000000047b0         push       r12                                         ; Begin of unwind block (FDE at 0xa124)
00000000000047b2         push       rbp
00000000000047b3         push       rbx
00000000000047b4         mov        rbx, rdi
00000000000047b7         call       j___errno_location                          ; __errno_location
00000000000047bc         mov        r12d, dword [rax]
00000000000047bf         mov        rbp, rax
00000000000047c2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000047c9         test       rbx, rbx
00000000000047cc         mov        esi, 0x38
00000000000047d1         cmove      rbx, rax
00000000000047d5         mov        rdi, rbx
00000000000047d8         call       xmemdup                                     ; xmemdup
00000000000047dd         mov        dword [rbp], r12d
00000000000047e1         pop        rbx
00000000000047e2         pop        rbp
00000000000047e3         pop        r12
00000000000047e5         ret
                        ; endp
00000000000047e6         align      16                                          ; End of unwind block (FDE at 0xa124)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
00000000000047f0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa150), default_quoting_options
00000000000047f7         test       rdi, rdi
00000000000047fa         cmove      rdi, rax
00000000000047fe         mov        eax, dword [rdi]
0000000000004800         ret
                        ; endp
0000000000004801         align      16                                          ; End of unwind block (FDE at 0xa150)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000004810         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa164), default_quoting_options
0000000000004817         test       rdi, rdi
000000000000481a         cmove      rdi, rax
000000000000481e         mov        dword [rdi], esi
0000000000004820         ret
                        ; endp
0000000000004821         align      16                                          ; End of unwind block (FDE at 0xa164)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000004830         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa178), default_quoting_options
0000000000004837         test       rdi, rdi
000000000000483a         mov        ecx, esi
000000000000483c         cmove      rdi, rax
0000000000004840         mov        eax, esi
0000000000004842         and        ecx, 0x1f
0000000000004845         shr        al, 0x5
0000000000004848         movzx      eax, al
000000000000484b         lea        rdi, qword [rdi+rax*4+8]
0000000000004850         mov        esi, dword [rdi]
0000000000004852         mov        eax, esi
0000000000004854         shr        eax, cl
0000000000004856         xor        edx, eax
0000000000004858         and        eax, 0x1
000000000000485b         and        edx, 0x1
000000000000485e         shl        edx, cl
0000000000004860         xor        edx, esi
0000000000004862         mov        dword [rdi], edx
0000000000004864         ret
                        ; endp
0000000000004865         align      16                                          ; End of unwind block (FDE at 0xa178)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000004870         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa18c), default_quoting_options
0000000000004877         test       rdi, rdi
000000000000487a         cmove      rdi, rax
000000000000487e         mov        eax, dword [rdi+4]
0000000000004881         mov        dword [rdi+4], esi
0000000000004884         ret
                        ; endp
0000000000004885         align      16                                          ; End of unwind block (FDE at 0xa18c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000004890         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa1a0), default_quoting_options
0000000000004897         test       rdi, rdi
000000000000489a         cmove      rdi, rax
000000000000489e         test       rsi, rsi
00000000000048a1         mov        dword [rdi], 0xa
00000000000048a7         je         loc_48b7

00000000000048a9         test       rdx, rdx
00000000000048ac         je         loc_48b7

00000000000048ae         mov        qword [rdi+0x28], rsi
00000000000048b2         mov        qword [rdi+0x30], rdx
00000000000048b6         ret
                        ; endp

                     loc_48b7:
00000000000048b7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
00000000000048bb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000048c0         push       r15                                         ; End of unwind block (FDE at 0xa1a0), Begin of unwind block (FDE at 0xa1b4)
00000000000048c2         push       r14
00000000000048c4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000048cb         push       r13
00000000000048cd         push       r12
00000000000048cf         mov        r13, rdi
00000000000048d2         push       rbp
00000000000048d3         push       rbx
00000000000048d4         mov        rbx, r8
00000000000048d7         mov        r14, rsi
00000000000048da         mov        r15, rdx
00000000000048dd         sub        rsp, 0x18
00000000000048e1         test       r8, r8
00000000000048e4         cmove      rbx, rax
00000000000048e8         mov        qword [rsp+0x48+var_40], rcx
00000000000048ed         call       j___errno_location                          ; __errno_location
00000000000048f2         mov        r12d, dword [rax]
00000000000048f5         mov        rbp, rax
00000000000048f8         lea        rax, qword [rbx+8]
00000000000048fc         sub        rsp, 0x8
0000000000004900         mov        r9d, dword [rbx+4]
0000000000004904         push       qword [rbx+0x30]
0000000000004907         mov        r8d, dword [rbx]
000000000000490a         push       qword [rbx+0x28]
000000000000490d         mov        rdx, r15
0000000000004910         push       rax
0000000000004911         mov        rcx, qword [rsp+0x68+var_40]
0000000000004916         mov        rsi, r14
0000000000004919         mov        rdi, r13
000000000000491c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004921         mov        dword [rbp], r12d
0000000000004925         add        rsp, 0x38
0000000000004929         pop        rbx
000000000000492a         pop        rbp
000000000000492b         pop        r12
000000000000492d         pop        r13
000000000000492f         pop        r14
0000000000004931         pop        r15
0000000000004933         ret
                        ; endp
0000000000004934         align      64                                          ; End of unwind block (FDE at 0xa1b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004940         push       r15                                         ; Begin of unwind block (FDE at 0xa208), CODE XREF=quotearg_alloc+5
0000000000004942         push       r14
0000000000004944         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000494b         push       r13
000000000000494d         push       r12
000000000000494f         mov        r12, rdx
0000000000004952         push       rbp
0000000000004953         push       rbx
0000000000004954         mov        rbx, rcx
0000000000004957         mov        r14, rdi
000000000000495a         mov        r15, rsi
000000000000495d         sub        rsp, 0x38
0000000000004961         test       rcx, rcx
0000000000004964         cmove      rbx, rax
0000000000004968         xor        ebp, ebp
000000000000496a         call       j___errno_location                          ; __errno_location
000000000000496f         test       r12, r12
0000000000004972         mov        r13, rax
0000000000004975         mov        eax, dword [rax]
0000000000004977         sete       bpl
000000000000497b         or         ebp, dword [rbx+4]
000000000000497e         lea        r10, qword [rbx+8]
0000000000004982         sub        rsp, 0x8
0000000000004986         mov        r8d, dword [rbx]
0000000000004989         mov        rcx, r15
000000000000498c         mov        dword [rsp+0x70+var_5C], eax
0000000000004990         push       qword [rbx+0x30]
0000000000004993         mov        rdx, r14
0000000000004996         push       qword [rbx+0x28]
0000000000004999         push       r10
000000000000499b         xor        esi, esi
000000000000499d         mov        r9d, ebp
00000000000049a0         xor        edi, edi
00000000000049a2         mov        qword [rsp+0x88+var_48], r10
00000000000049a7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000049ac         lea        rsi, qword [rax+1]
00000000000049b0         mov        qword [rsp+0x88+var_40], rax
00000000000049b5         add        rsp, 0x20
00000000000049b9         mov        rdi, rsi
00000000000049bc         mov        qword [rsp+0x68+var_50], rsi
00000000000049c1         call       xmalloc                                     ; xmalloc
00000000000049c6         mov        qword [rsp+0x68+var_58], rax
00000000000049cb         sub        rsp, 0x8
00000000000049cf         push       qword [rbx+0x30]
00000000000049d2         push       qword [rbx+0x28]
00000000000049d5         mov        r10, qword [rsp+0x80+var_48]
00000000000049da         mov        r9d, ebp
00000000000049dd         mov        r8d, dword [rbx]
00000000000049e0         mov        rcx, r15
00000000000049e3         mov        rdx, r14
00000000000049e6         mov        rdi, rax
00000000000049e9         push       r10
00000000000049eb         mov        rsi, qword [rsp+0x88+var_50]
00000000000049f0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000049f5         mov        eax, dword [rsp+0x88+var_5C]
00000000000049f9         add        rsp, 0x20
00000000000049fd         test       r12, r12
0000000000004a00         mov        dword [r13], eax
0000000000004a04         je         loc_4a0f

0000000000004a06         mov        r11, qword [rsp+0x68+var_40]
0000000000004a0b         mov        qword [r12], r11

                     loc_4a0f:
0000000000004a0f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004a14         add        rsp, 0x38
0000000000004a18         pop        rbx
0000000000004a19         pop        rbp
0000000000004a1a         pop        r12
0000000000004a1c         pop        r13
0000000000004a1e         pop        r14
0000000000004a20         pop        r15
0000000000004a22         ret
                        ; endp
0000000000004a23         align      16                                          ; End of unwind block (FDE at 0xa208)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004a30         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xa274)
0000000000004a33         xor        edx, edx
0000000000004a35         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000004a3a         align      64                                          ; End of unwind block (FDE at 0xa274)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004a40         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xa288), nslots
0000000000004a46         push       r12
0000000000004a48         mov        r12, qword [slotvec]                        ; slotvec
0000000000004a4f         push       rbp
0000000000004a50         push       rbx
0000000000004a51         cmp        eax, 0x1
0000000000004a54         jle        loc_4a81

0000000000004a56         sub        eax, 0x2
0000000000004a59         lea        rbx, qword [r12+0x18]
0000000000004a5e         shl        rax, 0x4
0000000000004a62         lea        rbp, qword [r12+rax+0x28]
0000000000004a67         nop        word [rax+rax]

                     loc_4a70:
0000000000004a70         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000004a73         add        rbx, 0x10
0000000000004a77         call       j_free                                      ; free
0000000000004a7c         cmp        rbx, rbp
0000000000004a7f         jne        loc_4a70

                     loc_4a81:
0000000000004a81         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000004a86         lea        rbx, qword [slot0]                          ; slot0
0000000000004a8d         cmp        rdi, rbx
0000000000004a90         je         loc_4aa9

0000000000004a92         call       j_free                                      ; free
0000000000004a97         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000004aa2         mov        qword [slotvec0+8], rbx                     ; 0x20c078

                     loc_4aa9:
0000000000004aa9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000004ab0         cmp        r12, rbx
0000000000004ab3         je         loc_4ac4

0000000000004ab5         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004ab8         call       j_free                                      ; free
0000000000004abd         mov        qword [slotvec], rbx                        ; slotvec

                     loc_4ac4:
0000000000004ac4         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000004ac5         mov        dword [nslots], 0x1                         ; nslots
0000000000004acf         pop        rbp
0000000000004ad0         pop        r12
0000000000004ad2         ret
                        ; endp
0000000000004ad3         align      32                                          ; End of unwind block (FDE at 0xa288)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000004ae0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa2b4), default_quoting_options
0000000000004ae7         mov        rdx, 0xffffffffffffffff
0000000000004aee         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004af3         align      256                                         ; End of unwind block (FDE at 0xa2b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004b00         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa2c8), default_quoting_options
0000000000004b07         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004b0c         align      16                                          ; End of unwind block (FDE at 0xa2c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004b10         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa2dc), default_quoting_options
0000000000004b17         mov        rsi, rdi
0000000000004b1a         mov        rdx, 0xffffffffffffffff
0000000000004b21         xor        edi, edi
0000000000004b23         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004b28         align      16                                          ; End of unwind block (FDE at 0xa2dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004b30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa2f0), default_quoting_options
0000000000004b37         mov        rdx, rsi
0000000000004b3a         mov        rsi, rdi
0000000000004b3d         xor        edi, edi
0000000000004b3f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004b44         align      16                                          ; End of unwind block (FDE at 0xa2f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004b50         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa304)
0000000000004b54         mov        rax, rdx
0000000000004b57         mov        rdx, qword [fs:0x28]
0000000000004b60         mov        qword [rsp+0x48+var_10], rdx
0000000000004b65         xor        edx, edx
0000000000004b67         cmp        esi, 0xa
0000000000004b6a         je         loc_4bd4

0000000000004b6c         mov        dword [rsp+0x48+var_48], esi
0000000000004b6f         mov        rcx, rsp
0000000000004b72         mov        rdx, 0xffffffffffffffff
0000000000004b79         mov        rsi, rax
0000000000004b7c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004b85         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004b8e         mov        qword [rsp+0x48+var_34], 0x0
0000000000004b97         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004ba0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004ba9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004bb2         mov        dword [rsp+0x48+var_14], 0x0
0000000000004bba         call       quotearg_n_options                          ; quotearg_n_options
0000000000004bbf         mov        rcx, qword [rsp+0x48+var_10]
0000000000004bc4         xor        rcx, qword [fs:0x28]
0000000000004bcd         jne        loc_4bd9

0000000000004bcf         add        rsp, 0x48
0000000000004bd3         ret
                        ; endp

                     loc_4bd4:
0000000000004bd4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_4bd9:
0000000000004bd9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000004bde         align      32                                          ; End of unwind block (FDE at 0xa304)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000004be0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa320), CODE XREF=quotearg_style_mem+10
0000000000004be4         mov        rax, rdx
0000000000004be7         mov        rdx, rcx
0000000000004bea         mov        rcx, qword [fs:0x28]
0000000000004bf3         mov        qword [rsp+0x48+var_10], rcx
0000000000004bf8         xor        ecx, ecx
0000000000004bfa         cmp        esi, 0xa
0000000000004bfd         je         loc_4c60

0000000000004bff         mov        dword [rsp+0x48+var_48], esi
0000000000004c02         mov        rcx, rsp
0000000000004c05         mov        rsi, rax
0000000000004c08         mov        qword [rsp+0x48+var_44], 0x0
0000000000004c11         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004c1a         mov        qword [rsp+0x48+var_34], 0x0
0000000000004c23         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004c2c         mov        qword [rsp+0x48+var_24], 0x0
0000000000004c35         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004c3e         mov        dword [rsp+0x48+var_14], 0x0
0000000000004c46         call       quotearg_n_options                          ; quotearg_n_options
0000000000004c4b         mov        rdx, qword [rsp+0x48+var_10]
0000000000004c50         xor        rdx, qword [fs:0x28]
0000000000004c59         jne        loc_4c65

0000000000004c5b         add        rsp, 0x48
0000000000004c5f         ret
                        ; endp

                     loc_4c60:
0000000000004c60         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4c65:
0000000000004c65         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004c6a         align      16                                          ; End of unwind block (FDE at 0xa320)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004c70         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xa33c), CODE XREF=main+603
0000000000004c73         mov        esi, edi
0000000000004c75         xor        edi, edi
0000000000004c77         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004c7c         align      128                                         ; End of unwind block (FDE at 0xa33c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004c80         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xa350)
0000000000004c83         mov        rdx, rsi
0000000000004c86         mov        esi, edi
0000000000004c88         xor        edi, edi
0000000000004c8a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004c8f         align      16                                          ; End of unwind block (FDE at 0xa350)

                     quotearg_char_mem:
0000000000004c90         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa364), CODE XREF=quotearg_char+11
0000000000004c94         mov        ecx, edx
0000000000004c96         mov        rax, qword [fs:0x28]
0000000000004c9f         mov        qword [rsp+0x48+var_10], rax
0000000000004ca4         xor        eax, eax
0000000000004ca6         mov        rax, qword [qword_20c210]                   ; qword_20c210
0000000000004cad         mov        r8, rsp
0000000000004cb0         and        ecx, 0x1f
0000000000004cb3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004cbb         mov        qword [rsp+0x48+var_18], rax
0000000000004cc0         mov        eax, edx
0000000000004cc2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004cc6         shr        al, 0x5
0000000000004cc9         movzx      eax, al
0000000000004ccc         lea        r9, qword [r8+rax*4+8]
0000000000004cd1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20c1f0
0000000000004cd9         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004cde         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20c200
0000000000004ce6         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004ceb         mov        edx, dword [r9]
0000000000004cee         mov        eax, edx
0000000000004cf0         shr        eax, cl
0000000000004cf2         not        eax
0000000000004cf4         and        eax, 0x1
0000000000004cf7         shl        eax, cl
0000000000004cf9         mov        rcx, r8
0000000000004cfc         xor        eax, edx
0000000000004cfe         mov        rdx, rsi
0000000000004d01         mov        rsi, rdi
0000000000004d04         mov        dword [r9], eax
0000000000004d07         xor        edi, edi
0000000000004d09         call       quotearg_n_options                          ; quotearg_n_options
0000000000004d0e         mov        rsi, qword [rsp+0x48+var_10]
0000000000004d13         xor        rsi, qword [fs:0x28]
0000000000004d1c         jne        loc_4d23

0000000000004d1e         add        rsp, 0x48
0000000000004d22         ret
                        ; endp

                     loc_4d23:
0000000000004d23         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000004d28         align      16                                          ; End of unwind block (FDE at 0xa364)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000004d30         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xa380)
0000000000004d34         mov        rsi, 0xffffffffffffffff
0000000000004d3b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000004d40         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xa380), Begin of unwind block (FDE at 0xa394), CODE XREF=close_stdout+101
0000000000004d45         mov        rsi, 0xffffffffffffffff
0000000000004d4c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004d51         align      32                                          ; End of unwind block (FDE at 0xa394)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000004d60         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xa3a8)
0000000000004d65         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004d6a         align      16                                          ; End of unwind block (FDE at 0xa3a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000004d70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa3bc)
0000000000004d74         mov        rax, rdx
0000000000004d77         mov        rdx, qword [fs:0x28]
0000000000004d80         mov        qword [rsp+0x48+var_10], rdx
0000000000004d85         xor        edx, edx
0000000000004d87         cmp        esi, 0xa
0000000000004d8a         je         loc_4df4

0000000000004d8c         mov        dword [rsp+0x48+var_48], esi
0000000000004d8f         mov        rcx, rsp
0000000000004d92         mov        rdx, 0xffffffffffffffff
0000000000004d99         mov        rsi, rax
0000000000004d9c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004da5         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000004dae         mov        qword [rsp+0x48+var_34], 0x0
0000000000004db7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004dc0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004dc9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004dd2         mov        dword [rsp+0x48+var_14], 0x0
0000000000004dda         call       quotearg_n_options                          ; quotearg_n_options
0000000000004ddf         mov        rcx, qword [rsp+0x48+var_10]
0000000000004de4         xor        rcx, qword [fs:0x28]
0000000000004ded         jne        loc_4df9

0000000000004def         add        rsp, 0x48
0000000000004df3         ret
                        ; endp

                     loc_4df4:
0000000000004df4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_4df9:
0000000000004df9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000004dfe         align      512                                         ; End of unwind block (FDE at 0xa3bc)

                     quotearg_n_custom_mem:
0000000000004e00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa3d8), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000004e04         mov        r9, rcx
0000000000004e07         mov        rcx, qword [qword_20c210]                   ; qword_20c210
0000000000004e0e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004e16         mov        rax, qword [fs:0x28]
0000000000004e1f         mov        qword [rsp+0x48+var_10], rax
0000000000004e24         xor        eax, eax
0000000000004e26         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004e2a         test       rsi, rsi
0000000000004e2d         mov        qword [rsp+0x48+var_18], rcx
0000000000004e32         mov        dword [rsp+0x48+var_48], 0xa
0000000000004e39         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20c1f0
0000000000004e41         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004e46         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20c200
0000000000004e4e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004e53         je         loc_4e87

0000000000004e55         test       rdx, rdx
0000000000004e58         je         loc_4e87

0000000000004e5a         mov        qword [rsp+0x48+var_20], rsi
0000000000004e5f         mov        qword [rsp+0x48+var_18], rdx
0000000000004e64         mov        rcx, rsp
0000000000004e67         mov        rdx, r8
0000000000004e6a         mov        rsi, r9
0000000000004e6d         call       quotearg_n_options                          ; quotearg_n_options
0000000000004e72         mov        rdi, qword [rsp+0x48+var_10]
0000000000004e77         xor        rdi, qword [fs:0x28]
0000000000004e80         jne        loc_4e8c

0000000000004e82         add        rsp, 0x48
0000000000004e86         ret
                        ; endp

                     loc_4e87:
0000000000004e87         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_4e8c:
0000000000004e8c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000004e91         align      32                                          ; End of unwind block (FDE at 0xa3d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000004ea0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xa3f4)
0000000000004ea7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
0000000000004eac         align      16                                          ; End of unwind block (FDE at 0xa3f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000004eb0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xa408)
0000000000004eb3         mov        r8, 0xffffffffffffffff
0000000000004eba         mov        rdx, rsi
0000000000004ebd         mov        rsi, rdi
0000000000004ec0         xor        edi, edi
0000000000004ec2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004ec7         align      16                                          ; End of unwind block (FDE at 0xa408)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000004ed0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xa41c)
0000000000004ed3         mov        rcx, rdx
0000000000004ed6         mov        rdx, rsi
0000000000004ed9         mov        rsi, rdi
0000000000004edc         xor        edi, edi
0000000000004ede         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004ee3         align      16                                          ; End of unwind block (FDE at 0xa41c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000004ef0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa430), quote_quoting_options
0000000000004ef7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004efc         align      256                                         ; End of unwind block (FDE at 0xa430)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000004f00         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa444), quote_quoting_options
0000000000004f07         mov        rdx, rsi
0000000000004f0a         mov        rsi, rdi
0000000000004f0d         xor        edi, edi
0000000000004f0f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004f14         align      32                                          ; End of unwind block (FDE at 0xa444)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000004f20         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa458), quote_quoting_options
0000000000004f27         mov        rdx, 0xffffffffffffffff
0000000000004f2e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004f33         align      64                                          ; End of unwind block (FDE at 0xa458)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000004f40         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa46c), quote_quoting_options, CODE XREF=main+427, main+3376, main+3430, verify_numeric+35, verify_numeric+102, verify_numeric+147
0000000000004f47         mov        rsi, rdi
0000000000004f4a         mov        rdx, 0xffffffffffffffff
0000000000004f51         xor        edi, edi
0000000000004f53         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004f58         align      32                                          ; End of unwind block (FDE at 0xa46c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fwrite_success_callback:
0000000000004f60         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xa484), DATA XREF=print_unicode_char+21
0000000000004f64         mov        rcx, rdx                                    ; argument "__s" for method j_fwrite
0000000000004f67         mov        rdx, rsi                                    ; argument "__n" for method j_fwrite
0000000000004f6a         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000004f6f         call       j_fwrite                                    ; fwrite
0000000000004f74         xor        eax, eax
0000000000004f76         add        rsp, 0x8
0000000000004f7a         ret
                        ; endp
0000000000004f7b         align      128                                         ; End of unwind block (FDE at 0xa484)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fallback_failure_callback:
0000000000004f80         mov        ecx, edi                                    ; Begin of unwind block (FDE at 0xa49c), DATA XREF=print_unicode_char+2
0000000000004f82         sub        rsp, 0x8
0000000000004f86         mov        rdi, rdx
0000000000004f89         cmp        ecx, 0xffff
0000000000004f8f         jbe        loc_4fb0

0000000000004f91         lea        rdx, qword [aU08x]                          ; "\\U%08X"
0000000000004f98         mov        esi, 0x1
0000000000004f9d         xor        eax, eax
0000000000004f9f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004fa4         mov        rax, 0xffffffffffffffff
0000000000004fab         add        rsp, 0x8
0000000000004faf         ret
                        ; endp

                     loc_4fb0:
0000000000004fb0         lea        rdx, qword [aU04x]                          ; "\\u%04X", CODE XREF=fallback_failure_callback+15
0000000000004fb7         mov        esi, 0x1
0000000000004fbc         xor        eax, eax
0000000000004fbe         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004fc3         mov        rax, 0xffffffffffffffff
0000000000004fca         add        rsp, 0x8
0000000000004fce         ret
                        ; endp
0000000000004fcf         align      16                                          ; End of unwind block (FDE at 0xa49c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     exit_failure_callback:
0000000000004fd0         push       rbp                                         ; Begin of unwind block (FDE at 0xa4bc), DATA XREF=print_unicode_char+9
0000000000004fd1         push       rbx
0000000000004fd2         mov        edx, 0x5
0000000000004fd7         mov        ebx, edi
0000000000004fd9         sub        rsp, 0x8
0000000000004fdd         test       rsi, rsi
0000000000004fe0         je         loc_5028

0000000000004fe2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004fe4         call       j_dcgettext                                 ; dcgettext
0000000000004fe9         lea        rsi, qword [aCannotConvertU]                ; argument "msgid" for method j_dcgettext, "cannot convert U+%04X to local character set: %s"
0000000000004ff0         mov        rbp, rax
0000000000004ff3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ff8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ffa         call       j_dcgettext                                 ; dcgettext
0000000000004fff         mov        r8, rbp
0000000000005002         mov        ecx, ebx
0000000000005004         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005007         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005009         xor        eax, eax
000000000000500b         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000005010         call       j_error                                     ; error
0000000000005015         add        rsp, 0x8
0000000000005019         mov        rax, 0xffffffffffffffff
0000000000005020         pop        rbx
0000000000005021         pop        rbp
0000000000005022         ret
                        ; endp
0000000000005023         align      8

                     loc_5028:
0000000000005028         lea        rsi, qword [aCannotConvertU_9458]           ; argument "msgid" for method j_dcgettext, "cannot convert U+%04X to local character set", CODE XREF=exit_failure_callback+16
000000000000502f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005031         call       j_dcgettext                                 ; dcgettext
0000000000005036         mov        ecx, ebx
0000000000005038         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000503b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000503d         xor        eax, eax
000000000000503f         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000005044         call       j_error                                     ; error
0000000000005049         add        rsp, 0x8
000000000000504d         mov        rax, 0xffffffffffffffff
0000000000005054         pop        rbx
0000000000005055         pop        rbp
0000000000005056         ret
                        ; endp
0000000000005057         align      32                                          ; End of unwind block (FDE at 0xa4bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_68: int8_t, -104
        ;    var_6E: int8_t, -110
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_A0: int64_t, -160


                     unicode_to_mb:
0000000000005060         push       r15                                         ; Begin of unwind block (FDE at 0xa4f0), CODE XREF=print_unicode_char+32
0000000000005062         push       r14
0000000000005064         mov        r14, rsi
0000000000005067         push       r13
0000000000005069         push       r12
000000000000506b         mov        r12, rdx
000000000000506e         push       rbp
000000000000506f         push       rbx
0000000000005070         mov        rbp, rcx
0000000000005073         mov        ebx, edi
0000000000005075         sub        rsp, 0x78
0000000000005079         mov        rax, qword [fs:0x28]
0000000000005082         mov        qword [rsp+0xa8+var_40], rax
0000000000005087         xor        eax, eax
0000000000005089         mov        eax, dword [initialized.4445]               ; initialized.4445
000000000000508f         test       eax, eax
0000000000005091         je         loc_5140

0000000000005097         mov        edx, dword [is_utf8.4446]                   ; is_utf8.4446

                     loc_509d:
000000000000509d         test       edx, edx                                    ; CODE XREF=unicode_to_mb+283
000000000000509f         jne        loc_50c0

00000000000050a1         cmp        qword [utf8_to_local.4447], 0xffffffffffffffff ; utf8_to_local.4447
00000000000050a9         jne        loc_50c0

00000000000050ab         mov        rdx, rbp
00000000000050ae         lea        rsi, qword [aIconvFunctionN]                ; "iconv function not usable"
00000000000050b5         mov        edi, ebx
00000000000050b7         call       r12
00000000000050ba         jmp        loc_50e4
00000000000050bc         align      64

                     loc_50c0:
00000000000050c0         cmp        ebx, 0x7f                                   ; CODE XREF=unicode_to_mb+63, unicode_to_mb+73
00000000000050c3         ja         loc_5110

00000000000050c5         lea        r13, qword [rsp+0xa8+var_6E]
00000000000050ca         mov        byte [rsp+0xa8+var_6E], bl
00000000000050ce         mov        esi, 0x1

                     loc_50d3:
00000000000050d3         test       edx, edx                                    ; CODE XREF=unicode_to_mb+297
00000000000050d5         je         loc_51b0

00000000000050db         mov        rdx, rbp
00000000000050de         mov        rdi, r13
00000000000050e1         call       r14

                     loc_50e4:
00000000000050e4         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=unicode_to_mb+90, unicode_to_mb+215, unicode_to_mb+432, unicode_to_mb+514
00000000000050e9         xor        rbx, qword [fs:0x28]
00000000000050f2         jne        loc_5267

00000000000050f8         add        rsp, 0x78
00000000000050fc         pop        rbx
00000000000050fd         pop        rbp
00000000000050fe         pop        r12
0000000000005100         pop        r13
0000000000005102         pop        r14
0000000000005104         pop        r15
0000000000005106         ret
                        ; endp
0000000000005107         align      16

                     loc_5110:
0000000000005110         lea        r13, qword [rsp+0xa8+var_6E]                ; CODE XREF=unicode_to_mb+99
0000000000005115         mov        edx, 0x6
000000000000511a         mov        esi, ebx
000000000000511c         mov        rdi, r13
000000000000511f         call       u8_uctomb_aux                               ; u8_uctomb_aux
0000000000005124         test       eax, eax
0000000000005126         jns        loc_5180

0000000000005128         mov        rdx, rbp
000000000000512b         lea        rsi, qword [aCharacterOutOf]                ; "character out of range"
0000000000005132         mov        edi, ebx
0000000000005134         call       r12
0000000000005137         jmp        loc_50e4
0000000000005139         align      64

                     loc_5140:
0000000000005140         lea        r13, qword [aUtf8]                          ; "UTF-8", CODE XREF=unicode_to_mb+49
0000000000005147         call       locale_charset                              ; locale_charset
000000000000514c         mov        ecx, 0x6
0000000000005151         mov        rsi, rax
0000000000005154         mov        rdi, r13
0000000000005157         rep  cmpsb byte [rsi], byte [rdi]
0000000000005159         seta       cl
000000000000515c         sbb        cl, 0x0
000000000000515f         xor        edx, edx
0000000000005161         movsx      ecx, cl
0000000000005164         test       ecx, ecx
0000000000005166         sete       dl
0000000000005169         mov        dword [is_utf8.4446], edx                   ; is_utf8.4446
000000000000516f         jne        loc_5190

                     loc_5171:
0000000000005171         mov        dword [initialized.4445], 0x1               ; initialized.4445, CODE XREF=unicode_to_mb+334
000000000000517b         jmp        loc_509d

                     loc_5180:
0000000000005180         mov        edx, dword [is_utf8.4446]                   ; is_utf8.4446, CODE XREF=unicode_to_mb+198
0000000000005186         movsxd     rsi, eax
0000000000005189         jmp        loc_50d3
000000000000518e         align      16

                     loc_5190:
0000000000005190         mov        rsi, r13                                    ; argument "__fromcode" for method j_iconv_open, CODE XREF=unicode_to_mb+271
0000000000005193         mov        rdi, rax                                    ; argument "__tocode" for method j_iconv_open
0000000000005196         call       j_iconv_open                                ; iconv_open
000000000000519b         cmp        rax, 0xffffffffffffffff
000000000000519f         mov        qword [utf8_to_local.4447], rax             ; utf8_to_local.4447
00000000000051a6         je         loc_5218

                     loc_51a8:
00000000000051a8         mov        edx, dword [is_utf8.4446]                   ; is_utf8.4446, CODE XREF=unicode_to_mb+462
00000000000051ae         jmp        loc_5171

                     loc_51b0:
00000000000051b0         lea        rax, qword [rsp+0xa8+var_80]                ; CODE XREF=unicode_to_mb+117
00000000000051b5         lea        r15, qword [rsp+0xa8+var_78]
00000000000051ba         mov        rdi, qword [utf8_to_local.4447]             ; argument "__cd" for method j_iconv, utf8_to_local.4447
00000000000051c1         mov        qword [rsp+0xa8+var_90], r13
00000000000051c6         mov        qword [rsp+0xa8+var_88], rsi
00000000000051cb         lea        r13, qword [rsp+0xa8+var_68]
00000000000051d0         lea        rdx, qword [rsp+0xa8+var_88]                ; argument "__inbytesleft" for method j_iconv
00000000000051d5         lea        rsi, qword [rsp+0xa8+var_90]                ; argument "__inbuf" for method j_iconv
00000000000051da         mov        r8, r15                                     ; argument "__outbytesleft" for method j_iconv
00000000000051dd         mov        rcx, rax                                    ; argument "__outbuf" for method j_iconv
00000000000051e0         mov        qword [rsp+0xa8+var_80], r13
00000000000051e5         mov        qword [rsp+0xa8+var_78], 0x19
00000000000051ee         mov        qword [rsp+0xa8+var_A0], rax
00000000000051f3         call       j_iconv                                     ; iconv
00000000000051f8         cmp        qword [rsp+0xa8+var_88], 0x0
00000000000051fe         jne        loc_5206

0000000000005200         cmp        rax, 0xffffffffffffffff
0000000000005204         jne        loc_5233

                     loc_5206:
0000000000005206         mov        rdx, rbp                                    ; CODE XREF=unicode_to_mb+414, unicode_to_mb+495
0000000000005209         xor        esi, esi
000000000000520b         mov        edi, ebx
000000000000520d         call       r12
0000000000005210         jmp        loc_50e4
0000000000005215         align      8

                     loc_5218:
0000000000005218         lea        rdi, qword [aAscii]                         ; argument "__tocode" for method j_iconv_open, "ASCII", CODE XREF=unicode_to_mb+326
000000000000521f         mov        rsi, r13                                    ; argument "__fromcode" for method j_iconv_open
0000000000005222         call       j_iconv_open                                ; iconv_open
0000000000005227         mov        qword [utf8_to_local.4447], rax             ; utf8_to_local.4447
000000000000522e         jmp        loc_51a8

                     loc_5233:
0000000000005233         mov        rcx, qword [rsp+0xa8+var_A0]                ; argument "__outbuf" for method j_iconv, CODE XREF=unicode_to_mb+420
0000000000005238         mov        rdi, qword [utf8_to_local.4447]             ; argument "__cd" for method j_iconv, utf8_to_local.4447
000000000000523f         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv
0000000000005241         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
0000000000005243         mov        r8, r15                                     ; argument "__outbytesleft" for method j_iconv
0000000000005246         call       j_iconv                                     ; iconv
000000000000524b         cmp        rax, 0xffffffffffffffff
000000000000524f         je         loc_5206

0000000000005251         mov        rsi, qword [rsp+0xa8+var_80]
0000000000005256         mov        rdx, rbp
0000000000005259         mov        rdi, r13
000000000000525c         sub        rsi, r13
000000000000525f         call       r14
0000000000005262         jmp        loc_50e4

                     loc_5267:
0000000000005267         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=unicode_to_mb+146
                        ; endp
000000000000526c         align      16                                          ; End of unwind block (FDE at 0xa4f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_unicode_char:
0000000000005270         test       edx, edx                                    ; Begin of unwind block (FDE at 0xa53c), CODE XREF=print_esc+640
0000000000005272         lea        rax, qword [fallback_failure_callback]      ; fallback_failure_callback
0000000000005279         lea        rdx, qword [exit_failure_callback]          ; exit_failure_callback
0000000000005280         mov        rcx, rdi
0000000000005283         mov        edi, esi
0000000000005285         lea        rsi, qword [fwrite_success_callback]        ; fwrite_success_callback
000000000000528c         cmove      rdx, rax
0000000000005290         jmp        unicode_to_mb                               ; unicode_to_mb
                        ; endp
0000000000005295         align      32                                          ; End of unwind block (FDE at 0xa53c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     u8_uctomb_aux:
00000000000052a0         cmp        esi, 0x7f                                   ; Begin of unwind block (FDE at 0xa554), CODE XREF=unicode_to_mb+191
00000000000052a3         jbe        loc_5340

00000000000052a9         cmp        esi, 0x7ff
00000000000052af         jbe        loc_5300

00000000000052b1         cmp        esi, 0xffff
00000000000052b7         ja         loc_5310

00000000000052b9         lea        eax, dword [rsi-0xd800]
00000000000052bf         cmp        eax, 0x7ff
00000000000052c4         jbe        loc_5346

00000000000052ca         cmp        edx, 0x2
00000000000052cd         jle        loc_5340

00000000000052cf         mov        eax, 0x3

                     loc_52d4:
00000000000052d4         mov        edx, esi                                    ; CODE XREF=u8_uctomb_aux+150
00000000000052d6         shr        esi, 0x6
00000000000052d9         and        edx, 0x3f
00000000000052dc         or         esi, 0x800
00000000000052e2         or         edx, 0xffffff80
00000000000052e5         mov        byte [rdi+2], dl

                     loc_52e8:
00000000000052e8         mov        edx, esi                                    ; CODE XREF=u8_uctomb_aux+106
00000000000052ea         shr        esi, 0x6
00000000000052ed         and        edx, 0x3f
00000000000052f0         or         sil, 0xc0
00000000000052f4         or         edx, 0xffffff80
00000000000052f7         mov        byte [rdi], sil
00000000000052fa         mov        byte [rdi+1], dl
00000000000052fd         ret
                        ; endp
00000000000052fe         align      256

                     loc_5300:
0000000000005300         cmp        edx, 0x1                                    ; CODE XREF=u8_uctomb_aux+15
0000000000005303         jle        loc_5340

0000000000005305         mov        eax, 0x2
000000000000530a         jmp        loc_52e8
000000000000530c         align      16

                     loc_5310:
0000000000005310         cmp        esi, 0x10ffff                               ; CODE XREF=u8_uctomb_aux+23
0000000000005316         ja         loc_5346

0000000000005318         cmp        edx, 0x3
000000000000531b         jle        loc_5340

000000000000531d         mov        eax, esi
000000000000531f         shr        esi, 0x6
0000000000005322         and        eax, 0x3f
0000000000005325         or         esi, 0x10000
000000000000532b         or         eax, 0xffffff80
000000000000532e         mov        byte [rdi+3], al
0000000000005331         mov        eax, 0x4
0000000000005336         jmp        loc_52d4
0000000000005338         align      64

                     loc_5340:
0000000000005340         mov        eax, 0xfffffffe                             ; CODE XREF=u8_uctomb_aux+3, u8_uctomb_aux+45, u8_uctomb_aux+99, u8_uctomb_aux+123
0000000000005345         ret
                        ; endp

                     loc_5346:
0000000000005346         mov        eax, 0xffffffff                             ; CODE XREF=u8_uctomb_aux+36, u8_uctomb_aux+118
000000000000534b         ret
                        ; endp
000000000000534c         align      16                                          ; End of unwind block (FDE at 0xa554)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000005350         push       r15                                         ; Begin of unwind block (FDE at 0xa56c), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000005352         push       r14
0000000000005354         push       r13
0000000000005356         push       r12
0000000000005358         mov        r12, r9
000000000000535b         push       rbp
000000000000535c         push       rbx
000000000000535d         mov        rbp, rdi
0000000000005360         mov        rbx, r8
0000000000005363         sub        rsp, 0x28
0000000000005367         test       rsi, rsi
000000000000536a         je         loc_5488

0000000000005370         mov        r8, rdx
0000000000005373         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000537a         mov        r9, rcx
000000000000537d         xor        eax, eax
000000000000537f         mov        rcx, rsi
0000000000005382         mov        esi, 0x1
0000000000005387         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_538c:
000000000000538c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x94cc, CODE XREF=version_etc_arn+337
0000000000005393         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005395         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000539a         call       j_dcgettext                                 ; dcgettext
000000000000539f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000053a6         mov        rcx, rax
00000000000053a9         mov        r8d, 0x7e3
00000000000053af         mov        esi, 0x1
00000000000053b4         mov        rdi, rbp
00000000000053b7         xor        eax, eax
00000000000053b9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000053be         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
00000000000053c5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053c7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000053cc         call       j_dcgettext                                 ; dcgettext
00000000000053d1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000053d4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000053d7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000053dc         cmp        r12, 0x9
00000000000053e0         ja         loc_5720

00000000000053e6         lea        rdx, qword [switch_table_97b4]              ; switch_table_97b4
00000000000053ed         movsxd     rax, dword [rdx+r12*4]
00000000000053f1         add        rax, rdx
00000000000053f4         jmp        rax                                         ; switch statement using table at 0x97b4, with 10 cases, 0x5400,0x5476,0x54b0,0x5508,0x5548,0x5590,0x55e0,0x5638,0x5668,0x56d0
00000000000053f6         align      1024

                     loc_5400:
0000000000005400         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000005404         mov        rax, qword [rbx+0x10]
0000000000005408         lea        rsi, qword [aWrittenBySSSns_96c8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000540f         mov        r8, qword [rbx+8]
0000000000005413         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005418         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000541a         mov        r13, qword [rbx+0x30]
000000000000541e         mov        r12, qword [rbx+0x28]
0000000000005422         mov        qword [rsp+0x58+var_48], r9
0000000000005427         mov        r15, qword [rbx+0x20]
000000000000542b         mov        r14, qword [rbx+0x18]
000000000000542f         mov        qword [rsp+0x58+var_58], rax
0000000000005433         mov        qword [rsp+0x58+var_50], r8
0000000000005438         mov        rbx, qword [rbx]
000000000000543b         call       j_dcgettext                                 ; dcgettext
0000000000005440         sub        rsp, 0x8

                     loc_5444:
0000000000005444         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000005449         mov        rdx, rax
000000000000544c         mov        rcx, rbx
000000000000544f         mov        esi, 0x1
0000000000005454         mov        rdi, rbp
0000000000005457         xor        eax, eax
0000000000005459         push       r9
000000000000545b         push       r13
000000000000545d         push       r12
000000000000545f         push       r15
0000000000005461         push       r14
0000000000005463         mov        r9, qword [rsp+0x88+var_58]
0000000000005468         mov        r8, qword [rsp+0x88+var_50]
000000000000546d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005472         add        rsp, 0x30

                     loc_5476:
0000000000005476         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000547a         pop        rbx
000000000000547b         pop        rbp
000000000000547c         pop        r12
000000000000547e         pop        r13
0000000000005480         pop        r14
0000000000005482         pop        r15
0000000000005484         ret
                        ; endp
0000000000005485         align      8

                     loc_5488:
0000000000005488         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000548b         mov        rcx, rdx
000000000000548e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000005495         mov        esi, 0x1
000000000000549a         xor        eax, eax
000000000000549c         call       j___fprintf_chk                             ; __fprintf_chk
00000000000054a1         jmp        loc_538c
00000000000054a6         align      16

                     loc_54b0:
00000000000054b0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000054b4         mov        r9, qword [rbx+0x38]
00000000000054b8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000054bf         mov        rax, qword [rbx+0x10]
00000000000054c3         mov        r8, qword [rbx+8]
00000000000054c7         mov        edx, 0x5
00000000000054cc         mov        r13, qword [rbx+0x30]
00000000000054d0         mov        r12, qword [rbx+0x28]
00000000000054d4         mov        r15, qword [rbx+0x20]
00000000000054d8         mov        r14, qword [rbx+0x18]
00000000000054dc         mov        rbx, qword [rbx]
00000000000054df         mov        qword [rsp+0x58+var_40], r10
00000000000054e4         mov        qword [rsp+0x58+var_48], r9
00000000000054e9         mov        qword [rsp+0x58+var_58], rax
00000000000054ed         mov        qword [rsp+0x58+var_50], r8

                     loc_54f2:
00000000000054f2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
00000000000054f4         call       j_dcgettext                                 ; dcgettext
00000000000054f9         mov        r10, qword [rsp+0x58+var_40]
00000000000054fe         push       r10
0000000000005500         jmp        loc_5444
0000000000005505         align      8

                     loc_5508:
0000000000005508         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000550b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000005512         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005517         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005519         call       j_dcgettext                                 ; dcgettext
000000000000551e         add        rsp, 0x28
0000000000005522         mov        rcx, rbx
0000000000005525         mov        rdi, rbp
0000000000005528         pop        rbx
0000000000005529         pop        rbp
000000000000552a         pop        r12
000000000000552c         pop        r13
000000000000552e         pop        r14
0000000000005530         pop        r15
0000000000005532         mov        rdx, rax
0000000000005535         mov        esi, 0x1
000000000000553a         xor        eax, eax
000000000000553c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005541         align      8

                     loc_5548:
0000000000005548         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000554c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000005553         mov        rbx, qword [rbx]
0000000000005556         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000555b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000555d         call       j_dcgettext                                 ; dcgettext
0000000000005562         add        rsp, 0x28
0000000000005566         mov        r8, r12
0000000000005569         mov        rcx, rbx
000000000000556c         mov        rdi, rbp
000000000000556f         mov        rdx, rax
0000000000005572         mov        esi, 0x1
0000000000005577         pop        rbx
0000000000005578         pop        rbp
0000000000005579         pop        r12
000000000000557b         pop        r13
000000000000557d         pop        r14
000000000000557f         pop        r15
0000000000005581         xor        eax, eax
0000000000005583         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005588         align      16

                     loc_5590:
0000000000005590         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000005594         mov        r12, qword [rbx+8]
0000000000005598         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000559f         mov        rbx, qword [rbx]
00000000000055a2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055a7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055a9         call       j_dcgettext                                 ; dcgettext
00000000000055ae         add        rsp, 0x28
00000000000055b2         mov        r9, r13
00000000000055b5         mov        r8, r12
00000000000055b8         mov        rcx, rbx
00000000000055bb         mov        rdi, rbp
00000000000055be         mov        rdx, rax
00000000000055c1         pop        rbx
00000000000055c2         pop        rbp
00000000000055c3         pop        r12
00000000000055c5         pop        r13
00000000000055c7         pop        r14
00000000000055c9         pop        r15
00000000000055cb         mov        esi, 0x1
00000000000055d0         xor        eax, eax
00000000000055d2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000055d7         align      32

                     loc_55e0:
00000000000055e0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
00000000000055e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055ec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055ee         mov        r14, qword [rbx+0x18]
00000000000055f2         mov        r13, qword [rbx+0x10]
00000000000055f6         mov        r12, qword [rbx+8]
00000000000055fa         mov        rbx, qword [rbx]
00000000000055fd         call       j_dcgettext                                 ; dcgettext
0000000000005602         sub        rsp, 0x8

                     loc_5606:
0000000000005606         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000005608         mov        rdx, rax
000000000000560b         mov        r9, r13
000000000000560e         mov        r8, r12
0000000000005611         mov        rcx, rbx
0000000000005614         mov        rdi, rbp
0000000000005617         mov        esi, 0x1
000000000000561c         xor        eax, eax
000000000000561e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005623         pop        rax
0000000000005624         pop        rdx
0000000000005625         add        rsp, 0x28
0000000000005629         pop        rbx
000000000000562a         pop        rbp
000000000000562b         pop        r12
000000000000562d         pop        r13
000000000000562f         pop        r14
0000000000005631         pop        r15
0000000000005633         ret
                        ; endp
0000000000005634         align      8

                     loc_5638:
0000000000005638         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000563c         lea        rsi, qword [aWrittenBySSSns_9648]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000005643         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005648         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000564a         mov        r14, qword [rbx+0x18]
000000000000564e         mov        r13, qword [rbx+0x10]
0000000000005652         mov        r12, qword [rbx+8]
0000000000005656         mov        rbx, qword [rbx]
0000000000005659         call       j_dcgettext                                 ; dcgettext
000000000000565e         push       r15
0000000000005660         jmp        loc_5606
0000000000005662         align      8

                     loc_5668:
0000000000005668         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000566c         mov        r12, qword [rbx+0x28]
0000000000005670         lea        rsi, qword [aWrittenBySSSns_9670]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000005677         mov        r15, qword [rbx+0x20]
000000000000567b         mov        r14, qword [rbx+0x18]
000000000000567f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005684         mov        r13, qword [rbx+0x10]
0000000000005688         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000568a         mov        rbx, qword [rbx]
000000000000568d         mov        qword [rsp+0x58+var_58], r8
0000000000005691         call       j_dcgettext                                 ; dcgettext
0000000000005696         sub        rsp, 0x8
000000000000569a         mov        r9, r13
000000000000569d         push       r12
000000000000569f         push       r15
00000000000056a1         push       r14

                     loc_56a3:
00000000000056a3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000056a8         mov        rcx, rbx
00000000000056ab         mov        rdx, rax
00000000000056ae         mov        rdi, rbp
00000000000056b1         mov        esi, 0x1
00000000000056b6         xor        eax, eax
00000000000056b8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000056bd         add        rsp, 0x20
00000000000056c1         add        rsp, 0x28
00000000000056c5         pop        rbx
00000000000056c6         pop        rbp
00000000000056c7         pop        r12
00000000000056c9         pop        r13
00000000000056cb         pop        r14
00000000000056cd         pop        r15
00000000000056cf         ret
                        ; endp

                     loc_56d0:
00000000000056d0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000056d4         mov        r13, qword [rbx+0x30]
00000000000056d8         lea        rsi, qword [aWrittenBySSSns_9698]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000056df         mov        r12, qword [rbx+0x28]
00000000000056e3         mov        r15, qword [rbx+0x20]
00000000000056e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056ec         mov        r14, qword [rbx+0x18]
00000000000056f0         mov        r8, qword [rbx+8]
00000000000056f4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056f6         mov        qword [rsp+0x58+var_50], r9
00000000000056fb         mov        rbx, qword [rbx]
00000000000056fe         mov        qword [rsp+0x58+var_58], r8
0000000000005702         call       j_dcgettext                                 ; dcgettext
0000000000005707         push       r13
0000000000005709         push       r12
000000000000570b         push       r15
000000000000570d         push       r14
000000000000570f         mov        r9, qword [rsp+0x78+var_50]
0000000000005714         jmp        loc_56a3
0000000000005716         align      32

                     loc_5720:
0000000000005720         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000005724         mov        r9, qword [rbx+0x38]
0000000000005728         mov        edx, 0x5
000000000000572d         mov        rax, qword [rbx+0x10]
0000000000005731         mov        r8, qword [rbx+8]
0000000000005735         lea        rsi, qword [aWrittenBySSSns_9730]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000573c         mov        r13, qword [rbx+0x30]
0000000000005740         mov        r12, qword [rbx+0x28]
0000000000005744         mov        r15, qword [rbx+0x20]
0000000000005748         mov        r14, qword [rbx+0x18]
000000000000574c         mov        qword [rsp+0x58+var_40], r10
0000000000005751         mov        qword [rsp+0x58+var_48], r9
0000000000005756         mov        qword [rsp+0x58+var_58], rax
000000000000575a         mov        qword [rsp+0x58+var_50], r8
000000000000575f         mov        rbx, qword [rbx]
0000000000005762         jmp        loc_54f2
0000000000005767         align      16                                          ; End of unwind block (FDE at 0xa56c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000005770         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xa680)
0000000000005773         cmp        qword [r8], 0x0
0000000000005777         je         j_version_etc_arn                           ; version_etc_arn

0000000000005779         nop        dword [rax]

                     loc_5780:
0000000000005780         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000005784         cmp        qword [r8+r9*8], 0x0
0000000000005789         jne        loc_5780

                     j_version_etc_arn:        // version_etc_arn
000000000000578b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000005790         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xa680), Begin of unwind block (FDE at 0xa694)
0000000000005794         mov        r10, r8
0000000000005797         xor        r9d, r9d
000000000000579a         mov        rax, qword [fs:0x28]
00000000000057a3         mov        qword [rsp+0x68+var_10], rax
00000000000057a8         xor        eax, eax
00000000000057aa         mov        r8, rsp
00000000000057ad         nop        dword [rax]

                     loc_57b0:
00000000000057b0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000057b3         cmp        eax, 0x2f
00000000000057b6         ja         loc_57fa

00000000000057b8         mov        r11d, eax
00000000000057bb         add        r11, qword [r10+0x10]
00000000000057bf         add        eax, 0x8
00000000000057c2         mov        dword [r10], eax

                     loc_57c5:
00000000000057c5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000057c8         test       rax, rax
00000000000057cb         mov        qword [r8+r9*8], rax
00000000000057cf         je         loc_57db

00000000000057d1         add        r9, 0x1
00000000000057d5         cmp        r9, 0xa
00000000000057d9         jne        loc_57b0

                     loc_57db:
00000000000057db         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
00000000000057e0         mov        rax, qword [rsp+0x68+var_10]
00000000000057e5         xor        rax, qword [fs:0x28]
00000000000057ee         jne        loc_57f5

00000000000057f0         add        rsp, 0x68
00000000000057f4         ret
                        ; endp

                     loc_57f5:
00000000000057f5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_57fa:
00000000000057fa         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
00000000000057fe         lea        rax, qword [r11+8]
0000000000005802         mov        qword [r10+8], rax
0000000000005806         jmp        loc_57c5
0000000000005808         align      16                                          ; End of unwind block (FDE at 0xa694)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000005810         push       rbp                                         ; Begin of unwind block (FDE at 0xa6b0), CODE XREF=main+1946
0000000000005811         push       rbx
0000000000005812         mov        r10d, 0x20
0000000000005818         xor        r11d, r11d
000000000000581b         sub        rsp, 0xb8
0000000000005822         mov        rax, qword [fs:0x28]
000000000000582b         mov        qword [rsp+0xc8+var_50], rax
0000000000005830         xor        eax, eax
0000000000005832         lea        rax, qword [rsp+0xc8+arg_0]
000000000000583a         mov        qword [rsp+0xc8+var_28], r8
0000000000005842         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000584a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000584f         mov        qword [rsp+0xc8+var_20], r9
0000000000005857         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000585f         mov        qword [rsp+0xc8+var_B8], rax
0000000000005864         lea        rax, qword [rsp+0xc8+var_48]
000000000000586c         xor        r9d, r9d
000000000000586f         mov        qword [rsp+0xc8+var_B0], rax
0000000000005874         mov        rbp, rax
0000000000005877         nop        word [rax+rax]

                     loc_5880:
0000000000005880         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000005884         ja         loc_58dc

0000000000005886         mov        eax, r10d
0000000000005889         mov        r11d, 0x1
000000000000588f         add        r10d, 0x8
0000000000005893         add        rax, rbp

                     loc_5896:
0000000000005896         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000005899         test       rax, rax
000000000000589c         mov        qword [r8+r9*8], rax
00000000000058a0         je         loc_58ac

00000000000058a2         add        r9, 0x1
00000000000058a6         cmp        r9, 0xa
00000000000058aa         jne        loc_5880

                     loc_58ac:
00000000000058ac         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000058af         jne        loc_58d5

                     loc_58b1:
00000000000058b1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
00000000000058b6         mov        rax, qword [rsp+0xc8+var_50]
00000000000058bb         xor        rax, qword [fs:0x28]
00000000000058c4         jne        loc_58d0

00000000000058c6         add        rsp, 0xb8
00000000000058cd         pop        rbx
00000000000058ce         pop        rbp
00000000000058cf         ret
                        ; endp

                     loc_58d0:
00000000000058d0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_58d5:
00000000000058d5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
00000000000058da         jmp        loc_58b1

                     loc_58dc:
00000000000058dc         mov        rax, rbx                                    ; CODE XREF=version_etc+116
00000000000058df         add        rbx, 0x8
00000000000058e3         jmp        loc_5896
00000000000058e5         align      16                                          ; End of unwind block (FDE at 0xa6b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
00000000000058f0         push       rbx                                         ; Begin of unwind block (FDE at 0xa6dc)
00000000000058f1         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
00000000000058f8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000058fd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058ff         call       j_dcgettext                                 ; dcgettext
0000000000005904         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000590b         mov        rsi, rax
000000000000590e         mov        edi, 0x1
0000000000005913         xor        eax, eax
0000000000005915         call       j___printf_chk                              ; __printf_chk
000000000000591a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000005921         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005926         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005928         call       j_dcgettext                                 ; dcgettext
000000000000592d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005934         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x8c2b
000000000000593b         mov        rsi, rax
000000000000593e         mov        edi, 0x1
0000000000005943         xor        eax, eax
0000000000005945         call       j___printf_chk                              ; __printf_chk
000000000000594a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005951         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000005958         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000595a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000595f         call       j_dcgettext                                 ; dcgettext
0000000000005964         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005967         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000596a         pop        rbx
000000000000596b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000005970         push       rbx                                         ; End of unwind block (FDE at 0xa6dc), Begin of unwind block (FDE at 0xa6fc), CODE XREF=main+1642, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000005971         mov        rbx, rdi
0000000000005974         call       j_malloc                                    ; malloc
0000000000005979         test       rax, rax
000000000000597c         jne        loc_5983

000000000000597e         test       rbx, rbx
0000000000005981         jne        loc_5985

                     loc_5983:
0000000000005983         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000005984         ret
                        ; endp

                     loc_5985:
0000000000005985         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_598a:
000000000000598a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa6fc)
                     xnmalloc:
0000000000005990         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xa718)
0000000000005993         mul        rsi
0000000000005996         mov        rdi, rax
0000000000005999         seto       al
000000000000599c         test       rdi, rdi
000000000000599f         js         loc_59ab

00000000000059a1         movzx      eax, al
00000000000059a4         test       rax, rax
00000000000059a7         jne        loc_59ab

00000000000059a9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_59ab:
00000000000059ab         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000059af         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_59b4:
00000000000059b4         nop                                                    ; End of unwind block (FDE at 0xa718)
00000000000059b6         nop        word [cs:rax+rax]
                     xcharalloc:
00000000000059c0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xa72c)
                        ; endp
00000000000059c2         align      16                                          ; End of unwind block (FDE at 0xa72c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
00000000000059d0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xa740), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
00000000000059d3         push       rbx
00000000000059d4         mov        rbx, rsi
00000000000059d7         jne        loc_59de

00000000000059d9         test       rdi, rdi
00000000000059dc         jne        loc_59f8

                     loc_59de:
00000000000059de         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
00000000000059e1         call       j_realloc                                   ; realloc
00000000000059e6         test       rax, rax
00000000000059e9         jne        loc_59f0

00000000000059eb         test       rbx, rbx
00000000000059ee         jne        loc_5a01

                     loc_59f0:
00000000000059f0         pop        rbx                                         ; CODE XREF=xrealloc+25
00000000000059f1         ret
                        ; endp
00000000000059f2         align      8

                     loc_59f8:
00000000000059f8         call       j_free                                      ; free, CODE XREF=xrealloc+12
00000000000059fd         xor        eax, eax
00000000000059ff         pop        rbx
0000000000005a00         ret
                        ; endp

                     loc_5a01:
0000000000005a01         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5a06:
0000000000005a06         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xa740)
                     xnrealloc:
0000000000005a10         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xa764)
0000000000005a13         mul        rdx
0000000000005a16         mov        rsi, rax
0000000000005a19         seto       al
0000000000005a1c         test       rsi, rsi
0000000000005a1f         js         loc_5a2b

0000000000005a21         movzx      eax, al
0000000000005a24         test       rax, rax
0000000000005a27         jne        loc_5a2b

0000000000005a29         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_5a2b:
0000000000005a2b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000005a2f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5a34:
0000000000005a34         nop                                                    ; End of unwind block (FDE at 0xa764)
0000000000005a36         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000005a40         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa778)
0000000000005a43         mov        r9, rdx
0000000000005a46         mov        rcx, qword [rsi]
0000000000005a49         je         loc_5a80

0000000000005a4b         xor        edx, edx
0000000000005a4d         movabs     rax, 0x5555555555555554
0000000000005a57         div        r9
0000000000005a5a         cmp        rax, rcx
0000000000005a5d         jbe        loc_5a9b

0000000000005a5f         mov        rax, rcx
0000000000005a62         shr        rax, 0x1
0000000000005a65         lea        rcx, qword [rax+rcx+1]

                     loc_5a6a:
0000000000005a6a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000005a6d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000005a71         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000005a74         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000005a79         align      128

                     loc_5a80:
0000000000005a80         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000005a83         je         loc_5aa8

                     loc_5a85:
0000000000005a85         mov        rax, rcx                                    ; CODE XREF=sub_5aa4+28
0000000000005a88         mul        r9
0000000000005a8b         seto       dl
0000000000005a8e         test       rax, rax
0000000000005a91         movzx      edx, dl
0000000000005a94         js         loc_5a9b

0000000000005a96         test       rdx, rdx
0000000000005a99         je         loc_5a6a

                     loc_5a9b:
0000000000005a9b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000005a9f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5aa4:
0000000000005aa4         nop        dword [rax]
                        ; endp

                     loc_5aa8:
0000000000005aa8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000005aaa         mov        eax, 0x80
0000000000005aaf         xor        r8d, r8d
0000000000005ab2         div        r9
0000000000005ab5         test       rax, rax
0000000000005ab8         sete       r8b
0000000000005abc         lea        rcx, qword [r8+rax]
0000000000005ac0         jmp        loc_5a85
0000000000005ac2         align      16                                          ; End of unwind block (FDE at 0xa778)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000005ad0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa790)
0000000000005ad3         mov        rax, qword [rsi]
0000000000005ad6         je         loc_5b00

0000000000005ad8         movabs     rdx, 0x5555555555555553
0000000000005ae2         cmp        rax, rdx
0000000000005ae5         ja         loc_5b11

0000000000005ae7         mov        rdx, rax
0000000000005aea         shr        rdx, 0x1
0000000000005aed         lea        rax, qword [rdx+rax+1]

                     loc_5af2:
0000000000005af2         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000005af5         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000005af8         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000005afd         align      256

                     loc_5b00:
0000000000005b00         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000005b03         mov        edx, 0x80
0000000000005b08         cmove      rax, rdx
0000000000005b0c         test       rax, rax
0000000000005b0f         jns        loc_5af2

                     loc_5b11:
0000000000005b11         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000005b15         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5b1a:
0000000000005b1a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa790)
                     xzalloc:
0000000000005b20         push       rbx                                         ; Begin of unwind block (FDE at 0xa7a8)
0000000000005b21         mov        rbx, rdi
0000000000005b24         call       xmalloc                                     ; xmalloc
0000000000005b29         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000005b2c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000005b2e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000005b31         pop        rbx
0000000000005b32         jmp        j_memset                                    ; memset
                        ; endp
0000000000005b37         align      64                                          ; End of unwind block (FDE at 0xa7a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000005b40         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xa7c4)
0000000000005b43         sub        rsp, 0x8
0000000000005b47         mul        rsi
0000000000005b4a         seto       dl
0000000000005b4d         test       rax, rax
0000000000005b50         js         loc_5b69

0000000000005b52         movzx      edx, dl
0000000000005b55         test       rdx, rdx
0000000000005b58         jne        loc_5b69

0000000000005b5a         call       j_calloc                                    ; calloc
0000000000005b5f         test       rax, rax
0000000000005b62         je         loc_5b69

0000000000005b64         add        rsp, 0x8
0000000000005b68         ret
                        ; endp

                     loc_5b69:
0000000000005b69         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5b6e:
0000000000005b6e         nop                                                    ; End of unwind block (FDE at 0xa7c4)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000005b70         push       rbp                                         ; Begin of unwind block (FDE at 0xa7e0), CODE XREF=clone_quoting_options+40
0000000000005b71         push       rbx
0000000000005b72         mov        rbp, rdi
0000000000005b75         mov        rdi, rsi
0000000000005b78         mov        rbx, rsi
0000000000005b7b         sub        rsp, 0x8
0000000000005b7f         call       xmalloc                                     ; xmalloc
0000000000005b84         add        rsp, 0x8
0000000000005b88         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000005b8b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000005b8e         pop        rbx
0000000000005b8f         pop        rbp
0000000000005b90         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000005b93         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000005b98         align      32                                          ; End of unwind block (FDE at 0xa7e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000005ba0         push       rbx                                         ; Begin of unwind block (FDE at 0xa808)
0000000000005ba1         mov        rbx, rdi
0000000000005ba4         call       j_strlen                                    ; strlen
0000000000005ba9         mov        rdi, rbx
0000000000005bac         lea        rsi, qword [rax+1]
0000000000005bb0         pop        rbx
0000000000005bb1         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000005bb3         align      64                                          ; End of unwind block (FDE at 0xa808)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000005bc0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xa824), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000005bc7         sub        rsp, 0x8
0000000000005bcb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005bd0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005bd2         call       j_dcgettext                                 ; dcgettext
0000000000005bd7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000005bdd         lea        rdx, qword [aInvalidFieldWi+21]             ; argument "__format" for method j_error, 0x8cce
0000000000005be4         mov        rcx, rax
0000000000005be7         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005be9         xor        eax, eax
0000000000005beb         call       j_error                                     ; error
0000000000005bf0         call       j_abort                                     ; abort
                        ; endp
0000000000005bf5         align      1024                                        ; End of unwind block (FDE at 0xa824)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xvprintf:
0000000000005c00         push       rbp                                         ; Begin of unwind block (FDE at 0xa83c), CODE XREF=xprintf+148
0000000000005c01         push       rbx
0000000000005c02         sub        rsp, 0x8
0000000000005c06         call       rpl_vprintf                                 ; rpl_vprintf
0000000000005c0b         test       eax, eax
0000000000005c0d         mov        ebx, eax
0000000000005c0f         js         loc_5c20

                     loc_5c11:
0000000000005c11         add        rsp, 0x8                                    ; CODE XREF=xvprintf+46, xvprintf+93
0000000000005c15         mov        eax, ebx
0000000000005c17         pop        rbx
0000000000005c18         pop        rbp
0000000000005c19         ret
                        ; endp
0000000000005c1a         align      32

                     loc_5c20:
0000000000005c20         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_ferror, stdout@@GLIBC_2.2.5, CODE XREF=xvprintf+15
0000000000005c27         call       j_ferror                                    ; ferror
0000000000005c2c         test       eax, eax
0000000000005c2e         jne        loc_5c11

0000000000005c30         lea        rsi, qword [aCannotPerformF]                ; argument "msgid" for method j_dcgettext, "cannot perform formatted output"
0000000000005c37         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005c39         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005c3e         call       j_dcgettext                                 ; dcgettext
0000000000005c43         mov        rbp, rax
0000000000005c46         call       j___errno_location                          ; __errno_location
0000000000005c4b         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000005c51         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000005c53         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000005c56         xor        eax, eax
0000000000005c58         call       j_error                                     ; error
0000000000005c5d         jmp        loc_5c11
0000000000005c5f         align      32                                          ; End of unwind block (FDE at 0xa83c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     xprintf:
0000000000005c60         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0xa868), CODE XREF=main+2064, main+2130, main+2163, main+2296, main+2451, main+2843, main+2941, main+2997, main+3036, main+3069, main+3124
0000000000005c67         test       al, al
0000000000005c69         mov        qword [rsp+0xd8+var_B0], rsi
0000000000005c6e         mov        qword [rsp+0xd8+var_A8], rdx
0000000000005c73         mov        qword [rsp+0xd8+var_A0], rcx
0000000000005c78         mov        qword [rsp+0xd8+var_98], r8
0000000000005c7d         mov        qword [rsp+0xd8+var_90], r9
0000000000005c82         je         loc_5cbb

0000000000005c84         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000005c89         movaps     xmmword [rsp+0xd8+var_78], xmm1
0000000000005c8e         movaps     xmmword [rsp+0xd8+var_68], xmm2
0000000000005c93         movaps     xmmword [rsp+0xd8+var_58], xmm3
0000000000005c9b         movaps     xmmword [rsp+0xd8+var_48], xmm4
0000000000005ca3         movaps     xmmword [rsp+0xd8+var_38], xmm5
0000000000005cab         movaps     xmmword [rsp+0xd8+var_28], xmm6
0000000000005cb3         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_5cbb:
0000000000005cbb         mov        rax, qword [fs:0x28]                        ; CODE XREF=xprintf+34
0000000000005cc4         mov        qword [rsp+0xd8+var_C0], rax
0000000000005cc9         xor        eax, eax
0000000000005ccb         lea        rax, qword [rsp+0xd8+arg_0]
0000000000005cd3         mov        rsi, rsp
0000000000005cd6         mov        qword [rsp+0xd8+var_D0], rax
0000000000005cdb         lea        rax, qword [rsp+0xd8+var_B8]
0000000000005ce0         mov        dword [rsp+0xd8+var_D8], 0x8
0000000000005ce7         mov        dword [rsp+0xd8+var_D4], 0x30
0000000000005cef         mov        qword [rsp+0xd8+var_C8], rax
0000000000005cf4         call       xvprintf                                    ; xvprintf
0000000000005cf9         mov        rdx, qword [rsp+0xd8+var_C0]
0000000000005cfe         xor        rdx, qword [fs:0x28]
0000000000005d07         jne        loc_5d11

0000000000005d09         add        rsp, 0xd8
0000000000005d10         ret
                        ; endp

                     loc_5d11:
0000000000005d11         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xprintf+167
                        ; endp
0000000000005d16         align      32                                          ; End of unwind block (FDE at 0xa868)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xvfprintf:
0000000000005d20         push       rbp                                         ; Begin of unwind block (FDE at 0xa884), CODE XREF=xfprintf+143
0000000000005d21         push       rbx
0000000000005d22         mov        rbp, rdi
0000000000005d25         sub        rsp, 0x8
0000000000005d29         call       rpl_vfprintf                                ; rpl_vfprintf
0000000000005d2e         test       eax, eax
0000000000005d30         mov        ebx, eax
0000000000005d32         js         loc_5d40

                     loc_5d34:
0000000000005d34         add        rsp, 0x8                                    ; CODE XREF=xvfprintf+42, xvfprintf+89
0000000000005d38         mov        eax, ebx
0000000000005d3a         pop        rbx
0000000000005d3b         pop        rbp
0000000000005d3c         ret
                        ; endp
0000000000005d3d         align      64

                     loc_5d40:
0000000000005d40         mov        rdi, rbp                                    ; argument "__stream" for method j_ferror, CODE XREF=xvfprintf+18
0000000000005d43         call       j_ferror                                    ; ferror
0000000000005d48         test       eax, eax
0000000000005d4a         jne        loc_5d34

0000000000005d4c         lea        rsi, qword [aCannotPerformF]                ; argument "msgid" for method j_dcgettext, "cannot perform formatted output"
0000000000005d53         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005d55         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005d5a         call       j_dcgettext                                 ; dcgettext
0000000000005d5f         mov        rbp, rax
0000000000005d62         call       j___errno_location                          ; __errno_location
0000000000005d67         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000005d6d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000005d6f         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000005d72         xor        eax, eax
0000000000005d74         call       j_error                                     ; error
0000000000005d79         jmp        loc_5d34
0000000000005d7b         align      128                                         ; End of unwind block (FDE at 0xa884)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     xfprintf:
0000000000005d80         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0xa8b0)
0000000000005d87         test       al, al
0000000000005d89         mov        qword [rsp+0xd8+var_A8], rdx
0000000000005d8e         mov        qword [rsp+0xd8+var_A0], rcx
0000000000005d93         mov        qword [rsp+0xd8+var_98], r8
0000000000005d98         mov        qword [rsp+0xd8+var_90], r9
0000000000005d9d         je         loc_5dd6

0000000000005d9f         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000005da4         movaps     xmmword [rsp+0xd8+var_78], xmm1
0000000000005da9         movaps     xmmword [rsp+0xd8+var_68], xmm2
0000000000005dae         movaps     xmmword [rsp+0xd8+var_58], xmm3
0000000000005db6         movaps     xmmword [rsp+0xd8+var_48], xmm4
0000000000005dbe         movaps     xmmword [rsp+0xd8+var_38], xmm5
0000000000005dc6         movaps     xmmword [rsp+0xd8+var_28], xmm6
0000000000005dce         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_5dd6:
0000000000005dd6         mov        rax, qword [fs:0x28]                        ; CODE XREF=xfprintf+29
0000000000005ddf         mov        qword [rsp+0xd8+var_C0], rax
0000000000005de4         xor        eax, eax
0000000000005de6         lea        rax, qword [rsp+0xd8+arg_0]
0000000000005dee         mov        rdx, rsp
0000000000005df1         mov        qword [rsp+0xd8+var_D0], rax
0000000000005df6         lea        rax, qword [rsp+0xd8+var_B8]
0000000000005dfb         mov        dword [rsp+0xd8+var_D8], 0x10
0000000000005e02         mov        dword [rsp+0xd8+var_D4], 0x30
0000000000005e0a         mov        qword [rsp+0xd8+var_C8], rax
0000000000005e0f         call       xvfprintf                                   ; xvfprintf
0000000000005e14         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000005e19         xor        rcx, qword [fs:0x28]
0000000000005e22         jne        loc_5e2c

0000000000005e24         add        rsp, 0xd8
0000000000005e2b         ret
                        ; endp

                     loc_5e2c:
0000000000005e2c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xfprintf+162
                        ; endp
0000000000005e31         align      64                                          ; End of unwind block (FDE at 0xa8b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000005e40         push       r13                                         ; Begin of unwind block (FDE at 0xa8cc), CODE XREF=sub_3b00+534
0000000000005e42         push       r12
0000000000005e44         mov        r13, rsi
0000000000005e47         push       rbp
0000000000005e48         push       rbx
0000000000005e49         mov        rbx, rdi
0000000000005e4c         mov        r12, rdx
0000000000005e4f         sub        rsp, 0x18
0000000000005e53         mov        rax, qword [fs:0x28]
0000000000005e5c         mov        qword [rsp+0x38+var_30], rax
0000000000005e61         xor        eax, eax
0000000000005e63         lea        rax, qword [rsp+0x38+var_34]
0000000000005e68         test       rdi, rdi
0000000000005e6b         cmove      rbx, rax
0000000000005e6f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000005e72         call       j_mbrtowc                                   ; mbrtowc
0000000000005e77         cmp        rax, 0xfffffffffffffffd
0000000000005e7b         mov        rbp, rax
0000000000005e7e         jbe        loc_5ea0

0000000000005e80         test       r12, r12
0000000000005e83         je         loc_5ea0

0000000000005e85         xor        edi, edi
0000000000005e87         call       hard_locale                                 ; hard_locale
0000000000005e8c         test       al, al
0000000000005e8e         jne        loc_5ea0

0000000000005e90         movzx      eax, byte [r13]
0000000000005e95         mov        ebp, 0x1
0000000000005e9a         mov        dword [rbx], eax
0000000000005e9c         nop        dword [rax]

                     loc_5ea0:
0000000000005ea0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000005ea5         xor        rdx, qword [fs:0x28]
0000000000005eae         mov        rax, rbp
0000000000005eb1         jne        loc_5ebe

0000000000005eb3         add        rsp, 0x18
0000000000005eb7         pop        rbx
0000000000005eb8         pop        rbp
0000000000005eb9         pop        r12
0000000000005ebb         pop        r13
0000000000005ebd         ret
                        ; endp

                     loc_5ebe:
0000000000005ebe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000005ec3         align      16                                          ; End of unwind block (FDE at 0xa8cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_808: int8_t, -2056
        ;    var_810: int64_t, -2064


                     rpl_vfprintf:
0000000000005ed0         push       r13                                         ; Begin of unwind block (FDE at 0xa90c), CODE XREF=xvfprintf+9, rpl_vprintf+13
0000000000005ed2         push       r12
0000000000005ed4         mov        rax, rsi
0000000000005ed7         push       rbp
0000000000005ed8         push       rbx
0000000000005ed9         mov        r13, rdi
0000000000005edc         sub        rsp, 0x7f8
0000000000005ee3         lea        r12, qword [rsp+0x818+var_808]
0000000000005ee8         lea        rsi, qword [rsp+0x818+var_810]
0000000000005eed         mov        qword [rsp+0x818+var_810], 0x7d0
0000000000005ef6         mov        rcx, qword [fs:0x28]
0000000000005eff         mov        qword [rsp+0x818+var_30], rcx
0000000000005f07         xor        ecx, ecx
0000000000005f09         mov        rdi, r12
0000000000005f0c         mov        rcx, rdx
0000000000005f0f         mov        rdx, rax
0000000000005f12         call       vasnprintf                                  ; vasnprintf
0000000000005f17         test       rax, rax
0000000000005f1a         mov        rbx, qword [rsp+0x818+var_810]
0000000000005f1f         je         loc_5fae

0000000000005f25         mov        rcx, r13                                    ; argument "__s" for method j_fwrite
0000000000005f28         mov        rdx, rbx                                    ; argument "__n" for method j_fwrite
0000000000005f2b         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000005f30         mov        rdi, rax                                    ; argument "__ptr" for method j_fwrite
0000000000005f33         mov        rbp, rax
0000000000005f36         call       j_fwrite                                    ; fwrite
0000000000005f3b         cmp        rax, rbx
0000000000005f3e         jb         loc_5f80

0000000000005f40         cmp        rbp, r12
0000000000005f43         je         loc_5f4d

0000000000005f45         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000005f48         call       j_free                                      ; free

                     loc_5f4d:
0000000000005f4d         cmp        rbx, 0x7fffffff                             ; CODE XREF=rpl_vfprintf+115
0000000000005f54         ja         loc_5fa3

                     loc_5f56:
0000000000005f56         mov        rcx, qword [rsp+0x818+var_30]               ; CODE XREF=rpl_vfprintf+184, rpl_vfprintf+209, rpl_vfprintf+235
0000000000005f5e         xor        rcx, qword [fs:0x28]
0000000000005f67         mov        eax, ebx
0000000000005f69         jne        loc_5fbd

0000000000005f6b         add        rsp, 0x7f8
0000000000005f72         pop        rbx
0000000000005f73         pop        rbp
0000000000005f74         pop        r12
0000000000005f76         pop        r13
0000000000005f78         ret
                        ; endp
0000000000005f79         align      128

                     loc_5f80:
0000000000005f80         cmp        rbp, r12                                    ; CODE XREF=rpl_vfprintf+110
0000000000005f83         mov        ebx, 0xffffffff
0000000000005f88         je         loc_5f56

0000000000005f8a         call       j___errno_location                          ; __errno_location
0000000000005f8f         mov        r13d, dword [rax]
0000000000005f92         mov        r12, rax
0000000000005f95         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000005f98         call       j_free                                      ; free
0000000000005f9d         mov        dword [r12], r13d
0000000000005fa1         jmp        loc_5f56

                     loc_5fa3:
0000000000005fa3         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_vfprintf+132
0000000000005fa8         mov        dword [rax], 0x4b

                     loc_5fae:
0000000000005fae         mov        rdi, r13                                    ; CODE XREF=rpl_vfprintf+79
0000000000005fb1         mov        ebx, 0xffffffff
0000000000005fb6         call       fseterr                                     ; fseterr
0000000000005fbb         jmp        loc_5f56

                     loc_5fbd:
0000000000005fbd         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vfprintf+153
                        ; endp
0000000000005fc2         align      16                                          ; End of unwind block (FDE at 0xa90c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_vprintf:
0000000000005fd0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xa94c), CODE XREF=xvprintf+6
0000000000005fd3         mov        rsi, rdi
0000000000005fd6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005fdd         jmp        rpl_vfprintf                                ; rpl_vfprintf
                        ; endp
0000000000005fe2         align      16                                          ; End of unwind block (FDE at 0xa94c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: -40


                     c_strtold:
0000000000005ff0         push       r12                                         ; Begin of unwind block (FDE at 0xa964), CODE XREF=cl_strtold+120
0000000000005ff2         push       rbp
0000000000005ff3         mov        rbp, rdi
0000000000005ff6         push       rbx
0000000000005ff7         mov        rbx, rsi
0000000000005ffa         sub        rsp, 0x10
0000000000005ffe         mov        rax, qword [c_locale_cache]                 ; c_locale_cache
0000000000006005         test       rax, rax
0000000000006008         je         loc_6080

                     loc_600a:
000000000000600a         mov        rdi, qword [c_locale_cache]                 ; c_locale_cache, CODE XREF=c_strtold+170
0000000000006011         test       rdi, rdi
0000000000006014         je         loc_6060

0000000000006016         call       j_uselocale                                 ; uselocale
000000000000601b         test       rax, rax
000000000000601e         mov        r12, rax
0000000000006021         je         loc_6060

0000000000006023         mov        rsi, rbx                                    ; argument "__endptr" for method j_strtold
0000000000006026         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtold
0000000000006029         call       j_strtold                                   ; strtold
000000000000602e         fstp       tword [rsp+0x28+var_28]
0000000000006031         call       j___errno_location                          ; __errno_location
0000000000006036         mov        rdi, r12                                    ; argument "__dataset" for method j_uselocale
0000000000006039         mov        rbx, rax
000000000000603c         mov        ebp, dword [rax]
000000000000603e         call       j_uselocale                                 ; uselocale
0000000000006043         test       rax, rax
0000000000006046         fld        tword [rsp+0x28+var_28]
0000000000006049         je         loc_609f

000000000000604b         mov        dword [rbx], ebp
000000000000604d         add        rsp, 0x10
0000000000006051         pop        rbx
0000000000006052         pop        rbp
0000000000006053         pop        r12
0000000000006055         ret
                        ; endp
0000000000006056         align      32

                     loc_6060:
0000000000006060         test       rbx, rbx                                    ; CODE XREF=c_strtold+36, c_strtold+49
0000000000006063         jne        loc_6070

0000000000006065         add        rsp, 0x10
0000000000006069         fldz
000000000000606b         pop        rbx
000000000000606c         pop        rbp
000000000000606d         pop        r12
000000000000606f         ret
                        ; endp

                     loc_6070:
0000000000006070         mov        qword [rbx], rbp                            ; CODE XREF=c_strtold+115
0000000000006073         add        rsp, 0x10
0000000000006077         fldz
0000000000006079         pop        rbx
000000000000607a         pop        rbp
000000000000607b         pop        r12
000000000000607d         ret
                        ; endp
000000000000607e         align      128

                     loc_6080:
0000000000006080         lea        rsi, qword [aCannotPerformF+32]             ; argument "__locale" for method j_newlocale, 0x9840, CODE XREF=c_strtold+24
0000000000006087         xor        edx, edx                                    ; argument "__base" for method j_newlocale
0000000000006089         mov        edi, 0x1fbf                                 ; argument "__category_mask" for method j_newlocale
000000000000608e         call       j_newlocale                                 ; newlocale
0000000000006093         mov        qword [c_locale_cache], rax                 ; c_locale_cache
000000000000609a         jmp        loc_600a

                     loc_609f:
000000000000609f         fstp       st0                                         ; CODE XREF=c_strtold+89
00000000000060a1         call       j_abort                                     ; abort
                        ; endp
00000000000060a6         align      16                                          ; End of unwind block (FDE at 0xa964)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
00000000000060b0         push       r12                                         ; Begin of unwind block (FDE at 0xa9bc), CODE XREF=close_stdout+13, close_stdout+51
00000000000060b2         push       rbp
00000000000060b3         mov        rbp, rdi
00000000000060b6         push       rbx
00000000000060b7         call       j___fpending                                ; __fpending
00000000000060bc         mov        ebx, dword [rbp]
00000000000060bf         mov        rdi, rbp
00000000000060c2         mov        r12, rax
00000000000060c5         call       rpl_fclose                                  ; rpl_fclose
00000000000060ca         and        ebx, 0x20
00000000000060cd         test       ebx, ebx
00000000000060cf         jne        loc_60e8

00000000000060d1         test       eax, eax
00000000000060d3         je         loc_60df

00000000000060d5         test       r12, r12
00000000000060d8         mov        eax, 0xffffffff
00000000000060dd         je         loc_6118

                     loc_60df:
00000000000060df         pop        rbx                                         ; CODE XREF=close_stream+35
00000000000060e0         pop        rbp
00000000000060e1         pop        r12
00000000000060e3         ret
                        ; endp
00000000000060e4         align      8

                     loc_60e8:
00000000000060e8         test       eax, eax                                    ; CODE XREF=close_stream+31
00000000000060ea         jne        loc_6108

00000000000060ec         call       j___errno_location                          ; __errno_location
00000000000060f1         mov        dword [rax], 0x0
00000000000060f7         mov        eax, 0xffffffff
00000000000060fc         pop        rbx
00000000000060fd         pop        rbp
00000000000060fe         pop        r12
0000000000006100         ret
                        ; endp
0000000000006101         align      8

                     loc_6108:
0000000000006108         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000006109         mov        eax, 0xffffffff
000000000000610e         pop        rbp
000000000000610f         pop        r12
0000000000006111         ret
                        ; endp
0000000000006112         align      8

                     loc_6118:
0000000000006118         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000611d         cmp        dword [rax], 0x9
0000000000006120         pop        rbx
0000000000006121         pop        rbp
0000000000006122         pop        r12
0000000000006124         setne      al
0000000000006127         movzx      eax, al
000000000000612a         neg        eax
000000000000612c         ret
                        ; endp
000000000000612d         align      16                                          ; End of unwind block (FDE at 0xa9bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000006130         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xaa0c), CODE XREF=rpl_mbrtowc+71
0000000000006134         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000006136         call       j_setlocale                                 ; setlocale
000000000000613b         mov        rdx, rax
000000000000613e         mov        eax, 0x1
0000000000006143         test       rdx, rdx
0000000000006146         je         loc_6165

0000000000006148         lea        rdi, qword [aCannotPerformF+32]             ; 0x9840
000000000000614f         mov        ecx, 0x2
0000000000006154         mov        rsi, rdx
0000000000006157         rep  cmpsb byte [rsi], byte [rdi]
0000000000006159         seta       cl
000000000000615c         sbb        cl, 0x0
000000000000615f         xor        eax, eax
0000000000006161         test       cl, cl
0000000000006163         jne        loc_6170

                     loc_6165:
0000000000006165         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000006169         ret
                        ; endp
000000000000616a         align      16

                     loc_6170:
0000000000006170         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000006177         mov        ecx, 0x6
000000000000617c         mov        rsi, rdx
000000000000617f         rep  cmpsb byte [rsi], byte [rdi]
0000000000006181         seta       al
0000000000006184         sbb        al, 0x0
0000000000006186         test       al, al
0000000000006188         setne      al
000000000000618b         add        rsp, 0x8
000000000000618f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000006190         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xaa0c), Begin of unwind block (FDE at 0xaa2c), CODE XREF=gettext_quote.part.1+11, unicode_to_mb+231
0000000000006194         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000006199         call       j_nl_langinfo                               ; nl_langinfo
000000000000619e         test       rax, rax
00000000000061a1         je         loc_61c0

00000000000061a3         cmp        byte [rax], 0x0
00000000000061a6         lea        rdx, qword [aAscii]                         ; "ASCII"
00000000000061ad         cmove      rax, rdx
00000000000061b1         add        rsp, 0x8
00000000000061b5         ret
                        ; endp
00000000000061b6         align      64

                     loc_61c0:
00000000000061c0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
00000000000061c7         add        rsp, 0x8
00000000000061cb         ret
                        ; endp
00000000000061cc         align      16                                          ; End of unwind block (FDE at 0xaa2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
00000000000061d0         push       r12                                         ; Begin of unwind block (FDE at 0xaa4c), CODE XREF=close_stream+21
00000000000061d2         push       rbp
00000000000061d3         push       rbx
00000000000061d4         mov        rbx, rdi
00000000000061d7         call       j_fileno                                    ; fileno
00000000000061dc         test       eax, eax
00000000000061de         mov        rdi, rbx
00000000000061e1         js         loc_6237

00000000000061e3         call       j___freading                                ; __freading
00000000000061e8         test       eax, eax
00000000000061ea         jne        loc_6218

                     loc_61ec:
00000000000061ec         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
00000000000061ef         call       rpl_fflush                                  ; rpl_fflush
00000000000061f4         test       eax, eax
00000000000061f6         je         loc_6234

00000000000061f8         call       j___errno_location                          ; __errno_location
00000000000061fd         mov        r12d, dword [rax]
0000000000006200         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000006203         mov        rbp, rax
0000000000006206         call       j_fclose                                    ; fclose
000000000000620b         test       r12d, r12d
000000000000620e         jne        loc_6240

                     loc_6210:
0000000000006210         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000006211         pop        rbp
0000000000006212         pop        r12
0000000000006214         ret
                        ; endp
0000000000006215         align      8

                     loc_6218:
0000000000006218         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000621b         call       j_fileno                                    ; fileno
0000000000006220         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000006222         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000006227         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000006229         call       j_lseek                                     ; lseek
000000000000622e         cmp        rax, 0xffffffffffffffff
0000000000006232         jne        loc_61ec

                     loc_6234:
0000000000006234         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_6237:
0000000000006237         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000006238         pop        rbp
0000000000006239         pop        r12
000000000000623b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_6240:
0000000000006240         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000006244         mov        eax, 0xffffffff
0000000000006249         jmp        loc_6210
000000000000624b         align      16                                          ; End of unwind block (FDE at 0xaa4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000006250         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xaa84), CODE XREF=rpl_fclose+31
0000000000006253         push       rbx
0000000000006254         mov        rbx, rdi
0000000000006257         je         loc_626a

0000000000006259         call       j___freading                                ; __freading
000000000000625e         test       eax, eax
0000000000006260         je         loc_626a

0000000000006262         test       dword [rbx], 0x100
0000000000006268         jne        loc_6278

                     loc_626a:
000000000000626a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000626d         pop        rbx
000000000000626e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000006273         align      8

                     loc_6278:
0000000000006278         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000627b         mov        edx, 0x1
0000000000006280         xor        esi, esi
0000000000006282         call       rpl_fseeko                                  ; rpl_fseeko
0000000000006287         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000628a         pop        rbx
000000000000628b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000006290         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xaa84), Begin of unwind block (FDE at 0xaaa4), CODE XREF=rpl_fflush+50
0000000000006294         cmp        qword [rdi+0x10], rax
0000000000006298         je         loc_62a0

                     j_j_fseeko:        // fseeko
000000000000629a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000629f         align      32

                     loc_62a0:
00000000000062a0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
00000000000062a4         cmp        qword [rdi+0x28], rax
00000000000062a8         jne        j_j_fseeko                                  ; fseeko

00000000000062aa         cmp        qword [rdi+0x48], 0x0
00000000000062af         jne        j_j_fseeko                                  ; fseeko

00000000000062b1         push       r12
00000000000062b3         push       rbp
00000000000062b4         mov        r12d, edx
00000000000062b7         push       rbx
00000000000062b8         mov        rbp, rsi
00000000000062bb         mov        rbx, rdi
00000000000062be         call       j_fileno                                    ; fileno
00000000000062c3         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
00000000000062c6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
00000000000062c9         mov        edi, eax                                    ; argument "__fd" for method j_lseek
00000000000062cb         call       j_lseek                                     ; lseek
00000000000062d0         cmp        rax, 0xffffffffffffffff
00000000000062d4         je         loc_62e2

00000000000062d6         and        dword [rbx], 0xffffffef
00000000000062d9         mov        qword [rbx+0x90], rax
00000000000062e0         xor        eax, eax

                     loc_62e2:
00000000000062e2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
00000000000062e3         pop        rbp
00000000000062e4         pop        r12
00000000000062e6         ret
                        ; endp
00000000000062e7         align      16                                          ; End of unwind block (FDE at 0xaaa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fseterr:
00000000000062f0         or         dword [rdi], 0x20                           ; Begin of unwind block (FDE at 0xaad4), CODE XREF=rpl_vfprintf+230
00000000000062f3         ret
                        ; endp
00000000000062f4         align      256                                         ; End of unwind block (FDE at 0xaad4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
0000000000006300         push       rbp                                         ; Begin of unwind block (FDE at 0xaaec), CODE XREF=rpl_vfprintf+66
0000000000006301         mov        rbp, rsp
0000000000006304         push       r15
0000000000006306         push       r14
0000000000006308         push       r13
000000000000630a         push       r12
000000000000630c         lea        r14, qword [rbp+var_3B0]
0000000000006313         push       rbx
0000000000006314         mov        rbx, rdx
0000000000006317         mov        r12, rcx
000000000000631a         mov        rdx, r14
000000000000631d         sub        rsp, 0x408
0000000000006324         mov        qword [rbp+var_418], rsi
000000000000632b         lea        rsi, qword [rbp+var_2C0]
0000000000006332         mov        qword [rbp+var_3E8], rdi
0000000000006339         mov        rdi, rbx
000000000000633c         mov        qword [rbp+var_410], r14
0000000000006343         mov        rax, qword [fs:0x28]
000000000000634c         mov        qword [rbp+var_38], rax
0000000000006350         xor        eax, eax
0000000000006352         mov        qword [rbp+var_408], rsi
0000000000006359         call       printf_parse                                ; printf_parse
000000000000635e         test       eax, eax
0000000000006360         js         loc_71c8

0000000000006366         mov        rsi, r14
0000000000006369         mov        rdi, r12
000000000000636c         call       printf_fetchargs                            ; printf_fetchargs
0000000000006371         test       eax, eax
0000000000006373         js         loc_7230

0000000000006379         mov        rax, qword [rbp+var_2B0]
0000000000006380         mov        rdx, 0xffffffffffffffff
0000000000006387         add        rax, 0x7
000000000000638b         cmp        rax, 0x6
000000000000638f         cmovbe     rax, rdx
0000000000006393         add        rax, qword [rbp+var_2A8]
000000000000639a         jb         loc_6dc8

00000000000063a0         mov        rdi, rax
00000000000063a3         xor        r8d, r8d
00000000000063a6         add        rdi, 0x6
00000000000063aa         setb       r8b
00000000000063ae         jb         loc_6dc8

00000000000063b4         cmp        rdi, 0xf9f
00000000000063bb         jbe        loc_6508

00000000000063c1         cmp        rdi, 0xffffffffffffffff
00000000000063c5         mov        qword [rbp+var_3C8], r8
00000000000063cc         je         loc_6dc8

00000000000063d2         call       j_malloc                                    ; malloc
00000000000063d7         test       rax, rax
00000000000063da         mov        qword [rbp+var_3D8], rax
00000000000063e1         je         loc_6dc8

00000000000063e7         mov        r8, qword [rbp+var_3C8]
00000000000063ee         mov        qword [rbp+var_420], rax

                     loc_63f5:
00000000000063f5         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
00000000000063f8         cmp        qword [rbp+var_3E8], 0x0
0000000000006400         je         loc_640c

0000000000006402         mov        rax, qword [rbp+var_418]
0000000000006409         mov        r12, qword [rax]

                     loc_640c:
000000000000640c         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
0000000000006413         lea        rax, qword [rbp+var_3BC]
000000000000641a         mov        r15, qword [rbp+var_3E8]
0000000000006421         mov        qword [rbp+var_400], 0x0
000000000000642c         mov        qword [rbp+var_3F0], rax
0000000000006433         mov        rax, rbx
0000000000006436         mov        rbx, r8
0000000000006439         mov        rcx, qword [r13]
000000000000643d         mov        r8, rax
0000000000006440         cmp        rcx, r8
0000000000006443         je         loc_6db1

                     loc_6449:
0000000000006449         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
000000000000644c         mov        rax, rbx
000000000000644f         add        rax, rcx
0000000000006452         mov        r14, rax
0000000000006455         jae        loc_6538

000000000000645b         cmp        r12, 0xffffffffffffffff
000000000000645f         je         loc_6f30

                     loc_6465:
0000000000006465         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_6e70, vasnprintf+2950, vasnprintf+3039, loc_6fc8, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_71e0
000000000000646a         mov        qword [rbp+var_3C8], rax

                     loc_6471:
0000000000006471         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
0000000000006478         je         loc_6483

000000000000647a         test       r15, r15
000000000000647d         jne        loc_6f60

                     loc_6483:
0000000000006483         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
000000000000648a         test       rax, rax
000000000000648d         je         loc_6497

000000000000648f         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006492         call       j_free                                      ; free

                     loc_6497:
0000000000006497         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
000000000000649e         mov        rdi, qword [rbp+var_2B8]
00000000000064a5         add        rax, 0x20
00000000000064a9         cmp        rdi, rax
00000000000064ac         je         loc_64b3

00000000000064ae         call       j_free                                      ; free

                     loc_64b3:
00000000000064b3         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
00000000000064ba         mov        rdi, qword [rbp+var_3A8]
00000000000064c1         add        rax, 0x10
00000000000064c5         cmp        rdi, rax
00000000000064c8         je         loc_64cf

00000000000064ca         call       j_free                                      ; free

                     loc_64cf:
00000000000064cf         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
00000000000064d6         xor        r15d, r15d
00000000000064d9         mov        dword [rax], 0xc

                     loc_64df:
00000000000064df         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
00000000000064e3         xor        rdi, qword [fs:0x28]
00000000000064ec         mov        rax, r15
00000000000064ef         jne        loc_73f7

00000000000064f5         lea        rsp, qword [rbp+var_28]
00000000000064f9         pop        rbx
00000000000064fa         pop        r12
00000000000064fc         pop        r13
00000000000064fe         pop        r14
0000000000006500         pop        r15
0000000000006502         pop        rbp
0000000000006503         ret
                        ; endp
0000000000006504         align      8

                     loc_6508:
0000000000006508         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
000000000000650c         mov        qword [rbp+var_420], 0x0
0000000000006517         and        rax, 0xfffffffffffffff0
000000000000651b         sub        rsp, rax
000000000000651e         lea        rax, qword [rsp+0x430+var_421]
0000000000006523         and        rax, 0xfffffffffffffff0
0000000000006527         mov        qword [rbp+var_3D8], rax
000000000000652e         jmp        loc_63f5
0000000000006533         align      8

                     loc_6538:
0000000000006538         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
000000000000653b         jae        loc_65a4

000000000000653d         test       r12, r12
0000000000006540         jne        loc_6e70

0000000000006546         cmp        rax, 0xc
000000000000654a         ja         loc_6e82

0000000000006550         mov        r12d, 0xc

                     loc_6556:
0000000000006556         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
000000000000655d         sete       dl
0000000000006560         test       r15, r15
0000000000006563         je         loc_6ea8

                     loc_6569:
0000000000006569         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
000000000000656b         jne        loc_6ea8

0000000000006571         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006574         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006577         mov        qword [rbp+var_3D0], r8
000000000000657e         mov        qword [rbp+var_3C8], rcx
0000000000006585         call       j_realloc                                   ; realloc
000000000000658a         test       rax, rax
000000000000658d         mov        rcx, qword [rbp+var_3C8]
0000000000006594         mov        r8, qword [rbp+var_3D0]
000000000000659b         je         loc_6f4b

00000000000065a1         mov        r15, rax

                     loc_65a4:
00000000000065a4         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
00000000000065a8         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
00000000000065ab         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
00000000000065ae         call       j_memcpy                                    ; memcpy

                     loc_65b3:
00000000000065b3         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
00000000000065ba         cmp        qword [rbp+var_2C0], rax
00000000000065c1         je         loc_727b

00000000000065c7         movzx      edx, byte [r13+0x48]
00000000000065cc         mov        rax, qword [r13+0x50]
00000000000065d0         cmp        dl, 0x25
00000000000065d3         je         loc_6d68

00000000000065d9         cmp        rax, 0xffffffffffffffff
00000000000065dd         je         loc_7226

00000000000065e3         mov        r8, qword [rbp+var_3A8]
00000000000065ea         shl        rax, 0x5
00000000000065ee         add        rax, r8
00000000000065f1         cmp        dl, 0x6e
00000000000065f4         mov        edi, dword [rax]
00000000000065f6         mov        dword [rbp+var_3D0], edi
00000000000065fc         je         loc_6de0

0000000000006602         mov        eax, dword [r13+0x10]
0000000000006606         mov        rdi, qword [rbp+var_3D8]
000000000000660d         test       al, 0x1
000000000000660f         mov        byte [rdi], 0x25
0000000000006612         lea        rbx, qword [rdi+1]
0000000000006616         je         loc_6627

0000000000006618         mov        rdi, qword [rbp+var_3D8]
000000000000661f         lea        rbx, qword [rdi+2]
0000000000006623         mov        byte [rdi+1], 0x27

                     loc_6627:
0000000000006627         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
0000000000006629         je         loc_6632

000000000000662b         mov        byte [rbx], 0x2d
000000000000662e         add        rbx, 0x1

                     loc_6632:
0000000000006632         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
0000000000006634         je         loc_663d

0000000000006636         mov        byte [rbx], 0x2b
0000000000006639         add        rbx, 0x1

                     loc_663d:
000000000000663d         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
000000000000663f         je         loc_6648

0000000000006641         mov        byte [rbx], 0x20
0000000000006644         add        rbx, 0x1

                     loc_6648:
0000000000006648         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
000000000000664a         je         loc_6653

000000000000664c         mov        byte [rbx], 0x23
000000000000664f         add        rbx, 0x1

                     loc_6653:
0000000000006653         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
0000000000006655         je         loc_665e

0000000000006657         mov        byte [rbx], 0x49
000000000000665a         add        rbx, 0x1

                     loc_665e:
000000000000665e         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
0000000000006660         je         loc_6669

0000000000006662         mov        byte [rbx], 0x30
0000000000006665         add        rbx, 0x1

                     loc_6669:
0000000000006669         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
000000000000666d         mov        rdx, qword [r13+0x20]
0000000000006671         cmp        rsi, rdx
0000000000006674         je         loc_66a6

0000000000006676         mov        rcx, rdx
0000000000006679         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000667c         mov        qword [rbp+var_3E0], r8
0000000000006683         sub        rcx, rsi
0000000000006686         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000006689         mov        qword [rbp+var_3C8], rcx
0000000000006690         call       j_memcpy                                    ; memcpy
0000000000006695         mov        rcx, qword [rbp+var_3C8]
000000000000669c         mov        r8, qword [rbp+var_3E0]
00000000000066a3         add        rbx, rcx

                     loc_66a6:
00000000000066a6         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
00000000000066aa         mov        rdx, qword [r13+0x38]
00000000000066ae         cmp        rsi, rdx
00000000000066b1         je         loc_66e3

00000000000066b3         mov        rcx, rdx
00000000000066b6         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
00000000000066b9         mov        qword [rbp+var_3E0], r8
00000000000066c0         sub        rcx, rsi
00000000000066c3         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
00000000000066c6         mov        qword [rbp+var_3C8], rcx
00000000000066cd         call       j_memcpy                                    ; memcpy
00000000000066d2         mov        rcx, qword [rbp+var_3C8]
00000000000066d9         mov        r8, qword [rbp+var_3E0]
00000000000066e0         add        rbx, rcx

                     loc_66e3:
00000000000066e3         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
00000000000066e9         cmp        edi, 0x10
00000000000066ec         ja         loc_671b

00000000000066ee         mov        eax, 0x1
00000000000066f3         mov        ecx, edi
00000000000066f5         shl        rax, cl
00000000000066f8         test       eax, 0x14180
00000000000066fd         jne        loc_6714

00000000000066ff         test       ah, 0x10
0000000000006702         jne        loc_7060

0000000000006708         test       ah, 0x6
000000000000670b         je         loc_671b

000000000000670d         mov        byte [rbx], 0x6c
0000000000006710         add        rbx, 0x1

                     loc_6714:
0000000000006714         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
0000000000006717         add        rbx, 0x1

                     loc_671b:
000000000000671b         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
0000000000006720         mov        byte [rbx+1], 0x0
0000000000006724         mov        byte [rbx], al
0000000000006726         mov        rax, qword [r13+0x28]
000000000000672a         cmp        rax, 0xffffffffffffffff
000000000000672e         je         loc_6e60

0000000000006734         shl        rax, 0x5
0000000000006738         add        rax, r8
000000000000673b         cmp        dword [rax], 0x5
000000000000673e         jne        loc_7226

0000000000006744         mov        eax, dword [rax+0x10]
0000000000006747         mov        dword [rbp+var_3E0], 0x1
0000000000006751         mov        dword [rbp+var_3B8], eax

                     loc_6757:
0000000000006757         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
000000000000675b         cmp        rax, 0xffffffffffffffff
000000000000675f         je         loc_678c

0000000000006761         shl        rax, 0x5
0000000000006765         add        r8, rax
0000000000006768         cmp        dword [r8], 0x5
000000000000676c         jne        loc_7226

0000000000006772         mov        eax, dword [rbp+var_3E0]
0000000000006778         mov        edx, dword [r8+0x10]
000000000000677c         mov        dword [rbp+rax*4+var_3B8], edx
0000000000006783         lea        eax, dword [rax+1]
0000000000006786         mov        dword [rbp+var_3E0], eax

                     loc_678c:
000000000000678c         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000678f         xor        edx, edx
0000000000006791         add        rax, 0x2
0000000000006795         jb         loc_73fc

000000000000679b         cmp        r12, rax
000000000000679e         jae        loc_67eb

00000000000067a0         test       r12, r12
00000000000067a3         jne        loc_6fc8

00000000000067a9         cmp        rax, 0xc
00000000000067ad         ja         loc_6fe0

00000000000067b3         mov        r12d, 0xc

                     loc_67b9:
00000000000067b9         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
00000000000067c0         sete       dl
00000000000067c3         test       r15, r15
00000000000067c6         je         loc_7010

                     loc_67cc:
00000000000067cc         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
00000000000067ce         jne        loc_7010

00000000000067d4         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000067d7         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000067da         call       j_realloc                                   ; realloc
00000000000067df         test       rax, rax
00000000000067e2         je         loc_6465

00000000000067e8         mov        r15, rax

                     loc_67eb:
00000000000067eb         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
00000000000067f0         call       j___errno_location                          ; __errno_location
00000000000067f5         mov        qword [rbp+var_3C8], rax
00000000000067fc         mov        eax, dword [rax]
00000000000067fe         mov        qword [rbp+var_3F8], rbx
0000000000006805         mov        dword [rbp+var_424], eax
000000000000680b         nop        dword [rax+rax]

                     loc_6810:
0000000000006810         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
0000000000006817         mov        rbx, r12
000000000000681a         mov        r10d, 0x7fffffff
0000000000006820         sub        rbx, r14
0000000000006823         mov        dword [rbp+var_3BC], 0xffffffff
000000000000682d         cmp        rbx, 0x7fffffff
0000000000006834         mov        dword [rax], 0x0
000000000000683a         mov        eax, dword [rbp+var_3D0]
0000000000006840         cmovbe     r10, rbx
0000000000006844         cmp        eax, 0x11
0000000000006847         ja         loc_7226

000000000000684d         lea        rsi, qword [switch_table_9848]              ; switch_table_9848
0000000000006854         movsxd     rax, dword [rsi+rax*4]
0000000000006858         add        rax, rsi
000000000000685b         jmp        rax                                         ; switch statement using table at 0x9848, with 18 cases, 0x6860,0x6998,0x6ac0,0x6b48,0x6bc8,0x6c08,0x6c90,0x6cc0,0x7226
000000000000685d         align      32

                     loc_6860:
0000000000006860         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
0000000000006864         lea        rdi, qword [r15+r14]
0000000000006868         shl        rax, 0x5
000000000000686c         add        rax, qword [rbp+var_3A8]
0000000000006873         mov        r9, qword [rax+0x10]
0000000000006877         mov        eax, dword [rbp+var_3E0]
000000000000687d         cmp        eax, 0x1
0000000000006880         je         loc_6d48

0000000000006886         cmp        eax, 0x2
0000000000006889         je         loc_6d30

000000000000688f         sub        rsp, 0x8
0000000000006893         push       qword [rbp+var_3F0]

                     loc_6899:
0000000000006899         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
00000000000068a0         mov        rsi, r10
00000000000068a3         mov        rcx, 0xffffffffffffffff
00000000000068aa         mov        edx, 0x1
00000000000068af         xor        eax, eax
00000000000068b1         mov        qword [rbp+var_430], r10
00000000000068b8         call       j___snprintf_chk                            ; __snprintf_chk
00000000000068bd         pop        rsi
00000000000068be         pop        rdi
00000000000068bf         mov        r10, qword [rbp+var_430]

                     loc_68c6:
00000000000068c6         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
00000000000068cc         test       ecx, ecx
00000000000068ce         js         loc_6a0c

                     loc_68d4:
00000000000068d4         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
00000000000068d7         cmp        rdx, r10
00000000000068da         jae        loc_68ea

00000000000068dc         add        rdx, r15
00000000000068df         cmp        byte [rdx+r14], 0x0
00000000000068e4         jne        loc_7226

                     loc_68ea:
00000000000068ea         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
00000000000068ec         jge        loc_68f6

                     loc_68ee:
00000000000068ee         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
00000000000068f4         mov        ecx, eax

                     loc_68f6:
00000000000068f6         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
00000000000068f9         cmp        rax, r10
00000000000068fc         jb         loc_7130

0000000000006902         cmp        rbx, 0x7ffffffe
0000000000006909         ja         loc_7150

000000000000690f         lea        rsi, qword [r12+r12]
0000000000006913         lea        edx, dword [rcx+2]
0000000000006916         test       r12, r12
0000000000006919         mov        rax, 0xffffffffffffffff
0000000000006920         cmovns     rax, rsi
0000000000006924         add        rdx, r14
0000000000006927         jb         loc_73e8

000000000000692d         cmp        rax, rdx
0000000000006930         cmovb      rax, rdx
0000000000006934         cmp        r12, rax
0000000000006937         jae        loc_6810

000000000000693d         test       r12, r12
0000000000006940         js         loc_6471

0000000000006946         cmp        rsi, rax
0000000000006949         mov        r12, rsi
000000000000694c         jae        loc_695b

000000000000694e         cmp        rax, 0xffffffffffffffff
0000000000006952         je         loc_6471

0000000000006958         mov        r12, rax

                     loc_695b:
000000000000695b         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
0000000000006962         sete       bl
0000000000006965         test       r15, r15
0000000000006968         je         loc_6cf0

000000000000696e         test       bl, bl
0000000000006970         jne        loc_6cf0

0000000000006976         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006979         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000697c         call       j_realloc                                   ; realloc
0000000000006981         test       rax, rax
0000000000006984         je         loc_6471

000000000000698a         mov        r15, rax
000000000000698d         jmp        loc_6810
0000000000006992         align      8

                     loc_6998:
0000000000006998         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000699c         lea        rdi, qword [r15+r14]
00000000000069a0         shl        rax, 0x5
00000000000069a4         add        rax, qword [rbp+var_3A8]
00000000000069ab         mov        r9d, dword [rax+0x10]
00000000000069af         mov        eax, dword [rbp+var_3E0]
00000000000069b5         cmp        eax, 0x1
00000000000069b8         je         loc_6bf0

                     loc_69be:
00000000000069be         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
00000000000069c1         je         loc_6c38

                     loc_69c7:
00000000000069c7         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
00000000000069cb         push       qword [rbp+var_3F0]

                     loc_69d1:
00000000000069d1         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
00000000000069d8         mov        rcx, 0xffffffffffffffff
00000000000069df         mov        edx, 0x1
00000000000069e4         mov        rsi, r10
00000000000069e7         xor        eax, eax
00000000000069e9         mov        qword [rbp+var_430], r10
00000000000069f0         call       j___snprintf_chk                            ; __snprintf_chk
00000000000069f5         pop        rdx
00000000000069f6         pop        rcx
00000000000069f7         mov        ecx, dword [rbp+var_3BC]
00000000000069fd         mov        r10, qword [rbp+var_430]
0000000000006a04         test       ecx, ecx
0000000000006a06         jns        loc_68d4

                     loc_6a0c:
0000000000006a0c         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
0000000000006a13         cmp        byte [rdi+1], 0x0
0000000000006a17         jne        loc_6d58

0000000000006a1d         test       eax, eax
0000000000006a1f         jns        loc_68ee

0000000000006a25         mov        rax, qword [rbp+var_3C8]
0000000000006a2c         mov        ebx, dword [rax]
0000000000006a2e         test       ebx, ebx
0000000000006a30         jne        loc_6a50

0000000000006a32         movzx      eax, byte [r13+0x48]
0000000000006a37         mov        ebx, 0x16
0000000000006a3c         and        eax, 0xffffffef
0000000000006a3f         cmp        al, 0x63
0000000000006a41         mov        eax, 0x54
0000000000006a46         cmove      ebx, eax
0000000000006a49         nop        dword [rax]

                     loc_6a50:
0000000000006a50         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
0000000000006a57         je         loc_6a62

0000000000006a59         test       r15, r15
0000000000006a5c         jne        loc_720c

                     loc_6a62:
0000000000006a62         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
0000000000006a69         test       rax, rax
0000000000006a6c         je         loc_6a76

0000000000006a6e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006a71         call       j_free                                      ; free

                     loc_6a76:
0000000000006a76         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
0000000000006a7d         mov        rdi, qword [rbp+var_2B8]
0000000000006a84         add        rax, 0x20
0000000000006a88         cmp        rdi, rax
0000000000006a8b         je         loc_6a92

0000000000006a8d         call       j_free                                      ; free

                     loc_6a92:
0000000000006a92         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
0000000000006a99         mov        rdi, qword [rbp+var_3A8]
0000000000006aa0         add        rax, 0x10
0000000000006aa4         cmp        rdi, rax
0000000000006aa7         je         loc_6aae

0000000000006aa9         call       j_free                                      ; free

                     loc_6aae:
0000000000006aae         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
0000000000006ab5         xor        r15d, r15d
0000000000006ab8         mov        dword [rax], ebx
0000000000006aba         jmp        loc_64df
0000000000006abf         align      64

                     loc_6ac0:
0000000000006ac0         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
0000000000006ac4         lea        rdi, qword [r15+r14]
0000000000006ac8         shl        rax, 0x5
0000000000006acc         add        rax, qword [rbp+var_3A8]
0000000000006ad3         fld        tword [rax+0x10]
0000000000006ad6         mov        eax, dword [rbp+var_3E0]
0000000000006adc         cmp        eax, 0x1
0000000000006adf         je         loc_7110

0000000000006ae5         cmp        eax, 0x2
0000000000006ae8         jne        loc_6fb0

0000000000006aee         mov        eax, dword [rbp+var_3B4]
0000000000006af4         sub        rsp, 0x8
0000000000006af8         push       qword [rbp+var_3F0]
0000000000006afe         mov        r9d, dword [rbp+var_3B8]
0000000000006b05         mov        r8, qword [rbp+var_3D8]
0000000000006b0c         mov        rsi, r10
0000000000006b0f         sub        rsp, 0x18
0000000000006b13         mov        rcx, 0xffffffffffffffff
0000000000006b1a         mov        edx, 0x1
0000000000006b1f         fstp       tword [rsp+0x458+var_450]
0000000000006b23         push       rax
0000000000006b24         xor        eax, eax
0000000000006b26         mov        qword [rbp+var_430], r10
0000000000006b2d         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006b32         add        rsp, 0x30
0000000000006b36         mov        r10, qword [rbp+var_430]
0000000000006b3d         jmp        loc_68c6
0000000000006b42         align      8

                     loc_6b48:
0000000000006b48         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
0000000000006b4c         lea        rdi, qword [r15+r14]
0000000000006b50         shl        rax, 0x5
0000000000006b54         add        rax, qword [rbp+var_3A8]
0000000000006b5b         movsd      xmm0, qword [rax+0x10]
0000000000006b60         mov        eax, dword [rbp+var_3E0]
0000000000006b66         cmp        eax, 0x1
0000000000006b69         je         loc_7100

0000000000006b6f         cmp        eax, 0x2
0000000000006b72         jne        loc_6f70

0000000000006b78         mov        eax, dword [rbp+var_3B4]
0000000000006b7e         push       qword [rbp+var_3F0]
0000000000006b84         push       rax

                     loc_6b85:
0000000000006b85         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
0000000000006b8c         mov        r8, qword [rbp+var_3D8]
0000000000006b93         mov        rsi, r10
0000000000006b96         mov        rcx, 0xffffffffffffffff
0000000000006b9d         mov        edx, 0x1
0000000000006ba2         mov        eax, 0x1
0000000000006ba7         mov        qword [rbp+var_430], r10
0000000000006bae         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006bb3         pop        r8
0000000000006bb5         mov        r10, qword [rbp+var_430]
0000000000006bbc         pop        r9
0000000000006bbe         jmp        loc_68c6
0000000000006bc3         align      8

                     loc_6bc8:
0000000000006bc8         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
0000000000006bcc         lea        rdi, qword [r15+r14]
0000000000006bd0         shl        rax, 0x5
0000000000006bd4         add        rax, qword [rbp+var_3A8]
0000000000006bdb         movzx      r9d, word [rax+0x10]
0000000000006be0         mov        eax, dword [rbp+var_3E0]
0000000000006be6         cmp        eax, 0x1
0000000000006be9         jne        loc_69be

0000000000006bef         nop

                     loc_6bf0:
0000000000006bf0         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
0000000000006bf6         push       r9

                     loc_6bf8:
0000000000006bf8         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
0000000000006bff         jmp        loc_69d1
0000000000006c04         align      8

                     loc_6c08:
0000000000006c08         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
0000000000006c0c         lea        rdi, qword [r15+r14]
0000000000006c10         shl        rax, 0x5
0000000000006c14         add        rax, qword [rbp+var_3A8]
0000000000006c1b         movsx      r9d, word [rax+0x10]
0000000000006c20         mov        eax, dword [rbp+var_3E0]
0000000000006c26         cmp        eax, 0x1
0000000000006c29         je         loc_6bf0

0000000000006c2b         cmp        eax, 0x2
0000000000006c2e         jne        loc_69c7

0000000000006c34         nop        dword [rax]

                     loc_6c38:
0000000000006c38         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
0000000000006c3c         push       qword [rbp+var_3F0]
0000000000006c42         push       r9

                     loc_6c44:
0000000000006c44         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
0000000000006c4a         push       rax

                     loc_6c4b:
0000000000006c4b         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
0000000000006c52         mov        r8, qword [rbp+var_3D8]
0000000000006c59         mov        rsi, r10
0000000000006c5c         mov        rcx, 0xffffffffffffffff
0000000000006c63         mov        edx, 0x1
0000000000006c68         xor        eax, eax
0000000000006c6a         mov        qword [rbp+var_430], r10
0000000000006c71         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006c76         add        rsp, 0x20
0000000000006c7a         mov        r10, qword [rbp+var_430]
0000000000006c81         jmp        loc_68c6
0000000000006c86         align      16

                     loc_6c90:
0000000000006c90         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
0000000000006c94         lea        rdi, qword [r15+r14]
0000000000006c98         shl        rax, 0x5
0000000000006c9c         add        rax, qword [rbp+var_3A8]
0000000000006ca3         movzx      r9d, byte [rax+0x10]
0000000000006ca8         mov        eax, dword [rbp+var_3E0]
0000000000006cae         cmp        eax, 0x1
0000000000006cb1         jne        loc_69be

0000000000006cb7         jmp        loc_6bf0
0000000000006cbc         align      64

                     loc_6cc0:
0000000000006cc0         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
0000000000006cc4         lea        rdi, qword [r15+r14]
0000000000006cc8         shl        rax, 0x5
0000000000006ccc         add        rax, qword [rbp+var_3A8]
0000000000006cd3         movsx      r9d, byte [rax+0x10]
0000000000006cd8         mov        eax, dword [rbp+var_3E0]
0000000000006cde         cmp        eax, 0x1
0000000000006ce1         jne        loc_69be

0000000000006ce7         jmp        loc_6bf0
0000000000006cec         align      16

                     loc_6cf0:
0000000000006cf0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
0000000000006cf3         call       j_malloc                                    ; malloc
0000000000006cf8         test       rax, rax
0000000000006cfb         mov        rcx, rax
0000000000006cfe         je         loc_6471

0000000000006d04         test       r14, r14
0000000000006d07         je         loc_6dc0

0000000000006d0d         test       bl, bl
0000000000006d0f         je         loc_6dc0

0000000000006d15         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006d18         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006d1b         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006d1e         call       j_memcpy                                    ; memcpy
0000000000006d23         mov        r15, rax
0000000000006d26         jmp        loc_6810
0000000000006d2b         align      16

                     loc_6d30:
0000000000006d30         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
0000000000006d34         push       qword [rbp+var_3F0]
0000000000006d3a         push       r9
0000000000006d3c         jmp        loc_6c44
0000000000006d41         align      8

                     loc_6d48:
0000000000006d48         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
0000000000006d4e         push       r9
0000000000006d50         jmp        loc_6bf8
0000000000006d55         align      8

                     loc_6d58:
0000000000006d58         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
0000000000006d5c         jmp        loc_6810
0000000000006d61         align      8

                     loc_6d68:
0000000000006d68         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
0000000000006d6c         jne        loc_7226

0000000000006d72         mov        rax, r14
0000000000006d75         add        rax, 0x1
0000000000006d79         mov        rbx, rax
0000000000006d7c         jae        loc_6e08

0000000000006d82         cmp        r12, 0xffffffffffffffff
0000000000006d86         jne        loc_6465

0000000000006d8c         mov        rbx, r12

                     loc_6d8f:
0000000000006d8f         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_6d94:
0000000000006d94         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
0000000000006d98         add        r13, 0x58
0000000000006d9c         mov        rcx, qword [r13]
0000000000006da0         add        qword [rbp+var_400], 0x1
0000000000006da8         cmp        rcx, r8
0000000000006dab         jne        loc_6449

                     loc_6db1:
0000000000006db1         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
0000000000006db4         jmp        loc_65b3
0000000000006db9         align      64

                     loc_6dc0:
0000000000006dc0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
0000000000006dc3         jmp        loc_6810

                     loc_6dc8:
0000000000006dc8         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
0000000000006dcd         mov        qword [rbp+var_3C8], rax
0000000000006dd4         jmp        loc_6497
0000000000006dd9         align      32

                     loc_6de0:
0000000000006de0         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
0000000000006de2         sub        edx, 0x12
0000000000006de5         cmp        edx, 0x4
0000000000006de8         ja         loc_7226

0000000000006dee         lea        rdi, qword [switch_table_9890]              ; switch_table_9890
0000000000006df5         mov        rax, qword [rax+0x10]
0000000000006df9         movsxd     rdx, dword [rdi+rdx*4]
0000000000006dfd         add        rdx, rdi
0000000000006e00         jmp        rdx                                         ; switch statement using table at 0x9890, with 5 cases, 0x6f40,0x7070,0x7080,0x7090
0000000000006e02         align      8

                     loc_6e08:
0000000000006e08         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
0000000000006e0b         jae        loc_6d8f

0000000000006e0d         test       r12, r12
0000000000006e10         jne        loc_71e0

0000000000006e16         cmp        rax, 0xc
0000000000006e1a         ja         loc_71f2

0000000000006e20         mov        r12d, 0xc

                     loc_6e26:
0000000000006e26         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
0000000000006e2d         sete       dl
0000000000006e30         test       r15, r15
0000000000006e33         je         loc_70a0

0000000000006e39         test       dl, dl
0000000000006e3b         jne        loc_70a0

0000000000006e41         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006e44         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006e47         call       j_realloc                                   ; realloc
0000000000006e4c         test       rax, rax
0000000000006e4f         je         loc_6f4b

0000000000006e55         mov        r15, rax
0000000000006e58         jmp        loc_6d8f
0000000000006e5d         align      32

                     loc_6e60:
0000000000006e60         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
0000000000006e6a         jmp        loc_6757
0000000000006e6f         align      16

                     loc_6e70:
0000000000006e70         js         loc_6465                                    ; CODE XREF=vasnprintf+576

0000000000006e76         add        r12, r12
0000000000006e79         cmp        r12, rax
0000000000006e7c         jae        loc_6556

                     loc_6e82:
0000000000006e82         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
0000000000006e86         je         loc_6465

0000000000006e8c         cmp        r15, qword [rbp+var_3E8]
0000000000006e93         mov        r12, rax
0000000000006e96         sete       dl
0000000000006e99         test       r15, r15
0000000000006e9c         jne        loc_6569

0000000000006ea2         nop        word [rax+rax]

                     loc_6ea8:
0000000000006ea8         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
0000000000006eab         mov        qword [rbp+var_3E0], r8
0000000000006eb2         mov        byte [rbp+var_3D0], dl
0000000000006eb8         mov        qword [rbp+var_3C8], rcx
0000000000006ebf         call       j_malloc                                    ; malloc
0000000000006ec4         test       rax, rax
0000000000006ec7         mov        r9, rax
0000000000006eca         mov        rcx, qword [rbp+var_3C8]
0000000000006ed1         movzx      edx, byte [rbp+var_3D0]
0000000000006ed8         mov        r8, qword [rbp+var_3E0]
0000000000006edf         je         loc_6465

0000000000006ee5         test       rbx, rbx
0000000000006ee8         je         loc_70f0

0000000000006eee         test       dl, dl
0000000000006ef0         je         loc_70f0

0000000000006ef6         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006ef9         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006efc         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006eff         mov        qword [rbp+var_3D0], r8
0000000000006f06         mov        qword [rbp+var_3C8], rcx
0000000000006f0d         call       j_memcpy                                    ; memcpy
0000000000006f12         mov        rcx, qword [rbp+var_3C8]
0000000000006f19         mov        r15, rax
0000000000006f1c         mov        r8, qword [rbp+var_3D0]
0000000000006f23         jmp        loc_65a4
0000000000006f28         align      16

                     loc_6f30:
0000000000006f30         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
0000000000006f33         jmp        loc_65a4
0000000000006f38         align      64

                     loc_6f40:
0000000000006f40         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
0000000000006f43         mov        rbx, r14
0000000000006f46         jmp        loc_6d94

                     loc_6f4b:
0000000000006f4b         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
0000000000006f50         mov        qword [rbp+var_3C8], rax
0000000000006f57         nop        word [rax+rax]

                     loc_6f60:
0000000000006f60         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
0000000000006f63         call       j_free                                      ; free
0000000000006f68         jmp        loc_6483
0000000000006f6d         align      16

                     loc_6f70:
0000000000006f70         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
0000000000006f77         mov        r8, qword [rbp+var_3D8]
0000000000006f7e         mov        rsi, r10
0000000000006f81         mov        rcx, 0xffffffffffffffff
0000000000006f88         mov        edx, 0x1
0000000000006f8d         mov        eax, 0x1
0000000000006f92         mov        qword [rbp+var_430], r10
0000000000006f99         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006f9e         mov        r10, qword [rbp+var_430]
0000000000006fa5         jmp        loc_68c6
0000000000006faa         align      16

                     loc_6fb0:
0000000000006fb0         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
0000000000006fb4         mov        r9, qword [rbp+var_3F0]
0000000000006fbb         fstp       tword [rsp+0x440+var_440]
0000000000006fbe         jmp        loc_6899
0000000000006fc3         align      8

                     loc_6fc8:
0000000000006fc8         js         loc_6465                                    ; CODE XREF=vasnprintf+1187

0000000000006fce         add        r12, r12
0000000000006fd1         cmp        r12, rax
0000000000006fd4         jae        loc_67b9

0000000000006fda         nop        word [rax+rax]

                     loc_6fe0:
0000000000006fe0         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
0000000000006fe3         jne        loc_6465

0000000000006fe9         cmp        rax, 0xffffffffffffffff
0000000000006fed         je         loc_6465

0000000000006ff3         cmp        r15, qword [rbp+var_3E8]
0000000000006ffa         mov        r12, rax
0000000000006ffd         sete       dl
0000000000007000         test       r15, r15
0000000000007003         jne        loc_67cc

0000000000007009         nop        dword [rax]

                     loc_7010:
0000000000007010         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
0000000000007013         mov        byte [rbp+var_3C8], dl
0000000000007019         call       j_malloc                                    ; malloc
000000000000701e         test       rax, rax
0000000000007021         mov        rcx, rax
0000000000007024         movzx      edx, byte [rbp+var_3C8]
000000000000702b         je         loc_6465

0000000000007031         test       r14, r14
0000000000007034         je         loc_71d0

000000000000703a         test       dl, dl
000000000000703c         je         loc_71d0

0000000000007042         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000007045         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000007048         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000704b         call       j_memcpy                                    ; memcpy
0000000000007050         mov        r15, rax
0000000000007053         jmp        loc_67eb
0000000000007058         align      32

                     loc_7060:
0000000000007060         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
0000000000007063         add        rbx, 0x1
0000000000007067         jmp        loc_671b
000000000000706c         align      16

                     loc_7070:
0000000000007070         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
0000000000007073         mov        rbx, r14
0000000000007076         jmp        loc_6d94
000000000000707b         align      128

                     loc_7080:
0000000000007080         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
0000000000007083         mov        rbx, r14
0000000000007086         jmp        loc_6d94
000000000000708b         align      16

                     loc_7090:
0000000000007090         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
0000000000007094         mov        rbx, r14
0000000000007097         jmp        loc_6d94
000000000000709c         align      32

                     loc_70a0:
00000000000070a0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
00000000000070a3         mov        byte [rbp+var_3C8], dl
00000000000070a9         call       j_malloc                                    ; malloc
00000000000070ae         test       rax, rax
00000000000070b1         mov        rcx, rax
00000000000070b4         movzx      edx, byte [rbp+var_3C8]
00000000000070bb         je         loc_6465

00000000000070c1         test       r14, r14
00000000000070c4         je         loc_7204

00000000000070ca         test       dl, dl
00000000000070cc         je         loc_7204

00000000000070d2         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000070d5         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000070d8         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000070db         call       j_memcpy                                    ; memcpy
00000000000070e0         mov        r15, rax
00000000000070e3         jmp        loc_6d8f
00000000000070e8         align      16

                     loc_70f0:
00000000000070f0         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
00000000000070f3         jmp        loc_65a4
00000000000070f8         align      256

                     loc_7100:
0000000000007100         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
0000000000007104         push       qword [rbp+var_3F0]
000000000000710a         jmp        loc_6b85
000000000000710f         align      16

                     loc_7110:
0000000000007110         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
0000000000007114         push       qword [rbp+var_3F0]
000000000000711a         sub        rsp, 0x10
000000000000711e         fstp       tword [rsp+0x450+var_450]
0000000000007121         jmp        loc_6c4b
0000000000007126         align      16

                     loc_7130:
0000000000007130         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
0000000000007137         mov        edi, dword [rbp+var_424]
000000000000713d         movsxd     rbx, ecx
0000000000007140         add        rbx, r14
0000000000007143         mov        dword [rax], edi
0000000000007145         jmp        loc_6d94
000000000000714a         align      16

                     loc_7150:
0000000000007150         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
0000000000007157         je         loc_7162

0000000000007159         test       r15, r15
000000000000715c         jne        loc_7219

                     loc_7162:
0000000000007162         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
0000000000007169         test       rax, rax
000000000000716c         je         loc_7176

000000000000716e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000007171         call       j_free                                      ; free

                     loc_7176:
0000000000007176         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
000000000000717d         mov        rdi, qword [rbp+var_2B8]
0000000000007184         add        rax, 0x20
0000000000007188         cmp        rdi, rax
000000000000718b         je         loc_7192

000000000000718d         call       j_free                                      ; free

                     loc_7192:
0000000000007192         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
0000000000007199         mov        rdi, qword [rbp+var_3A8]
00000000000071a0         add        rax, 0x10
00000000000071a4         cmp        rdi, rax
00000000000071a7         je         loc_71ae

00000000000071a9         call       j_free                                      ; free

                     loc_71ae:
00000000000071ae         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
00000000000071b5         xor        r15d, r15d
00000000000071b8         mov        dword [rax], 0x4b
00000000000071be         jmp        loc_64df
00000000000071c3         align      8

                     loc_71c8:
00000000000071c8         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
00000000000071cb         jmp        loc_64df

                     loc_71d0:
00000000000071d0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
00000000000071d3         jmp        loc_67eb
00000000000071d8         align      32

                     loc_71e0:
00000000000071e0         js         loc_6465                                    ; CODE XREF=vasnprintf+2832

00000000000071e6         add        r12, r12
00000000000071e9         cmp        r12, rax
00000000000071ec         jae        loc_6e26

                     loc_71f2:
00000000000071f2         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
00000000000071f6         je         loc_6465

00000000000071fc         mov        r12, rax
00000000000071ff         jmp        loc_6e26

                     loc_7204:
0000000000007204         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
0000000000007207         jmp        loc_6d8f

                     loc_720c:
000000000000720c         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
000000000000720f         call       j_free                                      ; free
0000000000007214         jmp        loc_6a62

                     loc_7219:
0000000000007219         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
000000000000721c         call       j_free                                      ; free
0000000000007221         jmp        loc_7162

                     loc_7226:
0000000000007226         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
000000000000722b         align      16

                     loc_7230:
0000000000007230         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
0000000000007237         mov        rdi, qword [rbp+var_2B8]
000000000000723e         add        rax, 0x20
0000000000007242         cmp        rdi, rax
0000000000007245         je         loc_724c

0000000000007247         call       j_free                                      ; free

                     loc_724c:
000000000000724c         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
0000000000007253         mov        rdi, qword [rbp+var_3A8]
000000000000725a         add        rax, 0x10
000000000000725e         cmp        rdi, rax
0000000000007261         je         loc_7268

0000000000007263         call       j_free                                      ; free

                     loc_7268:
0000000000007268         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
000000000000726d         xor        r15d, r15d
0000000000007270         mov        dword [rax], 0x16
0000000000007276         jmp        loc_64df

                     loc_727b:
000000000000727b         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
000000000000727e         xor        eax, eax
0000000000007280         add        rbx, 0x1
0000000000007284         jb         loc_7390

000000000000728a         cmp        r12, rbx
000000000000728d         jae        loc_72dc

000000000000728f         test       r12, r12
0000000000007292         jne        loc_73c9

0000000000007298         cmp        rbx, 0xc
000000000000729c         ja         loc_73ae

00000000000072a2         mov        r12d, 0xc

                     loc_72a8:
00000000000072a8         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
00000000000072af         sete       r13b
00000000000072b3         test       r15, r15
00000000000072b6         je         loc_735c

00000000000072bc         test       r13b, r13b
00000000000072bf         jne        loc_735c

00000000000072c5         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000072c8         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000072cb         call       j_realloc                                   ; realloc
00000000000072d0         test       rax, rax
00000000000072d3         je         loc_6f4b

00000000000072d9         mov        r15, rax

                     loc_72dc:
00000000000072dc         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
00000000000072e3         mov        byte [r15+r14], 0x0
00000000000072e8         je         loc_7301

00000000000072ea         cmp        r12, rbx
00000000000072ed         jbe        loc_7301

00000000000072ef         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000072f2         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
00000000000072f5         call       j_realloc                                   ; realloc
00000000000072fa         test       rax, rax
00000000000072fd         cmovne     r15, rax

                     loc_7301:
0000000000007301         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
0000000000007308         test       rax, rax
000000000000730b         je         loc_7315

000000000000730d         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000007310         call       j_free                                      ; free

                     loc_7315:
0000000000007315         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
000000000000731c         mov        rdi, qword [rbp+var_2B8]
0000000000007323         add        rax, 0x20
0000000000007327         cmp        rdi, rax
000000000000732a         je         loc_7331

000000000000732c         call       j_free                                      ; free

                     loc_7331:
0000000000007331         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
0000000000007338         mov        rdi, qword [rbp+var_3A8]
000000000000733f         add        rax, 0x10
0000000000007343         cmp        rdi, rax
0000000000007346         je         loc_734d

0000000000007348         call       j_free                                      ; free

                     loc_734d:
000000000000734d         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
0000000000007354         mov        qword [rax], r14
0000000000007357         jmp        loc_64df

                     loc_735c:
000000000000735c         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
000000000000735f         call       j_malloc                                    ; malloc
0000000000007364         test       rax, rax
0000000000007367         mov        rcx, rax
000000000000736a         je         loc_6465

0000000000007370         test       r14, r14
0000000000007373         je         loc_73e0

0000000000007375         test       r13b, r13b
0000000000007378         je         loc_73e0

000000000000737a         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000737d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000007380         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000007383         call       j_memcpy                                    ; memcpy
0000000000007388         mov        r15, rax
000000000000738b         jmp        loc_72dc

                     loc_7390:
0000000000007390         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
0000000000007394         mov        eax, 0x1
0000000000007399         je         loc_72dc

000000000000739f         test       r12, r12
00000000000073a2         je         loc_6465

00000000000073a8         js         loc_6465

                     loc_73ae:
00000000000073ae         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
00000000000073b1         jne        loc_6465

00000000000073b7         cmp        rbx, 0xffffffffffffffff
00000000000073bb         je         loc_6465

00000000000073c1         mov        r12, rbx
00000000000073c4         jmp        loc_72a8

                     loc_73c9:
00000000000073c9         js         loc_6465                                    ; CODE XREF=vasnprintf+3986

00000000000073cf         add        r12, r12
00000000000073d2         cmp        r12, rbx
00000000000073d5         jae        loc_72a8

00000000000073db         jmp        loc_73ae
00000000000073dd         align      32

                     loc_73e0:
00000000000073e0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
00000000000073e3         jmp        loc_72dc

                     loc_73e8:
00000000000073e8         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
00000000000073ec         je         loc_6810

00000000000073f2         jmp        loc_6471

                     loc_73f7:
00000000000073f7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_73fc:
00000000000073fc         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
0000000000007400         mov        edx, 0x1
0000000000007405         je         loc_67eb

000000000000740b         test       r12, r12
000000000000740e         je         loc_6465

0000000000007414         jns        loc_6fe0

000000000000741a         jmp        loc_6465
000000000000741f         align      32                                          ; End of unwind block (FDE at 0xaaec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
0000000000007420         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0xab1c), CODE XREF=vasnprintf+108
0000000000007424         mov        rax, qword [rsi+8]
0000000000007428         je         loc_748d

000000000000742a         lea        r8, qword [aNull+12]                        ; 0x98b0
0000000000007431         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
0000000000007438         lea        r9, qword [aNull]                           ; "(NULL)"
000000000000743f         xor        ecx, ecx
0000000000007441         nop        dword [rax]
0000000000007448         cmp        dword [rax], 0x16
000000000000744b         ja         loc_7490

000000000000744d         mov        edx, dword [rax]
000000000000744f         movsxd     rdx, dword [r8+rdx*4]
0000000000007453         add        rdx, r8
0000000000007456         jmp        rdx
                        ; endp
0000000000007458         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7460:
0000000000007460         mov        rdx, qword [rdi+8]
0000000000007464         add        rdx, 0xf
0000000000007468         and        rdx, 0xfffffffffffffff0
000000000000746c         lea        r11, qword [rdx+0x10]
0000000000007470         mov        qword [rdi+8], r11
0000000000007474         fld        tword [rdx]
0000000000007476         fstp       tword [rax+0x10]
0000000000007479         nop        dword [rax]
0000000000007480         add        rcx, 0x1                                    ; CODE XREF=sub_7496+137, sub_7496+183
0000000000007484         add        rax, 0x20
0000000000007488         cmp        qword [rsi], rcx
000000000000748b         ja         printf_fetchargs+40
                        ; endp

                     loc_748d:
000000000000748d         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
000000000000748f         ret
                        ; endp

                     loc_7490:
0000000000007490         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
0000000000007495         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7496:
0000000000007496         mov        r11d, dword [rdi]
0000000000007499         cmp        r11d, 0x2f
000000000000749d         ja         loc_75da

00000000000074a3         mov        edx, r11d
00000000000074a6         add        rdx, qword [rdi+0x10]
00000000000074aa         add        r11d, 0x8
00000000000074ae         mov        dword [rdi], r11d

                     loc_74b1:
00000000000074b1         mov        rdx, qword [rdx]                            ; CODE XREF=sub_7580+102
00000000000074b4         mov        qword [rax+0x10], rdx
00000000000074b8         jmp        sub_7460+32
                        ; endp
00000000000074ba         mov        r11d, dword [rdi]
00000000000074bd         cmp        r11d, 0x2f
00000000000074c1         ja         sub_75fc                                    ; sub_75fc
00000000000074c7         mov        edx, r11d
00000000000074ca         add        rdx, qword [rdi+0x10]
00000000000074ce         add        r11d, 0x8
00000000000074d2         mov        dword [rdi], r11d

                     loc_74d5:
00000000000074d5         mov        edx, dword [rdx]                            ; CODE XREF=sub_75fc+12
00000000000074d7         mov        dword [rax+0x10], edx
00000000000074da         jmp        sub_7460+32
                        ; endp
00000000000074dc         mov        r11d, dword [rdi]
00000000000074df         cmp        r11d, 0x2f
00000000000074e3         ja         sub_75eb                                    ; sub_75eb
00000000000074e9         mov        edx, r11d
00000000000074ec         add        rdx, qword [rdi+0x10]
00000000000074f0         add        r11d, 0x8
00000000000074f4         mov        dword [rdi], r11d

                     loc_74f7:
00000000000074f7         mov        edx, dword [rdx]                            ; CODE XREF=sub_75eb+12
00000000000074f9         mov        byte [rax+0x10], dl
00000000000074fc         jmp        sub_7460+32
                        ; endp
00000000000074fe         mov        r11d, dword [rdi]
0000000000007501         cmp        r11d, 0x2f
0000000000007505         ja         sub_7580+42
000000000000750b         mov        edx, r11d
000000000000750e         add        rdx, qword [rdi+0x10]
0000000000007512         add        r11d, 0x8
0000000000007516         mov        dword [rdi], r11d
0000000000007519         mov        edx, dword [rdx]                            ; CODE XREF=sub_7580+54
000000000000751b         mov        word [rax+0x10], dx
000000000000751f         jmp        sub_7460+32
0000000000007524         mov        r11d, dword [rdi]
0000000000007527         cmp        r11d, 0x2f
000000000000752b         ja         sub_7580+59
0000000000007531         mov        edx, r11d
0000000000007534         add        rdx, qword [rdi+0x10]
0000000000007538         add        r11d, 0x8
000000000000753c         mov        dword [rdi], r11d
000000000000753f         mov        rdx, qword [rdx]                            ; CODE XREF=sub_7580+71
0000000000007542         test       rdx, rdx
0000000000007545         cmove      rdx, r9
0000000000007549         mov        qword [rax+0x10], rdx
000000000000754d         jmp        sub_7460+32
0000000000007552         mov        r11d, dword [rdi+4]
0000000000007556         cmp        r11d, 0xaf
000000000000755d         ja         sub_760d                                    ; sub_760d
0000000000007563         mov        edx, r11d
0000000000007566         add        rdx, qword [rdi+0x10]
000000000000756a         add        r11d, 0x10
000000000000756e         mov        dword [rdi+4], r11d

                     loc_7572:
0000000000007572         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_760d+12
0000000000007576         movsd      qword [rax+0x10], xmm0
000000000000757b         jmp        sub_7460+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7580:
0000000000007580         mov        r11d, dword [rdi]
0000000000007583         cmp        r11d, 0x2f
0000000000007587         ja         loc_75cc

0000000000007589         mov        edx, r11d
000000000000758c         add        rdx, qword [rdi+0x10]
0000000000007590         add        r11d, 0x8
0000000000007594         mov        dword [rdi], r11d

                     loc_7597:
0000000000007597         mov        rdx, qword [rdx]                            ; CODE XREF=sub_7580+88
000000000000759a         test       rdx, rdx
000000000000759d         cmove      rdx, r10
00000000000075a1         mov        qword [rax+0x10], rdx
00000000000075a5         jmp        sub_7460+32
                        ; endp
00000000000075aa         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7496+111
00000000000075ae         lea        r11, qword [rdx+8]
00000000000075b2         mov        qword [rdi+8], r11
00000000000075b6         jmp        sub_7496+131
00000000000075bb         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7496+149
00000000000075bf         lea        r11, qword [rdx+8]
00000000000075c3         mov        qword [rdi+8], r11
00000000000075c7         jmp        sub_7496+169

                     loc_75cc:
00000000000075cc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7580+7
00000000000075d0         lea        r11, qword [rdx+8]
00000000000075d4         mov        qword [rdi+8], r11
00000000000075d8         jmp        loc_7597

                     loc_75da:
00000000000075da         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7496+7
00000000000075de         lea        r11, qword [rdx+8]
00000000000075e2         mov        qword [rdi+8], r11
00000000000075e6         jmp        loc_74b1


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_75eb:
00000000000075eb         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7496+77
00000000000075ef         lea        r11, qword [rdx+8]
00000000000075f3         mov        qword [rdi+8], r11
00000000000075f7         jmp        loc_74f7


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_75fc:
00000000000075fc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7496+43
0000000000007600         lea        r11, qword [rdx+8]
0000000000007604         mov        qword [rdi+8], r11
0000000000007608         jmp        loc_74d5


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_760d:
000000000000760d         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_7496+199
0000000000007611         lea        r11, qword [rdx+8]
0000000000007615         mov        qword [rdi+8], r11
0000000000007619         jmp        loc_7572


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_761e:
000000000000761e         nop                                                    ; End of unwind block (FDE at 0xab1c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
0000000000007620         push       r15                                         ; Begin of unwind block (FDE at 0xab34), CODE XREF=vasnprintf+89
0000000000007622         push       r14
0000000000007624         lea        rcx, qword [rsi+0x20]
0000000000007628         push       r13
000000000000762a         push       r12
000000000000762c         lea        rax, qword [rdx+0x10]
0000000000007630         push       rbp
0000000000007631         push       rbx
0000000000007632         mov        r14, rsi
0000000000007635         mov        r15, rdx
0000000000007638         xor        ebx, ebx
000000000000763a         mov        r9d, 0x7
0000000000007640         sub        rsp, 0x58
0000000000007644         mov        r10d, 0x7
000000000000764a         mov        qword [rsi], 0x0
0000000000007651         mov        qword [rsi+8], rcx
0000000000007655         mov        qword [rsp+0x88+var_60], rcx
000000000000765a         mov        r8, 0xffffffffffffffff
0000000000007661         mov        qword [rdx], 0x0
0000000000007668         mov        qword [rsp+0x88+var_80], rax
000000000000766d         mov        qword [rdx+8], rax
0000000000007671         mov        qword [rsp+0x88+var_70], 0x0
000000000000767a         mov        qword [rsp+0x88+var_78], 0x0
0000000000007683         mov        qword [rsp+0x88+var_68], 0x0
000000000000768c         jmp        loc_769b
000000000000768e         align      16

                     loc_7690:
0000000000007690         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
0000000000007692         lea        rbp, qword [rdi+1]
0000000000007696         je         loc_76d8

                     loc_7698:
0000000000007698         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_769b:
000000000000769b         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
000000000000769e         test       al, al
00000000000076a0         jne        loc_7690

00000000000076a2         lea        rax, qword [rbx+rbx*4]
00000000000076a6         lea        rax, qword [rbx+rax*2]
00000000000076aa         mov        qword [rcx+rax*8], rdi
00000000000076ae         mov        rax, qword [rsp+0x88+var_78]
00000000000076b3         mov        qword [r14+0x10], rax
00000000000076b7         mov        rax, qword [rsp+0x88+var_70]
00000000000076bc         mov        qword [r14+0x18], rax
00000000000076c0         xor        eax, eax

                     loc_76c2:
00000000000076c2         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
00000000000076c6         pop        rbx
00000000000076c7         pop        rbp
00000000000076c8         pop        r12
00000000000076ca         pop        r13
00000000000076cc         pop        r14
00000000000076ce         pop        r15
00000000000076d0         ret
                        ; endp
00000000000076d1         align      8

                     loc_76d8:
00000000000076d8         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
00000000000076dc         mov        r13, r8
00000000000076df         lea        rax, qword [rbx+rax*2]
00000000000076e3         lea        r12, qword [rcx+rax*8]
00000000000076e7         mov        qword [r12], rdi
00000000000076eb         mov        dword [r12+0x10], 0x0
00000000000076f4         mov        qword [r12+0x18], 0x0
00000000000076fd         mov        qword [r12+0x20], 0x0
0000000000007706         mov        qword [r12+0x28], r8
000000000000770b         mov        qword [r12+0x30], 0x0
0000000000007714         mov        qword [r12+0x38], 0x0
000000000000771d         mov        qword [r12+0x40], r8
0000000000007722         mov        qword [r12+0x50], r8
0000000000007727         movzx      ebx, byte [rdi+1]
000000000000772b         lea        eax, dword [rbx-0x30]
000000000000772e         cmp        al, 0x9
0000000000007730         ja         loc_776e

0000000000007732         jmp        loc_7b6a
0000000000007737         align      64

                     loc_7740:
0000000000007740         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
0000000000007743         je         loc_7788

0000000000007745         cmp        bl, 0x2b
0000000000007748         je         loc_7790

000000000000774a         cmp        bl, 0x20
000000000000774d         je         loc_77a0

000000000000774f         cmp        bl, 0x23
0000000000007752         je         loc_77b0

0000000000007754         cmp        bl, 0x30
0000000000007757         je         loc_77c0

0000000000007759         cmp        bl, 0x49
000000000000775c         jne        loc_77d0

000000000000775e         or         dword [r12+0x10], 0x40
0000000000007764         nop        dword [rax]

                     loc_7768:
0000000000007768         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
000000000000776b         mov        rbp, rax

                     loc_776e:
000000000000776e         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
0000000000007772         cmp        bl, 0x27
0000000000007775         mov        rdx, rax
0000000000007778         jne        loc_7740

000000000000777a         or         dword [r12+0x10], 0x1
0000000000007780         jmp        loc_7768
0000000000007782         align      8

                     loc_7788:
0000000000007788         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000778e         jmp        loc_7768

                     loc_7790:
0000000000007790         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
0000000000007796         jmp        loc_7768
0000000000007798         align      32

                     loc_77a0:
00000000000077a0         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
00000000000077a6         jmp        loc_7768
00000000000077a8         align      16

                     loc_77b0:
00000000000077b0         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
00000000000077b6         jmp        loc_7768
00000000000077b8         align      64

                     loc_77c0:
00000000000077c0         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
00000000000077c6         jmp        loc_7768
00000000000077c8         align      16

                     loc_77d0:
00000000000077d0         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
00000000000077d3         je         loc_7989

00000000000077d9         lea        ecx, dword [rbx-0x30]
00000000000077dc         cmp        cl, 0x9
00000000000077df         jbe        loc_7bf7

                     loc_77e5:
00000000000077e5         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
00000000000077e8         je         loc_7abf

                     loc_77ee:
00000000000077ee         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
00000000000077f0         mov        esi, 0x1
00000000000077f5         jmp        loc_7827
00000000000077f7         align      2048

                     loc_7800:
0000000000007800         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
0000000000007803         je         loc_7840

0000000000007805         cmp        bl, 0x6c
0000000000007808         je         loc_7820

000000000000780a         cmp        bl, 0x6a
000000000000780d         je         loc_7820

000000000000780f         mov        edx, ebx
0000000000007811         and        edx, 0xffffffdf
0000000000007814         cmp        dl, 0x5a
0000000000007817         je         loc_7820

0000000000007819         cmp        bl, 0x74
000000000000781c         jne        loc_7848

000000000000781e         nop

                     loc_7820:
0000000000007820         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_7823:
0000000000007823         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_7827:
0000000000007827         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
000000000000782b         cmp        bl, 0x68
000000000000782e         jne        loc_7800

0000000000007830         mov        ecx, eax
0000000000007832         mov        edx, esi
0000000000007834         and        ecx, 0x1
0000000000007837         shl        edx, cl
0000000000007839         or         eax, edx
000000000000783b         jmp        loc_7823
000000000000783d         align      64

                     loc_7840:
0000000000007840         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
0000000000007843         jmp        loc_7823
0000000000007845         align      8

                     loc_7848:
0000000000007848         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000784b         cmp        dl, 0x53
000000000000784e         ja         loc_7e6b

0000000000007854         lea        rcx, qword [switch_table_992c]              ; switch_table_992c
000000000000785b         movzx      edx, dl
000000000000785e         movsxd     rdx, dword [rcx+rdx*4]
0000000000007862         add        rdx, rcx
0000000000007865         jmp        rdx                                         ; switch statement using table at 0x992c, with 84 cases, 0x7867,0x78db,0x7d1c,0x7d68,0x7d7b,0x7dc8,0x7ddb,0x7dfc,0x7e0c,0x7e60,0x7e6b

                     loc_7867:
0000000000007867         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
000000000000786d         mov        ebx, 0x73
0000000000007872         nop        word [rax+rax]

                     loc_7878:
0000000000007878         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000787c         je         loc_7f37

0000000000007882         mov        qword [r12+0x50], r13

                     loc_7887:
0000000000007887         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000788a         mov        rcx, qword [r15+8]
000000000000788e         jbe        loc_7eb0

                     loc_7894:
0000000000007894         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
0000000000007897         mov        rdx, rax
000000000000789a         shl        rdx, 0x5
000000000000789e         add        rdx, rcx
00000000000078a1         cmp        rax, r13
00000000000078a4         ja         loc_78c6

00000000000078a6         nop        word [cs:rax+rax]

                     loc_78b0:
00000000000078b0         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
00000000000078b4         mov        dword [rdx], 0x0
00000000000078ba         add        rdx, 0x20
00000000000078be         cmp        rax, r13
00000000000078c1         jbe        loc_78b0

00000000000078c3         mov        qword [r15], rax

                     loc_78c6:
00000000000078c6         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
00000000000078ca         lea        rax, qword [rcx+r13]
00000000000078ce         mov        edx, dword [rax]
00000000000078d0         test       edx, edx
00000000000078d2         jne        loc_7ea3

00000000000078d8         mov        dword [rax], r11d

                     loc_78db:
00000000000078db         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
00000000000078e0         mov        rax, qword [r14]
00000000000078e3         mov        qword [r12+8], rbp
00000000000078e8         lea        rbx, qword [rax+1]
00000000000078ec         cmp        r10, rbx
00000000000078ef         mov        qword [r14], rbx
00000000000078f2         ja         loc_7980

00000000000078f8         test       r10, r10
00000000000078fb         js         loc_82a7

0000000000007901         add        r10, r10
0000000000007904         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000790e         cmp        r10, rax
0000000000007911         ja         loc_82a7

0000000000007917         lea        rax, qword [r10+r10*4]
000000000000791b         mov        rdi, qword [r14+8]
000000000000791f         cmp        qword [rsp+0x88+var_60], rdi
0000000000007924         mov        qword [rsp+0x88+var_48], r9
0000000000007929         mov        qword [rsp+0x88+var_50], r10
000000000000792e         lea        rax, qword [r10+rax*2]
0000000000007932         mov        qword [rsp+0x88+var_58], r8
0000000000007937         lea        rsi, qword [rax*8]
000000000000793f         je         loc_7ffd

0000000000007945         call       j_realloc                                   ; realloc
000000000000794a         test       rax, rax
000000000000794d         mov        rcx, rax
0000000000007950         mov        r8, qword [rsp+0x88+var_58]
0000000000007955         mov        r10, qword [rsp+0x88+var_50]
000000000000795a         mov        r9, qword [rsp+0x88+var_48]
000000000000795f         je         loc_82a7

0000000000007965         mov        rax, qword [rsp+0x88+var_60]
000000000000796a         cmp        rax, qword [r14+8]
000000000000796e         mov        rbx, qword [r14]
0000000000007971         je         loc_8020

                     loc_7977:
0000000000007977         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000797b         jmp        loc_7698

                     loc_7980:
0000000000007980         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
0000000000007984         jmp        loc_7698

                     loc_7989:
0000000000007989         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000798e         mov        ecx, 0x1
0000000000007993         mov        qword [r12+0x18], rbp
0000000000007998         mov        qword [r12+0x20], rax
000000000000799d         test       rsi, rsi
00000000000079a0         cmovne     rcx, rsi
00000000000079a4         mov        qword [rsp+0x88+var_78], rcx
00000000000079a9         movzx      ecx, byte [rbp+1]
00000000000079ad         lea        esi, dword [rcx-0x30]
00000000000079b0         cmp        sil, 0x9
00000000000079b4         jbe        loc_7c95

                     loc_79ba:
00000000000079ba         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
00000000000079bf         cmp        rsi, 0xffffffffffffffff
00000000000079c3         lea        rdx, qword [rsi+1]
00000000000079c7         mov        qword [r12+0x28], rsi
00000000000079cc         je         loc_7e6b

00000000000079d2         mov        rbx, qword [rsp+0x88+var_68]
00000000000079d7         mov        rbp, rax
00000000000079da         mov        qword [rsp+0x88+var_68], rdx

                     loc_79df:
00000000000079df         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
00000000000079e2         mov        rcx, qword [r15+8]
00000000000079e6         ja         loc_8062

00000000000079ec         add        r9, r9
00000000000079ef         lea        rax, qword [rbx+1]
00000000000079f3         cmp        r9, rbx
00000000000079f6         cmovbe     r9, rax
00000000000079fa         movabs     rax, 0x7ffffffffffffff
0000000000007a04         cmp        r9, rax
0000000000007a07         ja         loc_82ab

0000000000007a0d         mov        rsi, r9
0000000000007a10         mov        qword [rsp+0x88+var_48], r9
0000000000007a15         mov        qword [rsp+0x88+var_50], r10
0000000000007a1a         shl        rsi, 0x5
0000000000007a1e         cmp        qword [rsp+0x88+var_80], rcx
0000000000007a23         mov        qword [rsp+0x88+var_58], r8
0000000000007a28         je         loc_8141

0000000000007a2e         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007a31         call       j_realloc                                   ; realloc
0000000000007a36         mov        rdx, qword [r15+8]
0000000000007a3a         mov        r8, qword [rsp+0x88+var_58]
0000000000007a3f         mov        rcx, rax
0000000000007a42         mov        r10, qword [rsp+0x88+var_50]
0000000000007a47         mov        r9, qword [rsp+0x88+var_48]

                     loc_7a4c:
0000000000007a4c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
0000000000007a4f         je         loc_8307

0000000000007a55         cmp        qword [rsp+0x88+var_80], rdx
0000000000007a5a         mov        rax, qword [r15]
0000000000007a5d         je         loc_821b

                     loc_7a63:
0000000000007a63         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_7a67:
0000000000007a67         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
0000000000007a6a         shl        rdx, 0x5
0000000000007a6e         add        rdx, rcx
0000000000007a71         cmp        rax, rbx
0000000000007a74         ja         loc_7a96

0000000000007a76         nop        word [cs:rax+rax]

                     loc_7a80:
0000000000007a80         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
0000000000007a84         mov        dword [rdx], 0x0
0000000000007a8a         add        rdx, 0x20
0000000000007a8e         cmp        rax, rbx
0000000000007a91         jbe        loc_7a80

0000000000007a93         mov        qword [r15], rax

                     loc_7a96:
0000000000007a96         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
0000000000007a9a         lea        rax, qword [rcx+rbx]
0000000000007a9e         mov        edx, dword [rax]
0000000000007aa0         test       edx, edx
0000000000007aa2         jne        loc_7f7b

0000000000007aa8         mov        dword [rax], 0x5
0000000000007aae         movzx      ebx, byte [rbp]
0000000000007ab2         lea        rdx, qword [rbp+1]
0000000000007ab6         cmp        bl, 0x2e
0000000000007ab9         jne        loc_77ee

                     loc_7abf:
0000000000007abf         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
0000000000007ac3         mov        qword [r12+0x30], rbp
0000000000007ac8         jne        loc_7c4e

0000000000007ace         mov        rsi, qword [rsp+0x88+var_70]
0000000000007ad3         lea        r11, qword [rbp+2]
0000000000007ad7         mov        eax, 0x2
0000000000007adc         mov        qword [r12+0x38], r11
0000000000007ae1         cmp        rsi, 0x2
0000000000007ae5         cmovae     rax, rsi
0000000000007ae9         mov        qword [rsp+0x88+var_70], rax
0000000000007aee         movsx      eax, byte [rbp+2]
0000000000007af2         lea        edx, dword [rax-0x30]
0000000000007af5         cmp        dl, 0x9
0000000000007af8         jbe        loc_818c

                     loc_7afe:
0000000000007afe         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
0000000000007b03         cmp        rbx, 0xffffffffffffffff
0000000000007b07         je         loc_8165

                     loc_7b0d:
0000000000007b0d         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
0000000000007b10         mov        rcx, qword [r15+8]
0000000000007b14         jbe        loc_807f

0000000000007b1a         mov        rax, qword [r15]

                     loc_7b1d:
0000000000007b1d         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
0000000000007b20         shl        rdx, 0x5
0000000000007b24         add        rdx, rcx
0000000000007b27         cmp        rax, rbx
0000000000007b2a         ja         loc_7b46

0000000000007b2c         nop        dword [rax]

                     loc_7b30:
0000000000007b30         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
0000000000007b34         mov        dword [rdx], 0x0
0000000000007b3a         add        rdx, 0x20
0000000000007b3e         cmp        rax, rbx
0000000000007b41         jbe        loc_7b30

0000000000007b43         mov        qword [r15], rax

                     loc_7b46:
0000000000007b46         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
0000000000007b4a         lea        rax, qword [rcx+rbx]
0000000000007b4e         mov        edx, dword [rax]
0000000000007b50         test       edx, edx
0000000000007b52         jne        loc_806a

0000000000007b58         mov        dword [rax], 0x5
0000000000007b5e         mov        rbp, r11
0000000000007b61         movzx      ebx, byte [r11]
0000000000007b65         jmp        loc_77ee

                     loc_7b6a:
0000000000007b6a         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
0000000000007b6d         nop        dword [rax]

                     loc_7b70:
0000000000007b70         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
0000000000007b74         movzx      edx, byte [rax]
0000000000007b77         lea        ecx, dword [rdx-0x30]
0000000000007b7a         cmp        cl, 0x9
0000000000007b7d         jbe        loc_7b70

0000000000007b7f         cmp        dl, 0x24
0000000000007b82         mov        r13, r8
0000000000007b85         jne        loc_776e

0000000000007b8b         xor        edx, edx

                     loc_7b8d:
0000000000007b8d         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
0000000000007b90         movabs     rdi, 0x1999999999999999
0000000000007b9a         mov        rsi, r8
0000000000007b9d         sub        eax, 0x30
0000000000007ba0         cmp        rdx, rdi
0000000000007ba3         cdqe
0000000000007ba5         ja         loc_7bae

0000000000007ba7         lea        rsi, qword [rdx+rdx*4]
0000000000007bab         add        rsi, rsi

                     loc_7bae:
0000000000007bae         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_7bb1:
0000000000007bb1         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
0000000000007bb4         movzx      ebx, byte [rbp+1]
0000000000007bb8         setb       sil
0000000000007bbc         add        rbp, 0x1
0000000000007bc0         mov        rdx, rax
0000000000007bc3         movzx      esi, sil
0000000000007bc7         test       rsi, rsi
0000000000007bca         lea        edi, dword [rbx-0x30]
0000000000007bcd         jne        loc_7f5e

0000000000007bd3         cmp        dil, 0x9
0000000000007bd7         jbe        loc_7b8d

0000000000007bd9         mov        r13, rax
0000000000007bdc         sub        r13, 0x1
0000000000007be0         cmp        r13, 0xfffffffffffffffd
0000000000007be4         ja         loc_7e6b

0000000000007bea         lea        rbp, qword [rcx+2]
0000000000007bee         movzx      ebx, byte [rcx+2]
0000000000007bf2         jmp        loc_776e

                     loc_7bf7:
0000000000007bf7         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
0000000000007bfc         movzx      edi, byte [rbp]
0000000000007c00         mov        rsi, rbp
0000000000007c03         lea        ecx, dword [rdi-0x30]
0000000000007c06         cmp        cl, 0x9
0000000000007c09         jbe        loc_7c17

0000000000007c0b         jmp        loc_7c40
0000000000007c0d         align      16

                     loc_7c10:
0000000000007c10         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
0000000000007c13         add        rax, 0x1

                     loc_7c17:
0000000000007c17         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
0000000000007c1a         lea        edx, dword [rdi-0x30]
0000000000007c1d         cmp        dl, 0x9
0000000000007c20         jbe        loc_7c10

0000000000007c22         mov        rcx, rax
0000000000007c25         lea        rdx, qword [rbp+2]
0000000000007c29         mov        rbp, rax
0000000000007c2c         sub        rcx, rsi
0000000000007c2f         mov        rsi, qword [rsp+0x88+var_78]
0000000000007c34         cmp        rsi, rcx
0000000000007c37         cmovae     rcx, rsi
0000000000007c3b         mov        qword [rsp+0x88+var_78], rcx

                     loc_7c40:
0000000000007c40         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
0000000000007c45         movzx      ebx, byte [rbp]
0000000000007c49         jmp        loc_77e5

                     loc_7c4e:
0000000000007c4e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
0000000000007c52         sub        eax, 0x30
0000000000007c55         cmp        al, 0x9
0000000000007c57         ja         loc_7c6e

0000000000007c59         nop        dword [rax]

                     loc_7c60:
0000000000007c60         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
0000000000007c64         movzx      eax, byte [rdx]
0000000000007c67         sub        eax, 0x30
0000000000007c6a         cmp        al, 0x9
0000000000007c6c         jbe        loc_7c60

                     loc_7c6e:
0000000000007c6e         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
0000000000007c73         mov        rax, rdx
0000000000007c76         mov        qword [r12+0x38], rdx
0000000000007c7b         sub        rax, rbp
0000000000007c7e         movzx      ebx, byte [rdx]
0000000000007c81         mov        rbp, rdx
0000000000007c84         cmp        rsi, rax
0000000000007c87         cmovae     rax, rsi
0000000000007c8b         mov        qword [rsp+0x88+var_70], rax
0000000000007c90         jmp        loc_77ee

                     loc_7c95:
0000000000007c95         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_7c98:
0000000000007c98         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
0000000000007c9c         movzx      edi, byte [rsi]
0000000000007c9f         lea        r11d, dword [rdi-0x30]
0000000000007ca3         cmp        r11b, 0x9
0000000000007ca7         jbe        loc_7c98

0000000000007ca9         cmp        dil, 0x24
0000000000007cad         jne        loc_79ba

0000000000007cb3         xor        esi, esi

                     loc_7cb5:
0000000000007cb5         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
0000000000007cb8         movabs     rdi, 0x1999999999999999
0000000000007cc2         mov        rcx, r8
0000000000007cc5         sub        eax, 0x30
0000000000007cc8         cmp        rsi, rdi
0000000000007ccb         cdqe
0000000000007ccd         ja         loc_7cd6

0000000000007ccf         lea        rcx, qword [rsi+rsi*4]
0000000000007cd3         add        rcx, rcx

                     loc_7cd6:
0000000000007cd6         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_7cd9:
0000000000007cd9         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
0000000000007cdc         add        rax, rcx
0000000000007cdf         movzx      ecx, byte [rdx+1]
0000000000007ce3         setb       r11b
0000000000007ce7         add        rdx, 0x1
0000000000007ceb         mov        rsi, rax
0000000000007cee         test       r11, r11
0000000000007cf1         lea        edi, dword [rcx-0x30]
0000000000007cf4         jne        loc_81fe

0000000000007cfa         cmp        dil, 0x9
0000000000007cfe         jbe        loc_7cb5

0000000000007d00         lea        rbx, qword [rax-1]
0000000000007d04         cmp        rbx, 0xfffffffffffffffd
0000000000007d08         ja         loc_7e6b

0000000000007d0e         mov        qword [r12+0x28], rbx
0000000000007d13         add        rbp, 0x2
0000000000007d17         jmp        loc_79df

                     loc_7d1c:
0000000000007d1c         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
0000000000007d1f         mov        r11d, 0x16
0000000000007d25         jg         loc_7878

0000000000007d2b         test       al, 0x4
0000000000007d2d         jne        loc_7878

0000000000007d33         cmp        eax, 0x7
0000000000007d36         mov        r11d, 0x15
0000000000007d3c         jg         loc_7878

0000000000007d42         test       al, 0x2
0000000000007d44         mov        r11d, 0x12
0000000000007d4a         jne        loc_7878

0000000000007d50         xor        r11d, r11d
0000000000007d53         test       al, 0x1
0000000000007d55         sete       r11b
0000000000007d59         add        r11d, 0x13
0000000000007d5d         jmp        loc_7878
0000000000007d62         align      8

                     loc_7d68:
0000000000007d68         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
0000000000007d6b         cmp        eax, 0x7
0000000000007d6e         setg       r11b
0000000000007d72         add        r11d, 0xd
0000000000007d76         jmp        loc_7878

                     loc_7d7b:
0000000000007d7b         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
0000000000007d7e         mov        r11d, 0x9
0000000000007d84         jg         loc_7878

0000000000007d8a         test       al, 0x4
0000000000007d8c         jne        loc_7878

0000000000007d92         cmp        eax, 0x7
0000000000007d95         mov        r11d, 0x7
0000000000007d9b         jg         loc_7878

0000000000007da1         test       al, 0x2
0000000000007da3         mov        r11d, 0x1
0000000000007da9         jne        loc_7878

0000000000007daf         and        eax, 0x1
0000000000007db2         cmp        eax, 0x1
0000000000007db5         sbb        r11d, r11d
0000000000007db8         and        r11d, 0x2
0000000000007dbc         add        r11d, 0x3
0000000000007dc0         jmp        loc_7878
0000000000007dc5         align      8

                     loc_7dc8:
0000000000007dc8         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
0000000000007dcb         cmp        eax, 0x7
0000000000007dce         setg       r11b
0000000000007dd2         add        r11d, 0xf
0000000000007dd6         jmp        loc_7878

                     loc_7ddb:
0000000000007ddb         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
0000000000007dde         mov        r11d, 0xc
0000000000007de4         jg         loc_7878

0000000000007dea         xor        r11d, r11d
0000000000007ded         test       al, 0x4
0000000000007def         setne      r11b
0000000000007df3         add        r11d, 0xb
0000000000007df7         jmp        loc_7878

                     loc_7dfc:
0000000000007dfc         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
0000000000007e02         mov        ebx, 0x63
0000000000007e07         jmp        loc_7878

                     loc_7e0c:
0000000000007e0c         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
0000000000007e0f         mov        r11d, 0xa
0000000000007e15         jg         loc_7878

0000000000007e1b         test       al, 0x4
0000000000007e1d         jne        loc_7878

0000000000007e23         cmp        eax, 0x7
0000000000007e26         mov        r11d, 0x8
0000000000007e2c         jg         loc_7878

0000000000007e32         test       al, 0x2
0000000000007e34         mov        r11d, 0x2
0000000000007e3a         jne        loc_7878

0000000000007e40         and        eax, 0x1
0000000000007e43         cmp        eax, 0x1
0000000000007e46         sbb        r11d, r11d
0000000000007e49         and        r11d, 0x2
0000000000007e4d         add        r11d, 0x4
0000000000007e51         jmp        loc_7878
0000000000007e56         align      32

                     loc_7e60:
0000000000007e60         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
0000000000007e66         jmp        loc_7878

                     loc_7e6b:
0000000000007e6b         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_7e6f:
0000000000007e6f         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
0000000000007e74         je         loc_7e7e

0000000000007e76         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000007e79         call       j_free                                      ; free

                     loc_7e7e:
0000000000007e7e         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
0000000000007e82         cmp        qword [rsp+0x88+var_60], rdi
0000000000007e87         je         loc_7e8e

0000000000007e89         call       j_free                                      ; free

                     loc_7e8e:
0000000000007e8e         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
0000000000007e93         mov        dword [rax], 0x16
0000000000007e99         mov        eax, 0xffffffff
0000000000007e9e         jmp        loc_76c2

                     loc_7ea3:
0000000000007ea3         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
0000000000007ea6         je         loc_78db

0000000000007eac         jmp        loc_7e6f
0000000000007eae         align      16

                     loc_7eb0:
0000000000007eb0         add        r9, r9                                      ; CODE XREF=printf_parse+622
0000000000007eb3         lea        rax, qword [r13+1]
0000000000007eb7         cmp        r9, r13
0000000000007eba         cmovbe     r9, rax
0000000000007ebe         movabs     rax, 0x7ffffffffffffff
0000000000007ec8         cmp        r9, rax
0000000000007ecb         ja         loc_82ab

0000000000007ed1         mov        rsi, r9
0000000000007ed4         mov        qword [rsp+0x88+var_40], r9
0000000000007ed9         mov        qword [rsp+0x88+var_48], r10
0000000000007ede         shl        rsi, 0x5
0000000000007ee2         cmp        qword [rsp+0x88+var_80], rcx
0000000000007ee7         mov        qword [rsp+0x88+var_50], r8
0000000000007eec         mov        dword [rsp+0x88+var_58], r11d
0000000000007ef1         je         loc_7f91

0000000000007ef7         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007efa         call       j_realloc                                   ; realloc
0000000000007eff         test       rax, rax
0000000000007f02         mov        rcx, rax
0000000000007f05         mov        r11d, dword [rsp+0x88+var_58]
0000000000007f0a         mov        r8, qword [rsp+0x88+var_50]
0000000000007f0f         mov        r10, qword [rsp+0x88+var_48]
0000000000007f14         mov        r9, qword [rsp+0x88+var_40]
0000000000007f19         je         loc_82a7

0000000000007f1f         mov        rax, qword [rsp+0x88+var_80]
0000000000007f24         cmp        rax, qword [r15+8]
0000000000007f28         je         loc_7fb9

                     loc_7f2e:
0000000000007f2e         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
0000000000007f32         jmp        loc_7894

                     loc_7f37:
0000000000007f37         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
0000000000007f3c         cmp        rsi, 0xffffffffffffffff
0000000000007f40         lea        rax, qword [rsi+1]
0000000000007f44         mov        qword [r12+0x50], rsi
0000000000007f49         je         loc_7e6b

0000000000007f4f         mov        r13, qword [rsp+0x88+var_68]
0000000000007f54         mov        qword [rsp+0x88+var_68], rax
0000000000007f59         jmp        loc_7887

                     loc_7f5e:
0000000000007f5e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
0000000000007f62         ja         loc_7e6b

0000000000007f68         movsx      eax, bl
0000000000007f6b         mov        rsi, r8
0000000000007f6e         mov        rcx, rbp
0000000000007f71         sub        eax, 0x30
0000000000007f74         cdqe
0000000000007f76         jmp        loc_7bb1

                     loc_7f7b:
0000000000007f7b         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
0000000000007f7e         jne        loc_7e6f

0000000000007f84         movzx      ebx, byte [rbp]
0000000000007f88         lea        rdx, qword [rbp+1]
0000000000007f8c         jmp        loc_77e5

                     loc_7f91:
0000000000007f91         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
0000000000007f94         call       j_malloc                                    ; malloc
0000000000007f99         test       rax, rax
0000000000007f9c         mov        rcx, rax
0000000000007f9f         mov        r11d, dword [rsp+0x88+var_58]
0000000000007fa4         mov        r8, qword [rsp+0x88+var_50]
0000000000007fa9         mov        r10, qword [rsp+0x88+var_48]
0000000000007fae         mov        r9, qword [rsp+0x88+var_40]
0000000000007fb3         je         loc_811c

                     loc_7fb9:
0000000000007fb9         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
0000000000007fbc         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
0000000000007fc1         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007fc4         mov        qword [rsp+0x88+var_40], r9
0000000000007fc9         mov        qword [rsp+0x88+var_48], r10
0000000000007fce         mov        qword [rsp+0x88+var_50], r8
0000000000007fd3         mov        dword [rsp+0x88+var_58], r11d
0000000000007fd8         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
0000000000007fdc         call       j_memcpy                                    ; memcpy
0000000000007fe1         mov        r9, qword [rsp+0x88+var_40]
0000000000007fe6         mov        r10, qword [rsp+0x88+var_48]
0000000000007feb         mov        rcx, rax
0000000000007fee         mov        r8, qword [rsp+0x88+var_50]
0000000000007ff3         mov        r11d, dword [rsp+0x88+var_58]
0000000000007ff8         jmp        loc_7f2e

                     loc_7ffd:
0000000000007ffd         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
0000000000008000         call       j_malloc                                    ; malloc
0000000000008005         test       rax, rax
0000000000008008         mov        rcx, rax
000000000000800b         mov        r8, qword [rsp+0x88+var_58]
0000000000008010         mov        r10, qword [rsp+0x88+var_50]
0000000000008015         mov        r9, qword [rsp+0x88+var_48]
000000000000801a         je         loc_8109

                     loc_8020:
0000000000008020         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
0000000000008024         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
0000000000008029         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000802c         mov        qword [rsp+0x88+var_48], r9
0000000000008031         mov        qword [rsp+0x88+var_50], r10
0000000000008036         lea        rdx, qword [rbx+rax*2]
000000000000803a         mov        qword [rsp+0x88+var_58], r8
000000000000803f         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000008043         call       j_memcpy                                    ; memcpy
0000000000008048         mov        rbx, qword [r14]
000000000000804b         mov        rcx, rax
000000000000804e         mov        r9, qword [rsp+0x88+var_48]
0000000000008053         mov        r10, qword [rsp+0x88+var_50]
0000000000008058         mov        r8, qword [rsp+0x88+var_58]
000000000000805d         jmp        loc_7977

                     loc_8062:
0000000000008062         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
0000000000008065         jmp        loc_7a67

                     loc_806a:
000000000000806a         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
000000000000806d         jne        loc_7e6f

0000000000008073         movzx      ebx, byte [r11]
0000000000008077         mov        rbp, r11
000000000000807a         jmp        loc_77ee

                     loc_807f:
000000000000807f         add        r9, r9                                      ; CODE XREF=printf_parse+1268
0000000000008082         lea        rax, qword [rbx+1]
0000000000008086         cmp        r9, rbx
0000000000008089         cmovbe     r9, rax
000000000000808d         movabs     rax, 0x7ffffffffffffff
0000000000008097         cmp        r9, rax
000000000000809a         ja         loc_82ab

00000000000080a0         mov        rsi, r9
00000000000080a3         mov        qword [rsp+0x88+var_40], r9
00000000000080a8         mov        qword [rsp+0x88+var_48], r10
00000000000080ad         shl        rsi, 0x5
00000000000080b1         cmp        qword [rsp+0x88+var_80], rcx
00000000000080b6         mov        qword [rsp+0x88+var_50], r8
00000000000080bb         mov        qword [rsp+0x88+var_58], r11
00000000000080c0         je         loc_827e

00000000000080c6         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
00000000000080c9         call       j_realloc                                   ; realloc
00000000000080ce         mov        rdx, qword [r15+8]
00000000000080d2         mov        r11, qword [rsp+0x88+var_58]
00000000000080d7         mov        rcx, rax
00000000000080da         mov        r8, qword [rsp+0x88+var_50]
00000000000080df         mov        r10, qword [rsp+0x88+var_48]
00000000000080e4         mov        r9, qword [rsp+0x88+var_40]

                     loc_80e9:
00000000000080e9         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
00000000000080ec         je         loc_8307

00000000000080f2         cmp        qword [rsp+0x88+var_80], rdx
00000000000080f7         mov        rax, qword [r15]
00000000000080fa         je         loc_82c0

                     loc_8100:
0000000000008100         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
0000000000008104         jmp        loc_7b1d

                     loc_8109:
0000000000008109         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
000000000000810d         cmp        qword [rsp+0x88+var_80], rcx
0000000000008112         je         loc_812c

                     loc_8114:
0000000000008114         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
0000000000008117         call       j_free                                      ; free

                     loc_811c:
000000000000811c         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
0000000000008120         cmp        qword [rsp+0x88+var_60], rdi
0000000000008125         je         loc_812c

0000000000008127         call       j_free                                      ; free

                     loc_812c:
000000000000812c         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
0000000000008131         mov        dword [rax], 0xc
0000000000008137         mov        eax, 0xffffffff
000000000000813c         jmp        loc_76c2

                     loc_8141:
0000000000008141         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
0000000000008144         call       j_malloc                                    ; malloc
0000000000008149         mov        rdx, qword [rsp+0x88+var_80]
000000000000814e         mov        rcx, rax
0000000000008151         mov        r9, qword [rsp+0x88+var_48]
0000000000008156         mov        r10, qword [rsp+0x88+var_50]
000000000000815b         mov        r8, qword [rsp+0x88+var_58]
0000000000008160         jmp        loc_7a4c

                     loc_8165:
0000000000008165         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
000000000000816a         cmp        rsi, 0xffffffffffffffff
000000000000816e         lea        rax, qword [rsi+1]
0000000000008172         mov        qword [r12+0x40], rsi
0000000000008177         je         loc_7e6b

000000000000817d         mov        rbx, qword [rsp+0x88+var_68]
0000000000008182         mov        qword [rsp+0x88+var_68], rax
0000000000008187         jmp        loc_7b0d

                     loc_818c:
000000000000818c         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_818f:
000000000000818f         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
0000000000008193         movzx      ecx, byte [rdx]
0000000000008196         lea        esi, dword [rcx-0x30]
0000000000008199         cmp        sil, 0x9
000000000000819d         jbe        loc_818f

000000000000819f         cmp        cl, 0x24
00000000000081a2         jne        loc_7afe

00000000000081a8         xor        ecx, ecx

                     loc_81aa:
00000000000081aa         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
00000000000081b4         sub        eax, 0x30
00000000000081b7         mov        rdx, r8
00000000000081ba         cmp        rcx, rsi
00000000000081bd         cdqe
00000000000081bf         ja         loc_81c8

00000000000081c1         lea        rdx, qword [rcx+rcx*4]
00000000000081c5         add        rdx, rdx

                     loc_81c8:
00000000000081c8         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_81cb:
00000000000081cb         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
00000000000081cd         add        rdx, rax
00000000000081d0         movsx      eax, byte [r11+1]
00000000000081d5         setb       bl
00000000000081d8         add        r11, 0x1
00000000000081dc         mov        rcx, rdx
00000000000081df         test       rbx, rbx
00000000000081e2         lea        edi, dword [rax-0x30]
00000000000081e5         je         loc_8258

00000000000081e7         cmp        dil, 0x9
00000000000081eb         ja         loc_7e6b

00000000000081f1         sub        eax, 0x30
00000000000081f4         mov        rdx, r8
00000000000081f7         mov        rsi, r11
00000000000081fa         cdqe
00000000000081fc         jmp        loc_81cb

                     loc_81fe:
00000000000081fe         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
0000000000008202         ja         loc_7e6b

0000000000008208         movsx      eax, cl
000000000000820b         mov        rbp, rdx
000000000000820e         mov        rcx, r8
0000000000008211         sub        eax, 0x30
0000000000008214         cdqe
0000000000008216         jmp        loc_7cd9

                     loc_821b:
000000000000821b         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
0000000000008220         shl        rax, 0x5
0000000000008224         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000008227         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000822a         mov        qword [rsp+0x88+var_48], r9
000000000000822f         mov        qword [rsp+0x88+var_50], r10
0000000000008234         mov        qword [rsp+0x88+var_58], r8
0000000000008239         call       j_memcpy                                    ; memcpy
000000000000823e         mov        r9, qword [rsp+0x88+var_48]
0000000000008243         mov        rcx, rax
0000000000008246         mov        r10, qword [rsp+0x88+var_50]
000000000000824b         mov        rax, qword [r15]
000000000000824e         mov        r8, qword [rsp+0x88+var_58]
0000000000008253         jmp        loc_7a63

                     loc_8258:
0000000000008258         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
000000000000825c         jbe        loc_81aa

0000000000008262         lea        rbx, qword [rdx-1]
0000000000008266         cmp        rbx, 0xfffffffffffffffd
000000000000826a         ja         loc_7e6b

0000000000008270         mov        qword [r12+0x40], rbx
0000000000008275         lea        r11, qword [rsi+2]
0000000000008279         jmp        loc_7b0d

                     loc_827e:
000000000000827e         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
0000000000008281         call       j_malloc                                    ; malloc
0000000000008286         mov        rdx, qword [rsp+0x88+var_80]
000000000000828b         mov        rcx, rax
000000000000828e         mov        r9, qword [rsp+0x88+var_40]
0000000000008293         mov        r10, qword [rsp+0x88+var_48]
0000000000008298         mov        r8, qword [rsp+0x88+var_50]
000000000000829d         mov        r11, qword [rsp+0x88+var_58]
00000000000082a2         jmp        loc_80e9

                     loc_82a7:
00000000000082a7         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_82ab:
00000000000082ab         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
00000000000082b0         jne        loc_8114

00000000000082b6         jmp        loc_811c
00000000000082bb         align      64

                     loc_82c0:
00000000000082c0         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
00000000000082c5         shl        rax, 0x5
00000000000082c9         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
00000000000082cc         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
00000000000082cf         mov        qword [rsp+0x88+var_40], r9
00000000000082d4         mov        qword [rsp+0x88+var_48], r10
00000000000082d9         mov        qword [rsp+0x88+var_50], r8
00000000000082de         mov        qword [rsp+0x88+var_58], r11
00000000000082e3         call       j_memcpy                                    ; memcpy
00000000000082e8         mov        r9, qword [rsp+0x88+var_40]
00000000000082ed         mov        rcx, rax
00000000000082f0         mov        r10, qword [rsp+0x88+var_48]
00000000000082f5         mov        rax, qword [r15]
00000000000082f8         mov        r8, qword [rsp+0x88+var_50]
00000000000082fd         mov        r11, qword [rsp+0x88+var_58]
0000000000008302         jmp        loc_8100

                     loc_8307:
0000000000008307         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
000000000000830a         jmp        loc_82ab
000000000000830c         align      16                                          ; End of unwind block (FDE at 0xab34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000008310         push       r15                                         ; Begin of unwind block (FDE at 0xab84), DATA XREF=_start+22
0000000000008312         push       r14
0000000000008314         mov        r15, rdx
0000000000008317         push       r13
0000000000008319         push       r12
000000000000831b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000008322         push       rbp
0000000000008323         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000832a         push       rbx
000000000000832b         mov        r13d, edi
000000000000832e         mov        r14, rsi
0000000000008331         sub        rbp, r12
0000000000008334         sub        rsp, 0x8
0000000000008338         sar        rbp, 0x3
000000000000833c         call       _init                                       ; _init
0000000000008341         test       rbp, rbp
0000000000008344         je         loc_8366

0000000000008346         xor        ebx, ebx
0000000000008348         nop        dword [rax+rax]

                     loc_8350:
0000000000008350         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000008353         mov        rsi, r14
0000000000008356         mov        edi, r13d
0000000000008359         call       qword [r12+rbx*8]
000000000000835d         add        rbx, 0x1
0000000000008361         cmp        rbp, rbx
0000000000008364         jne        loc_8350

                     loc_8366:
0000000000008366         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000836a         pop        rbx
000000000000836b         pop        rbp
000000000000836c         pop        r12
000000000000836e         pop        r13
0000000000008370         pop        r14
0000000000008372         pop        r15
0000000000008374         ret
                        ; endp
0000000000008375         align      128                                         ; End of unwind block (FDE at 0xab84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000008380         ret                                                    ; Begin of unwind block (FDE at 0xabcc), DATA XREF=_start+15
                        ; endp
0000000000008382         align      16                                          ; End of unwind block (FDE at 0xabcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000008390         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xabe4), __dso_handle, CODE XREF=main+104
0000000000008397         xor        esi, esi
0000000000008399         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000839e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xabe4)
000000000000839f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x83a0; 0x83a9[ (9 bytes)
        ; File offset : [33696; 33705[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
00000000000083a0         sub        rsp, 0x8
00000000000083a4         add        rsp, 0x8
00000000000083a8         ret
                        ; endp
00000000000083a9         db  0x00 ; '.'
00000000000083aa         db  0x00 ; '.'
00000000000083ab         db  0x00 ; '.'
00000000000083ac         db  0x00 ; '.'
00000000000083ad         db  0x00 ; '.'
00000000000083ae         db  0x00 ; '.'
00000000000083af         db  0x00 ; '.'
00000000000083b0         db  0x00 ; '.'
00000000000083b1         db  0x00 ; '.'
00000000000083b2         db  0x00 ; '.'
00000000000083b3         db  0x00 ; '.'
00000000000083b4         db  0x00 ; '.'
00000000000083b5         db  0x00 ; '.'
00000000000083b6         db  0x00 ; '.'
00000000000083b7         db  0x00 ; '.'
00000000000083b8         db  0x00 ; '.'
00000000000083b9         db  0x00 ; '.'
00000000000083ba         db  0x00 ; '.'
00000000000083bb         db  0x00 ; '.'
00000000000083bc         db  0x00 ; '.'
00000000000083bd         db  0x00 ; '.'
00000000000083be         db  0x00 ; '.'
00000000000083bf         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x83c0; 0x9a7c[ (5820 bytes)
        ; File offset : [33728; 39548[ (5820 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
00000000000083c0         db  0x01 ; '.'
00000000000083c1         db  0x00 ; '.'
00000000000083c2         db  0x02 ; '.'
00000000000083c3         db  0x00 ; '.'
00000000000083c4         db  0x00 ; '.'
00000000000083c5         db  0x00 ; '.'
00000000000083c6         db  0x00 ; '.'
00000000000083c7         db  0x00 ; '.'
                     aMissingHexadec:
00000000000083c8         db         "missing hexadecimal number in escape", 0   ; DATA XREF=print_esc+1096
00000000000083ed         align      16
                     aInvalidUnivers:
00000000000083f0         db         "invalid universal character name \%c%0*x", 0 ; DATA XREF=print_esc+1251
0000000000008419         align      32
                     aSValueNotCompl:
0000000000008420         db         "%s: value not completely converted", 0     ; DATA XREF=verify_numeric+40
0000000000008443         align      8
                     aWarningSCharac:
0000000000008448         db         "warning: %s: character(s) following character constant have been ignored", 0 ; DATA XREF=main+2224, main+2371, vstrtoimax+127
0000000000008491         align      8
                     aTrySHelpForMor:
0000000000008498         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
00000000000084bf         align      64
                     aUsageSFormatAr:
00000000000084c0         db         "Usage: %s FORMAT [ARGUMENT]...\n  or:  %s OPTION\n", 0 ; DATA XREF=usage+93
00000000000084f1         align      8
                     aPrintArguments:
00000000000084f8         db         "Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:\n\n", 0 ; DATA XREF=usage+135
0000000000008541         align      8
                     aHelpDisplayThi:
0000000000008548         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+172
0000000000008575         align      8
                     aVersionOutputV:
0000000000008578         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+209
00000000000085ae         align      16
                     aNformatControl:
00000000000085b0         db         "\nFORMAT controls the output as in C printf.  Interpreted sequences are:\n\n  \\"      double quote\n", 0 ; DATA XREF=usage+246
0000000000008611         align      8
                     aBackslashnAAle:
0000000000008618         db         "  \\      backslash\n  \a      alert (BEL)\n  \b      backspace\n  \c      produce no further output\n  \e      escape\n  \f      form feed\n  \n      new line\n  \r      carriage return\n  \t      horizontal tab\n  \v      vertical tab\n", 0 ; DATA XREF=usage+283
00000000000086fd         align      256
                     aNnnByteWithOct:
0000000000008700         db         "  \NNN    byte with octal value NNN (1 to 3 digits)\n  \xHH    byte with hexadecimal value HH (1 to 2 digits)\n  \uHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)\n  \UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits)\n", 0 ; DATA XREF=usage+320
00000000000087fc         align      2048
                     aASingleNBArgum:
0000000000008800         db         "  %%      a single %\n  %b      ARGUMENT as a string with '\' escapes interpreted,\n          except that octal escapes are of the form \0 or \0NNN\n  %q      ARGUMENT is printed in a format that can be reused as shell input,\n          escaping non-printable " ; DATA XREF=usage+357
0000000000008900         db         "characters with the proposed POSIX $'' syntax.\n\nand all C format specifications ending with one of diouxXfeEgGcs, with\nARGUMENTs converted to proper type first.  Variable widths are handled.\n", 0
                     aNnoteYourShell:
00000000000089c0         db         "\nNOTE: your shell may have its own version of %s, which usually supersedes\nthe version described here.  Please refer to your shell's documentation\nfor details about the options it supports.\n", 0 ; DATA XREF=usage+394
0000000000008a7f         align      128
                     aHttpswwwgnuorg:
0000000000008a80         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+647, usage+747, usage+840, usage+950, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000008aa8         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+991
0000000000008aef         align      16
                     aOrAvailableLoc:
0000000000008af0         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+790
0000000000008b23         align      8
                     aSInvalidConver:
0000000000008b28         db         "%.*s: invalid conversion specification", 0 ; DATA XREF=main+3311
0000000000008b4f         align      16
                     aWarningIgnorin:
0000000000008b50         db         "warning: ignoring excess arguments, starting with %s", 0 ; DATA XREF=main+432
                     aAbcefnrtv:
0000000000008b85         db         "\"\abcefnrtv", 0                           ; DATA XREF=print_esc+380
                     aSExpectedANume:
0000000000008b91         db         "%s: expected a numeric value", 0           ; DATA XREF=verify_numeric+160
                     aPrintf:
0000000000008bae         db         "printf", 0                                 ; DATA XREF=main+1934, usage+382, usage+413, usage+740, usage+924, usage+943, usage+977
0000000000008bb5         db  0x5b ; '['                                         ; DATA XREF=usage+435
0000000000008bb6         db  0x00 ; '.'
                     aTestInvocation:
0000000000008bb7         db         "test invocation", 0                        ; DATA XREF=usage+474
                     aMulticallInvoc:
0000000000008bc7         db         "Multi-call invocation", 0                  ; DATA XREF=usage+522
                     aSha224sum:
0000000000008bdd         db         "sha224sum", 0                              ; DATA XREF=usage+539
                     aSha2Utilities:
0000000000008be7         db         "sha2 utilities", 0                         ; DATA XREF=usage+551
                     aSha256sum:
0000000000008bf6         db         "sha256sum", 0                              ; DATA XREF=usage+442
                     aSha384sum:
0000000000008c00         db         "sha384sum", 0                              ; DATA XREF=usage+486
                     aSha512sum:
0000000000008c0a         db         "sha512sum", 0                              ; DATA XREF=usage+510
                     aNsOnlineHelpSn:
0000000000008c14         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+626
0000000000008c2b         db  0x47 ; 'G'                                         ; DATA XREF=main+1927, usage+654, usage+847, emit_bug_reporting_address+68
0000000000008c2c         db  0x4e ; 'N'
0000000000008c2d         db  0x55 ; 'U'
0000000000008c2e         db  0x20 ; ' '
                     aCoreutils:
0000000000008c2f         db         "coreutils", 0                              ; DATA XREF=main+73, main+85, usage+498
0000000000008c39         db  0x65 ; 'e'                                         ; DATA XREF=usage+693, usage+886
0000000000008c3a         db  0x6e ; 'n'
0000000000008c3b         db  0x5f ; '_'
0000000000008c3c         db  0x00 ; '.'
                     aFullDocumentat:
0000000000008c3d         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+721, usage+910
0000000000008c58         db  0x6c ; 'l'                                         ; DATA XREF=main+1544
0000000000008c59         db  0x64 ; 'd'
0000000000008c5a         db  0x00 ; '.'
0000000000008c5b         db  0x4c ; 'L'                                         ; DATA XREF=main+1611
0000000000008c5c         db  0x00 ; '.'
                     aUsrlocalsharel:
0000000000008c5d         db         "/usr/local/share/locale", 0                ; DATA XREF=main+66
                     aPosixlycorrect:
0000000000008c75         db         "POSIXLY_CORRECT", 0                        ; DATA XREF=main+109
                     aHelp:
0000000000008c85         db         "--help", 0                                 ; DATA XREF=main+1785
                     aVersion:
0000000000008c8c         db         "--version", 0                              ; DATA XREF=main+1808
                     aDavidMackenzie:
0000000000008c96         db         "David MacKenzie", 0                        ; DATA XREF=main+1920
0000000000008ca6         db  0x2d ; '-'                                         ; DATA XREF=main+163, main+1830
0000000000008ca7         db  0x2d ; '-'
0000000000008ca8         db  0x00 ; '.'
                     aMissingOperand:
0000000000008ca9         db         "missing operand", 0                        ; DATA XREF=main+1853
                     aInvalidFieldWi:
0000000000008cb9         db         "invalid field width: %s", 0                ; DATA XREF=main+3435
                     aInvalidPrecisi:
0000000000008cd1         db         "invalid precision: %s", 0                  ; DATA XREF=main+3381
0000000000008ce7         align      8
                     switch_table_8ce8:        // switch_table
0000000000008ce8         dd         print_esc.loc_29c2-switch_table_8ce8, print_esc.loc_294c-switch_table_8ce8, print_esc.loc_2996-switch_table_8ce8, print_esc.loc_29e7-switch_table_8ce8 ; switch table used at 0x27d1 containing 22 entries, DATA XREF=print_esc+416
0000000000008cf8         dd         print_esc.loc_2902-switch_table_8ce8, print_esc.loc_299d-switch_table_8ce8, 7 dup (print_esc.loc_29e7-switch_table_8ce8), print_esc.loc_2927-switch_table_8ce8
0000000000008d20         dd         3 dup (print_esc.loc_29e7-switch_table_8ce8), print_esc.loc_2971-switch_table_8ce8, print_esc.loc_29e7-switch_table_8ce8, print_esc.loc_28dd-switch_table_8ce8
0000000000008d38         dd         print_esc.loc_29e7-switch_table_8ce8, print_esc.loc_28b8-switch_table_8ce8
                     switch_table_8d40:        // switch_table
0000000000008d40         dd         main.loc_1b76-switch_table_8d40, 2 dup (main.loc_1bd0-switch_table_8d40), main.loc_1b80-switch_table_8d40, 3 dup (main.loc_1bd0-switch_table_8d40) ; switch table used at 0x1b55 containing 42 entries, DATA XREF=main+996
0000000000008d5c         dd         main.loc_1b60-switch_table_8d40, 3 dup (main.loc_1bd0-switch_table_8d40), main.loc_1b76-switch_table_8d40, main.loc_1bd0-switch_table_8d40
0000000000008d74         dd         main.loc_1b76-switch_table_8d40, 2 dup (main.loc_1bd0-switch_table_8d40), main.loc_1bb0-switch_table_8d40, 24 dup (main.loc_1bd0-switch_table_8d40)
0000000000008de4         dd         main.loc_1b60-switch_table_8d40
                     switch_table_8de8:        // switch_table
0000000000008de8         dd         main.loc_2062-switch_table_8de8, 3 dup (main.loc_1f78-switch_table_8de8), 3 dup (main.loc_2062-switch_table_8de8), 16 dup (main.loc_1f78-switch_table_8de8) ; switch table used at 0x1e1e containing 56 entries, DATA XREF=main+1708
0000000000008e44         dd         main.loc_1fda-switch_table_8de8, 8 dup (main.loc_1f78-switch_table_8de8), main.loc_2062-switch_table_8de8, main.loc_1f78-switch_table_8de8
0000000000008e70         dd         main.loc_1fb9-switch_table_8de8, main.loc_1f8a-switch_table_8de8, 3 dup (main.loc_2062-switch_table_8de8), main.loc_1f78-switch_table_8de8
0000000000008e88         dd         main.loc_1f8a-switch_table_8de8, 5 dup (main.loc_1f78-switch_table_8de8), main.loc_1fda-switch_table_8de8, 3 dup (main.loc_1f78-switch_table_8de8)
0000000000008eb0         dd         main.loc_1f50-switch_table_8de8, main.loc_1f78-switch_table_8de8, main.loc_1fda-switch_table_8de8, 2 dup (main.loc_1f78-switch_table_8de8)
0000000000008ec4         dd         main.loc_1fda-switch_table_8de8
                     a831:
0000000000008ec8         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
0000000000008ecd         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
0000000000008ed9         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
                     aANullArgv0WasP:
0000000000008ee0         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000008f18         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000008f20         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000008f21         db  0x74 ; 't'
0000000000008f22         db  0x2d ; '-'
0000000000008f23         db  0x00 ; '.'
0000000000008f24         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000008f25         db  0x80 ; '.'
0000000000008f26         db  0x98 ; '.'
0000000000008f27         db  0x00 ; '.'
0000000000008f28         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000008f29         db  0x80 ; '.'
0000000000008f2a         db  0x99 ; '.'
0000000000008f2b         db  0x00 ; '.'
0000000000008f2c         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000008f2d         db  0x07 ; '.'
0000000000008f2e         db  0x65 ; 'e'
0000000000008f2f         db  0x00 ; '.'
0000000000008f30         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000008f31         db  0xaf ; '.'
0000000000008f32         db  0x00 ; '.'
0000000000008f33         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_3b00+1451, sub_3b00+1493, sub_3b00+2429
0000000000008f34         db  0x00 ; '.'
0000000000008f35         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_3b00+132, sub_3b00+1338, sub_3b00+1670, sub_3b00+1697, sub_3b00+2352
0000000000008f36         db  0x00 ; '.'
0000000000008f37         db  0x60 ; '`'                                         ; DATA XREF=sub_3b00+1627, sub_3b00+1654
0000000000008f38         db  0x00 ; '.'
                     aLiteral:
0000000000008f39         db         "literal", 0
                     aShell:
0000000000008f41         db         "shell", 0
                     aShellalways:
0000000000008f47         db         "shell-always", 0
0000000000008f54         db  0x73 ; 's'
0000000000008f55         db  0x68 ; 'h'
0000000000008f56         db  0x65 ; 'e'
0000000000008f57         db  0x6c ; 'l'
0000000000008f58         db  0x6c ; 'l'
0000000000008f59         db  0x2d ; '-'
                     aEscape:
0000000000008f5a         db         "escape", 0
                     aShellescapealw:
0000000000008f61         db         "shell-escape-always", 0
0000000000008f75         db  0x63 ; 'c'
0000000000008f76         db  0x00 ; '.'
                     aCmaybe:
0000000000008f77         db         "c-maybe", 0
                     aClocale:
0000000000008f7f         db         "clocale", 0
0000000000008f87         align      32
                     switch_table_8fa0:        // switch_table
0000000000008fa0         dd         quotearg_buffer_restyled.loc_41fa-switch_table_8fa0, quotearg_buffer_restyled.loc_3453-switch_table_8fa0, quotearg_buffer_restyled.loc_4428-switch_table_8fa0, quotearg_buffer_restyled.loc_4234-switch_table_8fa0 ; switch table used at 0x3451 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000008fb0         dd         quotearg_buffer_restyled.loc_4024-switch_table_8fa0, quotearg_buffer_restyled.loc_4080-switch_table_8fa0, quotearg_buffer_restyled.loc_40d5-switch_table_8fa0, quotearg_buffer_restyled.loc_411a-switch_table_8fa0
0000000000008fc0         dd         3 dup (quotearg_buffer_restyled.loc_4154-switch_table_8fa0)
0000000000008fcc         db  0x04 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
0000000000008fcd         db  0xa8 ; '.'
0000000000008fce         db  0xff ; '.'
0000000000008fcf         db  0xff ; '.'
0000000000008fd0         db  0xec ; '.'
0000000000008fd1         db  0xa8 ; '.'
0000000000008fd2         db  0xff ; '.'
0000000000008fd3         db  0xff ; '.'
0000000000008fd4         db  0xec ; '.'
0000000000008fd5         db  0xa8 ; '.'
0000000000008fd6         db  0xff ; '.'
0000000000008fd7         db  0xff ; '.'
0000000000008fd8         db  0xec ; '.'
0000000000008fd9         db  0xa8 ; '.'
0000000000008fda         db  0xff ; '.'
0000000000008fdb         db  0xff ; '.'
0000000000008fdc         db  0xec ; '.'
0000000000008fdd         db  0xa8 ; '.'
0000000000008fde         db  0xff ; '.'
0000000000008fdf         db  0xff ; '.'
0000000000008fe0         db  0xec ; '.'
0000000000008fe1         db  0xa8 ; '.'
0000000000008fe2         db  0xff ; '.'
0000000000008fe3         db  0xff ; '.'
0000000000008fe4         db  0xec ; '.'
0000000000008fe5         db  0xa8 ; '.'
0000000000008fe6         db  0xff ; '.'
0000000000008fe7         db  0xff ; '.'
0000000000008fe8         db  0x44 ; 'D'
0000000000008fe9         db  0xa8 ; '.'
0000000000008fea         db  0xff ; '.'
0000000000008feb         db  0xff ; '.'
0000000000008fec         db  0x4c ; 'L'
0000000000008fed         db  0xa7 ; '.'
0000000000008fee         db  0xff ; '.'
0000000000008fef         db  0xff ; '.'
0000000000008ff0         db  0x0c ; '.'
0000000000008ff1         db  0xa7 ; '.'
0000000000008ff2         db  0xff ; '.'
0000000000008ff3         db  0xff ; '.'
0000000000008ff4         db  0xd4 ; '.'
0000000000008ff5         db  0xa8 ; '.'
0000000000008ff6         db  0xff ; '.'
0000000000008ff7         db  0xff ; '.'
0000000000008ff8         db  0xc4 ; '.'
0000000000008ff9         db  0xa8 ; '.'
0000000000008ffa         db  0xff ; '.'
0000000000008ffb         db  0xff ; '.'
0000000000008ffc         db  0xb4 ; '.'
0000000000008ffd         db  0xa8 ; '.'
0000000000008ffe         db  0xff ; '.'
0000000000008fff         db  0xff ; '.'
0000000000009000         db  0xa4 ; '.'
0000000000009001         db  0xa8 ; '.'
0000000000009002         db  0xff ; '.'
0000000000009003         db  0xff ; '.'
0000000000009004         db  0xec ; '.'
0000000000009005         db  0xa8 ; '.'
0000000000009006         db  0xff ; '.'
0000000000009007         db  0xff ; '.'
0000000000009008         db  0xec ; '.'
0000000000009009         db  0xa8 ; '.'
000000000000900a         db  0xff ; '.'
000000000000900b         db  0xff ; '.'
000000000000900c         db  0xec ; '.'
000000000000900d         db  0xa8 ; '.'
000000000000900e         db  0xff ; '.'
000000000000900f         db  0xff ; '.'
0000000000009010         db  0xec ; '.'
0000000000009011         db  0xa8 ; '.'
0000000000009012         db  0xff ; '.'
0000000000009013         db  0xff ; '.'
0000000000009014         db  0xec ; '.'
0000000000009015         db  0xa8 ; '.'
0000000000009016         db  0xff ; '.'
0000000000009017         db  0xff ; '.'
0000000000009018         db  0xec ; '.'
0000000000009019         db  0xa8 ; '.'
000000000000901a         db  0xff ; '.'
000000000000901b         db  0xff ; '.'
000000000000901c         db  0xec ; '.'
000000000000901d         db  0xa8 ; '.'
000000000000901e         db  0xff ; '.'
000000000000901f         db  0xff ; '.'
0000000000009020         db  0xec ; '.'
0000000000009021         db  0xa8 ; '.'
0000000000009022         db  0xff ; '.'
0000000000009023         db  0xff ; '.'
0000000000009024         db  0xec ; '.'
0000000000009025         db  0xa8 ; '.'
0000000000009026         db  0xff ; '.'
0000000000009027         db  0xff ; '.'
0000000000009028         db  0xec ; '.'
0000000000009029         db  0xa8 ; '.'
000000000000902a         db  0xff ; '.'
000000000000902b         db  0xff ; '.'
000000000000902c         db  0xec ; '.'
000000000000902d         db  0xa8 ; '.'
000000000000902e         db  0xff ; '.'
000000000000902f         db  0xff ; '.'
0000000000009030         db  0xec ; '.'
0000000000009031         db  0xa8 ; '.'
0000000000009032         db  0xff ; '.'
0000000000009033         db  0xff ; '.'
0000000000009034         db  0xec ; '.'
0000000000009035         db  0xa8 ; '.'
0000000000009036         db  0xff ; '.'
0000000000009037         db  0xff ; '.'
0000000000009038         db  0xec ; '.'
0000000000009039         db  0xa8 ; '.'
000000000000903a         db  0xff ; '.'
000000000000903b         db  0xff ; '.'
000000000000903c         db  0xec ; '.'
000000000000903d         db  0xa8 ; '.'
000000000000903e         db  0xff ; '.'
000000000000903f         db  0xff ; '.'
0000000000009040         db  0xec ; '.'
0000000000009041         db  0xa8 ; '.'
0000000000009042         db  0xff ; '.'
0000000000009043         db  0xff ; '.'
0000000000009044         db  0xec ; '.'
0000000000009045         db  0xa8 ; '.'
0000000000009046         db  0xff ; '.'
0000000000009047         db  0xff ; '.'
0000000000009048         db  0xec ; '.'
0000000000009049         db  0xa8 ; '.'
000000000000904a         db  0xff ; '.'
000000000000904b         db  0xff ; '.'
000000000000904c         db  0x94 ; '.'
000000000000904d         db  0xa8 ; '.'
000000000000904e         db  0xff ; '.'
000000000000904f         db  0xff ; '.'
0000000000009050         db  0x84 ; '.'
0000000000009051         db  0xa8 ; '.'
0000000000009052         db  0xff ; '.'
0000000000009053         db  0xff ; '.'
0000000000009054         db  0x84 ; '.'
0000000000009055         db  0xa8 ; '.'
0000000000009056         db  0xff ; '.'
0000000000009057         db  0xff ; '.'
0000000000009058         db  0x54 ; 'T'
0000000000009059         db  0xa8 ; '.'
000000000000905a         db  0xff ; '.'
000000000000905b         db  0xff ; '.'
000000000000905c         db  0x84 ; '.'
000000000000905d         db  0xa8 ; '.'
000000000000905e         db  0xff ; '.'
000000000000905f         db  0xff ; '.'
0000000000009060         db  0x2c ; ','
0000000000009061         db  0xa8 ; '.'
0000000000009062         db  0xff ; '.'
0000000000009063         db  0xff ; '.'
0000000000009064         db  0x84 ; '.'
0000000000009065         db  0xa8 ; '.'
0000000000009066         db  0xff ; '.'
0000000000009067         db  0xff ; '.'
0000000000009068         db  0xe7 ; '.'
0000000000009069         db  0xa6 ; '.'
000000000000906a         db  0xff ; '.'
000000000000906b         db  0xff ; '.'
000000000000906c         db  0x84 ; '.'
000000000000906d         db  0xa8 ; '.'
000000000000906e         db  0xff ; '.'
000000000000906f         db  0xff ; '.'
0000000000009070         db  0x84 ; '.'
0000000000009071         db  0xa8 ; '.'
0000000000009072         db  0xff ; '.'
0000000000009073         db  0xff ; '.'
0000000000009074         db  0x84 ; '.'
0000000000009075         db  0xa8 ; '.'
0000000000009076         db  0xff ; '.'
0000000000009077         db  0xff ; '.'
0000000000009078         db  0x2c ; ','
0000000000009079         db  0xa8 ; '.'
000000000000907a         db  0xff ; '.'
000000000000907b         db  0xff ; '.'
000000000000907c         db  0x2c ; ','
000000000000907d         db  0xa8 ; '.'
000000000000907e         db  0xff ; '.'
000000000000907f         db  0xff ; '.'
0000000000009080         db  0x2c ; ','
0000000000009081         db  0xa8 ; '.'
0000000000009082         db  0xff ; '.'
0000000000009083         db  0xff ; '.'
0000000000009084         db  0x2c ; ','
0000000000009085         db  0xa8 ; '.'
0000000000009086         db  0xff ; '.'
0000000000009087         db  0xff ; '.'
0000000000009088         db  0x2c ; ','
0000000000009089         db  0xa8 ; '.'
000000000000908a         db  0xff ; '.'
000000000000908b         db  0xff ; '.'
000000000000908c         db  0x2c ; ','
000000000000908d         db  0xa8 ; '.'
000000000000908e         db  0xff ; '.'
000000000000908f         db  0xff ; '.'
0000000000009090         db  0x2c ; ','
0000000000009091         db  0xa8 ; '.'
0000000000009092         db  0xff ; '.'
0000000000009093         db  0xff ; '.'
0000000000009094         db  0x2c ; ','
0000000000009095         db  0xa8 ; '.'
0000000000009096         db  0xff ; '.'
0000000000009097         db  0xff ; '.'
0000000000009098         db  0x2c ; ','
0000000000009099         db  0xa8 ; '.'
000000000000909a         db  0xff ; '.'
000000000000909b         db  0xff ; '.'
000000000000909c         db  0x2c ; ','
000000000000909d         db  0xa8 ; '.'
000000000000909e         db  0xff ; '.'
000000000000909f         db  0xff ; '.'
00000000000090a0         db  0x2c ; ','
00000000000090a1         db  0xa8 ; '.'
00000000000090a2         db  0xff ; '.'
00000000000090a3         db  0xff ; '.'
00000000000090a4         db  0x2c ; ','
00000000000090a5         db  0xa8 ; '.'
00000000000090a6         db  0xff ; '.'
00000000000090a7         db  0xff ; '.'
00000000000090a8         db  0x2c ; ','
00000000000090a9         db  0xa8 ; '.'
00000000000090aa         db  0xff ; '.'
00000000000090ab         db  0xff ; '.'
00000000000090ac         db  0x2c ; ','
00000000000090ad         db  0xa8 ; '.'
00000000000090ae         db  0xff ; '.'
00000000000090af         db  0xff ; '.'
00000000000090b0         db  0x2c ; ','
00000000000090b1         db  0xa8 ; '.'
00000000000090b2         db  0xff ; '.'
00000000000090b3         db  0xff ; '.'
00000000000090b4         db  0x2c ; ','
00000000000090b5         db  0xa8 ; '.'
00000000000090b6         db  0xff ; '.'
00000000000090b7         db  0xff ; '.'
00000000000090b8         db  0x84 ; '.'
00000000000090b9         db  0xa8 ; '.'
00000000000090ba         db  0xff ; '.'
00000000000090bb         db  0xff ; '.'
00000000000090bc         db  0x84 ; '.'
00000000000090bd         db  0xa8 ; '.'
00000000000090be         db  0xff ; '.'
00000000000090bf         db  0xff ; '.'
00000000000090c0         db  0x84 ; '.'
00000000000090c1         db  0xa8 ; '.'
00000000000090c2         db  0xff ; '.'
00000000000090c3         db  0xff ; '.'
00000000000090c4         db  0x84 ; '.'
00000000000090c5         db  0xa8 ; '.'
00000000000090c6         db  0xff ; '.'
00000000000090c7         db  0xff ; '.'
00000000000090c8         db  0xb7 ; '.'
00000000000090c9         db  0xa6 ; '.'
00000000000090ca         db  0xff ; '.'
00000000000090cb         db  0xff ; '.'
00000000000090cc         db  0xec ; '.'
00000000000090cd         db  0xa8 ; '.'
00000000000090ce         db  0xff ; '.'
00000000000090cf         db  0xff ; '.'
00000000000090d0         db  0x2c ; ','
00000000000090d1         db  0xa8 ; '.'
00000000000090d2         db  0xff ; '.'
00000000000090d3         db  0xff ; '.'
00000000000090d4         db  0x2c ; ','
00000000000090d5         db  0xa8 ; '.'
00000000000090d6         db  0xff ; '.'
00000000000090d7         db  0xff ; '.'
00000000000090d8         db  0x2c ; ','
00000000000090d9         db  0xa8 ; '.'
00000000000090da         db  0xff ; '.'
00000000000090db         db  0xff ; '.'
00000000000090dc         db  0x2c ; ','
00000000000090dd         db  0xa8 ; '.'
00000000000090de         db  0xff ; '.'
00000000000090df         db  0xff ; '.'
00000000000090e0         db  0x2c ; ','
00000000000090e1         db  0xa8 ; '.'
00000000000090e2         db  0xff ; '.'
00000000000090e3         db  0xff ; '.'
00000000000090e4         db  0x2c ; ','
00000000000090e5         db  0xa8 ; '.'
00000000000090e6         db  0xff ; '.'
00000000000090e7         db  0xff ; '.'
00000000000090e8         db  0x2c ; ','
00000000000090e9         db  0xa8 ; '.'
00000000000090ea         db  0xff ; '.'
00000000000090eb         db  0xff ; '.'
00000000000090ec         db  0x2c ; ','
00000000000090ed         db  0xa8 ; '.'
00000000000090ee         db  0xff ; '.'
00000000000090ef         db  0xff ; '.'
00000000000090f0         db  0x2c ; ','
00000000000090f1         db  0xa8 ; '.'
00000000000090f2         db  0xff ; '.'
00000000000090f3         db  0xff ; '.'
00000000000090f4         db  0x2c ; ','
00000000000090f5         db  0xa8 ; '.'
00000000000090f6         db  0xff ; '.'
00000000000090f7         db  0xff ; '.'
00000000000090f8         db  0x2c ; ','
00000000000090f9         db  0xa8 ; '.'
00000000000090fa         db  0xff ; '.'
00000000000090fb         db  0xff ; '.'
00000000000090fc         db  0x2c ; ','
00000000000090fd         db  0xa8 ; '.'
00000000000090fe         db  0xff ; '.'
00000000000090ff         db  0xff ; '.'
0000000000009100         db  0x2c ; ','
0000000000009101         db  0xa8 ; '.'
0000000000009102         db  0xff ; '.'
0000000000009103         db  0xff ; '.'
0000000000009104         db  0x2c ; ','
0000000000009105         db  0xa8 ; '.'
0000000000009106         db  0xff ; '.'
0000000000009107         db  0xff ; '.'
0000000000009108         db  0x2c ; ','
0000000000009109         db  0xa8 ; '.'
000000000000910a         db  0xff ; '.'
000000000000910b         db  0xff ; '.'
000000000000910c         db  0x2c ; ','
000000000000910d         db  0xa8 ; '.'
000000000000910e         db  0xff ; '.'
000000000000910f         db  0xff ; '.'
0000000000009110         db  0x2c ; ','
0000000000009111         db  0xa8 ; '.'
0000000000009112         db  0xff ; '.'
0000000000009113         db  0xff ; '.'
0000000000009114         db  0x2c ; ','
0000000000009115         db  0xa8 ; '.'
0000000000009116         db  0xff ; '.'
0000000000009117         db  0xff ; '.'
0000000000009118         db  0x2c ; ','
0000000000009119         db  0xa8 ; '.'
000000000000911a         db  0xff ; '.'
000000000000911b         db  0xff ; '.'
000000000000911c         db  0x2c ; ','
000000000000911d         db  0xa8 ; '.'
000000000000911e         db  0xff ; '.'
000000000000911f         db  0xff ; '.'
0000000000009120         db  0x2c ; ','
0000000000009121         db  0xa8 ; '.'
0000000000009122         db  0xff ; '.'
0000000000009123         db  0xff ; '.'
0000000000009124         db  0x2c ; ','
0000000000009125         db  0xa8 ; '.'
0000000000009126         db  0xff ; '.'
0000000000009127         db  0xff ; '.'
0000000000009128         db  0x2c ; ','
0000000000009129         db  0xa8 ; '.'
000000000000912a         db  0xff ; '.'
000000000000912b         db  0xff ; '.'
000000000000912c         db  0x2c ; ','
000000000000912d         db  0xa8 ; '.'
000000000000912e         db  0xff ; '.'
000000000000912f         db  0xff ; '.'
0000000000009130         db  0x2c ; ','
0000000000009131         db  0xa8 ; '.'
0000000000009132         db  0xff ; '.'
0000000000009133         db  0xff ; '.'
0000000000009134         db  0x2c ; ','
0000000000009135         db  0xa8 ; '.'
0000000000009136         db  0xff ; '.'
0000000000009137         db  0xff ; '.'
0000000000009138         db  0x84 ; '.'
0000000000009139         db  0xa8 ; '.'
000000000000913a         db  0xff ; '.'
000000000000913b         db  0xff ; '.'
000000000000913c         db  0x5c ; '\'
000000000000913d         db  0xa7 ; '.'
000000000000913e         db  0xff ; '.'
000000000000913f         db  0xff ; '.'
0000000000009140         db  0x2c ; ','
0000000000009141         db  0xa8 ; '.'
0000000000009142         db  0xff ; '.'
0000000000009143         db  0xff ; '.'
0000000000009144         db  0x84 ; '.'
0000000000009145         db  0xa8 ; '.'
0000000000009146         db  0xff ; '.'
0000000000009147         db  0xff ; '.'
0000000000009148         db  0x2c ; ','
0000000000009149         db  0xa8 ; '.'
000000000000914a         db  0xff ; '.'
000000000000914b         db  0xff ; '.'
000000000000914c         db  0x84 ; '.'
000000000000914d         db  0xa8 ; '.'
000000000000914e         db  0xff ; '.'
000000000000914f         db  0xff ; '.'
0000000000009150         db  0x2c ; ','
0000000000009151         db  0xa8 ; '.'
0000000000009152         db  0xff ; '.'
0000000000009153         db  0xff ; '.'
0000000000009154         db  0x2c ; ','
0000000000009155         db  0xa8 ; '.'
0000000000009156         db  0xff ; '.'
0000000000009157         db  0xff ; '.'
0000000000009158         db  0x2c ; ','
0000000000009159         db  0xa8 ; '.'
000000000000915a         db  0xff ; '.'
000000000000915b         db  0xff ; '.'
000000000000915c         db  0x2c ; ','
000000000000915d         db  0xa8 ; '.'
000000000000915e         db  0xff ; '.'
000000000000915f         db  0xff ; '.'
0000000000009160         db  0x2c ; ','
0000000000009161         db  0xa8 ; '.'
0000000000009162         db  0xff ; '.'
0000000000009163         db  0xff ; '.'
0000000000009164         db  0x2c ; ','
0000000000009165         db  0xa8 ; '.'
0000000000009166         db  0xff ; '.'
0000000000009167         db  0xff ; '.'
0000000000009168         db  0x2c ; ','
0000000000009169         db  0xa8 ; '.'
000000000000916a         db  0xff ; '.'
000000000000916b         db  0xff ; '.'
000000000000916c         db  0x2c ; ','
000000000000916d         db  0xa8 ; '.'
000000000000916e         db  0xff ; '.'
000000000000916f         db  0xff ; '.'
0000000000009170         db  0x2c ; ','
0000000000009171         db  0xa8 ; '.'
0000000000009172         db  0xff ; '.'
0000000000009173         db  0xff ; '.'
0000000000009174         db  0x2c ; ','
0000000000009175         db  0xa8 ; '.'
0000000000009176         db  0xff ; '.'
0000000000009177         db  0xff ; '.'
0000000000009178         db  0x2c ; ','
0000000000009179         db  0xa8 ; '.'
000000000000917a         db  0xff ; '.'
000000000000917b         db  0xff ; '.'
000000000000917c         db  0x2c ; ','
000000000000917d         db  0xa8 ; '.'
000000000000917e         db  0xff ; '.'
000000000000917f         db  0xff ; '.'
0000000000009180         db  0x2c ; ','
0000000000009181         db  0xa8 ; '.'
0000000000009182         db  0xff ; '.'
0000000000009183         db  0xff ; '.'
0000000000009184         db  0x2c ; ','
0000000000009185         db  0xa8 ; '.'
0000000000009186         db  0xff ; '.'
0000000000009187         db  0xff ; '.'
0000000000009188         db  0x2c ; ','
0000000000009189         db  0xa8 ; '.'
000000000000918a         db  0xff ; '.'
000000000000918b         db  0xff ; '.'
000000000000918c         db  0x2c ; ','
000000000000918d         db  0xa8 ; '.'
000000000000918e         db  0xff ; '.'
000000000000918f         db  0xff ; '.'
0000000000009190         db  0x2c ; ','
0000000000009191         db  0xa8 ; '.'
0000000000009192         db  0xff ; '.'
0000000000009193         db  0xff ; '.'
0000000000009194         db  0x2c ; ','
0000000000009195         db  0xa8 ; '.'
0000000000009196         db  0xff ; '.'
0000000000009197         db  0xff ; '.'
0000000000009198         db  0x2c ; ','
0000000000009199         db  0xa8 ; '.'
000000000000919a         db  0xff ; '.'
000000000000919b         db  0xff ; '.'
000000000000919c         db  0x2c ; ','
000000000000919d         db  0xa8 ; '.'
000000000000919e         db  0xff ; '.'
000000000000919f         db  0xff ; '.'
00000000000091a0         db  0x2c ; ','
00000000000091a1         db  0xa8 ; '.'
00000000000091a2         db  0xff ; '.'
00000000000091a3         db  0xff ; '.'
00000000000091a4         db  0x2c ; ','
00000000000091a5         db  0xa8 ; '.'
00000000000091a6         db  0xff ; '.'
00000000000091a7         db  0xff ; '.'
00000000000091a8         db  0x2c ; ','
00000000000091a9         db  0xa8 ; '.'
00000000000091aa         db  0xff ; '.'
00000000000091ab         db  0xff ; '.'
00000000000091ac         db  0x2c ; ','
00000000000091ad         db  0xa8 ; '.'
00000000000091ae         db  0xff ; '.'
00000000000091af         db  0xff ; '.'
00000000000091b0         db  0x2c ; ','
00000000000091b1         db  0xa8 ; '.'
00000000000091b2         db  0xff ; '.'
00000000000091b3         db  0xff ; '.'
00000000000091b4         db  0x2c ; ','
00000000000091b5         db  0xa8 ; '.'
00000000000091b6         db  0xff ; '.'
00000000000091b7         db  0xff ; '.'
00000000000091b8         db  0xe7 ; '.'
00000000000091b9         db  0xa5 ; '.'
00000000000091ba         db  0xff ; '.'
00000000000091bb         db  0xff ; '.'
00000000000091bc         db  0x84 ; '.'
00000000000091bd         db  0xa8 ; '.'
00000000000091be         db  0xff ; '.'
00000000000091bf         db  0xff ; '.'
00000000000091c0         db  0xe7 ; '.'
00000000000091c1         db  0xa5 ; '.'
00000000000091c2         db  0xff ; '.'
00000000000091c3         db  0xff ; '.'
00000000000091c4         db  0x54 ; 'T'
00000000000091c5         db  0xa8 ; '.'
00000000000091c6         db  0xff ; '.'
00000000000091c7         db  0xff ; '.'
00000000000091c8         db  0xd8 ; '.'                                         ; DATA XREF=sub_38a0+137
00000000000091c9         db  0xa7 ; '.'
00000000000091ca         db  0xff ; '.'
00000000000091cb         db  0xff ; '.'
00000000000091cc         db  0xe8 ; '.'
00000000000091cd         db  0xa6 ; '.'
00000000000091ce         db  0xff ; '.'
00000000000091cf         db  0xff ; '.'
00000000000091d0         db  0xe8 ; '.'
00000000000091d1         db  0xa6 ; '.'
00000000000091d2         db  0xff ; '.'
00000000000091d3         db  0xff ; '.'
00000000000091d4         db  0xe8 ; '.'
00000000000091d5         db  0xa6 ; '.'
00000000000091d6         db  0xff ; '.'
00000000000091d7         db  0xff ; '.'
00000000000091d8         db  0xe8 ; '.'
00000000000091d9         db  0xa6 ; '.'
00000000000091da         db  0xff ; '.'
00000000000091db         db  0xff ; '.'
00000000000091dc         db  0xe8 ; '.'
00000000000091dd         db  0xa6 ; '.'
00000000000091de         db  0xff ; '.'
00000000000091df         db  0xff ; '.'
00000000000091e0         db  0xe8 ; '.'
00000000000091e1         db  0xa6 ; '.'
00000000000091e2         db  0xff ; '.'
00000000000091e3         db  0xff ; '.'
00000000000091e4         db  0xc8 ; '.'
00000000000091e5         db  0xa7 ; '.'
00000000000091e6         db  0xff ; '.'
00000000000091e7         db  0xff ; '.'
00000000000091e8         db  0x18 ; '.'
00000000000091e9         db  0xa9 ; '.'
00000000000091ea         db  0xff ; '.'
00000000000091eb         db  0xff ; '.'
00000000000091ec         db  0x00 ; '.'
00000000000091ed         db  0xa9 ; '.'
00000000000091ee         db  0xff ; '.'
00000000000091ef         db  0xff ; '.'
00000000000091f0         db  0xb0 ; '.'
00000000000091f1         db  0xa7 ; '.'
00000000000091f2         db  0xff ; '.'
00000000000091f3         db  0xff ; '.'
00000000000091f4         db  0xf0 ; '.'
00000000000091f5         db  0xa8 ; '.'
00000000000091f6         db  0xff ; '.'
00000000000091f7         db  0xff ; '.'
00000000000091f8         db  0x98 ; '.'
00000000000091f9         db  0xa7 ; '.'
00000000000091fa         db  0xff ; '.'
00000000000091fb         db  0xff ; '.'
00000000000091fc         db  0xd8 ; '.'
00000000000091fd         db  0xa8 ; '.'
00000000000091fe         db  0xff ; '.'
00000000000091ff         db  0xff ; '.'
0000000000009200         db  0xe8 ; '.'
0000000000009201         db  0xa6 ; '.'
0000000000009202         db  0xff ; '.'
0000000000009203         db  0xff ; '.'
0000000000009204         db  0xe8 ; '.'
0000000000009205         db  0xa6 ; '.'
0000000000009206         db  0xff ; '.'
0000000000009207         db  0xff ; '.'
0000000000009208         db  0xe8 ; '.'
0000000000009209         db  0xa6 ; '.'
000000000000920a         db  0xff ; '.'
000000000000920b         db  0xff ; '.'
000000000000920c         db  0xe8 ; '.'
000000000000920d         db  0xa6 ; '.'
000000000000920e         db  0xff ; '.'
000000000000920f         db  0xff ; '.'
0000000000009210         db  0xe8 ; '.'
0000000000009211         db  0xa6 ; '.'
0000000000009212         db  0xff ; '.'
0000000000009213         db  0xff ; '.'
0000000000009214         db  0xe8 ; '.'
0000000000009215         db  0xa6 ; '.'
0000000000009216         db  0xff ; '.'
0000000000009217         db  0xff ; '.'
0000000000009218         db  0xe8 ; '.'
0000000000009219         db  0xa6 ; '.'
000000000000921a         db  0xff ; '.'
000000000000921b         db  0xff ; '.'
000000000000921c         db  0xe8 ; '.'
000000000000921d         db  0xa6 ; '.'
000000000000921e         db  0xff ; '.'
000000000000921f         db  0xff ; '.'
0000000000009220         db  0xe8 ; '.'
0000000000009221         db  0xa6 ; '.'
0000000000009222         db  0xff ; '.'
0000000000009223         db  0xff ; '.'
0000000000009224         db  0xe8 ; '.'
0000000000009225         db  0xa6 ; '.'
0000000000009226         db  0xff ; '.'
0000000000009227         db  0xff ; '.'
0000000000009228         db  0xe8 ; '.'
0000000000009229         db  0xa6 ; '.'
000000000000922a         db  0xff ; '.'
000000000000922b         db  0xff ; '.'
000000000000922c         db  0xe8 ; '.'
000000000000922d         db  0xa6 ; '.'
000000000000922e         db  0xff ; '.'
000000000000922f         db  0xff ; '.'
0000000000009230         db  0xe8 ; '.'
0000000000009231         db  0xa6 ; '.'
0000000000009232         db  0xff ; '.'
0000000000009233         db  0xff ; '.'
0000000000009234         db  0xe8 ; '.'
0000000000009235         db  0xa6 ; '.'
0000000000009236         db  0xff ; '.'
0000000000009237         db  0xff ; '.'
0000000000009238         db  0xe8 ; '.'
0000000000009239         db  0xa6 ; '.'
000000000000923a         db  0xff ; '.'
000000000000923b         db  0xff ; '.'
000000000000923c         db  0xe8 ; '.'
000000000000923d         db  0xa6 ; '.'
000000000000923e         db  0xff ; '.'
000000000000923f         db  0xff ; '.'
0000000000009240         db  0xe8 ; '.'
0000000000009241         db  0xa6 ; '.'
0000000000009242         db  0xff ; '.'
0000000000009243         db  0xff ; '.'
0000000000009244         db  0xe8 ; '.'
0000000000009245         db  0xa6 ; '.'
0000000000009246         db  0xff ; '.'
0000000000009247         db  0xff ; '.'
0000000000009248         db  0xc0 ; '.'
0000000000009249         db  0xa8 ; '.'
000000000000924a         db  0xff ; '.'
000000000000924b         db  0xff ; '.'
000000000000924c         db  0xa8 ; '.'
000000000000924d         db  0xa8 ; '.'
000000000000924e         db  0xff ; '.'
000000000000924f         db  0xff ; '.'
0000000000009250         db  0xa8 ; '.'
0000000000009251         db  0xa8 ; '.'
0000000000009252         db  0xff ; '.'
0000000000009253         db  0xff ; '.'
0000000000009254         db  0x90 ; '.'
0000000000009255         db  0xa8 ; '.'
0000000000009256         db  0xff ; '.'
0000000000009257         db  0xff ; '.'
0000000000009258         db  0xa8 ; '.'
0000000000009259         db  0xa8 ; '.'
000000000000925a         db  0xff ; '.'
000000000000925b         db  0xff ; '.'
000000000000925c         db  0x78 ; 'x'
000000000000925d         db  0xa8 ; '.'
000000000000925e         db  0xff ; '.'
000000000000925f         db  0xff ; '.'
0000000000009260         db  0xa8 ; '.'
0000000000009261         db  0xa8 ; '.'
0000000000009262         db  0xff ; '.'
0000000000009263         db  0xff ; '.'
0000000000009264         db  0xe8 ; '.'
0000000000009265         db  0xa4 ; '.'
0000000000009266         db  0xff ; '.'
0000000000009267         db  0xff ; '.'
0000000000009268         db  0xa8 ; '.'
0000000000009269         db  0xa8 ; '.'
000000000000926a         db  0xff ; '.'
000000000000926b         db  0xff ; '.'
000000000000926c         db  0xa8 ; '.'
000000000000926d         db  0xa8 ; '.'
000000000000926e         db  0xff ; '.'
000000000000926f         db  0xff ; '.'
0000000000009270         db  0xa8 ; '.'
0000000000009271         db  0xa8 ; '.'
0000000000009272         db  0xff ; '.'
0000000000009273         db  0xff ; '.'
0000000000009274         db  0x78 ; 'x'
0000000000009275         db  0xa8 ; '.'
0000000000009276         db  0xff ; '.'
0000000000009277         db  0xff ; '.'
0000000000009278         db  0x78 ; 'x'
0000000000009279         db  0xa8 ; '.'
000000000000927a         db  0xff ; '.'
000000000000927b         db  0xff ; '.'
000000000000927c         db  0x78 ; 'x'
000000000000927d         db  0xa8 ; '.'
000000000000927e         db  0xff ; '.'
000000000000927f         db  0xff ; '.'
0000000000009280         db  0x78 ; 'x'
0000000000009281         db  0xa8 ; '.'
0000000000009282         db  0xff ; '.'
0000000000009283         db  0xff ; '.'
0000000000009284         db  0x78 ; 'x'
0000000000009285         db  0xa8 ; '.'
0000000000009286         db  0xff ; '.'
0000000000009287         db  0xff ; '.'
0000000000009288         db  0x78 ; 'x'
0000000000009289         db  0xa8 ; '.'
000000000000928a         db  0xff ; '.'
000000000000928b         db  0xff ; '.'
000000000000928c         db  0x78 ; 'x'
000000000000928d         db  0xa8 ; '.'
000000000000928e         db  0xff ; '.'
000000000000928f         db  0xff ; '.'
0000000000009290         db  0x78 ; 'x'
0000000000009291         db  0xa8 ; '.'
0000000000009292         db  0xff ; '.'
0000000000009293         db  0xff ; '.'
0000000000009294         db  0x78 ; 'x'
0000000000009295         db  0xa8 ; '.'
0000000000009296         db  0xff ; '.'
0000000000009297         db  0xff ; '.'
0000000000009298         db  0x78 ; 'x'
0000000000009299         db  0xa8 ; '.'
000000000000929a         db  0xff ; '.'
000000000000929b         db  0xff ; '.'
000000000000929c         db  0x78 ; 'x'
000000000000929d         db  0xa8 ; '.'
000000000000929e         db  0xff ; '.'
000000000000929f         db  0xff ; '.'
00000000000092a0         db  0x78 ; 'x'
00000000000092a1         db  0xa8 ; '.'
00000000000092a2         db  0xff ; '.'
00000000000092a3         db  0xff ; '.'
00000000000092a4         db  0x78 ; 'x'
00000000000092a5         db  0xa8 ; '.'
00000000000092a6         db  0xff ; '.'
00000000000092a7         db  0xff ; '.'
00000000000092a8         db  0x78 ; 'x'
00000000000092a9         db  0xa8 ; '.'
00000000000092aa         db  0xff ; '.'
00000000000092ab         db  0xff ; '.'
00000000000092ac         db  0x78 ; 'x'
00000000000092ad         db  0xa8 ; '.'
00000000000092ae         db  0xff ; '.'
00000000000092af         db  0xff ; '.'
00000000000092b0         db  0x78 ; 'x'
00000000000092b1         db  0xa8 ; '.'
00000000000092b2         db  0xff ; '.'
00000000000092b3         db  0xff ; '.'
00000000000092b4         db  0xa8 ; '.'
00000000000092b5         db  0xa8 ; '.'
00000000000092b6         db  0xff ; '.'
00000000000092b7         db  0xff ; '.'
00000000000092b8         db  0xa8 ; '.'
00000000000092b9         db  0xa8 ; '.'
00000000000092ba         db  0xff ; '.'
00000000000092bb         db  0xff ; '.'
00000000000092bc         db  0xa8 ; '.'
00000000000092bd         db  0xa8 ; '.'
00000000000092be         db  0xff ; '.'
00000000000092bf         db  0xff ; '.'
00000000000092c0         db  0xa8 ; '.'
00000000000092c1         db  0xa8 ; '.'
00000000000092c2         db  0xff ; '.'
00000000000092c3         db  0xff ; '.'
00000000000092c4         db  0xb8 ; '.'
00000000000092c5         db  0xa4 ; '.'
00000000000092c6         db  0xff ; '.'
00000000000092c7         db  0xff ; '.'
00000000000092c8         db  0xe8 ; '.'
00000000000092c9         db  0xa6 ; '.'
00000000000092ca         db  0xff ; '.'
00000000000092cb         db  0xff ; '.'
00000000000092cc         db  0x78 ; 'x'
00000000000092cd         db  0xa8 ; '.'
00000000000092ce         db  0xff ; '.'
00000000000092cf         db  0xff ; '.'
00000000000092d0         db  0x78 ; 'x'
00000000000092d1         db  0xa8 ; '.'
00000000000092d2         db  0xff ; '.'
00000000000092d3         db  0xff ; '.'
00000000000092d4         db  0x78 ; 'x'
00000000000092d5         db  0xa8 ; '.'
00000000000092d6         db  0xff ; '.'
00000000000092d7         db  0xff ; '.'
00000000000092d8         db  0x78 ; 'x'
00000000000092d9         db  0xa8 ; '.'
00000000000092da         db  0xff ; '.'
00000000000092db         db  0xff ; '.'
00000000000092dc         db  0x78 ; 'x'
00000000000092dd         db  0xa8 ; '.'
00000000000092de         db  0xff ; '.'
00000000000092df         db  0xff ; '.'
00000000000092e0         db  0x78 ; 'x'
00000000000092e1         db  0xa8 ; '.'
00000000000092e2         db  0xff ; '.'
00000000000092e3         db  0xff ; '.'
00000000000092e4         db  0x78 ; 'x'
00000000000092e5         db  0xa8 ; '.'
00000000000092e6         db  0xff ; '.'
00000000000092e7         db  0xff ; '.'
00000000000092e8         db  0x78 ; 'x'
00000000000092e9         db  0xa8 ; '.'
00000000000092ea         db  0xff ; '.'
00000000000092eb         db  0xff ; '.'
00000000000092ec         db  0x78 ; 'x'
00000000000092ed         db  0xa8 ; '.'
00000000000092ee         db  0xff ; '.'
00000000000092ef         db  0xff ; '.'
00000000000092f0         db  0x78 ; 'x'
00000000000092f1         db  0xa8 ; '.'
00000000000092f2         db  0xff ; '.'
00000000000092f3         db  0xff ; '.'
00000000000092f4         db  0x78 ; 'x'
00000000000092f5         db  0xa8 ; '.'
00000000000092f6         db  0xff ; '.'
00000000000092f7         db  0xff ; '.'
00000000000092f8         db  0x78 ; 'x'
00000000000092f9         db  0xa8 ; '.'
00000000000092fa         db  0xff ; '.'
00000000000092fb         db  0xff ; '.'
00000000000092fc         db  0x78 ; 'x'
00000000000092fd         db  0xa8 ; '.'
00000000000092fe         db  0xff ; '.'
00000000000092ff         db  0xff ; '.'
0000000000009300         db  0x78 ; 'x'
0000000000009301         db  0xa8 ; '.'
0000000000009302         db  0xff ; '.'
0000000000009303         db  0xff ; '.'
0000000000009304         db  0x78 ; 'x'
0000000000009305         db  0xa8 ; '.'
0000000000009306         db  0xff ; '.'
0000000000009307         db  0xff ; '.'
0000000000009308         db  0x78 ; 'x'
0000000000009309         db  0xa8 ; '.'
000000000000930a         db  0xff ; '.'
000000000000930b         db  0xff ; '.'
000000000000930c         db  0x78 ; 'x'
000000000000930d         db  0xa8 ; '.'
000000000000930e         db  0xff ; '.'
000000000000930f         db  0xff ; '.'
0000000000009310         db  0x78 ; 'x'
0000000000009311         db  0xa8 ; '.'
0000000000009312         db  0xff ; '.'
0000000000009313         db  0xff ; '.'
0000000000009314         db  0x78 ; 'x'
0000000000009315         db  0xa8 ; '.'
0000000000009316         db  0xff ; '.'
0000000000009317         db  0xff ; '.'
0000000000009318         db  0x78 ; 'x'
0000000000009319         db  0xa8 ; '.'
000000000000931a         db  0xff ; '.'
000000000000931b         db  0xff ; '.'
000000000000931c         db  0x78 ; 'x'
000000000000931d         db  0xa8 ; '.'
000000000000931e         db  0xff ; '.'
000000000000931f         db  0xff ; '.'
0000000000009320         db  0x78 ; 'x'
0000000000009321         db  0xa8 ; '.'
0000000000009322         db  0xff ; '.'
0000000000009323         db  0xff ; '.'
0000000000009324         db  0x78 ; 'x'
0000000000009325         db  0xa8 ; '.'
0000000000009326         db  0xff ; '.'
0000000000009327         db  0xff ; '.'
0000000000009328         db  0x78 ; 'x'
0000000000009329         db  0xa8 ; '.'
000000000000932a         db  0xff ; '.'
000000000000932b         db  0xff ; '.'
000000000000932c         db  0x78 ; 'x'
000000000000932d         db  0xa8 ; '.'
000000000000932e         db  0xff ; '.'
000000000000932f         db  0xff ; '.'
0000000000009330         db  0x78 ; 'x'
0000000000009331         db  0xa8 ; '.'
0000000000009332         db  0xff ; '.'
0000000000009333         db  0xff ; '.'
0000000000009334         db  0xa8 ; '.'
0000000000009335         db  0xa8 ; '.'
0000000000009336         db  0xff ; '.'
0000000000009337         db  0xff ; '.'
0000000000009338         db  0x78 ; 'x'
0000000000009339         db  0xa7 ; '.'
000000000000933a         db  0xff ; '.'
000000000000933b         db  0xff ; '.'
000000000000933c         db  0x78 ; 'x'
000000000000933d         db  0xa8 ; '.'
000000000000933e         db  0xff ; '.'
000000000000933f         db  0xff ; '.'
0000000000009340         db  0xa8 ; '.'
0000000000009341         db  0xa8 ; '.'
0000000000009342         db  0xff ; '.'
0000000000009343         db  0xff ; '.'
0000000000009344         db  0x78 ; 'x'
0000000000009345         db  0xa8 ; '.'
0000000000009346         db  0xff ; '.'
0000000000009347         db  0xff ; '.'
0000000000009348         db  0xa8 ; '.'
0000000000009349         db  0xa8 ; '.'
000000000000934a         db  0xff ; '.'
000000000000934b         db  0xff ; '.'
000000000000934c         db  0x78 ; 'x'
000000000000934d         db  0xa8 ; '.'
000000000000934e         db  0xff ; '.'
000000000000934f         db  0xff ; '.'
0000000000009350         db  0x78 ; 'x'
0000000000009351         db  0xa8 ; '.'
0000000000009352         db  0xff ; '.'
0000000000009353         db  0xff ; '.'
0000000000009354         db  0x78 ; 'x'
0000000000009355         db  0xa8 ; '.'
0000000000009356         db  0xff ; '.'
0000000000009357         db  0xff ; '.'
0000000000009358         db  0x78 ; 'x'
0000000000009359         db  0xa8 ; '.'
000000000000935a         db  0xff ; '.'
000000000000935b         db  0xff ; '.'
000000000000935c         db  0x78 ; 'x'
000000000000935d         db  0xa8 ; '.'
000000000000935e         db  0xff ; '.'
000000000000935f         db  0xff ; '.'
0000000000009360         db  0x78 ; 'x'
0000000000009361         db  0xa8 ; '.'
0000000000009362         db  0xff ; '.'
0000000000009363         db  0xff ; '.'
0000000000009364         db  0x78 ; 'x'
0000000000009365         db  0xa8 ; '.'
0000000000009366         db  0xff ; '.'
0000000000009367         db  0xff ; '.'
0000000000009368         db  0x78 ; 'x'
0000000000009369         db  0xa8 ; '.'
000000000000936a         db  0xff ; '.'
000000000000936b         db  0xff ; '.'
000000000000936c         db  0x78 ; 'x'
000000000000936d         db  0xa8 ; '.'
000000000000936e         db  0xff ; '.'
000000000000936f         db  0xff ; '.'
0000000000009370         db  0x78 ; 'x'
0000000000009371         db  0xa8 ; '.'
0000000000009372         db  0xff ; '.'
0000000000009373         db  0xff ; '.'
0000000000009374         db  0x78 ; 'x'
0000000000009375         db  0xa8 ; '.'
0000000000009376         db  0xff ; '.'
0000000000009377         db  0xff ; '.'
0000000000009378         db  0x78 ; 'x'
0000000000009379         db  0xa8 ; '.'
000000000000937a         db  0xff ; '.'
000000000000937b         db  0xff ; '.'
000000000000937c         db  0x78 ; 'x'
000000000000937d         db  0xa8 ; '.'
000000000000937e         db  0xff ; '.'
000000000000937f         db  0xff ; '.'
0000000000009380         db  0x78 ; 'x'
0000000000009381         db  0xa8 ; '.'
0000000000009382         db  0xff ; '.'
0000000000009383         db  0xff ; '.'
0000000000009384         db  0x78 ; 'x'
0000000000009385         db  0xa8 ; '.'
0000000000009386         db  0xff ; '.'
0000000000009387         db  0xff ; '.'
0000000000009388         db  0x78 ; 'x'
0000000000009389         db  0xa8 ; '.'
000000000000938a         db  0xff ; '.'
000000000000938b         db  0xff ; '.'
000000000000938c         db  0x78 ; 'x'
000000000000938d         db  0xa8 ; '.'
000000000000938e         db  0xff ; '.'
000000000000938f         db  0xff ; '.'
0000000000009390         db  0x78 ; 'x'
0000000000009391         db  0xa8 ; '.'
0000000000009392         db  0xff ; '.'
0000000000009393         db  0xff ; '.'
0000000000009394         db  0x78 ; 'x'
0000000000009395         db  0xa8 ; '.'
0000000000009396         db  0xff ; '.'
0000000000009397         db  0xff ; '.'
0000000000009398         db  0x78 ; 'x'
0000000000009399         db  0xa8 ; '.'
000000000000939a         db  0xff ; '.'
000000000000939b         db  0xff ; '.'
000000000000939c         db  0x78 ; 'x'
000000000000939d         db  0xa8 ; '.'
000000000000939e         db  0xff ; '.'
000000000000939f         db  0xff ; '.'
00000000000093a0         db  0x78 ; 'x'
00000000000093a1         db  0xa8 ; '.'
00000000000093a2         db  0xff ; '.'
00000000000093a3         db  0xff ; '.'
00000000000093a4         db  0x78 ; 'x'
00000000000093a5         db  0xa8 ; '.'
00000000000093a6         db  0xff ; '.'
00000000000093a7         db  0xff ; '.'
00000000000093a8         db  0x78 ; 'x'
00000000000093a9         db  0xa8 ; '.'
00000000000093aa         db  0xff ; '.'
00000000000093ab         db  0xff ; '.'
00000000000093ac         db  0x78 ; 'x'
00000000000093ad         db  0xa8 ; '.'
00000000000093ae         db  0xff ; '.'
00000000000093af         db  0xff ; '.'
00000000000093b0         db  0x78 ; 'x'
00000000000093b1         db  0xa8 ; '.'
00000000000093b2         db  0xff ; '.'
00000000000093b3         db  0xff ; '.'
00000000000093b4         db  0xe8 ; '.'
00000000000093b5         db  0xa3 ; '.'
00000000000093b6         db  0xff ; '.'
00000000000093b7         db  0xff ; '.'
00000000000093b8         db  0xa8 ; '.'
00000000000093b9         db  0xa8 ; '.'
00000000000093ba         db  0xff ; '.'
00000000000093bb         db  0xff ; '.'
00000000000093bc         db  0xe8 ; '.'
00000000000093bd         db  0xa3 ; '.'
00000000000093be         db  0xff ; '.'
00000000000093bf         db  0xff ; '.'
00000000000093c0         db  0x90 ; '.'
00000000000093c1         db  0xa8 ; '.'
00000000000093c2         db  0xff ; '.'
00000000000093c3         db  0xff ; '.'
00000000000093c4         db  0x00 ; '.'
00000000000093c5         db  0x00 ; '.'
00000000000093c6         db  0x00 ; '.'
00000000000093c7         db  0x00 ; '.'
00000000000093c8         db  0x00 ; '.'
00000000000093c9         db  0x00 ; '.'
00000000000093ca         db  0x00 ; '.'
00000000000093cb         db  0x00 ; '.'
00000000000093cc         db  0x00 ; '.'
00000000000093cd         db  0x00 ; '.'
00000000000093ce         db  0x00 ; '.'
00000000000093cf         db  0x00 ; '.'
00000000000093d0         db  0x00 ; '.'
00000000000093d1         db  0x00 ; '.'
00000000000093d2         db  0x00 ; '.'
00000000000093d3         db  0x00 ; '.'
00000000000093d4         db  0x00 ; '.'
00000000000093d5         db  0x00 ; '.'
00000000000093d6         db  0x00 ; '.'
00000000000093d7         db  0x00 ; '.'
00000000000093d8         db  0x00 ; '.'
00000000000093d9         db  0x00 ; '.'
00000000000093da         db  0x00 ; '.'
00000000000093db         db  0x00 ; '.'
00000000000093dc         db  0x00 ; '.'
00000000000093dd         db  0x00 ; '.'
00000000000093de         db  0x00 ; '.'
00000000000093df         db  0x00 ; '.'
                     quoting_style_vals:
00000000000093e0         db  0x00 ; '.'
00000000000093e1         db  0x00 ; '.'
00000000000093e2         db  0x00 ; '.'
00000000000093e3         db  0x00 ; '.'
00000000000093e4         db  0x01 ; '.'
00000000000093e5         db  0x00 ; '.'
00000000000093e6         db  0x00 ; '.'
00000000000093e7         db  0x00 ; '.'
00000000000093e8         db  0x02 ; '.'
00000000000093e9         db  0x00 ; '.'
00000000000093ea         db  0x00 ; '.'
00000000000093eb         db  0x00 ; '.'
00000000000093ec         db  0x03 ; '.'
00000000000093ed         db  0x00 ; '.'
00000000000093ee         db  0x00 ; '.'
00000000000093ef         db  0x00 ; '.'
00000000000093f0         db  0x04 ; '.'
00000000000093f1         db  0x00 ; '.'
00000000000093f2         db  0x00 ; '.'
00000000000093f3         db  0x00 ; '.'
00000000000093f4         db  0x05 ; '.'
00000000000093f5         db  0x00 ; '.'
00000000000093f6         db  0x00 ; '.'
00000000000093f7         db  0x00 ; '.'
00000000000093f8         db  0x06 ; '.'
00000000000093f9         db  0x00 ; '.'
00000000000093fa         db  0x00 ; '.'
00000000000093fb         db  0x00 ; '.'
00000000000093fc         db  0x07 ; '.'
00000000000093fd         db  0x00 ; '.'
00000000000093fe         db  0x00 ; '.'
00000000000093ff         db  0x00 ; '.'
0000000000009400         db  0x08 ; '.'
0000000000009401         db  0x00 ; '.'
0000000000009402         db  0x00 ; '.'
0000000000009403         db  0x00 ; '.'
0000000000009404         db  0x09 ; '.'
0000000000009405         db  0x00 ; '.'
0000000000009406         db  0x00 ; '.'
0000000000009407         db  0x00 ; '.'
                     aU04x:
0000000000009408         db         "\u%04X", 0                                 ; DATA XREF=fallback_failure_callback+48
                     aU08x:
000000000000940f         db         "\U%08X", 0                                 ; DATA XREF=fallback_failure_callback+17
                     aUtf8:
0000000000009416         db         "UTF-8", 0                                  ; DATA XREF=unicode_to_mb+224
                     aAscii:
000000000000941c         db         "ASCII", 0                                  ; DATA XREF=unicode_to_mb+440, locale_charset+22, locale_charset+48
                     aIconvFunctionN:
0000000000009422         db         "iconv function not usable", 0              ; DATA XREF=unicode_to_mb+78
                     aCharacterOutOf:
000000000000943c         db         "character out of range", 0                 ; DATA XREF=unicode_to_mb+203
0000000000009453         align      8
                     aCannotConvertU_9458:        // aCannotConvertU
0000000000009458         db         "cannot convert U+%04X to local character set", 0 ; DATA XREF=exit_failure_callback+88
0000000000009485         align      8
                     aCannotConvertU:
0000000000009488         db         "cannot convert U+%04X to local character set: %s", 0 ; DATA XREF=exit_failure_callback+25
                     aSSSn:
00000000000094b9         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
00000000000094c5         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
00000000000094cc         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
00000000000094cd         db  0x43 ; 'C'
00000000000094ce         db  0x29 ; ')'
00000000000094cf         db  0x00 ; '.'
                     aWrittenBySn:
00000000000094d0         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
00000000000094e0         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
00000000000094f7         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000009513         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000009528         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000953e         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000009552         align      8
                     aNlicenseGplv3G:
0000000000009558         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000009624         align      8
                     aWrittenBySSSna:
0000000000009628         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_9648:        // aWrittenBySSSns
0000000000009648         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000966c         align      16
                     aWrittenBySSSns_9670:        // aWrittenBySSSns
0000000000009670         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_9698:        // aWrittenBySSSns
0000000000009698         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
00000000000096c4         align      8
                     aWrittenBySSSns_96c8:        // aWrittenBySSSns
00000000000096c8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
00000000000096f8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000972c         align      16
                     aWrittenBySSSns_9730:        // aWrittenBySSSns
0000000000009730         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000976c         align      16
                     aGeneralHelpUsi:
0000000000009770         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
00000000000097b1         align      4
                     switch_table_97b4:        // switch_table
00000000000097b4         dd         version_etc_arn.loc_5476-switch_table_97b4, version_etc_arn.loc_5508-switch_table_97b4, version_etc_arn.loc_5548-switch_table_97b4, version_etc_arn.loc_5590-switch_table_97b4 ; switch table used at 0x53f4 containing 10 entries, DATA XREF=version_etc_arn+150
00000000000097c4         dd         version_etc_arn.loc_55e0-switch_table_97b4, version_etc_arn.loc_5638-switch_table_97b4, version_etc_arn.loc_5668-switch_table_97b4, version_etc_arn.loc_56d0-switch_table_97b4
00000000000097d4         dd         version_etc_arn.loc_5400-switch_table_97b4, version_etc_arn.loc_54b0-switch_table_97b4
00000000000097dc         align      32
                     version_etc_copyright:
00000000000097e0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000980f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCannotPerformF:
0000000000009820         db         "cannot perform formatted output", 0        ; DATA XREF=xvprintf+48, xvfprintf+44
0000000000009840         db  0x43 ; 'C'                                         ; DATA XREF=c_strtold+144, hard_locale+24
0000000000009841         db  0x00 ; '.'
                     aPosix:
0000000000009842         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     switch_table_9848:        // switch_table
0000000000009848         dd         vasnprintf.loc_7226-switch_table_9848, vasnprintf.loc_6cc0-switch_table_9848, vasnprintf.loc_6c90-switch_table_9848, vasnprintf.loc_6c08-switch_table_9848 ; switch table used at 0x685b containing 18 entries, DATA XREF=vasnprintf+1357
0000000000009858         dd         vasnprintf.loc_6bc8-switch_table_9848, 2 dup (vasnprintf.loc_6998-switch_table_9848), 4 dup (vasnprintf.loc_6860-switch_table_9848), vasnprintf.loc_6b48-switch_table_9848
0000000000009878         dd         vasnprintf.loc_6ac0-switch_table_9848, 2 dup (vasnprintf.loc_6998-switch_table_9848), 3 dup (vasnprintf.loc_6860-switch_table_9848)
                     switch_table_9890:        // switch_table
0000000000009890         dd         vasnprintf.loc_7070-switch_table_9890, vasnprintf.loc_7090-switch_table_9890, vasnprintf.loc_7080-switch_table_9890, 2 dup (vasnprintf.loc_6f40-switch_table_9890) ; switch table used at 0x6e00 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
00000000000098a4         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
00000000000098ab         db  0x00 ; '.'
00000000000098ac         db  0x00 ; '.'
00000000000098ad         db  0x00 ; '.'
00000000000098ae         db  0x00 ; '.'
00000000000098af         db  0x00 ; '.'
00000000000098b0         db  0xe0 ; '.'                                         ; DATA XREF=printf_fetchargs+10
00000000000098b1         db  0xdb ; '.'
00000000000098b2         db  0xff ; '.'
00000000000098b3         db  0xff ; '.'
00000000000098b4         db  0x2c ; ','
00000000000098b5         db  0xdc ; '.'
00000000000098b6         db  0xff ; '.'
00000000000098b7         db  0xff ; '.'
00000000000098b8         db  0x2c ; ','
00000000000098b9         db  0xdc ; '.'
00000000000098ba         db  0xff ; '.'
00000000000098bb         db  0xff ; '.'
00000000000098bc         db  0x4e ; 'N'
00000000000098bd         db  0xdc ; '.'
00000000000098be         db  0xff ; '.'
00000000000098bf         db  0xff ; '.'
00000000000098c0         db  0x4e ; 'N'
00000000000098c1         db  0xdc ; '.'
00000000000098c2         db  0xff ; '.'
00000000000098c3         db  0xff ; '.'
00000000000098c4         db  0x0a ; '.'
00000000000098c5         db  0xdc ; '.'
00000000000098c6         db  0xff ; '.'
00000000000098c7         db  0xff ; '.'
00000000000098c8         db  0x0a ; '.'
00000000000098c9         db  0xdc ; '.'
00000000000098ca         db  0xff ; '.'
00000000000098cb         db  0xff ; '.'
00000000000098cc         db  0xe6 ; '.'
00000000000098cd         db  0xdb ; '.'
00000000000098ce         db  0xff ; '.'
00000000000098cf         db  0xff ; '.'
00000000000098d0         db  0xe6 ; '.'
00000000000098d1         db  0xdb ; '.'
00000000000098d2         db  0xff ; '.'
00000000000098d3         db  0xff ; '.'
00000000000098d4         db  0xe6 ; '.'
00000000000098d5         db  0xdb ; '.'
00000000000098d6         db  0xff ; '.'
00000000000098d7         db  0xff ; '.'
00000000000098d8         db  0xe6 ; '.'
00000000000098d9         db  0xdb ; '.'
00000000000098da         db  0xff ; '.'
00000000000098db         db  0xff ; '.'
00000000000098dc         db  0xa2 ; '.'
00000000000098dd         db  0xdc ; '.'
00000000000098de         db  0xff ; '.'
00000000000098df         db  0xff ; '.'
00000000000098e0         db  0xb0 ; '.'
00000000000098e1         db  0xdb ; '.'
00000000000098e2         db  0xff ; '.'
00000000000098e3         db  0xff ; '.'
00000000000098e4         db  0x0a ; '.'
00000000000098e5         db  0xdc ; '.'
00000000000098e6         db  0xff ; '.'
00000000000098e7         db  0xff ; '.'
00000000000098e8         db  0x0a ; '.'
00000000000098e9         db  0xdc ; '.'
00000000000098ea         db  0xff ; '.'
00000000000098eb         db  0xff ; '.'
00000000000098ec         db  0x74 ; 't'
00000000000098ed         db  0xdc ; '.'
00000000000098ee         db  0xff ; '.'
00000000000098ef         db  0xff ; '.'
00000000000098f0         db  0xd0 ; '.'
00000000000098f1         db  0xdc ; '.'
00000000000098f2         db  0xff ; '.'
00000000000098f3         db  0xff ; '.'
00000000000098f4         db  0xe6 ; '.'
00000000000098f5         db  0xdb ; '.'
00000000000098f6         db  0xff ; '.'
00000000000098f7         db  0xff ; '.'
00000000000098f8         db  0xe6 ; '.'
00000000000098f9         db  0xdb ; '.'
00000000000098fa         db  0xff ; '.'
00000000000098fb         db  0xff ; '.'
00000000000098fc         db  0xe6 ; '.'
00000000000098fd         db  0xdb ; '.'
00000000000098fe         db  0xff ; '.'
00000000000098ff         db  0xff ; '.'
0000000000009900         db  0xe6 ; '.'
0000000000009901         db  0xdb ; '.'
0000000000009902         db  0xff ; '.'
0000000000009903         db  0xff ; '.'
0000000000009904         db  0xe6 ; '.'
0000000000009905         db  0xdb ; '.'
0000000000009906         db  0xff ; '.'
0000000000009907         db  0xff ; '.'
0000000000009908         db  0xe6 ; '.'
0000000000009909         db  0xdb ; '.'
000000000000990a         db  0xff ; '.'
000000000000990b         db  0xff ; '.'
000000000000990c         db  0x00 ; '.'
000000000000990d         db  0x00 ; '.'
000000000000990e         db  0x00 ; '.'
000000000000990f         db  0x00 ; '.'
                     wide_null_string.2696:
0000000000009910         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
0000000000009911         db  0x00 ; '.'
0000000000009912         db  0x00 ; '.'
0000000000009913         db  0x00 ; '.'
0000000000009914         db  0x4e ; 'N'
0000000000009915         db  0x00 ; '.'
0000000000009916         db  0x00 ; '.'
0000000000009917         db  0x00 ; '.'
0000000000009918         db  0x55 ; 'U'
0000000000009919         db  0x00 ; '.'
000000000000991a         db  0x00 ; '.'
000000000000991b         db  0x00 ; '.'
000000000000991c         db  0x4c ; 'L'
000000000000991d         db  0x00 ; '.'
000000000000991e         db  0x00 ; '.'
000000000000991f         db  0x00 ; '.'
0000000000009920         db  0x4c ; 'L'
0000000000009921         db  0x00 ; '.'
0000000000009922         db  0x00 ; '.'
0000000000009923         db  0x00 ; '.'
0000000000009924         db  0x29 ; ')'
0000000000009925         db  0x00 ; '.'
0000000000009926         db  0x00 ; '.'
0000000000009927         db  0x00 ; '.'
0000000000009928         db  0x00 ; '.'
0000000000009929         db  0x00 ; '.'
000000000000992a         db  0x00 ; '.'
000000000000992b         db  0x00 ; '.'
                     switch_table_992c:        // switch_table
000000000000992c         dd         printf_parse.loc_78db-switch_table_992c, 27 dup (printf_parse.loc_7e6b-switch_table_992c), printf_parse.loc_7ddb-switch_table_992c, printf_parse.loc_7e6b-switch_table_992c ; switch table used at 0x7865 containing 84 entries, DATA XREF=printf_parse+564
00000000000099a4         dd         printf_parse.loc_7dfc-switch_table_992c, printf_parse.loc_7e6b-switch_table_992c, 3 dup (printf_parse.loc_7ddb-switch_table_992c), 11 dup (printf_parse.loc_7e6b-switch_table_992c)
00000000000099e4         dd         printf_parse.loc_7867-switch_table_992c, 4 dup (printf_parse.loc_7e6b-switch_table_992c), printf_parse.loc_7e0c-switch_table_992c, 8 dup (printf_parse.loc_7e6b-switch_table_992c)
0000000000009a1c         dd         printf_parse.loc_7ddb-switch_table_992c, printf_parse.loc_7e6b-switch_table_992c, printf_parse.loc_7d68-switch_table_992c, printf_parse.loc_7d7b-switch_table_992c
0000000000009a2c         dd         3 dup (printf_parse.loc_7ddb-switch_table_992c), printf_parse.loc_7e6b-switch_table_992c, printf_parse.loc_7d7b-switch_table_992c, 4 dup (printf_parse.loc_7e6b-switch_table_992c)
0000000000009a50         dd         printf_parse.loc_7d1c-switch_table_992c, printf_parse.loc_7e0c-switch_table_992c, printf_parse.loc_7e60-switch_table_992c, 2 dup (printf_parse.loc_7e6b-switch_table_992c)
0000000000009a64         dd         printf_parse.loc_7dc8-switch_table_992c, printf_parse.loc_7e6b-switch_table_992c, printf_parse.loc_7e0c-switch_table_992c, 2 dup (printf_parse.loc_7e6b-switch_table_992c)
0000000000009a78         dd         printf_parse.loc_7e0c-switch_table_992c


        ; Section .eh_frame_hdr
        ; Range: [0x9a7c; 0x9d60[ (740 bytes)
        ; File offset : [39548; 40288[ (740 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000009a7c         db  0x01 ; '.'
0000000000009a7d         db  0x1b ; '.'
0000000000009a7e         db  0x03 ; '.'
0000000000009a7f         db  0x3b ; ';'
0000000000009a80         db  0xe0 ; '.'
0000000000009a81         db  0x02 ; '.'
0000000000009a82         db  0x00 ; '.'
0000000000009a83         db  0x00 ; '.'
0000000000009a84         db  0x5b ; '['
0000000000009a85         db  0x00 ; '.'
0000000000009a86         db  0x00 ; '.'
0000000000009a87         db  0x00 ; '.'
0000000000009a88         db  0x84 ; '.'
0000000000009a89         db  0x79 ; 'y'
0000000000009a8a         db  0xff ; '.'
0000000000009a8b         db  0xff ; '.'
0000000000009a8c         db  0x2c ; ','
0000000000009a8d         db  0x03 ; '.'
0000000000009a8e         db  0x00 ; '.'
0000000000009a8f         db  0x00 ; '.'
0000000000009a90         db  0xd4 ; '.'
0000000000009a91         db  0x7c ; '|'
0000000000009a92         db  0xff ; '.'
0000000000009a93         db  0xff ; '.'
0000000000009a94         db  0x54 ; 'T'
0000000000009a95         db  0x03 ; '.'
0000000000009a96         db  0x00 ; '.'
0000000000009a97         db  0x00 ; '.'
0000000000009a98         db  0xe4 ; '.'
0000000000009a99         db  0x7c ; '|'
0000000000009a9a         db  0xff ; '.'
0000000000009a9b         db  0xff ; '.'
0000000000009a9c         db  0x3c ; '<'
0000000000009a9d         db  0x04 ; '.'
0000000000009a9e         db  0x00 ; '.'
0000000000009a9f         db  0x00 ; '.'
0000000000009aa0         db  0x94 ; '.'
0000000000009aa1         db  0x8a ; '.'
0000000000009aa2         db  0xff ; '.'
0000000000009aa3         db  0xff ; '.'
0000000000009aa4         db  0xfc ; '.'
0000000000009aa5         db  0x02 ; '.'
0000000000009aa6         db  0x00 ; '.'
0000000000009aa7         db  0x00 ; '.'
0000000000009aa8         db  0xa4 ; '.'
0000000000009aa9         db  0x8b ; '.'
0000000000009aaa         db  0xff ; '.'
0000000000009aab         db  0xff ; '.'
0000000000009aac         db  0x6c ; 'l'
0000000000009aad         db  0x03 ; '.'
0000000000009aae         db  0x00 ; '.'
0000000000009aaf         db  0x00 ; '.'
0000000000009ab0         db  0xc4 ; '.'
0000000000009ab1         db  0x90 ; '.'
0000000000009ab2         db  0xff ; '.'
0000000000009ab3         db  0xff ; '.'
0000000000009ab4         db  0xa8 ; '.'
0000000000009ab5         db  0x03 ; '.'
0000000000009ab6         db  0x00 ; '.'
0000000000009ab7         db  0x00 ; '.'
0000000000009ab8         db  0x74 ; 't'
0000000000009ab9         db  0x91 ; '.'
0000000000009aba         db  0xff ; '.'
0000000000009abb         db  0xff ; '.'
0000000000009abc         db  0xe4 ; '.'
0000000000009abd         db  0x03 ; '.'
0000000000009abe         db  0x00 ; '.'
0000000000009abf         db  0x00 ; '.'
0000000000009ac0         db  0x24 ; '$'
0000000000009ac1         db  0x92 ; '.'
0000000000009ac2         db  0xff ; '.'
0000000000009ac3         db  0xff ; '.'
0000000000009ac4         db  0x10 ; '.'
0000000000009ac5         db  0x04 ; '.'
0000000000009ac6         db  0x00 ; '.'
0000000000009ac7         db  0x00 ; '.'
0000000000009ac8         db  0x34 ; '4'
0000000000009ac9         db  0x96 ; '.'
0000000000009aca         db  0xff ; '.'
0000000000009acb         db  0xff ; '.'
0000000000009acc         db  0xc4 ; '.'
0000000000009acd         db  0x04 ; '.'
0000000000009ace         db  0x00 ; '.'
0000000000009acf         db  0x00 ; '.'
0000000000009ad0         db  0xe4 ; '.'
0000000000009ad1         db  0x96 ; '.'
0000000000009ad2         db  0xff ; '.'
0000000000009ad3         db  0xff ; '.'
0000000000009ad4         db  0x04 ; '.'
0000000000009ad5         db  0x05 ; '.'
0000000000009ad6         db  0x00 ; '.'
0000000000009ad7         db  0x00 ; '.'
0000000000009ad8         db  0xf4 ; '.'
0000000000009ad9         db  0x96 ; '.'
0000000000009ada         db  0xff ; '.'
0000000000009adb         db  0xff ; '.'
0000000000009adc         db  0x18 ; '.'
0000000000009add         db  0x05 ; '.'
0000000000009ade         db  0x00 ; '.'
0000000000009adf         db  0x00 ; '.'
0000000000009ae0         db  0x04 ; '.'
0000000000009ae1         db  0x97 ; '.'
0000000000009ae2         db  0xff ; '.'
0000000000009ae3         db  0xff ; '.'
0000000000009ae4         db  0x2c ; ','
0000000000009ae5         db  0x05 ; '.'
0000000000009ae6         db  0x00 ; '.'
0000000000009ae7         db  0x00 ; '.'
0000000000009ae8         db  0xb4 ; '.'
0000000000009ae9         db  0x97 ; '.'
0000000000009aea         db  0xff ; '.'
0000000000009aeb         db  0xff ; '.'
0000000000009aec         db  0x5c ; '\'
0000000000009aed         db  0x05 ; '.'
0000000000009aee         db  0x00 ; '.'
0000000000009aef         db  0x00 ; '.'
0000000000009af0         db  0x54 ; 'T'
0000000000009af1         db  0x98 ; '.'
0000000000009af2         db  0xff ; '.'
0000000000009af3         db  0xff ; '.'
0000000000009af4         db  0x7c ; '|'
0000000000009af5         db  0x05 ; '.'
0000000000009af6         db  0x00 ; '.'
0000000000009af7         db  0x00 ; '.'
0000000000009af8         db  0x44 ; 'D'
0000000000009af9         db  0x99 ; '.'
0000000000009afa         db  0xff ; '.'
0000000000009afb         db  0xff ; '.'
0000000000009afc         db  0xc0 ; '.'
0000000000009afd         db  0x05 ; '.'
0000000000009afe         db  0x00 ; '.'
0000000000009aff         db  0x00 ; '.'
0000000000009b00         db  0x84 ; '.'
0000000000009b01         db  0xab ; '.'
0000000000009b02         db  0xff ; '.'
0000000000009b03         db  0xff ; '.'
0000000000009b04         db  0x38 ; '8'
0000000000009b05         db  0x06 ; '.'
0000000000009b06         db  0x00 ; '.'
0000000000009b07         db  0x00 ; '.'
0000000000009b08         db  0x34 ; '4'
0000000000009b09         db  0xad ; '.'
0000000000009b0a         db  0xff ; '.'
0000000000009b0b         db  0xff ; '.'
0000000000009b0c         db  0xa4 ; '.'
0000000000009b0d         db  0x06 ; '.'
0000000000009b0e         db  0x00 ; '.'
0000000000009b0f         db  0x00 ; '.'
0000000000009b10         db  0x74 ; 't'
0000000000009b11         db  0xad ; '.'
0000000000009b12         db  0xff ; '.'
0000000000009b13         db  0xff ; '.'
0000000000009b14         db  0xd0 ; '.'
0000000000009b15         db  0x06 ; '.'
0000000000009b16         db  0x00 ; '.'
0000000000009b17         db  0x00 ; '.'
0000000000009b18         db  0x94 ; '.'
0000000000009b19         db  0xad ; '.'
0000000000009b1a         db  0xff ; '.'
0000000000009b1b         db  0xff ; '.'
0000000000009b1c         db  0xe4 ; '.'
0000000000009b1d         db  0x06 ; '.'
0000000000009b1e         db  0x00 ; '.'
0000000000009b1f         db  0x00 ; '.'
0000000000009b20         db  0xb4 ; '.'
0000000000009b21         db  0xad ; '.'
0000000000009b22         db  0xff ; '.'
0000000000009b23         db  0xff ; '.'
0000000000009b24         db  0xf8 ; '.'
0000000000009b25         db  0x06 ; '.'
0000000000009b26         db  0x00 ; '.'
0000000000009b27         db  0x00 ; '.'
0000000000009b28         db  0xf4 ; '.'
0000000000009b29         db  0xad ; '.'
0000000000009b2a         db  0xff ; '.'
0000000000009b2b         db  0xff ; '.'
0000000000009b2c         db  0x0c ; '.'
0000000000009b2d         db  0x07 ; '.'
0000000000009b2e         db  0x00 ; '.'
0000000000009b2f         db  0x00 ; '.'
0000000000009b30         db  0x14 ; '.'
0000000000009b31         db  0xae ; '.'
0000000000009b32         db  0xff ; '.'
0000000000009b33         db  0xff ; '.'
0000000000009b34         db  0x20 ; ' '
0000000000009b35         db  0x07 ; '.'
0000000000009b36         db  0x00 ; '.'
0000000000009b37         db  0x00 ; '.'
0000000000009b38         db  0x44 ; 'D'
0000000000009b39         db  0xae ; '.'
0000000000009b3a         db  0xff ; '.'
0000000000009b3b         db  0xff ; '.'
0000000000009b3c         db  0x34 ; '4'
0000000000009b3d         db  0x07 ; '.'
0000000000009b3e         db  0x00 ; '.'
0000000000009b3f         db  0x00 ; '.'
0000000000009b40         db  0xc4 ; '.'
0000000000009b41         db  0xae ; '.'
0000000000009b42         db  0xff ; '.'
0000000000009b43         db  0xff ; '.'
0000000000009b44         db  0x88 ; '.'
0000000000009b45         db  0x07 ; '.'
0000000000009b46         db  0x00 ; '.'
0000000000009b47         db  0x00 ; '.'
0000000000009b48         db  0xb4 ; '.'
0000000000009b49         db  0xaf ; '.'
0000000000009b4a         db  0xff ; '.'
0000000000009b4b         db  0xff ; '.'
0000000000009b4c         db  0xf4 ; '.'
0000000000009b4d         db  0x07 ; '.'
0000000000009b4e         db  0x00 ; '.'
0000000000009b4f         db  0x00 ; '.'
0000000000009b50         db  0xc4 ; '.'
0000000000009b51         db  0xaf ; '.'
0000000000009b52         db  0xff ; '.'
0000000000009b53         db  0xff ; '.'
0000000000009b54         db  0x08 ; '.'
0000000000009b55         db  0x08 ; '.'
0000000000009b56         db  0x00 ; '.'
0000000000009b57         db  0x00 ; '.'
0000000000009b58         db  0x64 ; 'd'
0000000000009b59         db  0xb0 ; '.'
0000000000009b5a         db  0xff ; '.'
0000000000009b5b         db  0xff ; '.'
0000000000009b5c         db  0x34 ; '4'
0000000000009b5d         db  0x08 ; '.'
0000000000009b5e         db  0x00 ; '.'
0000000000009b5f         db  0x00 ; '.'
0000000000009b60         db  0x84 ; '.'
0000000000009b61         db  0xb0 ; '.'
0000000000009b62         db  0xff ; '.'
0000000000009b63         db  0xff ; '.'
0000000000009b64         db  0x48 ; 'H'
0000000000009b65         db  0x08 ; '.'
0000000000009b66         db  0x00 ; '.'
0000000000009b67         db  0x00 ; '.'
0000000000009b68         db  0x94 ; '.'
0000000000009b69         db  0xb0 ; '.'
0000000000009b6a         db  0xff ; '.'
0000000000009b6b         db  0xff ; '.'
0000000000009b6c         db  0x5c ; '\'
0000000000009b6d         db  0x08 ; '.'
0000000000009b6e         db  0x00 ; '.'
0000000000009b6f         db  0x00 ; '.'
0000000000009b70         db  0xb4 ; '.'
0000000000009b71         db  0xb0 ; '.'
0000000000009b72         db  0xff ; '.'
0000000000009b73         db  0xff ; '.'
0000000000009b74         db  0x70 ; 'p'
0000000000009b75         db  0x08 ; '.'
0000000000009b76         db  0x00 ; '.'
0000000000009b77         db  0x00 ; '.'
0000000000009b78         db  0xd4 ; '.'
0000000000009b79         db  0xb0 ; '.'
0000000000009b7a         db  0xff ; '.'
0000000000009b7b         db  0xff ; '.'
0000000000009b7c         db  0x84 ; '.'
0000000000009b7d         db  0x08 ; '.'
0000000000009b7e         db  0x00 ; '.'
0000000000009b7f         db  0x00 ; '.'
0000000000009b80         db  0x64 ; 'd'
0000000000009b81         db  0xb1 ; '.'
0000000000009b82         db  0xff ; '.'
0000000000009b83         db  0xff ; '.'
0000000000009b84         db  0xa0 ; '.'
0000000000009b85         db  0x08 ; '.'
0000000000009b86         db  0x00 ; '.'
0000000000009b87         db  0x00 ; '.'
0000000000009b88         db  0xf4 ; '.'
0000000000009b89         db  0xb1 ; '.'
0000000000009b8a         db  0xff ; '.'
0000000000009b8b         db  0xff ; '.'
0000000000009b8c         db  0xbc ; '.'
0000000000009b8d         db  0x08 ; '.'
0000000000009b8e         db  0x00 ; '.'
0000000000009b8f         db  0x00 ; '.'
0000000000009b90         db  0x04 ; '.'
0000000000009b91         db  0xb2 ; '.'
0000000000009b92         db  0xff ; '.'
0000000000009b93         db  0xff ; '.'
0000000000009b94         db  0xd0 ; '.'
0000000000009b95         db  0x08 ; '.'
0000000000009b96         db  0x00 ; '.'
0000000000009b97         db  0x00 ; '.'
0000000000009b98         db  0x14 ; '.'
0000000000009b99         db  0xb2 ; '.'
0000000000009b9a         db  0xff ; '.'
0000000000009b9b         db  0xff ; '.'
0000000000009b9c         db  0xe4 ; '.'
0000000000009b9d         db  0x08 ; '.'
0000000000009b9e         db  0x00 ; '.'
0000000000009b9f         db  0x00 ; '.'
0000000000009ba0         db  0xb4 ; '.'
0000000000009ba1         db  0xb2 ; '.'
0000000000009ba2         db  0xff ; '.'
0000000000009ba3         db  0xff ; '.'
0000000000009ba4         db  0x00 ; '.'
0000000000009ba5         db  0x09 ; '.'
0000000000009ba6         db  0x00 ; '.'
0000000000009ba7         db  0x00 ; '.'
0000000000009ba8         db  0xc4 ; '.'
0000000000009ba9         db  0xb2 ; '.'
0000000000009baa         db  0xff ; '.'
0000000000009bab         db  0xff ; '.'
0000000000009bac         db  0x14 ; '.'
0000000000009bad         db  0x09 ; '.'
0000000000009bae         db  0x00 ; '.'
0000000000009baf         db  0x00 ; '.'
0000000000009bb0         db  0xe4 ; '.'
0000000000009bb1         db  0xb2 ; '.'
0000000000009bb2         db  0xff ; '.'
0000000000009bb3         db  0xff ; '.'
0000000000009bb4         db  0x28 ; '('
0000000000009bb5         db  0x09 ; '.'
0000000000009bb6         db  0x00 ; '.'
0000000000009bb7         db  0x00 ; '.'
0000000000009bb8         db  0xf4 ; '.'
0000000000009bb9         db  0xb2 ; '.'
0000000000009bba         db  0xff ; '.'
0000000000009bbb         db  0xff ; '.'
0000000000009bbc         db  0x3c ; '<'
0000000000009bbd         db  0x09 ; '.'
0000000000009bbe         db  0x00 ; '.'
0000000000009bbf         db  0x00 ; '.'
0000000000009bc0         db  0x84 ; '.'
0000000000009bc1         db  0xb3 ; '.'
0000000000009bc2         db  0xff ; '.'
0000000000009bc3         db  0xff ; '.'
0000000000009bc4         db  0x58 ; 'X'
0000000000009bc5         db  0x09 ; '.'
0000000000009bc6         db  0x00 ; '.'
0000000000009bc7         db  0x00 ; '.'
0000000000009bc8         db  0x24 ; '$'
0000000000009bc9         db  0xb4 ; '.'
0000000000009bca         db  0xff ; '.'
0000000000009bcb         db  0xff ; '.'
0000000000009bcc         db  0x74 ; 't'
0000000000009bcd         db  0x09 ; '.'
0000000000009bce         db  0x00 ; '.'
0000000000009bcf         db  0x00 ; '.'
0000000000009bd0         db  0x34 ; '4'
0000000000009bd1         db  0xb4 ; '.'
0000000000009bd2         db  0xff ; '.'
0000000000009bd3         db  0xff ; '.'
0000000000009bd4         db  0x88 ; '.'
0000000000009bd5         db  0x09 ; '.'
0000000000009bd6         db  0x00 ; '.'
0000000000009bd7         db  0x00 ; '.'
0000000000009bd8         db  0x54 ; 'T'
0000000000009bd9         db  0xb4 ; '.'
0000000000009bda         db  0xff ; '.'
0000000000009bdb         db  0xff ; '.'
0000000000009bdc         db  0x9c ; '.'
0000000000009bdd         db  0x09 ; '.'
0000000000009bde         db  0x00 ; '.'
0000000000009bdf         db  0x00 ; '.'
0000000000009be0         db  0x74 ; 't'
0000000000009be1         db  0xb4 ; '.'
0000000000009be2         db  0xff ; '.'
0000000000009be3         db  0xff ; '.'
0000000000009be4         db  0xb0 ; '.'
0000000000009be5         db  0x09 ; '.'
0000000000009be6         db  0x00 ; '.'
0000000000009be7         db  0x00 ; '.'
0000000000009be8         db  0x84 ; '.'
0000000000009be9         db  0xb4 ; '.'
0000000000009bea         db  0xff ; '.'
0000000000009beb         db  0xff ; '.'
0000000000009bec         db  0xc4 ; '.'
0000000000009bed         db  0x09 ; '.'
0000000000009bee         db  0x00 ; '.'
0000000000009bef         db  0x00 ; '.'
0000000000009bf0         db  0xa4 ; '.'
0000000000009bf1         db  0xb4 ; '.'
0000000000009bf2         db  0xff ; '.'
0000000000009bf3         db  0xff ; '.'
0000000000009bf4         db  0xd8 ; '.'
0000000000009bf5         db  0x09 ; '.'
0000000000009bf6         db  0x00 ; '.'
0000000000009bf7         db  0x00 ; '.'
0000000000009bf8         db  0xc4 ; '.'
0000000000009bf9         db  0xb4 ; '.'
0000000000009bfa         db  0xff ; '.'
0000000000009bfb         db  0xff ; '.'
0000000000009bfc         db  0xec ; '.'
0000000000009bfd         db  0x09 ; '.'
0000000000009bfe         db  0x00 ; '.'
0000000000009bff         db  0x00 ; '.'
0000000000009c00         db  0xe4 ; '.'
0000000000009c01         db  0xb4 ; '.'
0000000000009c02         db  0xff ; '.'
0000000000009c03         db  0xff ; '.'
0000000000009c04         db  0x04 ; '.'
0000000000009c05         db  0x0a ; '.'
0000000000009c06         db  0x00 ; '.'
0000000000009c07         db  0x00 ; '.'
0000000000009c08         db  0x04 ; '.'
0000000000009c09         db  0xb5 ; '.'
0000000000009c0a         db  0xff ; '.'
0000000000009c0b         db  0xff ; '.'
0000000000009c0c         db  0x1c ; '.'
0000000000009c0d         db  0x0a ; '.'
0000000000009c0e         db  0x00 ; '.'
0000000000009c0f         db  0x00 ; '.'
0000000000009c10         db  0x54 ; 'T'
0000000000009c11         db  0xb5 ; '.'
0000000000009c12         db  0xff ; '.'
0000000000009c13         db  0xff ; '.'
0000000000009c14         db  0x3c ; '<'
0000000000009c15         db  0x0a ; '.'
0000000000009c16         db  0x00 ; '.'
0000000000009c17         db  0x00 ; '.'
0000000000009c18         db  0xe4 ; '.'
0000000000009c19         db  0xb5 ; '.'
0000000000009c1a         db  0xff ; '.'
0000000000009c1b         db  0xff ; '.'
0000000000009c1c         db  0x70 ; 'p'
0000000000009c1d         db  0x0a ; '.'
0000000000009c1e         db  0x00 ; '.'
0000000000009c1f         db  0x00 ; '.'
0000000000009c20         db  0xf4 ; '.'
0000000000009c21         db  0xb7 ; '.'
0000000000009c22         db  0xff ; '.'
0000000000009c23         db  0xff ; '.'
0000000000009c24         db  0xbc ; '.'
0000000000009c25         db  0x0a ; '.'
0000000000009c26         db  0x00 ; '.'
0000000000009c27         db  0x00 ; '.'
0000000000009c28         db  0x24 ; '$'
0000000000009c29         db  0xb8 ; '.'
0000000000009c2a         db  0xff ; '.'
0000000000009c2b         db  0xff ; '.'
0000000000009c2c         db  0xd4 ; '.'
0000000000009c2d         db  0x0a ; '.'
0000000000009c2e         db  0x00 ; '.'
0000000000009c2f         db  0x00 ; '.'
0000000000009c30         db  0xd4 ; '.'
0000000000009c31         db  0xb8 ; '.'
0000000000009c32         db  0xff ; '.'
0000000000009c33         db  0xff ; '.'
0000000000009c34         db  0xec ; '.'
0000000000009c35         db  0x0a ; '.'
0000000000009c36         db  0x00 ; '.'
0000000000009c37         db  0x00 ; '.'
0000000000009c38         db  0xf4 ; '.'
0000000000009c39         db  0xbc ; '.'
0000000000009c3a         db  0xff ; '.'
0000000000009c3b         db  0xff ; '.'
0000000000009c3c         db  0x00 ; '.'
0000000000009c3d         db  0x0c ; '.'
0000000000009c3e         db  0x00 ; '.'
0000000000009c3f         db  0x00 ; '.'
0000000000009c40         db  0x14 ; '.'
0000000000009c41         db  0xbd ; '.'
0000000000009c42         db  0xff ; '.'
0000000000009c43         db  0xff ; '.'
0000000000009c44         db  0x14 ; '.'
0000000000009c45         db  0x0c ; '.'
0000000000009c46         db  0x00 ; '.'
0000000000009c47         db  0x00 ; '.'
0000000000009c48         db  0x94 ; '.'
0000000000009c49         db  0xbd ; '.'
0000000000009c4a         db  0xff ; '.'
0000000000009c4b         db  0xff ; '.'
0000000000009c4c         db  0x30 ; '0'
0000000000009c4d         db  0x0c ; '.'
0000000000009c4e         db  0x00 ; '.'
0000000000009c4f         db  0x00 ; '.'
0000000000009c50         db  0x74 ; 't'
0000000000009c51         db  0xbe ; '.'
0000000000009c52         db  0xff ; '.'
0000000000009c53         db  0xff ; '.'
0000000000009c54         db  0x5c ; '\'
0000000000009c55         db  0x0c ; '.'
0000000000009c56         db  0x00 ; '.'
0000000000009c57         db  0x00 ; '.'
0000000000009c58         db  0xf4 ; '.'
0000000000009c59         db  0xbe ; '.'
0000000000009c5a         db  0xff ; '.'
0000000000009c5b         db  0xff ; '.'
0000000000009c5c         db  0x7c ; '|'
0000000000009c5d         db  0x0c ; '.'
0000000000009c5e         db  0x00 ; '.'
0000000000009c5f         db  0x00 ; '.'
0000000000009c60         db  0x14 ; '.'
0000000000009c61         db  0xbf ; '.'
0000000000009c62         db  0xff ; '.'
0000000000009c63         db  0xff ; '.'
0000000000009c64         db  0x98 ; '.'
0000000000009c65         db  0x0c ; '.'
0000000000009c66         db  0x00 ; '.'
0000000000009c67         db  0x00 ; '.'
0000000000009c68         db  0x44 ; 'D'
0000000000009c69         db  0xbf ; '.'
0000000000009c6a         db  0xff ; '.'
0000000000009c6b         db  0xff ; '.'
0000000000009c6c         db  0xac ; '.'
0000000000009c6d         db  0x0c ; '.'
0000000000009c6e         db  0x00 ; '.'
0000000000009c6f         db  0x00 ; '.'
0000000000009c70         db  0x54 ; 'T'
0000000000009c71         db  0xbf ; '.'
0000000000009c72         db  0xff ; '.'
0000000000009c73         db  0xff ; '.'
0000000000009c74         db  0xc0 ; '.'
0000000000009c75         db  0x0c ; '.'
0000000000009c76         db  0x00 ; '.'
0000000000009c77         db  0x00 ; '.'
0000000000009c78         db  0x94 ; '.'
0000000000009c79         db  0xbf ; '.'
0000000000009c7a         db  0xff ; '.'
0000000000009c7b         db  0xff ; '.'
0000000000009c7c         db  0xe4 ; '.'
0000000000009c7d         db  0x0c ; '.'
0000000000009c7e         db  0x00 ; '.'
0000000000009c7f         db  0x00 ; '.'
0000000000009c80         db  0xc4 ; '.'
0000000000009c81         db  0xbf ; '.'
0000000000009c82         db  0xff ; '.'
0000000000009c83         db  0xff ; '.'
0000000000009c84         db  0xf8 ; '.'
0000000000009c85         db  0x0c ; '.'
0000000000009c86         db  0x00 ; '.'
0000000000009c87         db  0x00 ; '.'
0000000000009c88         db  0x54 ; 'T'
0000000000009c89         db  0xc0 ; '.'
0000000000009c8a         db  0xff ; '.'
0000000000009c8b         db  0xff ; '.'
0000000000009c8c         db  0x10 ; '.'
0000000000009c8d         db  0x0d ; '.'
0000000000009c8e         db  0x00 ; '.'
0000000000009c8f         db  0x00 ; '.'
0000000000009c90         db  0xa4 ; '.'
0000000000009c91         db  0xc0 ; '.'
0000000000009c92         db  0xff ; '.'
0000000000009c93         db  0xff ; '.'
0000000000009c94         db  0x28 ; '('
0000000000009c95         db  0x0d ; '.'
0000000000009c96         db  0x00 ; '.'
0000000000009c97         db  0x00 ; '.'
0000000000009c98         db  0xc4 ; '.'
0000000000009c99         db  0xc0 ; '.'
0000000000009c9a         db  0xff ; '.'
0000000000009c9b         db  0xff ; '.'
0000000000009c9c         db  0x44 ; 'D'
0000000000009c9d         db  0x0d ; '.'
0000000000009c9e         db  0x00 ; '.'
0000000000009c9f         db  0x00 ; '.'
0000000000009ca0         db  0xf4 ; '.'
0000000000009ca1         db  0xc0 ; '.'
0000000000009ca2         db  0xff ; '.'
0000000000009ca3         db  0xff ; '.'
0000000000009ca4         db  0x60 ; '`'
0000000000009ca5         db  0x0d ; '.'
0000000000009ca6         db  0x00 ; '.'
0000000000009ca7         db  0x00 ; '.'
0000000000009ca8         db  0x24 ; '$'
0000000000009ca9         db  0xc1 ; '.'
0000000000009caa         db  0xff ; '.'
0000000000009cab         db  0xff ; '.'
0000000000009cac         db  0x88 ; '.'
0000000000009cad         db  0x0d ; '.'
0000000000009cae         db  0x00 ; '.'
0000000000009caf         db  0x00 ; '.'
0000000000009cb0         db  0x44 ; 'D'
0000000000009cb1         db  0xc1 ; '.'
0000000000009cb2         db  0xff ; '.'
0000000000009cb3         db  0xff ; '.'
0000000000009cb4         db  0xa4 ; '.'
0000000000009cb5         db  0x0d ; '.'
0000000000009cb6         db  0x00 ; '.'
0000000000009cb7         db  0x00 ; '.'
0000000000009cb8         db  0x84 ; '.'
0000000000009cb9         db  0xc1 ; '.'
0000000000009cba         db  0xff ; '.'
0000000000009cbb         db  0xff ; '.'
0000000000009cbc         db  0xbc ; '.'
0000000000009cbd         db  0x0d ; '.'
0000000000009cbe         db  0x00 ; '.'
0000000000009cbf         db  0x00 ; '.'
0000000000009cc0         db  0xe4 ; '.'
0000000000009cc1         db  0xc1 ; '.'
0000000000009cc2         db  0xff ; '.'
0000000000009cc3         db  0xff ; '.'
0000000000009cc4         db  0xe8 ; '.'
0000000000009cc5         db  0x0d ; '.'
0000000000009cc6         db  0x00 ; '.'
0000000000009cc7         db  0x00 ; '.'
0000000000009cc8         db  0xa4 ; '.'
0000000000009cc9         db  0xc2 ; '.'
0000000000009cca         db  0xff ; '.'
0000000000009ccb         db  0xff ; '.'
0000000000009ccc         db  0x04 ; '.'
0000000000009ccd         db  0x0e ; '.'
0000000000009cce         db  0x00 ; '.'
0000000000009ccf         db  0x00 ; '.'
0000000000009cd0         db  0x04 ; '.'
0000000000009cd1         db  0xc3 ; '.'
0000000000009cd2         db  0xff ; '.'
0000000000009cd3         db  0xff ; '.'
0000000000009cd4         db  0x30 ; '0'
0000000000009cd5         db  0x0e ; '.'
0000000000009cd6         db  0x00 ; '.'
0000000000009cd7         db  0x00 ; '.'
0000000000009cd8         db  0xc4 ; '.'
0000000000009cd9         db  0xc3 ; '.'
0000000000009cda         db  0xff ; '.'
0000000000009cdb         db  0xff ; '.'
0000000000009cdc         db  0x4c ; 'L'
0000000000009cdd         db  0x0e ; '.'
0000000000009cde         db  0x00 ; '.'
0000000000009cdf         db  0x00 ; '.'
0000000000009ce0         db  0x54 ; 'T'
0000000000009ce1         db  0xc4 ; '.'
0000000000009ce2         db  0xff ; '.'
0000000000009ce3         db  0xff ; '.'
0000000000009ce4         db  0x8c ; '.'
0000000000009ce5         db  0x0e ; '.'
0000000000009ce6         db  0x00 ; '.'
0000000000009ce7         db  0x00 ; '.'
0000000000009ce8         db  0x54 ; 'T'
0000000000009ce9         db  0xc5 ; '.'
0000000000009cea         db  0xff ; '.'
0000000000009ceb         db  0xff ; '.'
0000000000009cec         db  0xcc ; '.'
0000000000009ced         db  0x0e ; '.'
0000000000009cee         db  0x00 ; '.'
0000000000009cef         db  0x00 ; '.'
0000000000009cf0         db  0x74 ; 't'
0000000000009cf1         db  0xc5 ; '.'
0000000000009cf2         db  0xff ; '.'
0000000000009cf3         db  0xff ; '.'
0000000000009cf4         db  0xe4 ; '.'
0000000000009cf5         db  0x0e ; '.'
0000000000009cf6         db  0x00 ; '.'
0000000000009cf7         db  0x00 ; '.'
0000000000009cf8         db  0x34 ; '4'
0000000000009cf9         db  0xc6 ; '.'
0000000000009cfa         db  0xff ; '.'
0000000000009cfb         db  0xff ; '.'
0000000000009cfc         db  0x3c ; '<'
0000000000009cfd         db  0x0f ; '.'
0000000000009cfe         db  0x00 ; '.'
0000000000009cff         db  0x00 ; '.'
0000000000009d00         db  0xb4 ; '.'
0000000000009d01         db  0xc6 ; '.'
0000000000009d02         db  0xff ; '.'
0000000000009d03         db  0xff ; '.'
0000000000009d04         db  0x8c ; '.'
0000000000009d05         db  0x0f ; '.'
0000000000009d06         db  0x00 ; '.'
0000000000009d07         db  0x00 ; '.'
0000000000009d08         db  0x14 ; '.'
0000000000009d09         db  0xc7 ; '.'
0000000000009d0a         db  0xff ; '.'
0000000000009d0b         db  0xff ; '.'
0000000000009d0c         db  0xac ; '.'
0000000000009d0d         db  0x0f ; '.'
0000000000009d0e         db  0x00 ; '.'
0000000000009d0f         db  0x00 ; '.'
0000000000009d10         db  0x54 ; 'T'
0000000000009d11         db  0xc7 ; '.'
0000000000009d12         db  0xff ; '.'
0000000000009d13         db  0xff ; '.'
0000000000009d14         db  0xcc ; '.'
0000000000009d15         db  0x0f ; '.'
0000000000009d16         db  0x00 ; '.'
0000000000009d17         db  0x00 ; '.'
0000000000009d18         db  0xd4 ; '.'
0000000000009d19         db  0xc7 ; '.'
0000000000009d1a         db  0xff ; '.'
0000000000009d1b         db  0xff ; '.'
0000000000009d1c         db  0x04 ; '.'
0000000000009d1d         db  0x10 ; '.'
0000000000009d1e         db  0x00 ; '.'
0000000000009d1f         db  0x00 ; '.'
0000000000009d20         db  0x14 ; '.'
0000000000009d21         db  0xc8 ; '.'
0000000000009d22         db  0xff ; '.'
0000000000009d23         db  0xff ; '.'
0000000000009d24         db  0x24 ; '$'
0000000000009d25         db  0x10 ; '.'
0000000000009d26         db  0x00 ; '.'
0000000000009d27         db  0x00 ; '.'
0000000000009d28         db  0x74 ; 't'
0000000000009d29         db  0xc8 ; '.'
0000000000009d2a         db  0xff ; '.'
0000000000009d2b         db  0xff ; '.'
0000000000009d2c         db  0x54 ; 'T'
0000000000009d2d         db  0x10 ; '.'
0000000000009d2e         db  0x00 ; '.'
0000000000009d2f         db  0x00 ; '.'
0000000000009d30         db  0x84 ; '.'
0000000000009d31         db  0xc8 ; '.'
0000000000009d32         db  0xff ; '.'
0000000000009d33         db  0xff ; '.'
0000000000009d34         db  0x6c ; 'l'
0000000000009d35         db  0x10 ; '.'
0000000000009d36         db  0x00 ; '.'
0000000000009d37         db  0x00 ; '.'
0000000000009d38         db  0xa4 ; '.'
0000000000009d39         db  0xd9 ; '.'
0000000000009d3a         db  0xff ; '.'
0000000000009d3b         db  0xff ; '.'
0000000000009d3c         db  0x9c ; '.'
0000000000009d3d         db  0x10 ; '.'
0000000000009d3e         db  0x00 ; '.'
0000000000009d3f         db  0x00 ; '.'
0000000000009d40         db  0xa4 ; '.'
0000000000009d41         db  0xdb ; '.'
0000000000009d42         db  0xff ; '.'
0000000000009d43         db  0xff ; '.'
0000000000009d44         db  0xb4 ; '.'
0000000000009d45         db  0x10 ; '.'
0000000000009d46         db  0x00 ; '.'
0000000000009d47         db  0x00 ; '.'
0000000000009d48         db  0x94 ; '.'
0000000000009d49         db  0xe8 ; '.'
0000000000009d4a         db  0xff ; '.'
0000000000009d4b         db  0xff ; '.'
0000000000009d4c         db  0x04 ; '.'
0000000000009d4d         db  0x11 ; '.'
0000000000009d4e         db  0x00 ; '.'
0000000000009d4f         db  0x00 ; '.'
0000000000009d50         db  0x04 ; '.'
0000000000009d51         db  0xe9 ; '.'
0000000000009d52         db  0xff ; '.'
0000000000009d53         db  0xff ; '.'
0000000000009d54         db  0x4c ; 'L'
0000000000009d55         db  0x11 ; '.'
0000000000009d56         db  0x00 ; '.'
0000000000009d57         db  0x00 ; '.'
0000000000009d58         db  0x14 ; '.'
0000000000009d59         db  0xe9 ; '.'
0000000000009d5a         db  0xff ; '.'
0000000000009d5b         db  0xff ; '.'
0000000000009d5c         db  0x64 ; 'd'
0000000000009d5d         db  0x11 ; '.'
0000000000009d5e         db  0x00 ; '.'
0000000000009d5f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x9d60; 0xabf8[ (3736 bytes)
        ; File offset : [40288; 44024[ (3736 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000009d60         dd         0x00000014                                  ; Length of the record
0000000000009d64         dd         0x00000000                                  ; CIE ID
0000000000009d68         db         0x01                                        ; Version
0000000000009d69         db         "zR", 0                                     ; Augmentation String
0000000000009d6c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000009d6d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000009d6e         db         0x10                                        ; Return address register
0000000000009d6f         db         0x01                                        ; Augmentation data length
0000000000009d70         db         0x1b                                        ; FDE encoding
0000000000009d71         db  0x0c ; '.'
0000000000009d72         db  0x07 ; '.'
0000000000009d73         db  0x08 ; '.'
0000000000009d74         db  0x90 ; '.'
0000000000009d75         db  0x01 ; '.'
0000000000009d76         db  0x07 ; '.'
0000000000009d77         db  0x10 ; '.'
0000000000009d78         dd         0x00000014                                  ; Length of the record
0000000000009d7c         dd         0x0000001c                                  ; FDE: parent CIE at 0x9d60 (FDE encoding = 0x1B)
0000000000009d80         db         0x90, 0x87, 2 dup (0xff)                    ; begin 0x2510
0000000000009d84         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x253b)
0000000000009d88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009d89         align      16
0000000000009d90         dd         0x00000014                                  ; Length of the record
0000000000009d94         dd         0x00000000                                  ; CIE ID
0000000000009d98         db         0x01                                        ; Version
0000000000009d99         db         "zR", 0                                     ; Augmentation String
0000000000009d9c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000009d9d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000009d9e         db         0x10                                        ; Return address register
0000000000009d9f         db         0x01                                        ; Augmentation data length
0000000000009da0         db         0x1b                                        ; FDE encoding
0000000000009da1         db  0x0c ; '.'
0000000000009da2         db  0x07 ; '.'
0000000000009da3         db  0x08 ; '.'
0000000000009da4         db  0x90 ; '.'
0000000000009da5         db  0x01 ; '.'
0000000000009da6         db  0x00 ; '.'
0000000000009da7         db  0x00 ; '.'
0000000000009da8         dd         0x00000024                                  ; Length of the record
0000000000009dac         dd         0x0000001c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009db0         db         0x50, 0x76, 2 dup (0xff)                    ; begin 0x1400
0000000000009db4         db         0x50, 0x03, 2 dup (0x00)                    ; length 0x350 (end at 0x1750)
0000000000009db8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009db9         db  0x0e ; '.'
0000000000009dba         db  0x10 ; '.'
0000000000009dbb         db  0x46 ; 'F'
0000000000009dbc         db  0x0e ; '.'
0000000000009dbd         db  0x18 ; '.'
0000000000009dbe         db  0x4a ; 'J'
0000000000009dbf         db  0x0f ; '.'
0000000000009dc0         db  0x0b ; '.'
0000000000009dc1         db  0x77 ; 'w'
0000000000009dc2         db  0x08 ; '.'
0000000000009dc3         db  0x80 ; '.'
0000000000009dc4         db  0x00 ; '.'
0000000000009dc5         db  0x3f ; '?'
0000000000009dc6         db  0x1a ; '.'
0000000000009dc7         db  0x3b ; ';'
0000000000009dc8         db  0x2a ; '*'
0000000000009dc9         db  0x33 ; '3'
0000000000009dca         db  0x24 ; '$'
0000000000009dcb         db  0x22 ; '"'
0000000000009dcc         db  0x00 ; '.'
0000000000009dcd         db  0x00 ; '.'
0000000000009dce         db  0x00 ; '.'
0000000000009dcf         db  0x00 ; '.'
0000000000009dd0         dd         0x00000014                                  ; Length of the record
0000000000009dd4         dd         0x00000044                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009dd8         db         0x78, 0x79, 2 dup (0xff)                    ; begin 0x1750
0000000000009ddc         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1758)
0000000000009de0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009de1         align      8
0000000000009de8         dd         0x00000038                                  ; Length of the record
0000000000009dec         dd         0x0000005c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009df0         db         0x30, 0x88, 2 dup (0xff)                    ; begin 0x2620
0000000000009df4         db         0x16, 0x05, 2 dup (0x00)                    ; length 0x516 (end at 0x2b36)
0000000000009df8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009df9         db  0x42 ; 'B'
0000000000009dfa         db  0x0e ; '.'
0000000000009dfb         db  0x10 ; '.'
0000000000009dfc         db  0x8d ; '.'
0000000000009dfd         db  0x02 ; '.'
0000000000009dfe         db  0x42 ; 'B'
0000000000009dff         db  0x0e ; '.'
0000000000009e00         db  0x18 ; '.'
0000000000009e01         db  0x8c ; '.'
0000000000009e02         db  0x03 ; '.'
0000000000009e03         db  0x44 ; 'D'
0000000000009e04         db  0x0e ; '.'
0000000000009e05         db  0x20 ; ' '
0000000000009e06         db  0x86 ; '.'
0000000000009e07         db  0x04 ; '.'
0000000000009e08         db  0x41 ; 'A'
0000000000009e09         db  0x0e ; '.'
0000000000009e0a         db  0x28 ; '('
0000000000009e0b         db  0x83 ; '.'
0000000000009e0c         db  0x05 ; '.'
0000000000009e0d         db  0x44 ; 'D'
0000000000009e0e         db  0x0e ; '.'
0000000000009e0f         db  0x40 ; '@'
0000000000009e10         db  0x02 ; '.'
0000000000009e11         db  0x6f ; 'o'
0000000000009e12         db  0x0a ; '.'
0000000000009e13         db  0x0e ; '.'
0000000000009e14         db  0x28 ; '('
0000000000009e15         db  0x47 ; 'G'
0000000000009e16         db  0x0e ; '.'
0000000000009e17         db  0x20 ; ' '
0000000000009e18         db  0x41 ; 'A'
0000000000009e19         db  0x0e ; '.'
0000000000009e1a         db  0x18 ; '.'
0000000000009e1b         db  0x42 ; 'B'
0000000000009e1c         db  0x0e ; '.'
0000000000009e1d         db  0x10 ; '.'
0000000000009e1e         db  0x42 ; 'B'
0000000000009e1f         db  0x0e ; '.'
0000000000009e20         db  0x08 ; '.'
0000000000009e21         db  0x48 ; 'H'
0000000000009e22         db  0x0b ; '.'
0000000000009e23         db  0x00 ; '.'
0000000000009e24         dd         0x00000038                                  ; Length of the record
0000000000009e28         dd         0x00000098                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009e2c         db         0x14, 0x8d, 2 dup (0xff)                    ; begin 0x2b40
0000000000009e30         db         0xa9, 3 dup (0x00)                          ; length 0xa9 (end at 0x2be9)
0000000000009e34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e35         db  0x42 ; 'B'
0000000000009e36         db  0x0e ; '.'
0000000000009e37         db  0x10 ; '.'
0000000000009e38         db  0x8c ; '.'
0000000000009e39         db  0x02 ; '.'
0000000000009e3a         db  0x41 ; 'A'
0000000000009e3b         db  0x0e ; '.'
0000000000009e3c         db  0x18 ; '.'
0000000000009e3d         db  0x86 ; '.'
0000000000009e3e         db  0x03 ; '.'
0000000000009e3f         db  0x44 ; 'D'
0000000000009e40         db  0x0e ; '.'
0000000000009e41         db  0x20 ; ' '
0000000000009e42         db  0x83 ; '.'
0000000000009e43         db  0x04 ; '.'
0000000000009e44         db  0x02 ; '.'
0000000000009e45         db  0x53 ; 'S'
0000000000009e46         db  0x0a ; '.'
0000000000009e47         db  0x0e ; '.'
0000000000009e48         db  0x18 ; '.'
0000000000009e49         db  0x41 ; 'A'
0000000000009e4a         db  0x0e ; '.'
0000000000009e4b         db  0x10 ; '.'
0000000000009e4c         db  0x42 ; 'B'
0000000000009e4d         db  0x0e ; '.'
0000000000009e4e         db  0x08 ; '.'
0000000000009e4f         db  0x43 ; 'C'
0000000000009e50         db  0x0b ; '.'
0000000000009e51         db  0x61 ; 'a'
0000000000009e52         db  0x0a ; '.'
0000000000009e53         db  0x0e ; '.'
0000000000009e54         db  0x18 ; '.'
0000000000009e55         db  0x4b ; 'K'
0000000000009e56         db  0x0e ; '.'
0000000000009e57         db  0x10 ; '.'
0000000000009e58         db  0x42 ; 'B'
0000000000009e59         db  0x0e ; '.'
0000000000009e5a         db  0x08 ; '.'
0000000000009e5b         db  0x42 ; 'B'
0000000000009e5c         db  0x0b ; '.'
0000000000009e5d         db  0x00 ; '.'
0000000000009e5e         db  0x00 ; '.'
0000000000009e5f         db  0x00 ; '.'
0000000000009e60         dd         0x00000028                                  ; Length of the record
0000000000009e64         dd         0x000000d4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009e68         db         0x88, 0x8d, 2 dup (0xff)                    ; begin 0x2bf0
0000000000009e6c         db         0xab, 3 dup (0x00)                          ; length 0xab (end at 0x2c9b)
0000000000009e70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e71         db  0x41 ; 'A'
0000000000009e72         db  0x0e ; '.'
0000000000009e73         db  0x10 ; '.'
0000000000009e74         db  0x86 ; '.'
0000000000009e75         db  0x02 ; '.'
0000000000009e76         db  0x41 ; 'A'
0000000000009e77         db  0x0e ; '.'
0000000000009e78         db  0x18 ; '.'
0000000000009e79         db  0x83 ; '.'
0000000000009e7a         db  0x03 ; '.'
0000000000009e7b         db  0x47 ; 'G'
0000000000009e7c         db  0x0e ; '.'
0000000000009e7d         db  0x30 ; '0'
0000000000009e7e         db  0x02 ; '.'
0000000000009e7f         db  0x64 ; 'd'
0000000000009e80         db  0x0a ; '.'
0000000000009e81         db  0x0e ; '.'
0000000000009e82         db  0x18 ; '.'
0000000000009e83         db  0x41 ; 'A'
0000000000009e84         db  0x0e ; '.'
0000000000009e85         db  0x10 ; '.'
0000000000009e86         db  0x41 ; 'A'
0000000000009e87         db  0x0e ; '.'
0000000000009e88         db  0x08 ; '.'
0000000000009e89         db  0x41 ; 'A'
0000000000009e8a         db  0x0b ; '.'
0000000000009e8b         db  0x00 ; '.'
0000000000009e8c         dd         0x00000028                                  ; Length of the record
0000000000009e90         dd         0x00000100                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009e94         db         0x0c, 0x8e, 2 dup (0xff)                    ; begin 0x2ca0
0000000000009e98         db         0x02, 0x04, 2 dup (0x00)                    ; length 0x402 (end at 0x30a2)
0000000000009e9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e9d         db  0x42 ; 'B'
0000000000009e9e         db  0x0e ; '.'
0000000000009e9f         db  0x10 ; '.'
0000000000009ea0         db  0x8d ; '.'
0000000000009ea1         db  0x02 ; '.'
0000000000009ea2         db  0x42 ; 'B'
0000000000009ea3         db  0x0e ; '.'
0000000000009ea4         db  0x18 ; '.'
0000000000009ea5         db  0x8c ; '.'
0000000000009ea6         db  0x03 ; '.'
0000000000009ea7         db  0x46 ; 'F'
0000000000009ea8         db  0x0e ; '.'
0000000000009ea9         db  0x20 ; ' '
0000000000009eaa         db  0x86 ; '.'
0000000000009eab         db  0x04 ; '.'
0000000000009eac         db  0x41 ; 'A'
0000000000009ead         db  0x0e ; '.'
0000000000009eae         db  0x28 ; '('
0000000000009eaf         db  0x83 ; '.'
0000000000009eb0         db  0x05 ; '.'
0000000000009eb1         db  0x49 ; 'I'
0000000000009eb2         db  0x0e ; '.'
0000000000009eb3         db  0xb0 ; '.'
0000000000009eb4         db  0x01 ; '.'
0000000000009eb5         db  0x00 ; '.'
0000000000009eb6         db  0x00 ; '.'
0000000000009eb7         db  0x00 ; '.'
0000000000009eb8         dd         0x00000084                                  ; Length of the record
0000000000009ebc         dd         0x0000012c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009ec0         db         0xa0, 0x78, 2 dup (0xff)                    ; begin 0x1760
0000000000009ec4         db         0xa1, 0x0d, 2 dup (0x00)                    ; length 0xda1 (end at 0x2501)
0000000000009ec8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ec9         db  0x42 ; 'B'
0000000000009eca         db  0x0e ; '.'
0000000000009ecb         db  0x10 ; '.'
0000000000009ecc         db  0x8f ; '.'
0000000000009ecd         db  0x02 ; '.'
0000000000009ece         db  0x42 ; 'B'
0000000000009ecf         db  0x0e ; '.'
0000000000009ed0         db  0x18 ; '.'
0000000000009ed1         db  0x8e ; '.'
0000000000009ed2         db  0x03 ; '.'
0000000000009ed3         db  0x42 ; 'B'
0000000000009ed4         db  0x0e ; '.'
0000000000009ed5         db  0x20 ; ' '
0000000000009ed6         db  0x8d ; '.'
0000000000009ed7         db  0x04 ; '.'
0000000000009ed8         db  0x42 ; 'B'
0000000000009ed9         db  0x0e ; '.'
0000000000009eda         db  0x28 ; '('
0000000000009edb         db  0x8c ; '.'
0000000000009edc         db  0x05 ; '.'
0000000000009edd         db  0x41 ; 'A'
0000000000009ede         db  0x0e ; '.'
0000000000009edf         db  0x30 ; '0'
0000000000009ee0         db  0x86 ; '.'
0000000000009ee1         db  0x06 ; '.'
0000000000009ee2         db  0x41 ; 'A'
0000000000009ee3         db  0x0e ; '.'
0000000000009ee4         db  0x38 ; '8'
0000000000009ee5         db  0x83 ; '.'
0000000000009ee6         db  0x07 ; '.'
0000000000009ee7         db  0x4c ; 'L'
0000000000009ee8         db  0x0e ; '.'
0000000000009ee9         db  0xc0 ; '.'
0000000000009eea         db  0x03 ; '.'
0000000000009eeb         db  0x03 ; '.'
0000000000009eec         db  0xe9 ; '.'
0000000000009eed         db  0x01 ; '.'
0000000000009eee         db  0x0a ; '.'
0000000000009eef         db  0x0e ; '.'
0000000000009ef0         db  0x38 ; '8'
0000000000009ef1         db  0x41 ; 'A'
0000000000009ef2         db  0x0e ; '.'
0000000000009ef3         db  0x30 ; '0'
0000000000009ef4         db  0x41 ; 'A'
0000000000009ef5         db  0x0e ; '.'
0000000000009ef6         db  0x28 ; '('
0000000000009ef7         db  0x42 ; 'B'
0000000000009ef8         db  0x0e ; '.'
0000000000009ef9         db  0x20 ; ' '
0000000000009efa         db  0x42 ; 'B'
0000000000009efb         db  0x0e ; '.'
0000000000009efc         db  0x18 ; '.'
0000000000009efd         db  0x42 ; 'B'
0000000000009efe         db  0x0e ; '.'
0000000000009eff         db  0x10 ; '.'
0000000000009f00         db  0x42 ; 'B'
0000000000009f01         db  0x0e ; '.'
0000000000009f02         db  0x08 ; '.'
0000000000009f03         db  0x47 ; 'G'
0000000000009f04         db  0x0b ; '.'
0000000000009f05         db  0x03 ; '.'
0000000000009f06         db  0x7b ; '{'
0000000000009f07         db  0x07 ; '.'
0000000000009f08         db  0x0e ; '.'
0000000000009f09         db  0xd0 ; '.'
0000000000009f0a         db  0x03 ; '.'
0000000000009f0b         db  0x4f ; 'O'
0000000000009f0c         db  0x0e ; '.'
0000000000009f0d         db  0xc8 ; '.'
0000000000009f0e         db  0x03 ; '.'
0000000000009f0f         db  0x42 ; 'B'
0000000000009f10         db  0x0e ; '.'
0000000000009f11         db  0xc0 ; '.'
0000000000009f12         db  0x03 ; '.'
0000000000009f13         db  0x03 ; '.'
0000000000009f14         db  0xd5 ; '.'
0000000000009f15         db  0x01 ; '.'
0000000000009f16         db  0x0e ; '.'
0000000000009f17         db  0xd0 ; '.'
0000000000009f18         db  0x03 ; '.'
0000000000009f19         db  0x52 ; 'R'
0000000000009f1a         db  0x0e ; '.'
0000000000009f1b         db  0xc8 ; '.'
0000000000009f1c         db  0x03 ; '.'
0000000000009f1d         db  0x41 ; 'A'
0000000000009f1e         db  0x0e ; '.'
0000000000009f1f         db  0xc0 ; '.'
0000000000009f20         db  0x03 ; '.'
0000000000009f21         db  0x02 ; '.'
0000000000009f22         db  0xea ; '.'
0000000000009f23         db  0x0e ; '.'
0000000000009f24         db  0xd0 ; '.'
0000000000009f25         db  0x03 ; '.'
0000000000009f26         db  0x56 ; 'V'
0000000000009f27         db  0x0e ; '.'
0000000000009f28         db  0xc8 ; '.'
0000000000009f29         db  0x03 ; '.'
0000000000009f2a         db  0x41 ; 'A'
0000000000009f2b         db  0x0e ; '.'
0000000000009f2c         db  0xc0 ; '.'
0000000000009f2d         db  0x03 ; '.'
0000000000009f2e         db  0x49 ; 'I'
0000000000009f2f         db  0x0e ; '.'
0000000000009f30         db  0xd0 ; '.'
0000000000009f31         db  0x03 ; '.'
0000000000009f32         db  0x52 ; 'R'
0000000000009f33         db  0x0e ; '.'
0000000000009f34         db  0xc8 ; '.'
0000000000009f35         db  0x03 ; '.'
0000000000009f36         db  0x42 ; 'B'
0000000000009f37         db  0x0e ; '.'
0000000000009f38         db  0xc0 ; '.'
0000000000009f39         db  0x03 ; '.'
0000000000009f3a         db  0x00 ; '.'
0000000000009f3b         db  0x00 ; '.'
0000000000009f3c         db  0x00 ; '.'
0000000000009f3d         db  0x00 ; '.'
0000000000009f3e         db  0x00 ; '.'
0000000000009f3f         db  0x00 ; '.'
0000000000009f40         dd         0x0000003c                                  ; Length of the record
0000000000009f44         dd         0x000001b4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009f48         db         0x68, 0x91, 2 dup (0xff)                    ; begin 0x30b0
0000000000009f4c         db         0xa7, 3 dup (0x00)                          ; length 0xa7 (end at 0x3157)
0000000000009f50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f51         db  0x42 ; 'B'
0000000000009f52         db  0x0e ; '.'
0000000000009f53         db  0x10 ; '.'
0000000000009f54         db  0x8d ; '.'
0000000000009f55         db  0x02 ; '.'
0000000000009f56         db  0x42 ; 'B'
0000000000009f57         db  0x0e ; '.'
0000000000009f58         db  0x18 ; '.'
0000000000009f59         db  0x8c ; '.'
0000000000009f5a         db  0x03 ; '.'
0000000000009f5b         db  0x41 ; 'A'
0000000000009f5c         db  0x0e ; '.'
0000000000009f5d         db  0x20 ; ' '
0000000000009f5e         db  0x86 ; '.'
0000000000009f5f         db  0x04 ; '.'
0000000000009f60         db  0x41 ; 'A'
0000000000009f61         db  0x0e ; '.'
0000000000009f62         db  0x28 ; '('
0000000000009f63         db  0x83 ; '.'
0000000000009f64         db  0x05 ; '.'
0000000000009f65         db  0x4a ; 'J'
0000000000009f66         db  0x0e ; '.'
0000000000009f67         db  0x60 ; '`'
0000000000009f68         db  0x02 ; '.'
0000000000009f69         db  0x49 ; 'I'
0000000000009f6a         db  0x0a ; '.'
0000000000009f6b         db  0x0e ; '.'
0000000000009f6c         db  0x28 ; '('
0000000000009f6d         db  0x41 ; 'A'
0000000000009f6e         db  0x0e ; '.'
0000000000009f6f         db  0x20 ; ' '
0000000000009f70         db  0x41 ; 'A'
0000000000009f71         db  0x0e ; '.'
0000000000009f72         db  0x18 ; '.'
0000000000009f73         db  0x42 ; 'B'
0000000000009f74         db  0x0e ; '.'
0000000000009f75         db  0x10 ; '.'
0000000000009f76         db  0x42 ; 'B'
0000000000009f77         db  0x0e ; '.'
0000000000009f78         db  0x08 ; '.'
0000000000009f79         db  0x41 ; 'A'
0000000000009f7a         db  0x0b ; '.'
0000000000009f7b         db  0x00 ; '.'
0000000000009f7c         db  0x00 ; '.'
0000000000009f7d         db  0x00 ; '.'
0000000000009f7e         db  0x00 ; '.'
0000000000009f7f         db  0x00 ; '.'
0000000000009f80         dd         0x00000010                                  ; Length of the record
0000000000009f84         dd         0x000001f4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009f88         db         0xd8, 0x91, 2 dup (0xff)                    ; begin 0x3160
0000000000009f8c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3168)
0000000000009f90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f91         align      4
0000000000009f94         dd         0x00000010                                  ; Length of the record
0000000000009f98         dd         0x00000208                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009f9c         db         0xd4, 0x91, 2 dup (0xff)                    ; begin 0x3170
0000000000009fa0         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3178)
0000000000009fa4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009fa5         align      8
0000000000009fa8         dd         0x0000002c                                  ; Length of the record
0000000000009fac         dd         0x0000021c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009fb0         db         0xd0, 0x91, 2 dup (0xff)                    ; begin 0x3180
0000000000009fb4         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3224)
0000000000009fb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009fb9         db  0x41 ; 'A'
0000000000009fba         db  0x0e ; '.'
0000000000009fbb         db  0x10 ; '.'
0000000000009fbc         db  0x86 ; '.'
0000000000009fbd         db  0x02 ; '.'
0000000000009fbe         db  0x41 ; 'A'
0000000000009fbf         db  0x0e ; '.'
0000000000009fc0         db  0x18 ; '.'
0000000000009fc1         db  0x83 ; '.'
0000000000009fc2         db  0x03 ; '.'
0000000000009fc3         db  0x44 ; 'D'
0000000000009fc4         db  0x0e ; '.'
0000000000009fc5         db  0x20 ; ' '
0000000000009fc6         db  0x7a ; 'z'
0000000000009fc7         db  0x0a ; '.'
0000000000009fc8         db  0x0e ; '.'
0000000000009fc9         db  0x18 ; '.'
0000000000009fca         db  0x41 ; 'A'
0000000000009fcb         db  0x0e ; '.'
0000000000009fcc         db  0x10 ; '.'
0000000000009fcd         db  0x41 ; 'A'
0000000000009fce         db  0x0e ; '.'
0000000000009fcf         db  0x08 ; '.'
0000000000009fd0         db  0x41 ; 'A'
0000000000009fd1         db  0x0b ; '.'
0000000000009fd2         db  0x00 ; '.'
0000000000009fd3         db  0x00 ; '.'
0000000000009fd4         db  0x00 ; '.'
0000000000009fd5         db  0x00 ; '.'
0000000000009fd6         db  0x00 ; '.'
0000000000009fd7         db  0x00 ; '.'
0000000000009fd8         dd         0x0000001c                                  ; Length of the record
0000000000009fdc         dd         0x0000024c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
0000000000009fe0         db         0x50, 0x92, 2 dup (0xff)                    ; begin 0x3230
0000000000009fe4         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x32cf)
0000000000009fe8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009fe9         db  0x44 ; 'D'
0000000000009fea         db  0x0e ; '.'
0000000000009feb         db  0x10 ; '.'
0000000000009fec         db  0x83 ; '.'
0000000000009fed         db  0x02 ; '.'
0000000000009fee         db  0x02 ; '.'
0000000000009fef         db  0x78 ; 'x'
0000000000009ff0         db  0x0a ; '.'
0000000000009ff1         db  0x0e ; '.'
0000000000009ff2         db  0x08 ; '.'
0000000000009ff3         db  0x41 ; 'A'
0000000000009ff4         db  0x0b ; '.'
0000000000009ff5         db  0x00 ; '.'
0000000000009ff6         db  0x00 ; '.'
0000000000009ff7         db  0x00 ; '.'
0000000000009ff8         dd         0x00000040                                  ; Length of the record
0000000000009ffc         dd         0x0000026c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a000         db         0xd0, 0x92, 2 dup (0xff)                    ; begin 0x32d0
000000000000a004         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x33b7)
000000000000a008         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a009         db  0x41 ; 'A'
000000000000a00a         db  0x0e ; '.'
000000000000a00b         db  0x10 ; '.'
000000000000a00c         db  0x86 ; '.'
000000000000a00d         db  0x02 ; '.'
000000000000a00e         db  0x41 ; 'A'
000000000000a00f         db  0x0e ; '.'
000000000000a010         db  0x18 ; '.'
000000000000a011         db  0x83 ; '.'
000000000000a012         db  0x03 ; '.'
000000000000a013         db  0x49 ; 'I'
000000000000a014         db  0x0e ; '.'
000000000000a015         db  0x20 ; ' '
000000000000a016         db  0x6e ; 'n'
000000000000a017         db  0x0a ; '.'
000000000000a018         db  0x0e ; '.'
000000000000a019         db  0x18 ; '.'
000000000000a01a         db  0x41 ; 'A'
000000000000a01b         db  0x0e ; '.'
000000000000a01c         db  0x10 ; '.'
000000000000a01d         db  0x41 ; 'A'
000000000000a01e         db  0x0e ; '.'
000000000000a01f         db  0x08 ; '.'
000000000000a020         db  0x45 ; 'E'
000000000000a021         db  0x0b ; '.'
000000000000a022         db  0x02 ; '.'
000000000000a023         db  0x4a ; 'J'
000000000000a024         db  0x0a ; '.'
000000000000a025         db  0x0e ; '.'
000000000000a026         db  0x18 ; '.'
000000000000a027         db  0x41 ; 'A'
000000000000a028         db  0x0e ; '.'
000000000000a029         db  0x10 ; '.'
000000000000a02a         db  0x41 ; 'A'
000000000000a02b         db  0x0e ; '.'
000000000000a02c         db  0x08 ; '.'
000000000000a02d         db  0x44 ; 'D'
000000000000a02e         db  0x0b ; '.'
000000000000a02f         db  0x02 ; '.'
000000000000a030         db  0x54 ; 'T'
000000000000a031         db  0x0e ; '.'
000000000000a032         db  0x18 ; '.'
000000000000a033         db  0x41 ; 'A'
000000000000a034         db  0x0e ; '.'
000000000000a035         db  0x10 ; '.'
000000000000a036         db  0x41 ; 'A'
000000000000a037         db  0x0e ; '.'
000000000000a038         db  0x08 ; '.'
000000000000a039         db  0x00 ; '.'
000000000000a03a         db  0x00 ; '.'
000000000000a03b         db  0x00 ; '.'
000000000000a03c         dd         0x00000074                                  ; Length of the record
000000000000a040         dd         0x000002b0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a044         db         0x7c, 0x93, 2 dup (0xff)                    ; begin 0x33c0
000000000000a048         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x45f4)
000000000000a04c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a04d         db  0x42 ; 'B'
000000000000a04e         db  0x0e ; '.'
000000000000a04f         db  0x10 ; '.'
000000000000a050         db  0x8f ; '.'
000000000000a051         db  0x02 ; '.'
000000000000a052         db  0x42 ; 'B'
000000000000a053         db  0x0e ; '.'
000000000000a054         db  0x18 ; '.'
000000000000a055         db  0x8e ; '.'
000000000000a056         db  0x03 ; '.'
000000000000a057         db  0x45 ; 'E'
000000000000a058         db  0x0e ; '.'
000000000000a059         db  0x20 ; ' '
000000000000a05a         db  0x8d ; '.'
000000000000a05b         db  0x04 ; '.'
000000000000a05c         db  0x42 ; 'B'
000000000000a05d         db  0x0e ; '.'
000000000000a05e         db  0x28 ; '('
000000000000a05f         db  0x8c ; '.'
000000000000a060         db  0x05 ; '.'
000000000000a061         db  0x44 ; 'D'
000000000000a062         db  0x0e ; '.'
000000000000a063         db  0x30 ; '0'
000000000000a064         db  0x86 ; '.'
000000000000a065         db  0x06 ; '.'
000000000000a066         db  0x41 ; 'A'
000000000000a067         db  0x0e ; '.'
000000000000a068         db  0x38 ; '8'
000000000000a069         db  0x83 ; '.'
000000000000a06a         db  0x07 ; '.'
000000000000a06b         db  0x53 ; 'S'
000000000000a06c         db  0x0e ; '.'
000000000000a06d         db  0xf0 ; '.'
000000000000a06e         db  0x01 ; '.'
000000000000a06f         db  0x03 ; '.'
000000000000a070         db  0x81 ; '.'
000000000000a071         db  0x0b ; '.'
000000000000a072         db  0x0e ; '.'
000000000000a073         db  0xf8 ; '.'
000000000000a074         db  0x01 ; '.'
000000000000a075         db  0x4a ; 'J'
000000000000a076         db  0x0e ; '.'
000000000000a077         db  0x80 ; '.'
000000000000a078         db  0x02 ; '.'
000000000000a079         db  0x44 ; 'D'
000000000000a07a         db  0x0e ; '.'
000000000000a07b         db  0x88 ; '.'
000000000000a07c         db  0x02 ; '.'
000000000000a07d         db  0x45 ; 'E'
000000000000a07e         db  0x0e ; '.'
000000000000a07f         db  0x90 ; '.'
000000000000a080         db  0x02 ; '.'
000000000000a081         db  0x5f ; '_'
000000000000a082         db  0x0e ; '.'
000000000000a083         db  0xf0 ; '.'
000000000000a084         db  0x01 ; '.'
000000000000a085         db  0x64 ; 'd'
000000000000a086         db  0x0a ; '.'
000000000000a087         db  0x0e ; '.'
000000000000a088         db  0x38 ; '8'
000000000000a089         db  0x41 ; 'A'
000000000000a08a         db  0x0e ; '.'
000000000000a08b         db  0x30 ; '0'
000000000000a08c         db  0x41 ; 'A'
000000000000a08d         db  0x0e ; '.'
000000000000a08e         db  0x28 ; '('
000000000000a08f         db  0x42 ; 'B'
000000000000a090         db  0x0e ; '.'
000000000000a091         db  0x20 ; ' '
000000000000a092         db  0x42 ; 'B'
000000000000a093         db  0x0e ; '.'
000000000000a094         db  0x18 ; '.'
000000000000a095         db  0x42 ; 'B'
000000000000a096         db  0x0e ; '.'
000000000000a097         db  0x10 ; '.'
000000000000a098         db  0x42 ; 'B'
000000000000a099         db  0x0e ; '.'
000000000000a09a         db  0x08 ; '.'
000000000000a09b         db  0x44 ; 'D'
000000000000a09c         db  0x0b ; '.'
000000000000a09d         db  0x03 ; '.'
000000000000a09e         db  0x99 ; '.'
000000000000a09f         db  0x05 ; '.'
000000000000a0a0         db  0x0e ; '.'
000000000000a0a1         db  0xf8 ; '.'
000000000000a0a2         db  0x01 ; '.'
000000000000a0a3         db  0x4d ; 'M'
000000000000a0a4         db  0x0e ; '.'
000000000000a0a5         db  0x80 ; '.'
000000000000a0a6         db  0x02 ; '.'
000000000000a0a7         db  0x44 ; 'D'
000000000000a0a8         db  0x0e ; '.'
000000000000a0a9         db  0x88 ; '.'
000000000000a0aa         db  0x02 ; '.'
000000000000a0ab         db  0x47 ; 'G'
000000000000a0ac         db  0x0e ; '.'
000000000000a0ad         db  0x90 ; '.'
000000000000a0ae         db  0x02 ; '.'
000000000000a0af         db  0x5b ; '['
000000000000a0b0         db  0x0e ; '.'
000000000000a0b1         db  0xf0 ; '.'
000000000000a0b2         db  0x01 ; '.'
000000000000a0b3         db  0x00 ; '.'
000000000000a0b4         dd         0x00000068                                  ; Length of the record
000000000000a0b8         dd         0x00000328                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a0bc         db         0x44, 0xa5, 2 dup (0xff)                    ; begin 0x4600
000000000000a0c0         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x47ab)
000000000000a0c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0c5         db  0x42 ; 'B'
000000000000a0c6         db  0x0e ; '.'
000000000000a0c7         db  0x10 ; '.'
000000000000a0c8         db  0x8f ; '.'
000000000000a0c9         db  0x02 ; '.'
000000000000a0ca         db  0x42 ; 'B'
000000000000a0cb         db  0x0e ; '.'
000000000000a0cc         db  0x18 ; '.'
000000000000a0cd         db  0x8e ; '.'
000000000000a0ce         db  0x03 ; '.'
000000000000a0cf         db  0x45 ; 'E'
000000000000a0d0         db  0x0e ; '.'
000000000000a0d1         db  0x20 ; ' '
000000000000a0d2         db  0x8d ; '.'
000000000000a0d3         db  0x04 ; '.'
000000000000a0d4         db  0x42 ; 'B'
000000000000a0d5         db  0x0e ; '.'
000000000000a0d6         db  0x28 ; '('
000000000000a0d7         db  0x8c ; '.'
000000000000a0d8         db  0x05 ; '.'
000000000000a0d9         db  0x44 ; 'D'
000000000000a0da         db  0x0e ; '.'
000000000000a0db         db  0x30 ; '0'
000000000000a0dc         db  0x86 ; '.'
000000000000a0dd         db  0x06 ; '.'
000000000000a0de         db  0x41 ; 'A'
000000000000a0df         db  0x0e ; '.'
000000000000a0e0         db  0x38 ; '8'
000000000000a0e1         db  0x83 ; '.'
000000000000a0e2         db  0x07 ; '.'
000000000000a0e3         db  0x47 ; 'G'
000000000000a0e4         db  0x0e ; '.'
000000000000a0e5         db  0x60 ; '`'
000000000000a0e6         db  0x02 ; '.'
000000000000a0e7         db  0x99 ; '.'
000000000000a0e8         db  0x0e ; '.'
000000000000a0e9         db  0x68 ; 'h'
000000000000a0ea         db  0x5f ; '_'
000000000000a0eb         db  0x0e ; '.'
000000000000a0ec         db  0x70 ; 'p'
000000000000a0ed         db  0x46 ; 'F'
000000000000a0ee         db  0x0e ; '.'
000000000000a0ef         db  0x78 ; 'x'
000000000000a0f0         db  0x42 ; 'B'
000000000000a0f1         db  0x0e ; '.'
000000000000a0f2         db  0x80 ; '.'
000000000000a0f3         db  0x01 ; '.'
000000000000a0f4         db  0x59 ; 'Y'
000000000000a0f5         db  0x0e ; '.'
000000000000a0f6         db  0x60 ; '`'
000000000000a0f7         db  0x02 ; '.'
000000000000a0f8         db  0x40 ; '@'
000000000000a0f9         db  0x0e ; '.'
000000000000a0fa         db  0x68 ; 'h'
000000000000a0fb         db  0x4b ; 'K'
000000000000a0fc         db  0x0e ; '.'
000000000000a0fd         db  0x70 ; 'p'
000000000000a0fe         db  0x43 ; 'C'
000000000000a0ff         db  0x0e ; '.'
000000000000a100         db  0x78 ; 'x'
000000000000a101         db  0x45 ; 'E'
000000000000a102         db  0x0e ; '.'
000000000000a103         db  0x80 ; '.'
000000000000a104         db  0x01 ; '.'
000000000000a105         db  0x5e ; '^'
000000000000a106         db  0x0e ; '.'
000000000000a107         db  0x60 ; '`'
000000000000a108         db  0x4c ; 'L'
000000000000a109         db  0x0a ; '.'
000000000000a10a         db  0x0e ; '.'
000000000000a10b         db  0x38 ; '8'
000000000000a10c         db  0x44 ; 'D'
000000000000a10d         db  0x0e ; '.'
000000000000a10e         db  0x30 ; '0'
000000000000a10f         db  0x41 ; 'A'
000000000000a110         db  0x0e ; '.'
000000000000a111         db  0x28 ; '('
000000000000a112         db  0x42 ; 'B'
000000000000a113         db  0x0e ; '.'
000000000000a114         db  0x20 ; ' '
000000000000a115         db  0x42 ; 'B'
000000000000a116         db  0x0e ; '.'
000000000000a117         db  0x18 ; '.'
000000000000a118         db  0x42 ; 'B'
000000000000a119         db  0x0e ; '.'
000000000000a11a         db  0x10 ; '.'
000000000000a11b         db  0x42 ; 'B'
000000000000a11c         db  0x0e ; '.'
000000000000a11d         db  0x08 ; '.'
000000000000a11e         db  0x46 ; 'F'
000000000000a11f         db  0x0b ; '.'
000000000000a120         dd         0x00000028                                  ; Length of the record
000000000000a124         dd         0x00000394                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a128         db         0x88, 0xa6, 2 dup (0xff)                    ; begin 0x47b0
000000000000a12c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x47e6)
000000000000a130         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a131         db  0x42 ; 'B'
000000000000a132         db  0x0e ; '.'
000000000000a133         db  0x10 ; '.'
000000000000a134         db  0x8c ; '.'
000000000000a135         db  0x02 ; '.'
000000000000a136         db  0x41 ; 'A'
000000000000a137         db  0x0e ; '.'
000000000000a138         db  0x18 ; '.'
000000000000a139         db  0x86 ; '.'
000000000000a13a         db  0x03 ; '.'
000000000000a13b         db  0x41 ; 'A'
000000000000a13c         db  0x0e ; '.'
000000000000a13d         db  0x20 ; ' '
000000000000a13e         db  0x83 ; '.'
000000000000a13f         db  0x04 ; '.'
000000000000a140         db  0x6e ; 'n'
000000000000a141         db  0x0e ; '.'
000000000000a142         db  0x18 ; '.'
000000000000a143         db  0x41 ; 'A'
000000000000a144         db  0x0e ; '.'
000000000000a145         db  0x10 ; '.'
000000000000a146         db  0x42 ; 'B'
000000000000a147         db  0x0e ; '.'
000000000000a148         db  0x08 ; '.'
000000000000a149         db  0x00 ; '.'
000000000000a14a         db  0x00 ; '.'
000000000000a14b         db  0x00 ; '.'
000000000000a14c         dd         0x00000010                                  ; Length of the record
000000000000a150         dd         0x000003c0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a154         db         0x9c, 0xa6, 2 dup (0xff)                    ; begin 0x47f0
000000000000a158         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4801)
000000000000a15c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a15d         align      32
000000000000a160         dd         0x00000010                                  ; Length of the record
000000000000a164         dd         0x000003d4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a168         db         0xa8, 0xa6, 2 dup (0xff)                    ; begin 0x4810
000000000000a16c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4821)
000000000000a170         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a171         align      4
000000000000a174         dd         0x00000010                                  ; Length of the record
000000000000a178         dd         0x000003e8                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a17c         db         0xb4, 0xa6, 2 dup (0xff)                    ; begin 0x4830
000000000000a180         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x4865)
000000000000a184         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a185         align      8
000000000000a188         dd         0x00000010                                  ; Length of the record
000000000000a18c         dd         0x000003fc                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a190         db         0xe0, 0xa6, 2 dup (0xff)                    ; begin 0x4870
000000000000a194         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x4885)
000000000000a198         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a199         align      4
000000000000a19c         dd         0x00000010                                  ; Length of the record
000000000000a1a0         dd         0x00000410                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a1a4         db         0xec, 0xa6, 2 dup (0xff)                    ; begin 0x4890
000000000000a1a8         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x48c0)
000000000000a1ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1ad         db  0x6b ; 'k'
000000000000a1ae         db  0x0e ; '.'
000000000000a1af         db  0x10 ; '.'
000000000000a1b0         dd         0x00000050                                  ; Length of the record
000000000000a1b4         dd         0x00000424                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a1b8         db         0x08, 0xa7, 2 dup (0xff)                    ; begin 0x48c0
000000000000a1bc         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4934)
000000000000a1c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1c1         db  0x42 ; 'B'
000000000000a1c2         db  0x0e ; '.'
000000000000a1c3         db  0x10 ; '.'
000000000000a1c4         db  0x8f ; '.'
000000000000a1c5         db  0x02 ; '.'
000000000000a1c6         db  0x42 ; 'B'
000000000000a1c7         db  0x0e ; '.'
000000000000a1c8         db  0x18 ; '.'
000000000000a1c9         db  0x8e ; '.'
000000000000a1ca         db  0x03 ; '.'
000000000000a1cb         db  0x49 ; 'I'
000000000000a1cc         db  0x0e ; '.'
000000000000a1cd         db  0x20 ; ' '
000000000000a1ce         db  0x8d ; '.'
000000000000a1cf         db  0x04 ; '.'
000000000000a1d0         db  0x42 ; 'B'
000000000000a1d1         db  0x0e ; '.'
000000000000a1d2         db  0x28 ; '('
000000000000a1d3         db  0x8c ; '.'
000000000000a1d4         db  0x05 ; '.'
000000000000a1d5         db  0x44 ; 'D'
000000000000a1d6         db  0x0e ; '.'
000000000000a1d7         db  0x30 ; '0'
000000000000a1d8         db  0x86 ; '.'
000000000000a1d9         db  0x06 ; '.'
000000000000a1da         db  0x41 ; 'A'
000000000000a1db         db  0x0e ; '.'
000000000000a1dc         db  0x38 ; '8'
000000000000a1dd         db  0x83 ; '.'
000000000000a1de         db  0x07 ; '.'
000000000000a1df         db  0x4d ; 'M'
000000000000a1e0         db  0x0e ; '.'
000000000000a1e1         db  0x50 ; 'P'
000000000000a1e2         db  0x5f ; '_'
000000000000a1e3         db  0x0e ; '.'
000000000000a1e4         db  0x58 ; 'X'
000000000000a1e5         db  0x47 ; 'G'
000000000000a1e6         db  0x0e ; '.'
000000000000a1e7         db  0x60 ; '`'
000000000000a1e8         db  0x46 ; 'F'
000000000000a1e9         db  0x0e ; '.'
000000000000a1ea         db  0x68 ; 'h'
000000000000a1eb         db  0x44 ; 'D'
000000000000a1ec         db  0x0e ; '.'
000000000000a1ed         db  0x70 ; 'p'
000000000000a1ee         db  0x58 ; 'X'
000000000000a1ef         db  0x0e ; '.'
000000000000a1f0         db  0x38 ; '8'
000000000000a1f1         db  0x41 ; 'A'
000000000000a1f2         db  0x0e ; '.'
000000000000a1f3         db  0x30 ; '0'
000000000000a1f4         db  0x41 ; 'A'
000000000000a1f5         db  0x0e ; '.'
000000000000a1f6         db  0x28 ; '('
000000000000a1f7         db  0x42 ; 'B'
000000000000a1f8         db  0x0e ; '.'
000000000000a1f9         db  0x20 ; ' '
000000000000a1fa         db  0x42 ; 'B'
000000000000a1fb         db  0x0e ; '.'
000000000000a1fc         db  0x18 ; '.'
000000000000a1fd         db  0x42 ; 'B'
000000000000a1fe         db  0x0e ; '.'
000000000000a1ff         db  0x10 ; '.'
000000000000a200         db  0x42 ; 'B'
000000000000a201         db  0x0e ; '.'
000000000000a202         db  0x08 ; '.'
000000000000a203         db  0x00 ; '.'
000000000000a204         dd         0x00000068                                  ; Length of the record
000000000000a208         dd         0x00000478                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a20c         db         0x34, 0xa7, 2 dup (0xff)                    ; begin 0x4940
000000000000a210         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4a23)
000000000000a214         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a215         db  0x42 ; 'B'
000000000000a216         db  0x0e ; '.'
000000000000a217         db  0x10 ; '.'
000000000000a218         db  0x8f ; '.'
000000000000a219         db  0x02 ; '.'
000000000000a21a         db  0x42 ; 'B'
000000000000a21b         db  0x0e ; '.'
000000000000a21c         db  0x18 ; '.'
000000000000a21d         db  0x8e ; '.'
000000000000a21e         db  0x03 ; '.'
000000000000a21f         db  0x49 ; 'I'
000000000000a220         db  0x0e ; '.'
000000000000a221         db  0x20 ; ' '
000000000000a222         db  0x8d ; '.'
000000000000a223         db  0x04 ; '.'
000000000000a224         db  0x42 ; 'B'
000000000000a225         db  0x0e ; '.'
000000000000a226         db  0x28 ; '('
000000000000a227         db  0x8c ; '.'
000000000000a228         db  0x05 ; '.'
000000000000a229         db  0x44 ; 'D'
000000000000a22a         db  0x0e ; '.'
000000000000a22b         db  0x30 ; '0'
000000000000a22c         db  0x86 ; '.'
000000000000a22d         db  0x06 ; '.'
000000000000a22e         db  0x41 ; 'A'
000000000000a22f         db  0x0e ; '.'
000000000000a230         db  0x38 ; '8'
000000000000a231         db  0x83 ; '.'
000000000000a232         db  0x07 ; '.'
000000000000a233         db  0x4d ; 'M'
000000000000a234         db  0x0e ; '.'
000000000000a235         db  0x70 ; 'p'
000000000000a236         db  0x65 ; 'e'
000000000000a237         db  0x0e ; '.'
000000000000a238         db  0x78 ; 'x'
000000000000a239         db  0x4d ; 'M'
000000000000a23a         db  0x0e ; '.'
000000000000a23b         db  0x80 ; '.'
000000000000a23c         db  0x01 ; '.'
000000000000a23d         db  0x46 ; 'F'
000000000000a23e         db  0x0e ; '.'
000000000000a23f         db  0x88 ; '.'
000000000000a240         db  0x01 ; '.'
000000000000a241         db  0x42 ; 'B'
000000000000a242         db  0x0e ; '.'
000000000000a243         db  0x90 ; '.'
000000000000a244         db  0x01 ; '.'
000000000000a245         db  0x5e ; '^'
000000000000a246         db  0x0e ; '.'
000000000000a247         db  0x70 ; 'p'
000000000000a248         db  0x56 ; 'V'
000000000000a249         db  0x0e ; '.'
000000000000a24a         db  0x78 ; 'x'
000000000000a24b         db  0x43 ; 'C'
000000000000a24c         db  0x0e ; '.'
000000000000a24d         db  0x80 ; '.'
000000000000a24e         db  0x01 ; '.'
000000000000a24f         db  0x43 ; 'C'
000000000000a250         db  0x0e ; '.'
000000000000a251         db  0x88 ; '.'
000000000000a252         db  0x01 ; '.'
000000000000a253         db  0x56 ; 'V'
000000000000a254         db  0x0e ; '.'
000000000000a255         db  0x90 ; '.'
000000000000a256         db  0x01 ; '.'
000000000000a257         db  0x52 ; 'R'
000000000000a258         db  0x0e ; '.'
000000000000a259         db  0x70 ; 'p'
000000000000a25a         db  0x5b ; '['
000000000000a25b         db  0x0e ; '.'
000000000000a25c         db  0x38 ; '8'
000000000000a25d         db  0x41 ; 'A'
000000000000a25e         db  0x0e ; '.'
000000000000a25f         db  0x30 ; '0'
000000000000a260         db  0x41 ; 'A'
000000000000a261         db  0x0e ; '.'
000000000000a262         db  0x28 ; '('
000000000000a263         db  0x42 ; 'B'
000000000000a264         db  0x0e ; '.'
000000000000a265         db  0x20 ; ' '
000000000000a266         db  0x42 ; 'B'
000000000000a267         db  0x0e ; '.'
000000000000a268         db  0x18 ; '.'
000000000000a269         db  0x42 ; 'B'
000000000000a26a         db  0x0e ; '.'
000000000000a26b         db  0x10 ; '.'
000000000000a26c         db  0x42 ; 'B'
000000000000a26d         db  0x0e ; '.'
000000000000a26e         db  0x08 ; '.'
000000000000a26f         db  0x00 ; '.'
000000000000a270         dd         0x00000010                                  ; Length of the record
000000000000a274         dd         0x000004e4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a278         db         0xb8, 0xa7, 2 dup (0xff)                    ; begin 0x4a30
000000000000a27c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4a3a)
000000000000a280         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a281         align      4
000000000000a284         dd         0x00000028                                  ; Length of the record
000000000000a288         dd         0x000004f8                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a28c         db         0xb4, 0xa7, 2 dup (0xff)                    ; begin 0x4a40
000000000000a290         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x4ad3)
000000000000a294         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a295         db  0x48 ; 'H'
000000000000a296         db  0x0e ; '.'
000000000000a297         db  0x10 ; '.'
000000000000a298         db  0x8c ; '.'
000000000000a299         db  0x02 ; '.'
000000000000a29a         db  0x48 ; 'H'
000000000000a29b         db  0x0e ; '.'
000000000000a29c         db  0x18 ; '.'
000000000000a29d         db  0x86 ; '.'
000000000000a29e         db  0x03 ; '.'
000000000000a29f         db  0x41 ; 'A'
000000000000a2a0         db  0x0e ; '.'
000000000000a2a1         db  0x20 ; ' '
000000000000a2a2         db  0x83 ; '.'
000000000000a2a3         db  0x04 ; '.'
000000000000a2a4         db  0x02 ; '.'
000000000000a2a5         db  0x74 ; 't'
000000000000a2a6         db  0x0e ; '.'
000000000000a2a7         db  0x18 ; '.'
000000000000a2a8         db  0x4b ; 'K'
000000000000a2a9         db  0x0e ; '.'
000000000000a2aa         db  0x10 ; '.'
000000000000a2ab         db  0x42 ; 'B'
000000000000a2ac         db  0x0e ; '.'
000000000000a2ad         db  0x08 ; '.'
000000000000a2ae         db  0x00 ; '.'
000000000000a2af         db  0x00 ; '.'
000000000000a2b0         dd         0x00000010                                  ; Length of the record
000000000000a2b4         dd         0x00000524                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a2b8         db         0x28, 0xa8, 2 dup (0xff)                    ; begin 0x4ae0
000000000000a2bc         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4af3)
000000000000a2c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2c1         align      4
000000000000a2c4         dd         0x00000010                                  ; Length of the record
000000000000a2c8         dd         0x00000538                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a2cc         db         0x34, 0xa8, 2 dup (0xff)                    ; begin 0x4b00
000000000000a2d0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4b0c)
000000000000a2d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2d5         align      8
000000000000a2d8         dd         0x00000010                                  ; Length of the record
000000000000a2dc         dd         0x0000054c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a2e0         db         0x30, 0xa8, 2 dup (0xff)                    ; begin 0x4b10
000000000000a2e4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4b28)
000000000000a2e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2e9         align      4
000000000000a2ec         dd         0x00000010                                  ; Length of the record
000000000000a2f0         dd         0x00000560                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a2f4         db         0x3c, 0xa8, 2 dup (0xff)                    ; begin 0x4b30
000000000000a2f8         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4b44)
000000000000a2fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2fd         align      256
000000000000a300         dd         0x00000018                                  ; Length of the record
000000000000a304         dd         0x00000574                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a308         db         0x48, 0xa8, 2 dup (0xff)                    ; begin 0x4b50
000000000000a30c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4bde)
000000000000a310         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a311         db  0x44 ; 'D'
000000000000a312         db  0x0e ; '.'
000000000000a313         db  0x50 ; 'P'
000000000000a314         db  0x02 ; '.'
000000000000a315         db  0x7f ; '.'
000000000000a316         db  0x0a ; '.'
000000000000a317         db  0x0e ; '.'
000000000000a318         db  0x08 ; '.'
000000000000a319         db  0x41 ; 'A'
000000000000a31a         db  0x0b ; '.'
000000000000a31b         db  0x00 ; '.'
000000000000a31c         dd         0x00000018                                  ; Length of the record
000000000000a320         dd         0x00000590                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a324         db         0xbc, 0xa8, 2 dup (0xff)                    ; begin 0x4be0
000000000000a328         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4c6a)
000000000000a32c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a32d         db  0x44 ; 'D'
000000000000a32e         db  0x0e ; '.'
000000000000a32f         db  0x50 ; 'P'
000000000000a330         db  0x02 ; '.'
000000000000a331         db  0x7b ; '{'
000000000000a332         db  0x0a ; '.'
000000000000a333         db  0x0e ; '.'
000000000000a334         db  0x08 ; '.'
000000000000a335         db  0x41 ; 'A'
000000000000a336         db  0x0b ; '.'
000000000000a337         db  0x00 ; '.'
000000000000a338         dd         0x00000010                                  ; Length of the record
000000000000a33c         dd         0x000005ac                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a340         db         0x30, 0xa9, 2 dup (0xff)                    ; begin 0x4c70
000000000000a344         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4c7c)
000000000000a348         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a349         align      4
000000000000a34c         dd         0x00000010                                  ; Length of the record
000000000000a350         dd         0x000005c0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a354         db         0x2c, 0xa9, 2 dup (0xff)                    ; begin 0x4c80
000000000000a358         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4c8f)
000000000000a35c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a35d         align      32
000000000000a360         dd         0x00000018                                  ; Length of the record
000000000000a364         dd         0x000005d4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a368         db         0x28, 0xa9, 2 dup (0xff)                    ; begin 0x4c90
000000000000a36c         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x4d28)
000000000000a370         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a371         db  0x44 ; 'D'
000000000000a372         db  0x0e ; '.'
000000000000a373         db  0x50 ; 'P'
000000000000a374         db  0x02 ; '.'
000000000000a375         db  0x8e ; '.'
000000000000a376         db  0x0a ; '.'
000000000000a377         db  0x0e ; '.'
000000000000a378         db  0x08 ; '.'
000000000000a379         db  0x41 ; 'A'
000000000000a37a         db  0x0b ; '.'
000000000000a37b         db  0x00 ; '.'
000000000000a37c         dd         0x00000010                                  ; Length of the record
000000000000a380         dd         0x000005f0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a384         db         0xac, 0xa9, 2 dup (0xff)                    ; begin 0x4d30
000000000000a388         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x4d40)
000000000000a38c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a38d         align      16
000000000000a390         dd         0x00000010                                  ; Length of the record
000000000000a394         dd         0x00000604                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a398         db         0xa8, 0xa9, 2 dup (0xff)                    ; begin 0x4d40
000000000000a39c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4d51)
000000000000a3a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3a1         align      4
000000000000a3a4         dd         0x00000010                                  ; Length of the record
000000000000a3a8         dd         0x00000618                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a3ac         db         0xb4, 0xa9, 2 dup (0xff)                    ; begin 0x4d60
000000000000a3b0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4d6a)
000000000000a3b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3b5         align      8
000000000000a3b8         dd         0x00000018                                  ; Length of the record
000000000000a3bc         dd         0x0000062c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a3c0         db         0xb0, 0xa9, 2 dup (0xff)                    ; begin 0x4d70
000000000000a3c4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4dfe)
000000000000a3c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3c9         db  0x44 ; 'D'
000000000000a3ca         db  0x0e ; '.'
000000000000a3cb         db  0x50 ; 'P'
000000000000a3cc         db  0x02 ; '.'
000000000000a3cd         db  0x7f ; '.'
000000000000a3ce         db  0x0a ; '.'
000000000000a3cf         db  0x0e ; '.'
000000000000a3d0         db  0x08 ; '.'
000000000000a3d1         db  0x41 ; 'A'
000000000000a3d2         db  0x0b ; '.'
000000000000a3d3         db  0x00 ; '.'
000000000000a3d4         dd         0x00000018                                  ; Length of the record
000000000000a3d8         dd         0x00000648                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a3dc         db         0x24, 0xaa, 2 dup (0xff)                    ; begin 0x4e00
000000000000a3e0         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x4e91)
000000000000a3e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3e5         db  0x44 ; 'D'
000000000000a3e6         db  0x0e ; '.'
000000000000a3e7         db  0x50 ; 'P'
000000000000a3e8         db  0x02 ; '.'
000000000000a3e9         db  0x82 ; '.'
000000000000a3ea         db  0x0a ; '.'
000000000000a3eb         db  0x0e ; '.'
000000000000a3ec         db  0x08 ; '.'
000000000000a3ed         db  0x41 ; 'A'
000000000000a3ee         db  0x0b ; '.'
000000000000a3ef         db  0x00 ; '.'
000000000000a3f0         dd         0x00000010                                  ; Length of the record
000000000000a3f4         dd         0x00000664                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a3f8         db         0xa8, 0xaa, 2 dup (0xff)                    ; begin 0x4ea0
000000000000a3fc         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4eac)
000000000000a400         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a401         align      4
000000000000a404         dd         0x00000010                                  ; Length of the record
000000000000a408         dd         0x00000678                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a40c         db         0xa4, 0xaa, 2 dup (0xff)                    ; begin 0x4eb0
000000000000a410         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x4ec7)
000000000000a414         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a415         align      8
000000000000a418         dd         0x00000010                                  ; Length of the record
000000000000a41c         dd         0x0000068c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a420         db         0xb0, 0xaa, 2 dup (0xff)                    ; begin 0x4ed0
000000000000a424         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4ee3)
000000000000a428         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a429         align      4
000000000000a42c         dd         0x00000010                                  ; Length of the record
000000000000a430         dd         0x000006a0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a434         db         0xbc, 0xaa, 2 dup (0xff)                    ; begin 0x4ef0
000000000000a438         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4efc)
000000000000a43c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a43d         align      64
000000000000a440         dd         0x00000010                                  ; Length of the record
000000000000a444         dd         0x000006b4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a448         db         0xb8, 0xaa, 2 dup (0xff)                    ; begin 0x4f00
000000000000a44c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4f14)
000000000000a450         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a451         align      4
000000000000a454         dd         0x00000010                                  ; Length of the record
000000000000a458         dd         0x000006c8                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a45c         db         0xc4, 0xaa, 2 dup (0xff)                    ; begin 0x4f20
000000000000a460         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4f33)
000000000000a464         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a465         align      8
000000000000a468         dd         0x00000014                                  ; Length of the record
000000000000a46c         dd         0x000006dc                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a470         db         0xd0, 0xaa, 2 dup (0xff)                    ; begin 0x4f40
000000000000a474         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4f58)
000000000000a478         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a479         align      128
000000000000a480         dd         0x00000014                                  ; Length of the record
000000000000a484         dd         0x000006f4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a488         db         0xd8, 0xaa, 2 dup (0xff)                    ; begin 0x4f60
000000000000a48c         db         0x1b, 3 dup (0x00)                          ; length 0x1b (end at 0x4f7b)
000000000000a490         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a491         db  0x44 ; 'D'
000000000000a492         db  0x0e ; '.'
000000000000a493         db  0x10 ; '.'
000000000000a494         db  0x56 ; 'V'
000000000000a495         db  0x0e ; '.'
000000000000a496         db  0x08 ; '.'
000000000000a497         db  0x00 ; '.'
000000000000a498         dd         0x0000001c                                  ; Length of the record
000000000000a49c         dd         0x0000070c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a4a0         db         0xe0, 0xaa, 2 dup (0xff)                    ; begin 0x4f80
000000000000a4a4         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x4fcf)
000000000000a4a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a4a9         db  0x46 ; 'F'
000000000000a4aa         db  0x0e ; '.'
000000000000a4ab         db  0x10 ; '.'
000000000000a4ac         db  0x69 ; 'i'
000000000000a4ad         db  0x0a ; '.'
000000000000a4ae         db  0x0e ; '.'
000000000000a4af         db  0x08 ; '.'
000000000000a4b0         db  0x41 ; 'A'
000000000000a4b1         db  0x0b ; '.'
000000000000a4b2         db  0x5e ; '^'
000000000000a4b3         db  0x0e ; '.'
000000000000a4b4         db  0x08 ; '.'
000000000000a4b5         db  0x00 ; '.'
000000000000a4b6         db  0x00 ; '.'
000000000000a4b7         db  0x00 ; '.'
000000000000a4b8         dd         0x00000030                                  ; Length of the record
000000000000a4bc         dd         0x0000072c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a4c0         db         0x10, 0xab, 2 dup (0xff)                    ; begin 0x4fd0
000000000000a4c4         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0x5057)
000000000000a4c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a4c9         db  0x41 ; 'A'
000000000000a4ca         db  0x0e ; '.'
000000000000a4cb         db  0x10 ; '.'
000000000000a4cc         db  0x86 ; '.'
000000000000a4cd         db  0x02 ; '.'
000000000000a4ce         db  0x41 ; 'A'
000000000000a4cf         db  0x0e ; '.'
000000000000a4d0         db  0x18 ; '.'
000000000000a4d1         db  0x83 ; '.'
000000000000a4d2         db  0x03 ; '.'
000000000000a4d3         db  0x4b ; 'K'
000000000000a4d4         db  0x0e ; '.'
000000000000a4d5         db  0x20 ; ' '
000000000000a4d6         db  0x7c ; '|'
000000000000a4d7         db  0x0a ; '.'
000000000000a4d8         db  0x0e ; '.'
000000000000a4d9         db  0x18 ; '.'
000000000000a4da         db  0x48 ; 'H'
000000000000a4db         db  0x0e ; '.'
000000000000a4dc         db  0x10 ; '.'
000000000000a4dd         db  0x41 ; 'A'
000000000000a4de         db  0x0e ; '.'
000000000000a4df         db  0x08 ; '.'
000000000000a4e0         db  0x46 ; 'F'
000000000000a4e1         db  0x0b ; '.'
000000000000a4e2         db  0x65 ; 'e'
000000000000a4e3         db  0x0e ; '.'
000000000000a4e4         db  0x18 ; '.'
000000000000a4e5         db  0x48 ; 'H'
000000000000a4e6         db  0x0e ; '.'
000000000000a4e7         db  0x10 ; '.'
000000000000a4e8         db  0x41 ; 'A'
000000000000a4e9         db  0x0e ; '.'
000000000000a4ea         db  0x08 ; '.'
000000000000a4eb         db  0x00 ; '.'
000000000000a4ec         dd         0x00000048                                  ; Length of the record
000000000000a4f0         dd         0x00000760                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a4f4         db         0x6c, 0xab, 2 dup (0xff)                    ; begin 0x5060
000000000000a4f8         db         0x0c, 0x02, 2 dup (0x00)                    ; length 0x20c (end at 0x526c)
000000000000a4fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a4fd         db  0x42 ; 'B'
000000000000a4fe         db  0x0e ; '.'
000000000000a4ff         db  0x10 ; '.'
000000000000a500         db  0x8f ; '.'
000000000000a501         db  0x02 ; '.'
000000000000a502         db  0x42 ; 'B'
000000000000a503         db  0x0e ; '.'
000000000000a504         db  0x18 ; '.'
000000000000a505         db  0x8e ; '.'
000000000000a506         db  0x03 ; '.'
000000000000a507         db  0x45 ; 'E'
000000000000a508         db  0x0e ; '.'
000000000000a509         db  0x20 ; ' '
000000000000a50a         db  0x8d ; '.'
000000000000a50b         db  0x04 ; '.'
000000000000a50c         db  0x42 ; 'B'
000000000000a50d         db  0x0e ; '.'
000000000000a50e         db  0x28 ; '('
000000000000a50f         db  0x8c ; '.'
000000000000a510         db  0x05 ; '.'
000000000000a511         db  0x44 ; 'D'
000000000000a512         db  0x0e ; '.'
000000000000a513         db  0x30 ; '0'
000000000000a514         db  0x86 ; '.'
000000000000a515         db  0x06 ; '.'
000000000000a516         db  0x41 ; 'A'
000000000000a517         db  0x0e ; '.'
000000000000a518         db  0x38 ; '8'
000000000000a519         db  0x83 ; '.'
000000000000a51a         db  0x07 ; '.'
000000000000a51b         db  0x49 ; 'I'
000000000000a51c         db  0x0e ; '.'
000000000000a51d         db  0xb0 ; '.'
000000000000a51e         db  0x01 ; '.'
000000000000a51f         db  0x02 ; '.'
000000000000a520         db  0x83 ; '.'
000000000000a521         db  0x0a ; '.'
000000000000a522         db  0x0e ; '.'
000000000000a523         db  0x38 ; '8'
000000000000a524         db  0x41 ; 'A'
000000000000a525         db  0x0e ; '.'
000000000000a526         db  0x30 ; '0'
000000000000a527         db  0x41 ; 'A'
000000000000a528         db  0x0e ; '.'
000000000000a529         db  0x28 ; '('
000000000000a52a         db  0x42 ; 'B'
000000000000a52b         db  0x0e ; '.'
000000000000a52c         db  0x20 ; ' '
000000000000a52d         db  0x42 ; 'B'
000000000000a52e         db  0x0e ; '.'
000000000000a52f         db  0x18 ; '.'
000000000000a530         db  0x42 ; 'B'
000000000000a531         db  0x0e ; '.'
000000000000a532         db  0x10 ; '.'
000000000000a533         db  0x42 ; 'B'
000000000000a534         db  0x0e ; '.'
000000000000a535         db  0x08 ; '.'
000000000000a536         db  0x4a ; 'J'
000000000000a537         db  0x0b ; '.'
000000000000a538         dd         0x00000014                                  ; Length of the record
000000000000a53c         dd         0x000007ac                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a540         db         0x30, 0xad, 2 dup (0xff)                    ; begin 0x5270
000000000000a544         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x5295)
000000000000a548         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a549         align      16
000000000000a550         dd         0x00000014                                  ; Length of the record
000000000000a554         dd         0x000007c4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a558         db         0x48, 0xad, 2 dup (0xff)                    ; begin 0x52a0
000000000000a55c         db         0xac, 3 dup (0x00)                          ; length 0xac (end at 0x534c)
000000000000a560         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a561         align      8
000000000000a568         dd         0x00000110                                  ; Length of the record
000000000000a56c         dd         0x000007dc                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a570         db         0xe0, 0xad, 2 dup (0xff)                    ; begin 0x5350
000000000000a574         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x5767)
000000000000a578         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a579         db  0x42 ; 'B'
000000000000a57a         db  0x0e ; '.'
000000000000a57b         db  0x10 ; '.'
000000000000a57c         db  0x8f ; '.'
000000000000a57d         db  0x02 ; '.'
000000000000a57e         db  0x42 ; 'B'
000000000000a57f         db  0x0e ; '.'
000000000000a580         db  0x18 ; '.'
000000000000a581         db  0x8e ; '.'
000000000000a582         db  0x03 ; '.'
000000000000a583         db  0x42 ; 'B'
000000000000a584         db  0x0e ; '.'
000000000000a585         db  0x20 ; ' '
000000000000a586         db  0x8d ; '.'
000000000000a587         db  0x04 ; '.'
000000000000a588         db  0x42 ; 'B'
000000000000a589         db  0x0e ; '.'
000000000000a58a         db  0x28 ; '('
000000000000a58b         db  0x8c ; '.'
000000000000a58c         db  0x05 ; '.'
000000000000a58d         db  0x44 ; 'D'
000000000000a58e         db  0x0e ; '.'
000000000000a58f         db  0x30 ; '0'
000000000000a590         db  0x86 ; '.'
000000000000a591         db  0x06 ; '.'
000000000000a592         db  0x41 ; 'A'
000000000000a593         db  0x0e ; '.'
000000000000a594         db  0x38 ; '8'
000000000000a595         db  0x83 ; '.'
000000000000a596         db  0x07 ; '.'
000000000000a597         db  0x4a ; 'J'
000000000000a598         db  0x0e ; '.'
000000000000a599         db  0x60 ; '`'
000000000000a59a         db  0x02 ; '.'
000000000000a59b         db  0xdd ; '.'
000000000000a59c         db  0x0e ; '.'
000000000000a59d         db  0x68 ; 'h'
000000000000a59e         db  0x57 ; 'W'
000000000000a59f         db  0x0e ; '.'
000000000000a5a0         db  0x70 ; 'p'
000000000000a5a1         db  0x42 ; 'B'
000000000000a5a2         db  0x0e ; '.'
000000000000a5a3         db  0x78 ; 'x'
000000000000a5a4         db  0x42 ; 'B'
000000000000a5a5         db  0x0e ; '.'
000000000000a5a6         db  0x80 ; '.'
000000000000a5a7         db  0x01 ; '.'
000000000000a5a8         db  0x42 ; 'B'
000000000000a5a9         db  0x0e ; '.'
000000000000a5aa         db  0x88 ; '.'
000000000000a5ab         db  0x01 ; '.'
000000000000a5ac         db  0x42 ; 'B'
000000000000a5ad         db  0x0e ; '.'
000000000000a5ae         db  0x90 ; '.'
000000000000a5af         db  0x01 ; '.'
000000000000a5b0         db  0x53 ; 'S'
000000000000a5b1         db  0x0e ; '.'
000000000000a5b2         db  0x60 ; '`'
000000000000a5b3         db  0x44 ; 'D'
000000000000a5b4         db  0x0a ; '.'
000000000000a5b5         db  0x0e ; '.'
000000000000a5b6         db  0x38 ; '8'
000000000000a5b7         db  0x41 ; 'A'
000000000000a5b8         db  0x0e ; '.'
000000000000a5b9         db  0x30 ; '0'
000000000000a5ba         db  0x41 ; 'A'
000000000000a5bb         db  0x0e ; '.'
000000000000a5bc         db  0x28 ; '('
000000000000a5bd         db  0x42 ; 'B'
000000000000a5be         db  0x0e ; '.'
000000000000a5bf         db  0x20 ; ' '
000000000000a5c0         db  0x42 ; 'B'
000000000000a5c1         db  0x0e ; '.'
000000000000a5c2         db  0x18 ; '.'
000000000000a5c3         db  0x42 ; 'B'
000000000000a5c4         db  0x0e ; '.'
000000000000a5c5         db  0x10 ; '.'
000000000000a5c6         db  0x42 ; 'B'
000000000000a5c7         db  0x0e ; '.'
000000000000a5c8         db  0x08 ; '.'
000000000000a5c9         db  0x44 ; 'D'
000000000000a5ca         db  0x0b ; '.'
000000000000a5cb         db  0x02 ; '.'
000000000000a5cc         db  0x78 ; 'x'
000000000000a5cd         db  0x0a ; '.'
000000000000a5ce         db  0x0e ; '.'
000000000000a5cf         db  0x68 ; 'h'
000000000000a5d0         db  0x48 ; 'H'
000000000000a5d1         db  0x0b ; '.'
000000000000a5d2         db  0x5a ; 'Z'
000000000000a5d3         db  0x0a ; '.'
000000000000a5d4         db  0x0e ; '.'
000000000000a5d5         db  0x38 ; '8'
000000000000a5d6         db  0x47 ; 'G'
000000000000a5d7         db  0x0e ; '.'
000000000000a5d8         db  0x30 ; '0'
000000000000a5d9         db  0x41 ; 'A'
000000000000a5da         db  0x0e ; '.'
000000000000a5db         db  0x28 ; '('
000000000000a5dc         db  0x42 ; 'B'
000000000000a5dd         db  0x0e ; '.'
000000000000a5de         db  0x20 ; ' '
000000000000a5df         db  0x42 ; 'B'
000000000000a5e0         db  0x0e ; '.'
000000000000a5e1         db  0x18 ; '.'
000000000000a5e2         db  0x42 ; 'B'
000000000000a5e3         db  0x0e ; '.'
000000000000a5e4         db  0x10 ; '.'
000000000000a5e5         db  0x42 ; 'B'
000000000000a5e6         db  0x0e ; '.'
000000000000a5e7         db  0x08 ; '.'
000000000000a5e8         db  0x56 ; 'V'
000000000000a5e9         db  0x0b ; '.'
000000000000a5ea         db  0x5e ; '^'
000000000000a5eb         db  0x0a ; '.'
000000000000a5ec         db  0x0e ; '.'
000000000000a5ed         db  0x38 ; '8'
000000000000a5ee         db  0x52 ; 'R'
000000000000a5ef         db  0x0e ; '.'
000000000000a5f0         db  0x30 ; '0'
000000000000a5f1         db  0x41 ; 'A'
000000000000a5f2         db  0x0e ; '.'
000000000000a5f3         db  0x28 ; '('
000000000000a5f4         db  0x42 ; 'B'
000000000000a5f5         db  0x0e ; '.'
000000000000a5f6         db  0x20 ; ' '
000000000000a5f7         db  0x42 ; 'B'
000000000000a5f8         db  0x0e ; '.'
000000000000a5f9         db  0x18 ; '.'
000000000000a5fa         db  0x42 ; 'B'
000000000000a5fb         db  0x0e ; '.'
000000000000a5fc         db  0x10 ; '.'
000000000000a5fd         db  0x42 ; 'B'
000000000000a5fe         db  0x0e ; '.'
000000000000a5ff         db  0x08 ; '.'
000000000000a600         db  0x4f ; 'O'
000000000000a601         db  0x0b ; '.'
000000000000a602         db  0x62 ; 'b'
000000000000a603         db  0x0a ; '.'
000000000000a604         db  0x0e ; '.'
000000000000a605         db  0x38 ; '8'
000000000000a606         db  0x50 ; 'P'
000000000000a607         db  0x0e ; '.'
000000000000a608         db  0x30 ; '0'
000000000000a609         db  0x41 ; 'A'
000000000000a60a         db  0x0e ; '.'
000000000000a60b         db  0x28 ; '('
000000000000a60c         db  0x42 ; 'B'
000000000000a60d         db  0x0e ; '.'
000000000000a60e         db  0x20 ; ' '
000000000000a60f         db  0x42 ; 'B'
000000000000a610         db  0x0e ; '.'
000000000000a611         db  0x18 ; '.'
000000000000a612         db  0x42 ; 'B'
000000000000a613         db  0x0e ; '.'
000000000000a614         db  0x10 ; '.'
000000000000a615         db  0x42 ; 'B'
000000000000a616         db  0x0e ; '.'
000000000000a617         db  0x08 ; '.'
000000000000a618         db  0x55 ; 'U'
000000000000a619         db  0x0b ; '.'
000000000000a61a         db  0x66 ; 'f'
000000000000a61b         db  0x0e ; '.'
000000000000a61c         db  0x68 ; 'h'
000000000000a61d         db  0x42 ; 'B'
000000000000a61e         db  0x0e ; '.'
000000000000a61f         db  0x70 ; 'p'
000000000000a620         db  0x5c ; '\'
000000000000a621         db  0x0e ; '.'
000000000000a622         db  0x68 ; 'h'
000000000000a623         db  0x41 ; 'A'
000000000000a624         db  0x0e ; '.'
000000000000a625         db  0x60 ; '`'
000000000000a626         db  0x44 ; 'D'
000000000000a627         db  0x0a ; '.'
000000000000a628         db  0x0e ; '.'
000000000000a629         db  0x38 ; '8'
000000000000a62a         db  0x41 ; 'A'
000000000000a62b         db  0x0e ; '.'
000000000000a62c         db  0x30 ; '0'
000000000000a62d         db  0x41 ; 'A'
000000000000a62e         db  0x0e ; '.'
000000000000a62f         db  0x28 ; '('
000000000000a630         db  0x42 ; 'B'
000000000000a631         db  0x0e ; '.'
000000000000a632         db  0x20 ; ' '
000000000000a633         db  0x42 ; 'B'
000000000000a634         db  0x0e ; '.'
000000000000a635         db  0x18 ; '.'
000000000000a636         db  0x42 ; 'B'
000000000000a637         db  0x0e ; '.'
000000000000a638         db  0x10 ; '.'
000000000000a639         db  0x42 ; 'B'
000000000000a63a         db  0x0e ; '.'
000000000000a63b         db  0x08 ; '.'
000000000000a63c         db  0x45 ; 'E'
000000000000a63d         db  0x0b ; '.'
000000000000a63e         db  0x68 ; 'h'
000000000000a63f         db  0x0a ; '.'
000000000000a640         db  0x0e ; '.'
000000000000a641         db  0x68 ; 'h'
000000000000a642         db  0x48 ; 'H'
000000000000a643         db  0x0b ; '.'
000000000000a644         db  0x72 ; 'r'
000000000000a645         db  0x0e ; '.'
000000000000a646         db  0x68 ; 'h'
000000000000a647         db  0x45 ; 'E'
000000000000a648         db  0x0e ; '.'
000000000000a649         db  0x70 ; 'p'
000000000000a64a         db  0x42 ; 'B'
000000000000a64b         db  0x0e ; '.'
000000000000a64c         db  0x78 ; 'x'
000000000000a64d         db  0x42 ; 'B'
000000000000a64e         db  0x0e ; '.'
000000000000a64f         db  0x80 ; '.'
000000000000a650         db  0x01 ; '.'
000000000000a651         db  0x5e ; '^'
000000000000a652         db  0x0e ; '.'
000000000000a653         db  0x60 ; '`'
000000000000a654         db  0x44 ; 'D'
000000000000a655         db  0x0a ; '.'
000000000000a656         db  0x0e ; '.'
000000000000a657         db  0x38 ; '8'
000000000000a658         db  0x41 ; 'A'
000000000000a659         db  0x0e ; '.'
000000000000a65a         db  0x30 ; '0'
000000000000a65b         db  0x41 ; 'A'
000000000000a65c         db  0x0e ; '.'
000000000000a65d         db  0x28 ; '('
000000000000a65e         db  0x42 ; 'B'
000000000000a65f         db  0x0e ; '.'
000000000000a660         db  0x20 ; ' '
000000000000a661         db  0x42 ; 'B'
000000000000a662         db  0x0e ; '.'
000000000000a663         db  0x18 ; '.'
000000000000a664         db  0x42 ; 'B'
000000000000a665         db  0x0e ; '.'
000000000000a666         db  0x10 ; '.'
000000000000a667         db  0x42 ; 'B'
000000000000a668         db  0x0e ; '.'
000000000000a669         db  0x08 ; '.'
000000000000a66a         db  0x41 ; 'A'
000000000000a66b         db  0x0b ; '.'
000000000000a66c         db  0x79 ; 'y'
000000000000a66d         db  0x0a ; '.'
000000000000a66e         db  0x0e ; '.'
000000000000a66f         db  0x68 ; 'h'
000000000000a670         db  0x42 ; 'B'
000000000000a671         db  0x0e ; '.'
000000000000a672         db  0x70 ; 'p'
000000000000a673         db  0x42 ; 'B'
000000000000a674         db  0x0e ; '.'
000000000000a675         db  0x78 ; 'x'
000000000000a676         db  0x42 ; 'B'
000000000000a677         db  0x0e ; '.'
000000000000a678         db  0x80 ; '.'
000000000000a679         db  0x01 ; '.'
000000000000a67a         db  0x51 ; 'Q'
000000000000a67b         db  0x0b ; '.'
000000000000a67c         dd         0x00000010                                  ; Length of the record
000000000000a680         dd         0x000008f0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a684         db         0xec, 0xb0, 2 dup (0xff)                    ; begin 0x5770
000000000000a688         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x5790)
000000000000a68c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a68d         align      16
000000000000a690         dd         0x00000018                                  ; Length of the record
000000000000a694         dd         0x00000904                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a698         db         0xf8, 0xb0, 2 dup (0xff)                    ; begin 0x5790
000000000000a69c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x5808)
000000000000a6a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a6a1         db  0x44 ; 'D'
000000000000a6a2         db  0x0e ; '.'
000000000000a6a3         db  0x70 ; 'p'
000000000000a6a4         db  0x02 ; '.'
000000000000a6a5         db  0x60 ; '`'
000000000000a6a6         db  0x0a ; '.'
000000000000a6a7         db  0x0e ; '.'
000000000000a6a8         db  0x08 ; '.'
000000000000a6a9         db  0x41 ; 'A'
000000000000a6aa         db  0x0b ; '.'
000000000000a6ab         db  0x00 ; '.'
000000000000a6ac         dd         0x00000028                                  ; Length of the record
000000000000a6b0         dd         0x00000920                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a6b4         db         0x5c, 0xb1, 2 dup (0xff)                    ; begin 0x5810
000000000000a6b8         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x58e5)
000000000000a6bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a6bd         db  0x41 ; 'A'
000000000000a6be         db  0x0e ; '.'
000000000000a6bf         db  0x10 ; '.'
000000000000a6c0         db  0x86 ; '.'
000000000000a6c1         db  0x02 ; '.'
000000000000a6c2         db  0x41 ; 'A'
000000000000a6c3         db  0x0e ; '.'
000000000000a6c4         db  0x18 ; '.'
000000000000a6c5         db  0x83 ; '.'
000000000000a6c6         db  0x03 ; '.'
000000000000a6c7         db  0x50 ; 'P'
000000000000a6c8         db  0x0e ; '.'
000000000000a6c9         db  0xd0 ; '.'
000000000000a6ca         db  0x01 ; '.'
000000000000a6cb         db  0x02 ; '.'
000000000000a6cc         db  0xab ; '.'
000000000000a6cd         db  0x0a ; '.'
000000000000a6ce         db  0x0e ; '.'
000000000000a6cf         db  0x18 ; '.'
000000000000a6d0         db  0x41 ; 'A'
000000000000a6d1         db  0x0e ; '.'
000000000000a6d2         db  0x10 ; '.'
000000000000a6d3         db  0x41 ; 'A'
000000000000a6d4         db  0x0e ; '.'
000000000000a6d5         db  0x08 ; '.'
000000000000a6d6         db  0x41 ; 'A'
000000000000a6d7         db  0x0b ; '.'
000000000000a6d8         dd         0x0000001c                                  ; Length of the record
000000000000a6dc         dd         0x0000094c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a6e0         db         0x10, 0xb2, 2 dup (0xff)                    ; begin 0x58f0
000000000000a6e4         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x5970)
000000000000a6e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a6e9         db  0x41 ; 'A'
000000000000a6ea         db  0x0e ; '.'
000000000000a6eb         db  0x10 ; '.'
000000000000a6ec         db  0x83 ; '.'
000000000000a6ed         db  0x02 ; '.'
000000000000a6ee         db  0x02 ; '.'
000000000000a6ef         db  0x7a ; 'z'
000000000000a6f0         db  0x0e ; '.'
000000000000a6f1         db  0x08 ; '.'
000000000000a6f2         db  0x00 ; '.'
000000000000a6f3         db  0x00 ; '.'
000000000000a6f4         db  0x00 ; '.'
000000000000a6f5         db  0x00 ; '.'
000000000000a6f6         db  0x00 ; '.'
000000000000a6f7         db  0x00 ; '.'
000000000000a6f8         dd         0x00000018                                  ; Length of the record
000000000000a6fc         dd         0x0000096c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a700         db         0x70, 0xb2, 2 dup (0xff)                    ; begin 0x5970
000000000000a704         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x598a)
000000000000a708         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a709         db  0x41 ; 'A'
000000000000a70a         db  0x0e ; '.'
000000000000a70b         db  0x10 ; '.'
000000000000a70c         db  0x83 ; '.'
000000000000a70d         db  0x02 ; '.'
000000000000a70e         db  0x53 ; 'S'
000000000000a70f         db  0x0a ; '.'
000000000000a710         db  0x0e ; '.'
000000000000a711         db  0x08 ; '.'
000000000000a712         db  0x41 ; 'A'
000000000000a713         db  0x0b ; '.'
000000000000a714         dd         0x00000010                                  ; Length of the record
000000000000a718         dd         0x00000988                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a71c         db         0x74, 0xb2, 2 dup (0xff)                    ; begin 0x5990
000000000000a720         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x59b4)
000000000000a724         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a725         db  0x5f ; '_'
000000000000a726         db  0x0e ; '.'
000000000000a727         db  0x10 ; '.'
000000000000a728         dd         0x00000010                                  ; Length of the record
000000000000a72c         dd         0x0000099c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a730         db         0x90, 0xb2, 2 dup (0xff)                    ; begin 0x59c0
000000000000a734         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x59c2)
000000000000a738         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a739         align      4
000000000000a73c         dd         0x00000020                                  ; Length of the record
000000000000a740         dd         0x000009b0                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a744         db         0x8c, 0xb2, 2 dup (0xff)                    ; begin 0x59d0
000000000000a748         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5a06)
000000000000a74c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a74d         db  0x44 ; 'D'
000000000000a74e         db  0x0e ; '.'
000000000000a74f         db  0x10 ; '.'
000000000000a750         db  0x83 ; '.'
000000000000a751         db  0x02 ; '.'
000000000000a752         db  0x5d ; ']'
000000000000a753         db  0x0a ; '.'
000000000000a754         db  0x0e ; '.'
000000000000a755         db  0x08 ; '.'
000000000000a756         db  0x47 ; 'G'
000000000000a757         db  0x0b ; '.'
000000000000a758         db  0x48 ; 'H'
000000000000a759         db  0x0a ; '.'
000000000000a75a         db  0x0e ; '.'
000000000000a75b         db  0x08 ; '.'
000000000000a75c         db  0x41 ; 'A'
000000000000a75d         db  0x0b ; '.'
000000000000a75e         db  0x00 ; '.'
000000000000a75f         db  0x00 ; '.'
000000000000a760         dd         0x00000010                                  ; Length of the record
000000000000a764         dd         0x000009d4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a768         db         0xa8, 0xb2, 2 dup (0xff)                    ; begin 0x5a10
000000000000a76c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5a34)
000000000000a770         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a771         db  0x5f ; '_'
000000000000a772         db  0x0e ; '.'
000000000000a773         db  0x10 ; '.'
000000000000a774         dd         0x00000014                                  ; Length of the record
000000000000a778         dd         0x000009e8                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a77c         db         0xc4, 0xb2, 2 dup (0xff)                    ; begin 0x5a40
000000000000a780         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x5ac2)
000000000000a784         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a785         db  0x02 ; '.'
000000000000a786         db  0x5f ; '_'
000000000000a787         db  0x0e ; '.'
000000000000a788         db  0x10 ; '.'
000000000000a789         db  0x49 ; 'I'
000000000000a78a         db  0x0e ; '.'
000000000000a78b         db  0x08 ; '.'
000000000000a78c         dd         0x00000014                                  ; Length of the record
000000000000a790         dd         0x00000a00                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a794         db         0x3c, 0xb3, 2 dup (0xff)                    ; begin 0x5ad0
000000000000a798         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x5b1a)
000000000000a79c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a79d         db  0x02 ; '.'
000000000000a79e         db  0x45 ; 'E'
000000000000a79f         db  0x0e ; '.'
000000000000a7a0         db  0x10 ; '.'
000000000000a7a1         db  0x00 ; '.'
000000000000a7a2         db  0x00 ; '.'
000000000000a7a3         db  0x00 ; '.'
000000000000a7a4         dd         0x00000018                                  ; Length of the record
000000000000a7a8         dd         0x00000a18                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a7ac         db         0x74, 0xb3, 2 dup (0xff)                    ; begin 0x5b20
000000000000a7b0         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5b37)
000000000000a7b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7b5         db  0x41 ; 'A'
000000000000a7b6         db  0x0e ; '.'
000000000000a7b7         db  0x10 ; '.'
000000000000a7b8         db  0x83 ; '.'
000000000000a7b9         db  0x02 ; '.'
000000000000a7ba         db  0x51 ; 'Q'
000000000000a7bb         db  0x0e ; '.'
000000000000a7bc         db  0x08 ; '.'
000000000000a7bd         db  0x00 ; '.'
000000000000a7be         db  0x00 ; '.'
000000000000a7bf         db  0x00 ; '.'
000000000000a7c0         dd         0x00000018                                  ; Length of the record
000000000000a7c4         dd         0x00000a34                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a7c8         db         0x78, 0xb3, 2 dup (0xff)                    ; begin 0x5b40
000000000000a7cc         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x5b6e)
000000000000a7d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7d1         db  0x47 ; 'G'
000000000000a7d2         db  0x0e ; '.'
000000000000a7d3         db  0x10 ; '.'
000000000000a7d4         db  0x61 ; 'a'
000000000000a7d5         db  0x0a ; '.'
000000000000a7d6         db  0x0e ; '.'
000000000000a7d7         db  0x08 ; '.'
000000000000a7d8         db  0x41 ; 'A'
000000000000a7d9         db  0x0b ; '.'
000000000000a7da         db  0x00 ; '.'
000000000000a7db         db  0x00 ; '.'
000000000000a7dc         dd         0x00000024                                  ; Length of the record
000000000000a7e0         dd         0x00000a50                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a7e4         db         0x8c, 0xb3, 2 dup (0xff)                    ; begin 0x5b70
000000000000a7e8         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x5b98)
000000000000a7ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7ed         db  0x41 ; 'A'
000000000000a7ee         db  0x0e ; '.'
000000000000a7ef         db  0x10 ; '.'
000000000000a7f0         db  0x86 ; '.'
000000000000a7f1         db  0x02 ; '.'
000000000000a7f2         db  0x41 ; 'A'
000000000000a7f3         db  0x0e ; '.'
000000000000a7f4         db  0x18 ; '.'
000000000000a7f5         db  0x83 ; '.'
000000000000a7f6         db  0x03 ; '.'
000000000000a7f7         db  0x4d ; 'M'
000000000000a7f8         db  0x0e ; '.'
000000000000a7f9         db  0x20 ; ' '
000000000000a7fa         db  0x49 ; 'I'
000000000000a7fb         db  0x0e ; '.'
000000000000a7fc         db  0x18 ; '.'
000000000000a7fd         db  0x47 ; 'G'
000000000000a7fe         db  0x0e ; '.'
000000000000a7ff         db  0x10 ; '.'
000000000000a800         db  0x41 ; 'A'
000000000000a801         db  0x0e ; '.'
000000000000a802         db  0x08 ; '.'
000000000000a803         db  0x00 ; '.'
000000000000a804         dd         0x00000018                                  ; Length of the record
000000000000a808         dd         0x00000a78                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a80c         db         0x94, 0xb3, 2 dup (0xff)                    ; begin 0x5ba0
000000000000a810         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5bb3)
000000000000a814         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a815         db  0x41 ; 'A'
000000000000a816         db  0x0e ; '.'
000000000000a817         db  0x10 ; '.'
000000000000a818         db  0x83 ; '.'
000000000000a819         db  0x02 ; '.'
000000000000a81a         db  0x50 ; 'P'
000000000000a81b         db  0x0e ; '.'
000000000000a81c         db  0x08 ; '.'
000000000000a81d         db  0x00 ; '.'
000000000000a81e         db  0x00 ; '.'
000000000000a81f         db  0x00 ; '.'
000000000000a820         dd         0x00000014                                  ; Length of the record
000000000000a824         dd         0x00000a94                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a828         db         0x98, 0xb3, 2 dup (0xff)                    ; begin 0x5bc0
000000000000a82c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5bf5)
000000000000a830         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a831         db  0x4b ; 'K'
000000000000a832         db  0x0e ; '.'
000000000000a833         db  0x10 ; '.'
000000000000a834         db  0x00 ; '.'
000000000000a835         db  0x00 ; '.'
000000000000a836         db  0x00 ; '.'
000000000000a837         db  0x00 ; '.'
000000000000a838         dd         0x00000028                                  ; Length of the record
000000000000a83c         dd         0x00000aac                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a840         db         0xc0, 0xb3, 2 dup (0xff)                    ; begin 0x5c00
000000000000a844         db         0x5f, 3 dup (0x00)                          ; length 0x5f (end at 0x5c5f)
000000000000a848         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a849         db  0x41 ; 'A'
000000000000a84a         db  0x0e ; '.'
000000000000a84b         db  0x10 ; '.'
000000000000a84c         db  0x86 ; '.'
000000000000a84d         db  0x02 ; '.'
000000000000a84e         db  0x41 ; 'A'
000000000000a84f         db  0x0e ; '.'
000000000000a850         db  0x18 ; '.'
000000000000a851         db  0x83 ; '.'
000000000000a852         db  0x03 ; '.'
000000000000a853         db  0x44 ; 'D'
000000000000a854         db  0x0e ; '.'
000000000000a855         db  0x20 ; ' '
000000000000a856         db  0x4f ; 'O'
000000000000a857         db  0x0a ; '.'
000000000000a858         db  0x0e ; '.'
000000000000a859         db  0x18 ; '.'
000000000000a85a         db  0x43 ; 'C'
000000000000a85b         db  0x0e ; '.'
000000000000a85c         db  0x10 ; '.'
000000000000a85d         db  0x41 ; 'A'
000000000000a85e         db  0x0e ; '.'
000000000000a85f         db  0x08 ; '.'
000000000000a860         db  0x47 ; 'G'
000000000000a861         db  0x0b ; '.'
000000000000a862         db  0x00 ; '.'
000000000000a863         db  0x00 ; '.'
000000000000a864         dd         0x00000018                                  ; Length of the record
000000000000a868         dd         0x00000ad8                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a86c         db         0xf4, 0xb3, 2 dup (0xff)                    ; begin 0x5c60
000000000000a870         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x5d16)
000000000000a874         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a875         db  0x47 ; 'G'
000000000000a876         db  0x0e ; '.'
000000000000a877         db  0xe0 ; '.'
000000000000a878         db  0x01 ; '.'
000000000000a879         db  0x02 ; '.'
000000000000a87a         db  0xa9 ; '.'
000000000000a87b         db  0x0a ; '.'
000000000000a87c         db  0x0e ; '.'
000000000000a87d         db  0x08 ; '.'
000000000000a87e         db  0x41 ; 'A'
000000000000a87f         db  0x0b ; '.'
000000000000a880         dd         0x00000028                                  ; Length of the record
000000000000a884         dd         0x00000af4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a888         db         0x98, 0xb4, 2 dup (0xff)                    ; begin 0x5d20
000000000000a88c         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x5d7b)
000000000000a890         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a891         db  0x41 ; 'A'
000000000000a892         db  0x0e ; '.'
000000000000a893         db  0x10 ; '.'
000000000000a894         db  0x86 ; '.'
000000000000a895         db  0x02 ; '.'
000000000000a896         db  0x41 ; 'A'
000000000000a897         db  0x0e ; '.'
000000000000a898         db  0x18 ; '.'
000000000000a899         db  0x83 ; '.'
000000000000a89a         db  0x03 ; '.'
000000000000a89b         db  0x47 ; 'G'
000000000000a89c         db  0x0e ; '.'
000000000000a89d         db  0x20 ; ' '
000000000000a89e         db  0x4f ; 'O'
000000000000a89f         db  0x0a ; '.'
000000000000a8a0         db  0x0e ; '.'
000000000000a8a1         db  0x18 ; '.'
000000000000a8a2         db  0x43 ; 'C'
000000000000a8a3         db  0x0e ; '.'
000000000000a8a4         db  0x10 ; '.'
000000000000a8a5         db  0x41 ; 'A'
000000000000a8a6         db  0x0e ; '.'
000000000000a8a7         db  0x08 ; '.'
000000000000a8a8         db  0x44 ; 'D'
000000000000a8a9         db  0x0b ; '.'
000000000000a8aa         db  0x00 ; '.'
000000000000a8ab         db  0x00 ; '.'
000000000000a8ac         dd         0x00000018                                  ; Length of the record
000000000000a8b0         dd         0x00000b20                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a8b4         db         0xcc, 0xb4, 2 dup (0xff)                    ; begin 0x5d80
000000000000a8b8         db         0xb1, 3 dup (0x00)                          ; length 0xb1 (end at 0x5e31)
000000000000a8bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8bd         db  0x47 ; 'G'
000000000000a8be         db  0x0e ; '.'
000000000000a8bf         db  0xe0 ; '.'
000000000000a8c0         db  0x01 ; '.'
000000000000a8c1         db  0x02 ; '.'
000000000000a8c2         db  0xa4 ; '.'
000000000000a8c3         db  0x0a ; '.'
000000000000a8c4         db  0x0e ; '.'
000000000000a8c5         db  0x08 ; '.'
000000000000a8c6         db  0x41 ; 'A'
000000000000a8c7         db  0x0b ; '.'
000000000000a8c8         dd         0x0000003c                                  ; Length of the record
000000000000a8cc         dd         0x00000b3c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a8d0         db         0x70, 0xb5, 2 dup (0xff)                    ; begin 0x5e40
000000000000a8d4         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x5ec3)
000000000000a8d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8d9         db  0x42 ; 'B'
000000000000a8da         db  0x0e ; '.'
000000000000a8db         db  0x10 ; '.'
000000000000a8dc         db  0x8d ; '.'
000000000000a8dd         db  0x02 ; '.'
000000000000a8de         db  0x42 ; 'B'
000000000000a8df         db  0x0e ; '.'
000000000000a8e0         db  0x18 ; '.'
000000000000a8e1         db  0x8c ; '.'
000000000000a8e2         db  0x03 ; '.'
000000000000a8e3         db  0x44 ; 'D'
000000000000a8e4         db  0x0e ; '.'
000000000000a8e5         db  0x20 ; ' '
000000000000a8e6         db  0x86 ; '.'
000000000000a8e7         db  0x04 ; '.'
000000000000a8e8         db  0x41 ; 'A'
000000000000a8e9         db  0x0e ; '.'
000000000000a8ea         db  0x28 ; '('
000000000000a8eb         db  0x83 ; '.'
000000000000a8ec         db  0x05 ; '.'
000000000000a8ed         db  0x4a ; 'J'
000000000000a8ee         db  0x0e ; '.'
000000000000a8ef         db  0x40 ; '@'
000000000000a8f0         db  0x02 ; '.'
000000000000a8f1         db  0x64 ; 'd'
000000000000a8f2         db  0x0a ; '.'
000000000000a8f3         db  0x0e ; '.'
000000000000a8f4         db  0x28 ; '('
000000000000a8f5         db  0x41 ; 'A'
000000000000a8f6         db  0x0e ; '.'
000000000000a8f7         db  0x20 ; ' '
000000000000a8f8         db  0x41 ; 'A'
000000000000a8f9         db  0x0e ; '.'
000000000000a8fa         db  0x18 ; '.'
000000000000a8fb         db  0x42 ; 'B'
000000000000a8fc         db  0x0e ; '.'
000000000000a8fd         db  0x10 ; '.'
000000000000a8fe         db  0x42 ; 'B'
000000000000a8ff         db  0x0e ; '.'
000000000000a900         db  0x08 ; '.'
000000000000a901         db  0x41 ; 'A'
000000000000a902         db  0x0b ; '.'
000000000000a903         db  0x00 ; '.'
000000000000a904         db  0x00 ; '.'
000000000000a905         db  0x00 ; '.'
000000000000a906         db  0x00 ; '.'
000000000000a907         db  0x00 ; '.'
000000000000a908         dd         0x0000003c                                  ; Length of the record
000000000000a90c         dd         0x00000b7c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a910         db         0xc0, 0xb5, 2 dup (0xff)                    ; begin 0x5ed0
000000000000a914         db         0xf2, 3 dup (0x00)                          ; length 0xf2 (end at 0x5fc2)
000000000000a918         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a919         db  0x42 ; 'B'
000000000000a91a         db  0x0e ; '.'
000000000000a91b         db  0x10 ; '.'
000000000000a91c         db  0x8d ; '.'
000000000000a91d         db  0x02 ; '.'
000000000000a91e         db  0x42 ; 'B'
000000000000a91f         db  0x0e ; '.'
000000000000a920         db  0x18 ; '.'
000000000000a921         db  0x8c ; '.'
000000000000a922         db  0x03 ; '.'
000000000000a923         db  0x44 ; 'D'
000000000000a924         db  0x0e ; '.'
000000000000a925         db  0x20 ; ' '
000000000000a926         db  0x86 ; '.'
000000000000a927         db  0x04 ; '.'
000000000000a928         db  0x41 ; 'A'
000000000000a929         db  0x0e ; '.'
000000000000a92a         db  0x28 ; '('
000000000000a92b         db  0x83 ; '.'
000000000000a92c         db  0x05 ; '.'
000000000000a92d         db  0x4a ; 'J'
000000000000a92e         db  0x0e ; '.'
000000000000a92f         db  0xa0 ; '.'
000000000000a930         db  0x10 ; '.'
000000000000a931         db  0x02 ; '.'
000000000000a932         db  0x8f ; '.'
000000000000a933         db  0x0a ; '.'
000000000000a934         db  0x0e ; '.'
000000000000a935         db  0x28 ; '('
000000000000a936         db  0x41 ; 'A'
000000000000a937         db  0x0e ; '.'
000000000000a938         db  0x20 ; ' '
000000000000a939         db  0x41 ; 'A'
000000000000a93a         db  0x0e ; '.'
000000000000a93b         db  0x18 ; '.'
000000000000a93c         db  0x42 ; 'B'
000000000000a93d         db  0x0e ; '.'
000000000000a93e         db  0x10 ; '.'
000000000000a93f         db  0x42 ; 'B'
000000000000a940         db  0x0e ; '.'
000000000000a941         db  0x08 ; '.'
000000000000a942         db  0x48 ; 'H'
000000000000a943         db  0x0b ; '.'
000000000000a944         db  0x00 ; '.'
000000000000a945         db  0x00 ; '.'
000000000000a946         db  0x00 ; '.'
000000000000a947         db  0x00 ; '.'
000000000000a948         dd         0x00000014                                  ; Length of the record
000000000000a94c         dd         0x00000bbc                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a950         db         0x80, 0xb6, 2 dup (0xff)                    ; begin 0x5fd0
000000000000a954         db         0x12, 3 dup (0x00)                          ; length 0x12 (end at 0x5fe2)
000000000000a958         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a959         align      32
000000000000a960         dd         0x00000054                                  ; Length of the record
000000000000a964         dd         0x00000bd4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a968         db         0x88, 0xb6, 2 dup (0xff)                    ; begin 0x5ff0
000000000000a96c         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x60a6)
000000000000a970         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a971         db  0x42 ; 'B'
000000000000a972         db  0x0e ; '.'
000000000000a973         db  0x10 ; '.'
000000000000a974         db  0x8c ; '.'
000000000000a975         db  0x02 ; '.'
000000000000a976         db  0x41 ; 'A'
000000000000a977         db  0x0e ; '.'
000000000000a978         db  0x18 ; '.'
000000000000a979         db  0x86 ; '.'
000000000000a97a         db  0x03 ; '.'
000000000000a97b         db  0x44 ; 'D'
000000000000a97c         db  0x0e ; '.'
000000000000a97d         db  0x20 ; ' '
000000000000a97e         db  0x83 ; '.'
000000000000a97f         db  0x04 ; '.'
000000000000a980         db  0x47 ; 'G'
000000000000a981         db  0x0e ; '.'
000000000000a982         db  0x30 ; '0'
000000000000a983         db  0x02 ; '.'
000000000000a984         db  0x53 ; 'S'
000000000000a985         db  0x0a ; '.'
000000000000a986         db  0x0e ; '.'
000000000000a987         db  0x20 ; ' '
000000000000a988         db  0x41 ; 'A'
000000000000a989         db  0x0e ; '.'
000000000000a98a         db  0x18 ; '.'
000000000000a98b         db  0x41 ; 'A'
000000000000a98c         db  0x0e ; '.'
000000000000a98d         db  0x10 ; '.'
000000000000a98e         db  0x42 ; 'B'
000000000000a98f         db  0x0e ; '.'
000000000000a990         db  0x08 ; '.'
000000000000a991         db  0x4b ; 'K'
000000000000a992         db  0x0b ; '.'
000000000000a993         db  0x49 ; 'I'
000000000000a994         db  0x0a ; '.'
000000000000a995         db  0x0e ; '.'
000000000000a996         db  0x20 ; ' '
000000000000a997         db  0x43 ; 'C'
000000000000a998         db  0x0e ; '.'
000000000000a999         db  0x18 ; '.'
000000000000a99a         db  0x41 ; 'A'
000000000000a99b         db  0x0e ; '.'
000000000000a99c         db  0x10 ; '.'
000000000000a99d         db  0x42 ; 'B'
000000000000a99e         db  0x0e ; '.'
000000000000a99f         db  0x08 ; '.'
000000000000a9a0         db  0x41 ; 'A'
000000000000a9a1         db  0x0b ; '.'
000000000000a9a2         db  0x47 ; 'G'
000000000000a9a3         db  0x0a ; '.'
000000000000a9a4         db  0x0e ; '.'
000000000000a9a5         db  0x20 ; ' '
000000000000a9a6         db  0x43 ; 'C'
000000000000a9a7         db  0x0e ; '.'
000000000000a9a8         db  0x18 ; '.'
000000000000a9a9         db  0x41 ; 'A'
000000000000a9aa         db  0x0e ; '.'
000000000000a9ab         db  0x10 ; '.'
000000000000a9ac         db  0x42 ; 'B'
000000000000a9ad         db  0x0e ; '.'
000000000000a9ae         db  0x08 ; '.'
000000000000a9af         db  0x43 ; 'C'
000000000000a9b0         db  0x0b ; '.'
000000000000a9b1         db  0x00 ; '.'
000000000000a9b2         db  0x00 ; '.'
000000000000a9b3         db  0x00 ; '.'
000000000000a9b4         db  0x00 ; '.'
000000000000a9b5         db  0x00 ; '.'
000000000000a9b6         db  0x00 ; '.'
000000000000a9b7         db  0x00 ; '.'
000000000000a9b8         dd         0x0000004c                                  ; Length of the record
000000000000a9bc         dd         0x00000c2c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000a9c0         db         0xf0, 0xb6, 2 dup (0xff)                    ; begin 0x60b0
000000000000a9c4         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x612d)
000000000000a9c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a9c9         db  0x42 ; 'B'
000000000000a9ca         db  0x0e ; '.'
000000000000a9cb         db  0x10 ; '.'
000000000000a9cc         db  0x8c ; '.'
000000000000a9cd         db  0x02 ; '.'
000000000000a9ce         db  0x41 ; 'A'
000000000000a9cf         db  0x0e ; '.'
000000000000a9d0         db  0x18 ; '.'
000000000000a9d1         db  0x86 ; '.'
000000000000a9d2         db  0x03 ; '.'
000000000000a9d3         db  0x44 ; 'D'
000000000000a9d4         db  0x0e ; '.'
000000000000a9d5         db  0x20 ; ' '
000000000000a9d6         db  0x83 ; '.'
000000000000a9d7         db  0x04 ; '.'
000000000000a9d8         db  0x69 ; 'i'
000000000000a9d9         db  0x0a ; '.'
000000000000a9da         db  0x0e ; '.'
000000000000a9db         db  0x18 ; '.'
000000000000a9dc         db  0x41 ; 'A'
000000000000a9dd         db  0x0e ; '.'
000000000000a9de         db  0x10 ; '.'
000000000000a9df         db  0x42 ; 'B'
000000000000a9e0         db  0x0e ; '.'
000000000000a9e1         db  0x08 ; '.'
000000000000a9e2         db  0x45 ; 'E'
000000000000a9e3         db  0x0b ; '.'
000000000000a9e4         db  0x55 ; 'U'
000000000000a9e5         db  0x0a ; '.'
000000000000a9e6         db  0x0e ; '.'
000000000000a9e7         db  0x18 ; '.'
000000000000a9e8         db  0x41 ; 'A'
000000000000a9e9         db  0x0e ; '.'
000000000000a9ea         db  0x10 ; '.'
000000000000a9eb         db  0x42 ; 'B'
000000000000a9ec         db  0x0e ; '.'
000000000000a9ed         db  0x08 ; '.'
000000000000a9ee         db  0x48 ; 'H'
000000000000a9ef         db  0x0b ; '.'
000000000000a9f0         db  0x41 ; 'A'
000000000000a9f1         db  0x0a ; '.'
000000000000a9f2         db  0x0e ; '.'
000000000000a9f3         db  0x18 ; '.'
000000000000a9f4         db  0x46 ; 'F'
000000000000a9f5         db  0x0e ; '.'
000000000000a9f6         db  0x10 ; '.'
000000000000a9f7         db  0x42 ; 'B'
000000000000a9f8         db  0x0e ; '.'
000000000000a9f9         db  0x08 ; '.'
000000000000a9fa         db  0x47 ; 'G'
000000000000a9fb         db  0x0b ; '.'
000000000000a9fc         db  0x49 ; 'I'
000000000000a9fd         db  0x0e ; '.'
000000000000a9fe         db  0x18 ; '.'
000000000000a9ff         db  0x41 ; 'A'
000000000000aa00         db  0x0e ; '.'
000000000000aa01         db  0x10 ; '.'
000000000000aa02         db  0x42 ; 'B'
000000000000aa03         db  0x0e ; '.'
000000000000aa04         db  0x08 ; '.'
000000000000aa05         db  0x00 ; '.'
000000000000aa06         db  0x00 ; '.'
000000000000aa07         db  0x00 ; '.'
000000000000aa08         dd         0x0000001c                                  ; Length of the record
000000000000aa0c         dd         0x00000c7c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aa10         db         0x20, 0xb7, 2 dup (0xff)                    ; begin 0x6130
000000000000aa14         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x6190)
000000000000aa18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa19         db  0x44 ; 'D'
000000000000aa1a         db  0x0e ; '.'
000000000000aa1b         db  0x10 ; '.'
000000000000aa1c         db  0x75 ; 'u'
000000000000aa1d         db  0x0a ; '.'
000000000000aa1e         db  0x0e ; '.'
000000000000aa1f         db  0x08 ; '.'
000000000000aa20         db  0x47 ; 'G'
000000000000aa21         db  0x0b ; '.'
000000000000aa22         db  0x5f ; '_'
000000000000aa23         db  0x0e ; '.'
000000000000aa24         db  0x08 ; '.'
000000000000aa25         db  0x00 ; '.'
000000000000aa26         db  0x00 ; '.'
000000000000aa27         db  0x00 ; '.'
000000000000aa28         dd         0x0000001c                                  ; Length of the record
000000000000aa2c         dd         0x00000c9c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aa30         db         0x60, 0xb7, 2 dup (0xff)                    ; begin 0x6190
000000000000aa34         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x61cc)
000000000000aa38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa39         db  0x44 ; 'D'
000000000000aa3a         db  0x0e ; '.'
000000000000aa3b         db  0x10 ; '.'
000000000000aa3c         db  0x61 ; 'a'
000000000000aa3d         db  0x0a ; '.'
000000000000aa3e         db  0x0e ; '.'
000000000000aa3f         db  0x08 ; '.'
000000000000aa40         db  0x4b ; 'K'
000000000000aa41         db  0x0b ; '.'
000000000000aa42         db  0x4b ; 'K'
000000000000aa43         db  0x0e ; '.'
000000000000aa44         db  0x08 ; '.'
000000000000aa45         db  0x00 ; '.'
000000000000aa46         db  0x00 ; '.'
000000000000aa47         db  0x00 ; '.'
000000000000aa48         dd         0x00000034                                  ; Length of the record
000000000000aa4c         dd         0x00000cbc                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aa50         db         0x80, 0xb7, 2 dup (0xff)                    ; begin 0x61d0
000000000000aa54         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x624b)
000000000000aa58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa59         db  0x42 ; 'B'
000000000000aa5a         db  0x0e ; '.'
000000000000aa5b         db  0x10 ; '.'
000000000000aa5c         db  0x8c ; '.'
000000000000aa5d         db  0x02 ; '.'
000000000000aa5e         db  0x41 ; 'A'
000000000000aa5f         db  0x0e ; '.'
000000000000aa60         db  0x18 ; '.'
000000000000aa61         db  0x86 ; '.'
000000000000aa62         db  0x03 ; '.'
000000000000aa63         db  0x41 ; 'A'
000000000000aa64         db  0x0e ; '.'
000000000000aa65         db  0x20 ; ' '
000000000000aa66         db  0x83 ; '.'
000000000000aa67         db  0x04 ; '.'
000000000000aa68         db  0x7d ; '}'
000000000000aa69         db  0x0a ; '.'
000000000000aa6a         db  0x0e ; '.'
000000000000aa6b         db  0x18 ; '.'
000000000000aa6c         db  0x41 ; 'A'
000000000000aa6d         db  0x0e ; '.'
000000000000aa6e         db  0x10 ; '.'
000000000000aa6f         db  0x42 ; 'B'
000000000000aa70         db  0x0e ; '.'
000000000000aa71         db  0x08 ; '.'
000000000000aa72         db  0x44 ; 'D'
000000000000aa73         db  0x0b ; '.'
000000000000aa74         db  0x60 ; '`'
000000000000aa75         db  0x0a ; '.'
000000000000aa76         db  0x0e ; '.'
000000000000aa77         db  0x18 ; '.'
000000000000aa78         db  0x41 ; 'A'
000000000000aa79         db  0x0e ; '.'
000000000000aa7a         db  0x10 ; '.'
000000000000aa7b         db  0x42 ; 'B'
000000000000aa7c         db  0x0e ; '.'
000000000000aa7d         db  0x08 ; '.'
000000000000aa7e         db  0x45 ; 'E'
000000000000aa7f         db  0x0b ; '.'
000000000000aa80         dd         0x0000001c                                  ; Length of the record
000000000000aa84         dd         0x00000cf4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aa88         db         0xc8, 0xb7, 2 dup (0xff)                    ; begin 0x6250
000000000000aa8c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x6290)
000000000000aa90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa91         db  0x44 ; 'D'
000000000000aa92         db  0x0e ; '.'
000000000000aa93         db  0x10 ; '.'
000000000000aa94         db  0x83 ; '.'
000000000000aa95         db  0x02 ; '.'
000000000000aa96         db  0x5a ; 'Z'
000000000000aa97         db  0x0a ; '.'
000000000000aa98         db  0x0e ; '.'
000000000000aa99         db  0x08 ; '.'
000000000000aa9a         db  0x4a ; 'J'
000000000000aa9b         db  0x0b ; '.'
000000000000aa9c         db  0x53 ; 'S'
000000000000aa9d         db  0x0e ; '.'
000000000000aa9e         db  0x08 ; '.'
000000000000aa9f         db  0x00 ; '.'
000000000000aaa0         dd         0x0000002c                                  ; Length of the record
000000000000aaa4         dd         0x00000d14                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aaa8         db         0xe8, 0xb7, 2 dup (0xff)                    ; begin 0x6290
000000000000aaac         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x62e7)
000000000000aab0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aab1         db  0x63 ; 'c'
000000000000aab2         db  0x0e ; '.'
000000000000aab3         db  0x10 ; '.'
000000000000aab4         db  0x8c ; '.'
000000000000aab5         db  0x02 ; '.'
000000000000aab6         db  0x41 ; 'A'
000000000000aab7         db  0x0e ; '.'
000000000000aab8         db  0x18 ; '.'
000000000000aab9         db  0x86 ; '.'
000000000000aaba         db  0x03 ; '.'
000000000000aabb         db  0x44 ; 'D'
000000000000aabc         db  0x0e ; '.'
000000000000aabd         db  0x20 ; ' '
000000000000aabe         db  0x83 ; '.'
000000000000aabf         db  0x04 ; '.'
000000000000aac0         db  0x6b ; 'k'
000000000000aac1         db  0x0e ; '.'
000000000000aac2         db  0x18 ; '.'
000000000000aac3         db  0x41 ; 'A'
000000000000aac4         db  0x0e ; '.'
000000000000aac5         db  0x10 ; '.'
000000000000aac6         db  0x42 ; 'B'
000000000000aac7         db  0x0e ; '.'
000000000000aac8         db  0x08 ; '.'
000000000000aac9         db  0x00 ; '.'
000000000000aaca         db  0x00 ; '.'
000000000000aacb         db  0x00 ; '.'
000000000000aacc         db  0x00 ; '.'
000000000000aacd         db  0x00 ; '.'
000000000000aace         db  0x00 ; '.'
000000000000aacf         db  0x00 ; '.'
000000000000aad0         dd         0x00000014                                  ; Length of the record
000000000000aad4         dd         0x00000d44                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aad8         db         0x18, 0xb8, 2 dup (0xff)                    ; begin 0x62f0
000000000000aadc         db         0x04, 3 dup (0x00)                          ; length 0x4 (end at 0x62f4)
000000000000aae0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aae1         align      8
000000000000aae8         dd         0x0000002c                                  ; Length of the record
000000000000aaec         dd         0x00000d5c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000aaf0         db         0x10, 0xb8, 2 dup (0xff)                    ; begin 0x6300
000000000000aaf4         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0x741f)
000000000000aaf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aaf9         db  0x41 ; 'A'
000000000000aafa         db  0x0e ; '.'
000000000000aafb         db  0x10 ; '.'
000000000000aafc         db  0x86 ; '.'
000000000000aafd         db  0x02 ; '.'
000000000000aafe         db  0x43 ; 'C'
000000000000aaff         db  0x0d ; '.'
000000000000ab00         db  0x06 ; '.'
000000000000ab01         db  0x48 ; 'H'
000000000000ab02         db  0x8f ; '.'
000000000000ab03         db  0x03 ; '.'
000000000000ab04         db  0x8e ; '.'
000000000000ab05         db  0x04 ; '.'
000000000000ab06         db  0x8d ; '.'
000000000000ab07         db  0x05 ; '.'
000000000000ab08         db  0x8c ; '.'
000000000000ab09         db  0x06 ; '.'
000000000000ab0a         db  0x48 ; 'H'
000000000000ab0b         db  0x83 ; '.'
000000000000ab0c         db  0x07 ; '.'
000000000000ab0d         db  0x03 ; '.'
000000000000ab0e         db  0xef ; '.'
000000000000ab0f         db  0x01 ; '.'
000000000000ab10         db  0x0a ; '.'
000000000000ab11         db  0x0c ; '.'
000000000000ab12         db  0x07 ; '.'
000000000000ab13         db  0x08 ; '.'
000000000000ab14         db  0x45 ; 'E'
000000000000ab15         db  0x0b ; '.'
000000000000ab16         db  0x00 ; '.'
000000000000ab17         db  0x00 ; '.'
000000000000ab18         dd         0x00000014                                  ; Length of the record
000000000000ab1c         dd         0x00000d8c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000ab20         db         0x00, 0xc9, 2 dup (0xff)                    ; begin 0x7420
000000000000ab24         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0x761e)
000000000000ab28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab29         align      16
000000000000ab30         dd         0x0000004c                                  ; Length of the record
000000000000ab34         dd         0x00000da4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000ab38         db         0xe8, 0xca, 2 dup (0xff)                    ; begin 0x7620
000000000000ab3c         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0x830c)
000000000000ab40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab41         db  0x42 ; 'B'
000000000000ab42         db  0x0e ; '.'
000000000000ab43         db  0x10 ; '.'
000000000000ab44         db  0x8f ; '.'
000000000000ab45         db  0x02 ; '.'
000000000000ab46         db  0x42 ; 'B'
000000000000ab47         db  0x0e ; '.'
000000000000ab48         db  0x18 ; '.'
000000000000ab49         db  0x8e ; '.'
000000000000ab4a         db  0x03 ; '.'
000000000000ab4b         db  0x46 ; 'F'
000000000000ab4c         db  0x0e ; '.'
000000000000ab4d         db  0x20 ; ' '
000000000000ab4e         db  0x8d ; '.'
000000000000ab4f         db  0x04 ; '.'
000000000000ab50         db  0x42 ; 'B'
000000000000ab51         db  0x0e ; '.'
000000000000ab52         db  0x28 ; '('
000000000000ab53         db  0x8c ; '.'
000000000000ab54         db  0x05 ; '.'
000000000000ab55         db  0x45 ; 'E'
000000000000ab56         db  0x0e ; '.'
000000000000ab57         db  0x30 ; '0'
000000000000ab58         db  0x86 ; '.'
000000000000ab59         db  0x06 ; '.'
000000000000ab5a         db  0x41 ; 'A'
000000000000ab5b         db  0x0e ; '.'
000000000000ab5c         db  0x38 ; '8'
000000000000ab5d         db  0x83 ; '.'
000000000000ab5e         db  0x07 ; '.'
000000000000ab5f         db  0x52 ; 'R'
000000000000ab60         db  0x0e ; '.'
000000000000ab61         db  0x90 ; '.'
000000000000ab62         db  0x01 ; '.'
000000000000ab63         db  0x02 ; '.'
000000000000ab64         db  0x82 ; '.'
000000000000ab65         db  0x0a ; '.'
000000000000ab66         db  0x0e ; '.'
000000000000ab67         db  0x38 ; '8'
000000000000ab68         db  0x41 ; 'A'
000000000000ab69         db  0x0e ; '.'
000000000000ab6a         db  0x30 ; '0'
000000000000ab6b         db  0x41 ; 'A'
000000000000ab6c         db  0x0e ; '.'
000000000000ab6d         db  0x28 ; '('
000000000000ab6e         db  0x42 ; 'B'
000000000000ab6f         db  0x0e ; '.'
000000000000ab70         db  0x20 ; ' '
000000000000ab71         db  0x42 ; 'B'
000000000000ab72         db  0x0e ; '.'
000000000000ab73         db  0x18 ; '.'
000000000000ab74         db  0x42 ; 'B'
000000000000ab75         db  0x0e ; '.'
000000000000ab76         db  0x10 ; '.'
000000000000ab77         db  0x42 ; 'B'
000000000000ab78         db  0x0e ; '.'
000000000000ab79         db  0x08 ; '.'
000000000000ab7a         db  0x48 ; 'H'
000000000000ab7b         db  0x0b ; '.'
000000000000ab7c         db  0x00 ; '.'
000000000000ab7d         db  0x00 ; '.'
000000000000ab7e         db  0x00 ; '.'
000000000000ab7f         db  0x00 ; '.'
000000000000ab80         dd         0x00000044                                  ; Length of the record
000000000000ab84         dd         0x00000df4                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000ab88         db         0x88, 0xd7, 2 dup (0xff)                    ; begin 0x8310
000000000000ab8c         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x8375)
000000000000ab90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab91         db  0x42 ; 'B'
000000000000ab92         db  0x0e ; '.'
000000000000ab93         db  0x10 ; '.'
000000000000ab94         db  0x8f ; '.'
000000000000ab95         db  0x02 ; '.'
000000000000ab96         db  0x42 ; 'B'
000000000000ab97         db  0x0e ; '.'
000000000000ab98         db  0x18 ; '.'
000000000000ab99         db  0x8e ; '.'
000000000000ab9a         db  0x03 ; '.'
000000000000ab9b         db  0x45 ; 'E'
000000000000ab9c         db  0x0e ; '.'
000000000000ab9d         db  0x20 ; ' '
000000000000ab9e         db  0x8d ; '.'
000000000000ab9f         db  0x04 ; '.'
000000000000aba0         db  0x42 ; 'B'
000000000000aba1         db  0x0e ; '.'
000000000000aba2         db  0x28 ; '('
000000000000aba3         db  0x8c ; '.'
000000000000aba4         db  0x05 ; '.'
000000000000aba5         db  0x48 ; 'H'
000000000000aba6         db  0x0e ; '.'
000000000000aba7         db  0x30 ; '0'
000000000000aba8         db  0x86 ; '.'
000000000000aba9         db  0x06 ; '.'
000000000000abaa         db  0x48 ; 'H'
000000000000abab         db  0x0e ; '.'
000000000000abac         db  0x38 ; '8'
000000000000abad         db  0x83 ; '.'
000000000000abae         db  0x07 ; '.'
000000000000abaf         db  0x4d ; 'M'
000000000000abb0         db  0x0e ; '.'
000000000000abb1         db  0x40 ; '@'
000000000000abb2         db  0x72 ; 'r'
000000000000abb3         db  0x0e ; '.'
000000000000abb4         db  0x38 ; '8'
000000000000abb5         db  0x41 ; 'A'
000000000000abb6         db  0x0e ; '.'
000000000000abb7         db  0x30 ; '0'
000000000000abb8         db  0x41 ; 'A'
000000000000abb9         db  0x0e ; '.'
000000000000abba         db  0x28 ; '('
000000000000abbb         db  0x42 ; 'B'
000000000000abbc         db  0x0e ; '.'
000000000000abbd         db  0x20 ; ' '
000000000000abbe         db  0x42 ; 'B'
000000000000abbf         db  0x0e ; '.'
000000000000abc0         db  0x18 ; '.'
000000000000abc1         db  0x42 ; 'B'
000000000000abc2         db  0x0e ; '.'
000000000000abc3         db  0x10 ; '.'
000000000000abc4         db  0x42 ; 'B'
000000000000abc5         db  0x0e ; '.'
000000000000abc6         db  0x08 ; '.'
000000000000abc7         db  0x00 ; '.'
000000000000abc8         dd         0x00000014                                  ; Length of the record
000000000000abcc         dd         0x00000e3c                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000abd0         db         0xb0, 0xd7, 2 dup (0xff)                    ; begin 0x8380
000000000000abd4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x8382)
000000000000abd8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abd9         align      32
000000000000abe0         dd         0x00000010                                  ; Length of the record
000000000000abe4         dd         0x00000e54                                  ; FDE: parent CIE at 0x9d90 (FDE encoding = 0x1B)
000000000000abe8         db         0xa8, 0xd7, 2 dup (0xff)                    ; begin 0x8390
000000000000abec         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x839e)
000000000000abf0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abf1         align      8


        ; Segment Segment 3
        ; Range: [0x20bbb0; 0x20c230[ (1664 bytes)
        ; File offset : [48048; 49280[ (1232 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20bbb0; 0x20bbb8[ (8 bytes)
        ; File offset : [48048; 48056[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020bbb0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20bbb8; 0x20bbc0[ (8 bytes)
        ; File offset : [48056; 48064[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020bbb8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20bbc0; 0x20bc18[ (88 bytes)
        ; File offset : [48064; 48152[ (88 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     quoting_style_args:
000000000020bbc0         db  0x39 ; '9'
000000000020bbc1         db  0x8f ; '.'
000000000020bbc2         db  0x00 ; '.'
000000000020bbc3         db  0x00 ; '.'
000000000020bbc4         db  0x00 ; '.'
000000000020bbc5         db  0x00 ; '.'
000000000020bbc6         db  0x00 ; '.'
000000000020bbc7         db  0x00 ; '.'
000000000020bbc8         db  0x41 ; 'A'
000000000020bbc9         db  0x8f ; '.'
000000000020bbca         db  0x00 ; '.'
000000000020bbcb         db  0x00 ; '.'
000000000020bbcc         db  0x00 ; '.'
000000000020bbcd         db  0x00 ; '.'
000000000020bbce         db  0x00 ; '.'
000000000020bbcf         db  0x00 ; '.'
000000000020bbd0         db  0x47 ; 'G'
000000000020bbd1         db  0x8f ; '.'
000000000020bbd2         db  0x00 ; '.'
000000000020bbd3         db  0x00 ; '.'
000000000020bbd4         db  0x00 ; '.'
000000000020bbd5         db  0x00 ; '.'
000000000020bbd6         db  0x00 ; '.'
000000000020bbd7         db  0x00 ; '.'
000000000020bbd8         db  0x54 ; 'T'
000000000020bbd9         db  0x8f ; '.'
000000000020bbda         db  0x00 ; '.'
000000000020bbdb         db  0x00 ; '.'
000000000020bbdc         db  0x00 ; '.'
000000000020bbdd         db  0x00 ; '.'
000000000020bbde         db  0x00 ; '.'
000000000020bbdf         db  0x00 ; '.'
000000000020bbe0         db  0x61 ; 'a'
000000000020bbe1         db  0x8f ; '.'
000000000020bbe2         db  0x00 ; '.'
000000000020bbe3         db  0x00 ; '.'
000000000020bbe4         db  0x00 ; '.'
000000000020bbe5         db  0x00 ; '.'
000000000020bbe6         db  0x00 ; '.'
000000000020bbe7         db  0x00 ; '.'
000000000020bbe8         db  0x75 ; 'u'
000000000020bbe9         db  0x8f ; '.'
000000000020bbea         db  0x00 ; '.'
000000000020bbeb         db  0x00 ; '.'
000000000020bbec         db  0x00 ; '.'
000000000020bbed         db  0x00 ; '.'
000000000020bbee         db  0x00 ; '.'
000000000020bbef         db  0x00 ; '.'
000000000020bbf0         db  0x77 ; 'w'
000000000020bbf1         db  0x8f ; '.'
000000000020bbf2         db  0x00 ; '.'
000000000020bbf3         db  0x00 ; '.'
000000000020bbf4         db  0x00 ; '.'
000000000020bbf5         db  0x00 ; '.'
000000000020bbf6         db  0x00 ; '.'
000000000020bbf7         db  0x00 ; '.'
000000000020bbf8         db  0x5a ; 'Z'
000000000020bbf9         db  0x8f ; '.'
000000000020bbfa         db  0x00 ; '.'
000000000020bbfb         db  0x00 ; '.'
000000000020bbfc         db  0x00 ; '.'
000000000020bbfd         db  0x00 ; '.'
000000000020bbfe         db  0x00 ; '.'
000000000020bbff         db  0x00 ; '.'
000000000020bc00         db  0x6e ; 'n'
000000000020bc01         db  0x8c ; '.'
000000000020bc02         db  0x00 ; '.'
000000000020bc03         db  0x00 ; '.'
000000000020bc04         db  0x00 ; '.'
000000000020bc05         db  0x00 ; '.'
000000000020bc06         db  0x00 ; '.'
000000000020bc07         db  0x00 ; '.'
000000000020bc08         db  0x7f ; '.'
000000000020bc09         db  0x8f ; '.'
000000000020bc0a         db  0x00 ; '.'
000000000020bc0b         db  0x00 ; '.'
000000000020bc0c         db  0x00 ; '.'
000000000020bc0d         db  0x00 ; '.'
000000000020bc0e         db  0x00 ; '.'
000000000020bc0f         db  0x00 ; '.'
000000000020bc10         db  0x00 ; '.'
000000000020bc11         db  0x00 ; '.'
000000000020bc12         db  0x00 ; '.'
000000000020bc13         db  0x00 ; '.'
000000000020bc14         db  0x00 ; '.'
000000000020bc15         db  0x00 ; '.'
000000000020bc16         db  0x00 ; '.'
000000000020bc17         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20bc18; 0x20be08[ (496 bytes)
        ; File offset : [48152; 48648[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020bc18         db  0x01 ; '.'
000000000020bc19         db  0x00 ; '.'
000000000020bc1a         db  0x00 ; '.'
000000000020bc1b         db  0x00 ; '.'
000000000020bc1c         db  0x00 ; '.'
000000000020bc1d         db  0x00 ; '.'
000000000020bc1e         db  0x00 ; '.'
000000000020bc1f         db  0x00 ; '.'
000000000020bc20         db  0x01 ; '.'
000000000020bc21         db  0x00 ; '.'
000000000020bc22         db  0x00 ; '.'
000000000020bc23         db  0x00 ; '.'
000000000020bc24         db  0x00 ; '.'
000000000020bc25         db  0x00 ; '.'
000000000020bc26         db  0x00 ; '.'
000000000020bc27         db  0x00 ; '.'
000000000020bc28         db  0x0c ; '.'
000000000020bc29         db  0x00 ; '.'
000000000020bc2a         db  0x00 ; '.'
000000000020bc2b         db  0x00 ; '.'
000000000020bc2c         db  0x00 ; '.'
000000000020bc2d         db  0x00 ; '.'
000000000020bc2e         db  0x00 ; '.'
000000000020bc2f         db  0x00 ; '.'
000000000020bc30         db  0xe0 ; '.'
000000000020bc31         db  0x13 ; '.'
000000000020bc32         db  0x00 ; '.'
000000000020bc33         db  0x00 ; '.'
000000000020bc34         db  0x00 ; '.'
000000000020bc35         db  0x00 ; '.'
000000000020bc36         db  0x00 ; '.'
000000000020bc37         db  0x00 ; '.'
000000000020bc38         db  0x0d ; '.'
000000000020bc39         db  0x00 ; '.'
000000000020bc3a         db  0x00 ; '.'
000000000020bc3b         db  0x00 ; '.'
000000000020bc3c         db  0x00 ; '.'
000000000020bc3d         db  0x00 ; '.'
000000000020bc3e         db  0x00 ; '.'
000000000020bc3f         db  0x00 ; '.'
000000000020bc40         db  0xa0 ; '.'
000000000020bc41         db  0x83 ; '.'
000000000020bc42         db  0x00 ; '.'
000000000020bc43         db  0x00 ; '.'
000000000020bc44         db  0x00 ; '.'
000000000020bc45         db  0x00 ; '.'
000000000020bc46         db  0x00 ; '.'
000000000020bc47         db  0x00 ; '.'
000000000020bc48         db  0x19 ; '.'
000000000020bc49         db  0x00 ; '.'
000000000020bc4a         db  0x00 ; '.'
000000000020bc4b         db  0x00 ; '.'
000000000020bc4c         db  0x00 ; '.'
000000000020bc4d         db  0x00 ; '.'
000000000020bc4e         db  0x00 ; '.'
000000000020bc4f         db  0x00 ; '.'
000000000020bc50         db  0xb0 ; '.'
000000000020bc51         db  0xbb ; '.'
000000000020bc52         db  0x20 ; ' '
000000000020bc53         db  0x00 ; '.'
000000000020bc54         db  0x00 ; '.'
000000000020bc55         db  0x00 ; '.'
000000000020bc56         db  0x00 ; '.'
000000000020bc57         db  0x00 ; '.'
000000000020bc58         db  0x1b ; '.'
000000000020bc59         db  0x00 ; '.'
000000000020bc5a         db  0x00 ; '.'
000000000020bc5b         db  0x00 ; '.'
000000000020bc5c         db  0x00 ; '.'
000000000020bc5d         db  0x00 ; '.'
000000000020bc5e         db  0x00 ; '.'
000000000020bc5f         db  0x00 ; '.'
000000000020bc60         db  0x08 ; '.'
000000000020bc61         db  0x00 ; '.'
000000000020bc62         db  0x00 ; '.'
000000000020bc63         db  0x00 ; '.'
000000000020bc64         db  0x00 ; '.'
000000000020bc65         db  0x00 ; '.'
000000000020bc66         db  0x00 ; '.'
000000000020bc67         db  0x00 ; '.'
000000000020bc68         db  0x1a ; '.'
000000000020bc69         db  0x00 ; '.'
000000000020bc6a         db  0x00 ; '.'
000000000020bc6b         db  0x00 ; '.'
000000000020bc6c         db  0x00 ; '.'
000000000020bc6d         db  0x00 ; '.'
000000000020bc6e         db  0x00 ; '.'
000000000020bc6f         db  0x00 ; '.'
000000000020bc70         db  0xb8 ; '.'
000000000020bc71         db  0xbb ; '.'
000000000020bc72         db  0x20 ; ' '
000000000020bc73         db  0x00 ; '.'
000000000020bc74         db  0x00 ; '.'
000000000020bc75         db  0x00 ; '.'
000000000020bc76         db  0x00 ; '.'
000000000020bc77         db  0x00 ; '.'
000000000020bc78         db  0x1c ; '.'
000000000020bc79         db  0x00 ; '.'
000000000020bc7a         db  0x00 ; '.'
000000000020bc7b         db  0x00 ; '.'
000000000020bc7c         db  0x00 ; '.'
000000000020bc7d         db  0x00 ; '.'
000000000020bc7e         db  0x00 ; '.'
000000000020bc7f         db  0x00 ; '.'
000000000020bc80         db  0x08 ; '.'
000000000020bc81         db  0x00 ; '.'
000000000020bc82         db  0x00 ; '.'
000000000020bc83         db  0x00 ; '.'
000000000020bc84         db  0x00 ; '.'
000000000020bc85         db  0x00 ; '.'
000000000020bc86         db  0x00 ; '.'
000000000020bc87         db  0x00 ; '.'
000000000020bc88         db  0xf5 ; '.'
000000000020bc89         db  0xfe ; '.'
000000000020bc8a         db  0xff ; '.'
000000000020bc8b         db  0x6f ; 'o'
000000000020bc8c         db  0x00 ; '.'
000000000020bc8d         db  0x00 ; '.'
000000000020bc8e         db  0x00 ; '.'
000000000020bc8f         db  0x00 ; '.'
000000000020bc90         db  0x98 ; '.'
000000000020bc91         db  0x02 ; '.'
000000000020bc92         db  0x00 ; '.'
000000000020bc93         db  0x00 ; '.'
000000000020bc94         db  0x00 ; '.'
000000000020bc95         db  0x00 ; '.'
000000000020bc96         db  0x00 ; '.'
000000000020bc97         db  0x00 ; '.'
000000000020bc98         db  0x05 ; '.'
000000000020bc99         db  0x00 ; '.'
000000000020bc9a         db  0x00 ; '.'
000000000020bc9b         db  0x00 ; '.'
000000000020bc9c         db  0x00 ; '.'
000000000020bc9d         db  0x00 ; '.'
000000000020bc9e         db  0x00 ; '.'
000000000020bc9f         db  0x00 ; '.'
000000000020bca0         db  0xd8 ; '.'
000000000020bca1         db  0x08 ; '.'
000000000020bca2         db  0x00 ; '.'
000000000020bca3         db  0x00 ; '.'
000000000020bca4         db  0x00 ; '.'
000000000020bca5         db  0x00 ; '.'
000000000020bca6         db  0x00 ; '.'
000000000020bca7         db  0x00 ; '.'
000000000020bca8         db  0x06 ; '.'
000000000020bca9         db  0x00 ; '.'
000000000020bcaa         db  0x00 ; '.'
000000000020bcab         db  0x00 ; '.'
000000000020bcac         db  0x00 ; '.'
000000000020bcad         db  0x00 ; '.'
000000000020bcae         db  0x00 ; '.'
000000000020bcaf         db  0x00 ; '.'
000000000020bcb0         db  0xd8 ; '.'
000000000020bcb1         db  0x02 ; '.'
000000000020bcb2         db  0x00 ; '.'
000000000020bcb3         db  0x00 ; '.'
000000000020bcb4         db  0x00 ; '.'
000000000020bcb5         db  0x00 ; '.'
000000000020bcb6         db  0x00 ; '.'
000000000020bcb7         db  0x00 ; '.'
000000000020bcb8         db  0x0a ; '.'
000000000020bcb9         db  0x00 ; '.'
000000000020bcba         db  0x00 ; '.'
000000000020bcbb         db  0x00 ; '.'
000000000020bcbc         db  0x00 ; '.'
000000000020bcbd         db  0x00 ; '.'
000000000020bcbe         db  0x00 ; '.'
000000000020bcbf         db  0x00 ; '.'
000000000020bcc0         db  0xef ; '.'
000000000020bcc1         db  0x02 ; '.'
000000000020bcc2         db  0x00 ; '.'
000000000020bcc3         db  0x00 ; '.'
000000000020bcc4         db  0x00 ; '.'
000000000020bcc5         db  0x00 ; '.'
000000000020bcc6         db  0x00 ; '.'
000000000020bcc7         db  0x00 ; '.'
000000000020bcc8         db  0x0b ; '.'
000000000020bcc9         db  0x00 ; '.'
000000000020bcca         db  0x00 ; '.'
000000000020bccb         db  0x00 ; '.'
000000000020bccc         db  0x00 ; '.'
000000000020bccd         db  0x00 ; '.'
000000000020bcce         db  0x00 ; '.'
000000000020bccf         db  0x00 ; '.'
000000000020bcd0         db  0x18 ; '.'
000000000020bcd1         db  0x00 ; '.'
000000000020bcd2         db  0x00 ; '.'
000000000020bcd3         db  0x00 ; '.'
000000000020bcd4         db  0x00 ; '.'
000000000020bcd5         db  0x00 ; '.'
000000000020bcd6         db  0x00 ; '.'
000000000020bcd7         db  0x00 ; '.'
000000000020bcd8         db  0x15 ; '.'
000000000020bcd9         db  0x00 ; '.'
000000000020bcda         db  0x00 ; '.'
000000000020bcdb         db  0x00 ; '.'
000000000020bcdc         db  0x00 ; '.'
000000000020bcdd         db  0x00 ; '.'
000000000020bcde         db  0x00 ; '.'
000000000020bcdf         db  0x00 ; '.'
000000000020bce0         db  0x00 ; '.'
000000000020bce1         db  0x00 ; '.'
000000000020bce2         db  0x00 ; '.'
000000000020bce3         db  0x00 ; '.'
000000000020bce4         db  0x00 ; '.'
000000000020bce5         db  0x00 ; '.'
000000000020bce6         db  0x00 ; '.'
000000000020bce7         db  0x00 ; '.'
000000000020bce8         db  0x03 ; '.'
000000000020bce9         db  0x00 ; '.'
000000000020bcea         db  0x00 ; '.'
000000000020bceb         db  0x00 ; '.'
000000000020bcec         db  0x00 ; '.'
000000000020bced         db  0x00 ; '.'
000000000020bcee         db  0x00 ; '.'
000000000020bcef         db  0x00 ; '.'
000000000020bcf0         db  0x08 ; '.'
000000000020bcf1         db  0xbe ; '.'
000000000020bcf2         db  0x20 ; ' '
000000000020bcf3         db  0x00 ; '.'
000000000020bcf4         db  0x00 ; '.'
000000000020bcf5         db  0x00 ; '.'
000000000020bcf6         db  0x00 ; '.'
000000000020bcf7         db  0x00 ; '.'
000000000020bcf8         db  0x02 ; '.'
000000000020bcf9         db  0x00 ; '.'
000000000020bcfa         db  0x00 ; '.'
000000000020bcfb         db  0x00 ; '.'
000000000020bcfc         db  0x00 ; '.'
000000000020bcfd         db  0x00 ; '.'
000000000020bcfe         db  0x00 ; '.'
000000000020bcff         db  0x00 ; '.'
000000000020bd00         db  0xe0 ; '.'
000000000020bd01         db  0x04 ; '.'
000000000020bd02         db  0x00 ; '.'
000000000020bd03         db  0x00 ; '.'
000000000020bd04         db  0x00 ; '.'
000000000020bd05         db  0x00 ; '.'
000000000020bd06         db  0x00 ; '.'
000000000020bd07         db  0x00 ; '.'
000000000020bd08         db  0x14 ; '.'
000000000020bd09         db  0x00 ; '.'
000000000020bd0a         db  0x00 ; '.'
000000000020bd0b         db  0x00 ; '.'
000000000020bd0c         db  0x00 ; '.'
000000000020bd0d         db  0x00 ; '.'
000000000020bd0e         db  0x00 ; '.'
000000000020bd0f         db  0x00 ; '.'
000000000020bd10         db  0x07 ; '.'
000000000020bd11         db  0x00 ; '.'
000000000020bd12         db  0x00 ; '.'
000000000020bd13         db  0x00 ; '.'
000000000020bd14         db  0x00 ; '.'
000000000020bd15         db  0x00 ; '.'
000000000020bd16         db  0x00 ; '.'
000000000020bd17         db  0x00 ; '.'
000000000020bd18         db  0x17 ; '.'
000000000020bd19         db  0x00 ; '.'
000000000020bd1a         db  0x00 ; '.'
000000000020bd1b         db  0x00 ; '.'
000000000020bd1c         db  0x00 ; '.'
000000000020bd1d         db  0x00 ; '.'
000000000020bd1e         db  0x00 ; '.'
000000000020bd1f         db  0x00 ; '.'
000000000020bd20         db  0x00 ; '.'
000000000020bd21         db  0x0f ; '.'
000000000020bd22         db  0x00 ; '.'
000000000020bd23         db  0x00 ; '.'
000000000020bd24         db  0x00 ; '.'
000000000020bd25         db  0x00 ; '.'
000000000020bd26         db  0x00 ; '.'
000000000020bd27         db  0x00 ; '.'
000000000020bd28         db  0x07 ; '.'
000000000020bd29         db  0x00 ; '.'
000000000020bd2a         db  0x00 ; '.'
000000000020bd2b         db  0x00 ; '.'
000000000020bd2c         db  0x00 ; '.'
000000000020bd2d         db  0x00 ; '.'
000000000020bd2e         db  0x00 ; '.'
000000000020bd2f         db  0x00 ; '.'
000000000020bd30         db  0xa8 ; '.'
000000000020bd31         db  0x0c ; '.'
000000000020bd32         db  0x00 ; '.'
000000000020bd33         db  0x00 ; '.'
000000000020bd34         db  0x00 ; '.'
000000000020bd35         db  0x00 ; '.'
000000000020bd36         db  0x00 ; '.'
000000000020bd37         db  0x00 ; '.'
000000000020bd38         db  0x08 ; '.'
000000000020bd39         db  0x00 ; '.'
000000000020bd3a         db  0x00 ; '.'
000000000020bd3b         db  0x00 ; '.'
000000000020bd3c         db  0x00 ; '.'
000000000020bd3d         db  0x00 ; '.'
000000000020bd3e         db  0x00 ; '.'
000000000020bd3f         db  0x00 ; '.'
000000000020bd40         db  0x58 ; 'X'
000000000020bd41         db  0x02 ; '.'
000000000020bd42         db  0x00 ; '.'
000000000020bd43         db  0x00 ; '.'
000000000020bd44         db  0x00 ; '.'
000000000020bd45         db  0x00 ; '.'
000000000020bd46         db  0x00 ; '.'
000000000020bd47         db  0x00 ; '.'
000000000020bd48         db  0x09 ; '.'
000000000020bd49         db  0x00 ; '.'
000000000020bd4a         db  0x00 ; '.'
000000000020bd4b         db  0x00 ; '.'
000000000020bd4c         db  0x00 ; '.'
000000000020bd4d         db  0x00 ; '.'
000000000020bd4e         db  0x00 ; '.'
000000000020bd4f         db  0x00 ; '.'
000000000020bd50         db  0x18 ; '.'
000000000020bd51         db  0x00 ; '.'
000000000020bd52         db  0x00 ; '.'
000000000020bd53         db  0x00 ; '.'
000000000020bd54         db  0x00 ; '.'
000000000020bd55         db  0x00 ; '.'
000000000020bd56         db  0x00 ; '.'
000000000020bd57         db  0x00 ; '.'
000000000020bd58         db  0x1e ; '.'
000000000020bd59         db  0x00 ; '.'
000000000020bd5a         db  0x00 ; '.'
000000000020bd5b         db  0x00 ; '.'
000000000020bd5c         db  0x00 ; '.'
000000000020bd5d         db  0x00 ; '.'
000000000020bd5e         db  0x00 ; '.'
000000000020bd5f         db  0x00 ; '.'
000000000020bd60         db  0x08 ; '.'
000000000020bd61         db  0x00 ; '.'
000000000020bd62         db  0x00 ; '.'
000000000020bd63         db  0x00 ; '.'
000000000020bd64         db  0x00 ; '.'
000000000020bd65         db  0x00 ; '.'
000000000020bd66         db  0x00 ; '.'
000000000020bd67         db  0x00 ; '.'
000000000020bd68         db  0xfb ; '.'
000000000020bd69         db  0xff ; '.'
000000000020bd6a         db  0xff ; '.'
000000000020bd6b         db  0x6f ; 'o'
000000000020bd6c         db  0x00 ; '.'
000000000020bd6d         db  0x00 ; '.'
000000000020bd6e         db  0x00 ; '.'
000000000020bd6f         db  0x00 ; '.'
000000000020bd70         db  0x01 ; '.'
000000000020bd71         db  0x00 ; '.'
000000000020bd72         db  0x00 ; '.'
000000000020bd73         db  0x08 ; '.'
000000000020bd74         db  0x00 ; '.'
000000000020bd75         db  0x00 ; '.'
000000000020bd76         db  0x00 ; '.'
000000000020bd77         db  0x00 ; '.'
000000000020bd78         db  0xfe ; '.'
000000000020bd79         db  0xff ; '.'
000000000020bd7a         db  0xff ; '.'
000000000020bd7b         db  0x6f ; 'o'
000000000020bd7c         db  0x00 ; '.'
000000000020bd7d         db  0x00 ; '.'
000000000020bd7e         db  0x00 ; '.'
000000000020bd7f         db  0x00 ; '.'
000000000020bd80         db  0x48 ; 'H'
000000000020bd81         db  0x0c ; '.'
000000000020bd82         db  0x00 ; '.'
000000000020bd83         db  0x00 ; '.'
000000000020bd84         db  0x00 ; '.'
000000000020bd85         db  0x00 ; '.'
000000000020bd86         db  0x00 ; '.'
000000000020bd87         db  0x00 ; '.'
000000000020bd88         db  0xff ; '.'
000000000020bd89         db  0xff ; '.'
000000000020bd8a         db  0xff ; '.'
000000000020bd8b         db  0x6f ; 'o'
000000000020bd8c         db  0x00 ; '.'
000000000020bd8d         db  0x00 ; '.'
000000000020bd8e         db  0x00 ; '.'
000000000020bd8f         db  0x00 ; '.'
000000000020bd90         db  0x01 ; '.'
000000000020bd91         db  0x00 ; '.'
000000000020bd92         db  0x00 ; '.'
000000000020bd93         db  0x00 ; '.'
000000000020bd94         db  0x00 ; '.'
000000000020bd95         db  0x00 ; '.'
000000000020bd96         db  0x00 ; '.'
000000000020bd97         db  0x00 ; '.'
000000000020bd98         db  0xf0 ; '.'
000000000020bd99         db  0xff ; '.'
000000000020bd9a         db  0xff ; '.'
000000000020bd9b         db  0x6f ; 'o'
000000000020bd9c         db  0x00 ; '.'
000000000020bd9d         db  0x00 ; '.'
000000000020bd9e         db  0x00 ; '.'
000000000020bd9f         db  0x00 ; '.'
000000000020bda0         db  0xc8 ; '.'
000000000020bda1         db  0x0b ; '.'
000000000020bda2         db  0x00 ; '.'
000000000020bda3         db  0x00 ; '.'
000000000020bda4         db  0x00 ; '.'
000000000020bda5         db  0x00 ; '.'
000000000020bda6         db  0x00 ; '.'
000000000020bda7         db  0x00 ; '.'
000000000020bda8         db  0xf9 ; '.'
000000000020bda9         db  0xff ; '.'
000000000020bdaa         db  0xff ; '.'
000000000020bdab         db  0x6f ; 'o'
000000000020bdac         db  0x00 ; '.'
000000000020bdad         db  0x00 ; '.'
000000000020bdae         db  0x00 ; '.'
000000000020bdaf         db  0x00 ; '.'
000000000020bdb0         db  0x10 ; '.'
000000000020bdb1         db  0x00 ; '.'
000000000020bdb2         db  0x00 ; '.'
000000000020bdb3         db  0x00 ; '.'
000000000020bdb4         db  0x00 ; '.'
000000000020bdb5         db  0x00 ; '.'
000000000020bdb6         db  0x00 ; '.'
000000000020bdb7         db  0x00 ; '.'
000000000020bdb8         db  0x00 ; '.'
000000000020bdb9         db  0x00 ; '.'
000000000020bdba         db  0x00 ; '.'
000000000020bdbb         db  0x00 ; '.'
000000000020bdbc         db  0x00 ; '.'
000000000020bdbd         db  0x00 ; '.'
000000000020bdbe         db  0x00 ; '.'
000000000020bdbf         db  0x00 ; '.'
000000000020bdc0         db  0x00 ; '.'
000000000020bdc1         db  0x00 ; '.'
000000000020bdc2         db  0x00 ; '.'
000000000020bdc3         db  0x00 ; '.'
000000000020bdc4         db  0x00 ; '.'
000000000020bdc5         db  0x00 ; '.'
000000000020bdc6         db  0x00 ; '.'
000000000020bdc7         db  0x00 ; '.'
000000000020bdc8         db  0x00 ; '.'
000000000020bdc9         db  0x00 ; '.'
000000000020bdca         db  0x00 ; '.'
000000000020bdcb         db  0x00 ; '.'
000000000020bdcc         db  0x00 ; '.'
000000000020bdcd         db  0x00 ; '.'
000000000020bdce         db  0x00 ; '.'
000000000020bdcf         db  0x00 ; '.'
000000000020bdd0         db  0x00 ; '.'
000000000020bdd1         db  0x00 ; '.'
000000000020bdd2         db  0x00 ; '.'
000000000020bdd3         db  0x00 ; '.'
000000000020bdd4         db  0x00 ; '.'
000000000020bdd5         db  0x00 ; '.'
000000000020bdd6         db  0x00 ; '.'
000000000020bdd7         db  0x00 ; '.'
000000000020bdd8         db  0x00 ; '.'
000000000020bdd9         db  0x00 ; '.'
000000000020bdda         db  0x00 ; '.'
000000000020bddb         db  0x00 ; '.'
000000000020bddc         db  0x00 ; '.'
000000000020bddd         db  0x00 ; '.'
000000000020bdde         db  0x00 ; '.'
000000000020bddf         db  0x00 ; '.'
000000000020bde0         db  0x00 ; '.'
000000000020bde1         db  0x00 ; '.'
000000000020bde2         db  0x00 ; '.'
000000000020bde3         db  0x00 ; '.'
000000000020bde4         db  0x00 ; '.'
000000000020bde5         db  0x00 ; '.'
000000000020bde6         db  0x00 ; '.'
000000000020bde7         db  0x00 ; '.'
000000000020bde8         db  0x00 ; '.'
000000000020bde9         db  0x00 ; '.'
000000000020bdea         db  0x00 ; '.'
000000000020bdeb         db  0x00 ; '.'
000000000020bdec         db  0x00 ; '.'
000000000020bded         db  0x00 ; '.'
000000000020bdee         db  0x00 ; '.'
000000000020bdef         db  0x00 ; '.'
000000000020bdf0         db  0x00 ; '.'
000000000020bdf1         db  0x00 ; '.'
000000000020bdf2         db  0x00 ; '.'
000000000020bdf3         db  0x00 ; '.'
000000000020bdf4         db  0x00 ; '.'
000000000020bdf5         db  0x00 ; '.'
000000000020bdf6         db  0x00 ; '.'
000000000020bdf7         db  0x00 ; '.'
000000000020bdf8         db  0x00 ; '.'
000000000020bdf9         db  0x00 ; '.'
000000000020bdfa         db  0x00 ; '.'
000000000020bdfb         db  0x00 ; '.'
000000000020bdfc         db  0x00 ; '.'
000000000020bdfd         db  0x00 ; '.'
000000000020bdfe         db  0x00 ; '.'
000000000020bdff         db  0x00 ; '.'
000000000020be00         db  0x00 ; '.'
000000000020be01         db  0x00 ; '.'
000000000020be02         db  0x00 ; '.'
000000000020be03         db  0x00 ; '.'
000000000020be04         db  0x00 ; '.'
000000000020be05         db  0x00 ; '.'
000000000020be06         db  0x00 ; '.'
000000000020be07         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20be08; 0x20bfe8[ (480 bytes)
        ; File offset : [48648; 49128[ (480 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020be08         db  0x18 ; '.'
000000000020be09         db  0xbc ; '.'
000000000020be0a         db  0x20 ; ' '
000000000020be0b         db  0x00 ; '.'
000000000020be0c         db  0x00 ; '.'
000000000020be0d         db  0x00 ; '.'
000000000020be0e         db  0x00 ; '.'
000000000020be0f         db  0x00 ; '.'
                     qword_20be10:
000000000020be10         dq         0x0000000000000000                          ; DATA XREF=0x1400
000000000020be18         db  0x00 ; '.'                                         ; DATA XREF=0x1406
000000000020be19         db  0x00 ; '.'
000000000020be1a         db  0x00 ; '.'
000000000020be1b         db  0x00 ; '.'
000000000020be1c         db  0x00 ; '.'
000000000020be1d         db  0x00 ; '.'
000000000020be1e         db  0x00 ; '.'
000000000020be1f         db  0x00 ; '.'
                     getenv@GOT:        // getenv
000000000020be20         dq         0x000000000020c240                          ; DATA XREF=j_getenv
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000020be28         dq         0x000000000020c248                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
000000000020be30         dq         0x000000000020c250                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020be38         dq         0x000000000020c258                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020be40         dq         0x000000000020c260                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020be48         dq         0x000000000020c268                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020be50         dq         0x000000000020c278                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020be58         dq         0x000000000020c280                          ; DATA XREF=j___fpending
                     iconv@GOT:        // iconv
000000000020be60         dq         0x000000000020c288                          ; DATA XREF=j_iconv
                     ferror@GOT:        // ferror
000000000020be68         dq         0x000000000020c290                          ; DATA XREF=j_ferror
                     textdomain@GOT:        // textdomain
000000000020be70         dq         0x000000000020c298                          ; DATA XREF=j_textdomain
                     __strtol_internal@GOT:        // __strtol_internal
000000000020be78         dq         0x000000000020c2a0                          ; DATA XREF=j___strtol_internal
                     fclose@GOT:        // fclose
000000000020be80         dq         0x000000000020c2a8                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020be88         dq         0x000000000020c2b0                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020be90         dq         0x000000000020c2b8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020be98         dq         0x000000000020c2c0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020bea0         dq         0x000000000020c2c8                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020bea8         dq         0x000000000020c2d0                          ; DATA XREF=j___stack_chk_fail
                     mbrtowc@GOT:        // mbrtowc
000000000020beb0         dq         0x000000000020c2d8                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020beb8         dq         0x000000000020c2e0                          ; DATA XREF=j_strchr
                     newlocale@GOT:        // newlocale
000000000020bec0         dq         0x000000000020c2e8                          ; DATA XREF=j_newlocale
                     __overflow@GOT:        // __overflow
000000000020bec8         dq         0x000000000020c2f0                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000020bed0         dq         0x000000000020c2f8                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020bed8         dq         0x000000000020c300                          ; DATA XREF=j_lseek
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000020bee0         dq         0x000000000020c308                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
000000000020bee8         dq         0x000000000020c310                          ; DATA XREF=j_memset
                     memcmp@GOT:        // memcmp
000000000020bef0         dq         0x000000000020c320                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020bef8         dq         0x000000000020c328                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020bf00         dq         0x000000000020c330                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020bf08         dq         0x000000000020c338                          ; DATA XREF=j_strcmp
                     memcpy@GOT:        // memcpy
000000000020bf10         dq         0x000000000020c348                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020bf18         dq         0x000000000020c350                          ; DATA XREF=j_fileno
                     uselocale@GOT:        // uselocale
000000000020bf20         dq         0x000000000020c358                          ; DATA XREF=j_uselocale
                     malloc@GOT:        // malloc
000000000020bf28         dq         0x000000000020c360                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020bf30         dq         0x000000000020c368                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020bf38         dq         0x000000000020c370                          ; DATA XREF=j_nl_langinfo
                     __freading@GOT:        // __freading
000000000020bf40         dq         0x000000000020c378                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
000000000020bf48         dq         0x000000000020c380                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020bf50         dq         0x000000000020c388                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020bf58         dq         0x000000000020c390                          ; DATA XREF=j___printf_chk
                     mempcpy@GOT:        // mempcpy
000000000020bf60         dq         0x000000000020c398                          ; DATA XREF=j_mempcpy
                     strtold@GOT:        // strtold
000000000020bf68         dq         0x000000000020c3a0                          ; DATA XREF=j_strtold
                     error@GOT:        // error
000000000020bf70         dq         0x000000000020c3a8                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020bf78         dq         0x000000000020c3b0                          ; DATA XREF=j_fseeko
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020bf80         dq         0x000000000020c3b8                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020bf88         dq         0x000000000020c3c0                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020bf90         dq         0x000000000020c3c8                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020bf98         dq         0x000000000020c3d0                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020bfa0         dq         0x000000000020c3e0                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020bfa8         dq         0x000000000020c3e8                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020bfb0         dq         0x000000000020c3f8                          ; DATA XREF=j___ctype_b_loc
                     iconv_open@GOT:        // iconv_open
000000000020bfb8         dq         0x000000000020c400                          ; DATA XREF=j_iconv_open
                     qword_20bfc0:
000000000020bfc0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020bfc8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020bfc9         db  0x00 ; '.'
000000000020bfca         db  0x00 ; '.'
000000000020bfcb         db  0x00 ; '.'
000000000020bfcc         db  0x00 ; '.'
000000000020bfcd         db  0x00 ; '.'
000000000020bfce         db  0x00 ; '.'
000000000020bfcf         db  0x00 ; '.'
                     qword_20bfd0:
000000000020bfd0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20bfd8:
000000000020bfd8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20bfe0:
000000000020bfe0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20bfe0, __do_global_dtors_aux+9
000000000020bfe8         db  0x00 ; '.'
000000000020bfe9         db  0x00 ; '.'
000000000020bfea         db  0x00 ; '.'
000000000020bfeb         db  0x00 ; '.'
000000000020bfec         db  0x00 ; '.'
000000000020bfed         db  0x00 ; '.'
000000000020bfee         db  0x00 ; '.'
000000000020bfef         db  0x00 ; '.'
000000000020bff0         db  0x00 ; '.'
000000000020bff1         db  0x00 ; '.'
000000000020bff2         db  0x00 ; '.'
000000000020bff3         db  0x00 ; '.'
000000000020bff4         db  0x00 ; '.'
000000000020bff5         db  0x00 ; '.'
000000000020bff6         db  0x00 ; '.'
000000000020bff7         db  0x00 ; '.'
000000000020bff8         db  0x00 ; '.'
000000000020bff9         db  0x00 ; '.'
000000000020bffa         db  0x00 ; '.'
000000000020bffb         db  0x00 ; '.'
000000000020bffc         db  0x00 ; '.'
000000000020bffd         db  0x00 ; '.'
000000000020bffe         db  0x00 ; '.'
000000000020bfff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20c000; 0x20c080[ (128 bytes)
        ; File offset : [49152; 49280[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020c000         db  0x00 ; '.'
000000000020c001         db  0x00 ; '.'
000000000020c002         db  0x00 ; '.'
000000000020c003         db  0x00 ; '.'
000000000020c004         db  0x00 ; '.'
000000000020c005         db  0x00 ; '.'
000000000020c006         db  0x00 ; '.'
000000000020c007         db  0x00 ; '.'
                     __dso_handle:
000000000020c008         dq         0x000000000020c008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
000000000020c010         dq         0x0000000000008ec8                          ; "8.31", DATA XREF=main+1906
                     exit_failure:
000000000020c018         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23, xvprintf+75, xvfprintf+71
000000000020c01c         db  0x00 ; '.'
000000000020c01d         db  0x00 ; '.'
000000000020c01e         db  0x00 ; '.'
000000000020c01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020c020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020c021         db  0x00 ; '.'
000000000020c022         db  0x00 ; '.'
000000000020c023         db  0x00 ; '.'
000000000020c024         db  0x00 ; '.'
000000000020c025         db  0x00 ; '.'
000000000020c026         db  0x00 ; '.'
000000000020c027         db  0x00 ; '.'
000000000020c028         db  0x00 ; '.'
000000000020c029         db  0x00 ; '.'
000000000020c02a         db  0x00 ; '.'
000000000020c02b         db  0x00 ; '.'
000000000020c02c         db  0x00 ; '.'
000000000020c02d         db  0x00 ; '.'
000000000020c02e         db  0x00 ; '.'
000000000020c02f         db  0x00 ; '.'
000000000020c030         db  0x00 ; '.'
000000000020c031         db  0x00 ; '.'
000000000020c032         db  0x00 ; '.'
000000000020c033         db  0x00 ; '.'
000000000020c034         db  0x00 ; '.'
000000000020c035         db  0x00 ; '.'
000000000020c036         db  0x00 ; '.'
000000000020c037         db  0x00 ; '.'
000000000020c038         db  0x00 ; '.'
000000000020c039         db  0x00 ; '.'
000000000020c03a         db  0x00 ; '.'
000000000020c03b         db  0x00 ; '.'
000000000020c03c         db  0x00 ; '.'
000000000020c03d         db  0x00 ; '.'
000000000020c03e         db  0x00 ; '.'
000000000020c03f         db  0x00 ; '.'
000000000020c040         db  0x00 ; '.'
000000000020c041         db  0x00 ; '.'
000000000020c042         db  0x00 ; '.'
000000000020c043         db  0x00 ; '.'
000000000020c044         db  0x00 ; '.'
000000000020c045         db  0x00 ; '.'
000000000020c046         db  0x00 ; '.'
000000000020c047         db  0x00 ; '.'
000000000020c048         db  0x00 ; '.'
000000000020c049         db  0x00 ; '.'
000000000020c04a         db  0x00 ; '.'
000000000020c04b         db  0x00 ; '.'
000000000020c04c         db  0x00 ; '.'
000000000020c04d         db  0x00 ; '.'
000000000020c04e         db  0x00 ; '.'
000000000020c04f         db  0x00 ; '.'
000000000020c050         db  0x00 ; '.'
000000000020c051         db  0x00 ; '.'
000000000020c052         db  0x00 ; '.'
000000000020c053         db  0x00 ; '.'
000000000020c054         db  0x00 ; '.'
000000000020c055         db  0x00 ; '.'
000000000020c056         db  0x00 ; '.'
000000000020c057         db  0x00 ; '.'
                     nslots:
000000000020c058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020c05c         align      32
                     slotvec:
000000000020c060         dq         0x000000000020c070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020c068         db  0x00 ; '.'
000000000020c069         db  0x00 ; '.'
000000000020c06a         db  0x00 ; '.'
000000000020c06b         db  0x00 ; '.'
000000000020c06c         db  0x00 ; '.'
000000000020c06d         db  0x00 ; '.'
000000000020c06e         db  0x00 ; '.'
000000000020c06f         db  0x00 ; '.'
                     slotvec0:
000000000020c070         dq         1.26481e-321, 1.06053e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20c080; 0x20c230[ (432 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020c080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020c081         db  0x00 ; '.'
000000000020c082         db  0x00 ; '.'
000000000020c083         db  0x00 ; '.'
000000000020c084         db  0x00 ; '.'
000000000020c085         db  0x00 ; '.'
000000000020c086         db  0x00 ; '.'
000000000020c087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020c088         db  0x00 ; '.'                                         ; DATA XREF=main+320, main+579, main+632, main+704, main+1913, print_esc+89, print_esc+153, print_esc+195, print_esc+310, print_esc+628, print_esc+664
000000000020c089         db  0x00 ; '.'
000000000020c08a         db  0x00 ; '.'
000000000020c08b         db  0x00 ; '.'
000000000020c08c         db  0x00 ; '.'
000000000020c08d         db  0x00 ; '.'
000000000020c08e         db  0x00 ; '.'
000000000020c08f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020c090         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020c091         db  0x00 ; '.'
000000000020c092         db  0x00 ; '.'
000000000020c093         db  0x00 ; '.'
000000000020c094         db  0x00 ; '.'
000000000020c095         db  0x00 ; '.'
000000000020c096         db  0x00 ; '.'
000000000020c097         db  0x00 ; '.'
000000000020c098         db  0x00 ; '.'
000000000020c099         db  0x00 ; '.'
000000000020c09a         db  0x00 ; '.'
000000000020c09b         db  0x00 ; '.'
000000000020c09c         db  0x00 ; '.'
000000000020c09d         db  0x00 ; '.'
000000000020c09e         db  0x00 ; '.'
000000000020c09f         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020c0a0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
000000000020c0a1         db  0x00 ; '.'
000000000020c0a2         db  0x00 ; '.'
000000000020c0a3         db  0x00 ; '.'
000000000020c0a4         db  0x00 ; '.'
000000000020c0a5         db  0x00 ; '.'
000000000020c0a6         db  0x00 ; '.'
000000000020c0a7         db  0x00 ; '.'
                     completed.7697:
000000000020c0a8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020c0a9         db  0x00 ; '.'
000000000020c0aa         db  0x00 ; '.'
000000000020c0ab         db  0x00 ; '.'
                     posixly_correct:
000000000020c0ac         db  0x00 ; '.'                                         ; DATA XREF=main+134, main+2215, main+2358, vstrtoimax+118
000000000020c0ad         db  0x00 ; '.'
000000000020c0ae         db  0x00 ; '.'
000000000020c0af         db  0x00 ; '.'
                     exit_status:
000000000020c0b0         db  0x00 ; '.'                                         ; DATA XREF=main+116, main+471, verify_numeric+79, verify_numeric+129
000000000020c0b1         db  0x00 ; '.'
000000000020c0b2         db  0x00 ; '.'
000000000020c0b3         db  0x00 ; '.'
000000000020c0b4         db  0x00 ; '.'
000000000020c0b5         db  0x00 ; '.'
000000000020c0b6         db  0x00 ; '.'
000000000020c0b7         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020c0b8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020c0b9         db  0x00 ; '.'
000000000020c0ba         db  0x00 ; '.'
000000000020c0bb         db  0x00 ; '.'
000000000020c0bc         db  0x00 ; '.'
000000000020c0bd         db  0x00 ; '.'
000000000020c0be         db  0x00 ; '.'
000000000020c0bf         db  0x00 ; '.'
                     file_name:
000000000020c0c0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020c0c1         db  0x00 ; '.'
000000000020c0c2         db  0x00 ; '.'
000000000020c0c3         db  0x00 ; '.'
000000000020c0c4         db  0x00 ; '.'
000000000020c0c5         db  0x00 ; '.'
000000000020c0c6         db  0x00 ; '.'
000000000020c0c7         db  0x00 ; '.'
                     program_name:
000000000020c0c8         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
000000000020c0c9         db  0x00 ; '.'
000000000020c0ca         db  0x00 ; '.'
000000000020c0cb         db  0x00 ; '.'
000000000020c0cc         db  0x00 ; '.'
000000000020c0cd         db  0x00 ; '.'
000000000020c0ce         db  0x00 ; '.'
000000000020c0cf         db  0x00 ; '.'
000000000020c0d0         db  0x00 ; '.'
000000000020c0d1         db  0x00 ; '.'
000000000020c0d2         db  0x00 ; '.'
000000000020c0d3         db  0x00 ; '.'
000000000020c0d4         db  0x00 ; '.'
000000000020c0d5         db  0x00 ; '.'
000000000020c0d6         db  0x00 ; '.'
000000000020c0d7         db  0x00 ; '.'
000000000020c0d8         db  0x00 ; '.'
000000000020c0d9         db  0x00 ; '.'
000000000020c0da         db  0x00 ; '.'
000000000020c0db         db  0x00 ; '.'
000000000020c0dc         db  0x00 ; '.'
000000000020c0dd         db  0x00 ; '.'
000000000020c0de         db  0x00 ; '.'
000000000020c0df         db  0x00 ; '.'
                     slot0:
000000000020c0e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020c0e1         db  0x00 ; '.'
000000000020c0e2         db  0x00 ; '.'
000000000020c0e3         db  0x00 ; '.'
000000000020c0e4         db  0x00 ; '.'
000000000020c0e5         db  0x00 ; '.'
000000000020c0e6         db  0x00 ; '.'
000000000020c0e7         db  0x00 ; '.'
000000000020c0e8         db  0x00 ; '.'
000000000020c0e9         db  0x00 ; '.'
000000000020c0ea         db  0x00 ; '.'
000000000020c0eb         db  0x00 ; '.'
000000000020c0ec         db  0x00 ; '.'
000000000020c0ed         db  0x00 ; '.'
000000000020c0ee         db  0x00 ; '.'
000000000020c0ef         db  0x00 ; '.'
000000000020c0f0         db  0x00 ; '.'
000000000020c0f1         db  0x00 ; '.'
000000000020c0f2         db  0x00 ; '.'
000000000020c0f3         db  0x00 ; '.'
000000000020c0f4         db  0x00 ; '.'
000000000020c0f5         db  0x00 ; '.'
000000000020c0f6         db  0x00 ; '.'
000000000020c0f7         db  0x00 ; '.'
000000000020c0f8         db  0x00 ; '.'
000000000020c0f9         db  0x00 ; '.'
000000000020c0fa         db  0x00 ; '.'
000000000020c0fb         db  0x00 ; '.'
000000000020c0fc         db  0x00 ; '.'
000000000020c0fd         db  0x00 ; '.'
000000000020c0fe         db  0x00 ; '.'
000000000020c0ff         db  0x00 ; '.'
000000000020c100         db  0x00 ; '.'
000000000020c101         db  0x00 ; '.'
000000000020c102         db  0x00 ; '.'
000000000020c103         db  0x00 ; '.'
000000000020c104         db  0x00 ; '.'
000000000020c105         db  0x00 ; '.'
000000000020c106         db  0x00 ; '.'
000000000020c107         db  0x00 ; '.'
000000000020c108         db  0x00 ; '.'
000000000020c109         db  0x00 ; '.'
000000000020c10a         db  0x00 ; '.'
000000000020c10b         db  0x00 ; '.'
000000000020c10c         db  0x00 ; '.'
000000000020c10d         db  0x00 ; '.'
000000000020c10e         db  0x00 ; '.'
000000000020c10f         db  0x00 ; '.'
000000000020c110         db  0x00 ; '.'
000000000020c111         db  0x00 ; '.'
000000000020c112         db  0x00 ; '.'
000000000020c113         db  0x00 ; '.'
000000000020c114         db  0x00 ; '.'
000000000020c115         db  0x00 ; '.'
000000000020c116         db  0x00 ; '.'
000000000020c117         db  0x00 ; '.'
000000000020c118         db  0x00 ; '.'
000000000020c119         db  0x00 ; '.'
000000000020c11a         db  0x00 ; '.'
000000000020c11b         db  0x00 ; '.'
000000000020c11c         db  0x00 ; '.'
000000000020c11d         db  0x00 ; '.'
000000000020c11e         db  0x00 ; '.'
000000000020c11f         db  0x00 ; '.'
000000000020c120         db  0x00 ; '.'
000000000020c121         db  0x00 ; '.'
000000000020c122         db  0x00 ; '.'
000000000020c123         db  0x00 ; '.'
000000000020c124         db  0x00 ; '.'
000000000020c125         db  0x00 ; '.'
000000000020c126         db  0x00 ; '.'
000000000020c127         db  0x00 ; '.'
000000000020c128         db  0x00 ; '.'
000000000020c129         db  0x00 ; '.'
000000000020c12a         db  0x00 ; '.'
000000000020c12b         db  0x00 ; '.'
000000000020c12c         db  0x00 ; '.'
000000000020c12d         db  0x00 ; '.'
000000000020c12e         db  0x00 ; '.'
000000000020c12f         db  0x00 ; '.'
000000000020c130         db  0x00 ; '.'
000000000020c131         db  0x00 ; '.'
000000000020c132         db  0x00 ; '.'
000000000020c133         db  0x00 ; '.'
000000000020c134         db  0x00 ; '.'
000000000020c135         db  0x00 ; '.'
000000000020c136         db  0x00 ; '.'
000000000020c137         db  0x00 ; '.'
000000000020c138         db  0x00 ; '.'
000000000020c139         db  0x00 ; '.'
000000000020c13a         db  0x00 ; '.'
000000000020c13b         db  0x00 ; '.'
000000000020c13c         db  0x00 ; '.'
000000000020c13d         db  0x00 ; '.'
000000000020c13e         db  0x00 ; '.'
000000000020c13f         db  0x00 ; '.'
000000000020c140         db  0x00 ; '.'
000000000020c141         db  0x00 ; '.'
000000000020c142         db  0x00 ; '.'
000000000020c143         db  0x00 ; '.'
000000000020c144         db  0x00 ; '.'
000000000020c145         db  0x00 ; '.'
000000000020c146         db  0x00 ; '.'
000000000020c147         db  0x00 ; '.'
000000000020c148         db  0x00 ; '.'
000000000020c149         db  0x00 ; '.'
000000000020c14a         db  0x00 ; '.'
000000000020c14b         db  0x00 ; '.'
000000000020c14c         db  0x00 ; '.'
000000000020c14d         db  0x00 ; '.'
000000000020c14e         db  0x00 ; '.'
000000000020c14f         db  0x00 ; '.'
000000000020c150         db  0x00 ; '.'
000000000020c151         db  0x00 ; '.'
000000000020c152         db  0x00 ; '.'
000000000020c153         db  0x00 ; '.'
000000000020c154         db  0x00 ; '.'
000000000020c155         db  0x00 ; '.'
000000000020c156         db  0x00 ; '.'
000000000020c157         db  0x00 ; '.'
000000000020c158         db  0x00 ; '.'
000000000020c159         db  0x00 ; '.'
000000000020c15a         db  0x00 ; '.'
000000000020c15b         db  0x00 ; '.'
000000000020c15c         db  0x00 ; '.'
000000000020c15d         db  0x00 ; '.'
000000000020c15e         db  0x00 ; '.'
000000000020c15f         db  0x00 ; '.'
000000000020c160         db  0x00 ; '.'
000000000020c161         db  0x00 ; '.'
000000000020c162         db  0x00 ; '.'
000000000020c163         db  0x00 ; '.'
000000000020c164         db  0x00 ; '.'
000000000020c165         db  0x00 ; '.'
000000000020c166         db  0x00 ; '.'
000000000020c167         db  0x00 ; '.'
000000000020c168         db  0x00 ; '.'
000000000020c169         db  0x00 ; '.'
000000000020c16a         db  0x00 ; '.'
000000000020c16b         db  0x00 ; '.'
000000000020c16c         db  0x00 ; '.'
000000000020c16d         db  0x00 ; '.'
000000000020c16e         db  0x00 ; '.'
000000000020c16f         db  0x00 ; '.'
000000000020c170         db  0x00 ; '.'
000000000020c171         db  0x00 ; '.'
000000000020c172         db  0x00 ; '.'
000000000020c173         db  0x00 ; '.'
000000000020c174         db  0x00 ; '.'
000000000020c175         db  0x00 ; '.'
000000000020c176         db  0x00 ; '.'
000000000020c177         db  0x00 ; '.'
000000000020c178         db  0x00 ; '.'
000000000020c179         db  0x00 ; '.'
000000000020c17a         db  0x00 ; '.'
000000000020c17b         db  0x00 ; '.'
000000000020c17c         db  0x00 ; '.'
000000000020c17d         db  0x00 ; '.'
000000000020c17e         db  0x00 ; '.'
000000000020c17f         db  0x00 ; '.'
000000000020c180         db  0x00 ; '.'
000000000020c181         db  0x00 ; '.'
000000000020c182         db  0x00 ; '.'
000000000020c183         db  0x00 ; '.'
000000000020c184         db  0x00 ; '.'
000000000020c185         db  0x00 ; '.'
000000000020c186         db  0x00 ; '.'
000000000020c187         db  0x00 ; '.'
000000000020c188         db  0x00 ; '.'
000000000020c189         db  0x00 ; '.'
000000000020c18a         db  0x00 ; '.'
000000000020c18b         db  0x00 ; '.'
000000000020c18c         db  0x00 ; '.'
000000000020c18d         db  0x00 ; '.'
000000000020c18e         db  0x00 ; '.'
000000000020c18f         db  0x00 ; '.'
000000000020c190         db  0x00 ; '.'
000000000020c191         db  0x00 ; '.'
000000000020c192         db  0x00 ; '.'
000000000020c193         db  0x00 ; '.'
000000000020c194         db  0x00 ; '.'
000000000020c195         db  0x00 ; '.'
000000000020c196         db  0x00 ; '.'
000000000020c197         db  0x00 ; '.'
000000000020c198         db  0x00 ; '.'
000000000020c199         db  0x00 ; '.'
000000000020c19a         db  0x00 ; '.'
000000000020c19b         db  0x00 ; '.'
000000000020c19c         db  0x00 ; '.'
000000000020c19d         db  0x00 ; '.'
000000000020c19e         db  0x00 ; '.'
000000000020c19f         db  0x00 ; '.'
000000000020c1a0         db  0x00 ; '.'
000000000020c1a1         db  0x00 ; '.'
000000000020c1a2         db  0x00 ; '.'
000000000020c1a3         db  0x00 ; '.'
000000000020c1a4         db  0x00 ; '.'
000000000020c1a5         db  0x00 ; '.'
000000000020c1a6         db  0x00 ; '.'
000000000020c1a7         db  0x00 ; '.'
000000000020c1a8         db  0x00 ; '.'
000000000020c1a9         db  0x00 ; '.'
000000000020c1aa         db  0x00 ; '.'
000000000020c1ab         db  0x00 ; '.'
000000000020c1ac         db  0x00 ; '.'
000000000020c1ad         db  0x00 ; '.'
000000000020c1ae         db  0x00 ; '.'
000000000020c1af         db  0x00 ; '.'
000000000020c1b0         db  0x00 ; '.'
000000000020c1b1         db  0x00 ; '.'
000000000020c1b2         db  0x00 ; '.'
000000000020c1b3         db  0x00 ; '.'
000000000020c1b4         db  0x00 ; '.'
000000000020c1b5         db  0x00 ; '.'
000000000020c1b6         db  0x00 ; '.'
000000000020c1b7         db  0x00 ; '.'
000000000020c1b8         db  0x00 ; '.'
000000000020c1b9         db  0x00 ; '.'
000000000020c1ba         db  0x00 ; '.'
000000000020c1bb         db  0x00 ; '.'
000000000020c1bc         db  0x00 ; '.'
000000000020c1bd         db  0x00 ; '.'
000000000020c1be         db  0x00 ; '.'
000000000020c1bf         db  0x00 ; '.'
000000000020c1c0         db  0x00 ; '.'
000000000020c1c1         db  0x00 ; '.'
000000000020c1c2         db  0x00 ; '.'
000000000020c1c3         db  0x00 ; '.'
000000000020c1c4         db  0x00 ; '.'
000000000020c1c5         db  0x00 ; '.'
000000000020c1c6         db  0x00 ; '.'
000000000020c1c7         db  0x00 ; '.'
000000000020c1c8         db  0x00 ; '.'
000000000020c1c9         db  0x00 ; '.'
000000000020c1ca         db  0x00 ; '.'
000000000020c1cb         db  0x00 ; '.'
000000000020c1cc         db  0x00 ; '.'
000000000020c1cd         db  0x00 ; '.'
000000000020c1ce         db  0x00 ; '.'
000000000020c1cf         db  0x00 ; '.'
000000000020c1d0         db  0x00 ; '.'
000000000020c1d1         db  0x00 ; '.'
000000000020c1d2         db  0x00 ; '.'
000000000020c1d3         db  0x00 ; '.'
000000000020c1d4         db  0x00 ; '.'
000000000020c1d5         db  0x00 ; '.'
000000000020c1d6         db  0x00 ; '.'
000000000020c1d7         db  0x00 ; '.'
000000000020c1d8         db  0x00 ; '.'
000000000020c1d9         db  0x00 ; '.'
000000000020c1da         db  0x00 ; '.'
000000000020c1db         db  0x00 ; '.'
000000000020c1dc         db  0x00 ; '.'
000000000020c1dd         db  0x00 ; '.'
000000000020c1de         db  0x00 ; '.'
000000000020c1df         db  0x00 ; '.'
                     default_quoting_options:
000000000020c1e0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020c1e1         db  0x00 ; '.'
000000000020c1e2         db  0x00 ; '.'
000000000020c1e3         db  0x00 ; '.'
000000000020c1e4         db  0x00 ; '.'
000000000020c1e5         db  0x00 ; '.'
000000000020c1e6         db  0x00 ; '.'
000000000020c1e7         db  0x00 ; '.'
000000000020c1e8         db  0x00 ; '.'
000000000020c1e9         db  0x00 ; '.'
000000000020c1ea         db  0x00 ; '.'
000000000020c1eb         db  0x00 ; '.'
000000000020c1ec         db  0x00 ; '.'
000000000020c1ed         db  0x00 ; '.'
000000000020c1ee         db  0x00 ; '.'
000000000020c1ef         db  0x00 ; '.'
000000000020c1f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020c1f1         db  0x00 ; '.'
000000000020c1f2         db  0x00 ; '.'
000000000020c1f3         db  0x00 ; '.'
000000000020c1f4         db  0x00 ; '.'
000000000020c1f5         db  0x00 ; '.'
000000000020c1f6         db  0x00 ; '.'
000000000020c1f7         db  0x00 ; '.'
000000000020c1f8         db  0x00 ; '.'
000000000020c1f9         db  0x00 ; '.'
000000000020c1fa         db  0x00 ; '.'
000000000020c1fb         db  0x00 ; '.'
000000000020c1fc         db  0x00 ; '.'
000000000020c1fd         db  0x00 ; '.'
000000000020c1fe         db  0x00 ; '.'
000000000020c1ff         db  0x00 ; '.'
000000000020c200         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020c201         db  0x00 ; '.'
000000000020c202         db  0x00 ; '.'
000000000020c203         db  0x00 ; '.'
000000000020c204         db  0x00 ; '.'
000000000020c205         db  0x00 ; '.'
000000000020c206         db  0x00 ; '.'
000000000020c207         db  0x00 ; '.'
000000000020c208         db  0x00 ; '.'
000000000020c209         db  0x00 ; '.'
000000000020c20a         db  0x00 ; '.'
000000000020c20b         db  0x00 ; '.'
000000000020c20c         db  0x00 ; '.'
000000000020c20d         db  0x00 ; '.'
000000000020c20e         db  0x00 ; '.'
000000000020c20f         db  0x00 ; '.'
                     qword_20c210:
000000000020c210         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020c211         db  0x00 ; '.'
000000000020c212         db  0x00 ; '.'
000000000020c213         db  0x00 ; '.'
000000000020c214         db  0x00 ; '.'
000000000020c215         db  0x00 ; '.'
000000000020c216         db  0x00 ; '.'
000000000020c217         db  0x00 ; '.'
                     utf8_to_local.4447:
000000000020c218         db  0x00 ; '.'                                         ; DATA XREF=unicode_to_mb+65, unicode_to_mb+319, unicode_to_mb+346, unicode_to_mb+455, unicode_to_mb+472
000000000020c219         db  0x00 ; '.'
000000000020c21a         db  0x00 ; '.'
000000000020c21b         db  0x00 ; '.'
000000000020c21c         db  0x00 ; '.'
000000000020c21d         db  0x00 ; '.'
000000000020c21e         db  0x00 ; '.'
000000000020c21f         db  0x00 ; '.'
                     is_utf8.4446:
000000000020c220         db  0x00 ; '.'                                         ; DATA XREF=unicode_to_mb+55, unicode_to_mb+265, unicode_to_mb+288, unicode_to_mb+328
000000000020c221         db  0x00 ; '.'
000000000020c222         db  0x00 ; '.'
000000000020c223         db  0x00 ; '.'
                     initialized.4445:
000000000020c224         db  0x00 ; '.'                                         ; DATA XREF=unicode_to_mb+41, unicode_to_mb+273
000000000020c225         db  0x00 ; '.'
000000000020c226         db  0x00 ; '.'
000000000020c227         db  0x00 ; '.'
                     c_locale_cache:
000000000020c228         db  0x00 ; '.'                                         ; DATA XREF=c_strtold+14, c_strtold+26, c_strtold+163
000000000020c229         db  0x00 ; '.'
000000000020c22a         db  0x00 ; '.'
000000000020c22b         db  0x00 ; '.'
000000000020c22c         db  0x00 ; '.'
000000000020c22d         db  0x00 ; '.'
000000000020c22e         db  0x00 ; '.'
000000000020c22f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20c240; 0x20c5d0[ (912 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20c240; 0x418810[ (2147792 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     getenv:
000000000020c240         extern function code                                   ; DATA XREF=getenv@GOT
                     __snprintf_chk:
000000000020c248         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
000000000020c250         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000020c258         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020c260         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020c268         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020c270         extern function code
                     _exit:
000000000020c278         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000020c280         extern function code                                   ; DATA XREF=__fpending@GOT
                     iconv:
000000000020c288         extern function code                                   ; DATA XREF=iconv@GOT
                     ferror:
000000000020c290         extern function code                                   ; DATA XREF=ferror@GOT
                     textdomain:
000000000020c298         extern function code                                   ; DATA XREF=textdomain@GOT
                     __strtol_internal:
000000000020c2a0         extern function code                                   ; DATA XREF=__strtol_internal@GOT
                     fclose:
000000000020c2a8         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020c2b0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020c2b8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020c2c0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020c2c8         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000020c2d0         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     mbrtowc:
000000000020c2d8         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
000000000020c2e0         extern function code                                   ; DATA XREF=strchr@GOT
                     newlocale:
000000000020c2e8         extern function code                                   ; DATA XREF=newlocale@GOT
                     __overflow:
000000000020c2f0         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
000000000020c2f8         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020c300         extern function code                                   ; DATA XREF=lseek@GOT
                     __strtoul_internal:
000000000020c308         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
000000000020c310         extern function code                                   ; DATA XREF=memset@GOT
                     __libc_start_main:
000000000020c318         extern function code
                     memcmp:
000000000020c320         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020c328         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020c330         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000020c338         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000020c340         extern function code
                     memcpy:
000000000020c348         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020c350         extern function code                                   ; DATA XREF=fileno@GOT
                     uselocale:
000000000020c358         extern function code                                   ; DATA XREF=uselocale@GOT
                     malloc:
000000000020c360         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020c368         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020c370         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __freading:
000000000020c378         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
000000000020c380         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020c388         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020c390         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     mempcpy:
000000000020c398         extern function code                                   ; DATA XREF=mempcpy@GOT
                     strtold:
000000000020c3a0         extern function code                                   ; DATA XREF=strtold@GOT
                     error:
000000000020c3a8         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000020c3b0         extern function code                                   ; DATA XREF=fseeko@GOT
                     __cxa_atexit:
000000000020c3b8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000020c3c0         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020c3c8         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020c3d0         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020c3d8         extern function code
                     mbsinit:
000000000020c3e0         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020c3e8         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020c3f0         extern function code
                     __ctype_b_loc:
000000000020c3f8         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     iconv_open:
000000000020c400         extern function code                                   ; DATA XREF=iconv_open@GOT
                     getenv@@GLIBC_2.2.5:
000000000020c408         extern function code
                     __snprintf_chk@@GLIBC_2.3.4:
000000000020c410         extern function code
                     free@@GLIBC_2.2.5:
000000000020c418         extern function code
                     abort@@GLIBC_2.2.5:
000000000020c420         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020c428         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020c430         extern function code
                     _ITM_deregisterTMCloneTable_20c438:        // _ITM_deregisterTMCloneTable
000000000020c438         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020c440         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020c448         extern function code
                     iconv@@GLIBC_2.2.5:
000000000020c450         extern function code
                     ferror@@GLIBC_2.2.5:
000000000020c458         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020c460         extern function code
                     __strtol_internal@@GLIBC_2.2.5:
000000000020c468         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020c470         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020c478         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020c480         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020c488         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020c490         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020c498         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020c4a0         extern function code
                     strchr@@GLIBC_2.2.5:
000000000020c4a8         extern function code
                     newlocale@@GLIBC_2.3:
000000000020c4b0         extern function code
                     __overflow@@GLIBC_2.2.5:
000000000020c4b8         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020c4c0         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020c4c8         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
000000000020c4d0         extern function code
                     memset@@GLIBC_2.2.5:
000000000020c4d8         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020c4e0         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020c4e8         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020c4f0         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020c4f8         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020c500         extern function code
                     __gmon_start___20c508:        // __gmon_start__
000000000020c508         extern function code
                     memcpy@@GLIBC_2.14:
000000000020c510         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020c518         extern function code
                     uselocale@@GLIBC_2.3:
000000000020c520         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020c528         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020c530         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020c538         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020c540         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020c548         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020c550         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020c558         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000020c560         extern function code
                     strtold@@GLIBC_2.2.5:
000000000020c568         extern function code
                     error@@GLIBC_2.2.5:
000000000020c570         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020c578         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020c580         extern function code
                     exit@@GLIBC_2.2.5:
000000000020c588         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020c590         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020c598         extern function code
                     _ITM_registerTMCloneTable_20c5a0:        // _ITM_registerTMCloneTable
000000000020c5a0         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020c5a8         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020c5b0         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020c5b8         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020c5c0         extern function code
                     iconv_open@@GLIBC_2.2.5:
000000000020c5c8         extern function code
