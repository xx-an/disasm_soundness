0x2090: xor ebp,ebp
0x2092: mov r9,rdx
0x2095: pop rsi
0x2096: mov rdx,rsp
0x2099: and rsp,0xfffffffffffffff0
0x209d: push rax
0x209e: push rsp
0x209f: lea r8,[rip+0x365a]
0x20a6: lea rcx,[rip+0x35e3]
0x20ad: lea rdi,[rip+0xfffffffffffff52c]
0x20b4: call qword ptr [rip+0x205f16]
Execute the function: __libc_start_main

0x20b4: jump address is 0x15e0
0x15e0: push rbp
0x15e1: push rbx
0x15e2: mov ebp,edi
0x15e4: mov rbx,rsi
0x15e7: sub rsp,0x28
0x15eb: mov rdi,qword ptr [rsi]
0x15ee: mov rax,qword ptr fs:0x28
0x15f7: mov qword ptr [rsp+0x18],rax
0x15fc: xor eax,eax
0x15fe: call 0x2de0
0x15fe: jump address is 0x2de0
0x2de0: test rdi,rdi
0x2de3: push rbx
0x2de4: je 0x2e5d
0x2de4: jump address is 0x2e5d
0x2de6: mov esi,0x2f
0x2deb: mov rbx,rdi
0x2dee: call 0x1420
0x2dee: jump address is 0x1420
0x1420: jmp qword ptr [rip+0x206aca]
Execute the function: strrchr

0x1420: the return address is 0x2df3
0x2df3: test rax,rax
0x2df6: je 0x2e4d
0x2df6: jump address is 0x2e4d
0x2df8: lea r8,[rax+0x1]
0x2dfc: mov rdx,r8
0x2dff: sub rdx,rbx
0x2e02: cmp rdx,0x6
0x2e06: jle 0x2e4d
0x2e06: jump address is 0x2e4d
Block exists: mov qword ptr [rip+0x20528c],rbx at address 0x2e4d is visited for 1 times

0x2e08: lea rsi,[rax-0x6]
0x2e0c: lea rdi,[rip+0x2ef5]
0x2e13: mov ecx,0x7
0x2e18: rep cmpsb [rsi],[rdi]
0x2e1a: seta dl
0x2e1d: sbb dl,0x0
0x2e20: test dl,dl
0x2e22: jne 0x2e4d
0x2e22: jump address is 0x2e4d
Block exists: mov qword ptr [rip+0x20528c],rbx at address 0x2e4d is visited for 1 times

0x2e24: lea rdi,[rip+0x2ee5]
0x2e2b: mov ecx,0x3
0x2e30: mov rsi,r8
0x2e33: mov rbx,r8
0x2e36: rep cmpsb [rsi],[rdi]
0x2e38: seta dl
0x2e3b: sbb dl,0x0
0x2e3e: test dl,dl
0x2e40: jne 0x2e4d
0x2e40: jump address is 0x2e4d
Block exists: mov qword ptr [rip+0x20528c],rbx at address 0x2e4d is visited for 1 times

0x2e42: lea rbx,[rax+0x4]
0x2e46: mov qword ptr [rip+0x205233],rbx
0x2e4d: mov qword ptr [rip+0x20528c],rbx
0x2e54: mov qword ptr [rip+0x20523d],rbx
0x2e5b: pop rbx
0x2e5c: ret
0x2e5c: the return address is 0x1603
0x1603: lea rsi,[rip+0x4c37]
0x160a: mov edi,0x6
0x160f: call 0x1500
0x160f: jump address is 0x1500
0x1500: jmp qword ptr [rip+0x206a5a]
Execute the function: setlocale

0x1500: the return address is 0x1614
0x1614: lea rsi,[rip+0x41e1]
0x161b: lea rdi,[rip+0x41b1]
0x1622: call 0x13b0
0x1622: jump address is 0x13b0
0x13b0: jmp qword ptr [rip+0x206b02]
Execute the function: bindtextdomain

0x13b0: the return address is 0x1627
0x1627: lea rdi,[rip+0x41a5]
0x162e: call 0x1390
0x162e: jump address is 0x1390
0x1390: jmp qword ptr [rip+0x206b12]
Execute the function: textdomain

0x1390: the return address is 0x1633
0x1633: lea rdi,[rip+0x1046]
0x163a: call 0x5710
0x163a: jump address is 0x5710
0x5710: mov rdx,qword ptr [rip+0x2028f1]
0x5717: xor esi,esi
0x5719: jmp 0x1550
0x5719: jump address is 0x1550
0x1550: jmp qword ptr [rip+0x206a32]
Execute the function: __cxa_atexit

0x1550: the return address is 0x163f
0x163f: lea rax,[rip+0x41d3]
0x1646: push 0x0
0x1648: mov edi,ebp
0x164a: lea r9,[rip+0xcbf]
0x1651: lea r8,[rip+0x41bc]
0x1658: lea rcx,[rip+0x4170]
0x165f: push rax
0x1660: lea rdx,[rip+0x40dd]
0x1667: mov rsi,rbx
0x166a: xor eax,eax
0x166c: lea rbp,[rsp+0x10]
0x1671: call 0x2b60
0x1671: jump address is 0x2b60
0x2b60: push r13
0x2b62: push r12
0x2b64: mov r13,r8
0x2b67: push rbp
0x2b68: push rbx
0x2b69: mov rbp,rdx
0x2b6c: mov r12,rcx
0x2b6f: sub rsp,0xe8
0x2b76: test al,al
0x2b78: je 0x2bb4
0x2b78: jump address is 0x2bb4
0x2bb4: mov rax,qword ptr fs:0x28
0x2bbd: mov qword ptr [rsp+0x28],rax
0x2bc2: xor eax,eax
0x2bc4: cmp edi,0x2
0x2bc7: mov ebx,dword ptr [rip+0x2054d3]
0x2bcd: mov dword ptr [rip+0x2054c9],0x0
0x2bd7: je 0x2c10
0x2bd7: jump address is 0x2c10
0x2bd9: mov rax,qword ptr [rsp+0x28]
0x2bde: xor rax,qword ptr fs:0x28
0x2be7: mov dword ptr [rip+0x2054b3],ebx
0x2bed: mov dword ptr [rip+0x205499],0x0
0x2bf7: jne 0x2c9a
0x2bf7: jump address is 0x2c9a
0x2bfd: add rsp,0xe8
0x2c04: pop rbx
0x2c05: pop rbp
0x2c06: pop r12
0x2c08: pop r13
0x2c0a: ret
0x2c0a: the return address is 0x1676
0x1676: lea rbx,[rbp+0x1]
0x167a: lea rcx,[rip+0x41a6]
0x1681: mov r8d,0x7f
0x1687: mov edx,0x15
0x168c: mov esi,0x1
0x1691: xor eax,eax
0x1693: mov rdi,rbx
0x1696: call 0x15c0
0x1696: jump address is 0x15c0
0x15c0: jmp qword ptr [rip+0x2069fa]
Execute the function: __sprintf_chk

0x15c0: the return address is 0x169b
0x169b: lea rsi,[rip+0x418e]
0x16a2: mov rdx,rbx
0x16a5: mov edi,0x1
0x16aa: xor eax,eax
0x16ac: call 0x1510
0x16ac: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x16b1
0x16b1: mov rdi,rbp
0x16b4: call 0x21a0
0x16b4: jump address is 0x21a0
0x21a0: push rbp
0x21a1: push rbx
0x21a2: xor eax,eax
0x21a4: sub rsp,0x8
0x21a8: movzx ebp,byte ptr [rdi+0x1]
0x21ac: cmp bpl,0x2d
0x21b0: sete al
0x21b3: lea rbx,[rdi+rax+0x1]
0x21b8: mov rdi,rbx
0x21bb: call 0x13e0
0x21bb: jump address is 0x13e0
0x13e0: jmp qword ptr [rip+0x206aea]
Execute the function: strlen

0x13e0: the return address is 0x21c0
0x21c0: add rax,rbx
0x21c3: mov byte ptr [rbx-0x1],0x30
0x21c7: movzx ecx,byte ptr [rax-0x1]
0x21cb: lea rdx,[rax-0x1]
0x21cf: cmp cl,0x39
0x21d2: jne 0x21e7
0x21d2: jump address is 0x21e7
0x21d4: nop dword ptr [rax]
0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21d8: mov byte ptr [rdx],0x30
0x21db: sub rdx,0x1
0x21df: movzx ecx,byte ptr [rdx]
0x21e2: cmp cl,0x39
0x21e5: je 0x21d8
0x21e5: jump address is 0x21d8
Instruction mov byte ptr [rdx],0x30 at address 0x21d8 is visited for 26 times

Block exists: add ecx,0x1 at address 0x21e7 is visited for 1 times

0x21e7: add ecx,0x1
0x21ea: mov rax,rdx
0x21ed: cmp rbx,rdx
0x21f0: cmovbe rax,rbx
0x21f4: cmp bpl,0x2d
0x21f8: mov byte ptr [rdx],cl
0x21fa: jne 0x2204
0x21fa: jump address is 0x2204
0x21fc: mov byte ptr [rax-0x1],0x2d
0x2200: sub rax,0x1
0x2204: add rsp,0x8
0x2208: pop rbx
0x2209: pop rbp
0x220a: ret
0x220a: the return address is me
0x2204: add rsp,0x8
0x2208: pop rbx
0x2209: pop rbp
0x220a: ret
0x220a: the return address is me
0x21f0: cmovbe rax,rbx
0x21f4: cmp bpl,0x2d
0x21f8: mov byte ptr [rdx],cl
0x21fa: jne 0x2204
0x21fa: jump address is 0x2204
Block exists: add rsp,0x8 at address 0x2204 is visited for 1 times

Block exists: mov byte ptr [rax-0x1],0x2d at address 0x21fc is visited for 1 times

0x2c10: lea rcx,[rip+0x204f89]
0x2c17: lea rdx,[rip+0x30a2]
0x2c1e: xor r8d,r8d
0x2c21: mov qword ptr [rsp+0x8],r9
0x2c26: call 0x1400
0x2c26: jump address is 0x1400
0x1400: jmp qword ptr [rip+0x206ada]
Execute the function: getopt_long

0x1400: the return address is 0x2c2b
0x2c2b: cmp eax,0xffffffff
0x2c2e: je 0x2bd9
0x2c2e: jump address is 0x2bd9
0x2c30: cmp eax,0x68
0x2c33: mov r9,qword ptr [rsp+0x8]
0x2c38: je 0x2c90
0x2c38: jump address is 0x2c90
0x2c3a: cmp eax,0x76
0x2c3d: jne 0x2bd9
0x2c3d: jump address is 0x2bd9
Block exists: mov rax,qword ptr [rsp+0x28] at address 0x2bd9 is visited for 2 times

0x2c3f: lea rax,[rsp+0x110]
0x2c47: mov rdi,qword ptr [rip+0x20543a]
0x2c4e: lea r8,[rsp+0x10]
0x2c53: mov rcx,r13
0x2c56: mov rdx,r12
0x2c59: mov rsi,rbp
0x2c5c: mov qword ptr [rsp+0x18],rax
0x2c61: lea rax,[rsp+0x30]
0x2c66: mov dword ptr [rsp+0x10],0x30
0x2c6e: mov dword ptr [rsp+0x14],0x30
0x2c76: mov qword ptr [rsp+0x20],rax
0x2c7b: call 0x4f50
0x2c7b: jump address is 0x4f50
0x4f50: sub rsp,0x68
0x4f54: mov r10,r8
0x4f57: xor r9d,r9d
0x4f5a: mov rax,qword ptr fs:0x28
0x4f63: mov qword ptr [rsp+0x58],rax
0x4f68: xor eax,eax
0x4f6a: mov r8,rsp
0x4f6d: nop dword ptr [rax]
0x4f70: mov eax,dword ptr [r10]
0x4f73: cmp eax,0x2f
0x4f76: ja 0x4fba
0x4f76: jump address is 0x4fba
0x4fba: mov r11,qword ptr [r10+0x8]
0x4fbe: lea rax,[r11+0x8]
0x4fc2: mov qword ptr [r10+0x8],rax
0x4fc6: jmp 0x4f85
0x4fc6: jump address is 0x4f85
0x4f85: mov rax,qword ptr [r11]
0x4f88: test rax,rax
0x4f8b: mov qword ptr [r8+r9*8],rax
0x4f8f: je 0x4f9b
0x4f8f: jump address is 0x4f9b
0x4f91: add r9,0x1
0x4f95: cmp r9,0xa
0x4f99: jne 0x4f70
0x4f99: jump address is 0x4f70
0x4f70: mov eax,dword ptr [r10]
0x4f73: cmp eax,0x2f
0x4f76: ja 0x4fba
0x4f76: jump address is 0x4fba
0x4fba: mov r11,qword ptr [r10+0x8]
0x4fbe: lea rax,[r11+0x8]
0x4fc2: mov qword ptr [r10+0x8],rax
0x4fc6: jmp 0x4f85
0x4fc6: jump address is 0x4f85
0x4f85: mov rax,qword ptr [r11]
0x4f88: test rax,rax
0x4f8b: mov qword ptr [r8+r9*8],rax
0x4f8f: je 0x4f9b
0x4f8f: jump address is 0x4f9b
0x4f91: add r9,0x1
0x4f95: cmp r9,0xa
0x4f99: jne 0x4f70
0x4f99: jump address is 0x4f70
0x4f9b: call 0x4b10
0x4f9b: jump address is 0x4b10
0x4b10: push r15
0x4b12: push r14
0x4b14: push r13
0x4b16: push r12
0x4b18: mov r12,r9
0x4b1b: push rbp
0x4b1c: push rbx
0x4b1d: mov rbp,rdi
0x4b20: mov rbx,r8
0x4b23: sub rsp,0x28
0x4b27: test rsi,rsi
0x4b2a: je 0x4c48
0x4b2a: jump address is 0x4c48
0x4b30: mov r8,rdx
0x4b33: lea rdx,[rip+0x16ae]
0x4b3a: mov r9,rcx
0x4b3d: xor eax,eax
0x4b3f: mov rcx,rsi
0x4b42: mov esi,0x1
0x4b47: call 0x1580
0x4b47: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4b4c
0x4b4c: lea rsi,[rip+0x16a8]
0x4b53: xor edi,edi
0x4b55: mov edx,0x5
0x4b5a: call 0x13c0
0x4b5a: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4b5f
0x4b5f: lea rdx,[rip+0x19ba]
0x4b66: mov rcx,rax
0x4b69: mov r8d,0x7e3
0x4b6f: mov esi,0x1
0x4b74: mov rdi,rbp
0x4b77: xor eax,eax
0x4b79: call 0x1580
0x4b79: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4b7e
0x4b7e: lea rsi,[rip+0x1703]
0x4b85: xor edi,edi
0x4b87: mov edx,0x5
0x4b8c: call 0x13c0
0x4b8c: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4b91
0x4b91: mov rsi,rbp
0x4b94: mov rdi,rax
0x4b97: call 0x1470
0x4b97: jump address is 0x1470
0x1470: jmp qword ptr [rip+0x206aa2]
Execute the function: fputs_unlocked

0x1470: the return address is 0x4b9c
0x4b9c: cmp r12,0x9
0x4ba0: ja 0x4ee0
0x4ba0: jump address is 0x4ee0
0x4ba6: lea rdx,[rip+0x193b]
0x4bad: movsxd rax,dword ptr [rdx+r12*4]
0x4bb1: add rax,rdx
0x4bb4: jmp rax
trace back
0x4bb4: jmp rax
0x4bb1: add rax,rdx
0x4bad: movsxd rax,dword ptr [rdx+r12*4]
0x4ba6: lea rdx,[rip+0x193b]
0x4ba0: ja 0x4ee0
0x4b9c: cmp r12,0x9
0x4bb4: jump addresses resolved using jump table [0x4c36, 0x4cc8, 0x4d08, 0x4d50, 0x4da0, 0x4df8, 0x4e28, 0x4e90, 0x4bc0, 0x4c70]
0x4bb4: jmp rax
0x4bb4: jump address is 0x4c70
0x4c70: mov r10,qword ptr [rbx+0x40]
0x4c74: mov r9,qword ptr [rbx+0x38]
0x4c78: lea rsi,[rip+0x17a9]
0x4c7f: mov rax,qword ptr [rbx+0x10]
0x4c83: mov r8,qword ptr [rbx+0x8]
0x4c87: mov edx,0x5
0x4c8c: mov r13,qword ptr [rbx+0x30]
0x4c90: mov r12,qword ptr [rbx+0x28]
0x4c94: mov r15,qword ptr [rbx+0x20]
0x4c98: mov r14,qword ptr [rbx+0x18]
0x4c9c: mov rbx,qword ptr [rbx]
0x4c9f: mov qword ptr [rsp+0x18],r10
0x4ca4: mov qword ptr [rsp+0x10],r9
0x4ca9: mov qword ptr [rsp+0x0],rax
0x4cad: mov qword ptr [rsp+0x8],r8
0x4cb2: xor edi,edi
0x4cb4: call 0x13c0
0x4cb4: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4cb9
0x4cb9: mov r10,qword ptr [rsp+0x18]
0x4cbe: push r10
0x4cc0: jmp 0x4c04
0x4cc0: jump address is 0x4c04
0x4c04: mov r9,qword ptr [rsp+0x18]
0x4c09: mov rdx,rax
0x4c0c: mov rcx,rbx
0x4c0f: mov esi,0x1
0x4c14: mov rdi,rbp
0x4c17: xor eax,eax
0x4c19: push r9
0x4c1b: push r13
0x4c1d: push r12
0x4c1f: push r15
0x4c21: push r14
0x4c23: mov r9,qword ptr [rsp+0x30]
0x4c28: mov r8,qword ptr [rsp+0x38]
0x4c2d: call 0x1580
0x4c2d: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4c32
0x4c32: add rsp,0x30
0x4c36: add rsp,0x28
0x4c3a: pop rbx
0x4c3b: pop rbp
0x4c3c: pop r12
0x4c3e: pop r13
0x4c40: pop r14
0x4c42: pop r15
0x4c44: ret
0x4c44: the return address is fi
0x4bb4: jmp rax
0x4bb4: jump address is 0x4bc0
0x4bc0: mov r9,qword ptr [rbx+0x38]
0x4bc4: mov rax,qword ptr [rbx+0x10]
0x4bc8: lea rsi,[rip+0x1829]
0x4bcf: mov r8,qword ptr [rbx+0x8]
0x4bd3: mov edx,0x5
0x4bd8: xor edi,edi
0x4bda: mov r13,qword ptr [rbx+0x30]
0x4bde: mov r12,qword ptr [rbx+0x28]
0x4be2: mov qword ptr [rsp+0x10],r9
0x4be7: mov r15,qword ptr [rbx+0x20]
0x4beb: mov r14,qword ptr [rbx+0x18]
0x4bef: mov qword ptr [rsp+0x0],rax
0x4bf3: mov qword ptr [rsp+0x8],r8
0x4bf8: mov rbx,qword ptr [rbx]
0x4bfb: call 0x13c0
0x4bfb: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4c00
0x4c00: sub rsp,0x8
0x4c04: mov r9,qword ptr [rsp+0x18]
0x4c09: mov rdx,rax
0x4c0c: mov rcx,rbx
0x4c0f: mov esi,0x1
0x4c14: mov rdi,rbp
0x4c17: xor eax,eax
0x4c19: push r9
0x4c1b: push r13
0x4c1d: push r12
0x4c1f: push r15
0x4c21: push r14
0x4c23: mov r9,qword ptr [rsp+0x30]
0x4c28: mov r8,qword ptr [rsp+0x38]
0x4c2d: call 0x1580
0x4c2d: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4c32
Block exists: add rsp,0x30 at address 0x4c32 is visited for 1 times

0x4bb4: jmp rax
0x4bb4: jump address is 0x4e90
0x4e90: mov r9,qword ptr [rbx+0x10]
0x4e94: mov r13,qword ptr [rbx+0x30]
0x4e98: lea rsi,[rip+0x1529]
0x4e9f: mov r12,qword ptr [rbx+0x28]
0x4ea3: mov r15,qword ptr [rbx+0x20]
0x4ea7: mov edx,0x5
0x4eac: mov r14,qword ptr [rbx+0x18]
0x4eb0: mov r8,qword ptr [rbx+0x8]
0x4eb4: xor edi,edi
0x4eb6: mov qword ptr [rsp+0x8],r9
0x4ebb: mov rbx,qword ptr [rbx]
0x4ebe: mov qword ptr [rsp+0x0],r8
0x4ec2: call 0x13c0
0x4ec2: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4ec7
0x4ec7: push r13
0x4ec9: push r12
0x4ecb: push r15
0x4ecd: push r14
0x4ecf: mov r9,qword ptr [rsp+0x28]
0x4ed4: jmp 0x4e63
0x4ed4: jump address is 0x4e63
0x4e63: mov r8,qword ptr [rsp+0x20]
0x4e68: mov rcx,rbx
0x4e6b: mov rdx,rax
0x4e6e: mov rdi,rbp
0x4e71: mov esi,0x1
0x4e76: xor eax,eax
0x4e78: call 0x1580
0x4e78: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4e7d
0x4e7d: add rsp,0x20
0x4e81: add rsp,0x28
0x4e85: pop rbx
0x4e86: pop rbp
0x4e87: pop r12
0x4e89: pop r13
0x4e8b: pop r14
0x4e8d: pop r15
0x4e8f: ret
0x4e8f: the return address is fi
0x4bb4: jmp rax
0x4bb4: jump address is 0x4e28
0x4e28: mov r8,qword ptr [rbx+0x8]
0x4e2c: mov r12,qword ptr [rbx+0x28]
0x4e30: lea rsi,[rip+0x1569]
0x4e37: mov r15,qword ptr [rbx+0x20]
0x4e3b: mov r14,qword ptr [rbx+0x18]
0x4e3f: mov edx,0x5
0x4e44: mov r13,qword ptr [rbx+0x10]
0x4e48: xor edi,edi
0x4e4a: mov rbx,qword ptr [rbx]
0x4e4d: mov qword ptr [rsp+0x0],r8
0x4e51: call 0x13c0
0x4e51: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4e56
0x4e56: sub rsp,0x8
0x4e5a: mov r9,r13
0x4e5d: push r12
0x4e5f: push r15
0x4e61: push r14
0x4e63: mov r8,qword ptr [rsp+0x20]
0x4e68: mov rcx,rbx
0x4e6b: mov rdx,rax
0x4e6e: mov rdi,rbp
0x4e71: mov esi,0x1
0x4e76: xor eax,eax
0x4e78: call 0x1580
0x4e78: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4e7d
Block exists: add rsp,0x20 at address 0x4e7d is visited for 1 times

0x4bb4: jmp rax
0x4bb4: jump address is 0x4df8
0x4df8: mov r15,qword ptr [rbx+0x20]
0x4dfc: lea rsi,[rip+0x1575]
0x4e03: mov edx,0x5
0x4e08: xor edi,edi
0x4e0a: mov r14,qword ptr [rbx+0x18]
0x4e0e: mov r13,qword ptr [rbx+0x10]
0x4e12: mov r12,qword ptr [rbx+0x8]
0x4e16: mov rbx,qword ptr [rbx]
0x4e19: call 0x13c0
0x4e19: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4e1e
0x4e1e: push r15
0x4e20: jmp 0x4dc6
0x4e20: jump address is 0x4dc6
0x4dc6: push r14
0x4dc8: mov rdx,rax
0x4dcb: mov r9,r13
0x4dce: mov r8,r12
0x4dd1: mov rcx,rbx
0x4dd4: mov rdi,rbp
0x4dd7: mov esi,0x1
0x4ddc: xor eax,eax
0x4dde: call 0x1580
0x4dde: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4de3
0x4de3: pop rax
0x4de4: pop rdx
0x4de5: add rsp,0x28
0x4de9: pop rbx
0x4dea: pop rbp
0x4deb: pop r12
0x4ded: pop r13
0x4def: pop r14
0x4df1: pop r15
0x4df3: ret
0x4df3: the return address is fi
0x4bb4: jmp rax
0x4bb4: jump address is 0x4da0
0x4da0: lea rsi,[rip+0x15b1]
0x4da7: mov edx,0x5
0x4dac: xor edi,edi
0x4dae: mov r14,qword ptr [rbx+0x18]
0x4db2: mov r13,qword ptr [rbx+0x10]
0x4db6: mov r12,qword ptr [rbx+0x8]
0x4dba: mov rbx,qword ptr [rbx]
0x4dbd: call 0x13c0
0x4dbd: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4dc2
0x4dc2: sub rsp,0x8
0x4dc6: push r14
0x4dc8: mov rdx,rax
0x4dcb: mov r9,r13
0x4dce: mov r8,r12
0x4dd1: mov rcx,rbx
0x4dd4: mov rdi,rbp
0x4dd7: mov esi,0x1
0x4ddc: xor eax,eax
0x4dde: call 0x1580
0x4dde: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is 0x4de3
Block exists: pop rax at address 0x4de3 is visited for 1 times

0x4bb4: jmp rax
0x4bb4: jump address is 0x4d50
0x4d50: mov r13,qword ptr [rbx+0x10]
0x4d54: mov r12,qword ptr [rbx+0x8]
0x4d58: lea rsi,[rip+0x14c7]
0x4d5f: mov rbx,qword ptr [rbx]
0x4d62: mov edx,0x5
0x4d67: xor edi,edi
0x4d69: call 0x13c0
0x4d69: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4d6e
0x4d6e: add rsp,0x28
0x4d72: mov r9,r13
0x4d75: mov r8,r12
0x4d78: mov rcx,rbx
0x4d7b: mov rdi,rbp
0x4d7e: mov rdx,rax
0x4d81: pop rbx
0x4d82: pop rbp
0x4d83: pop r12
0x4d85: pop r13
0x4d87: pop r14
0x4d89: pop r15
0x4d8b: mov esi,0x1
0x4d90: xor eax,eax
0x4d92: jmp 0x1580
0x4d92: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is fi
0x4bb4: jmp rax
0x4bb4: jump address is 0x4d08
0x4d08: mov r12,qword ptr [rbx+0x8]
0x4d0c: lea rsi,[rip+0x14fc]
0x4d13: mov rbx,qword ptr [rbx]
0x4d16: mov edx,0x5
0x4d1b: xor edi,edi
0x4d1d: call 0x13c0
0x4d1d: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4d22
0x4d22: add rsp,0x28
0x4d26: mov r8,r12
0x4d29: mov rcx,rbx
0x4d2c: mov rdi,rbp
0x4d2f: mov rdx,rax
0x4d32: mov esi,0x1
0x4d37: pop rbx
0x4d38: pop rbp
0x4d39: pop r12
0x4d3b: pop r13
0x4d3d: pop r14
0x4d3f: pop r15
0x4d41: xor eax,eax
0x4d43: jmp 0x1580
0x4d43: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is fi
0x4bb4: jmp rax
0x4bb4: jump address is 0x4cc8
0x4cc8: mov rbx,qword ptr [rbx]
0x4ccb: lea rsi,[rip+0x152d]
0x4cd2: mov edx,0x5
0x4cd7: xor edi,edi
0x4cd9: call 0x13c0
0x4cd9: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4cde
0x4cde: add rsp,0x28
0x4ce2: mov rcx,rbx
0x4ce5: mov rdi,rbp
0x4ce8: pop rbx
0x4ce9: pop rbp
0x4cea: pop r12
0x4cec: pop r13
0x4cee: pop r14
0x4cf0: pop r15
0x4cf2: mov rdx,rax
0x4cf5: mov esi,0x1
0x4cfa: xor eax,eax
0x4cfc: jmp 0x1580
0x4cfc: jump address is 0x1580
0x1580: jmp qword ptr [rip+0x206a1a]
Execute the function: __fprintf_chk

0x1580: the return address is fi
0x4bb4: jmp rax
0x4bb4: jump address is 0x4c36
Block exists: add rsp,0x28 at address 0x4c36 is visited for 1 times

0x4ee0: mov r10,qword ptr [rbx+0x40]
0x4ee4: mov r9,qword ptr [rbx+0x38]
0x4ee8: mov edx,0x5
0x4eed: mov rax,qword ptr [rbx+0x10]
0x4ef1: mov r8,qword ptr [rbx+0x8]
0x4ef5: lea rsi,[rip+0x1564]
0x4efc: mov r13,qword ptr [rbx+0x30]
0x4f00: mov r12,qword ptr [rbx+0x28]
0x4f04: mov r15,qword ptr [rbx+0x20]
0x4f08: mov r14,qword ptr [rbx+0x18]
0x4f0c: mov qword ptr [rsp+0x18],r10
0x4f11: mov qword ptr [rsp+0x10],r9
0x4f16: mov qword ptr [rsp+0x0],rax
0x4f1a: mov qword ptr [rsp+0x8],r8
0x4f1f: mov rbx,qword ptr [rbx]
0x4f22: jmp 0x4cb2
0x4f22: jump address is 0x4cb2
0x4cb2: xor edi,edi
0x4cb4: call 0x13c0
0x4cb4: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x4cb9
Block exists: mov r10,qword ptr [rsp+0x18] at address 0x4cb9 is visited for 1 times

0x4f70: mov eax,dword ptr [r10]
0x4f73: cmp eax,0x2f
0x4f76: ja 0x4fba
0x4f76: jump address is 0x4fba
0x4f78: mov r11d,eax
0x4f7b: add r11,qword ptr [r10+0x10]
0x4f7f: add eax,0x8
0x4f82: mov dword ptr [r10],eax
0x4f85: mov rax,qword ptr [r11]
0x4f88: test rax,rax
0x4f8b: mov qword ptr [r8+r9*8],rax
0x4f8f: je 0x4f9b
0x4f8f: jump address is 0x4f9b
Block exists: add r9,0x1 at address 0x4f91 is visited for 2 times

0x4f9b: call 0x4b10
0x4f9b: jump address is 0x4b10
Block exists: push r15 at address 0x4b10 is visited for 1 times

0x4fba: mov r11,qword ptr [r10+0x8]
0x4fbe: lea rax,[r11+0x8]
0x4fc2: mov qword ptr [r10+0x8],rax
0x4fc6: jmp 0x4f85
0x4fc6: jump address is 0x4f85
Block exists: mov rax,qword ptr [r11] at address 0x4f85 is visited for 2 times

0x4f9b: call 0x4b10
0x4f9b: jump address is 0x4b10
Block exists: push r15 at address 0x4b10 is visited for 1 times

0x2c90: xor edi,edi
0x2c92: call r9
0x2c92: jump address is 0x2310
0x2310: push r13
0x2312: push r12
0x2314: mov edx,0x5
0x2319: push rbp
0x231a: push rbx
0x231b: mov ebp,edi
0x231d: sub rsp,0x88
0x2324: mov rbx,qword ptr [rip+0x205db5]
0x232b: mov rax,qword ptr fs:0x28
0x2334: mov qword ptr [rsp+0x78],rax
0x2339: xor eax,eax
0x233b: test edi,edi
0x233d: je 0x236d
0x233d: jump address is 0x236d
0x236d: lea rsi,[rip+0x33da]
0x2374: xor edi,edi
0x2376: call 0x13c0
0x2376: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x237b
0x237b: mov rdx,rbx
0x237e: mov rsi,rax
0x2381: mov edi,0x1
0x2386: xor eax,eax
0x2388: call 0x1510
0x2388: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x238d
0x238d: mov rbx,qword ptr [rip+0x205cf4]
0x2394: lea rsi,[rip+0x375d]
0x239b: mov edx,0x5
0x23a0: xor edi,edi
0x23a2: call 0x13c0
0x23a2: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x23a7
0x23a7: mov rsi,rbx
0x23aa: mov rdi,rax
0x23ad: call 0x1470
0x23ad: jump address is 0x1470
0x1470: jmp qword ptr [rip+0x206aa2]
Execute the function: fputs_unlocked

0x1470: the return address is 0x23b2
0x23b2: mov rbx,qword ptr [rip+0x205ccf]
0x23b9: lea rsi,[rip+0x3788]
0x23c0: mov edx,0x5
0x23c5: xor edi,edi
0x23c7: call 0x13c0
0x23c7: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x23cc
0x23cc: mov rsi,rbx
0x23cf: mov rdi,rax
0x23d2: call 0x1470
0x23d2: jump address is 0x1470
0x1470: jmp qword ptr [rip+0x206aa2]
Execute the function: fputs_unlocked

0x1470: the return address is 0x23d7
0x23d7: mov rbx,qword ptr [rip+0x205caa]
0x23de: lea rsi,[rip+0x3793]
0x23e5: mov edx,0x5
0x23ea: xor edi,edi
0x23ec: call 0x13c0
0x23ec: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x23f1
0x23f1: mov rsi,rbx
0x23f4: mov rdi,rax
0x23f7: lea rbx,[rip+0x3346]
0x23fe: call 0x1470
0x23fe: jump address is 0x1470
0x1470: jmp qword ptr [rip+0x206aa2]
Execute the function: fputs_unlocked

0x1470: the return address is 0x2403
0x2403: lea rax,[rip+0x334f]
0x240a: lea rcx,[rip+0x3389]
0x2411: mov qword ptr [rsp+0x60],0x0
0x241a: mov qword ptr [rsp+0x68],0x0
0x2423: mov rdx,rsp
0x2426: mov qword ptr [rsp+0x0],rax
0x242a: lea rax,[rip+0x332a]
0x2431: mov qword ptr [rsp+0x30],rcx
0x2436: lea rcx,[rip+0x3367]
0x243d: mov qword ptr [rsp+0x8],rax
0x2442: lea rax,[rip+0x338a]
0x2449: mov qword ptr [rsp+0x40],rcx
0x244e: lea rcx,[rip+0x3359]
0x2455: mov qword ptr [rsp+0x10],rax
0x245a: lea rax,[rip+0x330a]
0x2461: mov qword ptr [rsp+0x50],rcx
0x2466: mov qword ptr [rsp+0x18],rax
0x246b: lea rax,[rip+0x330f]
0x2472: mov qword ptr [rsp+0x20],rax
0x2477: lea rax,[rip+0x330d]
0x247e: mov qword ptr [rsp+0x28],rax
0x2483: mov qword ptr [rsp+0x38],rax
0x2488: mov qword ptr [rsp+0x48],rax
0x248d: mov qword ptr [rsp+0x58],rax
0x2492: nop word ptr [rax+rax]
0x2498: add rdx,0x10
0x249c: mov rdi,qword ptr [rdx]
0x249f: test rdi,rdi
0x24a2: je 0x24b7
0x24a2: jump address is 0x24b7
0x24a4: mov ecx,0xa
0x24a9: mov rsi,rbx
0x24ac: rep cmpsb [rsi],[rdi]
0x24ae: seta al
0x24b1: sbb al,0x0
0x24b3: test al,al
0x24b5: jne 0x2498
0x24b5: jump address is 0x2498
0x24b7: mov r12,qword ptr [rdx+0x8]
0x24bb: xor edi,edi
0x24bd: mov edx,0x5
0x24c2: lea rsi,[rip+0x32ef]
0x24c9: test r12,r12
0x24cc: je 0x2593
0x24cc: jump address is 0x2593
0x24d2: call 0x13c0
0x24d2: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x24d7
0x24d7: lea rcx,[rip+0x36d2]
0x24de: lea rdx,[rip+0x32ea]
0x24e5: mov rsi,rax
0x24e8: mov edi,0x1
0x24ed: xor eax,eax
0x24ef: call 0x1510
0x24ef: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x24f4
0x24f4: xor esi,esi
0x24f6: mov edi,0x5
0x24fb: call 0x1500
0x24fb: jump address is 0x1500
0x1500: jmp qword ptr [rip+0x206a5a]
Execute the function: setlocale

0x1500: the return address is 0x2500
0x2500: test rax,rax
0x2503: je 0x2521
0x2503: jump address is 0x2521
0x2505: lea rsi,[rip+0x32d1]
0x250c: mov edx,0x3
0x2511: mov rdi,rax
0x2514: call 0x1340
0x2514: jump address is 0x1340
0x1340: jmp qword ptr [rip+0x206b3a]
Execute the function: strncmp

0x1340: the return address is 0x2519
0x2519: test eax,eax
0x251b: jne 0x2628
0x251b: jump address is 0x2628
Block exists: lea rsi,[rip+0x32b9] at address 0x2521 is visited for 1 times

0x2628: mov r13,qword ptr [rip+0x205a59]
0x262f: lea rsi,[rip+0x35a2]
0x2636: xor edi,edi
0x2638: mov edx,0x5
0x263d: call 0x13c0
0x263d: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2642
0x2642: mov rsi,r13
0x2645: mov rdi,rax
0x2648: call 0x1470
0x2648: jump address is 0x1470
0x1470: jmp qword ptr [rip+0x206aa2]
Execute the function: fputs_unlocked

0x1470: the return address is 0x264d
0x264d: jmp 0x2521
0x264d: jump address is 0x2521
0x2521: lea rsi,[rip+0x32b9]
0x2528: xor edi,edi
0x252a: mov edx,0x5
0x252f: call 0x13c0
0x252f: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2534
0x2534: lea rcx,[rip+0x3209]
0x253b: lea rdx,[rip+0x366e]
0x2542: mov rsi,rax
0x2545: mov edi,0x1
0x254a: xor eax,eax
0x254c: call 0x1510
0x254c: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x2551
0x2551: cmp r12,rbx
0x2554: lea rcx,[rip+0x321a]
0x255b: lea rbx,[rip+0x3cdf]
0x2562: cmove rbx,rcx
0x2566: lea rsi,[rip+0x36b3]
0x256d: xor edi,edi
0x256f: mov edx,0x5
0x2574: call 0x13c0
0x2574: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2579
0x2579: mov rcx,rbx
0x257c: mov rsi,rax
0x257f: mov rdx,r12
0x2582: mov edi,0x1
0x2587: xor eax,eax
0x2589: call 0x1510
0x2589: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x258e
0x258e: jmp 0x2366
0x258e: jump address is 0x2366
0x2366: mov edi,ebp
0x2368: call 0x1560
0x2368: jump address is 0x1560
0x1560: jmp qword ptr [rip+0x206a2a]
Execute the function: exit

0x2521: lea rsi,[rip+0x32b9]
0x2528: xor edi,edi
0x252a: mov edx,0x5
0x252f: call 0x13c0
0x252f: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2534
Block exists: lea rcx,[rip+0x3209] at address 0x2534 is visited for 1 times

0x2498: add rdx,0x10
0x249c: mov rdi,qword ptr [rdx]
0x249f: test rdi,rdi
0x24a2: je 0x24b7
0x24a2: jump address is 0x24b7
0x24a4: mov ecx,0xa
0x24a9: mov rsi,rbx
0x24ac: rep cmpsb [rsi],[rdi]
0x24ae: seta al
0x24b1: sbb al,0x0
0x24b3: test al,al
0x24b5: jne 0x2498
0x24b5: jump address is 0x2498
Block exists: mov r12,qword ptr [rdx+0x8] at address 0x24b7 is visited for 2 times

0x2498: add rdx,0x10
0x249c: mov rdi,qword ptr [rdx]
0x249f: test rdi,rdi
0x24a2: je 0x24b7
0x24a2: jump address is 0x24b7
Block exists: mov r12,qword ptr [rdx+0x8] at address 0x24b7 is visited for 2 times

Block exists: mov ecx,0xa at address 0x24a4 is visited for 2 times

0x24b7: mov r12,qword ptr [rdx+0x8]
0x24bb: xor edi,edi
0x24bd: mov edx,0x5
0x24c2: lea rsi,[rip+0x32ef]
0x24c9: test r12,r12
0x24cc: je 0x2593
0x24cc: jump address is 0x2593
0x24d2: call 0x13c0
0x24d2: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x24d7
0x24d7: lea rcx,[rip+0x36d2]
0x24de: lea rdx,[rip+0x32ea]
0x24e5: mov rsi,rax
0x24e8: mov edi,0x1
0x24ed: xor eax,eax
0x24ef: call 0x1510
0x24ef: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x24f4
0x24f4: xor esi,esi
0x24f6: mov edi,0x5
0x24fb: call 0x1500
0x24fb: jump address is 0x1500
0x1500: jmp qword ptr [rip+0x206a5a]
Execute the function: setlocale

0x1500: the return address is 0x2500
0x2500: test rax,rax
0x2503: je 0x2521
0x2503: jump address is 0x2521
0x2505: lea rsi,[rip+0x32d1]
0x250c: mov edx,0x3
0x2511: mov rdi,rax
0x2514: call 0x1340
0x2514: jump address is 0x1340
0x1340: jmp qword ptr [rip+0x206b3a]
Execute the function: strncmp

0x1340: the return address is 0x2519
0x2519: test eax,eax
0x251b: jne 0x2628
0x251b: jump address is 0x2628
Block exists: lea rsi,[rip+0x32b9] at address 0x2521 is visited for 3 times

0x2628: mov r13,qword ptr [rip+0x205a59]
0x262f: lea rsi,[rip+0x35a2]
0x2636: xor edi,edi
0x2638: mov edx,0x5
0x263d: call 0x13c0
0x263d: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2642
0x2642: mov rsi,r13
0x2645: mov rdi,rax
0x2648: call 0x1470
0x2648: jump address is 0x1470
0x1470: jmp qword ptr [rip+0x206aa2]
Execute the function: fputs_unlocked

0x1470: the return address is 0x264d
0x264d: jmp 0x2521
0x264d: jump address is 0x2521
Block exists: lea rsi,[rip+0x32b9] at address 0x2521 is visited for 3 times

0x2521: lea rsi,[rip+0x32b9]
0x2528: xor edi,edi
0x252a: mov edx,0x5
0x252f: call 0x13c0
0x252f: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2534
0x2534: lea rcx,[rip+0x3209]
0x253b: lea rdx,[rip+0x366e]
0x2542: mov rsi,rax
0x2545: mov edi,0x1
0x254a: xor eax,eax
0x254c: call 0x1510
0x254c: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x2551
0x2551: cmp r12,rbx
0x2554: lea rcx,[rip+0x321a]
0x255b: lea rbx,[rip+0x3cdf]
0x2562: cmove rbx,rcx
0x2566: lea rsi,[rip+0x36b3]
0x256d: xor edi,edi
0x256f: mov edx,0x5
0x2574: call 0x13c0
0x2574: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2579
0x2579: mov rcx,rbx
0x257c: mov rsi,rax
0x257f: mov rdx,r12
0x2582: mov edi,0x1
0x2587: xor eax,eax
0x2589: call 0x1510
0x2589: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x258e
0x258e: jmp 0x2366
0x258e: jump address is 0x2366
0x2366: mov edi,ebp
0x2368: call 0x1560
0x2368: jump address is 0x1560
0x1560: jmp qword ptr [rip+0x206a2a]
Execute the function: exit

0x2562: cmove rbx,rcx
0x2566: lea rsi,[rip+0x36b3]
0x256d: xor edi,edi
0x256f: mov edx,0x5
0x2574: call 0x13c0
0x2574: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2579
0x2579: mov rcx,rbx
0x257c: mov rsi,rax
0x257f: mov rdx,r12
0x2582: mov edi,0x1
0x2587: xor eax,eax
0x2589: call 0x1510
0x2589: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x258e
0x258e: jmp 0x2366
0x258e: jump address is 0x2366
0x2366: mov edi,ebp
0x2368: call 0x1560
0x2368: jump address is 0x1560
0x1560: jmp qword ptr [rip+0x206a2a]
Execute the function: exit

0x2593: call 0x13c0
0x2593: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2598
0x2598: lea rcx,[rip+0x3611]
0x259f: lea rdx,[rip+0x3229]
0x25a6: mov rsi,rax
0x25a9: mov edi,0x1
0x25ae: xor eax,eax
0x25b0: call 0x1510
0x25b0: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x25b5
0x25b5: xor esi,esi
0x25b7: mov edi,0x5
0x25bc: call 0x1500
0x25bc: jump address is 0x1500
0x1500: jmp qword ptr [rip+0x206a5a]
Execute the function: setlocale

0x1500: the return address is 0x25c1
0x25c1: test rax,rax
0x25c4: je 0x25de
0x25c4: jump address is 0x25de
0x25c6: lea rsi,[rip+0x3210]
0x25cd: mov edx,0x3
0x25d2: mov rdi,rax
0x25d5: call 0x1340
0x25d5: jump address is 0x1340
0x1340: jmp qword ptr [rip+0x206b3a]
Execute the function: strncmp

0x1340: the return address is 0x25da
0x25da: test eax,eax
0x25dc: jne 0x2621
0x25dc: jump address is 0x2621
Block exists: lea rsi,[rip+0x31fc] at address 0x25de is visited for 1 times

0x2621: lea r12,[rip+0x311c]
0x2628: mov r13,qword ptr [rip+0x205a59]
0x262f: lea rsi,[rip+0x35a2]
0x2636: xor edi,edi
0x2638: mov edx,0x5
0x263d: call 0x13c0
0x263d: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2642
Block exists: mov rsi,r13 at address 0x2642 is visited for 2 times

0x25de: lea rsi,[rip+0x31fc]
0x25e5: mov edx,0x5
0x25ea: xor edi,edi
0x25ec: lea r12,[rip+0x3151]
0x25f3: lea rbx,[rip+0x317b]
0x25fa: call 0x13c0
0x25fa: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x25ff
0x25ff: lea rcx,[rip+0x313e]
0x2606: lea rdx,[rip+0x35a3]
0x260d: mov rsi,rax
0x2610: mov edi,0x1
0x2615: xor eax,eax
0x2617: call 0x1510
0x2617: jump address is 0x1510
0x1510: jmp qword ptr [rip+0x206a52]
Execute the function: __printf_chk

0x1510: the return address is 0x261c
0x261c: jmp 0x2566
0x261c: jump address is 0x2566
0x2566: lea rsi,[rip+0x36b3]
0x256d: xor edi,edi
0x256f: mov edx,0x5
0x2574: call 0x13c0
0x2574: jump address is 0x13c0
0x13c0: jmp qword ptr [rip+0x206afa]
Execute the function: dcgettext

0x13c0: the return address is 0x2579
Block exists: mov rcx,rbx at address 0x2579 is visited for 3 times

0x2bd9: mov rax,qword ptr [rsp+0x28]
0x2bde: xor rax,qword ptr fs:0x28
0x2be7: mov dword ptr [rip+0x2054b3],ebx
0x2bed: mov dword ptr [rip+0x205499],0x0
0x2bf7: jne 0x2c9a
0x2bf7: jump address is 0x2c9a
0x2bfd: add rsp,0xe8
0x2c04: pop rbx
0x2c05: pop rbp
0x2c06: pop r12
0x2c08: pop r13
0x2c0a: ret
0x2c0a: the return address is 0x1676
0x1676: lea rbx,[rbp+0x1]
0x167a: lea rcx,[rip+0x41a6]
0x1681: mov r8d,0x7f
0x1687: mov edx,0x15
0x168c: mov esi,0x1
0x1691: xor eax,eax
0x1693: mov rdi,rbx
0x1696: call 0x15c0
0x1696: jump address is 0x15c0
0x15c0: jmp qword ptr [rip+0x2069fa]
Execute the function: __sprintf_chk

0x15c0: the return address is 0x169b
Block exists: lea rsi,[rip+0x418e] at address 0x169b is visited for 1 times

0x2e4d: mov qword ptr [rip+0x20528c],rbx
0x2e54: mov qword ptr [rip+0x20523d],rbx
0x2e5b: pop rbx
0x2e5c: ret
0x2e5c: the return address is 0x1603
0x1603: lea rsi,[rip+0x4c37]
0x160a: mov edi,0x6
0x160f: call 0x1500
0x160f: jump address is 0x1500
0x1500: jmp qword ptr [rip+0x206a5a]
Execute the function: setlocale

0x1500: the return address is 0x1614
Block exists: lea rsi,[rip+0x41e1] at address 0x1614 is visited for 1 times

0x2e5d: mov rcx,qword ptr [rip+0x20525c]
0x2e64: lea rdi,[rip+0x2e65]
0x2e6b: mov edx,0x37
0x2e70: mov esi,0x1
0x2e75: call 0x1570
0x2e75: jump address is 0x1570
0x1570: jmp qword ptr [rip+0x206a22]
Execute the function: fwrite

0x1570: the return address is 0x2e7a
0x2e7a: call 0x1320
0x2e7a: jump address is 0x1320
0x1320: jmp qword ptr [rip+0x206b4a]
Execute the function: abort

Unreachable instructions:
0x12f0: push qword ptr [rip+0x206b50]
0x1300: jmp qword ptr [rip+0x206b5a]
0x1306: push 0x0
0x130b: jmp 0x12f0
0x1310: jmp qword ptr [rip+0x206b52]
0x1316: push 0x1
0x131b: jmp 0x12f0
0x1326: push 0x2
0x132b: jmp 0x12f0
0x1330: jmp qword ptr [rip+0x206b42]
0x1336: push 0x3
0x133b: jmp 0x12f0
0x1346: push 0x4
0x134b: jmp 0x12f0
0x1350: jmp qword ptr [rip+0x206b32]
0x1356: push 0x5
0x135b: jmp 0x12f0
0x1360: jmp qword ptr [rip+0x206b2a]
0x1366: push 0x6
0x136b: jmp 0x12f0
0x1370: jmp qword ptr [rip+0x206b22]
0x1376: push 0x7
0x137b: jmp 0x12f0
0x1380: jmp qword ptr [rip+0x206b1a]
0x1386: push 0x8
0x138b: jmp 0x12f0
0x1396: push 0x9
0x139b: jmp 0x12f0
0x13a0: jmp qword ptr [rip+0x206b0a]
0x13a6: push 0xa
0x13ab: jmp 0x12f0
0x13b6: push 0xb
0x13bb: jmp 0x12f0
0x13c6: push 0xc
0x13cb: jmp 0x12f0
0x13d0: jmp qword ptr [rip+0x206af2]
0x13d6: push 0xd
0x13db: jmp 0x12f0
0x13e6: push 0xe
0x13eb: jmp 0x12f0
0x13f0: jmp qword ptr [rip+0x206ae2]
0x13f6: push 0xf
0x13fb: jmp 0x12f0
0x1406: push 0x10
0x140b: jmp 0x12f0
0x1410: jmp qword ptr [rip+0x206ad2]
0x1416: push 0x11
0x141b: jmp 0x12f0
0x1426: push 0x12
0x142b: jmp 0x12f0
0x1430: jmp qword ptr [rip+0x206ac2]
0x1436: push 0x13
0x143b: jmp 0x12f0
0x1440: jmp qword ptr [rip+0x206aba]
0x1446: push 0x14
0x144b: jmp 0x12f0
0x1450: jmp qword ptr [rip+0x206ab2]
0x1456: push 0x15
0x145b: jmp 0x12f0
0x1460: jmp qword ptr [rip+0x206aaa]
0x1466: push 0x16
0x146b: jmp 0x12f0
0x1476: push 0x17
0x147b: jmp 0x12f0
0x1480: jmp qword ptr [rip+0x206a9a]
0x1486: push 0x18
0x148b: jmp 0x12f0
0x1490: jmp qword ptr [rip+0x206a92]
0x1496: push 0x19
0x149b: jmp 0x12f0
0x14a0: jmp qword ptr [rip+0x206a8a]
0x14a6: push 0x1a
0x14ab: jmp 0x12f0
0x14b0: jmp qword ptr [rip+0x206a82]
0x14b6: push 0x1b
0x14bb: jmp 0x12f0
0x14c0: jmp qword ptr [rip+0x206a7a]
0x14c6: push 0x1c
0x14cb: jmp 0x12f0
0x14d0: jmp qword ptr [rip+0x206a72]
0x14d6: push 0x1d
0x14db: jmp 0x12f0
0x14e0: jmp qword ptr [rip+0x206a6a]
0x14e6: push 0x1e
0x14eb: jmp 0x12f0
0x14f0: jmp qword ptr [rip+0x206a62]
0x14f6: push 0x1f
0x14fb: jmp 0x12f0
0x1506: push 0x20
0x150b: jmp 0x12f0
0x1516: push 0x21
0x151b: jmp 0x12f0
0x1520: jmp qword ptr [rip+0x206a4a]
0x1526: push 0x22
0x152b: jmp 0x12f0
0x1530: jmp qword ptr [rip+0x206a42]
0x1536: push 0x23
0x153b: jmp 0x12f0
0x1540: jmp qword ptr [rip+0x206a3a]
0x1546: push 0x24
0x154b: jmp 0x12f0
0x1556: push 0x25
0x155b: jmp 0x12f0
0x1566: push 0x26
0x156b: jmp 0x12f0
0x1576: push 0x27
0x157b: jmp 0x12f0
0x1586: push 0x28
0x158b: jmp 0x12f0
0x1590: jmp qword ptr [rip+0x206a12]
0x1596: push 0x29
0x159b: jmp 0x12f0
0x15a0: jmp qword ptr [rip+0x206a0a]
0x15a6: push 0x2a
0x15ab: jmp 0x12f0
0x15b0: jmp qword ptr [rip+0x206a02]
0x15b6: push 0x2b
0x15bb: jmp 0x12f0
0x15c6: push 0x2c
0x15cb: jmp 0x12f0
0x15d0: jmp qword ptr [rip+0x206a08]
0x16b9: lea rsi,[rip+0x417e]
0x16c0: mov rdx,rax
0x16c3: mov edi,0x1
0x16c8: xor eax,eax
0x16ca: call 0x1510
0x16cf: lea rcx,[rip+0x4155]
0x16d6: mov r8,0xffffffffffffff80
0x16dd: mov edx,0x15
0x16e2: mov esi,0x1
0x16e7: mov rdi,rbx
0x16ea: xor eax,eax
0x16ec: call 0x15c0
0x16f1: lea rsi,[rip+0x4156]
0x16f8: mov rdx,rbx
0x16fb: mov edi,0x1
0x1700: xor eax,eax
0x1702: call 0x1510
0x1707: mov rdi,rbp
0x170a: call 0x21a0
0x170f: lea rsi,[rip+0x4146]
0x1716: mov rdx,rax
0x1719: mov edi,0x1
0x171e: xor eax,eax
0x1720: call 0x1510
0x1725: lea rcx,[rip+0x40fb]
0x172c: mov r8d,0x7f
0x1732: mov edx,0x15
0x1737: mov esi,0x1
0x173c: mov rdi,rbx
0x173f: xor eax,eax
0x1741: call 0x15c0
0x1746: lea rsi,[rip+0x40e2]
0x174d: mov rdx,rbx
0x1750: mov edi,0x1
0x1755: xor eax,eax
0x1757: call 0x1510
0x175c: mov rdi,rbp
0x175f: call 0x21a0
0x1764: lea rsi,[rip+0x40d2]
0x176b: mov rdx,rax
0x176e: mov edi,0x1
0x1773: xor eax,eax
0x1775: call 0x1510
0x177a: lea rcx,[rip+0x40aa]
0x1781: mov r8,0xffffffffffffff80
0x1788: mov edx,0x15
0x178d: mov esi,0x1
0x1792: mov rdi,rbx
0x1795: xor eax,eax
0x1797: call 0x15c0
0x179c: lea rsi,[rip+0x40aa]
0x17a3: xor eax,eax
0x17a5: mov rdx,rbx
0x17a8: mov edi,0x1
0x17ad: call 0x1510
0x17b2: mov rdi,rbp
0x17b5: call 0x21a0
0x17ba: lea rsi,[rip+0x409a]
0x17c1: mov rdx,rax
0x17c4: mov edi,0x1
0x17c9: xor eax,eax
0x17cb: call 0x1510
0x17d0: lea rcx,[rip+0x4050]
0x17d7: mov r8d,0xff
0x17dd: mov edx,0x15
0x17e2: mov esi,0x1
0x17e7: mov rdi,rbx
0x17ea: xor eax,eax
0x17ec: call 0x15c0
0x17f1: lea rsi,[rip+0x4073]
0x17f8: mov rdx,rbx
0x17fb: mov edi,0x1
0x1800: xor eax,eax
0x1802: call 0x1510
0x1807: mov rdi,rbp
0x180a: call 0x21a0
0x180f: lea rsi,[rip+0x4063]
0x1816: mov rdx,rax
0x1819: mov edi,0x1
0x181e: xor eax,eax
0x1820: call 0x1510
0x1825: lea rcx,[rip+0x3ffb]
0x182c: mov r8d,0x7fff
0x1832: mov edx,0x15
0x1837: mov esi,0x1
0x183c: mov rdi,rbx
0x183f: xor eax,eax
0x1841: call 0x15c0
0x1846: lea rsi,[rip+0x403c]
0x184d: mov rdx,rbx
0x1850: mov edi,0x1
0x1855: xor eax,eax
0x1857: call 0x1510
0x185c: mov rdi,rbp
0x185f: call 0x21a0
0x1864: lea rsi,[rip+0x402b]
0x186b: mov rdx,rax
0x186e: mov edi,0x1
0x1873: xor eax,eax
0x1875: call 0x1510
0x187a: lea rcx,[rip+0x3faa]
0x1881: mov r8,0xffffffffffff8000
0x1888: mov edx,0x15
0x188d: mov esi,0x1
0x1892: mov rdi,rbx
0x1895: xor eax,eax
0x1897: call 0x15c0
0x189c: lea rsi,[rip+0x4002]
0x18a3: mov rdx,rbx
0x18a6: mov edi,0x1
0x18ab: xor eax,eax
0x18ad: call 0x1510
0x18b2: mov rdi,rbp
0x18b5: call 0x21a0
0x18ba: lea rsi,[rip+0x3ff1]
0x18c1: mov rdx,rax
0x18c4: mov edi,0x1
0x18c9: xor eax,eax
0x18cb: call 0x1510
0x18d0: lea rcx,[rip+0x3f50]
0x18d7: mov r8d,0x7fffffff
0x18dd: mov edx,0x15
0x18e2: mov esi,0x1
0x18e7: mov rdi,rbx
0x18ea: xor eax,eax
0x18ec: call 0x15c0
0x18f1: lea rsi,[rip+0x3fe4]
0x18f8: mov rdx,rbx
0x18fb: mov edi,0x1
0x1900: xor eax,eax
0x1902: call 0x1510
0x1907: mov rdi,rbp
0x190a: call 0x21a0
0x190f: lea rsi,[rip+0x3fd3]
0x1916: mov rdx,rax
0x1919: mov edi,0x1
0x191e: xor eax,eax
0x1920: call 0x1510
0x1925: lea rcx,[rip+0x3eff]
0x192c: mov r8,0xffffffff80000000
0x1933: mov edx,0x15
0x1938: mov esi,0x1
0x193d: mov rdi,rbx
0x1940: xor eax,eax
0x1942: call 0x15c0
0x1947: lea rsi,[rip+0x3f73]
0x194e: mov rdx,rbx
0x1951: mov edi,0x1
0x1956: xor eax,eax
0x1958: call 0x1510
0x195d: mov rdi,rbp
0x1960: call 0x21a0
0x1965: lea rsi,[rip+0x3f61]
0x196c: mov rdx,rax
0x196f: mov edi,0x1
0x1974: xor eax,eax
0x1976: call 0x1510
0x197b: lea rcx,[rip+0x3ea5]
0x1982: mov r8d,0xffffffff
0x1988: mov edx,0x15
0x198d: mov esi,0x1
0x1992: mov rdi,rbx
0x1995: xor eax,eax
0x1997: call 0x15c0
0x199c: lea rsi,[rip+0x3f38]
0x19a3: mov rdx,rbx
0x19a6: mov edi,0x1
0x19ab: xor eax,eax
0x19ad: call 0x1510
0x19b2: mov rdi,rbp
0x19b5: call 0x21a0
0x19ba: lea rsi,[rip+0x3f27]
0x19c1: mov rdx,rax
0x19c4: mov edi,0x1
0x19c9: xor eax,eax
0x19cb: call 0x1510
0x19d0: lea rcx,[rip+0x3e50]
0x19d7: movabs r8,0x7fffffffffffffff
0x19e1: mov edx,0x15
0x19e6: mov esi,0x1
0x19eb: mov rdi,rbx
0x19ee: xor eax,eax
0x19f0: call 0x15c0
0x19f5: lea rsi,[rip+0x3f18]
0x19fc: mov rdx,rbx
0x19ff: mov edi,0x1
0x1a04: xor eax,eax
0x1a06: call 0x1510
0x1a0b: mov rdi,rbp
0x1a0e: call 0x21a0
0x1a13: lea rsi,[rip+0x3f08]
0x1a1a: mov rdx,rax
0x1a1d: mov edi,0x1
0x1a22: xor eax,eax
0x1a24: call 0x1510
0x1a29: lea rcx,[rip+0x3dfb]
0x1a30: movabs r8,0x8000000000000000
0x1a3a: mov edx,0x15
0x1a3f: mov esi,0x1
0x1a44: mov rdi,rbx
0x1a47: xor eax,eax
0x1a49: call 0x15c0
0x1a4e: lea rsi,[rip+0x3ea2]
0x1a55: mov rdx,rbx
0x1a58: mov edi,0x1
0x1a5d: xor eax,eax
0x1a5f: call 0x1510
0x1a64: mov rdi,rbp
0x1a67: call 0x21a0
0x1a6c: lea rsi,[rip+0x3e91]
0x1a73: mov rdx,rax
0x1a76: mov edi,0x1
0x1a7b: xor eax,eax
0x1a7d: call 0x1510
0x1a82: lea rcx,[rip+0x3d9e]
0x1a89: mov r8,0xffffffffffffffff
0x1a90: mov edx,0x15
0x1a95: mov esi,0x1
0x1a9a: mov rdi,rbx
0x1a9d: xor eax,eax
0x1a9f: call 0x15c0
0x1aa4: lea rsi,[rip+0x3e68]
0x1aab: mov rdx,rbx
0x1aae: mov edi,0x1
0x1ab3: xor eax,eax
0x1ab5: call 0x1510
0x1aba: mov rdi,rbp
0x1abd: call 0x21a0
0x1ac2: lea rsi,[rip+0x3e58]
0x1ac9: mov rdx,rax
0x1acc: mov edi,0x1
0x1ad1: xor eax,eax
0x1ad3: call 0x1510
0x1ad8: lea rcx,[rip+0x3d48]
0x1adf: mov r8,0xffffffffffffffff
0x1ae6: mov edx,0x15
0x1aeb: mov esi,0x1
0x1af0: mov rdi,rbx
0x1af3: xor eax,eax
0x1af5: call 0x15c0
0x1afa: lea rsi,[rip+0x3e31]
0x1b01: mov rdx,rbx
0x1b04: mov edi,0x1
0x1b09: xor eax,eax
0x1b0b: call 0x1510
0x1b10: mov rdi,rbp
0x1b13: call 0x21a0
0x1b18: lea rsi,[rip+0x3e21]
0x1b1f: mov rdx,rax
0x1b22: mov edi,0x1
0x1b27: xor eax,eax
0x1b29: call 0x1510
0x1b2e: lea rcx,[rip+0x3cf2]
0x1b35: movabs r8,0x7fffffffffffffff
0x1b3f: mov edx,0x15
0x1b44: mov esi,0x1
0x1b49: mov rdi,rbx
0x1b4c: xor eax,eax
0x1b4e: call 0x15c0
0x1b53: lea rsi,[rip+0x3dd7]
0x1b5a: mov rdx,rbx
0x1b5d: mov edi,0x1
0x1b62: xor eax,eax
0x1b64: call 0x1510
0x1b69: mov rdi,rbp
0x1b6c: call 0x21a0
0x1b71: lea rsi,[rip+0x3dc7]
0x1b78: mov rdx,rax
0x1b7b: mov edi,0x1
0x1b80: xor eax,eax
0x1b82: call 0x1510
0x1b87: lea rcx,[rip+0x3c9d]
0x1b8e: movabs r8,0x8000000000000000
0x1b98: mov edx,0x15
0x1b9d: mov esi,0x1
0x1ba2: mov rdi,rbx
0x1ba5: xor eax,eax
0x1ba7: call 0x15c0
0x1bac: lea rsi,[rip+0x3d9c]
0x1bb3: mov rdx,rbx
0x1bb6: mov edi,0x1
0x1bbb: xor eax,eax
0x1bbd: call 0x1510
0x1bc2: mov rdi,rbp
0x1bc5: call 0x21a0
0x1bca: lea rsi,[rip+0x3d8c]
0x1bd1: mov rdx,rax
0x1bd4: mov edi,0x1
0x1bd9: xor eax,eax
0x1bdb: call 0x1510
0x1be0: lea rcx,[rip+0x3c40]
0x1be7: movabs r8,0x7fffffffffffffff
0x1bf1: mov edx,0x15
0x1bf6: mov esi,0x1
0x1bfb: mov rdi,rbx
0x1bfe: xor eax,eax
0x1c00: call 0x15c0
0x1c05: lea rsi,[rip+0x3d61]
0x1c0c: mov rdx,rbx
0x1c0f: mov edi,0x1
0x1c14: xor eax,eax
0x1c16: call 0x1510
0x1c1b: mov rdi,rbp
0x1c1e: call 0x21a0
0x1c23: lea rsi,[rip+0x3d52]
0x1c2a: mov rdx,rax
0x1c2d: mov edi,0x1
0x1c32: xor eax,eax
0x1c34: call 0x1510
0x1c39: lea rcx,[rip+0x3beb]
0x1c40: xor eax,eax
0x1c42: movabs r8,0x8000000000000000
0x1c4c: mov edx,0x15
0x1c51: mov esi,0x1
0x1c56: mov rdi,rbx
0x1c59: call 0x15c0
0x1c5e: lea rsi,[rip+0x3d28]
0x1c65: mov rdx,rbx
0x1c68: mov edi,0x1
0x1c6d: xor eax,eax
0x1c6f: call 0x1510
0x1c74: mov rdi,rbp
0x1c77: call 0x21a0
0x1c7c: lea rsi,[rip+0x3d19]
0x1c83: mov rdx,rax
0x1c86: mov edi,0x1
0x1c8b: xor eax,eax
0x1c8d: call 0x1510
0x1c92: lea rcx,[rip+0x3b8e]
0x1c99: mov r8d,0xffffffff
0x1c9f: mov edx,0x15
0x1ca4: mov esi,0x1
0x1ca9: mov rdi,rbx
0x1cac: xor eax,eax
0x1cae: call 0x15c0
0x1cb3: lea rsi,[rip+0x3cf3]
0x1cba: mov rdx,rbx
0x1cbd: mov edi,0x1
0x1cc2: xor eax,eax
0x1cc4: call 0x1510
0x1cc9: mov rdi,rbp
0x1ccc: call 0x21a0
0x1cd1: lea rsi,[rip+0x3ce3]
0x1cd8: mov rdx,rax
0x1cdb: mov edi,0x1
0x1ce0: xor eax,eax
0x1ce2: call 0x1510
0x1ce7: lea rcx,[rip+0x3b39]
0x1cee: mov r8d,0xffffffff
0x1cf4: mov edx,0x15
0x1cf9: mov esi,0x1
0x1cfe: mov rdi,rbx
0x1d01: xor eax,eax
0x1d03: call 0x15c0
0x1d08: lea rsi,[rip+0x3cbc]
0x1d0f: mov rdx,rbx
0x1d12: mov edi,0x1
0x1d17: xor eax,eax
0x1d19: call 0x1510
0x1d1e: mov rdi,rbp
0x1d21: call 0x21a0
0x1d26: lea rsi,[rip+0x3cac]
0x1d2d: mov rdx,rax
0x1d30: mov edi,0x1
0x1d35: xor eax,eax
0x1d37: call 0x1510
0x1d3c: lea rcx,[rip+0x3ae4]
0x1d43: mov r8d,0x7fffffff
0x1d49: mov edx,0x15
0x1d4e: mov esi,0x1
0x1d53: mov rdi,rbx
0x1d56: xor eax,eax
0x1d58: call 0x15c0
0x1d5d: lea rsi,[rip+0x3c85]
0x1d64: mov rdx,rbx
0x1d67: mov edi,0x1
0x1d6c: xor eax,eax
0x1d6e: call 0x1510
0x1d73: mov rdi,rbp
0x1d76: call 0x21a0
0x1d7b: lea rsi,[rip+0x3c75]
0x1d82: mov rdx,rax
0x1d85: mov edi,0x1
0x1d8a: xor eax,eax
0x1d8c: call 0x1510
0x1d91: lea rcx,[rip+0x3a93]
0x1d98: mov r8,0xffffffff80000000
0x1d9f: mov edx,0x15
0x1da4: mov esi,0x1
0x1da9: mov rdi,rbx
0x1dac: xor eax,eax
0x1dae: call 0x15c0
0x1db3: lea rsi,[rip+0x3c4d]
0x1dba: mov rdx,rbx
0x1dbd: mov edi,0x1
0x1dc2: xor eax,eax
0x1dc4: call 0x1510
0x1dc9: mov rdi,rbp
0x1dcc: call 0x21a0
0x1dd1: lea rsi,[rip+0x3c3d]
0x1dd8: mov rdx,rax
0x1ddb: mov edi,0x1
0x1de0: xor eax,eax
0x1de2: call 0x1510
0x1de7: lea rcx,[rip+0x3a39]
0x1dee: movabs r8,0x7fffffffffffffff
0x1df8: mov edx,0x15
0x1dfd: mov esi,0x1
0x1e02: mov rdi,rbx
0x1e05: xor eax,eax
0x1e07: call 0x15c0
0x1e0c: lea rsi,[rip+0x3c12]
0x1e13: mov rdx,rbx
0x1e16: mov edi,0x1
0x1e1b: xor eax,eax
0x1e1d: call 0x1510
0x1e22: mov rdi,rbp
0x1e25: call 0x21a0
0x1e2a: lea rsi,[rip+0x3c02]
0x1e31: mov rdx,rax
0x1e34: mov edi,0x1
0x1e39: xor eax,eax
0x1e3b: call 0x1510
0x1e40: lea rcx,[rip+0x39e4]
0x1e47: movabs r8,0x8000000000000000
0x1e51: mov edx,0x15
0x1e56: mov esi,0x1
0x1e5b: mov rdi,rbx
0x1e5e: xor eax,eax
0x1e60: call 0x15c0
0x1e65: lea rsi,[rip+0x3bd7]
0x1e6c: mov rdx,rbx
0x1e6f: mov edi,0x1
0x1e74: xor eax,eax
0x1e76: call 0x1510
0x1e7b: mov rdi,rbp
0x1e7e: call 0x21a0
0x1e83: lea rsi,[rip+0x3bc7]
0x1e8a: mov rdx,rax
0x1e8d: mov edi,0x1
0x1e92: xor eax,eax
0x1e94: call 0x1510
0x1e99: lea rcx,[rip+0x3987]
0x1ea0: movabs r8,0x7fffffffffffffff
0x1eaa: mov edx,0x15
0x1eaf: mov esi,0x1
0x1eb4: mov rdi,rbx
0x1eb7: xor eax,eax
0x1eb9: call 0x15c0
0x1ebe: lea rsi,[rip+0x3bbd]
0x1ec5: mov rdx,rbx
0x1ec8: mov edi,0x1
0x1ecd: xor eax,eax
0x1ecf: call 0x1510
0x1ed4: mov rdi,rbp
0x1ed7: call 0x21a0
0x1edc: lea rsi,[rip+0x3baf]
0x1ee3: mov rdx,rax
0x1ee6: mov edi,0x1
0x1eeb: xor eax,eax
0x1eed: call 0x1510
0x1ef2: lea rcx,[rip+0x3932]
0x1ef9: movabs r8,0x8000000000000000
0x1f03: mov edx,0x15
0x1f08: mov esi,0x1
0x1f0d: mov rdi,rbx
0x1f10: xor eax,eax
0x1f12: call 0x15c0
0x1f17: lea rsi,[rip+0x3b43]
0x1f1e: mov rdx,rbx
0x1f21: mov edi,0x1
0x1f26: xor eax,eax
0x1f28: call 0x1510
0x1f2d: mov rdi,rbp
0x1f30: call 0x21a0
0x1f35: lea rsi,[rip+0x3b34]
0x1f3c: mov rdx,rax
0x1f3f: mov edi,0x1
0x1f44: xor eax,eax
0x1f46: call 0x1510
0x1f4b: lea rcx,[rip+0x38d5]
0x1f52: mov r8,0xffffffffffffffff
0x1f59: mov edx,0x15
0x1f5e: mov esi,0x1
0x1f63: mov rdi,rbx
0x1f66: xor eax,eax
0x1f68: call 0x15c0
0x1f6d: lea rsi,[rip+0x3b0d]
0x1f74: mov rdx,rbx
0x1f77: mov edi,0x1
0x1f7c: xor eax,eax
0x1f7e: call 0x1510
0x1f83: mov rdi,rbp
0x1f86: call 0x21a0
0x1f8b: lea rsi,[rip+0x3aff]
0x1f92: mov rdx,rax
0x1f95: mov edi,0x1
0x1f9a: xor eax,eax
0x1f9c: call 0x1510
0x1fa1: lea rsi,[rip+0x3afb]
0x1fa8: mov edi,0x1
0x1fad: xor eax,eax
0x1faf: call 0x1510
0x1fb4: movss xmm0,dword ptr [rip+0x3c98]
0x1fbc: call 0x2210
0x1fc1: lea rsi,[rip+0x3ae4]
0x1fc8: mov edi,0x1
0x1fcd: xor eax,eax
0x1fcf: call 0x1510
0x1fd4: movss xmm0,dword ptr [rip+0x3c7c]
0x1fdc: call 0x2210
0x1fe1: lea rsi,[rip+0x3ace]
0x1fe8: mov edi,0x1
0x1fed: xor eax,eax
0x1fef: call 0x1510
0x1ff4: movsd xmm0,qword ptr [rip+0x3c64]
0x1ffc: call 0x2260
0x2001: lea rsi,[rip+0x3ab8]
0x2008: mov edi,0x1
0x200d: xor eax,eax
0x200f: call 0x1510
0x2014: movsd xmm0,qword ptr [rip+0x3c4c]
0x201c: call 0x2260
0x2021: lea rsi,[rip+0x3a8d]
0x2028: mov edi,0x1
0x202d: xor eax,eax
0x202f: call 0x1510
0x2034: movabs rax,0x8000000000000000
0x203e: push 0x1
0x2040: push rax
0x2041: call 0x22b0
0x2046: lea rsi,[rip+0x3a72]
0x204d: add rsp,0x20
0x2051: mov edi,0x1
0x2056: xor eax,eax
0x2058: call 0x1510
0x205d: push 0x7ffe
0x2062: push 0xffffffffffffffff
0x2064: call 0x22b0
0x2069: pop rdx
0x206a: pop rcx
0x206b: mov rcx,qword ptr [rsp+0x18]
0x2070: xor rcx,qword ptr fs:0x28
0x2079: jne 0x2084
0x207b: add rsp,0x28
0x207f: xor eax,eax
0x2081: pop rbx
0x2082: pop rbp
0x2083: ret
0x2084: call 0x13f0
0x20ba: hlt
0x20c0: lea rdi,[rip+0x205fb9]
0x20c7: push rbp
0x20c8: lea rax,[rip+0x205fb1]
0x20cf: cmp rax,rdi
0x20d2: mov rbp,rsp
0x20d5: je 0x20f0
0x20d7: mov rax,qword ptr [rip+0x205eea]
0x20de: test rax,rax
0x20e1: je 0x20f0
0x20e3: pop rbp
0x20e4: jmp rax
0x20f0: pop rbp
0x20f1: ret
0x2100: lea rdi,[rip+0x205f79]
0x2107: lea rsi,[rip+0x205f72]
0x210e: push rbp
0x210f: sub rsi,rdi
0x2112: mov rbp,rsp
0x2115: sar rsi,0x3
0x2119: mov rax,rsi
0x211c: shr rax,0x3f
0x2120: add rsi,rax
0x2123: sar rsi,0x1
0x2126: je 0x2140
0x2128: mov rax,qword ptr [rip+0x205eb1]
0x212f: test rax,rax
0x2132: je 0x2140
0x2134: pop rbp
0x2135: jmp rax
0x2140: pop rbp
0x2141: ret
0x2150: cmp byte ptr [rip+0x205f71],0x0
0x2157: jne 0x2188
0x2159: cmp qword ptr [rip+0x205e87],0x0
0x2161: push rbp
0x2162: mov rbp,rsp
0x2165: je 0x2173
0x2167: mov rdi,qword ptr [rip+0x205e9a]
0x216e: call 0x15d0
0x2173: call 0x20c0
0x2178: mov byte ptr [rip+0x205f49],0x1
0x217f: pop rbp
0x2180: ret
0x2188: ret
0x2190: push rbp
0x2191: mov rbp,rsp
0x2194: pop rbp
0x2195: jmp 0x2100
0x2210: push rbx
0x2211: xor ecx,ecx
0x2213: mov edx,0x1
0x2218: mov esi,0x1f
0x221d: sub rsp,0x30
0x2221: mov rbx,rsp
0x2224: mov rdi,rbx
0x2227: mov rax,qword ptr fs:0x28
0x2230: mov qword ptr [rsp+0x28],rax
0x2235: xor eax,eax
0x2237: call 0x28a0
0x223c: mov rdi,rbx
0x223f: call 0x1370
0x2244: mov rax,qword ptr [rsp+0x28]
0x2249: xor rax,qword ptr fs:0x28
0x2252: jne 0x225a
0x2254: add rsp,0x30
0x2258: pop rbx
0x2259: ret
0x225a: call 0x13f0
0x2260: push rbx
0x2261: xor ecx,ecx
0x2263: mov edx,0x1
0x2268: mov esi,0x28
0x226d: sub rsp,0x30
0x2271: mov rbx,rsp
0x2274: mov rdi,rbx
0x2277: mov rax,qword ptr fs:0x28
0x2280: mov qword ptr [rsp+0x28],rax
0x2285: xor eax,eax
0x2287: call 0x2730
0x228c: mov rdi,rbx
0x228f: call 0x1370
0x2294: mov rax,qword ptr [rsp+0x28]
0x2299: xor rax,qword ptr fs:0x28
0x22a2: jne 0x22aa
0x22a4: add rsp,0x30
0x22a8: pop rbx
0x22a9: ret
0x22aa: call 0x13f0
0x22b0: push rbx
0x22b1: xor ecx,ecx
0x22b3: mov edx,0x1
0x22b8: mov esi,0x2d
0x22bd: sub rsp,0x40
0x22c1: mov rax,qword ptr fs:0x28
0x22ca: mov qword ptr [rsp+0x38],rax
0x22cf: xor eax,eax
0x22d1: mov rbx,rsp
0x22d4: push qword ptr [rsp+0x58]
0x22d8: push qword ptr [rsp+0x58]
0x22dc: mov rdi,rbx
0x22df: call 0x2a10
0x22e4: mov rdi,rbx
0x22e7: call 0x1370
0x22ec: pop rax
0x22ed: pop rdx
0x22ee: mov rax,qword ptr [rsp+0x38]
0x22f3: xor rax,qword ptr fs:0x28
0x22fc: jne 0x2304
0x22fe: add rsp,0x40
0x2302: pop rbx
0x2303: ret
0x2304: call 0x13f0
0x233f: lea rsi,[rip+0x378a]
0x2346: xor edi,edi
0x2348: call 0x13c0
0x234d: mov rdi,qword ptr [rip+0x205d6c]
0x2354: mov rdx,rax
0x2357: mov rcx,rbx
0x235a: mov esi,0x1
0x235f: xor eax,eax
0x2361: call 0x1580
0x2660: mov qword ptr [rip+0x205a71],rdi
0x2667: ret
0x2670: mov byte ptr [rip+0x205a59],dil
0x2677: ret
0x2680: push rbp
0x2681: push rbx
0x2682: sub rsp,0x8
0x2686: mov rdi,qword ptr [rip+0x2059fb]
0x268d: call 0x5450
0x2692: test eax,eax
0x2694: je 0x26ac
0x2696: call 0x1330
0x269b: cmp byte ptr [rip+0x205a2e],0x0
0x26a2: mov rbx,rax
0x26a5: je 0x26c3
0x26a7: cmp dword ptr [rax],0x20
0x26aa: jne 0x26c3
0x26ac: mov rdi,qword ptr [rip+0x205a0d]
0x26b3: call 0x5450
0x26b8: test eax,eax
0x26ba: jne 0x2702
0x26bc: add rsp,0x8
0x26c0: pop rbx
0x26c1: pop rbp
0x26c2: ret
0x26c3: lea rsi,[rip+0x35a6]
0x26ca: xor edi,edi
0x26cc: mov edx,0x5
0x26d1: call 0x13c0
0x26d6: mov rdi,qword ptr [rip+0x2059fb]
0x26dd: mov rbp,rax
0x26e0: test rdi,rdi
0x26e3: je 0x270d
0x26e5: call 0x48f0
0x26ea: mov esi,dword ptr [rbx]
0x26ec: lea rdx,[rip+0x3589]
0x26f3: mov rcx,rax
0x26f6: mov r8,rbp
0x26f9: xor edi,edi
0x26fb: xor eax,eax
0x26fd: call 0x1530
0x2702: mov edi,dword ptr [rip+0x205908]
0x2708: call 0x1350
0x270d: mov esi,dword ptr [rbx]
0x270f: lea rdx,[rip+0x356a]
0x2716: mov rcx,rax
0x2719: xor edi,edi
0x271b: xor eax,eax
0x271d: call 0x1530
0x2722: jmp 0x2702
0x2730: push r15
0x2732: push r14
0x2734: mov r14d,ecx
0x2737: push r13
0x2739: push r12
0x273b: mov r12,rdi
0x273e: push rbp
0x273f: push rbx
0x2740: mov rbp,rsi
0x2743: movapd xmm3,xmm0
0x2747: sub rsp,0x38
0x274b: movsd qword ptr [rsp+0x0],xmm0
0x2750: pxor xmm0,xmm0
0x2754: mov rax,qword ptr fs:0x28
0x275d: mov qword ptr [rsp+0x28],rax
0x2762: xor eax,eax
0x2764: ucomisd xmm0,xmm3
0x2768: ja 0x2880
0x276e: movsd xmm0,qword ptr [rsp+0x0]
0x2773: mov eax,edx
0x2775: lea r13,[rsp+0x1d]
0x277a: mov ecx,edx
0x277c: and eax,0x1
0x277f: shr ecx,0x1
0x2781: mov esi,0x2d25
0x2786: lea rdi,[r13+rax+0x1]
0x278b: and ecx,0x1
0x278e: mov eax,edx
0x2790: mov word ptr [rsp+0x1d],si
0x2795: shr eax,0x2
0x2798: mov ebx,0x1
0x279d: lea rsi,[rdi+rcx]
0x27a1: and eax,0x1
0x27a4: mov byte ptr [rdi],0x2b
0x27a7: movsd xmm1,qword ptr [rip+0x34b1]
0x27af: mov edi,0x2e2a
0x27b4: lea rcx,[rsi+rax]
0x27b8: mov eax,edx
0x27ba: and edx,0x10
0x27bd: shr eax,0x3
0x27c0: mov byte ptr [rsi],0x20
0x27c3: mov r15,0xffffffffffffffff
0x27ca: and eax,0x1
0x27cd: mov byte ptr [rcx],0x30
0x27d0: add rax,rcx
0x27d3: cmp edx,0x1
0x27d6: sbb edx,edx
0x27d8: mov word ptr [rax],di
0x27db: mov byte ptr [rax+0x2],0x2a
0x27df: and edx,0x20
0x27e2: mov byte ptr [rax+0x4],0x0
0x27e6: add edx,0x47
0x27e9: ucomisd xmm1,xmm0
0x27ed: mov byte ptr [rax+0x3],dl
0x27f0: mov eax,0xf
0x27f5: cmovbe ebx,eax
0x27f8: jmp 0x2803
0x2800: add ebx,0x1
0x2803: sub rsp,0x8
0x2807: mov rcx,r15
0x280a: mov edx,0x1
0x280f: push rbx
0x2810: mov r9d,r14d
0x2813: mov r8,r13
0x2816: mov rsi,rbp
0x2819: mov rdi,r12
0x281c: mov eax,0x1
0x2821: movsd xmm0,qword ptr [rsp+0x10]
0x2827: call 0x1300
0x282c: test eax,eax
0x282e: pop rdx
0x282f: pop rcx
0x2830: js 0x285a
0x2832: cmp ebx,0x10
0x2835: jg 0x285a
0x2837: movsxd rdx,eax
0x283a: cmp rdx,rbp
0x283d: jae 0x2800
0x283f: xor esi,esi
0x2841: mov rdi,r12
0x2844: mov dword ptr [rsp+0xc],eax
0x2848: call 0x1380
0x284d: ucomisd xmm0,qword ptr [rsp+0x0]
0x2852: jp 0x2800
0x2854: mov eax,dword ptr [rsp+0xc]
0x2858: jne 0x2800
0x285a: mov rsi,qword ptr [rsp+0x28]
0x285f: xor rsi,qword ptr fs:0x28
0x2868: jne 0x2891
0x286a: add rsp,0x38
0x286e: pop rbx
0x286f: pop rbp
0x2870: pop r12
0x2872: pop r13
0x2874: pop r14
0x2876: pop r15
0x2878: ret
0x2880: movapd xmm0,xmm3
0x2884: xorpd xmm0,xmmword ptr [rip+0x3404]
0x288c: jmp 0x2773
0x2891: call 0x13f0
0x28a0: push r15
0x28a2: pxor xmm4,xmm4
0x28a6: push r14
0x28a8: push r13
0x28aa: mov r15d,ecx
0x28ad: push r12
0x28af: push rbp
0x28b0: mov r12,rdi
0x28b3: push rbx
0x28b4: movaps xmm3,xmm0
0x28b7: cvtss2sd xmm4,xmm0
0x28bb: mov rbp,rsi
0x28be: sub rsp,0x38
0x28c2: movss dword ptr [rsp+0xc],xmm0
0x28c8: pxor xmm0,xmm0
0x28cc: mov rax,qword ptr fs:0x28
0x28d5: mov qword ptr [rsp+0x28],rax
0x28da: xor eax,eax
0x28dc: movsd qword ptr [rsp+0x0],xmm4
0x28e1: ucomiss xmm0,xmm3
0x28e4: ja 0x29f8
0x28ea: movss xmm0,dword ptr [rsp+0xc]
0x28f0: mov eax,edx
0x28f2: lea r13,[rsp+0x1d]
0x28f7: mov ecx,edx
0x28f9: and eax,0x1
0x28fc: shr ecx,0x1
0x28fe: mov esi,0x2d25
0x2903: lea rdi,[r13+rax+0x1]
0x2908: and ecx,0x1
0x290b: mov eax,edx
0x290d: mov word ptr [rsp+0x1d],si
0x2912: shr eax,0x2
0x2915: mov r14,0xffffffffffffffff
0x291c: lea rsi,[rdi+rcx]
0x2920: and eax,0x1
0x2923: mov byte ptr [rdi],0x2b
0x2926: movss xmm1,dword ptr [rip+0x3326]
0x292e: mov edi,0x2e2a
0x2933: lea rcx,[rsi+rax]
0x2937: mov eax,edx
0x2939: and edx,0x10
0x293c: shr eax,0x3
0x293f: mov byte ptr [rsi],0x20
0x2942: and eax,0x1
0x2945: mov byte ptr [rcx],0x30
0x2948: add rax,rcx
0x294b: cmp edx,0x1
0x294e: sbb edx,edx
0x2950: xor ebx,ebx
0x2952: mov word ptr [rax],di
0x2955: and edx,0x20
0x2958: mov byte ptr [rax+0x2],0x2a
0x295c: mov byte ptr [rax+0x4],0x0
0x2960: add edx,0x47
0x2963: ucomiss xmm1,xmm0
0x2966: mov byte ptr [rax+0x3],dl
0x2969: setbe bl
0x296c: lea ebx,[rbx+rbx*4+0x1]
0x2970: jmp 0x297b
0x2978: add ebx,0x1
0x297b: sub rsp,0x8
0x297f: mov rcx,r14
0x2982: mov edx,0x1
0x2987: push rbx
0x2988: mov r9d,r15d
0x298b: mov r8,r13
0x298e: mov rsi,rbp
0x2991: mov rdi,r12
0x2994: mov eax,0x1
0x2999: movsd xmm0,qword ptr [rsp+0x10]
0x299f: call 0x1300
0x29a4: test eax,eax
0x29a6: pop rdx
0x29a7: pop rcx
0x29a8: js 0x29d2
0x29aa: cmp ebx,0x8
0x29ad: jg 0x29d2
0x29af: movsxd rdx,eax
0x29b2: cmp rdx,rbp
0x29b5: jae 0x2978
0x29b7: xor esi,esi
0x29b9: mov rdi,r12
0x29bc: mov dword ptr [rsp+0x8],eax
0x29c0: call 0x1440
0x29c5: ucomiss xmm0,dword ptr [rsp+0xc]
0x29ca: jp 0x2978
0x29cc: mov eax,dword ptr [rsp+0x8]
0x29d0: jne 0x2978
0x29d2: mov rsi,qword ptr [rsp+0x28]
0x29d7: xor rsi,qword ptr fs:0x28
0x29e0: jne 0x2a07
0x29e2: add rsp,0x38
0x29e6: pop rbx
0x29e7: pop rbp
0x29e8: pop r12
0x29ea: pop r13
0x29ec: pop r14
0x29ee: pop r15
0x29f0: ret
0x29f8: movaps xmm0,xmm3
0x29fb: xorps xmm0,xmmword ptr [rip+0x329e]
0x2a02: jmp 0x28f0
0x2a07: call 0x13f0
0x2a10: push r15
0x2a12: push r14
0x2a14: fldz
0x2a16: push r13
0x2a18: push r12
0x2a1a: mov r14d,ecx
0x2a1d: push rbp
0x2a1e: push rbx
0x2a1f: mov r12,rdi
0x2a22: mov rbp,rsi
0x2a25: sub rsp,0x38
0x2a29: fld tbyte ptr [rsp+0x70]
0x2a2d: fxch st(1)
0x2a2f: mov rax,qword ptr fs:0x28
0x2a38: mov qword ptr [rsp+0x28],rax
0x2a3d: xor eax,eax
0x2a3f: fucomip st(1)
0x2a41: ja 0x2b50
0x2a47: fstp st(0)
0x2a49: fld tbyte ptr [rsp+0x70]
0x2a4d: mov eax,0x2d25
0x2a52: lea r13,[rsp+0x1d]
0x2a57: mov ecx,edx
0x2a59: mov word ptr [rsp+0x1d],ax
0x2a5e: mov eax,edx
0x2a60: shr ecx,0x1
0x2a62: and eax,0x1
0x2a65: and ecx,0x1
0x2a68: mov ebx,0x1
0x2a6d: lea rdi,[r13+rax+0x1]
0x2a72: mov eax,edx
0x2a74: mov r15,0xffffffffffffffff
0x2a7b: shr eax,0x2
0x2a7e: lea rsi,[rdi+rcx]
0x2a82: and eax,0x1
0x2a85: mov byte ptr [rdi],0x2b
0x2a88: lea rcx,[rsi+rax]
0x2a8c: mov eax,edx
0x2a8e: and edx,0x10
0x2a91: fld tbyte ptr [rip+0x3219]
0x2a97: shr eax,0x3
0x2a9a: mov byte ptr [rsi],0x20
0x2a9d: mov byte ptr [rcx],0x30
0x2aa0: and eax,0x1
0x2aa3: add rax,rcx
0x2aa6: cmp edx,0x1
0x2aa9: sbb edx,edx
0x2aab: mov dword ptr [rax],0x4c2a2e2a
0x2ab1: mov byte ptr [rax+0x5],0x0
0x2ab5: and edx,0x20
0x2ab8: add edx,0x47
0x2abb: mov byte ptr [rax+0x4],dl
0x2abe: mov eax,0x12
0x2ac3: fucomip st(1)
0x2ac5: fstp st(0)
0x2ac7: cmovbe ebx,eax
0x2aca: jmp 0x2ad3
0x2ad0: add ebx,0x1
0x2ad3: push qword ptr [rsp+0x78]
0x2ad7: push qword ptr [rsp+0x78]
0x2adb: xor eax,eax
0x2add: mov r9d,r14d
0x2ae0: mov r8,r13
0x2ae3: mov rcx,r15
0x2ae6: sub rsp,0x8
0x2aea: mov edx,0x1
0x2aef: mov rsi,rbp
0x2af2: push rbx
0x2af3: mov rdi,r12
0x2af6: call 0x1300
0x2afb: add rsp,0x20
0x2aff: test eax,eax
0x2b01: js 0x2b30
0x2b03: cmp ebx,0x14
0x2b06: jg 0x2b30
0x2b08: movsxd rdx,eax
0x2b0b: cmp rdx,rbp
0x2b0e: jae 0x2ad0
0x2b10: xor esi,esi
0x2b12: mov rdi,r12
0x2b15: mov dword ptr [rsp+0xc],eax
0x2b19: call 0x1520
0x2b1e: fld tbyte ptr [rsp+0x70]
0x2b22: fxch st(1)
0x2b24: fucomip st(1)
0x2b26: fstp st(0)
0x2b28: jp 0x2ad0
0x2b2a: mov eax,dword ptr [rsp+0xc]
0x2b2e: jne 0x2ad0
0x2b30: mov rsi,qword ptr [rsp+0x28]
0x2b35: xor rsi,qword ptr fs:0x28
0x2b3e: jne 0x2b57
0x2b40: add rsp,0x38
0x2b44: pop rbx
0x2b45: pop rbp
0x2b46: pop r12
0x2b48: pop r13
0x2b4a: pop r14
0x2b4c: pop r15
0x2b4e: ret
0x2b50: fchs
0x2b52: jmp 0x2a4d
0x2b57: call 0x13f0
0x2b7a: movaps xmmword ptr [rsp+0x60],xmm0
0x2b7f: movaps xmmword ptr [rsp+0x70],xmm1
0x2b84: movaps xmmword ptr [rsp+0x80],xmm2
0x2b8c: movaps xmmword ptr [rsp+0x90],xmm3
0x2b94: movaps xmmword ptr [rsp+0xa0],xmm4
0x2b9c: movaps xmmword ptr [rsp+0xb0],xmm5
0x2ba4: movaps xmmword ptr [rsp+0xc0],xmm6
0x2bac: movaps xmmword ptr [rsp+0xd0],xmm7
0x2c80: xor edi,edi
0x2c82: call 0x1560
0x2c95: jmp 0x2bd9
0x2c9a: call 0x13f0
0x2ca0: push r14
0x2ca2: push r13
0x2ca4: mov r14,r8
0x2ca7: push r12
0x2ca9: push rbp
0x2caa: mov r12,rdx
0x2cad: push rbx
0x2cae: mov r13,rcx
0x2cb1: sub rsp,0xd0
0x2cb8: test al,al
0x2cba: mov rbp,qword ptr [rsp+0x100]
0x2cc2: je 0x2cfb
0x2cc4: movaps xmmword ptr [rsp+0x50],xmm0
0x2cc9: movaps xmmword ptr [rsp+0x60],xmm1
0x2cce: movaps xmmword ptr [rsp+0x70],xmm2
0x2cd3: movaps xmmword ptr [rsp+0x80],xmm3
0x2cdb: movaps xmmword ptr [rsp+0x90],xmm4
0x2ce3: movaps xmmword ptr [rsp+0xa0],xmm5
0x2ceb: movaps xmmword ptr [rsp+0xb0],xmm6
0x2cf3: movaps xmmword ptr [rsp+0xc0],xmm7
0x2cfb: mov rax,qword ptr fs:0x28
0x2d04: mov qword ptr [rsp+0x18],rax
0x2d09: xor eax,eax
0x2d0b: lea rdx,[rip+0x352f]
0x2d12: lea rax,[rip+0x2fa7]
0x2d19: test r9b,r9b
0x2d1c: lea rcx,[rip+0x204e7d]
0x2d23: cmove rdx,rax
0x2d27: xor r8d,r8d
0x2d2a: mov ebx,dword ptr [rip+0x205370]
0x2d30: mov dword ptr [rip+0x205366],0x1
0x2d3a: call 0x1400
0x2d3f: cmp eax,0xffffffff
0x2d42: je 0x2da8
0x2d44: cmp eax,0x68
0x2d47: je 0x2dd0
0x2d4d: cmp eax,0x76
0x2d50: jne 0x2da0
0x2d52: lea rax,[rsp+0x108]
0x2d5a: mov rdi,qword ptr [rip+0x205327]
0x2d61: mov r8,rsp
0x2d64: mov rcx,r14
0x2d67: mov rdx,r13
0x2d6a: mov rsi,r12
0x2d6d: mov qword ptr [rsp+0x8],rax
0x2d72: lea rax,[rsp+0x20]
0x2d77: mov dword ptr [rsp+0x0],0x30
0x2d7e: mov dword ptr [rsp+0x4],0x30
0x2d86: mov qword ptr [rsp+0x10],rax
0x2d8b: call 0x4f50
0x2d90: xor edi,edi
0x2d92: call 0x1560
0x2da0: mov edi,dword ptr [rip+0x20526a]
0x2da6: call rbp
0x2da8: mov rax,qword ptr [rsp+0x18]
0x2dad: xor rax,qword ptr fs:0x28
0x2db6: mov dword ptr [rip+0x2052e4],ebx
0x2dbc: jne 0x2dd6
0x2dbe: add rsp,0xd0
0x2dc5: pop rbx
0x2dc6: pop rbp
0x2dc7: pop r12
0x2dc9: pop r13
0x2dcb: pop r14
0x2dcd: ret
0x2dd0: xor edi,edi
0x2dd2: call rbp
0x2dd4: jmp 0x2da8
0x2dd6: call 0x13f0
0x2e80: push rbp
0x2e81: push rbx
0x2e82: mov rbp,rdi
0x2e85: mov ebx,esi
0x2e87: sub rsp,0x8
0x2e8b: call 0x5530
0x2e90: movzx edx,byte ptr [rax]
0x2e93: and edx,0xffffffdf
0x2e96: cmp dl,0x55
0x2e99: je 0x2f10
0x2e9b: cmp dl,0x47
0x2e9e: je 0x2ec0
0x2ea0: lea rax,[rip+0x2e7c]
0x2ea7: lea rdx,[rip+0x2e77]
0x2eae: cmp ebx,0x9
0x2eb1: cmovne rax,rdx
0x2eb5: add rsp,0x8
0x2eb9: pop rbx
0x2eba: pop rbp
0x2ebb: ret
0x2ec0: movzx edx,byte ptr [rax+0x1]
0x2ec4: and edx,0xffffffdf
0x2ec7: cmp dl,0x42
0x2eca: jne 0x2ea0
0x2ecc: cmp byte ptr [rax+0x2],0x31
0x2ed0: jne 0x2ea0
0x2ed2: cmp byte ptr [rax+0x3],0x38
0x2ed6: jne 0x2ea0
0x2ed8: cmp byte ptr [rax+0x4],0x30
0x2edc: jne 0x2ea0
0x2ede: cmp byte ptr [rax+0x5],0x33
0x2ee2: jne 0x2ea0
0x2ee4: cmp byte ptr [rax+0x6],0x30
0x2ee8: jne 0x2ea0
0x2eea: cmp byte ptr [rax+0x7],0x0
0x2eee: jne 0x2ea0
0x2ef0: cmp byte ptr [rbp],0x60
0x2ef4: lea rax,[rip+0x2e21]
0x2efb: lea rdx,[rip+0x2e1e]
0x2f02: cmovne rax,rdx
0x2f06: add rsp,0x8
0x2f0a: pop rbx
0x2f0b: pop rbp
0x2f0c: ret
0x2f10: movzx edx,byte ptr [rax+0x1]
0x2f14: and edx,0xffffffdf
0x2f17: cmp dl,0x54
0x2f1a: jne 0x2ea0
0x2f1c: movzx edx,byte ptr [rax+0x2]
0x2f20: and edx,0xffffffdf
0x2f23: cmp dl,0x46
0x2f26: jne 0x2ea0
0x2f2c: cmp byte ptr [rax+0x3],0x2d
0x2f30: jne 0x2ea0
0x2f36: cmp byte ptr [rax+0x4],0x38
0x2f3a: jne 0x2ea0
0x2f40: cmp byte ptr [rax+0x5],0x0
0x2f44: jne 0x2ea0
0x2f4a: cmp byte ptr [rbp],0x60
0x2f4e: lea rax,[rip+0x2dbf]
0x2f55: lea rdx,[rip+0x2dbc]
0x2f5c: cmovne rax,rdx
0x2f60: add rsp,0x8
0x2f64: pop rbx
0x2f65: pop rbp
0x2f66: ret
0x2f70: push r15
0x2f72: push r14
0x2f74: mov r15d,r8d
0x2f77: push r13
0x2f79: push r12
0x2f7b: mov r14,rdi
0x2f7e: push rbp
0x2f7f: push rbx
0x2f80: mov ebx,r9d
0x2f83: mov r13,rsi
0x2f86: mov rbp,rcx
0x2f89: and ebx,0x2
0x2f8c: sub rsp,0xb8
0x2f93: mov rax,qword ptr [rsp+0xf0]
0x2f9b: mov qword ptr [rsp+0x10],rdx
0x2fa0: mov dword ptr [rsp+0x8],r8d
0x2fa5: mov dword ptr [rsp+0x78],r9d
0x2faa: mov qword ptr [rsp+0x20],rax
0x2faf: mov rax,qword ptr [rsp+0xf8]
0x2fb7: mov qword ptr [rsp+0x68],rax
0x2fbc: mov rax,qword ptr [rsp+0x100]
0x2fc4: mov qword ptr [rsp+0x60],rax
0x2fc9: mov rax,qword ptr fs:0x28
0x2fd2: mov qword ptr [rsp+0xa8],rax
0x2fda: xor eax,eax
0x2fdc: call 0x13d0
0x2fe1: cmp r15d,0xa
0x2fe5: mov qword ptr [rsp+0x58],rax
0x2fea: ja 0x419f
0x2ff0: lea rcx,[rip+0x2d89]
0x2ff7: mov edx,r15d
0x2ffa: movsxd rax,dword ptr [rcx+rdx*4]
0x2ffe: add rax,rcx
0x3001: jmp rax
0x3003: mov byte ptr [rsp+0xe],0x1
0x3008: mov byte ptr [rsp+0x7c],0x0
0x300d: xor r12d,r12d
0x3010: mov qword ptr [rsp+0x50],0x0
0x3019: mov byte ptr [rsp+0xf],0x1
0x301e: mov byte ptr [rsp+0xd],0x0
0x3023: lea rax,[rip+0x2cfb]
0x302a: mov qword ptr [rsp+0x18],0x1
0x3033: xor r15d,r15d
0x3036: mov dword ptr [rsp+0x8],0x2
0x303e: mov qword ptr [rsp+0x48],rax
0x3043: xor r11d,r11d
0x3046: mov rax,rbp
0x3049: mov r8d,r12d
0x304c: mov rbp,r11
0x304f: mov r11,rax
0x3052: nop word ptr [rax+rax]
0x3058: cmp r11,rbp
0x305b: setne r12b
0x305f: cmp r11,0xffffffffffffffff
0x3063: jne 0x3072
0x3065: mov rax,qword ptr [rsp+0x10]
0x306a: cmp byte ptr [rax+rbp],0x0
0x306e: setne r12b
0x3072: test r12b,r12b
0x3075: je 0x36d0
0x307b: cmp dword ptr [rsp+0x8],0x2
0x3080: mov rdi,qword ptr [rsp+0x10]
0x3085: lea r9,[rdi+rbp]
0x3089: setne al
0x308c: and al,byte ptr [rsp+0xd]
0x3090: mov r10d,eax
0x3093: je 0x3140
0x3099: mov rax,qword ptr [rsp+0x18]
0x309e: test rax,rax
0x30a1: je 0x34d0
0x30a7: cmp r11,0xffffffffffffffff
0x30ab: lea rbx,[rbp+rax]
0x30b0: jne 0x30e0
0x30b2: cmp rax,0x1
0x30b6: jbe 0x30e0
0x30b8: mov byte ptr [rsp+0x38],r8b
0x30bd: mov byte ptr [rsp+0x30],r10b
0x30c2: mov qword ptr [rsp+0x28],r9
0x30c7: call 0x13e0
0x30cc: movzx r8d,byte ptr [rsp+0x38]
0x30d2: movzx r10d,byte ptr [rsp+0x30]
0x30d8: mov r11,rax
0x30db: mov r9,qword ptr [rsp+0x28]
0x30e0: cmp rbx,r11
0x30e3: mov byte ptr [rsp+0x28],r10b
0x30e8: ja 0x36a0
0x30ee: mov rdx,qword ptr [rsp+0x18]
0x30f3: mov rsi,qword ptr [rsp+0x48]
0x30f8: mov rdi,r9
0x30fb: mov qword ptr [rsp+0x40],r11
0x3100: mov byte ptr [rsp+0x38],r8b
0x3105: mov qword ptr [rsp+0x30],r9
0x310a: call 0x1460
0x310f: test eax,eax
0x3111: mov r9,qword ptr [rsp+0x30]
0x3116: movzx r8d,byte ptr [rsp+0x38]
0x311c: mov r11,qword ptr [rsp+0x40]
0x3121: jne 0x36a0
0x3127: cmp byte ptr [rsp+0xf],0x0
0x312c: movzx r10d,byte ptr [rsp+0x28]
0x3132: jne 0x40b5
0x3138: nop dword ptr [rax+rax]
0x3140: movzx ebx,byte ptr [r9]
0x3144: cmp bl,0x7e
0x3147: ja 0x3468
0x314d: lea rcx,[rip+0x2c58]
0x3154: movzx edx,bl
0x3157: movsxd rax,dword ptr [rcx+rdx*4]
0x315b: add rax,rcx
0x315e: jmp rax
0x3160: xor r10d,r10d
0x3163: cmp r11,0x1
0x3167: setne al
0x316a: cmp r11,0xffffffffffffffff
0x316e: jne 0x317c
0x3170: mov rax,qword ptr [rsp+0x10]
0x3175: cmp byte ptr [rax+0x1],0x0
0x3179: setne al
0x317c: cmp dword ptr [rsp+0x8],0x2
0x3181: sete dl
0x3184: test al,al
0x3186: je 0x33d8
0x318c: xor r12d,r12d
0x318f: xor eax,eax
0x3191: nop dword ptr [rax]
0x3198: cmp byte ptr [rsp+0xd],0x1
0x319d: jne 0x32b2
0x31a3: test dl,dl
0x31a5: jne 0x32b2
0x31ab: mov rsi,qword ptr [rsp+0x20]
0x31b0: test rsi,rsi
0x31b3: je 0x31c9
0x31b5: mov edx,ebx
0x31b7: shr dl,0x5
0x31ba: movzx edx,dl
0x31bd: mov edx,dword ptr [rsi+rdx*4]
0x31c0: bt edx,ebx
0x31c3: jb 0x3313
0x31c9: test r10b,r10b
0x31cc: jne 0x3313
0x31d2: xor eax,0x1
0x31d5: add rbp,0x1
0x31d9: and eax,r8d
0x31dc: test al,al
0x31de: je 0x3200
0x31e0: cmp r13,r15
0x31e3: jbe 0x31ea
0x31e5: mov byte ptr [r14+r15],0x27
0x31ea: lea rax,[r15+0x1]
0x31ee: cmp r13,rax
0x31f1: jbe 0x31f9
0x31f3: mov byte ptr [r14+r15+0x1],0x27
0x31f9: add r15,0x2
0x31fd: xor r8d,r8d
0x3200: cmp r15,r13
0x3203: jae 0x3209
0x3205: mov byte ptr [r14+r15],bl
0x3209: movzx edi,byte ptr [rsp+0xe]
0x320e: add r15,0x1
0x3212: mov eax,0x0
0x3217: test r12b,r12b
0x321a: cmove edi,eax
0x321d: mov byte ptr [rsp+0xe],dil
0x3222: jmp 0x3058
0x3230: xor r10d,r10d
0x3233: mov eax,dword ptr [rsp+0x8]
0x3237: cmp eax,0x2
0x323a: je 0x37f8
0x3240: cmp eax,0x5
0x3243: je 0x37b8
0x3249: cmp eax,0x2
0x324c: mov ebx,0x3f
0x3251: sete dl
0x3254: xor r12d,r12d
0x3257: xor eax,eax
0x3259: jmp 0x3198
0x3260: xor r10d,r10d
0x3263: cmp dword ptr [rsp+0x8],0x2
0x3268: je 0x3770
0x326e: mov byte ptr [rsp+0x7c],r12b
0x3273: xor edx,edx
0x3275: xor eax,eax
0x3277: mov ebx,0x27
0x327c: jmp 0x3198
0x3281: nop dword ptr [rax]
0x3288: mov edx,0x9
0x328d: mov ebx,0x74
0x3292: cmp dword ptr [rsp+0x8],0x2
0x3297: sete al
0x329a: and al,byte ptr [rsp+0xf]
0x329e: jne 0x33ee
0x32a4: cmp byte ptr [rsp+0xd],0x0
0x32a9: jne 0x3310
0x32ab: mov ebx,edx
0x32ad: xor r12d,r12d
0x32b0: xor eax,eax
0x32b2: cmp byte ptr [rsp+0xf],0x0
0x32b7: jne 0x31ab
0x32bd: jmp 0x31c9
0x32c2: nop word ptr [rax+rax]
0x32c8: mov edx,0x8
0x32cd: mov ebx,0x62
0x32d2: jmp 0x32a4
0x32d4: nop dword ptr [rax]
0x32d8: cmp dword ptr [rsp+0x8],0x2
0x32dd: je 0x36b0
0x32e3: cmp byte ptr [rsp+0xd],0x0
0x32e8: je 0x3500
0x32ee: cmp byte ptr [rsp+0xf],0x0
0x32f3: je 0x3500
0x32f9: cmp qword ptr [rsp+0x18],0x0
0x32ff: jne 0x36bb
0x3305: mov ebx,0x5c
0x330a: nop word ptr [rax+rax]
0x3310: xor r12d,r12d
0x3313: cmp dword ptr [rsp+0x8],0x2
0x3318: sete dl
0x331b: cmp byte ptr [rsp+0xf],0x0
0x3320: mov eax,edx
0x3322: jne 0x3b78
0x3328: mov eax,r8d
0x332b: xor eax,0x1
0x332e: and al,dl
0x3330: je 0x3361
0x3332: cmp r13,r15
0x3335: jbe 0x333c
0x3337: mov byte ptr [r14+r15],0x27
0x333c: lea rdx,[r15+0x1]
0x3340: cmp r13,rdx
0x3343: jbe 0x334b
0x3345: mov byte ptr [r14+r15+0x1],0x24
0x334b: lea rdx,[r15+0x2]
0x334f: cmp r13,rdx
0x3352: jbe 0x335a
0x3354: mov byte ptr [r14+r15+0x2],0x27
0x335a: add r15,0x3
0x335e: mov r8d,eax
0x3361: cmp r13,r15
0x3364: jbe 0x336b
0x3366: mov byte ptr [r14+r15],0x5c
0x336b: add r15,0x1
0x336f: add rbp,0x1
0x3373: jmp 0x3200
0x3380: cmp byte ptr [rsp+0xd],0x0
0x3385: jne 0x3553
0x338b: xor edx,edx
0x338d: test byte ptr [rsp+0x78],0x1
0x3392: je 0x32ab
0x3398: add rbp,0x1
0x339c: jmp 0x3058
0x33a1: nop dword ptr [rax]
0x33a8: cmp dword ptr [rsp+0x8],0x2
0x33ad: sete dl
0x33b0: xor eax,eax
0x33b2: jmp 0x3198
0x33b7: nop word ptr [rax+rax]
0x33c0: mov edx,0x7
0x33c5: mov ebx,0x61
0x33ca: jmp 0x32a4
0x33cf: nop
0x33d0: cmp dword ptr [rsp+0x8],0x2
0x33d5: sete dl
0x33d8: test rbp,rbp
0x33db: jne 0x318c
0x33e1: movzx eax,byte ptr [rsp+0xf]
0x33e6: and al,dl
0x33e8: je 0x3198
0x33ee: mov rbp,r11
0x33f1: mov dword ptr [rsp+0x8],0x2
0x33f9: jmp 0x3af9
0x3400: cmp dword ptr [rsp+0x8],0x2
0x3405: sete dl
0x3408: xor r12d,r12d
0x340b: jmp 0x33e1
0x3410: cmp dword ptr [rsp+0x8],0x2
0x3415: mov ebx,0x20
0x341a: sete dl
0x341d: jmp 0x33e1
0x3420: mov edx,0xd
0x3425: mov ebx,0x72
0x342a: jmp 0x3292
0x3430: mov edx,0xc
0x3435: mov ebx,0x66
0x343a: jmp 0x32a4
0x3440: mov edx,0xb
0x3445: mov ebx,0x76
0x344a: jmp 0x32a4
0x3450: mov edx,0xa
0x3455: mov ebx,0x6e
0x345a: jmp 0x3292
0x3460: xor r10d,r10d
0x3463: nop dword ptr [rax+rax]
0x3468: cmp qword ptr [rsp+0x58],0x1
0x346e: jne 0x3818
0x3474: mov qword ptr [rsp+0x38],r11
0x3479: mov byte ptr [rsp+0x30],r8b
0x347e: mov byte ptr [rsp+0x28],r10b
0x3483: call 0x15b0
0x3488: mov rcx,qword ptr [rax]
0x348b: movzx edx,bl
0x348e: movzx r10d,byte ptr [rsp+0x28]
0x3494: movzx r8d,byte ptr [rsp+0x30]
0x349a: mov r11,qword ptr [rsp+0x38]
0x349f: mov edi,0x1
0x34a4: movzx eax,word ptr [rcx+rdx*2]
0x34a8: and ax,0x4000
0x34ac: setne r12b
0x34b0: sete al
0x34b3: and al,byte ptr [rsp+0xd]
0x34b7: test al,al
0x34b9: jne 0x3e51
0x34bf: cmp dword ptr [rsp+0x8],0x2
0x34c4: sete dl
0x34c7: jmp 0x3198
0x34d0: movzx ebx,byte ptr [r9]
0x34d4: cmp bl,0x7e
0x34d7: ja 0x3460
0x34d9: lea rcx,[rip+0x2ac8]
0x34e0: movzx edx,bl
0x34e3: movsxd rax,dword ptr [rcx+rdx*4]
0x34e7: add rax,rcx
0x34ea: jmp rax
0x34f0: xor r10d,r10d
0x34f3: cmp byte ptr [rsp+0xd],0x0
0x34f8: jne 0x32ee
0x34fe: nop
0x3500: mov edx,0x5c
0x3505: mov ebx,0x5c
0x350a: jmp 0x32a4
0x3510: mov edx,0xc
0x3515: xor r10d,r10d
0x3518: mov ebx,0x66
0x351d: jmp 0x32a4
0x3522: nop word ptr [rax+rax]
0x3528: mov edx,0xa
0x352d: xor r10d,r10d
0x3530: mov ebx,0x6e
0x3535: jmp 0x3292
0x353a: nop word ptr [rax+rax]
0x3540: mov ebx,0x61
0x3545: jmp 0x3310
0x354a: nop word ptr [rax+rax]
0x3550: xor r10d,r10d
0x3553: cmp dword ptr [rsp+0x8],0x2
0x3558: sete dl
0x355b: cmp byte ptr [rsp+0xf],0x0
0x3560: jne 0x40fa
0x3566: mov eax,r8d
0x3569: mov rcx,r15
0x356c: xor eax,0x1
0x356f: and al,dl
0x3571: je 0x35a0
0x3573: cmp r13,r15
0x3576: jbe 0x357d
0x3578: mov byte ptr [r14+r15],0x27
0x357d: lea rcx,[r15+0x1]
0x3581: cmp r13,rcx
0x3584: jbe 0x358c
0x3586: mov byte ptr [r14+r15+0x1],0x24
0x358c: lea rcx,[r15+0x2]
0x3590: cmp r13,rcx
0x3593: ja 0x3bc9
0x3599: lea rcx,[r15+0x3]
0x359d: mov r8d,eax
0x35a0: cmp r13,rcx
0x35a3: jbe 0x35aa
0x35a5: mov byte ptr [r14+rcx],0x5c
0x35aa: cmp dword ptr [rsp+0x8],0x2
0x35af: lea r15,[rcx+0x1]
0x35b3: je 0x3bb9
0x35b9: lea rax,[rbp+0x1]
0x35bd: cmp rax,r11
0x35c0: jae 0x35db
0x35c2: mov rax,qword ptr [rsp+0x10]
0x35c7: movzx eax,byte ptr [rax+rbp+0x1]
0x35cc: mov byte ptr [rsp+0x28],al
0x35d0: sub eax,0x30
0x35d3: cmp al,0x9
0x35d5: jbe 0x3e09
0x35db: mov eax,r12d
0x35de: mov ebx,0x30
0x35e3: xor r12d,r12d
0x35e6: jmp 0x3198
0x35f0: cmp dword ptr [rsp+0x8],0x2
0x35f5: mov r12d,r10d
0x35f8: sete dl
0x35fb: xor r10d,r10d
0x35fe: xor eax,eax
0x3600: jmp 0x3198
0x3605: nop dword ptr [rax]
0x3608: cmp dword ptr [rsp+0x8],0x2
0x360d: sete dl
0x3610: xor r10d,r10d
0x3613: jmp 0x33d8
0x3618: nop dword ptr [rax+rax]
0x3620: cmp dword ptr [rsp+0x8],0x2
0x3625: sete dl
0x3628: xor r10d,r10d
0x362b: xor r12d,r12d
0x362e: jmp 0x33e1
0x3633: nop dword ptr [rax+rax]
0x3638: cmp dword ptr [rsp+0x8],0x2
0x363d: mov r12d,r10d
0x3640: mov ebx,0x20
0x3645: sete dl
0x3648: xor r10d,r10d
0x364b: jmp 0x33e1
0x3650: mov edx,0xd
0x3655: xor r10d,r10d
0x3658: mov ebx,0x72
0x365d: jmp 0x3292
0x3662: nop word ptr [rax+rax]
0x3668: mov ebx,0x76
0x366d: jmp 0x3310
0x3672: nop word ptr [rax+rax]
0x3678: mov edx,0x9
0x367d: xor r10d,r10d
0x3680: mov ebx,0x74
0x3685: jmp 0x3292
0x368a: nop word ptr [rax+rax]
0x3690: mov ebx,0x62
0x3695: jmp 0x3310
0x369a: nop word ptr [rax+rax]
0x36a0: xor r10d,r10d
0x36a3: jmp 0x3140
0x36b0: cmp byte ptr [rsp+0xf],0x0
0x36b5: jne 0x4020
0x36bb: add rbp,0x1
0x36bf: mov eax,r8d
0x36c2: xor r12d,r12d
0x36c5: mov ebx,0x5c
0x36ca: jmp 0x31dc
0x36d0: cmp dword ptr [rsp+0x8],0x2
0x36d5: movzx ebx,byte ptr [rsp+0xf]
0x36da: mov r12d,r8d
0x36dd: mov rbp,r11
0x36e0: sete dl
0x36e3: mov eax,ebx
0x36e5: test r15,r15
0x36e8: sete cl
0x36eb: and eax,edx
0x36ed: and al,cl
0x36ef: jne 0x4156
0x36f5: mov eax,ebx
0x36f7: xor eax,0x1
0x36fa: and dl,al
0x36fc: je 0x406c
0x3702: cmp byte ptr [rsp+0x7c],0x0
0x3707: je 0x406a
0x370d: cmp byte ptr [rsp+0xe],0x0
0x3712: jne 0x410d
0x3718: test r13,r13
0x371b: sete al
0x371e: cmp qword ptr [rsp+0x50],0x0
0x3724: setne dl
0x3727: and al,dl
0x3729: je 0x414c
0x372f: mov r13,qword ptr [rsp+0x50]
0x3734: lea rbx,[rip+0x25ea]
0x373b: mov byte ptr [r14],0x27
0x373f: mov dword ptr [rsp+0x8],0x2
0x3747: mov r15d,0x1
0x374d: mov qword ptr [rsp+0x18],0x1
0x3756: mov byte ptr [rsp+0xf],0x0
0x375b: mov qword ptr [rsp+0x48],rbx
0x3760: mov byte ptr [rsp+0x7c],al
0x3764: jmp 0x3043
0x3770: cmp byte ptr [rsp+0xf],0x0
0x3775: jne 0x4020
0x377b: test r13,r13
0x377e: je 0x3b80
0x3784: xor edx,edx
0x3786: cmp qword ptr [rsp+0x50],0x0
0x378c: jne 0x3b80
0x3792: mov qword ptr [rsp+0x50],r13
0x3797: add r15,0x3
0x379b: xor eax,eax
0x379d: mov byte ptr [rsp+0x7c],r12b
0x37a2: xor r8d,r8d
0x37a5: mov r13,rdx
0x37a8: mov ebx,0x27
0x37ad: jmp 0x31c9
0x37b8: test byte ptr [rsp+0x78],0x4
0x37bd: je 0x37e0
0x37bf: lea rcx,[rbp+0x2]
0x37c3: cmp rcx,r11
0x37c6: jae 0x37e0
0x37c8: mov rax,qword ptr [rsp+0x10]
0x37cd: cmp byte ptr [rax+rbp+0x1],0x3f
0x37d2: je 0x3f62
0x37d8: nop dword ptr [rax+rax]
0x37e0: xor edx,edx
0x37e2: xor r12d,r12d
0x37e5: xor eax,eax
0x37e7: mov ebx,0x3f
0x37ec: jmp 0x3198
0x37f8: cmp byte ptr [rsp+0xf],0x0
0x37fd: jne 0x4020
0x3803: xor r12d,r12d
0x3806: xor eax,eax
0x3808: mov ebx,0x3f
0x380d: jmp 0x31c9
0x3818: lea rax,[rsp+0xa0]
0x3820: cmp r11,0xffffffffffffffff
0x3824: mov qword ptr [rsp+0xa0],0x0
0x3830: mov qword ptr [rsp+0x28],rax
0x3835: jne 0x3864
0x3837: mov rdi,qword ptr [rsp+0x10]
0x383c: mov byte ptr [rsp+0x40],r8b
0x3841: mov byte ptr [rsp+0x38],r10b
0x3846: mov qword ptr [rsp+0x30],r9
0x384b: call 0x13e0
0x3850: movzx r8d,byte ptr [rsp+0x40]
0x3856: movzx r10d,byte ptr [rsp+0x38]
0x385c: mov r11,rax
0x385f: mov r9,qword ptr [rsp+0x30]
0x3864: lea rax,[rsp+0x9c]
0x386c: xor ecx,ecx
0x386e: mov byte ptr [rsp+0x7e],bl
0x3872: mov byte ptr [rsp+0x7d],r8b
0x3877: mov rbx,rcx
0x387a: mov qword ptr [rsp+0x88],r9
0x3882: mov qword ptr [rsp+0x38],rax
0x3887: mov byte ptr [rsp+0x7f],r10b
0x388c: mov qword ptr [rsp+0x80],r15
0x3894: mov qword ptr [rsp+0x40],r14
0x3899: mov qword ptr [rsp+0x70],r13
0x389e: mov qword ptr [rsp+0x30],r11
0x38a3: mov rax,qword ptr [rsp+0x10]
0x38a8: lea r14,[rbp+rbx]
0x38ad: mov rdx,qword ptr [rsp+0x30]
0x38b2: mov rcx,qword ptr [rsp+0x28]
0x38b7: mov rdi,qword ptr [rsp+0x38]
0x38bc: lea r13,[rax+r14]
0x38c0: sub rdx,r14
0x38c3: mov rsi,r13
0x38c6: call 0x53c0
0x38cb: test rax,rax
0x38ce: mov r15,rax
0x38d1: je 0x3921
0x38d3: cmp rax,0xffffffffffffffff
0x38d7: je 0x3ef5
0x38dd: cmp rax,0xfffffffffffffffe
0x38e1: je 0x3e81
0x38e7: cmp dword ptr [rsp+0x8],0x2
0x38ec: sete al
0x38ef: and al,byte ptr [rsp+0xf]
0x38f3: jne 0x3a90
0x38f9: mov edi,dword ptr [rsp+0x9c]
0x3900: call 0x15a0
0x3905: mov rdi,qword ptr [rsp+0x28]
0x390a: test eax,eax
0x390c: mov eax,0x0
0x3911: cmove r12d,eax
0x3915: add rbx,r15
0x3918: call 0x1590
0x391d: test eax,eax
0x391f: je 0x38a3
0x3921: mov edx,r12d
0x3924: mov rdi,rbx
0x3927: movzx r8d,byte ptr [rsp+0x7d]
0x392d: xor edx,0x1
0x3930: movzx ebx,byte ptr [rsp+0x7e]
0x3935: movzx r10d,byte ptr [rsp+0x7f]
0x393b: and dl,byte ptr [rsp+0xd]
0x393f: mov r15,qword ptr [rsp+0x80]
0x3947: mov r14,qword ptr [rsp+0x40]
0x394c: mov r13,qword ptr [rsp+0x70]
0x3951: mov r11,qword ptr [rsp+0x30]
0x3956: cmp rdi,0x1
0x395a: jbe 0x3f5b
0x3960: mov rcx,rdi
0x3963: xor esi,esi
0x3965: movzx r9d,byte ptr [rsp+0xf]
0x396b: add rcx,rbp
0x396e: mov rdi,qword ptr [rsp+0x10]
0x3973: jmp 0x3a2e
0x3980: cmp dword ptr [rsp+0x8],0x2
0x3985: sete al
0x3988: test r9b,r9b
0x398b: jne 0x3e40
0x3991: mov esi,r8d
0x3994: xor esi,0x1
0x3997: and al,sil
0x399a: je 0x39cb
0x399c: cmp r13,r15
0x399f: jbe 0x39a6
0x39a1: mov byte ptr [r14+r15],0x27
0x39a6: lea rsi,[r15+0x1]
0x39aa: cmp r13,rsi
0x39ad: jbe 0x39b5
0x39af: mov byte ptr [r14+r15+0x1],0x24
0x39b5: lea rsi,[r15+0x2]
0x39b9: cmp r13,rsi
0x39bc: jbe 0x39c4
0x39be: mov byte ptr [r14+r15+0x2],0x27
0x39c4: add r15,0x3
0x39c8: mov r8d,eax
0x39cb: cmp r13,r15
0x39ce: jbe 0x39d5
0x39d0: mov byte ptr [r14+r15],0x5c
0x39d5: lea rax,[r15+0x1]
0x39d9: cmp r13,rax
0x39dc: jbe 0x39eb
0x39de: mov eax,ebx
0x39e0: shr al,0x6
0x39e3: add eax,0x30
0x39e6: mov byte ptr [r14+r15+0x1],al
0x39eb: lea rax,[r15+0x2]
0x39ef: cmp r13,rax
0x39f2: jbe 0x3a04
0x39f4: mov eax,ebx
0x39f6: shr al,0x3
0x39f9: and eax,0x7
0x39fc: add eax,0x30
0x39ff: mov byte ptr [r14+r15+0x2],al
0x3a04: and ebx,0x7
0x3a07: add rbp,0x1
0x3a0b: add r15,0x3
0x3a0f: add ebx,0x30
0x3a12: cmp rbp,rcx
0x3a15: jae 0x3200
0x3a1b: mov esi,edx
0x3a1d: cmp r13,r15
0x3a20: jbe 0x3a26
0x3a22: mov byte ptr [r14+r15],bl
0x3a26: movzx ebx,byte ptr [rdi+rbp]
0x3a2a: add r15,0x1
0x3a2e: test dl,dl
0x3a30: jne 0x3980
0x3a36: mov eax,esi
0x3a38: xor eax,0x1
0x3a3b: and eax,r8d
0x3a3e: test r10b,r10b
0x3a41: je 0x3a51
0x3a43: cmp r13,r15
0x3a46: jbe 0x3a4d
0x3a48: mov byte ptr [r14+r15],0x5c
0x3a4d: add r15,0x1
0x3a51: add rbp,0x1
0x3a55: cmp rbp,rcx
0x3a58: jae 0x31dc
0x3a5e: test al,al
0x3a60: je 0x3e5e
0x3a66: cmp r13,r15
0x3a69: jbe 0x3a70
0x3a6b: mov byte ptr [r14+r15],0x27
0x3a70: lea rax,[r15+0x1]
0x3a74: cmp r13,rax
0x3a77: jbe 0x3a7f
0x3a79: mov byte ptr [r14+r15+0x1],0x27
0x3a7f: add r15,0x2
0x3a83: xor r10d,r10d
0x3a86: xor r8d,r8d
0x3a89: jmp 0x3a1d
0x3a90: cmp r15,0x1
0x3a94: je 0x38f9
0x3a9a: mov rdi,qword ptr [rsp+0x10]
0x3a9f: lea rcx,[rdi+r15]
0x3aa3: lea rdx,[rdi+r14+0x1]
0x3aa8: lea r8,[rcx+r14]
0x3aac: jmp 0x3abd
0x3ab0: add rdx,0x1
0x3ab4: cmp r8,rdx
0x3ab7: je 0x38f9
0x3abd: movzx ecx,byte ptr [rdx]
0x3ac0: sub ecx,0x5b
0x3ac3: cmp cl,0x21
0x3ac6: ja 0x3ab0
0x3ac8: mov esi,0x1
0x3acd: shl rsi,cl
0x3ad0: mov rcx,rsi
0x3ad3: movabs rsi,0x20000002b
0x3add: test rcx,rsi
0x3ae0: je 0x3ab0
0x3ae2: mov r14,qword ptr [rsp+0x40]
0x3ae7: mov r13,qword ptr [rsp+0x70]
0x3aec: mov rbp,qword ptr [rsp+0x30]
0x3af1: mov dword ptr [rsp+0x8],0x2
0x3af9: cmp byte ptr [rsp+0xd],0x0
0x3afe: je 0x3b10
0x3b00: test al,al
0x3b02: mov eax,0x4
0x3b07: cmove eax,dword ptr [rsp+0x8]
0x3b0c: mov dword ptr [rsp+0x8],eax
0x3b10: sub rsp,0x8
0x3b14: mov rcx,rbp
0x3b17: mov rsi,r13
0x3b1a: push qword ptr [rsp+0x68]
0x3b1e: push qword ptr [rsp+0x78]
0x3b22: mov rdi,r14
0x3b25: push 0x0
0x3b27: mov r9d,dword ptr [rsp+0x98]
0x3b2f: mov r8d,dword ptr [rsp+0x28]
0x3b34: mov rdx,qword ptr [rsp+0x30]
0x3b39: and r9d,0xfffffffd
0x3b3d: call 0x2f70
0x3b42: add rsp,0x20
0x3b46: mov r15,rax
0x3b49: mov rbx,qword ptr [rsp+0xa8]
0x3b51: xor rbx,qword ptr fs:0x28
0x3b5a: mov rax,r15
0x3b5d: jne 0x4163
0x3b63: add rsp,0xb8
0x3b6a: pop rbx
0x3b6b: pop rbp
0x3b6c: pop r12
0x3b6e: pop r13
0x3b70: pop r14
0x3b72: pop r15
0x3b74: ret
0x3b78: mov rbp,r11
0x3b7b: jmp 0x3af9
0x3b80: cmp r13,r15
0x3b83: jbe 0x3b8a
0x3b85: mov byte ptr [r14+r15],0x27
0x3b8a: lea rax,[r15+0x1]
0x3b8e: cmp r13,rax
0x3b91: jbe 0x3b99
0x3b93: mov byte ptr [r14+r15+0x1],0x5c
0x3b99: lea rax,[r15+0x2]
0x3b9d: cmp r13,rax
0x3ba0: jbe 0x4192
0x3ba6: mov rdx,r13
0x3ba9: mov byte ptr [r14+r15+0x2],0x27
0x3baf: mov r13,qword ptr [rsp+0x50]
0x3bb4: jmp 0x3792
0x3bb9: mov eax,r12d
0x3bbc: mov ebx,0x30
0x3bc1: xor r12d,r12d
0x3bc4: jmp 0x31c9
0x3bc9: mov byte ptr [r14+r15+0x2],0x27
0x3bcf: jmp 0x3599
0x3bd4: test ebx,ebx
0x3bd6: jne 0x3003
0x3bdc: mov byte ptr [rsp+0xd],0x1
0x3be1: test r13,r13
0x3be4: jne 0x417a
0x3bea: lea rax,[rip+0x2134]
0x3bf1: mov qword ptr [rsp+0x50],0x0
0x3bfa: mov byte ptr [rsp+0xe],0x1
0x3bff: mov byte ptr [rsp+0x7c],0x0
0x3c04: xor r12d,r12d
0x3c07: mov byte ptr [rsp+0xf],0x0
0x3c0c: mov qword ptr [rsp+0x18],0x1
0x3c15: mov qword ptr [rsp+0x48],rax
0x3c1a: mov r15d,0x1
0x3c20: mov dword ptr [rsp+0x8],0x2
0x3c28: jmp 0x3043
0x3c30: test ebx,ebx
0x3c32: jne 0x402d
0x3c38: test r13,r13
0x3c3b: je 0x3e66
0x3c41: mov byte ptr [r14],0x22
0x3c45: mov byte ptr [rsp+0xe],0x1
0x3c4a: xor r12d,r12d
0x3c4d: mov byte ptr [rsp+0x7c],0x0
0x3c52: mov qword ptr [rsp+0x50],0x0
0x3c5b: lea rax,[rip+0x20c1]
0x3c62: mov byte ptr [rsp+0xf],0x0
0x3c67: mov byte ptr [rsp+0xd],0x1
0x3c6c: mov qword ptr [rsp+0x18],0x1
0x3c75: mov r15d,0x1
0x3c7b: mov qword ptr [rsp+0x48],rax
0x3c80: jmp 0x3043
0x3c85: lea rax,[rip+0x2097]
0x3c8c: mov byte ptr [rsp+0xe],0x1
0x3c91: mov byte ptr [rsp+0x7c],0x0
0x3c96: xor r12d,r12d
0x3c99: mov qword ptr [rsp+0x50],0x0
0x3ca2: mov byte ptr [rsp+0xf],0x1
0x3ca7: mov byte ptr [rsp+0xd],0x1
0x3cac: mov qword ptr [rsp+0x18],0x1
0x3cb5: xor r15d,r15d
0x3cb8: mov qword ptr [rsp+0x48],rax
0x3cbd: mov dword ptr [rsp+0x8],0x5
0x3cc5: jmp 0x3043
0x3cca: mov byte ptr [rsp+0xe],0x1
0x3ccf: mov byte ptr [rsp+0x7c],0x0
0x3cd4: xor r12d,r12d
0x3cd7: mov qword ptr [rsp+0x50],0x0
0x3ce0: mov byte ptr [rsp+0xf],0x0
0x3ce5: xor r15d,r15d
0x3ce8: mov byte ptr [rsp+0xd],0x1
0x3ced: mov qword ptr [rsp+0x18],0x0
0x3cf6: mov qword ptr [rsp+0x48],0x0
0x3cff: jmp 0x3043
0x3d04: cmp dword ptr [rsp+0x8],0xa
0x3d09: je 0x3d61
0x3d0b: lea rsi,[rip+0x2015]
0x3d12: xor edi,edi
0x3d14: mov edx,0x5
0x3d19: call 0x13c0
0x3d1e: mov rcx,rax
0x3d21: mov qword ptr [rsp+0x68],rax
0x3d26: lea rax,[rip+0x1ffa]
0x3d2d: cmp rcx,rax
0x3d30: je 0x40ce
0x3d36: lea rsi,[rip+0x1fe8]
0x3d3d: xor edi,edi
0x3d3f: mov edx,0x5
0x3d44: call 0x13c0
0x3d49: mov rcx,rax
0x3d4c: mov qword ptr [rsp+0x60],rax
0x3d51: lea rax,[rip+0x1fcd]
0x3d58: cmp rcx,rax
0x3d5b: je 0x40e4
0x3d61: xor r15d,r15d
0x3d64: test ebx,ebx
0x3d66: je 0x3f2d
0x3d6c: test ebx,ebx
0x3d6e: mov rbx,qword ptr [rsp+0x60]
0x3d73: setne byte ptr [rsp+0xf]
0x3d78: xor r12d,r12d
0x3d7b: mov rdi,rbx
0x3d7e: call 0x13e0
0x3d83: mov qword ptr [rsp+0x48],rbx
0x3d88: mov qword ptr [rsp+0x18],rax
0x3d8d: mov byte ptr [rsp+0xe],0x1
0x3d92: mov byte ptr [rsp+0x7c],0x0
0x3d97: mov qword ptr [rsp+0x50],0x0
0x3da0: mov byte ptr [rsp+0xd],0x1
0x3da5: jmp 0x3043
0x3daa: mov byte ptr [rsp+0xe],0x1
0x3daf: mov byte ptr [rsp+0x7c],0x0
0x3db4: xor r12d,r12d
0x3db7: mov qword ptr [rsp+0x50],0x0
0x3dc0: mov byte ptr [rsp+0xf],0x0
0x3dc5: xor r15d,r15d
0x3dc8: mov byte ptr [rsp+0xd],0x0
0x3dcd: mov qword ptr [rsp+0x18],0x0
0x3dd6: mov qword ptr [rsp+0x48],0x0
0x3ddf: jmp 0x3043
0x3de4: mov byte ptr [rsp+0xe],0x1
0x3de9: mov byte ptr [rsp+0x7c],0x0
0x3dee: xor r12d,r12d
0x3df1: mov qword ptr [rsp+0x50],0x0
0x3dfa: mov byte ptr [rsp+0xf],0x1
0x3dff: mov byte ptr [rsp+0xd],0x1
0x3e04: jmp 0x3023
0x3e09: cmp r13,r15
0x3e0c: jbe 0x3e13
0x3e0e: mov byte ptr [r14+r15],0x30
0x3e13: lea rax,[rcx+0x2]
0x3e17: cmp r13,rax
0x3e1a: jbe 0x3e22
0x3e1c: mov byte ptr [r14+rcx+0x2],0x30
0x3e22: mov eax,r12d
0x3e25: lea r15,[rcx+0x3]
0x3e29: xor r12d,r12d
0x3e2c: mov ebx,0x30
0x3e31: jmp 0x3198
0x3e40: movzx ebx,byte ptr [rsp+0xf]
0x3e45: mov rbp,r11
0x3e48: mov byte ptr [rsp+0xd],bl
0x3e4c: jmp 0x3af9
0x3e51: movzx edx,byte ptr [rsp+0xd]
0x3e56: xor r12d,r12d
0x3e59: jmp 0x3960
0x3e5e: xor r10d,r10d
0x3e61: jmp 0x3a1d
0x3e66: mov qword ptr [rsp+0x50],0x0
0x3e6f: mov byte ptr [rsp+0xe],0x1
0x3e74: xor r12d,r12d
0x3e77: mov byte ptr [rsp+0x7c],0x0
0x3e7c: jmp 0x3c5b
0x3e81: mov r11,qword ptr [rsp+0x30]
0x3e86: mov rsi,r14
0x3e89: mov rcx,r13
0x3e8c: mov rax,rbx
0x3e8f: mov rdi,rbx
0x3e92: movzx r8d,byte ptr [rsp+0x7d]
0x3e98: movzx ebx,byte ptr [rsp+0x7e]
0x3e9d: mov r9,qword ptr [rsp+0x88]
0x3ea5: cmp rsi,r11
0x3ea8: movzx r10d,byte ptr [rsp+0x7f]
0x3eae: mov r15,qword ptr [rsp+0x80]
0x3eb6: mov r14,qword ptr [rsp+0x40]
0x3ebb: mov r13,qword ptr [rsp+0x70]
0x3ec0: jae 0x3ee8
0x3ec2: cmp byte ptr [rcx],0x0
0x3ec5: jne 0x3ed7
0x3ec7: jmp 0x3ee8
0x3ed0: cmp byte ptr [r9+rax],0x0
0x3ed5: je 0x3ee5
0x3ed7: add rax,0x1
0x3edb: lea rdx,[rbp+rax]
0x3ee0: cmp r11,rdx
0x3ee3: ja 0x3ed0
0x3ee5: mov rdi,rax
0x3ee8: movzx edx,byte ptr [rsp+0xd]
0x3eed: xor r12d,r12d
0x3ef0: jmp 0x3956
0x3ef5: mov rdi,rbx
0x3ef8: movzx r8d,byte ptr [rsp+0x7d]
0x3efe: movzx ebx,byte ptr [rsp+0x7e]
0x3f03: movzx r10d,byte ptr [rsp+0x7f]
0x3f09: mov r15,qword ptr [rsp+0x80]
0x3f11: xor r12d,r12d
0x3f14: mov r14,qword ptr [rsp+0x40]
0x3f19: mov r13,qword ptr [rsp+0x70]
0x3f1e: mov r11,qword ptr [rsp+0x30]
0x3f23: movzx edx,byte ptr [rsp+0xd]
0x3f28: jmp 0x3956
0x3f2d: mov rdx,qword ptr [rsp+0x68]
0x3f32: movzx eax,byte ptr [rdx]
0x3f35: test al,al
0x3f37: je 0x3d6c
0x3f3d: nop dword ptr [rax]
0x3f40: cmp r13,r15
0x3f43: jbe 0x3f49
0x3f45: mov byte ptr [r14+r15],al
0x3f49: add r15,0x1
0x3f4d: movzx eax,byte ptr [rdx+r15]
0x3f52: test al,al
0x3f54: jne 0x3f40
0x3f56: jmp 0x3d6c
0x3f5b: mov eax,edx
0x3f5d: jmp 0x34b7
0x3f62: movzx ebx,byte ptr [rax+rcx]
0x3f66: cmp bl,0x3e
0x3f69: ja 0x37e0
0x3f6f: movabs rax,0x7000a38200000000
0x3f79: bt rax,rbx
0x3f7d: jae 0x37e0
0x3f83: cmp byte ptr [rsp+0xf],0x0
0x3f88: jne 0x4172
0x3f8e: cmp r13,r15
0x3f91: jbe 0x3f98
0x3f93: mov byte ptr [r14+r15],0x3f
0x3f98: lea rax,[r15+0x1]
0x3f9c: cmp r13,rax
0x3f9f: jbe 0x3fa7
0x3fa1: mov byte ptr [r14+r15+0x1],0x22
0x3fa7: lea rax,[r15+0x2]
0x3fab: cmp r13,rax
0x3fae: jbe 0x3fb6
0x3fb0: mov byte ptr [r14+r15+0x2],0x22
0x3fb6: lea rax,[r15+0x3]
0x3fba: cmp r13,rax
0x3fbd: jbe 0x3fc5
0x3fbf: mov byte ptr [r14+r15+0x3],0x3f
0x3fc5: add r15,0x4
0x3fc9: xor edx,edx
0x3fcb: xor r12d,r12d
0x3fce: xor eax,eax
0x3fd0: mov rbp,rcx
0x3fd3: jmp 0x3198
0x3fd8: test ebx,ebx
0x3fda: je 0x4168
0x3fe0: lea rax,[rip+0x1d3e]
0x3fe7: mov byte ptr [rsp+0xe],0x1
0x3fec: mov byte ptr [rsp+0x7c],0x0
0x3ff1: xor r12d,r12d
0x3ff4: mov qword ptr [rsp+0x50],0x0
0x3ffd: mov byte ptr [rsp+0xf],0x1
0x4002: mov byte ptr [rsp+0xd],0x0
0x4007: mov qword ptr [rsp+0x18],0x1
0x4010: xor r15d,r15d
0x4013: mov qword ptr [rsp+0x48],rax
0x4018: jmp 0x3043
0x4020: mov rbp,r11
0x4023: movzx eax,byte ptr [rsp+0xf]
0x4028: jmp 0x3af9
0x402d: lea rax,[rip+0x1cef]
0x4034: mov byte ptr [rsp+0xe],0x1
0x4039: mov byte ptr [rsp+0x7c],0x0
0x403e: xor r12d,r12d
0x4041: mov qword ptr [rsp+0x50],0x0
0x404a: mov byte ptr [rsp+0xf],0x1
0x404f: mov byte ptr [rsp+0xd],0x1
0x4054: mov qword ptr [rsp+0x18],0x1
0x405d: xor r15d,r15d
0x4060: mov qword ptr [rsp+0x48],rax
0x4065: jmp 0x3043
0x406a: mov eax,edx
0x406c: mov rbx,qword ptr [rsp+0x48]
0x4071: test rbx,rbx
0x4074: je 0x40a2
0x4076: test al,al
0x4078: je 0x40a2
0x407a: movzx ecx,byte ptr [rbx]
0x407d: mov rax,rbx
0x4080: test cl,cl
0x4082: je 0x40a2
0x4084: mov rdx,r15
0x4087: sub rax,r15
0x408a: cmp r13,rdx
0x408d: jbe 0x4093
0x408f: mov byte ptr [r14+rdx],cl
0x4093: add rdx,0x1
0x4097: movzx ecx,byte ptr [rax+rdx]
0x409b: test cl,cl
0x409d: jne 0x408a
0x409f: mov r15,rdx
0x40a2: cmp r13,r15
0x40a5: jbe 0x3b49
0x40ab: mov byte ptr [r14+r15],0x0
0x40b0: jmp 0x3b49
0x40b5: cmp dword ptr [rsp+0x8],0x2
0x40ba: movzx ebx,byte ptr [rsp+0xf]
0x40bf: mov rbp,r11
0x40c2: sete al
0x40c5: mov byte ptr [rsp+0xd],bl
0x40c9: jmp 0x3af9
0x40ce: mov esi,dword ptr [rsp+0x8]
0x40d2: mov rdi,rcx
0x40d5: call 0x2e80
0x40da: mov qword ptr [rsp+0x68],rax
0x40df: jmp 0x3d36
0x40e4: mov esi,dword ptr [rsp+0x8]
0x40e8: mov rdi,rcx
0x40eb: call 0x2e80
0x40f0: mov qword ptr [rsp+0x60],rax
0x40f5: jmp 0x3d61
0x40fa: movzx ebx,byte ptr [rsp+0xf]
0x40ff: mov rbp,r11
0x4102: mov eax,edx
0x4104: mov byte ptr [rsp+0xd],bl
0x4108: jmp 0x3af9
0x410d: sub rsp,0x8
0x4111: mov r8d,0x5
0x4117: mov rcx,r11
0x411a: push qword ptr [rsp+0x68]
0x411e: push qword ptr [rsp+0x78]
0x4122: mov rdi,r14
0x4125: push qword ptr [rsp+0x38]
0x4129: mov r9d,dword ptr [rsp+0x98]
0x4131: mov rdx,qword ptr [rsp+0x30]
0x4136: mov rsi,qword ptr [rsp+0x70]
0x413b: call 0x2f70
0x4140: add rsp,0x20
0x4144: mov r15,rax
0x4147: jmp 0x3b49
0x414c: movzx eax,byte ptr [rsp+0x7c]
0x4151: jmp 0x406c
0x4156: mov dword ptr [rsp+0x8],0x2
0x415e: jmp 0x3af9
0x4163: call 0x13f0
0x4168: mov byte ptr [rsp+0xd],0x0
0x416d: jmp 0x3be1
0x4172: mov rbp,r11
0x4175: jmp 0x3b10
0x417a: mov byte ptr [rsp+0xe],0x1
0x417f: xor eax,eax
0x4181: xor r12d,r12d
0x4184: mov qword ptr [rsp+0x50],0x0
0x418d: jmp 0x3734
0x4192: mov rdx,r13
0x4195: mov r13,qword ptr [rsp+0x50]
0x419a: jmp 0x3792
0x419f: call 0x1320
0x41b0: push r15
0x41b2: push r14
0x41b4: movsxd r15,edi
0x41b7: push r13
0x41b9: push r12
0x41bb: mov r14,rdx
0x41be: push rbp
0x41bf: push rbx
0x41c0: mov rbp,rcx
0x41c3: sub rsp,0x28
0x41c7: mov qword ptr [rsp+0x8],rsi
0x41cc: call 0x1330
0x41d1: mov r13,rax
0x41d4: mov eax,dword ptr [rax]
0x41d6: test r15d,r15d
0x41d9: mov rbx,qword ptr [rip+0x203e80]
0x41e0: mov dword ptr [rsp+0x18],eax
0x41e4: js 0x4351
0x41ea: cmp dword ptr [rip+0x203e67],r15d
0x41f1: jg 0x4255
0x41f3: cmp r15d,0x7fffffff
0x41fa: je 0x4356
0x4200: lea r12d,[r15+0x1]
0x4204: lea rax,[rip+0x203e65]
0x420b: movsxd rsi,r12d
0x420e: shl rsi,0x4
0x4212: cmp rbx,rax
0x4215: je 0x4330
0x421b: mov rdi,rbx
0x421e: call 0x5190
0x4223: mov rbx,rax
0x4226: mov qword ptr [rip+0x203e33],rax
0x422d: movsxd rdi,dword ptr [rip+0x203e24]
0x4234: mov edx,r12d
0x4237: xor esi,esi
0x4239: sub edx,edi
0x423b: shl rdi,0x4
0x423f: movsxd rdx,edx
0x4242: add rdi,rbx
0x4245: shl rdx,0x4
0x4249: call 0x1450
0x424e: mov dword ptr [rip+0x203e03],r12d
0x4255: mov eax,dword ptr [rbp+0x4]
0x4258: shl r15,0x4
0x425c: sub rsp,0x8
0x4260: add rbx,r15
0x4263: lea r15,[rbp+0x8]
0x4267: mov r8d,dword ptr [rbp]
0x426b: mov r11,qword ptr [rbx]
0x426e: mov r12,qword ptr [rbx+0x8]
0x4272: mov rcx,r14
0x4275: or eax,0x1
0x4278: mov dword ptr [rsp+0x24],eax
0x427c: push qword ptr [rbp+0x30]
0x427f: mov r9d,eax
0x4282: push qword ptr [rbp+0x28]
0x4285: push r15
0x4287: mov rsi,r11
0x428a: mov rdx,qword ptr [rsp+0x28]
0x428f: mov rdi,r12
0x4292: mov qword ptr [rsp+0x30],r11
0x4297: call 0x2f70
0x429c: add rsp,0x20
0x42a0: mov r11,qword ptr [rsp+0x10]
0x42a5: cmp r11,rax
0x42a8: ja 0x4311
0x42aa: lea rsi,[rax+0x1]
0x42ae: lea rax,[rip+0x203e4b]
0x42b5: cmp r12,rax
0x42b8: mov qword ptr [rbx],rsi
0x42bb: je 0x42cf
0x42bd: mov rdi,r12
0x42c0: mov qword ptr [rsp+0x10],rsi
0x42c5: call 0x1310
0x42ca: mov rsi,qword ptr [rsp+0x10]
0x42cf: mov rdi,rsi
0x42d2: mov qword ptr [rsp+0x10],rsi
0x42d7: call 0x5130
0x42dc: sub rsp,0x8
0x42e0: mov qword ptr [rbx+0x8],rax
0x42e4: mov r8d,dword ptr [rbp]
0x42e8: push qword ptr [rbp+0x30]
0x42eb: push qword ptr [rbp+0x28]
0x42ee: mov rcx,r14
0x42f1: push r15
0x42f3: mov r9d,dword ptr [rsp+0x3c]
0x42f8: mov rdi,rax
0x42fb: mov rdx,qword ptr [rsp+0x28]
0x4300: mov rsi,qword ptr [rsp+0x30]
0x4305: mov r12,rax
0x4308: call 0x2f70
0x430d: add rsp,0x20
0x4311: mov eax,dword ptr [rsp+0x18]
0x4315: mov dword ptr [r13],eax
0x4319: add rsp,0x28
0x431d: mov rax,r12
0x4320: pop rbx
0x4321: pop rbp
0x4322: pop r12
0x4324: pop r13
0x4326: pop r14
0x4328: pop r15
0x432a: ret
0x4330: xor edi,edi
0x4332: call 0x5190
0x4337: movdqa xmm0,xmmword ptr [rip+0x203d31]
0x433f: mov rbx,rax
0x4342: mov qword ptr [rip+0x203d17],rax
0x4349: movups xmmword ptr [rax],xmm0
0x434c: jmp 0x422d
0x4351: call 0x1320
0x4356: call 0x5380
0x435b: nop dword ptr [rax+rax]
0x4360: push r12
0x4362: push rbp
0x4363: push rbx
0x4364: mov rbx,rdi
0x4367: call 0x1330
0x436c: mov r12d,dword ptr [rax]
0x436f: mov rbp,rax
0x4372: lea rax,[rip+0x203e87]
0x4379: test rbx,rbx
0x437c: mov esi,0x38
0x4381: cmove rbx,rax
0x4385: mov rdi,rbx
0x4388: call 0x5330
0x438d: mov dword ptr [rbp],r12d
0x4391: pop rbx
0x4392: pop rbp
0x4393: pop r12
0x4395: ret
0x43a0: lea rax,[rip+0x203e59]
0x43a7: test rdi,rdi
0x43aa: cmove rdi,rax
0x43ae: mov eax,dword ptr [rdi]
0x43b0: ret
0x43c0: lea rax,[rip+0x203e39]
0x43c7: test rdi,rdi
0x43ca: cmove rdi,rax
0x43ce: mov dword ptr [rdi],esi
0x43d0: ret
0x43e0: lea rax,[rip+0x203e19]
0x43e7: test rdi,rdi
0x43ea: mov ecx,esi
0x43ec: cmove rdi,rax
0x43f0: mov eax,esi
0x43f2: and ecx,0x1f
0x43f5: shr al,0x5
0x43f8: movzx eax,al
0x43fb: lea rdi,[rdi+rax*4+0x8]
0x4400: mov esi,dword ptr [rdi]
0x4402: mov eax,esi
0x4404: shr eax,cl
0x4406: xor edx,eax
0x4408: and eax,0x1
0x440b: and edx,0x1
0x440e: shl edx,cl
0x4410: xor edx,esi
0x4412: mov dword ptr [rdi],edx
0x4414: ret
0x4420: lea rax,[rip+0x203dd9]
0x4427: test rdi,rdi
0x442a: cmove rdi,rax
0x442e: mov eax,dword ptr [rdi+0x4]
0x4431: mov dword ptr [rdi+0x4],esi
0x4434: ret
0x4440: lea rax,[rip+0x203db9]
0x4447: test rdi,rdi
0x444a: cmove rdi,rax
0x444e: test rsi,rsi
0x4451: mov dword ptr [rdi],0xa
0x4457: je 0x4467
0x4459: test rdx,rdx
0x445c: je 0x4467
0x445e: mov qword ptr [rdi+0x28],rsi
0x4462: mov qword ptr [rdi+0x30],rdx
0x4466: ret
0x4467: sub rsp,0x8
0x446b: call 0x1320
0x4470: push r15
0x4472: push r14
0x4474: lea rax,[rip+0x203d85]
0x447b: push r13
0x447d: push r12
0x447f: mov r13,rdi
0x4482: push rbp
0x4483: push rbx
0x4484: mov rbx,r8
0x4487: mov r14,rsi
0x448a: mov r15,rdx
0x448d: sub rsp,0x18
0x4491: test r8,r8
0x4494: cmove rbx,rax
0x4498: mov qword ptr [rsp+0x8],rcx
0x449d: call 0x1330
0x44a2: mov r12d,dword ptr [rax]
0x44a5: mov rbp,rax
0x44a8: lea rax,[rbx+0x8]
0x44ac: sub rsp,0x8
0x44b0: mov r9d,dword ptr [rbx+0x4]
0x44b4: push qword ptr [rbx+0x30]
0x44b7: mov r8d,dword ptr [rbx]
0x44ba: push qword ptr [rbx+0x28]
0x44bd: mov rdx,r15
0x44c0: push rax
0x44c1: mov rcx,qword ptr [rsp+0x28]
0x44c6: mov rsi,r14
0x44c9: mov rdi,r13
0x44cc: call 0x2f70
0x44d1: mov dword ptr [rbp],r12d
0x44d5: add rsp,0x38
0x44d9: pop rbx
0x44da: pop rbp
0x44db: pop r12
0x44dd: pop r13
0x44df: pop r14
0x44e1: pop r15
0x44e3: ret
0x44f0: push r15
0x44f2: push r14
0x44f4: lea rax,[rip+0x203d05]
0x44fb: push r13
0x44fd: push r12
0x44ff: mov r12,rdx
0x4502: push rbp
0x4503: push rbx
0x4504: mov rbx,rcx
0x4507: mov r14,rdi
0x450a: mov r15,rsi
0x450d: sub rsp,0x38
0x4511: test rcx,rcx
0x4514: cmove rbx,rax
0x4518: xor ebp,ebp
0x451a: call 0x1330
0x451f: test r12,r12
0x4522: mov r13,rax
0x4525: mov eax,dword ptr [rax]
0x4527: sete bpl
0x452b: or ebp,dword ptr [rbx+0x4]
0x452e: lea r10,[rbx+0x8]
0x4532: sub rsp,0x8
0x4536: mov r8d,dword ptr [rbx]
0x4539: mov rcx,r15
0x453c: mov dword ptr [rsp+0x14],eax
0x4540: push qword ptr [rbx+0x30]
0x4543: mov rdx,r14
0x4546: push qword ptr [rbx+0x28]
0x4549: push r10
0x454b: xor esi,esi
0x454d: mov r9d,ebp
0x4550: xor edi,edi
0x4552: mov qword ptr [rsp+0x40],r10
0x4557: call 0x2f70
0x455c: lea rsi,[rax+0x1]
0x4560: mov qword ptr [rsp+0x48],rax
0x4565: add rsp,0x20
0x4569: mov rdi,rsi
0x456c: mov qword ptr [rsp+0x18],rsi
0x4571: call 0x5130
0x4576: mov qword ptr [rsp+0x10],rax
0x457b: sub rsp,0x8
0x457f: push qword ptr [rbx+0x30]
0x4582: push qword ptr [rbx+0x28]
0x4585: mov r10,qword ptr [rsp+0x38]
0x458a: mov r9d,ebp
0x458d: mov r8d,dword ptr [rbx]
0x4590: mov rcx,r15
0x4593: mov rdx,r14
0x4596: mov rdi,rax
0x4599: push r10
0x459b: mov rsi,qword ptr [rsp+0x38]
0x45a0: call 0x2f70
0x45a5: mov eax,dword ptr [rsp+0x2c]
0x45a9: add rsp,0x20
0x45ad: test r12,r12
0x45b0: mov dword ptr [r13],eax
0x45b4: je 0x45bf
0x45b6: mov r11,qword ptr [rsp+0x28]
0x45bb: mov qword ptr [r12],r11
0x45bf: mov rax,qword ptr [rsp+0x10]
0x45c4: add rsp,0x38
0x45c8: pop rbx
0x45c9: pop rbp
0x45ca: pop r12
0x45cc: pop r13
0x45ce: pop r14
0x45d0: pop r15
0x45d2: ret
0x45e0: mov rcx,rdx
0x45e3: xor edx,edx
0x45e5: jmp 0x44f0
0x45f0: mov eax,dword ptr [rip+0x203a62]
0x45f6: push r12
0x45f8: mov r12,qword ptr [rip+0x203a61]
0x45ff: push rbp
0x4600: push rbx
0x4601: cmp eax,0x1
0x4604: jle 0x4631
0x4606: sub eax,0x2
0x4609: lea rbx,[r12+0x18]
0x460e: shl rax,0x4
0x4612: lea rbp,[r12+rax+0x28]
0x4617: nop word ptr [rax+rax]
0x4620: mov rdi,qword ptr [rbx]
0x4623: add rbx,0x10
0x4627: call 0x1310
0x462c: cmp rbx,rbp
0x462f: jne 0x4620
0x4631: mov rdi,qword ptr [r12+0x8]
0x4636: lea rbx,[rip+0x203ac3]
0x463d: cmp rdi,rbx
0x4640: je 0x4659
0x4642: call 0x1310
0x4647: mov qword ptr [rip+0x203a1e],0x100
0x4652: mov qword ptr [rip+0x203a1f],rbx
0x4659: lea rbx,[rip+0x203a10]
0x4660: cmp r12,rbx
0x4663: je 0x4674
0x4665: mov rdi,r12
0x4668: call 0x1310
0x466d: mov qword ptr [rip+0x2039ec],rbx
0x4674: pop rbx
0x4675: mov dword ptr [rip+0x2039d9],0x1
0x467f: pop rbp
0x4680: pop r12
0x4682: ret
0x4690: lea rcx,[rip+0x203b69]
0x4697: mov rdx,0xffffffffffffffff
0x469e: jmp 0x41b0
0x46b0: lea rcx,[rip+0x203b49]
0x46b7: jmp 0x41b0
0x46c0: lea rcx,[rip+0x203b39]
0x46c7: mov rsi,rdi
0x46ca: mov rdx,0xffffffffffffffff
0x46d1: xor edi,edi
0x46d3: jmp 0x41b0
0x46e0: lea rcx,[rip+0x203b19]
0x46e7: mov rdx,rsi
0x46ea: mov rsi,rdi
0x46ed: xor edi,edi
0x46ef: jmp 0x41b0
0x4700: sub rsp,0x48
0x4704: mov rax,rdx
0x4707: mov rdx,qword ptr fs:0x28
0x4710: mov qword ptr [rsp+0x38],rdx
0x4715: xor edx,edx
0x4717: cmp esi,0xa
0x471a: je 0x4784
0x471c: mov dword ptr [rsp+0x0],esi
0x471f: mov rcx,rsp
0x4722: mov rdx,0xffffffffffffffff
0x4729: mov rsi,rax
0x472c: mov qword ptr [rsp+0x4],0x0
0x4735: mov qword ptr [rsp+0xc],0x0
0x473e: mov qword ptr [rsp+0x14],0x0
0x4747: mov qword ptr [rsp+0x1c],0x0
0x4750: mov qword ptr [rsp+0x24],0x0
0x4759: mov qword ptr [rsp+0x2c],0x0
0x4762: mov dword ptr [rsp+0x34],0x0
0x476a: call 0x41b0
0x476f: mov rcx,qword ptr [rsp+0x38]
0x4774: xor rcx,qword ptr fs:0x28
0x477d: jne 0x4789
0x477f: add rsp,0x48
0x4783: ret
0x4784: call 0x1320
0x4789: call 0x13f0
0x4790: sub rsp,0x48
0x4794: mov rax,rdx
0x4797: mov rdx,rcx
0x479a: mov rcx,qword ptr fs:0x28
0x47a3: mov qword ptr [rsp+0x38],rcx
0x47a8: xor ecx,ecx
0x47aa: cmp esi,0xa
0x47ad: je 0x4810
0x47af: mov dword ptr [rsp+0x0],esi
0x47b2: mov rcx,rsp
0x47b5: mov rsi,rax
0x47b8: mov qword ptr [rsp+0x4],0x0
0x47c1: mov qword ptr [rsp+0xc],0x0
0x47ca: mov qword ptr [rsp+0x14],0x0
0x47d3: mov qword ptr [rsp+0x1c],0x0
0x47dc: mov qword ptr [rsp+0x24],0x0
0x47e5: mov qword ptr [rsp+0x2c],0x0
0x47ee: mov dword ptr [rsp+0x34],0x0
0x47f6: call 0x41b0
0x47fb: mov rdx,qword ptr [rsp+0x38]
0x4800: xor rdx,qword ptr fs:0x28
0x4809: jne 0x4815
0x480b: add rsp,0x48
0x480f: ret
0x4810: call 0x1320
0x4815: call 0x13f0
0x4820: mov rdx,rsi
0x4823: mov esi,edi
0x4825: xor edi,edi
0x4827: jmp 0x4700
0x4830: mov rcx,rdx
0x4833: mov rdx,rsi
0x4836: mov esi,edi
0x4838: xor edi,edi
0x483a: jmp 0x4790
0x4840: sub rsp,0x48
0x4844: mov ecx,edx
0x4846: mov rax,qword ptr fs:0x28
0x484f: mov qword ptr [rsp+0x38],rax
0x4854: xor eax,eax
0x4856: mov rax,qword ptr [rip+0x2039d3]
0x485d: mov r8,rsp
0x4860: and ecx,0x1f
0x4863: movdqa xmm0,xmmword ptr [rip+0x203995]
0x486b: mov qword ptr [rsp+0x30],rax
0x4870: mov eax,edx
0x4872: movaps xmmword ptr [rsp+0x0],xmm0
0x4876: shr al,0x5
0x4879: movzx eax,al
0x487c: lea r9,[r8+rax*4+0x8]
0x4881: movdqa xmm0,xmmword ptr [rip+0x203987]
0x4889: movaps xmmword ptr [rsp+0x10],xmm0
0x488e: movdqa xmm0,xmmword ptr [rip+0x20398a]
0x4896: movaps xmmword ptr [rsp+0x20],xmm0
0x489b: mov edx,dword ptr [r9]
0x489e: mov eax,edx
0x48a0: shr eax,cl
0x48a2: not eax
0x48a4: and eax,0x1
0x48a7: shl eax,cl
0x48a9: mov rcx,r8
0x48ac: xor eax,edx
0x48ae: mov rdx,rsi
0x48b1: mov rsi,rdi
0x48b4: mov dword ptr [r9],eax
0x48b7: xor edi,edi
0x48b9: call 0x41b0
0x48be: mov rsi,qword ptr [rsp+0x38]
0x48c3: xor rsi,qword ptr fs:0x28
0x48cc: jne 0x48d3
0x48ce: add rsp,0x48
0x48d2: ret
0x48d3: call 0x13f0
0x48e0: movsx edx,sil
0x48e4: mov rsi,0xffffffffffffffff
0x48eb: jmp 0x4840
0x48f0: mov edx,0x3a
0x48f5: mov rsi,0xffffffffffffffff
0x48fc: jmp 0x4840
0x4910: mov edx,0x3a
0x4915: jmp 0x4840
0x4920: sub rsp,0x48
0x4924: mov rax,rdx
0x4927: mov rdx,qword ptr fs:0x28
0x4930: mov qword ptr [rsp+0x38],rdx
0x4935: xor edx,edx
0x4937: cmp esi,0xa
0x493a: je 0x49a4
0x493c: mov dword ptr [rsp+0x0],esi
0x493f: mov rcx,rsp
0x4942: mov rdx,0xffffffffffffffff
0x4949: mov rsi,rax
0x494c: mov qword ptr [rsp+0x4],0x0
0x4955: mov qword ptr [rsp+0xc],0x4000000
0x495e: mov qword ptr [rsp+0x14],0x0
0x4967: mov qword ptr [rsp+0x1c],0x0
0x4970: mov qword ptr [rsp+0x24],0x0
0x4979: mov qword ptr [rsp+0x2c],0x0
0x4982: mov dword ptr [rsp+0x34],0x0
0x498a: call 0x41b0
0x498f: mov rcx,qword ptr [rsp+0x38]
0x4994: xor rcx,qword ptr fs:0x28
0x499d: jne 0x49a9
0x499f: add rsp,0x48
0x49a3: ret
0x49a4: call 0x1320
0x49a9: call 0x13f0
0x49b0: sub rsp,0x48
0x49b4: mov r9,rcx
0x49b7: mov rcx,qword ptr [rip+0x203872]
0x49be: movdqa xmm0,xmmword ptr [rip+0x20383a]
0x49c6: mov rax,qword ptr fs:0x28
0x49cf: mov qword ptr [rsp+0x38],rax
0x49d4: xor eax,eax
0x49d6: movaps xmmword ptr [rsp+0x0],xmm0
0x49da: test rsi,rsi
0x49dd: mov qword ptr [rsp+0x30],rcx
0x49e2: mov dword ptr [rsp+0x0],0xa
0x49e9: movdqa xmm0,xmmword ptr [rip+0x20381f]
0x49f1: movaps xmmword ptr [rsp+0x10],xmm0
0x49f6: movdqa xmm0,xmmword ptr [rip+0x203822]
0x49fe: movaps xmmword ptr [rsp+0x20],xmm0
0x4a03: je 0x4a37
0x4a05: test rdx,rdx
0x4a08: je 0x4a37
0x4a0a: mov qword ptr [rsp+0x28],rsi
0x4a0f: mov qword ptr [rsp+0x30],rdx
0x4a14: mov rcx,rsp
0x4a17: mov rdx,r8
0x4a1a: mov rsi,r9
0x4a1d: call 0x41b0
0x4a22: mov rdi,qword ptr [rsp+0x38]
0x4a27: xor rdi,qword ptr fs:0x28
0x4a30: jne 0x4a3c
0x4a32: add rsp,0x48
0x4a36: ret
0x4a37: call 0x1320
0x4a3c: call 0x13f0
0x4a50: mov r8,0xffffffffffffffff
0x4a57: jmp 0x49b0
0x4a60: mov rcx,rdx
0x4a63: mov r8,0xffffffffffffffff
0x4a6a: mov rdx,rsi
0x4a6d: mov rsi,rdi
0x4a70: xor edi,edi
0x4a72: jmp 0x49b0
0x4a80: mov r8,rcx
0x4a83: mov rcx,rdx
0x4a86: mov rdx,rsi
0x4a89: mov rsi,rdi
0x4a8c: xor edi,edi
0x4a8e: jmp 0x49b0
0x4aa0: lea rcx,[rip+0x203579]
0x4aa7: jmp 0x41b0
0x4ab0: lea rcx,[rip+0x203569]
0x4ab7: mov rdx,rsi
0x4aba: mov rsi,rdi
0x4abd: xor edi,edi
0x4abf: jmp 0x41b0
0x4ad0: lea rcx,[rip+0x203549]
0x4ad7: mov rdx,0xffffffffffffffff
0x4ade: jmp 0x41b0
0x4af0: lea rcx,[rip+0x203529]
0x4af7: mov rsi,rdi
0x4afa: mov rdx,0xffffffffffffffff
0x4b01: xor edi,edi
0x4b03: jmp 0x41b0
0x4c48: mov r8,rcx
0x4c4b: mov rcx,rdx
0x4c4e: lea rdx,[rip+0x159f]
0x4c55: mov esi,0x1
0x4c5a: xor eax,eax
0x4c5c: call 0x1580
0x4c61: jmp 0x4b4c
0x4f30: xor r9d,r9d
0x4f33: cmp qword ptr [r8],0x0
0x4f37: je 0x4f4b
0x4f39: nop dword ptr [rax]
0x4f40: add r9,0x1
0x4f44: cmp qword ptr [r8+r9*8],0x0
0x4f49: jne 0x4f40
0x4f4b: jmp 0x4b10
0x4fa0: mov rax,qword ptr [rsp+0x58]
0x4fa5: xor rax,qword ptr fs:0x28
0x4fae: jne 0x4fb5
0x4fb0: add rsp,0x68
0x4fb4: ret
0x4fb5: call 0x13f0
0x4fd0: push rbp
0x4fd1: push rbx
0x4fd2: mov r10d,0x20
0x4fd8: xor r11d,r11d
0x4fdb: sub rsp,0xb8
0x4fe2: mov rax,qword ptr fs:0x28
0x4feb: mov qword ptr [rsp+0x78],rax
0x4ff0: xor eax,eax
0x4ff2: lea rax,[rsp+0xd0]
0x4ffa: mov qword ptr [rsp+0xa0],r8
0x5002: lea rbx,[rsp+0xd0]
0x500a: lea r8,[rsp+0x20]
0x500f: mov qword ptr [rsp+0xa8],r9
0x5017: mov dword ptr [rsp+0x8],0x20
0x501f: mov qword ptr [rsp+0x10],rax
0x5024: lea rax,[rsp+0x80]
0x502c: xor r9d,r9d
0x502f: mov qword ptr [rsp+0x18],rax
0x5034: mov rbp,rax
0x5037: nop word ptr [rax+rax]
0x5040: cmp r10d,0x2f
0x5044: ja 0x509c
0x5046: mov eax,r10d
0x5049: mov r11d,0x1
0x504f: add r10d,0x8
0x5053: add rax,rbp
0x5056: mov rax,qword ptr [rax]
0x5059: test rax,rax
0x505c: mov qword ptr [r8+r9*8],rax
0x5060: je 0x506c
0x5062: add r9,0x1
0x5066: cmp r9,0xa
0x506a: jne 0x5040
0x506c: test r11b,r11b
0x506f: jne 0x5095
0x5071: call 0x4b10
0x5076: mov rax,qword ptr [rsp+0x78]
0x507b: xor rax,qword ptr fs:0x28
0x5084: jne 0x5090
0x5086: add rsp,0xb8
0x508d: pop rbx
0x508e: pop rbp
0x508f: ret
0x5090: call 0x13f0
0x5095: mov dword ptr [rsp+0x8],r10d
0x509a: jmp 0x5071
0x509c: mov rax,rbx
0x509f: add rbx,0x8
0x50a3: jmp 0x5056
0x50b0: push rbx
0x50b1: lea rsi,[rip+0x118a]
0x50b8: mov edx,0x5
0x50bd: xor edi,edi
0x50bf: call 0x13c0
0x50c4: lea rdx,[rip+0x118c]
0x50cb: mov rsi,rax
0x50ce: mov edi,0x1
0x50d3: xor eax,eax
0x50d5: call 0x1510
0x50da: lea rsi,[rip+0x118c]
0x50e1: mov edx,0x5
0x50e6: xor edi,edi
0x50e8: call 0x13c0
0x50ed: lea rcx,[rip+0xabc]
0x50f4: lea rdx,[rip+0x6d4]
0x50fb: mov rsi,rax
0x50fe: mov edi,0x1
0x5103: xor eax,eax
0x5105: call 0x1510
0x510a: mov rbx,qword ptr [rip+0x202f77]
0x5111: lea rsi,[rip+0x1388]
0x5118: xor edi,edi
0x511a: mov edx,0x5
0x511f: call 0x13c0
0x5124: mov rsi,rbx
0x5127: mov rdi,rax
0x512a: pop rbx
0x512b: jmp 0x1470
0x5130: push rbx
0x5131: mov rbx,rdi
0x5134: call 0x14b0
0x5139: test rax,rax
0x513c: jne 0x5143
0x513e: test rbx,rbx
0x5141: jne 0x5145
0x5143: pop rbx
0x5144: ret
0x5145: call 0x5380
0x514a: nop word ptr [rax+rax]
0x5150: mov rax,rdi
0x5153: mul rsi
0x5156: mov rdi,rax
0x5159: seto al
0x515c: test rdi,rdi
0x515f: js 0x516b
0x5161: movzx eax,al
0x5164: test rax,rax
0x5167: jne 0x516b
0x5169: jmp 0x5130
0x516b: sub rsp,0x8
0x516f: call 0x5380
0x5174: nop
0x5176: nop word ptr cs:[rax+rax]
0x5180: jmp 0x5130
0x5190: test rsi,rsi
0x5193: push rbx
0x5194: mov rbx,rsi
0x5197: jne 0x519e
0x5199: test rdi,rdi
0x519c: jne 0x51b8
0x519e: mov rsi,rbx
0x51a1: call 0x14f0
0x51a6: test rax,rax
0x51a9: jne 0x51b0
0x51ab: test rbx,rbx
0x51ae: jne 0x51c1
0x51b0: pop rbx
0x51b1: ret
0x51b8: call 0x1310
0x51bd: xor eax,eax
0x51bf: pop rbx
0x51c0: ret
0x51c1: call 0x5380
0x51c6: nop word ptr cs:[rax+rax]
0x51d0: mov rax,rsi
0x51d3: mul rdx
0x51d6: mov rsi,rax
0x51d9: seto al
0x51dc: test rsi,rsi
0x51df: js 0x51eb
0x51e1: movzx eax,al
0x51e4: test rax,rax
0x51e7: jne 0x51eb
0x51e9: jmp 0x5190
0x51eb: sub rsp,0x8
0x51ef: call 0x5380
0x51f4: nop
0x51f6: nop word ptr cs:[rax+rax]
0x5200: test rdi,rdi
0x5203: mov r9,rdx
0x5206: mov rcx,qword ptr [rsi]
0x5209: je 0x5240
0x520b: xor edx,edx
0x520d: movabs rax,0x5555555555555554
0x5217: div r9
0x521a: cmp rax,rcx
0x521d: jbe 0x525b
0x521f: mov rax,rcx
0x5222: shr rax,0x1
0x5225: lea rcx,[rax+rcx+0x1]
0x522a: mov qword ptr [rsi],rcx
0x522d: imul rcx,r9
0x5231: mov rsi,rcx
0x5234: jmp 0x5190
0x5240: test rcx,rcx
0x5243: je 0x5268
0x5245: mov rax,rcx
0x5248: mul r9
0x524b: seto dl
0x524e: test rax,rax
0x5251: movzx edx,dl
0x5254: js 0x525b
0x5256: test rdx,rdx
0x5259: je 0x522a
0x525b: sub rsp,0x8
0x525f: call 0x5380
0x5264: nop dword ptr [rax]
0x5268: xor edx,edx
0x526a: mov eax,0x80
0x526f: xor r8d,r8d
0x5272: div r9
0x5275: test rax,rax
0x5278: sete r8b
0x527c: lea rcx,[r8+rax]
0x5280: jmp 0x5245
0x5290: test rdi,rdi
0x5293: mov rax,qword ptr [rsi]
0x5296: je 0x52c0
0x5298: movabs rdx,0x5555555555555553
0x52a2: cmp rax,rdx
0x52a5: ja 0x52d1
0x52a7: mov rdx,rax
0x52aa: shr rdx,0x1
0x52ad: lea rax,[rdx+rax+0x1]
0x52b2: mov qword ptr [rsi],rax
0x52b5: mov rsi,rax
0x52b8: jmp 0x5190
0x52c0: test rax,rax
0x52c3: mov edx,0x80
0x52c8: cmove rax,rdx
0x52cc: test rax,rax
0x52cf: jns 0x52b2
0x52d1: sub rsp,0x8
0x52d5: call 0x5380
0x52da: nop word ptr [rax+rax]
0x52e0: push rbx
0x52e1: mov rbx,rdi
0x52e4: call 0x5130
0x52e9: mov rdx,rbx
0x52ec: xor esi,esi
0x52ee: mov rdi,rax
0x52f1: pop rbx
0x52f2: jmp 0x1450
0x5300: mov rax,rdi
0x5303: sub rsp,0x8
0x5307: mul rsi
0x530a: seto dl
0x530d: test rax,rax
0x5310: js 0x5329
0x5312: movzx edx,dl
0x5315: test rdx,rdx
0x5318: jne 0x5329
0x531a: call 0x1480
0x531f: test rax,rax
0x5322: je 0x5329
0x5324: add rsp,0x8
0x5328: ret
0x5329: call 0x5380
0x532e: nop
0x5330: push rbp
0x5331: push rbx
0x5332: mov rbp,rdi
0x5335: mov rdi,rsi
0x5338: mov rbx,rsi
0x533b: sub rsp,0x8
0x533f: call 0x5130
0x5344: add rsp,0x8
0x5348: mov rdx,rbx
0x534b: mov rsi,rbp
0x534e: pop rbx
0x534f: pop rbp
0x5350: mov rdi,rax
0x5353: jmp 0x1490
0x5360: push rbx
0x5361: mov rbx,rdi
0x5364: call 0x13e0
0x5369: mov rdi,rbx
0x536c: lea rsi,[rax+0x1]
0x5370: pop rbx
0x5371: jmp 0x5330
0x5380: lea rsi,[rip+0x11c8]
0x5387: sub rsp,0x8
0x538b: mov edx,0x5
0x5390: xor edi,edi
0x5392: call 0x13c0
0x5397: mov edi,dword ptr [rip+0x202c73]
0x539d: lea rdx,[rip+0x8dc]
0x53a4: mov rcx,rax
0x53a7: xor esi,esi
0x53a9: xor eax,eax
0x53ab: call 0x1530
0x53b0: call 0x1320
0x53c0: push r13
0x53c2: push r12
0x53c4: mov r13,rsi
0x53c7: push rbp
0x53c8: push rbx
0x53c9: mov rbx,rdi
0x53cc: mov r12,rdx
0x53cf: sub rsp,0x18
0x53d3: mov rax,qword ptr fs:0x28
0x53dc: mov qword ptr [rsp+0x8],rax
0x53e1: xor eax,eax
0x53e3: lea rax,[rsp+0x4]
0x53e8: test rdi,rdi
0x53eb: cmove rbx,rax
0x53ef: mov rdi,rbx
0x53f2: call 0x1410
0x53f7: cmp rax,0xfffffffffffffffd
0x53fb: mov rbp,rax
0x53fe: jbe 0x5420
0x5400: test r12,r12
0x5403: je 0x5420
0x5405: xor edi,edi
0x5407: call 0x54d0
0x540c: test al,al
0x540e: jne 0x5420
0x5410: movzx eax,byte ptr [r13]
0x5415: mov ebp,0x1
0x541a: mov dword ptr [rbx],eax
0x541c: nop dword ptr [rax]
0x5420: mov rdx,qword ptr [rsp+0x8]
0x5425: xor rdx,qword ptr fs:0x28
0x542e: mov rax,rbp
0x5431: jne 0x543e
0x5433: add rsp,0x18
0x5437: pop rbx
0x5438: pop rbp
0x5439: pop r12
0x543b: pop r13
0x543d: ret
0x543e: call 0x13f0
0x5450: push r12
0x5452: push rbp
0x5453: mov rbp,rdi
0x5456: push rbx
0x5457: call 0x1360
0x545c: mov ebx,dword ptr [rbp]
0x545f: mov rdi,rbp
0x5462: mov r12,rax
0x5465: call 0x5570
0x546a: and ebx,0x20
0x546d: test ebx,ebx
0x546f: jne 0x5488
0x5471: test eax,eax
0x5473: je 0x547f
0x5475: test r12,r12
0x5478: mov eax,0xffffffff
0x547d: je 0x54b8
0x547f: pop rbx
0x5480: pop rbp
0x5481: pop r12
0x5483: ret
0x5488: test eax,eax
0x548a: jne 0x54a8
0x548c: call 0x1330
0x5491: mov dword ptr [rax],0x0
0x5497: mov eax,0xffffffff
0x549c: pop rbx
0x549d: pop rbp
0x549e: pop r12
0x54a0: ret
0x54a8: pop rbx
0x54a9: mov eax,0xffffffff
0x54ae: pop rbp
0x54af: pop r12
0x54b1: ret
0x54b8: call 0x1330
0x54bd: cmp dword ptr [rax],0x9
0x54c0: pop rbx
0x54c1: pop rbp
0x54c2: pop r12
0x54c4: setne al
0x54c7: movzx eax,al
0x54ca: neg eax
0x54cc: ret
0x54d0: sub rsp,0x8
0x54d4: xor esi,esi
0x54d6: call 0x1500
0x54db: mov rdx,rax
0x54de: mov eax,0x1
0x54e3: test rdx,rdx
0x54e6: je 0x5505
0x54e8: lea rdi,[rip+0x1071]
0x54ef: mov ecx,0x2
0x54f4: mov rsi,rdx
0x54f7: rep cmpsb [rsi],[rdi]
0x54f9: seta cl
0x54fc: sbb cl,0x0
0x54ff: xor eax,eax
0x5501: test cl,cl
0x5503: jne 0x5510
0x5505: add rsp,0x8
0x5509: ret
0x5510: lea rdi,[rip+0x104b]
0x5517: mov ecx,0x6
0x551c: mov rsi,rdx
0x551f: rep cmpsb [rsi],[rdi]
0x5521: seta al
0x5524: sbb al,0x0
0x5526: test al,al
0x5528: setne al
0x552b: add rsp,0x8
0x552f: ret
0x5530: sub rsp,0x8
0x5534: mov edi,0xe
0x5539: call 0x14d0
0x553e: test rax,rax
0x5541: je 0x5560
0x5543: cmp byte ptr [rax],0x0
0x5546: lea rdx,[rip+0x101b]
0x554d: cmove rax,rdx
0x5551: add rsp,0x8
0x5555: ret
0x5560: lea rax,[rip+0x1001]
0x5567: add rsp,0x8
0x556b: ret
0x5570: push r12
0x5572: push rbp
0x5573: push rbx
0x5574: mov rbx,rdi
0x5577: call 0x14a0
0x557c: test eax,eax
0x557e: mov rdi,rbx
0x5581: js 0x55d7
0x5583: call 0x14e0
0x5588: test eax,eax
0x558a: jne 0x55b8
0x558c: mov rdi,rbx
0x558f: call 0x55f0
0x5594: test eax,eax
0x5596: je 0x55d4
0x5598: call 0x1330
0x559d: mov r12d,dword ptr [rax]
0x55a0: mov rdi,rbx
0x55a3: mov rbp,rax
0x55a6: call 0x13a0
0x55ab: test r12d,r12d
0x55ae: jne 0x55e0
0x55b0: pop rbx
0x55b1: pop rbp
0x55b2: pop r12
0x55b4: ret
0x55b8: mov rdi,rbx
0x55bb: call 0x14a0
0x55c0: xor esi,esi
0x55c2: mov edx,0x1
0x55c7: mov edi,eax
0x55c9: call 0x1430
0x55ce: cmp rax,0xffffffffffffffff
0x55d2: jne 0x558c
0x55d4: mov rdi,rbx
0x55d7: pop rbx
0x55d8: pop rbp
0x55d9: pop r12
0x55db: jmp 0x13a0
0x55e0: mov dword ptr [rbp],r12d
0x55e4: mov eax,0xffffffff
0x55e9: jmp 0x55b0
0x55f0: test rdi,rdi
0x55f3: push rbx
0x55f4: mov rbx,rdi
0x55f7: je 0x560a
0x55f9: call 0x14e0
0x55fe: test eax,eax
0x5600: je 0x560a
0x5602: test dword ptr [rbx],0x100
0x5608: jne 0x5618
0x560a: mov rdi,rbx
0x560d: pop rbx
0x560e: jmp 0x14c0
0x5618: mov rdi,rbx
0x561b: mov edx,0x1
0x5620: xor esi,esi
0x5622: call 0x5630
0x5627: mov rdi,rbx
0x562a: pop rbx
0x562b: jmp 0x14c0
0x5630: mov rax,qword ptr [rdi+0x8]
0x5634: cmp qword ptr [rdi+0x10],rax
0x5638: je 0x5640
0x563a: jmp 0x1540
0x5640: mov rax,qword ptr [rdi+0x20]
0x5644: cmp qword ptr [rdi+0x28],rax
0x5648: jne 0x563a
0x564a: cmp qword ptr [rdi+0x48],0x0
0x564f: jne 0x563a
0x5651: push r12
0x5653: push rbp
0x5654: mov r12d,edx
0x5657: push rbx
0x5658: mov rbp,rsi
0x565b: mov rbx,rdi
0x565e: call 0x14a0
0x5663: mov edx,r12d
0x5666: mov rsi,rbp
0x5669: mov edi,eax
0x566b: call 0x1430
0x5670: cmp rax,0xffffffffffffffff
0x5674: je 0x5682
0x5676: and dword ptr [rbx],0xffffffef
0x5679: mov qword ptr [rbx+0x90],rax
0x5680: xor eax,eax
0x5682: pop rbx
0x5683: pop rbp
0x5684: pop r12
0x5686: ret
0x5690: push r15
0x5692: push r14
0x5694: mov r15,rdx
0x5697: push r13
0x5699: push r12
0x569b: lea r12,[rip+0x2024ee]
0x56a2: push rbp
0x56a3: lea rbp,[rip+0x2024ee]
0x56aa: push rbx
0x56ab: mov r13d,edi
0x56ae: mov r14,rsi
0x56b1: sub rbp,r12
0x56b4: sub rsp,0x8
0x56b8: sar rbp,0x3
0x56bc: call _init
0x56c1: test rbp,rbp
0x56c4: je 0x56e6
0x56c6: xor ebx,ebx
0x56c8: nop dword ptr [rax+rax]
0x56d0: mov rdx,r15
0x56d3: mov rsi,r14
0x56d6: mov edi,r13d
0x56d9: call qword ptr [r12+rbx*8]
0x56dd: add rbx,0x1
0x56e1: cmp rbp,rbx
0x56e4: jne 0x56d0
0x56e6: add rsp,0x8
0x56ea: pop rbx
0x56eb: pop rbp
0x56ec: pop r12
0x56ee: pop r13
0x56f0: pop r14
0x56f2: pop r15
0x56f4: ret
0x5700: ret
4084
677
25
