
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/du
        UUID: A71D8DF2-7E7F-1D98-BE34-793C1423CAD6
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x27480[ (160896 bytes)
        ; File offset : [0; 160896[ (160896 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x40 ; '@'
0000000000000019         db  0x3f ; '?'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xc8 ; '.'
0000000000000029         db  0x63 ; 'c'
000000000000002a         db  0x0c ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x80 ; '.'
00000000000000d1         db  0x74 ; 't'
00000000000000d2         db  0x02 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x80 ; '.'
00000000000000d9         db  0x74 ; 't'
00000000000000da         db  0x02 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x70 ; 'p'
00000000000000f1         db  0x76 ; 'v'
00000000000000f2         db  0x02 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x70 ; 'p'
00000000000000f9         db  0x76 ; 'v'
00000000000000fa         db  0x22 ; '"'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x70 ; 'p'                                         ; DATA XREF=main+1759, human_readable+924, quotearg_free+87, rpl_fflush+18, fts_stat+144, fts_build+1222, build_trtable+736, build_trtable+2820, build_charclass.isra.29+219, build_charclass.isra.29+299, build_charclass.isra.29+540
0000000000000101         db  0x76 ; 'v'
0000000000000102         db  0x22 ; '"'                                         ; DATA XREF=setup_dir.isra.4, enter_dir.isra.10, leave_dir.isra.12+23, rpl_fts_close+159, rpl_fts_read+688
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x30 ; '0'                                         ; DATA XREF=build_trtable+18, build_trtable+1065
0000000000000109         db  0x0a ; '.'
000000000000010a         db  0x00 ; '.'                                         ; DATA XREF=main+298
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x98 ; '.'
0000000000000111         db  0x0c ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x98 ; '.'                                         ; DATA XREF=parse_expression+10, sub_1baf0+156, re_compile_internal+10, re_compile_internal+947
0000000000000129         db  0x7a ; 'z'
000000000000012a         db  0x02 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x98 ; '.'
0000000000000131         db  0x7a ; 'z'
0000000000000132         db  0x22 ; '"'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x98 ; '.'                                         ; DATA XREF=main+29, main+3044
0000000000000139         db  0x7a ; 'z'
000000000000013a         db  0x22 ; '"'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'                                         ; DATA XREF=sub_65d0+1006, sub_65d0+1077, sub_77e0+4
000000000000016e         db  0x00 ; '.'                                         ; DATA XREF=sub_65d0+1029, sub_77e0+39, sub_77e0+67
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=re_compile_fastmap_iter.isra.30+18, re_compile_fastmap_iter.isra.30+1172
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'                                         ; DATA XREF=sub_65d0+943, sub_65d0+1096, sub_77e0+87
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'                                         ; DATA XREF=human_options+440
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'                                         ; DATA XREF=sub_65d0+949, sub_65d0+1062, sub_77e0+52
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x6c ; 'l'
0000000000000199         db  0x30 ; '0'
000000000000019a         db  0x02 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x6c ; 'l'
00000000000001a1         db  0x30 ; '0'
00000000000001a2         db  0x02 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x6c ; 'l'
00000000000001a9         db  0x30 ; '0'
00000000000001aa         db  0x02 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x8c ; '.'
00000000000001b1         db  0x09 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x8c ; '.'
00000000000001b9         db  0x09 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1079
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1141
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1110
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=human_options+288, human_options+293, human_options+385, xfts_open+4, xstrtoul+573, xstrtoumax+573, diropen.isra.6+20, fts_build+1173, fts_build+1365, build_trtable+2601, build_trtable+2707
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'                                         ; DATA XREF=fts_build+1159, rpl_fts_open+30, rpl_fts_open+35, rpl_fts_open+629
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x70 ; 'p'
0000000000000209         db  0x76 ; 'v'
000000000000020a         db  0x02 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'                                         ; DATA XREF=main+5266
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x70 ; 'p'
0000000000000211         db  0x76 ; 'v'
0000000000000212         db  0x22 ; '"'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x70 ; 'p'
0000000000000219         db  0x76 ; 'v'
000000000000021a         db  0x22 ; '"'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x90 ; '.'
0000000000000221         db  0x09 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x90 ; '.'
0000000000000229         db  0x09 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'                                         ; DATA XREF=main+4138
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0            ; DATA XREF=re_search_internal+24, re_search_internal+2964


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'                                         ; DATA XREF=main+5297
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0xa7 ; '.'
0000000000000285         db  0x1d ; '.'
0000000000000286         db  0x8d ; '.'
0000000000000287         db  0xf2 ; '.'                                         ; DATA XREF=human_readable+189
0000000000000288         db  0x7e ; '~'
0000000000000289         db  0x7f ; '.'
000000000000028a         db  0x1d ; '.'
000000000000028b         db  0x98 ; '.'
000000000000028c         db  0xbe ; '.'
000000000000028d         db  0x34 ; '4'
000000000000028e         db  0x79 ; 'y'
000000000000028f         db  0x3c ; '<'
0000000000000290         db  0x14 ; '.'
0000000000000291         db  0x23 ; '#'
0000000000000292         db  0xca ; '.'
0000000000000293         db  0xd6 ; '.'
0000000000000294         db  0x73 ; 's'
0000000000000295         db  0x15 ; '.'
0000000000000296         db  0x28 ; '('
0000000000000297         db  0x08 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x6d ; 'm'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'                                         ; DATA XREF=print_only_size+1, print_only_size+96
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x6d ; 'm'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x6e ; 'n'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x74 ; 't'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xdf0[ (2832 bytes)
        ; File offset : [736; 3568[ (2832 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x31 ; '1'
00000000000002f9         db  0x03 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'                                         ; DATA XREF=sub_1c120+7
0000000000000310         db  0x43 ; 'C'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x6f ; 'o'
0000000000000329         db  0x02 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x00 ; '.'
0000000000000341         db  0x04 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0xfc ; '.'
0000000000000359         db  0x02 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xf1 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xa4 ; '.'
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x60 ; '`'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x64 ; 'd'
00000000000003b9         db  0x04 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x20 ; ' '
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'                                         ; DATA XREF=create_token_tree.isra.16+136
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x42 ; 'B'
00000000000003d1         db  0x01 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0xfd ; '.'                                         ; DATA XREF=xstrtoimax+363, xstrtoul+420, xstrtoumax+420
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'                                         ; DATA XREF=map_device.isra.0+158, ino_map_alloc+50
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=duplicate_node+58, duplicate_node+69, duplicate_node+113, duplicate_node_closure+214, duplicate_node_closure+428, calc_eclosure_iter+605, re_acquire_state_context+346, check_node_accept+118, check_halt_state_context.isra.20+111, build_trtable+211, calc_first+67
0000000000000400         db  0x12 ; '.'                                         ; DATA XREF=main+480, sub_6220+69, human_readable+80, human_options+458, xstrtoimax+397, xstrtoimax+1614, xstrtoul+437, xstrtoul+806, xstrtoul+878, xstrtoumax+437, xstrtoumax+806
0000000000000401         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=peek_token+736, peek_token+784, peek_token+1266, peek_token+1402, rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=fts_build+2307, rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0xe1 ; '.'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x2b ; '+'
0000000000000431         db  0x03 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+4162
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'                                         ; DATA XREF=main+2821
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xf3 ; '.'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x92 ; '.'
0000000000000461         db  0x01 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+5446
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x68 ; 'h'
0000000000000479         db  0x03 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xc3 ; '.'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x97 ; '.'
00000000000004a9         db  0x03 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'                                         ; DATA XREF=__strftime_internal+19, __strftime_internal+220
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x03 ; '.'
00000000000004c1         db  0x02 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x82 ; '.'
00000000000004d9         db  0x01 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xf2 ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x93 ; '.'
0000000000000509         db  0x03 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x87 ; '.'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x4e ; 'N'
0000000000000539         db  0x01 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x7b ; '{'
0000000000000551         db  0x01 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'                                         ; DATA XREF=pop_fail_stack.isra.25+138
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0xc0 ; '.'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x7c ; '|'
0000000000000581         db  0x03 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0xaf ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'                                         ; DATA XREF=sub_1dba0+32
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'                                         ; DATA XREF=sub_1e280+182
00000000000005b0         db  0x9e ; '.'                                         ; DATA XREF=sub_1e280+120
00000000000005b1         db  0x02 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'                                         ; DATA XREF=sub_1e280+151
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x49 ; 'I'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xbc ; '.'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0xec ; '.'
00000000000005f9         db  0x02 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0xa2 ; '.'
0000000000000611         db  0x03 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xd3 ; '.'
0000000000000629         db  0x03 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x6f ; 'o'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x19 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xe5 ; '.'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x2b ; '+'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xde ; '.'
00000000000006a1         db  0x03 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x2f ; '/'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x8b ; '.'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xaa ; '.'
00000000000006e9         db  0x02 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0xf3 ; '.'
0000000000000701         db  0x01 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x99 ; '.'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xdf ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x03 ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0xb4 ; '.'
0000000000000761         db  0x03 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xb5 ; '.'
0000000000000779         db  0x01 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x84 ; '.'
0000000000000791         db  0x01 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0xf1 ; '.'
00000000000007a9         db  0x03 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x74 ; 't'
00000000000007c1         db  0x01 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xc2 ; '.'
00000000000007d9         db  0x02 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xad ; '.'
00000000000007f1         db  0x03 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=peek_token+816, peek_token+1670
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0xc6 ; '.'
0000000000000809         db  0x03 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xd4 ; '.'
0000000000000821         db  0x02 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x6f ; 'o'
0000000000000839         db  0x01 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x80 ; '.'
0000000000000851         db  0x04 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x20 ; ' '
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xeb ; '.'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x3d ; '='
0000000000000881         db  0x02 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0xbb ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x83 ; '.'
00000000000008b1         db  0x03 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x37 ; '7'
00000000000008c9         db  0x00 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x96 ; '.'
00000000000008e1         db  0x02 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x39 ; '9'
00000000000008f9         db  0x01 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x1d ; '.'
0000000000000911         db  0x02 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x91 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x0b ; '.'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xf9 ; '.'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x65 ; 'e'
0000000000000971         db  0x01 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x4b ; 'K'
0000000000000989         db  0x02 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0xb2 ; '.'
00000000000009a1         db  0x02 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x76 ; 'v'
00000000000009b9         db  0x02 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0x06 ; '.'
00000000000009d1         db  0x03 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x84 ; '.'
00000000000009e9         db  0x02 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0xa2 ; '.'
0000000000000a01         db  0x00 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0xd2 ; '.'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x12 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x3f ; '?'
0000000000000a31         db  0x00 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x22 ; '"'
0000000000000a49         db  0x00 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x12 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x00 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x2e ; '.'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x12 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x00 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x22 ; '"'
0000000000000a79         db  0x01 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x12 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x00 ; '.'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x00 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0xe2 ; '.'
0000000000000a91         db  0x00 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x12 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x00 ; '.'
0000000000000a99         db  0x00 ; '.'
0000000000000a9a         db  0x00 ; '.'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x00 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0x8b ; '.'
0000000000000aa9         db  0x03 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x12 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x00 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x00 ; '.'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xa9 ; '.'
0000000000000ac1         db  0x00 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x12 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x00 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0x00 ; '.'
0000000000000ac9         db  0x00 ; '.'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x00 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0xad ; '.'
0000000000000ad9         db  0x02 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x12 ; '.'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x00 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x00 ; '.'
0000000000000ae1         db  0x00 ; '.'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x00 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0xcc ; '.'
0000000000000af1         db  0x03 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x12 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0x00 ; '.'
0000000000000af9         db  0x00 ; '.'
0000000000000afa         db  0x00 ; '.'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x00 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0x5a ; 'Z'
0000000000000b09         db  0x00 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x12 ; '.'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x00 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0x00 ; '.'
0000000000000b11         db  0x00 ; '.'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x00 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0x51 ; 'Q'
0000000000000b21         db  0x00 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x12 ; '.'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0x00 ; '.'
0000000000000b29         db  0x00 ; '.'
0000000000000b2a         db  0x00 ; '.'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x00 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0x24 ; '$'
0000000000000b39         db  0x02 ; '.'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'
0000000000000b3c         db  0x12 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x00 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x00 ; '.'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x00 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x00 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x00 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x00 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0xc1 ; '.'
0000000000000b51         db  0x01 ; '.'
0000000000000b52         db  0x00 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x12 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x00 ; '.'
0000000000000b59         db  0x00 ; '.'
0000000000000b5a         db  0x00 ; '.'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x00 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x00 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x00 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x00 ; '.'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0xe8 ; '.'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x00 ; '.'
0000000000000b6b         db  0x00 ; '.'
0000000000000b6c         db  0x12 ; '.'
0000000000000b6d         db  0x00 ; '.'
0000000000000b6e         db  0x00 ; '.'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x00 ; '.'
0000000000000b71         db  0x00 ; '.'
0000000000000b72         db  0x00 ; '.'
0000000000000b73         db  0x00 ; '.'
0000000000000b74         db  0x00 ; '.'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x00 ; '.'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x00 ; '.'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x00 ; '.'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x00 ; '.'
0000000000000b7f         db  0x00 ; '.'
0000000000000b80         db  0x15 ; '.'
0000000000000b81         db  0x02 ; '.'
0000000000000b82         db  0x00 ; '.'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x12 ; '.'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x00 ; '.'
0000000000000b87         db  0x00 ; '.'
0000000000000b88         db  0x00 ; '.'
0000000000000b89         db  0x00 ; '.'
0000000000000b8a         db  0x00 ; '.'
0000000000000b8b         db  0x00 ; '.'
0000000000000b8c         db  0x00 ; '.'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x00 ; '.'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x00 ; '.'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x00 ; '.'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x00 ; '.'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x00 ; '.'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0xda ; '.'
0000000000000b99         db  0x00 ; '.'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x12 ; '.'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x00 ; '.'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0x00 ; '.'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x00 ; '.'
0000000000000ba3         db  0x00 ; '.'
0000000000000ba4         db  0x00 ; '.'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x00 ; '.'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x00 ; '.'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x00 ; '.'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x00 ; '.'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0x20 ; ' '
0000000000000bb1         db  0x04 ; '.'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x12 ; '.'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x00 ; '.'
0000000000000bb7         db  0x00 ; '.'
0000000000000bb8         db  0x00 ; '.'
0000000000000bb9         db  0x00 ; '.'
0000000000000bba         db  0x00 ; '.'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x00 ; '.'
0000000000000bbd         db  0x00 ; '.'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x00 ; '.'
0000000000000bc0         db  0x00 ; '.'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x00 ; '.'
0000000000000bc3         db  0x00 ; '.'
0000000000000bc4         db  0x00 ; '.'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0xfe ; '.'
0000000000000bc9         db  0x00 ; '.'
0000000000000bca         db  0x00 ; '.'
0000000000000bcb         db  0x00 ; '.'
0000000000000bcc         db  0x12 ; '.'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x00 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x00 ; '.'
0000000000000bd1         db  0x00 ; '.'
0000000000000bd2         db  0x00 ; '.'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x00 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x00 ; '.'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x00 ; '.'
0000000000000bdb         db  0x00 ; '.'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x00 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0xcd ; '.'
0000000000000be1         db  0x02 ; '.'
0000000000000be2         db  0x00 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x12 ; '.'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x00 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0x00 ; '.'
0000000000000be9         db  0x00 ; '.'
0000000000000bea         db  0x00 ; '.'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x00 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x00 ; '.'
0000000000000bf1         db  0x00 ; '.'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x00 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0xca ; '.'
0000000000000bf9         db  0x01 ; '.'
0000000000000bfa         db  0x00 ; '.'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x12 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x00 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x00 ; '.'
0000000000000c01         db  0x00 ; '.'
0000000000000c02         db  0x00 ; '.'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x00 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x00 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x00 ; '.'
0000000000000c09         db  0x00 ; '.'
0000000000000c0a         db  0x00 ; '.'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x00 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x00 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x8f ; '.'
0000000000000c11         db  0x04 ; '.'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x20 ; ' '
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x00 ; '.'
0000000000000c17         db  0x00 ; '.'
0000000000000c18         db  0x00 ; '.'
0000000000000c19         db  0x00 ; '.'
0000000000000c1a         db  0x00 ; '.'
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x00 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0x77 ; 'w'
0000000000000c29         db  0x00 ; '.'
0000000000000c2a         db  0x00 ; '.'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x12 ; '.'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x00 ; '.'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0x00 ; '.'
0000000000000c31         db  0x00 ; '.'
0000000000000c32         db  0x00 ; '.'
0000000000000c33         db  0x00 ; '.'
0000000000000c34         db  0x00 ; '.'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x00 ; '.'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x00 ; '.'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x00 ; '.'
0000000000000c3f         db  0x00 ; '.'
0000000000000c40         db  0x35 ; '5'
0000000000000c41         db  0x02 ; '.'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x12 ; '.'
0000000000000c45         db  0x00 ; '.'
0000000000000c46         db  0x00 ; '.'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0x00 ; '.'
0000000000000c49         db  0x00 ; '.'
0000000000000c4a         db  0x00 ; '.'
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x00 ; '.'
0000000000000c4d         db  0x00 ; '.'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x00 ; '.'
0000000000000c50         db  0x00 ; '.'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x00 ; '.'
0000000000000c53         db  0x00 ; '.'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x00 ; '.'
0000000000000c58         db  0xc9 ; '.'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x12 ; '.'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x00 ; '.'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0x00 ; '.'
0000000000000c61         db  0x00 ; '.'
0000000000000c62         db  0x00 ; '.'
0000000000000c63         db  0x00 ; '.'
0000000000000c64         db  0x00 ; '.'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x00 ; '.'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x00 ; '.'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x00 ; '.'
0000000000000c6b         db  0x00 ; '.'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0x57 ; 'W'
0000000000000c71         db  0x02 ; '.'
0000000000000c72         db  0x00 ; '.'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x12 ; '.'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x00 ; '.'
0000000000000c79         db  0x00 ; '.'
0000000000000c7a         db  0x00 ; '.'
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x00 ; '.'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x00 ; '.'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x00 ; '.'
0000000000000c83         db  0x00 ; '.'
0000000000000c84         db  0x00 ; '.'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x00 ; '.'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0x59 ; 'Y'
0000000000000c89         db  0x03 ; '.'
0000000000000c8a         db  0x00 ; '.'
0000000000000c8b         db  0x00 ; '.'
0000000000000c8c         db  0x22 ; '"'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x00 ; '.'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0x00 ; '.'
0000000000000c91         db  0x00 ; '.'
0000000000000c92         db  0x00 ; '.'
0000000000000c93         db  0x00 ; '.'
0000000000000c94         db  0x00 ; '.'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x00 ; '.'
0000000000000c99         db  0x00 ; '.'
0000000000000c9a         db  0x00 ; '.'
0000000000000c9b         db  0x00 ; '.'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x00 ; '.'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0xc4 ; '.'
0000000000000ca1         db  0x02 ; '.'
0000000000000ca2         db  0x00 ; '.'
0000000000000ca3         db  0x00 ; '.'
0000000000000ca4         db  0x12 ; '.'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x00 ; '.'
0000000000000ca7         db  0x00 ; '.'
0000000000000ca8         db  0x00 ; '.'
0000000000000ca9         db  0x00 ; '.'
0000000000000caa         db  0x00 ; '.'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x00 ; '.'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x00 ; '.'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x00 ; '.'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x00 ; '.'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x00 ; '.'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0x9d ; '.'
0000000000000cb9         db  0x01 ; '.'
0000000000000cba         db  0x00 ; '.'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x12 ; '.'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x00 ; '.'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x00 ; '.'
0000000000000cc1         db  0x00 ; '.'
0000000000000cc2         db  0x00 ; '.'
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x00 ; '.'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x00 ; '.'
0000000000000ccb         db  0x00 ; '.'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x00 ; '.'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0x45 ; 'E'
0000000000000cd1         db  0x03 ; '.'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x12 ; '.'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x00 ; '.'
0000000000000cd7         db  0x00 ; '.'
0000000000000cd8         db  0x00 ; '.'
0000000000000cd9         db  0x00 ; '.'
0000000000000cda         db  0x00 ; '.'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x00 ; '.'
0000000000000cdd         db  0x00 ; '.'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x00 ; '.'
0000000000000ce0         db  0x00 ; '.'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x00 ; '.'
0000000000000ce4         db  0x00 ; '.'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0x61 ; 'a'
0000000000000ce9         db  0x02 ; '.'
0000000000000cea         db  0x00 ; '.'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x12 ; '.'
0000000000000ced         db  0x00 ; '.'                                         ; DATA XREF=sub_1c260+2831
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x00 ; '.'
0000000000000cf1         db  0x00 ; '.'
0000000000000cf2         db  0x00 ; '.'
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x00 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x00 ; '.'
0000000000000cf9         db  0x00 ; '.'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x00 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x00 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0x6e ; 'n'
0000000000000d01         db  0x03 ; '.'
0000000000000d02         db  0x00 ; '.'
0000000000000d03         db  0x00 ; '.'
0000000000000d04         db  0x12 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x00 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0x00 ; '.'
0000000000000d09         db  0x00 ; '.'
0000000000000d0a         db  0x00 ; '.'
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x00 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x00 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x00 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0xd8 ; '.'
0000000000000d19         db  0x01 ; '.'
0000000000000d1a         db  0x00 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x11 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x19 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0xa8 ; '.'
0000000000000d21         db  0x80 ; '.'
0000000000000d22         db  0x22 ; '"'
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x00 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x08 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x00 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x05 ; '.'
0000000000000d31         db  0x04 ; '.'
0000000000000d32         db  0x00 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x11 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x19 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0xa0 ; '.'
0000000000000d39         db  0x80 ; '.'
0000000000000d3a         db  0x22 ; '"'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x08 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x00 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0xf7 ; '.'
0000000000000d49         db  0x00 ; '.'
0000000000000d4a         db  0x00 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x11 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x19 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0xb0 ; '.'
0000000000000d51         db  0x80 ; '.'
0000000000000d52         db  0x22 ; '"'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x00 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x08 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x00 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x0a ; '.'
0000000000000d61         db  0x01 ; '.'
0000000000000d62         db  0x00 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x21 ; '!'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x19 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0xc8 ; '.'
0000000000000d69         db  0x80 ; '.'
0000000000000d6a         db  0x22 ; '"'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x08 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x00 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x00 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x10 ; '.'
0000000000000d79         db  0x04 ; '.'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x11 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x19 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0xc8 ; '.'
0000000000000d81         db  0x80 ; '.'
0000000000000d82         db  0x22 ; '"'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x08 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x00 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x0d ; '.'
0000000000000d91         db  0x03 ; '.'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x21 ; '!'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x19 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0xa0 ; '.'
0000000000000d99         db  0x80 ; '.'
0000000000000d9a         db  0x22 ; '"'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x08 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x00 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x8f ; '.'
0000000000000da9         db  0x02 ; '.'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x11 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x19 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0xe0 ; '.'
0000000000000db1         db  0x80 ; '.'
0000000000000db2         db  0x22 ; '"'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x08 ; '.'
0000000000000db9         db  0x00 ; '.'
0000000000000dba         db  0x00 ; '.'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x68 ; 'h'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x11 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x19 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0xb8 ; '.'
0000000000000dc9         db  0x80 ; '.'
0000000000000dca         db  0x22 ; '"'
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x04 ; '.'
0000000000000dd1         db  0x00 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x00 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x7d ; '}'
0000000000000dd9         db  0x02 ; '.'
0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x11 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x19 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0xc0 ; '.'
0000000000000de1         db  0x80 ; '.'
0000000000000de2         db  0x22 ; '"'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x08 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x00 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xdf0; 0x1299[ (1193 bytes)
        ; File offset : [3568; 4761[ (1193 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000df0         db  0x00 ; '.'
0000000000000df1         db  0x6c ; 'l'
0000000000000df2         db  0x69 ; 'i'
0000000000000df3         db  0x62 ; 'b'
0000000000000df4         db  0x63 ; 'c'
0000000000000df5         db  0x2e ; '.'
0000000000000df6         db  0x73 ; 's'
0000000000000df7         db  0x6f ; 'o'
0000000000000df8         db  0x2e ; '.'
0000000000000df9         db  0x36 ; '6'
0000000000000dfa         db  0x00 ; '.'
0000000000000dfb         db  0x66 ; 'f'
0000000000000dfc         db  0x66 ; 'f'
0000000000000dfd         db  0x6c ; 'l'
0000000000000dfe         db  0x75 ; 'u'
0000000000000dff         db  0x73 ; 's'
0000000000000e00         db  0x68 ; 'h'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x73 ; 's'
0000000000000e03         db  0x74 ; 't'
0000000000000e04         db  0x72 ; 'r'
0000000000000e05         db  0x63 ; 'c'
0000000000000e06         db  0x70 ; 'p'
0000000000000e07         db  0x79 ; 'y'
0000000000000e08         db  0x00 ; '.'
0000000000000e09         db  0x67 ; 'g'
0000000000000e0a         db  0x6d ; 'm'
0000000000000e0b         db  0x74 ; 't'
0000000000000e0c         db  0x69 ; 'i'
0000000000000e0d         db  0x6d ; 'm'
0000000000000e0e         db  0x65 ; 'e'
0000000000000e0f         db  0x5f ; '_'
0000000000000e10         db  0x72 ; 'r'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x5f ; '_'
0000000000000e13         db  0x5f ; '_'
0000000000000e14         db  0x70 ; 'p'
0000000000000e15         db  0x72 ; 'r'
0000000000000e16         db  0x69 ; 'i'
0000000000000e17         db  0x6e ; 'n'
0000000000000e18         db  0x74 ; 't'
0000000000000e19         db  0x66 ; 'f'
0000000000000e1a         db  0x5f ; '_'
0000000000000e1b         db  0x63 ; 'c'
0000000000000e1c         db  0x68 ; 'h'
0000000000000e1d         db  0x6b ; 'k'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x66 ; 'f'
0000000000000e20         db  0x6e ; 'n'
0000000000000e21         db  0x6d ; 'm'
0000000000000e22         db  0x61 ; 'a'
0000000000000e23         db  0x74 ; 't'
0000000000000e24         db  0x63 ; 'c'
0000000000000e25         db  0x68 ; 'h'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x72 ; 'r'
0000000000000e28         db  0x65 ; 'e'
0000000000000e29         db  0x61 ; 'a'
0000000000000e2a         db  0x64 ; 'd'
0000000000000e2b         db  0x64 ; 'd'
0000000000000e2c         db  0x69 ; 'i'
0000000000000e2d         db  0x72 ; 'r'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x73 ; 's'
0000000000000e30         db  0x65 ; 'e'
0000000000000e31         db  0x74 ; 't'
0000000000000e32         db  0x6c ; 'l'
0000000000000e33         db  0x6f ; 'o'
0000000000000e34         db  0x63 ; 'c'
0000000000000e35         db  0x61 ; 'a'
0000000000000e36         db  0x6c ; 'l'
0000000000000e37         db  0x65 ; 'e'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x6d ; 'm'
0000000000000e3a         db  0x62 ; 'b'
0000000000000e3b         db  0x72 ; 'r'
0000000000000e3c         db  0x74 ; 't'
0000000000000e3d         db  0x6f ; 'o'
0000000000000e3e         db  0x77 ; 'w'
0000000000000e3f         db  0x63 ; 'c'
0000000000000e40         db  0x00 ; '.'
0000000000000e41         db  0x74 ; 't'
0000000000000e42         db  0x6f ; 'o'
0000000000000e43         db  0x77 ; 'w'
0000000000000e44         db  0x6c ; 'l'
0000000000000e45         db  0x6f ; 'o'
0000000000000e46         db  0x77 ; 'w'
0000000000000e47         db  0x65 ; 'e'
0000000000000e48         db  0x72 ; 'r'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x66 ; 'f'
0000000000000e4b         db  0x6f ; 'o'
0000000000000e4c         db  0x70 ; 'p'
0000000000000e4d         db  0x65 ; 'e'
0000000000000e4e         db  0x6e ; 'n'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x73 ; 's'
0000000000000e51         db  0x74 ; 't'
0000000000000e52         db  0x72 ; 'r'
0000000000000e53         db  0x6e ; 'n'
0000000000000e54         db  0x63 ; 'c'
0000000000000e55         db  0x6d ; 'm'
0000000000000e56         db  0x70 ; 'p'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x6f ; 'o'
0000000000000e59         db  0x70 ; 'p'
0000000000000e5a         db  0x74 ; 't'
0000000000000e5b         db  0x69 ; 'i'
0000000000000e5c         db  0x6e ; 'n'
0000000000000e5d         db  0x64 ; 'd'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x73 ; 's'
0000000000000e60         db  0x74 ; 't'
0000000000000e61         db  0x72 ; 'r'
0000000000000e62         db  0x72 ; 'r'
0000000000000e63         db  0x63 ; 'c'
0000000000000e64         db  0x68 ; 'h'
0000000000000e65         db  0x72 ; 'r'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x66 ; 'f'
0000000000000e68         db  0x66 ; 'f'
0000000000000e69         db  0x6c ; 'l'
0000000000000e6a         db  0x75 ; 'u'
0000000000000e6b         db  0x73 ; 's'
0000000000000e6c         db  0x68 ; 'h'
0000000000000e6d         db  0x5f ; '_'
0000000000000e6e         db  0x75 ; 'u'
0000000000000e6f         db  0x6e ; 'n'
0000000000000e70         db  0x6c ; 'l'
0000000000000e71         db  0x6f ; 'o'
0000000000000e72         db  0x63 ; 'c'
0000000000000e73         db  0x6b ; 'k'
0000000000000e74         db  0x65 ; 'e'
0000000000000e75         db  0x64 ; 'd'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x64 ; 'd'
0000000000000e78         db  0x63 ; 'c'
0000000000000e79         db  0x67 ; 'g'
0000000000000e7a         db  0x65 ; 'e'
0000000000000e7b         db  0x74 ; 't'
0000000000000e7c         db  0x74 ; 't'
0000000000000e7d         db  0x65 ; 'e'
0000000000000e7e         db  0x78 ; 'x'
0000000000000e7f         db  0x74 ; 't'
0000000000000e80         db  0x00 ; '.'
0000000000000e81         db  0x77 ; 'w'
0000000000000e82         db  0x63 ; 'c'
0000000000000e83         db  0x72 ; 'r'
0000000000000e84         db  0x74 ; 't'
0000000000000e85         db  0x6f ; 'o'
0000000000000e86         db  0x6d ; 'm'
0000000000000e87         db  0x62 ; 'b'
0000000000000e88         db  0x00 ; '.'
0000000000000e89         db  0x63 ; 'c'
0000000000000e8a         db  0x6c ; 'l'
0000000000000e8b         db  0x6f ; 'o'
0000000000000e8c         db  0x73 ; 's'
0000000000000e8d         db  0x65 ; 'e'
0000000000000e8e         db  0x64 ; 'd'
0000000000000e8f         db  0x69 ; 'i'
0000000000000e90         db  0x72 ; 'r'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x66 ; 'f'
0000000000000e93         db  0x63 ; 'c'
0000000000000e94         db  0x68 ; 'h'
0000000000000e95         db  0x64 ; 'd'
0000000000000e96         db  0x69 ; 'i'
0000000000000e97         db  0x72 ; 'r'
0000000000000e98         db  0x00 ; '.'
0000000000000e99         db  0x65 ; 'e'
0000000000000e9a         db  0x72 ; 'r'
0000000000000e9b         db  0x72 ; 'r'
0000000000000e9c         db  0x6f ; 'o'
0000000000000e9d         db  0x72 ; 'r'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x5f ; '_'
0000000000000ea0         db  0x5f ; '_'
0000000000000ea1         db  0x73 ; 's'
0000000000000ea2         db  0x74 ; 't'
0000000000000ea3         db  0x61 ; 'a'
0000000000000ea4         db  0x63 ; 'c'
0000000000000ea5         db  0x6b ; 'k'
0000000000000ea6         db  0x5f ; '_'
0000000000000ea7         db  0x63 ; 'c'
0000000000000ea8         db  0x68 ; 'h'
0000000000000ea9         db  0x6b ; 'k'
0000000000000eaa         db  0x5f ; '_'
0000000000000eab         db  0x66 ; 'f'
0000000000000eac         db  0x61 ; 'a'
0000000000000ead         db  0x69 ; 'i'
0000000000000eae         db  0x6c ; 'l'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x5f ; '_'
0000000000000eb1         db  0x5f ; '_'
0000000000000eb2         db  0x6c ; 'l'
0000000000000eb3         db  0x78 ; 'x'
0000000000000eb4         db  0x73 ; 's'
0000000000000eb5         db  0x74 ; 't'
0000000000000eb6         db  0x61 ; 'a'
0000000000000eb7         db  0x74 ; 't'
0000000000000eb8         db  0x00 ; '.'
0000000000000eb9         db  0x69 ; 'i'
0000000000000eba         db  0x73 ; 's'
0000000000000ebb         db  0x77 ; 'w'
0000000000000ebc         db  0x70 ; 'p'
0000000000000ebd         db  0x72 ; 'r'
0000000000000ebe         db  0x69 ; 'i'
0000000000000ebf         db  0x6e ; 'n'
0000000000000ec0         db  0x74 ; 't'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x72 ; 'r'
0000000000000ec3         db  0x65 ; 'e'
0000000000000ec4         db  0x61 ; 'a'
0000000000000ec5         db  0x6c ; 'l'
0000000000000ec6         db  0x6c ; 'l'
0000000000000ec7         db  0x6f ; 'o'
0000000000000ec8         db  0x63 ; 'c'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x66 ; 'f'
0000000000000ecb         db  0x73 ; 's'
0000000000000ecc         db  0x74 ; 't'
0000000000000ecd         db  0x61 ; 'a'
0000000000000ece         db  0x74 ; 't'
0000000000000ecf         db  0x66 ; 'f'
0000000000000ed0         db  0x73 ; 's'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x62 ; 'b'
0000000000000ed3         db  0x74 ; 't'
0000000000000ed4         db  0x6f ; 'o'
0000000000000ed5         db  0x77 ; 'w'
0000000000000ed6         db  0x63 ; 'c'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x74 ; 't'
0000000000000ed9         db  0x6f ; 'o'
0000000000000eda         db  0x77 ; 'w'
0000000000000edb         db  0x75 ; 'u'
0000000000000edc         db  0x70 ; 'p'
0000000000000edd         db  0x70 ; 'p'
0000000000000ede         db  0x65 ; 'e'
0000000000000edf         db  0x72 ; 'r'
0000000000000ee0         db  0x00 ; '.'
0000000000000ee1         db  0x61 ; 'a'
0000000000000ee2         db  0x62 ; 'b'
0000000000000ee3         db  0x6f ; 'o'
0000000000000ee4         db  0x72 ; 'r'
0000000000000ee5         db  0x74 ; 't'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x73 ; 's'
0000000000000ee8         db  0x74 ; 't'
0000000000000ee9         db  0x64 ; 'd'
0000000000000eea         db  0x69 ; 'i'
0000000000000eeb         db  0x6e ; 'n'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x5f ; '_'
0000000000000eee         db  0x65 ; 'e'
0000000000000eef         db  0x78 ; 'x'
0000000000000ef0         db  0x69 ; 'i'
0000000000000ef1         db  0x74 ; 't'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x6d ; 'm'
0000000000000ef4         db  0x65 ; 'e'
0000000000000ef5         db  0x6d ; 'm'
0000000000000ef6         db  0x63 ; 'c'
0000000000000ef7         db  0x68 ; 'h'
0000000000000ef8         db  0x72 ; 'r'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x70 ; 'p'
0000000000000efb         db  0x72 ; 'r'
0000000000000efc         db  0x6f ; 'o'
0000000000000efd         db  0x67 ; 'g'
0000000000000efe         db  0x72 ; 'r'
0000000000000eff         db  0x61 ; 'a'
                     aMinvocationnam:
0000000000000f00         db         "m_invocation_name", 0
0000000000000f12         db  0x73 ; 's'
0000000000000f13         db  0x74 ; 't'
0000000000000f14         db  0x72 ; 'r'
0000000000000f15         db  0x66 ; 'f'
0000000000000f16         db  0x74 ; 't'
0000000000000f17         db  0x69 ; 'i'
0000000000000f18         db  0x6d ; 'm'
0000000000000f19         db  0x65 ; 'e'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x5f ; '_'
0000000000000f1c         db  0x5f ; '_'
0000000000000f1d         db  0x61 ; 'a'
0000000000000f1e         db  0x73 ; 's'
0000000000000f1f         db  0x73 ; 's'
0000000000000f20         db  0x65 ; 'e'
0000000000000f21         db  0x72 ; 'r'
0000000000000f22         db  0x74 ; 't'
0000000000000f23         db  0x5f ; '_'
0000000000000f24         db  0x66 ; 'f'
0000000000000f25         db  0x61 ; 'a'
0000000000000f26         db  0x69 ; 'i'
0000000000000f27         db  0x6c ; 'l'
0000000000000f28         db  0x00 ; '.'
0000000000000f29         db  0x69 ; 'i'
0000000000000f2a         db  0x73 ; 's'
0000000000000f2b         db  0x77 ; 'w'
0000000000000f2c         db  0x61 ; 'a'
0000000000000f2d         db  0x6c ; 'l'
0000000000000f2e         db  0x6e ; 'n'
0000000000000f2f         db  0x75 ; 'u'
0000000000000f30         db  0x6d ; 'm'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x6c ; 'l'
0000000000000f33         db  0x6f ; 'o'
0000000000000f34         db  0x63 ; 'c'
0000000000000f35         db  0x61 ; 'a'
0000000000000f36         db  0x6c ; 'l'
0000000000000f37         db  0x74 ; 't'
0000000000000f38         db  0x69 ; 'i'
0000000000000f39         db  0x6d ; 'm'
0000000000000f3a         db  0x65 ; 'e'
0000000000000f3b         db  0x5f ; '_'
0000000000000f3c         db  0x72 ; 'r'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x5f ; '_'
0000000000000f3f         db  0x5f ; '_'
0000000000000f40         db  0x63 ; 'c'
0000000000000f41         db  0x74 ; 't'
0000000000000f42         db  0x79 ; 'y'
0000000000000f43         db  0x70 ; 'p'
0000000000000f44         db  0x65 ; 'e'
0000000000000f45         db  0x5f ; '_'
0000000000000f46         db  0x67 ; 'g'
0000000000000f47         db  0x65 ; 'e'
0000000000000f48         db  0x74 ; 't'
0000000000000f49         db  0x5f ; '_'
0000000000000f4a         db  0x6d ; 'm'
0000000000000f4b         db  0x62 ; 'b'
0000000000000f4c         db  0x5f ; '_'
0000000000000f4d         db  0x63 ; 'c'
0000000000000f4e         db  0x75 ; 'u'
0000000000000f4f         db  0x72 ; 'r'
0000000000000f50         db  0x5f ; '_'
0000000000000f51         db  0x6d ; 'm'
0000000000000f52         db  0x61 ; 'a'
0000000000000f53         db  0x78 ; 'x'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x73 ; 's'
0000000000000f56         db  0x65 ; 'e'
0000000000000f57         db  0x74 ; 't'
0000000000000f58         db  0x6d ; 'm'
0000000000000f59         db  0x6e ; 'n'
0000000000000f5a         db  0x74 ; 't'
0000000000000f5b         db  0x65 ; 'e'
0000000000000f5c         db  0x6e ; 'n'
0000000000000f5d         db  0x74 ; 't'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x66 ; 'f'
0000000000000f60         db  0x65 ; 'e'
0000000000000f61         db  0x6f ; 'o'
0000000000000f62         db  0x66 ; 'f'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x63 ; 'c'
0000000000000f65         db  0x61 ; 'a'
0000000000000f66         db  0x6c ; 'l'
0000000000000f67         db  0x6c ; 'l'
0000000000000f68         db  0x6f ; 'o'
0000000000000f69         db  0x63 ; 'c'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x73 ; 's'
0000000000000f6c         db  0x74 ; 't'
0000000000000f6d         db  0x72 ; 'r'
0000000000000f6e         db  0x6c ; 'l'
0000000000000f6f         db  0x65 ; 'e'
0000000000000f70         db  0x6e ; 'n'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x69 ; 'i'
0000000000000f73         db  0x73 ; 's'
0000000000000f74         db  0x77 ; 'w'
0000000000000f75         db  0x63 ; 'c'
0000000000000f76         db  0x74 ; 't'
0000000000000f77         db  0x79 ; 'y'
0000000000000f78         db  0x70 ; 'p'
0000000000000f79         db  0x65 ; 'e'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x6d ; 'm'
0000000000000f7c         db  0x65 ; 'e'
0000000000000f7d         db  0x6d ; 'm'
0000000000000f7e         db  0x73 ; 's'
0000000000000f7f         db  0x65 ; 'e'
0000000000000f80         db  0x74 ; 't'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x6c ; 'l'
0000000000000f83         db  0x6f ; 'o'
0000000000000f84         db  0x63 ; 'c'
0000000000000f85         db  0x61 ; 'a'
0000000000000f86         db  0x6c ; 'l'
0000000000000f87         db  0x65 ; 'e'
0000000000000f88         db  0x63 ; 'c'
0000000000000f89         db  0x6f ; 'o'
0000000000000f8a         db  0x6e ; 'n'
0000000000000f8b         db  0x76 ; 'v'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x73 ; 's'
0000000000000f8e         db  0x74 ; 't'
0000000000000f8f         db  0x72 ; 'r'
0000000000000f90         db  0x73 ; 's'
0000000000000f91         db  0x74 ; 't'
0000000000000f92         db  0x72 ; 'r'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x5f ; '_'
0000000000000f95         db  0x5f ; '_'
0000000000000f96         db  0x65 ; 'e'
0000000000000f97         db  0x72 ; 'r'
0000000000000f98         db  0x72 ; 'r'
0000000000000f99         db  0x6e ; 'n'
0000000000000f9a         db  0x6f ; 'o'
0000000000000f9b         db  0x5f ; '_'
0000000000000f9c         db  0x6c ; 'l'
0000000000000f9d         db  0x6f ; 'o'
0000000000000f9e         db  0x63 ; 'c'
0000000000000f9f         db  0x61 ; 'a'
0000000000000fa0         db  0x74 ; 't'
0000000000000fa1         db  0x69 ; 'i'
0000000000000fa2         db  0x6f ; 'o'
0000000000000fa3         db  0x6e ; 'n'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x6d ; 'm'
0000000000000fa6         db  0x65 ; 'e'
0000000000000fa7         db  0x6d ; 'm'
0000000000000fa8         db  0x63 ; 'c'
0000000000000fa9         db  0x6d ; 'm'
0000000000000faa         db  0x70 ; 'p'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x64 ; 'd'
0000000000000fad         db  0x75 ; 'u'
0000000000000fae         db  0x70 ; 'p'
0000000000000faf         db  0x32 ; '2'
0000000000000fb0         db  0x00 ; '.'
0000000000000fb1         db  0x75 ; 'u'
0000000000000fb2         db  0x6e ; 'n'
0000000000000fb3         db  0x73 ; 's'
0000000000000fb4         db  0x65 ; 'e'
0000000000000fb5         db  0x74 ; 't'
0000000000000fb6         db  0x65 ; 'e'
0000000000000fb7         db  0x6e ; 'n'
0000000000000fb8         db  0x76 ; 'v'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x5f ; '_'
0000000000000fbb         db  0x5f ; '_'
0000000000000fbc         db  0x66 ; 'f'
0000000000000fbd         db  0x70 ; 'p'
0000000000000fbe         db  0x72 ; 'r'
                     aIntfchk:
0000000000000fbf         db         "intf_chk", 0                               ; DATA XREF=set_regs+166
0000000000000fc8         db  0x73 ; 's'
0000000000000fc9         db  0x74 ; 't'
0000000000000fca         db  0x64 ; 'd'
0000000000000fcb         db  0x6f ; 'o'
0000000000000fcc         db  0x75 ; 'u'
0000000000000fcd         db  0x74 ; 't'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x66 ; 'f'
0000000000000fd0         db  0x70 ; 'p'
0000000000000fd1         db  0x75 ; 'u'
0000000000000fd2         db  0x74 ; 't'
0000000000000fd3         db  0x63 ; 'c'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x6c ; 'l'
0000000000000fd6         db  0x73 ; 's'
0000000000000fd7         db  0x65 ; 'e'
0000000000000fd8         db  0x65 ; 'e'
0000000000000fd9         db  0x6b ; 'k'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x6d ; 'm'
0000000000000fdc         db  0x65 ; 'e'
0000000000000fdd         db  0x6d ; 'm'
0000000000000fde         db  0x63 ; 'c'
0000000000000fdf         db  0x70 ; 'p'
0000000000000fe0         db  0x79 ; 'y'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x66 ; 'f'
0000000000000fe3         db  0x63 ; 'c'
0000000000000fe4         db  0x6c ; 'l'
0000000000000fe5         db  0x6f ; 'o'
0000000000000fe6         db  0x73 ; 's'
0000000000000fe7         db  0x65 ; 'e'
0000000000000fe8         db  0x00 ; '.'
0000000000000fe9         db  0x67 ; 'g'
0000000000000fea         db  0x65 ; 'e'
0000000000000feb         db  0x74 ; 't'
0000000000000fec         db  0x6d ; 'm'
0000000000000fed         db  0x6e ; 'n'
0000000000000fee         db  0x74 ; 't'
0000000000000fef         db  0x65 ; 'e'
0000000000000ff0         db  0x6e ; 'n'
0000000000000ff1         db  0x74 ; 't'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x5f ; '_'
0000000000000ff4         db  0x5f ; '_'
0000000000000ff5         db  0x73 ; 's'
0000000000000ff6         db  0x74 ; 't'
0000000000000ff7         db  0x72 ; 'r'
0000000000000ff8         db  0x74 ; 't'
0000000000000ff9         db  0x6f ; 'o'
0000000000000ffa         db  0x6c ; 'l'
0000000000000ffb         db  0x5f ; '_'
0000000000000ffc         db  0x69 ; 'i'
0000000000000ffd         db  0x6e ; 'n'
0000000000000ffe         db  0x74 ; 't'
0000000000000fff         db  0x65 ; 'e'
                     aRnal:
0000000000001000         db         "rnal", 0                                   ; DATA XREF=rpl_fts_open+165, rpl_fts_open+170, rpl_fts_open+735, rpl_fts_children+80, rpl_fts_children+95
0000000000001005         db  0x73 ; 's'
0000000000001006         db  0x74 ; 't'
0000000000001007         db  0x72 ; 'r'
0000000000001008         db  0x74 ; 't'
0000000000001009         db  0x6f ; 'o'
000000000000100a         db  0x75 ; 'u'
000000000000100b         db  0x6c ; 'l'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x6d ; 'm'
                     aAlloc:
000000000000100e         db         "alloc", 0
0000000000001014         db  0x66 ; 'f'
0000000000001015         db  0x64 ; 'd'
0000000000001016         db  0x6f ; 'o'
0000000000001017         db  0x70 ; 'p'
0000000000001018         db  0x65 ; 'e'
0000000000001019         db  0x6e ; 'n'
000000000000101a         db  0x64 ; 'd'
000000000000101b         db  0x69 ; 'i'
000000000000101c         db  0x72 ; 'r'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x74 ; 't'
000000000000101f         db  0x69 ; 'i'
0000000000001020         db  0x6d ; 'm'
0000000000001021         db  0x65 ; 'e'
0000000000001022         db  0x67 ; 'g'
0000000000001023         db  0x6d ; 'm'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x6d ; 'm'
0000000000001026         db  0x62 ; 'b'
0000000000001027         db  0x73 ; 's'
0000000000001028         db  0x69 ; 'i'
0000000000001029         db  0x6e ; 'n'
000000000000102a         db  0x69 ; 'i'
000000000000102b         db  0x74 ; 't'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x74 ; 't'
000000000000102e         db  0x7a ; 'z'
000000000000102f         db  0x73 ; 's'
0000000000001030         db  0x65 ; 'e'
0000000000001031         db  0x74 ; 't'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x5f ; '_'
0000000000001034         db  0x5f ; '_'
0000000000001035         db  0x75 ; 'u'
0000000000001036         db  0x66 ; 'f'
0000000000001037         db  0x6c ; 'l'
0000000000001038         db  0x6f ; 'o'
0000000000001039         db  0x77 ; 'w'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x6e ; 'n'
000000000000103c         db  0x6c ; 'l'
000000000000103d         db  0x5f ; '_'
000000000000103e         db  0x6c ; 'l'
000000000000103f         db  0x61 ; 'a'
0000000000001040         db  0x6e ; 'n'
0000000000001041         db  0x67 ; 'g'
0000000000001042         db  0x69 ; 'i'
0000000000001043         db  0x6e ; 'n'
0000000000001044         db  0x66 ; 'f'
0000000000001045         db  0x6f ; 'o'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x68 ; 'h'
0000000000001048         db  0x61 ; 'a'
0000000000001049         db  0x73 ; 's'
000000000000104a         db  0x6d ; 'm'
000000000000104b         db  0x6e ; 'n'
000000000000104c         db  0x74 ; 't'
000000000000104d         db  0x6f ; 'o'
000000000000104e         db  0x70 ; 'p'
000000000000104f         db  0x74 ; 't'
0000000000001050         db  0x00 ; '.'
0000000000001051         db  0x5f ; '_'
0000000000001052         db  0x5f ; '_'
0000000000001053         db  0x63 ; 'c'
0000000000001054         db  0x74 ; 't'
0000000000001055         db  0x79 ; 'y'
0000000000001056         db  0x70 ; 'p'
0000000000001057         db  0x65 ; 'e'
0000000000001058         db  0x5f ; '_'
0000000000001059         db  0x62 ; 'b'
000000000000105a         db  0x5f ; '_'
000000000000105b         db  0x6c ; 'l'
000000000000105c         db  0x6f ; 'o'
000000000000105d         db  0x63 ; 'c'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x67 ; 'g'
0000000000001060         db  0x65 ; 'e'
0000000000001061         db  0x74 ; 't'
0000000000001062         db  0x65 ; 'e'
0000000000001063         db  0x6e ; 'n'
0000000000001064         db  0x76 ; 'v'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x73 ; 's'
0000000000001067         db  0x73 ; 's'
0000000000001068         db  0x63 ; 'c'
0000000000001069         db  0x61 ; 'a'
000000000000106a         db  0x6e ; 'n'
000000000000106b         db  0x66 ; 'f'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x6f ; 'o'
000000000000106e         db  0x70 ; 'p'
000000000000106f         db  0x74 ; 't'
0000000000001070         db  0x61 ; 'a'
0000000000001071         db  0x72 ; 'r'
0000000000001072         db  0x67 ; 'g'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x5f ; '_'
0000000000001075         db  0x5f ; '_'
0000000000001076         db  0x66 ; 'f'
0000000000001077         db  0x72 ; 'r'
0000000000001078         db  0x65 ; 'e'
0000000000001079         db  0x61 ; 'a'
000000000000107a         db  0x64 ; 'd'
000000000000107b         db  0x69 ; 'i'
000000000000107c         db  0x6e ; 'n'
000000000000107d         db  0x67 ; 'g'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x73 ; 's'
0000000000001080         db  0x74 ; 't'
0000000000001081         db  0x64 ; 'd'
0000000000001082         db  0x65 ; 'e'
0000000000001083         db  0x72 ; 'r'
0000000000001084         db  0x72 ; 'r'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x77 ; 'w'
0000000000001087         db  0x63 ; 'c'
0000000000001088         db  0x77 ; 'w'
0000000000001089         db  0x69 ; 'i'
000000000000108a         db  0x64 ; 'd'
000000000000108b         db  0x74 ; 't'
000000000000108c         db  0x68 ; 'h'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x67 ; 'g'
000000000000108f         db  0x65 ; 'e'
0000000000001090         db  0x74 ; 't'
0000000000001091         db  0x6f ; 'o'
0000000000001092         db  0x70 ; 'p'
0000000000001093         db  0x74 ; 't'
0000000000001094         db  0x5f ; '_'
0000000000001095         db  0x6c ; 'l'
0000000000001096         db  0x6f ; 'o'
0000000000001097         db  0x6e ; 'n'
0000000000001098         db  0x67 ; 'g'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x66 ; 'f'
000000000000109b         db  0x72 ; 'r'
000000000000109c         db  0x65 ; 'e'
000000000000109d         db  0x6f ; 'o'
000000000000109e         db  0x70 ; 'p'
000000000000109f         db  0x65 ; 'e'
00000000000010a0         db  0x6e ; 'n'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x5f ; '_'
00000000000010a3         db  0x5f ; '_'
00000000000010a4         db  0x66 ; 'f'
00000000000010a5         db  0x78 ; 'x'
00000000000010a6         db  0x73 ; 's'
00000000000010a7         db  0x74 ; 't'
00000000000010a8         db  0x61 ; 'a'
00000000000010a9         db  0x74 ; 't'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x66 ; 'f'
00000000000010ac         db  0x69 ; 'i'
00000000000010ad         db  0x6c ; 'l'
00000000000010ae         db  0x65 ; 'e'
00000000000010af         db  0x6e ; 'n'
00000000000010b0         db  0x6f ; 'o'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x5f ; '_'
00000000000010b3         db  0x5f ; '_'
00000000000010b4         db  0x67 ; 'g'
00000000000010b5         db  0x65 ; 'e'
00000000000010b6         db  0x74 ; 't'
00000000000010b7         db  0x64 ; 'd'
00000000000010b8         db  0x65 ; 'e'
00000000000010b9         db  0x6c ; 'l'
00000000000010ba         db  0x69 ; 'i'
00000000000010bb         db  0x6d ; 'm'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x66 ; 'f'
00000000000010be         db  0x77 ; 'w'
00000000000010bf         db  0x72 ; 'r'
00000000000010c0         db  0x69 ; 'i'
00000000000010c1         db  0x74 ; 't'
00000000000010c2         db  0x65 ; 'e'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x5f ; '_'
00000000000010c5         db  0x5f ; '_'
00000000000010c6         db  0x6d ; 'm'
00000000000010c7         db  0x65 ; 'e'
00000000000010c8         db  0x6d ; 'm'
00000000000010c9         db  0x63 ; 'c'
00000000000010ca         db  0x70 ; 'p'
00000000000010cb         db  0x79 ; 'y'
00000000000010cc         db  0x5f ; '_'
00000000000010cd         db  0x63 ; 'c'
00000000000010ce         db  0x68 ; 'h'
00000000000010cf         db  0x6b ; 'k'
00000000000010d0         db  0x00 ; '.'
00000000000010d1         db  0x5f ; '_'
00000000000010d2         db  0x5f ; '_'
00000000000010d3         db  0x66 ; 'f'
00000000000010d4         db  0x70 ; 'p'
00000000000010d5         db  0x65 ; 'e'
00000000000010d6         db  0x6e ; 'n'
00000000000010d7         db  0x64 ; 'd'
00000000000010d8         db  0x69 ; 'i'
00000000000010d9         db  0x6e ; 'n'
00000000000010da         db  0x67 ; 'g'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x73 ; 's'
00000000000010dd         db  0x74 ; 't'
00000000000010de         db  0x72 ; 'r'
00000000000010df         db  0x63 ; 'c'
00000000000010e0         db  0x68 ; 'h'
00000000000010e1         db  0x72 ; 'r'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x69 ; 'i'
00000000000010e4         db  0x73 ; 's'
00000000000010e5         db  0x77 ; 'w'
00000000000010e6         db  0x63 ; 'c'
00000000000010e7         db  0x6e ; 'n'
00000000000010e8         db  0x74 ; 't'
00000000000010e9         db  0x72 ; 'r'
00000000000010ea         db  0x6c ; 'l'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x65 ; 'e'
00000000000010ed         db  0x6e ; 'n'
00000000000010ee         db  0x64 ; 'd'
00000000000010ef         db  0x6d ; 'm'
00000000000010f0         db  0x6e ; 'n'
00000000000010f1         db  0x74 ; 't'
00000000000010f2         db  0x65 ; 'e'
00000000000010f3         db  0x6e ; 'n'
00000000000010f4         db  0x74 ; 't'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x6d ; 'm'
00000000000010f7         db  0x6b ; 'k'
00000000000010f8         db  0x74 ; 't'
00000000000010f9         db  0x69 ; 'i'
00000000000010fa         db  0x6d ; 'm'
00000000000010fb         db  0x65 ; 'e'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x70 ; 'p'
00000000000010fe         db  0x72 ; 'r'
00000000000010ff         db  0x6f ; 'o'
                     aGraminvocation:
0000000000001100         db         "gram_invocation_short_name", 0
000000000000111b         db  0x71 ; 'q'
000000000000111c         db  0x73 ; 's'
000000000000111d         db  0x6f ; 'o'
000000000000111e         db  0x72 ; 'r'
000000000000111f         db  0x74 ; 't'
0000000000001120         db  0x00 ; '.'
0000000000001121         db  0x5f ; '_'
0000000000001122         db  0x5f ; '_'
0000000000001123         db  0x63 ; 'c'
0000000000001124         db  0x74 ; 't'
0000000000001125         db  0x79 ; 'y'
0000000000001126         db  0x70 ; 'p'
0000000000001127         db  0x65 ; 'e'
0000000000001128         db  0x5f ; '_'
0000000000001129         db  0x74 ; 't'
000000000000112a         db  0x6f ; 'o'
000000000000112b         db  0x75 ; 'u'
000000000000112c         db  0x70 ; 'p'
000000000000112d         db  0x70 ; 'p'
000000000000112e         db  0x65 ; 'e'
000000000000112f         db  0x72 ; 'r'
0000000000001130         db  0x5f ; '_'
0000000000001131         db  0x6c ; 'l'
0000000000001132         db  0x6f ; 'o'
0000000000001133         db  0x63 ; 'c'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x5f ; '_'
0000000000001136         db  0x5f ; '_'
0000000000001137         db  0x63 ; 'c'
0000000000001138         db  0x74 ; 't'
0000000000001139         db  0x79 ; 'y'
000000000000113a         db  0x70 ; 'p'
000000000000113b         db  0x65 ; 'e'
000000000000113c         db  0x5f ; '_'
000000000000113d         db  0x74 ; 't'
000000000000113e         db  0x6f ; 'o'
000000000000113f         db  0x6c ; 'l'
0000000000001140         db  0x6f ; 'o'
0000000000001141         db  0x77 ; 'w'
0000000000001142         db  0x65 ; 'e'
0000000000001143         db  0x72 ; 'r'
0000000000001144         db  0x5f ; '_'
0000000000001145         db  0x6c ; 'l'
0000000000001146         db  0x6f ; 'o'
0000000000001147         db  0x63 ; 'c'
0000000000001148         db  0x00 ; '.'
0000000000001149         db  0x5f ; '_'
000000000000114a         db  0x5f ; '_'
000000000000114b         db  0x63 ; 'c'
000000000000114c         db  0x78 ; 'x'
000000000000114d         db  0x61 ; 'a'
000000000000114e         db  0x5f ; '_'
000000000000114f         db  0x66 ; 'f'
0000000000001150         db  0x69 ; 'i'
0000000000001151         db  0x6e ; 'n'
0000000000001152         db  0x61 ; 'a'
0000000000001153         db  0x6c ; 'l'
0000000000001154         db  0x69 ; 'i'
0000000000001155         db  0x7a ; 'z'
0000000000001156         db  0x65 ; 'e'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x66 ; 'f'
0000000000001159         db  0x63 ; 'c'
000000000000115a         db  0x6e ; 'n'
000000000000115b         db  0x74 ; 't'
000000000000115c         db  0x6c ; 'l'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x5f ; '_'
000000000000115f         db  0x5f ; '_'
0000000000001160         db  0x73 ; 's'
0000000000001161         db  0x70 ; 'p'
0000000000001162         db  0x72 ; 'r'
0000000000001163         db  0x69 ; 'i'
0000000000001164         db  0x6e ; 'n'
0000000000001165         db  0x74 ; 't'
0000000000001166         db  0x66 ; 'f'
0000000000001167         db  0x5f ; '_'
0000000000001168         db  0x63 ; 'c'
0000000000001169         db  0x68 ; 'h'
000000000000116a         db  0x6b ; 'k'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x6f ; 'o'
000000000000116d         db  0x70 ; 'p'
000000000000116e         db  0x65 ; 'e'
000000000000116f         db  0x6e ; 'n'
0000000000001170         db  0x61 ; 'a'
0000000000001171         db  0x74 ; 't'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x5f ; '_'
0000000000001174         db  0x5f ; '_'
0000000000001175         db  0x78 ; 'x'
0000000000001176         db  0x73 ; 's'
0000000000001177         db  0x74 ; 't'
0000000000001178         db  0x61 ; 'a'
0000000000001179         db  0x74 ; 't'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x6d ; 'm'
000000000000117c         db  0x65 ; 'e'
000000000000117d         db  0x6d ; 'm'
000000000000117e         db  0x6d ; 'm'
000000000000117f         db  0x6f ; 'o'
0000000000001180         db  0x76 ; 'v'
0000000000001181         db  0x65 ; 'e'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x62 ; 'b'
0000000000001184         db  0x69 ; 'i'
0000000000001185         db  0x6e ; 'n'
0000000000001186         db  0x64 ; 'd'
0000000000001187         db  0x74 ; 't'
0000000000001188         db  0x65 ; 'e'
0000000000001189         db  0x78 ; 'x'
000000000000118a         db  0x74 ; 't'
000000000000118b         db  0x64 ; 'd'
000000000000118c         db  0x6f ; 'o'
000000000000118d         db  0x6d ; 'm'
000000000000118e         db  0x61 ; 'a'
000000000000118f         db  0x69 ; 'i'
0000000000001190         db  0x6e ; 'n'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x5f ; '_'
0000000000001193         db  0x5f ; '_'
0000000000001194         db  0x66 ; 'f'
0000000000001195         db  0x78 ; 'x'
0000000000001196         db  0x73 ; 's'
0000000000001197         db  0x74 ; 't'
0000000000001198         db  0x61 ; 'a'
0000000000001199         db  0x74 ; 't'
000000000000119a         db  0x61 ; 'a'
000000000000119b         db  0x74 ; 't'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x73 ; 's'
000000000000119e         db  0x74 ; 't'
000000000000119f         db  0x72 ; 'r'
00000000000011a0         db  0x63 ; 'c'
00000000000011a1         db  0x6d ; 'm'
00000000000011a2         db  0x70 ; 'p'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x5f ; '_'
00000000000011a5         db  0x5f ; '_'
00000000000011a6         db  0x6c ; 'l'
00000000000011a7         db  0x69 ; 'i'
00000000000011a8         db  0x62 ; 'b'
00000000000011a9         db  0x63 ; 'c'
00000000000011aa         db  0x5f ; '_'
00000000000011ab         db  0x73 ; 's'
00000000000011ac         db  0x74 ; 't'
00000000000011ad         db  0x61 ; 'a'
00000000000011ae         db  0x72 ; 'r'
00000000000011af         db  0x74 ; 't'
00000000000011b0         db  0x5f ; '_'
00000000000011b1         db  0x6d ; 'm'
00000000000011b2         db  0x61 ; 'a'
00000000000011b3         db  0x69 ; 'i'
00000000000011b4         db  0x6e ; 'n'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x64 ; 'd'
00000000000011b7         db  0x69 ; 'i'
00000000000011b8         db  0x72 ; 'r'
00000000000011b9         db  0x66 ; 'f'
00000000000011ba         db  0x64 ; 'd'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x66 ; 'f'
00000000000011bd         db  0x73 ; 's'
00000000000011be         db  0x65 ; 'e'
00000000000011bf         db  0x65 ; 'e'
00000000000011c0         db  0x6b ; 'k'
00000000000011c1         db  0x6f ; 'o'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x5f ; '_'
00000000000011c4         db  0x5f ; '_'
00000000000011c5         db  0x6f ; 'o'
00000000000011c6         db  0x76 ; 'v'
00000000000011c7         db  0x65 ; 'e'
00000000000011c8         db  0x72 ; 'r'
00000000000011c9         db  0x66 ; 'f'
00000000000011ca         db  0x6c ; 'l'
00000000000011cb         db  0x6f ; 'o'
00000000000011cc         db  0x77 ; 'w'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x5f ; '_'
00000000000011cf         db  0x5f ; '_'
00000000000011d0         db  0x73 ; 's'
00000000000011d1         db  0x74 ; 't'
00000000000011d2         db  0x72 ; 'r'
00000000000011d3         db  0x74 ; 't'
00000000000011d4         db  0x6f ; 'o'
00000000000011d5         db  0x75 ; 'u'
00000000000011d6         db  0x6c ; 'l'
00000000000011d7         db  0x5f ; '_'
00000000000011d8         db  0x69 ; 'i'
00000000000011d9         db  0x6e ; 'n'
00000000000011da         db  0x74 ; 't'
00000000000011db         db  0x65 ; 'e'
00000000000011dc         db  0x72 ; 'r'
00000000000011dd         db  0x6e ; 'n'
00000000000011de         db  0x61 ; 'a'
00000000000011df         db  0x6c ; 'l'
00000000000011e0         db  0x00 ; '.'
00000000000011e1         db  0x66 ; 'f'
00000000000011e2         db  0x70 ; 'p'
00000000000011e3         db  0x75 ; 'u'
00000000000011e4         db  0x74 ; 't'
00000000000011e5         db  0x73 ; 's'
00000000000011e6         db  0x5f ; '_'
00000000000011e7         db  0x75 ; 'u'
00000000000011e8         db  0x6e ; 'n'
00000000000011e9         db  0x6c ; 'l'
00000000000011ea         db  0x6f ; 'o'
00000000000011eb         db  0x63 ; 'c'
00000000000011ec         db  0x6b ; 'k'
00000000000011ed         db  0x65 ; 'e'
00000000000011ee         db  0x64 ; 'd'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x66 ; 'f'
00000000000011f1         db  0x72 ; 'r'
00000000000011f2         db  0x65 ; 'e'
00000000000011f3         db  0x65 ; 'e'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x5f ; '_'
00000000000011f6         db  0x5f ; '_'
00000000000011f7         db  0x70 ; 'p'
00000000000011f8         db  0x72 ; 'r'
00000000000011f9         db  0x6f ; 'o'
00000000000011fa         db  0x67 ; 'g'
00000000000011fb         db  0x6e ; 'n'
00000000000011fc         db  0x61 ; 'a'
00000000000011fd         db  0x6d ; 'm'
00000000000011fe         db  0x65 ; 'e'
00000000000011ff         db  0x00 ; '.'
                     aPrognamefull:
0000000000001200         db         "__progname_full", 0                        ; DATA XREF=peek_token+560, peek_token+572, peek_token+640, peek_token+652, peek_token+996, peek_token+1080
0000000000001210         db  0x5f ; '_'
0000000000001211         db  0x5f ; '_'
0000000000001212         db  0x63 ; 'c'
0000000000001213         db  0x78 ; 'x'
0000000000001214         db  0x61 ; 'a'
0000000000001215         db  0x5f ; '_'
0000000000001216         db  0x61 ; 'a'
0000000000001217         db  0x74 ; 't'
0000000000001218         db  0x65 ; 'e'
0000000000001219         db  0x78 ; 'x'
000000000000121a         db  0x69 ; 'i'
000000000000121b         db  0x74 ; 't'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x47 ; 'G'
000000000000121e         db  0x4c ; 'L'
000000000000121f         db  0x49 ; 'I'
0000000000001220         db  0x42 ; 'B'
0000000000001221         db  0x43 ; 'C'
0000000000001222         db  0x5f ; '_'
0000000000001223         db  0x32 ; '2'
0000000000001224         db  0x2e ; '.'
0000000000001225         db  0x31 ; '1'
0000000000001226         db  0x34 ; '4'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x47 ; 'G'
0000000000001229         db  0x4c ; 'L'
000000000000122a         db  0x49 ; 'I'
000000000000122b         db  0x42 ; 'B'
000000000000122c         db  0x43 ; 'C'
000000000000122d         db  0x5f ; '_'
000000000000122e         db  0x32 ; '2'
000000000000122f         db  0x2e ; '.'
0000000000001230         db  0x33 ; '3'
0000000000001231         db  0x2e ; '.'
0000000000001232         db  0x34 ; '4'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x47 ; 'G'
0000000000001235         db  0x4c ; 'L'
0000000000001236         db  0x49 ; 'I'
0000000000001237         db  0x42 ; 'B'
0000000000001238         db  0x43 ; 'C'
0000000000001239         db  0x5f ; '_'
000000000000123a         db  0x32 ; '2'
000000000000123b         db  0x2e ; '.'
000000000000123c         db  0x34 ; '4'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x47 ; 'G'
000000000000123f         db  0x4c ; 'L'
0000000000001240         db  0x49 ; 'I'
0000000000001241         db  0x42 ; 'B'
0000000000001242         db  0x43 ; 'C'
0000000000001243         db  0x5f ; '_'
0000000000001244         db  0x32 ; '2'
0000000000001245         db  0x2e ; '.'
0000000000001246         db  0x32 ; '2'
0000000000001247         db  0x2e ; '.'
0000000000001248         db  0x35 ; '5'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x47 ; 'G'
000000000000124b         db  0x4c ; 'L'
000000000000124c         db  0x49 ; 'I'
000000000000124d         db  0x42 ; 'B'
000000000000124e         db  0x43 ; 'C'
000000000000124f         db  0x5f ; '_'
0000000000001250         db  0x32 ; '2'
0000000000001251         db  0x2e ; '.'
0000000000001252         db  0x33 ; '3'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x5f ; '_'
0000000000001255         db  0x49 ; 'I'
0000000000001256         db  0x54 ; 'T'
0000000000001257         db  0x4d ; 'M'
0000000000001258         db  0x5f ; '_'
0000000000001259         db  0x64 ; 'd'
000000000000125a         db  0x65 ; 'e'
000000000000125b         db  0x72 ; 'r'
000000000000125c         db  0x65 ; 'e'
000000000000125d         db  0x67 ; 'g'
000000000000125e         db  0x69 ; 'i'
000000000000125f         db  0x73 ; 's'
0000000000001260         db  0x74 ; 't'
0000000000001261         db  0x65 ; 'e'
0000000000001262         db  0x72 ; 'r'
0000000000001263         db  0x54 ; 'T'
0000000000001264         db  0x4d ; 'M'
0000000000001265         db  0x43 ; 'C'
0000000000001266         db  0x6c ; 'l'
0000000000001267         db  0x6f ; 'o'
0000000000001268         db  0x6e ; 'n'
0000000000001269         db  0x65 ; 'e'
000000000000126a         db  0x54 ; 'T'
000000000000126b         db  0x61 ; 'a'
000000000000126c         db  0x62 ; 'b'
000000000000126d         db  0x6c ; 'l'
000000000000126e         db  0x65 ; 'e'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x5f ; '_'
0000000000001271         db  0x5f ; '_'
0000000000001272         db  0x67 ; 'g'
0000000000001273         db  0x6d ; 'm'
0000000000001274         db  0x6f ; 'o'
0000000000001275         db  0x6e ; 'n'
0000000000001276         db  0x5f ; '_'
0000000000001277         db  0x73 ; 's'
0000000000001278         db  0x74 ; 't'
0000000000001279         db  0x61 ; 'a'
000000000000127a         db  0x72 ; 'r'
000000000000127b         db  0x74 ; 't'
000000000000127c         db  0x5f ; '_'
000000000000127d         db  0x5f ; '_'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x5f ; '_'
0000000000001280         db  0x49 ; 'I'
0000000000001281         db  0x54 ; 'T'
0000000000001282         db  0x4d ; 'M'
0000000000001283         db  0x5f ; '_'
0000000000001284         db  0x72 ; 'r'
0000000000001285         db  0x65 ; 'e'
0000000000001286         db  0x67 ; 'g'
0000000000001287         db  0x69 ; 'i'
0000000000001288         db  0x73 ; 's'
0000000000001289         db  0x74 ; 't'
000000000000128a         db  0x65 ; 'e'
000000000000128b         db  0x72 ; 'r'
000000000000128c         db  0x54 ; 'T'
000000000000128d         db  0x4d ; 'M'
000000000000128e         db  0x43 ; 'C'
000000000000128f         db  0x6c ; 'l'
0000000000001290         db  0x6f ; 'o'
0000000000001291         db  0x6e ; 'n'
0000000000001292         db  0x65 ; 'e'
0000000000001293         db  0x54 ; 'T'
0000000000001294         db  0x61 ; 'a'
0000000000001295         db  0x62 ; 'b'
0000000000001296         db  0x6c ; 'l'
0000000000001297         db  0x65 ; 'e'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0x129a; 0x1386[ (236 bytes)
        ; File offset : [4762; 4998[ (236 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x02 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x03 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x03 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x03 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x03 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x03 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x03 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x03 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x03 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x03 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x03 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x03 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x03 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x03 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x03 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x03 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x03 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x03 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x03 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x03 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x03 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x03 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x03 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x03 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x03 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x03 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x04 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x04 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x03 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x03 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x03 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x03 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x04 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x03 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x03 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x03 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x03 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x03 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x03 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x03 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x03 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x03 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x03 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x03 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x03 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x03 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x03 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x03 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x03 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x03 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x03 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x03 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x03 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x03 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x05 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x03 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x06 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x03 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x03 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x03 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x03 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x03 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x03 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x03 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x03 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x03 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x03 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x03 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x03 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x03 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x03 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x03 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x03 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x03 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x03 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x03 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x05 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x03 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x03 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x03 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x03 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x03 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x03 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x03 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x03 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x03 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x04 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x03 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x03 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x03 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x03 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x03 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x03 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x03 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x05 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x03 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x03 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x03 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x03 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x03 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x03 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x03 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x02 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x02 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x05 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x03 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x03 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x03 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x03 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x03 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x03 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x03 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x03 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x03 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0x1388; 0x13e8[ (96 bytes)
        ; File offset : [5000; 5096[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000001388         db  0x01 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x05 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x01 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x10 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x94 ; '.'
0000000000001399         db  0x91 ; '.'
000000000000139a         db  0x96 ; '.'
000000000000139b         db  0x06 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x06 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x2d ; '-'
00000000000013a1         db  0x04 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x10 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x74 ; 't'
00000000000013a9         db  0x19 ; '.'
00000000000013aa         db  0x69 ; 'i'
00000000000013ab         db  0x09 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x05 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x38 ; '8'
00000000000013b1         db  0x04 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x10 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x14 ; '.'
00000000000013b9         db  0x69 ; 'i'
00000000000013ba         db  0x69 ; 'i'
00000000000013bb         db  0x0d ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x04 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x44 ; 'D'
00000000000013c1         db  0x04 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x10 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x75 ; 'u'
00000000000013c9         db  0x1a ; '.'
00000000000013ca         db  0x69 ; 'i'
00000000000013cb         db  0x09 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x03 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x4e ; 'N'
00000000000013d1         db  0x04 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x10 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x13 ; '.'
00000000000013d9         db  0x69 ; 'i'
00000000000013da         db  0x69 ; 'i'
00000000000013db         db  0x0d ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x02 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x5a ; 'Z'
00000000000013e1         db  0x04 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x13e8; 0x1a18[ (1584 bytes)
        ; File offset : [5096; 6680[ (1584 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

00000000000013e8         db  0x70 ; 'p'
00000000000013e9         db  0x76 ; 'v'
00000000000013ea         db  0x22 ; '"'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x08 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x40 ; '@'
00000000000013f9         db  0x40 ; '@'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x78 ; 'x'
0000000000001401         db  0x76 ; 'v'
0000000000001402         db  0x22 ; '"'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x08 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x40 ; '@'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x80 ; '.'
0000000000001419         db  0x76 ; 'v'
000000000000141a         db  0x22 ; '"'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x08 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x31 ; '1'
0000000000001429         db  0xfd ; '.'
000000000000142a         db  0x01 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x88 ; '.'
0000000000001431         db  0x76 ; 'v'
0000000000001432         db  0x22 ; '"'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x08 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x34 ; '4'
0000000000001441         db  0xfb ; '.'
0000000000001442         db  0x01 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x90 ; '.'
0000000000001449         db  0x76 ; 'v'
000000000000144a         db  0x22 ; '"'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x08 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x39 ; '9'
0000000000001459         db  0xfb ; '.'
000000000000145a         db  0x01 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0xa0 ; '.'
0000000000001461         db  0x76 ; 'v'
0000000000001462         db  0x22 ; '"'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x08 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x3a ; ':'
0000000000001471         db  0xfd ; '.'
0000000000001472         db  0x01 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0xa8 ; '.'
0000000000001479         db  0x76 ; 'v'
000000000000147a         db  0x22 ; '"'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x08 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x40 ; '@'
0000000000001489         db  0xfd ; '.'
000000000000148a         db  0x01 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0xb0 ; '.'
0000000000001491         db  0x76 ; 'v'
0000000000001492         db  0x22 ; '"'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x08 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x47 ; 'G'
00000000000014a1         db  0xfd ; '.'
00000000000014a2         db  0x01 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0xb8 ; '.'
00000000000014a9         db  0x76 ; 'v'
00000000000014aa         db  0x22 ; '"'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x08 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x4b ; 'K'
00000000000014b9         db  0xfd ; '.'
00000000000014ba         db  0x01 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0xc0 ; '.'
00000000000014c1         db  0x76 ; 'v'
00000000000014c2         db  0x22 ; '"'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x08 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x51 ; 'Q'
00000000000014d1         db  0xfd ; '.'
00000000000014d2         db  0x01 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0xe0 ; '.'
00000000000014d9         db  0x76 ; 'v'
00000000000014da         db  0x22 ; '"'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x08 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x58 ; 'X'
00000000000014e9         db  0xfd ; '.'
00000000000014ea         db  0x01 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x77 ; 'w'
00000000000014f2         db  0x22 ; '"'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x08 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x5c ; '\'
0000000000001501         db  0xfd ; '.'
0000000000001502         db  0x01 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x20 ; ' '
0000000000001509         db  0x77 ; 'w'
000000000000150a         db  0x22 ; '"'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x08 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x6a ; 'j'
0000000000001519         db  0xfd ; '.'
000000000000151a         db  0x01 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x40 ; '@'
0000000000001521         db  0x77 ; 'w'
0000000000001522         db  0x22 ; '"'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x08 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x75 ; 'u'
0000000000001531         db  0xfd ; '.'
0000000000001532         db  0x01 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x60 ; '`'
0000000000001539         db  0x77 ; 'w'
000000000000153a         db  0x22 ; '"'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x08 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x7b ; '{'
0000000000001549         db  0xfd ; '.'
000000000000154a         db  0x01 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x80 ; '.'
0000000000001551         db  0x77 ; 'w'
0000000000001552         db  0x22 ; '"'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x08 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0xdf ; '.'
0000000000001561         db  0xfd ; '.'
0000000000001562         db  0x01 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0xa0 ; '.'
0000000000001569         db  0x77 ; 'w'
000000000000156a         db  0x22 ; '"'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x08 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x87 ; '.'
0000000000001579         db  0xfd ; '.'
000000000000157a         db  0x01 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0xc0 ; '.'
0000000000001581         db  0x77 ; 'w'
0000000000001582         db  0x22 ; '"'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x08 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x98 ; '.'
0000000000001591         db  0xfd ; '.'
0000000000001592         db  0x01 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0xe0 ; '.'
0000000000001599         db  0x77 ; 'w'
000000000000159a         db  0x22 ; '"'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x08 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0xa0 ; '.'
00000000000015a9         db  0xfd ; '.'
00000000000015aa         db  0x01 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x78 ; 'x'
00000000000015b2         db  0x22 ; '"'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x08 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0xad ; '.'
00000000000015c1         db  0xfd ; '.'
00000000000015c2         db  0x01 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x20 ; ' '
00000000000015c9         db  0x78 ; 'x'
00000000000015ca         db  0x22 ; '"'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x08 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0xb9 ; '.'
00000000000015d9         db  0xfd ; '.'
00000000000015da         db  0x01 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x40 ; '@'
00000000000015e1         db  0x78 ; 'x'
00000000000015e2         db  0x22 ; '"'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x08 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0xc8 ; '.'
00000000000015f1         db  0xfd ; '.'
00000000000015f2         db  0x01 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x60 ; '`'
00000000000015f9         db  0x78 ; 'x'
00000000000015fa         db  0x22 ; '"'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x08 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0xcf ; '.'
0000000000001609         db  0xfd ; '.'
000000000000160a         db  0x01 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x80 ; '.'
0000000000001611         db  0x78 ; 'x'
0000000000001612         db  0x22 ; '"'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x08 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0xd2 ; '.'
0000000000001621         db  0xfd ; '.'
0000000000001622         db  0x01 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0xa0 ; '.'
0000000000001629         db  0x78 ; 'x'
000000000000162a         db  0x22 ; '"'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x08 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x29 ; ')'
0000000000001639         db  0x19 ; '.'
000000000000163a         db  0x02 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0xc0 ; '.'
0000000000001641         db  0x78 ; 'x'
0000000000001642         db  0x22 ; '"'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x08 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0xdc ; '.'
0000000000001651         db  0xfd ; '.'
0000000000001652         db  0x01 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0xe0 ; '.'
0000000000001659         db  0x78 ; 'x'
000000000000165a         db  0x22 ; '"'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x08 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0xeb ; '.'
0000000000001669         db  0xfd ; '.'
000000000000166a         db  0x01 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x79 ; 'y'
0000000000001672         db  0x22 ; '"'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x08 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0xfb ; '.'
0000000000001681         db  0xfd ; '.'
0000000000001682         db  0x01 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x20 ; ' '
0000000000001689         db  0x79 ; 'y'
000000000000168a         db  0x22 ; '"'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x08 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x09 ; '.'
0000000000001699         db  0xfe ; '.'
000000000000169a         db  0x01 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x40 ; '@'
00000000000016a1         db  0x79 ; 'y'
00000000000016a2         db  0x22 ; '"'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x08 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x02 ; '.'
00000000000016b1         db  0xfd ; '.'
00000000000016b2         db  0x01 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x60 ; '`'
00000000000016b9         db  0x79 ; 'y'
00000000000016ba         db  0x22 ; '"'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x08 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x13 ; '.'
00000000000016c9         db  0xfe ; '.'
00000000000016ca         db  0x01 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x80 ; '.'
00000000000016d1         db  0x79 ; 'y'
00000000000016d2         db  0x22 ; '"'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x08 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0xa2 ; '.'
00000000000016e1         db  0xfb ; '.'
00000000000016e2         db  0x01 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0xa0 ; '.'
00000000000016e9         db  0x79 ; 'y'
00000000000016ea         db  0x22 ; '"'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x08 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x1d ; '.'
00000000000016f9         db  0xfe ; '.'
00000000000016fa         db  0x01 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xc0 ; '.'
0000000000001701         db  0x79 ; 'y'
0000000000001702         db  0x22 ; '"'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x08 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x28 ; '('
0000000000001711         db  0xfe ; '.'
0000000000001712         db  0x01 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0xe0 ; '.'
0000000000001719         db  0x79 ; 'y'
000000000000171a         db  0x22 ; '"'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x08 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x2d ; '-'
0000000000001729         db  0xfe ; '.'
000000000000172a         db  0x01 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x20 ; ' '
0000000000001731         db  0x7a ; 'z'
0000000000001732         db  0x22 ; '"'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x08 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0xb9 ; '.'
0000000000001741         db  0xfd ; '.'
0000000000001742         db  0x01 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x28 ; '('
0000000000001749         db  0x7a ; 'z'
000000000000174a         db  0x22 ; '"'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x08 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0xcf ; '.'
0000000000001759         db  0xfd ; '.'
000000000000175a         db  0x01 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x40 ; '@'
0000000000001761         db  0x7a ; 'z'
0000000000001762         db  0x22 ; '"'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x08 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0xcf ; '.'
0000000000001771         db  0x1a ; '.'
0000000000001772         db  0x02 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x48 ; 'H'
0000000000001779         db  0x7a ; 'z'
000000000000177a         db  0x22 ; '"'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x08 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0xd7 ; '.'
0000000000001789         db  0x1a ; '.'
000000000000178a         db  0x02 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x50 ; 'P'
0000000000001791         db  0x7a ; 'z'
0000000000001792         db  0x22 ; '"'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x08 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0xdd ; '.'
00000000000017a1         db  0x1a ; '.'
00000000000017a2         db  0x02 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x58 ; 'X'
00000000000017a9         db  0x7a ; 'z'
00000000000017aa         db  0x22 ; '"'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x08 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0xea ; '.'
00000000000017b9         db  0x1a ; '.'
00000000000017ba         db  0x02 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x60 ; '`'
00000000000017c1         db  0x7a ; 'z'
00000000000017c2         db  0x22 ; '"'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x08 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0xf7 ; '.'
00000000000017d1         db  0x1a ; '.'
00000000000017d2         db  0x02 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x68 ; 'h'
00000000000017d9         db  0x7a ; 'z'
00000000000017da         db  0x22 ; '"'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x08 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0xfd ; '.'
00000000000017e9         db  0x26 ; '&'
00000000000017ea         db  0x02 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x70 ; 'p'
00000000000017f1         db  0x7a ; 'z'
00000000000017f2         db  0x22 ; '"'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x08 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x0b ; '.'
0000000000001801         db  0x1b ; '.'
0000000000001802         db  0x02 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x78 ; 'x'
0000000000001809         db  0x7a ; 'z'
000000000000180a         db  0x22 ; '"'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x08 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0xf0 ; '.'
0000000000001819         db  0x1a ; '.'
000000000000181a         db  0x02 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x80 ; '.'
0000000000001821         db  0x7a ; 'z'
0000000000001822         db  0x22 ; '"'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x08 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x4e ; 'N'
0000000000001831         db  0xfb ; '.'
0000000000001832         db  0x01 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x88 ; '.'
0000000000001839         db  0x7a ; 'z'
000000000000183a         db  0x22 ; '"'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x08 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x13 ; '.'
0000000000001849         db  0x1b ; '.'
000000000000184a         db  0x02 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x08 ; '.'
0000000000001851         db  0x80 ; '.'
0000000000001852         db  0x22 ; '"'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x08 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x08 ; '.'
0000000000001861         db  0x80 ; '.'
0000000000001862         db  0x22 ; '"'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x18 ; '.'
0000000000001869         db  0x80 ; '.'
000000000000186a         db  0x22 ; '"'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x08 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x34 ; '4'
0000000000001879         db  0x14 ; '.'
000000000000187a         db  0x02 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x20 ; ' '
0000000000001881         db  0x80 ; '.'
0000000000001882         db  0x22 ; '"'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x08 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x47 ; 'G'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x80 ; '.'
0000000000001899         db  0x80 ; '.'
000000000000189a         db  0x22 ; '"'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x08 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x90 ; '.'
00000000000018a9         db  0x80 ; '.'
00000000000018aa         db  0x22 ; '"'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x98 ; '.'
00000000000018b1         db  0x80 ; '.'
00000000000018b2         db  0x22 ; '"'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x08 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0xc0 ; '.'
00000000000018c1         db  0x81 ; '.'
00000000000018c2         db  0x22 ; '"'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0xc8 ; '.'
00000000000018c9         db  0x7f ; '.'
00000000000018ca         db  0x22 ; '"'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x06 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x04 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0xd0 ; '.'
00000000000018e1         db  0x7f ; '.'
00000000000018e2         db  0x22 ; '"'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x06 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x09 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0xd8 ; '.'
00000000000018f9         db  0x7f ; '.'
00000000000018fa         db  0x22 ; '"'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x06 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x29 ; ')'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0xe0 ; '.'
0000000000001911         db  0x7f ; '.'
0000000000001912         db  0x22 ; '"'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x06 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x30 ; '0'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0xe8 ; '.'
0000000000001929         db  0x7f ; '.'
000000000000192a         db  0x22 ; '"'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x06 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x3a ; ':'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0xf0 ; '.'
0000000000001941         db  0x7f ; '.'
0000000000001942         db  0x22 ; '"'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x06 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x62 ; 'b'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0xf8 ; '.'
0000000000001959         db  0x7f ; '.'
000000000000195a         db  0x22 ; '"'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x06 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x67 ; 'g'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0xa0 ; '.'
0000000000001971         db  0x80 ; '.'
0000000000001972         db  0x22 ; '"'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x05 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x6e ; 'n'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x00 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0xa8 ; '.'
0000000000001989         db  0x80 ; '.'
000000000000198a         db  0x22 ; '"'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x05 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x6d ; 'm'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x00 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0xb0 ; '.'
00000000000019a1         db  0x80 ; '.'
00000000000019a2         db  0x22 ; '"'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x05 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x6f ; 'o'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x00 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0xb8 ; '.'
00000000000019b9         db  0x80 ; '.'
00000000000019ba         db  0x22 ; '"'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x05 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x74 ; 't'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x00 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0xc0 ; '.'
00000000000019d1         db  0x80 ; '.'
00000000000019d2         db  0x22 ; '"'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x05 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x75 ; 'u'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x00 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0xc8 ; '.'
00000000000019e9         db  0x80 ; '.'
00000000000019ea         db  0x22 ; '"'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0x05 ; '.'
00000000000019f1         db  0x00 ; '.'
00000000000019f2         db  0x00 ; '.'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x71 ; 'q'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x00 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x00 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0xe0 ; '.'
0000000000001a01         db  0x80 ; '.'
0000000000001a02         db  0x22 ; '"'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0x05 ; '.'
0000000000001a09         db  0x00 ; '.'
0000000000001a0a         db  0x00 ; '.'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x73 ; 's'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x00 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x00 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1a18; 0x2390[ (2424 bytes)
        ; File offset : [6680; 9104[ (2424 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001a18         db  0xa0 ; '.'
0000000000001a19         db  0x7c ; '|'
0000000000001a1a         db  0x22 ; '"'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0x07 ; '.'
0000000000001a21         db  0x00 ; '.'
0000000000001a22         db  0x00 ; '.'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x01 ; '.'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x00 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x00 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0xa8 ; '.'
0000000000001a31         db  0x7c ; '|'
0000000000001a32         db  0x22 ; '"'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0x07 ; '.'
0000000000001a39         db  0x00 ; '.'
0000000000001a3a         db  0x00 ; '.'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x02 ; '.'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x00 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x00 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0xb0 ; '.'
0000000000001a49         db  0x7c ; '|'
0000000000001a4a         db  0x22 ; '"'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0x07 ; '.'
0000000000001a51         db  0x00 ; '.'
0000000000001a52         db  0x00 ; '.'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x03 ; '.'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x00 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x00 ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0xb8 ; '.'
0000000000001a61         db  0x7c ; '|'
0000000000001a62         db  0x22 ; '"'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0x07 ; '.'
0000000000001a69         db  0x00 ; '.'
0000000000001a6a         db  0x00 ; '.'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x05 ; '.'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x00 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x00 ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0xc0 ; '.'
0000000000001a79         db  0x7c ; '|'
0000000000001a7a         db  0x22 ; '"'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0x07 ; '.'
0000000000001a81         db  0x00 ; '.'
0000000000001a82         db  0x00 ; '.'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x06 ; '.'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x00 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x00 ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0xc8 ; '.'
0000000000001a91         db  0x7c ; '|'
0000000000001a92         db  0x22 ; '"'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0x07 ; '.'
0000000000001a99         db  0x00 ; '.'
0000000000001a9a         db  0x00 ; '.'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x07 ; '.'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x00 ; '.'
0000000000001aa1         db  0x00 ; '.'
0000000000001aa2         db  0x00 ; '.'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x00 ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'
0000000000001aa8         db  0xd0 ; '.'
0000000000001aa9         db  0x7c ; '|'
0000000000001aaa         db  0x22 ; '"'
0000000000001aab         db  0x00 ; '.'
0000000000001aac         db  0x00 ; '.'
0000000000001aad         db  0x00 ; '.'
0000000000001aae         db  0x00 ; '.'
0000000000001aaf         db  0x00 ; '.'
0000000000001ab0         db  0x07 ; '.'
0000000000001ab1         db  0x00 ; '.'
0000000000001ab2         db  0x00 ; '.'
0000000000001ab3         db  0x00 ; '.'
0000000000001ab4         db  0x08 ; '.'
0000000000001ab5         db  0x00 ; '.'
0000000000001ab6         db  0x00 ; '.'
0000000000001ab7         db  0x00 ; '.'
0000000000001ab8         db  0x00 ; '.'
0000000000001ab9         db  0x00 ; '.'
0000000000001aba         db  0x00 ; '.'
0000000000001abb         db  0x00 ; '.'
0000000000001abc         db  0x00 ; '.'
0000000000001abd         db  0x00 ; '.'
0000000000001abe         db  0x00 ; '.'
0000000000001abf         db  0x00 ; '.'
0000000000001ac0         db  0xd8 ; '.'
0000000000001ac1         db  0x7c ; '|'
0000000000001ac2         db  0x22 ; '"'
0000000000001ac3         db  0x00 ; '.'
0000000000001ac4         db  0x00 ; '.'
0000000000001ac5         db  0x00 ; '.'
0000000000001ac6         db  0x00 ; '.'
0000000000001ac7         db  0x00 ; '.'
0000000000001ac8         db  0x07 ; '.'
0000000000001ac9         db  0x00 ; '.'
0000000000001aca         db  0x00 ; '.'
0000000000001acb         db  0x00 ; '.'
0000000000001acc         db  0x0a ; '.'
0000000000001acd         db  0x00 ; '.'
0000000000001ace         db  0x00 ; '.'
0000000000001acf         db  0x00 ; '.'
0000000000001ad0         db  0x00 ; '.'
0000000000001ad1         db  0x00 ; '.'
0000000000001ad2         db  0x00 ; '.'
0000000000001ad3         db  0x00 ; '.'
0000000000001ad4         db  0x00 ; '.'
0000000000001ad5         db  0x00 ; '.'
0000000000001ad6         db  0x00 ; '.'
0000000000001ad7         db  0x00 ; '.'
0000000000001ad8         db  0xe0 ; '.'
0000000000001ad9         db  0x7c ; '|'
0000000000001ada         db  0x22 ; '"'
0000000000001adb         db  0x00 ; '.'
0000000000001adc         db  0x00 ; '.'
0000000000001add         db  0x00 ; '.'
0000000000001ade         db  0x00 ; '.'
0000000000001adf         db  0x00 ; '.'
0000000000001ae0         db  0x07 ; '.'
0000000000001ae1         db  0x00 ; '.'
0000000000001ae2         db  0x00 ; '.'
0000000000001ae3         db  0x00 ; '.'
0000000000001ae4         db  0x0b ; '.'
0000000000001ae5         db  0x00 ; '.'
0000000000001ae6         db  0x00 ; '.'
0000000000001ae7         db  0x00 ; '.'
0000000000001ae8         db  0x00 ; '.'
0000000000001ae9         db  0x00 ; '.'
0000000000001aea         db  0x00 ; '.'
0000000000001aeb         db  0x00 ; '.'
0000000000001aec         db  0x00 ; '.'
0000000000001aed         db  0x00 ; '.'
0000000000001aee         db  0x00 ; '.'
0000000000001aef         db  0x00 ; '.'
0000000000001af0         db  0xe8 ; '.'
0000000000001af1         db  0x7c ; '|'
0000000000001af2         db  0x22 ; '"'
0000000000001af3         db  0x00 ; '.'
0000000000001af4         db  0x00 ; '.'
0000000000001af5         db  0x00 ; '.'
0000000000001af6         db  0x00 ; '.'
0000000000001af7         db  0x00 ; '.'
0000000000001af8         db  0x07 ; '.'
0000000000001af9         db  0x00 ; '.'
0000000000001afa         db  0x00 ; '.'
0000000000001afb         db  0x00 ; '.'
0000000000001afc         db  0x0c ; '.'
0000000000001afd         db  0x00 ; '.'
0000000000001afe         db  0x00 ; '.'
0000000000001aff         db  0x00 ; '.'
0000000000001b00         db  0x00 ; '.'
0000000000001b01         db  0x00 ; '.'
0000000000001b02         db  0x00 ; '.'
0000000000001b03         db  0x00 ; '.'
0000000000001b04         db  0x00 ; '.'
0000000000001b05         db  0x00 ; '.'
0000000000001b06         db  0x00 ; '.'
0000000000001b07         db  0x00 ; '.'
0000000000001b08         db  0xf0 ; '.'
0000000000001b09         db  0x7c ; '|'
0000000000001b0a         db  0x22 ; '"'
0000000000001b0b         db  0x00 ; '.'
0000000000001b0c         db  0x00 ; '.'
0000000000001b0d         db  0x00 ; '.'
0000000000001b0e         db  0x00 ; '.'
0000000000001b0f         db  0x00 ; '.'
0000000000001b10         db  0x07 ; '.'
0000000000001b11         db  0x00 ; '.'
0000000000001b12         db  0x00 ; '.'
0000000000001b13         db  0x00 ; '.'
0000000000001b14         db  0x0d ; '.'
0000000000001b15         db  0x00 ; '.'
0000000000001b16         db  0x00 ; '.'
0000000000001b17         db  0x00 ; '.'
0000000000001b18         db  0x00 ; '.'
0000000000001b19         db  0x00 ; '.'
0000000000001b1a         db  0x00 ; '.'
0000000000001b1b         db  0x00 ; '.'
0000000000001b1c         db  0x00 ; '.'
0000000000001b1d         db  0x00 ; '.'
0000000000001b1e         db  0x00 ; '.'
0000000000001b1f         db  0x00 ; '.'
0000000000001b20         db  0xf8 ; '.'
0000000000001b21         db  0x7c ; '|'
0000000000001b22         db  0x22 ; '"'
0000000000001b23         db  0x00 ; '.'
0000000000001b24         db  0x00 ; '.'
0000000000001b25         db  0x00 ; '.'
0000000000001b26         db  0x00 ; '.'
0000000000001b27         db  0x00 ; '.'
0000000000001b28         db  0x07 ; '.'
0000000000001b29         db  0x00 ; '.'
0000000000001b2a         db  0x00 ; '.'
0000000000001b2b         db  0x00 ; '.'
0000000000001b2c         db  0x0e ; '.'
0000000000001b2d         db  0x00 ; '.'
0000000000001b2e         db  0x00 ; '.'
0000000000001b2f         db  0x00 ; '.'
0000000000001b30         db  0x00 ; '.'
0000000000001b31         db  0x00 ; '.'
0000000000001b32         db  0x00 ; '.'
0000000000001b33         db  0x00 ; '.'
0000000000001b34         db  0x00 ; '.'
0000000000001b35         db  0x00 ; '.'
0000000000001b36         db  0x00 ; '.'
0000000000001b37         db  0x00 ; '.'
0000000000001b38         db  0x00 ; '.'
0000000000001b39         db  0x7d ; '}'
0000000000001b3a         db  0x22 ; '"'
0000000000001b3b         db  0x00 ; '.'
0000000000001b3c         db  0x00 ; '.'
0000000000001b3d         db  0x00 ; '.'
0000000000001b3e         db  0x00 ; '.'
0000000000001b3f         db  0x00 ; '.'
0000000000001b40         db  0x07 ; '.'
0000000000001b41         db  0x00 ; '.'
0000000000001b42         db  0x00 ; '.'
0000000000001b43         db  0x00 ; '.'
0000000000001b44         db  0x0f ; '.'
0000000000001b45         db  0x00 ; '.'
0000000000001b46         db  0x00 ; '.'
0000000000001b47         db  0x00 ; '.'
0000000000001b48         db  0x00 ; '.'
0000000000001b49         db  0x00 ; '.'
0000000000001b4a         db  0x00 ; '.'
0000000000001b4b         db  0x00 ; '.'
0000000000001b4c         db  0x00 ; '.'
0000000000001b4d         db  0x00 ; '.'
0000000000001b4e         db  0x00 ; '.'
0000000000001b4f         db  0x00 ; '.'
0000000000001b50         db  0x08 ; '.'
0000000000001b51         db  0x7d ; '}'
0000000000001b52         db  0x22 ; '"'
0000000000001b53         db  0x00 ; '.'
0000000000001b54         db  0x00 ; '.'
0000000000001b55         db  0x00 ; '.'
0000000000001b56         db  0x00 ; '.'
0000000000001b57         db  0x00 ; '.'
0000000000001b58         db  0x07 ; '.'
0000000000001b59         db  0x00 ; '.'
0000000000001b5a         db  0x00 ; '.'
0000000000001b5b         db  0x00 ; '.'
0000000000001b5c         db  0x10 ; '.'
0000000000001b5d         db  0x00 ; '.'
0000000000001b5e         db  0x00 ; '.'
0000000000001b5f         db  0x00 ; '.'
0000000000001b60         db  0x00 ; '.'
0000000000001b61         db  0x00 ; '.'
0000000000001b62         db  0x00 ; '.'
0000000000001b63         db  0x00 ; '.'
0000000000001b64         db  0x00 ; '.'
0000000000001b65         db  0x00 ; '.'
0000000000001b66         db  0x00 ; '.'
0000000000001b67         db  0x00 ; '.'
0000000000001b68         db  0x10 ; '.'
0000000000001b69         db  0x7d ; '}'
0000000000001b6a         db  0x22 ; '"'
0000000000001b6b         db  0x00 ; '.'
0000000000001b6c         db  0x00 ; '.'
0000000000001b6d         db  0x00 ; '.'
0000000000001b6e         db  0x00 ; '.'
0000000000001b6f         db  0x00 ; '.'
0000000000001b70         db  0x07 ; '.'
0000000000001b71         db  0x00 ; '.'
0000000000001b72         db  0x00 ; '.'
0000000000001b73         db  0x00 ; '.'
0000000000001b74         db  0x11 ; '.'
0000000000001b75         db  0x00 ; '.'
0000000000001b76         db  0x00 ; '.'
0000000000001b77         db  0x00 ; '.'
0000000000001b78         db  0x00 ; '.'
0000000000001b79         db  0x00 ; '.'
0000000000001b7a         db  0x00 ; '.'
0000000000001b7b         db  0x00 ; '.'
0000000000001b7c         db  0x00 ; '.'
0000000000001b7d         db  0x00 ; '.'
0000000000001b7e         db  0x00 ; '.'
0000000000001b7f         db  0x00 ; '.'
0000000000001b80         db  0x18 ; '.'
0000000000001b81         db  0x7d ; '}'
0000000000001b82         db  0x22 ; '"'
0000000000001b83         db  0x00 ; '.'
0000000000001b84         db  0x00 ; '.'
0000000000001b85         db  0x00 ; '.'
0000000000001b86         db  0x00 ; '.'
0000000000001b87         db  0x00 ; '.'
0000000000001b88         db  0x07 ; '.'
0000000000001b89         db  0x00 ; '.'
0000000000001b8a         db  0x00 ; '.'
0000000000001b8b         db  0x00 ; '.'
0000000000001b8c         db  0x12 ; '.'
0000000000001b8d         db  0x00 ; '.'
0000000000001b8e         db  0x00 ; '.'
0000000000001b8f         db  0x00 ; '.'
0000000000001b90         db  0x00 ; '.'
0000000000001b91         db  0x00 ; '.'
0000000000001b92         db  0x00 ; '.'
0000000000001b93         db  0x00 ; '.'
0000000000001b94         db  0x00 ; '.'
0000000000001b95         db  0x00 ; '.'
0000000000001b96         db  0x00 ; '.'
0000000000001b97         db  0x00 ; '.'
0000000000001b98         db  0x20 ; ' '
0000000000001b99         db  0x7d ; '}'
0000000000001b9a         db  0x22 ; '"'
0000000000001b9b         db  0x00 ; '.'
0000000000001b9c         db  0x00 ; '.'
0000000000001b9d         db  0x00 ; '.'
0000000000001b9e         db  0x00 ; '.'
0000000000001b9f         db  0x00 ; '.'
0000000000001ba0         db  0x07 ; '.'
0000000000001ba1         db  0x00 ; '.'
0000000000001ba2         db  0x00 ; '.'
0000000000001ba3         db  0x00 ; '.'
0000000000001ba4         db  0x13 ; '.'
0000000000001ba5         db  0x00 ; '.'
0000000000001ba6         db  0x00 ; '.'
0000000000001ba7         db  0x00 ; '.'
0000000000001ba8         db  0x00 ; '.'
0000000000001ba9         db  0x00 ; '.'
0000000000001baa         db  0x00 ; '.'
0000000000001bab         db  0x00 ; '.'
0000000000001bac         db  0x00 ; '.'
0000000000001bad         db  0x00 ; '.'
0000000000001bae         db  0x00 ; '.'
0000000000001baf         db  0x00 ; '.'
0000000000001bb0         db  0x28 ; '('
0000000000001bb1         db  0x7d ; '}'
0000000000001bb2         db  0x22 ; '"'
0000000000001bb3         db  0x00 ; '.'
0000000000001bb4         db  0x00 ; '.'
0000000000001bb5         db  0x00 ; '.'
0000000000001bb6         db  0x00 ; '.'
0000000000001bb7         db  0x00 ; '.'
0000000000001bb8         db  0x07 ; '.'
0000000000001bb9         db  0x00 ; '.'
0000000000001bba         db  0x00 ; '.'
0000000000001bbb         db  0x00 ; '.'
0000000000001bbc         db  0x14 ; '.'
0000000000001bbd         db  0x00 ; '.'
0000000000001bbe         db  0x00 ; '.'
0000000000001bbf         db  0x00 ; '.'
0000000000001bc0         db  0x00 ; '.'
0000000000001bc1         db  0x00 ; '.'
0000000000001bc2         db  0x00 ; '.'
0000000000001bc3         db  0x00 ; '.'
0000000000001bc4         db  0x00 ; '.'
0000000000001bc5         db  0x00 ; '.'
0000000000001bc6         db  0x00 ; '.'
0000000000001bc7         db  0x00 ; '.'
0000000000001bc8         db  0x30 ; '0'
0000000000001bc9         db  0x7d ; '}'
0000000000001bca         db  0x22 ; '"'
0000000000001bcb         db  0x00 ; '.'
0000000000001bcc         db  0x00 ; '.'
0000000000001bcd         db  0x00 ; '.'
0000000000001bce         db  0x00 ; '.'
0000000000001bcf         db  0x00 ; '.'
0000000000001bd0         db  0x07 ; '.'
0000000000001bd1         db  0x00 ; '.'
0000000000001bd2         db  0x00 ; '.'
0000000000001bd3         db  0x00 ; '.'
0000000000001bd4         db  0x15 ; '.'
0000000000001bd5         db  0x00 ; '.'
0000000000001bd6         db  0x00 ; '.'
0000000000001bd7         db  0x00 ; '.'
0000000000001bd8         db  0x00 ; '.'
0000000000001bd9         db  0x00 ; '.'
0000000000001bda         db  0x00 ; '.'
0000000000001bdb         db  0x00 ; '.'
0000000000001bdc         db  0x00 ; '.'
0000000000001bdd         db  0x00 ; '.'
0000000000001bde         db  0x00 ; '.'
0000000000001bdf         db  0x00 ; '.'
0000000000001be0         db  0x38 ; '8'
0000000000001be1         db  0x7d ; '}'
0000000000001be2         db  0x22 ; '"'
0000000000001be3         db  0x00 ; '.'
0000000000001be4         db  0x00 ; '.'
0000000000001be5         db  0x00 ; '.'
0000000000001be6         db  0x00 ; '.'
0000000000001be7         db  0x00 ; '.'
0000000000001be8         db  0x07 ; '.'
0000000000001be9         db  0x00 ; '.'
0000000000001bea         db  0x00 ; '.'
0000000000001beb         db  0x00 ; '.'
0000000000001bec         db  0x16 ; '.'
0000000000001bed         db  0x00 ; '.'
0000000000001bee         db  0x00 ; '.'
0000000000001bef         db  0x00 ; '.'
0000000000001bf0         db  0x00 ; '.'
0000000000001bf1         db  0x00 ; '.'
0000000000001bf2         db  0x00 ; '.'
0000000000001bf3         db  0x00 ; '.'
0000000000001bf4         db  0x00 ; '.'
0000000000001bf5         db  0x00 ; '.'
0000000000001bf6         db  0x00 ; '.'
0000000000001bf7         db  0x00 ; '.'
0000000000001bf8         db  0x40 ; '@'
0000000000001bf9         db  0x7d ; '}'
0000000000001bfa         db  0x22 ; '"'
0000000000001bfb         db  0x00 ; '.'
0000000000001bfc         db  0x00 ; '.'
0000000000001bfd         db  0x00 ; '.'
0000000000001bfe         db  0x00 ; '.'
0000000000001bff         db  0x00 ; '.'
0000000000001c00         db  0x07 ; '.'
0000000000001c01         db  0x00 ; '.'
0000000000001c02         db  0x00 ; '.'
0000000000001c03         db  0x00 ; '.'
0000000000001c04         db  0x17 ; '.'
0000000000001c05         db  0x00 ; '.'
0000000000001c06         db  0x00 ; '.'
0000000000001c07         db  0x00 ; '.'
0000000000001c08         db  0x00 ; '.'
0000000000001c09         db  0x00 ; '.'
0000000000001c0a         db  0x00 ; '.'
0000000000001c0b         db  0x00 ; '.'
0000000000001c0c         db  0x00 ; '.'
0000000000001c0d         db  0x00 ; '.'
0000000000001c0e         db  0x00 ; '.'
0000000000001c0f         db  0x00 ; '.'
0000000000001c10         db  0x48 ; 'H'
0000000000001c11         db  0x7d ; '}'
0000000000001c12         db  0x22 ; '"'
0000000000001c13         db  0x00 ; '.'
0000000000001c14         db  0x00 ; '.'
0000000000001c15         db  0x00 ; '.'
0000000000001c16         db  0x00 ; '.'
0000000000001c17         db  0x00 ; '.'
0000000000001c18         db  0x07 ; '.'
0000000000001c19         db  0x00 ; '.'
0000000000001c1a         db  0x00 ; '.'
0000000000001c1b         db  0x00 ; '.'
0000000000001c1c         db  0x18 ; '.'
0000000000001c1d         db  0x00 ; '.'
0000000000001c1e         db  0x00 ; '.'
0000000000001c1f         db  0x00 ; '.'
0000000000001c20         db  0x00 ; '.'
0000000000001c21         db  0x00 ; '.'
0000000000001c22         db  0x00 ; '.'
0000000000001c23         db  0x00 ; '.'
0000000000001c24         db  0x00 ; '.'
0000000000001c25         db  0x00 ; '.'
0000000000001c26         db  0x00 ; '.'
0000000000001c27         db  0x00 ; '.'
0000000000001c28         db  0x50 ; 'P'
0000000000001c29         db  0x7d ; '}'
0000000000001c2a         db  0x22 ; '"'
0000000000001c2b         db  0x00 ; '.'
0000000000001c2c         db  0x00 ; '.'
0000000000001c2d         db  0x00 ; '.'
0000000000001c2e         db  0x00 ; '.'
0000000000001c2f         db  0x00 ; '.'
0000000000001c30         db  0x07 ; '.'
0000000000001c31         db  0x00 ; '.'
0000000000001c32         db  0x00 ; '.'
0000000000001c33         db  0x00 ; '.'
0000000000001c34         db  0x19 ; '.'
0000000000001c35         db  0x00 ; '.'
0000000000001c36         db  0x00 ; '.'
0000000000001c37         db  0x00 ; '.'
0000000000001c38         db  0x00 ; '.'
0000000000001c39         db  0x00 ; '.'
0000000000001c3a         db  0x00 ; '.'
0000000000001c3b         db  0x00 ; '.'
0000000000001c3c         db  0x00 ; '.'
0000000000001c3d         db  0x00 ; '.'
0000000000001c3e         db  0x00 ; '.'
0000000000001c3f         db  0x00 ; '.'
0000000000001c40         db  0x58 ; 'X'
0000000000001c41         db  0x7d ; '}'
0000000000001c42         db  0x22 ; '"'
0000000000001c43         db  0x00 ; '.'
0000000000001c44         db  0x00 ; '.'
0000000000001c45         db  0x00 ; '.'
0000000000001c46         db  0x00 ; '.'
0000000000001c47         db  0x00 ; '.'
0000000000001c48         db  0x07 ; '.'
0000000000001c49         db  0x00 ; '.'
0000000000001c4a         db  0x00 ; '.'
0000000000001c4b         db  0x00 ; '.'
0000000000001c4c         db  0x1a ; '.'
0000000000001c4d         db  0x00 ; '.'
0000000000001c4e         db  0x00 ; '.'
0000000000001c4f         db  0x00 ; '.'
0000000000001c50         db  0x00 ; '.'
0000000000001c51         db  0x00 ; '.'
0000000000001c52         db  0x00 ; '.'
0000000000001c53         db  0x00 ; '.'
0000000000001c54         db  0x00 ; '.'
0000000000001c55         db  0x00 ; '.'
0000000000001c56         db  0x00 ; '.'
0000000000001c57         db  0x00 ; '.'
0000000000001c58         db  0x60 ; '`'
0000000000001c59         db  0x7d ; '}'
0000000000001c5a         db  0x22 ; '"'
0000000000001c5b         db  0x00 ; '.'
0000000000001c5c         db  0x00 ; '.'
0000000000001c5d         db  0x00 ; '.'
0000000000001c5e         db  0x00 ; '.'
0000000000001c5f         db  0x00 ; '.'
0000000000001c60         db  0x07 ; '.'
0000000000001c61         db  0x00 ; '.'
0000000000001c62         db  0x00 ; '.'
0000000000001c63         db  0x00 ; '.'
0000000000001c64         db  0x1b ; '.'
0000000000001c65         db  0x00 ; '.'
0000000000001c66         db  0x00 ; '.'
0000000000001c67         db  0x00 ; '.'
0000000000001c68         db  0x00 ; '.'
0000000000001c69         db  0x00 ; '.'
0000000000001c6a         db  0x00 ; '.'
0000000000001c6b         db  0x00 ; '.'
0000000000001c6c         db  0x00 ; '.'
0000000000001c6d         db  0x00 ; '.'
0000000000001c6e         db  0x00 ; '.'
0000000000001c6f         db  0x00 ; '.'
0000000000001c70         db  0x68 ; 'h'
0000000000001c71         db  0x7d ; '}'
0000000000001c72         db  0x22 ; '"'
0000000000001c73         db  0x00 ; '.'
0000000000001c74         db  0x00 ; '.'
0000000000001c75         db  0x00 ; '.'
0000000000001c76         db  0x00 ; '.'
0000000000001c77         db  0x00 ; '.'
0000000000001c78         db  0x07 ; '.'
0000000000001c79         db  0x00 ; '.'
0000000000001c7a         db  0x00 ; '.'
0000000000001c7b         db  0x00 ; '.'
0000000000001c7c         db  0x1c ; '.'
0000000000001c7d         db  0x00 ; '.'
0000000000001c7e         db  0x00 ; '.'
0000000000001c7f         db  0x00 ; '.'
0000000000001c80         db  0x00 ; '.'
0000000000001c81         db  0x00 ; '.'
0000000000001c82         db  0x00 ; '.'
0000000000001c83         db  0x00 ; '.'
0000000000001c84         db  0x00 ; '.'
0000000000001c85         db  0x00 ; '.'
0000000000001c86         db  0x00 ; '.'
0000000000001c87         db  0x00 ; '.'
0000000000001c88         db  0x70 ; 'p'
0000000000001c89         db  0x7d ; '}'
0000000000001c8a         db  0x22 ; '"'
0000000000001c8b         db  0x00 ; '.'
0000000000001c8c         db  0x00 ; '.'
0000000000001c8d         db  0x00 ; '.'
0000000000001c8e         db  0x00 ; '.'
0000000000001c8f         db  0x00 ; '.'
0000000000001c90         db  0x07 ; '.'
0000000000001c91         db  0x00 ; '.'
0000000000001c92         db  0x00 ; '.'
0000000000001c93         db  0x00 ; '.'
0000000000001c94         db  0x1d ; '.'
0000000000001c95         db  0x00 ; '.'
0000000000001c96         db  0x00 ; '.'
0000000000001c97         db  0x00 ; '.'
0000000000001c98         db  0x00 ; '.'
0000000000001c99         db  0x00 ; '.'
0000000000001c9a         db  0x00 ; '.'
0000000000001c9b         db  0x00 ; '.'
0000000000001c9c         db  0x00 ; '.'
0000000000001c9d         db  0x00 ; '.'
0000000000001c9e         db  0x00 ; '.'
0000000000001c9f         db  0x00 ; '.'
0000000000001ca0         db  0x78 ; 'x'
0000000000001ca1         db  0x7d ; '}'
0000000000001ca2         db  0x22 ; '"'
0000000000001ca3         db  0x00 ; '.'
0000000000001ca4         db  0x00 ; '.'
0000000000001ca5         db  0x00 ; '.'
0000000000001ca6         db  0x00 ; '.'
0000000000001ca7         db  0x00 ; '.'
0000000000001ca8         db  0x07 ; '.'
0000000000001ca9         db  0x00 ; '.'
0000000000001caa         db  0x00 ; '.'
0000000000001cab         db  0x00 ; '.'
0000000000001cac         db  0x1e ; '.'
0000000000001cad         db  0x00 ; '.'
0000000000001cae         db  0x00 ; '.'
0000000000001caf         db  0x00 ; '.'
0000000000001cb0         db  0x00 ; '.'
0000000000001cb1         db  0x00 ; '.'
0000000000001cb2         db  0x00 ; '.'
0000000000001cb3         db  0x00 ; '.'
0000000000001cb4         db  0x00 ; '.'
0000000000001cb5         db  0x00 ; '.'
0000000000001cb6         db  0x00 ; '.'
0000000000001cb7         db  0x00 ; '.'
0000000000001cb8         db  0x80 ; '.'
0000000000001cb9         db  0x7d ; '}'
0000000000001cba         db  0x22 ; '"'
0000000000001cbb         db  0x00 ; '.'
0000000000001cbc         db  0x00 ; '.'
0000000000001cbd         db  0x00 ; '.'
0000000000001cbe         db  0x00 ; '.'
0000000000001cbf         db  0x00 ; '.'
0000000000001cc0         db  0x07 ; '.'
0000000000001cc1         db  0x00 ; '.'
0000000000001cc2         db  0x00 ; '.'
0000000000001cc3         db  0x00 ; '.'
0000000000001cc4         db  0x1f ; '.'
0000000000001cc5         db  0x00 ; '.'
0000000000001cc6         db  0x00 ; '.'
0000000000001cc7         db  0x00 ; '.'
0000000000001cc8         db  0x00 ; '.'
0000000000001cc9         db  0x00 ; '.'
0000000000001cca         db  0x00 ; '.'
0000000000001ccb         db  0x00 ; '.'
0000000000001ccc         db  0x00 ; '.'
0000000000001ccd         db  0x00 ; '.'
0000000000001cce         db  0x00 ; '.'
0000000000001ccf         db  0x00 ; '.'
0000000000001cd0         db  0x88 ; '.'
0000000000001cd1         db  0x7d ; '}'
0000000000001cd2         db  0x22 ; '"'
0000000000001cd3         db  0x00 ; '.'
0000000000001cd4         db  0x00 ; '.'
0000000000001cd5         db  0x00 ; '.'
0000000000001cd6         db  0x00 ; '.'
0000000000001cd7         db  0x00 ; '.'
0000000000001cd8         db  0x07 ; '.'
0000000000001cd9         db  0x00 ; '.'
0000000000001cda         db  0x00 ; '.'
0000000000001cdb         db  0x00 ; '.'
0000000000001cdc         db  0x20 ; ' '
0000000000001cdd         db  0x00 ; '.'
0000000000001cde         db  0x00 ; '.'
0000000000001cdf         db  0x00 ; '.'
0000000000001ce0         db  0x00 ; '.'
0000000000001ce1         db  0x00 ; '.'
0000000000001ce2         db  0x00 ; '.'
0000000000001ce3         db  0x00 ; '.'
0000000000001ce4         db  0x00 ; '.'
0000000000001ce5         db  0x00 ; '.'
0000000000001ce6         db  0x00 ; '.'
0000000000001ce7         db  0x00 ; '.'
0000000000001ce8         db  0x90 ; '.'
0000000000001ce9         db  0x7d ; '}'
0000000000001cea         db  0x22 ; '"'
0000000000001ceb         db  0x00 ; '.'
0000000000001cec         db  0x00 ; '.'
0000000000001ced         db  0x00 ; '.'
0000000000001cee         db  0x00 ; '.'
0000000000001cef         db  0x00 ; '.'
0000000000001cf0         db  0x07 ; '.'
0000000000001cf1         db  0x00 ; '.'
0000000000001cf2         db  0x00 ; '.'
0000000000001cf3         db  0x00 ; '.'
0000000000001cf4         db  0x21 ; '!'
0000000000001cf5         db  0x00 ; '.'
0000000000001cf6         db  0x00 ; '.'
0000000000001cf7         db  0x00 ; '.'
0000000000001cf8         db  0x00 ; '.'
0000000000001cf9         db  0x00 ; '.'
0000000000001cfa         db  0x00 ; '.'
0000000000001cfb         db  0x00 ; '.'
0000000000001cfc         db  0x00 ; '.'
0000000000001cfd         db  0x00 ; '.'
0000000000001cfe         db  0x00 ; '.'
0000000000001cff         db  0x00 ; '.'
0000000000001d00         db  0x98 ; '.'
0000000000001d01         db  0x7d ; '}'
0000000000001d02         db  0x22 ; '"'
0000000000001d03         db  0x00 ; '.'
0000000000001d04         db  0x00 ; '.'
0000000000001d05         db  0x00 ; '.'
0000000000001d06         db  0x00 ; '.'
0000000000001d07         db  0x00 ; '.'
0000000000001d08         db  0x07 ; '.'
0000000000001d09         db  0x00 ; '.'
0000000000001d0a         db  0x00 ; '.'
0000000000001d0b         db  0x00 ; '.'
0000000000001d0c         db  0x22 ; '"'
0000000000001d0d         db  0x00 ; '.'
0000000000001d0e         db  0x00 ; '.'
0000000000001d0f         db  0x00 ; '.'
0000000000001d10         db  0x00 ; '.'
0000000000001d11         db  0x00 ; '.'
0000000000001d12         db  0x00 ; '.'
0000000000001d13         db  0x00 ; '.'
0000000000001d14         db  0x00 ; '.'
0000000000001d15         db  0x00 ; '.'
0000000000001d16         db  0x00 ; '.'
0000000000001d17         db  0x00 ; '.'
0000000000001d18         db  0xa0 ; '.'
0000000000001d19         db  0x7d ; '}'
0000000000001d1a         db  0x22 ; '"'
0000000000001d1b         db  0x00 ; '.'
0000000000001d1c         db  0x00 ; '.'
0000000000001d1d         db  0x00 ; '.'
0000000000001d1e         db  0x00 ; '.'
0000000000001d1f         db  0x00 ; '.'
0000000000001d20         db  0x07 ; '.'
0000000000001d21         db  0x00 ; '.'
0000000000001d22         db  0x00 ; '.'
0000000000001d23         db  0x00 ; '.'
0000000000001d24         db  0x23 ; '#'
0000000000001d25         db  0x00 ; '.'
0000000000001d26         db  0x00 ; '.'
0000000000001d27         db  0x00 ; '.'
0000000000001d28         db  0x00 ; '.'
0000000000001d29         db  0x00 ; '.'
0000000000001d2a         db  0x00 ; '.'
0000000000001d2b         db  0x00 ; '.'
0000000000001d2c         db  0x00 ; '.'
0000000000001d2d         db  0x00 ; '.'
0000000000001d2e         db  0x00 ; '.'
0000000000001d2f         db  0x00 ; '.'
0000000000001d30         db  0xa8 ; '.'
0000000000001d31         db  0x7d ; '}'
0000000000001d32         db  0x22 ; '"'
0000000000001d33         db  0x00 ; '.'
0000000000001d34         db  0x00 ; '.'
0000000000001d35         db  0x00 ; '.'
0000000000001d36         db  0x00 ; '.'
0000000000001d37         db  0x00 ; '.'
0000000000001d38         db  0x07 ; '.'
0000000000001d39         db  0x00 ; '.'
0000000000001d3a         db  0x00 ; '.'
0000000000001d3b         db  0x00 ; '.'
0000000000001d3c         db  0x24 ; '$'
0000000000001d3d         db  0x00 ; '.'
0000000000001d3e         db  0x00 ; '.'
0000000000001d3f         db  0x00 ; '.'
0000000000001d40         db  0x00 ; '.'
0000000000001d41         db  0x00 ; '.'
0000000000001d42         db  0x00 ; '.'
0000000000001d43         db  0x00 ; '.'
0000000000001d44         db  0x00 ; '.'
0000000000001d45         db  0x00 ; '.'
0000000000001d46         db  0x00 ; '.'
0000000000001d47         db  0x00 ; '.'
0000000000001d48         db  0xb0 ; '.'
0000000000001d49         db  0x7d ; '}'
0000000000001d4a         db  0x22 ; '"'
0000000000001d4b         db  0x00 ; '.'
0000000000001d4c         db  0x00 ; '.'
0000000000001d4d         db  0x00 ; '.'
0000000000001d4e         db  0x00 ; '.'
0000000000001d4f         db  0x00 ; '.'
0000000000001d50         db  0x07 ; '.'
0000000000001d51         db  0x00 ; '.'
0000000000001d52         db  0x00 ; '.'
0000000000001d53         db  0x00 ; '.'
0000000000001d54         db  0x25 ; '%'
0000000000001d55         db  0x00 ; '.'
0000000000001d56         db  0x00 ; '.'
0000000000001d57         db  0x00 ; '.'
0000000000001d58         db  0x00 ; '.'
0000000000001d59         db  0x00 ; '.'
0000000000001d5a         db  0x00 ; '.'
0000000000001d5b         db  0x00 ; '.'
0000000000001d5c         db  0x00 ; '.'
0000000000001d5d         db  0x00 ; '.'
0000000000001d5e         db  0x00 ; '.'
0000000000001d5f         db  0x00 ; '.'
0000000000001d60         db  0xb8 ; '.'
0000000000001d61         db  0x7d ; '}'
0000000000001d62         db  0x22 ; '"'
0000000000001d63         db  0x00 ; '.'
0000000000001d64         db  0x00 ; '.'
0000000000001d65         db  0x00 ; '.'
0000000000001d66         db  0x00 ; '.'
0000000000001d67         db  0x00 ; '.'
0000000000001d68         db  0x07 ; '.'
0000000000001d69         db  0x00 ; '.'
0000000000001d6a         db  0x00 ; '.'
0000000000001d6b         db  0x00 ; '.'
0000000000001d6c         db  0x26 ; '&'
0000000000001d6d         db  0x00 ; '.'
0000000000001d6e         db  0x00 ; '.'
0000000000001d6f         db  0x00 ; '.'
0000000000001d70         db  0x00 ; '.'
0000000000001d71         db  0x00 ; '.'
0000000000001d72         db  0x00 ; '.'
0000000000001d73         db  0x00 ; '.'
0000000000001d74         db  0x00 ; '.'
0000000000001d75         db  0x00 ; '.'
0000000000001d76         db  0x00 ; '.'
0000000000001d77         db  0x00 ; '.'
0000000000001d78         db  0xc0 ; '.'
0000000000001d79         db  0x7d ; '}'
0000000000001d7a         db  0x22 ; '"'
0000000000001d7b         db  0x00 ; '.'
0000000000001d7c         db  0x00 ; '.'
0000000000001d7d         db  0x00 ; '.'
0000000000001d7e         db  0x00 ; '.'
0000000000001d7f         db  0x00 ; '.'
0000000000001d80         db  0x07 ; '.'
0000000000001d81         db  0x00 ; '.'
0000000000001d82         db  0x00 ; '.'
0000000000001d83         db  0x00 ; '.'
0000000000001d84         db  0x27 ; '''
0000000000001d85         db  0x00 ; '.'
0000000000001d86         db  0x00 ; '.'
0000000000001d87         db  0x00 ; '.'
0000000000001d88         db  0x00 ; '.'
0000000000001d89         db  0x00 ; '.'
0000000000001d8a         db  0x00 ; '.'
0000000000001d8b         db  0x00 ; '.'
0000000000001d8c         db  0x00 ; '.'
0000000000001d8d         db  0x00 ; '.'
0000000000001d8e         db  0x00 ; '.'
0000000000001d8f         db  0x00 ; '.'
0000000000001d90         db  0xc8 ; '.'
0000000000001d91         db  0x7d ; '}'
0000000000001d92         db  0x22 ; '"'
0000000000001d93         db  0x00 ; '.'
0000000000001d94         db  0x00 ; '.'
0000000000001d95         db  0x00 ; '.'
0000000000001d96         db  0x00 ; '.'
0000000000001d97         db  0x00 ; '.'
0000000000001d98         db  0x07 ; '.'
0000000000001d99         db  0x00 ; '.'
0000000000001d9a         db  0x00 ; '.'
0000000000001d9b         db  0x00 ; '.'
0000000000001d9c         db  0x28 ; '('
0000000000001d9d         db  0x00 ; '.'
0000000000001d9e         db  0x00 ; '.'
0000000000001d9f         db  0x00 ; '.'
0000000000001da0         db  0x00 ; '.'
0000000000001da1         db  0x00 ; '.'
0000000000001da2         db  0x00 ; '.'
0000000000001da3         db  0x00 ; '.'
0000000000001da4         db  0x00 ; '.'
0000000000001da5         db  0x00 ; '.'
0000000000001da6         db  0x00 ; '.'
0000000000001da7         db  0x00 ; '.'
0000000000001da8         db  0xd0 ; '.'
0000000000001da9         db  0x7d ; '}'
0000000000001daa         db  0x22 ; '"'
0000000000001dab         db  0x00 ; '.'
0000000000001dac         db  0x00 ; '.'
0000000000001dad         db  0x00 ; '.'
0000000000001dae         db  0x00 ; '.'
0000000000001daf         db  0x00 ; '.'
0000000000001db0         db  0x07 ; '.'
0000000000001db1         db  0x00 ; '.'
0000000000001db2         db  0x00 ; '.'
0000000000001db3         db  0x00 ; '.'
0000000000001db4         db  0x2a ; '*'
0000000000001db5         db  0x00 ; '.'
0000000000001db6         db  0x00 ; '.'
0000000000001db7         db  0x00 ; '.'
0000000000001db8         db  0x00 ; '.'
0000000000001db9         db  0x00 ; '.'
0000000000001dba         db  0x00 ; '.'
0000000000001dbb         db  0x00 ; '.'
0000000000001dbc         db  0x00 ; '.'
0000000000001dbd         db  0x00 ; '.'
0000000000001dbe         db  0x00 ; '.'
0000000000001dbf         db  0x00 ; '.'
0000000000001dc0         db  0xd8 ; '.'
0000000000001dc1         db  0x7d ; '}'
0000000000001dc2         db  0x22 ; '"'
0000000000001dc3         db  0x00 ; '.'
0000000000001dc4         db  0x00 ; '.'
0000000000001dc5         db  0x00 ; '.'
0000000000001dc6         db  0x00 ; '.'
0000000000001dc7         db  0x00 ; '.'
0000000000001dc8         db  0x07 ; '.'
0000000000001dc9         db  0x00 ; '.'
0000000000001dca         db  0x00 ; '.'
0000000000001dcb         db  0x00 ; '.'
0000000000001dcc         db  0x2b ; '+'
0000000000001dcd         db  0x00 ; '.'
0000000000001dce         db  0x00 ; '.'
0000000000001dcf         db  0x00 ; '.'
0000000000001dd0         db  0x00 ; '.'
0000000000001dd1         db  0x00 ; '.'
0000000000001dd2         db  0x00 ; '.'
0000000000001dd3         db  0x00 ; '.'
0000000000001dd4         db  0x00 ; '.'
0000000000001dd5         db  0x00 ; '.'
0000000000001dd6         db  0x00 ; '.'
0000000000001dd7         db  0x00 ; '.'
0000000000001dd8         db  0xe0 ; '.'
0000000000001dd9         db  0x7d ; '}'
0000000000001dda         db  0x22 ; '"'
0000000000001ddb         db  0x00 ; '.'
0000000000001ddc         db  0x00 ; '.'
0000000000001ddd         db  0x00 ; '.'
0000000000001dde         db  0x00 ; '.'
0000000000001ddf         db  0x00 ; '.'
0000000000001de0         db  0x07 ; '.'
0000000000001de1         db  0x00 ; '.'
0000000000001de2         db  0x00 ; '.'
0000000000001de3         db  0x00 ; '.'
0000000000001de4         db  0x2c ; ','
0000000000001de5         db  0x00 ; '.'
0000000000001de6         db  0x00 ; '.'
0000000000001de7         db  0x00 ; '.'
0000000000001de8         db  0x00 ; '.'
0000000000001de9         db  0x00 ; '.'
0000000000001dea         db  0x00 ; '.'
0000000000001deb         db  0x00 ; '.'
0000000000001dec         db  0x00 ; '.'
0000000000001ded         db  0x00 ; '.'
0000000000001dee         db  0x00 ; '.'
0000000000001def         db  0x00 ; '.'
0000000000001df0         db  0xe8 ; '.'
0000000000001df1         db  0x7d ; '}'
0000000000001df2         db  0x22 ; '"'
0000000000001df3         db  0x00 ; '.'
0000000000001df4         db  0x00 ; '.'
0000000000001df5         db  0x00 ; '.'
0000000000001df6         db  0x00 ; '.'
0000000000001df7         db  0x00 ; '.'
0000000000001df8         db  0x07 ; '.'
0000000000001df9         db  0x00 ; '.'
0000000000001dfa         db  0x00 ; '.'
0000000000001dfb         db  0x00 ; '.'
0000000000001dfc         db  0x2d ; '-'
0000000000001dfd         db  0x00 ; '.'
0000000000001dfe         db  0x00 ; '.'
0000000000001dff         db  0x00 ; '.'
0000000000001e00         db  0x00 ; '.'
0000000000001e01         db  0x00 ; '.'
0000000000001e02         db  0x00 ; '.'
0000000000001e03         db  0x00 ; '.'
0000000000001e04         db  0x00 ; '.'
0000000000001e05         db  0x00 ; '.'
0000000000001e06         db  0x00 ; '.'
0000000000001e07         db  0x00 ; '.'
0000000000001e08         db  0xf0 ; '.'
0000000000001e09         db  0x7d ; '}'
0000000000001e0a         db  0x22 ; '"'
0000000000001e0b         db  0x00 ; '.'
0000000000001e0c         db  0x00 ; '.'
0000000000001e0d         db  0x00 ; '.'
0000000000001e0e         db  0x00 ; '.'
0000000000001e0f         db  0x00 ; '.'
0000000000001e10         db  0x07 ; '.'
0000000000001e11         db  0x00 ; '.'
0000000000001e12         db  0x00 ; '.'
0000000000001e13         db  0x00 ; '.'
0000000000001e14         db  0x2e ; '.'
0000000000001e15         db  0x00 ; '.'
0000000000001e16         db  0x00 ; '.'
0000000000001e17         db  0x00 ; '.'
0000000000001e18         db  0x00 ; '.'
0000000000001e19         db  0x00 ; '.'
0000000000001e1a         db  0x00 ; '.'
0000000000001e1b         db  0x00 ; '.'
0000000000001e1c         db  0x00 ; '.'
0000000000001e1d         db  0x00 ; '.'
0000000000001e1e         db  0x00 ; '.'
0000000000001e1f         db  0x00 ; '.'
0000000000001e20         db  0xf8 ; '.'
0000000000001e21         db  0x7d ; '}'
0000000000001e22         db  0x22 ; '"'
0000000000001e23         db  0x00 ; '.'
0000000000001e24         db  0x00 ; '.'
0000000000001e25         db  0x00 ; '.'
0000000000001e26         db  0x00 ; '.'
0000000000001e27         db  0x00 ; '.'
0000000000001e28         db  0x07 ; '.'
0000000000001e29         db  0x00 ; '.'
0000000000001e2a         db  0x00 ; '.'
0000000000001e2b         db  0x00 ; '.'
0000000000001e2c         db  0x2f ; '/'
0000000000001e2d         db  0x00 ; '.'
0000000000001e2e         db  0x00 ; '.'
0000000000001e2f         db  0x00 ; '.'
0000000000001e30         db  0x00 ; '.'
0000000000001e31         db  0x00 ; '.'
0000000000001e32         db  0x00 ; '.'
0000000000001e33         db  0x00 ; '.'
0000000000001e34         db  0x00 ; '.'
0000000000001e35         db  0x00 ; '.'
0000000000001e36         db  0x00 ; '.'
0000000000001e37         db  0x00 ; '.'
0000000000001e38         db  0x00 ; '.'
0000000000001e39         db  0x7e ; '~'
0000000000001e3a         db  0x22 ; '"'
0000000000001e3b         db  0x00 ; '.'
0000000000001e3c         db  0x00 ; '.'
0000000000001e3d         db  0x00 ; '.'
0000000000001e3e         db  0x00 ; '.'
0000000000001e3f         db  0x00 ; '.'
0000000000001e40         db  0x07 ; '.'
0000000000001e41         db  0x00 ; '.'
0000000000001e42         db  0x00 ; '.'
0000000000001e43         db  0x00 ; '.'
0000000000001e44         db  0x31 ; '1'
0000000000001e45         db  0x00 ; '.'
0000000000001e46         db  0x00 ; '.'
0000000000001e47         db  0x00 ; '.'
0000000000001e48         db  0x00 ; '.'
0000000000001e49         db  0x00 ; '.'
0000000000001e4a         db  0x00 ; '.'
0000000000001e4b         db  0x00 ; '.'
0000000000001e4c         db  0x00 ; '.'
0000000000001e4d         db  0x00 ; '.'
0000000000001e4e         db  0x00 ; '.'
0000000000001e4f         db  0x00 ; '.'
0000000000001e50         db  0x08 ; '.'
0000000000001e51         db  0x7e ; '~'
0000000000001e52         db  0x22 ; '"'
0000000000001e53         db  0x00 ; '.'
0000000000001e54         db  0x00 ; '.'
0000000000001e55         db  0x00 ; '.'
0000000000001e56         db  0x00 ; '.'
0000000000001e57         db  0x00 ; '.'
0000000000001e58         db  0x07 ; '.'
0000000000001e59         db  0x00 ; '.'
0000000000001e5a         db  0x00 ; '.'
0000000000001e5b         db  0x00 ; '.'
0000000000001e5c         db  0x32 ; '2'
0000000000001e5d         db  0x00 ; '.'
0000000000001e5e         db  0x00 ; '.'
0000000000001e5f         db  0x00 ; '.'
0000000000001e60         db  0x00 ; '.'
0000000000001e61         db  0x00 ; '.'
0000000000001e62         db  0x00 ; '.'
0000000000001e63         db  0x00 ; '.'
0000000000001e64         db  0x00 ; '.'
0000000000001e65         db  0x00 ; '.'
0000000000001e66         db  0x00 ; '.'
0000000000001e67         db  0x00 ; '.'
0000000000001e68         db  0x10 ; '.'
0000000000001e69         db  0x7e ; '~'
0000000000001e6a         db  0x22 ; '"'
0000000000001e6b         db  0x00 ; '.'
0000000000001e6c         db  0x00 ; '.'
0000000000001e6d         db  0x00 ; '.'
0000000000001e6e         db  0x00 ; '.'
0000000000001e6f         db  0x00 ; '.'
0000000000001e70         db  0x07 ; '.'
0000000000001e71         db  0x00 ; '.'
0000000000001e72         db  0x00 ; '.'
0000000000001e73         db  0x00 ; '.'
0000000000001e74         db  0x33 ; '3'
0000000000001e75         db  0x00 ; '.'
0000000000001e76         db  0x00 ; '.'
0000000000001e77         db  0x00 ; '.'
0000000000001e78         db  0x00 ; '.'
0000000000001e79         db  0x00 ; '.'
0000000000001e7a         db  0x00 ; '.'
0000000000001e7b         db  0x00 ; '.'
0000000000001e7c         db  0x00 ; '.'
0000000000001e7d         db  0x00 ; '.'
0000000000001e7e         db  0x00 ; '.'
0000000000001e7f         db  0x00 ; '.'
0000000000001e80         db  0x18 ; '.'
0000000000001e81         db  0x7e ; '~'
0000000000001e82         db  0x22 ; '"'
0000000000001e83         db  0x00 ; '.'
0000000000001e84         db  0x00 ; '.'
0000000000001e85         db  0x00 ; '.'
0000000000001e86         db  0x00 ; '.'
0000000000001e87         db  0x00 ; '.'
0000000000001e88         db  0x07 ; '.'
0000000000001e89         db  0x00 ; '.'
0000000000001e8a         db  0x00 ; '.'
0000000000001e8b         db  0x00 ; '.'
0000000000001e8c         db  0x34 ; '4'
0000000000001e8d         db  0x00 ; '.'
0000000000001e8e         db  0x00 ; '.'
0000000000001e8f         db  0x00 ; '.'
0000000000001e90         db  0x00 ; '.'
0000000000001e91         db  0x00 ; '.'
0000000000001e92         db  0x00 ; '.'
0000000000001e93         db  0x00 ; '.'
0000000000001e94         db  0x00 ; '.'
0000000000001e95         db  0x00 ; '.'
0000000000001e96         db  0x00 ; '.'
0000000000001e97         db  0x00 ; '.'
0000000000001e98         db  0x20 ; ' '
0000000000001e99         db  0x7e ; '~'
0000000000001e9a         db  0x22 ; '"'
0000000000001e9b         db  0x00 ; '.'
0000000000001e9c         db  0x00 ; '.'
0000000000001e9d         db  0x00 ; '.'
0000000000001e9e         db  0x00 ; '.'
0000000000001e9f         db  0x00 ; '.'
0000000000001ea0         db  0x07 ; '.'
0000000000001ea1         db  0x00 ; '.'
0000000000001ea2         db  0x00 ; '.'
0000000000001ea3         db  0x00 ; '.'
0000000000001ea4         db  0x35 ; '5'
0000000000001ea5         db  0x00 ; '.'
0000000000001ea6         db  0x00 ; '.'
0000000000001ea7         db  0x00 ; '.'
0000000000001ea8         db  0x00 ; '.'
0000000000001ea9         db  0x00 ; '.'
0000000000001eaa         db  0x00 ; '.'
0000000000001eab         db  0x00 ; '.'
0000000000001eac         db  0x00 ; '.'
0000000000001ead         db  0x00 ; '.'
0000000000001eae         db  0x00 ; '.'
0000000000001eaf         db  0x00 ; '.'
0000000000001eb0         db  0x28 ; '('
0000000000001eb1         db  0x7e ; '~'
0000000000001eb2         db  0x22 ; '"'
0000000000001eb3         db  0x00 ; '.'
0000000000001eb4         db  0x00 ; '.'
0000000000001eb5         db  0x00 ; '.'
0000000000001eb6         db  0x00 ; '.'
0000000000001eb7         db  0x00 ; '.'
0000000000001eb8         db  0x07 ; '.'
0000000000001eb9         db  0x00 ; '.'
0000000000001eba         db  0x00 ; '.'
0000000000001ebb         db  0x00 ; '.'
0000000000001ebc         db  0x36 ; '6'
0000000000001ebd         db  0x00 ; '.'
0000000000001ebe         db  0x00 ; '.'
0000000000001ebf         db  0x00 ; '.'
0000000000001ec0         db  0x00 ; '.'
0000000000001ec1         db  0x00 ; '.'
0000000000001ec2         db  0x00 ; '.'
0000000000001ec3         db  0x00 ; '.'
0000000000001ec4         db  0x00 ; '.'
0000000000001ec5         db  0x00 ; '.'
0000000000001ec6         db  0x00 ; '.'
0000000000001ec7         db  0x00 ; '.'
0000000000001ec8         db  0x30 ; '0'
0000000000001ec9         db  0x7e ; '~'
0000000000001eca         db  0x22 ; '"'
0000000000001ecb         db  0x00 ; '.'
0000000000001ecc         db  0x00 ; '.'
0000000000001ecd         db  0x00 ; '.'
0000000000001ece         db  0x00 ; '.'
0000000000001ecf         db  0x00 ; '.'
0000000000001ed0         db  0x07 ; '.'
0000000000001ed1         db  0x00 ; '.'
0000000000001ed2         db  0x00 ; '.'
0000000000001ed3         db  0x00 ; '.'
0000000000001ed4         db  0x37 ; '7'
0000000000001ed5         db  0x00 ; '.'
0000000000001ed6         db  0x00 ; '.'
0000000000001ed7         db  0x00 ; '.'
0000000000001ed8         db  0x00 ; '.'
0000000000001ed9         db  0x00 ; '.'
0000000000001eda         db  0x00 ; '.'
0000000000001edb         db  0x00 ; '.'
0000000000001edc         db  0x00 ; '.'
0000000000001edd         db  0x00 ; '.'
0000000000001ede         db  0x00 ; '.'
0000000000001edf         db  0x00 ; '.'
0000000000001ee0         db  0x38 ; '8'
0000000000001ee1         db  0x7e ; '~'
0000000000001ee2         db  0x22 ; '"'
0000000000001ee3         db  0x00 ; '.'
0000000000001ee4         db  0x00 ; '.'
0000000000001ee5         db  0x00 ; '.'
0000000000001ee6         db  0x00 ; '.'
0000000000001ee7         db  0x00 ; '.'
0000000000001ee8         db  0x07 ; '.'
0000000000001ee9         db  0x00 ; '.'
0000000000001eea         db  0x00 ; '.'
0000000000001eeb         db  0x00 ; '.'
0000000000001eec         db  0x38 ; '8'
0000000000001eed         db  0x00 ; '.'
0000000000001eee         db  0x00 ; '.'
0000000000001eef         db  0x00 ; '.'
0000000000001ef0         db  0x00 ; '.'
0000000000001ef1         db  0x00 ; '.'
0000000000001ef2         db  0x00 ; '.'
0000000000001ef3         db  0x00 ; '.'
0000000000001ef4         db  0x00 ; '.'
0000000000001ef5         db  0x00 ; '.'
0000000000001ef6         db  0x00 ; '.'
0000000000001ef7         db  0x00 ; '.'
0000000000001ef8         db  0x40 ; '@'
0000000000001ef9         db  0x7e ; '~'
0000000000001efa         db  0x22 ; '"'
0000000000001efb         db  0x00 ; '.'
0000000000001efc         db  0x00 ; '.'
0000000000001efd         db  0x00 ; '.'
0000000000001efe         db  0x00 ; '.'
0000000000001eff         db  0x00 ; '.'
0000000000001f00         db  0x07 ; '.'
0000000000001f01         db  0x00 ; '.'
0000000000001f02         db  0x00 ; '.'
0000000000001f03         db  0x00 ; '.'
0000000000001f04         db  0x39 ; '9'
0000000000001f05         db  0x00 ; '.'
0000000000001f06         db  0x00 ; '.'
0000000000001f07         db  0x00 ; '.'
0000000000001f08         db  0x00 ; '.'
0000000000001f09         db  0x00 ; '.'
0000000000001f0a         db  0x00 ; '.'
0000000000001f0b         db  0x00 ; '.'
0000000000001f0c         db  0x00 ; '.'
0000000000001f0d         db  0x00 ; '.'
0000000000001f0e         db  0x00 ; '.'
0000000000001f0f         db  0x00 ; '.'
0000000000001f10         db  0x48 ; 'H'
0000000000001f11         db  0x7e ; '~'
0000000000001f12         db  0x22 ; '"'
0000000000001f13         db  0x00 ; '.'
0000000000001f14         db  0x00 ; '.'
0000000000001f15         db  0x00 ; '.'
0000000000001f16         db  0x00 ; '.'
0000000000001f17         db  0x00 ; '.'
0000000000001f18         db  0x07 ; '.'
0000000000001f19         db  0x00 ; '.'
0000000000001f1a         db  0x00 ; '.'
0000000000001f1b         db  0x00 ; '.'
0000000000001f1c         db  0x3b ; ';'
0000000000001f1d         db  0x00 ; '.'
0000000000001f1e         db  0x00 ; '.'
0000000000001f1f         db  0x00 ; '.'
0000000000001f20         db  0x00 ; '.'
0000000000001f21         db  0x00 ; '.'
0000000000001f22         db  0x00 ; '.'
0000000000001f23         db  0x00 ; '.'
0000000000001f24         db  0x00 ; '.'
0000000000001f25         db  0x00 ; '.'
0000000000001f26         db  0x00 ; '.'
0000000000001f27         db  0x00 ; '.'
0000000000001f28         db  0x50 ; 'P'
0000000000001f29         db  0x7e ; '~'
0000000000001f2a         db  0x22 ; '"'
0000000000001f2b         db  0x00 ; '.'
0000000000001f2c         db  0x00 ; '.'
0000000000001f2d         db  0x00 ; '.'
0000000000001f2e         db  0x00 ; '.'
0000000000001f2f         db  0x00 ; '.'
0000000000001f30         db  0x07 ; '.'
0000000000001f31         db  0x00 ; '.'
0000000000001f32         db  0x00 ; '.'
0000000000001f33         db  0x00 ; '.'
0000000000001f34         db  0x3c ; '<'
0000000000001f35         db  0x00 ; '.'
0000000000001f36         db  0x00 ; '.'
0000000000001f37         db  0x00 ; '.'
0000000000001f38         db  0x00 ; '.'
0000000000001f39         db  0x00 ; '.'
0000000000001f3a         db  0x00 ; '.'
0000000000001f3b         db  0x00 ; '.'
0000000000001f3c         db  0x00 ; '.'
0000000000001f3d         db  0x00 ; '.'
0000000000001f3e         db  0x00 ; '.'
0000000000001f3f         db  0x00 ; '.'
0000000000001f40         db  0x58 ; 'X'
0000000000001f41         db  0x7e ; '~'
0000000000001f42         db  0x22 ; '"'
0000000000001f43         db  0x00 ; '.'
0000000000001f44         db  0x00 ; '.'
0000000000001f45         db  0x00 ; '.'
0000000000001f46         db  0x00 ; '.'
0000000000001f47         db  0x00 ; '.'
0000000000001f48         db  0x07 ; '.'
0000000000001f49         db  0x00 ; '.'
0000000000001f4a         db  0x00 ; '.'
0000000000001f4b         db  0x00 ; '.'
0000000000001f4c         db  0x3d ; '='
0000000000001f4d         db  0x00 ; '.'
0000000000001f4e         db  0x00 ; '.'
0000000000001f4f         db  0x00 ; '.'
0000000000001f50         db  0x00 ; '.'
0000000000001f51         db  0x00 ; '.'
0000000000001f52         db  0x00 ; '.'
0000000000001f53         db  0x00 ; '.'
0000000000001f54         db  0x00 ; '.'
0000000000001f55         db  0x00 ; '.'
0000000000001f56         db  0x00 ; '.'
0000000000001f57         db  0x00 ; '.'
0000000000001f58         db  0x60 ; '`'
0000000000001f59         db  0x7e ; '~'
0000000000001f5a         db  0x22 ; '"'
0000000000001f5b         db  0x00 ; '.'
0000000000001f5c         db  0x00 ; '.'
0000000000001f5d         db  0x00 ; '.'
0000000000001f5e         db  0x00 ; '.'
0000000000001f5f         db  0x00 ; '.'
0000000000001f60         db  0x07 ; '.'
0000000000001f61         db  0x00 ; '.'
0000000000001f62         db  0x00 ; '.'
0000000000001f63         db  0x00 ; '.'
0000000000001f64         db  0x3e ; '>'
0000000000001f65         db  0x00 ; '.'
0000000000001f66         db  0x00 ; '.'
0000000000001f67         db  0x00 ; '.'
0000000000001f68         db  0x00 ; '.'
0000000000001f69         db  0x00 ; '.'
0000000000001f6a         db  0x00 ; '.'
0000000000001f6b         db  0x00 ; '.'
0000000000001f6c         db  0x00 ; '.'
0000000000001f6d         db  0x00 ; '.'
0000000000001f6e         db  0x00 ; '.'
0000000000001f6f         db  0x00 ; '.'
0000000000001f70         db  0x68 ; 'h'
0000000000001f71         db  0x7e ; '~'
0000000000001f72         db  0x22 ; '"'
0000000000001f73         db  0x00 ; '.'
0000000000001f74         db  0x00 ; '.'
0000000000001f75         db  0x00 ; '.'
0000000000001f76         db  0x00 ; '.'
0000000000001f77         db  0x00 ; '.'
0000000000001f78         db  0x07 ; '.'
0000000000001f79         db  0x00 ; '.'
0000000000001f7a         db  0x00 ; '.'
0000000000001f7b         db  0x00 ; '.'
0000000000001f7c         db  0x3f ; '?'
0000000000001f7d         db  0x00 ; '.'
0000000000001f7e         db  0x00 ; '.'
0000000000001f7f         db  0x00 ; '.'
0000000000001f80         db  0x00 ; '.'
0000000000001f81         db  0x00 ; '.'
0000000000001f82         db  0x00 ; '.'
0000000000001f83         db  0x00 ; '.'
0000000000001f84         db  0x00 ; '.'
0000000000001f85         db  0x00 ; '.'
0000000000001f86         db  0x00 ; '.'
0000000000001f87         db  0x00 ; '.'
0000000000001f88         db  0x70 ; 'p'
0000000000001f89         db  0x7e ; '~'
0000000000001f8a         db  0x22 ; '"'
0000000000001f8b         db  0x00 ; '.'
0000000000001f8c         db  0x00 ; '.'
0000000000001f8d         db  0x00 ; '.'
0000000000001f8e         db  0x00 ; '.'
0000000000001f8f         db  0x00 ; '.'
0000000000001f90         db  0x07 ; '.'
0000000000001f91         db  0x00 ; '.'
0000000000001f92         db  0x00 ; '.'
0000000000001f93         db  0x00 ; '.'
0000000000001f94         db  0x40 ; '@'
0000000000001f95         db  0x00 ; '.'
0000000000001f96         db  0x00 ; '.'
0000000000001f97         db  0x00 ; '.'
0000000000001f98         db  0x00 ; '.'
0000000000001f99         db  0x00 ; '.'
0000000000001f9a         db  0x00 ; '.'
0000000000001f9b         db  0x00 ; '.'
0000000000001f9c         db  0x00 ; '.'
0000000000001f9d         db  0x00 ; '.'
0000000000001f9e         db  0x00 ; '.'
0000000000001f9f         db  0x00 ; '.'
0000000000001fa0         db  0x78 ; 'x'
0000000000001fa1         db  0x7e ; '~'
0000000000001fa2         db  0x22 ; '"'
0000000000001fa3         db  0x00 ; '.'
0000000000001fa4         db  0x00 ; '.'
0000000000001fa5         db  0x00 ; '.'
0000000000001fa6         db  0x00 ; '.'
0000000000001fa7         db  0x00 ; '.'
0000000000001fa8         db  0x07 ; '.'
0000000000001fa9         db  0x00 ; '.'
0000000000001faa         db  0x00 ; '.'
0000000000001fab         db  0x00 ; '.'
0000000000001fac         db  0x41 ; 'A'
0000000000001fad         db  0x00 ; '.'
0000000000001fae         db  0x00 ; '.'
0000000000001faf         db  0x00 ; '.'
0000000000001fb0         db  0x00 ; '.'
0000000000001fb1         db  0x00 ; '.'
0000000000001fb2         db  0x00 ; '.'
0000000000001fb3         db  0x00 ; '.'
0000000000001fb4         db  0x00 ; '.'
0000000000001fb5         db  0x00 ; '.'
0000000000001fb6         db  0x00 ; '.'
0000000000001fb7         db  0x00 ; '.'
0000000000001fb8         db  0x80 ; '.'
0000000000001fb9         db  0x7e ; '~'
0000000000001fba         db  0x22 ; '"'
0000000000001fbb         db  0x00 ; '.'
0000000000001fbc         db  0x00 ; '.'
0000000000001fbd         db  0x00 ; '.'
0000000000001fbe         db  0x00 ; '.'
0000000000001fbf         db  0x00 ; '.'
0000000000001fc0         db  0x07 ; '.'
0000000000001fc1         db  0x00 ; '.'
0000000000001fc2         db  0x00 ; '.'
0000000000001fc3         db  0x00 ; '.'
0000000000001fc4         db  0x42 ; 'B'
0000000000001fc5         db  0x00 ; '.'
0000000000001fc6         db  0x00 ; '.'
0000000000001fc7         db  0x00 ; '.'
0000000000001fc8         db  0x00 ; '.'
0000000000001fc9         db  0x00 ; '.'
0000000000001fca         db  0x00 ; '.'
0000000000001fcb         db  0x00 ; '.'
0000000000001fcc         db  0x00 ; '.'
0000000000001fcd         db  0x00 ; '.'
0000000000001fce         db  0x00 ; '.'
0000000000001fcf         db  0x00 ; '.'
0000000000001fd0         db  0x88 ; '.'
0000000000001fd1         db  0x7e ; '~'
0000000000001fd2         db  0x22 ; '"'
0000000000001fd3         db  0x00 ; '.'
0000000000001fd4         db  0x00 ; '.'
0000000000001fd5         db  0x00 ; '.'
0000000000001fd6         db  0x00 ; '.'
0000000000001fd7         db  0x00 ; '.'
0000000000001fd8         db  0x07 ; '.'
0000000000001fd9         db  0x00 ; '.'
0000000000001fda         db  0x00 ; '.'
0000000000001fdb         db  0x00 ; '.'
0000000000001fdc         db  0x43 ; 'C'
0000000000001fdd         db  0x00 ; '.'
0000000000001fde         db  0x00 ; '.'
0000000000001fdf         db  0x00 ; '.'
0000000000001fe0         db  0x00 ; '.'
0000000000001fe1         db  0x00 ; '.'
0000000000001fe2         db  0x00 ; '.'
0000000000001fe3         db  0x00 ; '.'
0000000000001fe4         db  0x00 ; '.'
0000000000001fe5         db  0x00 ; '.'
0000000000001fe6         db  0x00 ; '.'
0000000000001fe7         db  0x00 ; '.'
0000000000001fe8         db  0x90 ; '.'
0000000000001fe9         db  0x7e ; '~'
0000000000001fea         db  0x22 ; '"'
0000000000001feb         db  0x00 ; '.'
0000000000001fec         db  0x00 ; '.'
0000000000001fed         db  0x00 ; '.'
0000000000001fee         db  0x00 ; '.'
0000000000001fef         db  0x00 ; '.'
0000000000001ff0         db  0x07 ; '.'
0000000000001ff1         db  0x00 ; '.'
0000000000001ff2         db  0x00 ; '.'
0000000000001ff3         db  0x00 ; '.'
0000000000001ff4         db  0x44 ; 'D'
0000000000001ff5         db  0x00 ; '.'
0000000000001ff6         db  0x00 ; '.'
0000000000001ff7         db  0x00 ; '.'
0000000000001ff8         db  0x00 ; '.'
0000000000001ff9         db  0x00 ; '.'
0000000000001ffa         db  0x00 ; '.'
0000000000001ffb         db  0x00 ; '.'
0000000000001ffc         db  0x00 ; '.'
0000000000001ffd         db  0x00 ; '.'
0000000000001ffe         db  0x00 ; '.'
0000000000001fff         db  0x00 ; '.'
0000000000002000         db  0x98 ; '.'                                         ; DATA XREF=fts_build+1680, fts_build+2268, fts_build+2460, rpl_fts_read+275, rpl_fts_read+1148, rpl_fts_read+1321, rpl_fts_read+1696, rpl_fts_read+1713, peek_token+864, peek_token+896, peek_token+1429
0000000000002001         db  0x7e ; '~'
0000000000002002         db  0x22 ; '"'
0000000000002003         db  0x00 ; '.'
0000000000002004         db  0x00 ; '.'
0000000000002005         db  0x00 ; '.'
0000000000002006         db  0x00 ; '.'
0000000000002007         db  0x00 ; '.'
0000000000002008         db  0x07 ; '.'
0000000000002009         db  0x00 ; '.'
000000000000200a         db  0x00 ; '.'
000000000000200b         db  0x00 ; '.'
000000000000200c         db  0x45 ; 'E'
000000000000200d         db  0x00 ; '.'
000000000000200e         db  0x00 ; '.'
000000000000200f         db  0x00 ; '.'
0000000000002010         db  0x00 ; '.'
0000000000002011         db  0x00 ; '.'
0000000000002012         db  0x00 ; '.'
0000000000002013         db  0x00 ; '.'
0000000000002014         db  0x00 ; '.'
0000000000002015         db  0x00 ; '.'
0000000000002016         db  0x00 ; '.'
0000000000002017         db  0x00 ; '.'
0000000000002018         db  0xa0 ; '.'
0000000000002019         db  0x7e ; '~'
000000000000201a         db  0x22 ; '"'
000000000000201b         db  0x00 ; '.'
000000000000201c         db  0x00 ; '.'
000000000000201d         db  0x00 ; '.'
000000000000201e         db  0x00 ; '.'
000000000000201f         db  0x00 ; '.'
0000000000002020         db  0x07 ; '.'
0000000000002021         db  0x00 ; '.'
0000000000002022         db  0x00 ; '.'
0000000000002023         db  0x00 ; '.'
0000000000002024         db  0x46 ; 'F'
0000000000002025         db  0x00 ; '.'
0000000000002026         db  0x00 ; '.'
0000000000002027         db  0x00 ; '.'
0000000000002028         db  0x00 ; '.'
0000000000002029         db  0x00 ; '.'
000000000000202a         db  0x00 ; '.'
000000000000202b         db  0x00 ; '.'
000000000000202c         db  0x00 ; '.'
000000000000202d         db  0x00 ; '.'
000000000000202e         db  0x00 ; '.'
000000000000202f         db  0x00 ; '.'
0000000000002030         db  0xa8 ; '.'
0000000000002031         db  0x7e ; '~'
0000000000002032         db  0x22 ; '"'
0000000000002033         db  0x00 ; '.'
0000000000002034         db  0x00 ; '.'
0000000000002035         db  0x00 ; '.'
0000000000002036         db  0x00 ; '.'
0000000000002037         db  0x00 ; '.'
0000000000002038         db  0x07 ; '.'
0000000000002039         db  0x00 ; '.'
000000000000203a         db  0x00 ; '.'
000000000000203b         db  0x00 ; '.'
000000000000203c         db  0x47 ; 'G'
000000000000203d         db  0x00 ; '.'
000000000000203e         db  0x00 ; '.'
000000000000203f         db  0x00 ; '.'
0000000000002040         db  0x00 ; '.'
0000000000002041         db  0x00 ; '.'
0000000000002042         db  0x00 ; '.'
0000000000002043         db  0x00 ; '.'
0000000000002044         db  0x00 ; '.'
0000000000002045         db  0x00 ; '.'
0000000000002046         db  0x00 ; '.'
0000000000002047         db  0x00 ; '.'
0000000000002048         db  0xb0 ; '.'
0000000000002049         db  0x7e ; '~'
000000000000204a         db  0x22 ; '"'
000000000000204b         db  0x00 ; '.'
000000000000204c         db  0x00 ; '.'
000000000000204d         db  0x00 ; '.'
000000000000204e         db  0x00 ; '.'
000000000000204f         db  0x00 ; '.'
0000000000002050         db  0x07 ; '.'
0000000000002051         db  0x00 ; '.'
0000000000002052         db  0x00 ; '.'
0000000000002053         db  0x00 ; '.'
0000000000002054         db  0x48 ; 'H'
0000000000002055         db  0x00 ; '.'
0000000000002056         db  0x00 ; '.'
0000000000002057         db  0x00 ; '.'
0000000000002058         db  0x00 ; '.'
0000000000002059         db  0x00 ; '.'
000000000000205a         db  0x00 ; '.'
000000000000205b         db  0x00 ; '.'
000000000000205c         db  0x00 ; '.'
000000000000205d         db  0x00 ; '.'
000000000000205e         db  0x00 ; '.'
000000000000205f         db  0x00 ; '.'
0000000000002060         db  0xb8 ; '.'
0000000000002061         db  0x7e ; '~'
0000000000002062         db  0x22 ; '"'
0000000000002063         db  0x00 ; '.'
0000000000002064         db  0x00 ; '.'
0000000000002065         db  0x00 ; '.'
0000000000002066         db  0x00 ; '.'
0000000000002067         db  0x00 ; '.'
0000000000002068         db  0x07 ; '.'
0000000000002069         db  0x00 ; '.'
000000000000206a         db  0x00 ; '.'
000000000000206b         db  0x00 ; '.'
000000000000206c         db  0x49 ; 'I'
000000000000206d         db  0x00 ; '.'
000000000000206e         db  0x00 ; '.'
000000000000206f         db  0x00 ; '.'
0000000000002070         db  0x00 ; '.'
0000000000002071         db  0x00 ; '.'
0000000000002072         db  0x00 ; '.'
0000000000002073         db  0x00 ; '.'
0000000000002074         db  0x00 ; '.'
0000000000002075         db  0x00 ; '.'
0000000000002076         db  0x00 ; '.'
0000000000002077         db  0x00 ; '.'
0000000000002078         db  0xc0 ; '.'
0000000000002079         db  0x7e ; '~'
000000000000207a         db  0x22 ; '"'
000000000000207b         db  0x00 ; '.'
000000000000207c         db  0x00 ; '.'
000000000000207d         db  0x00 ; '.'
000000000000207e         db  0x00 ; '.'
000000000000207f         db  0x00 ; '.'
0000000000002080         db  0x07 ; '.'
0000000000002081         db  0x00 ; '.'
0000000000002082         db  0x00 ; '.'
0000000000002083         db  0x00 ; '.'
0000000000002084         db  0x4a ; 'J'
0000000000002085         db  0x00 ; '.'
0000000000002086         db  0x00 ; '.'
0000000000002087         db  0x00 ; '.'
0000000000002088         db  0x00 ; '.'
0000000000002089         db  0x00 ; '.'
000000000000208a         db  0x00 ; '.'
000000000000208b         db  0x00 ; '.'
000000000000208c         db  0x00 ; '.'
000000000000208d         db  0x00 ; '.'
000000000000208e         db  0x00 ; '.'
000000000000208f         db  0x00 ; '.'
0000000000002090         db  0xc8 ; '.'
0000000000002091         db  0x7e ; '~'
0000000000002092         db  0x22 ; '"'
0000000000002093         db  0x00 ; '.'
0000000000002094         db  0x00 ; '.'
0000000000002095         db  0x00 ; '.'
0000000000002096         db  0x00 ; '.'
0000000000002097         db  0x00 ; '.'
0000000000002098         db  0x07 ; '.'
0000000000002099         db  0x00 ; '.'
000000000000209a         db  0x00 ; '.'
000000000000209b         db  0x00 ; '.'
000000000000209c         db  0x4b ; 'K'
000000000000209d         db  0x00 ; '.'
000000000000209e         db  0x00 ; '.'
000000000000209f         db  0x00 ; '.'
00000000000020a0         db  0x00 ; '.'
00000000000020a1         db  0x00 ; '.'
00000000000020a2         db  0x00 ; '.'
00000000000020a3         db  0x00 ; '.'
00000000000020a4         db  0x00 ; '.'
00000000000020a5         db  0x00 ; '.'
00000000000020a6         db  0x00 ; '.'
00000000000020a7         db  0x00 ; '.'
00000000000020a8         db  0xd0 ; '.'
00000000000020a9         db  0x7e ; '~'
00000000000020aa         db  0x22 ; '"'
00000000000020ab         db  0x00 ; '.'
00000000000020ac         db  0x00 ; '.'
00000000000020ad         db  0x00 ; '.'
00000000000020ae         db  0x00 ; '.'
00000000000020af         db  0x00 ; '.'
00000000000020b0         db  0x07 ; '.'
00000000000020b1         db  0x00 ; '.'
00000000000020b2         db  0x00 ; '.'
00000000000020b3         db  0x00 ; '.'
00000000000020b4         db  0x4c ; 'L'
00000000000020b5         db  0x00 ; '.'
00000000000020b6         db  0x00 ; '.'
00000000000020b7         db  0x00 ; '.'
00000000000020b8         db  0x00 ; '.'
00000000000020b9         db  0x00 ; '.'
00000000000020ba         db  0x00 ; '.'
00000000000020bb         db  0x00 ; '.'
00000000000020bc         db  0x00 ; '.'
00000000000020bd         db  0x00 ; '.'
00000000000020be         db  0x00 ; '.'
00000000000020bf         db  0x00 ; '.'
00000000000020c0         db  0xd8 ; '.'
00000000000020c1         db  0x7e ; '~'
00000000000020c2         db  0x22 ; '"'
00000000000020c3         db  0x00 ; '.'
00000000000020c4         db  0x00 ; '.'
00000000000020c5         db  0x00 ; '.'
00000000000020c6         db  0x00 ; '.'
00000000000020c7         db  0x00 ; '.'
00000000000020c8         db  0x07 ; '.'
00000000000020c9         db  0x00 ; '.'
00000000000020ca         db  0x00 ; '.'
00000000000020cb         db  0x00 ; '.'
00000000000020cc         db  0x4d ; 'M'
00000000000020cd         db  0x00 ; '.'
00000000000020ce         db  0x00 ; '.'
00000000000020cf         db  0x00 ; '.'
00000000000020d0         db  0x00 ; '.'
00000000000020d1         db  0x00 ; '.'
00000000000020d2         db  0x00 ; '.'
00000000000020d3         db  0x00 ; '.'
00000000000020d4         db  0x00 ; '.'
00000000000020d5         db  0x00 ; '.'
00000000000020d6         db  0x00 ; '.'
00000000000020d7         db  0x00 ; '.'
00000000000020d8         db  0xe0 ; '.'
00000000000020d9         db  0x7e ; '~'
00000000000020da         db  0x22 ; '"'
00000000000020db         db  0x00 ; '.'
00000000000020dc         db  0x00 ; '.'
00000000000020dd         db  0x00 ; '.'
00000000000020de         db  0x00 ; '.'
00000000000020df         db  0x00 ; '.'
00000000000020e0         db  0x07 ; '.'
00000000000020e1         db  0x00 ; '.'
00000000000020e2         db  0x00 ; '.'
00000000000020e3         db  0x00 ; '.'
00000000000020e4         db  0x4e ; 'N'
00000000000020e5         db  0x00 ; '.'
00000000000020e6         db  0x00 ; '.'
00000000000020e7         db  0x00 ; '.'
00000000000020e8         db  0x00 ; '.'
00000000000020e9         db  0x00 ; '.'
00000000000020ea         db  0x00 ; '.'
00000000000020eb         db  0x00 ; '.'
00000000000020ec         db  0x00 ; '.'
00000000000020ed         db  0x00 ; '.'
00000000000020ee         db  0x00 ; '.'
00000000000020ef         db  0x00 ; '.'
00000000000020f0         db  0xe8 ; '.'
00000000000020f1         db  0x7e ; '~'
00000000000020f2         db  0x22 ; '"'
00000000000020f3         db  0x00 ; '.'
00000000000020f4         db  0x00 ; '.'
00000000000020f5         db  0x00 ; '.'
00000000000020f6         db  0x00 ; '.'
00000000000020f7         db  0x00 ; '.'
00000000000020f8         db  0x07 ; '.'
00000000000020f9         db  0x00 ; '.'
00000000000020fa         db  0x00 ; '.'
00000000000020fb         db  0x00 ; '.'
00000000000020fc         db  0x4f ; 'O'
00000000000020fd         db  0x00 ; '.'
00000000000020fe         db  0x00 ; '.'
00000000000020ff         db  0x00 ; '.'
0000000000002100         db  0x00 ; '.'
0000000000002101         db  0x00 ; '.'
0000000000002102         db  0x00 ; '.'
0000000000002103         db  0x00 ; '.'
0000000000002104         db  0x00 ; '.'
0000000000002105         db  0x00 ; '.'
0000000000002106         db  0x00 ; '.'
0000000000002107         db  0x00 ; '.'
0000000000002108         db  0xf0 ; '.'
0000000000002109         db  0x7e ; '~'
000000000000210a         db  0x22 ; '"'
000000000000210b         db  0x00 ; '.'
000000000000210c         db  0x00 ; '.'
000000000000210d         db  0x00 ; '.'
000000000000210e         db  0x00 ; '.'
000000000000210f         db  0x00 ; '.'
0000000000002110         db  0x07 ; '.'
0000000000002111         db  0x00 ; '.'
0000000000002112         db  0x00 ; '.'
0000000000002113         db  0x00 ; '.'
0000000000002114         db  0x50 ; 'P'
0000000000002115         db  0x00 ; '.'
0000000000002116         db  0x00 ; '.'
0000000000002117         db  0x00 ; '.'
0000000000002118         db  0x00 ; '.'
0000000000002119         db  0x00 ; '.'
000000000000211a         db  0x00 ; '.'
000000000000211b         db  0x00 ; '.'
000000000000211c         db  0x00 ; '.'
000000000000211d         db  0x00 ; '.'
000000000000211e         db  0x00 ; '.'
000000000000211f         db  0x00 ; '.'
0000000000002120         db  0xf8 ; '.'
0000000000002121         db  0x7e ; '~'
0000000000002122         db  0x22 ; '"'
0000000000002123         db  0x00 ; '.'
0000000000002124         db  0x00 ; '.'
0000000000002125         db  0x00 ; '.'
0000000000002126         db  0x00 ; '.'
0000000000002127         db  0x00 ; '.'
0000000000002128         db  0x07 ; '.'
0000000000002129         db  0x00 ; '.'
000000000000212a         db  0x00 ; '.'
000000000000212b         db  0x00 ; '.'
000000000000212c         db  0x51 ; 'Q'
000000000000212d         db  0x00 ; '.'
000000000000212e         db  0x00 ; '.'
000000000000212f         db  0x00 ; '.'
0000000000002130         db  0x00 ; '.'
0000000000002131         db  0x00 ; '.'
0000000000002132         db  0x00 ; '.'
0000000000002133         db  0x00 ; '.'
0000000000002134         db  0x00 ; '.'
0000000000002135         db  0x00 ; '.'
0000000000002136         db  0x00 ; '.'
0000000000002137         db  0x00 ; '.'
0000000000002138         db  0x00 ; '.'
0000000000002139         db  0x7f ; '.'
000000000000213a         db  0x22 ; '"'
000000000000213b         db  0x00 ; '.'
000000000000213c         db  0x00 ; '.'
000000000000213d         db  0x00 ; '.'
000000000000213e         db  0x00 ; '.'
000000000000213f         db  0x00 ; '.'
0000000000002140         db  0x07 ; '.'
0000000000002141         db  0x00 ; '.'
0000000000002142         db  0x00 ; '.'
0000000000002143         db  0x00 ; '.'
0000000000002144         db  0x52 ; 'R'
0000000000002145         db  0x00 ; '.'
0000000000002146         db  0x00 ; '.'
0000000000002147         db  0x00 ; '.'
0000000000002148         db  0x00 ; '.'
0000000000002149         db  0x00 ; '.'
000000000000214a         db  0x00 ; '.'
000000000000214b         db  0x00 ; '.'
000000000000214c         db  0x00 ; '.'
000000000000214d         db  0x00 ; '.'
000000000000214e         db  0x00 ; '.'
000000000000214f         db  0x00 ; '.'
0000000000002150         db  0x08 ; '.'
0000000000002151         db  0x7f ; '.'
0000000000002152         db  0x22 ; '"'
0000000000002153         db  0x00 ; '.'
0000000000002154         db  0x00 ; '.'
0000000000002155         db  0x00 ; '.'
0000000000002156         db  0x00 ; '.'
0000000000002157         db  0x00 ; '.'
0000000000002158         db  0x07 ; '.'
0000000000002159         db  0x00 ; '.'
000000000000215a         db  0x00 ; '.'
000000000000215b         db  0x00 ; '.'
000000000000215c         db  0x53 ; 'S'
000000000000215d         db  0x00 ; '.'
000000000000215e         db  0x00 ; '.'
000000000000215f         db  0x00 ; '.'
0000000000002160         db  0x00 ; '.'
0000000000002161         db  0x00 ; '.'
0000000000002162         db  0x00 ; '.'
0000000000002163         db  0x00 ; '.'
0000000000002164         db  0x00 ; '.'
0000000000002165         db  0x00 ; '.'
0000000000002166         db  0x00 ; '.'
0000000000002167         db  0x00 ; '.'
0000000000002168         db  0x10 ; '.'
0000000000002169         db  0x7f ; '.'
000000000000216a         db  0x22 ; '"'
000000000000216b         db  0x00 ; '.'
000000000000216c         db  0x00 ; '.'
000000000000216d         db  0x00 ; '.'
000000000000216e         db  0x00 ; '.'
000000000000216f         db  0x00 ; '.'
0000000000002170         db  0x07 ; '.'
0000000000002171         db  0x00 ; '.'
0000000000002172         db  0x00 ; '.'
0000000000002173         db  0x00 ; '.'
0000000000002174         db  0x54 ; 'T'
0000000000002175         db  0x00 ; '.'
0000000000002176         db  0x00 ; '.'
0000000000002177         db  0x00 ; '.'
0000000000002178         db  0x00 ; '.'
0000000000002179         db  0x00 ; '.'
000000000000217a         db  0x00 ; '.'
000000000000217b         db  0x00 ; '.'
000000000000217c         db  0x00 ; '.'
000000000000217d         db  0x00 ; '.'
000000000000217e         db  0x00 ; '.'
000000000000217f         db  0x00 ; '.'
0000000000002180         db  0x18 ; '.'
0000000000002181         db  0x7f ; '.'
0000000000002182         db  0x22 ; '"'
0000000000002183         db  0x00 ; '.'
0000000000002184         db  0x00 ; '.'
0000000000002185         db  0x00 ; '.'
0000000000002186         db  0x00 ; '.'
0000000000002187         db  0x00 ; '.'
0000000000002188         db  0x07 ; '.'
0000000000002189         db  0x00 ; '.'
000000000000218a         db  0x00 ; '.'
000000000000218b         db  0x00 ; '.'
000000000000218c         db  0x55 ; 'U'
000000000000218d         db  0x00 ; '.'
000000000000218e         db  0x00 ; '.'
000000000000218f         db  0x00 ; '.'
0000000000002190         db  0x00 ; '.'
0000000000002191         db  0x00 ; '.'
0000000000002192         db  0x00 ; '.'
0000000000002193         db  0x00 ; '.'
0000000000002194         db  0x00 ; '.'
0000000000002195         db  0x00 ; '.'
0000000000002196         db  0x00 ; '.'
0000000000002197         db  0x00 ; '.'
0000000000002198         db  0x20 ; ' '
0000000000002199         db  0x7f ; '.'
000000000000219a         db  0x22 ; '"'
000000000000219b         db  0x00 ; '.'
000000000000219c         db  0x00 ; '.'
000000000000219d         db  0x00 ; '.'
000000000000219e         db  0x00 ; '.'
000000000000219f         db  0x00 ; '.'
00000000000021a0         db  0x07 ; '.'
00000000000021a1         db  0x00 ; '.'
00000000000021a2         db  0x00 ; '.'
00000000000021a3         db  0x00 ; '.'
00000000000021a4         db  0x56 ; 'V'
00000000000021a5         db  0x00 ; '.'
00000000000021a6         db  0x00 ; '.'
00000000000021a7         db  0x00 ; '.'
00000000000021a8         db  0x00 ; '.'
00000000000021a9         db  0x00 ; '.'
00000000000021aa         db  0x00 ; '.'
00000000000021ab         db  0x00 ; '.'
00000000000021ac         db  0x00 ; '.'
00000000000021ad         db  0x00 ; '.'
00000000000021ae         db  0x00 ; '.'
00000000000021af         db  0x00 ; '.'
00000000000021b0         db  0x28 ; '('
00000000000021b1         db  0x7f ; '.'
00000000000021b2         db  0x22 ; '"'
00000000000021b3         db  0x00 ; '.'
00000000000021b4         db  0x00 ; '.'
00000000000021b5         db  0x00 ; '.'
00000000000021b6         db  0x00 ; '.'
00000000000021b7         db  0x00 ; '.'
00000000000021b8         db  0x07 ; '.'
00000000000021b9         db  0x00 ; '.'
00000000000021ba         db  0x00 ; '.'
00000000000021bb         db  0x00 ; '.'
00000000000021bc         db  0x57 ; 'W'
00000000000021bd         db  0x00 ; '.'
00000000000021be         db  0x00 ; '.'
00000000000021bf         db  0x00 ; '.'
00000000000021c0         db  0x00 ; '.'
00000000000021c1         db  0x00 ; '.'
00000000000021c2         db  0x00 ; '.'
00000000000021c3         db  0x00 ; '.'
00000000000021c4         db  0x00 ; '.'
00000000000021c5         db  0x00 ; '.'
00000000000021c6         db  0x00 ; '.'
00000000000021c7         db  0x00 ; '.'
00000000000021c8         db  0x30 ; '0'
00000000000021c9         db  0x7f ; '.'
00000000000021ca         db  0x22 ; '"'
00000000000021cb         db  0x00 ; '.'
00000000000021cc         db  0x00 ; '.'
00000000000021cd         db  0x00 ; '.'
00000000000021ce         db  0x00 ; '.'
00000000000021cf         db  0x00 ; '.'
00000000000021d0         db  0x07 ; '.'
00000000000021d1         db  0x00 ; '.'
00000000000021d2         db  0x00 ; '.'
00000000000021d3         db  0x00 ; '.'
00000000000021d4         db  0x58 ; 'X'
00000000000021d5         db  0x00 ; '.'
00000000000021d6         db  0x00 ; '.'
00000000000021d7         db  0x00 ; '.'
00000000000021d8         db  0x00 ; '.'
00000000000021d9         db  0x00 ; '.'
00000000000021da         db  0x00 ; '.'
00000000000021db         db  0x00 ; '.'
00000000000021dc         db  0x00 ; '.'
00000000000021dd         db  0x00 ; '.'
00000000000021de         db  0x00 ; '.'
00000000000021df         db  0x00 ; '.'
00000000000021e0         db  0x38 ; '8'
00000000000021e1         db  0x7f ; '.'
00000000000021e2         db  0x22 ; '"'
00000000000021e3         db  0x00 ; '.'
00000000000021e4         db  0x00 ; '.'
00000000000021e5         db  0x00 ; '.'
00000000000021e6         db  0x00 ; '.'
00000000000021e7         db  0x00 ; '.'
00000000000021e8         db  0x07 ; '.'
00000000000021e9         db  0x00 ; '.'
00000000000021ea         db  0x00 ; '.'
00000000000021eb         db  0x00 ; '.'
00000000000021ec         db  0x59 ; 'Y'
00000000000021ed         db  0x00 ; '.'
00000000000021ee         db  0x00 ; '.'
00000000000021ef         db  0x00 ; '.'
00000000000021f0         db  0x00 ; '.'
00000000000021f1         db  0x00 ; '.'
00000000000021f2         db  0x00 ; '.'
00000000000021f3         db  0x00 ; '.'
00000000000021f4         db  0x00 ; '.'
00000000000021f5         db  0x00 ; '.'
00000000000021f6         db  0x00 ; '.'
00000000000021f7         db  0x00 ; '.'
00000000000021f8         db  0x40 ; '@'
00000000000021f9         db  0x7f ; '.'
00000000000021fa         db  0x22 ; '"'
00000000000021fb         db  0x00 ; '.'
00000000000021fc         db  0x00 ; '.'
00000000000021fd         db  0x00 ; '.'
00000000000021fe         db  0x00 ; '.'
00000000000021ff         db  0x00 ; '.'
0000000000002200         db  0x07 ; '.'
0000000000002201         db  0x00 ; '.'
0000000000002202         db  0x00 ; '.'
0000000000002203         db  0x00 ; '.'
0000000000002204         db  0x5a ; 'Z'
0000000000002205         db  0x00 ; '.'
0000000000002206         db  0x00 ; '.'
0000000000002207         db  0x00 ; '.'
0000000000002208         db  0x00 ; '.'
0000000000002209         db  0x00 ; '.'
000000000000220a         db  0x00 ; '.'
000000000000220b         db  0x00 ; '.'
000000000000220c         db  0x00 ; '.'
000000000000220d         db  0x00 ; '.'
000000000000220e         db  0x00 ; '.'
000000000000220f         db  0x00 ; '.'
0000000000002210         db  0x48 ; 'H'
0000000000002211         db  0x7f ; '.'
0000000000002212         db  0x22 ; '"'
0000000000002213         db  0x00 ; '.'
0000000000002214         db  0x00 ; '.'
0000000000002215         db  0x00 ; '.'
0000000000002216         db  0x00 ; '.'
0000000000002217         db  0x00 ; '.'
0000000000002218         db  0x07 ; '.'
0000000000002219         db  0x00 ; '.'
000000000000221a         db  0x00 ; '.'
000000000000221b         db  0x00 ; '.'
000000000000221c         db  0x5b ; '['
000000000000221d         db  0x00 ; '.'
000000000000221e         db  0x00 ; '.'
000000000000221f         db  0x00 ; '.'
0000000000002220         db  0x00 ; '.'
0000000000002221         db  0x00 ; '.'
0000000000002222         db  0x00 ; '.'
0000000000002223         db  0x00 ; '.'
0000000000002224         db  0x00 ; '.'
0000000000002225         db  0x00 ; '.'
0000000000002226         db  0x00 ; '.'
0000000000002227         db  0x00 ; '.'
0000000000002228         db  0x50 ; 'P'
0000000000002229         db  0x7f ; '.'
000000000000222a         db  0x22 ; '"'
000000000000222b         db  0x00 ; '.'
000000000000222c         db  0x00 ; '.'
000000000000222d         db  0x00 ; '.'
000000000000222e         db  0x00 ; '.'
000000000000222f         db  0x00 ; '.'
0000000000002230         db  0x07 ; '.'
0000000000002231         db  0x00 ; '.'
0000000000002232         db  0x00 ; '.'
0000000000002233         db  0x00 ; '.'
0000000000002234         db  0x5c ; '\'
0000000000002235         db  0x00 ; '.'
0000000000002236         db  0x00 ; '.'
0000000000002237         db  0x00 ; '.'
0000000000002238         db  0x00 ; '.'
0000000000002239         db  0x00 ; '.'
000000000000223a         db  0x00 ; '.'
000000000000223b         db  0x00 ; '.'
000000000000223c         db  0x00 ; '.'
000000000000223d         db  0x00 ; '.'
000000000000223e         db  0x00 ; '.'
000000000000223f         db  0x00 ; '.'
0000000000002240         db  0x58 ; 'X'
0000000000002241         db  0x7f ; '.'
0000000000002242         db  0x22 ; '"'
0000000000002243         db  0x00 ; '.'
0000000000002244         db  0x00 ; '.'
0000000000002245         db  0x00 ; '.'
0000000000002246         db  0x00 ; '.'
0000000000002247         db  0x00 ; '.'
0000000000002248         db  0x07 ; '.'
0000000000002249         db  0x00 ; '.'
000000000000224a         db  0x00 ; '.'
000000000000224b         db  0x00 ; '.'
000000000000224c         db  0x5d ; ']'
000000000000224d         db  0x00 ; '.'
000000000000224e         db  0x00 ; '.'
000000000000224f         db  0x00 ; '.'
0000000000002250         db  0x00 ; '.'
0000000000002251         db  0x00 ; '.'
0000000000002252         db  0x00 ; '.'
0000000000002253         db  0x00 ; '.'
0000000000002254         db  0x00 ; '.'
0000000000002255         db  0x00 ; '.'
0000000000002256         db  0x00 ; '.'
0000000000002257         db  0x00 ; '.'
0000000000002258         db  0x60 ; '`'
0000000000002259         db  0x7f ; '.'
000000000000225a         db  0x22 ; '"'
000000000000225b         db  0x00 ; '.'
000000000000225c         db  0x00 ; '.'
000000000000225d         db  0x00 ; '.'
000000000000225e         db  0x00 ; '.'
000000000000225f         db  0x00 ; '.'
0000000000002260         db  0x07 ; '.'
0000000000002261         db  0x00 ; '.'
0000000000002262         db  0x00 ; '.'
0000000000002263         db  0x00 ; '.'
0000000000002264         db  0x5e ; '^'
0000000000002265         db  0x00 ; '.'
0000000000002266         db  0x00 ; '.'
0000000000002267         db  0x00 ; '.'
0000000000002268         db  0x00 ; '.'
0000000000002269         db  0x00 ; '.'
000000000000226a         db  0x00 ; '.'
000000000000226b         db  0x00 ; '.'
000000000000226c         db  0x00 ; '.'
000000000000226d         db  0x00 ; '.'
000000000000226e         db  0x00 ; '.'
000000000000226f         db  0x00 ; '.'
0000000000002270         db  0x68 ; 'h'
0000000000002271         db  0x7f ; '.'
0000000000002272         db  0x22 ; '"'
0000000000002273         db  0x00 ; '.'
0000000000002274         db  0x00 ; '.'
0000000000002275         db  0x00 ; '.'
0000000000002276         db  0x00 ; '.'
0000000000002277         db  0x00 ; '.'
0000000000002278         db  0x07 ; '.'
0000000000002279         db  0x00 ; '.'
000000000000227a         db  0x00 ; '.'
000000000000227b         db  0x00 ; '.'
000000000000227c         db  0x5f ; '_'
000000000000227d         db  0x00 ; '.'
000000000000227e         db  0x00 ; '.'
000000000000227f         db  0x00 ; '.'
0000000000002280         db  0x00 ; '.'
0000000000002281         db  0x00 ; '.'
0000000000002282         db  0x00 ; '.'
0000000000002283         db  0x00 ; '.'
0000000000002284         db  0x00 ; '.'
0000000000002285         db  0x00 ; '.'
0000000000002286         db  0x00 ; '.'
0000000000002287         db  0x00 ; '.'
0000000000002288         db  0x70 ; 'p'
0000000000002289         db  0x7f ; '.'
000000000000228a         db  0x22 ; '"'
000000000000228b         db  0x00 ; '.'
000000000000228c         db  0x00 ; '.'
000000000000228d         db  0x00 ; '.'
000000000000228e         db  0x00 ; '.'
000000000000228f         db  0x00 ; '.'
0000000000002290         db  0x07 ; '.'
0000000000002291         db  0x00 ; '.'
0000000000002292         db  0x00 ; '.'
0000000000002293         db  0x00 ; '.'
0000000000002294         db  0x60 ; '`'
0000000000002295         db  0x00 ; '.'
0000000000002296         db  0x00 ; '.'
0000000000002297         db  0x00 ; '.'
0000000000002298         db  0x00 ; '.'
0000000000002299         db  0x00 ; '.'
000000000000229a         db  0x00 ; '.'
000000000000229b         db  0x00 ; '.'
000000000000229c         db  0x00 ; '.'
000000000000229d         db  0x00 ; '.'
000000000000229e         db  0x00 ; '.'
000000000000229f         db  0x00 ; '.'
00000000000022a0         db  0x78 ; 'x'
00000000000022a1         db  0x7f ; '.'
00000000000022a2         db  0x22 ; '"'
00000000000022a3         db  0x00 ; '.'
00000000000022a4         db  0x00 ; '.'
00000000000022a5         db  0x00 ; '.'
00000000000022a6         db  0x00 ; '.'
00000000000022a7         db  0x00 ; '.'
00000000000022a8         db  0x07 ; '.'
00000000000022a9         db  0x00 ; '.'
00000000000022aa         db  0x00 ; '.'
00000000000022ab         db  0x00 ; '.'
00000000000022ac         db  0x61 ; 'a'
00000000000022ad         db  0x00 ; '.'
00000000000022ae         db  0x00 ; '.'
00000000000022af         db  0x00 ; '.'
00000000000022b0         db  0x00 ; '.'
00000000000022b1         db  0x00 ; '.'
00000000000022b2         db  0x00 ; '.'
00000000000022b3         db  0x00 ; '.'
00000000000022b4         db  0x00 ; '.'
00000000000022b5         db  0x00 ; '.'
00000000000022b6         db  0x00 ; '.'
00000000000022b7         db  0x00 ; '.'
00000000000022b8         db  0x80 ; '.'
00000000000022b9         db  0x7f ; '.'
00000000000022ba         db  0x22 ; '"'
00000000000022bb         db  0x00 ; '.'
00000000000022bc         db  0x00 ; '.'
00000000000022bd         db  0x00 ; '.'
00000000000022be         db  0x00 ; '.'
00000000000022bf         db  0x00 ; '.'
00000000000022c0         db  0x07 ; '.'
00000000000022c1         db  0x00 ; '.'
00000000000022c2         db  0x00 ; '.'
00000000000022c3         db  0x00 ; '.'
00000000000022c4         db  0x63 ; 'c'
00000000000022c5         db  0x00 ; '.'
00000000000022c6         db  0x00 ; '.'
00000000000022c7         db  0x00 ; '.'
00000000000022c8         db  0x00 ; '.'
00000000000022c9         db  0x00 ; '.'
00000000000022ca         db  0x00 ; '.'
00000000000022cb         db  0x00 ; '.'
00000000000022cc         db  0x00 ; '.'
00000000000022cd         db  0x00 ; '.'
00000000000022ce         db  0x00 ; '.'
00000000000022cf         db  0x00 ; '.'
00000000000022d0         db  0x88 ; '.'
00000000000022d1         db  0x7f ; '.'
00000000000022d2         db  0x22 ; '"'
00000000000022d3         db  0x00 ; '.'
00000000000022d4         db  0x00 ; '.'
00000000000022d5         db  0x00 ; '.'
00000000000022d6         db  0x00 ; '.'
00000000000022d7         db  0x00 ; '.'
00000000000022d8         db  0x07 ; '.'
00000000000022d9         db  0x00 ; '.'
00000000000022da         db  0x00 ; '.'
00000000000022db         db  0x00 ; '.'
00000000000022dc         db  0x64 ; 'd'
00000000000022dd         db  0x00 ; '.'
00000000000022de         db  0x00 ; '.'
00000000000022df         db  0x00 ; '.'
00000000000022e0         db  0x00 ; '.'
00000000000022e1         db  0x00 ; '.'
00000000000022e2         db  0x00 ; '.'
00000000000022e3         db  0x00 ; '.'
00000000000022e4         db  0x00 ; '.'
00000000000022e5         db  0x00 ; '.'
00000000000022e6         db  0x00 ; '.'
00000000000022e7         db  0x00 ; '.'
00000000000022e8         db  0x90 ; '.'
00000000000022e9         db  0x7f ; '.'
00000000000022ea         db  0x22 ; '"'
00000000000022eb         db  0x00 ; '.'
00000000000022ec         db  0x00 ; '.'
00000000000022ed         db  0x00 ; '.'
00000000000022ee         db  0x00 ; '.'
00000000000022ef         db  0x00 ; '.'
00000000000022f0         db  0x07 ; '.'
00000000000022f1         db  0x00 ; '.'
00000000000022f2         db  0x00 ; '.'
00000000000022f3         db  0x00 ; '.'
00000000000022f4         db  0x65 ; 'e'
00000000000022f5         db  0x00 ; '.'
00000000000022f6         db  0x00 ; '.'
00000000000022f7         db  0x00 ; '.'
00000000000022f8         db  0x00 ; '.'
00000000000022f9         db  0x00 ; '.'
00000000000022fa         db  0x00 ; '.'
00000000000022fb         db  0x00 ; '.'
00000000000022fc         db  0x00 ; '.'
00000000000022fd         db  0x00 ; '.'
00000000000022fe         db  0x00 ; '.'
00000000000022ff         db  0x00 ; '.'
0000000000002300         db  0x98 ; '.'
0000000000002301         db  0x7f ; '.'
0000000000002302         db  0x22 ; '"'
0000000000002303         db  0x00 ; '.'
0000000000002304         db  0x00 ; '.'
0000000000002305         db  0x00 ; '.'
0000000000002306         db  0x00 ; '.'
0000000000002307         db  0x00 ; '.'
0000000000002308         db  0x07 ; '.'
0000000000002309         db  0x00 ; '.'
000000000000230a         db  0x00 ; '.'
000000000000230b         db  0x00 ; '.'
000000000000230c         db  0x66 ; 'f'
000000000000230d         db  0x00 ; '.'
000000000000230e         db  0x00 ; '.'
000000000000230f         db  0x00 ; '.'
0000000000002310         db  0x00 ; '.'
0000000000002311         db  0x00 ; '.'
0000000000002312         db  0x00 ; '.'
0000000000002313         db  0x00 ; '.'
0000000000002314         db  0x00 ; '.'
0000000000002315         db  0x00 ; '.'
0000000000002316         db  0x00 ; '.'
0000000000002317         db  0x00 ; '.'
0000000000002318         db  0xa0 ; '.'
0000000000002319         db  0x7f ; '.'
000000000000231a         db  0x22 ; '"'
000000000000231b         db  0x00 ; '.'
000000000000231c         db  0x00 ; '.'
000000000000231d         db  0x00 ; '.'
000000000000231e         db  0x00 ; '.'
000000000000231f         db  0x00 ; '.'
0000000000002320         db  0x07 ; '.'
0000000000002321         db  0x00 ; '.'
0000000000002322         db  0x00 ; '.'
0000000000002323         db  0x00 ; '.'
0000000000002324         db  0x68 ; 'h'
0000000000002325         db  0x00 ; '.'
0000000000002326         db  0x00 ; '.'
0000000000002327         db  0x00 ; '.'
0000000000002328         db  0x00 ; '.'
0000000000002329         db  0x00 ; '.'
000000000000232a         db  0x00 ; '.'
000000000000232b         db  0x00 ; '.'
000000000000232c         db  0x00 ; '.'
000000000000232d         db  0x00 ; '.'
000000000000232e         db  0x00 ; '.'
000000000000232f         db  0x00 ; '.'
0000000000002330         db  0xa8 ; '.'
0000000000002331         db  0x7f ; '.'
0000000000002332         db  0x22 ; '"'
0000000000002333         db  0x00 ; '.'
0000000000002334         db  0x00 ; '.'
0000000000002335         db  0x00 ; '.'
0000000000002336         db  0x00 ; '.'
0000000000002337         db  0x00 ; '.'
0000000000002338         db  0x07 ; '.'
0000000000002339         db  0x00 ; '.'
000000000000233a         db  0x00 ; '.'
000000000000233b         db  0x00 ; '.'
000000000000233c         db  0x69 ; 'i'
000000000000233d         db  0x00 ; '.'
000000000000233e         db  0x00 ; '.'
000000000000233f         db  0x00 ; '.'
0000000000002340         db  0x00 ; '.'
0000000000002341         db  0x00 ; '.'
0000000000002342         db  0x00 ; '.'
0000000000002343         db  0x00 ; '.'
0000000000002344         db  0x00 ; '.'
0000000000002345         db  0x00 ; '.'
0000000000002346         db  0x00 ; '.'
0000000000002347         db  0x00 ; '.'
0000000000002348         db  0xb0 ; '.'
0000000000002349         db  0x7f ; '.'
000000000000234a         db  0x22 ; '"'
000000000000234b         db  0x00 ; '.'
000000000000234c         db  0x00 ; '.'
000000000000234d         db  0x00 ; '.'
000000000000234e         db  0x00 ; '.'
000000000000234f         db  0x00 ; '.'
0000000000002350         db  0x07 ; '.'
0000000000002351         db  0x00 ; '.'
0000000000002352         db  0x00 ; '.'
0000000000002353         db  0x00 ; '.'
0000000000002354         db  0x6a ; 'j'
0000000000002355         db  0x00 ; '.'
0000000000002356         db  0x00 ; '.'
0000000000002357         db  0x00 ; '.'
0000000000002358         db  0x00 ; '.'
0000000000002359         db  0x00 ; '.'
000000000000235a         db  0x00 ; '.'
000000000000235b         db  0x00 ; '.'
000000000000235c         db  0x00 ; '.'
000000000000235d         db  0x00 ; '.'
000000000000235e         db  0x00 ; '.'
000000000000235f         db  0x00 ; '.'
0000000000002360         db  0xb8 ; '.'
0000000000002361         db  0x7f ; '.'
0000000000002362         db  0x22 ; '"'
0000000000002363         db  0x00 ; '.'
0000000000002364         db  0x00 ; '.'
0000000000002365         db  0x00 ; '.'
0000000000002366         db  0x00 ; '.'
0000000000002367         db  0x00 ; '.'
0000000000002368         db  0x07 ; '.'
0000000000002369         db  0x00 ; '.'
000000000000236a         db  0x00 ; '.'
000000000000236b         db  0x00 ; '.'
000000000000236c         db  0x6b ; 'k'
000000000000236d         db  0x00 ; '.'
000000000000236e         db  0x00 ; '.'
000000000000236f         db  0x00 ; '.'
0000000000002370         db  0x00 ; '.'
0000000000002371         db  0x00 ; '.'
0000000000002372         db  0x00 ; '.'
0000000000002373         db  0x00 ; '.'
0000000000002374         db  0x00 ; '.'
0000000000002375         db  0x00 ; '.'
0000000000002376         db  0x00 ; '.'
0000000000002377         db  0x00 ; '.'
0000000000002378         db  0xc0 ; '.'
0000000000002379         db  0x7f ; '.'
000000000000237a         db  0x22 ; '"'
000000000000237b         db  0x00 ; '.'
000000000000237c         db  0x00 ; '.'
000000000000237d         db  0x00 ; '.'
000000000000237e         db  0x00 ; '.'
000000000000237f         db  0x00 ; '.'
0000000000002380         db  0x07 ; '.'
0000000000002381         db  0x00 ; '.'
0000000000002382         db  0x00 ; '.'
0000000000002383         db  0x00 ; '.'
0000000000002384         db  0x6c ; 'l'
0000000000002385         db  0x00 ; '.'
0000000000002386         db  0x00 ; '.'
0000000000002387         db  0x00 ; '.'
0000000000002388         db  0x00 ; '.'
0000000000002389         db  0x00 ; '.'
000000000000238a         db  0x00 ; '.'
000000000000238b         db  0x00 ; '.'
000000000000238c         db  0x00 ; '.'
000000000000238d         db  0x00 ; '.'
000000000000238e         db  0x00 ; '.'
000000000000238f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x2390; 0x23a7[ (23 bytes)
        ; File offset : [9104; 9127[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000002390         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000002394         mov        rax, qword [qword_227fe8]                   ; qword_227fe8
000000000000239b         test       rax, rax
000000000000239e         je         loc_23a2

00000000000023a0         call       rax

                     loc_23a2:
00000000000023a2         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000023a6         ret
                        ; endp
00000000000023a7         db  0x00 ; '.'
00000000000023a8         db  0x00 ; '.'
00000000000023a9         db  0x00 ; '.'
00000000000023aa         db  0x00 ; '.'
00000000000023ab         db  0x00 ; '.'
00000000000023ac         db  0x00 ; '.'
00000000000023ad         db  0x00 ; '.'
00000000000023ae         db  0x00 ; '.'
00000000000023af         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x23b0; 0x2a10[ (1632 bytes)
        ; File offset : [9136; 10768[ (1632 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_23b0:
00000000000023b0         push       qword [qword_227c90]                        ; Begin of unwind block (FDE at 0x23a44), qword_227c90, CODE XREF=sub_23c6+5
00000000000023b6         jmp        qword [qword_227c90+8]                      ; 0x227c98
                        ; endp
00000000000023bc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
00000000000023c0         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=fwrite_uppcase+27, build_upper_buffer+29, build_wcs_upper_buffer+808
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23c6:
00000000000023c6         push       0x0
00000000000023cb         jmp        loc_23b0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___uflow:        // __uflow
00000000000023d0         jmp        qword [__uflow@GOT]                         ; __uflow, __uflow@GOT, CODE XREF=add_exclude_fp+147
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23d6:
00000000000023d6         push       0x1
00000000000023db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
00000000000023e0         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+174, main+1060, main+4511, human_options+276, human_options+327, human_options+351, human_options+375, set_tz+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23e6:
00000000000023e6         push       0x2
00000000000023eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_endmntent:        // endmntent
00000000000023f0         jmp        qword [endmntent@GOT]                       ; endmntent, endmntent@GOT, CODE XREF=read_file_system_list+1793
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23f6:
00000000000023f6         push       0x3
00000000000023fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000002400         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=safe_hasher+29, hash_get_first+60, hash_rehash+569, hash_insert_if_absent+477, set_program_name+154, sub_af20+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2406:
0000000000002406         push       0x4
000000000000240b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000002410         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+699, main+2871, main+3190, main+3762, close_stdout+22, add_exclude_fp+163, protect_fd+46, freopen_safer+35, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2416:
0000000000002416         push       0x5
000000000000241b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000002420         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=main+4605, usage+892, usage+1085, argmatch+162, fnmatch_no_wildcards+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2426:
0000000000002426         push       0x6
000000000000242b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localtime_r:        // localtime_r
0000000000002430         jmp        qword [localtime_r@GOT]                     ; localtime_r, localtime_r@GOT, CODE XREF=localtime_rz+43, mktime_z+170
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2436:
0000000000002436         push       0x7
000000000000243b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000002440         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2446:
0000000000002446         push       0x8
000000000000244b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
0000000000002450         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=excluded_file_name+83
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2456:
0000000000002456         push       0x9
000000000000245b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000002460         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2466:
0000000000002466         push       0xa
000000000000246b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qsort:        // qsort
0000000000002470         jmp        qword [qsort@GOT]                           ; qsort, qsort@GOT, CODE XREF=fts_sort+124
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2476:
0000000000002476         push       0xb
000000000000247b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswcntrl:        // iswcntrl
0000000000002480         jmp        qword [iswcntrl@GOT]                        ; iswcntrl, iswcntrl@GOT, CODE XREF=mb_width_aux+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2486:
0000000000002486         push       0xc
000000000000248b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localeconv:        // localeconv
0000000000002490         jmp        qword [localeconv@GOT]                      ; localeconv, localeconv@GOT, CODE XREF=human_readable+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2496:
0000000000002496         push       0xd
000000000000249b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
00000000000024a0         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24a6:
00000000000024a6         push       0xe
00000000000024ab         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setenv:        // setenv
00000000000024b0         jmp        qword [setenv@GOT]                          ; setenv, setenv@GOT, CODE XREF=setenv_TZ+20
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24b6:
00000000000024b6         push       0xf
00000000000024bb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
00000000000024c0         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+138
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24c6:
00000000000024c6         push       0x10
00000000000024cb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtol_internal:        // __strtol_internal
00000000000024d0         jmp        qword [__strtol_internal@GOT]               ; __strtol_internal, __strtol_internal@GOT, CODE XREF=xstrtoimax+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24d6:
00000000000024d6         push       0x11
00000000000024db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswctype:        // iswctype
00000000000024e0         jmp        qword [iswctype@GOT]                        ; iswctype, iswctype@GOT, CODE XREF=check_node_accept_bytes.isra.31+217
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24e6:
00000000000024e6         push       0x12
00000000000024eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
00000000000024f0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24f6:
00000000000024f6         push       0x13
00000000000024fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000002500         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+126
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2506:
0000000000002506         push       0x14
000000000000250b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000002510         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+406, main+2534, main+2593, main+2679, main+2863, main+2990, main+3161, main+3330, main+3393, main+3754, main+3822
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2516:
0000000000002516         push       0x15
000000000000251b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000002520         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=string_hasher_ci+247, mbscasecmp+51, mbscasecmp+612, mbscasecmp+790, mbscasecmp+1432, mbscasecmp+1624, quotearg_buffer_restyled+108, re_compile_internal+290, DATA XREF=sub_6220+13, sub_6350+42, sub_6390+234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2526:
0000000000002526         push       0x16
000000000000252b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000002530         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=argmatch+33, argmatch+174, fnmatch_no_wildcards+42, string_hasher_ci+485, excluded_file_name+373, add_exclude+180, sub_65d0+2338, human_readable+103, human_readable+155, human_readable+457, human_readable+831
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2536:
0000000000002536         push       0x17
000000000000253b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000002540         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=fts_stat+348
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2546:
0000000000002546         push       0x18
000000000000254b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_openat:        // openat
0000000000002550         jmp        qword [openat@GOT]                          ; openat, openat@GOT, CODE XREF=openat_safer+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2556:
0000000000002556         push       0x19
000000000000255b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000002560         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+5012, print_only_size+133, print_size+340, string_hasher_ci+639, add_exclude_fp+526, sub_77e0+664, fprintftime+75, hash_rehash+554, hash_insert_if_absent+639, hash_insert+84, hash_delete+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2566:
0000000000002566         push       0x1a
000000000000256b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000002570         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+279
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2576:
0000000000002576         push       0x1b
000000000000257b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000002580         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2586:
0000000000002586         push       0x1c
000000000000258b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dup2:        // dup2
0000000000002590         jmp        qword [dup2@GOT]                            ; dup2, dup2@GOT, CODE XREF=freopen_safer+79, freopen_safer+100, freopen_safer+116
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2596:
0000000000002596         push       0x1d
000000000000259b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
00000000000025a0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=main+4867, j_j_strcmp+62, excluded_file_name+209, xstrtoimax+236, xstrtoimax+271, xstrtoimax+323, xstrtoul+291, xstrtoul+323, xstrtoul+380, xstrtoumax+291, xstrtoumax+323
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25a6:
00000000000025a6         push       0x1e
00000000000025ab         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstatat:        // __fxstatat
00000000000025b0         jmp        qword [__fxstatat@GOT]                      ; __fxstatat, __fxstatat@GOT, CODE XREF=fts_stat+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25b6:
00000000000025b6         push       0x1f
00000000000025bb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
00000000000025c0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=print_size+245, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25c6:
00000000000025c6         push       0x20
00000000000025cb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
00000000000025d0         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=excluded_file_name+117, set_program_name+14, rpl_fts_read+758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25d6:
00000000000025d6         push       0x21
00000000000025db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_gmtime_r:        // gmtime_r
00000000000025e0         jmp        qword [gmtime_r@GOT]                        ; gmtime_r, gmtime_r@GOT, CODE XREF=localtime_rz+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25e6:
00000000000025e6         push       0x22
00000000000025eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
00000000000025f0         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25f6:
00000000000025f6         push       0x23
00000000000025fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000002600         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=mbuiter_multi_next.part.0+30, main+2826, main+4143, main+5271, main+5302, string_hasher_ci+572, string_hasher_ci+603, string_hasher_ci+634, mbscasecmp+1754, mbscasecmp+1790, sub_cc9f+27
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2606:
0000000000002606         push       0x24
000000000000260b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000002610         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2616:
0000000000002616         push       0x25
000000000000261b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000002620         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18, clean_state_log_if_needed+120, re_string_reconstruct+1128, re_string_reconstruct+1876, check_arrival+1782, get_subexp_sub.isra.32+344, sift_states_backward+744, re_search_internal+2450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2626:
0000000000002626         push       0x26
000000000000262b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_freopen:        // freopen
0000000000002630         jmp        qword [freopen@GOT]                         ; freopen, freopen@GOT, CODE XREF=freopen_safer+187
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2636:
0000000000002636         push       0x27
000000000000263b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000002640         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=protect_fd+41, freopen_safer+307, freopen_safer+325, freopen_safer+337, freopen_safer+373, fd_ring_clear+50, cwd_advance_fd+63, cwd_advance_fd+82, fts_safe_changedir+226, fts_safe_changedir+437, fts_build+1383
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2646:
0000000000002646         push       0x28
000000000000264b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_closedir:        // closedir
0000000000002650         jmp        qword [closedir@GOT]                        ; closedir, closedir@GOT, CODE XREF=fts_lfree+29, fts_build+1348, fts_build+1444, fts_build+1647, fts_build+1979, fts_build+2427
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2656:
0000000000002656         push       0x29
000000000000265b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputc:        // fputc
0000000000002660         jmp        qword [fputc@GOT]                           ; fputc, fputc@GOT, CODE XREF=fwrite_lowcase+57, fwrite_uppcase+57, __strftime_internal+261, __strftime_internal+676, __strftime_internal+764, sub_6220+236, sub_6390+101, sub_6390+119, sub_65d0+308, sub_65d0+735, sub_65d0+759
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2666:
0000000000002666         push       0x2a
000000000000266b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000002670         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=strnlen1+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2676:
0000000000002676         push       0x2b
000000000000267b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000002680         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, mbscasecmp+579, mbscasecmp+1390, mbscasecmp+1572, quotearg_buffer_restyled+410, set_regs+1041, transit_state_bkref.isra.34+663
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2686:
0000000000002686         push       0x2c
000000000000268b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wctype:        // wctype
0000000000002690         jmp        qword [wctype@GOT]                          ; wctype, wctype@GOT, CODE XREF=build_charclass.isra.29+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2696:
0000000000002696         push       0x2d
000000000000269b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
00000000000026a0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=print_only_size+72, print_size+330, usage+160, usage+197, usage+234, usage+271, usage+308, usage+345, usage+382, usage+419, usage+456
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26a6:
00000000000026a6         push       0x2e
00000000000026ab         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
00000000000026b0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=hash_initialize+177, hash_rehash+198, xcalloc+26, rpl_fts_open+72, re_acquire_state_context+202, re_acquire_state+160, check_subexp_matching_top.isra.18+156, build_trtable+746, build_trtable+2611, build_trtable+2830, build_charclass_op+70
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26b6:
00000000000026b6         push       0x2f
00000000000026bb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___getdelim:        // __getdelim
00000000000026c0         jmp        qword [__getdelim@GOT]                      ; __getdelim, __getdelim@GOT, CODE XREF=read_file_system_list+110
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26c6:
00000000000026c6         push       0x30
00000000000026cb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
00000000000026d0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+1328, main+4545, string_compare+4, j_j_strcmp, read_file_system_list+1060, read_file_system_list+1088, read_file_system_list+1639, read_file_system_list+1663, build_charclass.isra.29+1480, build_charclass.isra.29+1620, build_charclass.isra.29+1758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26d6:
00000000000026d6         push       0x31
00000000000026db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dirfd:        // dirfd
00000000000026e0         jmp        qword [dirfd@GOT]                           ; dirfd, dirfd@GOT, CODE XREF=fts_build+61
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26e6:
00000000000026e6         push       0x32
00000000000026eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___memcpy_chk:        // __memcpy_chk
00000000000026f0         jmp        qword [__memcpy_chk@GOT]                    ; __memcpy_chk, __memcpy_chk@GOT, CODE XREF=human_readable+1180
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26f6:
00000000000026f6         push       0x33
00000000000026fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_feof:        // feof
0000000000002700         jmp        qword [feof@GOT]                            ; feof, feof@GOT, CODE XREF=argv_iter+115
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2706:
0000000000002706         push       0x34
000000000000270b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000002710         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=sub_5a6e+66, human_readable+1245, human_readable+1274, human_readable+1338, mb_copy+71, xmemdup+35, fts_alloc+56, build_wcs_upper_buffer+348, build_wcs_upper_buffer+697, DATA XREF=sub_7730+114, fts_build+430
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2716:
0000000000002716         push       0x35
000000000000271b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_tzset:        // tzset
0000000000002720         jmp        qword [tzset@GOT]                           ; tzset, tzset@GOT, CODE XREF=revert_tz.part.1+80, set_tz+216
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2726:
0000000000002726         push       0x36
000000000000272b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000002730         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=freopen_safer+28, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2736:
0000000000002736         push       0x37
000000000000273b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
0000000000002740         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=main+4966, fts_stat+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2746:
0000000000002746         push       0x38
000000000000274b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readdir:        // readdir
0000000000002750         jmp        qword [readdir@GOT]                         ; readdir, readdir@GOT, CODE XREF=fts_build+498
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2756:
0000000000002756         push       0x39
000000000000275b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcwidth:        // wcwidth
0000000000002760         jmp        qword [wcwidth@GOT]                         ; wcwidth, wcwidth@GOT, CODE XREF=mb_width_aux+3
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2766:
0000000000002766         push       0x3a
000000000000276b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswalnum:        // iswalnum
0000000000002770         jmp        qword [iswalnum@GOT]                        ; iswalnum, iswalnum@GOT, CODE XREF=re_string_context_at+202, re_string_reconstruct+1790, peek_token+144, peek_token+440
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2776:
0000000000002776         push       0x3b
000000000000277b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000002780         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=argv_iter_init_argv+9, argv_iter_init_stream+9, map_device.isra.0+98, di_set_alloc+6, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517, ino_map_alloc+14, ino_map_insert+122, xmalloc+4, fts_alloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2786:
0000000000002786         push       0x3c
000000000000278b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcrtomb:        // wcrtomb
0000000000002790         jmp        qword [wcrtomb@GOT]                         ; wcrtomb, wcrtomb@GOT, CODE XREF=build_wcs_upper_buffer+313, build_wcs_upper_buffer+668, re_compile_fastmap_iter.isra.30+534, re_compile_fastmap_iter.isra.30+698, re_compile_fastmap_iter.isra.30+797
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2796:
0000000000002796         push       0x3d
000000000000279b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
00000000000027a0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27a6:
00000000000027a6         push       0x3e
00000000000027ab         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getmntent:        // getmntent
00000000000027b0         jmp        qword [getmntent@GOT]                       ; getmntent, getmntent@GOT, CODE XREF=read_file_system_list+1198, read_file_system_list+1773
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27b6:
00000000000027b6         push       0x3f
00000000000027bb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setmntent:        // setmntent
00000000000027c0         jmp        qword [setmntent@GOT]                       ; setmntent, setmntent@GOT, CODE XREF=read_file_system_list+1166
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27c6:
00000000000027c6         push       0x40
00000000000027cb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
00000000000027d0         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=re_compile_internal+306, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27d6:
00000000000027d6         push       0x41
00000000000027db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
00000000000027e0         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=fts_safe_changedir+189
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27e6:
00000000000027e6         push       0x42
00000000000027eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sscanf:        // sscanf
00000000000027f0         jmp        qword [sscanf@GOT]                          ; sscanf, sscanf@GOT, CODE XREF=read_file_system_list+181, read_file_system_list+269
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27f6:
00000000000027f6         push       0x43
00000000000027fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mktime:        // mktime
0000000000002800         jmp        qword [mktime@GOT]                          ; mktime, mktime@GOT, CODE XREF=mktime_z+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2806:
0000000000002806         push       0x44
000000000000280b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000002810         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2816:
0000000000002816         push       0x45
000000000000281b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchdir:        // fchdir
0000000000002820         jmp        qword [fchdir@GOT]                          ; fchdir, fchdir@GOT, CODE XREF=restore_initial_cwd+29, fts_safe_changedir+380, rpl_fts_close+231, rpl_fts_read+1677, rpl_fts_children+236
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2826:
0000000000002826         push       0x46
000000000000282b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000002830         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, fts_sort+64, fts_palloc.isra.2+29, re_string_realloc_buffers+48, re_string_realloc_buffers+79, re_string_realloc_buffers+127, re_node_set_insert_last+74, re_node_set_insert+270, register_state+209, extend_buffers+95, re_dfa_add_node+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2836:
0000000000002836         push       0x47
000000000000283b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000002840         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+107, usage+867, usage+1060, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2846:
0000000000002846         push       0x48
000000000000284b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000002850         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=print_size+195, usage+123, usage+571, usage+855, usage+948, usage+1009, usage+1048, usage+1151, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2856:
0000000000002856         push       0x49
000000000000285b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_timegm:        // timegm
0000000000002860         jmp        qword [timegm@GOT]                          ; timegm, timegm@GOT, CODE XREF=mktime_z+291
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2866:
0000000000002866         push       0x4a
000000000000286b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strftime:        // strftime
0000000000002870         jmp        qword [strftime@GOT]                        ; strftime, strftime@GOT, CODE XREF=sub_6220+92
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2876:
0000000000002876         push       0x4b
000000000000287b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_btowc:        // btowc
0000000000002880         jmp        qword [btowc@GOT]                           ; btowc, btowc@GOT, CODE XREF=sub_1c260+1827, sub_1c260+2551, re_compile_internal+1864
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2886:
0000000000002886         push       0x4c
000000000000288b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000002890         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=human_readable+885, fts_build+949, rpl_fts_read+745, rpl_fts_read+802, rpl_fts_read+998, re_string_reconstruct+400, re_string_reconstruct+856, re_string_reconstruct+876, re_string_reconstruct+1179
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2896:
0000000000002896         push       0x4d
000000000000289b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
00000000000028a0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+423, main+722, main+2551, main+2638, main+2700, main+2888, main+3180, main+3347, main+3412, main+3782, main+3836
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28a6:
00000000000028a6         push       0x4e
00000000000028ab         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
00000000000028b0         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=protect_fd+24, open_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28b6:
00000000000028b6         push       0x4f
00000000000028bb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
00000000000028c0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28c6:
00000000000028c6         push       0x50
00000000000028cb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
00000000000028d0         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=add_exclude_file+38, read_file_system_list+44
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28d6:
00000000000028d6         push       0x51
00000000000028db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towlower:        // towlower
00000000000028e0         jmp        qword [towlower@GOT]                        ; towlower, towlower@GOT, CODE XREF=string_hasher_ci+91, mbscasecmp+384, mbscasecmp+394, re_compile_fastmap_iter.isra.30+517, re_compile_fastmap_iter.isra.30+782
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28e6:
00000000000028e6         push       0x52
00000000000028eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopendir:        // fdopendir
00000000000028f0         jmp        qword [fdopendir@GOT]                       ; fdopendir, fdopendir@GOT, CODE XREF=opendirat+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28f6:
00000000000028f6         push       0x53
00000000000028fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unsetenv:        // unsetenv
0000000000002900         jmp        qword [unsetenv@GOT]                        ; unsetenv, unsetenv@GOT, CODE XREF=setenv_TZ+39
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2906:
0000000000002906         push       0x54
000000000000290b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towupper:        // towupper
0000000000002910         jmp        qword [towupper@GOT]                        ; towupper, towupper@GOT, CODE XREF=build_wcs_upper_buffer+268, build_wcs_upper_buffer+640
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2916:
0000000000002916         push       0x55
000000000000291b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtoul:        // strtoul
0000000000002920         jmp        qword [strtoul@GOT]                         ; strtoul, strtoul@GOT, CODE XREF=xstrtoul+140
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2926:
0000000000002926         push       0x56
000000000000292b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fstatfs:        // fstatfs
0000000000002930         jmp        qword [fstatfs@GOT]                         ; fstatfs, fstatfs@GOT, CODE XREF=filesystem_type+200
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2936:
0000000000002936         push       0x57
000000000000293b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000002940         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2946:
0000000000002946         push       0x58
000000000000294b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000002950         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+941, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2956:
0000000000002956         push       0x59
000000000000295b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000002960         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=sub_7170+264, sub_7170+300, sub_72d0+16, sub_77e0+281, set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2966:
0000000000002966         push       0x5a
000000000000296b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000002970         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=main+5109, usage+81, argmatch_valid+122, argmatch_valid+198, hash_print_statistics+118, hash_print_statistics+143, hash_print_statistics+211, hash_print_statistics+246, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2976:
0000000000002976         push       0x5b
000000000000297b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush_unlocked:        // fflush_unlocked
0000000000002980         jmp        qword [fflush_unlocked@GOT]                 ; fflush_unlocked, fflush_unlocked@GOT, CODE XREF=print_size+207
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2986:
0000000000002986         push       0x5c
000000000000298b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000002990         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=string_hasher_ci+229, string_hasher_ci+367, mbscasecmp+595, mbscasecmp+731, mbscasecmp+772, mbscasecmp+906, mbscasecmp+1415, mbscasecmp+1546, mbscasecmp+1610, sub_af20+616, build_wcs_upper_buffer+557
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2996:
0000000000002996         push       0x5d
000000000000299b         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
00000000000029a0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_af20+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29a6:
00000000000029a6         push       0x5e
00000000000029ab         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_hasmntopt:        // hasmntopt
00000000000029b0         jmp        qword [hasmntopt@GOT]                       ; hasmntopt, hasmntopt@GOT, CODE XREF=read_file_system_list+1226
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29b6:
00000000000029b6         push       0x5f
00000000000029bb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getdelim:        // getdelim
00000000000029c0         jmp        qword [getdelim@GOT]                        ; getdelim, getdelim@GOT, CODE XREF=argv_iter+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29c6:
00000000000029c6         push       0x60
00000000000029cb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strstr:        // strstr
00000000000029d0         jmp        qword [strstr@GOT]                          ; strstr, strstr@GOT, CODE XREF=read_file_system_list+215
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29d6:
00000000000029d6         push       0x61
00000000000029db         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
00000000000029e0         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=fwrite_lowcase+27, mbscasecmp+112, mbscasecmp+141, re_compile_fastmap_iter.isra.30+287, re_compile_fastmap_iter.isra.30+729, re_compile_fastmap_iter.isra.30+976
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29e6:
00000000000029e6         push       0x62
00000000000029eb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
00000000000029f0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=add_exclude_fp+325, mbscasecmp+66, sub_acc0+51, xstrtoul+85, xstrtoumax+85, build_charclass.isra.29+168, build_charclass.isra.29+248, build_charclass.isra.29+480, build_charclass.isra.29+554, build_charclass.isra.29+686, build_charclass.isra.29+819
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29f6:
00000000000029f6         push       0x63
00000000000029fb         jmp        0x23b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000002a00         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=human_readable+449, human_readable+818, human_readable+1818, human_readable+1899
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a06:
0000000000002a06         push       0x64
0000000000002a0b         jmp        0x23b0
                        ; endp


        ; Section .plt.got
        ; Range: [0x2a10; 0x2a20[ (16 bytes)
        ; File offset : [10768; 10784[ (16 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a10:
0000000000002a10         jmp        qword [qword_227fc8]                        ; qword, End of unwind block (FDE at 0x23a44), Begin of unwind block (FDE at 0x23a6c), qword_227fc8, CODE XREF=argv_iter_free+14, argv_iter_free+23, di_ent_free+17, di_set_alloc+93, di_set_free+16, di_set_free+25, di_set_free+34, string_free, j_j_strcmp+93, free_exclude+117, free_exclude+128
                        ; endp
0000000000002a16         align      8


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_227ff8:        // qword_227ff8
0000000000002a18         jmp        qword [qword_227ff8]                        ; qword, qword_227ff8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000002a1e         align      32


        ; Section .text
        ; Range: [0x2a20; 0x1fa4e[ (118830 bytes)
        ; File offset : [10784; 129614[ (118830 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mbuiter_multi_next.part.0:
0000000000002a20         lea        rcx, qword [__PRETTY_FUNCTION__.5133]       ; End of unwind block (FDE at 0x23a6c), Begin of unwind block (FDE at 0x24aac), argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbscasecmp+1723
0000000000002a27         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000002a2e         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
0000000000002a35         sub        rsp, 0x8
0000000000002a39         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
0000000000002a3e         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000002a43         align      16                                          ; End of unwind block (FDE at 0x24aac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_10C: int32_t, -268
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_14C: int32_t, -332
        ;    var_150: int32_t, -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352


                     main:
0000000000002a50         push       r15                                         ; Begin of unwind block (FDE at 0x23b10), DATA XREF=_start+29
0000000000002a52         push       r14
0000000000002a54         xor        r15d, r15d
0000000000002a57         push       r13
0000000000002a59         push       r12
0000000000002a5b         mov        r12d, edi
0000000000002a5e         push       rbp
0000000000002a5f         push       rbx
0000000000002a60         mov        rbp, rsi
0000000000002a63         lea        rbx, qword [switch_table_20fc0]             ; switch_table_20fc0
0000000000002a6a         xor        r13d, r13d
0000000000002a6d         sub        rsp, 0x138
0000000000002a74         mov        rdi, qword [rsi]
0000000000002a77         mov        rax, qword [fs:0x28]
0000000000002a80         mov        qword [rsp+0x168+var_40], rax
0000000000002a88         xor        eax, eax
0000000000002a8a         lea        rax, qword [__PRETTY_FUNCTION__.4162_22690+12] ; 0x2269c
0000000000002a91         mov        qword [rsp+0x168+var_E0], 0x0
0000000000002a9d         lea        r14, qword [rsp+0x168+var_10C]
0000000000002aa2         mov        qword [rsp+0x168+var_E8], rax
0000000000002aaa         call       set_program_name                            ; set_program_name
0000000000002aaf         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x21fe1
0000000000002ab6         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000002abb         call       j_setlocale                                 ; setlocale
0000000000002ac0         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000002ac7         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000002ace         call       j_bindtextdomain                            ; bindtextdomain
0000000000002ad3         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000002ada         call       j_textdomain                                ; textdomain
0000000000002adf         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000002ae6         call       atexit                                      ; atexit
0000000000002aeb         call       new_exclude                                 ; new_exclude
0000000000002af0         lea        rdi, qword [aDublocksize]                   ; argument "__name" for method j_getenv, "DU_BLOCK_SIZE"
0000000000002af7         mov        qword [exclude], rax                        ; exclude
0000000000002afe         call       j_getenv                                    ; getenv
0000000000002b03         lea        rdx, qword [output_block_size]              ; output_block_size
0000000000002b0a         lea        rsi, qword [human_output_opts]              ; human_output_opts
0000000000002b11         mov        rdi, rax
0000000000002b14         call       human_options                               ; human_options
0000000000002b19         lea        rax, qword [rsp+0x168+var_108]
0000000000002b1e         mov        byte [rsp+0x168+var_14C], 0x0
0000000000002b23         mov        dword [rsp+0x168+var_150], 0x10
0000000000002b2b         mov        dword [rsp+0x168+var_158], 0x8
0000000000002b33         mov        byte [rsp+0x168+var_160], 0x1
0000000000002b38         mov        byte [rsp+0x168+var_148], 0x0
0000000000002b3d         mov        qword [rsp+0x168+var_140], rax
0000000000002b42         nop        word [rax+rax]

                     loc_2b48:
0000000000002b48         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=main+326, main+374, main+386, main+433, main+456, main+468, main+491, main+517, main+571, main+583, main+613
0000000000002b4f         lea        rdx, qword [a0abdchhklmstxb]                ; argument "__shortopts" for method j_getopt_long, "0abd:chHklmst:xB:DLPSX:"
0000000000002b56         mov        r8, r14                                     ; argument "__longind" for method j_getopt_long
0000000000002b59         mov        rsi, rbp                                    ; argument "___argv" for method j_getopt_long
0000000000002b5c         mov        edi, r12d                                   ; argument "___argc" for method j_getopt_long
0000000000002b5f         mov        dword [rsp+0x168+var_10C], 0xffffffff
0000000000002b67         call       j_getopt_long                               ; getopt_long
0000000000002b6c         cmp        eax, 0xffffffff
0000000000002b6f         je         loc_2ee6

0000000000002b75         add        eax, 0x83
0000000000002b7a         cmp        eax, 0x10a
0000000000002b7f         ja         loc_2edc

0000000000002b85         movsxd     rax, dword [rbx+rax*4]
0000000000002b89         add        rax, rbx
0000000000002b8c         jmp        rax                                         ; switch statement using table at 0x20fc0, with 267 cases, 0x2b8e,0x2b98,0x2bfc,0x2c06,0x2c1d,0x2c29,0x2c40,0x2c5a,0x2c90,0x2c9c,0x2cba,0x2cc6,0x2d31,0x2d3d,0x2d4a,0x2d57,0x2d64,0x2da4,0x2db0,0x2e02,0x2e0e,0x2e21,0x2e8d,0x2ea7,0x2ec4,0x2ed0,0x2edc,0x3c5b

                     loc_2b8e:
0000000000002b8e         mov        dword [rsp+0x168+var_158], 0x48             ; case 251, CODE XREF=main+316
0000000000002b96         jmp        loc_2b48

                     loc_2b98:
0000000000002b98         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 247, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002b9f         lea        r8, qword [aKkmmgtpezy0]                    ; "kKmMGTPEZY0"
0000000000002ba6         lea        rcx, qword [opt_threshold]                  ; opt_threshold
0000000000002bad         xor        edx, edx
0000000000002baf         xor        esi, esi
0000000000002bb1         call       xstrtoimax                                  ; xstrtoimax
0000000000002bb6         test       eax, eax
0000000000002bb8         jne        loc_3e54

0000000000002bbe         cmp        qword [opt_threshold], 0x0                  ; opt_threshold
0000000000002bc6         jne        loc_2b48

0000000000002bc8         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002bcf         cmp        byte [rax], 0x2d
0000000000002bd2         jne        loc_2b48

0000000000002bd8         lea        rsi, qword [aInvalidThresho]                ; argument "msgid" for method j_dcgettext, "invalid --threshold argument '-0'"
0000000000002bdf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002be4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002be6         call       j_dcgettext                                 ; dcgettext
0000000000002beb         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002bed         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002bf0         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002bf5         xor        eax, eax
0000000000002bf7         call       j_error                                     ; error

                     loc_2bfc:
0000000000002bfc         mov        byte [rsp+0x168+var_14C], 0x1               ; case 246, CODE XREF=main+316
0000000000002c01         jmp        loc_2b48

                     loc_2c06:
0000000000002c06         mov        dword [human_output_opts], r15d             ; case 240, human_output_opts, CODE XREF=main+316
0000000000002c0d         mov        qword [output_block_size], 0x100000         ; output_block_size
0000000000002c18         jmp        loc_2b48

                     loc_2c1d:
0000000000002c1d         mov        byte [opt_count_all], 0x1                   ; case 239, opt_count_all, CODE XREF=main+316
0000000000002c24         jmp        loc_2b48

                     loc_2c29:
0000000000002c29         mov        dword [human_output_opts], r15d             ; case 238, human_output_opts, CODE XREF=main+316
0000000000002c30         mov        qword [output_block_size], 0x400            ; output_block_size
0000000000002c3b         jmp        loc_2b48

                     loc_2c40:
0000000000002c40         mov        dword [human_output_opts], 0xb0             ; case 235, human_output_opts, CODE XREF=main+316
0000000000002c4a         mov        qword [output_block_size], 0x1              ; output_block_size
0000000000002c55         jmp        loc_2b48

                     loc_2c5a:
0000000000002c5a         mov        rcx, qword [rsp+0x168+var_140]              ; case 231, CODE XREF=main+316
0000000000002c5f         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002c66         xor        r8d, r8d
0000000000002c69         xor        edx, edx
0000000000002c6b         xor        esi, esi
0000000000002c6d         call       xstrtoul                                    ; xstrtoul
0000000000002c72         test       eax, eax
0000000000002c74         jne        loc_3772

0000000000002c7a         mov        rax, qword [rsp+0x168+var_108]
0000000000002c7f         mov        byte [rsp+0x168+var_148], 0x1
0000000000002c84         mov        qword [max_depth], rax                      ; max_depth
0000000000002c8b         jmp        loc_2b48

                     loc_2c90:
0000000000002c90         mov        byte [print_grand_total], 0x1               ; case 230, print_grand_total, CODE XREF=main+316
0000000000002c97         jmp        loc_2b48

                     loc_2c9c:
0000000000002c9c         mov        byte [apparent_size], 0x1                   ; case 229, apparent_size, CODE XREF=main+316
0000000000002ca3         mov        dword [human_output_opts], r15d             ; human_output_opts
0000000000002caa         mov        qword [output_block_size], 0x1              ; output_block_size
0000000000002cb5         jmp        loc_2b48

                     loc_2cba:
0000000000002cba         mov        byte [opt_all], 0x1                         ; case 228, opt_all, CODE XREF=main+316
0000000000002cc1         jmp        loc_2b48

                     loc_2cc6:
0000000000002cc6         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; case 219, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002ccd         mov        rsi, qword [exclude]                        ; exclude
0000000000002cd4         mov        r8d, 0xa
0000000000002cda         lea        rdi, qword [add_exclude]                    ; add_exclude
0000000000002ce1         mov        ecx, 0x10000000
0000000000002ce6         call       add_exclude_file                            ; add_exclude_file
0000000000002ceb         test       eax, eax
0000000000002ced         je         loc_2b48

0000000000002cf3         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002cfa         mov        esi, 0x3
0000000000002cff         xor        edi, edi
0000000000002d01         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002d06         mov        qword [rsp+0x168+var_160], rax
0000000000002d0b         call       j___errno_location                          ; __errno_location
0000000000002d10         mov        rcx, qword [rsp+0x168+var_160]
0000000000002d15         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002d17         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x21490
0000000000002d1e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002d20         xor        eax, eax
0000000000002d22         call       j_error                                     ; error
0000000000002d27         mov        byte [rsp+0x168+var_160], 0x0
0000000000002d2c         jmp        loc_2b48

                     loc_2d31:
0000000000002d31         mov        byte [opt_separate_dirs], 0x1               ; case 214, opt_separate_dirs, CODE XREF=main+316
0000000000002d38         jmp        loc_2b48

                     loc_2d3d:
0000000000002d3d         mov        dword [rsp+0x168+var_150], 0x10             ; case 211, CODE XREF=main+316
0000000000002d45         jmp        loc_2b48

                     loc_2d4a:
0000000000002d4a         mov        dword [rsp+0x168+var_150], 0x2              ; case 207, CODE XREF=main+316
0000000000002d52         jmp        loc_2b48

                     loc_2d57:
0000000000002d57         mov        dword [rsp+0x168+var_150], 0x11             ; case 203, CODE XREF=main+316
0000000000002d5f         jmp        loc_2b48

                     loc_2d64:
0000000000002d64         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 197, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002d6b         lea        rdx, qword [output_block_size]              ; output_block_size
0000000000002d72         lea        rsi, qword [human_output_opts]              ; human_output_opts
0000000000002d79         call       human_options                               ; human_options
0000000000002d7e         test       eax, eax
0000000000002d80         je         loc_2b48

0000000000002d86         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5
0000000000002d8d         mov        esi, dword [rsp+0x168+var_10C]
0000000000002d91         lea        rcx, qword [long_options]                   ; long_options
0000000000002d98         mov        edx, 0x42
0000000000002d9d         mov        edi, eax
0000000000002d9f         call       xstrtol_fatal                               ; xstrtol_fatal

                     loc_2da4:
0000000000002da4         mov        byte [opt_nul_terminate_output], 0x1        ; case 179, opt_nul_terminate_output, CODE XREF=main+316
0000000000002dab         jmp        loc_2b48

                     loc_2db0:
0000000000002db0         lea        rax, qword [aJimMeyering]                   ; case 0, "Jim Meyering", CODE XREF=main+316
0000000000002db7         sub        rsp, 0x8
0000000000002dbb         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002dc2         push       0x0
0000000000002dc4         mov        rcx, qword [Version]                        ; Version
0000000000002dcb         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000002dd2         push       rax
0000000000002dd3         lea        rax, qword [aPaulEggert]                    ; "Paul Eggert"
0000000000002dda         lea        r8, qword [aTorbjornGranlu]                 ; "Torbjorn Granlund"
0000000000002de1         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1fb07
0000000000002de8         lea        rsi, qword [aTsc+6]                         ; 0x1fa8b
0000000000002def         push       rax
0000000000002df0         xor        eax, eax
0000000000002df2         call       version_etc                                 ; version_etc
0000000000002df7         add        rsp, 0x20
0000000000002dfb         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000002dfd         call       j_exit                                      ; exit
                        ; endp

                     loc_2e02:
0000000000002e02         mov        byte [opt_inodes], 0x1                      ; case 266, opt_inodes, CODE XREF=main+316
0000000000002e09         jmp        loc_2b48

                     loc_2e0e:
0000000000002e0e         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; case 265, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002e15         mov        qword [time_style], rax                     ; time_style
0000000000002e1c         jmp        loc_2b48

                     loc_2e21:
0000000000002e21         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; case 264, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002e28         xor        eax, eax
0000000000002e2a         mov        byte [opt_time], 0x1                        ; opt_time
0000000000002e31         test       rsi, rsi
0000000000002e34         je         loc_2e67

0000000000002e36         mov        r9, qword [argmatch_die]                    ; argmatch_die
0000000000002e3d         lea        rdx, qword [time_args]                      ; time_args
0000000000002e44         lea        rcx, qword [time_types]                     ; time_types
0000000000002e4b         lea        rdi, qword [aTime]                          ; "--time"
0000000000002e52         mov        r8d, 0x4
0000000000002e58         call       __xargmatch_internal                        ; __xargmatch_internal
0000000000002e5d         lea        rdx, qword [time_types]                     ; time_types
0000000000002e64         mov        eax, dword [rdx+rax*4]

                     loc_2e67:
0000000000002e67         lea        rdi, qword [aTime+7]                        ; argument "__name" for method j_getenv, 0x1fba7, CODE XREF=main+996
0000000000002e6e         mov        dword [time_type], eax                      ; time_type
0000000000002e74         call       j_getenv                                    ; getenv
0000000000002e79         mov        rdi, rax
0000000000002e7c         call       tzalloc                                     ; tzalloc
0000000000002e81         mov        qword [localtz], rax                        ; localtz
0000000000002e88         jmp        loc_2b48

                     loc_2e8d:
0000000000002e8d         mov        dword [human_output_opts], 0x90             ; case 262, human_output_opts, CODE XREF=main+316
0000000000002e97         mov        qword [output_block_size], 0x1              ; output_block_size
0000000000002ea2         jmp        loc_2b48

                     loc_2ea7:
0000000000002ea7         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; case 260, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002eae         mov        rdi, qword [exclude]                        ; exclude
0000000000002eb5         mov        edx, 0x10000000
0000000000002eba         call       add_exclude                                 ; add_exclude
0000000000002ebf         jmp        loc_2b48

                     loc_2ec4:
0000000000002ec4         mov        byte [apparent_size], 0x1                   ; case 259, apparent_size, CODE XREF=main+316
0000000000002ecb         jmp        loc_2b48

                     loc_2ed0:
0000000000002ed0         mov        r13, qword [optarg@@GLIBC_2.2.5]            ; case 261, optarg@@GLIBC_2.2.5, CODE XREF=main+316
0000000000002ed7         jmp        loc_2b48

                     loc_2edc:
0000000000002edc         mov        byte [rsp+0x168+var_160], 0x0               ; case 263, CODE XREF=main+303, main+316
0000000000002ee1         jmp        loc_2b48

                     loc_2ee6:
0000000000002ee6         cmp        byte [rsp+0x168+var_160], 0x0               ; CODE XREF=main+287
0000000000002eeb         je         loc_3f2c

0000000000002ef1         cmp        byte [opt_all], 0x0                         ; opt_all
0000000000002ef8         je         loc_371e

0000000000002efe         cmp        byte [rsp+0x168+var_14C], 0x0
0000000000002f03         jne        loc_3f0b

                     loc_2f09:
0000000000002f09         cmp        byte [opt_inodes], 0x0                      ; opt_inodes, CODE XREF=main+3294, main+4036, main+5165
0000000000002f10         je         loc_2f2a

0000000000002f12         cmp        byte [apparent_size], 0x0                   ; apparent_size
0000000000002f19         jne        loc_3a19

                     loc_2f1f:
0000000000002f1f         mov        qword [output_block_size], 0x1              ; output_block_size, CODE XREF=main+4074

                     loc_2f2a:
0000000000002f2a         cmp        byte [opt_time], 0x0                        ; opt_time, CODE XREF=main+1216
0000000000002f31         je         loc_2f5d

0000000000002f33         cmp        qword [time_style], 0x0                     ; time_style
0000000000002f3b         je         loc_3be8

0000000000002f41         mov        r15, qword [time_style]                     ; time_style

                     loc_2f48:
0000000000002f48         cmp        byte [r15], 0x2b                            ; CODE XREF=main+4614, main+4884
0000000000002f4c         jne        loc_3b05

                     loc_2f52:
0000000000002f52         add        r15, 0x1                                    ; CODE XREF=main+4875
0000000000002f56         mov        qword [time_format], r15                    ; time_format

                     loc_2f5d:
0000000000002f5d         test       r13, r13                                    ; CODE XREF=main+1249, main+4347, main+4367, main+4835, main+4854
0000000000002f60         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002f67         je         loc_3a97

0000000000002f6d         cmp        r12d, eax
0000000000002f70         jg         loc_3de9

0000000000002f76         lea        rsi, qword [aSsArgumentSToo+30]             ; argument "__s2" for method j_strcmp, 0x2258a
0000000000002f7d         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000002f80         call       j_strcmp                                    ; strcmp
0000000000002f85         test       eax, eax
0000000000002f87         jne        loc_38bd

                     loc_2f8d:
0000000000002f8d         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+3718
0000000000002f94         call       argv_iter_init_stream                       ; argv_iter_init_stream
0000000000002f99         mov        byte [hash_all], 0x1                        ; hash_all
0000000000002fa0         mov        r15, rax

                     loc_2fa3:
0000000000002fa3         test       r15, r15                                    ; CODE XREF=main+4224
0000000000002fa6         je         loc_3ddf

0000000000002fac         call       di_set_alloc                                ; di_set_alloc
0000000000002fb1         test       rax, rax
0000000000002fb4         mov        qword [di_files], rax                       ; di_files
0000000000002fbb         je         loc_3ddf

0000000000002fc1         cmp        byte [opt_count_all], 0x0                   ; opt_count_all
0000000000002fc8         jne        loc_312f

0000000000002fce         cmp        byte [hash_all], 0x0                        ; hash_all
0000000000002fd5         je         loc_312f

                     loc_2fdb:
0000000000002fdb         mov        eax, dword [rsp+0x168+var_158]              ; CODE XREF=main+1767
0000000000002fdf         or         eax, dword [rsp+0x168+var_150]
0000000000002fe3         mov        r12, r14
0000000000002fe6         mov        dword [rsp+0x168+var_14C], eax
0000000000002fea         movzx      eax, byte [rsp+0x168+var_160]
0000000000002fef         mov        byte [rsp+0x168+var_150], al
0000000000002ff3         lea        rax, qword [rsp+0x168+var_D8]
0000000000002ffb         mov        qword [rsp+0x168+var_120], rax

                     loc_3000:
0000000000003000         mov        rsi, r12                                    ; CODE XREF=main+2648, main+2710, main+3259
0000000000003003         mov        rdi, r15
0000000000003006         call       argv_iter                                   ; argv_iter
000000000000300b         test       rax, rax
000000000000300e         mov        rbx, rax
0000000000003011         je         loc_3529

0000000000003017         test       r13, r13
000000000000301a         je         loc_34b0

0000000000003020         lea        rdx, qword [aSsArgumentSToo+30]             ; 0x2258a
0000000000003027         mov        ecx, 0x2
000000000000302c         mov        rsi, r13
000000000000302f         mov        rdi, rdx
0000000000003032         rep  cmpsb byte [rsi], byte [rdi]
0000000000003034         seta       al
0000000000003037         sbb        al, 0x0
0000000000003039         test       al, al
000000000000303b         jne        loc_3057

000000000000303d         mov        ecx, 0x2
0000000000003042         mov        rsi, rbx
0000000000003045         mov        rdi, rdx
0000000000003048         rep  cmpsb byte [rsi], byte [rdi]
000000000000304a         seta       al
000000000000304d         sbb        al, 0x0
000000000000304f         test       al, al
0000000000003051         je         loc_3418

                     loc_3057:
0000000000003057         cmp        byte [rbx], 0x0                             ; CODE XREF=main+1515
000000000000305a         je         loc_3458

                     loc_3060:
0000000000003060         lea        rax, qword [temp_argv.7378]                 ; temp_argv.7378, CODE XREF=main+2659
0000000000003067         mov        esi, dword [rsp+0x168+var_14C]
000000000000306b         xor        edx, edx
000000000000306d         mov        rdi, rax
0000000000003070         mov        qword [rax], rbx
0000000000003073         call       xfts_open                                   ; xfts_open
0000000000003078         mov        qword [rsp+0x168+var_158], rax
000000000000307d         movzx      eax, byte [rsp+0x168+var_160]
0000000000003082         mov        qword [rsp+0x168+var_140], r15
0000000000003087         mov        qword [rsp+0x168+var_148], r13
000000000000308c         mov        qword [rsp+0x168+var_138], r12
0000000000003091         mov        r15d, eax

                     loc_3094:
0000000000003094         mov        rdi, qword [rsp+0x168+var_158]              ; CODE XREF=main+2483
0000000000003099         call       rpl_fts_read                                ; rpl_fts_read
000000000000309e         test       rax, rax
00000000000030a1         mov        r14, rax
00000000000030a4         je         loc_36c6

00000000000030aa         movzx      ebp, word [rax+0x70]
00000000000030ae         mov        r13, qword [rax+0x38]
00000000000030b2         cmp        ebp, 0x4
00000000000030b5         je         loc_3688

00000000000030bb         cmp        ebp, 0x6
00000000000030be         movzx      r12d, byte [rsp+0x168+var_160]
00000000000030c4         je         loc_31b0

00000000000030ca         mov        rdi, qword [exclude]                        ; exclude
00000000000030d1         mov        rsi, r13
00000000000030d4         call       excluded_file_name                          ; excluded_file_name
00000000000030d9         test       al, al
00000000000030db         jne        loc_311b

00000000000030dd         cmp        ebp, 0xb
00000000000030e0         je         loc_3bb8

                     loc_30e6:
00000000000030e6         cmp        ebp, 0xa                                    ; CODE XREF=main+4499
00000000000030e9         sete       r8b
00000000000030ed         cmp        ebp, 0xd
00000000000030f0         sete       al
00000000000030f3         or         r8b, al
00000000000030f6         mov        r12d, r8d
00000000000030f9         jne        loc_399a

00000000000030ff         mov        rax, qword [rsp+0x168+var_158]
0000000000003104         test       byte [rax+0x48], 0x40
0000000000003108         je         loc_313c

000000000000310a         cmp        qword [r14+0x58], 0x0
000000000000310f         jle        loc_313c

0000000000003111         mov        rcx, qword [r14+0x78]
0000000000003115         cmp        qword [rax+0x18], rcx
0000000000003119         je         loc_313c

                     loc_311b:
000000000000311b         sub        ebp, 0x1                                    ; CODE XREF=main+1675, main+1850
000000000000311e         je         loc_3a3f

                     loc_3124:
0000000000003124         movzx      r12d, byte [rsp+0x168+var_160]              ; CODE XREF=main+1873, main+4111, main+4684, main+4733
000000000000312a         jmp        loc_3400

                     loc_312f:
000000000000312f         or         dword [rsp+0x168+var_158], 0x100            ; CODE XREF=main+1400, main+1413
0000000000003137         jmp        loc_2fdb

                     loc_313c:
000000000000313c         cmp        byte [opt_count_all], 0x0                   ; opt_count_all, CODE XREF=main+1720, main+1727, main+1737
0000000000003143         jne        loc_318c

0000000000003145         cmp        byte [hash_all], 0x0                        ; hash_all
000000000000314c         jne        loc_316b

000000000000314e         mov        eax, dword [r14+0x90]
0000000000003155         and        eax, 0xf000
000000000000315a         cmp        eax, __do_global_dtors_aux
000000000000315f         je         loc_318c

0000000000003161         cmp        qword [r14+0x88], 0x1
0000000000003169         jbe        loc_318c

                     loc_316b:
000000000000316b         mov        rdx, qword [r14+0x80]                       ; CODE XREF=main+1788
0000000000003172         mov        rsi, qword [r14+0x78]
0000000000003176         mov        rdi, qword [di_files]                       ; di_files
000000000000317d         call       di_set_insert                               ; di_set_insert
0000000000003182         test       eax, eax
0000000000003184         js         loc_3ddf

000000000000318a         je         loc_311b

                     loc_318c:
000000000000318c         cmp        ebp, 0x2                                    ; CODE XREF=main+1779, main+1807, main+1817
000000000000318f         je         loc_3c8d

0000000000003195         cmp        ebp, 0x7
0000000000003198         je         loc_3c62

000000000000319e         cmp        ebp, 0x1
00000000000031a1         je         loc_3124

00000000000031a3         movzx      r12d, byte [rsp+0x168+var_160]
00000000000031a9         nop        dword [rax]

                     loc_31b0:
00000000000031b0         mov        eax, dword [time_type]                      ; time_type, CODE XREF=main+1652, main+3185, main+4664
00000000000031b6         test       eax, eax
00000000000031b8         jne        loc_350d

00000000000031be         mov        rcx, qword [r14+0xd0]
00000000000031c5         mov        r9, qword [r14+0xd8]

                     loc_31cc:
00000000000031cc         cmp        byte [apparent_size], 0x0                   ; apparent_size, CODE XREF=main+2772, main+4162
00000000000031d3         je         loc_34fd

00000000000031d9         cmp        qword [r14+0xa8], 0x0
00000000000031e1         mov        ebx, 0x0
00000000000031e6         cmovns     rbx, qword [r14+0xa8]

                     loc_31ee:
00000000000031ee         mov        rdx, qword [n_alloc.7286]                   ; n_alloc.7286, CODE XREF=main+2744
00000000000031f5         mov        r14, qword [r14+0x58]
00000000000031f9         mov        qword [rsp+0x168+var_108], rbx
00000000000031fe         mov        qword [rsp+0x168+var_100], 0x1
0000000000003207         mov        qword [rsp+0x168+var_F8], rcx
000000000000320c         mov        qword [rsp+0x168+var_F0], r9
0000000000003211         test       rdx, rdx
0000000000003214         je         loc_3653

000000000000321a         mov        rax, qword [prev_level]                     ; prev_level
0000000000003221         cmp        r14, rax
0000000000003224         je         loc_3300

000000000000322a         jbe        loc_37b3

0000000000003230         cmp        r14, rdx
0000000000003233         jb         loc_329a

0000000000003235         mov        edx, 0x80
000000000000323a         xor        esi, esi
000000000000323c         mov        rdi, qword [dulvl.7287]                     ; dulvl.7287
0000000000003243         mov        rax, rdx
0000000000003246         mul        r14
0000000000003249         jo         loc_3eb9

                     loc_324f:
000000000000324f         test       rax, rax                                    ; CODE XREF=main+5230
0000000000003252         mov        qword [rsp+0x168+var_128], r9
0000000000003257         mov        qword [rsp+0x168+var_130], rcx
000000000000325c         js         loc_3ddf

0000000000003262         test       rsi, rsi
0000000000003265         jne        loc_3ddf

000000000000326b         mov        rsi, r14
000000000000326e         shl        rsi, 0x7                                    ; argument #2 for method xrealloc
0000000000003272         call       xrealloc                                    ; xrealloc
0000000000003277         mov        qword [dulvl.7287], rax                     ; dulvl.7287
000000000000327e         lea        rax, qword [r14+r14]
0000000000003282         mov        r9, qword [rsp+0x168+var_128]
0000000000003287         mov        rcx, qword [rsp+0x168+var_130]
000000000000328c         mov        qword [n_alloc.7286], rax                   ; n_alloc.7286
0000000000003293         mov        rax, qword [prev_level]                     ; prev_level

                     loc_329a:
000000000000329a         lea        rdx, qword [rax+1]                          ; CODE XREF=main+2019
000000000000329e         cmp        r14, rdx
00000000000032a1         jb         loc_3300

00000000000032a3         shl        rax, 0x6
00000000000032a7         add        rax, qword [dulvl.7287]                     ; dulvl.7287
00000000000032ae         nop

                     loc_32b0:
00000000000032b0         movabs     rsi, 0x8000000000000000                     ; CODE XREF=main+2221
00000000000032ba         add        rdx, 0x1
00000000000032be         mov        qword [rax+0x40], 0x0
00000000000032c6         mov        qword [rax+0x48], 0x0
00000000000032ce         mov        qword [rax+0x50], rsi
00000000000032d2         add        rax, 0x40
00000000000032d6         mov        qword [rax+0x18], 0xffffffffffffffff
00000000000032de         mov        qword [rax+0x20], 0x0
00000000000032e6         mov        qword [rax+0x28], 0x0
00000000000032ee         mov        qword [rax+0x30], rsi
00000000000032f2         mov        qword [rax+0x38], 0xffffffffffffffff
00000000000032fa         cmp        r14, rdx
00000000000032fd         jae        loc_32b0

00000000000032ff         nop

                     loc_3300:
0000000000003300         cmp        byte [opt_separate_dirs], 0x0               ; opt_separate_dirs, CODE XREF=main+2004, main+2129, main+3123, main+3661, main+3673, main+3688
0000000000003307         mov        qword [prev_level], r14                     ; prev_level
000000000000330e         je         loc_331a

0000000000003310         mov        eax, ebp
0000000000003312         and        eax, 0xfffffffd
0000000000003315         cmp        eax, 0x4
0000000000003318         je         loc_3360

                     loc_331a:
000000000000331a         mov        rax, r14                                    ; CODE XREF=main+2238
000000000000331d         xor        esi, esi
000000000000331f         mov        rdx, rbx
0000000000003322         shl        rax, 0x6
0000000000003326         add        rax, qword [dulvl.7287]                     ; dulvl.7287
000000000000332d         add        rdx, qword [rax]
0000000000003330         setb       sil
0000000000003334         test       rsi, rsi
0000000000003337         mov        rsi, 0xffffffffffffffff
000000000000333e         cmovne     rdx, rsi
0000000000003342         add        qword [rax+8], 0x1
0000000000003347         cmp        rcx, qword [rax+0x10]
000000000000334b         mov        qword [rax], rdx
000000000000334e         jg         loc_3646

0000000000003354         jl         loc_3360

0000000000003356         cmp        dword [rax+0x18], r9d
000000000000335a         js         loc_3646

                     loc_3360:
0000000000003360         xor        eax, eax                                    ; CODE XREF=main+2248, main+2308, main+3070
0000000000003362         add        rbx, qword [tot_dui]                        ; tot_dui
0000000000003369         setb       al
000000000000336c         test       rax, rax
000000000000336f         mov        rax, 0xffffffffffffffff
0000000000003376         cmovne     rbx, rax
000000000000337a         add        qword [qword_228128], 0x1                   ; qword_228128
0000000000003382         cmp        rcx, qword [qword_228130]                   ; qword_228130
0000000000003389         mov        qword [tot_dui], rbx                        ; tot_dui
0000000000003390         jg         loc_3408

0000000000003392         jl         loc_33a0

0000000000003394         cmp        dword [qword_228138], r9d                   ; qword_228138
000000000000339b         js         loc_3408

000000000000339d         nop        dword [rax]

                     loc_33a0:
00000000000033a0         and        ebp, 0xfffffffd                             ; CODE XREF=main+2370, main+2502
00000000000033a3         cmp        ebp, 0x4
00000000000033a6         je         loc_34eb

00000000000033ac         cmp        byte [opt_all], 0x0                         ; opt_all
00000000000033b3         jne        loc_34eb

                     loc_33b9:
00000000000033b9         test       r14, r14                                    ; CODE XREF=main+2728
00000000000033bc         jne        loc_3400

                     loc_33be:
00000000000033be         mov        rdx, qword [opt_threshold]                  ; opt_threshold, CODE XREF=main+2722
00000000000033c5         cmp        byte [opt_inodes], 0x0                      ; opt_inodes
00000000000033cc         mov        rax, qword [rsp+0x168+var_100]
00000000000033d1         cmove      rax, qword [rsp+0x168+var_108]
00000000000033d7         test       rdx, rdx
00000000000033da         js         loc_3710

00000000000033e0         cmp        rax, rdx
00000000000033e3         setae      al

                     loc_33e6:
00000000000033e6         test       al, al                                      ; CODE XREF=main+3273
00000000000033e8         je         loc_3400

00000000000033ea         lea        rdi, qword [rsp+0x168+var_108]              ; argument #1 for method print_size
00000000000033ef         mov        rsi, r13                                    ; argument #2 for method print_size
00000000000033f2         call       print_size                                  ; print_size
00000000000033f7         nop        word [rax+rax]

                     loc_3400:
0000000000003400         and        r15d, r12d                                  ; CODE XREF=main+1754, main+2412, main+2456, main+3971, main+4816
0000000000003403         jmp        loc_3094

                     loc_3408:
0000000000003408         mov        qword [qword_228130], rcx                   ; qword_228130, CODE XREF=main+2368, main+2379
000000000000340f         mov        qword [qword_228138], r9                    ; qword_228138
0000000000003416         jmp        loc_33a0

                     loc_3418:
0000000000003418         mov        rsi, rbx                                    ; CODE XREF=main+1537
000000000000341b         mov        edi, 0x4
0000000000003420         call       quotearg_style                              ; quotearg_style
0000000000003425         lea        rsi, qword [aWhenReadingFil]                ; argument "msgid" for method j_dcgettext, "when reading file names from stdin, no file name of %s allowed"
000000000000342c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000342e         mov        rbp, rax
0000000000003431         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003436         call       j_dcgettext                                 ; dcgettext
000000000000343b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000343d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003440         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003442         xor        eax, eax
0000000000003444         mov        rcx, rbp
0000000000003447         call       j_error                                     ; error
000000000000344c         cmp        byte [rbx], 0x0
000000000000344f         jne        loc_34e1

0000000000003455         nop        dword [rax]

                     loc_3458:
0000000000003458         mov        rdi, r15                                    ; CODE XREF=main+1546
000000000000345b         call       argv_iter_n_args                            ; argv_iter_n_args
0000000000003460         lea        rsi, qword [aInvalidZerolen]                ; argument "msgid" for method j_dcgettext, "invalid zero-length file name"
0000000000003467         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000346c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000346e         mov        rbx, rax
0000000000003471         call       j_dcgettext                                 ; dcgettext
0000000000003476         mov        rdx, r13
0000000000003479         mov        esi, 0x3
000000000000347e         xor        edi, edi
0000000000003480         mov        rbp, rax
0000000000003483         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003488         lea        rdx, qword [aSluS]                          ; argument "__format" for method j_error, "%s:%lu: %s"
000000000000348f         mov        rcx, rax
0000000000003492         mov        r9, rbp
0000000000003495         mov        r8, rbx
0000000000003498         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000349a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000349c         xor        eax, eax
000000000000349e         call       j_error                                     ; error
00000000000034a3         mov        byte [rsp+0x168+var_150], 0x0
00000000000034a8         jmp        loc_3000
00000000000034ad         align      16

                     loc_34b0:
00000000000034b0         cmp        byte [rax], 0x0                             ; CODE XREF=main+1482
00000000000034b3         jne        loc_3060

00000000000034b9         lea        rsi, qword [aInvalidZerolen]                ; argument "msgid" for method j_dcgettext, "invalid zero-length file name"
00000000000034c0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000034c5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000034c7         call       j_dcgettext                                 ; dcgettext
00000000000034cc         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x21490
00000000000034d3         mov        rcx, rax
00000000000034d6         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000034d8         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000034da         xor        eax, eax
00000000000034dc         call       j_error                                     ; error

                     loc_34e1:
00000000000034e1         mov        byte [rsp+0x168+var_150], 0x0               ; CODE XREF=main+2559
00000000000034e6         jmp        loc_3000

                     loc_34eb:
00000000000034eb         cmp        r14, qword [max_depth]                      ; max_depth, CODE XREF=main+2390, main+2403
00000000000034f2         jbe        loc_33be

00000000000034f8         jmp        loc_33b9

                     loc_34fd:
00000000000034fd         mov        rbx, qword [r14+0xb8]                       ; CODE XREF=main+1923
0000000000003504         shl        rbx, 0x9
0000000000003508         jmp        loc_31ee

                     loc_350d:
000000000000350d         cmp        eax, 0x2                                    ; CODE XREF=main+1896
0000000000003510         je         loc_3a84

0000000000003516         mov        rcx, qword [r14+0xe0]
000000000000351d         mov        r9, qword [r14+0xe8]
0000000000003524         jmp        loc_31cc

                     loc_3529:
0000000000003529         mov        eax, dword [rsp+0x168+var_10C]              ; CODE XREF=main+1473
000000000000352d         cmp        eax, 0x3
0000000000003530         je         loc_3ddf

0000000000003536         cmp        eax, 0x4
0000000000003539         je         loc_355f

000000000000353b         cmp        eax, 0x2
000000000000353e         je         loc_35a2

0000000000003540         lea        rcx, qword [__PRETTY_FUNCTION__.7387]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.7387
0000000000003547         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/du.c"
000000000000354e         lea        rdi, qword [aUnexpectedErro]                ; argument "__assertion" for method j___assert_fail, "!\\\"unexpected error code from argv_iter\\\""
0000000000003555         mov        edx, 0x438                                  ; argument "__line" for method j___assert_fail
000000000000355a         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_355f:
000000000000355f         mov        rdx, r13                                    ; CODE XREF=main+2793
0000000000003562         mov        esi, 0x3
0000000000003567         xor        edi, edi
0000000000003569         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000356e         lea        rsi, qword [aSReadError]                    ; argument "msgid" for method j_dcgettext, "%s: read error"
0000000000003575         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000357a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000357c         mov        rbp, rax
000000000000357f         call       j_dcgettext                                 ; dcgettext
0000000000003584         mov        rbx, rax
0000000000003587         call       j___errno_location                          ; __errno_location
000000000000358c         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000358e         mov        rcx, rbp
0000000000003591         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000003594         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003596         xor        eax, eax
0000000000003598         call       j_error                                     ; error
000000000000359d         mov        byte [rsp+0x168+var_150], 0x0

                     loc_35a2:
00000000000035a2         mov        rdi, r15                                    ; CODE XREF=main+2798
00000000000035a5         call       argv_iter_free                              ; argv_iter_free
00000000000035aa         mov        rdi, qword [di_files]                       ; di_files
00000000000035b1         call       di_set_free                                 ; di_set_free
00000000000035b6         mov        rdi, qword [di_mnt]                         ; di_mnt
00000000000035bd         test       rdi, rdi
00000000000035c0         je         loc_35c7

00000000000035c2         call       di_set_free                                 ; di_set_free

                     loc_35c7:
00000000000035c7         test       r13, r13                                    ; CODE XREF=main+2928
00000000000035ca         je         loc_35e7

00000000000035cc         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
00000000000035d3         test       byte [rdi], 0x20
00000000000035d6         je         loc_391b

                     loc_35dc:
00000000000035dc         cmp        byte [rsp+0x168+var_150], 0x0               ; CODE XREF=main+3794
00000000000035e1         jne        loc_3e82

                     loc_35e7:
00000000000035e7         cmp        byte [print_grand_total], 0x0               ; print_grand_total, CODE XREF=main+2938, main+3800
00000000000035ee         je         loc_3612

00000000000035f0         lea        rsi, qword [aTotal]                         ; argument "msgid" for method j_dcgettext, "total"
00000000000035f7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000035f9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000035fe         call       j_dcgettext                                 ; dcgettext
0000000000003603         lea        rdi, qword [tot_dui]                        ; argument #1 for method print_size, tot_dui
000000000000360a         mov        rsi, rax                                    ; argument #2 for method print_size
000000000000360d         call       print_size                                  ; print_size

                     loc_3612:
0000000000003612         movzx      eax, byte [rsp+0x168+var_150]               ; CODE XREF=main+2974
0000000000003617         xor        eax, 0x1
000000000000361a         mov        rcx, qword [rsp+0x168+var_40]
0000000000003622         xor        rcx, qword [fs:0x28]
000000000000362b         movzx      eax, al
000000000000362e         jne        loc_3de4

0000000000003634         add        rsp, 0x138
000000000000363b         pop        rbx
000000000000363c         pop        rbp
000000000000363d         pop        r12
000000000000363f         pop        r13
0000000000003641         pop        r14
0000000000003643         pop        r15
0000000000003645         ret
                        ; endp

                     loc_3646:
0000000000003646         mov        qword [rax+0x10], rcx                       ; CODE XREF=main+2302, main+2314
000000000000364a         mov        qword [rax+0x18], r9
000000000000364e         jmp        loc_3360

                     loc_3653:
0000000000003653         lea        rdi, qword [r14+0xa]                        ; CODE XREF=main+1988
0000000000003657         mov        esi, 0x40
000000000000365c         mov        qword [rsp+0x168+var_128], r9
0000000000003661         mov        qword [rsp+0x168+var_130], rcx
0000000000003666         mov        qword [n_alloc.7286], rdi                   ; n_alloc.7286
000000000000366d         call       xcalloc                                     ; xcalloc
0000000000003672         mov        rcx, qword [rsp+0x168+var_130]
0000000000003677         mov        qword [dulvl.7287], rax                     ; dulvl.7287
000000000000367e         mov        r9, qword [rsp+0x168+var_128]
0000000000003683         jmp        loc_3300

                     loc_3688:
0000000000003688         mov        rsi, r13                                    ; CODE XREF=main+1637
000000000000368b         mov        edi, 0x4
0000000000003690         xor        r12d, r12d
0000000000003693         call       quotearg_style                              ; quotearg_style
0000000000003698         lea        rsi, qword [aCannotReadDire]                ; argument "msgid" for method j_dcgettext, "cannot read directory %s"
000000000000369f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000036a4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000036a6         mov        rbx, rax
00000000000036a9         call       j_dcgettext                                 ; dcgettext
00000000000036ae         mov        esi, dword [r14+0x40]                       ; argument "__errnum" for method j_error
00000000000036b2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000036b5         mov        rcx, rbx
00000000000036b8         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000036ba         xor        eax, eax
00000000000036bc         call       j_error                                     ; error
00000000000036c1         jmp        loc_31b0

                     loc_36c6:
00000000000036c6         call       j___errno_location                          ; __errno_location, CODE XREF=main+1620
00000000000036cb         cmp        dword [rax], 0x0
00000000000036ce         mov        r14d, r15d
00000000000036d1         mov        r13, qword [rsp+0x168+var_148]
00000000000036d6         mov        r15, qword [rsp+0x168+var_140]
00000000000036db         mov        r12, qword [rsp+0x168+var_138]
00000000000036e0         mov        rbx, rax
00000000000036e3         jne        loc_3956

                     loc_36e9:
00000000000036e9         mov        rdi, qword [rsp+0x168+var_158]              ; CODE XREF=main+3909
00000000000036ee         mov        qword [prev_level], 0x0                     ; prev_level
00000000000036f9         call       rpl_fts_close                               ; rpl_fts_close
00000000000036fe         test       eax, eax
0000000000003700         jne        loc_392d

                     loc_3706:
0000000000003706         and        byte [rsp+0x168+var_150], r14b              ; CODE XREF=main+3841
000000000000370b         jmp        loc_3000

                     loc_3710:
0000000000003710         neg        rdx                                         ; CODE XREF=main+2442
0000000000003713         cmp        rdx, rax
0000000000003716         setae      al
0000000000003719         jmp        loc_33e6

                     loc_371e:
000000000000371e         cmp        byte [rsp+0x168+var_148], 0x0               ; CODE XREF=main+1192
0000000000003723         je         loc_3e72

0000000000003729         cmp        byte [rsp+0x168+var_14C], 0x0
000000000000372e         je         loc_2f09

0000000000003734         mov        rbx, qword [max_depth]                      ; max_depth
000000000000373b         test       rbx, rbx
000000000000373e         je         loc_39d8

                     loc_3744:
0000000000003744         lea        rsi, qword [aWarningSummari]                ; argument "msgid" for method j_dcgettext, "warning: summarizing conflicts with --max-depth=%lu", CODE XREF=main+4019
000000000000374b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003750         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003752         call       j_dcgettext                                 ; dcgettext
0000000000003757         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003759         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000375c         mov        rcx, rbx
000000000000375f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003761         xor        eax, eax
0000000000003763         call       j_error                                     ; error
0000000000003768         mov        edi, 0x1                                    ; argument #1 for method usage
000000000000376d         call       usage                                       ; usage

                     loc_3772:
0000000000003772         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method quote, optarg@@GLIBC_2.2.5, CODE XREF=main+548
0000000000003779         call       quote                                       ; quote
000000000000377e         lea        rsi, qword [aInvalidMaximum]                ; argument "msgid" for method j_dcgettext, "invalid maximum depth %s"
0000000000003785         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000378a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000378c         mov        qword [rsp+0x168+var_160], rax
0000000000003791         call       j_dcgettext                                 ; dcgettext
0000000000003796         mov        rcx, qword [rsp+0x168+var_160]
000000000000379b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000379e         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000037a0         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000037a2         xor        eax, eax
00000000000037a4         call       j_error                                     ; error
00000000000037a9         mov        byte [rsp+0x168+var_160], 0x0
00000000000037ae         jmp        loc_2b48

                     loc_37b3:
00000000000037b3         lea        rdx, qword [rax-1]                          ; CODE XREF=main+2010
00000000000037b7         cmp        r14, rdx
00000000000037ba         jne        loc_3eec

00000000000037c0         mov        rdx, qword [dulvl.7287]                     ; dulvl.7287
00000000000037c7         shl        rax, 0x6
00000000000037cb         xor        edi, edi
00000000000037cd         mov        rsi, rbx
00000000000037d0         add        rax, rdx
00000000000037d3         add        rsi, qword [rax]
00000000000037d6         setb       dil
00000000000037da         test       rdi, rdi
00000000000037dd         mov        rdi, 0xffffffffffffffff
00000000000037e4         cmovne     rsi, rdi
00000000000037e8         mov        rdi, qword [rax+8]
00000000000037ec         mov        qword [rsp+0x168+var_108], rsi
00000000000037f1         add        rdi, 0x1
00000000000037f5         mov        qword [rsp+0x168+var_100], rdi
00000000000037fa         cmp        rcx, qword [rax+0x10]
00000000000037fe         jl         loc_3ae8

0000000000003804         jg         loc_3810

0000000000003806         cmp        r9d, dword [rax+0x18]
000000000000380a         js         loc_3ae8

                     loc_3810:
0000000000003810         cmp        byte [opt_separate_dirs], 0x0               ; opt_separate_dirs, CODE XREF=main+3508, main+4258
0000000000003817         je         loc_3b64

                     loc_381d:
000000000000381d         mov        rsi, r14                                    ; CODE XREF=main+4422, main+4435, main+4451
0000000000003820         xor        edi, edi
0000000000003822         shl        rsi, 0x6
0000000000003826         add        rdx, rsi
0000000000003829         mov        rsi, qword [rax]
000000000000382c         add        rsi, qword [rdx+0x20]
0000000000003830         jb         loc_3ec3

                     loc_3836:
0000000000003836         test       rdi, rdi                                    ; CODE XREF=main+5240
0000000000003839         mov        rdi, 0xffffffffffffffff
0000000000003840         mov        r10, qword [rdx+0x30]
0000000000003844         cmovne     rsi, rdi
0000000000003848         mov        rdi, qword [rax+8]
000000000000384c         add        rdi, qword [rdx+0x28]
0000000000003850         mov        qword [rdx+0x20], rsi
0000000000003854         mov        qword [rdx+0x28], rdi
0000000000003858         cmp        r10, qword [rax+0x10]
000000000000385c         jl         loc_3ad5

0000000000003862         jg         loc_3872

0000000000003864         mov        r11d, dword [rax+0x18]
0000000000003868         cmp        dword [rdx+0x38], r11d
000000000000386c         js         loc_3ad5

                     loc_3872:
0000000000003872         xor        r11d, r11d                                  ; CODE XREF=main+3602, main+4243
0000000000003875         add        rsi, qword [rax+0x20]
0000000000003879         setb       r11b
000000000000387d         test       r11, r11
0000000000003880         mov        r11, 0xffffffffffffffff
0000000000003887         cmovne     rsi, r11
000000000000388b         add        rdi, qword [rax+0x28]
000000000000388f         mov        qword [rdx+0x20], rsi
0000000000003893         mov        qword [rdx+0x28], rdi
0000000000003897         cmp        r10, qword [rax+0x30]
000000000000389b         jl         loc_38af

000000000000389d         jg         loc_3300

00000000000038a3         mov        esi, dword [rax+0x38]
00000000000038a6         cmp        dword [rdx+0x38], esi
00000000000038a9         jns        loc_3300

                     loc_38af:
00000000000038af         movdqu     xmm0, xmmword [rax+0x30]                    ; CODE XREF=main+3659
00000000000038b4         movups     xmmword [rdx+0x30], xmm0
00000000000038b8         jmp        loc_3300

                     loc_38bd:
00000000000038bd         mov        rdx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+1335
00000000000038c4         lea        rsi, qword [aUpper+4]                       ; 0x22817
00000000000038cb         mov        rdi, r13
00000000000038ce         call       freopen_safer                               ; freopen_safer
00000000000038d3         test       rax, rax
00000000000038d6         jne        loc_2f8d

00000000000038dc         mov        rsi, r13
00000000000038df         mov        edi, 0x4
00000000000038e4         call       quotearg_style                              ; quotearg_style
00000000000038e9         lea        rsi, qword [aCannotOpenSFor]                ; argument "msgid" for method j_dcgettext, "cannot open %s for reading"
00000000000038f0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038f5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038f7         mov        rbp, rax
00000000000038fa         call       j_dcgettext                                 ; dcgettext
00000000000038ff         mov        rbx, rax
0000000000003902         call       j___errno_location                          ; __errno_location
0000000000003907         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003909         mov        rcx, rbp
000000000000390c         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000390f         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003914         xor        eax, eax
0000000000003916         call       j_error                                     ; error

                     loc_391b:
000000000000391b         call       rpl_fclose                                  ; rpl_fclose, CODE XREF=main+2950
0000000000003920         test       eax, eax
0000000000003922         jne        loc_35dc

0000000000003928         jmp        loc_35e7

                     loc_392d:
000000000000392d         lea        rsi, qword [aFtscloseFailed]                ; argument "msgid" for method j_dcgettext, "fts_close failed", CODE XREF=main+3248
0000000000003934         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003939         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000393b         xor        r14d, r14d
000000000000393e         call       j_dcgettext                                 ; dcgettext
0000000000003943         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000003945         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003948         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000394a         xor        eax, eax
000000000000394c         call       j_error                                     ; error
0000000000003951         jmp        loc_3706

                     loc_3956:
0000000000003956         mov        rax, qword [rsp+0x168+var_158]              ; CODE XREF=main+3219
000000000000395b         mov        esi, 0x3
0000000000003960         xor        edi, edi
0000000000003962         xor        r14d, r14d
0000000000003965         mov        rdx, qword [rax+0x20]
0000000000003969         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000396e         lea        rsi, qword [aFtsreadFailedS]                ; argument "msgid" for method j_dcgettext, "fts_read failed: %s"
0000000000003975         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000397a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000397c         mov        rbp, rax
000000000000397f         call       j_dcgettext                                 ; dcgettext
0000000000003984         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000003986         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003989         mov        rcx, rbp
000000000000398c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000398e         xor        eax, eax
0000000000003990         call       j_error                                     ; error
0000000000003995         jmp        loc_36e9

                     loc_399a:
000000000000399a         mov        rsi, r13                                    ; CODE XREF=main+1705
000000000000399d         mov        edi, 0x4
00000000000039a2         xor        r12d, r12d
00000000000039a5         call       quotearg_style                              ; quotearg_style
00000000000039aa         lea        rsi, qword [aCannotAccessS]                 ; argument "msgid" for method j_dcgettext, "cannot access %s"
00000000000039b1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000039b6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000039b8         mov        rbx, rax
00000000000039bb         call       j_dcgettext                                 ; dcgettext
00000000000039c0         mov        esi, dword [r14+0x40]                       ; argument "__errnum" for method j_error
00000000000039c4         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000039c7         mov        rcx, rbx
00000000000039ca         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000039cc         xor        eax, eax
00000000000039ce         call       j_error                                     ; error
00000000000039d3         jmp        loc_3400

                     loc_39d8:
00000000000039d8         lea        rsi, qword [aWarningSummari_20da8]          ; argument "msgid" for method j_dcgettext, "warning: summarizing is the same as using --max-depth=0", CODE XREF=main+3310
00000000000039df         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000039e1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000039e6         call       j_dcgettext                                 ; dcgettext
00000000000039eb         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000039ed         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000039f0         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000039f2         xor        eax, eax
00000000000039f4         call       j_error                                     ; error
00000000000039f9         mov        rbx, qword [max_depth]                      ; max_depth
0000000000003a00         test       rbx, rbx
0000000000003a03         jne        loc_3744

                     loc_3a09:
0000000000003a09         mov        qword [max_depth], 0x0                      ; max_depth, CODE XREF=main+5159
0000000000003a14         jmp        loc_2f09

                     loc_3a19:
0000000000003a19         lea        rsi, qword [aWarningOptions]                ; argument "msgid" for method j_dcgettext, "warning: options --apparent-size and -b are ineffective with --inodes", CODE XREF=main+1225
0000000000003a20         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a22         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a27         call       j_dcgettext                                 ; dcgettext
0000000000003a2c         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003a2e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003a31         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003a33         xor        eax, eax
0000000000003a35         call       j_error                                     ; error
0000000000003a3a         jmp        loc_2f1f

                     loc_3a3f:
0000000000003a3f         mov        rbx, qword [rsp+0x168+var_158]              ; CODE XREF=main+1742
0000000000003a44         mov        edx, 0x4
0000000000003a49         mov        rsi, r14
0000000000003a4c         mov        rdi, rbx
0000000000003a4f         call       rpl_fts_set                                 ; rpl_fts_set
0000000000003a54         mov        rdi, rbx
0000000000003a57         call       rpl_fts_read                                ; rpl_fts_read
0000000000003a5c         cmp        r14, rax
0000000000003a5f         je         loc_3124

0000000000003a65         lea        rcx, qword [__PRETTY_FUNCTION__.7293]       ; argument "__function" for method j___assert_fail, "process_file"
0000000000003a6c         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/du.c"
0000000000003a73         lea        rdi, qword [aEEnt]                          ; argument "__assertion" for method j___assert_fail, "e == ent"
0000000000003a7a         mov        edx, 0x22f                                  ; argument "__line" for method j___assert_fail
0000000000003a7f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_3a84:
0000000000003a84         mov        rcx, qword [r14+0xc0]                       ; CODE XREF=main+2752
0000000000003a8b         mov        r9, qword [r14+0xc8]
0000000000003a92         jmp        loc_31cc

                     loc_3a97:
0000000000003a97         cmp        r12d, eax                                   ; CODE XREF=main+1303
0000000000003a9a         lea        rdi, qword [rsp+0x168+var_E8]
0000000000003aa2         jle        loc_3aa9

0000000000003aa4         lea        rdi, qword [rbp+rax*8]

                     loc_3aa9:
0000000000003aa9         call       argv_iter_init_argv                         ; argv_iter_init_argv, CODE XREF=main+4178
0000000000003aae         mov        r15, rax
0000000000003ab1         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000003ab7         add        eax, 0x1
0000000000003aba         cmp        eax, r12d
0000000000003abd         setl       al
0000000000003ac0         cmp        dword [rsp+0x168+var_150], 0x2
0000000000003ac5         sete       dl
0000000000003ac8         or         eax, edx
0000000000003aca         mov        byte [hash_all], al                         ; hash_all
0000000000003ad0         jmp        loc_2fa3

                     loc_3ad5:
0000000000003ad5         movdqu     xmm0, xmmword [rax+0x10]                    ; CODE XREF=main+3596, main+3612
0000000000003ada         movq       r10, xmm0
0000000000003adf         movups     xmmword [rdx+0x30], xmm0
0000000000003ae3         jmp        loc_3872

                     loc_3ae8:
0000000000003ae8         movdqu     xmm0, xmmword [rax+0x10]                    ; CODE XREF=main+3502, main+3514
0000000000003aed         movaps     xmmword [rsp+0x168+var_F8], xmm0
0000000000003af2         jmp        loc_3810

                     loc_3af7:
0000000000003af7         lea        r15, qword [aLongiso]                       ; "long-iso", CODE XREF=main+4529, main+4552
0000000000003afe         mov        qword [time_style], r15                     ; time_style

                     loc_3b05:
0000000000003b05         mov        r9, qword [argmatch_die]                    ; argmatch_die, CODE XREF=main+1276
0000000000003b0c         lea        rdx, qword [time_style_args]                ; time_style_args
0000000000003b13         lea        rcx, qword [time_style_types]               ; time_style_types
0000000000003b1a         lea        rdi, qword [aTimeStyle]                     ; "time style"
0000000000003b21         mov        r8d, 0x4
0000000000003b27         mov        rsi, r15
0000000000003b2a         call       __xargmatch_internal                        ; __xargmatch_internal
0000000000003b2f         lea        rdx, qword [time_style_types]               ; time_style_types
0000000000003b36         mov        eax, dword [rdx+rax*4]
0000000000003b39         cmp        eax, 0x1
0000000000003b3c         je         loc_3d38

0000000000003b42         jb         loc_3d25

0000000000003b48         cmp        eax, 0x2
0000000000003b4b         jne        loc_2f5d

0000000000003b51         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000003b58         mov        qword [time_format], rax                    ; time_format
0000000000003b5f         jmp        loc_2f5d

                     loc_3b64:
0000000000003b64         xor        r10d, r10d                                  ; CODE XREF=main+3527
0000000000003b67         add        rsi, qword [rax+0x20]
0000000000003b6b         mov        r11, 0xffffffffffffffff
0000000000003b72         setb       r10b
0000000000003b76         test       r10, r10
0000000000003b79         cmovne     rsi, r11
0000000000003b7d         add        rdi, qword [rax+0x28]
0000000000003b81         mov        qword [rsp+0x168+var_108], rsi
0000000000003b86         mov        qword [rsp+0x168+var_100], rdi
0000000000003b8b         mov        rsi, qword [rax+0x30]
0000000000003b8f         cmp        qword [rsp+0x168+var_F8], rsi
0000000000003b94         jl         loc_3ba9

0000000000003b96         jg         loc_381d

0000000000003b9c         mov        esi, dword [rax+0x38]
0000000000003b9f         cmp        dword [rsp+0x168+var_F0], esi
0000000000003ba3         jns        loc_381d

                     loc_3ba9:
0000000000003ba9         movdqu     xmm0, xmmword [rax+0x30]                    ; CODE XREF=main+4420
0000000000003bae         movaps     xmmword [rsp+0x168+var_F8], xmm0
0000000000003bb3         jmp        loc_381d

                     loc_3bb8:
0000000000003bb8         mov        rbx, qword [rsp+0x168+var_158]              ; CODE XREF=main+1680
0000000000003bbd         mov        edx, 0x1
0000000000003bc2         mov        rsi, r14
0000000000003bc5         mov        rdi, rbx
0000000000003bc8         call       rpl_fts_set                                 ; rpl_fts_set
0000000000003bcd         mov        rdi, rbx
0000000000003bd0         call       rpl_fts_read                                ; rpl_fts_read
0000000000003bd5         cmp        r14, rax
0000000000003bd8         jne        loc_3ecd

0000000000003bde         movzx      ebp, word [r14+0x70]
0000000000003be3         jmp        loc_30e6

                     loc_3be8:
0000000000003be8         lea        rdi, qword [aTimestyle]                     ; argument "__name" for method j_getenv, "TIME_STYLE", CODE XREF=main+1259
0000000000003bef         call       j_getenv                                    ; getenv
0000000000003bf4         test       rax, rax
0000000000003bf7         mov        r15, rax
0000000000003bfa         mov        qword [time_style], rax                     ; time_style
0000000000003c01         je         loc_3af7

0000000000003c07         lea        rsi, qword [aUsrlocalsharel+17]             ; argument "__s2" for method j_strcmp, 0x1fb4e
0000000000003c0e         mov        rdi, rax                                    ; argument "__s1" for method j_strcmp
0000000000003c11         call       j_strcmp                                    ; strcmp
0000000000003c16         test       eax, eax
0000000000003c18         je         loc_3af7

0000000000003c1e         cmp        byte [r15], 0x2b
0000000000003c22         lea        rbx, qword [posix_prefix.7365]              ; "posix-"
0000000000003c29         jne        loc_3c3b

0000000000003c2b         jmp        loc_3d4b

                     loc_3c30:
0000000000003c30         add        r15, 0x6                                    ; CODE XREF=main+4612
0000000000003c34         mov        qword [time_style], r15                     ; time_style

                     loc_3c3b:
0000000000003c3b         mov        r15, qword [time_style]                     ; time_style, CODE XREF=main+4569
0000000000003c42         mov        edx, 0x6                                    ; argument "__n" for method j_strncmp
0000000000003c47         mov        rsi, rbx                                    ; argument "__s2" for method j_strncmp
0000000000003c4a         mov        rdi, r15                                    ; argument "__s1" for method j_strncmp
0000000000003c4d         call       j_strncmp                                   ; strncmp
0000000000003c52         test       eax, eax
0000000000003c54         je         loc_3c30

0000000000003c56         jmp        loc_2f48

                     loc_3c5b:
0000000000003c5b         xor        edi, edi                                    ; case 1, argument #1 for method usage, CODE XREF=main+316
0000000000003c5d         call       usage                                       ; usage

                     loc_3c62:
0000000000003c62         mov        rdx, r13                                    ; CODE XREF=main+1864
0000000000003c65         xor        edi, edi
0000000000003c67         mov        esi, 0x3
0000000000003c6c         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003c71         mov        esi, dword [r14+0x40]                       ; argument "__errnum" for method j_error
0000000000003c75         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x21490
0000000000003c7c         mov        rcx, rax
0000000000003c7f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003c81         xor        eax, eax
0000000000003c83         call       j_error                                     ; error
0000000000003c88         jmp        loc_31b0

                     loc_3c8d:
0000000000003c8d         mov        rdi, qword [rsp+0x168+var_158]              ; CODE XREF=main+1855
0000000000003c92         mov        rsi, r14
0000000000003c95         call       cycle_warning_required                      ; cycle_warning_required
0000000000003c9a         test       al, al
0000000000003c9c         je         loc_3124

0000000000003ca2         cmp        qword [di_mnt], 0x0                         ; di_mnt
0000000000003caa         mov        rbp, qword [r14]
0000000000003cad         jne        loc_3cd7

0000000000003caf         jmp        loc_3d69

                     loc_3cb4:
0000000000003cb4         mov        rdx, qword [r14+0x80]                       ; CODE XREF=main+4757
0000000000003cbb         mov        rsi, qword [r14+0x78]
0000000000003cbf         mov        rdi, qword [di_mnt]                         ; di_mnt
0000000000003cc6         call       di_set_lookup                               ; di_set_lookup
0000000000003ccb         test       eax, eax
0000000000003ccd         jg         loc_3124

0000000000003cd3         mov        r14, qword [r14+8]

                     loc_3cd7:
0000000000003cd7         test       r14, r14                                    ; CODE XREF=main+4701, main+4937
0000000000003cda         setne      al
0000000000003cdd         cmp        rbp, r14
0000000000003ce0         setne      dl
0000000000003ce3         and        al, dl
0000000000003ce5         jne        loc_3cb4

0000000000003ce7         mov        rdx, r13
0000000000003cea         xor        edi, edi
0000000000003cec         mov        esi, 0x3
0000000000003cf1         mov        r12d, eax
0000000000003cf4         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003cf9         lea        rsi, qword [aWarningCircula]                ; argument "msgid" for method j_dcgettext, "WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n"
0000000000003d00         mov        rbx, rax
0000000000003d03         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003d05         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003d0a         call       j_dcgettext                                 ; dcgettext
0000000000003d0f         mov        rcx, rbx
0000000000003d12         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003d15         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003d17         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003d19         xor        eax, eax
0000000000003d1b         call       j_error                                     ; error
0000000000003d20         jmp        loc_3400

                     loc_3d25:
0000000000003d25         lea        rax, qword [aYmdHmsnZ]                      ; "%Y-%m-%d %H:%M:%S.%N %z", CODE XREF=main+4338
0000000000003d2c         mov        qword [time_format], rax                    ; time_format
0000000000003d33         jmp        loc_2f5d

                     loc_3d38:
0000000000003d38         lea        rax, qword [aYmdHm]                         ; "%Y-%m-%d %H:%M", CODE XREF=main+4332
0000000000003d3f         mov        qword [time_format], rax                    ; time_format
0000000000003d46         jmp        loc_2f5d

                     loc_3d4b:
0000000000003d4b         mov        esi, 0xa                                    ; argument "__c" for method j_strchr, CODE XREF=main+4571
0000000000003d50         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000003d53         call       j_strchr                                    ; strchr
0000000000003d58         test       rax, rax
0000000000003d5b         je         loc_2f52

0000000000003d61         mov        byte [rax], 0x0
0000000000003d64         jmp        loc_2f48

                     loc_3d69:
0000000000003d69         call       di_set_alloc                                ; di_set_alloc, CODE XREF=main+4703
0000000000003d6e         test       rax, rax
0000000000003d71         mov        qword [di_mnt], rax                         ; di_mnt
0000000000003d78         je         loc_3ddf

0000000000003d7a         xor        edi, edi
0000000000003d7c         call       read_file_system_list                       ; read_file_system_list
0000000000003d81         mov        r12, rax
0000000000003d84         jmp        loc_3d96

                     loc_3d86:
0000000000003d86         mov        rbx, qword [r12+0x30]                       ; CODE XREF=main+4949, main+4973, main+5005
0000000000003d8b         mov        rdi, r12
0000000000003d8e         call       free_mount_entry                            ; free_mount_entry
0000000000003d93         mov        r12, rbx

                     loc_3d96:
0000000000003d96         test       r12, r12                                    ; CODE XREF=main+4916
0000000000003d99         je         loc_3cd7

0000000000003d9f         test       byte [r12+0x28], 0x3
0000000000003da5         jne        loc_3d86

0000000000003da7         mov        rsi, qword [r12+8]                          ; argument "__filename" for method j___xstat
0000000000003dac         mov        rdx, qword [rsp+0x168+var_120]              ; argument "__stat_buf" for method j___xstat
0000000000003db1         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000003db6         call       j___xstat                                   ; __xstat
0000000000003dbb         test       eax, eax
0000000000003dbd         jne        loc_3d86

0000000000003dbf         mov        rdx, qword [rsp+0x168+var_D0]
0000000000003dc7         mov        rsi, qword [rsp+0x168+var_D8]
0000000000003dcf         mov        rdi, qword [di_mnt]                         ; di_mnt
0000000000003dd6         call       di_set_insert                               ; di_set_insert
0000000000003ddb         test       eax, eax
0000000000003ddd         jns        loc_3d86

                     loc_3ddf:
0000000000003ddf         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+1366, main+1387, main+1844, main+2060, main+2069, main+2784, main+4904
                        ; endp

                     loc_3de4:
0000000000003de4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+3038
                        ; endp

                     loc_3de9:
0000000000003de9         mov        rdi, qword [rbp+rax*8]                      ; argument #1 for method quote, CODE XREF=main+1312
0000000000003dee         call       quote                                       ; quote
0000000000003df3         lea        rsi, qword [aExtraOperandS]                 ; argument "msgid" for method j_dcgettext, "extra operand %s"
0000000000003dfa         mov        rbx, rax
0000000000003dfd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003e02         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003e04         call       j_dcgettext                                 ; dcgettext
0000000000003e09         mov        rcx, rbx
0000000000003e0c         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003e0f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003e11         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003e13         xor        eax, eax
0000000000003e15         call       j_error                                     ; error
0000000000003e1a         lea        rsi, qword [aFileOperandsCa]                ; argument "msgid" for method j_dcgettext, "file operands cannot be combined with --files0-from"
0000000000003e21         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003e26         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003e28         call       j_dcgettext                                 ; dcgettext
0000000000003e2d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003e34         lea        rdx, qword [aSSSn+8]                        ; 0x21f90
0000000000003e3b         mov        rcx, rax
0000000000003e3e         mov        esi, 0x1
0000000000003e43         xor        eax, eax
0000000000003e45         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003e4a         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000003e4f         call       usage                                       ; usage

                     loc_3e54:
0000000000003e54         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5, CODE XREF=main+360
0000000000003e5b         mov        esi, dword [rsp+0x168+var_10C]
0000000000003e5f         lea        rcx, qword [long_options]                   ; long_options
0000000000003e66         mov        edx, 0x74
0000000000003e6b         mov        edi, eax
0000000000003e6d         call       xstrtol_fatal                               ; xstrtol_fatal

                     loc_3e72:
0000000000003e72         cmp        byte [rsp+0x168+var_14C], 0x0               ; CODE XREF=main+3283
0000000000003e77         jne        loc_3a09

0000000000003e7d         jmp        loc_2f09

                     loc_3e82:
0000000000003e82         mov        rsi, r13                                    ; CODE XREF=main+2961
0000000000003e85         mov        edi, 0x4
0000000000003e8a         call       quotearg_style                              ; quotearg_style
0000000000003e8f         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000003e96         mov        rbx, rax
0000000000003e99         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003e9e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ea0         call       j_dcgettext                                 ; dcgettext
0000000000003ea5         mov        rcx, rbx
0000000000003ea8         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003eab         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003ead         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003eb2         xor        eax, eax
0000000000003eb4         call       j_error                                     ; error

                     loc_3eb9:
0000000000003eb9         mov        esi, 0x1                                    ; CODE XREF=main+2041
0000000000003ebe         jmp        loc_324f

                     loc_3ec3:
0000000000003ec3         mov        edi, 0x1                                    ; CODE XREF=main+3552
0000000000003ec8         jmp        loc_3836

                     loc_3ecd:
0000000000003ecd         lea        rcx, qword [__PRETTY_FUNCTION__.7293]       ; argument "__function" for method j___assert_fail, "process_file", CODE XREF=main+4488
0000000000003ed4         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/du.c"
0000000000003edb         lea        rdi, qword [aEEnt]                          ; argument "__assertion" for method j___assert_fail, "e == ent"
0000000000003ee2         mov        edx, 0x20e                                  ; argument "__line" for method j___assert_fail
0000000000003ee7         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_3eec:
0000000000003eec         lea        rcx, qword [__PRETTY_FUNCTION__.7293]       ; argument "__function" for method j___assert_fail, "process_file", CODE XREF=main+3434
0000000000003ef3         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/du.c"
0000000000003efa         lea        rdi, qword [aLevelPrevlevel]                ; argument "__assertion" for method j___assert_fail, "level == prev_level - 1"
0000000000003f01         mov        edx, 0x27d                                  ; argument "__line" for method j___assert_fail
0000000000003f06         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_3f0b:
0000000000003f0b         lea        rsi, qword [aCannotBothSumm]                ; argument "msgid" for method j_dcgettext, "cannot both summarize and show all entries", CODE XREF=main+1203
0000000000003f12         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f17         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f19         call       j_dcgettext                                 ; dcgettext
0000000000003f1e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003f20         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003f23         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003f25         xor        eax, eax
0000000000003f27         call       j_error                                     ; error

                     loc_3f2c:
0000000000003f2c         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+1179
0000000000003f31         call       usage                                       ; usage
0000000000003f36         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x23b10)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000003f40         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x23a14)
0000000000003f42         mov        r9, rdx
0000000000003f45         pop        rsi
0000000000003f46         mov        rdx, rsp
0000000000003f49         and        rsp, 0xfffffffffffffff0
0000000000003f4d         push       rax
0000000000003f4e         push       rsp
0000000000003f4f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000003f56         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000003f5d         lea        rdi, qword [main]                           ; main
0000000000003f64         call       qword [qword_227fd8+8]                      ; 0x227fe0
0000000000003f6a         hlt
                        ; endp
0000000000003f6b         align      16                                          ; End of unwind block (FDE at 0x23a14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000003f70         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000003f77         push       rbp
0000000000003f78         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000003f7f         cmp        rax, rdi
0000000000003f82         mov        rbp, rsp
0000000000003f85         je         loc_3fa0

0000000000003f87         mov        rax, qword [qword_227fd0]                   ; qword_227fd0
0000000000003f8e         test       rax, rax
0000000000003f91         je         loc_3fa0

0000000000003f93         pop        rbp
0000000000003f94         jmp        rax
                        ; endp
0000000000003f96         align      32

                     loc_3fa0:
0000000000003fa0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000003fa1         ret
                        ; endp
0000000000003fa2         align      16

                     register_tm_clones:
0000000000003fb0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000003fb7         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000003fbe         push       rbp
0000000000003fbf         sub        rsi, rdi
0000000000003fc2         mov        rbp, rsp
0000000000003fc5         sar        rsi, 0x3
0000000000003fc9         mov        rax, rsi
0000000000003fcc         shr        rax, 0x3f
0000000000003fd0         add        rsi, rax
0000000000003fd3         sar        rsi, 0x1
0000000000003fd6         je         loc_3ff0

0000000000003fd8         mov        rax, qword [qword_227ff0]                   ; qword_227ff0
0000000000003fdf         test       rax, rax
0000000000003fe2         je         loc_3ff0

0000000000003fe4         pop        rbp
0000000000003fe5         jmp        rax
                        ; endp
0000000000003fe7         align      16

                     loc_3ff0:
0000000000003ff0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000003ff1         ret
                        ; endp
0000000000003ff2         align      16384


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000004000         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=main+1802, sub_acc0+88, fts_stat+182, rpl_fts_read+1473, peek_token+1361, __do_global_dtors_aux_fini_array_entry
0000000000004007         jne        loc_4038

0000000000004009         cmp        qword [qword_227ff8], 0x0                   ; qword_227ff8
0000000000004011         push       rbp
0000000000004012         mov        rbp, rsp
0000000000004015         je         loc_4023

0000000000004017         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000401e         call       j_qword_227ff8                              ; qword_227ff8

                     loc_4023:
0000000000004023         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000004028         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000402f         pop        rbp
0000000000004030         ret
                        ; endp
0000000000004031         align      8

                     loc_4038:
0000000000004038         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000403a         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000004040         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000004041         mov        rbp, rsp
0000000000004044         pop        rbp
0000000000004045         jmp        register_tm_clones                          ; register_tm_clones
000000000000404a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     print_only_size:
0000000000004050         push       rbx                                         ; Begin of unwind block (FDE at 0x23a84), CODE XREF=print_size+47
0000000000004051         sub        rsp, 0x2a0
0000000000004058         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000405f         mov        rax, qword [fs:0x28]
0000000000004068         mov        qword [rsp+0x2a8+var_10], rax
0000000000004070         xor        eax, eax
0000000000004072         cmp        rdi, 0xffffffffffffffff
0000000000004076         je         loc_40c0

0000000000004078         mov        r8, qword [output_block_size]               ; output_block_size
000000000000407f         mov        edx, dword [human_output_opts]              ; human_output_opts
0000000000004085         mov        rsi, rsp
0000000000004088         mov        ecx, 0x1
000000000000408d         call       human_readable                              ; human_readable

                     loc_4092:
0000000000004092         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked, CODE XREF=print_only_size+131
0000000000004095         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004098         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000409d         mov        rax, qword [rsp+0x2a8+var_10]
00000000000040a5         xor        rax, qword [fs:0x28]
00000000000040ae         jne        loc_40d5

00000000000040b0         add        rsp, 0x2a0
00000000000040b7         pop        rbx
00000000000040b8         ret
                        ; endp
00000000000040b9         align      64

                     loc_40c0:
00000000000040c0         lea        rsi, qword [aInfinity]                      ; argument "msgid" for method j_dcgettext, "Infinity", CODE XREF=print_only_size+38
00000000000040c7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000040cc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000040ce         call       j_dcgettext                                 ; dcgettext
00000000000040d3         jmp        loc_4092

                     loc_40d5:
00000000000040d5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_only_size+94
                        ; endp
00000000000040da         align      32                                          ; End of unwind block (FDE at 0x23a84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_48: int8_t, -72
        ;    var_88: int8_t, -136
        ;    var_90: int32_t, -144
        ;    var_98: int64_t, -152


                     print_size:
00000000000040e0         push       r13                                         ; Begin of unwind block (FDE at 0x23aa8), CODE XREF=main+2466, main+3005
00000000000040e2         push       r12
00000000000040e4         push       rbp
00000000000040e5         push       rbx
00000000000040e6         mov        rbx, rdi
00000000000040e9         mov        rbp, rsi
00000000000040ec         sub        rsp, 0x78
00000000000040f0         mov        rdi, qword [rdi+8]
00000000000040f4         mov        rax, qword [fs:0x28]
00000000000040fd         mov        qword [rsp+0x98+var_30], rax
0000000000004102         xor        eax, eax
0000000000004104         cmp        byte [opt_inodes], 0x0                      ; opt_inodes
000000000000410b         cmove      rdi, qword [rbx]
000000000000410f         call       print_only_size                             ; print_only_size
0000000000004114         cmp        byte [opt_time], 0x0                        ; opt_time
000000000000411b         je         loc_4186

000000000000411d         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004124         mov        rax, qword [rdi+0x28]
0000000000004128         cmp        rax, qword [rdi+0x30]
000000000000412c         jae        loc_41d0

0000000000004132         lea        rdx, qword [rax+1]
0000000000004136         mov        qword [rdi+0x28], rdx
000000000000413a         mov        byte [rax], 0x9

                     loc_413d:
000000000000413d         mov        r12, qword [localtz]                        ; localtz, CODE XREF=print_size+250
0000000000004144         mov        rsi, rsp
0000000000004147         mov        r13, qword [time_format]                    ; time_format
000000000000414e         movdqa     xmm0, xmmword [rbx+0x10]
0000000000004153         lea        rbx, qword [rsp+0x98+var_88]
0000000000004158         mov        rdi, r12
000000000000415b         mov        rdx, rbx
000000000000415e         movaps     xmmword [rsp+0x98+var_98], xmm0
0000000000004162         call       localtime_rz                                ; localtime_rz
0000000000004167         test       rax, rax
000000000000416a         je         loc_41e0

000000000000416c         mov        r8d, dword [rsp+0x98+var_90]
0000000000004171         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004178         mov        rcx, r12
000000000000417b         mov        rdx, rbx
000000000000417e         mov        rsi, r13
0000000000004181         call       fprintftime                                 ; fprintftime

                     loc_4186:
0000000000004186         cmp        byte [opt_nul_terminate_output], 0x1        ; opt_nul_terminate_output, CODE XREF=print_size+59, print_size+335
000000000000418d         lea        rsi, qword [aTsc]                           ; "\\t%s%c"
0000000000004194         mov        rdx, rbp
0000000000004197         mov        edi, 0x1
000000000000419c         sbb        ecx, ecx
000000000000419e         xor        eax, eax
00000000000041a0         and        ecx, 0xa
00000000000041a3         call       j___printf_chk                              ; __printf_chk
00000000000041a8         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fflush_unlocked, stdout@@GLIBC_2.2.5
00000000000041af         call       j_fflush_unlocked                           ; fflush_unlocked
00000000000041b4         mov        rax, qword [rsp+0x98+var_30]
00000000000041b9         xor        rax, qword [fs:0x28]
00000000000041c2         jne        loc_4234

00000000000041c4         add        rsp, 0x78
00000000000041c8         pop        rbx
00000000000041c9         pop        rbp
00000000000041ca         pop        r12
00000000000041cc         pop        r13
00000000000041ce         ret
                        ; endp
00000000000041cf         align      16

                     loc_41d0:
00000000000041d0         mov        esi, 0x9                                    ; argument #2 for method j___overflow, CODE XREF=print_size+76
00000000000041d5         call       j___overflow                                ; __overflow
00000000000041da         jmp        loc_413d
00000000000041df         align      32

                     loc_41e0:
00000000000041e0         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=print_size+138
00000000000041e4         lea        rsi, qword [rsp+0x98+var_48]
00000000000041e9         call       imaxtostr                                   ; imaxtostr
00000000000041ee         mov        rdi, rax
00000000000041f1         mov        rbx, rax
00000000000041f4         call       quote                                       ; quote
00000000000041f9         lea        rsi, qword [aTimeSIsOutOfRa]                ; argument "msgid" for method j_dcgettext, "time %s is out of range"
0000000000004200         mov        r12, rax
0000000000004203         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004205         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000420a         call       j_dcgettext                                 ; dcgettext
000000000000420f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004211         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004214         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004216         mov        rcx, r12
0000000000004219         xor        eax, eax
000000000000421b         call       j_error                                     ; error
0000000000004220         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000004227         mov        rdi, rbx                                    ; argument "__s" for method j_fputs_unlocked
000000000000422a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000422f         jmp        loc_4186

                     loc_4234:
0000000000004234         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_size+226
                        ; endp
0000000000004239         align      64                                          ; End of unwind block (FDE at 0x23aa8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000004240         push       r13                                         ; Begin of unwind block (FDE at 0x23ae4), CODE XREF=main+3357, main+4621, main+5119, main+5345, __argmatch_die+5
0000000000004242         push       r12
0000000000004244         mov        edx, 0x5
0000000000004249         push       rbp
000000000000424a         push       rbx
000000000000424b         mov        ebp, edi
000000000000424d         sub        rsp, 0x88
0000000000004254         mov        rbx, qword [program_name]                   ; program_name
000000000000425b         mov        rax, qword [fs:0x28]
0000000000004264         mov        qword [rsp+0xa8+var_30], rax
0000000000004269         xor        eax, eax
000000000000426b         test       edi, edi
000000000000426d         je         loc_429d

000000000000426f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000004276         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004278         call       j_dcgettext                                 ; dcgettext
000000000000427d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004284         mov        rdx, rax
0000000000004287         mov        rcx, rbx
000000000000428a         mov        esi, 0x1
000000000000428f         xor        eax, eax
0000000000004291         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4296:
0000000000004296         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1014
0000000000004298         call       j_exit                                      ; exit
                        ; endp

                     loc_429d:
000000000000429d         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n  or:  %s [OPTION]... --files0-from=F\\n", CODE XREF=usage+45
00000000000042a4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042a6         call       j_dcgettext                                 ; dcgettext
00000000000042ab         mov        rcx, rbx
00000000000042ae         mov        rdx, rbx
00000000000042b1         mov        rsi, rax
00000000000042b4         mov        edi, 0x1
00000000000042b9         xor        eax, eax
00000000000042bb         call       j___printf_chk                              ; __printf_chk
00000000000042c0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000042c7         lea        rsi, qword [aSummarizeDiskU]                ; argument "msgid" for method j_dcgettext, "Summarize disk usage of the set of FILEs, recursively for directories.\\n"
00000000000042ce         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042d3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042d5         call       j_dcgettext                                 ; dcgettext
00000000000042da         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000042dd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000042e0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000042e5         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000042ec         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
00000000000042f3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042f8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042fa         call       j_dcgettext                                 ; dcgettext
00000000000042ff         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004302         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004305         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000430a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004311         lea        rsi, qword [a0NullEndEachOu]                ; argument "msgid" for method j_dcgettext, "  -0, --null            end each output line with NUL, not newline\\n  -a, --all             write counts for all files, not just directories\\n      --apparent-size   print apparent sizes, rather than disk usage; although\\n                          the apparen…"
0000000000004318         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000431d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000431f         call       j_dcgettext                                 ; dcgettext
0000000000004324         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004327         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000432a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000432f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004336         lea        rsi, qword [aBBlocksizesize]                ; argument "msgid" for method j_dcgettext, "  -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\\n                           '-BM' prints sizes in units of 1,048,576 bytes;\\n                           see SIZE format below\\n  -b, --bytes           equivalent to '--apparent-size --bl…"
000000000000433d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004342         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004344         call       j_dcgettext                                 ; dcgettext
0000000000004349         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000434c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000434f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004354         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000435b         lea        rsi, qword [aFiles0fromfSum]                ; argument "msgid" for method j_dcgettext, "      --files0-from=F   summarize disk usage of the\\n                          NUL-terminated file names specified in file F;\\n                          if F is -, then read names from standard input\\n  -H                    equivalent to --dereference-args (…"
0000000000004362         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004367         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004369         call       j_dcgettext                                 ; dcgettext
000000000000436e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004371         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004374         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004379         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004380         lea        rsi, qword [aKLikeBlocksize]                ; argument "msgid" for method j_dcgettext, "  -k                    like --block-size=1K\\n  -L, --dereference     dereference all symbolic links\\n  -l, --count-links     count sizes many times if hard linked\\n  -m                    like --block-size=1M\\n"
0000000000004387         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000438c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000438e         call       j_dcgettext                                 ; dcgettext
0000000000004393         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004396         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004399         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000439e         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000043a5         lea        rsi, qword [aPNodereference]                ; argument "msgid" for method j_dcgettext, "  -P, --no-dereference  don't follow any symbolic links (this is the default)\\n  -S, --separate-dirs   for directories do not include size of subdirectories\\n      --si              like -h, but use powers of 1000 not 1024\\n  -s, --summarize       display onl…"
00000000000043ac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000043b1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000043b3         call       j_dcgettext                                 ; dcgettext
00000000000043b8         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000043bb         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000043be         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000043c3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000043ca         lea        rsi, qword [aTThresholdsize]                ; argument "msgid" for method j_dcgettext, "  -t, --threshold=SIZE  exclude entries smaller than SIZE if positive,\\n                          or entries greater than SIZE if negative\\n      --time            show time of the last modification of any file in the\\n                          directory, or …"
00000000000043d1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000043d6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000043d8         call       j_dcgettext                                 ; dcgettext
00000000000043dd         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000043e0         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000043e3         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000043e8         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000043ef         lea        rsi, qword [aXExcludefromfi]                ; argument "msgid" for method j_dcgettext, "  -X, --exclude-from=FILE  exclude files that match any pattern in FILE\\n      --exclude=PATTERN    exclude files that match PATTERN\\n  -x, --one-file-system    skip directories on different file systems\\n"
00000000000043f6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000043fb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000043fd         call       j_dcgettext                                 ; dcgettext
0000000000004402         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004405         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004408         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000440d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004414         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
000000000000441b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004420         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004422         call       j_dcgettext                                 ; dcgettext
0000000000004427         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000442a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000442d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004432         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004439         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000004440         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004445         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004447         call       j_dcgettext                                 ; dcgettext
000000000000444c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000444f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004452         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004457         lea        rsi, qword [aNdisplayValues]                ; argument "msgid" for method j_dcgettext, "\\nDisplay values are in units of the first available SIZE from --block-size,\\nand the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\nOtherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n"
000000000000445e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004463         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004465         call       j_dcgettext                                 ; dcgettext
000000000000446a         lea        rdx, qword [aTsc+9]                         ; 0x1fa8e
0000000000004471         mov        rsi, rax
0000000000004474         mov        edi, 0x1
0000000000004479         xor        eax, eax
000000000000447b         call       j___printf_chk                              ; __printf_chk
0000000000004480         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004487         lea        rsi, qword [aNtheSizeArgume]                ; argument "msgid" for method j_dcgettext, "\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\\n"
000000000000448e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004493         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004495         call       j_dcgettext                                 ; dcgettext
000000000000449a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000449d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000044a0         lea        rbx, qword [aTsc+6]                         ; 0x1fa8b
00000000000044a7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000044ac         lea        rax, qword [aTsc+12]                        ; 0x1fa91
00000000000044b3         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000044ba         mov        qword [rsp+0xa8+var_48], 0x0
00000000000044c3         mov        qword [rsp+0xa8+var_40], 0x0
00000000000044cc         mov        rdx, rsp
00000000000044cf         mov        qword [rsp+0xa8+var_A8], rax
00000000000044d3         lea        rax, qword [aTestInvocation]                ; "test invocation"
00000000000044da         mov        qword [rsp+0xa8+var_78], rcx
00000000000044df         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
00000000000044e6         mov        qword [rsp+0xa8+var_A0], rax
00000000000044eb         lea        rax, qword [aCoreutils]                     ; "coreutils"
00000000000044f2         mov        qword [rsp+0xa8+var_68], rcx
00000000000044f7         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
00000000000044fe         mov        qword [rsp+0xa8+var_98], rax
0000000000004503         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
000000000000450a         mov        qword [rsp+0xa8+var_58], rcx
000000000000450f         mov        qword [rsp+0xa8+var_90], rax
0000000000004514         lea        rax, qword [aSha224sum]                     ; "sha224sum"
000000000000451b         mov        qword [rsp+0xa8+var_88], rax
0000000000004520         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000004527         mov        qword [rsp+0xa8+var_80], rax
000000000000452c         mov        qword [rsp+0xa8+var_70], rax
0000000000004531         mov        qword [rsp+0xa8+var_60], rax
0000000000004536         mov        qword [rsp+0xa8+var_50], rax
000000000000453b         nop        dword [rax+rax]

                     loc_4540:
0000000000004540         add        rdx, 0x10                                   ; CODE XREF=usage+797
0000000000004544         mov        rdi, qword [rdx]
0000000000004547         test       rdi, rdi
000000000000454a         je         loc_455f

000000000000454c         mov        ecx, 0x3
0000000000004551         mov        rsi, rbx
0000000000004554         rep  cmpsb byte [rsi], byte [rdi]
0000000000004556         seta       al
0000000000004559         sbb        al, 0x0
000000000000455b         test       al, al
000000000000455d         jne        loc_4540

                     loc_455f:
000000000000455f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+778
0000000000004563         xor        edi, edi
0000000000004565         mov        edx, 0x5
000000000000456a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000004571         test       r12, r12
0000000000004574         je         loc_463b

000000000000457a         call       j_dcgettext                                 ; dcgettext
000000000000457f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004586         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1fb07
000000000000458d         mov        rsi, rax
0000000000004590         mov        edi, 0x1
0000000000004595         xor        eax, eax
0000000000004597         call       j___printf_chk                              ; __printf_chk
000000000000459c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000459e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000045a3         call       j_setlocale                                 ; setlocale
00000000000045a8         test       rax, rax
00000000000045ab         je         loc_45c9

00000000000045ad         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x1fb15
00000000000045b4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000045b9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000045bc         call       j_strncmp                                   ; strncmp
00000000000045c1         test       eax, eax
00000000000045c3         jne        loc_46d0

                     loc_45c9:
00000000000045c9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+875, usage+1205
00000000000045d0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000045d2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000045d7         call       j_dcgettext                                 ; dcgettext
00000000000045dc         lea        rcx, qword [aTsc+6]                         ; 0x1fa8b
00000000000045e3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000045ea         mov        rsi, rax
00000000000045ed         mov        edi, 0x1
00000000000045f2         xor        eax, eax
00000000000045f4         call       j___printf_chk                              ; __printf_chk
00000000000045f9         cmp        r12, rbx
00000000000045fc         lea        rcx, qword [aMulticallInvoc+10]             ; 0x1faad
0000000000004603         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x21fe1
000000000000460a         cmove      rbx, rcx

                     loc_460e:
000000000000460e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1156
0000000000004615         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004617         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000461c         call       j_dcgettext                                 ; dcgettext
0000000000004621         mov        rcx, rbx
0000000000004624         mov        rsi, rax
0000000000004627         mov        rdx, r12
000000000000462a         mov        edi, 0x1
000000000000462f         xor        eax, eax
0000000000004631         call       j___printf_chk                              ; __printf_chk
0000000000004636         jmp        loc_4296

                     loc_463b:
000000000000463b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+820
0000000000004640         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004647         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1fb07
000000000000464e         mov        rsi, rax
0000000000004651         mov        edi, 0x1
0000000000004656         xor        eax, eax
0000000000004658         call       j___printf_chk                              ; __printf_chk
000000000000465d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000465f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000004664         call       j_setlocale                                 ; setlocale
0000000000004669         test       rax, rax
000000000000466c         je         loc_4686

000000000000466e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x1fb15
0000000000004675         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
000000000000467a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000467d         call       j_strncmp                                   ; strncmp
0000000000004682         test       eax, eax
0000000000004684         jne        loc_46c9

                     loc_4686:
0000000000004686         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1068
000000000000468d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004692         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004694         lea        r12, qword [aTsc+6]                         ; 0x1fa8b
000000000000469b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x1faad
00000000000046a2         call       j_dcgettext                                 ; dcgettext
00000000000046a7         lea        rcx, qword [aTsc+6]                         ; 0x1fa8b
00000000000046ae         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000046b5         mov        rsi, rax
00000000000046b8         mov        edi, 0x1
00000000000046bd         xor        eax, eax
00000000000046bf         call       j___printf_chk                              ; __printf_chk
00000000000046c4         jmp        loc_460e

                     loc_46c9:
00000000000046c9         lea        r12, qword [aTsc+6]                         ; 0x1fa8b, CODE XREF=usage+1092

                     loc_46d0:
00000000000046d0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+899
00000000000046d7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000046de         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000046e0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000046e5         call       j_dcgettext                                 ; dcgettext
00000000000046ea         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000046ed         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000046f0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000046f5         jmp        loc_45c9
00000000000046fa         align      256                                         ; End of unwind block (FDE at 0x23ae4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
0000000000004700         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0x23b74), argument #1 for method usage, DATA XREF=argmatch_die
0000000000004705         jmp        usage                                       ; usage
                        ; endp
000000000000470a         align      16                                          ; End of unwind block (FDE at 0x23b74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000004710         push       r15                                         ; Begin of unwind block (FDE at 0x23b88), CODE XREF=__xargmatch_internal+44, human_options+82
0000000000004712         push       r14
0000000000004714         mov        r15, rsi
0000000000004717         push       r13
0000000000004719         push       r12
000000000000471b         mov        r13, rcx
000000000000471e         push       rbp
000000000000471f         push       rbx
0000000000004720         mov        rbp, rdx
0000000000004723         sub        rsp, 0x28
0000000000004727         mov        qword [rsp+0x58+var_50], rdi
000000000000472c         mov        qword [rsp+0x58+var_40], rdx
0000000000004731         call       j_strlen                                    ; strlen
0000000000004736         mov        r14, qword [r15]
0000000000004739         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
0000000000004741         test       r14, r14
0000000000004744         je         loc_47fd

000000000000474a         mov        r12, rax
000000000000474d         mov        byte [rsp+0x58+var_41], 0x0
0000000000004752         xor        ebx, ebx
0000000000004754         jmp        loc_47a7
0000000000004756         align      32

                     loc_4760:
0000000000004760         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
0000000000004765         test       rax, rax
0000000000004768         je         loc_4810

000000000000476e         mov        rdi, qword [rsp+0x58+var_58]
0000000000004772         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
0000000000004775         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000004778         imul       rdi, r13
000000000000477c         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000477f         call       j_memcmp                                    ; memcmp
0000000000004784         test       eax, eax
0000000000004786         movzx      eax, byte [rsp+0x58+var_41]
000000000000478b         mov        ecx, 0x1
0000000000004790         cmovne     eax, ecx
0000000000004793         mov        byte [rsp+0x58+var_41], al

                     loc_4797:
0000000000004797         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000479b         add        rbp, r13
000000000000479e         mov        r14, qword [r15+rbx*8]
00000000000047a2         test       r14, r14
00000000000047a5         je         loc_47e8

                     loc_47a7:
00000000000047a7         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
00000000000047ac         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
00000000000047af         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
00000000000047b2         call       j_strncmp                                   ; strncmp
00000000000047b7         test       eax, eax
00000000000047b9         jne        loc_4797

00000000000047bb         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000047be         call       j_strlen                                    ; strlen
00000000000047c3         cmp        rax, r12
00000000000047c6         je         loc_4820

00000000000047c8         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000047cd         jne        loc_4760

00000000000047cf         mov        qword [rsp+0x58+var_58], rbx
00000000000047d3         add        rbx, 0x1
00000000000047d7         add        rbp, r13
00000000000047da         mov        r14, qword [r15+rbx*8]
00000000000047de         test       r14, r14
00000000000047e1         jne        loc_47a7

00000000000047e3         nop        dword [rax+rax]

                     loc_47e8:
00000000000047e8         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
00000000000047ed         mov        rax, 0xfffffffffffffffe
00000000000047f4         cmove      rax, qword [rsp+0x58+var_58]
00000000000047f9         mov        qword [rsp+0x58+var_58], rax

                     loc_47fd:
00000000000047fd         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
0000000000004801         add        rsp, 0x28
0000000000004805         pop        rbx
0000000000004806         pop        rbp
0000000000004807         pop        r12
0000000000004809         pop        r13
000000000000480b         pop        r14
000000000000480d         pop        r15
000000000000480f         ret
                        ; endp

                     loc_4810:
0000000000004810         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000004815         jmp        loc_4797
0000000000004817         align      32

                     loc_4820:
0000000000004820         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000004824         jmp        loc_47fd
0000000000004826         align      16                                          ; End of unwind block (FDE at 0x23b88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000004830         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0x23bd4), CODE XREF=__xargmatch_internal+78
0000000000004834         push       r12
0000000000004836         mov        edx, 0x5
000000000000483b         push       rbp
000000000000483c         mov        r12, rsi
000000000000483f         push       rbx
0000000000004840         mov        rbp, rdi
0000000000004843         je         loc_4890

0000000000004845         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
000000000000484c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000484e         call       j_dcgettext                                 ; dcgettext
0000000000004853         mov        rbx, rax

                     loc_4856:
0000000000004856         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
0000000000004859         mov        edi, 0x1
000000000000485e         call       quote_n                                     ; quote_n
0000000000004863         mov        rdx, r12
0000000000004866         mov        rbp, rax
0000000000004869         mov        esi, 0x8
000000000000486e         xor        edi, edi
0000000000004870         call       quotearg_n_style                            ; quotearg_n_style
0000000000004875         mov        r8, rbp
0000000000004878         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000487b         mov        rcx, rax
000000000000487e         pop        rbx
000000000000487f         pop        rbp
0000000000004880         pop        r12
0000000000004882         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004884         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004886         xor        eax, eax
0000000000004888         jmp        j_error                                     ; error
                        ; endp
000000000000488d         align      16

                     loc_4890:
0000000000004890         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000004897         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004899         call       j_dcgettext                                 ; dcgettext
000000000000489e         mov        rbx, rax
00000000000048a1         jmp        loc_4856
00000000000048a3         align      16                                          ; End of unwind block (FDE at 0x23bd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
00000000000048b0         push       r15                                         ; Begin of unwind block (FDE at 0x23c00), CODE XREF=__xargmatch_internal+92
00000000000048b2         push       r14
00000000000048b4         mov        r14, rdi
00000000000048b7         push       r13
00000000000048b9         push       r12
00000000000048bb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000048bd         push       rbp
00000000000048be         push       rbx
00000000000048bf         mov        rbp, rsi
00000000000048c2         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
00000000000048c9         mov        r12, rdx
00000000000048cc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000048d1         sub        rsp, 0x8
00000000000048d5         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000048dc         call       j_dcgettext                                 ; dcgettext
00000000000048e1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000048e4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000048e7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000048ec         mov        r15, qword [r14]
00000000000048ef         test       r15, r15
00000000000048f2         je         loc_4988

00000000000048f8         xor        r13d, r13d
00000000000048fb         xor        ebx, ebx
00000000000048fd         jmp        loc_4938
00000000000048ff         align      256

                     loc_4900:
0000000000004900         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000004903         add        rbx, 0x1
0000000000004907         mov        r13, rbp
000000000000490a         call       quote                                       ; quote
000000000000490f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004916         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000491d         mov        rcx, rax
0000000000004920         mov        esi, 0x1
0000000000004925         xor        eax, eax
0000000000004927         add        rbp, r12
000000000000492a         call       j___fprintf_chk                             ; __fprintf_chk
000000000000492f         mov        r15, qword [r14+rbx*8]
0000000000004933         test       r15, r15
0000000000004936         je         loc_4988

                     loc_4938:
0000000000004938         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000000493b         je         loc_4900

000000000000493d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
0000000000004940         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000004943         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000004946         call       j_memcmp                                    ; memcmp
000000000000494b         test       eax, eax
000000000000494d         jne        loc_4900

000000000000494f         mov        rdi, r15
0000000000004952         add        rbx, 0x1
0000000000004956         add        rbp, r12
0000000000004959         call       quote                                       ; quote
000000000000495e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004965         lea        rdx, qword [aNS+8]                          ; 0x2148e
000000000000496c         mov        rcx, rax
000000000000496f         mov        esi, 0x1
0000000000004974         xor        eax, eax
0000000000004976         call       j___fprintf_chk                             ; __fprintf_chk
000000000000497b         mov        r15, qword [r14+rbx*8]
000000000000497f         test       r15, r15
0000000000004982         jne        loc_4938

0000000000004984         nop        dword [rax]

                     loc_4988:
0000000000004988         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
000000000000498f         mov        rax, qword [rdi+0x28]
0000000000004993         cmp        rax, qword [rdi+0x30]
0000000000004997         jae        loc_49b8

0000000000004999         lea        rdx, qword [rax+1]
000000000000499d         mov        qword [rdi+0x28], rdx
00000000000049a1         mov        byte [rax], 0xa
00000000000049a4         add        rsp, 0x8
00000000000049a8         pop        rbx
00000000000049a9         pop        rbp
00000000000049aa         pop        r12
00000000000049ac         pop        r13
00000000000049ae         pop        r14
00000000000049b0         pop        r15
00000000000049b2         ret
                        ; endp
00000000000049b3         align      8

                     loc_49b8:
00000000000049b8         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
00000000000049bc         mov        esi, 0xa                                    ; argument #2 for method j___overflow
00000000000049c1         pop        rbx
00000000000049c2         pop        rbp
00000000000049c3         pop        r12
00000000000049c5         pop        r13
00000000000049c7         pop        r14
00000000000049c9         pop        r15
00000000000049cb         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
00000000000049d0         push       r15                                         ; End of unwind block (FDE at 0x23c00), Begin of unwind block (FDE at 0x23c60), CODE XREF=main+1032, main+4314
00000000000049d2         push       r14
00000000000049d4         mov        r14, rdi
00000000000049d7         push       r13
00000000000049d9         push       r12
00000000000049db         mov        r12, rsi
00000000000049de         push       rbp
00000000000049df         push       rbx
00000000000049e0         mov        rbp, rcx
00000000000049e3         mov        rbx, rdx
00000000000049e6         mov        rcx, r8
00000000000049e9         mov        rdx, rbp
00000000000049ec         sub        rsp, 0x8
00000000000049f0         mov        rsi, rbx
00000000000049f3         mov        rdi, r12
00000000000049f6         mov        r15, r8
00000000000049f9         mov        r13, r9
00000000000049fc         call       argmatch                                    ; argmatch
0000000000004a01         test       rax, rax
0000000000004a04         js         loc_4a15

                     loc_4a06:
0000000000004a06         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
0000000000004a0a         pop        rbx
0000000000004a0b         pop        rbp
0000000000004a0c         pop        r12
0000000000004a0e         pop        r13
0000000000004a10         pop        r14
0000000000004a12         pop        r15
0000000000004a14         ret
                        ; endp

                     loc_4a15:
0000000000004a15         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000004a18         mov        rsi, r12
0000000000004a1b         mov        rdi, r14
0000000000004a1e         call       argmatch_invalid                            ; argmatch_invalid
0000000000004a23         mov        rdx, r15
0000000000004a26         mov        rsi, rbp
0000000000004a29         mov        rdi, rbx
0000000000004a2c         call       argmatch_valid                              ; argmatch_valid
0000000000004a31         call       r13
0000000000004a34         mov        rax, 0xffffffffffffffff
0000000000004a3b         jmp        loc_4a06
0000000000004a3d         align      64                                          ; End of unwind block (FDE at 0x23c60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000004a40         push       r14                                         ; Begin of unwind block (FDE at 0x23cac)
0000000000004a42         push       r13
0000000000004a44         push       r12
0000000000004a46         push       rbp
0000000000004a47         push       rbx
0000000000004a48         mov        r14, qword [rsi]
0000000000004a4b         test       r14, r14
0000000000004a4e         je         loc_4a81

0000000000004a50         mov        r12, rcx
0000000000004a53         mov        r13, rdi
0000000000004a56         mov        rbp, rdx
0000000000004a59         lea        rbx, qword [rsi+8]
0000000000004a5d         jmp        loc_4a6f
0000000000004a5f         align      32

                     loc_4a60:
0000000000004a60         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000004a63         add        rbp, r12
0000000000004a66         add        rbx, 0x8
0000000000004a6a         test       r14, r14
0000000000004a6d         je         loc_4a81

                     loc_4a6f:
0000000000004a6f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000004a72         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000004a75         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000004a78         call       j_memcmp                                    ; memcmp
0000000000004a7d         test       eax, eax
0000000000004a7f         jne        loc_4a60

                     loc_4a81:
0000000000004a81         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000004a82         mov        rax, r14
0000000000004a85         pop        rbp
0000000000004a86         pop        r12
0000000000004a88         pop        r13
0000000000004a8a         pop        r14
0000000000004a8c         ret
                        ; endp
0000000000004a8d         align      16                                          ; End of unwind block (FDE at 0x23cac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argv_iter_init_argv:
0000000000004a90         push       rbx                                         ; Begin of unwind block (FDE at 0x23cec), CODE XREF=main+4185
0000000000004a91         mov        rbx, rdi
0000000000004a94         mov        edi, 0x30                                   ; argument "__size" for method j_malloc
0000000000004a99         call       j_malloc                                    ; malloc
0000000000004a9e         test       rax, rax
0000000000004aa1         je         loc_4ab2

0000000000004aa3         mov        qword [rax], 0x0
0000000000004aaa         mov        qword [rax+0x20], rbx
0000000000004aae         mov        qword [rax+0x28], rbx

                     loc_4ab2:
0000000000004ab2         pop        rbx                                         ; CODE XREF=argv_iter_init_argv+17
0000000000004ab3         ret
                        ; endp
0000000000004ab4         align      64                                          ; End of unwind block (FDE at 0x23cec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argv_iter_init_stream:
0000000000004ac0         push       rbx                                         ; Begin of unwind block (FDE at 0x23d08), CODE XREF=main+1348
0000000000004ac1         mov        rbx, rdi
0000000000004ac4         mov        edi, 0x30                                   ; argument "__size" for method j_malloc
0000000000004ac9         call       j_malloc                                    ; malloc
0000000000004ace         test       rax, rax
0000000000004ad1         je         loc_4af6

0000000000004ad3         mov        qword [rax], rbx
0000000000004ad6         mov        qword [rax+0x10], 0x0
0000000000004ade         mov        qword [rax+0x18], 0x0
0000000000004ae6         mov        qword [rax+8], 0x0
0000000000004aee         mov        qword [rax+0x20], 0x0

                     loc_4af6:
0000000000004af6         pop        rbx                                         ; CODE XREF=argv_iter_init_stream+17
0000000000004af7         ret
                        ; endp
0000000000004af8         align      256                                         ; End of unwind block (FDE at 0x23d08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argv_iter:
0000000000004b00         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0x23d24), CODE XREF=main+1462
0000000000004b03         test       rcx, rcx
0000000000004b06         je         loc_4b40

0000000000004b08         push       rbp
0000000000004b09         push       rbx
0000000000004b0a         mov        rbp, rsi
0000000000004b0d         mov        rbx, rdi
0000000000004b10         lea        rsi, qword [rdi+0x18]                       ; argument "__n" for method j_getdelim
0000000000004b14         lea        rdi, qword [rdi+0x10]                       ; argument "__lineptr" for method j_getdelim
0000000000004b18         sub        rsp, 0x8
0000000000004b1c         xor        edx, edx                                    ; argument "__delimiter" for method j_getdelim
0000000000004b1e         call       j_getdelim                                  ; getdelim
0000000000004b23         test       rax, rax
0000000000004b26         js         loc_4b70

0000000000004b28         mov        dword [rbp], 0x1
0000000000004b2f         add        qword [rbx+8], 0x1
0000000000004b34         mov        rax, qword [rbx+0x10]

                     loc_4b38:
0000000000004b38         add        rsp, 0x8                                    ; CODE XREF=argv_iter+136
0000000000004b3c         pop        rbx
0000000000004b3d         pop        rbp
0000000000004b3e         ret
                        ; endp
0000000000004b3f         align      64

                     loc_4b40:
0000000000004b40         mov        rdx, qword [rdi+0x28]                       ; CODE XREF=argv_iter+6
0000000000004b44         mov        rax, qword [rdx]
0000000000004b47         test       rax, rax
0000000000004b4a         je         loc_4b60

0000000000004b4c         add        rdx, 0x8
0000000000004b50         mov        dword [rsi], 0x1
0000000000004b56         mov        qword [rdi+0x28], rdx
0000000000004b5a         ret
                        ; endp
0000000000004b5b         align      32

                     loc_4b60:
0000000000004b60         mov        dword [rsi], 0x2                            ; CODE XREF=argv_iter+74
0000000000004b66         ret
                        ; endp
0000000000004b67         align      16

                     loc_4b70:
0000000000004b70         mov        rdi, qword [rbx]                            ; argument "__stream" for method j_feof, CODE XREF=argv_iter+38
0000000000004b73         call       j_feof                                      ; feof
0000000000004b78         cmp        eax, 0x1
0000000000004b7b         sbb        eax, eax
0000000000004b7d         and        eax, 0x2
0000000000004b80         add        eax, 0x2
0000000000004b83         mov        dword [rbp], eax
0000000000004b86         xor        eax, eax
0000000000004b88         jmp        loc_4b38
0000000000004b8a         align      16                                          ; End of unwind block (FDE at 0x23d24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argv_iter_n_args:
0000000000004b90         cmp        qword [rdi], 0x0                            ; Begin of unwind block (FDE at 0x23d58), CODE XREF=main+2571
0000000000004b94         je         loc_4ba0

0000000000004b96         mov        rax, qword [rdi+8]
0000000000004b9a         ret
                        ; endp
0000000000004b9b         align      32

                     loc_4ba0:
0000000000004ba0         mov        rax, qword [rdi+0x28]                       ; CODE XREF=argv_iter_n_args+4
0000000000004ba4         sub        rax, qword [rdi+0x20]
0000000000004ba8         sar        rax, 0x3
0000000000004bac         ret
                        ; endp
0000000000004bad         align      16                                          ; End of unwind block (FDE at 0x23d58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argv_iter_free:
0000000000004bb0         push       rbx                                         ; Begin of unwind block (FDE at 0x23d6c), CODE XREF=main+2901
0000000000004bb1         cmp        qword [rdi], 0x0
0000000000004bb5         mov        rbx, rdi
0000000000004bb8         je         loc_4bc3

0000000000004bba         mov        rdi, qword [rdi+0x10]
0000000000004bbe         call       sub_2a10                                    ; sub_2a10

                     loc_4bc3:
0000000000004bc3         mov        rdi, rbx                                    ; CODE XREF=argv_iter_free+8
0000000000004bc6         pop        rbx
0000000000004bc7         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000004bcc         align      16                                          ; End of unwind block (FDE at 0x23d6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000004bd0         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x23d8c), file_name
0000000000004bd7         ret
                        ; endp
0000000000004bd8         align      32                                          ; End of unwind block (FDE at 0x23d8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000004be0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x23da0), ignore_EPIPE
0000000000004be7         ret
                        ; endp
0000000000004be8         align      16                                          ; End of unwind block (FDE at 0x23da0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000004bf0         push       rbp                                         ; Begin of unwind block (FDE at 0x23db4), DATA XREF=main+143
0000000000004bf1         push       rbx
0000000000004bf2         sub        rsp, 0x8
0000000000004bf6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004bfd         call       close_stream                                ; close_stream
0000000000004c02         test       eax, eax
0000000000004c04         je         loc_4c1c

0000000000004c06         call       j___errno_location                          ; __errno_location
0000000000004c0b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000004c12         mov        rbx, rax
0000000000004c15         je         loc_4c33

0000000000004c17         cmp        dword [rax], 0x20
0000000000004c1a         jne        loc_4c33

                     loc_4c1c:
0000000000004c1c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000004c23         call       close_stream                                ; close_stream
0000000000004c28         test       eax, eax
0000000000004c2a         jne        loc_4c72

0000000000004c2c         add        rsp, 0x8
0000000000004c30         pop        rbx
0000000000004c31         pop        rbp
0000000000004c32         ret
                        ; endp

                     loc_4c33:
0000000000004c33         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000004c3a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004c3c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004c41         call       j_dcgettext                                 ; dcgettext
0000000000004c46         mov        rdi, qword [file_name]                      ; file_name
0000000000004c4d         mov        rbp, rax
0000000000004c50         test       rdi, rdi
0000000000004c53         je         loc_4c7d

0000000000004c55         call       quotearg_colon                              ; quotearg_colon
0000000000004c5a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000004c5c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000004c63         mov        rcx, rax
0000000000004c66         mov        r8, rbp
0000000000004c69         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004c6b         xor        eax, eax
0000000000004c6d         call       j_error                                     ; error

                     loc_4c72:
0000000000004c72         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000004c78         call       j__exit                                     ; _exit
                        ; endp

                     loc_4c7d:
0000000000004c7d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000004c7f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x21490
0000000000004c86         mov        rcx, rax
0000000000004c89         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004c8b         xor        eax, eax
0000000000004c8d         call       j_error                                     ; error
0000000000004c92         jmp        loc_4c72
0000000000004c94         align      32                                          ; End of unwind block (FDE at 0x23db4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_ent_hash:
0000000000004ca0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x23de4), DATA XREF=di_set_alloc+33
0000000000004ca3         xor        edx, edx
0000000000004ca5         div        rsi
0000000000004ca8         mov        rax, rdx
0000000000004cab         ret
                        ; endp
0000000000004cac         align      16                                          ; End of unwind block (FDE at 0x23de4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_ent_compare:
0000000000004cb0         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0x23df8), DATA XREF=di_set_alloc+26
0000000000004cb3         cmp        qword [rdi], rax
0000000000004cb6         sete       al
0000000000004cb9         ret
                        ; endp
0000000000004cba         align      64                                          ; End of unwind block (FDE at 0x23df8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_ino_hash:
0000000000004cc0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x23e0c), DATA XREF=map_device.isra.0+136
0000000000004cc3         xor        edx, edx
0000000000004cc5         div        rsi
0000000000004cc8         mov        rax, rdx
0000000000004ccb         ret
                        ; endp
0000000000004ccc         align      16                                          ; End of unwind block (FDE at 0x23e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_ent_free:
0000000000004cd0         push       rbx                                         ; Begin of unwind block (FDE at 0x23e20), DATA XREF=di_set_alloc+19
0000000000004cd1         mov        rbx, rdi
0000000000004cd4         mov        rdi, qword [rdi+8]
0000000000004cd8         call       hash_free                                   ; hash_free
0000000000004cdd         mov        rdi, rbx
0000000000004ce0         pop        rbx
0000000000004ce1         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000004ce6         align      16                                          ; End of unwind block (FDE at 0x23e20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     map_device.isra.0:
0000000000004cf0         push       r12                                         ; Begin of unwind block (FDE at 0x23e3c), CODE XREF=di_set_insert+23, di_set_lookup+23
0000000000004cf2         push       rbp
0000000000004cf3         mov        r12, rdi
0000000000004cf6         push       rbx
0000000000004cf7         mov        rbp, rsi
0000000000004cfa         sub        rsp, 0x10
0000000000004cfe         mov        rbx, qword [rsi]
0000000000004d01         test       rbx, rbx
0000000000004d04         je         loc_4d48

0000000000004d06         cmp        qword [rbx], rdx
0000000000004d09         je         loc_4d38

                     loc_4d0b:
0000000000004d0b         mov        qword [rbx], rdx                            ; CODE XREF=map_device.isra.0+118
0000000000004d0e         mov        rsi, rbx
0000000000004d11         mov        rdi, r12
0000000000004d14         call       hash_insert                                 ; hash_insert
0000000000004d19         test       rax, rax
0000000000004d1c         je         loc_4d70

0000000000004d1e         cmp        rbx, rax
0000000000004d21         je         loc_4d78

0000000000004d23         mov        rax, qword [rax+8]
0000000000004d27         mov        qword [rbx+8], rax

                     loc_4d2b:
0000000000004d2b         add        rsp, 0x10                                   ; CODE XREF=map_device.isra.0+130
0000000000004d2f         pop        rbx
0000000000004d30         pop        rbp
0000000000004d31         pop        r12
0000000000004d33         ret
                        ; endp
0000000000004d34         align      8

                     loc_4d38:
0000000000004d38         mov        rax, qword [rbx+8]                          ; CODE XREF=map_device.isra.0+25
0000000000004d3c         add        rsp, 0x10
0000000000004d40         pop        rbx
0000000000004d41         pop        rbp
0000000000004d42         pop        r12
0000000000004d44         ret
                        ; endp
0000000000004d45         align      8

                     loc_4d48:
0000000000004d48         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=map_device.isra.0+20
0000000000004d4d         mov        qword [rsp+0x28+var_20], rdx
0000000000004d52         call       j_malloc                                    ; malloc
0000000000004d57         test       rax, rax
0000000000004d5a         mov        rbx, rax
0000000000004d5d         mov        qword [rbp], rax
0000000000004d61         mov        rdx, qword [rsp+0x28+var_20]
0000000000004d66         jne        loc_4d0b

0000000000004d68         nop        dword [rax+rax]

                     loc_4d70:
0000000000004d70         xor        eax, eax                                    ; CODE XREF=map_device.isra.0+44
0000000000004d72         jmp        loc_4d2b
0000000000004d74         align      8

                     loc_4d78:
0000000000004d78         lea        rdx, qword [di_ino_hash]                    ; di_ino_hash, CODE XREF=map_device.isra.0+49
0000000000004d7f         mov        qword [rbp], 0x0
0000000000004d87         xor        r8d, r8d
0000000000004d8a         xor        ecx, ecx
0000000000004d8c         xor        esi, esi
0000000000004d8e         mov        edi, 0x3fd
0000000000004d93         call       hash_initialize                             ; hash_initialize
0000000000004d98         mov        qword [rbx+8], rax
0000000000004d9c         add        rsp, 0x10
0000000000004da0         pop        rbx
0000000000004da1         pop        rbp
0000000000004da2         pop        r12
0000000000004da4         ret
                        ; endp
0000000000004da5         align      16                                          ; End of unwind block (FDE at 0x23e3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32


                     map_inode_number.isra.1:
0000000000004db0         lea        rdx, qword [rsi-1]                          ; Begin of unwind block (FDE at 0x23e8c), CODE XREF=di_set_insert+43, di_set_lookup+43
0000000000004db4         movabs     rax, 0x7ffffffffffffffd
0000000000004dbe         cmp        rdx, rax
0000000000004dc1         jbe        loc_4de0

0000000000004dc3         push       rbx
0000000000004dc4         mov        rbx, rdi
0000000000004dc7         sub        rsp, 0x10
0000000000004dcb         mov        rdi, qword [rdi]
0000000000004dce         test       rdi, rdi
0000000000004dd1         je         loc_4de8

                     loc_4dd3:
0000000000004dd3         add        rsp, 0x10                                   ; CODE XREF=map_inode_number.isra.1+90
0000000000004dd7         pop        rbx
0000000000004dd8         jmp        ino_map_insert                              ; ino_map_insert
0000000000004ddd         align      32

                     loc_4de0:
0000000000004de0         mov        rax, rsi                                    ; CODE XREF=map_inode_number.isra.1+17
0000000000004de3         ret
                        ; endp
0000000000004de4         align      8

                     loc_4de8:
0000000000004de8         movabs     rdi, 0x7fffffffffffffff                     ; CODE XREF=map_inode_number.isra.1+33
0000000000004df2         mov        qword [rsp+0x18+var_10], rsi
0000000000004df7         call       ino_map_alloc                               ; ino_map_alloc
0000000000004dfc         test       rax, rax
0000000000004dff         mov        rdi, rax
0000000000004e02         mov        qword [rbx], rax
0000000000004e05         mov        rsi, qword [rsp+0x18+var_10]
0000000000004e0a         jne        loc_4dd3

0000000000004e0c         add        rsp, 0x10
0000000000004e10         mov        rax, 0xffffffffffffffff
0000000000004e17         pop        rbx
0000000000004e18         ret
                        ; endp
0000000000004e19         align      32                                          ; End of unwind block (FDE at 0x23e8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_set_alloc:
0000000000004e20         push       rbx                                         ; Begin of unwind block (FDE at 0x23eb8), CODE XREF=main+1372, main+4889
0000000000004e21         mov        edi, 0x18                                   ; argument "__size" for method j_malloc
0000000000004e26         call       j_malloc                                    ; malloc
0000000000004e2b         test       rax, rax
0000000000004e2e         mov        rbx, rax
0000000000004e31         je         loc_4e6c

0000000000004e33         lea        r8, qword [di_ent_free]                     ; di_ent_free
0000000000004e3a         lea        rcx, qword [di_ent_compare]                 ; di_ent_compare
0000000000004e41         lea        rdx, qword [di_ent_hash]                    ; di_ent_hash
0000000000004e48         xor        esi, esi
0000000000004e4a         mov        edi, 0xb
0000000000004e4f         call       hash_initialize                             ; hash_initialize
0000000000004e54         test       rax, rax
0000000000004e57         mov        qword [rbx], rax
0000000000004e5a         je         loc_4e78

0000000000004e5c         mov        qword [rbx+8], 0x0
0000000000004e64         mov        qword [rbx+0x10], 0x0

                     loc_4e6c:
0000000000004e6c         mov        rax, rbx                                    ; CODE XREF=di_set_alloc+17, di_set_alloc+98
0000000000004e6f         pop        rbx
0000000000004e70         ret
                        ; endp
0000000000004e71         align      8

                     loc_4e78:
0000000000004e78         mov        rdi, rbx                                    ; CODE XREF=di_set_alloc+58
0000000000004e7b         xor        ebx, ebx
0000000000004e7d         call       sub_2a10                                    ; sub_2a10
0000000000004e82         jmp        loc_4e6c
0000000000004e84         align      16                                          ; End of unwind block (FDE at 0x23eb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_set_free:
0000000000004e90         push       rbx                                         ; Begin of unwind block (FDE at 0x23ed8), CODE XREF=main+2913, main+2930
0000000000004e91         mov        rbx, rdi
0000000000004e94         mov        rdi, qword [rdi]
0000000000004e97         call       hash_free                                   ; hash_free
0000000000004e9c         mov        rdi, qword [rbx+8]
0000000000004ea0         call       sub_2a10                                    ; sub_2a10
0000000000004ea5         mov        rdi, qword [rbx+0x10]
0000000000004ea9         call       sub_2a10                                    ; sub_2a10
0000000000004eae         mov        rdi, rbx
0000000000004eb1         pop        rbx
0000000000004eb2         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000004eb7         align      64                                          ; End of unwind block (FDE at 0x23ed8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_set_insert:
0000000000004ec0         push       r12                                         ; Begin of unwind block (FDE at 0x23ef4), CODE XREF=main+1837, main+4998
0000000000004ec2         mov        rax, rsi
0000000000004ec5         push       rbp
0000000000004ec6         lea        rsi, qword [rdi+0x10]
0000000000004eca         push       rbx
0000000000004ecb         mov        rbx, rdi
0000000000004ece         mov        rdi, qword [rdi]
0000000000004ed1         mov        r12, rdx
0000000000004ed4         mov        rdx, rax
0000000000004ed7         call       map_device.isra.0                           ; map_device.isra.0
0000000000004edc         test       rax, rax
0000000000004edf         je         loc_4f10

0000000000004ee1         lea        rdi, qword [rbx+8]
0000000000004ee5         mov        rsi, r12
0000000000004ee8         mov        rbp, rax
0000000000004eeb         call       map_inode_number.isra.1                     ; map_inode_number.isra.1
0000000000004ef0         cmp        rax, 0xffffffffffffffff
0000000000004ef4         je         loc_4f10

0000000000004ef6         pop        rbx
0000000000004ef7         mov        rdi, rbp
0000000000004efa         xor        edx, edx
0000000000004efc         mov        rsi, rax
0000000000004eff         pop        rbp
0000000000004f00         pop        r12
0000000000004f02         jmp        hash_insert_if_absent                       ; hash_insert_if_absent
                        ; endp
0000000000004f07         align      16

                     loc_4f10:
0000000000004f10         pop        rbx                                         ; CODE XREF=di_set_insert+31, di_set_insert+52
0000000000004f11         mov        eax, 0xffffffff
0000000000004f16         pop        rbp
0000000000004f17         pop        r12
0000000000004f19         ret
                        ; endp
0000000000004f1a         align      32                                          ; End of unwind block (FDE at 0x23ef4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     di_set_lookup:
0000000000004f20         push       r12                                         ; Begin of unwind block (FDE at 0x23f2c), CODE XREF=main+4726
0000000000004f22         mov        rax, rsi
0000000000004f25         push       rbp
0000000000004f26         lea        rsi, qword [rdi+0x10]
0000000000004f2a         push       rbx
0000000000004f2b         mov        rbx, rdi
0000000000004f2e         mov        rdi, qword [rdi]
0000000000004f31         mov        r12, rdx
0000000000004f34         mov        rdx, rax
0000000000004f37         call       map_device.isra.0                           ; map_device.isra.0
0000000000004f3c         test       rax, rax
0000000000004f3f         je         loc_4f70

0000000000004f41         lea        rdi, qword [rbx+8]
0000000000004f45         mov        rsi, r12
0000000000004f48         mov        rbp, rax
0000000000004f4b         call       map_inode_number.isra.1                     ; map_inode_number.isra.1
0000000000004f50         cmp        rax, 0xffffffffffffffff
0000000000004f54         je         loc_4f70

0000000000004f56         mov        rsi, rax
0000000000004f59         mov        rdi, rbp
0000000000004f5c         call       hash_lookup                                 ; hash_lookup
0000000000004f61         test       rax, rax
0000000000004f64         setne      al
0000000000004f67         movzx      eax, al

                     loc_4f6a:
0000000000004f6a         pop        rbx                                         ; CODE XREF=di_set_lookup+85
0000000000004f6b         pop        rbp
0000000000004f6c         pop        r12
0000000000004f6e         ret
                        ; endp
0000000000004f6f         align      16

                     loc_4f70:
0000000000004f70         mov        eax, 0xffffffff                             ; CODE XREF=di_set_lookup+31, di_set_lookup+52
0000000000004f75         jmp        loc_4f6a
0000000000004f77         align      128                                         ; End of unwind block (FDE at 0x23f2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     call_addfn:
0000000000004f80         jmp        qword [rcx]                                 ; Begin of unwind block (FDE at 0x23f5c), DATA XREF=add_exclude_file+60, add_exclude_file+130
                        ; endp
0000000000004f82         align      16                                          ; End of unwind block (FDE at 0x23f5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     string_free:
0000000000004f90         jmp        sub_2a10                                    ; sub_2a10, Begin of unwind block (FDE at 0x23f70), DATA XREF=add_exclude+321
                        ; endp
0000000000004f95         align      32                                          ; End of unwind block (FDE at 0x23f70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     string_compare_ci:
0000000000004fa0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x23f84), DATA XREF=add_exclude+282
0000000000004fa4         call       mbscasecmp                                  ; mbscasecmp
0000000000004fa9         test       eax, eax
0000000000004fab         sete       al
0000000000004fae         add        rsp, 0x8
0000000000004fb2         ret
                        ; endp
0000000000004fb3         align      64                                          ; End of unwind block (FDE at 0x23f84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     string_compare:
0000000000004fc0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x23f9c), DATA XREF=add_exclude+302
0000000000004fc4         call       j_strcmp                                    ; strcmp
0000000000004fc9         test       eax, eax
0000000000004fcb         sete       al
0000000000004fce         add        rsp, 0x8
0000000000004fd2         ret
                        ; endp
0000000000004fd3         align      32                                          ; End of unwind block (FDE at 0x23f9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     string_hasher:
0000000000004fe0         jmp        hash_string                                 ; hash_string, Begin of unwind block (FDE at 0x23fb4), DATA XREF=add_exclude+332
0000000000004fe5         align      16                                          ; End of unwind block (FDE at 0x23fb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_1C: int32_t, -28


                     fnmatch_no_wildcards:
0000000000004ff0         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x23fc8), DATA XREF=exclude_fnmatch+19
0000000000004ff2         and        eax, 0x10
0000000000004ff5         and        edx, 0x8
0000000000004ff8         jne        loc_5008

0000000000004ffa         test       eax, eax
0000000000004ffc         je         j_j_strcmp                                  ; strcmp

0000000000004ffe         jmp        mbscasecmp                                  ; mbscasecmp
                        ; endp
0000000000005003         align      8

                     loc_5008:
0000000000005008         push       r12                                         ; CODE XREF=fnmatch_no_wildcards+8
000000000000500a         push       rbp
000000000000500b         mov        rbp, rdi
000000000000500e         push       rbx
000000000000500f         mov        rbx, rsi
0000000000005012         sub        rsp, 0x10
0000000000005016         test       eax, eax
0000000000005018         jne        loc_5058

000000000000501a         call       j_strlen                                    ; strlen
000000000000501f         mov        rsi, rbx                                    ; argument "__s2" for method j_strncmp
0000000000005022         mov        rdx, rax                                    ; argument "__n" for method j_strncmp
0000000000005025         mov        rdi, rbp                                    ; argument "__s1" for method j_strncmp
0000000000005028         mov        r12, rax
000000000000502b         call       j_strncmp                                   ; strncmp
0000000000005030         test       eax, eax
0000000000005032         jne        loc_503f

0000000000005034         movsx      edx, byte [rbx+r12]
0000000000005039         cmp        edx, 0x2f
000000000000503c         cmovne     eax, edx

                     loc_503f:
000000000000503f         add        rsp, 0x10                                   ; CODE XREF=fnmatch_no_wildcards+66
0000000000005043         pop        rbx
0000000000005044         pop        rbp
0000000000005045         pop        r12
0000000000005047         ret
                        ; endp
0000000000005048         align      16

                     j_j_strcmp:        // strcmp
0000000000005050         jmp        j_strcmp                                    ; strcmp, CODE XREF=fnmatch_no_wildcards+12
                        ; endp
0000000000005055         align      8

                     loc_5058:
0000000000005058         mov        rdi, rsi                                    ; CODE XREF=fnmatch_no_wildcards+40
000000000000505b         call       xstrdup                                     ; xstrdup
0000000000005060         mov        r12, rax
0000000000005063         mov        rdi, rax
0000000000005066         jmp        loc_5089
0000000000005068         align      16

                     loc_5070:
0000000000005070         mov        byte [rax], 0x0                             ; CODE XREF=j_j_strcmp+73
0000000000005073         mov        rsi, r12
0000000000005076         mov        rdi, rbp
0000000000005079         call       mbscasecmp                                  ; mbscasecmp
000000000000507e         test       eax, eax
0000000000005080         jle        loc_50a6

0000000000005082         lea        rdi, qword [rbx+1]
0000000000005086         mov        byte [rbx], 0x2f

                     loc_5089:
0000000000005089         mov        esi, 0x2f                                   ; argument "__c" for method j_strchr, CODE XREF=j_j_strcmp+22
000000000000508e         call       j_strchr                                    ; strchr
0000000000005093         test       rax, rax
0000000000005096         mov        rbx, rax
0000000000005099         jne        loc_5070

000000000000509b         mov        rsi, r12
000000000000509e         mov        rdi, rbp
00000000000050a1         call       mbscasecmp                                  ; mbscasecmp

                     loc_50a6:
00000000000050a6         mov        rdi, r12                                    ; CODE XREF=j_j_strcmp+48
00000000000050a9         mov        dword [rsp+0x28+var_1C], eax
00000000000050ad         call       sub_2a10                                    ; sub_2a10
00000000000050b2         mov        eax, dword [rsp+0x28+var_1C]
00000000000050b6         add        rsp, 0x10
00000000000050ba         pop        rbx
00000000000050bb         pop        rbp
00000000000050bc         pop        r12
00000000000050be         ret
                        ; endp
00000000000050bf         align      64                                          ; End of unwind block (FDE at 0x23fc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_54: int32_t, -84
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int8_t, -108
        ;    var_74: int64_t, -116
        ;    var_78: int8_t, -120
        ;    var_80: int64_t, -128


                     string_hasher_ci:
00000000000050c0         push       r15                                         ; Begin of unwind block (FDE at 0x24014), DATA XREF=add_exclude+314
00000000000050c2         push       r14
00000000000050c4         xor        r14d, r14d
00000000000050c7         push       r13
00000000000050c9         push       r12
00000000000050cb         lea        r12, qword [is_basic_table]                 ; is_basic_table
00000000000050d2         push       rbp
00000000000050d3         push       rbx
00000000000050d4         mov        rbx, rsi
00000000000050d7         sub        rsp, 0x68
00000000000050db         lea        rbp, qword [rsp+0x88+var_78]
00000000000050e0         mov        qword [rsp+0x88+var_68], rdi
00000000000050e5         mov        byte [rsp+0x88+var_78], 0x0
00000000000050ea         mov        rax, qword [fs:0x28]
00000000000050f3         mov        qword [rsp+0x88+var_30], rax
00000000000050f8         xor        eax, eax
00000000000050fa         lea        rax, qword [rbp+0x78+var_74]
00000000000050fe         mov        qword [rsp+0x88+var_74], 0x0
0000000000005107         mov        byte [rsp+0x88+var_6C], 0x0
000000000000510c         mov        qword [rsp+0x88+var_80], rax
0000000000005111         jmp        loc_5146
0000000000005113         align      8

                     loc_5118:
0000000000005118         mov        edi, r13d                                   ; argument "__wc" for method j_towlower, CODE XREF=string_hasher_ci+213
000000000000511b         call       j_towlower                                  ; towlower

                     loc_5120:
0000000000005120         mov        rdx, r14                                    ; CODE XREF=string_hasher_ci+219
0000000000005123         cdqe
0000000000005125         add        r15, qword [rsp+0x88+var_60]
000000000000512a         shl        rdx, 0x5
000000000000512e         mov        byte [rsp+0x88+var_6C], 0x0
0000000000005133         sub        rdx, r14
0000000000005136         add        rax, rdx
0000000000005139         xor        edx, edx
000000000000513b         div        rbx
000000000000513e         mov        qword [rsp+0x88+var_68], r15
0000000000005143         mov        r14, rdx

                     loc_5146:
0000000000005146         cmp        byte [rsp+0x88+var_78], 0x0                 ; CODE XREF=string_hasher_ci+81
000000000000514b         jne        loc_51b7

000000000000514d         mov        rcx, qword [rsp+0x88+var_68]
0000000000005152         movzx      edx, byte [rcx]
0000000000005155         mov        eax, edx
0000000000005157         shr        al, 0x5
000000000000515a         and        eax, 0x7
000000000000515d         mov        eax, dword [r12+rax*4]
0000000000005161         bt         eax, edx
0000000000005164         jae        loc_51a0

0000000000005166         mov        qword [rsp+0x88+var_60], 0x1
000000000000516f         movsx      r13d, byte [rcx]
0000000000005173         mov        byte [rsp+0x88+var_58], 0x1
0000000000005178         mov        byte [rsp+0x88+var_6C], 0x1
000000000000517d         mov        dword [rsp+0x88+var_54], r13d

                     loc_5182:
0000000000005182         test       r13d, r13d                                  ; CODE XREF=string_hasher_ci+525
0000000000005185         je         loc_5250

                     loc_518b:
000000000000518b         cmp        byte [rsp+0x88+var_58], 0x0                 ; CODE XREF=string_hasher_ci+393, string_hasher_ci+472, string_hasher_ci+510
0000000000005190         mov        r15, qword [rsp+0x88+var_68]
0000000000005195         jne        loc_5118

0000000000005197         movsx      eax, byte [r15]
000000000000519b         jmp        loc_5120
000000000000519d         align      32

                     loc_51a0:
00000000000051a0         mov        rdi, qword [rsp+0x88+var_80]                ; argument "__ps" for method j_mbsinit, CODE XREF=string_hasher_ci+164
00000000000051a5         call       j_mbsinit                                   ; mbsinit
00000000000051aa         test       eax, eax
00000000000051ac         je         loc_52e2

00000000000051b2         mov        byte [rsp+0x88+var_78], 0x1

                     loc_51b7:
00000000000051b7         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=string_hasher_ci+139
00000000000051bc         mov        r15, qword [rsp+0x88+var_68]
00000000000051c1         mov        rsi, rax
00000000000051c4         mov        rdi, r15
00000000000051c7         call       strnlen1                                    ; strnlen1
00000000000051cc         lea        rcx, qword [rbp+0x78+var_74]
00000000000051d0         lea        rdi, qword [rbp+0x78+var_54]
00000000000051d4         mov        rdx, rax
00000000000051d7         mov        rsi, r15
00000000000051da         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000051df         cmp        rax, 0xffffffffffffffff
00000000000051e3         mov        qword [rsp+0x88+var_60], rax
00000000000051e8         je         loc_5280

00000000000051ee         cmp        rax, 0xfffffffffffffffe
00000000000051f2         je         loc_52a0

00000000000051f8         test       rax, rax
00000000000051fb         jne        loc_52d8

0000000000005201         mov        rax, qword [rsp+0x88+var_68]
0000000000005206         mov        qword [rsp+0x88+var_60], 0x1
000000000000520f         cmp        byte [rax], 0x0
0000000000005212         jne        loc_5320

0000000000005218         mov        r13d, dword [rsp+0x88+var_54]
000000000000521d         test       r13d, r13d
0000000000005220         jne        loc_5301

                     loc_5226:
0000000000005226         lea        rdi, qword [rbp+0x78+var_74]                ; argument "__ps" for method j_mbsinit, CODE XREF=string_hasher_ci+541
000000000000522a         mov        byte [rsp+0x88+var_58], 0x1
000000000000522f         call       j_mbsinit                                   ; mbsinit
0000000000005234         test       eax, eax
0000000000005236         je         loc_52c8

000000000000523c         test       r13d, r13d
000000000000523f         mov        byte [rsp+0x88+var_78], 0x0
0000000000005244         mov        byte [rsp+0x88+var_6C], 0x1
0000000000005249         jne        loc_518b

000000000000524f         nop

                     loc_5250:
0000000000005250         mov        rsi, qword [rsp+0x88+var_30]                ; CODE XREF=string_hasher_ci+197
0000000000005255         xor        rsi, qword [fs:0x28]
000000000000525e         mov        rax, r14
0000000000005261         jne        loc_533f

0000000000005267         add        rsp, 0x68
000000000000526b         pop        rbx
000000000000526c         pop        rbp
000000000000526d         pop        r12
000000000000526f         pop        r13
0000000000005271         pop        r14
0000000000005273         pop        r15
0000000000005275         ret
                        ; endp
0000000000005276         align      128

                     loc_5280:
0000000000005280         mov        qword [rsp+0x88+var_60], 0x1                ; CODE XREF=string_hasher_ci+296
0000000000005289         mov        byte [rsp+0x88+var_58], 0x0
000000000000528e         mov        r13d, dword [rsp+0x88+var_54]
0000000000005293         mov        byte [rsp+0x88+var_6C], 0x1
0000000000005298         jmp        loc_518b
000000000000529d         align      32

                     loc_52a0:
00000000000052a0         mov        rdi, qword [rsp+0x88+var_68]                ; argument "__s" for method j_strlen, CODE XREF=string_hasher_ci+306
00000000000052a5         call       j_strlen                                    ; strlen
00000000000052aa         mov        byte [rsp+0x88+var_58], 0x0
00000000000052af         mov        qword [rsp+0x88+var_60], rax
00000000000052b4         mov        r13d, dword [rsp+0x88+var_54]
00000000000052b9         mov        byte [rsp+0x88+var_6C], 0x1
00000000000052be         jmp        loc_518b
00000000000052c3         align      8

                     loc_52c8:
00000000000052c8         mov        byte [rsp+0x88+var_6C], 0x1                 ; CODE XREF=string_hasher_ci+374
00000000000052cd         jmp        loc_5182
00000000000052d2         align      8

                     loc_52d8:
00000000000052d8         mov        r13d, dword [rsp+0x88+var_54]               ; CODE XREF=string_hasher_ci+315
00000000000052dd         jmp        loc_5226

                     loc_52e2:
00000000000052e2         lea        rcx, qword [__PRETTY_FUNCTION__.5373]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=string_hasher_ci+236
00000000000052e9         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
00000000000052f0         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
00000000000052f7         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
00000000000052fc         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_5301:
0000000000005301         lea        rcx, qword [__PRETTY_FUNCTION__.5373]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=string_hasher_ci+352
0000000000005308         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000530f         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
0000000000005316         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
000000000000531b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_5320:
0000000000005320         lea        rcx, qword [__PRETTY_FUNCTION__.5373]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=string_hasher_ci+338
0000000000005327         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000532e         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
0000000000005335         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
000000000000533a         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_533f:
000000000000533f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=string_hasher_ci+417
                        ; endp
0000000000005344         align      16                                          ; End of unwind block (FDE at 0x24014)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     exclude_add_pattern_buffer:
0000000000005350         push       rbp                                         ; Begin of unwind block (FDE at 0x24064)
0000000000005351         push       rbx
0000000000005352         mov        rbx, rdi
0000000000005355         mov        edi, 0x10
000000000000535a         mov        rbp, rsi
000000000000535d         sub        rsp, 0x8
0000000000005361         call       xmalloc                                     ; xmalloc
0000000000005366         mov        rdx, qword [rbx+8]
000000000000536a         mov        qword [rax+8], rbp
000000000000536e         mov        qword [rbx+8], rax
0000000000005372         mov        qword [rax], rdx
0000000000005375         add        rsp, 0x8
0000000000005379         pop        rbx
000000000000537a         pop        rbp
000000000000537b         ret
                        ; endp
000000000000537c         align      128                                         ; End of unwind block (FDE at 0x24064)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fnmatch_pattern_has_wildcards:
0000000000005380         movzx      eax, byte [rdi]                             ; Begin of unwind block (FDE at 0x2408c), CODE XREF=add_exclude+42
0000000000005383         mov        r9d, esi
0000000000005386         mov        r8d, esi
0000000000005389         lea        rdx, qword [switch_table_21510]             ; switch_table_21510
0000000000005390         and        r9d, 0x20
0000000000005394         and        r8d, 0x8000000
000000000000539b         and        esi, 0x2

                     loc_539e:
000000000000539e         cmp        al, 0x7d                                    ; CODE XREF=fnmatch_pattern_has_wildcards+79, fnmatch_pattern_has_wildcards+115, fnmatch_pattern_has_wildcards+136
00000000000053a0         lea        rcx, qword [rdi+1]
00000000000053a4         ja         loc_53c8

00000000000053a6         movsxd     rax, dword [rdx+rax*4]
00000000000053aa         add        rax, rdx
00000000000053ad         jmp        rax                                         ; switch statement using table at 0x21510, with 126 cases, 0x53b0,0x53b8,0x53bd,0x53c8,0x53d8,0x53f8
00000000000053af         align      16

                     loc_53b0:
00000000000053b0         xor        eax, eax                                    ; case 0, CODE XREF=fnmatch_pattern_has_wildcards+45
00000000000053b2         ret
                        ; endp
00000000000053b3         align      8

                     loc_53b8:
00000000000053b8         test       r8d, r8d                                    ; case 125, CODE XREF=fnmatch_pattern_has_wildcards+45
00000000000053bb         je         loc_53c8

                     loc_53bd:
00000000000053bd         mov        eax, 0x1                                    ; case 91, CODE XREF=fnmatch_pattern_has_wildcards+45, fnmatch_pattern_has_wildcards+131
00000000000053c2         ret
                        ; endp
00000000000053c3         align      8

                     loc_53c8:
00000000000053c8         movzx      eax, byte [rdi+1]                           ; case 124, CODE XREF=fnmatch_pattern_has_wildcards+36, fnmatch_pattern_has_wildcards+45, fnmatch_pattern_has_wildcards+59, fnmatch_pattern_has_wildcards+91, fnmatch_pattern_has_wildcards+123
00000000000053cc         mov        rdi, rcx
00000000000053cf         jmp        loc_539e
00000000000053d1         align      8

                     loc_53d8:
00000000000053d8         test       r8d, r8d                                    ; case 92, CODE XREF=fnmatch_pattern_has_wildcards+45
00000000000053db         jne        loc_53c8

00000000000053dd         test       esi, esi
00000000000053df         lea        rax, qword [rdi+2]
00000000000053e3         jne        loc_53ed

00000000000053e5         cmp        byte [rdi+1], 0x0
00000000000053e9         cmovne     rcx, rax

                     loc_53ed:
00000000000053ed         movzx      eax, byte [rcx]                             ; CODE XREF=fnmatch_pattern_has_wildcards+99
00000000000053f0         mov        rdi, rcx
00000000000053f3         jmp        loc_539e
00000000000053f5         align      8

                     loc_53f8:
00000000000053f8         test       r9d, r9d                                    ; case 64, CODE XREF=fnmatch_pattern_has_wildcards+45
00000000000053fb         je         loc_53c8

00000000000053fd         movzx      eax, byte [rdi+1]
0000000000005401         cmp        al, 0x28
0000000000005403         je         loc_53bd

0000000000005405         mov        rdi, rcx
0000000000005408         jmp        loc_539e
000000000000540a         align      16                                          ; End of unwind block (FDE at 0x2408c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     new_exclude:
0000000000005410         mov        edi, 0x10                                   ; Begin of unwind block (FDE at 0x240a0), CODE XREF=main+155
0000000000005415         jmp        xzalloc                                     ; xzalloc
                        ; endp
000000000000541a         align      32                                          ; End of unwind block (FDE at 0x240a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_exclude:
0000000000005420         push       r14                                         ; Begin of unwind block (FDE at 0x240b4)
0000000000005422         push       r13
0000000000005424         mov        r14, rdi
0000000000005427         push       r12
0000000000005429         push       rbp
000000000000542a         push       rbx
000000000000542b         mov        rbx, qword [rdi]
000000000000542e         test       rbx, rbx
0000000000005431         je         loc_54aa

0000000000005433         nop        dword [rax+rax]

                     loc_5438:
0000000000005438         mov        eax, dword [rbx+8]                          ; CODE XREF=free_exclude+136, free_exclude+223
000000000000543b         mov        r13, qword [rbx]
000000000000543e         test       eax, eax
0000000000005440         je         loc_54e8

0000000000005446         cmp        eax, 0x1
0000000000005449         jne        loc_549a

000000000000544b         cmp        qword [rbx+0x20], 0x0
0000000000005450         mov        rdi, qword [rbx+0x10]
0000000000005454         je         loc_5495

0000000000005456         xor        r12d, r12d
0000000000005459         xor        ebp, ebp
000000000000545b         jmp        loc_546e
000000000000545d         align      32

                     loc_5460:
0000000000005460         add        rbp, 0x1                                    ; CODE XREF=free_exclude+88
0000000000005464         add        r12, 0x48
0000000000005468         cmp        rbp, qword [rbx+0x20]
000000000000546c         jae        loc_5495

                     loc_546e:
000000000000546e         lea        rax, qword [rdi+r12]                        ; CODE XREF=free_exclude+59, free_exclude+115
0000000000005472         test       dword [rax], 0x8000000
0000000000005478         je         loc_5460

000000000000547a         lea        rdi, qword [rax+8]
000000000000547e         add        rbp, 0x1
0000000000005482         add        r12, 0x48
0000000000005486         call       rpl_regfree                                 ; rpl_regfree
000000000000548b         cmp        rbp, qword [rbx+0x20]
000000000000548f         mov        rdi, qword [rbx+0x10]
0000000000005493         jb         loc_546e

                     loc_5495:
0000000000005495         call       sub_2a10                                    ; sub_2a10, CODE XREF=free_exclude+52, free_exclude+76

                     loc_549a:
000000000000549a         mov        rdi, rbx                                    ; CODE XREF=free_exclude+41
000000000000549d         mov        rbx, r13
00000000000054a0         call       sub_2a10                                    ; sub_2a10
00000000000054a5         test       r13, r13
00000000000054a8         jne        loc_5438

                     loc_54aa:
00000000000054aa         mov        rbx, qword [r14+8]                          ; CODE XREF=free_exclude+17, free_exclude+229
00000000000054ae         test       rbx, rbx
00000000000054b1         je         loc_54d4

00000000000054b3         nop        dword [rax+rax]

                     loc_54b8:
00000000000054b8         mov        rdi, qword [rbx+8]                          ; CODE XREF=free_exclude+178
00000000000054bc         mov        rbp, qword [rbx]
00000000000054bf         call       sub_2a10                                    ; sub_2a10
00000000000054c4         mov        rdi, rbx
00000000000054c7         mov        rbx, rbp
00000000000054ca         call       sub_2a10                                    ; sub_2a10
00000000000054cf         test       rbp, rbp
00000000000054d2         jne        loc_54b8

                     loc_54d4:
00000000000054d4         pop        rbx                                         ; CODE XREF=free_exclude+145
00000000000054d5         mov        rdi, r14
00000000000054d8         pop        rbp
00000000000054d9         pop        r12
00000000000054db         pop        r13
00000000000054dd         pop        r14
00000000000054df         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
00000000000054e4         align      8

                     loc_54e8:
00000000000054e8         mov        rdi, qword [rbx+0x10]                       ; CODE XREF=free_exclude+32
00000000000054ec         call       hash_free                                   ; hash_free
00000000000054f1         mov        rdi, rbx
00000000000054f4         mov        rbx, r13
00000000000054f7         call       sub_2a10                                    ; sub_2a10
00000000000054fc         test       r13, r13
00000000000054ff         jne        loc_5438

0000000000005505         jmp        loc_54aa
0000000000005507         align      16                                          ; End of unwind block (FDE at 0x240b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     exclude_fnmatch:
0000000000005510         push       r14                                         ; Begin of unwind block (FDE at 0x240f4), CODE XREF=excluded_file_name+304
0000000000005512         push       r13
0000000000005514         mov        r14, rdi
0000000000005517         push       r12
0000000000005519         mov        r12d, edx
000000000000551c         and        edx, 0x10000000
0000000000005522         push       rbp
0000000000005523         lea        r13, qword [fnmatch_no_wildcards]           ; fnmatch_no_wildcards
000000000000552a         push       rbx
000000000000552b         mov        rbx, rsi
000000000000552e         je         loc_5537

0000000000005530         mov        r13, qword [qword_227fd8]                   ; qword_227fd8

                     loc_5537:
0000000000005537         mov        edx, r12d                                   ; CODE XREF=exclude_fnmatch+30
000000000000553a         mov        rsi, rbx
000000000000553d         mov        rdi, r14
0000000000005540         call       r13
0000000000005543         test       eax, eax
0000000000005545         sete       cl
0000000000005548         test       r12d, 0x40000000
000000000000554f         jne        loc_5578

0000000000005551         movzx      edx, byte [rbx]
0000000000005554         test       dl, dl
0000000000005556         je         loc_5578

0000000000005558         test       eax, eax
000000000000555a         je         loc_55b7

000000000000555c         nop        dword [rax]

                     loc_5560:
0000000000005560         cmp        dl, 0x2f                                    ; CODE XREF=exclude_fnmatch+100, exclude_fnmatch+165
0000000000005563         lea        rbp, qword [rbx+1]
0000000000005567         movzx      eax, byte [rbx+1]
000000000000556b         je         loc_5598

000000000000556d         test       al, al
000000000000556f         mov        edx, eax
0000000000005571         mov        rbx, rbp
0000000000005574         jne        loc_5560

0000000000005576         xor        ecx, ecx

                     loc_5578:
0000000000005578         pop        rbx                                         ; CODE XREF=exclude_fnmatch+63, exclude_fnmatch+70, exclude_fnmatch+197
0000000000005579         mov        eax, ecx
000000000000557b         pop        rbp
000000000000557c         pop        r12
000000000000557e         pop        r13
0000000000005580         pop        r14
0000000000005582         ret
                        ; endp
0000000000005583         align      8

                     loc_5588:
0000000000005588         movzx      eax, byte [rbp+1]                           ; CODE XREF=exclude_fnmatch+138
000000000000558c         mov        rbx, rbp
000000000000558f         add        rbp, 0x1
0000000000005593         nop        dword [rax+rax]

                     loc_5598:
0000000000005598         cmp        al, 0x2f                                    ; CODE XREF=exclude_fnmatch+91
000000000000559a         je         loc_5588

000000000000559c         mov        edx, r12d
000000000000559f         mov        rsi, rbp
00000000000055a2         mov        rdi, r14
00000000000055a5         call       r13
00000000000055a8         movzx      edx, byte [rbx+1]
00000000000055ac         test       dl, dl
00000000000055ae         je         loc_55d0

00000000000055b0         test       eax, eax
00000000000055b2         mov        rbx, rbp
00000000000055b5         jne        loc_5560

                     loc_55b7:
00000000000055b7         mov        ecx, 0x1                                    ; CODE XREF=exclude_fnmatch+74
00000000000055bc         pop        rbx
00000000000055bd         mov        eax, ecx
00000000000055bf         pop        rbp
00000000000055c0         pop        r12
00000000000055c2         pop        r13
00000000000055c4         pop        r14
00000000000055c6         ret
                        ; endp
00000000000055c7         align      16

                     loc_55d0:
00000000000055d0         test       eax, eax                                    ; CODE XREF=exclude_fnmatch+158
00000000000055d2         sete       cl
00000000000055d5         jmp        loc_5578
00000000000055d7         align      32                                          ; End of unwind block (FDE at 0x240f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     excluded_file_name:
00000000000055e0         push       r15                                         ; Begin of unwind block (FDE at 0x24144), CODE XREF=main+1668
00000000000055e2         push       r14
00000000000055e4         xor        eax, eax
00000000000055e6         push       r13
00000000000055e8         push       r12
00000000000055ea         push       rbp
00000000000055eb         push       rbx
00000000000055ec         sub        rsp, 0x18
00000000000055f0         mov        r14, qword [rdi]
00000000000055f3         test       r14, r14
00000000000055f6         je         loc_568b

00000000000055fc         mov        eax, dword [r14+8]
0000000000005600         xor        ebp, ebp
0000000000005602         mov        qword [rsp+0x48+var_40], rsi
0000000000005607         test       eax, eax
0000000000005609         jne        loc_56eb

000000000000560f         nop

                     loc_5610:
0000000000005610         test       rbp, rbp                                    ; CODE XREF=excluded_file_name+261
0000000000005613         je         loc_5750

                     loc_5619:
0000000000005619         mov        r15d, dword [r14+0xc]                       ; CODE XREF=excluded_file_name+390
000000000000561d         mov        r12, qword [r14+0x10]
0000000000005621         mov        rbx, qword [rsp+0x48+var_40]
0000000000005626         mov        r13d, r15d
0000000000005629         and        r13d, 0x8

                     loc_562d:
000000000000562d         mov        rsi, rbx                                    ; argument "__src" for method j_strcpy, CODE XREF=excluded_file_name+226
0000000000005630         mov        rdi, rbp                                    ; argument "__dest" for method j_strcpy
0000000000005633         call       j_strcpy                                    ; strcpy
0000000000005638         mov        rsi, rbp
000000000000563b         mov        rdi, r12
000000000000563e         call       hash_lookup                                 ; hash_lookup
0000000000005643         test       rax, rax
0000000000005646         jne        loc_5672

                     loc_5648:
0000000000005648         test       r13d, r13d                                  ; CODE XREF=excluded_file_name+144
000000000000564b         je         loc_56a0

000000000000564d         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000005652         mov        rdi, rbp                                    ; argument "__s" for method j_strrchr
0000000000005655         call       j_strrchr                                   ; strrchr
000000000000565a         test       rax, rax
000000000000565d         je         loc_56a0

000000000000565f         mov        byte [rax], 0x0
0000000000005662         mov        rsi, rbp
0000000000005665         mov        rdi, r12
0000000000005668         call       hash_lookup                                 ; hash_lookup
000000000000566d         test       rax, rax
0000000000005670         je         loc_5648

                     loc_5672:
0000000000005672         xor        ebx, ebx                                    ; CODE XREF=excluded_file_name+102, excluded_file_name+311

                     loc_5674:
0000000000005674         mov        rdi, rbp                                    ; CODE XREF=excluded_file_name+400
0000000000005677         call       sub_2a10                                    ; sub_2a10
000000000000567c         mov        eax, dword [r14+0xc]
0000000000005680         shr        eax, 0x1d
0000000000005683         xor        eax, 0x1
0000000000005686         and        eax, 0x1
0000000000005689         xor        eax, ebx

                     loc_568b:
000000000000568b         add        rsp, 0x18                                   ; CODE XREF=excluded_file_name+22
000000000000568f         pop        rbx
0000000000005690         pop        rbp
0000000000005691         pop        r12
0000000000005693         pop        r13
0000000000005695         pop        r14
0000000000005697         pop        r15
0000000000005699         ret
                        ; endp
000000000000569a         align      32

                     loc_56a0:
00000000000056a0         test       r15d, 0x40000000                            ; CODE XREF=excluded_file_name+107, excluded_file_name+125
00000000000056a7         jne        loc_56d0

00000000000056a9         mov        esi, 0x2f                                   ; argument "__c" for method j_strchr
00000000000056ae         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
00000000000056b1         call       j_strchr                                    ; strchr
00000000000056b6         test       rax, rax
00000000000056b9         je         loc_56d0

00000000000056bb         add        rax, 0x1
00000000000056bf         mov        rbx, rax
00000000000056c2         jne        loc_562d

00000000000056c8         nop        dword [rax+rax]

                     loc_56d0:
00000000000056d0         mov        rax, qword [r14]                            ; CODE XREF=excluded_file_name+199, excluded_file_name+217, excluded_file_name+278, excluded_file_name+328
00000000000056d3         test       rax, rax
00000000000056d6         je         loc_576b

00000000000056dc         mov        r14, rax
00000000000056df         mov        eax, dword [r14+8]
00000000000056e3         test       eax, eax
00000000000056e5         je         loc_5610

                     loc_56eb:
00000000000056eb         mov        r12, qword [r14+0x20]                       ; CODE XREF=excluded_file_name+41
00000000000056ef         mov        rbx, qword [r14+0x10]
00000000000056f3         test       r12, r12
00000000000056f6         je         loc_56d0

00000000000056f8         add        rbx, 0x8
00000000000056fc         xor        r13d, r13d
00000000000056ff         jmp        loc_572a
0000000000005701         align      8

                     loc_5708:
0000000000005708         mov        rsi, qword [rsp+0x48+var_40]                ; CODE XREF=excluded_file_name+339
000000000000570d         mov        rdi, qword [rbx]
0000000000005710         call       exclude_fnmatch                             ; exclude_fnmatch

                     loc_5715:
0000000000005715         test       al, al                                      ; CODE XREF=excluded_file_name+366
0000000000005717         jne        loc_5672

000000000000571d         add        r13, 0x1
0000000000005721         add        rbx, 0x48
0000000000005725         cmp        r12, r13
0000000000005728         je         loc_56d0

                     loc_572a:
000000000000572a         mov        edx, dword [rbx-8]                          ; CODE XREF=excluded_file_name+287
000000000000572d         test       edx, 0x8000000
0000000000005733         je         loc_5708

0000000000005735         mov        rsi, qword [rsp+0x48+var_40]
000000000000573a         xor        r8d, r8d
000000000000573d         xor        ecx, ecx
000000000000573f         xor        edx, edx
0000000000005741         mov        rdi, rbx
0000000000005744         call       rpl_regexec                                 ; rpl_regexec
0000000000005749         test       eax, eax
000000000000574b         sete       al
000000000000574e         jmp        loc_5715

                     loc_5750:
0000000000005750         mov        rdi, qword [rsp+0x48+var_40]                ; argument "__s" for method j_strlen, CODE XREF=excluded_file_name+51
0000000000005755         call       j_strlen                                    ; strlen
000000000000575a         lea        rdi, qword [rax+1]
000000000000575e         call       xmalloc                                     ; xmalloc
0000000000005763         mov        rbp, rax
0000000000005766         jmp        loc_5619

                     loc_576b:
000000000000576b         mov        ebx, 0x1                                    ; CODE XREF=excluded_file_name+246
0000000000005770         jmp        loc_5674
0000000000005775         align      128                                         ; End of unwind block (FDE at 0x24144)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     add_exclude:
0000000000005780         push       r15                                         ; Begin of unwind block (FDE at 0x24190), CODE XREF=main+1130, DATA XREF=main+650
0000000000005782         push       r14
0000000000005784         push       r13
0000000000005786         push       r12
0000000000005788         mov        r13, rsi
000000000000578b         push       rbp
000000000000578c         push       rbx
000000000000578d         mov        ebp, edx
000000000000578f         mov        r12, rdi
0000000000005792         sub        rsp, 0x8
0000000000005796         and        edx, 0x18000000
000000000000579c         mov        rbx, qword [rdi]
000000000000579f         je         loc_5880

00000000000057a5         mov        esi, ebp
00000000000057a7         mov        rdi, r13
00000000000057aa         call       fnmatch_pattern_has_wildcards               ; fnmatch_pattern_has_wildcards
00000000000057af         test       al, al
00000000000057b1         je         loc_5880

00000000000057b7         test       rbx, rbx
00000000000057ba         je         loc_57c6

00000000000057bc         cmp        dword [rbx+8], 0x1
00000000000057c0         je         loc_59e8

                     loc_57c6:
00000000000057c6         mov        edi, 0x28                                   ; CODE XREF=add_exclude+58, add_exclude+632
00000000000057cb         call       xzalloc                                     ; xzalloc
00000000000057d0         mov        rbx, rax
00000000000057d3         mov        dword [rax+8], 0x1
00000000000057da         mov        dword [rax+0xc], ebp
00000000000057dd         mov        rax, qword [r12]
00000000000057e1         mov        qword [r12], rbx
00000000000057e5         mov        qword [rbx], rax

                     loc_57e8:
00000000000057e8         mov        rcx, qword [rbx+0x20]                       ; CODE XREF=add_exclude+626
00000000000057ec         cmp        rcx, qword [rbx+0x18]
00000000000057f0         mov        rdi, qword [rbx+0x10]
00000000000057f4         je         loc_5a00

                     loc_57fa:
00000000000057fa         lea        rax, qword [rcx+rcx*8]                      ; CODE XREF=add_exclude+699
00000000000057fe         lea        r15, qword [rcx+1]
0000000000005802         test       ebp, 0x8000000
0000000000005808         lea        r14, qword [rdi+rax*8]
000000000000580c         mov        qword [rbx+0x20], r15
0000000000005810         mov        dword [r14], ebp
0000000000005813         je         loc_59a0

0000000000005819         mov        r12d, ebp
000000000000581c         sar        r12d, 0x3
0000000000005820         and        r12d, 0x2
0000000000005824         or         r12d, 0x9
0000000000005828         and        ebp, 0x8
000000000000582b         je         loc_5a70

0000000000005831         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000005834         call       j_strlen                                    ; strlen
0000000000005839         test       rax, rax
000000000000583c         je         loc_5868

000000000000583e         cmp        byte [r13+rax-1], 0x2f
0000000000005844         lea        rbp, qword [rax-1]
0000000000005848         je         loc_5863

000000000000584a         jmp        loc_5a92
000000000000584f         align      16

                     loc_5850:
0000000000005850         cmp        byte [r13+rbp-1], 0x2f                      ; CODE XREF=add_exclude+230
0000000000005856         lea        rax, qword [rbp-1]
000000000000585a         jne        loc_5a98

0000000000005860         mov        rbp, rax

                     loc_5863:
0000000000005863         test       rbp, rbp                                    ; CODE XREF=add_exclude+200
0000000000005866         jne        loc_5850

                     loc_5868:
0000000000005868         lea        rax, qword [r15-1]                          ; CODE XREF=add_exclude+188, sub_5a6e+31
000000000000586c         mov        qword [rbx+0x20], rax

                     loc_5870:
0000000000005870         add        rsp, 0x8                                    ; CODE XREF=add_exclude+407, sub_5a6e+21
0000000000005874         pop        rbx
0000000000005875         pop        rbp
0000000000005876         pop        r12
0000000000005878         pop        r13
000000000000587a         pop        r14
000000000000587c         pop        r15
000000000000587e         ret
                        ; endp
000000000000587f         align      128

                     loc_5880:
0000000000005880         test       rbx, rbx                                    ; CODE XREF=add_exclude+31, add_exclude+49
0000000000005883         je         loc_5890

0000000000005885         mov        edx, dword [rbx+8]
0000000000005888         test       edx, edx
000000000000588a         je         loc_5938

                     loc_5890:
0000000000005890         mov        edi, 0x28                                   ; CODE XREF=add_exclude+259, add_exclude+452
0000000000005895         call       xzalloc                                     ; xzalloc
000000000000589a         lea        rdx, qword [string_compare_ci]              ; string_compare_ci
00000000000058a1         mov        rbx, rax
00000000000058a4         mov        dword [rax+8], 0x0
00000000000058ab         mov        dword [rax+0xc], ebp
00000000000058ae         lea        rcx, qword [string_compare]                 ; string_compare
00000000000058b5         mov        eax, ebp
00000000000058b7         and        eax, 0x10
00000000000058ba         lea        rax, qword [string_hasher_ci]               ; string_hasher_ci
00000000000058c1         lea        r8, qword [string_free]                     ; argument #5 for method hash_initialize, string_free
00000000000058c8         cmovne     rcx, rdx                                    ; argument #4 for method hash_initialize
00000000000058cc         lea        rdx, qword [string_hasher]                  ; string_hasher
00000000000058d3         cmovne     rdx, rax                                    ; argument #3 for method hash_initialize
00000000000058d7         xor        esi, esi                                    ; argument #2 for method hash_initialize
00000000000058d9         xor        edi, edi                                    ; argument #1 for method hash_initialize
00000000000058db         call       hash_initialize                             ; hash_initialize
00000000000058e0         mov        qword [rbx+0x10], rax
00000000000058e4         mov        rax, qword [r12]
00000000000058e8         mov        qword [r12], rbx
00000000000058ec         mov        qword [rbx], rax

                     loc_58ef:
00000000000058ef         mov        rdi, r13                                    ; argument #1 for method xstrdup, CODE XREF=add_exclude+450
00000000000058f2         and        ebp, 0x10000002
00000000000058f8         call       xstrdup                                     ; xstrdup
00000000000058fd         cmp        ebp, 0x10000000
0000000000005903         mov        r12, rax
0000000000005906         je         loc_5950

                     loc_5908:
0000000000005908         mov        rdi, qword [rbx+0x10]                       ; argument #1 for method hash_insert, CODE XREF=add_exclude+489
000000000000590c         mov        rsi, r12                                    ; argument #2 for method hash_insert
000000000000590f         call       hash_insert                                 ; hash_insert
0000000000005914         cmp        r12, rax
0000000000005917         je         loc_5870

000000000000591d         add        rsp, 0x8
0000000000005921         mov        rdi, r12
0000000000005924         pop        rbx
0000000000005925         pop        rbp
0000000000005926         pop        r12
0000000000005928         pop        r13
000000000000592a         pop        r14
000000000000592c         pop        r15
000000000000592e         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000005933         align      8

                     loc_5938:
0000000000005938         mov        eax, dword [rbx+0xc]                        ; CODE XREF=add_exclude+266
000000000000593b         xor        eax, ebp
000000000000593d         test       eax, 0x60000018
0000000000005942         je         loc_58ef

0000000000005944         jmp        loc_5890
0000000000005949         align      16

                     loc_5950:
0000000000005950         mov        rdx, rax                                    ; CODE XREF=add_exclude+390
0000000000005953         mov        rcx, rax
0000000000005956         jmp        loc_596e
0000000000005958         align      32

                     loc_5960:
0000000000005960         add        rcx, 0x1                                    ; CODE XREF=add_exclude+503, add_exclude+519
0000000000005964         test       al, al
0000000000005966         mov        byte [rcx-1], al
0000000000005969         je         loc_5908

                     loc_596b:
000000000000596b         mov        rdx, rsi                                    ; CODE XREF=add_exclude+536

                     loc_596e:
000000000000596e         movzx      eax, byte [rdx]                             ; CODE XREF=add_exclude+470
0000000000005971         lea        rsi, qword [rdx+1]
0000000000005975         cmp        al, 0x5c
0000000000005977         jne        loc_5960

0000000000005979         cmp        byte [rdx+1], 0x0
000000000000597d         je         loc_5990

000000000000597f         movzx      eax, byte [rdx+1]
0000000000005983         lea        rsi, qword [rdx+2]
0000000000005987         jmp        loc_5960
0000000000005989         align      16

                     loc_5990:
0000000000005990         add        rcx, 0x1                                    ; CODE XREF=add_exclude+509
0000000000005994         mov        byte [rcx-1], 0x5c
0000000000005998         jmp        loc_596b
000000000000599a         align      32

                     loc_59a0:
00000000000059a0         and        ebp, 0x4000000                              ; CODE XREF=add_exclude+147
00000000000059a6         je         loc_59ce

00000000000059a8         mov        rdi, r13                                    ; argument #1 for method xstrdup
00000000000059ab         call       xstrdup                                     ; xstrdup
00000000000059b0         mov        edi, 0x10                                   ; argument #1 for method xmalloc
00000000000059b5         mov        r13, rax
00000000000059b8         call       xmalloc                                     ; xmalloc
00000000000059bd         mov        rdx, qword [r12+8]
00000000000059c2         mov        qword [rax+8], r13
00000000000059c6         mov        qword [r12+8], rax
00000000000059cb         mov        qword [rax], rdx

                     loc_59ce:
00000000000059ce         mov        qword [r14+8], r13                          ; CODE XREF=add_exclude+550
00000000000059d2         add        rsp, 0x8
00000000000059d6         pop        rbx
00000000000059d7         pop        rbp
00000000000059d8         pop        r12
00000000000059da         pop        r13
00000000000059dc         pop        r14
00000000000059de         pop        r15
00000000000059e0         ret
                        ; endp
00000000000059e1         align      8

                     loc_59e8:
00000000000059e8         mov        eax, dword [rbx+0xc]                        ; CODE XREF=add_exclude+64
00000000000059eb         xor        eax, ebp
00000000000059ed         test       eax, 0x20000000
00000000000059f2         je         loc_57e8

00000000000059f8         jmp        loc_57c6
00000000000059fd         align      512

                     loc_5a00:
0000000000005a00         test       rdi, rdi                                    ; CODE XREF=add_exclude+116
0000000000005a03         je         loc_5a40

0000000000005a05         movabs     rax, 0x12f684bda12f683
0000000000005a0f         cmp        rcx, rax
0000000000005a12         ja         loc_5a69

0000000000005a14         mov        rax, rcx
0000000000005a17         shr        rax, 0x1
0000000000005a1a         lea        rcx, qword [rcx+rax+1]

                     loc_5a1f:
0000000000005a1f         lea        rsi, qword [rcx+rcx*8]                      ; CODE XREF=add_exclude+743
0000000000005a23         mov        qword [rbx+0x18], rcx
0000000000005a27         shl        rsi, 0x3                                    ; argument #2 for method xrealloc
0000000000005a2b         call       xrealloc                                    ; xrealloc
0000000000005a30         mov        rcx, qword [rbx+0x20]
0000000000005a34         mov        rdi, rax
0000000000005a37         mov        qword [rbx+0x10], rax
0000000000005a3b         jmp        loc_57fa

                     loc_5a40:
0000000000005a40         test       rcx, rcx                                    ; CODE XREF=add_exclude+643
0000000000005a43         mov        eax, 0x1
0000000000005a48         mov        edx, 0x48
0000000000005a4d         cmove      rcx, rax
0000000000005a51         mov        rax, rdx
0000000000005a54         xor        esi, esi
0000000000005a56         mul        rcx
0000000000005a59         jo         loc_5ae4

                     loc_5a5f:
0000000000005a5f         test       rax, rax                                    ; CODE XREF=sub_5a6e+123
0000000000005a62         js         loc_5a69

0000000000005a64         test       rsi, rsi
0000000000005a67         je         loc_5a1f

                     loc_5a69:
0000000000005a69         call       xalloc_die                                  ; xalloc_die, CODE XREF=add_exclude+658, add_exclude+738
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5a6e:
0000000000005a6e         nop
                        ; endp

                     loc_5a70:
0000000000005a70         lea        rdi, qword [r14+8]                          ; CODE XREF=add_exclude+171
0000000000005a74         mov        edx, r12d
0000000000005a77         mov        rsi, r13
0000000000005a7a         call       rpl_regcomp                                 ; rpl_regcomp
0000000000005a7f         mov        ebp, eax

                     loc_5a81:
0000000000005a81         test       ebp, ebp                                    ; CODE XREF=sub_5a6e+116
0000000000005a83         je         loc_5870

0000000000005a89         mov        r15, qword [rbx+0x20]
0000000000005a8d         jmp        loc_5868

                     loc_5a92:
0000000000005a92         mov        rbp, rax                                    ; CODE XREF=add_exclude+202
0000000000005a95         nop        dword [rax]

                     loc_5a98:
0000000000005a98         lea        rdi, qword [rbp+7]                          ; argument #1 for method xmalloc, CODE XREF=add_exclude+218
0000000000005a9c         call       xmalloc                                     ; xmalloc
0000000000005aa1         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000005aa4         mov        r15, rax
0000000000005aa7         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000005aaa         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000005aad         add        rbp, r15
0000000000005ab0         call       j_memcpy                                    ; memcpy
0000000000005ab5         lea        rdi, qword [r14+8]
0000000000005ab9         mov        eax, 0x3f29
0000000000005abe         mov        dword [rbp], 0x2a2e2f28
0000000000005ac5         mov        word [rbp+4], ax
0000000000005ac9         mov        byte [rbp+6], 0x0
0000000000005acd         mov        edx, r12d
0000000000005ad0         mov        rsi, r15
0000000000005ad3         call       rpl_regcomp                                 ; rpl_regcomp
0000000000005ad8         mov        rdi, r15
0000000000005adb         mov        ebp, eax
0000000000005add         call       sub_2a10                                    ; sub_2a10
0000000000005ae2         jmp        loc_5a81

                     loc_5ae4:
0000000000005ae4         mov        esi, 0x1                                    ; CODE XREF=add_exclude+729
0000000000005ae9         jmp        loc_5a5f
0000000000005aee         align      16                                          ; End of unwind block (FDE at 0x24190)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_60: int32_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     add_exclude_fp:
0000000000005af0         push       r15                                         ; Begin of unwind block (FDE at 0x24210), CODE XREF=add_exclude_file+77, add_exclude_file+141
0000000000005af2         push       r14
0000000000005af4         mov        r15, rdx
0000000000005af7         push       r13
0000000000005af9         push       r12
0000000000005afb         mov        r13, rsi
0000000000005afe         push       rbp
0000000000005aff         push       rbx
0000000000005b00         mov        ebp, r8d
0000000000005b03         xor        r14d, r14d
0000000000005b06         xor        ebx, ebx
0000000000005b08         sub        rsp, 0x48
0000000000005b0c         mov        rax, qword [fs:0x28]
0000000000005b15         mov        qword [rsp+0x78+var_40], rax
0000000000005b1a         xor        eax, eax
0000000000005b1c         lea        rax, qword [rsp+0x78+var_48]
0000000000005b21         mov        qword [rsp+0x78+var_70], rdi
0000000000005b26         mov        dword [rsp+0x78+var_60], ecx
0000000000005b2a         mov        dword [rsp+0x78+var_58], r8d
0000000000005b2f         mov        qword [rsp+0x78+var_68], r9
0000000000005b34         mov        qword [rsp+0x78+var_48], 0x0
0000000000005b3d         mov        qword [rsp+0x78+var_78], rax
0000000000005b41         jmp        loc_5b50
0000000000005b43         align      8

                     loc_5b48:
0000000000005b48         mov        byte [rbx+r14], r12b                        ; CODE XREF=add_exclude_fp+123, add_exclude_fp+140
0000000000005b4c         add        r14, 0x1

                     loc_5b50:
0000000000005b50         mov        rax, qword [r15+8]                          ; CODE XREF=add_exclude_fp+81
0000000000005b54         cmp        rax, qword [r15+0x10]
0000000000005b58         jae        loc_5b80

0000000000005b5a         lea        rdx, qword [rax+1]
0000000000005b5e         mov        qword [r15+8], rdx
0000000000005b62         movzx      r12d, byte [rax]

                     loc_5b66:
0000000000005b66         cmp        qword [rsp+0x78+var_48], r14                ; CODE XREF=add_exclude_fp+158
0000000000005b6b         jne        loc_5b48

0000000000005b6d         mov        rsi, qword [rsp+0x78+var_78]
0000000000005b71         mov        rdi, rbx
0000000000005b74         call       x2realloc                                   ; x2realloc
0000000000005b79         mov        rbx, rax
0000000000005b7c         jmp        loc_5b48
0000000000005b7e         align      128

                     loc_5b80:
0000000000005b80         mov        rdi, r15                                    ; argument #1 for method j___uflow, CODE XREF=add_exclude_fp+104
0000000000005b83         call       j___uflow                                   ; __uflow
0000000000005b88         cmp        eax, 0xffffffff
0000000000005b8b         mov        r12d, eax
0000000000005b8e         jne        loc_5b66

0000000000005b90         mov        r12d, dword [r15]
0000000000005b93         call       j___errno_location                          ; __errno_location
0000000000005b98         mov        dword [rsp+0x78+var_5C], 0x0
0000000000005ba0         mov        qword [rsp+0x78+var_50], rax
0000000000005ba5         and        r12d, 0x20
0000000000005ba9         test       r12d, r12d
0000000000005bac         je         loc_5bbf

0000000000005bae         mov        r12d, dword [rax]
0000000000005bb1         xor        eax, eax
0000000000005bb3         test       r12d, r12d
0000000000005bb6         setne      al
0000000000005bb9         neg        eax
0000000000005bbb         mov        dword [rsp+0x78+var_5C], eax

                     loc_5bbf:
0000000000005bbf         lea        rsi, qword [r14+1]                          ; CODE XREF=add_exclude_fp+188
0000000000005bc3         mov        rdi, rbx
0000000000005bc6         call       xrealloc                                    ; xrealloc
0000000000005bcb         mov        r15, rax
0000000000005bce         mov        eax, dword [rsp+0x78+var_58]
0000000000005bd2         test       r14, r14
0000000000005bd5         mov        byte [r15+r14], al
0000000000005bd9         je         loc_5ca0

0000000000005bdf         xor        ebx, ebx
0000000000005be1         cmp        byte [r15+r14-1], al
0000000000005be6         mov        edi, 0x10
0000000000005beb         setne      bl
0000000000005bee         add        rbx, r14
0000000000005bf1         call       xmalloc                                     ; xmalloc
0000000000005bf6         mov        rcx, qword [r13+8]
0000000000005bfa         add        rbx, r15
0000000000005bfd         mov        qword [rax+8], r15
0000000000005c01         cmp        r15, rbx
0000000000005c04         mov        qword [r13+8], rax
0000000000005c08         mov        qword [rax], rcx
0000000000005c0b         jae        loc_5c6f

0000000000005c0d         movzx      eax, bpl
0000000000005c11         mov        rsi, r15
0000000000005c14         mov        qword [rsp+0x78+var_58], rax
0000000000005c19         jmp        loc_5c28
0000000000005c1b         align      32

                     loc_5c20:
0000000000005c20         cmp        rbx, r14                                    ; CODE XREF=add_exclude_fp+319
0000000000005c23         mov        r15, r14
0000000000005c26         je         loc_5c6f

                     loc_5c28:
0000000000005c28         cmp        byte [r15], bpl                             ; CODE XREF=add_exclude_fp+297, add_exclude_fp+381
0000000000005c2b         lea        r14, qword [r15+1]
0000000000005c2f         jne        loc_5c20

0000000000005c31         mov        qword [rsp+0x78+var_78], rsi
0000000000005c35         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000005c3a         mov        rcx, qword [rsp+0x78+var_58]
0000000000005c3f         mov        rax, qword [rax]
0000000000005c42         mov        rsi, qword [rsp+0x78+var_78]
0000000000005c46         test       byte [rax+rcx*2+1], 0x20
0000000000005c4b         jne        loc_5cc0

                     loc_5c4d:
0000000000005c4d         mov        byte [r15], 0x0                             ; CODE XREF=add_exclude_fp+481, add_exclude_fp+506
0000000000005c51         mov        rcx, qword [rsp+0x78+var_68]
0000000000005c56         mov        rdi, r13
0000000000005c59         mov        edx, dword [rsp+0x78+var_60]
0000000000005c5d         mov        rax, qword [rsp+0x78+var_70]
0000000000005c62         call       rax

                     loc_5c64:
0000000000005c64         cmp        rbx, r14                                    ; CODE XREF=add_exclude_fp+467, add_exclude_fp+521
0000000000005c67         mov        rsi, r14
0000000000005c6a         mov        r15, r14
0000000000005c6d         jne        loc_5c28

                     loc_5c6f:
0000000000005c6f         mov        rax, qword [rsp+0x78+var_50]                ; CODE XREF=add_exclude_fp+283, add_exclude_fp+310, add_exclude_fp+457
0000000000005c74         mov        rdi, qword [rsp+0x78+var_40]
0000000000005c79         xor        rdi, qword [fs:0x28]
0000000000005c82         mov        dword [rax], r12d
0000000000005c85         mov        eax, dword [rsp+0x78+var_5C]
0000000000005c89         jne        loc_5cfe

0000000000005c8b         add        rsp, 0x48
0000000000005c8f         pop        rbx
0000000000005c90         pop        rbp
0000000000005c91         pop        r12
0000000000005c93         pop        r13
0000000000005c95         pop        r14
0000000000005c97         pop        r15
0000000000005c99         ret
                        ; endp
0000000000005c9a         align      32

                     loc_5ca0:
0000000000005ca0         mov        edi, 0x10                                   ; CODE XREF=add_exclude_fp+233
0000000000005ca5         call       xmalloc                                     ; xmalloc
0000000000005caa         mov        rdx, qword [r13+8]
0000000000005cae         mov        qword [rax+8], r15
0000000000005cb2         mov        qword [r13+8], rax
0000000000005cb6         mov        qword [rax], rdx
0000000000005cb9         jmp        loc_5c6f
0000000000005cbb         align      64

                     loc_5cc0:
0000000000005cc0         cmp        r15, rsi                                    ; CODE XREF=add_exclude_fp+347
0000000000005cc3         je         loc_5c64

0000000000005cc5         movzx      ecx, byte [r14-2]
0000000000005cca         test       byte [rax+rcx*2+1], 0x20
0000000000005ccf         jne        loc_5cf0

0000000000005cd1         jmp        loc_5c4d
0000000000005cd6         align      32

                     loc_5ce0:
0000000000005ce0         movzx      ecx, byte [r15-1]                           ; CODE XREF=add_exclude_fp+519
0000000000005ce5         test       byte [rax+rcx*2+1], 0x20
0000000000005cea         je         loc_5c4d

                     loc_5cf0:
0000000000005cf0         sub        r15, 0x1                                    ; CODE XREF=add_exclude_fp+479
0000000000005cf4         cmp        r15, rsi
0000000000005cf7         jne        loc_5ce0

0000000000005cf9         jmp        loc_5c64

                     loc_5cfe:
0000000000005cfe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=add_exclude_fp+409
                        ; endp
0000000000005d03         align      16                                          ; End of unwind block (FDE at 0x24210)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     add_exclude_file:
0000000000005d10         push       r12                                         ; Begin of unwind block (FDE at 0x24260), CODE XREF=main+662
0000000000005d12         push       rbp
0000000000005d13         mov        r12d, r8d
0000000000005d16         push       rbx
0000000000005d17         mov        rbp, rsi
0000000000005d1a         sub        rsp, 0x10
0000000000005d1e         cmp        byte [rdx], 0x2d
0000000000005d21         mov        qword [rsp+0x28+var_20], rdi
0000000000005d26         je         loc_5d80

                     loc_5d28:
0000000000005d28         lea        rsi, qword [aUpper+4]                       ; argument "__modes" for method j_fopen, 0x22817, CODE XREF=add_exclude_file+116
0000000000005d2f         mov        rdi, rdx                                    ; argument "__filename" for method j_fopen
0000000000005d32         mov        dword [rsp+0x28+var_24], ecx
0000000000005d36         call       j_fopen                                     ; fopen
0000000000005d3b         test       rax, rax
0000000000005d3e         mov        rbx, rax
0000000000005d41         mov        ecx, dword [rsp+0x28+var_24]
0000000000005d45         je         loc_5db0

0000000000005d47         lea        r9, qword [rsp+0x28+var_20]
0000000000005d4c         lea        rdi, qword [call_addfn]                     ; call_addfn
0000000000005d53         mov        rsi, rbp
0000000000005d56         movsx      r8d, r12b
0000000000005d5a         mov        rdx, rax
0000000000005d5d         call       add_exclude_fp                              ; add_exclude_fp
0000000000005d62         mov        rdi, rbx
0000000000005d65         mov        ebp, eax
0000000000005d67         call       rpl_fclose                                  ; rpl_fclose
0000000000005d6c         test       eax, eax
0000000000005d6e         jne        loc_5db0

                     loc_5d70:
0000000000005d70         add        rsp, 0x10                                   ; CODE XREF=add_exclude_file+165
0000000000005d74         mov        eax, ebp
0000000000005d76         pop        rbx
0000000000005d77         pop        rbp
0000000000005d78         pop        r12
0000000000005d7a         ret
                        ; endp
0000000000005d7b         align      128

                     loc_5d80:
0000000000005d80         cmp        byte [rdx+1], 0x0                           ; CODE XREF=add_exclude_file+22
0000000000005d84         jne        loc_5d28

0000000000005d86         mov        rdx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000005d8d         lea        r9, qword [rsp+0x28+var_20]
0000000000005d92         lea        rdi, qword [call_addfn]                     ; call_addfn
0000000000005d99         movsx      r8d, r8b
0000000000005d9d         call       add_exclude_fp                              ; add_exclude_fp
0000000000005da2         add        rsp, 0x10
0000000000005da6         mov        ebp, eax
0000000000005da8         mov        eax, ebp
0000000000005daa         pop        rbx
0000000000005dab         pop        rbp
0000000000005dac         pop        r12
0000000000005dae         ret
                        ; endp
0000000000005daf         align      16

                     loc_5db0:
0000000000005db0         mov        ebp, 0xffffffff                             ; CODE XREF=add_exclude_file+53, add_exclude_file+94
0000000000005db5         jmp        loc_5d70
0000000000005db7         align      64                                          ; End of unwind block (FDE at 0x24260)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fwrite_lowcase:
0000000000005dc0         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x242a4), CODE XREF=sub_7170+335, sub_77e0+302
0000000000005dc3         je         loc_5e10

0000000000005dc5         push       r13
0000000000005dc7         push       r12
0000000000005dc9         mov        r12, rdi
0000000000005dcc         push       rbp
0000000000005dcd         push       rbx
0000000000005dce         mov        rbp, rdx
0000000000005dd1         mov        rbx, rsi
0000000000005dd4         sub        rsp, 0x8
0000000000005dd8         add        rbp, rbx
0000000000005ddb         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000005de0         mov        r13, rax
0000000000005de3         nop        dword [rax+rax]

                     loc_5de8:
0000000000005de8         movzx      ecx, byte [rbx]                             ; CODE XREF=fwrite_lowcase+65
0000000000005deb         mov        rax, qword [r13]
0000000000005def         mov        rsi, r12                                    ; argument "__stream" for method j_fputc
0000000000005df2         add        rbx, 0x1
0000000000005df6         mov        edi, dword [rax+rcx*4]                      ; argument "__c" for method j_fputc
0000000000005df9         call       j_fputc                                     ; fputc
0000000000005dfe         cmp        rbx, rbp
0000000000005e01         jne        loc_5de8

0000000000005e03         add        rsp, 0x8
0000000000005e07         pop        rbx
0000000000005e08         pop        rbp
0000000000005e09         pop        r12
0000000000005e0b         pop        r13
0000000000005e0d         ret
                        ; endp
0000000000005e0e         align      16

                     loc_5e10:
0000000000005e10         ret                                                    ; CODE XREF=fwrite_lowcase+3
                        ; endp
0000000000005e12         align      32                                          ; End of unwind block (FDE at 0x242a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fwrite_uppcase:
0000000000005e20         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x242e0), CODE XREF=__strftime_internal+713, sub_6220+286, sub_65d0+345, sub_65d0+2506
0000000000005e23         je         loc_5e70

0000000000005e25         push       r13
0000000000005e27         push       r12
0000000000005e29         mov        r12, rdi
0000000000005e2c         push       rbp
0000000000005e2d         push       rbx
0000000000005e2e         mov        rbp, rdx
0000000000005e31         mov        rbx, rsi
0000000000005e34         sub        rsp, 0x8
0000000000005e38         add        rbp, rbx
0000000000005e3b         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
0000000000005e40         mov        r13, rax
0000000000005e43         nop        dword [rax+rax]

                     loc_5e48:
0000000000005e48         movzx      ecx, byte [rbx]                             ; CODE XREF=fwrite_uppcase+65
0000000000005e4b         mov        rax, qword [r13]
0000000000005e4f         mov        rsi, r12                                    ; argument "__stream" for method j_fputc
0000000000005e52         add        rbx, 0x1
0000000000005e56         mov        edi, dword [rax+rcx*4]                      ; argument "__c" for method j_fputc
0000000000005e59         call       j_fputc                                     ; fputc
0000000000005e5e         cmp        rbx, rbp
0000000000005e61         jne        loc_5e48

0000000000005e63         add        rsp, 0x8
0000000000005e67         pop        rbx
0000000000005e68         pop        rbp
0000000000005e69         pop        r12
0000000000005e6b         pop        r13
0000000000005e6d         ret
                        ; endp
0000000000005e6e         align      16

                     loc_5e70:
0000000000005e70         ret                                                    ; CODE XREF=fwrite_uppcase+3
                        ; endp
0000000000005e72         align      128                                         ; End of unwind block (FDE at 0x242e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_4B0: int64_t, -1200
        ;    var_4B4: int8_t, -1204
        ;    var_4B8: int32_t, -1208
        ;    var_4C0: int64_t, -1216
        ;    var_4C4: int32_t, -1220
        ;    var_4C5: int8_t, -1221
        ;    var_4D0: int64_t, -1232
        ;    var_4D8: int64_t, -1240
        ;    var_4E0: int64_t, -1248
        ;    var_4E8: int64_t, -1256


                     __strftime_internal:
0000000000005e80         push       r15                                         ; Begin of unwind block (FDE at 0x2431c), CODE XREF=sub_6390+403, sub_72d0+274, fprintftime+45
0000000000005e82         push       r14
0000000000005e84         mov        r10, rsi
0000000000005e87         push       r13
0000000000005e89         push       r12
0000000000005e8b         mov        r12, rdi
0000000000005e8e         push       rbp
0000000000005e8f         push       rbx
0000000000005e90         mov        ebp, r9d
0000000000005e93         sub        rsp, 0x4b8
0000000000005e9a         mov        r13, qword [rdx+0x30]
0000000000005e9e         mov        r14d, dword [rdx+8]
0000000000005ea2         mov        rax, qword [rsp+0x4e8+arg_0]
0000000000005eaa         mov        qword [rsp+0x4e8+var_4E8], rdx
0000000000005eae         mov        dword [rsp+0x4e8+var_4C4], r8d
0000000000005eb3         mov        byte [rsp+0x4e8+var_4C5], cl
0000000000005eb7         mov        qword [rsp+0x4e8+var_4D0], rax
0000000000005ebc         mov        rax, qword [rsp+0x4e8+arg_8]
0000000000005ec4         mov        qword [rsp+0x4e8+var_4D8], rax
0000000000005ec9         mov        rax, qword [fs:0x28]
0000000000005ed2         mov        qword [rsp+0x4e8+var_40], rax
0000000000005eda         xor        eax, eax
0000000000005edc         lea        rax, qword [aWrittenBySSAnd+27]             ; 0x21fe1
0000000000005ee3         test       r13, r13
0000000000005ee6         cmove      r13, rax
0000000000005eea         cmp        r14d, 0xc
0000000000005eee         jle        loc_6048

0000000000005ef4         sub        r14d, 0xc

                     loc_5ef8:
0000000000005ef8         movzx      eax, byte [r10]                             ; CODE XREF=__strftime_internal+468
0000000000005efc         xor        r15d, r15d
0000000000005eff         test       al, al
0000000000005f01         je         loc_5f42

0000000000005f03         cmp        al, 0x25
0000000000005f05         mov        rbx, r10
0000000000005f08         mov        dword [rsp+0x4e8+var_4B8], r14d
0000000000005f0d         mov        qword [rsp+0x4e8+var_4C0], r13
0000000000005f12         movsxd     r10, ebp
0000000000005f15         je         loc_5fab

                     loc_5f1b:
0000000000005f1b         test       r10d, r10d                                  ; CODE XREF=__strftime_internal+293
0000000000005f1e         mov        r14d, 0x0
0000000000005f24         mov        eax, 0x1
0000000000005f29         cmovns     r14, r10
0000000000005f2d         test       r14, r14
0000000000005f30         cmove      r14, rax
0000000000005f34         mov        rax, r15
0000000000005f37         not        rax
0000000000005f3a         cmp        rax, r14
0000000000005f3d         ja         loc_5f70

                     loc_5f3f:
0000000000005f3f         xor        r15d, r15d                                  ; CODE XREF=__strftime_internal+599, sub_6390+448, sub_65d0+1806, sub_65d0+2382, sub_65d0+2840

                     loc_5f42:
0000000000005f42         mov        rdi, qword [rsp+0x4e8+var_40]               ; CODE XREF=__strftime_internal+129, __strftime_internal+289
0000000000005f4a         xor        rdi, qword [fs:0x28]
0000000000005f53         mov        rax, r15
0000000000005f56         jne        loc_7a78

0000000000005f5c         add        rsp, 0x4b8
0000000000005f63         pop        rbx
0000000000005f64         pop        rbp
0000000000005f65         pop        r12
0000000000005f67         pop        r13
0000000000005f69         pop        r14
0000000000005f6b         pop        r15
0000000000005f6d         ret
                        ; endp
0000000000005f6e         align      16

                     loc_5f70:
0000000000005f70         test       r12, r12                                    ; CODE XREF=__strftime_internal+189
0000000000005f73         je         loc_5f8a

0000000000005f75         cmp        r10d, 0x1
0000000000005f79         jg         loc_6160

                     loc_5f7f:
0000000000005f7f         movsx      edi, byte [rbx]                             ; argument "__c" for method j_fputc, CODE XREF=__strftime_internal+774, sub_65d0+1884, sub_77e0+614
0000000000005f82         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_65d0+1825
0000000000005f85         call       j_fputc                                     ; fputc

                     loc_5f8a:
0000000000005f8a         add        r15, r14                                    ; CODE XREF=__strftime_internal+243, sub_65d0+1815
0000000000005f8d         mov        rbp, rbx

                     loc_5f90:
0000000000005f90         movzx      eax, byte [rbp+1]                           ; CODE XREF=__strftime_internal+721, sub_65d0+2517
0000000000005f94         lea        rbx, qword [rbp+1]
0000000000005f98         mov        r10, 0xffffffffffffffff
0000000000005f9f         test       al, al
0000000000005fa1         je         loc_5f42

0000000000005fa3         cmp        al, 0x25
0000000000005fa5         jne        loc_5f1b

                     loc_5fab:
0000000000005fab         movzx      eax, byte [rsp+0x4e8+var_4C5]               ; CODE XREF=__strftime_internal+149
0000000000005fb0         xor        r14d, r14d
0000000000005fb3         mov        dword [rsp+0x4e8+var_4E0], 0x0
0000000000005fbb         mov        byte [rsp+0x4e8+var_4B4], al
0000000000005fbf         mov        eax, 0x1

                     loc_5fc4:
0000000000005fc4         add        rbx, 0x1                                    ; CODE XREF=__strftime_internal+501, __strftime_internal+518, __strftime_internal+789
0000000000005fc8         movsx      r11d, byte [rbx]
0000000000005fcc         lea        ecx, dword [r11-0x23]
0000000000005fd0         mov        r13d, r11d
0000000000005fd3         mov        edi, r11d
0000000000005fd6         cmp        cl, 0x3c
0000000000005fd9         ja         loc_600f

0000000000005fdb         mov        rdx, rax
0000000000005fde         movabs     rsi, 0x1000000000002500
0000000000005fe8         shl        rdx, cl
0000000000005feb         test       rdx, rsi
0000000000005fee         jne        loc_6070

0000000000005ff4         test       cl, cl
0000000000005ff6         je         loc_6080

0000000000005ffc         movabs     rsi, 0x800000000000000
0000000000006006         test       rdx, rsi
0000000000006009         jne        loc_6190

                     loc_600f:
000000000000600f         lea        eax, dword [r11-0x30]                       ; CODE XREF=__strftime_internal+345
0000000000006013         cmp        eax, 0x9
0000000000006016         jbe        loc_61a0

                     loc_601c:
000000000000601c         cmp        r13b, 0x45                                  ; CODE XREF=__strftime_internal+853, __strftime_internal+916
0000000000006020         je         loc_6060

0000000000006022         cmp        r13b, 0x4f
0000000000006026         je         loc_6060

0000000000006028         xor        r11d, r11d

                     loc_602b:
000000000000602b         cmp        r13b, 0x7a                                  ; CODE XREF=__strftime_internal+491
000000000000602f         ja         loc_6090

0000000000006031         lea        rsi, qword [aMdy+12]                        ; 0x21738
0000000000006038         movzx      eax, r13b
000000000000603c         movsxd     rax, dword [rsi+rax*4]
0000000000006040         add        rax, rsi
0000000000006043         jmp        rax
                        ; endp
0000000000006045         align      8

                     loc_6048:
0000000000006048         test       r14d, r14d                                  ; CODE XREF=__strftime_internal+110
000000000000604b         mov        eax, 0xc
0000000000006050         cmove      r14d, eax
0000000000006054         jmp        loc_5ef8
0000000000006059         align      32

                     loc_6060:
0000000000006060         movsx      edi, byte [rbx+1]                           ; CODE XREF=__strftime_internal+416, __strftime_internal+422
0000000000006064         add        rbx, 0x1
0000000000006068         mov        r13d, edi
000000000000606b         jmp        loc_602b
000000000000606d         align      16

                     loc_6070:
0000000000006070         mov        dword [rsp+0x4e8+var_4E0], r11d             ; CODE XREF=__strftime_internal+366
0000000000006075         jmp        loc_5fc4
000000000000607a         align      128

                     loc_6080:
0000000000006080         mov        r14d, 0x1                                   ; CODE XREF=__strftime_internal+374
0000000000006086         jmp        loc_5fc4

                     loc_608b:
000000000000608b         mov        rbx, qword [rsp+56]                         ; CODE XREF=sub_65d0+1697
                        ; endp

                     loc_6090:
0000000000006090         lea        rax, qword [rbx-1]                          ; CODE XREF=__strftime_internal+431, sub_6390+285, sub_6390+478, sub_65d0+853, sub_65d0+906, sub_65d0+1288, sub_65d0+1315, sub_65d0+1342, sub_65d0+1427, sub_65d0+1569, sub_65d0+1601
0000000000006094         mov        r13d, 0x1

                     loc_609a:
000000000000609a         mov        rdx, rax                                    ; CODE XREF=__strftime_internal+553
000000000000609d         lea        rax, qword [rax-1]
00000000000060a1         add        r13d, 0x1
00000000000060a5         cmp        byte [rax+1], 0x25
00000000000060a9         jne        loc_609a

00000000000060ab         test       r10d, r10d
00000000000060ae         mov        eax, 0x0
00000000000060b3         movsxd     r13, r13d
00000000000060b6         cmovns     eax, r10d
00000000000060ba         mov        qword [rsp+0x4e8+var_4B0], rdx
00000000000060bf         mov        r14, r13
00000000000060c2         cdqe
00000000000060c4         mov        rdx, r15
00000000000060c7         mov        rbp, rbx
00000000000060ca         cmp        rax, r13
00000000000060cd         not        rdx
00000000000060d0         cmovae     r14, rax
00000000000060d4         cmp        rdx, r14                                    ; CODE XREF=sub_7730+37
00000000000060d7         jbe        loc_5f3f

00000000000060dd         test       r12, r12
00000000000060e0         je         loc_614e

00000000000060e2         cmp        r13, rax
00000000000060e5         jae        loc_6133

00000000000060e7         mov        eax, dword [rsp+0x4e8+var_4E0]
00000000000060eb         movsxd     rbx, r10d
00000000000060ee         sub        rbx, r13
00000000000060f1         cmp        eax, 0x30
00000000000060f4         je         loc_7323

00000000000060fa         cmp        eax, 0x2b
00000000000060fd         je         loc_7323

0000000000006103         xor        edx, edx
0000000000006105         test       rbx, rbx
0000000000006108         je         loc_6133

000000000000610a         mov        qword [rsp+0x4e8+var_4E0], rbp
000000000000610f         mov        rbp, rdx
0000000000006112         nop        word [rax+rax]

                     loc_6118:
0000000000006118         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=__strftime_internal+684
000000000000611b         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
0000000000006120         add        rbp, 0x1
0000000000006124         call       j_fputc                                     ; fputc
0000000000006129         cmp        rbx, rbp
000000000000612c         jne        loc_6118

                     loc_612e:
000000000000612e         mov        rbp, qword [rsp+0x4e8+var_4E0]              ; CODE XREF=sub_72d0+134

                     loc_6133:
0000000000006133         cmp        byte [rsp+0x4e8+var_4B4], 0x0               ; CODE XREF=__strftime_internal+613, __strftime_internal+648, sub_72d0+86
0000000000006138         je         loc_7268

000000000000613e         mov        rsi, qword [rsp+0x4e8+var_4B0]
0000000000006143         mov        rdx, r13
0000000000006146         mov        rdi, r12
0000000000006149         call       fwrite_uppcase                              ; fwrite_uppcase

                     loc_614e:
000000000000614e         add        r15, r14                                    ; CODE XREF=__strftime_internal+608, sub_7170+269
0000000000006151         jmp        loc_5f90
0000000000006156         align      32

                     loc_6160:
0000000000006160         lea        r13, qword [r10-1]                          ; CODE XREF=__strftime_internal+249
0000000000006164         xor        ebp, ebp
0000000000006166         nop        word [cs:rax+rax]

                     loc_6170:
0000000000006170         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=__strftime_internal+772
0000000000006173         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
0000000000006178         add        rbp, 0x1
000000000000617c         call       j_fputc                                     ; fputc
0000000000006181         cmp        r13, rbp
0000000000006184         jne        loc_6170

0000000000006186         jmp        loc_5f7f
000000000000618b         align      16

                     loc_6190:
0000000000006190         mov        byte [rsp+0x4e8+var_4B4], 0x1               ; CODE XREF=__strftime_internal+393
0000000000006195         jmp        loc_5fc4
000000000000619a         align      32

                     loc_61a0:
00000000000061a0         xor        r10d, r10d                                  ; CODE XREF=__strftime_internal+406

                     loc_61a3:
00000000000061a3         movsx      r11d, byte [rbx+1]                          ; CODE XREF=__strftime_internal+848
00000000000061a8         cmp        r10d, 0xccccccc
00000000000061af         lea        rcx, qword [rbx+1]
00000000000061b3         mov        r13d, r11d
00000000000061b6         lea        eax, dword [r11-0x30]
00000000000061ba         jg         loc_61e5

00000000000061bc         movsx      edx, byte [rbx]
00000000000061bf         je         loc_61e0

                     loc_61c1:
00000000000061c1         lea        esi, dword [r10+r10*4]                      ; CODE XREF=__strftime_internal+867
00000000000061c5         mov        rbx, rcx
00000000000061c8         lea        r10d, dword [rdx+rsi*2-0x30]

                     loc_61cd:
00000000000061cd         cmp        eax, 0x9                                    ; CODE XREF=__strftime_internal+896
00000000000061d0         jbe        loc_61a3

00000000000061d2         mov        edi, r11d
00000000000061d5         jmp        loc_601c
00000000000061da         align      32

                     loc_61e0:
00000000000061e0         cmp        dl, 0x37                                    ; CODE XREF=__strftime_internal+831
00000000000061e3         jle        loc_61c1

                     loc_61e5:
00000000000061e5         cmp        eax, 0x9                                    ; CODE XREF=__strftime_internal+826
00000000000061e8         ja         loc_6208

00000000000061ea         movsx      r11d, byte [rbx+2]
00000000000061ef         mov        r10d, 0x7fffffff
00000000000061f5         add        rbx, 0x2
00000000000061f9         mov        r13d, r11d
00000000000061fc         lea        eax, dword [r11-0x30]
0000000000006200         jmp        loc_61cd
0000000000006202         align      8

                     loc_6208:
0000000000006208         mov        edi, r11d                                   ; CODE XREF=__strftime_internal+872
000000000000620b         mov        rbx, rcx
000000000000620e         mov        r10d, 0x7fffffff
0000000000006214         jmp        loc_601c
0000000000006219         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_98: int8_t, 160
        ;    arg_95: int8_t, 157
        ;    arg_93: int16_t, 155
        ;    arg_50: int, 88
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_2C: int8_t, 52
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    ret_addr: int64_t, 0


                     sub_6220:
0000000000006220         cmp        r11d, 0x4f
0000000000006224         je         __strftime_internal+528

000000000000622a         xor        r14d, r14d                                  ; CODE XREF=sub_65d0+1756
000000000000622d         mov        ebp, j___ctype_get_mb_cur_max               ; CODE XREF=sub_6390+328, sub_65d0+1745, sub_65d0+2971, sub_72d0+357
0000000000006232         test       r11d, r11d
0000000000006235         mov        word [rsp+arg_93], bp
000000000000623d         jne        loc_7a90

0000000000006243         lea        rdx, qword [rsp+arg_93]
000000000000624b         mov        rbp, rbx
000000000000624e         lea        rax, qword [rdx+2]

                     loc_6252:
0000000000006252         mov        byte [rax], r13b                            ; CODE XREF=sub_6390+276
0000000000006255         mov        byte [rax+1], 0x0
0000000000006259         lea        rax, qword [rsp+arg_98]
0000000000006261         mov        rcx, qword [rsp+ret_addr]                   ; argument "__tp" for method j_strftime
0000000000006265         mov        esi, 0x400                                  ; argument "__maxsize" for method j_strftime
000000000000626a         mov        dword [rsp+arg_38], r10d
000000000000626f         mov        rdi, rax                                    ; argument "__s" for method j_strftime
0000000000006272         mov        dword [rsp+arg_50], r11d
0000000000006277         mov        qword [rsp+arg_30], rax
000000000000627c         call       j_strftime                                  ; strftime
0000000000006281         test       rax, rax
0000000000006284         je         __strftime_internal+272

000000000000628a         movsxd     r10, dword [rsp+arg_38]
000000000000628f         lea        r13, qword [rax-1]
0000000000006293         mov        eax, 0x0
0000000000006298         mov        rdx, r15
000000000000629b         not        rdx
000000000000629e         test       r10d, r10d
00000000000062a1         cmovns     rax, r10
00000000000062a5         cmp        r13, rax
00000000000062a8         mov        rdi, rax
00000000000062ab         cmovae     rdi, r13
00000000000062af         cmp        rdx, rdi
00000000000062b2         mov        qword [rsp+arg_38], rdi
00000000000062b7         jbe        __strftime_internal+191

00000000000062bd         test       r12, r12
00000000000062c0         je         loc_6343

00000000000062c6         mov        r11d, dword [rsp+arg_50]
00000000000062cb         test       r11d, r11d
00000000000062ce         jne        loc_631b

00000000000062d0         cmp        r13, rax
00000000000062d3         jae        loc_631b

00000000000062d5         mov        eax, dword [rsp+arg_0]
00000000000062d9         movsxd     rbx, r10d
00000000000062dc         sub        rbx, r13
00000000000062df         cmp        eax, 0x30
00000000000062e2         je         loc_72f0

00000000000062e8         cmp        eax, 0x2b
00000000000062eb         je         loc_72f0

00000000000062f1         xor        edx, edx
00000000000062f3         test       rbx, rbx
00000000000062f6         je         loc_631b

00000000000062f8         mov        qword [rsp+arg_0], rbp
00000000000062fd         mov        rbp, rdx

                     loc_6300:
0000000000006300         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_6220+244
0000000000006303         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
0000000000006308         add        rbp, 0x1
000000000000630c         call       j_fputc                                     ; fputc
0000000000006311         cmp        rbx, rbp
0000000000006314         jne        loc_6300

                     loc_6316:
0000000000006316         mov        rbp, qword [rsp+arg_0]                      ; CODE XREF=sub_72d0+78

                     loc_631b:
000000000000631b         test       r14b, r14b                                  ; CODE XREF=sub_6220+174, sub_6220+179, sub_6220+214, sub_72d0+35
000000000000631e         jne        loc_72b0

0000000000006324         cmp        byte [rsp+arg_2C], 0x0
0000000000006329         je         loc_7288

000000000000632f         mov        rsi, qword [rsp+arg_30]
0000000000006334         mov        rdx, r13
0000000000006337         mov        rdi, r12
000000000000633a         add        rsi, 0x1
000000000000633e         call       fwrite_uppcase                              ; fwrite_uppcase

                     loc_6343:
0000000000006343         add        r15, qword [rsp+arg_38]                     ; CODE XREF=sub_6220+160, sub_7170+305, sub_7170+340
0000000000006348         jmp        __strftime_internal+272
                        ; endp
000000000000634d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_93: int16_t, 155
        ;    arg_2C: int8_t, 52


                     sub_6350:
0000000000006350         test       r11d, r11d
0000000000006353         jne        __strftime_internal+528

0000000000006359         movzx      eax, byte [rsp+arg_2C]
000000000000635e         test       r14b, r14b
0000000000006361         lea        rdx, qword [rsp+arg_93]
0000000000006369         mov        rbp, rbx
000000000000636c         cmovne     eax, r14d
0000000000006370         xor        r14d, r14d
0000000000006373         xor        r11d, r11d
0000000000006376         mov        byte [rsp+arg_2C], al
000000000000637a         mov        eax, j___ctype_get_mb_cur_max
000000000000637f         mov        word [rsp+arg_93], ax
0000000000006387         lea        rax, qword [rdx+2]
000000000000638b         jmp        sub_6220+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6390:
0000000000006390         test       r10d, r10d
0000000000006393         mov        r13d, 0x0
0000000000006399         mov        eax, 0x1
000000000000639e         cmovns     r13d, r10d
00000000000063a2         movsxd     r13, r13d
00000000000063a5         test       r13, r13
00000000000063a8         cmove      r13, rax
00000000000063ac         mov        rax, r15
00000000000063af         not        rax
00000000000063b2         cmp        rax, r13
00000000000063b5         jbe        __strftime_internal+191

00000000000063bb         test       r12, r12
00000000000063be         je         loc_655f

00000000000063c4         cmp        r10d, 0x1
00000000000063c8         jle        loc_63ff

00000000000063ca         mov        eax, dword [rsp+arg_0]
00000000000063ce         movsxd     r10, r10d
00000000000063d1         lea        r14, qword [r10-1]
00000000000063d5         cmp        eax, 0x30
00000000000063d8         je         loc_78af

00000000000063de         xor        ebp, ebp
00000000000063e0         cmp        eax, 0x2b
00000000000063e3         je         loc_78af

                     loc_63e9:
00000000000063e9         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_6390+109
00000000000063ec         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
00000000000063f1         add        rbp, 0x1
00000000000063f5         call       j_fputc                                     ; fputc
00000000000063fa         cmp        r14, rbp
00000000000063fd         jne        loc_63e9

                     loc_63ff:
00000000000063ff         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_6390+56, sub_77e0+231
0000000000006402         mov        edi, 0x9                                    ; argument "__c" for method j_fputc
0000000000006407         call       j_fputc                                     ; fputc
000000000000640c         jmp        loc_655f
0000000000006411         mov        rax, qword [rsp]
0000000000006415         mov        edx, 0x92492493
000000000000641a         mov        esi, 0x1
000000000000641f         mov        eax, dword [rax+0x18]
0000000000006422         lea        ecx, dword [rax+6]
0000000000006425         mov        dword [rsp+0x38], eax
0000000000006429         mov        eax, ecx
000000000000642b         imul       edx
000000000000642d         lea        eax, dword [rdx+rcx]
0000000000006430         mov        edx, ecx
0000000000006432         sar        edx, 0x1f
0000000000006435         sar        eax, 0x2
0000000000006438         sub        eax, edx
000000000000643a         lea        edx, dword [rax*8]
0000000000006441         sub        edx, eax
0000000000006443         sub        ecx, edx
0000000000006445         add        ecx, 0x1
0000000000006448         nop        dword [rax+rax]

                     loc_6450:
0000000000006450         mov        eax, ecx                                    ; CODE XREF=sub_6390+303, sub_6390+495, sub_65d0+897, sub_65d0+1306, sub_65d0+1333, sub_65d0+1418, sub_65d0+1442, sub_65d0+2616, sub_65d0+2651, sub_65d0+2665, sub_7730+18
0000000000006452         xor        r8d, r8d
0000000000006455         xor        r9d, r9d
0000000000006458         shr        eax, 0x1f
000000000000645b         mov        r13d, eax
000000000000645e         mov        eax, ecx
0000000000006460         not        eax
0000000000006462         shr        eax, 0x1f
                        ; endp

                     loc_6465:
0000000000006465         cmp        r11d, 0x4f                                  ; CODE XREF=sub_65d0+2126, sub_65d0+2714, sub_65d0+2798, sub_7730+137, sub_77e0+202, sub_77e0+394
0000000000006469         jne        loc_7180

000000000000646f         test       al, al
0000000000006471         je         loc_7180

0000000000006477         mov        r13d, edi
000000000000647a         mov        edx, j___ctype_get_mb_cur_max               ; CODE XREF=sub_65d0+374, sub_72d0+341
000000000000647f         xor        r14d, r14d
0000000000006482         mov        word [rsp+155], dx
                        ; endp

                     loc_648a:
000000000000648a         lea        rdx, qword [rsp+arg_93]                     ; CODE XREF=sub_77e0+690
0000000000006492         mov        byte [rsp+arg_95], r11b
000000000000649a         mov        rbp, rbx
000000000000649d         mov        r11d, esi
00000000000064a0         lea        rax, qword [rdx+3]
00000000000064a4         jmp        loc_6252
00000000000064a9         cmp        r11d, 0x45
00000000000064ad         je         __strftime_internal+528
00000000000064b3         mov        rax, qword [rsp]
00000000000064b7         mov        esi, 0x1
00000000000064bc         mov        ecx, dword [rax+0x18]
00000000000064bf         jmp        sub_6390+192
00000000000064c1         mov        eax, 0x1
00000000000064c6         test       r14b, r14b                                  ; CODE XREF=sub_65d0+2934
00000000000064c9         jne        sub_72d0+346
00000000000064cf         mov        r14d, eax
00000000000064d2         mov        r13d, 0x70
00000000000064d8         jmp        sub_6220+13
00000000000064dd         lea        rax, qword [aYmdHm+9]                       ; 0x1fc1c
00000000000064e4         mov        r14d, 0xffffffff
00000000000064ea         mov        qword [rsp+0x38], rax
00000000000064ef         movzx      ebp, byte [rsp+0x34]                        ; CODE XREF=sub_65d0+844, sub_65d0+1593, sub_65d0+1656, sub_77e0+427
00000000000064f4         mov        dword [rsp+0x40], r10d
00000000000064f9         sub        rsp, 0x8
00000000000064fd         mov        eax, dword [rsp+0x508]
0000000000006504         xor        edi, edi
0000000000006506         mov        r9d, r14d
0000000000006509         push       rax
000000000000650a         push       qword [rsp+0x20]
000000000000650e         mov        ecx, ebp
0000000000006510         push       qword [rsp+0x30]
0000000000006514         mov        rdx, qword [rsp+0x20]
0000000000006519         mov        r8d, dword [rsp+0x28]
000000000000651e         mov        rsi, qword [rsp+0x58]
0000000000006523         call       __strftime_internal                         ; __strftime_internal
0000000000006528         add        rsp, 0x20
000000000000652c         movsxd     r10, dword [rsp+0x40]
0000000000006531         mov        edx, 0x0
0000000000006536         mov        rcx, r15
0000000000006539         not        rcx
000000000000653c         test       r10d, r10d
000000000000653f         cmovns     rdx, r10
0000000000006543         cmp        rax, rdx
0000000000006546         mov        r13, rdx
0000000000006549         cmovae     r13, rax
000000000000654d         cmp        rcx, r13
0000000000006550         jbe        __strftime_internal+191
0000000000006556         test       r12, r12
0000000000006559         jne        sub_72d0+139

                     loc_655f:
000000000000655f         add        r15, r13                                    ; CODE XREF=sub_6390+46, sub_6390+124, sub_65d0+2849, sub_65d0+2927, sub_72d0+283
0000000000006562         mov        rbp, rbx
0000000000006565         jmp        __strftime_internal+272
                        ; endp
000000000000656a         cmp        r11d, 0x45
000000000000656e         je         __strftime_internal+528
0000000000006574         mov        rax, qword [rsp]
0000000000006578         mov        esi, 0x2
000000000000657d         mov        ecx, dword [rax]
000000000000657f         jmp        sub_6390+192
0000000000006584         mov        rax, qword [rsp]
0000000000006588         mov        rdi, qword [rsp+0x10]
000000000000658d         lea        rsi, qword [rsp+0x60]
0000000000006592         mov        dword [rsp+0x40], r10d
0000000000006597         lea        r14, qword [rsp+0xb7]
000000000000659f         movdqu     xmm0, xmmword [rax]
00000000000065a3         movaps     xmmword [rsp+0x60], xmm0
00000000000065a8         movdqu     xmm0, xmmword [rax+0x10]
00000000000065ad         movaps     xmmword [rsp+0x70], xmm0
00000000000065b2         movdqu     xmm0, xmmword [rax+0x20]
00000000000065b7         mov        rax, qword [rax+0x30]
00000000000065bb         movaps     xmmword [rsp+0x80], xmm0
00000000000065c3         mov        qword [rsp+0x90], rax
00000000000065cb         call       mktime_z                                    ; mktime_z


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_65d0:
00000000000065d0         mov        r10d, dword [rsp+64]
00000000000065d5         mov        rsi, rax
00000000000065d8         mov        rcx, rax
00000000000065db         lea        rax, qword [rsp+160]
00000000000065e3         movabs     r8, 0x6666666666666667
00000000000065ed         mov        edi, 0x30
00000000000065f2         mov        qword [rsp+56], rax
00000000000065f7         nop        word [rax+rax]

                     loc_6600:
0000000000006600         mov        rax, rcx                                    ; CODE XREF=sub_65d0+110
0000000000006603         imul       r8
0000000000006606         mov        rax, rcx
0000000000006609         sar        rax, 0x3f
000000000000660d         sar        rdx, 0x2
0000000000006611         sub        rdx, rax
0000000000006614         mov        rax, rdx
0000000000006617         lea        rdx, qword [rdx+rdx*4]
000000000000661b         add        rdx, rdx
000000000000661e         sub        rcx, rdx
0000000000006621         mov        rdx, rcx
0000000000006624         mov        rcx, rax
0000000000006627         mov        eax, edi
0000000000006629         sub        eax, edx
000000000000662b         add        edx, 0x30
000000000000662e         test       rsi, rsi
0000000000006631         cmovs      edx, eax
0000000000006634         sub        r14, 0x1
0000000000006638         test       rcx, rcx
000000000000663b         mov        byte [r14], dl
000000000000663e         jne        loc_6600

0000000000006640         test       r10d, r10d
0000000000006643         mov        eax, 0x1
0000000000006648         cmovg      eax, r10d
000000000000664c         test       rsi, rsi
000000000000664f         mov        dword [rsp+88], eax
0000000000006653         js         loc_7190

                     loc_6659:
0000000000006659         mov        rax, qword [rsp+56]
000000000000665e         mov        rdx, r15
0000000000006661         not        rdx
0000000000006664         add        rax, 0x17
0000000000006668         sub        rax, r14
000000000000666b         cmp        dword [rsp+8], 0x2d
0000000000006670         mov        qword [rsp+64], rax
0000000000006675         je         loc_668a

0000000000006677         mov        r13d, dword [rsp+88]
000000000000667c         sub        r13d, dword [rsp+64]
0000000000006681         test       r13d, r13d
0000000000006684         jg         loc_77be

                     loc_668a:
000000000000668a         test       r10d, r10d                                  ; CODE XREF=sub_65d0+165
000000000000668d         mov        ecx, 0x0
0000000000006692         mov        rbp, rbx
0000000000006695         cmovns     ecx, r10d
0000000000006699         movsxd     r13, ecx

                     loc_669c:
000000000000669c         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_65d0+821, sub_7170+240, sub_72d0+523, sub_72d0+712, sub_72d0+975
00000000000066a1         cmp        rax, r13
00000000000066a4         mov        rbx, rax
00000000000066a7         cmovb      rbx, r13
00000000000066ab         cmp        rbx, rdx
00000000000066ae         jae        __strftime_internal+191

00000000000066b4         test       r12, r12
00000000000066b7         je         sub_65d0+350

00000000000066b9         mov        edx, dword [rsp+88]
00000000000066bd         test       edx, edx
00000000000066bf         jne        loc_6713

00000000000066c1         cmp        rax, r13
00000000000066c4         jae        loc_6713

00000000000066c6         movsxd     r13, r10d
00000000000066c9         sub        r13, rax
00000000000066cc         mov        eax, dword [rsp+8]
00000000000066d0         cmp        eax, 0x30
00000000000066d3         je         loc_73f0

00000000000066d9         cmp        eax, 0x2b
00000000000066dc         je         loc_73f0

00000000000066e2         xor        edx, edx
00000000000066e4         test       r13, r13
00000000000066e7         je         loc_6713

00000000000066e9         mov        qword [rsp+8], rbx
00000000000066ee         mov        rbx, rdx
00000000000066f1         nop        dword [rax]

                     loc_66f8:
00000000000066f8         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_65d0+316
00000000000066fb         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
0000000000006700         add        rbx, 0x1
0000000000006704         call       j_fputc                                     ; fputc
0000000000006709         cmp        r13, rbx
000000000000670c         jne        loc_66f8

                     loc_670e:
000000000000670e         mov        rbx, qword [rsp+8]                          ; CODE XREF=sub_72d0+334

                     loc_6713:
0000000000006713         cmp        byte [rsp+52], 0x0                          ; CODE XREF=sub_65d0+239, sub_65d0+244, sub_65d0+279, sub_72d0+291
0000000000006718         je         sub_72d0                                    ; sub_72d0

000000000000671e         mov        rdx, qword [rsp+64]                         ; argument #3 for method fwrite_uppcase
0000000000006723         mov        rsi, r14                                    ; argument #2 for method fwrite_uppcase
0000000000006726         mov        rdi, r12                                    ; argument #1 for method fwrite_uppcase
0000000000006729         call       fwrite_uppcase                              ; fwrite_uppcase
                        ; endp

                     loc_672e:
000000000000672e         add        r15, rbx                                    ; CODE XREF=sub_72d0+21
0000000000006731         jmp        __strftime_internal+272
                        ; endp
0000000000006736         mov        rax, qword [rsp]
000000000000673a         cmp        r11d, 0x4f
000000000000673e         mov        esi, 0x1
0000000000006743         mov        eax, dword [rax+0x10]
0000000000006746         je         sub_6390+234
000000000000674c         lea        edx, dword [rax+rax*4]
000000000000674f         xor        r9d, r9d
0000000000006752         xor        r13d, r13d
0000000000006755         xor        r8d, r8d
0000000000006758         lea        ecx, dword [rax+rdx*2]
000000000000675b         sar        ecx, 0x5
000000000000675e         add        ecx, 0x1
0000000000006761         nop        dword [rax]

                     loc_6768:
0000000000006768         lea        rax, qword [rsp+160]                        ; CODE XREF=sub_7170+26
0000000000006770         lea        rdi, qword [rsp+183]
0000000000006778         mov        r11d, 0xcccccccd
000000000000677e         mov        qword [rsp+56], rax
0000000000006783         nop        dword [rax+rax]

                     loc_6788:
0000000000006788         test       r8b, 0x1                                    ; CODE XREF=sub_65d0+498
000000000000678c         lea        r14, qword [rdi-1]
0000000000006790         je         loc_67a0

0000000000006792         lea        rax, qword [rdi-2]
0000000000006796         mov        byte [rdi-1], 0x3a
000000000000679a         mov        rdi, r14
000000000000679d         mov        r14, rax

                     loc_67a0:
00000000000067a0         mov        eax, ecx                                    ; CODE XREF=sub_65d0+448
00000000000067a2         sar        r8d, 0x1
00000000000067a5         mul        r11d
00000000000067a8         shr        edx, 0x3
00000000000067ab         lea        eax, dword [rdx+rdx*4]
00000000000067ae         add        eax, eax
00000000000067b0         sub        ecx, eax
00000000000067b2         mov        eax, r8d
00000000000067b5         add        ecx, 0x30
00000000000067b8         or         eax, edx
00000000000067ba         mov        byte [rdi-1], cl
00000000000067bd         mov        ecx, edx
00000000000067bf         mov        rdi, r14
00000000000067c2         jne        loc_6788

00000000000067c4         cmp        r10d, esi
00000000000067c7         cmovge     esi, r10d
00000000000067cb         test       r13b, r13b
00000000000067ce         mov        dword [rsp+88], esi
00000000000067d2         jne        sub_7170+32

00000000000067d8         test       r9b, r9b
00000000000067db         je         sub_65d0+137

00000000000067e1         cmp        dword [rsp+8], 0x2d
00000000000067e6         mov        ebp, 0x2b
00000000000067eb         je         loc_759d

                     loc_67f1:
00000000000067f1         mov        rax, qword [rsp+56]                         ; CODE XREF=sub_7170+42
00000000000067f6         mov        rdx, r15
00000000000067f9         not        rdx
00000000000067fc         add        rax, 0x17
0000000000006800         sub        rax, r14
0000000000006803         mov        rdi, rax
0000000000006806         mov        qword [rsp+64], rax
000000000000680b         mov        eax, dword [rsp+88]
000000000000680f         sub        eax, 0x1
0000000000006812         sub        eax, edi
0000000000006814         test       eax, eax
0000000000006816         mov        r13d, eax
0000000000006819         jle        loc_74e0

000000000000681f         cmp        dword [rsp+8], 0x5f
0000000000006824         je         loc_743c

000000000000682a         movsxd     rax, dword [rsp+88]
000000000000682f         cmp        rax, rdx
0000000000006832         mov        rdi, rax
0000000000006835         jae        __strftime_internal+191

000000000000683b         test       r10d, r10d
000000000000683e         mov        eax, 0x0
0000000000006843         mov        ecx, 0x1
0000000000006848         cmovns     eax, r10d
000000000000684c         cdqe
000000000000684e         test       rax, rax
0000000000006851         cmovne     rcx, rax
0000000000006855         cmp        rcx, rdx
0000000000006858         mov        qword [rsp+72], rcx
000000000000685d         jae        __strftime_internal+191

0000000000006863         test       r12, r12
0000000000006866         je         loc_68cc

0000000000006868         test       edi, edi
000000000000686a         jne        loc_68c0

000000000000686c         cmp        rax, 0x1
0000000000006870         jbe        loc_68c0

0000000000006872         mov        edi, dword [rsp+8]
0000000000006876         movsxd     r10, r10d
0000000000006879         lea        rax, qword [r10-1]
000000000000687d         cmp        edi, 0x30
0000000000006880         mov        qword [rsp+56], rax
0000000000006885         je         loc_7990

000000000000688b         cmp        edi, 0x2b
000000000000688e         je         loc_7990

0000000000006894         xor        edx, edx
0000000000006896         test       rax, rax
0000000000006899         je         loc_68c0

000000000000689b         mov        qword [rsp+80], rbx
00000000000068a0         mov        rbx, rdx

                     loc_68a3:
00000000000068a3         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_65d0+745
00000000000068a6         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
00000000000068ab         add        rbx, 0x1
00000000000068af         call       j_fputc                                     ; fputc
00000000000068b4         cmp        qword [rsp+56], rbx
00000000000068b9         jne        loc_68a3

                     loc_68bb:
00000000000068bb         mov        rbx, qword [rsp+80]                         ; CODE XREF=sub_77e0+478

                     loc_68c0:
00000000000068c0         movsx      edi, bpl                                    ; argument "__c" for method j_fputc, CODE XREF=sub_65d0+666, sub_65d0+672, sub_65d0+713, sub_77e0+438
00000000000068c4         mov        rsi, r12                                    ; argument "__stream" for method j_fputc
00000000000068c7         call       j_fputc                                     ; fputc

                     loc_68cc:
00000000000068cc         add        r15, qword [rsp+72]                         ; CODE XREF=sub_65d0+662

                     loc_68d1:
00000000000068d1         mov        rbp, rbx                                    ; CODE XREF=sub_7730+161
00000000000068d4         movsxd     rbx, r13d
00000000000068d7         xor        r13d, r13d
00000000000068da         test       r12, r12
00000000000068dd         je         loc_68f6

00000000000068df         nop

                     loc_68e0:
00000000000068e0         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_65d0+804
00000000000068e3         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
00000000000068e8         add        r13, 0x1
00000000000068ec         call       j_fputc                                     ; fputc
00000000000068f1         cmp        r13, rbx
00000000000068f4         jne        loc_68e0

                     loc_68f6:
00000000000068f6         add        r15, rbx                                    ; CODE XREF=sub_65d0+781
00000000000068f9         xor        r13d, r13d
00000000000068fc         xor        r10d, r10d
00000000000068ff         mov        rdx, r15
0000000000006902         not        rdx
0000000000006905         jmp        loc_669c
000000000000690a         lea        rax, qword [aHms]                           ; "%H:%M:%S"
0000000000006911         mov        r14d, 0xffffffff
0000000000006917         mov        qword [rsp+0x38], rax
000000000000691c         jmp        sub_6390+351
0000000000006921         cmp        r11d, 0x45
0000000000006925         je         __strftime_internal+528
000000000000692b         mov        rax, qword [rsp]
000000000000692f         mov        edx, 0x92492493
0000000000006934         mov        esi, dword [rax+0x1c]
0000000000006937         sub        esi, dword [rax+0x18]
000000000000693a         add        esi, 0x7
000000000000693d         mov        eax, esi
000000000000693f         imul       edx
0000000000006941         lea        ecx, dword [rdx+rsi]                        ; CODE XREF=sub_65d0+2208
0000000000006944         sar        esi, 0x1f
0000000000006947         sar        ecx, 0x2
000000000000694a         sub        ecx, esi
000000000000694c         mov        esi, 0x2
0000000000006951         jmp        sub_6390+192
0000000000006956         cmp        r11d, 0x45
000000000000695a         je         __strftime_internal+528
0000000000006960         mov        rcx, qword [rsp]
0000000000006964         mov        edx, 0x92492493
0000000000006969         mov        esi, dword [rcx+0x14]                       ; DATA XREF=leaf_optimization+64, fts_build+739
000000000000696c         mov        r8d, dword [rcx+0x1c]
0000000000006970         mov        r14d, dword [rcx+0x18]
0000000000006974         mov        eax, esi
0000000000006976         mov        ecx, r8d
0000000000006979         sar        eax, 0x1f
000000000000697c         sub        ecx, r14d
000000000000697f         add        ecx, 0x17e
0000000000006985         and        eax, 0x190
000000000000698a         lea        r9d, dword [rsi+rax-0x64]
000000000000698f         mov        eax, ecx
0000000000006991         imul       edx
0000000000006993         lea        eax, dword [rdx+rcx]
0000000000006996         mov        edx, ecx
0000000000006998         sar        edx, 0x1f
000000000000699b         sar        eax, 0x2
000000000000699e         sub        eax, edx
00000000000069a0         lea        edx, dword [rax*8]
00000000000069a7         sub        edx, eax
00000000000069a9         mov        eax, r8d
00000000000069ac         sub        eax, ecx
00000000000069ae         lea        ebp, dword [rax+rdx+3]
00000000000069b2         test       ebp, ebp
00000000000069b4         js         sub_77e0                                    ; sub_77e0
00000000000069ba         test       r9b, 0x3
00000000000069be         mov        eax, 0x16d
00000000000069c3         jne        sub_65d0+1082
00000000000069c5         mov        eax, r9d
00000000000069c8         mov        edx, 0x51eb851f
00000000000069cd         mov        ecx, r9d
00000000000069d0         imul       edx
00000000000069d2         sar        ecx, 0x1f
00000000000069d5         mov        eax, 0x16e
00000000000069da         mov        dword [rsp+0x38], edx
00000000000069de         sar        edx, 0x5
00000000000069e1         sub        edx, ecx
00000000000069e3         imul       edx, edx, 0x64
00000000000069e6         cmp        r9d, edx
00000000000069e9         jne        sub_65d0+1082
00000000000069eb         mov        edx, dword [rsp+0x38]
00000000000069ef         sar        edx, 0x7
00000000000069f2         mov        eax, edx
00000000000069f4         sub        eax, ecx
00000000000069f6         imul       eax, eax, 0x190
00000000000069fc         cmp        r9d, eax
00000000000069ff         sete       al
0000000000006a02         movzx      eax, al
0000000000006a05         add        eax, 0x16d
0000000000006a0a         sub        r8d, eax                                    ; CODE XREF=sub_65d0+1011, sub_65d0+1049
0000000000006a0d         mov        edx, 0x92492493
0000000000006a12         mov        ecx, r8d
0000000000006a15         sub        ecx, r14d
0000000000006a18         add        ecx, 0x17e
0000000000006a1e         mov        eax, ecx
0000000000006a20         sub        r8d, ecx
0000000000006a23         imul       edx
0000000000006a25         lea        eax, dword [rdx+rcx]
0000000000006a28         mov        edx, ecx
0000000000006a2a         sar        edx, 0x1f
0000000000006a2d         sar        eax, 0x2
0000000000006a30         sub        eax, edx
0000000000006a32         lea        edx, dword [rax*8]
0000000000006a39         sub        edx, eax
0000000000006a3b         lea        ecx, dword [r8+rdx+3]
0000000000006a40         mov        r8d, 0x1
0000000000006a46         test       ecx, ecx
0000000000006a48         jns        sub_65d0+1151
0000000000006a4a         mov        ecx, ebp
0000000000006a4c         xor        r8d, r8d

                     loc_6a4f:
0000000000006a4f         cmp        r13b, 0x47                                  ; CODE XREF=sub_65d0+1144, sub_77e0+133
0000000000006a53         je         loc_76e7

0000000000006a59         cmp        r13b, 0x67
0000000000006a5d         jne        loc_786a

0000000000006a63         mov        ecx, 0x51eb851f
0000000000006a68         mov        eax, esi
0000000000006a6a         mov        r9d, esi
0000000000006a6d         imul       ecx
0000000000006a6f         mov        eax, edx
0000000000006a71         mov        edx, esi
0000000000006a73         sar        edx, 0x1f
0000000000006a76         sar        eax, 0x5
0000000000006a79         sub        eax, edx
0000000000006a7b         imul       eax, eax, 0x64
0000000000006a7e         sub        r9d, eax
0000000000006a81         add        r9d, r8d
0000000000006a84         mov        eax, r9d
0000000000006a87         imul       ecx
0000000000006a89         mov        eax, r9d
0000000000006a8c         sar        eax, 0x1f
0000000000006a8f         mov        ecx, edx
0000000000006a91         sar        ecx, 0x5
0000000000006a94         sub        ecx, eax
0000000000006a96         imul       ecx, ecx, 0x64
0000000000006a99         sub        r9d, ecx
0000000000006a9c         mov        ecx, r9d
0000000000006a9f         js         loc_76a4

                     loc_6aa5:
0000000000006aa5         mov        esi, dword [rsp+8]                          ; CODE XREF=sub_65d0+2569, sub_65d0+2589
0000000000006aa9         test       esi, esi
0000000000006aab         je         loc_76c1

                     loc_6ab1:
0000000000006ab1         mov        eax, 0x1                                    ; CODE XREF=sub_72d0+1003, sub_77e0+683
0000000000006ab6         xor        r13d, r13d
0000000000006ab9         cmp        dword [rsp+8], 0x2b                         ; CODE XREF=sub_65d0+1536
0000000000006abe         je         loc_7a5d

                     loc_6ac4:
0000000000006ac4         xor        r9d, r9d                                    ; CODE XREF=sub_65d0+1561
0000000000006ac7         mov        esi, 0x2

                     loc_6acc:
0000000000006acc         xor        r8d, r8d                                    ; CODE XREF=sub_65d0+2302, sub_72d0+753, sub_72d0+774, sub_72d0+1042, sub_72d0+1105
0000000000006acf         jmp        sub_6390+213
                        ; endp
0000000000006ad4         cmp        r11d, 0x45
0000000000006ad8         je         __strftime_internal+528
0000000000006ade         mov        rax, qword [rsp]
0000000000006ae2         mov        esi, 0x2
0000000000006ae7         mov        ecx, dword [rax+8]
0000000000006aea         jmp        sub_6390+192
0000000000006aef         cmp        r11d, 0x45
0000000000006af3         je         __strftime_internal+528
0000000000006af9         mov        rax, qword [rsp]
0000000000006afd         mov        esi, 0x2
0000000000006b02         mov        ecx, dword [rax+4]
0000000000006b05         jmp        sub_6390+192
0000000000006b0a         cmp        r11d, 0x45
0000000000006b0e         je         __strftime_internal+528
0000000000006b14         cmp        r10d, 0xffffffff
0000000000006b18         je         sub_7730                                    ; sub_7730
0000000000006b1e         cmp        r10d, 0x8
0000000000006b22         jg         sub_77e0+652
0000000000006b28         mov        ecx, dword [rsp+0x500]
0000000000006b2f         mov        esi, r10d
0000000000006b32         mov        r8d, 0x66666667
0000000000006b38         nop        dword [rax+rax]
0000000000006b40         mov        eax, ecx                                    ; CODE XREF=sub_65d0+1413
0000000000006b42         add        esi, 0x1
0000000000006b45         sar        ecx, 0x1f
0000000000006b48         imul       r8d
0000000000006b4b         sar        edx, 0x2
0000000000006b4e         sub        edx, ecx
0000000000006b50         cmp        esi, 0x9
0000000000006b53         mov        ecx, edx
0000000000006b55         jne        sub_65d0+1392
0000000000006b57         mov        esi, r10d                                   ; CODE XREF=sub_77e0+659
0000000000006b5a         jmp        sub_6390+192
0000000000006b5f         cmp        r11d, 0x45
0000000000006b63         je         __strftime_internal+528
0000000000006b69         mov        ecx, dword [rsp+0x30]
0000000000006b6d         mov        esi, 0x2
0000000000006b72         jmp        sub_6390+192
0000000000006b77         cmp        r11d, 0x45
0000000000006b7b         je         sub_72d0+339
0000000000006b81         mov        rax, qword [rsp]
0000000000006b85         mov        edx, 0x51eb851f
0000000000006b8a         mov        r9d, dword [rsp+8]
0000000000006b8f         mov        esi, dword [rax+0x14]
0000000000006b92         mov        eax, esi
0000000000006b94         imul       edx
0000000000006b96         mov        eax, edx
0000000000006b98         mov        edx, esi
0000000000006b9a         sar        edx, 0x1f
0000000000006b9d         sar        eax, 0x5
0000000000006ba0         sub        eax, edx
0000000000006ba2         mov        edx, esi
0000000000006ba4         lea        ecx, dword [rax+0x13]
0000000000006ba7         imul       eax, eax, 0x64
0000000000006baa         sub        edx, eax
0000000000006bac         mov        eax, edx
0000000000006bae         shr        eax, 0x1f
0000000000006bb1         test       ecx, ecx
0000000000006bb3         setg       dl
0000000000006bb6         and        eax, edx
0000000000006bb8         cmp        esi, 0xfffff894
0000000000006bbe         setl       r13b
0000000000006bc2         sub        ecx, eax
0000000000006bc4         cmp        esi, 0xfffff894
0000000000006bca         setge      al
0000000000006bcd         test       r9d, r9d
0000000000006bd0         jne        sub_65d0+1257
0000000000006bd6         cmp        dword [rsp+0x24], 0x2b
0000000000006bdb         je         sub_77e0+637
0000000000006be1         mov        esi, dword [rsp+0x24]
0000000000006be5         mov        dword [rsp+8], esi
0000000000006be9         jmp        sub_65d0+1268
0000000000006bee         test       r11d, r11d
0000000000006bf1         jne        __strftime_internal+528
0000000000006bf7         lea        rax, qword [aMdy]                           ; "%m/%d/%y"
0000000000006bfe         mov        r14d, 0xffffffff
0000000000006c04         mov        qword [rsp+0x38], rax
0000000000006c09         jmp        sub_6390+351
0000000000006c0e         test       r11d, r11d
0000000000006c11         jne        __strftime_internal+528
0000000000006c17         mov        r11d, dword [rsp+8]
0000000000006c1c         test       r11d, r11d
0000000000006c1f         jne        sub_77e0+399
0000000000006c25         test       r10d, r10d
0000000000006c28         jns        sub_77e0+399
0000000000006c2e         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000006c35         mov        r14d, 0x4
0000000000006c3b         mov        dword [rsp+8], 0x2b
0000000000006c43         mov        qword [rsp+0x38], rax
0000000000006c48         jmp        sub_6390+351
0000000000006c4d         movzx      ecx, byte [rbx-1]
0000000000006c51         lea        rax, qword [rbx-1]
0000000000006c55         mov        qword [rsp+0x38], rax

                     loc_6c5a:
0000000000006c5a         test       r10d, r10d                                  ; CODE XREF=sub_77e0+364
0000000000006c5d         mov        eax, 0x0
0000000000006c62         mov        rdx, r15
0000000000006c65         cmovns     eax, r10d
0000000000006c69         cmp        cl, 0x25
0000000000006c6c         not        rdx
0000000000006c6f         cdqe
0000000000006c71         jne        loc_608b

0000000000006c77         test       rax, rax
0000000000006c7a         mov        r14d, 0x1
0000000000006c80         mov        rbp, qword [rsp+56]
0000000000006c85         cmovne     r14, rax
0000000000006c89         mov        r13d, 0x1
0000000000006c8f         jmp        __strftime_internal+596
                        ; endp
0000000000006c94         cmp        r11d, 0x45
0000000000006c98         je         __strftime_internal+528
0000000000006c9e         test       r14b, r14b
0000000000006ca1         je         sub_6220+13
0000000000006ca7         mov        byte [rsp+0x34], r14b
0000000000006cac         jmp        sub_6220+10
0000000000006cb1         test       r10d, r10d
0000000000006cb4         mov        eax, 0x0
0000000000006cb9         mov        r14d, 0x1
0000000000006cbf         cmovns     eax, r10d
0000000000006cc3         mov        rdx, r15
0000000000006cc6         cdqe
0000000000006cc8         not        rdx
0000000000006ccb         test       rax, rax
0000000000006cce         cmovne     r14, rax
0000000000006cd2         test       r11d, r11d
0000000000006cd5         jne        sub_7730+23
0000000000006cdb         cmp        rdx, r14
0000000000006cde         jbe        __strftime_internal+191
0000000000006ce4         test       r12, r12
0000000000006ce7         je         __strftime_internal+266
0000000000006ced         cmp        r10d, 0x1
0000000000006cf1         jle        __strftime_internal+258
0000000000006cf7         mov        eax, dword [rsp+8]
0000000000006cfb         movsxd     r10, r10d
0000000000006cfe         lea        r13, qword [r10-1]
0000000000006d02         cmp        eax, 0x30
0000000000006d05         je         sub_77e0+590
0000000000006d0b         xor        ebp, ebp
0000000000006d0d         cmp        eax, 0x2b
0000000000006d10         je         sub_77e0+590
0000000000006d16         mov        rsi, r12                                    ; CODE XREF=sub_65d0+1882
0000000000006d19         mov        edi, 0x20
0000000000006d1e         add        rbp, 0x1
0000000000006d22         call       j_fputc                                     ; fputc
0000000000006d27         cmp        r13, rbp
0000000000006d2a         jne        sub_65d0+1862
0000000000006d2c         jmp        __strftime_internal+255
0000000000006d31         movzx      eax, byte [rbx+1]
0000000000006d35         lea        rdx, qword [rbx+1]
0000000000006d39         cmp        al, 0x3a
0000000000006d3b         je         sub_77e0+321
0000000000006d41         mov        r14d, 0x1
0000000000006d47         cmp        al, 0x7a                                    ; CODE XREF=sub_77e0+348
0000000000006d49         jne        __strftime_internal+528
0000000000006d4f         mov        rbx, rdx

                     loc_6d52:
0000000000006d52         mov        rax, qword [rsp+0]                          ; CODE XREF=sub_7170+3
0000000000006d56         mov        ecx, dword [rax+0x20]
0000000000006d59         test       ecx, ecx
0000000000006d5b         js         loc_75db

0000000000006d61         mov        rcx, qword [rax+0x28]
0000000000006d65         mov        r13d, 0x1
0000000000006d6b         test       ecx, ecx
0000000000006d6d         js         loc_6d83

0000000000006d6f         mov        r13d, 0x0
0000000000006d75         jne        loc_6d83

0000000000006d77         mov        rax, qword [rsp+40]
0000000000006d7c         cmp        byte [rax], 0x2d
0000000000006d7f         sete       r13b

                     loc_6d83:
0000000000006d83         mov        eax, ecx                                    ; CODE XREF=sub_65d0+1949, sub_65d0+1957
0000000000006d85         mov        edx, 0x91a2b3c5
0000000000006d8a         mov        r9d, ecx
0000000000006d8d         imul       edx
0000000000006d8f         sar        r9d, 0x1f
0000000000006d93         mov        r8d, 0x88888889
0000000000006d99         mov        eax, ecx
0000000000006d9b         add        edx, ecx
0000000000006d9d         sar        edx, 0xb
0000000000006da0         sub        edx, r9d
0000000000006da3         mov        ebp, edx
0000000000006da5         imul       r8d
0000000000006da8         lea        esi, dword [rdx+rcx]
0000000000006dab         sar        esi, 0x5
0000000000006dae         sub        esi, r9d
0000000000006db1         mov        eax, esi
0000000000006db3         imul       r8d
0000000000006db6         mov        eax, esi
0000000000006db8         sar        eax, 0x1f
0000000000006dbb         lea        r8d, dword [rdx+rsi]
0000000000006dbf         sar        r8d, 0x5
0000000000006dc3         sub        r8d, eax
0000000000006dc6         mov        eax, esi
0000000000006dc8         imul       r8d, r8d, 0x3c
0000000000006dcc         imul       esi, esi, 0x3c
0000000000006dcf         sub        eax, r8d
0000000000006dd2         sub        ecx, esi
0000000000006dd4         cmp        r14, 0x1
0000000000006dd8         mov        r8d, eax
0000000000006ddb         je         loc_788d

0000000000006de1         jb         loc_7951

0000000000006de7         cmp        r14, 0x2
0000000000006deb         je         loc_7793

0000000000006df1         cmp        r14, 0x3
0000000000006df5         jne        loc_7944

0000000000006dfb         test       ecx, ecx
0000000000006dfd         jne        loc_7793

0000000000006e03         test       eax, eax
0000000000006e05         jne        loc_788d

0000000000006e0b         mov        eax, r13d
0000000000006e0e         mov        ecx, ebp
0000000000006e10         mov        r9d, 0x1
0000000000006e16         xor        eax, 0x1
0000000000006e19         mov        esi, 0x3
0000000000006e1e         jmp        loc_6465
0000000000006e23         nop        dword [rax+rax]
0000000000006e28         cmp        r11d, 0x45
0000000000006e2c         je         __strftime_internal+528
0000000000006e32         mov        r9, qword [rsp]
0000000000006e36         mov        ecx, 0x92492493
0000000000006e3b         mov        eax, dword [r9+0x18]
0000000000006e3f         lea        esi, dword [rax+6]
0000000000006e42         mov        dword [rsp+0x38], eax
0000000000006e46         mov        eax, esi
0000000000006e48         imul       ecx
0000000000006e4a         lea        eax, dword [rdx+rsi]
0000000000006e4d         mov        edx, esi
0000000000006e4f         sar        edx, 0x1f
0000000000006e52         sar        eax, 0x2
0000000000006e55         sub        eax, edx
0000000000006e57         lea        edx, dword [rax*8]
0000000000006e5e         sub        edx, eax
0000000000006e60         mov        eax, edx
0000000000006e62         mov        edx, dword [r9+0x1c]
0000000000006e66         sub        eax, esi
0000000000006e68         lea        esi, dword [rax+rdx+7]
0000000000006e6c         mov        eax, esi
0000000000006e6e         imul       ecx
0000000000006e70         jmp        sub_65d0+881
0000000000006e75         cmp        r11d, 0x45
0000000000006e79         je         sub_72d0+339
0000000000006e7f         cmp        r11d, 0x4f
0000000000006e83         je         __strftime_internal+528
0000000000006e89         mov        rax, qword [rsp]
0000000000006e8d         mov        r8d, dword [rsp+8]
0000000000006e92         mov        eax, dword [rax+0x14]
0000000000006e95         cmp        eax, 0xfffff894
0000000000006e9a         lea        ecx, dword [rax+0x76c]
0000000000006ea0         setl       r13b
0000000000006ea4         cmp        eax, 0xfffff894
0000000000006ea9         setge      al
0000000000006eac         test       r8d, r8d
0000000000006eaf         jne        sub_72d0+1086

                     loc_6eb5:
0000000000006eb5         mov        esi, dword [rsp+36]                         ; CODE XREF=sub_72d0+1080
0000000000006eb9         cmp        esi, 0x2b
0000000000006ebc         je         loc_75a7

0000000000006ec2         mov        dword [rsp+8], esi
0000000000006ec6         xor        r9d, r9d
0000000000006ec9         mov        esi, 0x4
0000000000006ece         jmp        loc_6acc
0000000000006ed3         movzx      edi, byte [rsp+0x34]
0000000000006ed8         test       r14b, r14b
0000000000006edb         mov        eax, 0x0
0000000000006ee0         mov        dword [rsp+0x38], r10d
0000000000006ee5         cmovne     edi, eax
0000000000006ee8         mov        byte [rsp+0x34], dil
0000000000006eed         mov        rdi, qword [rsp+0x28]
0000000000006ef2         call       j_strlen                                    ; strlen
0000000000006ef7         movsxd     r10, dword [rsp+0x38]
0000000000006efc         mov        r13, rax
0000000000006eff         mov        eax, 0x0
0000000000006f04         mov        rdx, r15
0000000000006f07         not        rdx
0000000000006f0a         test       r10d, r10d
0000000000006f0d         cmovns     rax, r10
0000000000006f11         cmp        r13, rax
0000000000006f14         mov        rbp, rax
0000000000006f17         cmovae     rbp, r13
0000000000006f1b         cmp        rdx, rbp
0000000000006f1e         jbe        __strftime_internal+191
0000000000006f24         test       r12, r12
0000000000006f27         je         sub_65d0+2511
0000000000006f29         cmp        r13, rax
0000000000006f2c         jae        sub_65d0+2475
0000000000006f2e         mov        edi, dword [rsp+8]
0000000000006f32         mov        rax, r10
0000000000006f35         sub        rax, r13
0000000000006f38         mov        qword [rsp+0x38], rax
0000000000006f3d         cmp        edi, 0x30
0000000000006f40         je         sub_77e0+483
0000000000006f46         cmp        edi, 0x2b
0000000000006f49         je         sub_77e0+483
0000000000006f4f         xor        edx, edx
0000000000006f51         test       rax, rax
0000000000006f54         je         sub_65d0+2475
0000000000006f56         mov        qword [rsp+8], rbx
0000000000006f5b         mov        rbx, rdx
0000000000006f5e         mov        rsi, r12                                    ; CODE XREF=sub_65d0+2468
0000000000006f61         mov        edi, 0x20
0000000000006f66         add        rbx, 0x1
0000000000006f6a         call       j_fputc                                     ; fputc
0000000000006f6f         cmp        qword [rsp+0x38], rbx
0000000000006f74         jne        sub_65d0+2446
0000000000006f76         mov        rbx, qword [rsp+8]                          ; CODE XREF=sub_77e0+529
0000000000006f7b         test       r14b, r14b                                  ; CODE XREF=sub_65d0+2396, sub_65d0+2436, sub_77e0+489
0000000000006f7e         jne        sub_77e0+291
0000000000006f84         cmp        byte [rsp+0x34], 0x0
0000000000006f89         je         sub_77e0+265
0000000000006f8f         mov        rsi, qword [rsp+0x28]
0000000000006f94         mov        rdx, r13
0000000000006f97         mov        rdi, r12
0000000000006f9a         call       fwrite_uppcase                              ; fwrite_uppcase
0000000000006f9f         add        r15, rbp                                    ; CODE XREF=sub_65d0+2391, sub_77e0+286, sub_77e0+307
0000000000006fa2         mov        rbp, rbx
0000000000006fa5         jmp        __strftime_internal+272
0000000000006faa         cmp        r11d, 0x45
0000000000006fae         je         sub_72d0+339
0000000000006fb4         mov        rax, qword [rsp]
0000000000006fb8         mov        edx, 0x51eb851f
0000000000006fbd         mov        esi, dword [rax+0x14]
0000000000006fc0         mov        eax, esi
0000000000006fc2         imul       edx
0000000000006fc4         mov        eax, esi
0000000000006fc6         sar        eax, 0x1f
0000000000006fc9         mov        ecx, edx
0000000000006fcb         sar        ecx, 0x5
0000000000006fce         sub        ecx, eax
0000000000006fd0         mov        eax, esi
0000000000006fd2         imul       ecx, ecx, 0x64
0000000000006fd5         sub        eax, ecx
0000000000006fd7         mov        ecx, eax
0000000000006fd9         jns        sub_65d0+1237
0000000000006fdf         neg        eax
0000000000006fe1         add        ecx, 0x64
0000000000006fe4         cmp        esi, 0xfffff893
0000000000006fea         cmovle     ecx, eax
0000000000006fed         jmp        sub_65d0+1237
0000000000006ff2         cmp        r11d, 0x45
0000000000006ff6         je         __strftime_internal+528
0000000000006ffc         mov        rax, qword [rsp]
0000000000007000         mov        esi, 0x2
0000000000007005         mov        ecx, dword [rax+0xc]
0000000000007008         jmp        sub_6390+192
000000000000700d         cmp        r11d, 0x45
0000000000007011         je         __strftime_internal+528
0000000000007017         mov        rax, qword [rsp]
000000000000701b         mov        ecx, dword [rax+0xc]
000000000000701e         mov        r8d, dword [rsp+8]                          ; CODE XREF=sub_65d0+2736, sub_65d0+2752
0000000000007023         mov        esi, 0x2
0000000000007028         test       r8d, r8d
000000000000702b         jne        sub_6390+192
0000000000007031         mov        dword [rsp+8], 0x5f
0000000000007039         jmp        sub_6390+192
000000000000703e         cmp        r11d, 0x45
0000000000007042         je         __strftime_internal+528
0000000000007048         mov        rax, qword [rsp]
000000000000704c         mov        esi, 0x3
0000000000007051         mov        eax, dword [rax+0x1c]
0000000000007054         cmp        eax, 0xffffffff
0000000000007057         lea        ecx, dword [rax+1]
000000000000705a         setl       r13b
000000000000705e         cmp        eax, 0xffffffff
0000000000007061         setge      al
0000000000007064         xor        r8d, r8d
0000000000007067         xor        r9d, r9d
000000000000706a         jmp        sub_6390+213
000000000000706f         cmp        r11d, 0x45
0000000000007073         je         __strftime_internal+528
0000000000007079         mov        rax, qword [rsp]
000000000000707d         mov        ecx, dword [rax+8]
0000000000007080         jmp        sub_65d0+2638
0000000000007082         cmp        r11d, 0x45
0000000000007086         je         __strftime_internal+528
000000000000708c         mov        ecx, dword [rsp+0x30]
0000000000007090         jmp        sub_65d0+2638
0000000000007092         cmp        r11d, 0x45
0000000000007096         je         __strftime_internal+528
000000000000709c         mov        rax, qword [rsp]
00000000000070a0         mov        esi, 0x2
00000000000070a5         mov        eax, dword [rax+0x10]
00000000000070a8         cmp        eax, 0xffffffff
00000000000070ab         lea        ecx, dword [rax+1]
00000000000070ae         setl       r13b
00000000000070b2         cmp        eax, 0xffffffff
00000000000070b5         setge      al
00000000000070b8         xor        r8d, r8d
00000000000070bb         xor        r9d, r9d
00000000000070be         jmp        sub_6390+213
00000000000070c3         test       r10d, r10d
00000000000070c6         mov        r13d, 0x0
00000000000070cc         mov        eax, 0x1
00000000000070d1         cmovns     r13d, r10d
00000000000070d5         movsxd     r13, r13d
00000000000070d8         test       r13, r13
00000000000070db         cmove      r13, rax
00000000000070df         mov        rax, r15
00000000000070e2         not        rax
00000000000070e5         cmp        rax, r13
00000000000070e8         jbe        __strftime_internal+191
00000000000070ee         test       r12, r12
00000000000070f1         je         sub_6390+463
00000000000070f7         cmp        r10d, 0x1
00000000000070fb         jle        sub_65d0+2914
00000000000070fd         mov        eax, dword [rsp+8]
0000000000007101         movsxd     r10, r10d
0000000000007104         lea        r14, qword [r10-1]
0000000000007108         cmp        eax, 0x30
000000000000710b         je         sub_77e0+236
0000000000007111         xor        ebp, ebp
0000000000007113         cmp        eax, 0x2b
0000000000007116         je         sub_77e0+236
000000000000711c         mov        rsi, r12                                    ; CODE XREF=sub_65d0+2912
000000000000711f         mov        edi, 0x20
0000000000007124         add        rbp, 0x1
0000000000007128         call       j_fputc                                     ; fputc
000000000000712d         cmp        r14, rbp
0000000000007130         jne        sub_65d0+2892
0000000000007132         mov        rsi, r12                                    ; CODE XREF=sub_65d0+2859, sub_77e0+260
0000000000007135         mov        edi, 0xa
000000000000713a         call       j_fputc                                     ; fputc
000000000000713f         jmp        sub_6390+463
0000000000007144         xor        eax, eax
0000000000007146         jmp        sub_6390+310
000000000000714b         movzx      eax, byte [rsp+0x34]
0000000000007150         test       r14b, r14b
0000000000007153         cmovne     eax, r14d
0000000000007157         cmp        r11d, 0x45
000000000000715b         je         sub_77e0+312
0000000000007161         mov        r13d, edi
0000000000007164         mov        byte [rsp+0x34], al
0000000000007168         xor        r14d, r14d
000000000000716b         jmp        sub_6220+13


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7170:
0000000000007170         xor        r14d, r14d
0000000000007173         jmp        loc_6d52
0000000000007178         nop        dword [rax+rax]

                     loc_7180:
0000000000007180         mov        eax, ecx                                    ; CODE XREF=sub_6390+217, sub_6390+225
0000000000007182         neg        eax
0000000000007184         test       r13b, r13b
0000000000007187         cmovne     ecx, eax
000000000000718a         jmp        loc_6768
000000000000718f         nop

                     loc_7190:
0000000000007190         cmp        dword [rsp+8], 0x2d                         ; CODE XREF=sub_65d0+131
0000000000007195         mov        ebp, 0x2d
000000000000719a         jne        loc_67f1

00000000000071a0         mov        byte [rsp+64], 0x2d
00000000000071a5         test       r10d, r10d
00000000000071a8         mov        ecx, 0x0
00000000000071ad         mov        eax, 0x1
00000000000071b2         cmovns     ecx, r10d
00000000000071b6         movsxd     r13, ecx
00000000000071b9         test       r13, r13
00000000000071bc         cmovne     rax, r13
00000000000071c0         mov        rdi, rax
00000000000071c3         mov        qword [rsp+8], rax
00000000000071c8         mov        rax, r15
00000000000071cb         not        rax
00000000000071ce         cmp        rax, rdi
00000000000071d1         jbe        __strftime_internal+191

00000000000071d7         test       r12, r12
00000000000071da         je         loc_7239

00000000000071dc         mov        edi, dword [rsp+88]
00000000000071e0         test       edi, edi
00000000000071e2         jne        loc_7222

00000000000071e4         cmp        r13, 0x1
00000000000071e8         jbe        loc_7222

00000000000071ea         movsxd     rax, r10d
00000000000071ed         sub        rax, 0x1
00000000000071f1         je         loc_7222

00000000000071f3         mov        qword [rsp+72], rbx
00000000000071f8         xor        ebp, ebp
00000000000071fa         mov        rbx, rax
00000000000071fd         mov        dword [rsp+80], r10d

                     loc_7202:
0000000000007202         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_7170+166
0000000000007205         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
000000000000720a         add        rbp, 0x1
000000000000720e         call       j_fputc                                     ; fputc
0000000000007213         cmp        rbx, rbp
0000000000007216         jne        loc_7202

0000000000007218         mov        rbx, qword [rsp+72]
000000000000721d         mov        r10d, dword [rsp+80]

                     loc_7222:
0000000000007222         movsx      edi, byte [rsp+64]                          ; argument "__c" for method j_fputc, CODE XREF=sub_7170+114, sub_7170+120, sub_7170+129
0000000000007227         mov        rsi, r12                                    ; argument "__stream" for method j_fputc
000000000000722a         mov        dword [rsp+72], r10d
000000000000722f         call       j_fputc                                     ; fputc
0000000000007234         mov        r10d, dword [rsp+72]

                     loc_7239:
0000000000007239         add        r15, qword [rsp+8]                          ; CODE XREF=sub_7170+106
000000000000723e         mov        rax, qword [rsp+56]
0000000000007243         mov        rbp, rbx
0000000000007246         mov        dword [rsp+8], 0x2d
000000000000724e         add        rax, 0x17
0000000000007252         sub        rax, r14
0000000000007255         mov        rdx, r15
0000000000007258         mov        qword [rsp+64], rax
000000000000725d         not        rdx
0000000000007260         jmp        loc_669c
0000000000007265         nop        dword [rax]

                     loc_7268:
0000000000007268         mov        rdi, qword [rsp+0x4e8+var_4B0]              ; argument "__ptr" for method j_fwrite, CODE XREF=__strftime_internal+696
000000000000726d         mov        rcx, r12                                    ; argument "__s" for method j_fwrite
0000000000007270         mov        edx, 0x1                                    ; argument "__n" for method j_fwrite
0000000000007275         mov        rsi, r13                                    ; argument "__size" for method j_fwrite
0000000000007278         call       j_fwrite                                    ; fwrite
000000000000727d         jmp        loc_614e
0000000000007282         align      8

                     loc_7288:
0000000000007288         mov        rdi, qword [rsp+arg_30]                     ; CODE XREF=sub_6220+265
000000000000728d         mov        rcx, r12                                    ; argument "__s" for method j_fwrite
0000000000007290         mov        edx, 0x1                                    ; argument "__n" for method j_fwrite
0000000000007295         mov        rsi, r13                                    ; argument "__size" for method j_fwrite
0000000000007298         add        rdi, 0x1                                    ; argument "__ptr" for method j_fwrite
000000000000729c         call       j_fwrite                                    ; fwrite
00000000000072a1         jmp        loc_6343
00000000000072a6         align      16

                     loc_72b0:
00000000000072b0         mov        rsi, qword [rsp+arg_30]                     ; CODE XREF=sub_6220+254
00000000000072b5         mov        rdx, r13
00000000000072b8         mov        rdi, r12
00000000000072bb         add        rsi, 0x1
00000000000072bf         call       fwrite_lowcase                              ; fwrite_lowcase
00000000000072c4         jmp        loc_6343
00000000000072c9         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_72d0:
00000000000072d0         mov        rsi, qword [rsp+arg_38]                     ; argument "__size" for method j_fwrite
00000000000072d5         mov        rcx, r12                                    ; argument "__s" for method j_fwrite
00000000000072d8         mov        edx, 0x1                                    ; argument "__n" for method j_fwrite
00000000000072dd         mov        rdi, r14                                    ; argument "__ptr" for method j_fwrite
00000000000072e0         call       j_fwrite                                    ; fwrite
00000000000072e5         jmp        loc_672e
00000000000072ea         align      16

                     loc_72f0:
00000000000072f0         test       rbx, rbx                                    ; CODE XREF=sub_6220+194, sub_6220+203
00000000000072f3         je         loc_631b

00000000000072f9         xor        edx, edx
00000000000072fb         mov        qword [rsp+arg_0], rbp
0000000000007300         mov        rbp, rdx
0000000000007303         nop        dword [rax+rax]

                     loc_7308:
0000000000007308         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_72d0+76
000000000000730b         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
0000000000007310         add        rbp, 0x1
0000000000007314         call       j_fputc                                     ; fputc
0000000000007319         cmp        rbx, rbp
000000000000731c         jne        loc_7308

000000000000731e         jmp        loc_6316

                     loc_7323:
0000000000007323         test       rbx, rbx                                    ; CODE XREF=__strftime_internal+628, __strftime_internal+637
0000000000007326         je         loc_6133

000000000000732c         xor        edx, edx
000000000000732e         mov        qword [rsp+0x4e8+var_4E0], rbp
0000000000007333         mov        rbp, rdx
0000000000007336         nop        word [cs:rax+rax]

                     loc_7340:
0000000000007340         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_72d0+132
0000000000007343         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
0000000000007348         add        rbp, 0x1
000000000000734c         call       j_fputc                                     ; fputc
0000000000007351         cmp        rbx, rbp
0000000000007354         jne        loc_7340

0000000000007356         jmp        loc_612e
000000000000735b         cmp        rax, rdx                                    ; CODE XREF=sub_6390+457
000000000000735e         jae        sub_72d0+231
0000000000007360         movsxd     rdx, r10d
0000000000007363         mov        rdi, rdx
0000000000007366         sub        rdi, rax
0000000000007369         mov        eax, dword [rsp+8]
000000000000736d         cmp        eax, 0x30
0000000000007370         je         sub_7730+42
0000000000007376         cmp        eax, 0x2b
0000000000007379         je         sub_7730+42
000000000000737f         xor        edx, edx
0000000000007381         test       rdi, rdi
0000000000007384         je         sub_72d0+231
0000000000007386         mov        dword [rsp+0x34], ebp
000000000000738a         mov        qword [rsp+0x40], rbx
000000000000738f         mov        rbp, rdi
0000000000007392         mov        rbx, rdx
0000000000007395         nop        dword [rax]
0000000000007398         mov        rsi, r12                                    ; CODE XREF=sub_72d0+220
000000000000739b         mov        edi, 0x20
00000000000073a0         add        rbx, 0x1
00000000000073a4         call       j_fputc                                     ; fputc
00000000000073a9         cmp        rbp, rbx
00000000000073ac         jne        sub_72d0+200
00000000000073ae         mov        ebp, dword [rsp+0x34]                       ; CODE XREF=sub_7730+94
00000000000073b2         mov        rbx, qword [rsp+0x40]
00000000000073b7         sub        rsp, 0x8                                    ; CODE XREF=sub_72d0+142, sub_72d0+180, sub_7730+45
00000000000073bb         mov        r9d, r14d
00000000000073be         mov        ecx, ebp
00000000000073c0         mov        eax, dword [rsp+0x508]
00000000000073c7         mov        rdi, r12
00000000000073ca         push       rax
00000000000073cb         push       qword [rsp+0x20]
00000000000073cf         push       qword [rsp+0x30]
00000000000073d3         mov        r8d, dword [rsp+0x28]
00000000000073d8         mov        rdx, qword [rsp+0x20]
00000000000073dd         mov        rsi, qword [rsp+0x58]
00000000000073e2         call       __strftime_internal                         ; __strftime_internal
00000000000073e7         add        rsp, 0x20
00000000000073eb         jmp        sub_6390+463

                     loc_73f0:
00000000000073f0         test       r13, r13                                    ; CODE XREF=sub_65d0+259, sub_65d0+268
00000000000073f3         je         loc_6713

00000000000073f9         xor        edx, edx
00000000000073fb         mov        qword [rsp+8], rbx
0000000000007400         mov        rbx, rdx
0000000000007403         nop        dword [rax+rax]

                     loc_7408:
0000000000007408         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_72d0+332
000000000000740b         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
0000000000007410         add        rbx, 0x1
0000000000007414         call       j_fputc                                     ; fputc
0000000000007419         cmp        r13, rbx
000000000000741c         jne        loc_7408

000000000000741e         jmp        loc_670e
0000000000007423         xor        esi, esi                                    ; CODE XREF=sub_65d0+1451, sub_65d0+2217, sub_65d0+2526
0000000000007425         jmp        sub_6390+234
000000000000742a         mov        r13d, 0x70                                  ; CODE XREF=sub_6390+313
0000000000007430         mov        byte [rsp+0x34], 0x0
0000000000007435         jmp        sub_6220+13

                     loc_743a:
000000000000743a         xor        ebp, ebp                                    ; CODE XREF=sub_7730+147

                     loc_743c:
000000000000743c         movsxd     rax, r13d                                   ; CODE XREF=sub_65d0+596
000000000000743f         cmp        rax, rdx
0000000000007442         mov        qword [rsp+8], rax
0000000000007447         jae        __strftime_internal+191

000000000000744d         test       r12, r12
0000000000007450         je         loc_7495

0000000000007452         xor        edx, edx
0000000000007454         mov        byte [rsp+64], bpl
0000000000007459         mov        qword [rsp+72], rbx
000000000000745e         mov        rbp, rdx
0000000000007461         mov        rbx, rax
0000000000007464         mov        dword [rsp+80], r10d
0000000000007469         nop        dword [rax]

                     loc_7470:
0000000000007470         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_72d0+436
0000000000007473         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
0000000000007478         add        rbp, 0x1
000000000000747c         call       j_fputc                                     ; fputc
0000000000007481         cmp        rbx, rbp
0000000000007484         ja         loc_7470

0000000000007486         movzx      ebp, byte [rsp+64]
000000000000748b         mov        rbx, qword [rsp+72]
0000000000007490         mov        r10d, dword [rsp+80]

                     loc_7495:
0000000000007495         add        r15, qword [rsp+8]                          ; CODE XREF=sub_72d0+384
000000000000749a         mov        eax, r10d
000000000000749d         sub        eax, r13d
00000000000074a0         cmp        r10d, r13d
00000000000074a3         mov        r10d, 0x0
00000000000074a9         cmovg      r10d, eax
00000000000074ad         test       bpl, bpl
00000000000074b0         mov        rdx, r15
00000000000074b3         not        rdx
00000000000074b6         jne        loc_75e3

00000000000074bc         mov        rax, qword [rsp+56]
00000000000074c1         movsxd     r13, r10d
00000000000074c4         mov        rbp, rbx
00000000000074c7         mov        dword [rsp+8], 0x5f
00000000000074cf         add        rax, 0x17
00000000000074d3         sub        rax, r14
00000000000074d6         mov        qword [rsp+64], rax
00000000000074db         jmp        loc_669c

                     loc_74e0:
00000000000074e0         test       r10d, r10d                                  ; CODE XREF=sub_65d0+585
00000000000074e3         mov        ecx, 0x0
00000000000074e8         mov        eax, 0x1
00000000000074ed         cmovns     ecx, r10d
00000000000074f1         movsxd     r13, ecx
00000000000074f4         test       r13, r13
00000000000074f7         cmovne     rax, r13
00000000000074fb         cmp        rax, rdx
00000000000074fe         mov        qword [rsp+72], rax
0000000000007503         jae        __strftime_internal+191

0000000000007509         test       r12, r12
000000000000750c         je         loc_758a

000000000000750e         mov        ecx, dword [rsp+88]
0000000000007512         test       ecx, ecx
0000000000007514         jne        loc_7574

0000000000007516         cmp        r13, 0x1
000000000000751a         jbe        loc_7574

000000000000751c         mov        edi, dword [rsp+8]
0000000000007520         movsxd     rax, r10d
0000000000007523         sub        rax, 0x1
0000000000007527         mov        qword [rsp+56], rax
000000000000752c         cmp        edi, 0x30
000000000000752f         je         loc_79f6

0000000000007535         cmp        edi, 0x2b
0000000000007538         je         loc_79f6

000000000000753e         xor        edx, edx
0000000000007540         test       rax, rax
0000000000007543         je         loc_7574

0000000000007545         mov        qword [rsp+80], rbx
000000000000754a         mov        dword [rsp+92], r10d
000000000000754f         mov        rbx, rdx

                     loc_7552:
0000000000007552         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_72d0+664
0000000000007555         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
000000000000755a         add        rbx, 0x1
000000000000755e         call       j_fputc                                     ; fputc
0000000000007563         cmp        qword [rsp+56], rbx
0000000000007568         jne        loc_7552

                     loc_756a:
000000000000756a         mov        rbx, qword [rsp+80]                         ; CODE XREF=sub_77e0+585
000000000000756f         mov        r10d, dword [rsp+92]

                     loc_7574:
0000000000007574         movsx      edi, bpl                                    ; argument "__c" for method j_fputc, CODE XREF=sub_72d0+580, sub_72d0+586, sub_72d0+627, sub_77e0+540
0000000000007578         mov        rsi, r12                                    ; argument "__stream" for method j_fputc
000000000000757b         mov        dword [rsp+56], r10d
0000000000007580         call       j_fputc                                     ; fputc
0000000000007585         mov        r10d, dword [rsp+56]

                     loc_758a:
000000000000758a         add        r15, qword [rsp+72]                         ; CODE XREF=sub_72d0+572
000000000000758f         mov        rbp, rbx
0000000000007592         mov        rdx, r15
0000000000007595         not        rdx
0000000000007598         jmp        loc_669c

                     loc_759d:
000000000000759d         mov        byte [rsp+64], 0x2b                         ; CODE XREF=sub_65d0+539
00000000000075a2         jmp        sub_7170+53
                        ; endp

                     loc_75a7:
00000000000075a7         mov        esi, 0x4                                    ; CODE XREF=sub_65d0+2284, sub_72d0+1091
00000000000075ac         mov        edx, 0x270f

                     loc_75b1:
00000000000075b1         cmp        edx, ecx                                    ; CODE XREF=sub_77e0+647
00000000000075b3         mov        r9d, 0x1
00000000000075b9         mov        dword [rsp+8], 0x2b
00000000000075c1         jb         loc_6acc

                     loc_75c7:
00000000000075c7         cmp        r10d, esi                                   ; CODE XREF=sub_77e0+632
00000000000075ca         mov        dword [rsp+8], 0x2b
00000000000075d2         setg       r9b
00000000000075d6         jmp        loc_6acc

                     loc_75db:
00000000000075db         mov        rbp, rbx                                    ; CODE XREF=sub_65d0+1931
00000000000075de         jmp        __strftime_internal+272
                        ; endp

                     loc_75e3:
00000000000075e3         movsxd     rcx, r10d                                   ; CODE XREF=sub_72d0+486
00000000000075e6         mov        r13d, 0x1
00000000000075ec         test       rcx, rcx
00000000000075ef         cmovne     r13, rcx
00000000000075f3         cmp        r13, rdx
00000000000075f6         mov        qword [rsp+8], r13
00000000000075fb         jae        __strftime_internal+191

0000000000007601         test       r12, r12
0000000000007604         je         loc_7675

0000000000007606         mov        esi, dword [rsp+88]
000000000000760a         test       esi, esi
000000000000760c         jne        loc_7655

000000000000760e         cmp        r10d, 0x1
0000000000007612         jbe        loc_7655

0000000000007614         lea        rax, qword [rcx-1]
0000000000007618         xor        r13d, r13d
000000000000761b         mov        qword [rsp+72], rbx
0000000000007620         mov        dword [rsp+80], r10d
0000000000007625         mov        rbx, r13
0000000000007628         mov        r13, rcx
000000000000762b         mov        qword [rsp+64], rax

                     loc_7630:
0000000000007630         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_72d0+886
0000000000007633         mov        edi, 0x20                                   ; argument "__c" for method j_fputc
0000000000007638         add        rbx, 0x1
000000000000763c         call       j_fputc                                     ; fputc
0000000000007641         cmp        qword [rsp+64], rbx
0000000000007646         jne        loc_7630

0000000000007648         mov        rbx, qword [rsp+72]
000000000000764d         mov        r10d, dword [rsp+80]
0000000000007652         mov        rcx, r13

                     loc_7655:
0000000000007655         movsx      edi, bpl                                    ; argument "__c" for method j_fputc, CODE XREF=sub_72d0+828, sub_72d0+834
0000000000007659         mov        rsi, r12                                    ; argument "__stream" for method j_fputc
000000000000765c         mov        dword [rsp+72], r10d
0000000000007661         mov        qword [rsp+64], rcx
0000000000007666         call       j_fputc                                     ; fputc
000000000000766b         mov        r10d, dword [rsp+72]
0000000000007670         mov        rcx, qword [rsp+64]

                     loc_7675:
0000000000007675         add        r15, qword [rsp+8]                          ; CODE XREF=sub_72d0+820
000000000000767a         mov        rax, qword [rsp+56]
000000000000767f         mov        r13, rcx
0000000000007682         mov        rbp, rbx
0000000000007685         mov        dword [rsp+8], 0x5f
000000000000768d         add        rax, 0x17
0000000000007691         sub        rax, r14
0000000000007694         mov        rdx, r15
0000000000007697         mov        qword [rsp+64], rax
000000000000769c         not        rdx
000000000000769f         jmp        loc_669c

                     loc_76a4:
00000000000076a4         mov        eax, 0xfffff894                             ; CODE XREF=sub_65d0+1231
00000000000076a9         sub        eax, r8d
00000000000076ac         cmp        esi, eax
00000000000076ae         jge        loc_7a7d

00000000000076b4         neg        ecx
00000000000076b6         cmp        dword [rsp+8], 0x0
00000000000076bb         jne        loc_6ab1

                     loc_76c1:
00000000000076c1         mov        eax, dword [rsp+36]                         ; CODE XREF=sub_65d0+1243, sub_77e0+677
00000000000076c5         cmp        eax, 0x2b
00000000000076c8         je         loc_7a4b

00000000000076ce         mov        dword [rsp+8], eax
00000000000076d2         xor        r9d, r9d
00000000000076d5         mov        eax, 0x1
00000000000076da         xor        r13d, r13d
00000000000076dd         mov        esi, 0x2
00000000000076e2         jmp        loc_6acc

                     loc_76e7:
00000000000076e7         mov        eax, 0xfffff894                             ; CODE XREF=sub_65d0+1155
00000000000076ec         mov        r9d, dword [rsp+8]
00000000000076f1         lea        ecx, dword [rsi+r8+0x76c]
00000000000076f9         sub        eax, r8d
00000000000076fc         cmp        esi, eax
00000000000076fe         setl       r13b
0000000000007702         setge      al
0000000000007705         test       r9d, r9d
0000000000007708         je         loc_6eb5

                     loc_770e:
000000000000770e         cmp        dword [rsp+8], 0x2b                         ; CODE XREF=sub_65d0+2271
0000000000007713         je         loc_75a7

0000000000007719         xor        r9d, r9d
000000000000771c         mov        esi, 0x4
0000000000007721         jmp        loc_6acc
0000000000007726         nop        word [cs:rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7730:
0000000000007730         mov        ecx, dword [rsp+1280]                       ; CODE XREF=sub_65d0+1352
0000000000007737         mov        esi, 0x9
000000000000773c         mov        r10d, 0x9
0000000000007742         jmp        loc_6450
0000000000007747         mov        rbp, rbx                                    ; CODE XREF=sub_65d0+1797
000000000000774a         mov        qword [rsp+0x38], rbx
000000000000774f         mov        r13d, 0x1
0000000000007755         jmp        __strftime_internal+596
000000000000775a         test       rdi, rdi                                    ; CODE XREF=sub_72d0+160, sub_72d0+169
000000000000775d         je         sub_72d0+231
0000000000007763         xor        edx, edx
0000000000007765         mov        dword [rsp+0x34], ebp
0000000000007769         mov        qword [rsp+0x40], rbx
000000000000776e         mov        rbp, rdi
0000000000007771         mov        rbx, rdx
0000000000007774         nop        dword [rax]
0000000000007778         mov        rsi, r12                                    ; CODE XREF=sub_7730+92
000000000000777b         mov        edi, 0x30
0000000000007780         add        rbx, 0x1
0000000000007784         call       j_fputc                                     ; fputc
0000000000007789         cmp        rbp, rbx
000000000000778c         jne        sub_7730+72
000000000000778e         jmp        sub_72d0+222

                     loc_7793:
0000000000007793         imul       r8d, r8d, 0x64                              ; CODE XREF=sub_65d0+2075, sub_65d0+2093
0000000000007797         mov        r9d, 0x1
000000000000779d         mov        esi, 0x9
00000000000077a2         imul       eax, ebp, j_memcpy
00000000000077a8         add        eax, r8d
00000000000077ab         mov        r8d, 0x14
00000000000077b1         add        ecx, eax
00000000000077b3         mov        eax, r13d
00000000000077b6         xor        eax, 0x1
00000000000077b9         jmp        loc_6465

                     loc_77be:
00000000000077be         cmp        dword [rsp+8], 0x5f                         ; CODE XREF=sub_65d0+180
00000000000077c3         je         loc_743a

00000000000077c9         movsxd     rax, dword [rsp+88]
00000000000077ce         cmp        rax, rdx
00000000000077d1         jb         loc_68d1

00000000000077d7         jmp        __strftime_internal+191
                        ; endp
00000000000077dc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_77e0:
00000000000077e0         sub        r9d, 0x1                                    ; CODE XREF=sub_65d0+996
00000000000077e4         mov        edx, 0x16d
00000000000077e9         test       r9b, 0x3
00000000000077ed         jne        loc_7829

00000000000077ef         mov        eax, r9d
00000000000077f2         mov        edx, 0x51eb851f
00000000000077f7         imul       edx
00000000000077f9         mov        eax, r9d
00000000000077fc         sar        eax, 0x1f
00000000000077ff         sar        edx, 0x5
0000000000007802         sub        edx, eax
0000000000007804         imul       eax, edx, 0x64
0000000000007807         mov        edx, 0x16e
000000000000780c         cmp        r9d, eax
000000000000780f         jne        loc_7829

0000000000007811         mov        eax, r9d
0000000000007814         mov        ecx, 0x190
0000000000007819         cdq
000000000000781a         idiv       ecx
000000000000781c         cmp        edx, 0x1
000000000000781f         sbb        edx, edx
0000000000007821         not        edx
0000000000007823         add        edx, 0x16e

                     loc_7829:
0000000000007829         add        r8d, edx                                    ; CODE XREF=sub_77e0+13, sub_77e0+47
000000000000782c         mov        edx, 0x92492493
0000000000007831         mov        ecx, r8d
0000000000007834         sub        ecx, r14d
0000000000007837         add        ecx, 0x17e
000000000000783d         mov        eax, ecx
000000000000783f         sub        r8d, ecx
0000000000007842         imul       edx
0000000000007844         lea        eax, dword [rdx+rcx]
0000000000007847         mov        edx, ecx
0000000000007849         sar        edx, 0x1f
000000000000784c         sar        eax, 0x2
000000000000784f         sub        eax, edx
0000000000007851         lea        edx, dword [rax*8]
0000000000007858         sub        edx, eax
000000000000785a         lea        ecx, dword [r8+rdx+3]
000000000000785f         mov        r8d, 0xffffffff
0000000000007865         jmp        loc_6a4f

                     loc_786a:
000000000000786a         mov        eax, ecx                                    ; CODE XREF=sub_65d0+1165
000000000000786c         mov        edx, 0x92492493
0000000000007871         mov        esi, 0x2
0000000000007876         imul       edx
0000000000007878         lea        eax, dword [rdx+rcx]
000000000000787b         sar        ecx, 0x1f
000000000000787e         sar        eax, 0x2
0000000000007881         sub        eax, ecx
0000000000007883         mov        ecx, eax
0000000000007885         add        ecx, 0x1
0000000000007888         jmp        sub_6390+192
                        ; endp

                     loc_788d:
000000000000788d         imul       ecx, ebp, 0x64                              ; CODE XREF=sub_65d0+2059, sub_65d0+2101
0000000000007890         mov        eax, r13d
0000000000007893         mov        r9d, 0x1
0000000000007899         xor        eax, 0x1
000000000000789c         mov        esi, 0x6
00000000000078a1         add        ecx, r8d
00000000000078a4         mov        r8d, 0x4
00000000000078aa         jmp        loc_6465

                     loc_78af:
00000000000078af         xor        ebp, ebp                                    ; CODE XREF=sub_6390+72, sub_6390+83

                     loc_78b1:
00000000000078b1         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_77e0+229
00000000000078b4         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
00000000000078b9         add        rbp, 0x1
00000000000078bd         call       j_fputc                                     ; fputc
00000000000078c2         cmp        r14, rbp
00000000000078c5         jne        loc_78b1

00000000000078c7         jmp        loc_63ff
00000000000078cc         xor        ebp, ebp                                    ; CODE XREF=sub_65d0+2875, sub_65d0+2886
00000000000078ce         mov        rsi, r12                                    ; CODE XREF=sub_77e0+258
00000000000078d1         mov        edi, 0x30
00000000000078d6         add        rbp, 0x1
00000000000078da         call       j_fputc                                     ; fputc
00000000000078df         cmp        r14, rbp
00000000000078e2         jne        sub_77e0+238
00000000000078e4         jmp        sub_65d0+2914
00000000000078e9         mov        rdi, qword [rsp+0x28]                       ; CODE XREF=sub_65d0+2489
00000000000078ee         mov        rcx, r12
00000000000078f1         mov        edx, 0x1
00000000000078f6         mov        rsi, r13
00000000000078f9         call       j_fwrite                                    ; fwrite
00000000000078fe         jmp        sub_65d0+2511
0000000000007903         mov        rsi, qword [rsp+0x28]                       ; CODE XREF=sub_65d0+2478
0000000000007908         mov        rdx, r13
000000000000790b         mov        rdi, r12
000000000000790e         call       fwrite_lowcase                              ; fwrite_lowcase
0000000000007913         jmp        sub_65d0+2511
0000000000007918         mov        byte [rsp+0x34], al                         ; CODE XREF=sub_65d0+2955
000000000000791c         jmp        __strftime_internal+528
0000000000007921         lea        rcx, qword [rbx+2]                          ; CODE XREF=sub_65d0+1899
0000000000007925         mov        r14d, 0x1
000000000000792b         mov        rdx, rcx                                    ; CODE XREF=sub_77e0+354
000000000000792e         add        rcx, 0x1
0000000000007932         movzx      eax, byte [rcx-1]
0000000000007936         add        r14, 0x1
000000000000793a         cmp        al, 0x3a
000000000000793c         jne        sub_65d0+1911
0000000000007942         jmp        sub_77e0+331

                     loc_7944:
0000000000007944         movzx      ecx, byte [rbx]                             ; CODE XREF=sub_65d0+2085
0000000000007947         mov        qword [rsp+56], rbx
000000000000794c         jmp        loc_6c5a

                     loc_7951:
0000000000007951         imul       ecx, ebp, 0x64                              ; CODE XREF=sub_65d0+2065
0000000000007954         xor        r8d, r8d
0000000000007957         mov        r9d, 0x1
000000000000795d         mov        esi, 0x5
0000000000007962         add        ecx, eax
0000000000007964         mov        eax, r13d
0000000000007967         xor        eax, 0x1
000000000000796a         jmp        loc_6465
000000000000796f         mov        r14d, r10d                                  ; CODE XREF=sub_65d0+1615, sub_65d0+1624
0000000000007972         mov        eax, 0x0
0000000000007977         sub        r14d, 0x6
000000000000797b         cmovs      r14d, eax
000000000000797f         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000007986         mov        qword [rsp+0x38], rax
000000000000798b         jmp        sub_6390+351

                     loc_7990:
0000000000007990         cmp        qword [rsp+56], 0x0                         ; CODE XREF=sub_65d0+693, sub_65d0+702
0000000000007996         je         loc_68c0

000000000000799c         xor        edx, edx
000000000000799e         mov        qword [rsp+80], rbx
00000000000079a3         mov        rbx, rdx

                     loc_79a6:
00000000000079a6         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_77e0+476
00000000000079a9         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
00000000000079ae         add        rbx, 0x1
00000000000079b2         call       j_fputc                                     ; fputc
00000000000079b7         cmp        qword [rsp+56], rbx
00000000000079bc         jne        loc_79a6

00000000000079be         jmp        loc_68bb
00000000000079c3         cmp        qword [rsp+0x38], 0x0                       ; CODE XREF=sub_65d0+2416, sub_65d0+2425
00000000000079c9         je         sub_65d0+2475
00000000000079cf         xor        edx, edx
00000000000079d1         mov        qword [rsp+8], rbx
00000000000079d6         mov        rbx, rdx
00000000000079d9         mov        rsi, r12                                    ; CODE XREF=sub_77e0+527
00000000000079dc         mov        edi, 0x30
00000000000079e1         add        rbx, 0x1
00000000000079e5         call       j_fputc                                     ; fputc
00000000000079ea         cmp        qword [rsp+0x38], rbx
00000000000079ef         jne        sub_77e0+505
00000000000079f1         jmp        sub_65d0+2470

                     loc_79f6:
00000000000079f6         cmp        qword [rsp+56], 0x0                         ; CODE XREF=sub_72d0+607, sub_72d0+616
00000000000079fc         je         loc_7574

0000000000007a02         xor        edx, edx
0000000000007a04         mov        qword [rsp+80], rbx
0000000000007a09         mov        dword [rsp+92], r10d
0000000000007a0e         mov        rbx, rdx

                     loc_7a11:
0000000000007a11         mov        rsi, r12                                    ; argument "__stream" for method j_fputc, CODE XREF=sub_77e0+583
0000000000007a14         mov        edi, 0x30                                   ; argument "__c" for method j_fputc
0000000000007a19         add        rbx, 0x1
0000000000007a1d         call       j_fputc                                     ; fputc
0000000000007a22         cmp        qword [rsp+56], rbx
0000000000007a27         jne        loc_7a11

0000000000007a29         jmp        loc_756a
0000000000007a2e         xor        ebp, ebp                                    ; CODE XREF=sub_65d0+1845, sub_65d0+1856
0000000000007a30         mov        rsi, r12                                    ; CODE XREF=sub_77e0+612
0000000000007a33         mov        edi, 0x30
0000000000007a38         add        rbp, 0x1
0000000000007a3c         call       j_fputc                                     ; fputc
0000000000007a41         cmp        r13, rbp
0000000000007a44         jne        sub_77e0+592
0000000000007a46         jmp        __strftime_internal+255

                     loc_7a4b:
0000000000007a4b         mov        eax, 0x1                                    ; CODE XREF=sub_72d0+1016
0000000000007a50         xor        r13d, r13d
0000000000007a53         mov        esi, 0x2
0000000000007a58         jmp        loc_75c7

                     loc_7a5d:
0000000000007a5d         mov        esi, 0x2                                    ; CODE XREF=sub_65d0+1262, sub_65d0+1547
0000000000007a62         mov        edx, 0x63
0000000000007a67         jmp        loc_75b1
0000000000007a6c         mov        ecx, dword [rsp+0x500]                      ; CODE XREF=sub_65d0+1362
0000000000007a73         jmp        sub_65d0+1415

                     loc_7a78:
0000000000007a78         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=__strftime_internal+214
                        ; endp

                     loc_7a7d:
0000000000007a7d         add        ecx, 0x64                                   ; CODE XREF=sub_72d0+990
0000000000007a80         cmp        dword [rsp+8], 0x0
0000000000007a85         je         loc_76c1

0000000000007a8b         jmp        loc_6ab1

                     loc_7a90:
0000000000007a90         xor        esi, esi                                    ; CODE XREF=sub_6220+29
0000000000007a92         jmp        loc_648a
0000000000007a97         align      32                                          ; End of unwind block (FDE at 0x2431c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_11: int8_t, -17


                     fprintftime:
0000000000007aa0         sub        rsp, 0x20                                   ; Begin of unwind block (FDE at 0x24394), CODE XREF=print_size+161
0000000000007aa4         mov        r9d, 0xffffffff
0000000000007aaa         mov        rax, qword [fs:0x28]
0000000000007ab3         mov        qword [rsp+0x20+var_10], rax
0000000000007ab8         xor        eax, eax
0000000000007aba         mov        byte [rsp+0x20+var_11], 0x0
0000000000007abf         push       r8
0000000000007ac1         xor        r8d, r8d
0000000000007ac4         push       rcx
0000000000007ac5         xor        ecx, ecx
0000000000007ac7         lea        rax, qword [rsp+0x30+var_11]
0000000000007acc         push       rax
0000000000007acd         call       __strftime_internal                         ; __strftime_internal
0000000000007ad2         add        rsp, 0x20
0000000000007ad6         mov        rdx, qword [rsp+0x18+var_10]
0000000000007adb         xor        rdx, qword [fs:0x28]
0000000000007ae4         jne        loc_7aeb

0000000000007ae6         add        rsp, 0x18
0000000000007aea         ret
                        ; endp

                     loc_7aeb:
0000000000007aeb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fprintftime+68
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     protect_fd:
0000000000007af0         push       rbp                                         ; End of unwind block (FDE at 0x24394), Begin of unwind block (FDE at 0x243bc), CODE XREF=freopen_safer+131, freopen_safer+161, freopen_safer+277
0000000000007af1         push       rbx
0000000000007af2         mov        ebp, edi
0000000000007af4         lea        rdi, qword [aDevnull]                       ; argument "__file" for method j_open, "/dev/null"
0000000000007afb         xor        esi, esi                                    ; argument "__oflag" for method j_open
0000000000007afd         xor        eax, eax
0000000000007aff         sub        rsp, 0x8
0000000000007b03         mov        ebx, 0x1
0000000000007b08         call       j_open                                      ; open
0000000000007b0d         cmp        ebp, eax
0000000000007b0f         je         loc_7b29

0000000000007b11         xor        ebx, ebx
0000000000007b13         test       eax, eax
0000000000007b15         js         loc_7b29

0000000000007b17         mov        edi, eax                                    ; argument "__fd" for method j_close
0000000000007b19         call       j_close                                     ; close
0000000000007b1e         call       j___errno_location                          ; __errno_location
0000000000007b23         mov        dword [rax], 0x9

                     loc_7b29:
0000000000007b29         add        rsp, 0x8                                    ; CODE XREF=protect_fd+31, protect_fd+37
0000000000007b2d         mov        eax, ebx
0000000000007b2f         pop        rbx
0000000000007b30         pop        rbp
0000000000007b31         ret
                        ; endp
0000000000007b32         align      64                                          ; End of unwind block (FDE at 0x243bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     freopen_safer:
0000000000007b40         push       r15                                         ; Begin of unwind block (FDE at 0x243e4), CODE XREF=main+3710
0000000000007b42         push       r14
0000000000007b44         mov        r15, rsi
0000000000007b47         push       r13
0000000000007b49         push       r12
0000000000007b4b         mov        r12, rdx
0000000000007b4e         push       rbp
0000000000007b4f         push       rbx
0000000000007b50         sub        rsp, 0x18
0000000000007b54         mov        qword [rsp+0x48+var_40], rdi
0000000000007b59         mov        rdi, rdx                                    ; argument "__stream" for method j_fileno
0000000000007b5c         call       j_fileno                                    ; fileno
0000000000007b61         mov        ebx, eax
0000000000007b63         call       j___errno_location                          ; __errno_location
0000000000007b68         cmp        ebx, 0x1
0000000000007b6b         mov        r14, rax
0000000000007b6e         je         loc_7cd0

0000000000007b74         cmp        ebx, 0x2
0000000000007b77         je         loc_7cc0

0000000000007b7d         test       ebx, ebx
0000000000007b7f         je         loc_7c38

0000000000007b85         mov        esi, 0x2                                    ; argument "__fd2" for method j_dup2
0000000000007b8a         mov        edi, 0x2                                    ; argument "__fd" for method j_dup2
0000000000007b8f         call       j_dup2                                      ; dup2
0000000000007b94         cmp        eax, 0x2
0000000000007b97         setne      bl

                     loc_7b9a:
0000000000007b9a         mov        esi, 0x1                                    ; argument "__fd2" for method j_dup2, CODE XREF=freopen_safer+386
0000000000007b9f         mov        edi, 0x1                                    ; argument "__fd" for method j_dup2
0000000000007ba4         call       j_dup2                                      ; dup2
0000000000007ba9         cmp        eax, 0x1
0000000000007bac         setne      bpl

                     loc_7bb0:
0000000000007bb0         xor        esi, esi                                    ; argument "__fd2" for method j_dup2, CODE XREF=freopen_safer+404
0000000000007bb2         xor        edi, edi                                    ; argument "__fd" for method j_dup2
0000000000007bb4         call       j_dup2                                      ; dup2
0000000000007bb9         test       eax, eax
0000000000007bbb         je         loc_7c48

0000000000007bc1         xor        edi, edi
0000000000007bc3         call       protect_fd                                  ; protect_fd
0000000000007bc8         test       al, al
0000000000007bca         mov        r13d, eax
0000000000007bcd         je         loc_7ce0

0000000000007bd3         test       bpl, bpl
0000000000007bd6         jne        loc_7c50

                     loc_7bd8:
0000000000007bd8         test       bl, bl                                      ; CODE XREF=freopen_safer+270, freopen_safer+286
0000000000007bda         je         loc_7bf0

0000000000007bdc         mov        edi, 0x2
0000000000007be1         call       protect_fd                                  ; protect_fd
0000000000007be6         test       al, al
0000000000007be8         mov        ebx, eax
0000000000007bea         je         loc_7ca0

                     loc_7bf0:
0000000000007bf0         mov        rdi, qword [rsp+0x48+var_40]                ; argument "__filename" for method j_freopen, CODE XREF=freopen_safer+154, freopen_safer+255
0000000000007bf5         mov        rdx, r12                                    ; argument "__stream" for method j_freopen
0000000000007bf8         mov        rsi, r15                                    ; argument "__modes" for method j_freopen
0000000000007bfb         call       j_freopen                                   ; freopen
0000000000007c00         mov        r12, rax

                     loc_7c03:
0000000000007c03         test       bl, bl                                      ; CODE XREF=freopen_safer+425
0000000000007c05         mov        r15d, dword [r14]
0000000000007c08         jne        loc_7cb0

                     loc_7c0e:
0000000000007c0e         test       bpl, bpl                                    ; CODE XREF=freopen_safer+378
0000000000007c11         jne        loc_7c80

0000000000007c13         test       r13b, r13b
0000000000007c16         jne        loc_7c8f

                     loc_7c18:
0000000000007c18         test       r12, r12                                    ; CODE XREF=freopen_safer+333, freopen_safer+342
0000000000007c1b         jne        loc_7c20

0000000000007c1d         mov        dword [r14], r15d

                     loc_7c20:
0000000000007c20         add        rsp, 0x18                                   ; CODE XREF=freopen_safer+219
0000000000007c24         mov        rax, r12
0000000000007c27         pop        rbx
0000000000007c28         pop        rbp
0000000000007c29         pop        r12
0000000000007c2b         pop        r13
0000000000007c2d         pop        r14
0000000000007c2f         pop        r15
0000000000007c31         ret
                        ; endp
0000000000007c32         align      8

                     loc_7c38:
0000000000007c38         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+63
0000000000007c3a         xor        ebp, ebp
0000000000007c3c         xor        r13d, r13d
0000000000007c3f         jmp        loc_7bf0
0000000000007c41         align      8

                     loc_7c48:
0000000000007c48         xor        r13d, r13d                                  ; CODE XREF=freopen_safer+123
0000000000007c4b         test       bpl, bpl
0000000000007c4e         je         loc_7bd8

                     loc_7c50:
0000000000007c50         mov        edi, 0x1                                    ; CODE XREF=freopen_safer+150
0000000000007c55         call       protect_fd                                  ; protect_fd
0000000000007c5a         test       al, al
0000000000007c5c         mov        ebp, eax
0000000000007c5e         jne        loc_7bd8

0000000000007c64         xor        r12d, r12d
0000000000007c67         test       bl, bl
0000000000007c69         mov        r15d, dword [r14]
0000000000007c6c         je         loc_7c80

0000000000007c6e         mov        edi, 0x2                                    ; argument "__fd" for method j_close
0000000000007c73         call       j_close                                     ; close
0000000000007c78         nop        dword [rax+rax]

                     loc_7c80:
0000000000007c80         mov        edi, 0x1                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+209, freopen_safer+300
0000000000007c85         call       j_close                                     ; close
0000000000007c8a         test       r13b, r13b
0000000000007c8d         je         loc_7c18

                     loc_7c8f:
0000000000007c8f         xor        edi, edi                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+214
0000000000007c91         call       j_close                                     ; close
0000000000007c96         jmp        loc_7c18
0000000000007c98         align      32

                     loc_7ca0:
0000000000007ca0         mov        r15d, dword [r14]                           ; CODE XREF=freopen_safer+170
0000000000007ca3         xor        r12d, r12d
0000000000007ca6         nop        word [cs:rax+rax]

                     loc_7cb0:
0000000000007cb0         mov        edi, 0x2                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+200
0000000000007cb5         call       j_close                                     ; close
0000000000007cba         jmp        loc_7c0e
0000000000007cbf         align      64

                     loc_7cc0:
0000000000007cc0         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+55
0000000000007cc2         jmp        loc_7b9a
0000000000007cc7         align      16

                     loc_7cd0:
0000000000007cd0         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+46
0000000000007cd2         xor        ebp, ebp
0000000000007cd4         jmp        loc_7bb0
0000000000007cd9         align      32

                     loc_7ce0:
0000000000007ce0         mov        r13d, 0x1                                   ; CODE XREF=freopen_safer+141
0000000000007ce6         xor        r12d, r12d
0000000000007ce9         jmp        loc_7c03
0000000000007cee         align      16                                          ; End of unwind block (FDE at 0x243e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
0000000000007cf0         cmp        rdi, 0xa                                    ; Begin of unwind block (FDE at 0x24434), CODE XREF=hash_initialize+123, hash_rehash+123
0000000000007cf4         mov        eax, 0xa
0000000000007cf9         movabs     r9, 0xaaaaaaaaaaaaaaab
0000000000007d03         cmovb      rdi, rax
0000000000007d07         or         rdi, 0x1
0000000000007d0b         cmp        rdi, 0xffffffffffffffff
0000000000007d0f         je         loc_7d7f

0000000000007d11         nop        dword [rax]

                     loc_7d18:
0000000000007d18         mov        rax, rdi                                    ; CODE XREF=next_prime+141
0000000000007d1b         mov        rcx, rdi
0000000000007d1e         mul        r9
0000000000007d21         mov        rax, rdx
0000000000007d24         shr        rax, 0x1
0000000000007d27         lea        rax, qword [rax+rax*2]
0000000000007d2b         sub        rcx, rax
0000000000007d2e         cmp        rdi, 0x9
0000000000007d32         mov        rax, rcx
0000000000007d35         jbe        loc_7d70

0000000000007d37         test       rcx, rcx
0000000000007d3a         je         loc_7d75

0000000000007d3c         mov        r8d, 0x10
0000000000007d42         mov        esi, 0x9
0000000000007d47         mov        ecx, 0x3
0000000000007d4c         jmp        loc_7d59
0000000000007d4e         align      16

                     loc_7d50:
0000000000007d50         add        r8, 0x8                                     ; CODE XREF=next_prime+126
0000000000007d54         test       rdx, rdx
0000000000007d57         je         loc_7d75

                     loc_7d59:
0000000000007d59         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
0000000000007d5d         xor        edx, edx
0000000000007d5f         mov        rax, rdi
0000000000007d62         div        rcx
0000000000007d65         add        rsi, r8
0000000000007d68         cmp        rsi, rdi
0000000000007d6b         mov        rax, rdx
0000000000007d6e         jb         loc_7d50

                     loc_7d70:
0000000000007d70         test       rax, rax                                    ; CODE XREF=next_prime+69
0000000000007d73         jne        loc_7d7f

                     loc_7d75:
0000000000007d75         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
0000000000007d79         cmp        rdi, 0xffffffffffffffff
0000000000007d7d         jne        loc_7d18

                     loc_7d7f:
0000000000007d7f         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
0000000000007d82         ret
                        ; endp
0000000000007d83         align      16                                          ; End of unwind block (FDE at 0x24434)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
0000000000007d90         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x24448), DATA XREF=hash_initialize+4
0000000000007d93         xor        edx, edx
0000000000007d95         ror        rax, 0x3
0000000000007d99         div        rsi
0000000000007d9c         mov        rax, rdx
0000000000007d9f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
0000000000007da0         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0x24448), Begin of unwind block (FDE at 0x2445c), DATA XREF=hash_initialize+48
0000000000007da3         sete       al
0000000000007da6         ret
                        ; endp
0000000000007da7         align      16                                          ; End of unwind block (FDE at 0x2445c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
0000000000007db0         push       rbx                                         ; Begin of unwind block (FDE at 0x24470), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
0000000000007db1         mov        rbx, rdi
0000000000007db4         mov        rdi, rsi
0000000000007db7         mov        rsi, qword [rbx+0x10]
0000000000007dbb         call       qword [rbx+0x30]
0000000000007dbe         cmp        qword [rbx+0x10], rax
0000000000007dc2         jbe        loc_7dcd

0000000000007dc4         shl        rax, 0x4
0000000000007dc8         add        rax, qword [rbx]
0000000000007dcb         pop        rbx
0000000000007dcc         ret
                        ; endp

                     loc_7dcd:
0000000000007dcd         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
0000000000007dd2         align      32                                          ; End of unwind block (FDE at 0x24470)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
0000000000007de0         push       r14                                         ; Begin of unwind block (FDE at 0x2448c), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
0000000000007de2         push       r13
0000000000007de4         mov        r14, rdx
0000000000007de7         push       r12
0000000000007de9         push       rbp
0000000000007dea         mov        r12, rdi
0000000000007ded         push       rbx
0000000000007dee         mov        rbp, rsi
0000000000007df1         mov        r13d, ecx
0000000000007df4         call       safe_hasher                                 ; safe_hasher
0000000000007df9         mov        qword [r14], rax
0000000000007dfc         mov        rsi, qword [rax]
0000000000007dff         test       rsi, rsi
0000000000007e02         je         loc_7ef0

0000000000007e08         cmp        rsi, rbp
0000000000007e0b         mov        rbx, rax
0000000000007e0e         je         loc_7ea3

0000000000007e14         mov        rdi, rbp
0000000000007e17         call       qword [r12+0x38]
0000000000007e1c         test       al, al
0000000000007e1e         jne        loc_7ea0

0000000000007e24         mov        rax, qword [rbx+8]
0000000000007e28         test       rax, rax
0000000000007e2b         je         loc_7ef0

0000000000007e31         mov        rsi, qword [rax]
0000000000007e34         cmp        rbp, rsi
0000000000007e37         jne        loc_7e59

0000000000007e39         jmp        loc_7e6c
0000000000007e3b         align      64

                     loc_7e40:
0000000000007e40         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
0000000000007e44         mov        rax, qword [rbx+8]
0000000000007e48         test       rax, rax
0000000000007e4b         je         loc_7ef0

0000000000007e51         mov        rsi, qword [rax]
0000000000007e54         cmp        rsi, rbp
0000000000007e57         je         loc_7e6c

                     loc_7e59:
0000000000007e59         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
0000000000007e5c         call       qword [r12+0x38]
0000000000007e61         test       al, al
0000000000007e63         je         loc_7e40

0000000000007e65         mov        rax, qword [rbx+8]
0000000000007e69         mov        rsi, qword [rax]

                     loc_7e6c:
0000000000007e6c         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
0000000000007e6f         je         loc_7e8e

0000000000007e71         mov        rdx, qword [rax+8]
0000000000007e75         mov        qword [rbx+8], rdx
0000000000007e79         mov        qword [rax], 0x0
0000000000007e80         mov        rdx, qword [r12+0x48]
0000000000007e85         mov        qword [rax+8], rdx
0000000000007e89         mov        qword [r12+0x48], rax

                     loc_7e8e:
0000000000007e8e         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
0000000000007e8f         mov        rax, rsi
0000000000007e92         pop        rbp
0000000000007e93         pop        r12
0000000000007e95         pop        r13
0000000000007e97         pop        r14
0000000000007e99         ret
                        ; endp
0000000000007e9a         align      32

                     loc_7ea0:
0000000000007ea0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_7ea3:
0000000000007ea3         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
0000000000007ea6         je         loc_7e8e

0000000000007ea8         mov        rax, qword [rbx+8]
0000000000007eac         test       rax, rax
0000000000007eaf         je         loc_7ee0

0000000000007eb1         movdqu     xmm0, xmmword [rax]
0000000000007eb5         movups     xmmword [rbx], xmm0
0000000000007eb8         mov        qword [rax], 0x0
0000000000007ebf         mov        rdx, qword [r12+0x48]
0000000000007ec4         mov        qword [rax+8], rdx
0000000000007ec8         mov        qword [r12+0x48], rax
0000000000007ecd         mov        rax, rsi
0000000000007ed0         pop        rbx
0000000000007ed1         pop        rbp
0000000000007ed2         pop        r12
0000000000007ed4         pop        r13
0000000000007ed6         pop        r14
0000000000007ed8         ret
                        ; endp
0000000000007ed9         align      32

                     loc_7ee0:
0000000000007ee0         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
0000000000007ee7         jmp        loc_7e8e
0000000000007ee9         align      16

                     loc_7ef0:
0000000000007ef0         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
0000000000007ef2         pop        rbx
0000000000007ef3         mov        rax, rsi
0000000000007ef6         pop        rbp
0000000000007ef7         pop        r12
0000000000007ef9         pop        r13
0000000000007efb         pop        r14
0000000000007efd         ret
                        ; endp
0000000000007efe         align      256                                         ; End of unwind block (FDE at 0x2448c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
0000000000007f00         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0x244ec), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
0000000000007f03         lea        rcx, qword [default_tuning]                 ; default_tuning
0000000000007f0a         mov        eax, 0x1
0000000000007f0f         cmp        rdx, rcx
0000000000007f12         je         loc_7f75

0000000000007f14         movss      xmm0, dword [rdx+8]
0000000000007f19         ucomiss    xmm0, dword [float_219b4]                   ; float_219b4
0000000000007f20         jbe        loc_7f70

0000000000007f22         movss      xmm1, dword [float_219b8]                   ; float_219b8
0000000000007f2a         ucomiss    xmm1, xmm0
0000000000007f2d         jbe        loc_7f70

0000000000007f2f         movss      xmm1, dword [rdx+0xc]
0000000000007f34         ucomiss    xmm1, dword [float_219bc]                   ; float_219bc
0000000000007f3b         jbe        loc_7f70

0000000000007f3d         movss      xmm1, dword [rdx]
0000000000007f41         ucomiss    xmm1, dword [float_219c0]                   ; float_219c0
0000000000007f48         jb         loc_7f70

0000000000007f4a         addss      xmm1, dword [float_219b4]                   ; float_219b4
0000000000007f52         movss      xmm2, dword [rdx+4]
0000000000007f57         ucomiss    xmm2, xmm1
0000000000007f5a         jbe        loc_7f70

0000000000007f5c         movss      xmm3, dword [float_219c4]                   ; float_219c4
0000000000007f64         ucomiss    xmm3, xmm2
0000000000007f67         jb         loc_7f70

0000000000007f69         ucomiss    xmm0, xmm1
0000000000007f6c         ja         loc_7f75

0000000000007f6e         nop

                     loc_7f70:
0000000000007f70         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
0000000000007f73         xor        eax, eax

                     loc_7f75:
0000000000007f75         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
0000000000007f77         align      128                                         ; End of unwind block (FDE at 0x244ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
0000000000007f80         push       r15                                         ; Begin of unwind block (FDE at 0x24500), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
0000000000007f82         push       r14
0000000000007f84         push       r13
0000000000007f86         push       r12
0000000000007f88         push       rbp
0000000000007f89         push       rbx
0000000000007f8a         sub        rsp, 0x8
0000000000007f8e         mov        r12, qword [rsi]
0000000000007f91         cmp        r12, qword [rsi+8]
0000000000007f95         jae        loc_8078

0000000000007f9b         mov        rbp, rdi
0000000000007f9e         mov        r13, rsi
0000000000007fa1         mov        r14d, edx
0000000000007fa4         nop        dword [rax]

                     loc_7fa8:
0000000000007fa8         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
0000000000007fac         test       r15, r15
0000000000007faf         je         loc_806a

0000000000007fb5         mov        rbx, qword [r12+8]
0000000000007fba         test       rbx, rbx
0000000000007fbd         jne        loc_7fdc

0000000000007fbf         jmp        loc_801b
0000000000007fc1         align      8

                     loc_7fc8:
0000000000007fc8         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
0000000000007fcc         test       rdx, rdx
0000000000007fcf         mov        qword [rbx+8], rcx
0000000000007fd3         mov        qword [rax+8], rbx
0000000000007fd7         mov        rbx, rdx
0000000000007fda         je         loc_8017

                     loc_7fdc:
0000000000007fdc         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
0000000000007fdf         mov        rdi, rbp
0000000000007fe2         mov        rsi, r15
0000000000007fe5         call       safe_hasher                                 ; safe_hasher
0000000000007fea         cmp        qword [rax], 0x0
0000000000007fee         mov        rdx, qword [rbx+8]
0000000000007ff2         jne        loc_7fc8

0000000000007ff4         mov        qword [rax], r15
0000000000007ff7         add        qword [rbp+0x18], 0x1
0000000000007ffc         test       rdx, rdx
0000000000007fff         mov        qword [rbx], 0x0                            ; DATA XREF=sub_1baf0+1469, sub_1baf0+1510
0000000000008006         mov        rax, qword [rbp+0x48]
000000000000800a         mov        qword [rbx+8], rax
000000000000800e         mov        qword [rbp+0x48], rbx
0000000000008012         mov        rbx, rdx
0000000000008015         jne        loc_7fdc

                     loc_8017:
0000000000008017         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_801b:
000000000000801b         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
000000000000801e         mov        qword [r12+8], 0x0
0000000000008027         jne        loc_806a

0000000000008029         mov        rsi, r15
000000000000802c         mov        rdi, rbp
000000000000802f         call       safe_hasher                                 ; safe_hasher
0000000000008034         cmp        qword [rax], 0x0
0000000000008038         mov        rbx, rax
000000000000803b         je         loc_8090

000000000000803d         mov        rax, qword [rbp+0x48]
0000000000008041         test       rax, rax
0000000000008044         je         loc_80a0

0000000000008046         mov        rdx, qword [rax+8]
000000000000804a         mov        qword [rbp+0x48], rdx

                     loc_804e:
000000000000804e         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
0000000000008052         mov        qword [rax], r15
0000000000008055         mov        qword [rax+8], rdx
0000000000008059         mov        qword [rbx+8], rax

                     loc_805d:
000000000000805d         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
0000000000008065         sub        qword [r13+0x18], 0x1

                     loc_806a:
000000000000806a         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
000000000000806e         cmp        qword [r13+8], r12
0000000000008072         ja         loc_7fa8

                     loc_8078:
0000000000008078         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
000000000000807c         mov        eax, 0x1
0000000000008081         pop        rbx
0000000000008082         pop        rbp
0000000000008083         pop        r12
0000000000008085         pop        r13
0000000000008087         pop        r14
0000000000008089         pop        r15
000000000000808b         ret
                        ; endp
000000000000808c         align      16

                     loc_8090:
0000000000008090         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
0000000000008093         add        qword [rbp+0x18], 0x1
0000000000008098         jmp        loc_805d
000000000000809a         align      32

                     loc_80a0:
00000000000080a0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
00000000000080a5         call       j_malloc                                    ; malloc
00000000000080aa         test       rax, rax
00000000000080ad         jne        loc_804e

00000000000080af         add        rsp, 0x8
00000000000080b3         xor        eax, eax
00000000000080b5         pop        rbx
00000000000080b6         pop        rbp
00000000000080b7         pop        r12
00000000000080b9         pop        r13
00000000000080bb         pop        r14
00000000000080bd         pop        r15
00000000000080bf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
00000000000080c0         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0x24500), Begin of unwind block (FDE at 0x24560)
00000000000080c4         ret
                        ; endp
00000000000080c5         align      16                                          ; End of unwind block (FDE at 0x24560)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
00000000000080d0         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x24574)
00000000000080d4         ret
                        ; endp
00000000000080d5         align      32                                          ; End of unwind block (FDE at 0x24574)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
00000000000080e0         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0x24588)
00000000000080e4         ret
                        ; endp
00000000000080e5         align      16                                          ; End of unwind block (FDE at 0x24588)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
00000000000080f0         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0x2459c)
00000000000080f3         mov        rdi, qword [rdi+8]
00000000000080f7         xor        eax, eax
00000000000080f9         cmp        rsi, rdi
00000000000080fc         jae        loc_8137

00000000000080fe         nop

                     loc_8100:
0000000000008100         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
0000000000008104         je         loc_812c

0000000000008106         mov        rdx, qword [rsi+8]
000000000000810a         mov        ecx, 0x1
000000000000810f         test       rdx, rdx
0000000000008112         je         loc_8125

0000000000008114         nop        dword [rax]

                     loc_8118:
0000000000008118         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
000000000000811c         add        rcx, 0x1
0000000000008120         test       rdx, rdx
0000000000008123         jne        loc_8118

                     loc_8125:
0000000000008125         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
0000000000008128         cmovb      rax, rcx

                     loc_812c:
000000000000812c         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
0000000000008130         cmp        rsi, rdi
0000000000008133         jb         loc_8100

0000000000008135         ret
                        ; endp

                     loc_8137:
0000000000008137         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
0000000000008139         align      64                                          ; End of unwind block (FDE at 0x2459c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
0000000000008140         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0x245b0)
0000000000008143         mov        r8, qword [rdi+8]
0000000000008147         xor        edx, edx
0000000000008149         xor        esi, esi
000000000000814b         cmp        rcx, r8
000000000000814e         jae        loc_8186

                     loc_8150:
0000000000008150         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
0000000000008154         je         loc_817d

0000000000008156         mov        rax, qword [rcx+8]
000000000000815a         add        rsi, 0x1
000000000000815e         add        rdx, 0x1
0000000000008162         test       rax, rax
0000000000008165         je         loc_817d

0000000000008167         nop        word [rax+rax]

                     loc_8170:
0000000000008170         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
0000000000008174         add        rdx, 0x1
0000000000008178         test       rax, rax
000000000000817b         jne        loc_8170

                     loc_817d:
000000000000817d         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
0000000000008181         cmp        rcx, r8
0000000000008184         jb         loc_8150

                     loc_8186:
0000000000008186         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
0000000000008188         cmp        qword [rdi+0x18], rsi
000000000000818c         je         loc_8190

000000000000818e         ret
                        ; endp

                     loc_8190:
0000000000008190         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
0000000000008194         sete       al
0000000000008197         ret
                        ; endp
0000000000008198         align      32                                          ; End of unwind block (FDE at 0x245b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
00000000000081a0         push       r13                                         ; Begin of unwind block (FDE at 0x245c4)
00000000000081a2         push       r12
00000000000081a4         mov        r12, rsi
00000000000081a7         push       rbp
00000000000081a8         push       rbx
00000000000081a9         xor        ebx, ebx
00000000000081ab         sub        rsp, 0x8
00000000000081af         mov        rsi, qword [rdi]
00000000000081b2         mov        rcx, qword [rdi+0x20]
00000000000081b6         mov        rbp, qword [rdi+0x10]
00000000000081ba         mov        r13, qword [rdi+0x18]
00000000000081be         mov        rdi, qword [rdi+8]
00000000000081c2         cmp        rsi, rdi
00000000000081c5         jae        loc_8205

00000000000081c7         nop        word [rax+rax]

                     loc_81d0:
00000000000081d0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
00000000000081d4         je         loc_81fc

00000000000081d6         mov        rax, qword [rsi+8]
00000000000081da         mov        edx, 0x1
00000000000081df         test       rax, rax
00000000000081e2         je         loc_81f5

00000000000081e4         nop        dword [rax]

                     loc_81e8:
00000000000081e8         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
00000000000081ec         add        rdx, 0x1
00000000000081f0         test       rax, rax
00000000000081f3         jne        loc_81e8

                     loc_81f5:
00000000000081f5         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
00000000000081f8         cmovb      rbx, rdx

                     loc_81fc:
00000000000081fc         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
0000000000008200         cmp        rsi, rdi
0000000000008203         jb         loc_81d0

                     loc_8205:
0000000000008205         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
000000000000820c         mov        esi, 0x1
0000000000008211         mov        rdi, r12
0000000000008214         xor        eax, eax
0000000000008216         call       j___fprintf_chk                             ; __fprintf_chk
000000000000821b         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
0000000000008222         xor        eax, eax
0000000000008224         mov        rcx, rbp
0000000000008227         mov        esi, 0x1
000000000000822c         mov        rdi, r12
000000000000822f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008234         test       r13, r13
0000000000008237         js         loc_82a0

0000000000008239         pxor       xmm0, xmm0
000000000000823d         test       rbp, rbp
0000000000008240         cvtsi2sd   xmm0, r13
0000000000008245         mulsd      xmm0, qword [float_219d0+8]                 ; 0x219d8
000000000000824d         js         loc_82c9

                     loc_824f:
000000000000824f         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
0000000000008253         cvtsi2sd   xmm1, rbp

                     loc_8258:
0000000000008258         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
000000000000825c         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
0000000000008263         mov        rcx, r13
0000000000008266         mov        rdi, r12
0000000000008269         mov        esi, 0x1
000000000000826e         mov        eax, 0x1
0000000000008273         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008278         add        rsp, 0x8
000000000000827c         mov        rcx, rbx
000000000000827f         mov        rdi, r12
0000000000008282         pop        rbx
0000000000008283         pop        rbp
0000000000008284         pop        r12
0000000000008286         pop        r13
0000000000008288         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
000000000000828f         mov        esi, 0x1
0000000000008294         xor        eax, eax
0000000000008296         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000829b         align      32

                     loc_82a0:
00000000000082a0         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
00000000000082a3         mov        rdx, r13
00000000000082a6         pxor       xmm0, xmm0
00000000000082aa         shr        rax, 0x1
00000000000082ad         and        edx, 0x1
00000000000082b0         or         rax, rdx
00000000000082b3         test       rbp, rbp
00000000000082b6         cvtsi2sd   xmm0, rax
00000000000082bb         addsd      xmm0, xmm0
00000000000082bf         mulsd      xmm0, qword [float_219d0+8]                 ; 0x219d8
00000000000082c7         jns        loc_824f

                     loc_82c9:
00000000000082c9         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
00000000000082cc         pxor       xmm1, xmm1
00000000000082d0         shr        rax, 0x1
00000000000082d3         and        ebp, 0x1
00000000000082d6         or         rax, rbp
00000000000082d9         cvtsi2sd   xmm1, rax
00000000000082de         addsd      xmm1, xmm1
00000000000082e2         jmp        loc_8258
00000000000082e7         align      16                                          ; End of unwind block (FDE at 0x245c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
00000000000082f0         push       r12                                         ; Begin of unwind block (FDE at 0x24600), CODE XREF=di_set_lookup+60, excluded_file_name+94, excluded_file_name+136, filesystem_type+71
00000000000082f2         push       rbp
00000000000082f3         mov        r12, rdi
00000000000082f6         push       rbx
00000000000082f7         mov        rbp, rsi
00000000000082fa         call       safe_hasher                                 ; safe_hasher
00000000000082ff         mov        rsi, qword [rax]
0000000000008302         test       rsi, rsi
0000000000008305         je         loc_832d

0000000000008307         mov        rbx, rax
000000000000830a         jmp        loc_8313
000000000000830c         align      16

                     loc_8310:
0000000000008310         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_8313:
0000000000008313         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
0000000000008316         je         loc_832f

0000000000008318         mov        rdi, rbp
000000000000831b         call       qword [r12+0x38]
0000000000008320         test       al, al
0000000000008322         jne        loc_8340

0000000000008324         mov        rbx, qword [rbx+8]
0000000000008328         test       rbx, rbx
000000000000832b         jne        loc_8310

                     loc_832d:
000000000000832d         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_832f:
000000000000832f         pop        rbx                                         ; CODE XREF=hash_lookup+38
0000000000008330         mov        rax, rsi
0000000000008333         pop        rbp
0000000000008334         pop        r12
0000000000008336         ret
                        ; endp
0000000000008337         align      64

                     loc_8340:
0000000000008340         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
0000000000008343         pop        rbx
0000000000008344         pop        rbp
0000000000008345         mov        rax, rsi
0000000000008348         pop        r12
000000000000834a         ret
                        ; endp
000000000000834b         align      16                                          ; End of unwind block (FDE at 0x24600)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
0000000000008350         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0x24638)
0000000000008355         je         loc_8383

0000000000008357         mov        rdx, qword [rdi]
000000000000835a         mov        rcx, qword [rdi+8]
000000000000835e         cmp        rdx, rcx
0000000000008361         jae        loc_8388

0000000000008363         mov        rax, qword [rdx]
0000000000008366         test       rax, rax
0000000000008369         jne        loc_8386

000000000000836b         nop        dword [rax+rax]

                     loc_8370:
0000000000008370         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
0000000000008374         cmp        rdx, rcx
0000000000008377         jae        loc_8388

0000000000008379         mov        rax, qword [rdx]
000000000000837c         test       rax, rax
000000000000837f         je         loc_8370

0000000000008381         ret
                        ; endp

                     loc_8383:
0000000000008383         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
0000000000008385         ret
                        ; endp

                     loc_8386:
0000000000008386         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_8388:
0000000000008388         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
000000000000838c         call       j_abort                                     ; abort
                        ; endp
0000000000008391         align      32                                          ; End of unwind block (FDE at 0x24638)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
00000000000083a0         push       rbp                                         ; Begin of unwind block (FDE at 0x2464c)
00000000000083a1         push       rbx
00000000000083a2         mov        rbp, rdi
00000000000083a5         mov        rbx, rsi
00000000000083a8         sub        rsp, 0x8
00000000000083ac         call       safe_hasher                                 ; safe_hasher
00000000000083b1         mov        rdx, rax
00000000000083b4         mov        rcx, rax
00000000000083b7         mov        rax, qword [rdx]
00000000000083ba         mov        rdx, qword [rdx+8]
00000000000083be         cmp        rax, rbx
00000000000083c1         je         loc_83d9

00000000000083c3         nop        dword [rax+rax]

                     loc_83c8:
00000000000083c8         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
00000000000083cb         je         loc_83de

00000000000083cd         mov        rax, qword [rdx]
00000000000083d0         mov        rdx, qword [rdx+8]
00000000000083d4         cmp        rax, rbx
00000000000083d7         jne        loc_83c8

                     loc_83d9:
00000000000083d9         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
00000000000083dc         jne        loc_8408

                     loc_83de:
00000000000083de         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
00000000000083e2         jmp        loc_83f0
00000000000083e4         align      8

                     loc_83e8:
00000000000083e8         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
00000000000083eb         test       rax, rax
00000000000083ee         jne        loc_83fb

                     loc_83f0:
00000000000083f0         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
00000000000083f4         cmp        rdx, rcx
00000000000083f7         ja         loc_83e8

00000000000083f9         xor        eax, eax

                     loc_83fb:
00000000000083fb         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
00000000000083ff         pop        rbx
0000000000008400         pop        rbp                                         ; DATA XREF=peek_token+600, peek_token+969
0000000000008401         ret
                        ; endp
0000000000008402         align      8

                     loc_8408:
0000000000008408         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
000000000000840b         add        rsp, 0x8
000000000000840f         pop        rbx
0000000000008410         pop        rbp
0000000000008411         ret
                        ; endp
0000000000008412         align      32                                          ; End of unwind block (FDE at 0x2464c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
0000000000008420         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0x24680)
0000000000008423         cmp        qword [rdi+8], r9
0000000000008427         jbe        loc_8482

0000000000008429         xor        r8d, r8d

                     loc_842c:
000000000000842c         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
000000000000842f         test       rcx, rcx
0000000000008432         je         loc_846d

0000000000008434         cmp        rdx, r8
0000000000008437         jbe        loc_8477

0000000000008439         mov        qword [rsi+r8*8], rcx
000000000000843d         mov        rcx, qword [r9+8]
0000000000008441         lea        rax, qword [r8+1]
0000000000008445         test       rcx, rcx
0000000000008448         je         loc_846a

000000000000844a         nop        word [rax+rax]

                     loc_8450:
0000000000008450         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
0000000000008453         je         loc_8480

0000000000008455         mov        r8, qword [rcx]
0000000000008458         add        rax, 0x1
000000000000845c         mov        qword [rsi+rax*8-8], r8
0000000000008461         mov        rcx, qword [rcx+8]
0000000000008465         test       rcx, rcx
0000000000008468         jne        loc_8450

                     loc_846a:
000000000000846a         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_846d:
000000000000846d         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
0000000000008471         cmp        qword [rdi+8], r9
0000000000008475         ja         loc_842c

                     loc_8477:
0000000000008477         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
000000000000847a         ret
                        ; endp
000000000000847b         align      128

                     loc_8480:
0000000000008480         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_8482:
0000000000008482         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
0000000000008484         ret
                        ; endp
0000000000008485         align      16                                          ; End of unwind block (FDE at 0x24680)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
0000000000008490         push       r15                                         ; Begin of unwind block (FDE at 0x24694)
0000000000008492         push       r14
0000000000008494         push       r13
0000000000008496         push       r12
0000000000008498         push       rbp
0000000000008499         push       rbx
000000000000849a         sub        rsp, 0x8
000000000000849e         mov        r14, qword [rdi]
00000000000084a1         cmp        qword [rdi+8], r14
00000000000084a5         jbe        loc_84f6

00000000000084a7         mov        r13, rdx
00000000000084aa         mov        r12, rsi
00000000000084ad         mov        r15, rdi
00000000000084b0         xor        ebp, ebp

                     loc_84b2:
00000000000084b2         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
00000000000084b5         test       rdi, rdi
00000000000084b8         je         loc_84da

00000000000084ba         mov        rbx, r14
00000000000084bd         jmp        loc_84c3
00000000000084bf         align      64

                     loc_84c0:
00000000000084c0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_84c3:
00000000000084c3         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
00000000000084c6         call       r12
00000000000084c9         test       al, al
00000000000084cb         je         loc_84e4

00000000000084cd         mov        rbx, qword [rbx+8]
00000000000084d1         add        rbp, 0x1
00000000000084d5         test       rbx, rbx
00000000000084d8         jne        loc_84c0

                     loc_84da:
00000000000084da         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
00000000000084de         cmp        qword [r15+8], r14
00000000000084e2         ja         loc_84b2

                     loc_84e4:
00000000000084e4         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
00000000000084e8         mov        rax, rbp
00000000000084eb         pop        rbx
00000000000084ec         pop        rbp
00000000000084ed         pop        r12
00000000000084ef         pop        r13
00000000000084f1         pop        r14
00000000000084f3         pop        r15
00000000000084f5         ret
                        ; endp

                     loc_84f6:
00000000000084f6         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
00000000000084f8         jmp        loc_84e4
00000000000084fa         align      256                                         ; End of unwind block (FDE at 0x24694)

                     hash_string:
0000000000008500         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0x246e0), CODE XREF=string_hasher
0000000000008503         xor        edx, edx
0000000000008505         test       cl, cl
0000000000008507         je         loc_852d

0000000000008509         nop        dword [rax]

                     loc_8510:
0000000000008510         mov        rax, rdx                                    ; CODE XREF=hash_string+43
0000000000008513         add        rdi, 0x1
0000000000008517         shl        rax, 0x5
000000000000851b         sub        rax, rdx
000000000000851e         xor        edx, edx
0000000000008520         add        rax, rcx
0000000000008523         movzx      ecx, byte [rdi]
0000000000008526         div        rsi
0000000000008529         test       cl, cl
000000000000852b         jne        loc_8510

                     loc_852d:
000000000000852d         mov        rax, rdx                                    ; CODE XREF=hash_string+7
0000000000008530         ret
                        ; endp
0000000000008531         align      64                                          ; End of unwind block (FDE at 0x246e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
0000000000008540         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0x246f4)
000000000000854a         mov        byte [rdi+0x10], 0x0
000000000000854e         mov        qword [rdi], rax
0000000000008551         movabs     rax, 0x3fb4fdf43f4ccccd
000000000000855b         mov        qword [rdi+8], rax
000000000000855f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
0000000000008560         push       r15                                         ; End of unwind block (FDE at 0x246f4), Begin of unwind block (FDE at 0x24708), CODE XREF=map_device.isra.0+163, di_set_alloc+47, add_exclude+347, ino_map_alloc+55, filesystem_type+124, setup_dir.isra.4+40
0000000000008562         push       r14
0000000000008564         lea        rax, qword [raw_hasher]                     ; raw_hasher
000000000000856b         push       r13
000000000000856d         push       r12
000000000000856f         mov        r12, rdx
0000000000008572         push       rbp
0000000000008573         push       rbx
0000000000008574         mov        r13, rcx
0000000000008577         mov        rbp, rdi
000000000000857a         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
000000000000857f         mov        r15, rsi
0000000000008582         sub        rsp, 0x8
0000000000008586         test       rdx, rdx
0000000000008589         mov        r14, r8
000000000000858c         cmove      r12, rax
0000000000008590         lea        rax, qword [raw_comparator]                 ; raw_comparator
0000000000008597         test       rcx, rcx
000000000000859a         cmove      r13, rax
000000000000859e         call       j_malloc                                    ; malloc
00000000000085a3         test       rax, rax
00000000000085a6         mov        rbx, rax
00000000000085a9         je         loc_865a

00000000000085af         test       r15, r15
00000000000085b2         lea        rdi, qword [rax+0x28]
00000000000085b6         je         loc_8670

00000000000085bc         mov        qword [rax+0x28], r15
00000000000085c0         call       check_tuning.isra.0                         ; check_tuning.isra.0
00000000000085c5         test       al, al
00000000000085c7         je         loc_8650

00000000000085cd         cmp        byte [r15+0x10], 0x0
00000000000085d2         je         loc_86d0

                     loc_85d8:
00000000000085d8         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
00000000000085db         call       next_prime                                  ; next_prime
00000000000085e0         mov        edx, 0x8
00000000000085e5         mov        rbp, rax
00000000000085e8         xor        ecx, ecx
00000000000085ea         mov        rax, rdx
00000000000085ed         mul        rbp
00000000000085f0         jo         loc_870a

                     loc_85f6:
00000000000085f6         test       rax, rax                                    ; CODE XREF=hash_initialize+431
00000000000085f9         js         loc_8650

00000000000085fb         test       rcx, rcx
00000000000085fe         jne        loc_8650

0000000000008600         test       rbp, rbp
0000000000008603         mov        qword [rbx+0x10], rbp
0000000000008607         je         loc_8650

0000000000008609         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
000000000000860e         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
0000000000008611         call       j_calloc                                    ; calloc
0000000000008616         test       rax, rax
0000000000008619         mov        qword [rbx], rax
000000000000861c         je         loc_8650

000000000000861e         shl        rbp, 0x4
0000000000008622         mov        qword [rbx+0x18], 0x0
000000000000862a         mov        qword [rbx+0x20], 0x0
0000000000008632         add        rbp, rax
0000000000008635         mov        qword [rbx+0x30], r12
0000000000008639         mov        qword [rbx+0x38], r13
000000000000863d         mov        qword [rbx+8], rbp
0000000000008641         mov        qword [rbx+0x40], r14
0000000000008645         mov        qword [rbx+0x48], 0x0
000000000000864d         jmp        loc_865a
000000000000864f         align      16

                     loc_8650:
0000000000008650         mov        rdi, rbx                                    ; CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
0000000000008653         xor        ebx, ebx
0000000000008655         call       sub_2a10                                    ; sub_2a10

                     loc_865a:
000000000000865a         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
000000000000865e         mov        rax, rbx
0000000000008661         pop        rbx
0000000000008662         pop        rbp
0000000000008663         pop        r12
0000000000008665         pop        r13
0000000000008667         pop        r14
0000000000008669         pop        r15
000000000000866b         ret
                        ; endp
000000000000866c         align      16

                     loc_8670:
0000000000008670         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
0000000000008677         mov        qword [rbx+0x28], rax
000000000000867b         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000008680         test       al, al
0000000000008682         movss      xmm1, dword [float_219c8]                   ; float_219c8
000000000000868a         je         loc_8650

000000000000868c         test       rbp, rbp
000000000000868f         js         loc_86db

                     loc_8691:
0000000000008691         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
0000000000008695         cvtsi2ss   xmm0, rbp

                     loc_869a:
000000000000869a         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
000000000000869e         ucomiss    xmm0, dword [float_219cc]                   ; float_219cc
00000000000086a5         jae        loc_8650

00000000000086a7         ucomiss    xmm0, dword [float_219d0]                   ; float_219d0
00000000000086ae         jb         loc_8700

00000000000086b0         subss      xmm0, dword [float_219d0]                   ; float_219d0
00000000000086b8         movabs     rax, 0x8000000000000000
00000000000086c2         cvttss2si  rbp, xmm0
00000000000086c7         xor        rbp, rax
00000000000086ca         jmp        loc_85d8
00000000000086cf         align      16

                     loc_86d0:
00000000000086d0         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
00000000000086d3         movss      xmm1, dword [r15+8]
00000000000086d9         jns        loc_8691

                     loc_86db:
00000000000086db         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
00000000000086de         pxor       xmm0, xmm0
00000000000086e2         shr        rax, 0x1
00000000000086e5         and        ebp, 0x1
00000000000086e8         or         rax, rbp
00000000000086eb         cvtsi2ss   xmm0, rax
00000000000086f0         addss      xmm0, xmm0
00000000000086f4         jmp        loc_869a
00000000000086f6         align      256

                     loc_8700:
0000000000008700         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
0000000000008705         jmp        loc_85d8

                     loc_870a:
000000000000870a         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
000000000000870f         jmp        loc_85f6
0000000000008714         align      32                                          ; End of unwind block (FDE at 0x24708)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
0000000000008720         push       r12                                         ; Begin of unwind block (FDE at 0x24754)
0000000000008722         push       rbp
0000000000008723         mov        rbp, rdi
0000000000008726         push       rbx
0000000000008727         mov        r12, qword [rdi]
000000000000872a         cmp        r12, qword [rdi+8]
000000000000872e         jae        loc_879b

                     loc_8730:
0000000000008730         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
0000000000008735         je         loc_8791

0000000000008737         mov        rbx, qword [r12+8]
000000000000873c         mov        rax, qword [rbp+0x40]
0000000000008740         test       rbx, rbx
0000000000008743         je         loc_8775

0000000000008745         nop        dword [rax]

                     loc_8748:
0000000000008748         test       rax, rax                                    ; CODE XREF=hash_clear+83
000000000000874b         je         loc_8756

000000000000874d         mov        rdi, qword [rbx]
0000000000008750         call       rax
0000000000008752         mov        rax, qword [rbp+0x40]

                     loc_8756:
0000000000008756         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
000000000000875a         mov        rcx, qword [rbp+0x48]
000000000000875e         mov        qword [rbx], 0x0
0000000000008765         test       rdx, rdx
0000000000008768         mov        qword [rbx+8], rcx
000000000000876c         mov        qword [rbp+0x48], rbx
0000000000008770         mov        rbx, rdx
0000000000008773         jne        loc_8748

                     loc_8775:
0000000000008775         test       rax, rax                                    ; CODE XREF=hash_clear+35
0000000000008778         je         loc_8780

000000000000877a         mov        rdi, qword [r12]
000000000000877e         call       rax

                     loc_8780:
0000000000008780         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
0000000000008788         mov        qword [r12+8], 0x0

                     loc_8791:
0000000000008791         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
0000000000008795         cmp        qword [rbp+8], r12
0000000000008799         ja         loc_8730

                     loc_879b:
000000000000879b         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
00000000000087a3         mov        qword [rbp+0x20], 0x0
00000000000087ab         pop        rbx
00000000000087ac         pop        rbp
00000000000087ad         pop        r12
00000000000087af         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
00000000000087b0         push       r12                                         ; End of unwind block (FDE at 0x24754), Begin of unwind block (FDE at 0x24780), CODE XREF=di_ent_free+8, di_set_free+7, free_exclude+204, ino_map_free+7, rpl_fts_close+154, rpl_fts_close+177, rpl_fts_read+713
00000000000087b2         push       rbp
00000000000087b3         mov        r12, rdi
00000000000087b6         push       rbx
00000000000087b7         cmp        qword [rdi+0x40], 0x0
00000000000087bc         mov        rbp, qword [rdi]
00000000000087bf         mov        rax, qword [rdi+8]
00000000000087c3         je         loc_8813

00000000000087c5         cmp        qword [rdi+0x20], 0x0
00000000000087ca         je         loc_8813

00000000000087cc         cmp        rbp, rax
00000000000087cf         jae        loc_884c

00000000000087d1         nop        dword [rax]

                     loc_87d8:
00000000000087d8         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
00000000000087dc         test       rdi, rdi
00000000000087df         je         loc_8806

00000000000087e1         mov        rbx, rbp
00000000000087e4         jmp        loc_87f3
00000000000087e6         align      16

                     loc_87f0:
00000000000087f0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_87f3:
00000000000087f3         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
00000000000087f8         mov        rbx, qword [rbx+8]
00000000000087fc         test       rbx, rbx
00000000000087ff         jne        loc_87f0

0000000000008801         mov        rax, qword [r12+8]

                     loc_8806:
0000000000008806         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
000000000000880a         cmp        rax, rbp
000000000000880d         ja         loc_87d8

000000000000880f         mov        rbp, qword [r12]

                     loc_8813:
0000000000008813         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
0000000000008816         jae        loc_884c

0000000000008818         nop        dword [rax+rax]

                     loc_8820:
0000000000008820         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
0000000000008824         test       rdi, rdi
0000000000008827         je         loc_8841

0000000000008829         nop        dword [rax]

                     loc_8830:
0000000000008830         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
0000000000008834         call       sub_2a10                                    ; sub_2a10
0000000000008839         test       rbx, rbx
000000000000883c         mov        rdi, rbx
000000000000883f         jne        loc_8830

                     loc_8841:
0000000000008841         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
0000000000008845         cmp        qword [r12+8], rbp
000000000000884a         ja         loc_8820

                     loc_884c:
000000000000884c         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
0000000000008851         test       rdi, rdi
0000000000008854         je         loc_8871

0000000000008856         nop        word [cs:rax+rax]

                     loc_8860:
0000000000008860         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
0000000000008864         call       sub_2a10                                    ; sub_2a10
0000000000008869         test       rbx, rbx
000000000000886c         mov        rdi, rbx
000000000000886f         jne        loc_8860

                     loc_8871:
0000000000008871         mov        rdi, qword [r12]                            ; CODE XREF=hash_free+164
0000000000008875         call       sub_2a10                                    ; sub_2a10
000000000000887a         pop        rbx
000000000000887b         mov        rdi, r12
000000000000887e         pop        rbp
000000000000887f         pop        r12
0000000000008881         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000008886         align      16                                          ; End of unwind block (FDE at 0x24780)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
0000000000008890         push       r12                                         ; Begin of unwind block (FDE at 0x247ac), CODE XREF=hash_insert_if_absent+443, hash_delete+271
0000000000008892         push       rbp
0000000000008893         mov        rbp, rdi
0000000000008896         push       rbx
0000000000008897         sub        rsp, 0x60
000000000000889b         mov        r12, qword [rdi+0x28]
000000000000889f         mov        rax, qword [fs:0x28]
00000000000088a8         mov        qword [rsp+0x78+var_20], rax
00000000000088ad         xor        eax, eax
00000000000088af         cmp        byte [r12+0x10], 0x0
00000000000088b5         jne        loc_8908

00000000000088b7         test       rsi, rsi
00000000000088ba         js         loc_8a38

00000000000088c0         pxor       xmm0, xmm0
00000000000088c4         cvtsi2ss   xmm0, rsi

                     loc_88c9:
00000000000088c9         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
00000000000088d0         ucomiss    xmm0, dword [float_219cc]                   ; float_219cc
00000000000088d7         jae        loc_8a10

00000000000088dd         ucomiss    xmm0, dword [float_219d0]                   ; float_219d0
00000000000088e4         jb         loc_8a60

00000000000088ea         subss      xmm0, dword [float_219d0]                   ; float_219d0
00000000000088f2         movabs     rax, 0x8000000000000000
00000000000088fc         cvttss2si  rsi, xmm0
0000000000008901         xor        rsi, rax
0000000000008904         nop        dword [rax]

                     loc_8908:
0000000000008908         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
000000000000890b         call       next_prime                                  ; next_prime
0000000000008910         mov        edx, 0x8
0000000000008915         mov        rbx, rax
0000000000008918         xor        ecx, ecx
000000000000891a         mov        rax, rdx
000000000000891d         mul        rbx
0000000000008920         jo         loc_8abf

                     loc_8926:
0000000000008926         test       rax, rax                                    ; CODE XREF=hash_rehash+564
0000000000008929         mov        eax, 0x1
000000000000892e         cmovs      rcx, rax
0000000000008932         test       rbx, rbx
0000000000008935         je         loc_8a10

000000000000893b         and        ecx, 0x1
000000000000893e         jne        loc_8a10

0000000000008944         cmp        qword [rbp+0x10], rbx
0000000000008948         je         loc_8a70

000000000000894e         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000008953         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
0000000000008956         call       j_calloc                                    ; calloc
000000000000895b         test       rax, rax
000000000000895e         mov        qword [rsp+0x78+var_78], rax
0000000000008962         je         loc_8a10

0000000000008968         mov        qword [rsp+0x78+var_68], rbx
000000000000896d         shl        rbx, 0x4
0000000000008971         mov        qword [rsp+0x78+var_50], r12
0000000000008976         add        rbx, rax
0000000000008979         mov        rax, qword [rbp+0x30]
000000000000897d         mov        r12, rsp
0000000000008980         xor        edx, edx
0000000000008982         mov        rsi, rbp
0000000000008985         mov        rdi, r12
0000000000008988         mov        qword [rsp+0x78+var_70], rbx
000000000000898d         mov        qword [rsp+0x78+var_60], 0x0
0000000000008996         mov        qword [rsp+0x78+var_48], rax
000000000000899b         mov        rax, qword [rbp+0x38]
000000000000899f         mov        qword [rsp+0x78+var_58], 0x0
00000000000089a8         mov        qword [rsp+0x78+var_40], rax
00000000000089ad         mov        rax, qword [rbp+0x40]
00000000000089b1         mov        qword [rsp+0x78+var_38], rax
00000000000089b6         mov        rax, qword [rbp+0x48]
00000000000089ba         mov        qword [rsp+0x78+var_30], rax
00000000000089bf         call       transfer_entries                            ; transfer_entries
00000000000089c4         test       al, al
00000000000089c6         mov        ebx, eax
00000000000089c8         jne        loc_8a80

00000000000089ce         mov        rax, qword [rsp+0x78+var_30]
00000000000089d3         mov        edx, 0x1
00000000000089d8         mov        rsi, r12
00000000000089db         mov        rdi, rbp
00000000000089de         mov        qword [rbp+0x48], rax
00000000000089e2         call       transfer_entries                            ; transfer_entries
00000000000089e7         test       al, al
00000000000089e9         je         loc_8ac9

00000000000089ef         xor        edx, edx
00000000000089f1         mov        rsi, r12
00000000000089f4         mov        rdi, rbp
00000000000089f7         call       transfer_entries                            ; transfer_entries
00000000000089fc         test       al, al
00000000000089fe         je         loc_8ac9

0000000000008a04         mov        rdi, qword [rsp+0x78+var_78]
0000000000008a08         call       sub_2a10                                    ; sub_2a10
0000000000008a0d         jmp        loc_8a12
0000000000008a0f         align      16

                     loc_8a10:
0000000000008a10         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_8a12:
0000000000008a12         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
0000000000008a17         xor        rcx, qword [fs:0x28]
0000000000008a20         mov        eax, ebx
0000000000008a22         jne        loc_8aba

0000000000008a28         add        rsp, 0x60
0000000000008a2c         pop        rbx
0000000000008a2d         pop        rbp
0000000000008a2e         pop        r12
0000000000008a30         ret
                        ; endp
0000000000008a31         align      8

                     loc_8a38:
0000000000008a38         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
0000000000008a3b         pxor       xmm0, xmm0
0000000000008a3f         shr        rax, 0x1
0000000000008a42         and        esi, 0x1
0000000000008a45         or         rax, rsi
0000000000008a48         cvtsi2ss   xmm0, rax
0000000000008a4d         addss      xmm0, xmm0
0000000000008a51         jmp        loc_88c9
0000000000008a56         align      32

                     loc_8a60:
0000000000008a60         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
0000000000008a65         jmp        loc_8908
0000000000008a6a         align      16

                     loc_8a70:
0000000000008a70         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
0000000000008a75         jmp        loc_8a12
0000000000008a77         align      128

                     loc_8a80:
0000000000008a80         mov        rdi, qword [rbp]                            ; CODE XREF=hash_rehash+312
0000000000008a84         call       sub_2a10                                    ; sub_2a10
0000000000008a89         mov        rax, qword [rsp+0x78+var_78]
0000000000008a8d         mov        qword [rbp], rax
0000000000008a91         mov        rax, qword [rsp+0x78+var_70]
0000000000008a96         mov        qword [rbp+8], rax
0000000000008a9a         mov        rax, qword [rsp+0x78+var_68]
0000000000008a9f         mov        qword [rbp+0x10], rax
0000000000008aa3         mov        rax, qword [rsp+0x78+var_60]
0000000000008aa8         mov        qword [rbp+0x18], rax
0000000000008aac         mov        rax, qword [rsp+0x78+var_30]
0000000000008ab1         mov        qword [rbp+0x48], rax
0000000000008ab5         jmp        loc_8a12

                     loc_8aba:
0000000000008aba         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_8abf:
0000000000008abf         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
0000000000008ac4         jmp        loc_8926

                     loc_8ac9:
0000000000008ac9         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
0000000000008ace         align      16                                          ; End of unwind block (FDE at 0x247ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
0000000000008ad0         push       r13                                         ; Begin of unwind block (FDE at 0x247e4), CODE XREF=di_set_insert+66, hash_insert+27
0000000000008ad2         push       r12
0000000000008ad4         push       rbp
0000000000008ad5         push       rbx
0000000000008ad6         sub        rsp, 0x18
0000000000008ada         mov        rax, qword [fs:0x28]
0000000000008ae3         mov        qword [rsp+0x38+var_30], rax
0000000000008ae8         xor        eax, eax
0000000000008aea         test       rsi, rsi
0000000000008aed         je         loc_8cad

0000000000008af3         mov        r12, rsp
0000000000008af6         xor        ecx, ecx
0000000000008af8         mov        r13, rdx
0000000000008afb         mov        rdx, r12
0000000000008afe         mov        rbx, rdi
0000000000008b01         mov        rbp, rsi
0000000000008b04         call       hash_find_entry                             ; hash_find_entry
0000000000008b09         test       rax, rax
0000000000008b0c         mov        rdx, rax
0000000000008b0f         je         loc_8b40

0000000000008b11         xor        eax, eax
0000000000008b13         test       r13, r13
0000000000008b16         je         loc_8b1c

0000000000008b18         mov        qword [r13], rdx

                     loc_8b1c:
0000000000008b1c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
0000000000008b21         xor        rcx, qword [fs:0x28]
0000000000008b2a         jne        loc_8d4f

0000000000008b30         add        rsp, 0x18
0000000000008b34         pop        rbx
0000000000008b35         pop        rbp
0000000000008b36         pop        r12
0000000000008b38         pop        r13
0000000000008b3a         ret
                        ; endp
0000000000008b3b         align      64

                     loc_8b40:
0000000000008b40         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
0000000000008b44         test       rax, rax
0000000000008b47         js         loc_8bc0

0000000000008b49         pxor       xmm1, xmm1
0000000000008b4d         mov        rdx, qword [rbx+0x28]
0000000000008b51         cvtsi2ss   xmm1, rax
0000000000008b56         mov        rax, qword [rbx+0x10]
0000000000008b5a         test       rax, rax
0000000000008b5d         js         loc_8bea

                     loc_8b63:
0000000000008b63         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
0000000000008b67         cvtsi2ss   xmm0, rax

                     loc_8b6c:
0000000000008b6c         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
0000000000008b71         ucomiss    xmm1, xmm0
0000000000008b74         ja         loc_8c10

                     loc_8b7a:
0000000000008b7a         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
0000000000008b7e         cmp        qword [r12], 0x0
0000000000008b83         je         loc_8cb8

0000000000008b89         mov        rax, qword [rbx+0x48]
0000000000008b8d         test       rax, rax
0000000000008b90         je         loc_8cd0

0000000000008b96         mov        rdx, qword [rax+8]
0000000000008b9a         mov        qword [rbx+0x48], rdx

                     loc_8b9e:
0000000000008b9e         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
0000000000008ba3         mov        qword [rax], rbp
0000000000008ba6         mov        qword [rax+8], rdx
0000000000008baa         mov        qword [r12+8], rax
0000000000008baf         mov        eax, 0x1
0000000000008bb4         add        qword [rbx+0x20], 0x1
0000000000008bb9         jmp        loc_8b1c
0000000000008bbe         align      64

                     loc_8bc0:
0000000000008bc0         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
0000000000008bc3         pxor       xmm1, xmm1
0000000000008bc7         and        eax, 0x1
0000000000008bca         shr        rdx, 0x1
0000000000008bcd         or         rdx, rax
0000000000008bd0         mov        rax, qword [rbx+0x10]
0000000000008bd4         cvtsi2ss   xmm1, rdx
0000000000008bd9         mov        rdx, qword [rbx+0x28]
0000000000008bdd         test       rax, rax
0000000000008be0         addss      xmm1, xmm1
0000000000008be4         jns        loc_8b63

                     loc_8bea:
0000000000008bea         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
0000000000008bed         pxor       xmm0, xmm0
0000000000008bf1         shr        rcx, 0x1
0000000000008bf4         and        eax, 0x1
0000000000008bf7         or         rcx, rax
0000000000008bfa         cvtsi2ss   xmm0, rcx
0000000000008bff         addss      xmm0, xmm0
0000000000008c03         jmp        loc_8b6c
0000000000008c08         align      16

                     loc_8c10:
0000000000008c10         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
0000000000008c14         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000008c19         mov        rax, qword [rbx+0x10]
0000000000008c1d         mov        rdx, qword [rbx+0x28]
0000000000008c21         test       rax, rax
0000000000008c24         movss      xmm2, dword [rdx+8]
0000000000008c29         js         loc_8cf0

0000000000008c2f         pxor       xmm0, xmm0
0000000000008c33         cvtsi2ss   xmm0, rax

                     loc_8c38:
0000000000008c38         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
0000000000008c3c         test       rax, rax
0000000000008c3f         js         loc_8d10

0000000000008c45         pxor       xmm1, xmm1
0000000000008c49         cvtsi2ss   xmm1, rax

                     loc_8c4e:
0000000000008c4e         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
0000000000008c51         mulss      xmm3, xmm0
0000000000008c55         ucomiss    xmm1, xmm3
0000000000008c58         jbe        loc_8b7a

0000000000008c5e         cmp        byte [rdx+0x10], 0x0
0000000000008c62         mulss      xmm0, dword [rdx+0xc]
0000000000008c67         jne        loc_8c6d

0000000000008c69         mulss      xmm0, xmm2

                     loc_8c6d:
0000000000008c6d         ucomiss    xmm0, dword [float_219cc]                   ; float_219cc, CODE XREF=hash_insert_if_absent+407
0000000000008c74         jae        loc_8ce3

0000000000008c76         ucomiss    xmm0, dword [float_219d0]                   ; float_219d0
0000000000008c7d         jae        loc_8d30

0000000000008c83         cvttss2si  rsi, xmm0

                     loc_8c88:
0000000000008c88         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
0000000000008c8b         call       hash_rehash                                 ; hash_rehash
0000000000008c90         test       al, al
0000000000008c92         je         loc_8ce3

0000000000008c94         xor        ecx, ecx
0000000000008c96         mov        rdx, r12
0000000000008c99         mov        rsi, rbp
0000000000008c9c         mov        rdi, rbx
0000000000008c9f         call       hash_find_entry                             ; hash_find_entry
0000000000008ca4         test       rax, rax
0000000000008ca7         je         loc_8b7a

                     loc_8cad:
0000000000008cad         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
0000000000008cb2         align      8

                     loc_8cb8:
0000000000008cb8         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
0000000000008cbc         mov        eax, 0x1
0000000000008cc1         add        qword [rbx+0x20], 0x1
0000000000008cc6         add        qword [rbx+0x18], 0x1
0000000000008ccb         jmp        loc_8b1c

                     loc_8cd0:
0000000000008cd0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
0000000000008cd5         call       j_malloc                                    ; malloc
0000000000008cda         test       rax, rax
0000000000008cdd         jne        loc_8b9e

                     loc_8ce3:
0000000000008ce3         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
0000000000008ce8         jmp        loc_8b1c
0000000000008ced         align      16

                     loc_8cf0:
0000000000008cf0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
0000000000008cf3         pxor       xmm0, xmm0
0000000000008cf7         shr        rcx, 0x1
0000000000008cfa         and        eax, 0x1
0000000000008cfd         or         rcx, rax
0000000000008d00         cvtsi2ss   xmm0, rcx
0000000000008d05         addss      xmm0, xmm0
0000000000008d09         jmp        loc_8c38
0000000000008d0e         align      16

                     loc_8d10:
0000000000008d10         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
0000000000008d13         pxor       xmm1, xmm1
0000000000008d17         shr        rcx, 0x1
0000000000008d1a         and        eax, 0x1
0000000000008d1d         or         rcx, rax
0000000000008d20         cvtsi2ss   xmm1, rcx
0000000000008d25         addss      xmm1, xmm1
0000000000008d29         jmp        loc_8c4e
0000000000008d2e         align      16

                     loc_8d30:
0000000000008d30         subss      xmm0, dword [float_219d0]                   ; float_219d0, CODE XREF=hash_insert_if_absent+429
0000000000008d38         movabs     rax, 0x8000000000000000
0000000000008d42         cvttss2si  rsi, xmm0
0000000000008d47         xor        rsi, rax
0000000000008d4a         jmp        loc_8c88

                     loc_8d4f:
0000000000008d4f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
0000000000008d54         align      32                                          ; End of unwind block (FDE at 0x247e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
0000000000008d60         push       rbx                                         ; Begin of unwind block (FDE at 0x24820), CODE XREF=map_device.isra.0+36, add_exclude+399, ino_map_insert+33, filesystem_type+255, enter_dir.isra.10+70
0000000000008d61         mov        rbx, rsi
0000000000008d64         sub        rsp, 0x10
0000000000008d68         mov        rdx, rsp
0000000000008d6b         mov        rax, qword [fs:0x28]
0000000000008d74         mov        qword [rsp+0x18+var_10], rax
0000000000008d79         xor        eax, eax
0000000000008d7b         call       hash_insert_if_absent                       ; hash_insert_if_absent
0000000000008d80         cmp        eax, 0xffffffff
0000000000008d83         je         loc_8db0

0000000000008d85         test       eax, eax
0000000000008d87         jne        loc_8d8d

0000000000008d89         mov        rbx, qword [rsp+0x18+var_18]

                     loc_8d8d:
0000000000008d8d         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
0000000000008d92         xor        rcx, qword [fs:0x28]
0000000000008d9b         mov        rax, rbx
0000000000008d9e         jne        loc_8db4

0000000000008da0         add        rsp, 0x10
0000000000008da4         pop        rbx
0000000000008da5         ret
                        ; endp
0000000000008da6         align      16

                     loc_8db0:
0000000000008db0         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
0000000000008db2         jmp        loc_8d8d

                     loc_8db4:
0000000000008db4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
0000000000008db9         align      64                                          ; End of unwind block (FDE at 0x24820)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
0000000000008dc0         push       r12                                         ; Begin of unwind block (FDE at 0x24844), CODE XREF=leave_dir.isra.12+122
0000000000008dc2         push       rbp
0000000000008dc3         mov        ecx, 0x1
0000000000008dc8         push       rbx
0000000000008dc9         mov        rbx, rdi
0000000000008dcc         sub        rsp, 0x10
0000000000008dd0         mov        rdx, rsp
0000000000008dd3         mov        rax, qword [fs:0x28]
0000000000008ddc         mov        qword [rsp+0x28+var_20], rax
0000000000008de1         xor        eax, eax
0000000000008de3         call       hash_find_entry                             ; hash_find_entry
0000000000008de8         test       rax, rax
0000000000008deb         mov        rbp, rax
0000000000008dee         je         loc_8dff

0000000000008df0         mov        rax, qword [rsp+0x28+var_28]
0000000000008df4         sub        qword [rbx+0x20], 0x1
0000000000008df9         cmp        qword [rax], 0x0
0000000000008dfd         je         loc_8e20

                     loc_8dff:
0000000000008dff         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
0000000000008e04         xor        rcx, qword [fs:0x28]
0000000000008e0d         mov        rax, rbp
0000000000008e10         jne        loc_8fbe

0000000000008e16         add        rsp, 0x10
0000000000008e1a         pop        rbx
0000000000008e1b         pop        rbp
0000000000008e1c         pop        r12
0000000000008e1e         ret
                        ; endp
0000000000008e1f         align      32

                     loc_8e20:
0000000000008e20         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
0000000000008e24         sub        rax, 0x1
0000000000008e28         test       rax, rax
0000000000008e2b         mov        qword [rbx+0x18], rax
0000000000008e2f         js         loc_8f30

0000000000008e35         pxor       xmm0, xmm0
0000000000008e39         cvtsi2ss   xmm0, rax

                     loc_8e3e:
0000000000008e3e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
0000000000008e42         mov        rdx, qword [rbx+0x28]
0000000000008e46         test       rax, rax
0000000000008e49         js         loc_8f10

0000000000008e4f         pxor       xmm1, xmm1
0000000000008e53         cvtsi2ss   xmm1, rax

                     loc_8e58:
0000000000008e58         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
0000000000008e5c         ucomiss    xmm1, xmm0
0000000000008e5f         jbe        loc_8dff

0000000000008e61         lea        rdi, qword [rbx+0x28]
0000000000008e65         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000008e6a         mov        rax, qword [rbx+0x10]
0000000000008e6e         mov        rdx, qword [rbx+0x28]
0000000000008e72         test       rax, rax
0000000000008e75         js         loc_8fa0

0000000000008e7b         pxor       xmm0, xmm0
0000000000008e7f         cvtsi2ss   xmm0, rax

                     loc_8e84:
0000000000008e84         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
0000000000008e88         test       rax, rax
0000000000008e8b         js         loc_8f80

0000000000008e91         pxor       xmm1, xmm1
0000000000008e95         cvtsi2ss   xmm1, rax

                     loc_8e9a:
0000000000008e9a         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
0000000000008e9e         mulss      xmm2, xmm0
0000000000008ea2         ucomiss    xmm2, xmm1
0000000000008ea5         jbe        loc_8dff

0000000000008eab         cmp        byte [rdx+0x10], 0x0
0000000000008eaf         mulss      xmm0, dword [rdx+4]
0000000000008eb4         je         loc_8f70

                     loc_8eba:
0000000000008eba         ucomiss    xmm0, dword [float_219d0]                   ; float_219d0, CODE XREF=hash_delete+437
0000000000008ec1         jae        loc_8f50

0000000000008ec7         cvttss2si  rsi, xmm0

                     loc_8ecc:
0000000000008ecc         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
0000000000008ecf         call       hash_rehash                                 ; hash_rehash
0000000000008ed4         test       al, al
0000000000008ed6         jne        loc_8dff

0000000000008edc         mov        rdi, qword [rbx+0x48]
0000000000008ee0         test       rdi, rdi
0000000000008ee3         je         loc_8ef9

0000000000008ee5         nop        dword [rax]

                     loc_8ee8:
0000000000008ee8         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
0000000000008eec         call       sub_2a10                                    ; sub_2a10
0000000000008ef1         test       r12, r12
0000000000008ef4         mov        rdi, r12
0000000000008ef7         jne        loc_8ee8

                     loc_8ef9:
0000000000008ef9         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
0000000000008f01         jmp        loc_8dff
0000000000008f06         align      16

                     loc_8f10:
0000000000008f10         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
0000000000008f13         pxor       xmm1, xmm1
0000000000008f17         shr        rcx, 0x1
0000000000008f1a         and        eax, 0x1
0000000000008f1d         or         rcx, rax
0000000000008f20         cvtsi2ss   xmm1, rcx
0000000000008f25         addss      xmm1, xmm1
0000000000008f29         jmp        loc_8e58
0000000000008f2e         align      16

                     loc_8f30:
0000000000008f30         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
0000000000008f33         pxor       xmm0, xmm0
0000000000008f37         shr        rdx, 0x1
0000000000008f3a         and        eax, 0x1
0000000000008f3d         or         rdx, rax
0000000000008f40         cvtsi2ss   xmm0, rdx
0000000000008f45         addss      xmm0, xmm0
0000000000008f49         jmp        loc_8e3e
0000000000008f4e         align      16

                     loc_8f50:
0000000000008f50         subss      xmm0, dword [float_219d0]                   ; float_219d0, CODE XREF=hash_delete+257
0000000000008f58         movabs     rax, 0x8000000000000000
0000000000008f62         cvttss2si  rsi, xmm0
0000000000008f67         xor        rsi, rax
0000000000008f6a         jmp        loc_8ecc
0000000000008f6f         align      16

                     loc_8f70:
0000000000008f70         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
0000000000008f75         jmp        loc_8eba
0000000000008f7a         align      128

                     loc_8f80:
0000000000008f80         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
0000000000008f83         pxor       xmm1, xmm1
0000000000008f87         shr        rcx, 0x1
0000000000008f8a         and        eax, 0x1
0000000000008f8d         or         rcx, rax
0000000000008f90         cvtsi2ss   xmm1, rcx
0000000000008f95         addss      xmm1, xmm1
0000000000008f99         jmp        loc_8e9a
0000000000008f9e         align      32

                     loc_8fa0:
0000000000008fa0         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
0000000000008fa3         pxor       xmm0, xmm0
0000000000008fa7         shr        rcx, 0x1
0000000000008faa         and        eax, 0x1
0000000000008fad         or         rcx, rax
0000000000008fb0         cvtsi2ss   xmm0, rcx
0000000000008fb5         addss      xmm0, xmm0
0000000000008fb9         jmp        loc_8e84

                     loc_8fbe:
0000000000008fbe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
0000000000008fc3         align      16                                          ; End of unwind block (FDE at 0x24844)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_A: int16_t, -10
        ;    var_C: int16_t, -12
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32


                     adjust_value.part.0:
0000000000008fd0         fld        dword [float_219d0]                         ; Begin of unwind block (FDE at 0x2487c), float_219d0, CODE XREF=human_readable+1400, human_readable+1434, human_readable+1960
0000000000008fd6         fld        tword [rsp+arg_0]
0000000000008fda         fucomi     st1
0000000000008fdc         jae        loc_9050

0000000000008fde         fstp       st1
0000000000008fe0         fnstcw     word [rsp+var_A]
0000000000008fe4         movzx      eax, word [rsp+var_A]
0000000000008fe9         or         ah, 0xc
0000000000008fec         mov        word [rsp+var_C], ax
0000000000008ff1         fld        st0
0000000000008ff3         fldcw      word [rsp+var_C]
0000000000008ff7         fistp      qword [rsp+var_18]
0000000000008ffb         fldcw      word [rsp+var_A]
0000000000008fff         mov        rax, qword [rsp+var_18]

                     loc_9004:
0000000000009004         mov        qword [rsp+var_20], rax                     ; CODE XREF=adjust_value.part.0+179
0000000000009009         test       rax, rax
000000000000900c         fild       qword [rsp+var_20]
0000000000009010         jns        loc_9018

0000000000009012         fadd       dword [float_219cc]                         ; float_219cc

                     loc_9018:
0000000000009018         test       edi, edi                                    ; CODE XREF=adjust_value.part.0+64
000000000000901a         jne        loc_9048

000000000000901c         fxch       st1
000000000000901e         fucomip    st1
0000000000009020         jp         loc_9028

0000000000009022         je         loc_904a

0000000000009024         fstp       st0
0000000000009026         jmp        loc_9030

                     loc_9028:
0000000000009028         fstp       st0                                         ; CODE XREF=adjust_value.part.0+80
000000000000902a         nop        word [rax+rax]

                     loc_9030:
0000000000009030         add        rax, 0x1                                    ; CODE XREF=adjust_value.part.0+86
0000000000009034         mov        qword [rsp+var_20], rax
0000000000009039         test       rax, rax
000000000000903c         fild       qword [rsp+var_20]
0000000000009040         js         loc_9090

0000000000009042         jmp        loc_904a
0000000000009044         align      8

                     loc_9048:
0000000000009048         fstp       st1                                         ; CODE XREF=adjust_value.part.0+74

                     loc_904a:
000000000000904a         ret                                                    ; CODE XREF=adjust_value.part.0+82, adjust_value.part.0+114
                        ; endp
000000000000904c         align      16

                     loc_9050:
0000000000009050         fnstcw     word [rsp+var_A]                            ; CODE XREF=adjust_value.part.0+12
0000000000009054         movzx      eax, word [rsp+var_A]
0000000000009059         fsubr      st1, st0
000000000000905b         fxch       st1
000000000000905d         movabs     rdx, 0x8000000000000000
0000000000009067         or         ah, 0xc
000000000000906a         mov        word [rsp+var_C], ax
000000000000906f         fldcw      word [rsp+var_C]
0000000000009073         fistp      qword [rsp+var_18]
0000000000009077         fldcw      word [rsp+var_A]
000000000000907b         mov        rax, qword [rsp+var_18]
0000000000009080         xor        rax, rdx
0000000000009083         jmp        loc_9004
0000000000009088         align      16

                     loc_9090:
0000000000009090         fadd       dword [float_219cc]                         ; float_219cc, CODE XREF=adjust_value.part.0+112
0000000000009096         ret
                        ; endp
0000000000009097         align      32                                          ; End of unwind block (FDE at 0x2487c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int8_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_98: int32_t, -152
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D8: -216


                     human_readable:
00000000000090a0         push       r15                                         ; Begin of unwind block (FDE at 0x24890), CODE XREF=print_only_size+61
00000000000090a2         push       r14
00000000000090a4         mov        eax, edx
00000000000090a6         push       r13
00000000000090a8         push       r12
00000000000090aa         mov        r15d, edx
00000000000090ad         push       rbp
00000000000090ae         push       rbx
00000000000090af         and        eax, 0x20
00000000000090b2         and        r15d, 0x3
00000000000090b6         mov        r12d, edx
00000000000090b9         mov        rbx, rdi
00000000000090bc         sub        rsp, 0x98
00000000000090c3         mov        qword [rsp+0xc8+var_B0], rcx
00000000000090c8         mov        dword [rsp+0xc8+var_98], eax
00000000000090cc         mov        rcx, qword [fs:0x28]
00000000000090d5         mov        qword [rsp+0xc8+var_40], rcx
00000000000090dd         xor        ecx, ecx
00000000000090df         cmp        eax, 0x1
00000000000090e2         mov        qword [rsp+0xc8+var_C8], rsi
00000000000090e6         mov        qword [rsp+0xc8+var_B8], r8
00000000000090eb         sbb        eax, eax
00000000000090ed         and        eax, 0xffffffe8
00000000000090f0         add        eax, 0x400
00000000000090f5         mov        dword [rsp+0xc8+var_94], eax
00000000000090f9         call       j_localeconv                                ; localeconv
00000000000090fe         mov        r14, qword [rax]
0000000000009101         mov        r13, rax
0000000000009104         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000009107         call       j_strlen                                    ; strlen
000000000000910c         mov        rcx, qword [r13+0x10]
0000000000009110         mov        r13, qword [r13+8]
0000000000009114         mov        rbp, rax
0000000000009117         sub        rax, 0x1
000000000000911b         mov        edx, 0x1
0000000000009120         cmp        rax, 0x10
0000000000009124         lea        rax, qword [__PRETTY_FUNCTION__.4162_22690+12] ; 0x2269c
000000000000912b         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000912e         cmovae     rbp, rdx
0000000000009132         mov        qword [rsp+0xc8+var_90], rcx
0000000000009137         cmovae     r14, rax
000000000000913b         call       j_strlen                                    ; strlen
0000000000009140         cmp        rax, 0x11
0000000000009144         lea        rax, qword [aWrittenBySSAnd+27]             ; 0x21fe1
000000000000914b         mov        rdi, qword [rsp+0xc8+var_B8]
0000000000009150         mov        rcx, qword [rsp+0xc8+var_B0]
0000000000009155         cmovae     r13, rax
0000000000009159         mov        rax, qword [rsp+0xc8+var_C8]
000000000000915d         add        rax, 0x287
0000000000009163         cmp        rdi, rcx
0000000000009166         mov        qword [rsp+0xc8+var_C0], rax
000000000000916b         ja         loc_92b8

0000000000009171         xor        edx, edx
0000000000009173         mov        rax, rcx
0000000000009176         div        rdi
0000000000009179         test       rdx, rdx
000000000000917c         mov        rdi, rax
000000000000917f         je         loc_94e0

                     loc_9185:
0000000000009185         mov        qword [rsp+0xc8+var_B0], rcx                ; CODE XREF=human_readable+539, human_readable+561, human_readable+1106
000000000000918a         test       rcx, rcx
000000000000918d         fild       qword [rsp+0xc8+var_B0]
0000000000009191         jns        loc_9199

0000000000009193         fadd       dword [float_219cc]                         ; float_219cc

                     loc_9199:
0000000000009199         mov        rax, qword [rsp+0xc8+var_B8]                ; CODE XREF=human_readable+241
000000000000919e         mov        qword [rsp+0xc8+var_B0], rax
00000000000091a3         test       rax, rax
00000000000091a6         fild       qword [rsp+0xc8+var_B0]
00000000000091aa         jns        loc_91b2

00000000000091ac         fadd       dword [float_219cc]                         ; float_219cc

                     loc_91b2:
00000000000091b2         fdivp      st1                                         ; CODE XREF=human_readable+266
00000000000091b4         mov        qword [rsp+0xc8+var_B0], rbx
00000000000091b9         test       rbx, rbx
00000000000091bc         fild       qword [rsp+0xc8+var_B0]
00000000000091c0         jns        loc_91c8

00000000000091c2         fadd       dword [float_219cc]                         ; float_219cc

                     loc_91c8:
00000000000091c8         test       r12b, 0x10                                  ; CODE XREF=human_readable+288
00000000000091cc         fmulp      st1
00000000000091ce         je         loc_9398

00000000000091d4         fild       dword [rsp+0xc8+var_94]
00000000000091d8         xor        ebx, ebx
00000000000091da         fld        st0
00000000000091dc         jmp        loc_91e4
00000000000091de         align      32

                     loc_91e0:
00000000000091e0         fstp       st1                                         ; CODE XREF=human_readable+340
00000000000091e2         fxch       st2

                     loc_91e4:
00000000000091e4         fld        st0                                         ; CODE XREF=human_readable+316
00000000000091e6         add        ebx, 0x1
00000000000091e9         fmul       st2
00000000000091eb         fxch       st3
00000000000091ed         fucomi     st3
00000000000091ef         jb         loc_9200

00000000000091f1         cmp        ebx, 0x8
00000000000091f4         jne        loc_91e0

00000000000091f6         fstp       st2
00000000000091f8         fstp       st2
00000000000091fa         jmp        loc_9204
00000000000091fc         align      512

                     loc_9200:
0000000000009200         fstp       st2                                         ; CODE XREF=human_readable+335
0000000000009202         fstp       st2

                     loc_9204:
0000000000009204         mov        ecx, dword [rsp+0xc8+var_98]                ; CODE XREF=human_readable+346
0000000000009208         add        rbp, 0x1
000000000000920c         xor        eax, eax
000000000000920e         fdivrp     st1
0000000000009210         test       ecx, ecx
0000000000009212         sete       al
0000000000009215         cmp        r15d, 0x1
0000000000009219         lea        rax, qword [rbp+rax+1]
000000000000921e         mov        qword [rsp+0xc8+var_B0], rax
0000000000009223         je         loc_9790

0000000000009229         fld        tword [dword_21a2c+4]                       ; 0x21a30
000000000000922f         fucomip    st1
0000000000009231         ja         loc_9608

0000000000009237         fld        st0

                     loc_9239:
0000000000009239         fstp       tword [rsp+0xc8+var_A8]                     ; CODE XREF=human_readable+1411
000000000000923d         sub        rsp, 0x10
0000000000009241         lea        rcx, qword [a1lf]                           ; "%.1Lf"
0000000000009248         mov        esi, 0x1
000000000000924d         mov        rdx, 0xffffffffffffffff
0000000000009254         xor        eax, eax
0000000000009256         mov        r14, qword [rsp+0xd8+var_C8]
000000000000925b         mov        rdi, r14
000000000000925e         fstp       tword [rsp+0xd8+var_D8]
0000000000009261         call       j___sprintf_chk                             ; __sprintf_chk
0000000000009266         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000009269         call       j_strlen                                    ; strlen
000000000000926e         pop        rcx
000000000000926f         pop        rsi
0000000000009270         cmp        rax, qword [rsp+0xc8+var_B0]
0000000000009275         mov        r14, rax
0000000000009278         fld        tword [rsp+0xc8+var_A8]
000000000000927c         ja         loc_9828

                     loc_9282:
0000000000009282         test       r12b, 0x8                                   ; CODE XREF=human_readable+1845
0000000000009286         je         loc_93f0

000000000000928c         mov        rax, qword [rsp+0xc8+var_C8]
0000000000009290         cmp        byte [rax+r14-1], 0x30
0000000000009296         jne        loc_93f8

000000000000929c         fld        dword [dword_21a2c]                         ; dword_21a2c
00000000000092a2         cmp        r15d, 0x1
00000000000092a6         fmul       st1, st0
00000000000092a8         jne        loc_9830

00000000000092ae         jmp        loc_97e3
00000000000092b3         align      8

                     loc_92b8:
00000000000092b8         test       rcx, rcx                                    ; CODE XREF=human_readable+203
00000000000092bb         je         loc_9185

00000000000092c1         mov        rax, qword [rsp+0xc8+var_B8]
00000000000092c6         xor        edx, edx
00000000000092c8         div        rcx
00000000000092cb         test       rdx, rdx
00000000000092ce         mov        r8, rax
00000000000092d1         jne        loc_9185

00000000000092d7         mov        rax, rbx
00000000000092da         xor        edx, edx
00000000000092dc         div        r8
00000000000092df         mov        rbx, rax
00000000000092e2         lea        rax, qword [rdx+rdx*4]
00000000000092e6         xor        edx, edx
00000000000092e8         mov        rsi, rbx
00000000000092eb         add        rax, rax
00000000000092ee         div        r8
00000000000092f1         add        rdx, rdx
00000000000092f4         mov        r9d, eax
00000000000092f7         cmp        r8, rdx
00000000000092fa         jbe        loc_9888

0000000000009300         xor        edi, edi
0000000000009302         test       rdx, rdx
0000000000009305         setne      dil

                     loc_9309:
0000000000009309         mov        ecx, r12d                                   ; CODE XREF=human_readable+1117, human_readable+2035
000000000000930c         mov        r8, qword [rsp+0xc8+var_C0]
0000000000009311         mov        ebx, 0xffffffff
0000000000009316         and        ecx, 0x10
0000000000009319         je         loc_96e0

000000000000931f         mov        r8d, dword [rsp+0xc8+var_94]
0000000000009324         cmp        r8, rsi
0000000000009327         mov        r11, r8
000000000000932a         ja         loc_98a0

0000000000009330         xor        ebx, ebx
0000000000009332         jmp        loc_9357
0000000000009334         align      8

                     loc_9338:
0000000000009338         test       edi, edi                                    ; CODE XREF=human_readable+736
000000000000933a         setne      dil
000000000000933e         movzx      edi, dil

                     loc_9342:
0000000000009342         add        ebx, 0x1                                    ; CODE XREF=human_readable+752
0000000000009345         cmp        r8, r10
0000000000009348         ja         loc_965d

000000000000934e         cmp        ebx, 0x8
0000000000009351         je         loc_98f8

                     loc_9357:
0000000000009357         mov        rax, rsi                                    ; CODE XREF=human_readable+658
000000000000935a         xor        edx, edx
000000000000935c         mov        esi, edi
000000000000935e         div        r8
0000000000009361         sar        esi, 0x1
0000000000009363         mov        r10, rax
0000000000009366         lea        eax, dword [rdx+rdx*4]
0000000000009369         xor        edx, edx
000000000000936b         lea        eax, dword [r9+rax*2]
000000000000936f         div        r11d
0000000000009372         lea        edx, dword [rsi+rdx*2]
0000000000009375         mov        r9d, eax
0000000000009378         mov        rsi, r10
000000000000937b         add        edi, edx
000000000000937d         cmp        r11d, edx
0000000000009380         ja         loc_9338

0000000000009382         cmp        r11d, edi
0000000000009385         setb       dil
0000000000009389         movzx      edi, dil
000000000000938d         add        edi, 0x2
0000000000009390         jmp        loc_9342
0000000000009392         align      8

                     loc_9398:
0000000000009398         cmp        r15d, 0x1                                   ; CODE XREF=human_readable+302
000000000000939c         je         loc_93ac

000000000000939e         fld        tword [dword_21a2c+4]                       ; 0x21a30
00000000000093a4         fucomip    st1
00000000000093a6         ja         loc_9630

                     loc_93ac:
00000000000093ac         sub        rsp, 0x10                                   ; CODE XREF=human_readable+764, human_readable+1443
00000000000093b0         lea        rcx, qword [a0lf]                           ; "%.0Lf"
00000000000093b7         mov        esi, 0x1
00000000000093bc         mov        rbx, qword [rsp+0xd8+var_C8]
00000000000093c1         mov        rdx, 0xffffffffffffffff
00000000000093c8         xor        eax, eax
00000000000093ca         fstp       tword [rsp+0xd8+var_D8]
00000000000093cd         xor        ebp, ebp
00000000000093cf         mov        rdi, rbx
00000000000093d2         call       j___sprintf_chk                             ; __sprintf_chk
00000000000093d7         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
00000000000093da         mov        ebx, 0xffffffff
00000000000093df         call       j_strlen                                    ; strlen
00000000000093e4         pop        rsi
00000000000093e5         pop        rdi
00000000000093e6         mov        r14, rax
00000000000093e9         jmp        loc_9400
00000000000093eb         align      16

                     loc_93f0:
00000000000093f0         fstp       st0                                         ; CODE XREF=human_readable+486
00000000000093f2         jmp        loc_9400
00000000000093f4         align      8

                     loc_93f8:
00000000000093f8         fstp       st0                                         ; CODE XREF=human_readable+502
00000000000093fa         nop        word [rax+rax]

                     loc_9400:
0000000000009400         mov        r15, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+841, human_readable+850, human_readable+1919
0000000000009405         mov        rsi, qword [rsp+0xc8+var_C8]                ; argument "__src" for method j_memmove
0000000000009409         mov        rdx, r14                                    ; argument "__n" for method j_memmove
000000000000940c         sub        r15, r14
000000000000940f         sub        r14, rbp
0000000000009412         mov        rdi, r15                                    ; argument "__dest" for method j_memmove
0000000000009415         call       j_memmove                                   ; memmove
000000000000941a         mov        r8, r14
000000000000941d         add        r8, r15

                     loc_9420:
0000000000009420         test       r12b, 0x4                                   ; CODE XREF=human_readable+1702, human_readable+2127
0000000000009424         jne        loc_9508

                     loc_942a:
000000000000942a         test       r12b, 0x80                                  ; CODE XREF=human_readable+1343, human_readable+2562
000000000000942e         je         loc_94a7

0000000000009430         cmp        ebx, 0xffffffff
0000000000009433         je         loc_9750

                     loc_9439:
0000000000009439         mov        eax, r12d                                   ; CODE XREF=human_readable+1748, human_readable+1762, human_readable+2148
000000000000943c         and        eax, 0x100
0000000000009441         mov        ecx, eax
0000000000009443         or         ecx, ebx
0000000000009445         je         loc_94a7

0000000000009447         and        r12d, 0x40
000000000000944b         jne        loc_95e8

                     loc_9451:
0000000000009451         test       ebx, ebx                                    ; CODE XREF=human_readable+1375
0000000000009453         je         loc_9a86

0000000000009459         cmp        ebx, 0x1
000000000000945c         jne        loc_946c

000000000000945e         mov        r9d, dword [rsp+0xc8+var_98]
0000000000009463         test       r9d, r9d
0000000000009466         je         loc_98b0

                     loc_946c:
000000000000946c         lea        rcx, qword [power_letter]                   ; power_letter, CODE XREF=human_readable+956
0000000000009473         movsxd     rbx, ebx
0000000000009476         mov        rdi, qword [rsp+0xc8+var_C0]
000000000000947b         test       eax, eax
000000000000947d         movzx      ecx, byte [rcx+rbx]
0000000000009481         lea        rdx, qword [rdi+1]
0000000000009485         mov        byte [rdi], cl
0000000000009487         je         loc_98c4

000000000000948d         mov        r8d, dword [rsp+0xc8+var_98]
0000000000009492         test       r8d, r8d
0000000000009495         jne        loc_9650

                     loc_949b:
000000000000949b         lea        rax, qword [rdx+1]                          ; CODE XREF=human_readable+1464, human_readable+2078, human_readable+2541
000000000000949f         mov        byte [rdx], 0x42
00000000000094a2         mov        qword [rsp+0xc8+var_C0], rax

                     loc_94a7:
00000000000094a7         mov        rax, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+910, human_readable+933, human_readable+2089, human_readable+2547
00000000000094ac         mov        rcx, qword [rsp+0xc8+var_40]
00000000000094b4         xor        rcx, qword [fs:0x28]
00000000000094bd         mov        byte [rax], 0x0
00000000000094c0         mov        rax, r15
00000000000094c3         jne        loc_9a5b

00000000000094c9         add        rsp, 0x98
00000000000094d0         pop        rbx
00000000000094d1         pop        rbp
00000000000094d2         pop        r12
00000000000094d4         pop        r13
00000000000094d6         pop        r14
00000000000094d8         pop        r15
00000000000094da         ret
                        ; endp
00000000000094db         align      32

                     loc_94e0:
00000000000094e0         mov        rsi, rbx                                    ; CODE XREF=human_readable+223
00000000000094e3         xor        edx, edx
00000000000094e5         imul       rsi, rax
00000000000094e9         mov        rax, rsi
00000000000094ec         div        rdi
00000000000094ef         cmp        rax, rbx
00000000000094f2         jne        loc_9185

00000000000094f8         xor        edi, edi
00000000000094fa         xor        r9d, r9d
00000000000094fd         jmp        loc_9309
0000000000009502         align      8

                     loc_9508:
0000000000009508         mov        r14, r8                                     ; CODE XREF=human_readable+900
000000000000950b         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000950e         mov        qword [rsp+0xc8+var_80], r8
0000000000009513         sub        r14, r15
0000000000009516         mov        rbp, 0xffffffffffffffff
000000000000951d         call       j_strlen                                    ; strlen
0000000000009522         lea        rdi, qword [rsp+0xc8+var_78]
0000000000009527         mov        ecx, 0x29
000000000000952c         mov        rdx, r14
000000000000952f         mov        rsi, r15
0000000000009532         mov        qword [rsp+0xc8+var_88], rax
0000000000009537         mov        qword [rsp+0xc8+var_B0], rdi
000000000000953c         call       j___memcpy_chk                              ; __memcpy_chk
0000000000009541         mov        ecx, r12d
0000000000009544         mov        dword [rsp+0xc8+var_A8], ebx
0000000000009548         mov        r12, r14
000000000000954b         mov        rbx, r13
000000000000954e         mov        r8, qword [rsp+0xc8+var_80]
0000000000009553         mov        r15, qword [rsp+0xc8+var_90]
0000000000009558         mov        r13, qword [rsp+0xc8+var_88]
000000000000955d         mov        r14d, ecx
0000000000009560         jmp        loc_95a2
0000000000009562         align      8

                     loc_9568:
0000000000009568         mov        rax, qword [rsp+0xc8+var_B0]                ; CODE XREF=human_readable+1306
000000000000956d         sub        r12, rbp
0000000000009570         sub        r8, rbp
0000000000009573         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
0000000000009576         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000009579         lea        rsi, qword [rax+r12]                        ; argument "__src" for method j_memcpy
000000000000957d         call       j_memcpy                                    ; memcpy
0000000000009582         test       r12, r12
0000000000009585         mov        r8, rax
0000000000009588         je         loc_9a98

000000000000958e         sub        r8, r13
0000000000009591         mov        rdx, r13                                    ; argument "__n" for method j_memcpy
0000000000009594         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000009597         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000959a         call       j_memcpy                                    ; memcpy
000000000000959f         mov        r8, rax

                     loc_95a2:
00000000000095a2         movzx      eax, byte [r15]                             ; CODE XREF=human_readable+1216
00000000000095a6         test       al, al
00000000000095a8         je         loc_95b7

00000000000095aa         cmp        al, 0x7f
00000000000095ac         movzx      ebp, al
00000000000095af         cmovae     rbp, r12
00000000000095b3         add        r15, 0x1

                     loc_95b7:
00000000000095b7         cmp        rbp, r12                                    ; CODE XREF=human_readable+1288
00000000000095ba         jbe        loc_9568

00000000000095bc         mov        eax, r14d
00000000000095bf         mov        r15, r8
00000000000095c2         mov        r14, r12
00000000000095c5         mov        rsi, qword [rsp+0xc8+var_B0]                ; argument "__src" for method j_memcpy
00000000000095ca         sub        r15, r14
00000000000095cd         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000095d0         mov        rdi, r15                                    ; argument "__dest" for method j_memcpy
00000000000095d3         mov        ebx, dword [rsp+0xc8+var_A8]
00000000000095d7         mov        r12d, eax
00000000000095da         call       j_memcpy                                    ; memcpy
00000000000095df         jmp        loc_942a
00000000000095e4         align      8

                     loc_95e8:
00000000000095e8         mov        rcx, qword [rsp+0xc8+var_C8]                ; CODE XREF=human_readable+939
00000000000095ec         lea        rdi, qword [rcx+0x288]
00000000000095f3         mov        byte [rcx+0x287], 0x20
00000000000095fa         mov        qword [rsp+0xc8+var_C0], rdi
00000000000095ff         jmp        loc_9451
0000000000009604         align      8

                     loc_9608:
0000000000009608         sub        rsp, 0x10                                   ; CODE XREF=human_readable+401
000000000000960c         mov        edi, r15d
000000000000960f         fld        st0
0000000000009611         fstp       tword [rsp+0xd8+var_D8]
0000000000009614         fstp       tword [rsp+0xd8+var_A8]
0000000000009618         call       adjust_value.part.0                         ; adjust_value.part.0
000000000000961d         pop        rax
000000000000961e         pop        rdx
000000000000961f         fld        tword [rsp+0xc8+var_A8]
0000000000009623         jmp        loc_9239
0000000000009628         align      16

                     loc_9630:
0000000000009630         sub        rsp, 0x10                                   ; CODE XREF=human_readable+774
0000000000009634         mov        edi, r15d
0000000000009637         fstp       tword [rsp+0xd8+var_D8]
000000000000963a         call       adjust_value.part.0                         ; adjust_value.part.0
000000000000963f         pop        r8
0000000000009641         pop        r9
0000000000009643         jmp        loc_93ac
0000000000009648         align      16

                     loc_9650:
0000000000009650         lea        rdx, qword [rdi+2]                          ; CODE XREF=human_readable+1013
0000000000009654         mov        byte [rdi+1], 0x69
0000000000009658         jmp        loc_949b

                     loc_965d:
000000000000965d         cmp        r10, 0x9                                    ; CODE XREF=human_readable+680
0000000000009661         ja         loc_98f8

0000000000009667         cmp        r15d, 0x1
000000000000966b         je         loc_9922

0000000000009671         test       r15d, r15d
0000000000009674         sete       dl
0000000000009677         test       edi, edi
0000000000009679         setg       r8b
000000000000967d         and        edx, r8d

                     loc_9680:
0000000000009680         test       dl, dl                                      ; CODE XREF=human_readable+2191
0000000000009682         je         loc_9909

0000000000009688         lea        r9d, dword [rax+1]
000000000000968c         cmp        r9d, 0xa
0000000000009690         je         loc_9991

                     loc_9696:
0000000000009696         add        r9d, 0x30                                   ; CODE XREF=human_readable+2155

                     loc_969a:
000000000000969a         mov        rax, qword [rsp+0xc8+var_C8]                ; CODE XREF=human_readable+2173
000000000000969e         lea        r8, qword [rax+0x286]
00000000000096a5         mov        byte [rax+0x286], r9b
00000000000096ac         mov        eax, ebp
00000000000096ae         sub        r8, rbp
00000000000096b1         cmp        ebp, 0x8
00000000000096b4         jae        loc_9941

00000000000096ba         test       bpl, 0x4
00000000000096be         jne        loc_9a46

00000000000096c4         test       eax, eax
00000000000096c6         je         loc_96d7

00000000000096c8         movzx      edx, byte [r14]
00000000000096cc         test       al, 0x2
00000000000096ce         mov        byte [r8], dl
00000000000096d1         jne        loc_9a60

                     loc_96d7:
00000000000096d7         xor        edi, edi                                    ; CODE XREF=human_readable+1574, human_readable+2255, human_readable+2284, human_readable+2389, human_readable+2486, human_readable+2508
00000000000096d9         xor        r9d, r9d
00000000000096dc         nop        dword [rax]

                     loc_96e0:
00000000000096e0         cmp        r15d, 0x1                                   ; CODE XREF=human_readable+633, human_readable+2055, human_readable+2141, human_readable+2204
00000000000096e4         je         loc_9860

00000000000096ea         test       r15d, r15d
00000000000096ed         jne        loc_9710

00000000000096ef         add        edi, r9d
00000000000096f2         test       edi, edi
00000000000096f4         jle        loc_9710

                     loc_96f6:
00000000000096f6         add        rsi, 0x1                                    ; CODE XREF=human_readable+2009
00000000000096fa         test       ecx, ecx
00000000000096fc         je         loc_9710

00000000000096fe         mov        eax, dword [rsp+0xc8+var_94]
0000000000009702         cmp        rax, rsi
0000000000009705         je         loc_98d0

000000000000970b         nop        dword [rax+rax]

                     loc_9710:
0000000000009710         mov        r15, r8                                     ; CODE XREF=human_readable+1613, human_readable+1620, human_readable+1628, human_readable+2015, human_readable+2099
0000000000009713         movabs     rcx, 0xcccccccccccccccd
000000000000971d         nop        dword [rax]

                     loc_9720:
0000000000009720         mov        rax, rsi                                    ; CODE XREF=human_readable+1700
0000000000009723         sub        r15, 0x1
0000000000009727         mul        rcx
000000000000972a         shr        rdx, 0x3
000000000000972e         lea        rax, qword [rdx+rdx*4]
0000000000009732         add        rax, rax
0000000000009735         sub        rsi, rax
0000000000009738         add        esi, 0x30
000000000000973b         test       rdx, rdx
000000000000973e         mov        byte [r15], sil
0000000000009741         mov        rsi, rdx
0000000000009744         jne        loc_9720

0000000000009746         jmp        loc_9420
000000000000974b         align      16

                     loc_9750:
0000000000009750         mov        rcx, qword [rsp+0xc8+var_B8]                ; CODE XREF=human_readable+915
0000000000009755         cmp        rcx, 0x1
0000000000009759         jbe        loc_9902

000000000000975f         mov        edx, dword [rsp+0xc8+var_94]
0000000000009763         mov        ebx, 0x1
0000000000009768         mov        eax, 0x1

                     loc_976d:
000000000000976d         imul       rax, rdx                                    ; CODE XREF=human_readable+1760
0000000000009771         cmp        rcx, rax
0000000000009774         jbe        loc_9439

000000000000977a         add        ebx, 0x1
000000000000977d         cmp        ebx, 0x8
0000000000009780         jne        loc_976d

0000000000009782         jmp        loc_9439
0000000000009787         align      16

                     loc_9790:
0000000000009790         sub        rsp, 0x10                                   ; CODE XREF=human_readable+387
0000000000009794         lea        rcx, qword [a1lf]                           ; "%.1Lf"
000000000000979b         mov        rdx, 0xffffffffffffffff
00000000000097a2         fld        st0
00000000000097a4         fstp       tword [rsp+0xd8+var_D8]
00000000000097a7         mov        r14, qword [rsp+0xd8+var_C8]
00000000000097ac         mov        esi, 0x1
00000000000097b1         xor        eax, eax
00000000000097b3         mov        rdi, r14
00000000000097b6         fstp       tword [rsp+0xd8+var_A8]
00000000000097ba         call       j___sprintf_chk                             ; __sprintf_chk
00000000000097bf         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000097c2         call       j_strlen                                    ; strlen
00000000000097c7         mov        r14, rax
00000000000097ca         pop        rax
00000000000097cb         pop        rdx
00000000000097cc         cmp        r14, qword [rsp+0xc8+var_B0]
00000000000097d1         fld        tword [rsp+0xc8+var_A8]
00000000000097d5         jbe        loc_9282

00000000000097db         fld        dword [dword_21a2c]                         ; dword_21a2c
00000000000097e1         fmul       st1, st0

                     loc_97e3:
00000000000097e3         fdivp      st1                                         ; CODE XREF=human_readable+526, human_readable+1944, human_readable+1972
00000000000097e5         sub        rsp, 0x10
00000000000097e9         lea        rcx, qword [a0lf]                           ; "%.0Lf"
00000000000097f0         mov        r14, qword [rsp+0xd8+var_C8]
00000000000097f5         mov        rdx, 0xffffffffffffffff
00000000000097fc         mov        esi, 0x1
0000000000009801         xor        eax, eax
0000000000009803         xor        ebp, ebp
0000000000009805         mov        rdi, r14
0000000000009808         fstp       tword [rsp+0xd8+var_D8]
000000000000980b         call       j___sprintf_chk                             ; __sprintf_chk
0000000000009810         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000009813         call       j_strlen                                    ; strlen
0000000000009818         pop        r10
000000000000981a         mov        r14, rax
000000000000981d         pop        r11
000000000000981f         jmp        loc_9400
0000000000009824         align      8

                     loc_9828:
0000000000009828         fld        dword [dword_21a2c]                         ; dword_21a2c, CODE XREF=human_readable+476
000000000000982e         fmul       st1, st0

                     loc_9830:
0000000000009830         fld        tword [dword_21a2c+4]                       ; 0x21a30, CODE XREF=human_readable+520
0000000000009836         fucomip    st2
0000000000009838         jbe        loc_97e3

000000000000983a         fstp       dword [rsp+0xc8+var_B0]
000000000000983e         sub        rsp, 0x10
0000000000009842         mov        edi, r15d
0000000000009845         fstp       tword [rsp+0xd8+var_D8]
0000000000009848         call       adjust_value.part.0                         ; adjust_value.part.0
000000000000984d         pop        rbp
000000000000984e         pop        r14
0000000000009850         fld        dword [rsp+0xc8+var_B0]
0000000000009854         jmp        loc_97e3
0000000000009856         align      32

                     loc_9860:
0000000000009860         mov        rax, rsi                                    ; CODE XREF=human_readable+1604
0000000000009863         movsxd     rdi, edi
0000000000009866         and        eax, 0x1
0000000000009869         add        rax, rdi
000000000000986c         setne      al
000000000000986f         movzx      eax, al
0000000000009872         add        r9d, eax
0000000000009875         cmp        r9d, 0x5
0000000000009879         jg         loc_96f6

000000000000987f         jmp        loc_9710
0000000000009884         align      8

                     loc_9888:
0000000000009888         setb       dil                                         ; CODE XREF=human_readable+602
000000000000988c         movzx      edi, dil
0000000000009890         add        edi, 0x2
0000000000009893         jmp        loc_9309
0000000000009898         align      32

                     loc_98a0:
00000000000098a0         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+650
00000000000098a5         xor        ebx, ebx
00000000000098a7         jmp        loc_96e0
00000000000098ac         align      16

                     loc_98b0:
00000000000098b0         mov        rbx, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+966
00000000000098b5         test       eax, eax
00000000000098b7         lea        rdx, qword [rbx+1]
00000000000098bb         mov        byte [rbx], 0x6b
00000000000098be         jne        loc_949b

                     loc_98c4:
00000000000098c4         mov        qword [rsp+0xc8+var_C0], rdx                ; CODE XREF=human_readable+999
00000000000098c9         jmp        loc_94a7
00000000000098ce         align      16

                     loc_98d0:
00000000000098d0         cmp        ebx, 0x8                                    ; CODE XREF=human_readable+1637
00000000000098d3         je         loc_9710

00000000000098d9         add        ebx, 0x1
00000000000098dc         test       r12b, 0x8
00000000000098e0         je         loc_99a2

                     loc_98e6:
00000000000098e6         lea        r15, qword [r8-1]                           ; CODE XREF=human_readable+2338, human_readable+2353, human_readable+2371, human_readable+2437, human_readable+2465, human_readable+2529
00000000000098ea         mov        byte [r8-1], 0x31
00000000000098ef         jmp        loc_9420
00000000000098f4         align      8

                     loc_98f8:
00000000000098f8         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+689, human_readable+1473
00000000000098fd         jmp        loc_96e0

                     loc_9902:
0000000000009902         xor        ebx, ebx                                    ; CODE XREF=human_readable+1721
0000000000009904         jmp        loc_9439

                     loc_9909:
0000000000009909         test       eax, eax                                    ; CODE XREF=human_readable+1506
000000000000990b         jne        loc_9696

                     loc_9911:
0000000000009911         test       r12b, 0x8                                   ; CODE XREF=human_readable+2301
0000000000009915         jne        loc_9934

0000000000009917         mov        r9d, 0x30
000000000000991d         jmp        loc_969a

                     loc_9922:
0000000000009922         mov        edx, eax                                    ; CODE XREF=human_readable+1483
0000000000009924         and        edx, 0x1
0000000000009927         add        edx, edi
0000000000009929         cmp        edx, 0x2
000000000000992c         setg       dl
000000000000992f         jmp        loc_9680

                     loc_9934:
0000000000009934         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+2165
0000000000009939         xor        r9d, r9d
000000000000993c         jmp        loc_96e0

                     loc_9941:
0000000000009941         mov        rax, qword [r14]                            ; CODE XREF=human_readable+1556
0000000000009944         mov        r9, r14
0000000000009947         mov        qword [r8], rax
000000000000994a         mov        eax, ebp
000000000000994c         mov        rdx, qword [r14+rax-8]
0000000000009951         mov        qword [r8+rax-8], rdx
0000000000009956         lea        rdx, qword [r8+8]
000000000000995a         mov        rax, r8
000000000000995d         and        rdx, 0xfffffffffffffff8
0000000000009961         sub        rax, rdx
0000000000009964         sub        r9, rax
0000000000009967         add        eax, ebp
0000000000009969         and        eax, 0xfffffff8
000000000000996c         cmp        eax, 0x8
000000000000996f         jb         loc_96d7

0000000000009975         and        eax, 0xfffffff8
0000000000009978         xor        edi, edi

                     loc_997a:
000000000000997a         mov        r10d, edi                                   ; CODE XREF=human_readable+2282
000000000000997d         add        edi, 0x8
0000000000009980         mov        r11, qword [r9+r10]
0000000000009984         cmp        edi, eax
0000000000009986         mov        qword [rdx+r10], r11
000000000000998a         jb         loc_997a

000000000000998c         jmp        loc_96d7

                     loc_9991:
0000000000009991         lea        rsi, qword [r10+1]                          ; CODE XREF=human_readable+1520
0000000000009995         cmp        rsi, 0xa
0000000000009999         je         loc_99f0

000000000000999b         xor        edi, edi
000000000000999d         jmp        loc_9911

                     loc_99a2:
00000000000099a2         mov        rax, rbp                                    ; CODE XREF=human_readable+2112
00000000000099a5         mov        byte [r8-1], 0x30
00000000000099aa         not        rax
00000000000099ad         add        r8, rax
00000000000099b0         cmp        ebp, 0x8
00000000000099b3         mov        eax, ebp
00000000000099b5         jae        loc_99fa

00000000000099b7         and        ebp, 0x4
00000000000099ba         jne        loc_9a71

00000000000099c0         test       eax, eax
00000000000099c2         je         loc_98e6

00000000000099c8         movzx      edx, byte [r14]
00000000000099cc         test       al, 0x2
00000000000099ce         mov        byte [r8], dl
00000000000099d1         je         loc_98e6

00000000000099d7         movzx      edx, word [r14+rax-2]
00000000000099dd         mov        word [r8+rax-2], dx
00000000000099e3         jmp        loc_98e6
00000000000099e8         align      16

                     loc_99f0:
00000000000099f0         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+2297
00000000000099f5         jmp        loc_96d7

                     loc_99fa:
00000000000099fa         mov        rax, qword [r14]                            ; CODE XREF=human_readable+2325
00000000000099fd         lea        rcx, qword [r8+8]
0000000000009a01         and        rcx, 0xfffffffffffffff8
0000000000009a05         mov        qword [r8], rax
0000000000009a08         mov        eax, ebp
0000000000009a0a         mov        rdx, qword [r14+rax-8]
0000000000009a0f         mov        qword [r8+rax-8], rdx
0000000000009a14         mov        rax, r8
0000000000009a17         sub        rax, rcx
0000000000009a1a         sub        r14, rax
0000000000009a1d         add        eax, ebp
0000000000009a1f         and        eax, 0xfffffff8
0000000000009a22         cmp        eax, 0x8
0000000000009a25         jb         loc_98e6

0000000000009a2b         and        eax, 0xfffffff8
0000000000009a2e         xor        edx, edx

                     loc_9a30:
0000000000009a30         mov        esi, edx                                    ; CODE XREF=human_readable+2463
0000000000009a32         add        edx, 0x8
0000000000009a35         mov        rdi, qword [r14+rsi]
0000000000009a39         cmp        edx, eax
0000000000009a3b         mov        qword [rcx+rsi], rdi
0000000000009a3f         jb         loc_9a30

0000000000009a41         jmp        loc_98e6

                     loc_9a46:
0000000000009a46         mov        edx, dword [r14]                            ; CODE XREF=human_readable+1566
0000000000009a49         mov        dword [r8], edx
0000000000009a4c         mov        edx, dword [r14+rax-4]
0000000000009a51         mov        dword [r8+rax-4], edx
0000000000009a56         jmp        loc_96d7

                     loc_9a5b:
0000000000009a5b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_readable+1059
                        ; endp

                     loc_9a60:
0000000000009a60         movzx      edx, word [r14+rax-2]                       ; CODE XREF=human_readable+1585
0000000000009a66         mov        word [r8+rax-2], dx
0000000000009a6c         jmp        loc_96d7

                     loc_9a71:
0000000000009a71         mov        edx, dword [r14]                            ; CODE XREF=human_readable+2330
0000000000009a74         mov        dword [r8], edx
0000000000009a77         mov        edx, dword [r14+rax-4]
0000000000009a7c         mov        dword [r8+rax-4], edx
0000000000009a81         jmp        loc_98e6

                     loc_9a86:
0000000000009a86         test       eax, eax                                    ; CODE XREF=human_readable+947
0000000000009a88         mov        rdx, qword [rsp+0xc8+var_C0]
0000000000009a8d         jne        loc_949b

0000000000009a93         jmp        loc_94a7

                     loc_9a98:
0000000000009a98         mov        ebx, dword [rsp+0xc8+var_A8]                ; CODE XREF=human_readable+1256
0000000000009a9c         mov        r15, rax
0000000000009a9f         mov        r12d, r14d
0000000000009aa2         jmp        loc_942a
0000000000009aa7         align      16                                          ; End of unwind block (FDE at 0x24890)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     human_options:
0000000000009ab0         push       r13                                         ; Begin of unwind block (FDE at 0x24938), CODE XREF=main+196, main+809
0000000000009ab2         push       r12
0000000000009ab4         mov        r13, rsi
0000000000009ab7         push       rbp
0000000000009ab8         push       rbx
0000000000009ab9         mov        r12, rdx
0000000000009abc         mov        rbx, rdi
0000000000009abf         sub        rsp, 0x18
0000000000009ac3         mov        rax, qword [fs:0x28]
0000000000009acc         mov        qword [rsp+0x38+var_30], rax
0000000000009ad1         xor        eax, eax
0000000000009ad3         test       rdi, rdi
0000000000009ad6         je         loc_9bf0

                     loc_9adc:
0000000000009adc         xor        ebp, ebp                                    ; CODE XREF=human_options+338, human_options+362
0000000000009ade         cmp        byte [rbx], 0x27
0000000000009ae1         jne        loc_9aec

0000000000009ae3         add        rbx, 0x1
0000000000009ae7         mov        ebp, 0x4

                     loc_9aec:
0000000000009aec         lea        rdx, qword [block_size_opts]                ; block_size_opts, CODE XREF=human_options+49
0000000000009af3         lea        rsi, qword [block_size_args]                ; block_size_args
0000000000009afa         mov        ecx, 0x4
0000000000009aff         mov        rdi, rbx
0000000000009b02         call       argmatch                                    ; argmatch
0000000000009b07         test       eax, eax
0000000000009b09         js         loc_9b48

0000000000009b0b         lea        rdx, qword [block_size_opts]                ; block_size_opts
0000000000009b12         cdqe
0000000000009b14         mov        qword [r12], 0x1
0000000000009b1c         or         ebp, dword [rdx+rax*4]
0000000000009b1f         xor        eax, eax
0000000000009b21         mov        dword [r13], ebp

                     loc_9b25:
0000000000009b25         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=human_options+263, human_options+308, human_options+403, human_options+476
0000000000009b2a         xor        rcx, qword [fs:0x28]
0000000000009b33         jne        loc_9c91

0000000000009b39         add        rsp, 0x18
0000000000009b3d         pop        rbx
0000000000009b3e         pop        rbp
0000000000009b3f         pop        r12
0000000000009b41         pop        r13
0000000000009b43         ret
                        ; endp
0000000000009b44         align      8

                     loc_9b48:
0000000000009b48         lea        r8, qword [aEeggkkmmppttyy]                 ; "eEgGkKmMpPtTyYzZ0", CODE XREF=human_options+89
0000000000009b4f         xor        edx, edx
0000000000009b51         mov        rsi, rsp
0000000000009b54         mov        rcx, r12
0000000000009b57         mov        rdi, rbx
0000000000009b5a         call       xstrtoumax                                  ; xstrtoumax
0000000000009b5f         test       eax, eax
0000000000009b61         jne        loc_9ba8

0000000000009b63         movzx      esi, byte [rbx]
0000000000009b66         lea        edx, dword [rsi-0x30]
0000000000009b69         cmp        dl, 0x9
0000000000009b6c         jbe        loc_9b98

0000000000009b6e         mov        rcx, qword [rsp+0x38+var_38]
0000000000009b72         cmp        rbx, rcx
0000000000009b75         jne        loc_9b89

0000000000009b77         jmp        loc_9c50
0000000000009b7c         align      128

                     loc_9b80:
0000000000009b80         cmp        rbx, rcx                                    ; CODE XREF=human_options+230
0000000000009b83         je         loc_9c50

                     loc_9b89:
0000000000009b89         add        rbx, 0x1                                    ; CODE XREF=human_options+197
0000000000009b8d         movzx      edi, byte [rbx]
0000000000009b90         lea        edx, dword [rdi-0x30]
0000000000009b93         cmp        dl, 0x9
0000000000009b96         ja         loc_9b80

                     loc_9b98:
0000000000009b98         mov        rdx, qword [r12]                            ; CODE XREF=human_options+188, human_options+429, human_options+450
0000000000009b9c         mov        dword [r13], ebp
0000000000009ba0         jmp        loc_9bb4
0000000000009ba2         align      8

                     loc_9ba8:
0000000000009ba8         mov        rdx, qword [r12]                            ; CODE XREF=human_options+177
0000000000009bac         mov        dword [r13], 0x0

                     loc_9bb4:
0000000000009bb4         test       rdx, rdx                                    ; CODE XREF=human_options+240
0000000000009bb7         jne        loc_9b25

0000000000009bbd         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000009bc4         call       j_getenv                                    ; getenv
0000000000009bc9         cmp        rax, 0x1
0000000000009bcd         sbb        rax, rax
0000000000009bd0         and        eax, 0x200
0000000000009bd5         add        rax, 0x200
0000000000009bdb         mov        qword [r12], rax
0000000000009bdf         mov        eax, 0x4
0000000000009be4         jmp        loc_9b25
0000000000009be9         align      16

                     loc_9bf0:
0000000000009bf0         lea        rdi, qword [aDublocksize+3]                 ; argument "__name" for method j_getenv, 0x1fb58, CODE XREF=human_options+38
0000000000009bf7         call       j_getenv                                    ; getenv
0000000000009bfc         test       rax, rax
0000000000009bff         mov        rbx, rax
0000000000009c02         jne        loc_9adc

0000000000009c08         lea        rdi, qword [aBlocksize]                     ; argument "__name" for method j_getenv, "BLOCKSIZE"
0000000000009c0f         call       j_getenv                                    ; getenv
0000000000009c14         test       rax, rax
0000000000009c17         mov        rbx, rax
0000000000009c1a         jne        loc_9adc

0000000000009c20         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000009c27         call       j_getenv                                    ; getenv
0000000000009c2c         test       rax, rax
0000000000009c2f         je         loc_9c7a

0000000000009c31         mov        qword [r12], 0x200
0000000000009c39         xor        eax, eax
0000000000009c3b         mov        dword [r13], 0x0
0000000000009c43         jmp        loc_9b25
0000000000009c48         align      16

                     loc_9c50:
0000000000009c50         cmp        byte [rcx-1], 0x42                          ; CODE XREF=human_options+199, human_options+211
0000000000009c54         je         loc_9c68

0000000000009c56         or         bpl, 0x80

                     loc_9c5a:
0000000000009c5a         or         ebp, 0x20                                   ; CODE XREF=human_options+456
0000000000009c5d         jmp        loc_9b98
0000000000009c62         align      8

                     loc_9c68:
0000000000009c68         or         ebp, 0x180                                  ; CODE XREF=human_options+420
0000000000009c6e         cmp        byte [rcx-2], 0x69
0000000000009c72         jne        loc_9b98

0000000000009c78         jmp        loc_9c5a

                     loc_9c7a:
0000000000009c7a         mov        qword [r12], 0x400                          ; CODE XREF=human_options+383
0000000000009c82         xor        eax, eax
0000000000009c84         mov        dword [r13], 0x0
0000000000009c8c         jmp        loc_9b25

                     loc_9c91:
0000000000009c91         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_options+131
                        ; endp
0000000000009c96         align      32                                          ; End of unwind block (FDE at 0x24938)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     ino_hash:
0000000000009ca0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x24974), DATA XREF=ino_map_alloc+41
0000000000009ca3         xor        edx, edx
0000000000009ca5         div        rsi
0000000000009ca8         mov        rax, rdx
0000000000009cab         ret
                        ; endp
0000000000009cac         align      16                                          ; End of unwind block (FDE at 0x24974)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     ino_compare:
0000000000009cb0         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0x24988), DATA XREF=ino_map_alloc+34
0000000000009cb3         cmp        qword [rdi], rax
0000000000009cb6         sete       al
0000000000009cb9         ret
                        ; endp
0000000000009cba         align      64                                          ; End of unwind block (FDE at 0x24988)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     ino_map_alloc:
0000000000009cc0         push       rbp                                         ; Begin of unwind block (FDE at 0x2499c), CODE XREF=map_inode_number.isra.1+71
0000000000009cc1         push       rbx
0000000000009cc2         mov        rbp, rdi
0000000000009cc5         mov        edi, 0x18                                   ; argument "__size" for method j_malloc
0000000000009cca         sub        rsp, 0x8
0000000000009cce         call       j_malloc                                    ; malloc
0000000000009cd3         test       rax, rax
0000000000009cd6         mov        rbx, rax
0000000000009cd9         je         loc_9d10

0000000000009cdb         mov        r8, qword [qword_227fc8]                    ; qword_227fc8
0000000000009ce2         lea        rcx, qword [ino_compare]                    ; ino_compare
0000000000009ce9         lea        rdx, qword [ino_hash]                       ; ino_hash
0000000000009cf0         xor        esi, esi
0000000000009cf2         mov        edi, 0x3fd
0000000000009cf7         call       hash_initialize                             ; hash_initialize
0000000000009cfc         test       rax, rax
0000000000009cff         mov        qword [rbx], rax
0000000000009d02         je         loc_9d20

0000000000009d04         mov        qword [rbx+8], rbp
0000000000009d08         mov        qword [rbx+0x10], 0x0

                     loc_9d10:
0000000000009d10         add        rsp, 0x8                                    ; CODE XREF=ino_map_alloc+25, ino_map_alloc+106
0000000000009d14         mov        rax, rbx
0000000000009d17         pop        rbx
0000000000009d18         pop        rbp
0000000000009d19         ret
                        ; endp
0000000000009d1a         align      32

                     loc_9d20:
0000000000009d20         mov        rdi, rbx                                    ; CODE XREF=ino_map_alloc+66
0000000000009d23         xor        ebx, ebx
0000000000009d25         call       sub_2a10                                    ; sub_2a10
0000000000009d2a         jmp        loc_9d10
0000000000009d2c         align      16                                          ; End of unwind block (FDE at 0x2499c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     ino_map_free:
0000000000009d30         push       rbx                                         ; Begin of unwind block (FDE at 0x249c8)
0000000000009d31         mov        rbx, rdi
0000000000009d34         mov        rdi, qword [rdi]
0000000000009d37         call       hash_free                                   ; hash_free
0000000000009d3c         mov        rdi, qword [rbx+0x10]
0000000000009d40         call       sub_2a10                                    ; sub_2a10
0000000000009d45         mov        rdi, rbx
0000000000009d48         pop        rbx
0000000000009d49         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000009d4e         align      16                                          ; End of unwind block (FDE at 0x249c8)

                     ino_map_insert:
0000000000009d50         push       rbp                                         ; Begin of unwind block (FDE at 0x249e4), CODE XREF=map_inode_number.isra.1+40
0000000000009d51         push       rbx
0000000000009d52         mov        rbp, rdi
0000000000009d55         sub        rsp, 0x18
0000000000009d59         mov        rbx, qword [rdi+0x10]
0000000000009d5d         test       rbx, rbx
0000000000009d60         je         loc_9dc0

0000000000009d62         cmp        qword [rbx], rsi
0000000000009d65         je         loc_9d90

                     loc_9d67:
0000000000009d67         mov        rdi, qword [rbp]                            ; CODE XREF=ino_map_insert+142
0000000000009d6b         mov        qword [rbx], rsi
0000000000009d6e         mov        rsi, rbx
0000000000009d71         call       hash_insert                                 ; hash_insert
0000000000009d76         test       rax, rax
0000000000009d79         je         loc_9de0

0000000000009d7b         cmp        rbx, rax
0000000000009d7e         je         loc_9da0

0000000000009d80         mov        rax, qword [rax+8]
0000000000009d84         mov        qword [rbx+8], rax
0000000000009d88         add        rsp, 0x18
0000000000009d8c         pop        rbx
0000000000009d8d         pop        rbp
0000000000009d8e         ret
                        ; endp
0000000000009d8f         align      16

                     loc_9d90:
0000000000009d90         mov        rax, qword [rbx+8]                          ; CODE XREF=ino_map_insert+21
0000000000009d94         add        rsp, 0x18
0000000000009d98         pop        rbx
0000000000009d99         pop        rbp
0000000000009d9a         ret
                        ; endp
0000000000009d9b         align      32

                     loc_9da0:
0000000000009da0         mov        rax, qword [rbp+8]                          ; CODE XREF=ino_map_insert+46
0000000000009da4         mov        qword [rbp+0x10], 0x0
0000000000009dac         lea        rdx, qword [rax+1]
0000000000009db0         mov        qword [rbp+8], rdx
0000000000009db4         mov        qword [rbx+8], rax
0000000000009db8         add        rsp, 0x18
0000000000009dbc         pop        rbx
0000000000009dbd         pop        rbp
0000000000009dbe         ret
                        ; endp
0000000000009dbf         align      64

                     loc_9dc0:
0000000000009dc0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=ino_map_insert+16
0000000000009dc5         mov        qword [rsp+0x28+var_20], rsi
0000000000009dca         call       j_malloc                                    ; malloc
0000000000009dcf         test       rax, rax
0000000000009dd2         mov        rbx, rax
0000000000009dd5         mov        qword [rbp+0x10], rax
0000000000009dd9         mov        rsi, qword [rsp+0x28+var_20]
0000000000009dde         jne        loc_9d67

                     loc_9de0:
0000000000009de0         add        rsp, 0x18                                   ; CODE XREF=ino_map_insert+41
0000000000009de4         mov        rax, 0xffffffffffffffff
0000000000009deb         pop        rbx
0000000000009dec         pop        rbp
0000000000009ded         ret
                        ; endp
0000000000009dee         align      16                                          ; End of unwind block (FDE at 0x249e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     imaxtostr:
0000000000009df0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x24a34), CODE XREF=print_size+265
0000000000009df3         lea        rcx, qword [rsi+0x14]
0000000000009df7         mov        byte [rsi+0x14], 0x0
0000000000009dfb         movabs     r9, 0x6666666666666667
0000000000009e05         movabs     rsi, 0xcccccccccccccccd
0000000000009e0f         mov        r8d, 0x30
0000000000009e15         js         loc_9e53

0000000000009e17         nop        word [rax+rax]

                     loc_9e20:
0000000000009e20         mov        rax, rdi                                    ; CODE XREF=imaxtostr+84
0000000000009e23         sub        rcx, 0x1
0000000000009e27         mul        rsi
0000000000009e2a         shr        rdx, 0x3
0000000000009e2e         lea        rax, qword [rdx+rdx*4]
0000000000009e32         add        rax, rax
0000000000009e35         sub        rdi, rax
0000000000009e38         add        edi, 0x30
0000000000009e3b         test       rdx, rdx
0000000000009e3e         mov        byte [rcx], dil
0000000000009e41         mov        rdi, rdx
0000000000009e44         jne        loc_9e20

0000000000009e46         mov        rax, rcx
0000000000009e49         ret
                        ; endp
0000000000009e4a         align      16

                     loc_9e50:
0000000000009e50         mov        rcx, rsi                                    ; CODE XREF=imaxtostr+142

                     loc_9e53:
0000000000009e53         mov        rax, rdi                                    ; CODE XREF=imaxtostr+37
0000000000009e56         lea        rsi, qword [rcx-1]
0000000000009e5a         imul       r9
0000000000009e5d         mov        rax, rdi
0000000000009e60         sar        rax, 0x3f
0000000000009e64         sar        rdx, 0x2
0000000000009e68         sub        rdx, rax
0000000000009e6b         lea        rax, qword [rdx+rdx*4]
0000000000009e6f         lea        eax, dword [r8+rax*2]
0000000000009e73         sub        eax, edi
0000000000009e75         test       rdx, rdx
0000000000009e78         mov        rdi, rdx
0000000000009e7b         mov        byte [rcx-1], al
0000000000009e7e         jne        loc_9e50

0000000000009e80         sub        rcx, 0x2
0000000000009e84         mov        byte [rsi-1], 0x2d
0000000000009e88         mov        rax, rcx
0000000000009e8b         ret
                        ; endp
0000000000009e8c         align      16                                          ; End of unwind block (FDE at 0x24a34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mb_width_aux:
0000000000009e90         push       rbx                                         ; Begin of unwind block (FDE at 0x24a4c)
0000000000009e91         mov        ebx, edi
0000000000009e93         call       j_wcwidth                                   ; wcwidth
0000000000009e98         test       eax, eax
0000000000009e9a         js         loc_9ea0

0000000000009e9c         pop        rbx
0000000000009e9d         ret
                        ; endp
0000000000009e9e         align      32

                     loc_9ea0:
0000000000009ea0         mov        edi, ebx                                    ; argument "__wc" for method j_iswcntrl, CODE XREF=mb_width_aux+10
0000000000009ea2         call       j_iswcntrl                                  ; iswcntrl
0000000000009ea7         test       eax, eax
0000000000009ea9         sete       al
0000000000009eac         movzx      eax, al
0000000000009eaf         pop        rbx
0000000000009eb0         ret
                        ; endp
0000000000009eb1         align      64                                          ; End of unwind block (FDE at 0x24a4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mb_copy:
0000000000009ec0         push       rbp                                         ; Begin of unwind block (FDE at 0x24a6c)
0000000000009ec1         push       rbx
0000000000009ec2         mov        rbx, rsi
0000000000009ec5         lea        rax, qword [rbx+0x18]
0000000000009ec9         mov        rbp, rdi
0000000000009ecc         sub        rsp, 0x8
0000000000009ed0         mov        rsi, qword [rsi]
0000000000009ed3         mov        rdx, qword [rbx+8]
0000000000009ed7         cmp        rsi, rax
0000000000009eda         je         loc_9f00

0000000000009edc         mov        qword [rdi], rsi

                     loc_9edf:
0000000000009edf         movzx      eax, byte [rbx+0x10]                        ; CODE XREF=mb_copy+84
0000000000009ee3         mov        qword [rbp+8], rdx
0000000000009ee7         test       al, al
0000000000009ee9         mov        byte [rbp+0x10], al
0000000000009eec         je         loc_9ef4

0000000000009eee         mov        eax, dword [rbx+0x14]
0000000000009ef1         mov        dword [rbp+0x14], eax

                     loc_9ef4:
0000000000009ef4         add        rsp, 0x8                                    ; CODE XREF=mb_copy+44
0000000000009ef8         pop        rbx
0000000000009ef9         pop        rbp
0000000000009efa         ret
                        ; endp
0000000000009efb         align      256

                     loc_9f00:
0000000000009f00         lea        rcx, qword [rdi+0x18]                       ; CODE XREF=mb_copy+26
0000000000009f04         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000009f07         call       j_memcpy                                    ; memcpy
0000000000009f0c         mov        rdx, qword [rbx+8]
0000000000009f10         mov        qword [rbp], rax
0000000000009f14         jmp        loc_9edf
0000000000009f16         align      32                                          ; End of unwind block (FDE at 0x24a6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     is_basic:
0000000000009f20         mov        eax, edi                                    ; Begin of unwind block (FDE at 0x24a98)
0000000000009f22         lea        rdx, qword [is_basic_table]                 ; is_basic_table
0000000000009f29         mov        ecx, edi
0000000000009f2b         shr        al, 0x5
0000000000009f2e         and        ecx, 0x1f
0000000000009f31         and        eax, 0x7
0000000000009f34         mov        eax, dword [rdx+rax*4]
0000000000009f37         shr        eax, cl
0000000000009f39         and        eax, 0x1
0000000000009f3c         ret
                        ; endp
0000000000009f3d         align      64                                          ; End of unwind block (FDE at 0x24a98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_64: int32_t, -100
        ;    var_68: int8_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int8_t, -124
        ;    var_84: int64_t, -132
        ;    var_88: int8_t, -136
        ;    var_A4: int32_t, -164
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_BC: int8_t, -188
        ;    var_C4: int64_t, -196
        ;    var_C8: int8_t, -200


                     mbscasecmp:
0000000000009f40         push       r15                                         ; Begin of unwind block (FDE at 0x24ac0), CODE XREF=string_compare_ci+4, fnmatch_no_wildcards+14, j_j_strcmp+41, j_j_strcmp+81
0000000000009f42         push       r14
0000000000009f44         push       r13
0000000000009f46         push       r12
0000000000009f48         push       rbp
0000000000009f49         push       rbx
0000000000009f4a         sub        rsp, 0x98
0000000000009f51         mov        rax, qword [fs:0x28]
0000000000009f5a         mov        qword [rsp+0xc8+var_40], rax
0000000000009f62         xor        eax, eax
0000000000009f64         cmp        rdi, rsi
0000000000009f67         je         loc_a2f0

0000000000009f6d         mov        rbp, rdi
0000000000009f70         mov        r12, rsi
0000000000009f73         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000009f78         cmp        rax, 0x1
0000000000009f7c         ja         loc_a018

0000000000009f82         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000009f87         mov        r14, qword [rax]
0000000000009f8a         jmp        loc_9fa0
0000000000009f8c         align      16

                     loc_9f90:
0000000000009f90         add        rbp, 0x1                                    ; CODE XREF=mbscasecmp+156
0000000000009f94         add        r12, 0x1
0000000000009f98         cmp        bl, dl
0000000000009f9a         jne        loc_a3a0

                     loc_9fa0:
0000000000009fa0         movzx      r13d, byte [rbp]                            ; CODE XREF=mbscasecmp+74, DATA XREF=leaf_optimization+72
0000000000009fa5         test       byte [r14+r13*2+1], 0x1
0000000000009fab         mov        rbx, r13
0000000000009fae         je         loc_9fbd

0000000000009fb0         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000009fb5         mov        rax, qword [rax]
0000000000009fb8         movzx      ebx, byte [rax+r13*4]

                     loc_9fbd:
0000000000009fbd         movzx      r13d, byte [r12]                            ; CODE XREF=mbscasecmp+110
0000000000009fc2         test       byte [r14+r13*2+1], 0x1
0000000000009fc8         mov        rdx, r13
0000000000009fcb         je         loc_9fda

0000000000009fcd         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000009fd2         mov        rax, qword [rax]
0000000000009fd5         movzx      edx, byte [rax+r13*4]

                     loc_9fda:
0000000000009fda         test       bl, bl                                      ; CODE XREF=mbscasecmp+139
0000000000009fdc         jne        loc_9f90

0000000000009fde         xor        eax, eax
0000000000009fe0         sub        eax, edx
0000000000009fe2         nop        word [rax+rax]

                     loc_9fe8:
0000000000009fe8         mov        rsi, qword [rsp+0xc8+var_40]                ; CODE XREF=mbscasecmp+405, mbscasecmp+946, mbscasecmp+1125, mbscasecmp+1157, mbscasecmp+1181, mbscasecmp+1376
0000000000009ff0         xor        rsi, qword [fs:0x28]
0000000000009ff9         jne        loc_a61f

0000000000009fff         add        rsp, 0x98
000000000000a006         pop        rbx
000000000000a007         pop        rbp
000000000000a008         pop        r12
000000000000a00a         pop        r13
000000000000a00c         pop        r14
000000000000a00e         pop        r15
000000000000a010         ret
                        ; endp
000000000000a011         align      8

                     loc_a018:
000000000000a018         mov        qword [rsp+0xc8+var_78], r12                ; CODE XREF=mbscasecmp+60
000000000000a01d         mov        r12, rsp
000000000000a020         mov        qword [rsp+0xc8+var_B8], rbp
000000000000a025         mov        byte [rsp+0xc8+var_C8], 0x0
000000000000a029         mov        qword [rsp+0xc8+var_C4], 0x0
000000000000a032         lea        r13, qword [is_basic_table]                 ; is_basic_table
000000000000a039         mov        byte [rsp+0xc8+var_BC], 0x0
000000000000a03e         mov        byte [rsp+0xc8+var_88], 0x0
000000000000a043         lea        r14, qword [r12+4]
000000000000a048         mov        qword [rsp+0xc8+var_84], 0x0
000000000000a051         mov        byte [rsp+0xc8+var_7C], 0x0
000000000000a056         lea        rbp, qword [rsp+0xc8+var_88]
000000000000a05b         jmp        loc_a0f9

                     loc_a060:
000000000000a060         cmp        byte [rsp+0xc8+var_88], 0x0                 ; CODE XREF=mbscasecmp+522
000000000000a065         jne        loc_a256

000000000000a06b         mov        rcx, qword [rsp+0xc8+var_78]
000000000000a070         movzx      edx, byte [rcx]
000000000000a073         mov        eax, edx
000000000000a075         shr        al, 0x5
000000000000a078         and        eax, 0x7
000000000000a07b         mov        eax, dword [r13+rax*4]
000000000000a080         bt         eax, edx
000000000000a083         jae        loc_a240

000000000000a089         mov        qword [rsp+0xc8+var_70], 0x1
000000000000a092         movsx      eax, byte [rcx]
000000000000a095         mov        byte [rsp+0xc8+var_68], 0x1
000000000000a09a         mov        byte [rsp+0xc8+var_7C], 0x1
000000000000a09f         mov        dword [rsp+0xc8+var_64], eax

                     loc_a0a3:
000000000000a0a3         mov        r15d, dword [rsp+0xc8+var_64]               ; CODE XREF=mbscasecmp+533, mbscasecmp+929, mbscasecmp+1109
000000000000a0a8         test       r15d, r15d
000000000000a0ab         je         loc_a3b0

000000000000a0b1         cmp        byte [rsp+0xc8+var_A8], 0x0
000000000000a0b6         je         loc_a3c0

000000000000a0bc         mov        edi, dword [rsp+0xc8+var_A4]                ; argument "__wc" for method j_towlower
000000000000a0c0         call       j_towlower                                  ; towlower
000000000000a0c5         mov        edi, r15d                                   ; argument "__wc" for method j_towlower
000000000000a0c8         mov        ebx, eax
000000000000a0ca         call       j_towlower                                  ; towlower
000000000000a0cf         sub        ebx, eax
000000000000a0d1         mov        eax, ebx

                     loc_a0d3:
000000000000a0d3         test       eax, eax                                    ; CODE XREF=mbscasecmp+584
000000000000a0d5         jne        loc_9fe8

000000000000a0db         mov        rax, qword [rsp+0xc8+var_B0]
000000000000a0e0         add        qword [rsp+0xc8+var_B8], rax
000000000000a0e5         mov        rax, qword [rsp+0xc8+var_70]
000000000000a0ea         add        qword [rsp+0xc8+var_78], rax
000000000000a0ef         mov        byte [rsp+0xc8+var_BC], 0x0
000000000000a0f4         mov        byte [rsp+0xc8+var_7C], 0x0

                     loc_a0f9:
000000000000a0f9         cmp        byte [rsp+0xc8+var_C8], 0x0                 ; CODE XREF=mbscasecmp+283
000000000000a0fd         jne        loc_a1a4

000000000000a103         mov        rcx, qword [rsp+0xc8+var_B8]
000000000000a108         movzx      edx, byte [rcx]
000000000000a10b         mov        eax, edx
000000000000a10d         shr        al, 0x5
000000000000a110         and        eax, 0x7
000000000000a113         mov        eax, dword [r13+rax*4]
000000000000a118         bt         eax, edx
000000000000a11b         jae        loc_a190

000000000000a11d         mov        qword [rsp+0xc8+var_B0], 0x1
000000000000a126         movsx      eax, byte [rcx]
000000000000a129         mov        byte [rsp+0xc8+var_A8], 0x1
000000000000a12e         mov        byte [rsp+0xc8+var_BC], 0x1
000000000000a133         mov        dword [rsp+0xc8+var_A4], eax

                     loc_a137:
000000000000a137         mov        r9d, dword [rsp+0xc8+var_A4]                ; CODE XREF=mbscasecmp+753, mbscasecmp+1093
000000000000a13c         test       r9d, r9d
000000000000a13f         je         loc_a3e8

                     loc_a145:
000000000000a145         cmp        byte [rsp+0xc8+var_7C], 0x0                 ; CODE XREF=mbscasecmp+979, mbscasecmp+1049
000000000000a14a         je         loc_a060

000000000000a150         cmp        byte [rsp+0xc8+var_68], 0x0
000000000000a155         jne        loc_a0a3

                     loc_a15b:
000000000000a15b         cmp        byte [rsp+0xc8+var_A8], 0x0                 ; CODE XREF=mbscasecmp+1011, mbscasecmp+1081
000000000000a160         jne        loc_a3d8

000000000000a166         mov        rdx, qword [rsp+0xc8+var_B0]
000000000000a16b         mov        rax, qword [rsp+0xc8+var_70]
000000000000a170         mov        rdi, qword [rsp+0xc8+var_B8]
000000000000a175         mov        rsi, qword [rsp+0xc8+var_78]
000000000000a17a         cmp        rdx, rax
000000000000a17d         jne        loc_a4a8

000000000000a183         call       j_memcmp                                    ; memcmp
000000000000a188         jmp        loc_a0d3
000000000000a18d         align      16

                     loc_a190:
000000000000a190         mov        rdi, r14                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbscasecmp+475
000000000000a193         call       j_mbsinit                                   ; mbsinit
000000000000a198         test       eax, eax
000000000000a19a         je         loc_a600

000000000000a1a0         mov        byte [rsp+0xc8+var_C8], 0x1

                     loc_a1a4:
000000000000a1a4         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbscasecmp+445
000000000000a1a9         mov        rbx, qword [rsp+0xc8+var_B8]
000000000000a1ae         mov        rsi, rax
000000000000a1b1         mov        rdi, rbx
000000000000a1b4         call       strnlen1                                    ; strnlen1
000000000000a1b9         lea        rcx, qword [r12+4]
000000000000a1be         lea        rdi, qword [r12+0x24]
000000000000a1c3         mov        rdx, rax
000000000000a1c6         mov        rsi, rbx
000000000000a1c9         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000a1ce         cmp        rax, 0xffffffffffffffff
000000000000a1d2         mov        qword [rsp+0xc8+var_B0], rax
000000000000a1d7         je         loc_a300

000000000000a1dd         cmp        rax, 0xfffffffffffffffe
000000000000a1e1         je         loc_a340

000000000000a1e7         test       rax, rax
000000000000a1ea         jne        loc_a211

000000000000a1ec         mov        rax, qword [rsp+0xc8+var_B8]
000000000000a1f1         mov        qword [rsp+0xc8+var_B0], 0x1
000000000000a1fa         cmp        byte [rax], 0x0
000000000000a1fd         jne        loc_a624

000000000000a203         mov        r10d, dword [rsp+0xc8+var_A4]
000000000000a208         test       r10d, r10d
000000000000a20b         jne        loc_a5fb

                     loc_a211:
000000000000a211         lea        rdi, qword [r12+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbscasecmp+682
000000000000a216         mov        byte [rsp+0xc8+var_A8], 0x1
000000000000a21b         call       j_mbsinit                                   ; mbsinit
000000000000a220         test       eax, eax
000000000000a222         je         loc_a380

000000000000a228         mov        byte [rsp+0xc8+var_C8], 0x0
000000000000a22c         mov        byte [rsp+0xc8+var_BC], 0x1
000000000000a231         jmp        loc_a137
000000000000a236         align      64

                     loc_a240:
000000000000a240         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbscasecmp+323
000000000000a244         call       j_mbsinit                                   ; mbsinit
000000000000a249         test       eax, eax
000000000000a24b         je         loc_a600

000000000000a251         mov        byte [rsp+0xc8+var_88], 0x1

                     loc_a256:
000000000000a256         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbscasecmp+293
000000000000a25b         mov        rbx, qword [rsp+0xc8+var_78]
000000000000a260         mov        rsi, rax
000000000000a263         mov        rdi, rbx
000000000000a266         call       strnlen1                                    ; strnlen1
000000000000a26b         lea        rcx, qword [rbp+4]
000000000000a26f         lea        rdi, qword [rbp+0x24]
000000000000a273         mov        rdx, rax
000000000000a276         mov        rsi, rbx
000000000000a279         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000a27e         cmp        rax, 0xffffffffffffffff
000000000000a282         mov        qword [rsp+0xc8+var_70], rax
000000000000a287         je         loc_a320

000000000000a28d         cmp        rax, 0xfffffffffffffffe
000000000000a291         je         loc_a360

000000000000a297         test       rax, rax
000000000000a29a         jne        loc_a2c1

000000000000a29c         mov        rax, qword [rsp+0xc8+var_78]
000000000000a2a1         mov        qword [rsp+0xc8+var_70], 0x1
000000000000a2aa         cmp        byte [rax], 0x0
000000000000a2ad         jne        loc_a624

000000000000a2b3         mov        r8d, dword [rsp+0xc8+var_64]
000000000000a2b8         test       r8d, r8d
000000000000a2bb         jne        loc_a5fb

                     loc_a2c1:
000000000000a2c1         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbscasecmp+858
000000000000a2c5         mov        byte [rsp+0xc8+var_68], 0x1
000000000000a2ca         call       j_mbsinit                                   ; mbsinit
000000000000a2cf         test       eax, eax
000000000000a2d1         je         loc_a390

000000000000a2d7         mov        byte [rsp+0xc8+var_88], 0x0
000000000000a2dc         mov        byte [rsp+0xc8+var_7C], 0x1
000000000000a2e1         jmp        loc_a0a3
000000000000a2e6         align      16

                     loc_a2f0:
000000000000a2f0         xor        eax, eax                                    ; CODE XREF=mbscasecmp+39
000000000000a2f2         jmp        loc_9fe8
000000000000a2f7         align      256

                     loc_a300:
000000000000a300         mov        qword [rsp+0xc8+var_B0], 0x1                ; CODE XREF=mbscasecmp+663
000000000000a309         mov        byte [rsp+0xc8+var_A8], 0x0
000000000000a30e         mov        byte [rsp+0xc8+var_BC], 0x1
000000000000a313         jmp        loc_a145
000000000000a318         align      32

                     loc_a320:
000000000000a320         mov        qword [rsp+0xc8+var_70], 0x1                ; CODE XREF=mbscasecmp+839
000000000000a329         mov        byte [rsp+0xc8+var_68], 0x0
000000000000a32e         mov        byte [rsp+0xc8+var_7C], 0x1
000000000000a333         jmp        loc_a15b
000000000000a338         align      64

                     loc_a340:
000000000000a340         mov        rdi, qword [rsp+0xc8+var_B8]                ; argument "__s" for method j_strlen, CODE XREF=mbscasecmp+673
000000000000a345         call       j_strlen                                    ; strlen
000000000000a34a         mov        byte [rsp+0xc8+var_A8], 0x0
000000000000a34f         mov        qword [rsp+0xc8+var_B0], rax
000000000000a354         mov        byte [rsp+0xc8+var_BC], 0x1
000000000000a359         jmp        loc_a145
000000000000a35e         align      32

                     loc_a360:
000000000000a360         mov        rdi, qword [rsp+0xc8+var_78]                ; argument "__s" for method j_strlen, CODE XREF=mbscasecmp+849
000000000000a365         call       j_strlen                                    ; strlen
000000000000a36a         mov        byte [rsp+0xc8+var_68], 0x0
000000000000a36f         mov        qword [rsp+0xc8+var_70], rax
000000000000a374         mov        byte [rsp+0xc8+var_7C], 0x1
000000000000a379         jmp        loc_a15b
000000000000a37e         align      128

                     loc_a380:
000000000000a380         mov        byte [rsp+0xc8+var_BC], 0x1                 ; CODE XREF=mbscasecmp+738
000000000000a385         jmp        loc_a137
000000000000a38a         align      16

                     loc_a390:
000000000000a390         mov        byte [rsp+0xc8+var_7C], 0x1                 ; CODE XREF=mbscasecmp+913
000000000000a395         jmp        loc_a0a3
000000000000a39a         align      32

                     loc_a3a0:
000000000000a3a0         movzx      eax, bl                                     ; CODE XREF=mbscasecmp+90
000000000000a3a3         sub        eax, edx
000000000000a3a5         jmp        loc_9fe8
000000000000a3aa         align      16

                     loc_a3b0:
000000000000a3b0         cmp        byte [rsp+0xc8+var_BC], 0x0                 ; CODE XREF=mbscasecmp+363
000000000000a3b5         je         loc_a3ef

000000000000a3b7         cmp        byte [rsp+0xc8+var_A8], 0x0
000000000000a3bc         jne        loc_a439

000000000000a3be         nop

                     loc_a3c0:
000000000000a3c0         mov        eax, 0x1                                    ; CODE XREF=mbscasecmp+374, mbscasecmp+1279, mbscasecmp+1397, mbscasecmp+1481, mbscasecmp+1491, mbscasecmp+1579
000000000000a3c5         jmp        loc_9fe8

                     loc_a3ca:
000000000000a3ca         cmp        byte [rsp+0xc8+var_68], 0x0                 ; CODE XREF=mbscasecmp+1290
000000000000a3cf         jne        loc_a493

000000000000a3d5         nop        dword [rax]

                     loc_a3d8:
000000000000a3d8         mov        eax, 0xffffffff                             ; CODE XREF=mbscasecmp+544, mbscasecmp+1403, mbscasecmp+1585, mbscasecmp+1677
000000000000a3dd         jmp        loc_9fe8
000000000000a3e2         align      8

                     loc_a3e8:
000000000000a3e8         cmp        byte [rsp+0xc8+var_BC], 0x0                 ; CODE XREF=mbscasecmp+511
000000000000a3ed         jne        loc_a445

                     loc_a3ef:
000000000000a3ef         cmp        byte [rsp+0xc8+var_C8], 0x0                 ; CODE XREF=mbscasecmp+1141
000000000000a3f3         mov        rbx, rsp
000000000000a3f6         jne        loc_a4d8

000000000000a3fc         mov        rcx, qword [rsp+0xc8+var_B8]
000000000000a401         lea        rsi, qword [is_basic_table]                 ; is_basic_table
000000000000a408         movzx      edx, byte [rcx]
000000000000a40b         mov        eax, edx
000000000000a40d         shr        al, 0x5
000000000000a410         and        eax, 0x7
000000000000a413         mov        eax, dword [rsi+rax*4]
000000000000a416         bt         eax, edx
000000000000a419         jae        loc_a4c0

000000000000a41f         mov        qword [rsp+0xc8+var_B0], 0x1
000000000000a428         movsx      eax, byte [rcx]
000000000000a42b         mov        byte [rsp+0xc8+var_A8], 0x1
000000000000a430         mov        byte [rsp+0xc8+var_BC], 0x1
000000000000a435         mov        dword [rsp+0xc8+var_A4], eax

                     loc_a439:
000000000000a439         mov        esi, dword [rsp+0xc8+var_A4]                ; CODE XREF=mbscasecmp+1148, mbscasecmp+1564, mbscasecmp+1595
000000000000a43d         test       esi, esi
000000000000a43f         jne        loc_a3c0

                     loc_a445:
000000000000a445         cmp        byte [rsp+0xc8+var_7C], 0x0                 ; CODE XREF=mbscasecmp+1197
000000000000a44a         jne        loc_a3ca

000000000000a450         cmp        byte [rsp+0xc8+var_88], 0x0
000000000000a455         lea        rbx, qword [rsp+0xc8+var_88]
000000000000a45a         jne        loc_a598

000000000000a460         mov        rcx, qword [rsp+0xc8+var_78]
000000000000a465         lea        rsi, qword [is_basic_table]                 ; is_basic_table
000000000000a46c         movzx      edx, byte [rcx]
000000000000a46f         mov        eax, edx
000000000000a471         shr        al, 0x5
000000000000a474         and        eax, 0x7
000000000000a477         mov        eax, dword [rsi+rax*4]
000000000000a47a         bt         eax, edx
000000000000a47d         jae        loc_a580

000000000000a483         mov        qword [rsp+0xc8+var_70], 0x1
000000000000a48c         movsx      eax, byte [rcx]
000000000000a48f         mov        dword [rsp+0xc8+var_64], eax

                     loc_a493:
000000000000a493         mov        edx, dword [rsp+0xc8+var_64]                ; CODE XREF=mbscasecmp+1167, mbscasecmp+1686, mbscasecmp+1717
000000000000a497         xor        eax, eax
000000000000a499         test       edx, edx
000000000000a49b         setne      al
000000000000a49e         neg        eax
000000000000a4a0         jmp        loc_9fe8
000000000000a4a5         align      8

                     loc_a4a8:
000000000000a4a8         jae        loc_a561                                    ; CODE XREF=mbscasecmp+573

000000000000a4ae         call       j_memcmp                                    ; memcmp
000000000000a4b3         test       eax, eax
000000000000a4b5         jg         loc_a3c0

000000000000a4bb         jmp        loc_a3d8

                     loc_a4c0:
000000000000a4c0         mov        rbx, rsp                                    ; CODE XREF=mbscasecmp+1241
000000000000a4c3         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit
000000000000a4c7         call       j_mbsinit                                   ; mbsinit
000000000000a4cc         test       eax, eax
000000000000a4ce         je         loc_a600

000000000000a4d4         mov        byte [rsp+0xc8+var_C8], 0x1

                     loc_a4d8:
000000000000a4d8         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbscasecmp+1206
000000000000a4dd         mov        rbp, qword [rsp+0xc8+var_B8]
000000000000a4e2         mov        rsi, rax
000000000000a4e5         mov        rdi, rbp
000000000000a4e8         call       strnlen1                                    ; strnlen1
000000000000a4ed         lea        rcx, qword [rbx+4]
000000000000a4f1         lea        rdi, qword [rbx+0x24]
000000000000a4f5         mov        rdx, rax
000000000000a4f8         mov        rsi, rbp
000000000000a4fb         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000a500         cmp        rax, 0xffffffffffffffff
000000000000a504         mov        qword [rsp+0xc8+var_B0], rax
000000000000a509         je         loc_a3c0

000000000000a50f         cmp        rax, 0xfffffffffffffffe
000000000000a513         je         loc_a3c0

000000000000a519         test       rax, rax
000000000000a51c         jne        loc_a541

000000000000a51e         mov        rax, qword [rsp+0xc8+var_B8]
000000000000a523         mov        qword [rsp+0xc8+var_B0], 0x1
000000000000a52c         cmp        byte [rax], 0x0
000000000000a52f         jne        loc_a624

000000000000a535         mov        edi, dword [rsp+0xc8+var_A4]
000000000000a539         test       edi, edi
000000000000a53b         jne        loc_a5fb

                     loc_a541:
000000000000a541         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbscasecmp+1500
000000000000a545         mov        byte [rsp+0xc8+var_A8], 0x1
000000000000a54a         call       j_mbsinit                                   ; mbsinit
000000000000a54f         test       eax, eax
000000000000a551         je         loc_a576

000000000000a553         mov        byte [rsp+0xc8+var_C8], 0x0
000000000000a557         mov        byte [rsp+0xc8+var_BC], 0x1
000000000000a55c         jmp        loc_a439

                     loc_a561:
000000000000a561         mov        rdx, rax                                    ; argument "__n" for method j_memcmp, CODE XREF=loc_a4a8
000000000000a564         call       j_memcmp                                    ; memcmp
000000000000a569         test       eax, eax
000000000000a56b         jns        loc_a3c0

000000000000a571         jmp        loc_a3d8

                     loc_a576:
000000000000a576         mov        byte [rsp+0xc8+var_BC], 0x1                 ; CODE XREF=mbscasecmp+1553
000000000000a57b         jmp        loc_a439

                     loc_a580:
000000000000a580         lea        rdi, qword [rsp+0xc8+var_84]                ; argument "__ps" for method j_mbsinit, CODE XREF=mbscasecmp+1341
000000000000a585         lea        rbx, qword [rsp+0xc8+var_88]
000000000000a58a         call       j_mbsinit                                   ; mbsinit
000000000000a58f         test       eax, eax
000000000000a591         je         loc_a600

000000000000a593         mov        byte [rsp+0xc8+var_88], 0x1

                     loc_a598:
000000000000a598         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbscasecmp+1306
000000000000a59d         mov        rbp, qword [rsp+0xc8+var_78]
000000000000a5a2         mov        rsi, rax
000000000000a5a5         mov        rdi, rbp
000000000000a5a8         call       strnlen1                                    ; strnlen1
000000000000a5ad         lea        rcx, qword [rbx+4]
000000000000a5b1         lea        rdi, qword [rbx+0x24]
000000000000a5b5         mov        rdx, rax
000000000000a5b8         mov        rsi, rbp
000000000000a5bb         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000a5c0         lea        rdx, qword [rax+2]
000000000000a5c4         mov        qword [rsp+0xc8+var_70], rax
000000000000a5c9         cmp        rdx, 0x1
000000000000a5cd         jbe        loc_a3d8

000000000000a5d3         test       rax, rax
000000000000a5d6         jne        loc_a493

000000000000a5dc         mov        rax, qword [rsp+0xc8+var_78]
000000000000a5e1         mov        qword [rsp+0xc8+var_70], 0x1
000000000000a5ea         cmp        byte [rax], 0x0
000000000000a5ed         jne        loc_a624

000000000000a5ef         mov        ecx, dword [rsp+0xc8+var_64]
000000000000a5f3         test       ecx, ecx
000000000000a5f5         je         loc_a493

                     loc_a5fb:
000000000000a5fb         call       mbuiter_multi_next.part.0                   ; mbuiter_multi_next.part.0, CODE XREF=mbscasecmp+715, mbscasecmp+891, mbscasecmp+1531
                        ; endp

                     loc_a600:
000000000000a600         lea        rcx, qword [__PRETTY_FUNCTION__.5133]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbscasecmp+602, mbscasecmp+779, mbscasecmp+1422, mbscasecmp+1617
000000000000a607         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000a60e         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
000000000000a615         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
000000000000a61a         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a61f:
000000000000a61f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbscasecmp+185
                        ; endp

                     loc_a624:
000000000000a624         lea        rcx, qword [__PRETTY_FUNCTION__.5133]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbscasecmp+701, mbscasecmp+877, mbscasecmp+1519, mbscasecmp+1709
000000000000a62b         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000a632         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
000000000000a639         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
000000000000a63e         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000a643         align      16                                          ; End of unwind block (FDE at 0x24ac0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
000000000000a650         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x24b0c), CODE XREF=main+90
000000000000a653         push       rbx
000000000000a654         je         loc_a6cd

000000000000a656         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000a65b         mov        rbx, rdi
000000000000a65e         call       j_strrchr                                   ; strrchr
000000000000a663         test       rax, rax
000000000000a666         je         loc_a6bd

000000000000a668         lea        r8, qword [rax+1]
000000000000a66c         mov        rdx, r8
000000000000a66f         sub        rdx, rbx
000000000000a672         cmp        rdx, 0x6
000000000000a676         jle        loc_a6bd

000000000000a678         lea        rsi, qword [rax-6]
000000000000a67c         lea        rdi, qword [aLibs]                          ; "/.libs/"
000000000000a683         mov        ecx, 0x7
000000000000a688         rep  cmpsb byte [rsi], byte [rdi]
000000000000a68a         seta       dl
000000000000a68d         sbb        dl, 0x0
000000000000a690         test       dl, dl
000000000000a692         jne        loc_a6bd

000000000000a694         lea        rdi, qword [aLibs+8]                        ; 0x21ab8
000000000000a69b         mov        ecx, 0x3
000000000000a6a0         mov        rsi, r8
000000000000a6a3         mov        rbx, r8
000000000000a6a6         rep  cmpsb byte [rsi], byte [rdi]
000000000000a6a8         seta       dl
000000000000a6ab         sbb        dl, 0x0
000000000000a6ae         test       dl, dl
000000000000a6b0         jne        loc_a6bd

000000000000a6b2         lea        rbx, qword [rax+4]
000000000000a6b6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_a6bd:
000000000000a6bd         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
000000000000a6c4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000a6cb         pop        rbx
000000000000a6cc         ret
                        ; endp

                     loc_a6cd:
000000000000a6cd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
000000000000a6d4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000a6db         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
000000000000a6e0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
000000000000a6e5         call       j_fwrite                                    ; fwrite
000000000000a6ea         call       j_abort                                     ; abort
                        ; endp
000000000000a6ef         align      16                                          ; End of unwind block (FDE at 0x24b0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
000000000000a6f0         push       rbp                                         ; Begin of unwind block (FDE at 0x24b2c), CODE XREF=sub_af20+2597, sub_af20+2619
000000000000a6f1         push       rbx
000000000000a6f2         mov        rbp, rdi
000000000000a6f5         mov        ebx, esi
000000000000a6f7         sub        rsp, 0x8
000000000000a6fb         call       locale_charset                              ; locale_charset
000000000000a700         movzx      edx, byte [rax]
000000000000a703         and        edx, 0xffffffdf
000000000000a706         cmp        dl, 0x55
000000000000a709         je         loc_a780

000000000000a70b         cmp        dl, 0x47
000000000000a70e         je         loc_a730

                     loc_a710:
000000000000a710         lea        rax, qword [aLibs+27]                       ; 0x21acb, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
000000000000a717         lea        rdx, qword [aItercurptr0+21]                ; 0x214f4
000000000000a71e         cmp        ebx, 0x9
000000000000a721         cmovne     rax, rdx
000000000000a725         add        rsp, 0x8
000000000000a729         pop        rbx
000000000000a72a         pop        rbp
000000000000a72b         ret
                        ; endp
000000000000a72c         align      16

                     loc_a730:
000000000000a730         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
000000000000a734         and        edx, 0xffffffdf
000000000000a737         cmp        dl, 0x42
000000000000a73a         jne        loc_a710

000000000000a73c         cmp        byte [rax+2], 0x31
000000000000a740         jne        loc_a710

000000000000a742         cmp        byte [rax+3], 0x38
000000000000a746         jne        loc_a710

000000000000a748         cmp        byte [rax+4], 0x30
000000000000a74c         jne        loc_a710

000000000000a74e         cmp        byte [rax+5], 0x33
000000000000a752         jne        loc_a710

000000000000a754         cmp        byte [rax+6], 0x30
000000000000a758         jne        loc_a710

000000000000a75a         cmp        byte [rax+7], 0x0
000000000000a75e         jne        loc_a710

000000000000a760         cmp        byte [rbp], 0x60
000000000000a764         lea        rax, qword [aLibs+20]                       ; 0x21ac4
000000000000a76b         lea        rdx, qword [aLibs+24]                       ; 0x21ac8
000000000000a772         cmovne     rax, rdx
000000000000a776         add        rsp, 0x8
000000000000a77a         pop        rbx
000000000000a77b         pop        rbp
000000000000a77c         ret
                        ; endp
000000000000a77d         align      128

                     loc_a780:
000000000000a780         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
000000000000a784         and        edx, 0xffffffdf
000000000000a787         cmp        dl, 0x54
000000000000a78a         jne        loc_a710

000000000000a78c         movzx      edx, byte [rax+2]
000000000000a790         and        edx, 0xffffffdf
000000000000a793         cmp        dl, 0x46
000000000000a796         jne        loc_a710

000000000000a79c         cmp        byte [rax+3], 0x2d
000000000000a7a0         jne        loc_a710

000000000000a7a6         cmp        byte [rax+4], 0x38
000000000000a7aa         jne        loc_a710

000000000000a7b0         cmp        byte [rax+5], 0x0
000000000000a7b4         jne        loc_a710

000000000000a7ba         cmp        byte [rbp], 0x60
000000000000a7be         lea        rax, qword [aLibs+12]                       ; 0x21abc
000000000000a7c5         lea        rdx, qword [aLibs+16]                       ; 0x21ac0
000000000000a7cc         cmovne     rax, rdx
000000000000a7d0         add        rsp, 0x8
000000000000a7d4         pop        rbx
000000000000a7d5         pop        rbp
000000000000a7d6         ret
                        ; endp
000000000000a7d7         align      32                                          ; End of unwind block (FDE at 0x24b2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
000000000000a7e0         push       r15                                         ; Begin of unwind block (FDE at 0x24b70), CODE XREF=sub_af20+1165, sub_af20+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
000000000000a7e2         push       r14
000000000000a7e4         mov        r15d, r8d
000000000000a7e7         push       r13
000000000000a7e9         push       r12
000000000000a7eb         mov        r14, rdi
000000000000a7ee         push       rbp
000000000000a7ef         push       rbx
000000000000a7f0         mov        ebx, r9d
000000000000a7f3         mov        r13, rsi
000000000000a7f6         mov        rbp, rcx
000000000000a7f9         and        ebx, 0x2
000000000000a7fc         sub        rsp, 0xb8
000000000000a803         mov        rax, qword [rsp+0xe8+arg_0]
000000000000a80b         mov        qword [rsp+0xe8+var_D8], rdx
000000000000a810         mov        dword [rsp+0xe8+var_E0], r8d
000000000000a815         mov        dword [rsp+0xe8+var_70], r9d
000000000000a81a         mov        qword [rsp+0xe8+var_C8], rax
000000000000a81f         mov        rax, qword [rsp+0xe8+arg_8]
000000000000a827         mov        qword [rsp+0xe8+var_80], rax
000000000000a82c         mov        rax, qword [rsp+0xe8+arg_10]
000000000000a834         mov        qword [rsp+0xe8+var_88], rax
000000000000a839         mov        rax, qword [fs:0x28]
000000000000a842         mov        qword [rsp+0xe8+var_40], rax
000000000000a84a         xor        eax, eax
000000000000a84c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000000a851         cmp        r15d, 0xa
000000000000a855         mov        qword [rsp+0xe8+var_90], rax
000000000000a85a         ja         loc_ba0f

000000000000a860         lea        rcx, qword [switch_table_21b20]             ; switch_table_21b20
000000000000a867         mov        edx, r15d
000000000000a86a         movsxd     rax, dword [rcx+rdx*4]
000000000000a86e         add        rax, rcx
000000000000a871         jmp        rax                                         ; switch statement using table at 0x21b20, with 11 cases, 0xa873,0xb444,0xb4a0,0xb4f5,0xb53a,0xb574,0xb61a,0xb654,0xb848

                     loc_a873:
000000000000a873         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_af20+1318
000000000000a878         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000a87d         xor        r12d, r12d
000000000000a880         mov        qword [rsp+0xe8+var_98], 0x0
000000000000a889         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000a88e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_a893:
000000000000a893         lea        rax, qword [aItercurptr0+21]                ; 0x214f4, CODE XREF=sub_af20+1876
000000000000a89a         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000a8a3         xor        r15d, r15d
000000000000a8a6         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000a8ae         mov        qword [rsp+0xe8+var_A0], rax

                     loc_a8b3:
000000000000a8b3         xor        r11d, r11d                                  ; CODE XREF=sub_af20+180, sub_af20+1400, sub_af20+1488, sub_af20+1557, sub_af20+1615, sub_af20+1781, sub_af20+1839, sub_af20+2408, sub_af20+2485
000000000000a8b6         mov        rax, rbp
000000000000a8b9         mov        r8d, r12d
000000000000a8bc         mov        rbp, r11
000000000000a8bf         mov        r11, rax
000000000000a8c2         nop        word [rax+rax]

                     loc_a8c8:
000000000000a8c8         cmp        r11, rbp                                    ; CODE XREF=sub_a9d0+194
000000000000a8cb         setne      r12b
000000000000a8cf         cmp        r11, 0xffffffffffffffff
000000000000a8d3         jne        loc_a8e2

000000000000a8d5         mov        rax, qword [rsp+0xe8+var_D8]
000000000000a8da         cmp        byte [rax+rbp], 0x0
000000000000a8de         setne      r12b

                     loc_a8e2:
000000000000a8e2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
000000000000a8e5         je         loc_af40

000000000000a8eb         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000a8f0         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000a8f5         lea        r9, qword [rdi+rbp]
000000000000a8f9         setne      al
000000000000a8fc         and        al, byte [rsp+0xe8+var_DB]
000000000000a900         mov        r10d, eax
000000000000a903         je         loc_a9b0

000000000000a909         mov        rax, qword [rsp+0xe8+var_D0]
000000000000a90e         test       rax, rax
000000000000a911         je         loc_ad40

000000000000a917         cmp        r11, 0xffffffffffffffff
000000000000a91b         lea        rbx, qword [rbp+rax]
000000000000a920         jne        loc_a950

000000000000a922         cmp        rax, 0x1
000000000000a926         jbe        loc_a950

000000000000a928         mov        byte [rsp+0xe8+var_B0], r8b
000000000000a92d         mov        byte [rsp+0xe8+var_B8], r10b
000000000000a932         mov        qword [rsp+0xe8+var_C0], r9
000000000000a937         call       j_strlen                                    ; strlen
000000000000a93c         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000a942         movzx      r10d, byte [rsp+0xe8+var_B8]
000000000000a948         mov        r11, rax
000000000000a94b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_a950:
000000000000a950         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
000000000000a953         mov        byte [rsp+0xe8+var_C0], r10b
000000000000a958         ja         loc_af10

000000000000a95e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
000000000000a963         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
000000000000a968         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000a96b         mov        qword [rsp+0xe8+var_A8], r11
000000000000a970         mov        byte [rsp+0xe8+var_B0], r8b
000000000000a975         mov        qword [rsp+0xe8+var_B8], r9
000000000000a97a         call       j_memcmp                                    ; memcmp
000000000000a97f         test       eax, eax
000000000000a981         mov        r9, qword [rsp+0xe8+var_B8]
000000000000a986         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000a98c         mov        r11, qword [rsp+0xe8+var_A8]
000000000000a991         jne        loc_af10

000000000000a997         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000a99c         movzx      r10d, byte [rsp+0xe8+var_C0]
000000000000a9a2         jne        loc_b925

000000000000a9a8         nop        dword [rax+rax]

                     loc_a9b0:
000000000000a9b0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_af00+19
000000000000a9b4         cmp        bl, 0x7e
000000000000a9b7         ja         loc_acd8

000000000000a9bd         lea        rcx, qword [switch_table_21b20+44]          ; 0x21b4c
000000000000a9c4         movzx      edx, bl
000000000000a9c7         movsxd     rax, dword [rcx+rdx*4]
000000000000a9cb         add        rax, rcx
000000000000a9ce         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_a9d0:
000000000000a9d0         xor        r10d, r10d
000000000000a9d3         cmp        r11, 0x1
000000000000a9d7         setne      al
000000000000a9da         cmp        r11, 0xffffffffffffffff
000000000000a9de         jne        loc_a9ec

000000000000a9e0         mov        rax, qword [rsp+arg_8]
000000000000a9e5         cmp        byte [rax+1], 0x0
000000000000a9e9         setne      al

                     loc_a9ec:
000000000000a9ec         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_a9d0+14
000000000000a9f1         sete       dl
000000000000a9f4         test       al, al
000000000000a9f6         je         loc_ac48

                     loc_a9fc:
000000000000a9fc         xor        r12d, r12d                                  ; CODE XREF=sub_ac40+11
000000000000a9ff         xor        eax, eax
000000000000aa01         nop        dword [rax]
                        ; endp

                     loc_aa08:
000000000000aa08         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_abf0+50, sub_acc0+119
000000000000aa0d         jne        loc_ab22

000000000000aa13         test       dl, dl
000000000000aa15         jne        loc_ab22

                     loc_aa1b:
000000000000aa1b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_aad0+87
000000000000aa20         test       rsi, rsi
000000000000aa23         je         loc_aa39

000000000000aa25         mov        edx, ebx
000000000000aa27         shr        dl, 0x5
000000000000aa2a         movzx      edx, dl
000000000000aa2d         mov        edx, dword [rsi+rdx*4]
000000000000aa30         bt         edx, ebx
000000000000aa33         jb         loc_ab83

                     loc_aa39:
000000000000aa39         test       r10b, r10b                                  ; CODE XREF=sub_a9d0+83, sub_aad0+93
000000000000aa3c         jne        loc_ab83

000000000000aa42         xor        eax, 0x1
000000000000aa45         add        rbp, 0x1
000000000000aa49         and        eax, r8d

                     loc_aa4c:
000000000000aa4c         test       al, al                                      ; CODE XREF=sub_af20+936
000000000000aa4e         je         loc_aa70

000000000000aa50         cmp        r13, r15
000000000000aa53         jbe        loc_aa5a

000000000000aa55         mov        byte [r14+r15], 0x27

                     loc_aa5a:
000000000000aa5a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_a9d0+131
000000000000aa5e         cmp        r13, rax
000000000000aa61         jbe        loc_aa69

000000000000aa63         mov        byte [r14+r15+1], 0x27

                     loc_aa69:
000000000000aa69         add        r15, 0x2                                    ; CODE XREF=sub_a9d0+145
000000000000aa6d         xor        r8d, r8d

                     loc_aa70:
000000000000aa70         cmp        r15, r13                                    ; CODE XREF=sub_a9d0+126, sub_aad0+275, sub_af20+869
000000000000aa73         jae        loc_aa79

000000000000aa75         mov        byte [r14+r15], bl

                     loc_aa79:
000000000000aa79         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_a9d0+163
000000000000aa7e         add        r15, 0x1
000000000000aa82         mov        eax, 0x0
000000000000aa87         test       r12b, r12b
000000000000aa8a         cmove      edi, eax
000000000000aa8d         mov        byte [rsp+0xe8+var_DA], dil
000000000000aa92         jmp        loc_a8c8
000000000000aa97         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_aaa0:
000000000000aaa0         xor        r10d, r10d
000000000000aaa3         mov        eax, dword [rsp+arg_0]
000000000000aaa7         cmp        eax, 0x2
000000000000aaaa         je         loc_b068

000000000000aab0         cmp        eax, 0x5
000000000000aab3         je         loc_b028

000000000000aab9         cmp        eax, 0x2
000000000000aabc         mov        ebx, 0x3f
000000000000aac1         sete       dl
000000000000aac4         xor        r12d, r12d
000000000000aac7         xor        eax, eax
000000000000aac9         jmp        sub_a9d0+56
                        ; endp
000000000000aace         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_aad0:
000000000000aad0         xor        r10d, r10d
000000000000aad3         cmp        dword [rsp+arg_0], 0x2
000000000000aad8         je         loc_afe0

000000000000aade         mov        byte [rsp+arg_74], r12b
000000000000aae3         xor        edx, edx
000000000000aae5         xor        eax, eax
000000000000aae7         mov        ebx, 0x27
000000000000aaec         jmp        sub_a9d0+56
                        ; endp
000000000000aaf1         nop        dword [rax]
000000000000aaf8         mov        edx, 0x9
000000000000aafd         mov        ebx, 0x74

                     loc_ab02:
000000000000ab02         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_ac90+10, sub_ad80+37, sub_aec0+53
000000000000ab07         sete       al
000000000000ab0a         and        al, byte [rsp+arg_7]
000000000000ab0e         jne        sub_ac40+30

000000000000ab14         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_aad0+114
000000000000ab19         jne        loc_ab80

                     loc_ab1b:
000000000000ab1b         mov        ebx, edx                                    ; CODE XREF=sub_abf0+18
000000000000ab1d         xor        r12d, r12d
000000000000ab20         xor        eax, eax
                        ; endp

                     loc_ab22:
000000000000ab22         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_a9d0+61, sub_a9d0+69
000000000000ab27         jne        loc_aa1b

000000000000ab2d         jmp        loc_aa39
000000000000ab32         nop        word [rax+rax]
000000000000ab38         mov        edx, 0x8
000000000000ab3d         mov        ebx, 0x62
000000000000ab42         jmp        sub_aad0+68
000000000000ab44         nop        dword [rax]
000000000000ab48         cmp        dword [rsp+8], 0x2
000000000000ab4d         je         sub_af20                                    ; sub_af20
000000000000ab53         cmp        byte [rsp+0xd], 0x0
000000000000ab58         je         sub_ad60+16

                     loc_ab5e:
000000000000ab5e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_ad60+8
000000000000ab63         je         loc_ad70

000000000000ab69         cmp        qword [rsp+arg_10], 0x0
000000000000ab6f         jne        loc_af2b

000000000000ab75         mov        ebx, 0x5c
000000000000ab7a         nop        word [rax+rax]
                        ; endp

                     loc_ab80:
000000000000ab80         xor        r12d, r12d                                  ; CODE XREF=sub_aad0+73, sub_aec0+29
                        ; endp

                     loc_ab83:
000000000000ab83         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_a9d0+99, sub_a9d0+108
000000000000ab88         sete       dl
000000000000ab8b         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000ab90         mov        eax, edx
000000000000ab92         jne        loc_b3e8

000000000000ab98         mov        eax, r8d
000000000000ab9b         xor        eax, 0x1
000000000000ab9e         and        al, dl
000000000000aba0         je         loc_abd1

000000000000aba2         cmp        r13, r15
000000000000aba5         jbe        loc_abac

000000000000aba7         mov        byte [r14+r15], 0x27

                     loc_abac:
000000000000abac         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_aad0+213
000000000000abb0         cmp        r13, rdx
000000000000abb3         jbe        loc_abbb

000000000000abb5         mov        byte [r14+r15+1], 0x24

                     loc_abbb:
000000000000abbb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_aad0+227
000000000000abbf         cmp        r13, rdx
000000000000abc2         jbe        loc_abca

000000000000abc4         mov        byte [r14+r15+2], 0x27

                     loc_abca:
000000000000abca         add        r15, 0x3                                    ; CODE XREF=sub_aad0+242
000000000000abce         mov        r8d, eax

                     loc_abd1:
000000000000abd1         cmp        r13, r15                                    ; CODE XREF=sub_aad0+208
000000000000abd4         jbe        loc_abdb

000000000000abd6         mov        byte [r14+r15], 0x5c

                     loc_abdb:
000000000000abdb         add        r15, 0x1                                    ; CODE XREF=sub_aad0+260
000000000000abdf         add        rbp, 0x1
000000000000abe3         jmp        loc_aa70
000000000000abe8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_abf0:
000000000000abf0         cmp        byte [rsp+arg_5], 0x0
000000000000abf5         jne        loc_adc3

000000000000abfb         xor        edx, edx
000000000000abfd         test       byte [rsp+arg_70], 0x1
000000000000ac02         je         loc_ab1b

000000000000ac08         add        rbp, 0x1
000000000000ac0c         jmp        quotearg_buffer_restyled+232
                        ; endp
000000000000ac11         nop        dword [rax]
000000000000ac18         cmp        dword [rsp+8], 0x2
000000000000ac1d         sete       dl
000000000000ac20         xor        eax, eax
000000000000ac22         jmp        sub_a9d0+56
000000000000ac27         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ac30:
000000000000ac30         mov        edx, 0x7
000000000000ac35         mov        ebx, 0x61
000000000000ac3a         jmp        sub_aad0+68
                        ; endp
000000000000ac3f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ac40:
000000000000ac40         cmp        dword [rsp+8], 0x2
000000000000ac45         sete       dl
                        ; endp

                     loc_ac48:
000000000000ac48         test       rbp, rbp                                    ; CODE XREF=sub_a9d0+38, sub_ae60+35
000000000000ac4b         jne        loc_a9fc

000000000000ac51         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_ae90+43
000000000000ac56         and        al, dl
000000000000ac58         je         sub_a9d0+56

000000000000ac5e         mov        rbp, r11
000000000000ac61         mov        dword [rsp+arg_0], 0x2
000000000000ac69         jmp        sub_af20+1097
                        ; endp
000000000000ac6e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_ac70:
000000000000ac70         cmp        dword [rsp+arg_0], 0x2
000000000000ac75         sete       dl
000000000000ac78         xor        r12d, r12d
000000000000ac7b         jmp        sub_ac40+17
                        ; endp
000000000000ac7d         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_ac80:
000000000000ac80         cmp        dword [rsp+arg_0], 0x2
000000000000ac85         mov        ebx, 0x20
000000000000ac8a         sete       dl
000000000000ac8d         jmp        sub_ac40+17
                        ; endp
000000000000ac8f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_ac90:
000000000000ac90         mov        edx, 0xd
000000000000ac95         mov        ebx, 0x72
000000000000ac9a         jmp        loc_ab02
000000000000ac9f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_aca0:
000000000000aca0         mov        edx, 0xc
000000000000aca5         mov        ebx, 0x66
000000000000acaa         jmp        sub_aad0+68
                        ; endp
000000000000acaf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_acb0:
000000000000acb0         mov        edx, 0xb
000000000000acb5         mov        ebx, 0x76
000000000000acba         jmp        sub_aad0+68
                        ; endp
000000000000acbf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_acc0:
000000000000acc0         mov        edx, 0xa
000000000000acc5         mov        ebx, 0x6e
000000000000acca         jmp        sub_aad0+50
                        ; endp
000000000000accf         align      16

                     loc_acd0:
000000000000acd0         xor        r10d, r10d                                  ; CODE XREF=sub_acc0+135
000000000000acd3         nop        dword [rax+rax]

                     loc_acd8:
000000000000acd8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000acde         jne        loc_b088

000000000000ace4         mov        qword [rsp+0xe8+var_B0], r11
000000000000ace9         mov        byte [rsp+0xe8+var_B8], r8b
000000000000acee         mov        byte [rsp+0xe8+var_C0], r10b
000000000000acf3         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000acf8         mov        rcx, qword [rax]
000000000000acfb         movzx      edx, bl
000000000000acfe         movzx      r10d, byte [rsp+0xe8+var_C0]
000000000000ad04         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000ad0a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000ad0f         mov        edi, 0x1
000000000000ad14         movzx      eax, word [rcx+rdx*2]
000000000000ad18         and        ax, __do_global_dtors_aux
000000000000ad1c         setne      r12b
000000000000ad20         sete       al
000000000000ad23         and        al, byte [rsp+0xe8+var_DB]

                     loc_ad27:
000000000000ad27         test       al, al                                      ; CODE XREF=sub_af20+2221
000000000000ad29         jne        loc_b6c1

000000000000ad2f         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000ad34         sete       dl
000000000000ad37         jmp        loc_aa08
000000000000ad3c         align      64

                     loc_ad40:
000000000000ad40         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
000000000000ad44         cmp        bl, 0x7e
000000000000ad47         ja         loc_acd0

000000000000ad49         lea        rcx, qword [switch_table_21b20+552]         ; 0x21d48
000000000000ad50         movzx      edx, bl
000000000000ad53         movsxd     rax, dword [rcx+rdx*4]
000000000000ad57         add        rax, rcx
000000000000ad5a         jmp        rax
                        ; endp
000000000000ad5c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_ad60:
000000000000ad60         xor        r10d, r10d
000000000000ad63         cmp        byte [rsp+arg_5], 0x0
000000000000ad68         jne        loc_ab5e

000000000000ad6e         nop

                     loc_ad70:
000000000000ad70         mov        edx, 0x5c                                   ; CODE XREF=sub_aad0+136, sub_aad0+147
000000000000ad75         mov        ebx, 0x5c
000000000000ad7a         jmp        sub_aad0+68
                        ; endp
000000000000ad7f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ad80:
000000000000ad80         mov        edx, 0xc
000000000000ad85         xor        r10d, r10d
000000000000ad88         mov        ebx, 0x66
000000000000ad8d         jmp        sub_aad0+68
                        ; endp
000000000000ad92         nop        word [rax+rax]
000000000000ad98         mov        edx, 0xa
000000000000ad9d         xor        r10d, r10d
000000000000ada0         mov        ebx, 0x6e
000000000000ada5         jmp        sub_aad0+50
000000000000adaa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_adb0:
000000000000adb0         mov        ebx, 0x61
000000000000adb5         jmp        sub_aad0+176
                        ; endp
000000000000adba         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_adc0:
000000000000adc0         xor        r10d, r10d
                        ; endp

                     loc_adc3:
000000000000adc3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_abf0+5
000000000000adc8         sete       dl
000000000000adcb         cmp        byte [rsp+arg_7], 0x0
000000000000add0         jne        loc_b96a

000000000000add6         mov        eax, r8d
000000000000add9         mov        rcx, r15
000000000000addc         xor        eax, 0x1
000000000000addf         and        al, dl
000000000000ade1         je         loc_ae10

000000000000ade3         cmp        r13, r15
000000000000ade6         jbe        loc_aded

000000000000ade8         mov        byte [r14+r15], 0x27

                     loc_aded:
000000000000aded         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_adc0+38
000000000000adf1         cmp        r13, rcx
000000000000adf4         jbe        loc_adfc

000000000000adf6         mov        byte [r14+r15+1], 0x24

                     loc_adfc:
000000000000adfc         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_adc0+52
000000000000ae00         cmp        r13, rcx
000000000000ae03         ja         loc_b439

                     loc_ae09:
000000000000ae09         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_af20+1311
000000000000ae0d         mov        r8d, eax

                     loc_ae10:
000000000000ae10         cmp        r13, rcx                                    ; CODE XREF=sub_adc0+33
000000000000ae13         jbe        loc_ae1a

000000000000ae15         mov        byte [r14+rcx], 0x5c

                     loc_ae1a:
000000000000ae1a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_adc0+83
000000000000ae1f         lea        r15, qword [rcx+1]
000000000000ae23         je         loc_b429

000000000000ae29         lea        rax, qword [rbp+1]
000000000000ae2d         cmp        rax, r11
000000000000ae30         jae        loc_ae4b

000000000000ae32         mov        rax, qword [rsp+arg_8]
000000000000ae37         movzx      eax, byte [rax+rbp+1]
000000000000ae3c         mov        byte [rsp+arg_20], al
000000000000ae40         sub        eax, 0x30
000000000000ae43         cmp        al, 0x9
000000000000ae45         jbe        loc_b679

                     loc_ae4b:
000000000000ae4b         mov        eax, r12d                                   ; CODE XREF=sub_adc0+112
000000000000ae4e         mov        ebx, 0x30
000000000000ae53         xor        r12d, r12d
000000000000ae56         jmp        sub_a9d0+56
                        ; endp
000000000000ae5b         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_ae60:
000000000000ae60         cmp        dword [rsp+arg_0], 0x2
000000000000ae65         mov        r12d, r10d
000000000000ae68         sete       dl
000000000000ae6b         xor        r10d, r10d
000000000000ae6e         xor        eax, eax
000000000000ae70         jmp        sub_a9d0+56
                        ; endp
000000000000ae75         nop        dword [rax]
000000000000ae78         cmp        dword [rsp+8], 0x2
000000000000ae7d         sete       dl
000000000000ae80         xor        r10d, r10d
000000000000ae83         jmp        sub_ac40+8
000000000000ae88         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ae90:
000000000000ae90         cmp        dword [rsp+8], 0x2
000000000000ae95         sete       dl
000000000000ae98         xor        r10d, r10d
000000000000ae9b         xor        r12d, r12d
000000000000ae9e         jmp        sub_ac40+17
                        ; endp
000000000000aea3         nop        dword [rax+rax]
000000000000aea8         cmp        dword [rsp+8], 0x2
000000000000aead         mov        r12d, r10d
000000000000aeb0         mov        ebx, 0x20
000000000000aeb5         sete       dl
000000000000aeb8         xor        r10d, r10d
000000000000aebb         jmp        sub_ac40+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_aec0:
000000000000aec0         mov        edx, 0xd
000000000000aec5         xor        r10d, r10d
000000000000aec8         mov        ebx, 0x72
000000000000aecd         jmp        sub_aad0+50
                        ; endp
000000000000aed2         nop        word [rax+rax]
000000000000aed8         mov        ebx, 0x76
000000000000aedd         jmp        sub_aad0+176
000000000000aee2         nop        word [rax+rax]
000000000000aee8         mov        edx, 0x9
000000000000aeed         xor        r10d, r10d
000000000000aef0         mov        ebx, 0x74
000000000000aef5         jmp        sub_aad0+50
000000000000aefa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_af00:
000000000000af00         mov        ebx, 0x62
000000000000af05         jmp        sub_aad0+176
                        ; endp
000000000000af0a         nop        word [rax+rax]

                     loc_af10:
000000000000af10         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
000000000000af13         jmp        loc_a9b0
000000000000af18         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_af20:
000000000000af20         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_aad0+125
000000000000af25         jne        sub_af20+2416
                        ; endp

                     loc_af2b:
000000000000af2b         add        rbp, 0x1                                    ; CODE XREF=sub_aad0+159
000000000000af2f         mov        eax, r8d
000000000000af32         xor        r12d, r12d
000000000000af35         mov        ebx, 0x5c
000000000000af3a         jmp        sub_a9d0+124
                        ; endp
000000000000af3f         align      64

                     loc_af40:
000000000000af40         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
000000000000af45         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000af4a         mov        r12d, r8d
000000000000af4d         mov        rbp, r11
000000000000af50         sete       dl
000000000000af53         mov        eax, ebx
000000000000af55         test       r15, r15
000000000000af58         sete       cl
000000000000af5b         and        eax, edx
000000000000af5d         and        al, cl
000000000000af5f         jne        loc_b9c6

000000000000af65         mov        eax, ebx
000000000000af67         xor        eax, 0x1
000000000000af6a         and        dl, al
000000000000af6c         je         loc_b8dc

000000000000af72         cmp        byte [rsp+0xe8+var_6C], 0x0
000000000000af77         je         loc_b8da

000000000000af7d         cmp        byte [rsp+0xe8+var_DA], 0x0
000000000000af82         jne        loc_b97d

000000000000af88         test       r13, r13
000000000000af8b         sete       al
000000000000af8e         cmp        qword [rsp+0xe8+var_98], 0x0
000000000000af94         setne      dl
000000000000af97         and        al, dl
000000000000af99         je         loc_b9bc

000000000000af9f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_afa4:
000000000000afa4         lea        rbx, qword [aItercurptr0+21]                ; 0x214f4, CODE XREF=sub_af20+2781
000000000000afab         mov        byte [r14], 0x27
000000000000afaf         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000afb7         mov        r15d, 0x1
000000000000afbd         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000afc6         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000afcb         mov        qword [rsp+0xe8+var_A0], rbx
000000000000afd0         mov        byte [rsp+0xe8+var_6C], al
000000000000afd4         jmp        loc_a8b3
000000000000afd9         align      32

                     loc_afe0:
000000000000afe0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_aad0+8
000000000000afe5         jne        sub_af20+2416

000000000000afeb         test       r13, r13
000000000000afee         je         loc_b3f0

000000000000aff4         xor        edx, edx
000000000000aff6         cmp        qword [rsp+arg_48], 0x0
000000000000affc         jne        loc_b3f0

                     loc_b002:
000000000000b002         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_af20+1284, sub_af20+2794
000000000000b007         add        r15, 0x3
000000000000b00b         xor        eax, eax
000000000000b00d         mov        byte [rsp+arg_74], r12b
000000000000b012         xor        r8d, r8d
000000000000b015         mov        r13, rdx
000000000000b018         mov        ebx, 0x27
000000000000b01d         jmp        sub_a9d0+105
                        ; endp
000000000000b022         align      8

                     loc_b028:
000000000000b028         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_aaa0+19
000000000000b02d         je         loc_b050

000000000000b02f         lea        rcx, qword [rbp+2]
000000000000b033         cmp        rcx, r11
000000000000b036         jae        loc_b050

000000000000b038         mov        rax, qword [rsp+arg_8]
000000000000b03d         cmp        byte [rax+rbp+1], 0x3f
000000000000b042         je         loc_b7d2

000000000000b048         nop        dword [rax+rax]

                     loc_b050:
000000000000b050         xor        edx, edx                                    ; CODE XREF=sub_af20+269, sub_af20+278, sub_af20+2233, sub_af20+2253
000000000000b052         xor        r12d, r12d
000000000000b055         xor        eax, eax
000000000000b057         mov        ebx, 0x3f
000000000000b05c         jmp        sub_a9d0+56
                        ; endp
000000000000b061         align      8

                     loc_b068:
000000000000b068         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_aaa0+10
000000000000b06d         jne        loc_b890

000000000000b073         xor        r12d, r12d
000000000000b076         xor        eax, eax
000000000000b078         mov        ebx, 0x3f
000000000000b07d         jmp        sub_a9d0+105
                        ; endp
000000000000b082         align      8

                     loc_b088:
000000000000b088         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_acc0+30
000000000000b090         cmp        r11, 0xffffffffffffffff
000000000000b094         mov        qword [rsp+0xe8+var_48], 0x0
000000000000b0a0         mov        qword [rsp+0xe8+var_C0], rax
000000000000b0a5         jne        loc_b0d4

000000000000b0a7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000b0ac         mov        byte [rsp+0xe8+var_A8], r8b
000000000000b0b1         mov        byte [rsp+0xe8+var_B0], r10b
000000000000b0b6         mov        qword [rsp+0xe8+var_B8], r9
000000000000b0bb         call       j_strlen                                    ; strlen
000000000000b0c0         movzx      r8d, byte [rsp+0xe8+var_A8]
000000000000b0c6         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000b0cc         mov        r11, rax
000000000000b0cf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_b0d4:
000000000000b0d4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_af20+389
000000000000b0dc         xor        ecx, ecx
000000000000b0de         mov        byte [rsp+0xe8+var_6A], bl
000000000000b0e2         mov        byte [rsp+0xe8+var_6B], r8b
000000000000b0e7         mov        rbx, rcx
000000000000b0ea         mov        qword [rsp+0xe8+var_60], r9
000000000000b0f2         mov        qword [rsp+0xe8+var_B0], rax
000000000000b0f7         mov        byte [rsp+0xe8+var_69], r10b
000000000000b0fc         mov        qword [rsp+0xe8+var_68], r15
000000000000b104         mov        qword [rsp+0xe8+var_A8], r14
000000000000b109         mov        qword [rsp+0xe8+var_78], r13
000000000000b10e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_b113:
000000000000b113         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_af20+623
000000000000b118         lea        r14, qword [rbp+rbx]
000000000000b11d         mov        rdx, qword [rsp+0xe8+var_B8]
000000000000b122         mov        rcx, qword [rsp+0xe8+var_C0]
000000000000b127         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000b12c         lea        r13, qword [rax+r14]
000000000000b130         sub        rdx, r14
000000000000b133         mov        rsi, r13
000000000000b136         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000b13b         test       rax, rax
000000000000b13e         mov        r15, rax
000000000000b141         je         loc_b191

000000000000b143         cmp        rax, 0xffffffffffffffff
000000000000b147         je         loc_b765

000000000000b14d         cmp        rax, 0xfffffffffffffffe
000000000000b151         je         loc_b6f1

000000000000b157         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000b15c         sete       al
000000000000b15f         and        al, byte [rsp+0xe8+var_D9]
000000000000b163         jne        loc_b300

                     loc_b169:
000000000000b169         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_af20+996, sub_af20+1031
000000000000b170         call       j_iswprint                                  ; iswprint
000000000000b175         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
000000000000b17a         test       eax, eax
000000000000b17c         mov        eax, 0x0
000000000000b181         cmove      r12d, eax
000000000000b185         add        rbx, r15
000000000000b188         call       j_mbsinit                                   ; mbsinit
000000000000b18d         test       eax, eax
000000000000b18f         je         loc_b113

                     loc_b191:
000000000000b191         mov        edx, r12d                                   ; CODE XREF=sub_af20+545
000000000000b194         mov        rdi, rbx
000000000000b197         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000b19d         xor        edx, 0x1
000000000000b1a0         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000b1a5         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000b1ab         and        dl, byte [rsp+0xe8+var_DB]
000000000000b1af         mov        r15, qword [rsp+0xe8+var_68]
000000000000b1b7         mov        r14, qword [rsp+0xe8+var_A8]
000000000000b1bc         mov        r13, qword [rsp+0xe8+var_78]
000000000000b1c1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_b1c6:
000000000000b1c6         cmp        rdi, 0x1                                    ; CODE XREF=sub_af20+2112, sub_af20+2168
000000000000b1ca         jbe        loc_b7cb

                     loc_b1d0:
000000000000b1d0         mov        rcx, rdi                                    ; CODE XREF=sub_af20+1961
000000000000b1d3         xor        esi, esi
000000000000b1d5         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000b1db         add        rcx, rbp
000000000000b1de         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000b1e3         jmp        loc_b29e
000000000000b1e8         align      16

                     loc_b1f0:
000000000000b1f0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_af20+896
000000000000b1f5         sete       al
000000000000b1f8         test       r9b, r9b
000000000000b1fb         jne        loc_b6b0

000000000000b201         mov        esi, r8d
000000000000b204         xor        esi, 0x1
000000000000b207         and        al, sil
000000000000b20a         je         loc_b23b

000000000000b20c         cmp        r13, r15
000000000000b20f         jbe        loc_b216

000000000000b211         mov        byte [r14+r15], 0x27

                     loc_b216:
000000000000b216         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_af20+751
000000000000b21a         cmp        r13, rsi
000000000000b21d         jbe        loc_b225

000000000000b21f         mov        byte [r14+r15+1], 0x24

                     loc_b225:
000000000000b225         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_af20+765
000000000000b229         cmp        r13, rsi
000000000000b22c         jbe        loc_b234

000000000000b22e         mov        byte [r14+r15+2], 0x27

                     loc_b234:
000000000000b234         add        r15, 0x3                                    ; CODE XREF=sub_af20+780
000000000000b238         mov        r8d, eax

                     loc_b23b:
000000000000b23b         cmp        r13, r15                                    ; CODE XREF=sub_af20+746
000000000000b23e         jbe        loc_b245

000000000000b240         mov        byte [r14+r15], 0x5c

                     loc_b245:
000000000000b245         lea        rax, qword [r15+1]                          ; CODE XREF=sub_af20+798
000000000000b249         cmp        r13, rax
000000000000b24c         jbe        loc_b25b

000000000000b24e         mov        eax, ebx
000000000000b250         shr        al, 0x6
000000000000b253         add        eax, 0x30
000000000000b256         mov        byte [r14+r15+1], al

                     loc_b25b:
000000000000b25b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_af20+812
000000000000b25f         cmp        r13, rax
000000000000b262         jbe        loc_b274

000000000000b264         mov        eax, ebx
000000000000b266         shr        al, 0x3
000000000000b269         and        eax, 0x7
000000000000b26c         add        eax, 0x30
000000000000b26f         mov        byte [r14+r15+2], al

                     loc_b274:
000000000000b274         and        ebx, 0x7                                    ; CODE XREF=sub_af20+834
000000000000b277         add        rbp, 0x1
000000000000b27b         add        r15, 0x3
000000000000b27f         add        ebx, 0x30
000000000000b282         cmp        rbp, rcx
000000000000b285         jae        loc_aa70

000000000000b28b         mov        esi, edx

                     loc_b28d:
000000000000b28d         cmp        r13, r15                                    ; CODE XREF=sub_af20+985, sub_af20+1969
000000000000b290         jbe        loc_b296

000000000000b292         mov        byte [r14+r15], bl

                     loc_b296:
000000000000b296         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_af20+880
000000000000b29a         add        r15, 0x1

                     loc_b29e:
000000000000b29e         test       dl, dl                                      ; CODE XREF=sub_af20+707
000000000000b2a0         jne        loc_b1f0

000000000000b2a6         mov        eax, esi
000000000000b2a8         xor        eax, 0x1
000000000000b2ab         and        eax, r8d
000000000000b2ae         test       r10b, r10b
000000000000b2b1         je         loc_b2c1

000000000000b2b3         cmp        r13, r15
000000000000b2b6         jbe        loc_b2bd

000000000000b2b8         mov        byte [r14+r15], 0x5c

                     loc_b2bd:
000000000000b2bd         add        r15, 0x1                                    ; CODE XREF=sub_af20+918

                     loc_b2c1:
000000000000b2c1         add        rbp, 0x1                                    ; CODE XREF=sub_af20+913
000000000000b2c5         cmp        rbp, rcx
000000000000b2c8         jae        loc_aa4c

000000000000b2ce         test       al, al
000000000000b2d0         je         loc_b6ce

000000000000b2d6         cmp        r13, r15
000000000000b2d9         jbe        loc_b2e0

000000000000b2db         mov        byte [r14+r15], 0x27

                     loc_b2e0:
000000000000b2e0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_af20+953
000000000000b2e4         cmp        r13, rax
000000000000b2e7         jbe        loc_b2ef

000000000000b2e9         mov        byte [r14+r15+1], 0x27

                     loc_b2ef:
000000000000b2ef         add        r15, 0x2                                    ; CODE XREF=sub_af20+967
000000000000b2f3         xor        r10d, r10d
000000000000b2f6         xor        r8d, r8d
000000000000b2f9         jmp        loc_b28d
000000000000b2fb         align      256

                     loc_b300:
000000000000b300         cmp        r15, 0x1                                    ; CODE XREF=sub_af20+579
000000000000b304         je         loc_b169

000000000000b30a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000b30f         lea        rcx, qword [rdi+r15]
000000000000b313         lea        rdx, qword [rdi+r14+1]
000000000000b318         lea        r8, qword [rcx+r14]
000000000000b31c         jmp        loc_b32d
000000000000b31e         align      32

                     loc_b320:
000000000000b320         add        rdx, 0x1                                    ; CODE XREF=sub_af20+1046, sub_af20+1072
000000000000b324         cmp        r8, rdx
000000000000b327         je         loc_b169

                     loc_b32d:
000000000000b32d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_af20+1020
000000000000b330         sub        ecx, 0x5b
000000000000b333         cmp        cl, 0x21
000000000000b336         ja         loc_b320

000000000000b338         mov        esi, 0x1
000000000000b33d         shl        rsi, cl
000000000000b340         mov        rcx, rsi
000000000000b343         movabs     rsi, 0x20000002b
000000000000b34d         test       rcx, rsi
000000000000b350         je         loc_b320

000000000000b352         mov        r14, qword [rsp+0xe8+var_A8]
000000000000b357         mov        r13, qword [rsp+0xe8+var_78]
000000000000b35c         mov        rbp, qword [rsp+0xe8+var_B8]
000000000000b361         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_b369:
000000000000b369         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_af20+1227, sub_af20+1948, sub_af20+2585, sub_af20+2734
000000000000b36e         je         loc_b380

000000000000b370         test       al, al
000000000000b372         mov        eax, 0x4
000000000000b377         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000b37c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_b380:
000000000000b380         sub        rsp, 0x8                                    ; CODE XREF=sub_af20+1102
000000000000b384         mov        rcx, rbp
000000000000b387         mov        rsi, r13
000000000000b38a         push       qword [rsp+0xf0+var_88]
000000000000b38e         push       qword [rsp+0xf8+var_80]
000000000000b392         mov        rdi, r14
000000000000b395         push       0x0
000000000000b397         mov        r9d, dword [rsp+0x108+var_70]
000000000000b39f         mov        r8d, dword [rsp+0x108+var_E0]
000000000000b3a4         mov        rdx, qword [rsp+0x108+var_D8]
000000000000b3a9         and        r9d, 0xfffffffd
000000000000b3ad         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000b3b2         add        rsp, 0x20
000000000000b3b6         mov        r15, rax

                     loc_b3b9:
000000000000b3b9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_af20+2549, sub_af20+2560, sub_af20+2711
000000000000b3c1         xor        rbx, qword [fs:0x28]
000000000000b3ca         mov        rax, r15
000000000000b3cd         jne        loc_b9d3

000000000000b3d3         add        rsp, 0xb8
000000000000b3da         pop        rbx
000000000000b3db         pop        rbp
000000000000b3dc         pop        r12
000000000000b3de         pop        r13
000000000000b3e0         pop        r14
000000000000b3e2         pop        r15
000000000000b3e4         ret
                        ; endp
000000000000b3e5         align      8

                     loc_b3e8:
000000000000b3e8         mov        rbp, r11                                    ; CODE XREF=sub_aad0+194
000000000000b3eb         jmp        loc_b369

                     loc_b3f0:
000000000000b3f0         cmp        r13, r15                                    ; CODE XREF=sub_af20+206, sub_af20+220
000000000000b3f3         jbe        loc_b3fa

000000000000b3f5         mov        byte [r14+r15], 0x27

                     loc_b3fa:
000000000000b3fa         lea        rax, qword [r15+1]                          ; CODE XREF=sub_af20+1235
000000000000b3fe         cmp        r13, rax
000000000000b401         jbe        loc_b409

000000000000b403         mov        byte [r14+r15+1], 0x5c

                     loc_b409:
000000000000b409         lea        rax, qword [r15+2]                          ; CODE XREF=sub_af20+1249
000000000000b40d         cmp        r13, rax
000000000000b410         jbe        loc_ba02

000000000000b416         mov        rdx, r13
000000000000b419         mov        byte [r14+r15+2], 0x27
000000000000b41f         mov        r13, qword [rsp+arg_48]
000000000000b424         jmp        loc_b002

                     loc_b429:
000000000000b429         mov        eax, r12d                                   ; CODE XREF=sub_adc0+99
000000000000b42c         mov        ebx, 0x30
000000000000b431         xor        r12d, r12d
000000000000b434         jmp        sub_a9d0+105
                        ; endp

                     loc_b439:
000000000000b439         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_adc0+67
000000000000b43f         jmp        loc_ae09

                     loc_b444:
000000000000b444         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
000000000000b446         jne        loc_a873

000000000000b44c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_b451:
000000000000b451         test       r13, r13                                    ; CODE XREF=sub_af20+2749
000000000000b454         jne        loc_b9ea

000000000000b45a         lea        rax, qword [aItercurptr0+21]                ; 0x214f4
000000000000b461         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b46a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b46f         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b474         xor        r12d, r12d
000000000000b477         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000b47c         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000b485         mov        qword [rsp+0xe8+var_A0], rax
000000000000b48a         mov        r15d, 0x1
000000000000b490         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000b498         jmp        loc_a8b3
000000000000b49d         align      32

                     loc_b4a0:
000000000000b4a0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
000000000000b4a2         jne        loc_b89d

000000000000b4a8         test       r13, r13
000000000000b4ab         je         loc_b6d6

000000000000b4b1         mov        byte [r14], 0x22
000000000000b4b5         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b4ba         xor        r12d, r12d
000000000000b4bd         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b4c2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_b4cb:
000000000000b4cb         lea        rax, qword [aLibs+27]                       ; 0x21acb, CODE XREF=sub_af20+1996
000000000000b4d2         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000b4d7         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000b4dc         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000b4e5         mov        r15d, 0x1
000000000000b4eb         mov        qword [rsp+0xe8+var_A0], rax
000000000000b4f0         jmp        loc_a8b3

                     loc_b4f5:
000000000000b4f5         lea        rax, qword [aLibs+27]                       ; case 6, 0x21acb, CODE XREF=quotearg_buffer_restyled+145
000000000000b4fc         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b501         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b506         xor        r12d, r12d
000000000000b509         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b512         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000b517         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000b51c         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000b525         xor        r15d, r15d
000000000000b528         mov        qword [rsp+0xe8+var_A0], rax
000000000000b52d         mov        dword [rsp+0xe8+var_E0], 0x5
000000000000b535         jmp        loc_a8b3

                     loc_b53a:
000000000000b53a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000b53f         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b544         xor        r12d, r12d
000000000000b547         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b550         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000b555         xor        r15d, r15d
000000000000b558         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000b55d         mov        qword [rsp+0xe8+var_D0], 0x0
000000000000b566         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000b56f         jmp        loc_a8b3

                     loc_b574:
000000000000b574         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
000000000000b579         je         loc_b5d1

000000000000b57b         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x21acd
000000000000b582         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b584         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000b589         call       j_dcgettext                                 ; dcgettext
000000000000b58e         mov        rcx, rax
000000000000b591         mov        qword [rsp+0xe8+var_80], rax
000000000000b596         lea        rax, qword [aLibs+29]                       ; 0x21acd
000000000000b59d         cmp        rcx, rax
000000000000b5a0         je         loc_b93e

                     loc_b5a6:
000000000000b5a6         lea        rsi, qword [aItercurptr0+21]                ; argument "msgid" for method j_dcgettext, 0x214f4, CODE XREF=sub_af20+2607
000000000000b5ad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b5af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000b5b4         call       j_dcgettext                                 ; dcgettext
000000000000b5b9         mov        rcx, rax
000000000000b5bc         mov        qword [rsp+0xe8+var_88], rax
000000000000b5c1         lea        rax, qword [aItercurptr0+21]                ; 0x214f4
000000000000b5c8         cmp        rcx, rax
000000000000b5cb         je         loc_b954

                     loc_b5d1:
000000000000b5d1         xor        r15d, r15d                                  ; CODE XREF=sub_af20+1625, sub_af20+2629
000000000000b5d4         test       ebx, ebx
000000000000b5d6         je         loc_b79d

                     loc_b5dc:
000000000000b5dc         test       ebx, ebx                                    ; CODE XREF=sub_af20+2183, sub_af20+2214
000000000000b5de         mov        rbx, qword [rsp+0xe8+var_88]
000000000000b5e3         setne      byte [rsp+0xe8+var_D9]
000000000000b5e8         xor        r12d, r12d
000000000000b5eb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000b5ee         call       j_strlen                                    ; strlen
000000000000b5f3         mov        qword [rsp+0xe8+var_A0], rbx
000000000000b5f8         mov        qword [rsp+0xe8+var_D0], rax
000000000000b5fd         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b602         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b607         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b610         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000b615         jmp        loc_a8b3

                     loc_b61a:
000000000000b61a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000b61f         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b624         xor        r12d, r12d
000000000000b627         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b630         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000b635         xor        r15d, r15d
000000000000b638         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000b63d         mov        qword [rsp+0xe8+var_D0], 0x0
000000000000b646         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000b64f         jmp        loc_a8b3

                     loc_b654:
000000000000b654         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
000000000000b659         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b65e         xor        r12d, r12d
000000000000b661         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b66a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000b66f         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000b674         jmp        loc_a893

                     loc_b679:
000000000000b679         cmp        r13, r15                                    ; CODE XREF=sub_adc0+133
000000000000b67c         jbe        loc_b683

000000000000b67e         mov        byte [r14+r15], 0x30

                     loc_b683:
000000000000b683         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_af20+1884
000000000000b687         cmp        r13, rax
000000000000b68a         jbe        loc_b692

000000000000b68c         mov        byte [r14+rcx+2], 0x30

                     loc_b692:
000000000000b692         mov        eax, r12d                                   ; CODE XREF=sub_af20+1898
000000000000b695         lea        r15, qword [rcx+3]
000000000000b699         xor        r12d, r12d
000000000000b69c         mov        ebx, 0x30
000000000000b6a1         jmp        sub_a9d0+56
                        ; endp
000000000000b6a6         align      16

                     loc_b6b0:
000000000000b6b0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_af20+731
000000000000b6b5         mov        rbp, r11
000000000000b6b8         mov        byte [rsp+0xe8+var_DB], bl
000000000000b6bc         jmp        loc_b369

                     loc_b6c1:
000000000000b6c1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_acc0+105
000000000000b6c6         xor        r12d, r12d
000000000000b6c9         jmp        loc_b1d0

                     loc_b6ce:
000000000000b6ce         xor        r10d, r10d                                  ; CODE XREF=sub_af20+944
000000000000b6d1         jmp        loc_b28d

                     loc_b6d6:
000000000000b6d6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_af20+1419
000000000000b6df         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b6e4         xor        r12d, r12d
000000000000b6e7         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b6ec         jmp        loc_b4cb

                     loc_b6f1:
000000000000b6f1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_af20+561
000000000000b6f6         mov        rsi, r14
000000000000b6f9         mov        rcx, r13
000000000000b6fc         mov        rax, rbx
000000000000b6ff         mov        rdi, rbx
000000000000b702         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000b708         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000b70d         mov        r9, qword [rsp+0xe8+var_60]
000000000000b715         cmp        rsi, r11
000000000000b718         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000b71e         mov        r15, qword [rsp+0xe8+var_68]
000000000000b726         mov        r14, qword [rsp+0xe8+var_A8]
000000000000b72b         mov        r13, qword [rsp+0xe8+var_78]
000000000000b730         jae        loc_b758

000000000000b732         cmp        byte [rcx], 0x0
000000000000b735         jne        loc_b747

000000000000b737         jmp        loc_b758
000000000000b739         align      64

                     loc_b740:
000000000000b740         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_af20+2099
000000000000b745         je         loc_b755

                     loc_b747:
000000000000b747         add        rax, 0x1                                    ; CODE XREF=sub_af20+2069
000000000000b74b         lea        rdx, qword [rbp+rax]
000000000000b750         cmp        r11, rdx
000000000000b753         ja         loc_b740

                     loc_b755:
000000000000b755         mov        rdi, rax                                    ; CODE XREF=sub_af20+2085

                     loc_b758:
000000000000b758         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_af20+2064, sub_af20+2071
000000000000b75d         xor        r12d, r12d
000000000000b760         jmp        loc_b1c6

                     loc_b765:
000000000000b765         mov        rdi, rbx                                    ; CODE XREF=sub_af20+551
000000000000b768         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000b76e         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000b773         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000b779         mov        r15, qword [rsp+0xe8+var_68]
000000000000b781         xor        r12d, r12d
000000000000b784         mov        r14, qword [rsp+0xe8+var_A8]
000000000000b789         mov        r13, qword [rsp+0xe8+var_78]
000000000000b78e         mov        r11, qword [rsp+0xe8+var_B8]
000000000000b793         movzx      edx, byte [rsp+0xe8+var_DB]
000000000000b798         jmp        loc_b1c6

                     loc_b79d:
000000000000b79d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_af20+1718
000000000000b7a2         movzx      eax, byte [rdx]
000000000000b7a5         test       al, al
000000000000b7a7         je         loc_b5dc

000000000000b7ad         nop        dword [rax]

                     loc_b7b0:
000000000000b7b0         cmp        r13, r15                                    ; CODE XREF=sub_af20+2212
000000000000b7b3         jbe        loc_b7b9

000000000000b7b5         mov        byte [r14+r15], al

                     loc_b7b9:
000000000000b7b9         add        r15, 0x1                                    ; CODE XREF=sub_af20+2195
000000000000b7bd         movzx      eax, byte [rdx+r15]
000000000000b7c2         test       al, al
000000000000b7c4         jne        loc_b7b0

000000000000b7c6         jmp        loc_b5dc

                     loc_b7cb:
000000000000b7cb         mov        eax, edx                                    ; CODE XREF=sub_af20+682
000000000000b7cd         jmp        loc_ad27

                     loc_b7d2:
000000000000b7d2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_af20+290
000000000000b7d6         cmp        bl, 0x3e
000000000000b7d9         ja         loc_b050

000000000000b7df         movabs     rax, 0x7000a38200000000
000000000000b7e9         bt         rax, rbx
000000000000b7ed         jae        loc_b050

000000000000b7f3         cmp        byte [rsp+arg_7], 0x0
000000000000b7f8         jne        loc_b9e2

000000000000b7fe         cmp        r13, r15
000000000000b801         jbe        loc_b808

000000000000b803         mov        byte [r14+r15], 0x3f

                     loc_b808:
000000000000b808         lea        rax, qword [r15+1]                          ; CODE XREF=sub_af20+2273
000000000000b80c         cmp        r13, rax
000000000000b80f         jbe        loc_b817

000000000000b811         mov        byte [r14+r15+1], 0x22

                     loc_b817:
000000000000b817         lea        rax, qword [r15+2]                          ; CODE XREF=sub_af20+2287
000000000000b81b         cmp        r13, rax
000000000000b81e         jbe        loc_b826

000000000000b820         mov        byte [r14+r15+2], 0x22

                     loc_b826:
000000000000b826         lea        rax, qword [r15+3]                          ; CODE XREF=sub_af20+2302
000000000000b82a         cmp        r13, rax
000000000000b82d         jbe        loc_b835

000000000000b82f         mov        byte [r14+r15+3], 0x3f

                     loc_b835:
000000000000b835         add        r15, 0x4                                    ; CODE XREF=sub_af20+2317
000000000000b839         xor        edx, edx
000000000000b83b         xor        r12d, r12d
000000000000b83e         xor        eax, eax
000000000000b840         mov        rbp, rcx
000000000000b843         jmp        sub_a9d0+56
                        ; endp

                     loc_b848:
000000000000b848         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000b84a         je         loc_b9d8

000000000000b850         lea        rax, qword [aItercurptr0+21]                ; 0x214f4
000000000000b857         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b85c         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b861         xor        r12d, r12d
000000000000b864         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b86d         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000b872         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000b877         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000b880         xor        r15d, r15d
000000000000b883         mov        qword [rsp+0xe8+var_A0], rax
000000000000b888         jmp        loc_a8b3
000000000000b88d         align      16

                     loc_b890:
000000000000b890         mov        rbp, r11                                    ; CODE XREF=sub_af20+333
000000000000b893         movzx      eax, byte [rsp+arg_7]
000000000000b898         jmp        sub_af20+1097
                        ; endp

                     loc_b89d:
000000000000b89d         lea        rax, qword [aLibs+27]                       ; 0x21acb, CODE XREF=sub_af20+1410
000000000000b8a4         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000b8a9         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000b8ae         xor        r12d, r12d
000000000000b8b1         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b8ba         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000b8bf         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000b8c4         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000b8cd         xor        r15d, r15d
000000000000b8d0         mov        qword [rsp+0xe8+var_A0], rax
000000000000b8d5         jmp        loc_a8b3

                     loc_b8da:
000000000000b8da         mov        eax, edx                                    ; CODE XREF=sub_af20+87

                     loc_b8dc:
000000000000b8dc         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_af20+76, sub_af20+2721
000000000000b8e1         test       rbx, rbx
000000000000b8e4         je         loc_b912

000000000000b8e6         test       al, al
000000000000b8e8         je         loc_b912

000000000000b8ea         movzx      ecx, byte [rbx]
000000000000b8ed         mov        rax, rbx
000000000000b8f0         test       cl, cl
000000000000b8f2         je         loc_b912

000000000000b8f4         mov        rdx, r15
000000000000b8f7         sub        rax, r15

                     loc_b8fa:
000000000000b8fa         cmp        r13, rdx                                    ; CODE XREF=sub_af20+2541
000000000000b8fd         jbe        loc_b903

000000000000b8ff         mov        byte [r14+rdx], cl

                     loc_b903:
000000000000b903         add        rdx, 0x1                                    ; CODE XREF=sub_af20+2525
000000000000b907         movzx      ecx, byte [rax+rdx]
000000000000b90b         test       cl, cl
000000000000b90d         jne        loc_b8fa

000000000000b90f         mov        r15, rdx

                     loc_b912:
000000000000b912         cmp        r13, r15                                    ; CODE XREF=sub_af20+2500, sub_af20+2504, sub_af20+2514
000000000000b915         jbe        loc_b3b9

000000000000b91b         mov        byte [r14+r15], 0x0
000000000000b920         jmp        loc_b3b9

                     loc_b925:
000000000000b925         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000b92a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000b92f         mov        rbp, r11
000000000000b932         sete       al
000000000000b935         mov        byte [rsp+0xe8+var_DB], bl
000000000000b939         jmp        loc_b369

                     loc_b93e:
000000000000b93e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_af20+1664
000000000000b942         mov        rdi, rcx
000000000000b945         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000b94a         mov        qword [rsp+0xe8+var_80], rax
000000000000b94f         jmp        loc_b5a6

                     loc_b954:
000000000000b954         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_af20+1707
000000000000b958         mov        rdi, rcx
000000000000b95b         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000b960         mov        qword [rsp+0xe8+var_88], rax
000000000000b965         jmp        loc_b5d1

                     loc_b96a:
000000000000b96a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_adc0+16
000000000000b96f         mov        rbp, r11
000000000000b972         mov        eax, edx
000000000000b974         mov        byte [rsp+arg_5], bl
000000000000b978         jmp        sub_af20+1097
                        ; endp

                     loc_b97d:
000000000000b97d         sub        rsp, 0x8                                    ; CODE XREF=sub_af20+98
000000000000b981         mov        r8d, 0x5
000000000000b987         mov        rcx, r11
000000000000b98a         push       qword [rsp+0xf0+var_88]
000000000000b98e         push       qword [rsp+0xf8+var_80]
000000000000b992         mov        rdi, r14
000000000000b995         push       qword [rsp+0x100+var_C8]
000000000000b999         mov        r9d, dword [rsp+0x108+var_70]
000000000000b9a1         mov        rdx, qword [rsp+0x108+var_D8]
000000000000b9a6         mov        rsi, qword [rsp+0x108+var_98]
000000000000b9ab         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000b9b0         add        rsp, 0x20
000000000000b9b4         mov        r15, rax
000000000000b9b7         jmp        loc_b3b9

                     loc_b9bc:
000000000000b9bc         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_af20+121
000000000000b9c1         jmp        loc_b8dc

                     loc_b9c6:
000000000000b9c6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_af20+63
000000000000b9ce         jmp        loc_b369

                     loc_b9d3:
000000000000b9d3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_af20+1197
                        ; endp

                     loc_b9d8:
000000000000b9d8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_af20+2346
000000000000b9dd         jmp        loc_b451

                     loc_b9e2:
000000000000b9e2         mov        rbp, r11                                    ; CODE XREF=sub_af20+2264
000000000000b9e5         jmp        sub_af20+1120
                        ; endp

                     loc_b9ea:
000000000000b9ea         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_af20+1332
000000000000b9ef         xor        eax, eax
000000000000b9f1         xor        r12d, r12d
000000000000b9f4         mov        qword [rsp+0xe8+var_98], 0x0
000000000000b9fd         jmp        loc_afa4

                     loc_ba02:
000000000000ba02         mov        rdx, r13                                    ; CODE XREF=sub_af20+1264
000000000000ba05         mov        r13, qword [rsp+arg_48]
000000000000ba0a         jmp        loc_b002

                     loc_ba0f:
000000000000ba0f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
000000000000ba14         align      32                                          ; End of unwind block (FDE at 0x24b70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
000000000000ba20         push       r15                                         ; Begin of unwind block (FDE at 0x24be8), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
000000000000ba22         push       r14
000000000000ba24         movsxd     r15, edi
000000000000ba27         push       r13
000000000000ba29         push       r12
000000000000ba2b         mov        r14, rdx
000000000000ba2e         push       rbp
000000000000ba2f         push       rbx
000000000000ba30         mov        rbp, rcx
000000000000ba33         sub        rsp, 0x28
000000000000ba37         mov        qword [rsp+0x58+var_50], rsi
000000000000ba3c         call       j___errno_location                          ; __errno_location
000000000000ba41         mov        r13, rax
000000000000ba44         mov        eax, dword [rax]
000000000000ba46         test       r15d, r15d
000000000000ba49         mov        rbx, qword [slotvec]                        ; slotvec
000000000000ba50         mov        dword [rsp+0x58+var_40], eax
000000000000ba54         js         loc_bbc1

000000000000ba5a         cmp        dword [nslots], r15d                        ; nslots
000000000000ba61         jg         loc_bac5

000000000000ba63         cmp        r15d, 0x7fffffff
000000000000ba6a         je         loc_bbc6

000000000000ba70         lea        r12d, dword [r15+1]
000000000000ba74         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000ba7b         movsxd     rsi, r12d
000000000000ba7e         shl        rsi, 0x4
000000000000ba82         cmp        rbx, rax
000000000000ba85         je         loc_bba0

000000000000ba8b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000ba8e         call       xrealloc                                    ; xrealloc
000000000000ba93         mov        rbx, rax
000000000000ba96         mov        qword [slotvec], rax                        ; slotvec

                     loc_ba9d:
000000000000ba9d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
000000000000baa4         mov        edx, r12d
000000000000baa7         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000baa9         sub        edx, edi
000000000000baab         shl        rdi, 0x4
000000000000baaf         movsxd     rdx, edx
000000000000bab2         add        rdi, rbx                                    ; argument "__s" for method j_memset
000000000000bab5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
000000000000bab9         call       j_memset                                    ; memset
000000000000babe         mov        dword [nslots], r12d                        ; nslots

                     loc_bac5:
000000000000bac5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
000000000000bac8         shl        r15, 0x4
000000000000bacc         sub        rsp, 0x8
000000000000bad0         add        rbx, r15
000000000000bad3         lea        r15, qword [rbp+8]
000000000000bad7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000badb         mov        r11, qword [rbx]
000000000000bade         mov        r12, qword [rbx+8]
000000000000bae2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
000000000000bae5         or         eax, 0x1
000000000000bae8         mov        dword [rsp+0x60+var_3C], eax
000000000000baec         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000baef         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
000000000000baf2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000baf5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
000000000000baf7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000bafa         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000baff         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
000000000000bb02         mov        qword [rsp+0x78+var_48], r11
000000000000bb07         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000bb0c         add        rsp, 0x20
000000000000bb10         mov        r11, qword [rsp+0x58+var_48]
000000000000bb15         cmp        r11, rax
000000000000bb18         ja         loc_bb81

000000000000bb1a         lea        rsi, qword [rax+1]
000000000000bb1e         lea        rax, qword [slot0]                          ; slot0
000000000000bb25         cmp        r12, rax
000000000000bb28         mov        qword [rbx], rsi
000000000000bb2b         je         loc_bb3f

000000000000bb2d         mov        rdi, r12
000000000000bb30         mov        qword [rsp+0x58+var_48], rsi
000000000000bb35         call       sub_2a10                                    ; sub_2a10
000000000000bb3a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_bb3f:
000000000000bb3f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
000000000000bb42         mov        qword [rsp+0x58+var_48], rsi
000000000000bb47         call       xmalloc                                     ; xmalloc
000000000000bb4c         sub        rsp, 0x8
000000000000bb50         mov        qword [rbx+8], rax
000000000000bb54         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000bb58         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000bb5b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000bb5e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
000000000000bb61         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
000000000000bb63         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
000000000000bb68         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000bb6b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000bb70         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
000000000000bb75         mov        r12, rax
000000000000bb78         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000bb7d         add        rsp, 0x20

                     loc_bb81:
000000000000bb81         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
000000000000bb85         mov        dword [r13], eax
000000000000bb89         add        rsp, 0x28
000000000000bb8d         mov        rax, r12
000000000000bb90         pop        rbx
000000000000bb91         pop        rbp
000000000000bb92         pop        r12
000000000000bb94         pop        r13
000000000000bb96         pop        r14
000000000000bb98         pop        r15
000000000000bb9a         ret
                        ; endp
000000000000bb9b         align      32

                     loc_bba0:
000000000000bba0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
000000000000bba2         call       xrealloc                                    ; xrealloc
000000000000bba7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000bbaf         mov        rbx, rax
000000000000bbb2         mov        qword [slotvec], rax                        ; slotvec
000000000000bbb9         movups     xmmword [rax], xmm0
000000000000bbbc         jmp        loc_ba9d

                     loc_bbc1:
000000000000bbc1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_bbc6:
000000000000bbc6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_bbcb:
000000000000bbcb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x24be8)
                     clone_quoting_options:
000000000000bbd0         push       r12                                         ; Begin of unwind block (FDE at 0x24c54)
000000000000bbd2         push       rbp
000000000000bbd3         push       rbx
000000000000bbd4         mov        rbx, rdi
000000000000bbd7         call       j___errno_location                          ; __errno_location
000000000000bbdc         mov        r12d, dword [rax]
000000000000bbdf         mov        rbp, rax
000000000000bbe2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000bbe9         test       rbx, rbx
000000000000bbec         mov        esi, 0x38                                   ; argument #2 for method xmemdup
000000000000bbf1         cmove      rbx, rax
000000000000bbf5         mov        rdi, rbx                                    ; argument #1 for method xmemdup
000000000000bbf8         call       xmemdup                                     ; xmemdup
000000000000bbfd         mov        dword [rbp], r12d
000000000000bc01         pop        rbx
000000000000bc02         pop        rbp
000000000000bc03         pop        r12
000000000000bc05         ret
                        ; endp
000000000000bc06         align      16                                          ; End of unwind block (FDE at 0x24c54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
000000000000bc10         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24c80), default_quoting_options
000000000000bc17         test       rdi, rdi
000000000000bc1a         cmove      rdi, rax
000000000000bc1e         mov        eax, dword [rdi]
000000000000bc20         ret
                        ; endp
000000000000bc21         align      16                                          ; End of unwind block (FDE at 0x24c80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
000000000000bc30         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24c94), default_quoting_options
000000000000bc37         test       rdi, rdi
000000000000bc3a         cmove      rdi, rax
000000000000bc3e         mov        dword [rdi], esi
000000000000bc40         ret
                        ; endp
000000000000bc41         align      16                                          ; End of unwind block (FDE at 0x24c94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
000000000000bc50         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24ca8), default_quoting_options
000000000000bc57         test       rdi, rdi
000000000000bc5a         mov        ecx, esi
000000000000bc5c         cmove      rdi, rax
000000000000bc60         mov        eax, esi
000000000000bc62         and        ecx, 0x1f
000000000000bc65         shr        al, 0x5
000000000000bc68         movzx      eax, al
000000000000bc6b         lea        rdi, qword [rdi+rax*4+8]
000000000000bc70         mov        esi, dword [rdi]
000000000000bc72         mov        eax, esi
000000000000bc74         shr        eax, cl
000000000000bc76         xor        edx, eax
000000000000bc78         and        eax, 0x1
000000000000bc7b         and        edx, 0x1
000000000000bc7e         shl        edx, cl
000000000000bc80         xor        edx, esi
000000000000bc82         mov        dword [rdi], edx
000000000000bc84         ret
                        ; endp
000000000000bc85         align      16                                          ; End of unwind block (FDE at 0x24ca8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
000000000000bc90         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24cbc), default_quoting_options
000000000000bc97         test       rdi, rdi
000000000000bc9a         cmove      rdi, rax
000000000000bc9e         mov        eax, dword [rdi+4]
000000000000bca1         mov        dword [rdi+4], esi
000000000000bca4         ret
                        ; endp
000000000000bca5         align      16                                          ; End of unwind block (FDE at 0x24cbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
000000000000bcb0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24cd0), default_quoting_options
000000000000bcb7         test       rdi, rdi
000000000000bcba         cmove      rdi, rax
000000000000bcbe         test       rsi, rsi
000000000000bcc1         mov        dword [rdi], 0xa
000000000000bcc7         je         loc_bcd7

000000000000bcc9         test       rdx, rdx
000000000000bccc         je         loc_bcd7

000000000000bcce         mov        qword [rdi+0x28], rsi
000000000000bcd2         mov        qword [rdi+0x30], rdx
000000000000bcd6         ret
                        ; endp

                     loc_bcd7:
000000000000bcd7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000bcdb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
000000000000bce0         push       r15                                         ; End of unwind block (FDE at 0x24cd0), Begin of unwind block (FDE at 0x24ce4)
000000000000bce2         push       r14
000000000000bce4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000bceb         push       r13
000000000000bced         push       r12
000000000000bcef         mov        r13, rdi
000000000000bcf2         push       rbp
000000000000bcf3         push       rbx
000000000000bcf4         mov        rbx, r8
000000000000bcf7         mov        r14, rsi
000000000000bcfa         mov        r15, rdx
000000000000bcfd         sub        rsp, 0x18
000000000000bd01         test       r8, r8
000000000000bd04         cmove      rbx, rax
000000000000bd08         mov        qword [rsp+0x48+var_40], rcx
000000000000bd0d         call       j___errno_location                          ; __errno_location
000000000000bd12         mov        r12d, dword [rax]
000000000000bd15         mov        rbp, rax
000000000000bd18         lea        rax, qword [rbx+8]
000000000000bd1c         sub        rsp, 0x8
000000000000bd20         mov        r9d, dword [rbx+4]
000000000000bd24         push       qword [rbx+0x30]
000000000000bd27         mov        r8d, dword [rbx]
000000000000bd2a         push       qword [rbx+0x28]
000000000000bd2d         mov        rdx, r15
000000000000bd30         push       rax
000000000000bd31         mov        rcx, qword [rsp+0x68+var_40]
000000000000bd36         mov        rsi, r14
000000000000bd39         mov        rdi, r13
000000000000bd3c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000bd41         mov        dword [rbp], r12d
000000000000bd45         add        rsp, 0x38
000000000000bd49         pop        rbx
000000000000bd4a         pop        rbp
000000000000bd4b         pop        r12
000000000000bd4d         pop        r13
000000000000bd4f         pop        r14
000000000000bd51         pop        r15
000000000000bd53         ret
                        ; endp
000000000000bd54         align      32                                          ; End of unwind block (FDE at 0x24ce4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
000000000000bd60         push       r15                                         ; Begin of unwind block (FDE at 0x24d38), CODE XREF=quotearg_alloc+5
000000000000bd62         push       r14
000000000000bd64         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000bd6b         push       r13
000000000000bd6d         push       r12
000000000000bd6f         mov        r12, rdx
000000000000bd72         push       rbp
000000000000bd73         push       rbx
000000000000bd74         mov        rbx, rcx
000000000000bd77         mov        r14, rdi
000000000000bd7a         mov        r15, rsi
000000000000bd7d         sub        rsp, 0x38
000000000000bd81         test       rcx, rcx
000000000000bd84         cmove      rbx, rax
000000000000bd88         xor        ebp, ebp
000000000000bd8a         call       j___errno_location                          ; __errno_location
000000000000bd8f         test       r12, r12
000000000000bd92         mov        r13, rax
000000000000bd95         mov        eax, dword [rax]
000000000000bd97         sete       bpl
000000000000bd9b         or         ebp, dword [rbx+4]
000000000000bd9e         lea        r10, qword [rbx+8]
000000000000bda2         sub        rsp, 0x8
000000000000bda6         mov        r8d, dword [rbx]
000000000000bda9         mov        rcx, r15
000000000000bdac         mov        dword [rsp+0x70+var_5C], eax
000000000000bdb0         push       qword [rbx+0x30]
000000000000bdb3         mov        rdx, r14
000000000000bdb6         push       qword [rbx+0x28]
000000000000bdb9         push       r10
000000000000bdbb         xor        esi, esi
000000000000bdbd         mov        r9d, ebp
000000000000bdc0         xor        edi, edi
000000000000bdc2         mov        qword [rsp+0x88+var_48], r10
000000000000bdc7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000bdcc         lea        rsi, qword [rax+1]
000000000000bdd0         mov        qword [rsp+0x88+var_40], rax
000000000000bdd5         add        rsp, 0x20
000000000000bdd9         mov        rdi, rsi
000000000000bddc         mov        qword [rsp+0x68+var_50], rsi
000000000000bde1         call       xmalloc                                     ; xmalloc
000000000000bde6         mov        qword [rsp+0x68+var_58], rax
000000000000bdeb         sub        rsp, 0x8
000000000000bdef         push       qword [rbx+0x30]
000000000000bdf2         push       qword [rbx+0x28]
000000000000bdf5         mov        r10, qword [rsp+0x80+var_48]
000000000000bdfa         mov        r9d, ebp
000000000000bdfd         mov        r8d, dword [rbx]
000000000000be00         mov        rcx, r15
000000000000be03         mov        rdx, r14
000000000000be06         mov        rdi, rax
000000000000be09         push       r10
000000000000be0b         mov        rsi, qword [rsp+0x88+var_50]
000000000000be10         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000be15         mov        eax, dword [rsp+0x88+var_5C]
000000000000be19         add        rsp, 0x20
000000000000be1d         test       r12, r12
000000000000be20         mov        dword [r13], eax
000000000000be24         je         loc_be2f

000000000000be26         mov        r11, qword [rsp+0x68+var_40]
000000000000be2b         mov        qword [r12], r11

                     loc_be2f:
000000000000be2f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
000000000000be34         add        rsp, 0x38
000000000000be38         pop        rbx
000000000000be39         pop        rbp
000000000000be3a         pop        r12
000000000000be3c         pop        r13
000000000000be3e         pop        r14
000000000000be40         pop        r15
000000000000be42         ret
                        ; endp
000000000000be43         align      16                                          ; End of unwind block (FDE at 0x24d38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
000000000000be50         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x24da4)
000000000000be53         xor        edx, edx
000000000000be55         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000be5a         align      32                                          ; End of unwind block (FDE at 0x24da4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
000000000000be60         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x24db8), nslots
000000000000be66         push       r12
000000000000be68         mov        r12, qword [slotvec]                        ; slotvec
000000000000be6f         push       rbp
000000000000be70         push       rbx
000000000000be71         cmp        eax, 0x1
000000000000be74         jle        loc_bea1

000000000000be76         sub        eax, 0x2
000000000000be79         lea        rbx, qword [r12+0x18]
000000000000be7e         shl        rax, 0x4
000000000000be82         lea        rbp, qword [r12+rax+0x28]
000000000000be87         nop        word [rax+rax]

                     loc_be90:
000000000000be90         mov        rdi, qword [rbx]                            ; CODE XREF=quotearg_free+63
000000000000be93         add        rbx, 0x10
000000000000be97         call       sub_2a10                                    ; sub_2a10
000000000000be9c         cmp        rbx, rbp
000000000000be9f         jne        loc_be90

                     loc_bea1:
000000000000bea1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
000000000000bea6         lea        rbx, qword [slot0]                          ; slot0
000000000000bead         cmp        rdi, rbx
000000000000beb0         je         loc_bec9

000000000000beb2         call       sub_2a10                                    ; sub_2a10
000000000000beb7         mov        qword [slotvec0], 0x100                     ; slotvec0
000000000000bec2         mov        qword [slotvec0+8], rbx                     ; 0x228098

                     loc_bec9:
000000000000bec9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
000000000000bed0         cmp        r12, rbx
000000000000bed3         je         loc_bee4

000000000000bed5         mov        rdi, r12
000000000000bed8         call       sub_2a10                                    ; sub_2a10
000000000000bedd         mov        qword [slotvec], rbx                        ; slotvec

                     loc_bee4:
000000000000bee4         pop        rbx                                         ; CODE XREF=quotearg_free+115
000000000000bee5         mov        dword [nslots], 0x1                         ; nslots
000000000000beef         pop        rbp
000000000000bef0         pop        r12
000000000000bef2         ret
                        ; endp
000000000000bef3         align      256                                         ; End of unwind block (FDE at 0x24db8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
000000000000bf00         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24de4), default_quoting_options
000000000000bf07         mov        rdx, 0xffffffffffffffff
000000000000bf0e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000bf13         align      32                                          ; End of unwind block (FDE at 0x24de4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
000000000000bf20         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24df8), default_quoting_options
000000000000bf27         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000bf2c         align      16                                          ; End of unwind block (FDE at 0x24df8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
000000000000bf30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24e0c), default_quoting_options
000000000000bf37         mov        rsi, rdi
000000000000bf3a         mov        rdx, 0xffffffffffffffff
000000000000bf41         xor        edi, edi
000000000000bf43         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000bf48         align      16                                          ; End of unwind block (FDE at 0x24e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
000000000000bf50         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x24e20), default_quoting_options
000000000000bf57         mov        rdx, rsi
000000000000bf5a         mov        rsi, rdi
000000000000bf5d         xor        edi, edi
000000000000bf5f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000bf64         align      16                                          ; End of unwind block (FDE at 0x24e20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
000000000000bf70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x24e34), CODE XREF=argmatch_invalid+64
000000000000bf74         mov        rax, rdx
000000000000bf77         mov        rdx, qword [fs:0x28]
000000000000bf80         mov        qword [rsp+0x48+var_10], rdx
000000000000bf85         xor        edx, edx
000000000000bf87         cmp        esi, 0xa
000000000000bf8a         je         loc_bff4

000000000000bf8c         mov        dword [rsp+0x48+var_48], esi
000000000000bf8f         mov        rcx, rsp
000000000000bf92         mov        rdx, 0xffffffffffffffff
000000000000bf99         mov        rsi, rax
000000000000bf9c         mov        qword [rsp+0x48+var_44], 0x0
000000000000bfa5         mov        qword [rsp+0x48+var_3C], 0x0
000000000000bfae         mov        qword [rsp+0x48+var_34], 0x0
000000000000bfb7         mov        qword [rsp+0x48+var_2C], 0x0
000000000000bfc0         mov        qword [rsp+0x48+var_24], 0x0
000000000000bfc9         mov        qword [rsp+0x48+var_1C], 0x0
000000000000bfd2         mov        dword [rsp+0x48+var_14], 0x0
000000000000bfda         call       quotearg_n_options                          ; quotearg_n_options
000000000000bfdf         mov        rcx, qword [rsp+0x48+var_10]
000000000000bfe4         xor        rcx, qword [fs:0x28]
000000000000bfed         jne        loc_bff9

000000000000bfef         add        rsp, 0x48
000000000000bff3         ret
                        ; endp

                     loc_bff4:
000000000000bff4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_bff9:
000000000000bff9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000bffe         align      16384                                       ; End of unwind block (FDE at 0x24e34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
000000000000c000         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x24e50), CODE XREF=quotearg_style_mem+10
000000000000c004         mov        rax, rdx
000000000000c007         mov        rdx, rcx
000000000000c00a         mov        rcx, qword [fs:0x28]
000000000000c013         mov        qword [rsp+0x48+var_10], rcx
000000000000c018         xor        ecx, ecx
000000000000c01a         cmp        esi, 0xa
000000000000c01d         je         loc_c080

000000000000c01f         mov        dword [rsp+0x48+var_48], esi
000000000000c022         mov        rcx, rsp
000000000000c025         mov        rsi, rax
000000000000c028         mov        qword [rsp+0x48+var_44], 0x0
000000000000c031         mov        qword [rsp+0x48+var_3C], 0x0
000000000000c03a         mov        qword [rsp+0x48+var_34], 0x0
000000000000c043         mov        qword [rsp+0x48+var_2C], 0x0
000000000000c04c         mov        qword [rsp+0x48+var_24], 0x0
000000000000c055         mov        qword [rsp+0x48+var_1C], 0x0
000000000000c05e         mov        dword [rsp+0x48+var_14], 0x0
000000000000c066         call       quotearg_n_options                          ; quotearg_n_options
000000000000c06b         mov        rdx, qword [rsp+0x48+var_10]
000000000000c070         xor        rdx, qword [fs:0x28]
000000000000c079         jne        loc_c085

000000000000c07b         add        rsp, 0x48
000000000000c07f         ret
                        ; endp

                     loc_c080:
000000000000c080         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_c085:
000000000000c085         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
000000000000c08a         align      16                                          ; End of unwind block (FDE at 0x24e50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
000000000000c090         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x24e6c), CODE XREF=main+2512, main+3139, main+3732, main+3925, main+5178
000000000000c093         mov        esi, edi
000000000000c095         xor        edi, edi
000000000000c097         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
000000000000c09c         align      32                                          ; End of unwind block (FDE at 0x24e6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
000000000000c0a0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x24e80)
000000000000c0a3         mov        rdx, rsi
000000000000c0a6         mov        esi, edi
000000000000c0a8         xor        edi, edi
000000000000c0aa         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000c0af         align      16                                          ; End of unwind block (FDE at 0x24e80)

                     quotearg_char_mem:
000000000000c0b0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x24e94), CODE XREF=quotearg_char+11
000000000000c0b4         mov        ecx, edx
000000000000c0b6         mov        rax, qword [fs:0x28]
000000000000c0bf         mov        qword [rsp+0x48+var_10], rax
000000000000c0c4         xor        eax, eax
000000000000c0c6         mov        rax, qword [qword_2282f0]                   ; qword_2282f0
000000000000c0cd         mov        r8, rsp
000000000000c0d0         and        ecx, 0x1f
000000000000c0d3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000c0db         mov        qword [rsp+0x48+var_18], rax
000000000000c0e0         mov        eax, edx
000000000000c0e2         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000c0e6         shr        al, 0x5
000000000000c0e9         movzx      eax, al
000000000000c0ec         lea        r9, qword [r8+rax*4+8]
000000000000c0f1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2282d0
000000000000c0f9         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000c0fe         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2282e0
000000000000c106         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000c10b         mov        edx, dword [r9]
000000000000c10e         mov        eax, edx
000000000000c110         shr        eax, cl
000000000000c112         not        eax
000000000000c114         and        eax, 0x1
000000000000c117         shl        eax, cl
000000000000c119         mov        rcx, r8
000000000000c11c         xor        eax, edx
000000000000c11e         mov        rdx, rsi
000000000000c121         mov        rsi, rdi
000000000000c124         mov        dword [r9], eax
000000000000c127         xor        edi, edi
000000000000c129         call       quotearg_n_options                          ; quotearg_n_options
000000000000c12e         mov        rsi, qword [rsp+0x48+var_10]
000000000000c133         xor        rsi, qword [fs:0x28]
000000000000c13c         jne        loc_c143

000000000000c13e         add        rsp, 0x48
000000000000c142         ret
                        ; endp

                     loc_c143:
000000000000c143         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
000000000000c148         align      16                                          ; End of unwind block (FDE at 0x24e94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
000000000000c150         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x24eb0)
000000000000c154         mov        rsi, 0xffffffffffffffff
000000000000c15b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
000000000000c160         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x24eb0), Begin of unwind block (FDE at 0x24ec4), CODE XREF=close_stdout+101
000000000000c165         mov        rsi, 0xffffffffffffffff
000000000000c16c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000c171         align      128                                         ; End of unwind block (FDE at 0x24ec4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
000000000000c180         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x24ed8)
000000000000c185         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000c18a         align      16                                          ; End of unwind block (FDE at 0x24ed8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
000000000000c190         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x24eec), CODE XREF=main+689, main+2611, main+2841, main+3865, main+4636, main+4772
000000000000c194         mov        rax, rdx
000000000000c197         mov        rdx, qword [fs:0x28]
000000000000c1a0         mov        qword [rsp+0x48+var_10], rdx
000000000000c1a5         xor        edx, edx
000000000000c1a7         cmp        esi, 0xa
000000000000c1aa         je         loc_c214

000000000000c1ac         mov        dword [rsp+0x48+var_48], esi
000000000000c1af         mov        rcx, rsp
000000000000c1b2         mov        rdx, 0xffffffffffffffff
000000000000c1b9         mov        rsi, rax
000000000000c1bc         mov        qword [rsp+0x48+var_44], 0x0
000000000000c1c5         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000c1ce         mov        qword [rsp+0x48+var_34], 0x0
000000000000c1d7         mov        qword [rsp+0x48+var_2C], 0x0
000000000000c1e0         mov        qword [rsp+0x48+var_24], 0x0
000000000000c1e9         mov        qword [rsp+0x48+var_1C], 0x0
000000000000c1f2         mov        dword [rsp+0x48+var_14], 0x0
000000000000c1fa         call       quotearg_n_options                          ; quotearg_n_options
000000000000c1ff         mov        rcx, qword [rsp+0x48+var_10]
000000000000c204         xor        rcx, qword [fs:0x28]
000000000000c20d         jne        loc_c219

000000000000c20f         add        rsp, 0x48
000000000000c213         ret
                        ; endp

                     loc_c214:
000000000000c214         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_c219:
000000000000c219         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000c21e         align      32                                          ; End of unwind block (FDE at 0x24eec)

                     quotearg_n_custom_mem:
000000000000c220         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x24f08), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
000000000000c224         mov        r9, rcx
000000000000c227         mov        rcx, qword [qword_2282f0]                   ; qword_2282f0
000000000000c22e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000c236         mov        rax, qword [fs:0x28]
000000000000c23f         mov        qword [rsp+0x48+var_10], rax
000000000000c244         xor        eax, eax
000000000000c246         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000c24a         test       rsi, rsi
000000000000c24d         mov        qword [rsp+0x48+var_18], rcx
000000000000c252         mov        dword [rsp+0x48+var_48], 0xa
000000000000c259         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2282d0
000000000000c261         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000c266         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2282e0
000000000000c26e         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000c273         je         loc_c2a7

000000000000c275         test       rdx, rdx
000000000000c278         je         loc_c2a7

000000000000c27a         mov        qword [rsp+0x48+var_20], rsi
000000000000c27f         mov        qword [rsp+0x48+var_18], rdx
000000000000c284         mov        rcx, rsp
000000000000c287         mov        rdx, r8
000000000000c28a         mov        rsi, r9
000000000000c28d         call       quotearg_n_options                          ; quotearg_n_options
000000000000c292         mov        rdi, qword [rsp+0x48+var_10]
000000000000c297         xor        rdi, qword [fs:0x28]
000000000000c2a0         jne        loc_c2ac

000000000000c2a2         add        rsp, 0x48
000000000000c2a6         ret
                        ; endp

                     loc_c2a7:
000000000000c2a7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_c2ac:
000000000000c2ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
000000000000c2b1         align      64                                          ; End of unwind block (FDE at 0x24f08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
000000000000c2c0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x24f24)
000000000000c2c7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
000000000000c2cc         align      16                                          ; End of unwind block (FDE at 0x24f24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
000000000000c2d0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x24f38)
000000000000c2d3         mov        r8, 0xffffffffffffffff
000000000000c2da         mov        rdx, rsi
000000000000c2dd         mov        rsi, rdi
000000000000c2e0         xor        edi, edi
000000000000c2e2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000c2e7         align      16                                          ; End of unwind block (FDE at 0x24f38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
000000000000c2f0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x24f4c)
000000000000c2f3         mov        rcx, rdx
000000000000c2f6         mov        rdx, rsi
000000000000c2f9         mov        rsi, rdi
000000000000c2fc         xor        edi, edi
000000000000c2fe         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000c303         align      16                                          ; End of unwind block (FDE at 0x24f4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
000000000000c310         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x24f60), quote_quoting_options
000000000000c317         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000c31c         align      32                                          ; End of unwind block (FDE at 0x24f60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
000000000000c320         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x24f74), quote_quoting_options
000000000000c327         mov        rdx, rsi
000000000000c32a         mov        rsi, rdi
000000000000c32d         xor        edi, edi
000000000000c32f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000c334         align      64                                          ; End of unwind block (FDE at 0x24f74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
000000000000c340         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x24f88), quote_quoting_options, CODE XREF=argmatch_invalid+46
000000000000c347         mov        rdx, 0xffffffffffffffff
000000000000c34e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000c353         align      32                                          ; End of unwind block (FDE at 0x24f88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
000000000000c360         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x24f9c), quote_quoting_options, CODE XREF=main+3369, main+5022, print_size+276, argmatch_valid+90, argmatch_valid+169
000000000000c367         mov        rsi, rdi
000000000000c36a         mov        rdx, 0xffffffffffffffff
000000000000c371         xor        edi, edi
000000000000c373         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000c378         align      128                                         ; End of unwind block (FDE at 0x24f9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strnlen1:
000000000000c380         push       rbp                                         ; Begin of unwind block (FDE at 0x24fb4), CODE XREF=string_hasher_ci+263, mbscasecmp+628, mbscasecmp+806, mbscasecmp+1448, mbscasecmp+1640
000000000000c381         push       rbx
000000000000c382         mov        rdx, rsi                                    ; argument "__n" for method j_memchr
000000000000c385         mov        rbx, rsi
000000000000c388         xor        esi, esi                                    ; argument "__c" for method j_memchr
000000000000c38a         mov        rbp, rdi
000000000000c38d         sub        rsp, 0x8
000000000000c391         call       j_memchr                                    ; memchr
000000000000c396         mov        rdx, rax
000000000000c399         sub        rdx, rbp
000000000000c39c         add        rdx, 0x1
000000000000c3a0         test       rax, rax
000000000000c3a3         mov        rax, rbx
000000000000c3a6         cmovne     rax, rdx
000000000000c3aa         add        rsp, 0x8
000000000000c3ae         pop        rbx
000000000000c3af         pop        rbp
000000000000c3b0         ret
                        ; endp
000000000000c3b1         align      64                                          ; End of unwind block (FDE at 0x24fb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
000000000000c3c0         push       r15                                         ; Begin of unwind block (FDE at 0x24fdc), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
000000000000c3c2         push       r14
000000000000c3c4         push       r13
000000000000c3c6         push       r12
000000000000c3c8         mov        r12, r9
000000000000c3cb         push       rbp
000000000000c3cc         push       rbx
000000000000c3cd         mov        rbp, rdi
000000000000c3d0         mov        rbx, r8
000000000000c3d3         sub        rsp, 0x28
000000000000c3d7         test       rsi, rsi
000000000000c3da         je         loc_c4f8

000000000000c3e0         mov        r8, rdx
000000000000c3e3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000c3ea         mov        r9, rcx
000000000000c3ed         xor        eax, eax
000000000000c3ef         mov        rcx, rsi
000000000000c3f2         mov        esi, 0x1
000000000000c3f7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_c3fc:
000000000000c3fc         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x21f9b, CODE XREF=version_etc_arn+337
000000000000c403         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c405         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c40a         call       j_dcgettext                                 ; dcgettext
000000000000c40f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
000000000000c416         mov        rcx, rax
000000000000c419         mov        r8d, 0x7e3
000000000000c41f         mov        esi, 0x1
000000000000c424         mov        rdi, rbp
000000000000c427         xor        eax, eax
000000000000c429         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c42e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
000000000000c435         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c437         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c43c         call       j_dcgettext                                 ; dcgettext
000000000000c441         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
000000000000c444         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000c447         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000c44c         cmp        r12, 0x9
000000000000c450         ja         loc_c790

000000000000c456         lea        rdx, qword [switch_table_22284]             ; switch_table_22284
000000000000c45d         movsxd     rax, dword [rdx+r12*4]
000000000000c461         add        rax, rdx
000000000000c464         jmp        rax                                         ; switch statement using table at 0x22284, with 10 cases, 0xc470,0xc4e6,0xc520,0xc578,0xc5b8,0xc600,0xc650,0xc6a8,0xc6d8,0xc740
000000000000c466         align      16

                     loc_c470:
000000000000c470         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
000000000000c474         mov        rax, qword [rbx+0x10]
000000000000c478         lea        rsi, qword [aWrittenBySSSns_22198]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000c47f         mov        r8, qword [rbx+8]
000000000000c483         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c488         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c48a         mov        r13, qword [rbx+0x30]
000000000000c48e         mov        r12, qword [rbx+0x28]
000000000000c492         mov        qword [rsp+0x58+var_48], r9
000000000000c497         mov        r15, qword [rbx+0x20]
000000000000c49b         mov        r14, qword [rbx+0x18]
000000000000c49f         mov        qword [rsp+0x58+var_58], rax
000000000000c4a3         mov        qword [rsp+0x58+var_50], r8
000000000000c4a8         mov        rbx, qword [rbx]
000000000000c4ab         call       j_dcgettext                                 ; dcgettext
000000000000c4b0         sub        rsp, 0x8

                     loc_c4b4:
000000000000c4b4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
000000000000c4b9         mov        rdx, rax
000000000000c4bc         mov        rcx, rbx
000000000000c4bf         mov        esi, 0x1
000000000000c4c4         mov        rdi, rbp
000000000000c4c7         xor        eax, eax
000000000000c4c9         push       r9
000000000000c4cb         push       r13
000000000000c4cd         push       r12
000000000000c4cf         push       r15
000000000000c4d1         push       r14
000000000000c4d3         mov        r9, qword [rsp+0x88+var_58]
000000000000c4d8         mov        r8, qword [rsp+0x88+var_50]
000000000000c4dd         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c4e2         add        rsp, 0x30

                     loc_c4e6:
000000000000c4e6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000c4ea         pop        rbx
000000000000c4eb         pop        rbp
000000000000c4ec         pop        r12
000000000000c4ee         pop        r13
000000000000c4f0         pop        r14
000000000000c4f2         pop        r15
000000000000c4f4         ret
                        ; endp
000000000000c4f5         align      8

                     loc_c4f8:
000000000000c4f8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000c4fb         mov        rcx, rdx
000000000000c4fe         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
000000000000c505         mov        esi, 0x1
000000000000c50a         xor        eax, eax
000000000000c50c         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c511         jmp        loc_c3fc
000000000000c516         align      32

                     loc_c520:
000000000000c520         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
000000000000c524         mov        r9, qword [rbx+0x38]
000000000000c528         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000c52f         mov        rax, qword [rbx+0x10]
000000000000c533         mov        r8, qword [rbx+8]
000000000000c537         mov        edx, 0x5
000000000000c53c         mov        r13, qword [rbx+0x30]
000000000000c540         mov        r12, qword [rbx+0x28]
000000000000c544         mov        r15, qword [rbx+0x20]
000000000000c548         mov        r14, qword [rbx+0x18]
000000000000c54c         mov        rbx, qword [rbx]
000000000000c54f         mov        qword [rsp+0x58+var_40], r10
000000000000c554         mov        qword [rsp+0x58+var_48], r9
000000000000c559         mov        qword [rsp+0x58+var_58], rax
000000000000c55d         mov        qword [rsp+0x58+var_50], r8

                     loc_c562:
000000000000c562         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
000000000000c564         call       j_dcgettext                                 ; dcgettext
000000000000c569         mov        r10, qword [rsp+0x58+var_40]
000000000000c56e         push       r10
000000000000c570         jmp        loc_c4b4
000000000000c575         align      8

                     loc_c578:
000000000000c578         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000c57b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
000000000000c582         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c587         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c589         call       j_dcgettext                                 ; dcgettext
000000000000c58e         add        rsp, 0x28
000000000000c592         mov        rcx, rbx
000000000000c595         mov        rdi, rbp
000000000000c598         pop        rbx
000000000000c599         pop        rbp
000000000000c59a         pop        r12
000000000000c59c         pop        r13
000000000000c59e         pop        r14
000000000000c5a0         pop        r15
000000000000c5a2         mov        rdx, rax
000000000000c5a5         mov        esi, 0x1
000000000000c5aa         xor        eax, eax
000000000000c5ac         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000c5b1         align      8

                     loc_c5b8:
000000000000c5b8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000c5bc         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
000000000000c5c3         mov        rbx, qword [rbx]
000000000000c5c6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c5cb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c5cd         call       j_dcgettext                                 ; dcgettext
000000000000c5d2         add        rsp, 0x28
000000000000c5d6         mov        r8, r12
000000000000c5d9         mov        rcx, rbx
000000000000c5dc         mov        rdi, rbp
000000000000c5df         mov        rdx, rax
000000000000c5e2         mov        esi, 0x1
000000000000c5e7         pop        rbx
000000000000c5e8         pop        rbp
000000000000c5e9         pop        r12
000000000000c5eb         pop        r13
000000000000c5ed         pop        r14
000000000000c5ef         pop        r15
000000000000c5f1         xor        eax, eax
000000000000c5f3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000c5f8         align      512

                     loc_c600:
000000000000c600         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
000000000000c604         mov        r12, qword [rbx+8]
000000000000c608         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000c60f         mov        rbx, qword [rbx]
000000000000c612         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c617         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c619         call       j_dcgettext                                 ; dcgettext
000000000000c61e         add        rsp, 0x28
000000000000c622         mov        r9, r13
000000000000c625         mov        r8, r12
000000000000c628         mov        rcx, rbx
000000000000c62b         mov        rdi, rbp
000000000000c62e         mov        rdx, rax
000000000000c631         pop        rbx
000000000000c632         pop        rbp
000000000000c633         pop        r12
000000000000c635         pop        r13
000000000000c637         pop        r14
000000000000c639         pop        r15
000000000000c63b         mov        esi, 0x1
000000000000c640         xor        eax, eax
000000000000c642         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000c647         align      16

                     loc_c650:
000000000000c650         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
000000000000c657         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c65c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c65e         mov        r14, qword [rbx+0x18]
000000000000c662         mov        r13, qword [rbx+0x10]
000000000000c666         mov        r12, qword [rbx+8]
000000000000c66a         mov        rbx, qword [rbx]
000000000000c66d         call       j_dcgettext                                 ; dcgettext
000000000000c672         sub        rsp, 0x8

                     loc_c676:
000000000000c676         push       r14                                         ; CODE XREF=version_etc_arn+784
000000000000c678         mov        rdx, rax
000000000000c67b         mov        r9, r13
000000000000c67e         mov        r8, r12
000000000000c681         mov        rcx, rbx
000000000000c684         mov        rdi, rbp
000000000000c687         mov        esi, 0x1
000000000000c68c         xor        eax, eax
000000000000c68e         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c693         pop        rax
000000000000c694         pop        rdx
000000000000c695         add        rsp, 0x28
000000000000c699         pop        rbx
000000000000c69a         pop        rbp
000000000000c69b         pop        r12
000000000000c69d         pop        r13
000000000000c69f         pop        r14
000000000000c6a1         pop        r15
000000000000c6a3         ret
                        ; endp
000000000000c6a4         align      8

                     loc_c6a8:
000000000000c6a8         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000c6ac         lea        rsi, qword [aWrittenBySSSns_22118]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
000000000000c6b3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c6b8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c6ba         mov        r14, qword [rbx+0x18]
000000000000c6be         mov        r13, qword [rbx+0x10]
000000000000c6c2         mov        r12, qword [rbx+8]
000000000000c6c6         mov        rbx, qword [rbx]
000000000000c6c9         call       j_dcgettext                                 ; dcgettext
000000000000c6ce         push       r15
000000000000c6d0         jmp        loc_c676
000000000000c6d2         align      8

                     loc_c6d8:
000000000000c6d8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000c6dc         mov        r12, qword [rbx+0x28]
000000000000c6e0         lea        rsi, qword [aWrittenBySSSns_22140]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
000000000000c6e7         mov        r15, qword [rbx+0x20]
000000000000c6eb         mov        r14, qword [rbx+0x18]
000000000000c6ef         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c6f4         mov        r13, qword [rbx+0x10]
000000000000c6f8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c6fa         mov        rbx, qword [rbx]
000000000000c6fd         mov        qword [rsp+0x58+var_58], r8
000000000000c701         call       j_dcgettext                                 ; dcgettext
000000000000c706         sub        rsp, 0x8
000000000000c70a         mov        r9, r13
000000000000c70d         push       r12
000000000000c70f         push       r15
000000000000c711         push       r14

                     loc_c713:
000000000000c713         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
000000000000c718         mov        rcx, rbx
000000000000c71b         mov        rdx, rax
000000000000c71e         mov        rdi, rbp
000000000000c721         mov        esi, 0x1
000000000000c726         xor        eax, eax
000000000000c728         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c72d         add        rsp, 0x20
000000000000c731         add        rsp, 0x28
000000000000c735         pop        rbx
000000000000c736         pop        rbp
000000000000c737         pop        r12
000000000000c739         pop        r13
000000000000c73b         pop        r14
000000000000c73d         pop        r15
000000000000c73f         ret
                        ; endp

                     loc_c740:
000000000000c740         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
000000000000c744         mov        r13, qword [rbx+0x30]
000000000000c748         lea        rsi, qword [aWrittenBySSSns_22168]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000c74f         mov        r12, qword [rbx+0x28]
000000000000c753         mov        r15, qword [rbx+0x20]
000000000000c757         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c75c         mov        r14, qword [rbx+0x18]
000000000000c760         mov        r8, qword [rbx+8]
000000000000c764         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c766         mov        qword [rsp+0x58+var_50], r9
000000000000c76b         mov        rbx, qword [rbx]
000000000000c76e         mov        qword [rsp+0x58+var_58], r8
000000000000c772         call       j_dcgettext                                 ; dcgettext
000000000000c777         push       r13
000000000000c779         push       r12
000000000000c77b         push       r15
000000000000c77d         push       r14
000000000000c77f         mov        r9, qword [rsp+0x78+var_50]
000000000000c784         jmp        loc_c713
000000000000c786         align      16

                     loc_c790:
000000000000c790         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
000000000000c794         mov        r9, qword [rbx+0x38]
000000000000c798         mov        edx, 0x5
000000000000c79d         mov        rax, qword [rbx+0x10]
000000000000c7a1         mov        r8, qword [rbx+8]
000000000000c7a5         lea        rsi, qword [aWrittenBySSSns_22200]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000c7ac         mov        r13, qword [rbx+0x30]
000000000000c7b0         mov        r12, qword [rbx+0x28]
000000000000c7b4         mov        r15, qword [rbx+0x20]
000000000000c7b8         mov        r14, qword [rbx+0x18]
000000000000c7bc         mov        qword [rsp+0x58+var_40], r10
000000000000c7c1         mov        qword [rsp+0x58+var_48], r9
000000000000c7c6         mov        qword [rsp+0x58+var_58], rax
000000000000c7ca         mov        qword [rsp+0x58+var_50], r8
000000000000c7cf         mov        rbx, qword [rbx]
000000000000c7d2         jmp        loc_c562
000000000000c7d7         align      32                                          ; End of unwind block (FDE at 0x24fdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
000000000000c7e0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x250f0)
000000000000c7e3         cmp        qword [r8], 0x0
000000000000c7e7         je         j_version_etc_arn                           ; version_etc_arn

000000000000c7e9         nop        dword [rax]

                     loc_c7f0:
000000000000c7f0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
000000000000c7f4         cmp        qword [r8+r9*8], 0x0
000000000000c7f9         jne        loc_c7f0

                     j_version_etc_arn:        // version_etc_arn
000000000000c7fb         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
000000000000c800         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x250f0), Begin of unwind block (FDE at 0x25104)
000000000000c804         mov        r10, r8
000000000000c807         xor        r9d, r9d
000000000000c80a         mov        rax, qword [fs:0x28]
000000000000c813         mov        qword [rsp+0x68+var_10], rax
000000000000c818         xor        eax, eax
000000000000c81a         mov        r8, rsp
000000000000c81d         nop        dword [rax]

                     loc_c820:
000000000000c820         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
000000000000c823         cmp        eax, 0x2f
000000000000c826         ja         loc_c86a

000000000000c828         mov        r11d, eax
000000000000c82b         add        r11, qword [r10+0x10]
000000000000c82f         add        eax, 0x8
000000000000c832         mov        dword [r10], eax

                     loc_c835:
000000000000c835         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
000000000000c838         test       rax, rax
000000000000c83b         mov        qword [r8+r9*8], rax
000000000000c83f         je         loc_c84b

000000000000c841         add        r9, 0x1
000000000000c845         cmp        r9, 0xa
000000000000c849         jne        loc_c820

                     loc_c84b:
000000000000c84b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
000000000000c850         mov        rax, qword [rsp+0x68+var_10]
000000000000c855         xor        rax, qword [fs:0x28]
000000000000c85e         jne        loc_c865

000000000000c860         add        rsp, 0x68
000000000000c864         ret
                        ; endp

                     loc_c865:
000000000000c865         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_c86a:
000000000000c86a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000c86e         lea        rax, qword [r11+8]
000000000000c872         mov        qword [r10+8], rax
000000000000c876         jmp        loc_c835
000000000000c878         align      128                                         ; End of unwind block (FDE at 0x25104)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
000000000000c880         push       rbp                                         ; Begin of unwind block (FDE at 0x25120), CODE XREF=main+930
000000000000c881         push       rbx
000000000000c882         mov        r10d, 0x20
000000000000c888         xor        r11d, r11d
000000000000c88b         sub        rsp, 0xb8
000000000000c892         mov        rax, qword [fs:0x28]
000000000000c89b         mov        qword [rsp+0xc8+var_50], rax
000000000000c8a0         xor        eax, eax
000000000000c8a2         lea        rax, qword [rsp+0xc8+arg_0]
000000000000c8aa         mov        qword [rsp+0xc8+var_28], r8
000000000000c8b2         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000c8ba         lea        r8, qword [rsp+0xc8+var_A8]
000000000000c8bf         mov        qword [rsp+0xc8+var_20], r9
000000000000c8c7         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000c8cf         mov        qword [rsp+0xc8+var_B8], rax
000000000000c8d4         lea        rax, qword [rsp+0xc8+var_48]
000000000000c8dc         xor        r9d, r9d
000000000000c8df         mov        qword [rsp+0xc8+var_B0], rax
000000000000c8e4         mov        rbp, rax
000000000000c8e7         nop        word [rax+rax]

                     loc_c8f0:
000000000000c8f0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
000000000000c8f4         ja         loc_c94c

000000000000c8f6         mov        eax, r10d
000000000000c8f9         mov        r11d, 0x1
000000000000c8ff         add        r10d, 0x8
000000000000c903         add        rax, rbp

                     loc_c906:
000000000000c906         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
000000000000c909         test       rax, rax
000000000000c90c         mov        qword [r8+r9*8], rax
000000000000c910         je         loc_c91c

000000000000c912         add        r9, 0x1
000000000000c916         cmp        r9, 0xa
000000000000c91a         jne        loc_c8f0

                     loc_c91c:
000000000000c91c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
000000000000c91f         jne        loc_c945

                     loc_c921:
000000000000c921         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
000000000000c926         mov        rax, qword [rsp+0xc8+var_50]
000000000000c92b         xor        rax, qword [fs:0x28]
000000000000c934         jne        loc_c940

000000000000c936         add        rsp, 0xb8
000000000000c93d         pop        rbx
000000000000c93e         pop        rbp
000000000000c93f         ret
                        ; endp

                     loc_c940:
000000000000c940         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_c945:
000000000000c945         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000c94a         jmp        loc_c921

                     loc_c94c:
000000000000c94c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000c94f         add        rbx, 0x8
000000000000c953         jmp        loc_c906
000000000000c955         align      32                                          ; End of unwind block (FDE at 0x25120)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
000000000000c960         push       rbx                                         ; Begin of unwind block (FDE at 0x2514c)
000000000000c961         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
000000000000c968         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c96d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c96f         call       j_dcgettext                                 ; dcgettext
000000000000c974         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000c97b         mov        rsi, rax
000000000000c97e         mov        edi, 0x1
000000000000c983         xor        eax, eax
000000000000c985         call       j___printf_chk                              ; __printf_chk
000000000000c98a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
000000000000c991         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c996         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c998         call       j_dcgettext                                 ; dcgettext
000000000000c99d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000c9a4         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1fb07
000000000000c9ab         mov        rsi, rax
000000000000c9ae         mov        edi, 0x1
000000000000c9b3         xor        eax, eax
000000000000c9b5         call       j___printf_chk                              ; __printf_chk
000000000000c9ba         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000c9c1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
000000000000c9c8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c9ca         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c9cf         call       j_dcgettext                                 ; dcgettext
000000000000c9d4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000c9d7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000c9da         pop        rbx
000000000000c9db         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
000000000000c9e0         push       rbx                                         ; End of unwind block (FDE at 0x2514c), Begin of unwind block (FDE at 0x2516c), CODE XREF=exclude_add_pattern_buffer+17, excluded_file_name+382, add_exclude+568, sub_5a6e+46, add_exclude_fp+257, add_exclude_fp+437, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4
000000000000c9e1         mov        rbx, rdi
000000000000c9e4         call       j_malloc                                    ; malloc
000000000000c9e9         test       rax, rax
000000000000c9ec         jne        loc_c9f3

000000000000c9ee         test       rbx, rbx
000000000000c9f1         jne        loc_c9f5

                     loc_c9f3:
000000000000c9f3         pop        rbx                                         ; CODE XREF=xmalloc+12
000000000000c9f4         ret
                        ; endp

                     loc_c9f5:
000000000000c9f5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_c9fa:
000000000000c9fa         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x2516c)
                     xnmalloc:
000000000000ca00         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x25188)
000000000000ca03         mul        rsi
000000000000ca06         mov        rdi, rax
000000000000ca09         seto       al
000000000000ca0c         test       rdi, rdi
000000000000ca0f         js         loc_ca1b

000000000000ca11         movzx      eax, al
000000000000ca14         test       rax, rax
000000000000ca17         jne        loc_ca1b

000000000000ca19         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_ca1b:
000000000000ca1b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000ca1f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ca24:
000000000000ca24         nop                                                    ; End of unwind block (FDE at 0x25188)
000000000000ca26         nop        word [cs:rax+rax]
                     xcharalloc:
000000000000ca30         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x2519c)
                        ; endp
000000000000ca32         align      64                                          ; End of unwind block (FDE at 0x2519c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
000000000000ca40         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x251b0), CODE XREF=main+2082, add_exclude+683, add_exclude_fp+214, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
000000000000ca43         push       rbx
000000000000ca44         mov        rbx, rsi
000000000000ca47         jne        loc_ca4e

000000000000ca49         test       rdi, rdi
000000000000ca4c         jne        loc_ca68

                     loc_ca4e:
000000000000ca4e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
000000000000ca51         call       j_realloc                                   ; realloc
000000000000ca56         test       rax, rax
000000000000ca59         jne        loc_ca60

000000000000ca5b         test       rbx, rbx
000000000000ca5e         jne        loc_ca71

                     loc_ca60:
000000000000ca60         pop        rbx                                         ; CODE XREF=xrealloc+25
000000000000ca61         ret
                        ; endp
000000000000ca62         align      8

                     loc_ca68:
000000000000ca68         call       sub_2a10                                    ; sub_2a10, CODE XREF=xrealloc+12
000000000000ca6d         xor        eax, eax
000000000000ca6f         pop        rbx
000000000000ca70         ret
                        ; endp

                     loc_ca71:
000000000000ca71         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ca76:
000000000000ca76         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x251b0)
                     xnrealloc:
000000000000ca80         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x251d4)
000000000000ca83         mul        rdx
000000000000ca86         mov        rsi, rax
000000000000ca89         seto       al
000000000000ca8c         test       rsi, rsi
000000000000ca8f         js         loc_ca9b

000000000000ca91         movzx      eax, al
000000000000ca94         test       rax, rax
000000000000ca97         jne        loc_ca9b

000000000000ca99         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_ca9b:
000000000000ca9b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000ca9f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_caa4:
000000000000caa4         nop                                                    ; End of unwind block (FDE at 0x251d4)
000000000000caa6         nop        word [cs:rax+rax]
                     x2nrealloc:
000000000000cab0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x251e8)
000000000000cab3         mov        r9, rdx
000000000000cab6         mov        rcx, qword [rsi]
000000000000cab9         je         loc_caf0

000000000000cabb         xor        edx, edx
000000000000cabd         movabs     rax, 0x5555555555555554
000000000000cac7         div        r9
000000000000caca         cmp        rax, rcx
000000000000cacd         jbe        loc_cb0b

000000000000cacf         mov        rax, rcx
000000000000cad2         shr        rax, 0x1
000000000000cad5         lea        rcx, qword [rax+rcx+1]

                     loc_cada:
000000000000cada         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000cadd         imul       rcx, r9                                     ; argument #4 for method xrealloc
000000000000cae1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
000000000000cae4         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000cae9         align      16

                     loc_caf0:
000000000000caf0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
000000000000caf3         je         loc_cb18

                     loc_caf5:
000000000000caf5         mov        rax, rcx                                    ; CODE XREF=sub_cb14+28
000000000000caf8         mul        r9
000000000000cafb         seto       dl
000000000000cafe         test       rax, rax
000000000000cb01         movzx      edx, dl
000000000000cb04         js         loc_cb0b

000000000000cb06         test       rdx, rdx
000000000000cb09         je         loc_cada

                     loc_cb0b:
000000000000cb0b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
000000000000cb0f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cb14:
000000000000cb14         nop        dword [rax]
                        ; endp

                     loc_cb18:
000000000000cb18         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
000000000000cb1a         mov        eax, 0x80
000000000000cb1f         xor        r8d, r8d
000000000000cb22         div        r9
000000000000cb25         test       rax, rax
000000000000cb28         sete       r8b
000000000000cb2c         lea        rcx, qword [r8+rax]
000000000000cb30         jmp        loc_caf5
000000000000cb32         align      64                                          ; End of unwind block (FDE at 0x251e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
000000000000cb40         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x25200), CODE XREF=add_exclude_fp+132
000000000000cb43         mov        rax, qword [rsi]
000000000000cb46         je         loc_cb70

000000000000cb48         movabs     rdx, 0x5555555555555553
000000000000cb52         cmp        rax, rdx
000000000000cb55         ja         loc_cb81

000000000000cb57         mov        rdx, rax
000000000000cb5a         shr        rdx, 0x1
000000000000cb5d         lea        rax, qword [rdx+rax+1]

                     loc_cb62:
000000000000cb62         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
000000000000cb65         mov        rsi, rax                                    ; argument #2 for method xrealloc
000000000000cb68         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000cb6d         align      16

                     loc_cb70:
000000000000cb70         test       rax, rax                                    ; CODE XREF=x2realloc+6
000000000000cb73         mov        edx, 0x80
000000000000cb78         cmove      rax, rdx
000000000000cb7c         test       rax, rax
000000000000cb7f         jns        loc_cb62

                     loc_cb81:
000000000000cb81         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
000000000000cb85         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cb8a:
000000000000cb8a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x25200)
                     xzalloc:
000000000000cb90         push       rbx                                         ; Begin of unwind block (FDE at 0x25218), CODE XREF=new_exclude+5, add_exclude+75, add_exclude+277
000000000000cb91         mov        rbx, rdi
000000000000cb94         call       xmalloc                                     ; xmalloc
000000000000cb99         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000cb9c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000cb9e         mov        rdi, rax                                    ; argument "__s" for method j_memset
000000000000cba1         pop        rbx
000000000000cba2         jmp        j_memset                                    ; memset
                        ; endp
000000000000cba7         align      16                                          ; End of unwind block (FDE at 0x25218)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
000000000000cbb0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x25234), CODE XREF=main+3101
000000000000cbb3         sub        rsp, 0x8
000000000000cbb7         mul        rsi
000000000000cbba         seto       dl
000000000000cbbd         test       rax, rax
000000000000cbc0         js         loc_cbd9

000000000000cbc2         movzx      edx, dl
000000000000cbc5         test       rdx, rdx
000000000000cbc8         jne        loc_cbd9

000000000000cbca         call       j_calloc                                    ; calloc
000000000000cbcf         test       rax, rax
000000000000cbd2         je         loc_cbd9

000000000000cbd4         add        rsp, 0x8
000000000000cbd8         ret
                        ; endp

                     loc_cbd9:
000000000000cbd9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cbde:
000000000000cbde         nop                                                    ; End of unwind block (FDE at 0x25234)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
000000000000cbe0         push       rbp                                         ; Begin of unwind block (FDE at 0x25250), CODE XREF=clone_quoting_options+40
000000000000cbe1         push       rbx
000000000000cbe2         mov        rbp, rdi
000000000000cbe5         mov        rdi, rsi
000000000000cbe8         mov        rbx, rsi
000000000000cbeb         sub        rsp, 0x8
000000000000cbef         call       xmalloc                                     ; xmalloc
000000000000cbf4         add        rsp, 0x8
000000000000cbf8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000cbfb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000cbfe         pop        rbx
000000000000cbff         pop        rbp
000000000000cc00         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000cc03         jmp        j_memcpy                                    ; memcpy
                        ; endp
000000000000cc08         align      16                                          ; End of unwind block (FDE at 0x25250)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
000000000000cc10         push       rbx                                         ; Begin of unwind block (FDE at 0x25278), CODE XREF=j_j_strcmp+11, add_exclude+376, add_exclude+555, read_file_system_list+400, read_file_system_list+418, read_file_system_list+437, read_file_system_list+454, read_file_system_list+1251, read_file_system_list+1264, read_file_system_list+1287
000000000000cc11         mov        rbx, rdi
000000000000cc14         call       j_strlen                                    ; strlen
000000000000cc19         mov        rdi, rbx
000000000000cc1c         lea        rsi, qword [rax+1]
000000000000cc20         pop        rbx
000000000000cc21         jmp        xmemdup                                     ; xmemdup
                        ; endp
000000000000cc23         align      16                                          ; End of unwind block (FDE at 0x25278)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
000000000000cc30         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x25294), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+5007, add_exclude+745, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xfts_open+42
000000000000cc37         sub        rsp, 0x8
000000000000cc3b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000cc40         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000cc42         call       j_dcgettext                                 ; dcgettext
000000000000cc47         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000cc4d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x21490
000000000000cc54         mov        rcx, rax
000000000000cc57         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000cc59         xor        eax, eax
000000000000cc5b         call       j_error                                     ; error
000000000000cc60         call       j_abort                                     ; abort
                        ; endp
000000000000cc65         align      16                                          ; End of unwind block (FDE at 0x25294)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xfts_open:
000000000000cc70         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x252ac), CODE XREF=main+1571
000000000000cc74         or         esi, 0x200
000000000000cc7a         call       rpl_fts_open                                ; rpl_fts_open
000000000000cc7f         test       rax, rax
000000000000cc82         je         loc_cc90

000000000000cc84         add        rsp, 0x8
000000000000cc88         ret
                        ; endp
000000000000cc89         align      16

                     loc_cc90:
000000000000cc90         call       j___errno_location                          ; __errno_location, CODE XREF=xfts_open+18
000000000000cc95         cmp        dword [rax], 0x16
000000000000cc98         je         loc_cca0

000000000000cc9a         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cc9f:
000000000000cc9f         nop
                        ; endp

                     loc_cca0:
000000000000cca0         lea        rcx, qword [__PRETTY_FUNCTION__.3434]       ; argument "__function" for method j___assert_fail, "xfts_open", CODE XREF=xfts_open+40
000000000000cca7         lea        rsi, qword [aCoreutils831li_22300]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xfts.c"
000000000000ccae         lea        rdi, qword [aErrnoEinval]                   ; argument "__assertion" for method j___assert_fail, "errno != EINVAL"
000000000000ccb5         mov        edx, 0x29                                   ; argument "__line" for method j___assert_fail
000000000000ccba         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000ccbf         align      64                                          ; End of unwind block (FDE at 0x252ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_warning_required:
000000000000ccc0         mov        edx, dword [rdi+0x48]                       ; Begin of unwind block (FDE at 0x252c8), CODE XREF=main+4677
000000000000ccc3         mov        eax, 0x1
000000000000ccc8         and        edx, 0x11
000000000000cccb         cmp        edx, 0x10
000000000000ccce         je         loc_ccd7

000000000000ccd0         xor        eax, eax
000000000000ccd2         cmp        edx, 0x11
000000000000ccd5         je         loc_cce0

                     loc_ccd7:
000000000000ccd7         ret                                                    ; CODE XREF=cycle_warning_required+14
                        ; endp
000000000000ccd9         align      32

                     loc_cce0:
000000000000cce0         cmp        qword [rsi+0x58], 0x0                       ; CODE XREF=cycle_warning_required+21
000000000000cce5         setne      al
000000000000cce8         ret
                        ; endp
000000000000cce9         align      16                                          ; End of unwind block (FDE at 0x252c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoimax:
000000000000ccf0         push       r15                                         ; Begin of unwind block (FDE at 0x252dc), CODE XREF=main+353
000000000000ccf2         push       r14
000000000000ccf4         push       r13
000000000000ccf6         push       r12
000000000000ccf8         push       rbp
000000000000ccf9         push       rbx
000000000000ccfa         sub        rsp, 0x28
000000000000ccfe         mov        rax, qword [fs:0x28]
000000000000cd07         mov        qword [rsp+0x58+var_40], rax
000000000000cd0c         xor        eax, eax
000000000000cd0e         cmp        edx, 0x24
000000000000cd11         ja         loc_d37f

000000000000cd17         lea        rax, qword [rsp+0x58+var_48]
000000000000cd1c         test       rsi, rsi
000000000000cd1f         mov        rbx, rsi
000000000000cd22         mov        r12, rdi
000000000000cd25         mov        ebp, edx
000000000000cd27         mov        r14, rcx
000000000000cd2a         cmove      rbx, rax
000000000000cd2e         mov        r15, r8
000000000000cd31         call       j___errno_location                          ; __errno_location
000000000000cd36         xor        ecx, ecx
000000000000cd38         mov        edx, ebp
000000000000cd3a         mov        dword [rax], 0x0
000000000000cd40         mov        rsi, rbx
000000000000cd43         mov        rdi, r12
000000000000cd46         mov        r13, rax
000000000000cd49         call       j___strtol_internal                         ; __strtol_internal
000000000000cd4e         mov        rcx, qword [rbx]
000000000000cd51         mov        rbp, rax
000000000000cd54         cmp        rcx, r12
000000000000cd57         je         loc_cdb8

000000000000cd59         mov        eax, dword [r13]
000000000000cd5d         test       eax, eax
000000000000cd5f         jne        loc_cda0

000000000000cd61         xor        r12d, r12d

                     loc_cd64:
000000000000cd64         test       r15, r15                                    ; CODE XREF=xstrtoimax+193
000000000000cd67         je         loc_cd76

000000000000cd69         movzx      r13d, byte [rcx]
000000000000cd6d         test       r13b, r13b
000000000000cd70         jne        loc_cdf3

                     loc_cd76:
000000000000cd76         mov        qword [r14], rbp                            ; CODE XREF=xstrtoimax+119, xstrtoimax+550

                     loc_cd79:
000000000000cd79         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoimax+185, xstrtoimax+227, xstrtoimax+249, xstrtoimax+383, xstrtoimax+1382
000000000000cd7e         xor        rdi, qword [fs:0x28]
000000000000cd87         mov        eax, r12d
000000000000cd8a         jne        loc_d39e

000000000000cd90         add        rsp, 0x28
000000000000cd94         pop        rbx
000000000000cd95         pop        rbp
000000000000cd96         pop        r12
000000000000cd98         pop        r13
000000000000cd9a         pop        r14
000000000000cd9c         pop        r15
000000000000cd9e         ret
                        ; endp
000000000000cd9f         align      32

                     loc_cda0:
000000000000cda0         cmp        eax, 0x22                                   ; CODE XREF=xstrtoimax+111
000000000000cda3         mov        r12d, 0x4
000000000000cda9         jne        loc_cd79

000000000000cdab         mov        r12d, 0x1
000000000000cdb1         jmp        loc_cd64
000000000000cdb3         align      8

                     loc_cdb8:
000000000000cdb8         test       r15, r15                                    ; CODE XREF=xstrtoimax+103
000000000000cdbb         je         loc_d250

000000000000cdc1         movzx      r13d, byte [rcx]
000000000000cdc5         mov        qword [rsp+0x58+var_50], rcx
000000000000cdca         mov        r12d, 0x4
000000000000cdd0         test       r13b, r13b
000000000000cdd3         je         loc_cd79

000000000000cdd5         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
000000000000cdd9         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000cddc         call       j_strchr                                    ; strchr
000000000000cde1         test       rax, rax
000000000000cde4         mov        rcx, qword [rsp+0x58+var_50]
000000000000cde9         je         loc_cd79

000000000000cdeb         mov        ebp, 0x1
000000000000cdf0         xor        r12d, r12d

                     loc_cdf3:
000000000000cdf3         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoimax+128
000000000000cdf7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000cdfa         mov        qword [rsp+0x58+var_50], rcx
000000000000cdff         call       j_strchr                                    ; strchr
000000000000ce04         test       rax, rax
000000000000ce07         mov        rcx, qword [rsp+0x58+var_50]
000000000000ce0c         je         loc_ce68

000000000000ce0e         lea        eax, dword [r13-0x45]
000000000000ce12         cmp        al, 0x2f
000000000000ce14         ja         loc_ce78

000000000000ce16         movabs     rdx, 0x814400308945
000000000000ce20         bt         rdx, rax
000000000000ce24         jae        loc_ce78

000000000000ce26         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000ce2b         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000ce2e         mov        qword [rsp+0x58+var_50], rcx
000000000000ce33         call       j_strchr                                    ; strchr
000000000000ce38         test       rax, rax
000000000000ce3b         mov        rcx, qword [rsp+0x58+var_50]
000000000000ce40         je         loc_ce78

000000000000ce42         movzx      eax, byte [rcx+1]
000000000000ce46         cmp        al, 0x44
000000000000ce48         je         loc_ce56

000000000000ce4a         cmp        al, 0x69
000000000000ce4c         je         loc_d338

000000000000ce52         cmp        al, 0x42
000000000000ce54         jne        loc_ce78

                     loc_ce56:
000000000000ce56         mov        edi, 0x2                                    ; CODE XREF=xstrtoimax+344
000000000000ce5b         mov        eax, 0x3e8
000000000000ce60         jmp        loc_ce82
000000000000ce62         align      8

                     loc_ce68:
000000000000ce68         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtoimax+284, xstrtoimax+410, xstrtoimax+430
000000000000ce6b         or         r12d, 0x2
000000000000ce6f         jmp        loc_cd79
000000000000ce74         align      8

                     loc_ce78:
000000000000ce78         mov        edi, 0x1                                    ; CODE XREF=xstrtoimax+292, xstrtoimax+308, xstrtoimax+336, xstrtoimax+356
000000000000ce7d         mov        eax, 0x400

                     loc_ce82:
000000000000ce82         sub        r13d, 0x42                                  ; CODE XREF=xstrtoimax+368, xstrtoimax+1627
000000000000ce86         cmp        r13b, 0x35
000000000000ce8a         ja         loc_ce68

000000000000ce8c         lea        rsi, qword [switch_table_22388]             ; switch_table_22388
000000000000ce93         movzx      r13d, r13b
000000000000ce97         movsxd     rdx, dword [rsi+r13*4]
000000000000ce9b         add        rdx, rsi
000000000000ce9e         jmp        rdx                                         ; switch statement using table at 0x22388, with 54 cases, 0xce68,0xcea0,0xcf00,0xcf20,0xcf50,0xcf80,0xcff0,0xd060,0xd0a0,0xd100,0xd168,0xd1d0,0xd200

                     loc_cea0:
000000000000cea0         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtoimax+430
000000000000ceaa         movsxd     rsi, eax
000000000000cead         mov        rax, r8
000000000000ceb0         cqo
000000000000ceb2         idiv       rsi
000000000000ceb5         cmp        rbp, rax
000000000000ceb8         mov        r9, rax
000000000000cebb         jl         loc_d365

000000000000cec1         movabs     r10, 0x7fffffffffffffff
000000000000cecb         mov        rax, r10
000000000000cece         cqo
000000000000ced0         idiv       rsi
000000000000ced3         cmp        rbp, rax
000000000000ced6         jg         loc_d372

000000000000cedc         imul       rbp, rsi
000000000000cee0         cmp        r9, rbp
000000000000cee3         jg         loc_d365

000000000000cee9         cmp        rax, rbp
000000000000ceec         jl         loc_d372

000000000000cef2         imul       rbp, rsi
000000000000cef6         xor        eax, eax

                     loc_cef8:
000000000000cef8         or         r12d, eax                                   ; CODE XREF=xstrtoimax+1661, xstrtoimax+1674
000000000000cefb         nop        dword [rax+rax]

                     loc_cf00:
000000000000cf00         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtoimax+430, xstrtoimax+601, xstrtoimax+650, xstrtoimax+935, xstrtoimax+1027, xstrtoimax+1290, xstrtoimax+1408, xstrtoimax+1600
000000000000cf03         add        rcx, rax
000000000000cf06         mov        eax, r12d
000000000000cf09         or         eax, 0x2
000000000000cf0c         mov        qword [rbx], rcx
000000000000cf0f         cmp        byte [rcx], 0x0
000000000000cf12         cmovne     r12d, eax
000000000000cf16         jmp        loc_cd76
000000000000cf1b         align      32

                     loc_cf20:
000000000000cf20         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtoimax+430
000000000000cf2a         cmp        rbp, rax
000000000000cf2d         jl         loc_d260

000000000000cf33         movabs     rax, 0x3fffffffffffffff
000000000000cf3d         cmp        rbp, rax
000000000000cf40         jg         loc_d320

000000000000cf46         add        rbp, rbp
000000000000cf49         jmp        loc_cf00
000000000000cf4b         align      16

                     loc_cf50:
000000000000cf50         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtoimax+430
000000000000cf5a         cmp        rbp, rax
000000000000cf5d         jl         loc_d260

000000000000cf63         movabs     rax, 0x3fffffffffffff
000000000000cf6d         cmp        rbp, rax
000000000000cf70         jg         loc_d320

000000000000cf76         shl        rbp, 0x9
000000000000cf7a         jmp        loc_cf00
000000000000cf7c         align      128

                     loc_cf80:
000000000000cf80         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtoimax+430
000000000000cf83         movabs     rax, 0x8000000000000000
000000000000cf8d         mov        r8d, 0x7
000000000000cf93         cqo
000000000000cf95         xor        r11d, r11d
000000000000cf98         movabs     r9, 0x7fffffffffffffff
000000000000cfa2         idiv       rsi
000000000000cfa5         mov        r10, rax
000000000000cfa8         jmp        loc_cfcf
000000000000cfaa         align      16

                     loc_cfb0:
000000000000cfb0         mov        rax, r9                                     ; CODE XREF=xstrtoimax+738
000000000000cfb3         cqo
000000000000cfb5         idiv       rsi
000000000000cfb8         cmp        rax, rbp
000000000000cfbb         jl         loc_d2a8

000000000000cfc1         imul       rbp, rsi

                     loc_cfc5:
000000000000cfc5         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+756, xstrtoimax+1480
000000000000cfc9         je         loc_d0f0

                     loc_cfcf:
000000000000cfcf         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+696
000000000000cfd2         jle        loc_cfb0

000000000000cfd4         mov        r11d, 0x1
000000000000cfda         movabs     rbp, 0x8000000000000000
000000000000cfe4         jmp        loc_cfc5
000000000000cfe6         align      16

                     loc_cff0:
000000000000cff0         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtoimax+430
000000000000cff3         movabs     rax, 0x8000000000000000
000000000000cffd         mov        r8d, 0x8
000000000000d003         cqo
000000000000d005         xor        r11d, r11d
000000000000d008         movabs     r9, 0x7fffffffffffffff
000000000000d012         idiv       rsi
000000000000d015         mov        r10, rax
000000000000d018         jmp        loc_d03f
000000000000d01a         align      32

                     loc_d020:
000000000000d020         mov        rax, r9                                     ; CODE XREF=xstrtoimax+850
000000000000d023         cqo
000000000000d025         idiv       rsi
000000000000d028         cmp        rax, rbp
000000000000d02b         jl         loc_d278

000000000000d031         imul       rbp, rsi

                     loc_d035:
000000000000d035         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+868, xstrtoimax+1432
000000000000d039         je         loc_d0f0

                     loc_d03f:
000000000000d03f         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+808
000000000000d042         jle        loc_d020

000000000000d044         mov        r11d, 0x1
000000000000d04a         movabs     rbp, 0x8000000000000000
000000000000d054         jmp        loc_d035
000000000000d056         align      32

                     loc_d060:
000000000000d060         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtoimax+430
000000000000d06a         movsxd     rsi, eax
000000000000d06d         mov        rax, r8
000000000000d070         cqo
000000000000d072         idiv       rsi
000000000000d075         cmp        rbp, rax
000000000000d078         jl         loc_d260

000000000000d07e         sub        r8, 0x1
000000000000d082         mov        rax, r8
000000000000d085         cqo
000000000000d087         idiv       rsi
000000000000d08a         cmp        rbp, rax
000000000000d08d         jg         loc_d320

000000000000d093         imul       rbp, rsi
000000000000d097         jmp        loc_cf00
000000000000d09c         align      32

                     loc_d0a0:
000000000000d0a0         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtoimax+430
000000000000d0a3         movabs     rax, 0x8000000000000000
000000000000d0ad         mov        r8d, 0x3
000000000000d0b3         cqo
000000000000d0b5         xor        r11d, r11d
000000000000d0b8         movabs     r9, 0x7fffffffffffffff
000000000000d0c2         idiv       rsi
000000000000d0c5         mov        r10, rax

                     loc_d0c8:
000000000000d0c8         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1018
000000000000d0cb         jg         loc_d2c0

000000000000d0d1         mov        rax, r9
000000000000d0d4         cqo
000000000000d0d6         idiv       rsi
000000000000d0d9         cmp        rax, rbp
000000000000d0dc         jl         loc_d350

000000000000d0e2         imul       rbp, rsi

                     loc_d0e6:
000000000000d0e6         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1504, xstrtoimax+1648
000000000000d0ea         jne        loc_d0c8

000000000000d0ec         nop        dword [rax]

                     loc_d0f0:
000000000000d0f0         or         r12d, r11d                                  ; CODE XREF=xstrtoimax+729, xstrtoimax+841, xstrtoimax+1113, xstrtoimax+1217, xstrtoimax+1368
000000000000d0f3         jmp        loc_cf00
000000000000d0f8         align      256

                     loc_d100:
000000000000d100         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtoimax+430
000000000000d103         movabs     rax, 0x8000000000000000
000000000000d10d         mov        r8d, 0x6
000000000000d113         cqo
000000000000d115         xor        r11d, r11d
000000000000d118         movabs     r9, 0x7fffffffffffffff
000000000000d122         idiv       rsi
000000000000d125         mov        r10, rax
000000000000d128         jmp        loc_d14b
000000000000d12a         align      16

                     loc_d130:
000000000000d130         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1118
000000000000d133         cqo
000000000000d135         idiv       rsi
000000000000d138         cmp        rax, rbp
000000000000d13b         jl         loc_d2d8

000000000000d141         imul       rbp, rsi

                     loc_d145:
000000000000d145         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1136, xstrtoimax+1528
000000000000d149         je         loc_d0f0

                     loc_d14b:
000000000000d14b         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1080
000000000000d14e         jle        loc_d130

000000000000d150         mov        r11d, 0x1
000000000000d156         movabs     rbp, 0x8000000000000000
000000000000d160         jmp        loc_d145
000000000000d162         align      8

                     loc_d168:
000000000000d168         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtoimax+430
000000000000d16b         movabs     rax, 0x8000000000000000
000000000000d175         mov        r8d, 0x5
000000000000d17b         cqo
000000000000d17d         xor        r11d, r11d
000000000000d180         movabs     r9, 0x7fffffffffffffff
000000000000d18a         idiv       rsi
000000000000d18d         mov        r10, rax
000000000000d190         jmp        loc_d1b7
000000000000d192         align      8

                     loc_d198:
000000000000d198         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1226
000000000000d19b         cqo
000000000000d19d         idiv       rsi
000000000000d1a0         cmp        rax, rbp
000000000000d1a3         jl         loc_d2f0

000000000000d1a9         imul       rbp, rsi

                     loc_d1ad:
000000000000d1ad         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1244, xstrtoimax+1552
000000000000d1b1         je         loc_d0f0

                     loc_d1b7:
000000000000d1b7         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1184
000000000000d1ba         jle        loc_d198

000000000000d1bc         mov        r11d, 0x1
000000000000d1c2         movabs     rbp, 0x8000000000000000
000000000000d1cc         jmp        loc_d1ad
000000000000d1ce         align      16

                     loc_d1d0:
000000000000d1d0         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtoimax+430
000000000000d1da         cmp        rbp, rax
000000000000d1dd         jl         loc_d260

000000000000d1e3         movabs     rax, 0x1fffffffffffff
000000000000d1ed         cmp        rbp, rax
000000000000d1f0         jg         loc_d320

000000000000d1f6         shl        rbp, 0xa
000000000000d1fa         jmp        loc_cf00
000000000000d1ff         align      512

                     loc_d200:
000000000000d200         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtoimax+430
000000000000d203         movabs     rax, 0x8000000000000000
000000000000d20d         mov        r8d, 0x4
000000000000d213         cqo
000000000000d215         xor        r11d, r11d
000000000000d218         movabs     r9, 0x7fffffffffffffff
000000000000d222         idiv       rsi
000000000000d225         mov        r10, rax

                     loc_d228:
000000000000d228         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1366
000000000000d22b         jg         loc_d290

000000000000d22d         mov        rax, r9
000000000000d230         cqo
000000000000d232         idiv       rsi
000000000000d235         cmp        rax, rbp
000000000000d238         jl         loc_d308

000000000000d23e         imul       rbp, rsi

                     loc_d242:
000000000000d242         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1456, xstrtoimax+1576
000000000000d246         jne        loc_d228

000000000000d248         jmp        loc_d0f0
000000000000d24d         align      16

                     loc_d250:
000000000000d250         mov        r12d, 0x4                                   ; CODE XREF=xstrtoimax+203
000000000000d256         jmp        loc_cd79
000000000000d25b         align      32

                     loc_d260:
000000000000d260         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+573, xstrtoimax+621, xstrtoimax+904, xstrtoimax+1261
000000000000d266         movabs     rbp, 0x8000000000000000
000000000000d270         jmp        loc_cf00
000000000000d275         align      8

                     loc_d278:
000000000000d278         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+827
000000000000d27e         movabs     rbp, 0x7fffffffffffffff
000000000000d288         jmp        loc_d035
000000000000d28d         align      16

                     loc_d290:
000000000000d290         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1339
000000000000d296         movabs     rbp, 0x8000000000000000
000000000000d2a0         jmp        loc_d242
000000000000d2a2         align      8

                     loc_d2a8:
000000000000d2a8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+715
000000000000d2ae         movabs     rbp, 0x7fffffffffffffff
000000000000d2b8         jmp        loc_cfc5
000000000000d2bd         align      64

                     loc_d2c0:
000000000000d2c0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+987
000000000000d2c6         movabs     rbp, 0x8000000000000000
000000000000d2d0         jmp        loc_d0e6
000000000000d2d5         align      8

                     loc_d2d8:
000000000000d2d8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1099
000000000000d2de         movabs     rbp, 0x7fffffffffffffff
000000000000d2e8         jmp        loc_d145
000000000000d2ed         align      16

                     loc_d2f0:
000000000000d2f0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1203
000000000000d2f6         movabs     rbp, 0x7fffffffffffffff
000000000000d300         jmp        loc_d1ad
000000000000d305         align      8

                     loc_d308:
000000000000d308         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1352
000000000000d30e         movabs     rbp, 0x7fffffffffffffff
000000000000d318         jmp        loc_d242
000000000000d31d         align      32

                     loc_d320:
000000000000d320         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+592, xstrtoimax+640, xstrtoimax+925, xstrtoimax+1280
000000000000d326         movabs     rbp, 0x7fffffffffffffff
000000000000d330         jmp        loc_cf00
000000000000d335         align      8

                     loc_d338:
000000000000d338         xor        edi, edi                                    ; CODE XREF=xstrtoimax+348
000000000000d33a         cmp        byte [rcx+2], 0x42
000000000000d33e         mov        eax, 0x400
000000000000d343         sete       dil
000000000000d347         lea        edi, dword [rdi+rdi+1]
000000000000d34b         jmp        loc_ce82

                     loc_d350:
000000000000d350         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1004
000000000000d356         movabs     rbp, 0x7fffffffffffffff
000000000000d360         jmp        loc_d0e6

                     loc_d365:
000000000000d365         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+459, xstrtoimax+499
000000000000d36a         mov        rbp, r8
000000000000d36d         jmp        loc_cef8

                     loc_d372:
000000000000d372         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+486, xstrtoimax+508
000000000000d377         mov        rbp, r10
000000000000d37a         jmp        loc_cef8

                     loc_d37f:
000000000000d37f         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoimax", CODE XREF=xstrtoimax+33
000000000000d386         lea        rsi, qword [aCoreutils831li_22340]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000d38d         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000d394         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000d399         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_d39e:
000000000000d39e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoimax+154
                        ; endp
000000000000d3a3         align      16                                          ; End of unwind block (FDE at 0x252dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoul:
000000000000d3b0         push       r15                                         ; Begin of unwind block (FDE at 0x2532c), CODE XREF=main+541
000000000000d3b2         push       r14
000000000000d3b4         push       r13
000000000000d3b6         push       r12
000000000000d3b8         push       rbp
000000000000d3b9         push       rbx
000000000000d3ba         sub        rsp, 0x28
000000000000d3be         mov        rax, qword [fs:0x28]
000000000000d3c7         mov        qword [rsp+0x58+var_40], rax
000000000000d3cc         xor        eax, eax
000000000000d3ce         cmp        edx, 0x24
000000000000d3d1         ja         loc_d735

000000000000d3d7         lea        rax, qword [rsp+0x58+var_48]
000000000000d3dc         mov        r15, rsi
000000000000d3df         test       rsi, rsi
000000000000d3e2         mov        rbp, rdi
000000000000d3e5         mov        dword [rsp+0x58+var_50], edx
000000000000d3e9         mov        r14, rcx
000000000000d3ec         mov        r13, r8
000000000000d3ef         cmove      r15, rax
000000000000d3f3         call       j___errno_location                          ; __errno_location
000000000000d3f8         mov        dword [rax], 0x0
000000000000d3fe         mov        r12, rax
000000000000d401         movzx      ebx, byte [rbp]
000000000000d405         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d40a         mov        edx, dword [rsp+0x58+var_50]
000000000000d40e         mov        rsi, qword [rax]
000000000000d411         mov        rax, rbp
000000000000d414         jmp        loc_d427
000000000000d416         align      32

                     loc_d420:
000000000000d420         add        rax, 0x1                                    ; CODE XREF=xstrtoul+127
000000000000d424         movzx      ebx, byte [rax]

                     loc_d427:
000000000000d427         movzx      ecx, bl                                     ; CODE XREF=xstrtoul+100
000000000000d42a         test       byte [rsi+rcx*2+1], 0x20
000000000000d42f         jne        loc_d420

000000000000d431         cmp        bl, 0x2d
000000000000d434         je         loc_d488

000000000000d436         mov        rsi, r15                                    ; argument "__endptr" for method j_strtoul
000000000000d439         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtoul
000000000000d43c         call       j_strtoul                                   ; strtoul
000000000000d441         mov        rcx, qword [r15]
000000000000d444         mov        rbx, rax
000000000000d447         cmp        rcx, rbp
000000000000d44a         je         loc_d478

000000000000d44c         mov        eax, dword [r12]
000000000000d450         test       eax, eax
000000000000d452         je         loc_d4b8

000000000000d454         cmp        eax, 0x22
000000000000d457         mov        ebp, 0x1
000000000000d45c         jne        loc_d488

                     loc_d45e:
000000000000d45e         test       r13, r13                                    ; CODE XREF=xstrtoul+266
000000000000d461         je         loc_d46c

000000000000d463         movzx      r12d, byte [rcx]
000000000000d467         test       r12b, r12b
000000000000d46a         jne        loc_d4e7

                     loc_d46c:
000000000000d46c         mov        qword [r14], rbx                            ; CODE XREF=xstrtoul+177
000000000000d46f         jmp        loc_d48d
000000000000d471         align      8

                     loc_d478:
000000000000d478         test       r13, r13                                    ; CODE XREF=xstrtoul+154
000000000000d47b         mov        qword [rsp+0x58+var_50], rcx
000000000000d480         jne        loc_d4c0

000000000000d482         nop        word [rax+rax]

                     loc_d488:
000000000000d488         mov        ebp, 0x4                                    ; CODE XREF=xstrtoul+132, xstrtoul+172, xstrtoul+280, xstrtoul+309

                     loc_d48d:
000000000000d48d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoul+191, xstrtoul+535, xstrtoul+546
000000000000d492         xor        rdi, qword [fs:0x28]
000000000000d49b         mov        eax, ebp
000000000000d49d         jne        loc_d730

000000000000d4a3         add        rsp, 0x28
000000000000d4a7         pop        rbx
000000000000d4a8         pop        rbp
000000000000d4a9         pop        r12
000000000000d4ab         pop        r13
000000000000d4ad         pop        r14
000000000000d4af         pop        r15
000000000000d4b1         ret
                        ; endp
000000000000d4b2         align      8

                     loc_d4b8:
000000000000d4b8         xor        ebp, ebp                                    ; CODE XREF=xstrtoul+162
000000000000d4ba         jmp        loc_d45e
000000000000d4bc         align      64

                     loc_d4c0:
000000000000d4c0         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoul+208
000000000000d4c5         test       r12b, r12b
000000000000d4c8         je         loc_d488

000000000000d4ca         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000d4ce         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000d4d1         xor        ebp, ebp
000000000000d4d3         call       j_strchr                                    ; strchr
000000000000d4d8         test       rax, rax
000000000000d4db         mov        ebx, 0x1
000000000000d4e0         mov        rcx, qword [rsp+0x58+var_50]
000000000000d4e5         je         loc_d488

                     loc_d4e7:
000000000000d4e7         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoul+186
000000000000d4eb         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000d4ee         mov        qword [rsp+0x58+var_50], rcx
000000000000d4f3         call       j_strchr                                    ; strchr
000000000000d4f8         test       rax, rax
000000000000d4fb         mov        rcx, qword [rsp+0x58+var_50]
000000000000d500         je         loc_d5cc

000000000000d506         lea        eax, dword [r12-0x45]
000000000000d50b         cmp        al, 0x2f
000000000000d50d         ja         loc_d560

000000000000d50f         movabs     rdx, 0x814400308945
000000000000d519         bt         rdx, rax
000000000000d51d         jae        loc_d560

000000000000d51f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000d524         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000d527         mov        qword [rsp+0x58+var_50], rcx
000000000000d52c         call       j_strchr                                    ; strchr
000000000000d531         test       rax, rax
000000000000d534         mov        rcx, qword [rsp+0x58+var_50]
000000000000d539         je         loc_d560

000000000000d53b         movzx      eax, byte [rcx+1]
000000000000d53f         cmp        al, 0x44
000000000000d541         je         loc_d54f

000000000000d543         cmp        al, 0x69
000000000000d545         je         loc_d718

000000000000d54b         cmp        al, 0x42
000000000000d54d         jne        loc_d560

                     loc_d54f:
000000000000d54f         mov        edi, 0x2                                    ; CODE XREF=xstrtoul+401
000000000000d554         mov        esi, 0x3e8
000000000000d559         jmp        loc_d56a
000000000000d55b         align      32

                     loc_d560:
000000000000d560         mov        edi, 0x1                                    ; CODE XREF=xstrtoul+349, xstrtoul+365, xstrtoul+393, xstrtoul+413
000000000000d565         mov        esi, 0x400

                     loc_d56a:
000000000000d56a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoul+425, xstrtoul+891
000000000000d56e         cmp        r12b, 0x35
000000000000d572         ja         loc_d5cc

000000000000d574         lea        rdx, qword [switch_table_22470]             ; switch_table_22470
000000000000d57b         movzx      r12d, r12b
000000000000d57f         movsxd     rax, dword [rdx+r12*4]
000000000000d583         add        rax, rdx
000000000000d586         jmp        rax                                         ; switch statement using table at 0x22470, with 54 cases, 0xd588,0xd5b0,0xd5cc,0xd5d7,0xd5ed,0xd604,0xd62a,0xd64f,0xd66f,0xd690,0xd6b3,0xd6d6,0xd6ec

                     loc_d588:
000000000000d588         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoul+470
000000000000d58b         mul        rsi
000000000000d58e         jo         loc_d781

000000000000d594         xor        r8d, r8d

                     loc_d597:
000000000000d597         mul        rsi                                         ; CODE XREF=xstrtoul+846, xstrtoul+862, xstrtoul+987
000000000000d59a         jo         loc_d772

000000000000d5a0         mov        rbx, rax

                     loc_d5a3:
000000000000d5a3         or         ebp, r8d                                    ; CODE XREF=xstrtoul+972
000000000000d5a6         nop        word [cs:rax+rax]

                     loc_d5b0:
000000000000d5b0         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoul+470, xstrtoul+571, xstrtoul+594, xstrtoul+632, xstrtoul+712, xstrtoul+727, xstrtoul+823
000000000000d5b3         mov        eax, ebp
000000000000d5b5         add        rcx, rdi
000000000000d5b8         or         eax, 0x2
000000000000d5bb         mov        qword [r15], rcx
000000000000d5be         cmp        byte [rcx], 0x0
000000000000d5c1         mov        qword [r14], rbx
000000000000d5c4         cmovne     ebp, eax
000000000000d5c7         jmp        loc_d48d

                     loc_d5cc:
000000000000d5cc         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoul+336, xstrtoul+450, xstrtoul+470
000000000000d5cf         or         ebp, 0x2
000000000000d5d2         jmp        loc_d48d

                     loc_d5d7:
000000000000d5d7         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoul+470
000000000000d5dc         mov        rax, rdx
000000000000d5df         mul        rbx
000000000000d5e2         jo         loc_d67e

000000000000d5e8         add        rbx, rbx
000000000000d5eb         jmp        loc_d5b0

                     loc_d5ed:
000000000000d5ed         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoul+470
000000000000d5f2         mov        rax, rdx
000000000000d5f5         mul        rbx
000000000000d5f8         jo         loc_d67e

000000000000d5fe         shl        rbx, 0x9
000000000000d602         jmp        loc_d5b0

                     loc_d604:
000000000000d604         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoul+470
000000000000d60a         xor        r9d, r9d
000000000000d60d         nop        dword [rax]

                     loc_d610:
000000000000d610         mov        rax, rbx                                    ; CODE XREF=xstrtoul+627
000000000000d613         mul        rsi
000000000000d616         mov        rbx, rax
000000000000d619         jo         loc_d7ae

                     loc_d61f:
000000000000d61f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1032
000000000000d623         jne        loc_d610

                     loc_d625:
000000000000d625         or         ebp, r9d                                    ; CODE XREF=xstrtoul+669, xstrtoul+701, xstrtoul+766, xstrtoul+801
000000000000d628         jmp        loc_d5b0

                     loc_d62a:
000000000000d62a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoul+470
000000000000d630         xor        r9d, r9d
000000000000d633         nop        dword [rax+rax]

                     loc_d638:
000000000000d638         mov        rax, rbx                                    ; CODE XREF=xstrtoul+667
000000000000d63b         mul        rsi
000000000000d63e         mov        rbx, rax
000000000000d641         jo         loc_d790

                     loc_d647:
000000000000d647         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1002
000000000000d64b         jne        loc_d638

000000000000d64d         jmp        loc_d625

                     loc_d64f:
000000000000d64f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoul+470
000000000000d655         xor        r9d, r9d

                     loc_d658:
000000000000d658         mov        rax, rbx                                    ; CODE XREF=xstrtoul+699
000000000000d65b         mul        rsi
000000000000d65e         mov        rbx, rax
000000000000d661         jo         loc_d763

                     loc_d667:
000000000000d667         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+957
000000000000d66b         jne        loc_d658

000000000000d66d         jmp        loc_d625

                     loc_d66f:
000000000000d66f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoul+470
000000000000d672         mul        rsi
000000000000d675         mov        rbx, rax
000000000000d678         jno        loc_d5b0

                     loc_d67e:
000000000000d67e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoul+562, xstrtoul+584, xstrtoul+817
000000000000d683         or         rbx, 0xffffffffffffffff
000000000000d687         jmp        loc_d5b0
000000000000d68c         align      16

                     loc_d690:
000000000000d690         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoul+470
000000000000d696         xor        r9d, r9d

                     loc_d699:
000000000000d699         mov        rax, rbx                                    ; CODE XREF=xstrtoul+764
000000000000d69c         mul        rsi
000000000000d69f         mov        rbx, rax
000000000000d6a2         jo         loc_d79f

                     loc_d6a8:
000000000000d6a8         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1017
000000000000d6ac         jne        loc_d699

000000000000d6ae         jmp        loc_d625

                     loc_d6b3:
000000000000d6b3         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoul+470
000000000000d6b9         xor        r9d, r9d

                     loc_d6bc:
000000000000d6bc         mov        rax, rbx                                    ; CODE XREF=xstrtoul+799
000000000000d6bf         mul        rsi
000000000000d6c2         mov        rbx, rax
000000000000d6c5         jo         loc_d754

                     loc_d6cb:
000000000000d6cb         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+942
000000000000d6cf         jne        loc_d6bc

000000000000d6d1         jmp        loc_d625

                     loc_d6d6:
000000000000d6d6         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoul+470
000000000000d6db         mov        rax, rdx
000000000000d6de         mul        rbx
000000000000d6e1         jo         loc_d67e

000000000000d6e3         shl        rbx, 0xa
000000000000d6e7         jmp        loc_d5b0

                     loc_d6ec:
000000000000d6ec         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoul+470
000000000000d6ef         mul        rsi
000000000000d6f2         jo         loc_d7bd

000000000000d6f8         xor        r8d, r8d

                     loc_d6fb:
000000000000d6fb         mul        rsi                                         ; CODE XREF=xstrtoul+1047
000000000000d6fe         jno        loc_d597

000000000000d704         mov        r8d, 0x1
000000000000d70a         or         rax, 0xffffffffffffffff
000000000000d70e         jmp        loc_d597
000000000000d713         align      8

                     loc_d718:
000000000000d718         xor        edi, edi                                    ; CODE XREF=xstrtoul+405
000000000000d71a         cmp        byte [rcx+2], 0x42
000000000000d71e         mov        esi, 0x400
000000000000d723         sete       dil
000000000000d727         lea        edi, dword [rdi+rdi+1]
000000000000d72b         jmp        loc_d56a

                     loc_d730:
000000000000d730         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoul+237
                        ; endp

                     loc_d735:
000000000000d735         lea        rcx, qword [__PRETTY_FUNCTION__.4162_22548] ; argument "__function" for method j___assert_fail, "xstrtoul", CODE XREF=xstrtoul+33
000000000000d73c         lea        rsi, qword [aCoreutils831li_22340]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000d743         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000d74a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000d74f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_d754:
000000000000d754         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+789
000000000000d75a         or         rbx, 0xffffffffffffffff
000000000000d75e         jmp        loc_d6cb

                     loc_d763:
000000000000d763         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+689
000000000000d769         or         rbx, 0xffffffffffffffff
000000000000d76d         jmp        loc_d667

                     loc_d772:
000000000000d772         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+490
000000000000d778         or         rbx, 0xffffffffffffffff
000000000000d77c         jmp        loc_d5a3

                     loc_d781:
000000000000d781         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoul+478
000000000000d785         mov        r8d, 0x1
000000000000d78b         jmp        loc_d597

                     loc_d790:
000000000000d790         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+657
000000000000d796         or         rbx, 0xffffffffffffffff
000000000000d79a         jmp        loc_d647

                     loc_d79f:
000000000000d79f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+754
000000000000d7a5         or         rbx, 0xffffffffffffffff
000000000000d7a9         jmp        loc_d6a8

                     loc_d7ae:
000000000000d7ae         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+617
000000000000d7b4         or         rbx, 0xffffffffffffffff
000000000000d7b8         jmp        loc_d61f

                     loc_d7bd:
000000000000d7bd         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+834
000000000000d7c3         or         rax, 0xffffffffffffffff
000000000000d7c7         jmp        loc_d6fb
000000000000d7cc         align      16                                          ; End of unwind block (FDE at 0x2532c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_31: int8_t, -49
        ;    var_32: int8_t, -50


                     xstrtol_fatal:
000000000000d7d0         push       r13                                         ; Begin of unwind block (FDE at 0x2537c), CODE XREF=main+847, main+5149
000000000000d7d2         push       r12
000000000000d7d4         mov        r10d, esi
000000000000d7d7         push       rbp
000000000000d7d8         push       rbx
000000000000d7d9         mov        r12, r8
000000000000d7dc         sub        rsp, 0x18
000000000000d7e0         mov        rax, qword [fs:0x28]
000000000000d7e9         mov        qword [rsp+0x38+var_30], rax
000000000000d7ee         xor        eax, eax
000000000000d7f0         cmp        edi, 0x3
000000000000d7f3         mov        ebp, dword [exit_failure]                   ; exit_failure
000000000000d7f9         ja         loc_d854

000000000000d7fb         cmp        edi, 0x2
000000000000d7fe         jae        loc_d84b

000000000000d800         sub        edi, 0x1
000000000000d803         lea        rsi, qword [aSsArgumentSToo]                ; "%s%s argument '%s' too large"
000000000000d80a         jne        loc_d846

                     loc_d80c:
000000000000d80c         test       r10d, r10d                                  ; CODE XREF=xstrtol_fatal+130, xstrtol_fatal+142
000000000000d80f         movsxd     rax, r10d
000000000000d812         js         loc_d862

000000000000d814         shl        rax, 0x5
000000000000d818         lea        rbx, qword [aSsArgumentSToo+29]             ; 0x22589
000000000000d81f         mov        r13, qword [rcx+rax]

                     loc_d823:
000000000000d823         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext, CODE XREF=xstrtol_fatal+170
000000000000d828         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000d82a         call       j_dcgettext                                 ; dcgettext
000000000000d82f         mov        r9, r12
000000000000d832         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000d835         mov        r8, r13
000000000000d838         mov        rcx, rbx
000000000000d83b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000d83d         mov        edi, ebp                                    ; argument "__status" for method j_error
000000000000d83f         xor        eax, eax
000000000000d841         call       j_error                                     ; error

                     loc_d846:
000000000000d846         call       j_abort                                     ; abort, CODE XREF=xstrtol_fatal+58, xstrtol_fatal+144
                        ; endp

                     loc_d84b:
000000000000d84b         lea        rsi, qword [aInvalidSuffixI]                ; "invalid suffix in %s%s argument '%s'", CODE XREF=xstrtol_fatal+46
000000000000d852         jmp        loc_d80c

                     loc_d854:
000000000000d854         cmp        edi, 0x4                                    ; CODE XREF=xstrtol_fatal+41
000000000000d857         lea        rsi, qword [aInvalidSsArgum]                ; "invalid %s%s argument '%s'"
000000000000d85e         je         loc_d80c

000000000000d860         jmp        loc_d846

                     loc_d862:
000000000000d862         lea        rbx, qword [aSsArgumentSToo+29]             ; 0x22589, CODE XREF=xstrtol_fatal+66
000000000000d869         mov        byte [rsp+0x38+var_32], dl
000000000000d86d         mov        byte [rsp+0x38+var_31], 0x0
000000000000d872         lea        r13, qword [rsp+0x38+var_32]
000000000000d877         sub        rbx, rax
000000000000d87a         jmp        loc_d823
000000000000d87c         align      128                                         ; End of unwind block (FDE at 0x2537c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
000000000000d880         push       r15                                         ; Begin of unwind block (FDE at 0x253a4), CODE XREF=human_options+170
000000000000d882         push       r14
000000000000d884         push       r13
000000000000d886         push       r12
000000000000d888         push       rbp
000000000000d889         push       rbx
000000000000d88a         sub        rsp, 0x28
000000000000d88e         mov        rax, qword [fs:0x28]
000000000000d897         mov        qword [rsp+0x58+var_40], rax
000000000000d89c         xor        eax, eax
000000000000d89e         cmp        edx, 0x24
000000000000d8a1         ja         loc_dc05

000000000000d8a7         lea        rax, qword [rsp+0x58+var_48]
000000000000d8ac         mov        r15, rsi
000000000000d8af         test       rsi, rsi
000000000000d8b2         mov        rbp, rdi
000000000000d8b5         mov        dword [rsp+0x58+var_50], edx
000000000000d8b9         mov        r14, rcx
000000000000d8bc         mov        r13, r8
000000000000d8bf         cmove      r15, rax
000000000000d8c3         call       j___errno_location                          ; __errno_location
000000000000d8c8         mov        dword [rax], 0x0
000000000000d8ce         mov        r12, rax
000000000000d8d1         movzx      ebx, byte [rbp]
000000000000d8d5         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d8da         mov        edx, dword [rsp+0x58+var_50]
000000000000d8de         mov        rsi, qword [rax]
000000000000d8e1         mov        rax, rbp
000000000000d8e4         jmp        loc_d8f7
000000000000d8e6         align      16

                     loc_d8f0:
000000000000d8f0         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
000000000000d8f4         movzx      ebx, byte [rax]

                     loc_d8f7:
000000000000d8f7         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
000000000000d8fa         test       byte [rsi+rcx*2+1], 0x20
000000000000d8ff         jne        loc_d8f0

000000000000d901         cmp        bl, 0x2d
000000000000d904         je         loc_d958

000000000000d906         xor        ecx, ecx
000000000000d908         mov        rsi, r15
000000000000d90b         mov        rdi, rbp
000000000000d90e         call       j___strtoul_internal                        ; __strtoul_internal
000000000000d913         mov        rcx, qword [r15]
000000000000d916         mov        rbx, rax
000000000000d919         cmp        rcx, rbp
000000000000d91c         je         loc_d948

000000000000d91e         mov        eax, dword [r12]
000000000000d922         test       eax, eax
000000000000d924         je         loc_d988

000000000000d926         cmp        eax, 0x22
000000000000d929         mov        ebp, 0x1
000000000000d92e         jne        loc_d958

                     loc_d930:
000000000000d930         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
000000000000d933         je         loc_d93e

000000000000d935         movzx      r12d, byte [rcx]
000000000000d939         test       r12b, r12b
000000000000d93c         jne        loc_d9b7

                     loc_d93e:
000000000000d93e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
000000000000d941         jmp        loc_d95d
000000000000d943         align      8

                     loc_d948:
000000000000d948         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000d94b         mov        qword [rsp+0x58+var_50], rcx
000000000000d950         jne        loc_d990

000000000000d952         nop        word [rax+rax]

                     loc_d958:
000000000000d958         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_d95d:
000000000000d95d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
000000000000d962         xor        rdi, qword [fs:0x28]
000000000000d96b         mov        eax, ebp
000000000000d96d         jne        loc_dc00

000000000000d973         add        rsp, 0x28
000000000000d977         pop        rbx
000000000000d978         pop        rbp
000000000000d979         pop        r12
000000000000d97b         pop        r13
000000000000d97d         pop        r14
000000000000d97f         pop        r15
000000000000d981         ret
                        ; endp
000000000000d982         align      8

                     loc_d988:
000000000000d988         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000d98a         jmp        loc_d930
000000000000d98c         align      16

                     loc_d990:
000000000000d990         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
000000000000d995         test       r12b, r12b
000000000000d998         je         loc_d958

000000000000d99a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000d99e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000d9a1         xor        ebp, ebp
000000000000d9a3         call       j_strchr                                    ; strchr
000000000000d9a8         test       rax, rax
000000000000d9ab         mov        ebx, 0x1
000000000000d9b0         mov        rcx, qword [rsp+0x58+var_50]
000000000000d9b5         je         loc_d958

                     loc_d9b7:
000000000000d9b7         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000d9bb         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000d9be         mov        qword [rsp+0x58+var_50], rcx
000000000000d9c3         call       j_strchr                                    ; strchr
000000000000d9c8         test       rax, rax
000000000000d9cb         mov        rcx, qword [rsp+0x58+var_50]
000000000000d9d0         je         loc_da9c

000000000000d9d6         lea        eax, dword [r12-0x45]
000000000000d9db         cmp        al, 0x2f
000000000000d9dd         ja         loc_da30

000000000000d9df         movabs     rdx, 0x814400308945
000000000000d9e9         bt         rdx, rax
000000000000d9ed         jae        loc_da30

000000000000d9ef         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000d9f4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000d9f7         mov        qword [rsp+0x58+var_50], rcx
000000000000d9fc         call       j_strchr                                    ; strchr
000000000000da01         test       rax, rax
000000000000da04         mov        rcx, qword [rsp+0x58+var_50]
000000000000da09         je         loc_da30

000000000000da0b         movzx      eax, byte [rcx+1]
000000000000da0f         cmp        al, 0x44
000000000000da11         je         loc_da1f

000000000000da13         cmp        al, 0x69
000000000000da15         je         loc_dbe8

000000000000da1b         cmp        al, 0x42
000000000000da1d         jne        loc_da30

                     loc_da1f:
000000000000da1f         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
000000000000da24         mov        esi, 0x3e8
000000000000da29         jmp        loc_da3a
000000000000da2b         align      16

                     loc_da30:
000000000000da30         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
000000000000da35         mov        esi, 0x400

                     loc_da3a:
000000000000da3a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000da3e         cmp        r12b, 0x35
000000000000da42         ja         loc_da9c

000000000000da44         lea        rdx, qword [switch_table_225b8]             ; switch_table_225b8
000000000000da4b         movzx      r12d, r12b
000000000000da4f         movsxd     rax, dword [rdx+r12*4]
000000000000da53         add        rax, rdx
000000000000da56         jmp        rax                                         ; switch statement using table at 0x225b8, with 54 cases, 0xda58,0xda80,0xda9c,0xdaa7,0xdabd,0xdad4,0xdafa,0xdb1f,0xdb3f,0xdb60,0xdb83,0xdba6,0xdbbc

                     loc_da58:
000000000000da58         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000da5b         mul        rsi
000000000000da5e         jo         loc_dc51

000000000000da64         xor        r8d, r8d

                     loc_da67:
000000000000da67         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000da6a         jo         loc_dc42

000000000000da70         mov        rbx, rax

                     loc_da73:
000000000000da73         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
000000000000da76         nop        word [cs:rax+rax]

                     loc_da80:
000000000000da80         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
000000000000da83         mov        eax, ebp
000000000000da85         add        rcx, rdi
000000000000da88         or         eax, 0x2
000000000000da8b         mov        qword [r15], rcx
000000000000da8e         cmp        byte [rcx], 0x0
000000000000da91         mov        qword [r14], rbx
000000000000da94         cmovne     ebp, eax
000000000000da97         jmp        loc_d95d

                     loc_da9c:
000000000000da9c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000da9f         or         ebp, 0x2
000000000000daa2         jmp        loc_d95d

                     loc_daa7:
000000000000daa7         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000daac         mov        rax, rdx
000000000000daaf         mul        rbx
000000000000dab2         jo         loc_db4e

000000000000dab8         add        rbx, rbx
000000000000dabb         jmp        loc_da80

                     loc_dabd:
000000000000dabd         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
000000000000dac2         mov        rax, rdx
000000000000dac5         mul        rbx
000000000000dac8         jo         loc_db4e

000000000000dace         shl        rbx, 0x9
000000000000dad2         jmp        loc_da80

                     loc_dad4:
000000000000dad4         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
000000000000dada         xor        r9d, r9d
000000000000dadd         nop        dword [rax]

                     loc_dae0:
000000000000dae0         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
000000000000dae3         mul        rsi
000000000000dae6         mov        rbx, rax
000000000000dae9         jo         loc_dc7e

                     loc_daef:
000000000000daef         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
000000000000daf3         jne        loc_dae0

                     loc_daf5:
000000000000daf5         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
000000000000daf8         jmp        loc_da80

                     loc_dafa:
000000000000dafa         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
000000000000db00         xor        r9d, r9d
000000000000db03         nop        dword [rax+rax]

                     loc_db08:
000000000000db08         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
000000000000db0b         mul        rsi
000000000000db0e         mov        rbx, rax
000000000000db11         jo         loc_dc60

                     loc_db17:
000000000000db17         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
000000000000db1b         jne        loc_db08

000000000000db1d         jmp        loc_daf5

                     loc_db1f:
000000000000db1f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
000000000000db25         xor        r9d, r9d

                     loc_db28:
000000000000db28         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000db2b         mul        rsi
000000000000db2e         mov        rbx, rax
000000000000db31         jo         loc_dc33

                     loc_db37:
000000000000db37         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000db3b         jne        loc_db28

000000000000db3d         jmp        loc_daf5

                     loc_db3f:
000000000000db3f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
000000000000db42         mul        rsi
000000000000db45         mov        rbx, rax
000000000000db48         jno        loc_da80

                     loc_db4e:
000000000000db4e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
000000000000db53         or         rbx, 0xffffffffffffffff
000000000000db57         jmp        loc_da80
000000000000db5c         align      32

                     loc_db60:
000000000000db60         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
000000000000db66         xor        r9d, r9d

                     loc_db69:
000000000000db69         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000db6c         mul        rsi
000000000000db6f         mov        rbx, rax
000000000000db72         jo         loc_dc6f

                     loc_db78:
000000000000db78         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000db7c         jne        loc_db69

000000000000db7e         jmp        loc_daf5

                     loc_db83:
000000000000db83         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
000000000000db89         xor        r9d, r9d

                     loc_db8c:
000000000000db8c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000db8f         mul        rsi
000000000000db92         mov        rbx, rax
000000000000db95         jo         loc_dc24

                     loc_db9b:
000000000000db9b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000db9f         jne        loc_db8c

000000000000dba1         jmp        loc_daf5

                     loc_dba6:
000000000000dba6         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000dbab         mov        rax, rdx
000000000000dbae         mul        rbx
000000000000dbb1         jo         loc_db4e

000000000000dbb3         shl        rbx, 0xa
000000000000dbb7         jmp        loc_da80

                     loc_dbbc:
000000000000dbbc         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000dbbf         mul        rsi
000000000000dbc2         jo         loc_dc8d

000000000000dbc8         xor        r8d, r8d

                     loc_dbcb:
000000000000dbcb         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000dbce         jno        loc_da67

000000000000dbd4         mov        r8d, 0x1
000000000000dbda         or         rax, 0xffffffffffffffff
000000000000dbde         jmp        loc_da67
000000000000dbe3         align      8

                     loc_dbe8:
000000000000dbe8         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
000000000000dbea         cmp        byte [rcx+2], 0x42
000000000000dbee         mov        esi, 0x400
000000000000dbf3         sete       dil
000000000000dbf7         lea        edi, dword [rdi+rdi+1]
000000000000dbfb         jmp        loc_da3a

                     loc_dc00:
000000000000dc00         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_dc05:
000000000000dc05         lea        rcx, qword [__PRETTY_FUNCTION__.4162_22690] ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
000000000000dc0c         lea        rsi, qword [aCoreutils831li_22340]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000dc13         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000dc1a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000dc1f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_dc24:
000000000000dc24         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000dc2a         or         rbx, 0xffffffffffffffff
000000000000dc2e         jmp        loc_db9b

                     loc_dc33:
000000000000dc33         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
000000000000dc39         or         rbx, 0xffffffffffffffff
000000000000dc3d         jmp        loc_db37

                     loc_dc42:
000000000000dc42         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
000000000000dc48         or         rbx, 0xffffffffffffffff
000000000000dc4c         jmp        loc_da73

                     loc_dc51:
000000000000dc51         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
000000000000dc55         mov        r8d, 0x1
000000000000dc5b         jmp        loc_da67

                     loc_dc60:
000000000000dc60         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
000000000000dc66         or         rbx, 0xffffffffffffffff
000000000000dc6a         jmp        loc_db17

                     loc_dc6f:
000000000000dc6f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
000000000000dc75         or         rbx, 0xffffffffffffffff
000000000000dc79         jmp        loc_db78

                     loc_dc7e:
000000000000dc7e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
000000000000dc84         or         rbx, 0xffffffffffffffff
000000000000dc88         jmp        loc_daef

                     loc_dc8d:
000000000000dc8d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
000000000000dc93         or         rax, 0xffffffffffffffff
000000000000dc97         jmp        loc_dbcb
000000000000dc9c         align      32                                          ; End of unwind block (FDE at 0x253a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000dca0         push       r12                                         ; Begin of unwind block (FDE at 0x253f4), CODE XREF=main+3787, add_exclude_file+87, read_file_system_list+711, read_file_system_list+2094, close_stream+21
000000000000dca2         push       rbp
000000000000dca3         push       rbx
000000000000dca4         mov        rbx, rdi
000000000000dca7         call       j_fileno                                    ; fileno
000000000000dcac         test       eax, eax
000000000000dcae         mov        rdi, rbx
000000000000dcb1         js         loc_dd07

000000000000dcb3         call       j___freading                                ; __freading
000000000000dcb8         test       eax, eax
000000000000dcba         jne        loc_dce8

                     loc_dcbc:
000000000000dcbc         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000dcbf         call       rpl_fflush                                  ; rpl_fflush
000000000000dcc4         test       eax, eax
000000000000dcc6         je         loc_dd04

000000000000dcc8         call       j___errno_location                          ; __errno_location
000000000000dccd         mov        r12d, dword [rax]
000000000000dcd0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000dcd3         mov        rbp, rax
000000000000dcd6         call       j_fclose                                    ; fclose
000000000000dcdb         test       r12d, r12d
000000000000dcde         jne        loc_dd10

                     loc_dce0:
000000000000dce0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000dce1         pop        rbp
000000000000dce2         pop        r12
000000000000dce4         ret
                        ; endp
000000000000dce5         align      8

                     loc_dce8:
000000000000dce8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000dceb         call       j_fileno                                    ; fileno
000000000000dcf0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000dcf2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000dcf7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000dcf9         call       j_lseek                                     ; lseek
000000000000dcfe         cmp        rax, 0xffffffffffffffff
000000000000dd02         jne        loc_dcbc

                     loc_dd04:
000000000000dd04         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_dd07:
000000000000dd07         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000dd08         pop        rbp
000000000000dd09         pop        r12
000000000000dd0b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_dd10:
000000000000dd10         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000dd14         mov        eax, 0xffffffff
000000000000dd19         jmp        loc_dce0
000000000000dd1b         align      32                                          ; End of unwind block (FDE at 0x253f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000dd20         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x2542c), CODE XREF=rpl_fclose+31
000000000000dd23         push       rbx
000000000000dd24         mov        rbx, rdi
000000000000dd27         je         loc_dd3a

000000000000dd29         call       j___freading                                ; __freading
000000000000dd2e         test       eax, eax
000000000000dd30         je         loc_dd3a

000000000000dd32         test       dword [rbx], 0x100
000000000000dd38         jne        loc_dd48

                     loc_dd3a:
000000000000dd3a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000dd3d         pop        rbx
000000000000dd3e         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000dd43         align      8

                     loc_dd48:
000000000000dd48         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000dd4b         mov        edx, 0x1
000000000000dd50         xor        esi, esi
000000000000dd52         call       rpl_fseeko                                  ; rpl_fseeko
000000000000dd57         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000dd5a         pop        rbx
000000000000dd5b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000dd60         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x2542c), Begin of unwind block (FDE at 0x2544c), CODE XREF=rpl_fflush+50
000000000000dd64         cmp        qword [rdi+0x10], rax
000000000000dd68         je         loc_dd70

                     j_j_fseeko:        // fseeko
000000000000dd6a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000dd6f         align      16

                     loc_dd70:
000000000000dd70         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000dd74         cmp        qword [rdi+0x28], rax
000000000000dd78         jne        j_j_fseeko                                  ; fseeko

000000000000dd7a         cmp        qword [rdi+0x48], 0x0
000000000000dd7f         jne        j_j_fseeko                                  ; fseeko

000000000000dd81         push       r12
000000000000dd83         push       rbp
000000000000dd84         mov        r12d, edx
000000000000dd87         push       rbx
000000000000dd88         mov        rbp, rsi
000000000000dd8b         mov        rbx, rdi
000000000000dd8e         call       j_fileno                                    ; fileno
000000000000dd93         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000dd96         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000dd99         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000dd9b         call       j_lseek                                     ; lseek
000000000000dda0         cmp        rax, 0xffffffffffffffff
000000000000dda4         je         loc_ddb2

000000000000dda6         and        dword [rbx], 0xffffffef
000000000000dda9         mov        qword [rbx+0x90], rax
000000000000ddb0         xor        eax, eax

                     loc_ddb2:
000000000000ddb2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000ddb3         pop        rbp
000000000000ddb4         pop        r12
000000000000ddb6         ret
                        ; endp
000000000000ddb7         align      64                                          ; End of unwind block (FDE at 0x2544c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_compare:
000000000000ddc0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x2547c), DATA XREF=setup_dir.isra.4+19
000000000000ddc2         mov        rdx, qword [rsi+8]
000000000000ddc6         cmp        qword [rdi+8], rdx
000000000000ddca         je         loc_ddd0

000000000000ddcc         ret
                        ; endp
000000000000ddce         align      16

                     loc_ddd0:
000000000000ddd0         mov        rax, qword [rsi]                            ; CODE XREF=AD_compare+10
000000000000ddd3         cmp        qword [rdi], rax
000000000000ddd6         sete       al
000000000000ddd9         ret
                        ; endp
000000000000ddda         align      32                                          ; End of unwind block (FDE at 0x2547c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_hash:
000000000000dde0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x25490), DATA XREF=setup_dir.isra.4+26
000000000000dde4         xor        edx, edx
000000000000dde6         div        rsi
000000000000dde9         mov        rax, rdx
000000000000ddec         ret
                        ; endp
000000000000dded         align      16                                          ; End of unwind block (FDE at 0x25490)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_hash:
000000000000ddf0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x254a4), DATA XREF=filesystem_type+110
000000000000ddf3         xor        edx, edx
000000000000ddf5         div        rsi
000000000000ddf8         mov        rax, rdx
000000000000ddfb         ret
                        ; endp
000000000000ddfc         align      512                                         ; End of unwind block (FDE at 0x254a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_compare:
000000000000de00         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0x254b8), DATA XREF=filesystem_type+103
000000000000de03         cmp        qword [rdi], rax
000000000000de06         sete       al
000000000000de09         ret
                        ; endp
000000000000de0a         align      16                                          ; End of unwind block (FDE at 0x254b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_compare_ino:
000000000000de10         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0x254cc), DATA XREF=fts_build+2040
000000000000de13         mov        rax, qword [rsi]
000000000000de16         mov        rax, qword [rax+0x80]
000000000000de1d         cmp        qword [rdx+0x80], rax
000000000000de24         jb         loc_de30

000000000000de26         seta       al
000000000000de29         movzx      eax, al
000000000000de2c         ret
                        ; endp
000000000000de2d         align      16

                     loc_de30:
000000000000de30         mov        eax, 0xffffffff                             ; CODE XREF=fts_compare_ino+20
000000000000de35         ret
                        ; endp
000000000000de36         align      64                                          ; End of unwind block (FDE at 0x254cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_stat:
000000000000de40         push       r12                                         ; Begin of unwind block (FDE at 0x254e0), CODE XREF=fts_build+1104, fts_build+1543, fts_build+2136, rpl_fts_open+765, rpl_fts_read+440, rpl_fts_read+645, rpl_fts_read+1452, rpl_fts_read+1624
000000000000de42         push       rbp
000000000000de43         mov        rbp, rsi
000000000000de46         push       rbx
000000000000de47         cmp        qword [rbp+0x58], 0x0
000000000000de4c         lea        rbx, qword [rsi+0x78]
000000000000de50         mov        r12, rdi
000000000000de53         mov        eax, dword [rdi+0x48]
000000000000de56         mov        rsi, qword [rsi+0x30]
000000000000de5a         jne        loc_dec0

000000000000de5c         test       al, 0x1
000000000000de5e         je         loc_dec0

                     loc_de60:
000000000000de60         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=fts_stat+130, fts_stat+134
000000000000de63         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000de68         call       j___xstat                                   ; __xstat
000000000000de6d         test       eax, eax
000000000000de6f         je         loc_deeb

000000000000de71         call       j___errno_location                          ; __errno_location
000000000000de76         mov        r12, rax
000000000000de79         mov        eax, dword [rax]
000000000000de7b         cmp        eax, 0x2
000000000000de7e         je         loc_df90

                     loc_de84:
000000000000de84         lea        rdi, qword [rbx+8]                          ; CODE XREF=fts_stat+327, fts_stat+361
000000000000de88         mov        dword [rbp+0x40], eax
000000000000de8b         mov        qword [rbp+0x78], 0x0
000000000000de93         mov        qword [rbx+0x88], 0x0
000000000000de9e         xor        eax, eax
000000000000dea0         and        rdi, 0xfffffffffffffff8
000000000000dea4         sub        rbx, rdi
000000000000dea7         lea        ecx, dword [rbx+0x90]
000000000000dead         shr        ecx, 0x3
000000000000deb0         rep stosq  qword [rdi], rax
000000000000deb3         mov        eax, 0xa

                     loc_deb8:
000000000000deb8         pop        rbx                                         ; CODE XREF=fts_stat+278, fts_stat+310, fts_stat+397, fts_stat+413, fts_stat+442
000000000000deb9         pop        rbp
000000000000deba         pop        r12
000000000000debc         ret
                        ; endp
000000000000debd         align      64

                     loc_dec0:
000000000000dec0         test       al, 0x2                                     ; CODE XREF=fts_stat+26, fts_stat+30
000000000000dec2         jne        loc_de60

000000000000dec4         test       dl, dl
000000000000dec6         jne        loc_de60

000000000000dec8         mov        rdx, rsi                                    ; argument "__filename" for method j___fxstatat
000000000000decb         mov        esi, dword [r12+0x2c]                       ; argument "__fildes" for method j___fxstatat
000000000000ded0         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000ded6         mov        rcx, rbx                                    ; argument "__stat_buf" for method j___fxstatat
000000000000ded9         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000dede         call       j___fxstatat                                ; __fxstatat
000000000000dee3         test       eax, eax
000000000000dee5         jne        loc_df80

                     loc_deeb:
000000000000deeb         mov        eax, dword [rbp+0x90]                       ; CODE XREF=fts_stat+47
000000000000def1         and        eax, 0xf000
000000000000def6         cmp        eax, __do_global_dtors_aux
000000000000defb         je         loc_df20

000000000000defd         cmp        eax, 0xa000
000000000000df02         je         loc_dfd8

000000000000df08         cmp        eax, 0x8000
000000000000df0d         sete       al
000000000000df10         movzx      eax, al
000000000000df13         pop        rbx
000000000000df14         lea        eax, dword [rax+rax*4+3]
000000000000df18         pop        rbp
000000000000df19         pop        r12
000000000000df1b         ret
                        ; endp
000000000000df1c         align      32

                     loc_df20:
000000000000df20         mov        rax, qword [rbp+0x88]                       ; CODE XREF=fts_stat+187
000000000000df27         cmp        rax, 0x1
000000000000df2b         jbe        loc_dfb0

000000000000df31         cmp        qword [rbp+0x58], 0x0
000000000000df36         jle        loc_dfb0

000000000000df38         test       byte [r12+0x48], 0x20
000000000000df3e         lea        rdx, qword [rax-2]
000000000000df42         cmove      rax, rdx

                     loc_df46:
000000000000df46         cmp        byte [rbp+0x108], 0x2e                      ; CODE XREF=fts_stat+375
000000000000df4d         mov        qword [rbp+0x68], rax
000000000000df51         mov        eax, 0x1
000000000000df56         jne        loc_deb8

000000000000df5c         cmp        byte [rbp+0x109], 0x0
000000000000df63         jne        loc_dfe8

                     loc_df69:
000000000000df69         cmp        qword [rbp+0x58], 0x1                       ; CODE XREF=fts_stat+448
000000000000df6e         sbb        eax, eax
000000000000df70         and        eax, 0xfffffffc
000000000000df73         add        eax, 0x5
000000000000df76         jmp        loc_deb8
000000000000df7b         align      128

                     loc_df80:
000000000000df80         call       j___errno_location                          ; __errno_location, CODE XREF=fts_stat+165
000000000000df85         mov        eax, dword [rax]
000000000000df87         jmp        loc_de84
000000000000df8c         align      16

                     loc_df90:
000000000000df90         mov        rsi, qword [rbp+0x30]                       ; argument "__filename" for method j___lxstat, CODE XREF=fts_stat+62
000000000000df94         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___lxstat
000000000000df97         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
000000000000df9c         call       j___lxstat                                  ; __lxstat
000000000000dfa1         test       eax, eax
000000000000dfa3         je         loc_dfc0

000000000000dfa5         mov        eax, dword [r12]
000000000000dfa9         jmp        loc_de84
000000000000dfae         align      16

                     loc_dfb0:
000000000000dfb0         mov        rax, 0xffffffffffffffff                     ; CODE XREF=fts_stat+235, fts_stat+246
000000000000dfb7         jmp        loc_df46
000000000000dfb9         align      64

                     loc_dfc0:
000000000000dfc0         mov        dword [r12], 0x0                            ; CODE XREF=fts_stat+355
000000000000dfc8         mov        eax, 0xd
000000000000dfcd         jmp        loc_deb8
000000000000dfd2         align      8

                     loc_dfd8:
000000000000dfd8         mov        eax, 0xc                                    ; CODE XREF=fts_stat+194
000000000000dfdd         jmp        loc_deb8
000000000000dfe2         align      8

                     loc_dfe8:
000000000000dfe8         mov        edx, dword [rbp+0x108]                      ; CODE XREF=fts_stat+291
000000000000dfee         and        edx, 0xffff00
000000000000dff4         cmp        edx, 0x2e00
000000000000dffa         jne        loc_deb8

000000000000e000         jmp        loc_df69
000000000000e005         align      16                                          ; End of unwind block (FDE at 0x254e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_sort:
000000000000e010         push       r13                                         ; Begin of unwind block (FDE at 0x2551c), CODE XREF=fts_build+1825, fts_build+2062, rpl_fts_open+548
000000000000e012         push       r12
000000000000e014         mov        r12, rdx
000000000000e017         push       rbp
000000000000e018         push       rbx
000000000000e019         mov        rbp, rdi
000000000000e01c         mov        rbx, rsi
000000000000e01f         sub        rsp, 0x8
000000000000e023         cmp        qword [rbp+0x38], rdx
000000000000e027         mov        r13, qword [rdi+0x40]
000000000000e02b         mov        rdi, qword [rdi+0x10]
000000000000e02f         jae        loc_e065

000000000000e031         lea        rsi, qword [rdx+0x28]
000000000000e035         movabs     rax, 0x1fffffffffffffff
000000000000e03f         cmp        rsi, rax
000000000000e042         mov        qword [rbp+0x38], rsi
000000000000e046         ja         loc_e0e4

000000000000e04c         shl        rsi, 0x3                                    ; argument "__size" for method j_realloc
000000000000e050         call       j_realloc                                   ; realloc
000000000000e055         test       rax, rax
000000000000e058         mov        rdi, rax
000000000000e05b         je         loc_e0e0

000000000000e061         mov        qword [rbp+0x10], rax

                     loc_e065:
000000000000e065         test       rbx, rbx                                    ; CODE XREF=fts_sort+31
000000000000e068         je         loc_e081

000000000000e06a         mov        rdx, rdi
000000000000e06d         nop        dword [rax]

                     loc_e070:
000000000000e070         add        rdx, 0x8                                    ; CODE XREF=fts_sort+111
000000000000e074         mov        qword [rdx-8], rbx
000000000000e078         mov        rbx, qword [rbx+0x10]
000000000000e07c         test       rbx, rbx
000000000000e07f         jne        loc_e070

                     loc_e081:
000000000000e081         mov        rcx, r13                                    ; argument "__compar" for method j_qsort, CODE XREF=fts_sort+88
000000000000e084         mov        edx, 0x8                                    ; argument "__size" for method j_qsort
000000000000e089         mov        rsi, r12                                    ; argument "__nmemb" for method j_qsort
000000000000e08c         call       j_qsort                                     ; qsort
000000000000e091         mov        r8, qword [rbp+0x10]
000000000000e095         mov        rcx, r12
000000000000e098         sub        rcx, 0x1
000000000000e09c         mov        rax, qword [r8]
000000000000e09f         je         loc_e110

000000000000e0a1         mov        rdi, rax
000000000000e0a4         mov        rdx, r8
000000000000e0a7         jmp        loc_e0b3
000000000000e0a9         align      16

                     loc_e0b0:
000000000000e0b0         mov        rdi, qword [rdx]                            ; CODE XREF=fts_sort+179

                     loc_e0b3:
000000000000e0b3         mov        rsi, qword [rdx+8]                          ; CODE XREF=fts_sort+151
000000000000e0b7         add        rdx, 0x8
000000000000e0bb         sub        rcx, 0x1
000000000000e0bf         mov        qword [rdi+0x10], rsi
000000000000e0c3         jne        loc_e0b0

000000000000e0c5         mov        rdx, qword [r8+r12*8-8]

                     loc_e0ca:
000000000000e0ca         mov        qword [rdx+0x10], 0x0                       ; CODE XREF=fts_sort+259
000000000000e0d2         add        rsp, 0x8
000000000000e0d6         pop        rbx
000000000000e0d7         pop        rbp
000000000000e0d8         pop        r12
000000000000e0da         pop        r13
000000000000e0dc         ret
                        ; endp
000000000000e0dd         align      32

                     loc_e0e0:
000000000000e0e0         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=fts_sort+75

                     loc_e0e4:
000000000000e0e4         call       sub_2a10                                    ; sub_2a10, CODE XREF=fts_sort+54
000000000000e0e9         mov        qword [rbp+0x10], 0x0
000000000000e0f1         mov        qword [rbp+0x38], 0x0
000000000000e0f9         add        rsp, 0x8
000000000000e0fd         mov        rax, rbx
000000000000e100         pop        rbx
000000000000e101         pop        rbp
000000000000e102         pop        r12
000000000000e104         pop        r13
000000000000e106         ret
                        ; endp
000000000000e107         align      16

                     loc_e110:
000000000000e110         mov        rdx, rax                                    ; CODE XREF=fts_sort+143
000000000000e113         jmp        loc_e0ca
000000000000e115         align      32                                          ; End of unwind block (FDE at 0x2551c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_alloc:
000000000000e120         push       r13                                         ; Begin of unwind block (FDE at 0x2556c), CODE XREF=fts_build+556, rpl_fts_open+231, rpl_fts_open+334, rpl_fts_open+568
000000000000e122         push       r12
000000000000e124         mov        r12, rdi
000000000000e127         push       rbp
000000000000e128         lea        rdi, qword [rdx+0x110]
000000000000e12f         push       rbx
000000000000e130         mov        r13, rsi
000000000000e133         mov        rbp, rdx
000000000000e136         sub        rsp, 0x8
000000000000e13a         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
000000000000e13e         call       j_malloc                                    ; malloc
000000000000e143         test       rax, rax
000000000000e146         mov        rbx, rax
000000000000e149         je         loc_e19c

000000000000e14b         lea        rdi, qword [rax+0x108]                      ; argument "__dest" for method j_memcpy
000000000000e152         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000e155         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000e158         call       j_memcpy                                    ; memcpy
000000000000e15d         mov        rax, qword [r12+0x20]
000000000000e162         mov        byte [rbx+rbp+0x108], 0x0
000000000000e16a         mov        qword [rbx+0x60], rbp
000000000000e16e         mov        qword [rbx+0x50], r12
000000000000e172         mov        dword [rbx+0x40], 0x0
000000000000e179         mov        qword [rbx+0x18], 0x0
000000000000e181         mov        qword [rbx+0x38], rax
000000000000e185         mov        dword [rbx+0x72], 0x30000
000000000000e18c         mov        qword [rbx+0x20], 0x0
000000000000e194         mov        qword [rbx+0x28], 0x0

                     loc_e19c:
000000000000e19c         add        rsp, 0x8                                    ; CODE XREF=fts_alloc+41
000000000000e1a0         mov        rax, rbx
000000000000e1a3         pop        rbx
000000000000e1a4         pop        rbp
000000000000e1a5         pop        r12
000000000000e1a7         pop        r13
000000000000e1a9         ret
                        ; endp
000000000000e1aa         align      16                                          ; End of unwind block (FDE at 0x2556c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_lfree:
000000000000e1b0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x255a4), CODE XREF=fts_build+1638, fts_build+1893, fts_build+2281, fts_build+2418, rpl_fts_open+851, rpl_fts_close+92, rpl_fts_read+367, rpl_fts_read+1034, rpl_fts_children+75
000000000000e1b3         je         loc_e1f0

000000000000e1b5         push       rbp
000000000000e1b6         push       rbx
000000000000e1b7         mov        rbx, rdi
000000000000e1ba         sub        rsp, 0x8
000000000000e1be         nop

                     loc_e1c0:
000000000000e1c0         mov        rdi, qword [rbx+0x18]                       ; CODE XREF=fts_lfree+48
000000000000e1c4         mov        rbp, qword [rbx+0x10]
000000000000e1c8         test       rdi, rdi
000000000000e1cb         je         loc_e1d2

000000000000e1cd         call       j_closedir                                  ; closedir

                     loc_e1d2:
000000000000e1d2         mov        rdi, rbx                                    ; CODE XREF=fts_lfree+27
000000000000e1d5         mov        rbx, rbp
000000000000e1d8         call       sub_2a10                                    ; sub_2a10
000000000000e1dd         test       rbp, rbp
000000000000e1e0         jne        loc_e1c0

000000000000e1e2         add        rsp, 0x8
000000000000e1e6         pop        rbx
000000000000e1e7         pop        rbp
000000000000e1e8         ret
                        ; endp
000000000000e1e9         align      16

                     loc_e1f0:
000000000000e1f0         ret                                                    ; CODE XREF=fts_lfree+3
                        ; endp
000000000000e1f2         align      512                                         ; End of unwind block (FDE at 0x255a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_ring_clear:
000000000000e200         push       rbx                                         ; Begin of unwind block (FDE at 0x255d0), CODE XREF=restore_initial_cwd+44, rpl_fts_close+140
000000000000e201         mov        rbx, rdi
000000000000e204         jmp        loc_e21c
000000000000e206         align      16

                     loc_e210:
000000000000e210         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+38
000000000000e213         call       i_ring_pop                                  ; i_ring_pop
000000000000e218         test       eax, eax
000000000000e21a         jns        loc_e230

                     loc_e21c:
000000000000e21c         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+4, fd_ring_clear+55
000000000000e21f         call       i_ring_empty                                ; i_ring_empty
000000000000e224         test       al, al
000000000000e226         je         loc_e210

000000000000e228         pop        rbx
000000000000e229         ret
                        ; endp
000000000000e22a         align      16

                     loc_e230:
000000000000e230         mov        edi, eax                                    ; argument "__fd" for method j_close, CODE XREF=fd_ring_clear+26
000000000000e232         call       j_close                                     ; close
000000000000e237         jmp        loc_e21c
000000000000e239         align      64                                          ; End of unwind block (FDE at 0x255d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184


                     filesystem_type:
000000000000e240         push       r13                                         ; Begin of unwind block (FDE at 0x255ec), CODE XREF=leaf_optimization+4, fts_build+708
000000000000e242         push       r12
000000000000e244         push       rbp
000000000000e245         push       rbx
000000000000e246         sub        rsp, 0x98
000000000000e24d         mov        rbx, qword [rdi+0x50]
000000000000e251         mov        rax, qword [fs:0x28]
000000000000e25a         mov        qword [rsp+0xb8+var_30], rax
000000000000e262         xor        eax, eax
000000000000e264         test       byte [rbx+0x49], 0x2
000000000000e268         je         loc_e2d2

000000000000e26a         mov        r12, qword [rbx+0x50]
000000000000e26e         mov        rbp, rdi
000000000000e271         mov        r13d, esi
000000000000e274         test       r12, r12
000000000000e277         je         loc_e2a0

                     loc_e279:
000000000000e279         mov        rax, qword [rbp+0x78]                       ; CODE XREF=filesystem_type+139
000000000000e27d         mov        rsi, rsp
000000000000e280         mov        rdi, r12
000000000000e283         mov        qword [rsp+0xb8+var_B8], rax
000000000000e287         call       hash_lookup                                 ; hash_lookup
000000000000e28c         test       rax, rax
000000000000e28f         je         loc_e2cd

000000000000e291         mov        rbx, qword [rax+8]
000000000000e295         jmp        loc_e2d4
000000000000e297         align      32

                     loc_e2a0:
000000000000e2a0         mov        r8, qword [qword_227fc8]                    ; qword_227fc8, CODE XREF=filesystem_type+55
000000000000e2a7         lea        rcx, qword [dev_type_compare]               ; dev_type_compare
000000000000e2ae         lea        rdx, qword [dev_type_hash]                  ; dev_type_hash
000000000000e2b5         xor        esi, esi
000000000000e2b7         mov        edi, 0xd
000000000000e2bc         call       hash_initialize                             ; hash_initialize
000000000000e2c1         test       rax, rax
000000000000e2c4         mov        r12, rax
000000000000e2c7         mov        qword [rbx+0x50], rax
000000000000e2cb         jne        loc_e279

                     loc_e2cd:
000000000000e2cd         test       r13d, r13d                                  ; CODE XREF=filesystem_type+79
000000000000e2d0         jns        loc_e300

                     loc_e2d2:
000000000000e2d2         xor        ebx, ebx                                    ; CODE XREF=filesystem_type+40, filesystem_type+207

                     loc_e2d4:
000000000000e2d4         mov        rdx, qword [rsp+0xb8+var_30]                ; CODE XREF=filesystem_type+85, filesystem_type+217, filesystem_type+235, filesystem_type+275
000000000000e2dc         xor        rdx, qword [fs:0x28]
000000000000e2e5         mov        rax, rbx
000000000000e2e8         jne        loc_e362

000000000000e2ea         add        rsp, 0x98
000000000000e2f1         pop        rbx
000000000000e2f2         pop        rbp
000000000000e2f3         pop        r12
000000000000e2f5         pop        r13
000000000000e2f7         ret
                        ; endp
000000000000e2f8         align      256

                     loc_e300:
000000000000e300         lea        rsi, qword [rsp+0xb8+var_A8]                ; argument "__buf" for method j_fstatfs, CODE XREF=filesystem_type+144
000000000000e305         mov        edi, r13d                                   ; argument "__fildes" for method j_fstatfs
000000000000e308         call       j_fstatfs                                   ; fstatfs
000000000000e30d         test       eax, eax
000000000000e30f         jne        loc_e2d2

000000000000e311         test       r12, r12
000000000000e314         mov        rbx, qword [rsp+0xb8+var_A8]
000000000000e319         je         loc_e2d4

000000000000e31b         mov        edi, 0x10                                   ; argument "__size" for method j_malloc
000000000000e320         call       j_malloc                                    ; malloc
000000000000e325         test       rax, rax
000000000000e328         mov        r13, rax
000000000000e32b         je         loc_e2d4

000000000000e32d         mov        rax, qword [rbp+0x78]
000000000000e331         mov        qword [r13+8], rbx
000000000000e335         mov        rsi, r13
000000000000e338         mov        rdi, r12
000000000000e33b         mov        qword [r13], rax
000000000000e33f         call       hash_insert                                 ; hash_insert
000000000000e344         test       rax, rax
000000000000e347         je         loc_e358

000000000000e349         cmp        r13, rax
000000000000e34c         jne        loc_e367

                     loc_e34e:
000000000000e34e         mov        rbx, qword [rsp+0xb8+var_A8]                ; CODE XREF=filesystem_type+288
000000000000e353         jmp        loc_e2d4

                     loc_e358:
000000000000e358         mov        rdi, r13                                    ; CODE XREF=filesystem_type+263
000000000000e35b         call       sub_2a10                                    ; sub_2a10
000000000000e360         jmp        loc_e34e

                     loc_e362:
000000000000e362         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=filesystem_type+168
                        ; endp

                     loc_e367:
000000000000e367         call       j_abort                                     ; abort, CODE XREF=filesystem_type+268
                        ; endp
000000000000e36c         align      16                                          ; End of unwind block (FDE at 0x255ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     leaf_optimization:
000000000000e370         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x25628), CODE XREF=fts_build+2231, rpl_fts_read+1797
000000000000e374         call       filesystem_type                             ; filesystem_type
000000000000e379         cmp        rax, 0x52654973
000000000000e37f         je         loc_e3d0

000000000000e381         jle        loc_e3b0

000000000000e383         cmp        rax, 0x58465342
000000000000e389         je         loc_e3d0

000000000000e38b         mov        edx, 0xff534d42
000000000000e390         cmp        rax, rdx
000000000000e393         je         loc_e3c5

000000000000e395         cmp        rax, 0x5346414f
000000000000e39b         je         loc_e3c5

                     loc_e39d:
000000000000e39d         mov        eax, 0x1                                    ; CODE XREF=leaf_optimization+83
000000000000e3a2         add        rsp, 0x8
000000000000e3a6         ret
                        ; endp
000000000000e3a7         align      16

                     loc_e3b0:
000000000000e3b0         cmp        rax, 0x6969                                 ; CODE XREF=leaf_optimization+17
000000000000e3b6         je         loc_e3c5

000000000000e3b8         cmp        rax, 0x9fa0
000000000000e3be         je         loc_e3c5

000000000000e3c0         test       rax, rax
000000000000e3c3         jne        loc_e39d

                     loc_e3c5:
000000000000e3c5         xor        eax, eax                                    ; CODE XREF=leaf_optimization+35, leaf_optimization+43, leaf_optimization+70, leaf_optimization+78
000000000000e3c7         add        rsp, 0x8
000000000000e3cb         ret
                        ; endp
000000000000e3cc         align      16

                     loc_e3d0:
000000000000e3d0         mov        eax, 0x2                                    ; CODE XREF=leaf_optimization+15, leaf_optimization+25
000000000000e3d5         add        rsp, 0x8
000000000000e3d9         ret
                        ; endp
000000000000e3da         align      32                                          ; End of unwind block (FDE at 0x25628)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cwd_advance_fd:
000000000000e3e0         push       rbp                                         ; Begin of unwind block (FDE at 0x2564c), CODE XREF=restore_initial_cwd+74, fts_safe_changedir+542, rpl_fts_read+1279, rpl_fts_children+290
000000000000e3e1         push       rbx
000000000000e3e2         mov        ebp, esi
000000000000e3e4         mov        rbx, rdi
000000000000e3e7         sub        rsp, 0x8
000000000000e3eb         mov        esi, dword [rdi+0x2c]
000000000000e3ee         cmp        esi, ebp
000000000000e3f0         jne        loc_e3f7

000000000000e3f2         cmp        esi, 0xffffff9c
000000000000e3f5         jne        loc_e441

                     loc_e3f7:
000000000000e3f7         test       dl, dl                                      ; CODE XREF=cwd_advance_fd+16
000000000000e3f9         jne        loc_e410

000000000000e3fb         test       byte [rbx+0x48], 0x4
000000000000e3ff         jne        loc_e405

000000000000e401         test       esi, esi
000000000000e403         jns        loc_e430

                     loc_e405:
000000000000e405         mov        dword [rbx+0x2c], ebp                       ; CODE XREF=cwd_advance_fd+31, cwd_advance_fd+59
000000000000e408         add        rsp, 0x8
000000000000e40c         pop        rbx
000000000000e40d         pop        rbp
000000000000e40e         ret
                        ; endp
000000000000e40f         align      16

                     loc_e410:
000000000000e410         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=cwd_advance_fd+25
000000000000e414         call       i_ring_push                                 ; i_ring_push
000000000000e419         test       eax, eax
000000000000e41b         js         loc_e405

000000000000e41d         mov        edi, eax                                    ; argument "__fd" for method j_close
000000000000e41f         call       j_close                                     ; close
000000000000e424         mov        dword [rbx+0x2c], ebp
000000000000e427         add        rsp, 0x8
000000000000e42b         pop        rbx
000000000000e42c         pop        rbp
000000000000e42d         ret
                        ; endp
000000000000e42e         align      16

                     loc_e430:
000000000000e430         mov        edi, esi                                    ; argument "__fd" for method j_close, CODE XREF=cwd_advance_fd+35
000000000000e432         call       j_close                                     ; close
000000000000e437         mov        dword [rbx+0x2c], ebp
000000000000e43a         add        rsp, 0x8
000000000000e43e         pop        rbx
000000000000e43f         pop        rbp
000000000000e440         ret
                        ; endp

                     loc_e441:
000000000000e441         call       j_abort                                     ; abort, CODE XREF=cwd_advance_fd+21
                        ; endp
000000000000e446         align      16                                          ; End of unwind block (FDE at 0x2564c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     restore_initial_cwd:
000000000000e450         push       rbp                                         ; Begin of unwind block (FDE at 0x25690), CODE XREF=fts_build+1854, rpl_fts_read+675, rpl_fts_read+1171
000000000000e451         push       rbx
000000000000e452         mov        rbx, rdi
000000000000e455         sub        rsp, 0x8
000000000000e459         mov        edx, dword [rdi+0x48]
000000000000e45c         mov        ebp, edx
000000000000e45e         and        ebp, 0x4
000000000000e461         jne        loc_e4a8

000000000000e463         and        dh, 0x2
000000000000e466         jne        loc_e490

000000000000e468         mov        edi, dword [rdi+0x28]                       ; argument "__fd" for method j_fchdir
000000000000e46b         xor        ebp, ebp
000000000000e46d         call       j_fchdir                                    ; fchdir
000000000000e472         test       eax, eax
000000000000e474         setne      bpl

                     loc_e478:
000000000000e478         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=restore_initial_cwd+79, restore_initial_cwd+90
000000000000e47c         call       fd_ring_clear                               ; fd_ring_clear
000000000000e481         add        rsp, 0x8
000000000000e485         mov        eax, ebp
000000000000e487         pop        rbx
000000000000e488         pop        rbp
000000000000e489         ret
                        ; endp
000000000000e48a         align      16

                     loc_e490:
000000000000e490         mov        edx, 0x1                                    ; CODE XREF=restore_initial_cwd+22
000000000000e495         mov        esi, 0xffffff9c
000000000000e49a         call       cwd_advance_fd                              ; cwd_advance_fd
000000000000e49f         jmp        loc_e478
000000000000e4a1         align      8

                     loc_e4a8:
000000000000e4a8         xor        ebp, ebp                                    ; CODE XREF=restore_initial_cwd+17
000000000000e4aa         jmp        loc_e478
000000000000e4ac         align      16                                          ; End of unwind block (FDE at 0x25690)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_palloc.isra.2:
000000000000e4b0         push       rbx                                         ; Begin of unwind block (FDE at 0x256bc), CODE XREF=fts_build+611, rpl_fts_open+189
000000000000e4b1         mov        rcx, qword [rsi]
000000000000e4b4         mov        rbx, rdi
000000000000e4b7         mov        rdi, qword [rdi]
000000000000e4ba         lea        rax, qword [rcx+rdx+0x100]
000000000000e4c2         cmp        rcx, rax
000000000000e4c5         ja         loc_e4e8

000000000000e4c7         mov        qword [rsi], rax
000000000000e4ca         mov        rsi, rax                                    ; argument "__size" for method j_realloc
000000000000e4cd         call       j_realloc                                   ; realloc
000000000000e4d2         test       rax, rax
000000000000e4d5         je         loc_e508

000000000000e4d7         mov        qword [rbx], rax
000000000000e4da         mov        eax, 0x1
000000000000e4df         pop        rbx
000000000000e4e0         ret
                        ; endp
000000000000e4e1         align      8

                     loc_e4e8:
000000000000e4e8         call       sub_2a10                                    ; sub_2a10, CODE XREF=fts_palloc.isra.2+21
000000000000e4ed         mov        qword [rbx], 0x0
000000000000e4f4         call       j___errno_location                          ; __errno_location
000000000000e4f9         mov        dword [rax], 0x24
000000000000e4ff         xor        eax, eax
000000000000e501         pop        rbx
000000000000e502         ret
                        ; endp
000000000000e503         align      8

                     loc_e508:
000000000000e508         mov        rdi, qword [rbx]                            ; CODE XREF=fts_palloc.isra.2+37
000000000000e50b         call       sub_2a10                                    ; sub_2a10
000000000000e510         mov        qword [rbx], 0x0
000000000000e517         xor        eax, eax
000000000000e519         pop        rbx
000000000000e51a         ret
                        ; endp
000000000000e51b         align      32                                          ; End of unwind block (FDE at 0x256bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setup_dir.isra.4:
000000000000e520         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0x256e4), CODE XREF=rpl_fts_open+613, rpl_fts_read+837
000000000000e526         push       rbx
000000000000e527         mov        rbx, rsi
000000000000e52a         je         loc_e560

000000000000e52c         mov        r8, qword [qword_227fc8]                    ; qword_227fc8
000000000000e533         lea        rcx, qword [AD_compare]                     ; AD_compare
000000000000e53a         lea        rdx, qword [AD_hash]                        ; AD_hash
000000000000e541         xor        esi, esi
000000000000e543         mov        edi, 0x1f
000000000000e548         call       hash_initialize                             ; hash_initialize
000000000000e54d         test       rax, rax
000000000000e550         mov        qword [rbx], rax
000000000000e553         setne      al

                     loc_e556:
000000000000e556         pop        rbx                                         ; CODE XREF=setup_dir.isra.4+85
000000000000e557         ret
                        ; endp
000000000000e558         align      32

                     loc_e560:
000000000000e560         mov        edi, 0x20                                   ; argument "__size" for method j_malloc, CODE XREF=setup_dir.isra.4+10
000000000000e565         call       j_malloc                                    ; malloc
000000000000e56a         mov        rdi, rax
000000000000e56d         mov        qword [rbx], rax
000000000000e570         xor        eax, eax
000000000000e572         test       rdi, rdi
000000000000e575         je         loc_e556

000000000000e577         call       cycle_check_init                            ; cycle_check_init
000000000000e57c         mov        eax, 0x1
000000000000e581         pop        rbx
000000000000e582         ret
                        ; endp
000000000000e583         align      16                                          ; End of unwind block (FDE at 0x256e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     diropen.isra.6:
000000000000e590         mov        rax, rdx                                    ; Begin of unwind block (FDE at 0x25704), CODE XREF=fts_safe_changedir+141, rpl_fts_open+647, rpl_fts_read+1752, rpl_fts_read+1832, rpl_fts_children+202
000000000000e593         mov        edx, esi
000000000000e595         shl        edx, 0xd
000000000000e598         and        edx, 0x20000
000000000000e59e         or         edx, 0x90900
000000000000e5a4         and        esi, 0x200
000000000000e5aa         jne        loc_e5c0

000000000000e5ac         mov        rdi, rax
000000000000e5af         mov        esi, edx
000000000000e5b1         xor        eax, eax
000000000000e5b3         jmp        open_safer                                  ; open_safer
000000000000e5b8         align      64

                     loc_e5c0:
000000000000e5c0         mov        rsi, rax                                    ; CODE XREF=diropen.isra.6+26
000000000000e5c3         xor        eax, eax
000000000000e5c5         jmp        openat_safer                                ; openat_safer
000000000000e5ca         align      16                                          ; End of unwind block (FDE at 0x25704)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217


                     fts_safe_changedir:
000000000000e5d0         push       r15                                         ; Begin of unwind block (FDE at 0x25718), CODE XREF=fts_build+2169, fts_build+2194, rpl_fts_read+542, rpl_fts_read+1123
000000000000e5d2         push       r14
000000000000e5d4         mov        r14, rsi
000000000000e5d7         push       r13
000000000000e5d9         push       r12
000000000000e5db         mov        r13, rdi
000000000000e5de         push       rbp
000000000000e5df         push       rbx
000000000000e5e0         mov        r12d, edx
000000000000e5e3         mov        rbp, rcx
000000000000e5e6         sub        rsp, 0xb8
000000000000e5ed         mov        ebx, dword [rdi+0x48]
000000000000e5f0         mov        rax, qword [fs:0x28]
000000000000e5f9         mov        qword [rsp+0xe8+var_40], rax
000000000000e601         xor        eax, eax
000000000000e603         mov        r9d, ebx
000000000000e606         and        r9d, 0x4
000000000000e60a         test       rcx, rcx
000000000000e60d         je         loc_e6c0

000000000000e613         lea        rdx, qword [__PRETTY_FUNCTION__.4162_22690+11] ; 0x2269b
000000000000e61a         mov        ecx, 0x3
000000000000e61f         mov        rsi, rbp
000000000000e622         mov        rdi, rdx
000000000000e625         rep  cmpsb byte [rsi], byte [rdi]
000000000000e627         seta       al
000000000000e62a         sbb        al, 0x0
000000000000e62c         test       al, al
000000000000e62e         jne        loc_e6c0

000000000000e634         test       r9d, r9d
000000000000e637         jne        loc_e6c5

000000000000e63d         test       r12d, r12d
000000000000e640         jns        loc_e82a

000000000000e646         test       bh, 0x2
000000000000e649         jne        loc_e790

                     loc_e64f:
000000000000e64f         mov        byte [rsp+0xe8+var_D9], 0x1                 ; CODE XREF=fts_safe_changedir+489

                     loc_e654:
000000000000e654         mov        edi, dword [r13+0x2c]                       ; CODE XREF=fts_safe_changedir+466, fts_safe_changedir+629
000000000000e658         mov        rdx, rbp
000000000000e65b         mov        esi, ebx
000000000000e65d         call       diropen.isra.6                              ; diropen.isra.6
000000000000e662         test       eax, eax
000000000000e664         mov        r15d, eax
000000000000e667         js         loc_e81b

000000000000e66d         mov        ebx, dword [r13+0x48]
000000000000e671         test       bl, 0x2
000000000000e674         je         loc_e71a

000000000000e67a         nop        word [rax+rax]

                     loc_e680:
000000000000e680         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat, CODE XREF=fts_safe_changedir+324, fts_safe_changedir+362, fts_safe_changedir+512, fts_safe_changedir+619
000000000000e685         mov        esi, r15d                                   ; argument "__fildes" for method j___fxstat
000000000000e688         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000e68d         call       j___fxstat                                  ; __fxstat
000000000000e692         test       eax, eax
000000000000e694         je         loc_e760

                     loc_e69a:
000000000000e69a         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+426

                     loc_e69f:
000000000000e69f         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+387
000000000000e6a2         jns        loc_e6d5

000000000000e6a4         call       j___errno_location                          ; __errno_location
000000000000e6a9         mov        r12d, dword [rax]
000000000000e6ac         mov        rbp, rax
000000000000e6af         mov        edi, r15d                                   ; argument "__fd" for method j_close
000000000000e6b2         call       j_close                                     ; close
000000000000e6b7         mov        dword [rbp], r12d
000000000000e6bb         jmp        loc_e6d5
000000000000e6bd         align      64

                     loc_e6c0:
000000000000e6c0         test       r9d, r9d                                    ; CODE XREF=fts_safe_changedir+61, fts_safe_changedir+94
000000000000e6c3         je         loc_e700

                     loc_e6c5:
000000000000e6c5         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+103
000000000000e6c8         je         loc_e6d3

000000000000e6ca         test       r12d, r12d
000000000000e6cd         jns        loc_e780

                     loc_e6d3:
000000000000e6d3         xor        ebx, ebx                                    ; CODE XREF=fts_safe_changedir+248

                     loc_e6d5:
000000000000e6d5         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=fts_safe_changedir+210, fts_safe_changedir+235, fts_safe_changedir+442, fts_safe_changedir+547, fts_safe_changedir+592
000000000000e6dd         xor        rcx, qword [fs:0x28]
000000000000e6e6         mov        eax, ebx
000000000000e6e8         jne        loc_e825

000000000000e6ee         add        rsp, 0xb8
000000000000e6f5         pop        rbx
000000000000e6f6         pop        rbp
000000000000e6f7         pop        r12
000000000000e6f9         pop        r13
000000000000e6fb         pop        r14
000000000000e6fd         pop        r15
000000000000e6ff         ret
                        ; endp

                     loc_e700:
000000000000e700         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+243
000000000000e703         js         loc_e840

000000000000e709         test       bl, 0x2
000000000000e70c         mov        r15d, r12d
000000000000e70f         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000e714         jne        loc_e680

                     loc_e71a:
000000000000e71a         test       rbp, rbp                                    ; CODE XREF=fts_safe_changedir+164
000000000000e71d         je         loc_e740

000000000000e71f         lea        rdx, qword [__PRETTY_FUNCTION__.4162_22690+11] ; 0x2269b

                     loc_e726:
000000000000e726         mov        ecx, 0x3                                    ; CODE XREF=fts_safe_changedir+613
000000000000e72b         mov        rsi, rbp
000000000000e72e         mov        rdi, rdx
000000000000e731         rep  cmpsb byte [rsi], byte [rdi]
000000000000e733         seta       al
000000000000e736         sbb        al, 0x0
000000000000e738         test       al, al
000000000000e73a         je         loc_e680

                     loc_e740:
000000000000e740         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+333, fts_safe_changedir+506, fts_safe_changedir+582
000000000000e743         jne        loc_e7d8

000000000000e749         mov        edi, r15d                                   ; argument "__fd" for method j_fchdir
000000000000e74c         call       j_fchdir                                    ; fchdir
000000000000e751         mov        ebx, eax
000000000000e753         jmp        loc_e69f
000000000000e758         align      32

                     loc_e760:
000000000000e760         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=fts_safe_changedir+196
000000000000e765         cmp        qword [r14+0x78], rax
000000000000e769         je         loc_e800

                     loc_e76f:
000000000000e76f         call       j___errno_location                          ; __errno_location, CODE XREF=fts_safe_changedir+572
000000000000e774         mov        dword [rax], 0x2
000000000000e77a         jmp        loc_e69a
000000000000e77f         align      128

                     loc_e780:
000000000000e780         mov        edi, r12d                                   ; argument "__fd" for method j_close, CODE XREF=fts_safe_changedir+253
000000000000e783         xor        ebx, ebx
000000000000e785         call       j_close                                     ; close
000000000000e78a         jmp        loc_e6d5
000000000000e78f         align      16

                     loc_e790:
000000000000e790         lea        r15, qword [r13+0x60]                       ; CODE XREF=fts_safe_changedir+121
000000000000e794         mov        rdi, r15
000000000000e797         call       i_ring_empty                                ; i_ring_empty
000000000000e79c         test       al, al
000000000000e79e         mov        byte [rsp+0xe8+var_D9], al
000000000000e7a2         jne        loc_e654

000000000000e7a8         mov        rdi, r15
000000000000e7ab         call       i_ring_pop                                  ; i_ring_pop
000000000000e7b0         test       eax, eax
000000000000e7b2         mov        r15d, eax
000000000000e7b5         mov        ebx, dword [r13+0x48]
000000000000e7b9         js         loc_e64f

000000000000e7bf         test       bl, 0x2
000000000000e7c2         mov        r12d, eax
000000000000e7c5         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000e7ca         je         loc_e740

000000000000e7d0         jmp        loc_e680
000000000000e7d5         align      8

                     loc_e7d8:
000000000000e7d8         movzx      r14d, byte [rsp+0xe8+var_D9]                ; CODE XREF=fts_safe_changedir+371
000000000000e7de         mov        esi, r15d
000000000000e7e1         mov        rdi, r13
000000000000e7e4         xor        ebx, ebx
000000000000e7e6         xor        r14d, 0x1
000000000000e7ea         movzx      edx, r14b
000000000000e7ee         call       cwd_advance_fd                              ; cwd_advance_fd
000000000000e7f3         jmp        loc_e6d5
000000000000e7f8         align      2048

                     loc_e800:
000000000000e800         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=fts_safe_changedir+409
000000000000e805         cmp        qword [r14+0x80], rax
000000000000e80c         jne        loc_e76f

000000000000e812         mov        ebx, dword [r13+0x48]
000000000000e816         jmp        loc_e740

                     loc_e81b:
000000000000e81b         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+151
000000000000e820         jmp        loc_e6d5

                     loc_e825:
000000000000e825         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_safe_changedir+280
                        ; endp

                     loc_e82a:
000000000000e82a         test       bl, 0x2                                     ; CODE XREF=fts_safe_changedir+112
000000000000e82d         mov        r15d, r12d
000000000000e830         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000e835         je         loc_e726

000000000000e83b         jmp        loc_e680

                     loc_e840:
000000000000e840         mov        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=fts_safe_changedir+307
000000000000e845         jmp        loc_e654
000000000000e84a         align      16                                          ; End of unwind block (FDE at 0x25718)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     enter_dir.isra.10:
000000000000e850         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0x25768), CODE XREF=fts_build+1558, rpl_fts_read+899
000000000000e856         push       r12
000000000000e858         mov        r12, rsi
000000000000e85b         push       rbp
000000000000e85c         push       rbx
000000000000e85d         mov        rbx, rdx
000000000000e860         je         loc_e8d0

000000000000e862         mov        edi, 0x18                                   ; argument "__size" for method j_malloc
000000000000e867         call       j_malloc                                    ; malloc
000000000000e86c         test       rax, rax
000000000000e86f         mov        rbp, rax
000000000000e872         je         loc_e8f8

000000000000e878         mov        rax, qword [rbx+0x78]
000000000000e87c         mov        rdi, qword [r12]
000000000000e880         mov        rsi, rbp
000000000000e883         mov        qword [rbp+0x10], rbx
000000000000e887         mov        qword [rbp], rax
000000000000e88b         mov        rax, qword [rbx+0x80]
000000000000e892         mov        qword [rbp+8], rax
000000000000e896         call       hash_insert                                 ; hash_insert
000000000000e89b         cmp        rbp, rax
000000000000e89e         mov        r12, rax
000000000000e8a1         je         loc_e8c1

000000000000e8a3         mov        rdi, rbp
000000000000e8a6         call       sub_2a10                                    ; sub_2a10
000000000000e8ab         test       r12, r12
000000000000e8ae         je         loc_e8f8

000000000000e8b0         mov        rax, qword [r12+0x10]
000000000000e8b5         mov        ecx, 0x2
000000000000e8ba         mov        word [rbx+0x70], cx
000000000000e8be         mov        qword [rbx], rax

                     loc_e8c1:
000000000000e8c1         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+81, enter_dir.isra.10+143
000000000000e8c2         mov        eax, 0x1
000000000000e8c7         pop        rbp
000000000000e8c8         pop        r12
000000000000e8ca         ret
                        ; endp
000000000000e8cb         align      16

                     loc_e8d0:
000000000000e8d0         mov        rdi, qword [r12]                            ; CODE XREF=enter_dir.isra.10+16
000000000000e8d4         lea        rsi, qword [rdx+0x78]
000000000000e8d8         call       cycle_check                                 ; cycle_check
000000000000e8dd         test       al, al
000000000000e8df         je         loc_e8c1

000000000000e8e1         mov        edx, 0x2
000000000000e8e6         mov        qword [rbx], rbx
000000000000e8e9         mov        word [rbx+0x70], dx
000000000000e8ed         pop        rbx
000000000000e8ee         pop        rbp
000000000000e8ef         pop        r12
000000000000e8f1         ret
                        ; endp
000000000000e8f2         align      8

                     loc_e8f8:
000000000000e8f8         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+34, enter_dir.isra.10+94
000000000000e8f9         xor        eax, eax
000000000000e8fb         pop        rbp
000000000000e8fc         pop        r12
000000000000e8fe         ret
                        ; endp
000000000000e8ff         align      256                                         ; End of unwind block (FDE at 0x25768)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     leave_dir.isra.12:
000000000000e900         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0x257ac), CODE XREF=fts_build+1530, rpl_fts_read+405, rpl_fts_read+1209, rpl_fts_read+1368
000000000000e904         mov        rcx, rsi
000000000000e907         mov        rax, qword [fs:0x28]
000000000000e910         mov        qword [rsp+0x28+var_10], rax
000000000000e915         xor        eax, eax
000000000000e917         and        edi, 0x102
000000000000e91d         jne        loc_e960

000000000000e91f         mov        rax, qword [rdx+8]
000000000000e923         test       rax, rax
000000000000e926         je         loc_e945

000000000000e928         cmp        qword [rax+0x58], 0x0
000000000000e92d         js         loc_e945

000000000000e92f         mov        rcx, qword [rsi]
000000000000e932         cmp        qword [rcx+0x10], 0x0
000000000000e937         je         loc_e9b3

000000000000e939         mov        rsi, qword [rdx+0x80]
000000000000e940         cmp        qword [rcx], rsi
000000000000e943         je         loc_e990

                     loc_e945:
000000000000e945         mov        rax, qword [rsp+0x28+var_10]                ; CODE XREF=leave_dir.isra.12+38, leave_dir.isra.12+45, leave_dir.isra.12+140, leave_dir.isra.12+152, leave_dir.isra.12+172
000000000000e94a         xor        rax, qword [fs:0x28]
000000000000e953         jne        loc_e9ae

000000000000e955         add        rsp, 0x28
000000000000e959         ret
                        ; endp
000000000000e95a         align      32

                     loc_e960:
000000000000e960         mov        rax, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+29
000000000000e964         mov        rdi, qword [rcx]
000000000000e967         mov        rsi, rsp
000000000000e96a         mov        qword [rsp+0x28+var_28], rax
000000000000e96e         mov        rax, qword [rdx+0x80]
000000000000e975         mov        qword [rsp+0x28+var_20], rax
000000000000e97a         call       hash_delete                                 ; hash_delete
000000000000e97f         test       rax, rax
000000000000e982         je         loc_e9b3

000000000000e984         mov        rdi, rax
000000000000e987         call       sub_2a10                                    ; sub_2a10
000000000000e98c         jmp        loc_e945
000000000000e98e         align      16

                     loc_e990:
000000000000e990         mov        rsi, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+67
000000000000e994         cmp        qword [rcx+8], rsi
000000000000e998         jne        loc_e945

000000000000e99a         mov        rdx, qword [rax+0x78]
000000000000e99e         mov        rax, qword [rax+0x80]
000000000000e9a5         mov        qword [rcx+8], rdx
000000000000e9a9         mov        qword [rcx], rax
000000000000e9ac         jmp        loc_e945

                     loc_e9ae:
000000000000e9ae         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=leave_dir.isra.12+83
                        ; endp

                     loc_e9b3:
000000000000e9b3         call       j_abort                                     ; abort, CODE XREF=leave_dir.isra.12+55, leave_dir.isra.12+130
                        ; endp
000000000000e9b8         align      64                                          ; End of unwind block (FDE at 0x257ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68
        ;    var_49: int8_t, -73
        ;    var_4A: int8_t, -74
        ;    var_4B: int8_t, -75
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160


                     fts_build:
000000000000e9c0         push       r15                                         ; Begin of unwind block (FDE at 0x257c8), CODE XREF=rpl_fts_read+1056, rpl_fts_read+1561, rpl_fts_children+139, rpl_fts_children+219
000000000000e9c2         push       r14
000000000000e9c4         mov        r15, rdi
000000000000e9c7         push       r13
000000000000e9c9         push       r12
000000000000e9cb         push       rbp
000000000000e9cc         push       rbx
000000000000e9cd         sub        rsp, 0x78
000000000000e9d1         mov        rbp, qword [rdi]
000000000000e9d4         mov        rax, qword [fs:0x28]
000000000000e9dd         mov        qword [rsp+0xa8+var_40], rax
000000000000e9e2         xor        eax, eax
000000000000e9e4         mov        dword [rsp+0xa8+var_50], esi
000000000000e9e8         mov        rax, qword [rbp+0x18]
000000000000e9ec         test       rax, rax
000000000000e9ef         mov        qword [rsp+0xa8+var_58], rax
000000000000e9f4         je         loc_ee30

000000000000e9fa         mov        rdi, rax                                    ; argument "__dirp" for method j_dirfd
000000000000e9fd         call       j_dirfd                                     ; dirfd
000000000000ea02         test       eax, eax
000000000000ea04         mov        dword [rsp+0xa8+var_44], eax
000000000000ea08         js         loc_ef60

000000000000ea0e         cmp        qword [r15+0x40], 0x0
000000000000ea13         je         loc_f1e8

000000000000ea19         mov        qword [rsp+0xa8+var_70], 0xffffffffffffffff

                     loc_ea22:
000000000000ea22         mov        edi, dword [r15+0x48]                       ; CODE XREF=fts_build+2207
000000000000ea26         mov        byte [rsp+0xa8+var_49], 0x1

                     loc_ea2b:
000000000000ea2b         mov        rcx, qword [rbp+0x48]                       ; CODE XREF=fts_build+1405, fts_build+2106, fts_build+2121
000000000000ea2f         mov        rdx, qword [rbp+0x38]
000000000000ea33         mov        qword [rsp+0xa8+var_68], 0x0
000000000000ea3c         cmp        byte [rdx+rcx-1], 0x2f
000000000000ea41         lea        rax, qword [rcx-1]
000000000000ea45         cmovne     rax, rcx
000000000000ea49         and        edi, 0x4
000000000000ea4c         mov        qword [rsp+0xa8+var_60], rax
000000000000ea51         je         loc_ea63

000000000000ea53         add        rax, qword [r15+0x20]
000000000000ea57         lea        rbx, qword [rax+1]
000000000000ea5b         mov        byte [rax], 0x2f
000000000000ea5e         mov        qword [rsp+0xa8+var_68], rbx

                     loc_ea63:
000000000000ea63         mov        rax, qword [rsp+0xa8+var_60]                ; CODE XREF=fts_build+145
000000000000ea68         mov        rbx, qword [r15+0x30]
000000000000ea6c         mov        byte [rsp+0xa8+var_4A], 0x0
000000000000ea71         mov        byte [rsp+0xa8+var_4B], 0x0
000000000000ea76         mov        qword [rsp+0xa8+var_A0], 0x0
000000000000ea7f         mov        qword [rsp+0xa8+var_98], 0x0
000000000000ea88         add        rax, 0x1
000000000000ea8c         mov        qword [rsp+0xa8+var_88], rbp
000000000000ea91         sub        rbx, rax
000000000000ea94         mov        qword [rsp+0xa8+var_90], rax
000000000000ea99         mov        rax, qword [rbp+0x58]
000000000000ea9d         mov        qword [rsp+0xa8+var_80], rbx
000000000000eaa2         xor        ebx, ebx
000000000000eaa4         add        rax, 0x1
000000000000eaa8         mov        qword [rsp+0xa8+var_78], rax
000000000000eaad         jmp        loc_eb8f
000000000000eab2         align      8

                     loc_eab8:
000000000000eab8         mov        r9, r14                                     ; CODE XREF=fts_build+578, fts_build+678
000000000000eabb         add        r9, qword [rsp+0xa8+var_90]
000000000000eac0         jb         loc_f320

000000000000eac6         mov        rax, qword [rsp+0xa8+var_78]
000000000000eacb         lea        rsi, qword [r13+0x108]
000000000000ead2         mov        qword [r13+0x58], rax
000000000000ead6         mov        rax, qword [r15]
000000000000ead9         mov        qword [r13+0x48], r9
000000000000eadd         mov        qword [r13+8], rax
000000000000eae1         mov        rax, qword [rbp]
000000000000eae5         mov        qword [r13+0x80], rax
000000000000eaec         mov        eax, dword [r15+0x48]
000000000000eaf0         test       al, 0x4
000000000000eaf2         jne        loc_ed60

000000000000eaf8         mov        qword [r13+0x30], rsi

                     loc_eafc:
000000000000eafc         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+958
000000000000eb01         je         loc_eb0c

000000000000eb03         test       ah, 0x4
000000000000eb06         je         loc_ee08

                     loc_eb0c:
000000000000eb0c         movzx      edx, byte [rbp+0x12]                        ; CODE XREF=fts_build+321
000000000000eb10         and        eax, 0x18
000000000000eb13         mov        esi, edx
000000000000eb15         sub        edx, 0x1
000000000000eb18         cmp        eax, 0x18
000000000000eb1b         je         loc_edd0

                     loc_eb21:
000000000000eb21         mov        ecx, 0xb                                    ; CODE XREF=fts_build+1046
000000000000eb26         cmp        edx, 0xb
000000000000eb29         mov        word [r13+0x70], cx
000000000000eb2e         ja         loc_ed98

000000000000eb34         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53
000000000000eb3b         mov        eax, dword [rax+rdx*4]
000000000000eb3e         mov        dword [r13+0x90], eax
000000000000eb45         mov        eax, 0x2

                     loc_eb4a:
000000000000eb4a         mov        qword [r13+0xa8], rax                       ; CODE XREF=fts_build+1000, fts_build+1087, fts_build+2508

                     loc_eb51:
000000000000eb51         cmp        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+1114
000000000000eb57         mov        qword [r13+0x10], 0x0
000000000000eb5f         je         loc_ed88

000000000000eb65         mov        rax, qword [rsp+0xa8+var_A0]
000000000000eb6a         mov        qword [rax+0x10], r13

                     loc_eb6e:
000000000000eb6e         cmp        rbx, j_memcpy                               ; CODE XREF=fts_build+973
000000000000eb75         je         loc_ec70

                     loc_eb7b:
000000000000eb7b         add        rbx, 0x1                                    ; CODE XREF=fts_build+693, fts_build+1605
000000000000eb7f         cmp        rbx, qword [rsp+0xa8+var_70]
000000000000eb84         jae        loc_ecc8

                     loc_eb8a:
000000000000eb8a         mov        qword [rsp+0xa8+var_A0], r13                ; CODE XREF=fts_build+765, fts_build+1030

                     loc_eb8f:
000000000000eb8f         mov        rax, qword [rsp+0xa8+var_88]                ; CODE XREF=fts_build+237
000000000000eb94         mov        r13, qword [rax+0x18]
000000000000eb98         test       r13, r13
000000000000eb9b         je         loc_f068

000000000000eba1         call       j___errno_location                          ; __errno_location
000000000000eba6         mov        rdi, r13                                    ; argument "__dirp" for method j_readdir
000000000000eba9         mov        dword [rax], 0x0
000000000000ebaf         mov        r12, rax
000000000000ebb2         call       j_readdir                                   ; readdir
000000000000ebb7         test       rax, rax
000000000000ebba         mov        rbp, rax
000000000000ebbd         je         loc_f140

000000000000ebc3         test       byte [r15+0x48], 0x20
000000000000ebc8         jne        loc_ebd4

000000000000ebca         cmp        byte [rax+0x13], 0x2e
000000000000ebce         je         loc_edb0

                     loc_ebd4:
000000000000ebd4         lea        r13, qword [rbp+0x13]                       ; CODE XREF=fts_build+520, fts_build+1019
000000000000ebd8         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000ebdb         call       j_strlen                                    ; strlen
000000000000ebe0         mov        rsi, r13
000000000000ebe3         mov        rdx, rax
000000000000ebe6         mov        rdi, r15
000000000000ebe9         mov        r14, rax
000000000000ebec         call       fts_alloc                                   ; fts_alloc
000000000000ebf1         test       rax, rax
000000000000ebf4         mov        r13, rax
000000000000ebf7         je         loc_f010

000000000000ebfd         cmp        qword [rsp+0xa8+var_80], r14
000000000000ec02         ja         loc_eab8

000000000000ec08         mov        rax, qword [r15+0x20]
000000000000ec0c         lea        rsi, qword [r15+0x30]
000000000000ec10         lea        rdi, qword [r15+0x20]
000000000000ec14         mov        qword [rsp+0xa8+var_80], rax
000000000000ec19         mov        rax, qword [rsp+0xa8+var_60]
000000000000ec1e         lea        rdx, qword [rax+r14+2]
000000000000ec23         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
000000000000ec28         test       al, al
000000000000ec2a         je         loc_f010

000000000000ec30         mov        rdx, qword [r15+0x20]
000000000000ec34         cmp        rdx, qword [rsp+0xa8+var_80]
000000000000ec39         je         loc_ee20

000000000000ec3f         add        rdx, qword [rsp+0xa8+var_90]
000000000000ec44         test       byte [r15+0x48], 0x4
000000000000ec49         cmove      rdx, qword [rsp+0xa8+var_68]
000000000000ec4f         mov        qword [rsp+0xa8+var_68], rdx

                     loc_ec54:
000000000000ec54         mov        rcx, qword [r15+0x30]                       ; CODE XREF=fts_build+1125
000000000000ec58         sub        rcx, qword [rsp+0xa8+var_90]
000000000000ec5d         mov        byte [rsp+0xa8+var_4B], al
000000000000ec61         mov        qword [rsp+0xa8+var_80], rcx
000000000000ec66         jmp        loc_eab8
000000000000ec6b         align      16

                     loc_ec70:
000000000000ec70         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+437
000000000000ec75         jne        loc_eb7b

000000000000ec7b         mov        esi, dword [rsp+0xa8+var_44]
000000000000ec7f         mov        rdi, qword [rsp+0xa8+var_88]
000000000000ec84         call       filesystem_type                             ; filesystem_type
000000000000ec89         cmp        rax, 0x1021994
000000000000ec8f         je         loc_f000

000000000000ec95         mov        ecx, 0xff534d42
000000000000ec9a         cmp        rax, rcx
000000000000ec9d         je         loc_f000

000000000000eca3         cmp        rax, 0x6969
000000000000eca9         je         loc_f000

000000000000ecaf         add        rbx, 0x1
000000000000ecb3         cmp        rbx, qword [rsp+0xa8+var_70]
000000000000ecb8         mov        byte [rsp+0xa8+var_4A], 0x1
000000000000ecbd         jb         loc_eb8a

000000000000ecc3         nop        dword [rax+rax]

                     loc_ecc8:
000000000000ecc8         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+452
000000000000eccd         mov        rbp, qword [rsp+0xa8+var_88]
000000000000ecd2         je         loc_f076

                     loc_ecd8:
000000000000ecd8         mov        rax, qword [r15+8]                          ; CODE XREF=fts_build+1712
000000000000ecdc         mov        rcx, qword [r15+0x20]
000000000000ece0         test       rax, rax
000000000000ece3         je         loc_ed10

000000000000ece5         nop        dword [rax]

                     loc_ece8:
000000000000ece8         mov        rdx, qword [rax+0x30]                       ; CODE XREF=fts_build+846
000000000000ecec         lea        rsi, qword [rax+0x108]
000000000000ecf3         cmp        rdx, rsi
000000000000ecf6         je         loc_ed03

000000000000ecf8         sub        rdx, qword [rax+0x38]
000000000000ecfc         add        rdx, rcx
000000000000ecff         mov        qword [rax+0x30], rdx

                     loc_ed03:
000000000000ed03         mov        qword [rax+0x38], rcx                       ; CODE XREF=fts_build+822
000000000000ed07         mov        rax, qword [rax+0x10]
000000000000ed0b         test       rax, rax
000000000000ed0e         jne        loc_ece8

                     loc_ed10:
000000000000ed10         mov        rax, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+803
000000000000ed15         jmp        loc_ed23
000000000000ed17         align      32

                     loc_ed20:
000000000000ed20         mov        rax, rdx                                    ; CODE XREF=fts_build+916, fts_build+922

                     loc_ed23:
000000000000ed23         cmp        qword [rax+0x58], 0x0                       ; CODE XREF=fts_build+853
000000000000ed28         js         loc_f076

000000000000ed2e         mov        rdx, qword [rax+0x30]
000000000000ed32         lea        rsi, qword [rax+0x108]
000000000000ed39         cmp        rdx, rsi
000000000000ed3c         je         loc_ed49

000000000000ed3e         sub        rdx, qword [rax+0x38]
000000000000ed42         add        rdx, rcx
000000000000ed45         mov        qword [rax+0x30], rdx

                     loc_ed49:
000000000000ed49         mov        rdx, qword [rax+0x10]                       ; CODE XREF=fts_build+892
000000000000ed4d         mov        qword [rax+0x38], rcx
000000000000ed51         test       rdx, rdx
000000000000ed54         jne        loc_ed20

000000000000ed56         mov        rdx, qword [rax+8]
000000000000ed5a         jmp        loc_ed20
000000000000ed5c         align      32

                     loc_ed60:
000000000000ed60         mov        rax, qword [r13+0x38]                       ; CODE XREF=fts_build+306
000000000000ed64         mov        rdi, qword [rsp+0xa8+var_68]                ; argument "__dest" for method j_memmove
000000000000ed69         mov        qword [r13+0x30], rax
000000000000ed6d         mov        rax, qword [r13+0x60]
000000000000ed71         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
000000000000ed75         call       j_memmove                                   ; memmove
000000000000ed7a         mov        eax, dword [r15+0x48]
000000000000ed7e         jmp        loc_eafc
000000000000ed83         align      8

                     loc_ed88:
000000000000ed88         mov        qword [rsp+0xa8+var_98], r13                ; CODE XREF=fts_build+415
000000000000ed8d         jmp        loc_eb6e
000000000000ed92         align      8

                     loc_ed98:
000000000000ed98         mov        dword [r13+0x90], 0x0                       ; CODE XREF=fts_build+366
000000000000eda3         mov        eax, 0x2
000000000000eda8         jmp        loc_eb4a
000000000000edad         align      16

                     loc_edb0:
000000000000edb0         cmp        byte [rax+0x14], 0x0                        ; CODE XREF=fts_build+526
000000000000edb4         je         loc_edc1

000000000000edb6         cmp        word [rax+0x14], 0x2e
000000000000edbb         jne        loc_ebd4

                     loc_edc1:
000000000000edc1         mov        r13, qword [rsp+0xa8+var_A0]                ; CODE XREF=fts_build+1012
000000000000edc6         jmp        loc_eb8a
000000000000edcb         align      16

                     loc_edd0:
000000000000edd0         and        esi, 0xfb                                   ; CODE XREF=fts_build+347
000000000000edd6         je         loc_eb21

000000000000eddc         mov        eax, 0xb
000000000000ede1         cmp        edx, 0xb
000000000000ede4         mov        word [r13+0x70], ax
000000000000ede9         jbe        loc_f376

000000000000edef         mov        dword [r13+0x90], 0x0
000000000000edfa         mov        eax, 0x1
000000000000edff         jmp        loc_eb4a
000000000000ee04         align      8

                     loc_ee08:
000000000000ee08         xor        edx, edx                                    ; CODE XREF=fts_build+326
000000000000ee0a         mov        rsi, r13
000000000000ee0d         mov        rdi, r15
000000000000ee10         call       fts_stat                                    ; fts_stat
000000000000ee15         mov        word [r13+0x70], ax
000000000000ee1a         jmp        loc_eb51
000000000000ee1f         align      32

                     loc_ee20:
000000000000ee20         movzx      eax, byte [rsp+0xa8+var_4B]                 ; CODE XREF=fts_build+633
000000000000ee25         jmp        loc_ec54
000000000000ee2a         align      16

                     loc_ee30:
000000000000ee30         mov        eax, dword [rdi+0x48]                       ; CODE XREF=fts_build+52
000000000000ee33         mov        edx, eax
000000000000ee35         and        edx, 0x10
000000000000ee38         je         loc_ee47

000000000000ee3a         test       al, 0x1
000000000000ee3c         mov        edx, 0x20000
000000000000ee41         jne        loc_ef48

                     loc_ee47:
000000000000ee47         and        eax, 0x204                                  ; CODE XREF=fts_build+1144, fts_build+1429
000000000000ee4c         mov        rsi, qword [rbp+0x30]
000000000000ee50         mov        edi, 0xffffff9c
000000000000ee55         cmp        eax, 0x200
000000000000ee5a         jne        loc_ee60

000000000000ee5c         mov        edi, dword [r15+0x2c]

                     loc_ee60:
000000000000ee60         lea        rcx, qword [rsp+0xa8+var_44]                ; CODE XREF=fts_build+1178
000000000000ee65         call       opendirat                                   ; opendirat
000000000000ee6a         test       rax, rax
000000000000ee6d         mov        qword [rbp+0x18], rax
000000000000ee71         je         loc_f190

000000000000ee77         cmp        word [rbp+0x70], 0xb
000000000000ee7c         je         loc_f210

000000000000ee82         mov        edi, dword [r15+0x48]
000000000000ee86         test       edi, 0x100
000000000000ee8c         jne        loc_efb0

                     loc_ee92:
000000000000ee92         cmp        qword [r15+0x40], 0x1                       ; CODE XREF=fts_build+1565, fts_build+2145
000000000000ee97         sbb        rax, rax
000000000000ee9a         and        eax, 0x186a1
000000000000ee9f         sub        rax, 0x1
000000000000eea3         cmp        dword [rsp+0xa8+var_50], 0x2
000000000000eea8         mov        qword [rsp+0xa8+var_70], rax
000000000000eead         je         loc_f200

000000000000eeb3         mov        edx, dword [r15+0x48]
000000000000eeb7         mov        eax, dword [rsp+0xa8+var_44]
000000000000eebb         and        edx, 0x38
000000000000eebe         cmp        edx, 0x18
000000000000eec1         je         loc_f264

                     loc_eec7:
000000000000eec7         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2220, fts_build+2244
000000000000eecc         mov        r12d, 0x1
000000000000eed2         sete       bl

                     loc_eed5:
000000000000eed5         test       byte [r15+0x49], 0x2                        ; CODE XREF=fts_build+2389
000000000000eeda         jne        loc_f2bc

                     loc_eee0:
000000000000eee0         test       eax, eax                                    ; CODE XREF=fts_build+2323
000000000000eee2         jns        loc_f248

                     loc_eee8:
000000000000eee8         test       bl, bl                                      ; CODE XREF=fts_build+2201
000000000000eeea         je         loc_eefb

000000000000eeec         test       r12b, r12b
000000000000eeef         je         loc_eefb

000000000000eef1         call       j___errno_location                          ; __errno_location
000000000000eef6         mov        eax, dword [rax]
000000000000eef8         mov        dword [rbp+0x40], eax

                     loc_eefb:
000000000000eefb         or         word [rbp+0x72], 0x1                        ; CODE XREF=fts_build+1322, fts_build+1327
000000000000ef00         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
000000000000ef04         call       j_closedir                                  ; closedir
000000000000ef09         mov        edi, dword [r15+0x48]
000000000000ef0d         mov        qword [rbp+0x18], 0x0
000000000000ef15         test       edi, 0x200
000000000000ef1b         je         loc_ef30

000000000000ef1d         mov        eax, dword [rsp+0xa8+var_44]
000000000000ef21         test       eax, eax
000000000000ef23         js         loc_ef30

000000000000ef25         mov        edi, eax                                    ; argument "__fd" for method j_close
000000000000ef27         call       j_close                                     ; close
000000000000ef2c         mov        edi, dword [r15+0x48]

                     loc_ef30:
000000000000ef30         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=fts_build+1371, fts_build+1379
000000000000ef38         mov        byte [rsp+0xa8+var_49], 0x0
000000000000ef3d         jmp        loc_ea2b
000000000000ef42         align      8

                     loc_ef48:
000000000000ef48         xor        edx, edx                                    ; CODE XREF=fts_build+1153
000000000000ef4a         cmp        qword [rbp+0x58], 0x0
000000000000ef4f         setne      dl
000000000000ef52         shl        edx, 0x11
000000000000ef55         jmp        loc_ee47
000000000000ef5a         align      32

                     loc_ef60:
000000000000ef60         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir, CODE XREF=fts_build+72
000000000000ef64         call       j_closedir                                  ; closedir
000000000000ef69         cmp        dword [rsp+0xa8+var_50], 0x3
000000000000ef6e         mov        qword [rbp+0x18], 0x0
000000000000ef76         je         loc_f19b

                     loc_ef7c:
000000000000ef7c         mov        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+2005, fts_build+2032

                     loc_ef85:
000000000000ef85         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=fts_build+1591, fts_build+1692, fts_build+1798, fts_build+1808, fts_build+1835, fts_build+1907, fts_build+2080, fts_build+2295, fts_build+2476
000000000000ef8a         xor        rbx, qword [fs:0x28]
000000000000ef93         mov        rax, qword [rsp+0xa8+var_98]
000000000000ef98         jne        loc_f371

000000000000ef9e         add        rsp, 0x78
000000000000efa2         pop        rbx
000000000000efa3         pop        rbp
000000000000efa4         pop        r12
000000000000efa6         pop        r13
000000000000efa8         pop        r14
000000000000efaa         pop        r15
000000000000efac         ret
                        ; endp
000000000000efad         align      16

                     loc_efb0:
000000000000efb0         lea        rbx, qword [r15+0x58]                       ; CODE XREF=fts_build+1228
000000000000efb4         mov        rdx, rbp
000000000000efb7         mov        rsi, rbx
000000000000efba         call       leave_dir.isra.12                           ; leave_dir.isra.12
000000000000efbf         xor        edx, edx
000000000000efc1         mov        rsi, rbp
000000000000efc4         mov        rdi, r15
000000000000efc7         call       fts_stat                                    ; fts_stat
000000000000efcc         mov        edi, dword [r15+0x48]
000000000000efd0         mov        rdx, rbp
000000000000efd3         mov        rsi, rbx
000000000000efd6         call       enter_dir.isra.10                           ; enter_dir.isra.10
000000000000efdb         test       al, al
000000000000efdd         jne        loc_ee92

000000000000efe3         call       j___errno_location                          ; __errno_location
000000000000efe8         mov        qword [rsp+0xa8+var_98], 0x0
000000000000eff1         mov        dword [rax], 0xc
000000000000eff7         jmp        loc_ef85
000000000000eff9         align      4096

                     loc_f000:
000000000000f000         mov        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+719, fts_build+733, fts_build+745, DATA XREF=main+1797, fts_stat+177, rpl_fts_read+1467
000000000000f005         jmp        loc_eb7b
000000000000f00a         align      16

                     loc_f010:
000000000000f010         mov        rdi, r13                                    ; CODE XREF=fts_build+567, fts_build+618
000000000000f013         mov        rbp, qword [rsp+0xa8+var_88]
000000000000f018         mov        ebx, dword [r12]
000000000000f01c         call       sub_2a10                                    ; sub_2a10
000000000000f021         mov        rdi, qword [rsp+0xa8+var_98]
000000000000f026         call       fts_lfree                                   ; fts_lfree
000000000000f02b         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
000000000000f02f         call       j_closedir                                  ; closedir
000000000000f034         mov        r9d, 0x7
000000000000f03a         mov        qword [rbp+0x18], 0x0
000000000000f042         mov        qword [rsp+0xa8+var_98], 0x0
000000000000f04b         mov        word [rbp+0x70], r9w
000000000000f050         or         dword [r15+0x48], 0x2000
000000000000f058         mov        dword [r12], ebx
000000000000f05c         jmp        loc_ef85
000000000000f061         align      8

                     loc_f068:
000000000000f068         mov        rbp, rax                                    ; CODE XREF=fts_build+475

                     loc_f06b:
000000000000f06b         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+1973, fts_build+1992
000000000000f070         jne        loc_ecd8

                     loc_f076:
000000000000f076         test       byte [r15+0x48], 0x4                        ; CODE XREF=fts_build+786, fts_build+872
000000000000f07b         je         loc_f09b

000000000000f07d         mov        rax, qword [rsp+0xa8+var_90]
000000000000f082         cmp        qword [r15+0x30], rax
000000000000f086         je         loc_f08d

000000000000f088         test       rbx, rbx
000000000000f08b         jne        loc_f093

                     loc_f08d:
000000000000f08d         sub        qword [rsp+0xa8+var_68], 0x1                ; CODE XREF=fts_build+1734

                     loc_f093:
000000000000f093         mov        rax, qword [rsp+0xa8+var_68]                ; CODE XREF=fts_build+1739
000000000000f098         mov        byte [rax], 0x0

                     loc_f09b:
000000000000f09b         cmp        qword [rsp+0xa8+var_58], 0x0                ; CODE XREF=fts_build+1723
000000000000f0a1         jne        loc_f110

000000000000f0a3         cmp        byte [rsp+0xa8+var_49], 0x0
000000000000f0a8         je         loc_f110

000000000000f0aa         cmp        dword [rsp+0xa8+var_50], 0x1
000000000000f0af         je         loc_f0f0

000000000000f0b1         test       rbx, rbx
000000000000f0b4         je         loc_f0f0

                     loc_f0b6:
000000000000f0b6         cmp        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+1875
000000000000f0bb         jne        loc_f1b8

000000000000f0c1         cmp        qword [r15+0x40], 0x0
000000000000f0c6         je         loc_ef85

000000000000f0cc         cmp        rbx, 0x1
000000000000f0d0         je         loc_ef85

000000000000f0d6         mov        rsi, qword [rsp+0xa8+var_98]
000000000000f0db         mov        rdx, rbx
000000000000f0de         mov        rdi, r15
000000000000f0e1         call       fts_sort                                    ; fts_sort
000000000000f0e6         mov        qword [rsp+0xa8+var_98], rax
000000000000f0eb         jmp        loc_ef85

                     loc_f0f0:
000000000000f0f0         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=fts_build+1775, fts_build+1780
000000000000f0f5         jne        loc_f226

000000000000f0fb         mov        rdi, r15
000000000000f0fe         call       restore_initial_cwd                         ; restore_initial_cwd
000000000000f103         test       eax, eax
000000000000f105         setne      al

                     loc_f108:
000000000000f108         test       al, al                                      ; CODE XREF=fts_build+2179
000000000000f10a         jne        loc_f293

                     loc_f110:
000000000000f110         test       rbx, rbx                                    ; CODE XREF=fts_build+1761, fts_build+1768
000000000000f113         jne        loc_f0b6

000000000000f115         cmp        dword [rsp+0xa8+var_50], 0x3
000000000000f11a         je         loc_f2d8

                     loc_f120:
000000000000f120         mov        rdi, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+2336, fts_build+2346, fts_build+2361
000000000000f125         call       fts_lfree                                   ; fts_lfree
000000000000f12a         mov        qword [rsp+0xa8+var_98], 0x0
000000000000f133         jmp        loc_ef85
000000000000f138         align      64

                     loc_f140:
000000000000f140         mov        eax, dword [r12]                            ; CODE XREF=fts_build+509
000000000000f144         mov        rbp, qword [rsp+0xa8+var_88]
000000000000f149         test       eax, eax
000000000000f14b         je         loc_f16e

000000000000f14d         test       rbx, rbx
000000000000f150         mov        dword [rbp+0x40], eax
000000000000f153         jne        loc_f289

000000000000f159         cmp        qword [rsp+0xa8+var_58], 0x0
000000000000f15f         mov        eax, 0x4
000000000000f164         jne        loc_f289

                     loc_f16a:
000000000000f16a         mov        word [rbp+0x70], ax                         ; CODE XREF=fts_build+2254

                     loc_f16e:
000000000000f16e         mov        rdi, qword [rbp+0x18]                       ; CODE XREF=fts_build+1931
000000000000f172         test       rdi, rdi
000000000000f175         je         loc_f06b

000000000000f17b         call       j_closedir                                  ; closedir
000000000000f180         mov        qword [rbp+0x18], 0x0
000000000000f188         jmp        loc_f06b
000000000000f18d         align      16

                     loc_f190:
000000000000f190         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+1201
000000000000f195         jne        loc_ef7c

                     loc_f19b:
000000000000f19b         mov        r10d, 0x4                                   ; CODE XREF=fts_build+1462
000000000000f1a1         mov        word [rbp+0x70], r10w
000000000000f1a6         call       j___errno_location                          ; __errno_location
000000000000f1ab         mov        eax, dword [rax]
000000000000f1ad         mov        dword [rbp+0x40], eax
000000000000f1b0         jmp        loc_ef7c
000000000000f1b5         align      8

                     loc_f1b8:
000000000000f1b8         lea        rax, qword [fts_compare_ino]                ; fts_compare_ino, CODE XREF=fts_build+1787
000000000000f1bf         mov        rsi, qword [rsp+0xa8+var_98]
000000000000f1c4         mov        rdx, rbx
000000000000f1c7         mov        rdi, r15
000000000000f1ca         mov        qword [r15+0x40], rax
000000000000f1ce         call       fts_sort                                    ; fts_sort
000000000000f1d3         mov        qword [r15+0x40], 0x0
000000000000f1db         mov        qword [rsp+0xa8+var_98], rax
000000000000f1e0         jmp        loc_ef85
000000000000f1e5         align      8

                     loc_f1e8:
000000000000f1e8         mov        qword [rsp+0xa8+var_70], 0x186a0            ; CODE XREF=fts_build+83
000000000000f1f1         mov        byte [rsp+0xa8+var_49], 0x1
000000000000f1f6         mov        edi, dword [r15+0x48]
000000000000f1fa         jmp        loc_ea2b
000000000000f1ff         align      512

                     loc_f200:
000000000000f200         mov        byte [rsp+0xa8+var_49], 0x0                 ; CODE XREF=fts_build+1261, fts_build+2371
000000000000f205         mov        edi, dword [r15+0x48]
000000000000f209         jmp        loc_ea2b
000000000000f20e         align      16

                     loc_f210:
000000000000f210         xor        edx, edx                                    ; CODE XREF=fts_build+1212
000000000000f212         mov        rsi, rbp
000000000000f215         mov        rdi, r15
000000000000f218         call       fts_stat                                    ; fts_stat
000000000000f21d         mov        word [rbp+0x70], ax
000000000000f221         jmp        loc_ee92

                     loc_f226:
000000000000f226         mov        rsi, qword [rbp+8]                          ; CODE XREF=fts_build+1845
000000000000f22a         lea        rcx, qword [__PRETTY_FUNCTION__.4162_22690+11] ; 0x2269b
000000000000f231         mov        edx, 0xffffffff
000000000000f236         mov        rdi, r15
000000000000f239         call       fts_safe_changedir                          ; fts_safe_changedir
000000000000f23e         test       eax, eax
000000000000f240         setne      al
000000000000f243         jmp        loc_f108

                     loc_f248:
000000000000f248         xor        ecx, ecx                                    ; CODE XREF=fts_build+1314
000000000000f24a         mov        edx, eax
000000000000f24c         mov        rsi, rbp
000000000000f24f         mov        rdi, r15
000000000000f252         call       fts_safe_changedir                          ; fts_safe_changedir
000000000000f257         test       eax, eax
000000000000f259         jne        loc_eee8

000000000000f25f         jmp        loc_ea22

                     loc_f264:
000000000000f264         cmp        qword [rbp+0x88], 0x2                       ; CODE XREF=fts_build+1281
000000000000f26c         jne        loc_eec7

000000000000f272         mov        esi, eax
000000000000f274         mov        rdi, rbp
000000000000f277         call       leaf_optimization                           ; leaf_optimization
000000000000f27c         test       eax, eax
000000000000f27e         jne        loc_f2fe

000000000000f280         mov        eax, dword [rsp+0xa8+var_44]
000000000000f284         jmp        loc_eec7

                     loc_f289:
000000000000f289         mov        eax, 0x7                                    ; CODE XREF=fts_build+1939, fts_build+1956
000000000000f28e         jmp        loc_f16a

                     loc_f293:
000000000000f293         mov        edi, 0x7                                    ; CODE XREF=fts_build+1866
000000000000f298         mov        word [rbp+0x70], di
000000000000f29c         or         dword [r15+0x48], 0x2000
000000000000f2a4         mov        rdi, qword [rsp+0xa8+var_98]
000000000000f2a9         call       fts_lfree                                   ; fts_lfree
000000000000f2ae         mov        qword [rsp+0xa8+var_98], 0x0
000000000000f2b7         jmp        loc_ef85

                     loc_f2bc:
000000000000f2bc         mov        edi, eax                                    ; CODE XREF=fts_build+1306
000000000000f2be         mov        edx, 0x3
000000000000f2c3         mov        esi, 0x406
000000000000f2c8         xor        eax, eax
000000000000f2ca         call       rpl_fcntl                                   ; rpl_fcntl
000000000000f2cf         mov        dword [rsp+0xa8+var_44], eax
000000000000f2d3         jmp        loc_eee0

                     loc_f2d8:
000000000000f2d8         movzx      eax, word [rbp+0x70]                        ; CODE XREF=fts_build+1882
000000000000f2dc         cmp        ax, 0x7
000000000000f2e0         je         loc_f120

000000000000f2e6         cmp        ax, 0x4
000000000000f2ea         je         loc_f120

000000000000f2f0         mov        esi, 0x6
000000000000f2f5         mov        word [rbp+0x70], si
000000000000f2f9         jmp        loc_f120

                     loc_f2fe:
000000000000f2fe         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2238
000000000000f303         jne        loc_f200

000000000000f309         mov        eax, dword [rsp+0xa8+var_44]
000000000000f30d         xor        r12d, r12d
000000000000f310         mov        ebx, 0x1
000000000000f315         jmp        loc_eed5
000000000000f31a         align      32

                     loc_f320:
000000000000f320         mov        rdi, r13                                    ; CODE XREF=fts_build+256
000000000000f323         mov        rbp, qword [rsp+0xa8+var_88]
000000000000f328         call       sub_2a10                                    ; sub_2a10
000000000000f32d         mov        rdi, qword [rsp+0xa8+var_98]
000000000000f332         call       fts_lfree                                   ; fts_lfree
000000000000f337         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
000000000000f33b         call       j_closedir                                  ; closedir
000000000000f340         mov        r8d, 0x7
000000000000f346         mov        qword [rbp+0x18], 0x0
000000000000f34e         mov        qword [rsp+0xa8+var_98], 0x0
000000000000f357         mov        word [rbp+0x70], r8w
000000000000f35c         or         dword [r15+0x48], 0x2000
000000000000f364         mov        dword [r12], 0x24
000000000000f36c         jmp        loc_ef85

                     loc_f371:
000000000000f371         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_build+1496
                        ; endp

                     loc_f376:
000000000000f376         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53, CODE XREF=fts_build+1065
000000000000f37d         mov        eax, dword [rax+rdx*4]
000000000000f380         mov        dword [r13+0x90], eax
000000000000f387         mov        eax, 0x1
000000000000f38c         jmp        loc_eb4a
000000000000f391         align      32                                          ; End of unwind block (FDE at 0x257c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_42: int8_t, -66
        ;    var_50: int64_t, -80


                     rpl_fts_open:
000000000000f3a0         push       r15                                         ; Begin of unwind block (FDE at 0x25818), CODE XREF=xfts_open+10
000000000000f3a2         push       r14
000000000000f3a4         push       r13
000000000000f3a6         push       r12
000000000000f3a8         push       rbp
000000000000f3a9         push       rbx
000000000000f3aa         sub        rsp, 0x28
000000000000f3ae         test       esi, 0xfffff000
000000000000f3b4         jne        loc_f738

000000000000f3ba         mov        eax, esi
000000000000f3bc         mov        ebp, esi
000000000000f3be         and        eax, 0x204
000000000000f3c3         cmp        eax, 0x204
000000000000f3c8         je         loc_f738

000000000000f3ce         test       sil, 0x12
000000000000f3d2         je         loc_f738

000000000000f3d8         mov        r13, rdi
000000000000f3db         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000f3e0         mov        edi, 0x80                                   ; argument "__nmemb" for method j_calloc
000000000000f3e5         mov        r14, rdx
000000000000f3e8         call       j_calloc                                    ; calloc
000000000000f3ed         test       rax, rax
000000000000f3f0         mov        rbx, rax
000000000000f3f3         je         loc_f64e

000000000000f3f9         test       bpl, 0x2
000000000000f3fd         mov        qword [rax+0x40], r14
000000000000f401         jne        loc_f660

000000000000f407         mov        rdi, qword [r13]
000000000000f40b         mov        dword [rax+0x48], ebp
000000000000f40e         mov        dword [rbx+0x2c], 0xffffff9c
000000000000f415         test       rdi, rdi
000000000000f418         je         loc_f67f

                     loc_f41e:
000000000000f41e         mov        r15, r13                                    ; CODE XREF=rpl_fts_open+729
000000000000f421         xor        r12d, r12d
000000000000f424         nop        dword [rax]

                     loc_f428:
000000000000f428         call       j_strlen                                    ; strlen, CODE XREF=rpl_fts_open+158
000000000000f42d         cmp        r12, rax
000000000000f430         cmovb      r12, rax
000000000000f434         add        r15, 0x8
000000000000f438         mov        rdi, qword [r15]
000000000000f43b         test       rdi, rdi
000000000000f43e         jne        loc_f428

000000000000f440         lea        rdx, qword [r12+1]
000000000000f445         mov        eax, aRnal                                  ; "rnal"
000000000000f44a         cmp        rdx, aRnal                                  ; "rnal"
000000000000f451         cmovb      rdx, rax

                     loc_f455:
000000000000f455         lea        rsi, qword [rbx+0x30]                       ; CODE XREF=rpl_fts_open+740
000000000000f459         lea        rdi, qword [rbx+0x20]
000000000000f45d         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
000000000000f462         test       al, al
000000000000f464         mov        byte [rsp+0x58+var_42], al
000000000000f468         je         loc_f709

000000000000f46e         mov        rsi, qword [r13]
000000000000f472         test       rsi, rsi
000000000000f475         je         loc_f720

000000000000f47b         lea        rsi, qword [aWrittenBySSAnd+27]             ; 0x21fe1
000000000000f482         xor        edx, edx
000000000000f484         mov        rdi, rbx
000000000000f487         call       fts_alloc                                   ; fts_alloc
000000000000f48c         test       rax, rax
000000000000f48f         mov        r15, rax
000000000000f492         je         loc_f700

000000000000f498         mov        rax, 0xffffffffffffffff
000000000000f49f         test       r14, r14
000000000000f4a2         mov        rsi, qword [r13]
000000000000f4a6         mov        qword [r15+0x58], rax
000000000000f4aa         mov        qword [r15+0x68], rax
000000000000f4ae         je         loc_f4bd

                     loc_f4b0:
000000000000f4b0         mov        eax, dword [rbx+0x48]                       ; CODE XREF=rpl_fts_open+902
000000000000f4b3         shr        eax, 0xa
000000000000f4b6         and        eax, 0x1
000000000000f4b9         mov        byte [rsp+0x58+var_42], al

                     loc_f4bd:
000000000000f4bd         test       rsi, rsi                                    ; CODE XREF=rpl_fts_open+270
000000000000f4c0         je         loc_f72c

000000000000f4c6         shr        ebp, 0xb
000000000000f4c9         mov        qword [rsp+0x58+var_40], 0x0
000000000000f4d2         xor        r12d, r12d
000000000000f4d5         xor        ebp, 0x1
000000000000f4d8         mov        eax, ebp
000000000000f4da         xor        ebp, ebp
000000000000f4dc         and        eax, 0x1
000000000000f4df         mov        byte [rsp+0x58+var_41], al
000000000000f4e3         jmp        loc_f55c
000000000000f4e5         align      8

                     loc_f4e8:
000000000000f4e8         mov        rdx, rax                                    ; CODE XREF=rpl_fts_open+466, rpl_fts_open+477, rpl_fts_open+488, rpl_fts_open+501, rpl_fts_open+517
000000000000f4eb         mov        rdi, rbx
000000000000f4ee         call       fts_alloc                                   ; fts_alloc
000000000000f4f3         test       rax, rax
000000000000f4f6         mov        rcx, rax
000000000000f4f9         je         loc_f6f0

000000000000f4ff         mov        qword [rax+0x58], 0x0
000000000000f507         mov        qword [rax+8], r15
000000000000f50b         lea        rax, qword [rax+0x108]
000000000000f512         test       r12, r12
000000000000f515         mov        qword [rcx+0x30], rax
000000000000f519         je         loc_f690

000000000000f51f         cmp        byte [rsp+0x58+var_42], 0x0
000000000000f524         je         loc_f690

000000000000f52a         mov        esi, 0xb
000000000000f52f         test       r14, r14
000000000000f532         mov        qword [rcx+0xa8], 0x2
000000000000f53d         mov        word [rcx+0x70], si
000000000000f541         je         loc_f6d0

                     loc_f547:
000000000000f547         mov        qword [rcx+0x10], r12                       ; CODE XREF=rpl_fts_open+782
000000000000f54b         mov        r12, rcx

                     loc_f54e:
000000000000f54e         add        rbp, 0x1                                    ; CODE XREF=rpl_fts_open+809, rpl_fts_open+838
000000000000f552         mov        rsi, qword [r13+rbp*8]
000000000000f557         test       rsi, rsi
000000000000f55a         je         loc_f5b0

                     loc_f55c:
000000000000f55c         mov        rdi, rsi                                    ; argument "__s" for method j_strlen, CODE XREF=rpl_fts_open+323
000000000000f55f         mov        qword [rsp+0x58+var_50], rsi
000000000000f564         call       j_strlen                                    ; strlen
000000000000f569         cmp        rax, 0x2
000000000000f56d         mov        rsi, qword [rsp+0x58+var_50]
000000000000f572         jbe        loc_f4e8

000000000000f578         cmp        byte [rsp+0x58+var_41], 0x0
000000000000f57d         je         loc_f4e8

000000000000f583         cmp        byte [rsi+rax-1], 0x2f
000000000000f588         jne        loc_f4e8

000000000000f58e         nop

                     loc_f590:
000000000000f590         cmp        byte [rsi+rax-2], 0x2f                      ; CODE XREF=rpl_fts_open+515
000000000000f595         jne        loc_f4e8

000000000000f59b         sub        rax, 0x1
000000000000f59f         cmp        rax, 0x1
000000000000f5a3         jne        loc_f590

000000000000f5a5         jmp        loc_f4e8
000000000000f5aa         align      16

                     loc_f5b0:
000000000000f5b0         test       r14, r14                                    ; CODE XREF=rpl_fts_open+442
000000000000f5b3         je         loc_f5cc

000000000000f5b5         cmp        rbp, 0x1
000000000000f5b9         jbe        loc_f5cc

000000000000f5bb         mov        rsi, r12
000000000000f5be         mov        rdx, rbp
000000000000f5c1         mov        rdi, rbx
000000000000f5c4         call       fts_sort                                    ; fts_sort
000000000000f5c9         mov        r12, rax

                     loc_f5cc:
000000000000f5cc         lea        rsi, qword [aWrittenBySSAnd+27]             ; 0x21fe1, CODE XREF=rpl_fts_open+531, rpl_fts_open+537, rpl_fts_open+911
000000000000f5d3         xor        edx, edx
000000000000f5d5         mov        rdi, rbx
000000000000f5d8         call       fts_alloc                                   ; fts_alloc
000000000000f5dd         test       rax, rax
000000000000f5e0         mov        qword [rbx], rax
000000000000f5e3         je         loc_f6f0

000000000000f5e9         mov        edi, dword [rbx+0x48]
000000000000f5ec         mov        edx, 0x9
000000000000f5f1         lea        rsi, qword [rbx+0x58]
000000000000f5f5         mov        qword [rax+0x10], r12
000000000000f5f9         mov        word [rax+0x70], dx
000000000000f5fd         mov        qword [rax+0x58], 0x1
000000000000f605         call       setup_dir.isra.4                            ; setup_dir.isra.4
000000000000f60a         test       al, al
000000000000f60c         je         loc_f6f0

000000000000f612         mov        esi, dword [rbx+0x48]
000000000000f615         test       esi, 0x204
000000000000f61b         jne        loc_f640

000000000000f61d         mov        edi, dword [rbx+0x2c]
000000000000f620         lea        rdx, qword [__PRETTY_FUNCTION__.4162_22690+12] ; 0x2269c
000000000000f627         call       diropen.isra.6                              ; diropen.isra.6
000000000000f62c         test       eax, eax
000000000000f62e         mov        dword [rbx+0x28], eax
000000000000f631         jns        loc_f640

000000000000f633         or         dword [rbx+0x48], 0x4
000000000000f637         nop        word [rax+rax]

                     loc_f640:
000000000000f640         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_open+635, rpl_fts_open+657
000000000000f644         mov        esi, 0xffffffff
000000000000f649         call       i_ring_init                                 ; i_ring_init

                     loc_f64e:
000000000000f64e         add        rsp, 0x28                                   ; CODE XREF=rpl_fts_open+83, rpl_fts_open+883, rpl_fts_open+933
000000000000f652         mov        rax, rbx
000000000000f655         pop        rbx
000000000000f656         pop        rbp
000000000000f657         pop        r12
000000000000f659         pop        r13
000000000000f65b         pop        r14
000000000000f65d         pop        r15
000000000000f65f         ret
                        ; endp

                     loc_f660:
000000000000f660         mov        rdi, qword [r13]                            ; CODE XREF=rpl_fts_open+97
000000000000f664         mov        eax, ebp
000000000000f666         mov        dword [rbx+0x2c], 0xffffff9c
000000000000f66d         and        ah, 0xfd
000000000000f670         or         eax, 0x4
000000000000f673         test       rdi, rdi
000000000000f676         mov        dword [rbx+0x48], eax
000000000000f679         jne        loc_f41e

                     loc_f67f:
000000000000f67f         mov        edx, aRnal                                  ; "rnal", CODE XREF=rpl_fts_open+120
000000000000f684         jmp        loc_f455
000000000000f689         align      16

                     loc_f690:
000000000000f690         xor        edx, edx                                    ; CODE XREF=rpl_fts_open+377, rpl_fts_open+388
000000000000f692         mov        rsi, rcx
000000000000f695         mov        rdi, rbx
000000000000f698         mov        qword [rsp+0x58+var_50], rcx
000000000000f69d         call       fts_stat                                    ; fts_stat
000000000000f6a2         mov        rcx, qword [rsp+0x58+var_50]
000000000000f6a7         test       r14, r14
000000000000f6aa         mov        word [rcx+0x70], ax
000000000000f6ae         jne        loc_f547

000000000000f6b4         test       r12, r12
000000000000f6b7         mov        qword [rcx+0x10], 0x0
000000000000f6bf         jne        loc_f6d8

000000000000f6c1         mov        qword [rsp+0x58+var_40], rcx
000000000000f6c6         mov        r12, rcx
000000000000f6c9         jmp        loc_f54e
000000000000f6ce         align      16

                     loc_f6d0:
000000000000f6d0         mov        qword [rcx+0x10], 0x0                       ; CODE XREF=rpl_fts_open+417

                     loc_f6d8:
000000000000f6d8         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=rpl_fts_open+799
000000000000f6dd         mov        qword [rsp+0x58+var_40], rcx
000000000000f6e2         mov        qword [rax+0x10], rcx
000000000000f6e6         jmp        loc_f54e
000000000000f6eb         align      16

                     loc_f6f0:
000000000000f6f0         mov        rdi, r12                                    ; CODE XREF=rpl_fts_open+345, rpl_fts_open+579, rpl_fts_open+620
000000000000f6f3         call       fts_lfree                                   ; fts_lfree
000000000000f6f8         mov        rdi, r15
000000000000f6fb         call       sub_2a10                                    ; sub_2a10

                     loc_f700:
000000000000f700         mov        rdi, qword [rbx+0x20]                       ; CODE XREF=rpl_fts_open+242
000000000000f704         call       sub_2a10                                    ; sub_2a10

                     loc_f709:
000000000000f709         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_open+200
000000000000f70c         xor        ebx, ebx
000000000000f70e         call       sub_2a10                                    ; sub_2a10
000000000000f713         jmp        loc_f64e
000000000000f718         align      32

                     loc_f720:
000000000000f720         xor        r15d, r15d                                  ; CODE XREF=rpl_fts_open+213
000000000000f723         test       r14, r14
000000000000f726         jne        loc_f4b0

                     loc_f72c:
000000000000f72c         xor        r12d, r12d                                  ; CODE XREF=rpl_fts_open+288
000000000000f72f         jmp        loc_f5cc
000000000000f734         align      8

                     loc_f738:
000000000000f738         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_open+20, rpl_fts_open+40, rpl_fts_open+50
000000000000f73d         xor        ebx, ebx
000000000000f73f         mov        dword [rax], 0x16
000000000000f745         jmp        loc_f64e
000000000000f74a         align      16                                          ; End of unwind block (FDE at 0x25818)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_close:
000000000000f750         push       r12                                         ; Begin of unwind block (FDE at 0x25864), CODE XREF=main+3241
000000000000f752         push       rbp
000000000000f753         mov        rbp, rdi
000000000000f756         push       rbx
000000000000f757         mov        rdi, qword [rdi]
000000000000f75a         test       rdi, rdi
000000000000f75d         je         loc_f7a3

000000000000f75f         cmp        qword [rdi+0x58], 0x0
000000000000f764         jns        loc_f77f

000000000000f766         jmp        loc_f880
000000000000f76b         align      16

                     loc_f770:
000000000000f770         call       sub_2a10                                    ; sub_2a10, CODE XREF=rpl_fts_close+54
000000000000f775         cmp        qword [rbx+0x58], 0x0
000000000000f77a         mov        rdi, rbx
000000000000f77d         js         loc_f79b

                     loc_f77f:
000000000000f77f         mov        rbx, qword [rdi+0x10]                       ; CODE XREF=rpl_fts_close+20, rpl_fts_close+73
000000000000f783         test       rbx, rbx
000000000000f786         jne        loc_f770

000000000000f788         mov        rbx, qword [rdi+8]
000000000000f78c         call       sub_2a10                                    ; sub_2a10
000000000000f791         cmp        qword [rbx+0x58], 0x0
000000000000f796         mov        rdi, rbx
000000000000f799         jns        loc_f77f

                     loc_f79b:
000000000000f79b         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_close+45
000000000000f79e         call       sub_2a10                                    ; sub_2a10

                     loc_f7a3:
000000000000f7a3         mov        rdi, qword [rbp+8]                          ; CODE XREF=rpl_fts_close+13, rpl_fts_close+315
000000000000f7a7         test       rdi, rdi
000000000000f7aa         je         loc_f7b1

000000000000f7ac         call       fts_lfree                                   ; fts_lfree

                     loc_f7b1:
000000000000f7b1         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_close+90
000000000000f7b5         call       sub_2a10                                    ; sub_2a10
000000000000f7ba         mov        rdi, qword [rbp+0x20]
000000000000f7be         call       sub_2a10                                    ; sub_2a10
000000000000f7c3         mov        eax, dword [rbp+0x48]
000000000000f7c6         test       ah, 0x2
000000000000f7c9         je         loc_f830

000000000000f7cb         mov        edi, dword [rbp+0x2c]
000000000000f7ce         test       edi, edi
000000000000f7d0         jns        loc_f860

                     loc_f7d6:
000000000000f7d6         xor        ebx, ebx                                    ; CODE XREF=rpl_fts_close+226, rpl_fts_close+250, rpl_fts_close+279

                     loc_f7d8:
000000000000f7d8         lea        rdi, qword [rbp+0x60]                       ; CODE XREF=rpl_fts_close+292, rpl_fts_close+340, rpl_fts_close+348, rpl_fts_close+364
000000000000f7dc         call       fd_ring_clear                               ; fd_ring_clear
000000000000f7e1         mov        rdi, qword [rbp+0x50]
000000000000f7e5         test       rdi, rdi
000000000000f7e8         je         loc_f7ef

000000000000f7ea         call       hash_free                                   ; hash_free

                     loc_f7ef:
000000000000f7ef         test       dword [rbp+0x48], 0x102                     ; CODE XREF=rpl_fts_close+152
000000000000f7f6         mov        rdi, qword [rbp+0x58]
000000000000f7fa         je         loc_f820

000000000000f7fc         test       rdi, rdi
000000000000f7ff         je         loc_f806

000000000000f801         call       hash_free                                   ; hash_free

                     loc_f806:
000000000000f806         mov        rdi, rbp                                    ; CODE XREF=rpl_fts_close+175, rpl_fts_close+213
000000000000f809         call       sub_2a10                                    ; sub_2a10
000000000000f80e         test       ebx, ebx
000000000000f810         jne        loc_f8c1

                     loc_f816:
000000000000f816         mov        eax, ebx                                    ; CODE XREF=rpl_fts_close+381
000000000000f818         pop        rbx
000000000000f819         pop        rbp
000000000000f81a         pop        r12
000000000000f81c         ret
                        ; endp
000000000000f81d         align      32

                     loc_f820:
000000000000f820         call       sub_2a10                                    ; sub_2a10, CODE XREF=rpl_fts_close+170
000000000000f825         jmp        loc_f806
000000000000f827         align      16

                     loc_f830:
000000000000f830         test       al, 0x4                                     ; CODE XREF=rpl_fts_close+121
000000000000f832         jne        loc_f7d6

000000000000f834         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_fchdir
000000000000f837         call       j_fchdir                                    ; fchdir
000000000000f83c         test       eax, eax
000000000000f83e         jne        loc_f890

000000000000f840         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
000000000000f843         call       j_close                                     ; close
000000000000f848         test       eax, eax
000000000000f84a         je         loc_f7d6

000000000000f84c         call       j___errno_location                          ; __errno_location
000000000000f851         mov        r12, rax
000000000000f854         jmp        loc_f8b8
000000000000f856         align      32

                     loc_f860:
000000000000f860         call       j_close                                     ; close, CODE XREF=rpl_fts_close+128
000000000000f865         test       eax, eax
000000000000f867         je         loc_f7d6

000000000000f86d         call       j___errno_location                          ; __errno_location
000000000000f872         mov        ebx, dword [rax]
000000000000f874         jmp        loc_f7d8
000000000000f879         align      128

                     loc_f880:
000000000000f880         mov        rbx, rdi                                    ; CODE XREF=rpl_fts_close+22
000000000000f883         mov        rdi, rbx
000000000000f886         call       sub_2a10                                    ; sub_2a10
000000000000f88b         jmp        loc_f7a3

                     loc_f890:
000000000000f890         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+238
000000000000f895         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
000000000000f898         mov        r12, rax
000000000000f89b         mov        ebx, dword [rax]
000000000000f89d         call       j_close                                     ; close
000000000000f8a2         test       eax, eax
000000000000f8a4         je         loc_f7d8

000000000000f8aa         test       ebx, ebx
000000000000f8ac         jne        loc_f7d8

000000000000f8b2         nop        word [rax+rax]

                     loc_f8b8:
000000000000f8b8         mov        ebx, dword [r12]                            ; CODE XREF=rpl_fts_close+260
000000000000f8bc         jmp        loc_f7d8

                     loc_f8c1:
000000000000f8c1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+192
000000000000f8c6         mov        dword [rax], ebx
000000000000f8c8         mov        ebx, 0xffffffff
000000000000f8cd         jmp        loc_f816
000000000000f8d2         align      32                                          ; End of unwind block (FDE at 0x25864)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_read:
000000000000f8e0         push       r14                                         ; Begin of unwind block (FDE at 0x25894), CODE XREF=main+1609, main+4103, main+4480
000000000000f8e2         push       r13
000000000000f8e4         push       r12
000000000000f8e6         push       rbp
000000000000f8e7         push       rbx
000000000000f8e8         mov        rbp, qword [rdi]
000000000000f8eb         test       rbp, rbp
000000000000f8ee         je         loc_f9fe

000000000000f8f4         mov        edx, dword [rdi+0x48]
000000000000f8f7         test       dh, 0x20
000000000000f8fa         jne        loc_f9fe

000000000000f900         movzx      eax, word [rbp+0x74]
000000000000f904         mov        ebx, 0x3
000000000000f909         mov        r12, rdi
000000000000f90c         mov        word [rbp+0x74], bx
000000000000f910         cmp        ax, 0x1
000000000000f914         je         loc_fb60

000000000000f91a         cmp        ax, 0x2
000000000000f91e         movzx      ecx, word [rbp+0x70]
000000000000f922         je         loc_fa10

000000000000f928         cmp        cx, 0x1
000000000000f92c         jne        loc_f960

000000000000f92e         jmp        loc_fb50
000000000000f933         align      8

                     loc_f938:
000000000000f938         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+135
000000000000f93c         mov        rdi, rbp
000000000000f93f         call       sub_2a10                                    ; sub_2a10
000000000000f944         cmp        qword [rbx+0x58], 0x0
000000000000f949         je         loc_fb80

000000000000f94f         movzx      eax, word [rbx+0x74]
000000000000f953         mov        rbp, rbx
000000000000f956         cmp        ax, 0x4
000000000000f95a         jne        loc_fc88

                     loc_f960:
000000000000f960         mov        rbx, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_read+76, rpl_fts_read+317
000000000000f964         test       rbx, rbx
000000000000f967         jne        loc_f938

000000000000f969         mov        rbx, qword [rbp+8]
000000000000f96d         cmp        qword [rbx+0x18], 0x0
000000000000f972         jne        loc_fee0

                     loc_f978:
000000000000f978         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+1672
000000000000f97c         mov        rdi, rbp
000000000000f97f         call       sub_2a10                                    ; sub_2a10
000000000000f984         cmp        qword [rbx+0x58], 0xffffffffffffffff
000000000000f989         je         loc_fe42

000000000000f98f         cmp        word [rbx+0x70], 0xb
000000000000f994         je         loc_facf

000000000000f99a         mov        rdx, qword [r12+0x20]
000000000000f99f         mov        rax, qword [rbx+0x48]
000000000000f9a3         mov        byte [rdx+rax], 0x0
000000000000f9a7         cmp        qword [rbx+0x58], 0x0
000000000000f9ac         je         loc_fd70

000000000000f9b2         movzx      eax, word [rbx+0x72]
000000000000f9b6         test       al, 0x2
000000000000f9b8         je         loc_fd28

000000000000f9be         mov        eax, dword [r12+0x48]
000000000000f9c3         mov        edi, dword [rbx+0x44]
000000000000f9c6         test       al, 0x4
000000000000f9c8         je         loc_fdcc

                     loc_f9ce:
000000000000f9ce         call       j_close                                     ; close, CODE XREF=rpl_fts_read+1287, rpl_fts_read+1708

                     loc_f9d3:
000000000000f9d3         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1098, rpl_fts_read+1130, rpl_fts_read+1180

                     loc_f9d8:
000000000000f9d8         cmp        word [rbx+0x70], 0x2                        ; CODE XREF=rpl_fts_read+1162
000000000000f9dd         je         loc_f9f3

000000000000f9df         mov        ecx, dword [rbx+0x40]
000000000000f9e2         test       ecx, ecx
000000000000f9e4         je         loc_fd88

000000000000f9ea         mov        edx, 0x7
000000000000f9ef         mov        word [rbx+0x70], dx

                     loc_f9f3:
000000000000f9f3         and        edi, 0x2000                                 ; CODE XREF=rpl_fts_read+253, rpl_fts_read+1219
000000000000f9f9         mov        rbp, rbx
000000000000f9fc         je         loc_fa7a

                     loc_f9fe:
000000000000f9fe         xor        ebp, ebp                                    ; CODE XREF=rpl_fts_read+14, rpl_fts_read+26, rpl_fts_read+1327, rpl_fts_read+1662
000000000000fa00         pop        rbx
000000000000fa01         mov        rax, rbp
000000000000fa04         pop        rbp
000000000000fa05         pop        r12
000000000000fa07         pop        r13
000000000000fa09         pop        r14
000000000000fa0b         ret
                        ; endp
000000000000fa0c         align      16

                     loc_fa10:
000000000000fa10         lea        eax, dword [rcx-0xc]                        ; CODE XREF=rpl_fts_read+66
000000000000fa13         cmp        ax, 0x1
000000000000fa17         jbe        loc_fa90

000000000000fa19         cmp        cx, 0x1
000000000000fa1d         jne        loc_f960

                     loc_fa23:
000000000000fa23         test       dl, 0x40                                    ; CODE XREF=rpl_fts_read+628
000000000000fa26         je         loc_fad8

000000000000fa2c         mov        rax, qword [r12+0x18]
000000000000fa31         cmp        qword [rbp+0x78], rax
000000000000fa35         je         loc_fad8

                     loc_fa3b:
000000000000fa3b         test       byte [rbp+0x72], 0x2                        ; CODE XREF=rpl_fts_read+634
000000000000fa3f         jne        loc_ff20

                     loc_fa45:
000000000000fa45         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+1608
000000000000fa4a         test       rdi, rdi
000000000000fa4d         je         loc_fa5d

000000000000fa4f         call       fts_lfree                                   ; fts_lfree
000000000000fa54         mov        qword [r12+8], 0x0

                     loc_fa5d:
000000000000fa5d         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+365
000000000000fa62         mov        r10d, 0x6
000000000000fa68         lea        rsi, qword [r12+0x58]
000000000000fa6d         mov        word [rbp+0x70], r10w
000000000000fa72         mov        rdx, rbp
000000000000fa75         call       leave_dir.isra.12                           ; leave_dir.isra.12

                     loc_fa7a:
000000000000fa7a         pop        rbx                                         ; CODE XREF=rpl_fts_read+284, rpl_fts_read+467, rpl_fts_read+493, rpl_fts_read+864, rpl_fts_read+906, rpl_fts_read+925, rpl_fts_read+1373, rpl_fts_read+1407, rpl_fts_read+1518, rpl_fts_read+1724, rpl_fts_read+1778
000000000000fa7b         mov        rax, rbp
000000000000fa7e         pop        rbp
000000000000fa7f         pop        r12
000000000000fa81         pop        r13
000000000000fa83         pop        r14
000000000000fa85         ret
                        ; endp
000000000000fa86         align      16

                     loc_fa90:
000000000000fa90         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+311
000000000000fa95         mov        rsi, rbp
000000000000fa98         call       fts_stat                                    ; fts_stat
000000000000fa9d         cmp        ax, 0x1
000000000000faa1         mov        word [rbp+0x70], ax
000000000000faa5         je         loc_fdec

000000000000faab         cmp        ax, 0xb
000000000000faaf         mov        qword [r12], rbp
000000000000fab3         jne        loc_fa7a

000000000000fab5         nop        dword [rax]

                     loc_fab8:
000000000000fab8         mov        rax, qword [rbp+0xa8]                       ; CODE XREF=rpl_fts_read+854
000000000000fabf         cmp        rax, 0x2
000000000000fac3         je         loc_fe68

000000000000fac9         cmp        rax, 0x1
000000000000facd         je         loc_fa7a

                     loc_facf:
000000000000facf         call       j_abort                                     ; abort, CODE XREF=rpl_fts_read+180
                        ; endp
000000000000fad4         align      8

                     loc_fad8:
000000000000fad8         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+326, rpl_fts_read+341
000000000000fadd         test       rdi, rdi
000000000000fae0         je         loc_fcf8

000000000000fae6         test       dh, 0x10
000000000000fae9         jne        loc_fce2

000000000000faef         mov        rcx, qword [rbp+0x30]
000000000000faf3         mov        edx, 0xffffffff
000000000000faf8         mov        rsi, rbp
000000000000fafb         mov        rdi, r12
000000000000fafe         call       fts_safe_changedir                          ; fts_safe_changedir
000000000000fb03         test       eax, eax
000000000000fb05         je         loc_fdc2

000000000000fb0b         call       j___errno_location                          ; __errno_location
000000000000fb10         mov        eax, dword [rax]
000000000000fb12         or         word [rbp+0x72], 0x1
000000000000fb17         mov        dword [rbp+0x40], eax
000000000000fb1a         mov        rbp, qword [r12+8]
000000000000fb1f         test       rbp, rbp
000000000000fb22         je         loc_fd16

000000000000fb28         mov        rax, rbp
000000000000fb2b         nop        dword [rax+rax]

                     loc_fb30:
000000000000fb30         mov        rdx, qword [rax+8]                          ; CODE XREF=rpl_fts_read+611
000000000000fb34         mov        rdx, qword [rdx+0x30]
000000000000fb38         mov        qword [rax+0x30], rdx
000000000000fb3c         mov        rax, qword [rax+0x10]
000000000000fb40         test       rax, rax
000000000000fb43         jne        loc_fb30

000000000000fb45         jmp        loc_fd16
000000000000fb4a         align      16

                     loc_fb50:
000000000000fb50         cmp        ax, 0x4                                     ; CODE XREF=rpl_fts_read+78
000000000000fb54         jne        loc_fa23

000000000000fb5a         jmp        loc_fa3b
000000000000fb5f         align      32

                     loc_fb60:
000000000000fb60         mov        rsi, rbp                                    ; CODE XREF=rpl_fts_read+52
000000000000fb63         xor        edx, edx
000000000000fb65         call       fts_stat                                    ; fts_stat
000000000000fb6a         mov        word [rbp+0x70], ax
000000000000fb6e         mov        rax, rbp
000000000000fb71         pop        rbx
000000000000fb72         pop        rbp
000000000000fb73         pop        r12
000000000000fb75         pop        r13
000000000000fb77         pop        r14
000000000000fb79         ret
                        ; endp
000000000000fb7a         align      128

                     loc_fb80:
000000000000fb80         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+105
000000000000fb83         call       restore_initial_cwd                         ; restore_initial_cwd
000000000000fb88         test       eax, eax
000000000000fb8a         jne        loc_ff91

000000000000fb90         test       dword [r12+0x48], 0x102
000000000000fb99         mov        rdi, qword [r12+0x58]
000000000000fb9e         je         loc_fcd8

000000000000fba4         test       rdi, rdi
000000000000fba7         je         loc_fbae

000000000000fba9         call       hash_free                                   ; hash_free

                     loc_fbae:
000000000000fbae         mov        rdx, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_read+711, rpl_fts_read+1021
000000000000fbb2         lea        rbp, qword [rbx+0x108]
000000000000fbb9         mov        rdi, qword [r12+0x20]                       ; argument "__dest" for method j_memmove
000000000000fbbe         mov        rsi, rbp                                    ; argument "__src" for method j_memmove
000000000000fbc1         mov        qword [rbx+0x48], rdx
000000000000fbc5         add        rdx, 0x1                                    ; argument "__n" for method j_memmove
000000000000fbc9         call       j_memmove                                   ; memmove
000000000000fbce         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000fbd3         mov        rdi, rbp                                    ; argument "__s" for method j_strrchr
000000000000fbd6         call       j_strrchr                                   ; strrchr
000000000000fbdb         test       rax, rax
000000000000fbde         je         loc_fc0b

000000000000fbe0         cmp        rbp, rax
000000000000fbe3         je         loc_fdb0

                     loc_fbe9:
000000000000fbe9         lea        r13, qword [rax+1]                          ; CODE XREF=rpl_fts_read+1239
000000000000fbed         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000fbf0         call       j_strlen                                    ; strlen
000000000000fbf5         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
000000000000fbf9         mov        r14, rax
000000000000fbfc         mov        rsi, r13                                    ; argument "__src" for method j_memmove
000000000000fbff         mov        rdi, rbp                                    ; argument "__dest" for method j_memmove
000000000000fc02         call       j_memmove                                   ; memmove
000000000000fc07         mov        qword [rbx+0x60], r14

                     loc_fc0b:
000000000000fc0b         mov        rax, qword [r12+0x20]                       ; CODE XREF=rpl_fts_read+766, rpl_fts_read+1245
000000000000fc10         mov        edi, dword [r12+0x48]
000000000000fc15         lea        rsi, qword [r12+0x58]
000000000000fc1a         mov        rbp, rbx
000000000000fc1d         mov        qword [rbx+0x38], rax
000000000000fc21         mov        qword [rbx+0x30], rax
000000000000fc25         call       setup_dir.isra.4                            ; setup_dir.isra.4
000000000000fc2a         movzx      eax, word [rbx+0x70]

                     loc_fc2e:
000000000000fc2e         cmp        ax, 0xb                                     ; CODE XREF=rpl_fts_read+1007, rpl_fts_read+1853
000000000000fc32         mov        qword [r12], rbp
000000000000fc36         je         loc_fab8

                     loc_fc3c:
000000000000fc3c         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1479, rpl_fts_read+1815
000000000000fc40         jne        loc_fa7a

                     loc_fc46:
000000000000fc46         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_read+1311
000000000000fc4b         jne        loc_fc56

                     loc_fc4d:
000000000000fc4d         mov        rax, qword [rbp+0x78]                       ; CODE XREF=rpl_fts_read+1784
000000000000fc51         mov        qword [r12+0x18], rax

                     loc_fc56:
000000000000fc56         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+875, rpl_fts_read+1524
000000000000fc5b         lea        rsi, qword [r12+0x58]
000000000000fc60         mov        rdx, rbp
000000000000fc63         call       enter_dir.isra.10                           ; enter_dir.isra.10
000000000000fc68         test       al, al
000000000000fc6a         jne        loc_fa7a

000000000000fc70         call       j___errno_location                          ; __errno_location
000000000000fc75         xor        ebp, ebp
000000000000fc77         mov        dword [rax], 0xc
000000000000fc7d         jmp        loc_fa7a
000000000000fc82         align      8

                     loc_fc88:
000000000000fc88         cmp        ax, 0x2                                     ; CODE XREF=rpl_fts_read+122
000000000000fc8c         je         loc_ff2d

                     loc_fc92:
000000000000fc92         mov        rax, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+1087, rpl_fts_read+1585, rpl_fts_read+1651
000000000000fc96         lea        rsi, qword [rbp+0x108]                      ; argument "__src" for method j_memmove
000000000000fc9d         mov        rdi, qword [rax+0x48]
000000000000fca1         mov        rax, qword [rax+0x38]
000000000000fca5         cmp        byte [rax+rdi-1], 0x2f
000000000000fcaa         lea        rdx, qword [rdi-1]
000000000000fcae         cmove      rdi, rdx
000000000000fcb2         add        rdi, qword [r12+0x20]
000000000000fcb7         mov        byte [rdi], 0x2f
000000000000fcba         mov        rax, qword [rbp+0x60]
000000000000fcbe         add        rdi, 0x1                                    ; argument "__dest" for method j_memmove
000000000000fcc2         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
000000000000fcc6         call       j_memmove                                   ; memmove
000000000000fccb         movzx      eax, word [rbp+0x70]
000000000000fccf         jmp        loc_fc2e
000000000000fcd4         align      8

                     loc_fcd8:
000000000000fcd8         call       sub_2a10                                    ; sub_2a10, CODE XREF=rpl_fts_read+702
000000000000fcdd         jmp        loc_fbae

                     loc_fce2:
000000000000fce2         and        dh, 0xef                                    ; CODE XREF=rpl_fts_read+521
000000000000fce5         mov        dword [r12+0x48], edx
000000000000fcea         call       fts_lfree                                   ; fts_lfree
000000000000fcef         mov        qword [r12+8], 0x0

                     loc_fcf8:
000000000000fcf8         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+512
000000000000fcfd         mov        rdi, r12
000000000000fd00         call       fts_build                                   ; fts_build
000000000000fd05         test       rax, rax
000000000000fd08         mov        qword [r12+8], rax
000000000000fd0d         je         loc_fe04

000000000000fd13         mov        rbp, rax

                     loc_fd16:
000000000000fd16         mov        qword [r12+8], 0x0                          ; CODE XREF=rpl_fts_read+578, rpl_fts_read+613, rpl_fts_read+1255
000000000000fd1f         jmp        loc_fc92
000000000000fd24         align      8

                     loc_fd28:
000000000000fd28         test       al, 0x1                                     ; CODE XREF=rpl_fts_read+216
000000000000fd2a         jne        loc_f9d3

000000000000fd30         mov        rsi, qword [rbx+8]
000000000000fd34         lea        rcx, qword [__PRETTY_FUNCTION__.4162_22690+11] ; 0x2269b
000000000000fd3b         mov        edx, 0xffffffff
000000000000fd40         mov        rdi, r12
000000000000fd43         call       fts_safe_changedir                          ; fts_safe_changedir
000000000000fd48         test       eax, eax
000000000000fd4a         je         loc_f9d3

                     loc_fd50:
000000000000fd50         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1178
000000000000fd55         mov        edi, dword [r12+0x48]
000000000000fd5a         mov        eax, dword [rax]
000000000000fd5c         or         edi, 0x2000
000000000000fd62         mov        dword [rbx+0x40], eax
000000000000fd65         mov        dword [r12+0x48], edi
000000000000fd6a         jmp        loc_f9d8
000000000000fd6f         align      16

                     loc_fd70:
000000000000fd70         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+204
000000000000fd73         call       restore_initial_cwd                         ; restore_initial_cwd
000000000000fd78         test       eax, eax
000000000000fd7a         jne        loc_fd50

000000000000fd7c         jmp        loc_f9d3
000000000000fd81         align      8

                     loc_fd88:
000000000000fd88         mov        eax, 0x6                                    ; CODE XREF=rpl_fts_read+260
000000000000fd8d         lea        rsi, qword [r12+0x58]
000000000000fd92         mov        rdx, rbx
000000000000fd95         mov        word [rbx+0x70], ax
000000000000fd99         call       leave_dir.isra.12                           ; leave_dir.isra.12
000000000000fd9e         mov        edi, dword [r12+0x48]
000000000000fda3         jmp        loc_f9f3
000000000000fda8         align      16

                     loc_fdb0:
000000000000fdb0         cmp        byte [rbx+0x109], 0x0                       ; CODE XREF=rpl_fts_read+771
000000000000fdb7         jne        loc_fbe9

000000000000fdbd         jmp        loc_fc0b

                     loc_fdc2:
000000000000fdc2         mov        rbp, qword [r12+8]                          ; CODE XREF=rpl_fts_read+549
000000000000fdc7         jmp        loc_fd16

                     loc_fdcc:
000000000000fdcc         test       ah, 0x2                                     ; CODE XREF=rpl_fts_read+232
000000000000fdcf         je         loc_ff6d

000000000000fdd5         mov        esi, edi
000000000000fdd7         mov        edx, 0x1
000000000000fddc         mov        rdi, r12
000000000000fddf         call       cwd_advance_fd                              ; cwd_advance_fd
000000000000fde4         mov        edi, dword [rbx+0x44]
000000000000fde7         jmp        loc_f9ce

                     loc_fdec:
000000000000fdec         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+453
000000000000fdf1         test       sil, 0x4
000000000000fdf5         je         loc_fffc

000000000000fdfb         mov        qword [r12], rbp
000000000000fdff         jmp        loc_fc46

                     loc_fe04:
000000000000fe04         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1069
000000000000fe09         test       edi, 0x2000
000000000000fe0f         jne        loc_f9fe

000000000000fe15         mov        r9d, dword [rbp+0x40]
000000000000fe19         test       r9d, r9d
000000000000fe1c         je         loc_fe30

000000000000fe1e         cmp        word [rbp+0x70], 0x4
000000000000fe23         je         loc_fe30

000000000000fe25         mov        r8d, 0x7
000000000000fe2b         mov        word [rbp+0x70], r8w

                     loc_fe30:
000000000000fe30         lea        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_fts_read+1340, rpl_fts_read+1347
000000000000fe35         mov        rdx, rbp
000000000000fe38         call       leave_dir.isra.12                           ; leave_dir.isra.12
000000000000fe3d         jmp        loc_fa7a

                     loc_fe42:
000000000000fe42         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_read+169
000000000000fe45         xor        ebp, ebp
000000000000fe47         call       sub_2a10                                    ; sub_2a10
000000000000fe4c         call       j___errno_location                          ; __errno_location
000000000000fe51         mov        dword [rax], 0x0
000000000000fe57         mov        qword [r12], 0x0
000000000000fe5f         jmp        loc_fa7a
000000000000fe64         align      8

                     loc_fe68:
000000000000fe68         mov        rbx, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+483
000000000000fe6c         cmp        qword [rbx+0x68], 0x0
000000000000fe71         jne        loc_fe84

000000000000fe73         mov        eax, dword [r12+0x48]
000000000000fe78         and        eax, 0x18
000000000000fe7b         cmp        eax, 0x18
000000000000fe7e         je         loc_ffdd

                     loc_fe84:
000000000000fe84         xor        edx, edx                                    ; CODE XREF=rpl_fts_read+1425, rpl_fts_read+1805
000000000000fe86         mov        rsi, rbp
000000000000fe89         mov        rdi, r12
000000000000fe8c         call       fts_stat                                    ; fts_stat
000000000000fe91         mov        edx, dword [rbp+0x90]
000000000000fe97         mov        word [rbp+0x70], ax
000000000000fe9b         and        edx, 0xf000
000000000000fea1         cmp        edx, __do_global_dtors_aux
000000000000fea7         jne        loc_fc3c

000000000000fead         cmp        qword [rbp+0x58], 0x0
000000000000feb2         je         loc_ffce

000000000000feb8         mov        rcx, qword [rbx+0x68]
000000000000febc         lea        rdx, qword [rcx-1]
000000000000fec0         cmp        rdx, 0xfffffffffffffffd
000000000000fec4         ja         loc_feca

000000000000fec6         mov        qword [rbx+0x68], rdx

                     loc_feca:
000000000000feca         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1508
000000000000fece         jne        loc_fa7a

000000000000fed4         jmp        loc_fc56
000000000000fed9         align      32

                     loc_fee0:
000000000000fee0         mov        rax, qword [rbx+0x48]                       ; CODE XREF=rpl_fts_read+146
000000000000fee4         mov        rdx, qword [r12+0x20]
000000000000fee9         mov        esi, 0x3
000000000000feee         mov        qword [r12], rbx
000000000000fef2         mov        rdi, r12
000000000000fef5         mov        byte [rdx+rax], 0x0
000000000000fef9         call       fts_build                                   ; fts_build
000000000000fefe         test       rax, rax
000000000000ff01         mov        rbx, rax
000000000000ff04         je         loc_ff58

000000000000ff06         mov        rdi, rbp
000000000000ff09         mov        rbp, rbx
000000000000ff0c         call       sub_2a10                                    ; sub_2a10
000000000000ff11         jmp        loc_fc92
000000000000ff16         align      32

                     loc_ff20:
000000000000ff20         mov        edi, dword [rbp+0x44]                       ; argument "__fd" for method j_close, CODE XREF=rpl_fts_read+351
000000000000ff23         call       j_close                                     ; close
000000000000ff28         jmp        loc_fa45

                     loc_ff2d:
000000000000ff2d         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+940
000000000000ff32         mov        rsi, rbx
000000000000ff35         mov        rdi, r12
000000000000ff38         call       fts_stat                                    ; fts_stat
000000000000ff3d         cmp        ax, 0x1
000000000000ff41         mov        word [rbx+0x70], ax
000000000000ff45         je         loc_ffa1

                     loc_ff47:
000000000000ff47         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+1738, rpl_fts_read+1769, rpl_fts_read+1907
000000000000ff4c         mov        rbp, rbx
000000000000ff4f         mov        word [rbx+0x74], si
000000000000ff53         jmp        loc_fc92

                     loc_ff58:
000000000000ff58         test       byte [r12+0x49], 0x20                       ; CODE XREF=rpl_fts_read+1572
000000000000ff5e         jne        loc_f9fe

000000000000ff64         mov        rbx, qword [rbp+8]
000000000000ff68         jmp        loc_f978

                     loc_ff6d:
000000000000ff6d         call       j_fchdir                                    ; fchdir, CODE XREF=rpl_fts_read+1263
000000000000ff72         test       eax, eax
000000000000ff74         je         loc_ff89

000000000000ff76         call       j___errno_location                          ; __errno_location
000000000000ff7b         mov        eax, dword [rax]
000000000000ff7d         mov        dword [rbx+0x40], eax
000000000000ff80         or         dword [r12+0x48], 0x2000

                     loc_ff89:
000000000000ff89         mov        edi, dword [rbx+0x44]                       ; CODE XREF=rpl_fts_read+1684
000000000000ff8c         jmp        loc_f9ce

                     loc_ff91:
000000000000ff91         or         dword [r12+0x48], 0x2000                    ; CODE XREF=rpl_fts_read+682
000000000000ff9a         xor        ebp, ebp
000000000000ff9c         jmp        loc_fa7a

                     loc_ffa1:
000000000000ffa1         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1637
000000000000ffa6         test       sil, 0x4
000000000000ffaa         jne        loc_ff47

000000000000ffac         mov        edi, dword [r12+0x2c]
000000000000ffb1         lea        rdx, qword [__PRETTY_FUNCTION__.4162_22690+12] ; 0x2269c
000000000000ffb8         call       diropen.isra.6                              ; diropen.isra.6
000000000000ffbd         test       eax, eax
000000000000ffbf         mov        dword [rbx+0x44], eax
000000000000ffc2         js         loc_10040

000000000000ffc4         or         word [rbx+0x72], 0x2
000000000000ffc9         jmp        loc_ff47

                     loc_ffce:
000000000000ffce         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1490
000000000000ffd2         jne        loc_fa7a

000000000000ffd8         jmp        loc_fc4d

                     loc_ffdd:
000000000000ffdd         mov        esi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1438
000000000000ffe2         mov        rdi, rbx
000000000000ffe5         call       leaf_optimization                           ; leaf_optimization
000000000000ffea         cmp        eax, 0x2
000000000000ffed         jne        loc_fe84

000000000000fff3         movzx      eax, word [rbp+0x70]
000000000000fff7         jmp        loc_fc3c

                     loc_fffc:
000000000000fffc         mov        edi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1301
0000000000010001         lea        rdx, qword [__PRETTY_FUNCTION__.4162_22690+12] ; 0x2269c
0000000000010008         call       diropen.isra.6                              ; diropen.isra.6
000000000001000d         test       eax, eax
000000000001000f         mov        dword [rbp+0x44], eax
0000000000010012         js         loc_10022

0000000000010014         or         word [rbp+0x72], 0x2
0000000000010019         movzx      eax, word [rbp+0x70]
000000000001001d         jmp        loc_fc2e

                     loc_10022:
0000000000010022         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1842
0000000000010027         mov        eax, dword [rax]
0000000000010029         mov        r11d, 0x7
000000000001002f         mov        word [rbp+0x70], r11w
0000000000010034         mov        dword [rbp+0x40], eax
0000000000010037         mov        qword [r12], rbp
000000000001003b         jmp        loc_fa7a

                     loc_10040:
0000000000010040         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1762
0000000000010045         mov        eax, dword [rax]
0000000000010047         mov        edi, 0x7
000000000001004c         mov        word [rbx+0x70], di
0000000000010050         mov        dword [rbx+0x40], eax
0000000000010053         jmp        loc_ff47
0000000000010058         align      32                                          ; End of unwind block (FDE at 0x25894)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_set:
0000000000010060         cmp        edx, 0x4                                    ; Begin of unwind block (FDE at 0x258f8), CODE XREF=main+4095, main+4472
0000000000010063         ja         loc_10070

0000000000010065         mov        word [rsi+0x74], dx
0000000000010069         xor        eax, eax
000000000001006b         ret
                        ; endp
000000000001006c         align      16

                     loc_10070:
0000000000010070         sub        rsp, 0x8                                    ; CODE XREF=rpl_fts_set+3
0000000000010074         call       j___errno_location                          ; __errno_location
0000000000010079         mov        dword [rax], 0x16
000000000001007f         mov        eax, 0x1
0000000000010084         add        rsp, 0x8
0000000000010088         ret
                        ; endp
0000000000010089         align      16                                          ; End of unwind block (FDE at 0x258f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_children:
0000000000010090         push       r14                                         ; Begin of unwind block (FDE at 0x25910)
0000000000010092         push       r13
0000000000010094         push       r12
0000000000010096         push       rbp
0000000000010097         mov        r12d, esi
000000000001009a         push       rbx
000000000001009b         mov        rbx, rdi
000000000001009e         call       j___errno_location                          ; __errno_location
00000000000100a3         test       r12d, 0xffffefff
00000000000100aa         mov        r13, rax
00000000000100ad         jne        loc_10198

00000000000100b3         mov        rbp, qword [rbx]
00000000000100b6         mov        dword [rax], 0x0
00000000000100bc         test       byte [rbx+0x49], 0x20
00000000000100c0         jne        loc_10140

00000000000100c2         movzx      eax, word [rbp+0x70]
00000000000100c6         cmp        ax, 0x9
00000000000100ca         je         loc_10130

00000000000100cc         cmp        ax, 0x1
00000000000100d0         jne        loc_10140

00000000000100d2         mov        rdi, qword [rbx+8]
00000000000100d6         test       rdi, rdi
00000000000100d9         je         loc_100e0

00000000000100db         call       fts_lfree                                   ; fts_lfree

                     loc_100e0:
00000000000100e0         cmp        r12d, aRnal                                 ; "rnal", CODE XREF=rpl_fts_children+73
00000000000100e7         mov        r14d, 0x1
00000000000100ed         jne        loc_100fc

00000000000100ef         or         dword [rbx+0x48], aRnal                     ; "rnal"
00000000000100f6         mov        r14d, 0x2

                     loc_100fc:
00000000000100fc         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_children+93
0000000000010101         jne        loc_10115

0000000000010103         mov        rax, qword [rbp+0x30]
0000000000010107         cmp        byte [rax], 0x2f
000000000001010a         je         loc_10115

000000000001010c         mov        esi, dword [rbx+0x48]
000000000001010f         test       sil, 0x4
0000000000010113         je         loc_10150

                     loc_10115:
0000000000010115         mov        esi, r14d                                   ; CODE XREF=rpl_fts_children+113, rpl_fts_children+122
0000000000010118         mov        rdi, rbx
000000000001011b         call       fts_build                                   ; fts_build
0000000000010120         mov        qword [rbx+8], rax

                     loc_10124:
0000000000010124         pop        rbx                                         ; CODE XREF=rpl_fts_children+256, rpl_fts_children+272, rpl_fts_children+307, rpl_fts_children+329
0000000000010125         pop        rbp
0000000000010126         pop        r12
0000000000010128         pop        r13
000000000001012a         pop        r14
000000000001012c         ret
                        ; endp
000000000001012d         align      16

                     loc_10130:
0000000000010130         pop        rbx                                         ; CODE XREF=rpl_fts_children+58
0000000000010131         mov        rax, qword [rbp+0x10]
0000000000010135         pop        rbp
0000000000010136         pop        r12
0000000000010138         pop        r13
000000000001013a         pop        r14
000000000001013c         ret
                        ; endp
000000000001013d         align      64

                     loc_10140:
0000000000010140         pop        rbx                                         ; CODE XREF=rpl_fts_children+48, rpl_fts_children+64
0000000000010141         xor        eax, eax
0000000000010143         pop        rbp
0000000000010144         pop        r12
0000000000010146         pop        r13
0000000000010148         pop        r14
000000000001014a         ret
                        ; endp
000000000001014b         align      16

                     loc_10150:
0000000000010150         mov        edi, dword [rbx+0x2c]                       ; CODE XREF=rpl_fts_children+131
0000000000010153         lea        rdx, qword [__PRETTY_FUNCTION__.4162_22690+12] ; 0x2269c
000000000001015a         call       diropen.isra.6                              ; diropen.isra.6
000000000001015f         test       eax, eax
0000000000010161         mov        ebp, eax
0000000000010163         js         loc_101b9

0000000000010165         mov        esi, r14d
0000000000010168         mov        rdi, rbx
000000000001016b         call       fts_build                                   ; fts_build
0000000000010170         test       byte [rbx+0x49], 0x2
0000000000010174         mov        qword [rbx+8], rax
0000000000010178         jne        loc_101a8

000000000001017a         mov        edi, ebp                                    ; argument "__fd" for method j_fchdir
000000000001017c         call       j_fchdir                                    ; fchdir
0000000000010181         test       eax, eax
0000000000010183         jne        loc_101c8

0000000000010185         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000010187         call       j_close                                     ; close

                     loc_1018c:
000000000001018c         mov        rax, qword [rbx+8]                          ; CODE XREF=rpl_fts_children+295
0000000000010190         jmp        loc_10124
0000000000010192         align      8

                     loc_10198:
0000000000010198         mov        dword [rax], 0x16                           ; CODE XREF=rpl_fts_children+29
000000000001019e         xor        eax, eax
00000000000101a0         jmp        loc_10124
00000000000101a5         align      8

                     loc_101a8:
00000000000101a8         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_children+232
00000000000101ad         mov        esi, ebp
00000000000101af         mov        rdi, rbx
00000000000101b2         call       cwd_advance_fd                              ; cwd_advance_fd
00000000000101b7         jmp        loc_1018c

                     loc_101b9:
00000000000101b9         mov        qword [rbx+8], 0x0                          ; CODE XREF=rpl_fts_children+211
00000000000101c1         xor        eax, eax
00000000000101c3         jmp        loc_10124

                     loc_101c8:
00000000000101c8         mov        ebx, dword [r13]                            ; CODE XREF=rpl_fts_children+243
00000000000101cc         mov        edi, ebp                                    ; argument "__fd" for method j_close
00000000000101ce         call       j_close                                     ; close
00000000000101d3         xor        eax, eax
00000000000101d5         mov        dword [r13], ebx
00000000000101d9         jmp        loc_10124
00000000000101de         align      32                                          ; End of unwind block (FDE at 0x25910)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
00000000000101e0         push       r13                                         ; Begin of unwind block (FDE at 0x25974), CODE XREF=string_hasher_ci+282, mbscasecmp+649, mbscasecmp+825, mbscasecmp+1467, mbscasecmp+1659, sub_af20+534, build_wcs_buffer+111, build_wcs_upper_buffer+231, build_wcs_upper_buffer+608, re_string_reconstruct+586, re_string_reconstruct+1343
00000000000101e2         push       r12
00000000000101e4         mov        r13, rsi
00000000000101e7         push       rbp
00000000000101e8         push       rbx
00000000000101e9         mov        rbx, rdi
00000000000101ec         mov        r12, rdx
00000000000101ef         sub        rsp, 0x18
00000000000101f3         mov        rax, qword [fs:0x28]
00000000000101fc         mov        qword [rsp+0x38+var_30], rax
0000000000010201         xor        eax, eax
0000000000010203         lea        rax, qword [rsp+0x38+var_34]
0000000000010208         test       rdi, rdi
000000000001020b         cmove      rbx, rax
000000000001020f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000010212         call       j_mbrtowc                                   ; mbrtowc
0000000000010217         cmp        rax, 0xfffffffffffffffd
000000000001021b         mov        rbp, rax
000000000001021e         jbe        loc_10240

0000000000010220         test       r12, r12
0000000000010223         je         loc_10240

0000000000010225         xor        edi, edi
0000000000010227         call       hard_locale                                 ; hard_locale
000000000001022c         test       al, al
000000000001022e         jne        loc_10240

0000000000010230         movzx      eax, byte [r13]
0000000000010235         mov        ebp, 0x1
000000000001023a         mov        dword [rbx], eax
000000000001023c         nop        dword [rax]

                     loc_10240:
0000000000010240         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000010245         xor        rdx, qword [fs:0x28]
000000000001024e         mov        rax, rbp
0000000000010251         jne        loc_1025e

0000000000010253         add        rsp, 0x18
0000000000010257         pop        rbx
0000000000010258         pop        rbp
0000000000010259         pop        r12
000000000001025b         pop        r13
000000000001025d         ret
                        ; endp

                     loc_1025e:
000000000001025e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000010263         align      16                                          ; End of unwind block (FDE at 0x25974)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     unescape_tab:
0000000000010270         push       rbx                                         ; Begin of unwind block (FDE at 0x259b4), CODE XREF=read_file_system_list+344, read_file_system_list+359, read_file_system_list+374
0000000000010271         mov        rbx, rdi
0000000000010274         call       j_strlen                                    ; strlen
0000000000010279         mov        rcx, rbx
000000000001027c         add        rax, 0x1
0000000000010280         xor        edx, edx
0000000000010282         jmp        loc_10297
0000000000010284         align      8

                     loc_10288:
0000000000010288         mov        byte [rcx], sil                             ; CODE XREF=unescape_tab+51, unescape_tab+60, unescape_tab+75, unescape_tab+91, unescape_tab+106
000000000001028b         mov        rdx, rdi

                     loc_1028e:
000000000001028e         add        rcx, 0x1                                    ; CODE XREF=unescape_tab+122
0000000000010292         cmp        rax, rdx
0000000000010295         jbe        loc_102f0

                     loc_10297:
0000000000010297         movzx      esi, byte [rbx+rdx]                         ; CODE XREF=unescape_tab+18
000000000001029b         lea        rdi, qword [rdx+1]
000000000001029f         cmp        sil, 0x5c
00000000000102a3         jne        loc_10288

00000000000102a5         lea        r8, qword [rdx+4]
00000000000102a9         cmp        r8, rax
00000000000102ac         jae        loc_10288

00000000000102ae         movzx      r9d, byte [rbx+rdi]
00000000000102b3         lea        r10d, dword [r9-0x30]
00000000000102b7         cmp        r10b, 0x3
00000000000102bb         ja         loc_10288

00000000000102bd         movzx      r10d, byte [rbx+rdx+2]
00000000000102c3         lea        r11d, dword [r10-0x30]
00000000000102c7         cmp        r11b, 0x7
00000000000102cb         ja         loc_10288

00000000000102cd         movzx      edx, byte [rbx+rdx+3]
00000000000102d2         lea        r11d, dword [rdx-0x30]
00000000000102d6         cmp        r11b, 0x7
00000000000102da         ja         loc_10288

00000000000102dc         lea        edx, dword [r10+r9*8]
00000000000102e0         lea        edx, dword [r11+rdx*8-0x80]
00000000000102e5         mov        byte [rcx], dl
00000000000102e7         mov        rdx, r8
00000000000102ea         jmp        loc_1028e
00000000000102ec         align      16

                     loc_102f0:
00000000000102f0         pop        rbx                                         ; CODE XREF=unescape_tab+37
00000000000102f1         ret
                        ; endp
00000000000102f2         align      256                                         ; End of unwind block (FDE at 0x259b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_mount_entry:
0000000000010300         push       rbx                                         ; Begin of unwind block (FDE at 0x259d0), CODE XREF=main+4926, read_file_system_list+1844
0000000000010301         mov        rbx, rdi
0000000000010304         mov        rdi, qword [rdi]
0000000000010307         call       sub_2a10                                    ; sub_2a10
000000000001030c         mov        rdi, qword [rbx+8]
0000000000010310         call       sub_2a10                                    ; sub_2a10
0000000000010315         mov        rdi, qword [rbx+0x10]
0000000000010319         call       sub_2a10                                    ; sub_2a10
000000000001031e         test       byte [rbx+0x28], 0x4
0000000000010322         je         loc_1032d

0000000000010324         mov        rdi, qword [rbx+0x18]
0000000000010328         call       sub_2a10                                    ; sub_2a10

                     loc_1032d:
000000000001032d         mov        rdi, rbx                                    ; CODE XREF=free_mount_entry+34
0000000000010330         pop        rbx
0000000000010331         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000010336         align      64                                          ; End of unwind block (FDE at 0x259d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_60: int32_t, -96
        ;    var_64: int32_t, -100
        ;    var_68: int32_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_74: int32_t, -116
        ;    var_78: int32_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_81: int8_t, -129
        ;    var_90: int64_t, -144


                     read_file_system_list:
0000000000010340         push       r15                                         ; Begin of unwind block (FDE at 0x259ec), CODE XREF=main+4908
0000000000010342         push       r14
0000000000010344         lea        rsi, qword [aUpper+4]                       ; argument "__modes" for method j_fopen, 0x22817
000000000001034b         push       r13
000000000001034d         push       r12
000000000001034f         lea        rdi, qword [aProcselfmounti]                ; argument "__filename" for method j_fopen, "/proc/self/mountinfo"
0000000000010356         push       rbp
0000000000010357         push       rbx
0000000000010358         sub        rsp, 0x68
000000000001035c         mov        rax, qword [fs:0x28]
0000000000010365         mov        qword [rsp+0x98+var_40], rax
000000000001036a         xor        eax, eax
000000000001036c         call       j_fopen                                     ; fopen
0000000000010371         test       rax, rax
0000000000010374         je         loc_107c0

000000000001037a         lea        r14, qword [rsp+0x98+var_58]
000000000001037f         lea        r13, qword [rsp+0x98+var_48]
0000000000010384         lea        r12, qword [rsp+0x98+var_50]
0000000000010389         mov        rbp, rax
000000000001038c         mov        qword [rsp+0x98+var_50], 0x0
0000000000010395         mov        qword [rsp+0x98+var_48], 0x0
000000000001039e         nop

                     loc_103a0:
00000000000103a0         mov        rcx, rbp                                    ; argument "__stream" for method j___getdelim, CODE XREF=read_file_system_list+196, read_file_system_list+226, read_file_system_list+282, read_file_system_list+675
00000000000103a3         mov        edx, 0xa                                    ; argument "__delimiter" for method j___getdelim
00000000000103a8         mov        rsi, r13                                    ; argument "__n" for method j___getdelim
00000000000103ab         mov        rdi, r12                                    ; argument "__lineptr" for method j___getdelim
00000000000103ae         call       j___getdelim                                ; __getdelim
00000000000103b3         cmp        rax, 0xffffffffffffffff
00000000000103b7         je         loc_105f0

00000000000103bd         lea        rcx, qword [rsp+0x98+var_7C]
00000000000103c2         lea        rdx, qword [rsp+0x98+var_80]
00000000000103c7         sub        rsp, 0x8
00000000000103cb         lea        rbx, qword [rsp+0xa0+var_81]
00000000000103d0         lea        rsi, qword [aUUUuNsnNsnc]                   ; argument "__format" for method j_sscanf, "%*u %*u %u:%u %n%*s%n %n%*s%n%c"
00000000000103d7         push       rbx
00000000000103d8         lea        rax, qword [rsp+0xa8+var_74]
00000000000103dd         push       rax
00000000000103de         lea        rax, qword [rsp+0xb0+var_78]
00000000000103e3         push       rax
00000000000103e4         mov        rdi, qword [rsp+0xb8+var_50]                ; argument "__s" for method j_sscanf
00000000000103e9         xor        eax, eax
00000000000103eb         lea        r9, qword [rsp+0xb8+var_5C]
00000000000103f0         lea        r8, qword [rsp+0xb8+var_60]
00000000000103f5         call       j_sscanf                                    ; sscanf
00000000000103fa         and        eax, 0xfffffffb
00000000000103fd         add        rsp, 0x20
0000000000010401         cmp        eax, 0x3
0000000000010404         jne        loc_103a0

0000000000010406         movsxd     rdi, dword [rsp+0x98+var_74]
000000000001040b         lea        rsi, qword [aProcselfmounti+21]             ; argument "__needle" for method j_strstr, 0x226e5
0000000000010412         add        rdi, qword [rsp+0x98+var_50]                ; argument "__haystack" for method j_strstr
0000000000010417         call       j_strstr                                    ; strstr
000000000001041c         test       rax, rax
000000000001041f         mov        r15, rax
0000000000010422         je         loc_103a0

0000000000010428         lea        rcx, qword [rsp+0x98+var_6C]
000000000001042d         lea        rdx, qword [rsp+0x98+var_70]
0000000000010432         sub        rsp, 0x8
0000000000010436         push       rbx
0000000000010437         lea        rsi, qword [aNsnNsnC]                       ; argument "__format" for method j_sscanf, " - %n%*s%n %n%*s%n %c"
000000000001043e         mov        rdi, rax                                    ; argument "__s" for method j_sscanf
0000000000010441         xor        eax, eax
0000000000010443         lea        r9, qword [rsp+0xa8+var_64]
0000000000010448         lea        r8, qword [rsp+0xa8+var_68]
000000000001044d         call       j_sscanf                                    ; sscanf
0000000000010452         and        eax, 0xfffffffb
0000000000010455         cmp        eax, 0x1
0000000000010458         pop        rdx
0000000000010459         pop        rcx
000000000001045a         jne        loc_103a0

0000000000010460         movsxd     rax, dword [rsp+0x98+var_5C]
0000000000010465         mov        rdx, qword [rsp+0x98+var_50]
000000000001046a         mov        byte [rdx+rax], 0x0
000000000001046e         movsxd     rax, dword [rsp+0x98+var_74]
0000000000010473         mov        rdx, qword [rsp+0x98+var_50]
0000000000010478         mov        byte [rdx+rax], 0x0
000000000001047c         movsxd     rax, dword [rsp+0x98+var_6C]
0000000000010481         mov        byte [r15+rax], 0x0
0000000000010486         movsxd     rax, dword [rsp+0x98+var_64]
000000000001048b         mov        byte [r15+rax], 0x0
0000000000010490         movsxd     rdi, dword [rsp+0x98+var_68]
0000000000010495         add        rdi, r15
0000000000010498         call       unescape_tab                                ; unescape_tab
000000000001049d         movsxd     rdi, dword [rsp+0x98+var_78]
00000000000104a2         add        rdi, qword [rsp+0x98+var_50]
00000000000104a7         call       unescape_tab                                ; unescape_tab
00000000000104ac         movsxd     rdi, dword [rsp+0x98+var_60]
00000000000104b1         add        rdi, qword [rsp+0x98+var_50]
00000000000104b6         call       unescape_tab                                ; unescape_tab
00000000000104bb         mov        edi, 0x38
00000000000104c0         call       xmalloc                                     ; xmalloc
00000000000104c5         movsxd     rdi, dword [rsp+0x98+var_68]
00000000000104ca         mov        rbx, rax
00000000000104cd         add        rdi, r15
00000000000104d0         call       xstrdup                                     ; xstrdup
00000000000104d5         movsxd     rdi, dword [rsp+0x98+var_78]
00000000000104da         mov        qword [rbx], rax
00000000000104dd         add        rdi, qword [rsp+0x98+var_50]
00000000000104e2         call       xstrdup                                     ; xstrdup
00000000000104e7         movsxd     rdi, dword [rsp+0x98+var_60]
00000000000104ec         mov        qword [rbx+8], rax
00000000000104f0         add        rdi, qword [rsp+0x98+var_50]
00000000000104f5         call       xstrdup                                     ; xstrdup
00000000000104fa         movsxd     rdi, dword [rsp+0x98+var_70]
00000000000104ff         mov        qword [rbx+0x10], rax
0000000000010503         add        rdi, r15
0000000000010506         call       xstrdup                                     ; xstrdup
000000000001050b         mov        edx, dword [rsp+0x98+var_80]
000000000001050f         mov        r15, rax
0000000000010512         mov        qword [rbx+0x18], rax
0000000000010516         mov        eax, dword [rsp+0x98+var_7C]
000000000001051a         movabs     rsi, 0xfffff00000000000
0000000000010524         lea        rdi, qword [aAutofs]                        ; "autofs"
000000000001052b         or         byte [rbx+0x28], 0x4
000000000001052f         mov        rcx, rdx
0000000000010532         shl        rdx, 0x20
0000000000010536         shl        rcx, 0x8
000000000001053a         and        rdx, rsi
000000000001053d         movabs     rsi, 0xffffff00000
0000000000010547         and        ecx, 0xfff00
000000000001054d         or         rdx, rcx
0000000000010550         movzx      ecx, al
0000000000010553         shl        rax, 0xc
0000000000010557         or         rdx, rcx
000000000001055a         and        rax, rsi
000000000001055d         mov        ecx, 0x7
0000000000010562         mov        rsi, r15
0000000000010565         or         rax, rdx
0000000000010568         mov        edx, 0x1
000000000001056d         rep  cmpsb byte [rsi], byte [rdi]
000000000001056f         mov        qword [rbx+0x20], rax
0000000000010573         seta       al
0000000000010576         sbb        al, 0x0
0000000000010578         test       al, al
000000000001057a         je         loc_1059a

000000000001057c         lea        rdi, qword [aAutofs+7]                      ; 0x22706
0000000000010583         mov        ecx, 0x5
0000000000010588         mov        rsi, r15
000000000001058b         rep  cmpsb byte [rsi], byte [rdi]
000000000001058d         seta       al
0000000000010590         sbb        al, 0x0
0000000000010592         test       al, al
0000000000010594         jne        loc_10648

                     loc_1059a:
000000000001059a         movzx      eax, byte [rbx+0x28]                        ; CODE XREF=read_file_system_list+570, read_file_system_list+800, read_file_system_list+830, read_file_system_list+860, read_file_system_list+890, read_file_system_list+920, read_file_system_list+950, read_file_system_list+980, read_file_system_list+1010, read_file_system_list+1040, read_file_system_list+1072
000000000001059e         mov        r8, qword [rbx]
00000000000105a1         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
00000000000105a6         mov        rdi, r8                                     ; argument "__s" for method j_strchr
00000000000105a9         mov        qword [rsp+0x98+var_90], r8
00000000000105ae         and        eax, 0xfffffffe
00000000000105b1         or         eax, edx
00000000000105b3         mov        byte [rbx+0x28], al
00000000000105b6         call       j_strchr                                    ; strchr
00000000000105bb         test       rax, rax
00000000000105be         mov        edx, 0x1
00000000000105c3         mov        r8, qword [rsp+0x98+var_90]
00000000000105c8         je         loc_10790

                     loc_105ce:
00000000000105ce         movzx      eax, byte [rbx+0x28]                        ; CODE XREF=read_file_system_list+1141, read_file_system_list+1955, read_file_system_list+1985
00000000000105d2         add        edx, edx
00000000000105d4         and        eax, 0xfffffffd
00000000000105d7         or         eax, edx
00000000000105d9         mov        byte [rbx+0x28], al
00000000000105dc         mov        qword [r14], rbx
00000000000105df         lea        r14, qword [rbx+0x30]
00000000000105e3         jmp        loc_103a0
00000000000105e8         align      16

                     loc_105f0:
00000000000105f0         mov        rdi, qword [rsp+0x98+var_50]                ; CODE XREF=read_file_system_list+119
00000000000105f5         call       sub_2a10                                    ; sub_2a10
00000000000105fa         test       byte [rbp], 0x20
00000000000105fe         jne        loc_10b60

0000000000010604         mov        rdi, rbp
0000000000010607         call       rpl_fclose                                  ; rpl_fclose
000000000001060c         cmp        eax, 0xffffffff
000000000001060f         je         loc_10a4e

                     loc_10615:
0000000000010615         mov        qword [r14], 0x0                            ; CODE XREF=read_file_system_list+1800
000000000001061c         mov        rax, qword [rsp+0x98+var_58]

                     loc_10621:
0000000000010621         mov        rbx, qword [rsp+0x98+var_40]                ; CODE XREF=read_file_system_list+1868, read_file_system_list+2110
0000000000010626         xor        rbx, qword [fs:0x28]
000000000001062f         jne        loc_10b83

0000000000010635         add        rsp, 0x68
0000000000010639         pop        rbx
000000000001063a         pop        rbp
000000000001063b         pop        r12
000000000001063d         pop        r13
000000000001063f         pop        r14
0000000000010641         pop        r15
0000000000010643         ret
                        ; endp
0000000000010644         align      8

                     loc_10648:
0000000000010648         lea        rdi, qword [aSubfs]                         ; "subfs", CODE XREF=read_file_system_list+596
000000000001064f         mov        ecx, 0x6
0000000000010654         mov        rsi, r15
0000000000010657         rep  cmpsb byte [rsi], byte [rdi]
0000000000010659         seta       al
000000000001065c         sbb        al, 0x0
000000000001065e         test       al, al
0000000000010660         je         loc_1059a

0000000000010666         lea        rdi, qword [aDebugfs]                       ; "debugfs"
000000000001066d         mov        ecx, 0x8
0000000000010672         mov        rsi, r15
0000000000010675         rep  cmpsb byte [rsi], byte [rdi]
0000000000010677         seta       al
000000000001067a         sbb        al, 0x0
000000000001067c         test       al, al
000000000001067e         je         loc_1059a

0000000000010684         lea        rdi, qword [aDevpts]                        ; "devpts"
000000000001068b         mov        ecx, 0x7
0000000000010690         mov        rsi, r15
0000000000010693         rep  cmpsb byte [rsi], byte [rdi]
0000000000010695         seta       al
0000000000010698         sbb        al, 0x0
000000000001069a         test       al, al
000000000001069c         je         loc_1059a

00000000000106a2         lea        rdi, qword [aFusectl]                       ; "fusectl"
00000000000106a9         mov        ecx, 0x8
00000000000106ae         mov        rsi, r15
00000000000106b1         rep  cmpsb byte [rsi], byte [rdi]
00000000000106b3         seta       al
00000000000106b6         sbb        al, 0x0
00000000000106b8         test       al, al
00000000000106ba         je         loc_1059a

00000000000106c0         lea        rdi, qword [aMqueue]                        ; "mqueue"
00000000000106c7         mov        ecx, 0x7
00000000000106cc         mov        rsi, r15
00000000000106cf         rep  cmpsb byte [rsi], byte [rdi]
00000000000106d1         seta       al
00000000000106d4         sbb        al, 0x0
00000000000106d6         test       al, al
00000000000106d8         je         loc_1059a

00000000000106de         lea        rdi, qword [aRpcpipefs]                     ; "rpc_pipefs"
00000000000106e5         mov        ecx, 0xb
00000000000106ea         mov        rsi, r15
00000000000106ed         rep  cmpsb byte [rsi], byte [rdi]
00000000000106ef         seta       al
00000000000106f2         sbb        al, 0x0
00000000000106f4         test       al, al
00000000000106f6         je         loc_1059a

00000000000106fc         lea        rdi, qword [aSysfs]                         ; "sysfs"
0000000000010703         mov        ecx, 0x6
0000000000010708         mov        rsi, r15
000000000001070b         rep  cmpsb byte [rsi], byte [rdi]
000000000001070d         seta       al
0000000000010710         sbb        al, 0x0
0000000000010712         test       al, al
0000000000010714         je         loc_1059a

000000000001071a         lea        rdi, qword [aDevfs]                         ; "devfs"
0000000000010721         mov        ecx, 0x6
0000000000010726         mov        rsi, r15
0000000000010729         rep  cmpsb byte [rsi], byte [rdi]
000000000001072b         seta       al
000000000001072e         sbb        al, 0x0
0000000000010730         test       al, al
0000000000010732         je         loc_1059a

0000000000010738         lea        rdi, qword [aKernfs]                        ; "kernfs"
000000000001073f         mov        ecx, 0x7
0000000000010744         mov        rsi, r15
0000000000010747         rep  cmpsb byte [rsi], byte [rdi]
0000000000010749         seta       al
000000000001074c         sbb        al, 0x0
000000000001074e         test       al, al
0000000000010750         je         loc_1059a

0000000000010756         lea        rsi, qword [aIgnore]                        ; argument "__s2" for method j_strcmp, "ignore"
000000000001075d         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
0000000000010760         mov        byte [rsp+0x98+var_90], dl
0000000000010764         call       j_strcmp                                    ; strcmp
0000000000010769         test       eax, eax
000000000001076b         movzx      edx, byte [rsp+0x98+var_90]
0000000000010770         je         loc_1059a

0000000000010776         lea        rsi, qword [aIgnore+7]                      ; argument "__s2" for method j_strcmp, 0x22754
000000000001077d         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
0000000000010780         call       j_strcmp                                    ; strcmp
0000000000010785         test       eax, eax
0000000000010787         sete       dl
000000000001078a         jmp        loc_1059a
000000000001078f         align      16

                     loc_10790:
0000000000010790         cmp        byte [r8], 0x2f                             ; CODE XREF=read_file_system_list+648
0000000000010794         je         loc_10ac0

                     loc_1079a:
000000000001079a         lea        rsi, qword [aHosts]                         ; "-hosts", CODE XREF=read_file_system_list+1925, read_file_system_list+1991
00000000000107a1         mov        ecx, 0x7
00000000000107a6         mov        rdi, r8
00000000000107a9         rep  cmpsb byte [rsi], byte [rdi]
00000000000107ab         seta       al
00000000000107ae         sbb        al, 0x0
00000000000107b0         test       al, al
00000000000107b2         sete       dl
00000000000107b5         jmp        loc_105ce
00000000000107ba         align      64

                     loc_107c0:
00000000000107c0         lea        rsi, qword [aUpper+4]                       ; argument "__mode" for method j_setmntent, 0x22817, CODE XREF=read_file_system_list+52
00000000000107c7         lea        rdi, qword [aEtcmtab]                       ; argument "__file" for method j_setmntent, "/etc/mtab"
00000000000107ce         call       j_setmntent                                 ; setmntent
00000000000107d3         test       rax, rax
00000000000107d6         mov        rbx, rax
00000000000107d9         je         loc_10b7c

00000000000107df         mov        rdi, rbx                                    ; argument "__stream" for method j_getmntent
00000000000107e2         lea        r14, qword [rsp+0x98+var_58]
00000000000107e7         lea        rbp, qword [aAutofs]                        ; "autofs"
00000000000107ee         call       j_getmntent                                 ; getmntent
00000000000107f3         test       rax, rax
00000000000107f6         mov        r13, rax
00000000000107f9         je         loc_10a3e

00000000000107ff         nop

                     loc_10800:
0000000000010800         lea        rsi, qword [aEtcmtab+10]                    ; argument "__opt" for method j_hasmntopt, 0x22775, CODE XREF=read_file_system_list+1784
0000000000010807         mov        rdi, r13                                    ; argument "__mnt" for method j_hasmntopt
000000000001080a         call       j_hasmntopt                                 ; hasmntopt
000000000001080f         mov        edi, 0x38
0000000000010814         mov        r15, rax
0000000000010817         call       xmalloc                                     ; xmalloc
000000000001081c         mov        rdi, qword [r13]
0000000000010820         mov        r12, rax
0000000000010823         call       xstrdup                                     ; xstrdup
0000000000010828         mov        rdi, qword [r13+8]
000000000001082c         mov        qword [r12], rax
0000000000010830         call       xstrdup                                     ; xstrdup
0000000000010835         mov        rdi, qword [r13+0x10]
0000000000010839         mov        qword [r12+8], rax
000000000001083e         mov        qword [r12+0x10], 0x0
0000000000010847         call       xstrdup                                     ; xstrdup
000000000001084c         mov        ecx, 0x7
0000000000010851         mov        rsi, rax
0000000000010854         mov        rdi, rbp
0000000000010857         or         byte [r12+0x28], 0x4
000000000001085d         mov        r13, rax
0000000000010860         mov        qword [r12+0x18], rax
0000000000010865         rep  cmpsb byte [rsi], byte [rdi]
0000000000010867         mov        edx, 0x1
000000000001086c         seta       al
000000000001086f         sbb        al, 0x0
0000000000010871         test       al, al
0000000000010873         je         loc_109d8

0000000000010879         lea        rdi, qword [aAutofs+7]                      ; 0x22706
0000000000010880         mov        ecx, 0x5
0000000000010885         mov        rsi, r13
0000000000010888         rep  cmpsb byte [rsi], byte [rdi]
000000000001088a         seta       al
000000000001088d         sbb        al, 0x0
000000000001088f         test       al, al
0000000000010891         je         loc_109d8

0000000000010897         lea        rdi, qword [aSubfs]                         ; "subfs"
000000000001089e         mov        ecx, 0x6
00000000000108a3         mov        rsi, r13
00000000000108a6         rep  cmpsb byte [rsi], byte [rdi]
00000000000108a8         seta       al
00000000000108ab         sbb        al, 0x0
00000000000108ad         test       al, al
00000000000108af         je         loc_109d8

00000000000108b5         lea        rdi, qword [aDebugfs]                       ; "debugfs"
00000000000108bc         mov        ecx, 0x8
00000000000108c1         mov        rsi, r13
00000000000108c4         rep  cmpsb byte [rsi], byte [rdi]
00000000000108c6         seta       al
00000000000108c9         sbb        al, 0x0
00000000000108cb         test       al, al
00000000000108cd         je         loc_109d8

00000000000108d3         lea        rdi, qword [aDevpts]                        ; "devpts"
00000000000108da         mov        ecx, 0x7
00000000000108df         mov        rsi, r13
00000000000108e2         rep  cmpsb byte [rsi], byte [rdi]
00000000000108e4         seta       al
00000000000108e7         sbb        al, 0x0
00000000000108e9         test       al, al
00000000000108eb         je         loc_109d8

00000000000108f1         lea        rdi, qword [aFusectl]                       ; "fusectl"
00000000000108f8         mov        ecx, 0x8
00000000000108fd         mov        rsi, r13
0000000000010900         rep  cmpsb byte [rsi], byte [rdi]
0000000000010902         seta       al
0000000000010905         sbb        al, 0x0
0000000000010907         test       al, al
0000000000010909         je         loc_109d8

000000000001090f         lea        rdi, qword [aMqueue]                        ; "mqueue"
0000000000010916         mov        ecx, 0x7
000000000001091b         mov        rsi, r13
000000000001091e         rep  cmpsb byte [rsi], byte [rdi]
0000000000010920         seta       al
0000000000010923         sbb        al, 0x0
0000000000010925         test       al, al
0000000000010927         je         loc_109d8

000000000001092d         lea        rdi, qword [aRpcpipefs]                     ; "rpc_pipefs"
0000000000010934         mov        ecx, 0xb
0000000000010939         mov        rsi, r13
000000000001093c         rep  cmpsb byte [rsi], byte [rdi]
000000000001093e         seta       al
0000000000010941         sbb        al, 0x0
0000000000010943         test       al, al
0000000000010945         je         loc_109d8

000000000001094b         lea        rdi, qword [aSysfs]                         ; "sysfs"
0000000000010952         mov        ecx, 0x6
0000000000010957         mov        rsi, r13
000000000001095a         rep  cmpsb byte [rsi], byte [rdi]
000000000001095c         seta       al
000000000001095f         sbb        al, 0x0
0000000000010961         test       al, al
0000000000010963         je         loc_109d8

0000000000010965         lea        rdi, qword [aDevfs]                         ; "devfs"
000000000001096c         mov        ecx, 0x6
0000000000010971         mov        rsi, r13
0000000000010974         rep  cmpsb byte [rsi], byte [rdi]
0000000000010976         seta       al
0000000000010979         sbb        al, 0x0
000000000001097b         test       al, al
000000000001097d         je         loc_109d8

000000000001097f         lea        rdi, qword [aKernfs]                        ; "kernfs"
0000000000010986         mov        ecx, 0x7
000000000001098b         mov        rsi, r13
000000000001098e         rep  cmpsb byte [rsi], byte [rdi]
0000000000010990         seta       al
0000000000010993         sbb        al, 0x0
0000000000010995         test       al, al
0000000000010997         je         loc_109d8

0000000000010999         lea        rsi, qword [aIgnore]                        ; argument "__s2" for method j_strcmp, "ignore"
00000000000109a0         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
00000000000109a3         mov        byte [rsp+0x98+var_90], dl
00000000000109a7         call       j_strcmp                                    ; strcmp
00000000000109ac         test       eax, eax
00000000000109ae         movzx      edx, byte [rsp+0x98+var_90]
00000000000109b3         je         loc_109d8

00000000000109b5         lea        rsi, qword [aIgnore+7]                      ; argument "__s2" for method j_strcmp, 0x22754
00000000000109bc         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
00000000000109bf         call       j_strcmp                                    ; strcmp
00000000000109c4         test       r15, r15
00000000000109c7         sete       dl
00000000000109ca         test       eax, eax
00000000000109cc         sete       al
00000000000109cf         and        edx, eax
00000000000109d1         nop        dword [rax]

                     loc_109d8:
00000000000109d8         movzx      eax, byte [r12+0x28]                        ; CODE XREF=read_file_system_list+1331, read_file_system_list+1361, read_file_system_list+1391, read_file_system_list+1421, read_file_system_list+1451, read_file_system_list+1481, read_file_system_list+1511, read_file_system_list+1541, read_file_system_list+1571, read_file_system_list+1597, read_file_system_list+1623
00000000000109de         mov        r15, qword [r12]
00000000000109e2         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
00000000000109e7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
00000000000109ea         and        eax, 0xfffffffe
00000000000109ed         or         eax, edx
00000000000109ef         mov        byte [r12+0x28], al
00000000000109f4         call       j_strchr                                    ; strchr
00000000000109f9         test       rax, rax
00000000000109fc         mov        edx, 0x1
0000000000010a01         je         loc_10a98

                     loc_10a07:
0000000000010a07         movzx      eax, byte [r12+0x28]                        ; CODE XREF=read_file_system_list+1913, read_file_system_list+2031, read_file_system_list+2061
0000000000010a0d         add        edx, edx
0000000000010a0f         mov        qword [r12+0x20], 0xffffffffffffffff
0000000000010a18         mov        rdi, rbx                                    ; argument "__stream" for method j_getmntent
0000000000010a1b         and        eax, 0xfffffffd
0000000000010a1e         or         eax, edx
0000000000010a20         mov        byte [r12+0x28], al
0000000000010a25         mov        qword [r14], r12
0000000000010a28         lea        r14, qword [r12+0x30]
0000000000010a2d         call       j_getmntent                                 ; getmntent
0000000000010a32         test       rax, rax
0000000000010a35         mov        r13, rax
0000000000010a38         jne        loc_10800

                     loc_10a3e:
0000000000010a3e         mov        rdi, rbx                                    ; argument "__stream" for method j_endmntent, CODE XREF=read_file_system_list+1209
0000000000010a41         call       j_endmntent                                 ; endmntent
0000000000010a46         test       eax, eax
0000000000010a48         jne        loc_10615

                     loc_10a4e:
0000000000010a4e         call       j___errno_location                          ; __errno_location, CODE XREF=read_file_system_list+719
0000000000010a53         mov        r13d, dword [rax]
0000000000010a56         mov        r12, rax

                     loc_10a59:
0000000000010a59         mov        qword [r14], 0x0                            ; CODE XREF=read_file_system_list+2103
0000000000010a60         mov        rdi, qword [rsp+0x98+var_58]
0000000000010a65         test       rdi, rdi
0000000000010a68         je         loc_10a86

0000000000010a6a         nop        word [rax+rax]

                     loc_10a70:
0000000000010a70         mov        rbx, qword [rdi+0x30]                       ; CODE XREF=read_file_system_list+1860
0000000000010a74         call       free_mount_entry                            ; free_mount_entry
0000000000010a79         test       rbx, rbx
0000000000010a7c         mov        qword [rsp+0x98+var_58], rbx
0000000000010a81         mov        rdi, rbx
0000000000010a84         jne        loc_10a70

                     loc_10a86:
0000000000010a86         mov        dword [r12], r13d                           ; CODE XREF=read_file_system_list+1832
0000000000010a8a         xor        eax, eax
0000000000010a8c         jmp        loc_10621
0000000000010a91         align      8

                     loc_10a98:
0000000000010a98         cmp        byte [r15], 0x2f                            ; CODE XREF=read_file_system_list+1729
0000000000010a9c         je         loc_10b10

                     loc_10a9e:
0000000000010a9e         lea        rsi, qword [aHosts]                         ; "-hosts", CODE XREF=read_file_system_list+2005, read_file_system_list+2067
0000000000010aa5         mov        ecx, 0x7
0000000000010aaa         mov        rdi, r15
0000000000010aad         rep  cmpsb byte [rsi], byte [rdi]
0000000000010aaf         seta       al
0000000000010ab2         sbb        al, 0x0
0000000000010ab4         test       al, al
0000000000010ab6         sete       dl
0000000000010ab9         jmp        loc_10a07
0000000000010abe         align      64

                     loc_10ac0:
0000000000010ac0         cmp        byte [r8+1], 0x2f                           ; CODE XREF=read_file_system_list+1108
0000000000010ac5         jne        loc_1079a

0000000000010acb         lea        rdi, qword [aSmbfs]                         ; "smbfs"
0000000000010ad2         mov        ecx, 0x6
0000000000010ad7         mov        rsi, r15
0000000000010ada         rep  cmpsb byte [rsi], byte [rdi]
0000000000010adc         seta       al
0000000000010adf         sbb        al, 0x0
0000000000010ae1         test       al, al
0000000000010ae3         je         loc_105ce

0000000000010ae9         lea        rdi, qword [aSmbfs+6]                       ; 0x2275f
0000000000010af0         mov        ecx, 0x5
0000000000010af5         mov        rsi, r15
0000000000010af8         rep  cmpsb byte [rsi], byte [rdi]
0000000000010afa         seta       al
0000000000010afd         sbb        al, 0x0
0000000000010aff         test       al, al
0000000000010b01         je         loc_105ce

0000000000010b07         jmp        loc_1079a
0000000000010b0c         align      16

                     loc_10b10:
0000000000010b10         cmp        byte [r15+1], 0x2f                          ; CODE XREF=read_file_system_list+1884
0000000000010b15         jne        loc_10a9e

0000000000010b17         lea        rdi, qword [aSmbfs]                         ; "smbfs"
0000000000010b1e         mov        ecx, 0x6
0000000000010b23         mov        rsi, r13
0000000000010b26         rep  cmpsb byte [rsi], byte [rdi]
0000000000010b28         seta       al
0000000000010b2b         sbb        al, 0x0
0000000000010b2d         test       al, al
0000000000010b2f         je         loc_10a07

0000000000010b35         lea        rdi, qword [aSmbfs+6]                       ; 0x2275f
0000000000010b3c         mov        ecx, 0x5
0000000000010b41         mov        rsi, r13
0000000000010b44         rep  cmpsb byte [rsi], byte [rdi]
0000000000010b46         seta       al
0000000000010b49         sbb        al, 0x0
0000000000010b4b         test       al, al
0000000000010b4d         je         loc_10a07

0000000000010b53         jmp        loc_10a9e
0000000000010b58         align      32

                     loc_10b60:
0000000000010b60         call       j___errno_location                          ; __errno_location, CODE XREF=read_file_system_list+702
0000000000010b65         mov        r13d, dword [rax]
0000000000010b68         mov        r12, rax
0000000000010b6b         mov        rdi, rbp
0000000000010b6e         call       rpl_fclose                                  ; rpl_fclose
0000000000010b73         mov        dword [r12], r13d
0000000000010b77         jmp        loc_10a59

                     loc_10b7c:
0000000000010b7c         xor        eax, eax                                    ; CODE XREF=read_file_system_list+1177
0000000000010b7e         jmp        loc_10621

                     loc_10b83:
0000000000010b83         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=read_file_system_list+751
                        ; endp
0000000000010b88         align      16                                          ; End of unwind block (FDE at 0x259ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     peek_token_bracket:
0000000000010b90         mov        rax, qword [rsi+0x48]                       ; Begin of unwind block (FDE at 0x25a64), CODE XREF=parse_bracket_element.constprop.37+507, sub_1c260+84, sub_1c260+295, sub_1c260+1382, sub_1c260+1566, sub_1c260+1659
0000000000010b94         cmp        qword [rsi+0x68], rax
0000000000010b98         jle        loc_10bf0

0000000000010b9a         mov        r8, qword [rsi+8]
0000000000010b9e         cmp        dword [rsi+0x90], 0x1
0000000000010ba5         movzx      ecx, byte [r8+rax]
0000000000010baa         mov        byte [rdi], cl
0000000000010bac         jle        loc_10bc3

0000000000010bae         cmp        rax, qword [rsi+0x30]
0000000000010bb2         je         loc_10bc3

0000000000010bb4         mov        r9, qword [rsi+0x10]
0000000000010bb8         cmp        dword [r9+rax*4], 0xffffffff
0000000000010bbd         je         loc_10c3f

                     loc_10bc3:
0000000000010bc3         cmp        cl, 0x5c                                    ; CODE XREF=peek_token_bracket+28, peek_token_bracket+34
0000000000010bc6         je         loc_10c30

0000000000010bc8         cmp        cl, 0x5b
0000000000010bcb         je         loc_10c00

0000000000010bcd         cmp        cl, 0x5d
0000000000010bd0         je         loc_10c70

0000000000010bd6         cmp        cl, 0x5e
0000000000010bd9         je         loc_10c60

0000000000010bdf         cmp        cl, 0x2d
0000000000010be2         jne        loc_10c3f

0000000000010be4         mov        byte [rdi+8], 0x16
0000000000010be8         mov        eax, 0x1
0000000000010bed         ret
                        ; endp
0000000000010bee         align      16

                     loc_10bf0:
0000000000010bf0         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token_bracket+8
0000000000010bf4         xor        eax, eax
0000000000010bf6         ret
                        ; endp
0000000000010bf7         align      1024

                     loc_10c00:
0000000000010c00         lea        rcx, qword [rax+1]                          ; CODE XREF=peek_token_bracket+59
0000000000010c04         cmp        rcx, qword [rsi+0x58]
0000000000010c08         jge        loc_10c50

0000000000010c0a         movzx      eax, byte [r8+rax+1]
0000000000010c10         cmp        al, 0x3a
0000000000010c12         mov        byte [rdi], al
0000000000010c14         je         loc_10cb0

0000000000010c1a         cmp        al, 0x3d
0000000000010c1c         je         loc_10ca0

0000000000010c22         cmp        al, 0x2e
0000000000010c24         jne        loc_10c50

0000000000010c26         mov        byte [rdi+8], 0x1a
0000000000010c2a         mov        eax, 0x2
0000000000010c2f         ret
                        ; endp

                     loc_10c30:
0000000000010c30         and        edx, 0x1                                    ; CODE XREF=peek_token_bracket+54
0000000000010c33         je         loc_10c3f

0000000000010c35         lea        rdx, qword [rax+1]
0000000000010c39         cmp        rdx, qword [rsi+0x58]
0000000000010c3d         jl         loc_10c80

                     loc_10c3f:
0000000000010c3f         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+45, peek_token_bracket+82, peek_token_bracket+163
0000000000010c43         mov        eax, 0x1
0000000000010c48         ret
                        ; endp
0000000000010c49         align      16

                     loc_10c50:
0000000000010c50         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+120, peek_token_bracket+148, peek_token_bracket+291
0000000000010c54         mov        byte [rdi], 0x5b
0000000000010c57         mov        eax, 0x1
0000000000010c5c         ret
                        ; endp
0000000000010c5d         align      32

                     loc_10c60:
0000000000010c60         mov        byte [rdi+8], 0x19                          ; CODE XREF=peek_token_bracket+73
0000000000010c64         mov        eax, 0x1
0000000000010c69         ret
                        ; endp
0000000000010c6a         align      16

                     loc_10c70:
0000000000010c70         mov        byte [rdi+8], 0x15                          ; CODE XREF=peek_token_bracket+64
0000000000010c74         mov        eax, 0x1
0000000000010c79         ret
                        ; endp
0000000000010c7a         align      128

                     loc_10c80:
0000000000010c80         mov        qword [rsi+0x48], rdx                       ; CODE XREF=peek_token_bracket+173
0000000000010c84         movzx      eax, byte [r8+rax+1]
0000000000010c8a         mov        byte [rdi+8], 0x1
0000000000010c8e         mov        byte [rdi], al
0000000000010c90         mov        eax, 0x1
0000000000010c95         ret
                        ; endp
0000000000010c96         align      32

                     loc_10ca0:
0000000000010ca0         mov        byte [rdi+8], 0x1c                          ; CODE XREF=peek_token_bracket+140
0000000000010ca4         mov        eax, 0x2
0000000000010ca9         ret
                        ; endp
0000000000010caa         align      16

                     loc_10cb0:
0000000000010cb0         and        edx, 0x4                                    ; CODE XREF=peek_token_bracket+132
0000000000010cb3         je         loc_10c50

0000000000010cb5         mov        byte [rdi+8], 0x1e
0000000000010cb9         mov        eax, 0x2
0000000000010cbe         ret
                        ; endp
0000000000010cbf         align      64                                          ; End of unwind block (FDE at 0x25a64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mark_opt_subexp:
0000000000010cc0         cmp        byte [rsi+0x30], 0x11                       ; Begin of unwind block (FDE at 0x25a78), DATA XREF=sub_1baf0+1284
0000000000010cc4         je         loc_10cd0

                     loc_10cc6:
0000000000010cc6         xor        eax, eax                                    ; CODE XREF=mark_opt_subexp+20
0000000000010cc8         ret
                        ; endp
0000000000010cc9         align      16

                     loc_10cd0:
0000000000010cd0         cmp        rdi, qword [rsi+0x28]                       ; CODE XREF=mark_opt_subexp+4
0000000000010cd4         jne        loc_10cc6

0000000000010cd6         or         byte [rsi+0x32], 0x8
0000000000010cda         xor        eax, eax
0000000000010cdc         ret
                        ; endp
0000000000010cdd         align      32                                          ; End of unwind block (FDE at 0x25a78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_52: int16_t, -82
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120


                     check_dst_limits_calc_pos_1:
0000000000010ce0         push       r15                                         ; Begin of unwind block (FDE at 0x25a8c), CODE XREF=check_dst_limits_calc_pos_1+349, check_dst_limits_calc_pos+88
0000000000010ce2         push       r14
0000000000010ce4         mov        r9, rdx
0000000000010ce7         push       r13
0000000000010ce9         push       r12
0000000000010ceb         lea        rdx, qword [rcx+rcx*2]
0000000000010cef         push       rbp
0000000000010cf0         push       rbx
0000000000010cf1         mov        r15d, esi
0000000000010cf4         sub        rsp, 0x48
0000000000010cf8         mov        r14, qword [rdi+0x98]
0000000000010cff         mov        qword [rsp+0x78+var_78], rdi
0000000000010d03         mov        rax, qword [r14+0x30]
0000000000010d07         lea        r12, qword [rax+rdx*8]
0000000000010d0b         cmp        qword [r12+8], 0x0
0000000000010d11         jle        loc_10ea5

0000000000010d17         lea        rax, qword [r8+r8*4]
0000000000010d1b         mov        r11, rcx
0000000000010d1e         mov        ecx, r9d
0000000000010d21         mov        r10, r8
0000000000010d24         xor        ebx, ebx
0000000000010d26         mov        dword [rsp+0x78+var_58], esi
0000000000010d2a         shl        rax, 0x3
0000000000010d2e         mov        r15, r9
0000000000010d31         mov        qword [rsp+0x78+var_68], r11
0000000000010d36         mov        qword [rsp+0x78+var_50], rax
0000000000010d3b         mov        eax, 0x1
0000000000010d40         shl        rax, cl
0000000000010d43         mov        qword [rsp+0x78+var_60], rax
0000000000010d48         not        eax
0000000000010d4a         mov        word [rsp+0x78+var_52], ax
0000000000010d4f         mov        eax, esi
0000000000010d51         and        eax, 0x1
0000000000010d54         mov        dword [rsp+0x78+var_6C], eax
0000000000010d58         mov        eax, esi
0000000000010d5a         and        eax, 0x2
0000000000010d5d         mov        dword [rsp+0x78+var_70], eax
0000000000010d61         jmp        loc_10d85
0000000000010d63         align      8

                     loc_10d68:
0000000000010d68         cmp        dl, 0x9                                     ; CODE XREF=check_dst_limits_calc_pos_1+191
0000000000010d6b         je         loc_10ec0

0000000000010d71         cmp        dl, 0x4
0000000000010d74         je         loc_10dc8

                     loc_10d76:
0000000000010d76         add        rbx, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos_1+199, check_dst_limits_calc_pos_1+204, check_dst_limits_calc_pos_1+236, check_dst_limits_calc_pos_1+486, check_dst_limits_calc_pos_1+495
0000000000010d7a         cmp        qword [r12+8], rbx
0000000000010d7f         jle        loc_10ea0

                     loc_10d85:
0000000000010d85         mov        rax, qword [r12+0x10]                       ; CODE XREF=check_dst_limits_calc_pos_1+129, check_dst_limits_calc_pos_1+436
0000000000010d8a         mov        rbp, qword [rax+rbx*8]
0000000000010d8e         mov        rax, rbp
0000000000010d91         shl        rax, 0x4
0000000000010d95         add        rax, qword [r14]
0000000000010d98         movzx      edx, byte [rax+8]
0000000000010d9c         cmp        dl, 0x8
0000000000010d9f         jne        loc_10d68

0000000000010da1         mov        ecx, dword [rsp+0x78+var_6C]
0000000000010da5         test       ecx, ecx
0000000000010da7         je         loc_10d76

0000000000010da9         cmp        qword [rax], r15
0000000000010dac         jne        loc_10d76

                     loc_10dae:
0000000000010dae         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+357
0000000000010db2         mov        eax, 0xffffffff
0000000000010db7         pop        rbx
0000000000010db8         pop        rbp
0000000000010db9         pop        r12
0000000000010dbb         pop        r13
0000000000010dbd         pop        r14
0000000000010dbf         pop        r15
0000000000010dc1         ret
                        ; endp
0000000000010dc2         align      8

                     loc_10dc8:
0000000000010dc8         cmp        r10, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits_calc_pos_1+148
0000000000010dcc         je         loc_10d76

0000000000010dce         mov        rax, qword [rsp+0x78+var_78]
0000000000010dd2         mov        r13, qword [rsp+0x78+var_50]
0000000000010dd7         mov        rdi, rbp
0000000000010dda         mov        qword [rsp+0x78+var_48], r12
0000000000010ddf         mov        qword [rsp+0x78+var_40], rbx
0000000000010de4         mov        r12, r10
0000000000010de7         add        r13, qword [rax+0xd8]
0000000000010dee         lea        rax, qword [rbp+rbp*2]
0000000000010df3         mov        rbp, r14
0000000000010df6         mov        r14, rdi
0000000000010df9         shl        rax, 0x3
0000000000010dfd         mov        rbx, rax

                     loc_10e00:
0000000000010e00         cmp        qword [r13], r14                            ; CODE XREF=check_dst_limits_calc_pos_1+409
0000000000010e04         jne        loc_10e70

0000000000010e06         cmp        r15, 0x3f
0000000000010e0a         jg         loc_10e18

0000000000010e0c         movzx      eax, word [r13+0x22]
0000000000010e11         test       qword [rsp+0x78+var_60], rax
0000000000010e16         je         loc_10e70

                     loc_10e18:
0000000000010e18         mov        rax, qword [rbp+0x28]                       ; CODE XREF=check_dst_limits_calc_pos_1+298
0000000000010e1c         mov        rax, qword [rax+rbx+0x10]
0000000000010e21         mov        rcx, qword [rax]
0000000000010e24         cmp        qword [rsp+0x78+var_68], rcx
0000000000010e29         je         loc_10ef0

0000000000010e2f         mov        esi, dword [rsp+0x78+var_58]
0000000000010e33         mov        rdi, qword [rsp+0x78+var_78]
0000000000010e37         mov        r8, r12
0000000000010e3a         mov        rdx, r15
0000000000010e3d         call       check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
0000000000010e42         cmp        eax, 0xffffffff
0000000000010e45         je         loc_10dae

0000000000010e4b         test       eax, eax
0000000000010e4d         jne        loc_10e57

0000000000010e4f         mov        esi, dword [rsp+0x78+var_70]
0000000000010e53         test       esi, esi
0000000000010e55         jne        loc_10ed5

                     loc_10e57:
0000000000010e57         cmp        r15, 0x3f                                   ; CODE XREF=check_dst_limits_calc_pos_1+365
0000000000010e5b         jg         loc_10e70

0000000000010e5d         movzx      eax, word [rsp+0x78+var_52]
0000000000010e62         and        word [r13+0x22], ax
0000000000010e67         nop        word [rax+rax]

                     loc_10e70:
0000000000010e70         add        r13, 0x28                                   ; CODE XREF=check_dst_limits_calc_pos_1+292, check_dst_limits_calc_pos_1+310, check_dst_limits_calc_pos_1+379
0000000000010e74         cmp        byte [r13-8], 0x0
0000000000010e79         jne        loc_10e00

0000000000010e7b         mov        rbx, qword [rsp+0x78+var_40]
0000000000010e80         mov        r10, r12
0000000000010e83         mov        r12, qword [rsp+0x78+var_48]
0000000000010e88         mov        r14, rbp
0000000000010e8b         add        rbx, 0x1
0000000000010e8f         cmp        qword [r12+8], rbx
0000000000010e94         jg         loc_10d85

0000000000010e9a         nop        word [rax+rax]

                     loc_10ea0:
0000000000010ea0         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+159

                     loc_10ea5:
0000000000010ea5         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+49
0000000000010ea9         mov        eax, r15d
0000000000010eac         pop        rbx
0000000000010ead         sar        eax, 0x1
0000000000010eaf         pop        rbp
0000000000010eb0         pop        r12
0000000000010eb2         pop        r13
0000000000010eb4         pop        r14
0000000000010eb6         pop        r15
0000000000010eb8         ret
                        ; endp
0000000000010eb9         align      64

                     loc_10ec0:
0000000000010ec0         mov        edx, dword [rsp+0x78+var_70]                ; CODE XREF=check_dst_limits_calc_pos_1+139
0000000000010ec4         test       edx, edx
0000000000010ec6         je         loc_10d76

0000000000010ecc         cmp        qword [rax], r15
0000000000010ecf         jne        loc_10d76

                     loc_10ed5:
0000000000010ed5         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+373
0000000000010ed9         xor        eax, eax
0000000000010edb         pop        rbx
0000000000010edc         pop        rbp
0000000000010edd         pop        r12
0000000000010edf         pop        r13
0000000000010ee1         pop        r14
0000000000010ee3         pop        r15
0000000000010ee5         ret
                        ; endp
0000000000010ee6         align      16

                     loc_10ef0:
0000000000010ef0         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+329
0000000000010ef5         add        rsp, 0x48
0000000000010ef9         pop        rbx
0000000000010efa         pop        rbp
0000000000010efb         mov        eax, r15d
0000000000010efe         and        eax, 0x1
0000000000010f01         pop        r12
0000000000010f03         neg        eax
0000000000010f05         pop        r13
0000000000010f07         pop        r14
0000000000010f09         pop        r15
0000000000010f0b         ret
                        ; endp
0000000000010f0c         align      16                                          ; End of unwind block (FDE at 0x25a8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_dst_limits_calc_pos:
0000000000010f10         mov        rax, qword [rdi+0xd8]                       ; Begin of unwind block (FDE at 0x25b20), CODE XREF=check_dst_limits.isra.13+430, check_dst_limits.isra.13+464
0000000000010f17         lea        rsi, qword [rsi+rsi*4]
0000000000010f1b         lea        rax, qword [rax+rsi*8]
0000000000010f1f         mov        r10, qword [rax+0x10]
0000000000010f23         cmp        r10, r8
0000000000010f26         jg         loc_10f70

0000000000010f28         mov        rax, qword [rax+0x18]
0000000000010f2c         cmp        rax, r8
0000000000010f2f         jl         loc_10f50

0000000000010f31         xor        esi, esi
0000000000010f33         cmp        r10, r8
0000000000010f36         sete       sil
0000000000010f3a         or         esi, 0x2
0000000000010f3d         cmp        rax, r8
0000000000010f40         je         loc_10f65

0000000000010f42         xor        eax, eax
0000000000010f44         cmp        r10, r8
0000000000010f47         je         loc_10f60

0000000000010f49         ret
                        ; endp
0000000000010f4b         align      16

                     loc_10f50:
0000000000010f50         mov        eax, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+31
0000000000010f55         ret
                        ; endp
0000000000010f56         align      32

                     loc_10f60:
0000000000010f60         mov        esi, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+55

                     loc_10f65:
0000000000010f65         mov        r8, r9                                      ; CODE XREF=check_dst_limits_calc_pos+48
0000000000010f68         jmp        check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
                        ; endp
0000000000010f6d         align      16

                     loc_10f70:
0000000000010f70         mov        eax, 0xffffffff                             ; CODE XREF=check_dst_limits_calc_pos+22
0000000000010f75         ret
                        ; endp
0000000000010f76         align      128                                         ; End of unwind block (FDE at 0x25b20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     postorder:
0000000000010f80         push       r12                                         ; Begin of unwind block (FDE at 0x25b34), CODE XREF=sub_1baf0+93, sub_1baf0+776, sub_1baf0+1033, sub_1baf0+1127, sub_1baf0+1294, parse_branch+325, parse_branch+348, parse_branch+368, parse_reg_exp+317, re_compile_internal+1645, re_compile_internal+1672
0000000000010f82         mov        r12, rsi
0000000000010f85         push       rbp
0000000000010f86         mov        rbp, rdx
0000000000010f89         push       rbx
0000000000010f8a         mov        rbx, rdi
0000000000010f8d         jmp        loc_10f93
0000000000010f8f         align      16

                     loc_10f90:
0000000000010f90         mov        rbx, rax                                    ; CODE XREF=postorder+26, postorder+35, postorder+87

                     loc_10f93:
0000000000010f93         mov        rax, qword [rbx+8]                          ; CODE XREF=postorder+13
0000000000010f97         test       rax, rax
0000000000010f9a         jne        loc_10f90

0000000000010f9c         mov        rax, qword [rbx+0x10]
0000000000010fa0         test       rax, rax
0000000000010fa3         jne        loc_10f90

0000000000010fa5         mov        rsi, rbx
0000000000010fa8         mov        rdi, rbp
0000000000010fab         call       r12
0000000000010fae         test       eax, eax
0000000000010fb0         jne        loc_10fe6

0000000000010fb2         nop        word [rax+rax]

                     loc_10fb8:
0000000000010fb8         mov        rdx, qword [rbx]                            ; CODE XREF=postorder+100
0000000000010fbb         test       rdx, rdx
0000000000010fbe         je         loc_10fe6

0000000000010fc0         mov        rax, qword [rdx+0x10]
0000000000010fc4         cmp        rax, rbx
0000000000010fc7         mov        rbx, rdx
0000000000010fca         sete       sil
0000000000010fce         test       rax, rax
0000000000010fd1         sete       cl
0000000000010fd4         or         sil, cl
0000000000010fd7         je         loc_10f90

0000000000010fd9         mov        rsi, rbx
0000000000010fdc         mov        rdi, rbp
0000000000010fdf         call       r12
0000000000010fe2         test       eax, eax
0000000000010fe4         je         loc_10fb8

                     loc_10fe6:
0000000000010fe6         pop        rbx                                         ; CODE XREF=postorder+48, postorder+62
0000000000010fe7         pop        rbp
0000000000010fe8         pop        r12
0000000000010fea         ret
                        ; endp
0000000000010feb         align      16                                          ; End of unwind block (FDE at 0x25b34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     preorder:
0000000000010ff0         push       r12                                         ; Begin of unwind block (FDE at 0x25b60), CODE XREF=re_compile_internal+1563, re_compile_internal+1699
0000000000010ff2         mov        r12, rsi
0000000000010ff5         push       rbp
0000000000010ff6         mov        rbp, rdx
0000000000010ff9         push       rbx
0000000000010ffa         mov        rbx, rdi
0000000000010ffd         jmp        loc_11003
0000000000010fff         align      4096

                     loc_11000:
0000000000011000         mov        rbx, rdx                                    ; CODE XREF=preorder+41, preorder+63

                     loc_11003:
0000000000011003         mov        rsi, rbx                                    ; CODE XREF=preorder+13
0000000000011006         mov        rdi, rbp
0000000000011009         call       r12
000000000001100c         test       eax, eax
000000000001100e         jne        loc_1103c

0000000000011010         mov        rdx, qword [rbx+8]
0000000000011014         xor        ecx, ecx
0000000000011016         test       rdx, rdx
0000000000011019         jne        loc_11000

000000000001101b         jmp        loc_11023
000000000001101d         align      32

                     loc_11020:
0000000000011020         mov        rbx, rdx                                    ; CODE XREF=preorder+74

                     loc_11023:
0000000000011023         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=preorder+43
0000000000011027         cmp        rdx, rcx
000000000001102a         je         loc_11031

000000000001102c         test       rdx, rdx
000000000001102f         jne        loc_11000

                     loc_11031:
0000000000011031         mov        rdx, qword [rbx]                            ; CODE XREF=preorder+58
0000000000011034         mov        rcx, rbx
0000000000011037         test       rdx, rdx
000000000001103a         jne        loc_11020

                     loc_1103c:
000000000001103c         pop        rbx                                         ; CODE XREF=preorder+30
000000000001103d         pop        rbp
000000000001103e         pop        r12
0000000000011040         ret
                        ; endp
0000000000011041         align      16                                          ; End of unwind block (FDE at 0x25b60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_realloc_buffers:
0000000000011050         push       rbp                                         ; Begin of unwind block (FDE at 0x25b8c), CODE XREF=extend_buffers+56, re_search_internal+587, re_compile_internal+789, re_compile_internal+1757
0000000000011051         push       rbx
0000000000011052         mov        rbp, rsi
0000000000011055         mov        rbx, rdi
0000000000011058         sub        rsp, 0x8
000000000001105c         cmp        dword [rdi+0x90], 0x1
0000000000011063         jle        loc_110ad

0000000000011065         movabs     rax, 0x1fffffffffffffff
000000000001106f         cmp        rsi, rax
0000000000011072         ja         loc_110e0

0000000000011074         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
0000000000011078         lea        rsi, qword [rsi*4]                          ; argument "__size" for method j_realloc
0000000000011080         call       j_realloc                                   ; realloc
0000000000011085         test       rax, rax
0000000000011088         je         loc_110e0

000000000001108a         mov        rdi, qword [rbx+0x18]
000000000001108e         mov        qword [rbx+0x10], rax
0000000000011092         test       rdi, rdi
0000000000011095         je         loc_110ad

0000000000011097         lea        rsi, qword [rbp*8]                          ; argument "__size" for method j_realloc
000000000001109f         call       j_realloc                                   ; realloc
00000000000110a4         test       rax, rax
00000000000110a7         je         loc_110e0

00000000000110a9         mov        qword [rbx+0x18], rax

                     loc_110ad:
00000000000110ad         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_realloc_buffers+19, re_string_realloc_buffers+69
00000000000110b4         jne        loc_110c8

                     loc_110b6:
00000000000110b6         mov        qword [rbx+0x40], rbp                       ; CODE XREF=re_string_realloc_buffers+141
00000000000110ba         add        rsp, 0x8
00000000000110be         xor        eax, eax
00000000000110c0         pop        rbx
00000000000110c1         pop        rbp
00000000000110c2         ret
                        ; endp
00000000000110c3         align      8

                     loc_110c8:
00000000000110c8         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_realloc, CODE XREF=re_string_realloc_buffers+100
00000000000110cc         mov        rsi, rbp                                    ; argument "__size" for method j_realloc
00000000000110cf         call       j_realloc                                   ; realloc
00000000000110d4         test       rax, rax
00000000000110d7         je         loc_110e0

00000000000110d9         mov        qword [rbx+8], rax
00000000000110dd         jmp        loc_110b6
00000000000110df         align      32

                     loc_110e0:
00000000000110e0         add        rsp, 0x8                                    ; CODE XREF=re_string_realloc_buffers+34, re_string_realloc_buffers+56, re_string_realloc_buffers+87, re_string_realloc_buffers+135
00000000000110e4         mov        eax, 0xc
00000000000110e9         pop        rbx
00000000000110ea         pop        rbp
00000000000110eb         ret
                        ; endp
00000000000110ec         align      16                                          ; End of unwind block (FDE at 0x25b8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert_last:
00000000000110f0         push       rbp                                         ; Begin of unwind block (FDE at 0x25bc0), CODE XREF=register_state+117, sub_1dbd0+481
00000000000110f1         push       rbx
00000000000110f2         mov        rbp, rsi
00000000000110f5         mov        rbx, rdi
00000000000110f8         sub        rsp, 0x8
00000000000110fc         mov        rsi, qword [rdi+8]
0000000000011100         cmp        qword [rdi], rsi
0000000000011103         mov        rax, qword [rdi+0x10]
0000000000011107         je         loc_11128

                     loc_11109:
0000000000011109         lea        rdx, qword [rsi+1]                          ; CODE XREF=re_node_set_insert_last+92
000000000001110d         mov        qword [rbx+8], rdx
0000000000011111         mov        qword [rax+rsi*8], rbp
0000000000011115         mov        eax, 0x1

                     loc_1111a:
000000000001111a         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert_last+98
000000000001111e         pop        rbx
000000000001111f         pop        rbp
0000000000011120         ret
                        ; endp
0000000000011121         align      8

                     loc_11128:
0000000000011128         add        rsi, 0x1                                    ; CODE XREF=re_node_set_insert_last+23
000000000001112c         lea        rdx, qword [rsi+rsi]
0000000000011130         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000011134         mov        qword [rdi], rdx
0000000000011137         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000001113a         call       j_realloc                                   ; realloc
000000000001113f         test       rax, rax
0000000000011142         je         loc_11150

0000000000011144         mov        qword [rbx+0x10], rax
0000000000011148         mov        rsi, qword [rbx+8]
000000000001114c         jmp        loc_11109
000000000001114e         align      16

                     loc_11150:
0000000000011150         xor        eax, eax                                    ; CODE XREF=re_node_set_insert_last+82
0000000000011152         jmp        loc_1111a
0000000000011154         align      32                                          ; End of unwind block (FDE at 0x25bc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert:
0000000000011160         push       rbp                                         ; Begin of unwind block (FDE at 0x25bec), CODE XREF=duplicate_node_closure+224, duplicate_node_closure+282, duplicate_node_closure+352, duplicate_node_closure+465, duplicate_node_closure+607, check_arrival_expand_ecl_sub+84, check_arrival_expand_ecl_sub+148, calc_eclosure_iter+360, calc_eclosure_iter+495, expand_bkref_cache+409, build_trtable+1657
0000000000011161         push       rbx
0000000000011162         mov        rbp, rsi
0000000000011165         mov        rbx, rdi
0000000000011168         sub        rsp, 0x8
000000000001116c         mov        rdx, qword [rdi]
000000000001116f         test       rdx, rdx
0000000000011172         je         loc_11198

0000000000011174         mov        rsi, qword [rdi+8]
0000000000011178         mov        rax, qword [rdi+0x10]
000000000001117c         test       rsi, rsi
000000000001117f         jne        loc_111d0

0000000000011181         mov        qword [rax], rbp
0000000000011184         add        qword [rdi+8], 0x1
0000000000011189         mov        eax, 0x1

                     loc_1118e:
000000000001118e         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert+177, re_node_set_insert+247, re_node_set_insert+295
0000000000011192         pop        rbx
0000000000011193         pop        rbp
0000000000011194         ret
                        ; endp
0000000000011195         align      8

                     loc_11198:
0000000000011198         mov        qword [rdi], 0x1                            ; CODE XREF=re_node_set_insert+18
000000000001119f         mov        qword [rdi+8], 0x1
00000000000111a7         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000111ac         call       j_malloc                                    ; malloc
00000000000111b1         test       rax, rax
00000000000111b4         mov        qword [rbx+0x10], rax
00000000000111b8         je         loc_11248

00000000000111be         mov        qword [rax], rbp
00000000000111c1         add        rsp, 0x8
00000000000111c5         mov        eax, 0x1
00000000000111ca         pop        rbx
00000000000111cb         pop        rbp
00000000000111cc         ret
                        ; endp
00000000000111cd         align      16

                     loc_111d0:
00000000000111d0         cmp        rdx, rsi                                    ; CODE XREF=re_node_set_insert+31
00000000000111d3         je         loc_11260

                     loc_111d9:
00000000000111d9         cmp        qword [rax], rbp                            ; CODE XREF=re_node_set_insert+288
00000000000111dc         lea        rdx, qword [rsi*8]
00000000000111e4         jle        loc_11220

00000000000111e6         test       rsi, rsi
00000000000111e9         jle        loc_11203

00000000000111eb         add        rdx, rax
00000000000111ee         nop

                     loc_111f0:
00000000000111f0         mov        rcx, qword [rdx-8]                          ; CODE XREF=re_node_set_insert+159
00000000000111f4         sub        rdx, 0x8
00000000000111f8         mov        qword [rdx+8], rcx
00000000000111fc         cmp        rax, rdx
00000000000111ff         jne        loc_111f0

0000000000011201         xor        edx, edx

                     loc_11203:
0000000000011203         mov        qword [rax+rdx], rbp                        ; CODE XREF=re_node_set_insert+137, re_node_set_insert+200, re_node_set_insert+226
0000000000011207         mov        eax, 0x1
000000000001120c         add        qword [rbx+8], 0x1
0000000000011211         jmp        loc_1118e
0000000000011216         align      32

                     loc_11220:
0000000000011220         mov        rcx, qword [rax+rdx-8]                      ; CODE XREF=re_node_set_insert+132
0000000000011225         cmp        rbp, rcx
0000000000011228         jge        loc_11203

000000000001122a         nop        word [rax+rax]

                     loc_11230:
0000000000011230         mov        qword [rax+rdx], rcx                        ; CODE XREF=re_node_set_insert+224
0000000000011234         sub        rdx, 0x8
0000000000011238         mov        rcx, qword [rax+rdx-8]
000000000001123d         cmp        rcx, rbp
0000000000011240         jg         loc_11230

0000000000011242         jmp        loc_11203
0000000000011244         align      8

                     loc_11248:
0000000000011248         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_insert+88
0000000000011250         mov        qword [rbx], 0x0
0000000000011257         jmp        loc_1118e
000000000001125c         align      32

                     loc_11260:
0000000000011260         lea        rdx, qword [rsi+rsi]                        ; CODE XREF=re_node_set_insert+115
0000000000011264         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000011268         mov        qword [rdi], rdx
000000000001126b         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000001126e         call       j_realloc                                   ; realloc
0000000000011273         test       rax, rax
0000000000011276         je         loc_11285

0000000000011278         mov        qword [rbx+0x10], rax
000000000001127c         mov        rsi, qword [rbx+8]
0000000000011280         jmp        loc_111d9

                     loc_11285:
0000000000011285         xor        eax, eax                                    ; CODE XREF=re_node_set_insert+278
0000000000011287         jmp        loc_1118e
000000000001128c         align      16                                          ; End of unwind block (FDE at 0x25bec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     register_state:
0000000000011290         push       r14                                         ; Begin of unwind block (FDE at 0x25c24), CODE XREF=re_acquire_state_context+513, re_acquire_state+390
0000000000011292         push       r13
0000000000011294         mov        r14, rdi
0000000000011297         push       r12
0000000000011299         push       rbp
000000000001129a         mov        r12, rdx
000000000001129d         push       rbx
000000000001129e         mov        rbx, qword [rsi+0x10]
00000000000112a2         mov        rbp, rsi
00000000000112a5         mov        qword [rsi], rdx
00000000000112a8         mov        qword [rsi+0x28], 0x0
00000000000112b0         lea        r13, qword [rsi+0x20]
00000000000112b4         lea        rdi, qword [rbx*8]                          ; argument "__size" for method j_malloc
00000000000112bc         mov        qword [rsi+0x20], rbx
00000000000112c0         call       j_malloc                                    ; malloc
00000000000112c5         test       rax, rax
00000000000112c8         mov        qword [rbp+0x30], rax
00000000000112cc         je         loc_1130e

00000000000112ce         test       rbx, rbx
00000000000112d1         jle        loc_11320

00000000000112d3         xor        ebx, ebx
00000000000112d5         jmp        loc_112ea
00000000000112d7         align      32

                     loc_112e0:
00000000000112e0         add        rbx, 0x1                                    ; CODE XREF=register_state+112, register_state+124
00000000000112e4         cmp        qword [rbp+0x10], rbx
00000000000112e8         jle        loc_11320

                     loc_112ea:
00000000000112ea         mov        rax, qword [rbp+0x18]                       ; CODE XREF=register_state+69
00000000000112ee         mov        rsi, qword [rax+rbx*8]
00000000000112f2         mov        rax, rsi
00000000000112f5         shl        rax, 0x4
00000000000112f9         add        rax, qword [r14]
00000000000112fc         test       byte [rax+8], 0x8
0000000000011300         jne        loc_112e0

0000000000011302         mov        rdi, r13
0000000000011305         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000001130a         test       al, al
000000000001130c         jne        loc_112e0

                     loc_1130e:
000000000001130e         pop        rbx                                         ; CODE XREF=register_state+60, register_state+217
000000000001130f         mov        eax, 0xc
0000000000011314         pop        rbp
0000000000011315         pop        r12
0000000000011317         pop        r13
0000000000011319         pop        r14
000000000001131b         ret
                        ; endp
000000000001131c         align      32

                     loc_11320:
0000000000011320         and        r12, qword [r14+0x88]                       ; CODE XREF=register_state+65, register_state+88
0000000000011327         mov        rax, qword [r14+0x40]
000000000001132b         lea        rdx, qword [r12+r12*2]
000000000001132f         lea        rbx, qword [rax+rdx*8]
0000000000011333         mov        rdx, qword [rbx]
0000000000011336         cmp        qword [rbx+8], rdx
000000000001133a         mov        rax, qword [rbx+0x10]
000000000001133e         lea        rsi, qword [rdx+1]
0000000000011342         jle        loc_11356

                     loc_11344:
0000000000011344         mov        qword [rbx], rsi                            ; CODE XREF=register_state+234
0000000000011347         mov        qword [rax+rdx*8], rbp
000000000001134b         xor        eax, eax
000000000001134d         pop        rbx
000000000001134e         pop        rbp
000000000001134f         pop        r12
0000000000011351         pop        r13
0000000000011353         pop        r14
0000000000011355         ret
                        ; endp

                     loc_11356:
0000000000011356         lea        r12, qword [rsi+rsi]                        ; CODE XREF=register_state+178
000000000001135a         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000001135d         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000011361         call       j_realloc                                   ; realloc
0000000000011366         test       rax, rax
0000000000011369         je         loc_1130e

000000000001136b         mov        rdx, qword [rbx]
000000000001136e         mov        qword [rbx+0x10], rax
0000000000011372         mov        qword [rbx+8], r12
0000000000011376         lea        rsi, qword [rdx+1]
000000000001137a         jmp        loc_11344
000000000001137c         align      128                                         ; End of unwind block (FDE at 0x25c24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_upper_buffer:
0000000000011380         push       r12                                         ; Begin of unwind block (FDE at 0x25c74), CODE XREF=extend_buffers+320, re_string_reconstruct+1651, sub_1dbd0+1344
0000000000011382         mov        r12, qword [rdi+0x58]
0000000000011386         cmp        qword [rdi+0x40], r12
000000000001138a         push       rbp
000000000001138b         mov        rbp, rdi
000000000001138e         cmovle     r12, qword [rdi+0x40]
0000000000011393         push       rbx
0000000000011394         mov        rbx, qword [rdi+0x30]
0000000000011398         cmp        r12, rbx
000000000001139b         jle        loc_113d5

000000000001139d         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
00000000000113a2         nop        word [rax+rax]

                     loc_113a8:
00000000000113a8         mov        rdx, qword [rbp]                            ; CODE XREF=build_upper_buffer+83
00000000000113ac         mov        rcx, qword [rbp+0x78]
00000000000113b0         add        rdx, rbx
00000000000113b3         add        rdx, qword [rbp+0x28]
00000000000113b7         test       rcx, rcx
00000000000113ba         movzx      edx, byte [rdx]
00000000000113bd         jne        loc_113e8

                     loc_113bf:
00000000000113bf         mov        rsi, qword [rax]                            ; CODE XREF=build_upper_buffer+108
00000000000113c2         mov        rcx, qword [rbp+8]
00000000000113c6         mov        edx, dword [rsi+rdx*4]
00000000000113c9         mov        byte [rcx+rbx], dl
00000000000113cc         add        rbx, 0x1
00000000000113d0         cmp        r12, rbx
00000000000113d3         jne        loc_113a8

                     loc_113d5:
00000000000113d5         mov        qword [rbp+0x30], rbx                       ; CODE XREF=build_upper_buffer+27
00000000000113d9         mov        qword [rbp+0x38], rbx
00000000000113dd         pop        rbx
00000000000113de         pop        rbp
00000000000113df         pop        r12
00000000000113e1         ret
                        ; endp
00000000000113e2         align      8

                     loc_113e8:
00000000000113e8         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_upper_buffer+61
00000000000113ec         jmp        loc_113bf
00000000000113ee         align      16                                          ; End of unwind block (FDE at 0x25c74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_8C: int32_t, -140


                     build_wcs_buffer:
00000000000113f0         push       r15                                         ; Begin of unwind block (FDE at 0x25ca4), CODE XREF=extend_buffers+275, re_string_reconstruct+424, sub_1dbd0+1021
00000000000113f2         push       r14
00000000000113f4         push       r13
00000000000113f6         push       r12
00000000000113f8         push       rbp
00000000000113f9         push       rbx
00000000000113fa         mov        rbx, rdi
00000000000113fd         sub        rsp, 0x68
0000000000011401         mov        r12, qword [rdi+0x58]
0000000000011405         mov        rbp, qword [rdi+0x30]
0000000000011409         mov        rax, qword [fs:0x28]
0000000000011412         mov        qword [rsp+0x98+var_40], rax
0000000000011417         xor        eax, eax
0000000000011419         cmp        qword [rdi+0x40], r12
000000000001141d         cmovle     r12, qword [rdi+0x40]
0000000000011422         cmp        r12, rbp
0000000000011425         jle        loc_114b4

000000000001142b         lea        r14, qword [rdi+0x20]
000000000001142f         lea        r13, qword [rsp+0x98+var_8C]
0000000000011434         nop        dword [rax]

                     loc_11438:
0000000000011438         mov        rdi, qword [rbx+0x78]                       ; CODE XREF=build_wcs_buffer+194, build_wcs_buffer+246
000000000001143c         mov        rdx, r12
000000000001143f         mov        r15, qword [rbx+0x20]
0000000000011443         sub        rdx, rbp
0000000000011446         test       rdi, rdi
0000000000011449         jne        loc_11530

000000000001144f         mov        rsi, qword [rbx+0x28]
0000000000011453         add        rsi, rbp
0000000000011456         add        rsi, qword [rbx]

                     loc_11459:
0000000000011459         mov        rcx, r14                                    ; CODE XREF=build_wcs_buffer+337, build_wcs_buffer+359, build_wcs_buffer+413
000000000001145c         mov        rdi, r13
000000000001145f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000011464         lea        rdx, qword [rax-1]
0000000000011468         cmp        rdx, 0xfffffffffffffffd
000000000001146c         ja         loc_11500

0000000000011472         cmp        rax, 0xfffffffffffffffe
0000000000011476         mov        edx, dword [rsp+0x98+var_8C]
000000000001147a         je         loc_114f0

                     loc_1147c:
000000000001147c         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=build_wcs_buffer+311
0000000000011480         lea        rsi, qword [rbp+1]
0000000000011484         lea        rdi, qword [rbp*4]
000000000001148c         mov        dword [rcx+rbp*4], edx
000000000001148f         add        rbp, rax
0000000000011492         cmp        rsi, rbp
0000000000011495         jge        loc_114e0

0000000000011497         lea        rdx, qword [rcx+rdi+4]
000000000001149c         lea        rax, qword [rcx+rbp*4]

                     loc_114a0:
00000000000114a0         mov        dword [rdx], 0xffffffff                     ; CODE XREF=build_wcs_buffer+189
00000000000114a6         add        rdx, 0x4
00000000000114aa         cmp        rax, rdx
00000000000114ad         jne        loc_114a0

00000000000114af         cmp        rbp, r12
00000000000114b2         jl         loc_11438

                     loc_114b4:
00000000000114b4         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=build_wcs_buffer+53, build_wcs_buffer+252, build_wcs_buffer+428
00000000000114b9         xor        rax, qword [fs:0x28]
00000000000114c2         mov        qword [rbx+0x30], rbp
00000000000114c6         mov        qword [rbx+0x38], rbp
00000000000114ca         jne        loc_115ae

00000000000114d0         add        rsp, 0x68
00000000000114d4         pop        rbx
00000000000114d5         pop        rbp
00000000000114d6         pop        r12
00000000000114d8         pop        r13
00000000000114da         pop        r14
00000000000114dc         pop        r15
00000000000114de         ret
                        ; endp
00000000000114df         align      32

                     loc_114e0:
00000000000114e0         mov        rbp, rsi                                    ; CODE XREF=build_wcs_buffer+165
00000000000114e3         cmp        rbp, r12
00000000000114e6         jl         loc_11438

00000000000114ec         jmp        loc_114b4
00000000000114ee         align      16

                     loc_114f0:
00000000000114f0         mov        rax, qword [rbx+0x58]                       ; CODE XREF=build_wcs_buffer+138
00000000000114f4         cmp        qword [rbx+0x40], rax
00000000000114f8         jl         loc_11598

00000000000114fe         nop

                     loc_11500:
0000000000011500         mov        rax, qword [rbx]                            ; CODE XREF=build_wcs_buffer+124
0000000000011503         mov        rcx, qword [rbx+0x78]
0000000000011507         add        rax, rbp
000000000001150a         add        rax, qword [rbx+0x28]
000000000001150e         test       rcx, rcx
0000000000011511         movzx      edx, byte [rax]
0000000000011514         mov        dword [rsp+0x98+var_8C], edx
0000000000011518         jne        loc_115a1

                     loc_1151e:
000000000001151e         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+441
0000000000011522         mov        eax, 0x1
0000000000011527         jmp        loc_1147c
000000000001152c         align      16

                     loc_11530:
0000000000011530         mov        ecx, dword [rbx+0x90]                       ; CODE XREF=build_wcs_buffer+89
0000000000011536         xor        eax, eax
0000000000011538         lea        rsi, qword [rsp+0x98+var_88]
000000000001153d         test       ecx, ecx
000000000001153f         jg         loc_11561

0000000000011541         jmp        loc_11459
0000000000011546         align      16

                     loc_11550:
0000000000011550         add        rax, 0x1                                    ; CODE XREF=build_wcs_buffer+411
0000000000011554         cmp        rdx, rax
0000000000011557         je         loc_11459

000000000001155d         mov        rdi, qword [rbx+0x78]

                     loc_11561:
0000000000011561         mov        rcx, qword [rbx]                            ; CODE XREF=build_wcs_buffer+335
0000000000011564         add        rcx, rbp
0000000000011567         add        rcx, rax
000000000001156a         add        rcx, qword [rbx+0x28]
000000000001156e         movzx      ecx, byte [rcx]
0000000000011571         movzx      ecx, byte [rdi+rcx]
0000000000011575         mov        rdi, qword [rbx+8]
0000000000011579         add        rdi, rbp
000000000001157c         mov        byte [rdi+rax], cl
000000000001157f         mov        byte [rsi+rax], cl
0000000000011582         lea        ecx, dword [rax+1]
0000000000011585         cmp        ecx, dword [rbx+0x90]
000000000001158b         jl         loc_11550

000000000001158d         jmp        loc_11459
0000000000011592         align      8

                     loc_11598:
0000000000011598         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+264
000000000001159c         jmp        loc_114b4

                     loc_115a1:
00000000000115a1         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_wcs_buffer+296
00000000000115a5         mov        dword [rsp+0x98+var_8C], edx
00000000000115a9         jmp        loc_1151e

                     loc_115ae:
00000000000115ae         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_buffer+218
                        ; endp
00000000000115b3         align      64                                          ; End of unwind block (FDE at 0x25ca4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     build_wcs_upper_buffer:
00000000000115c0         push       r15                                         ; Begin of unwind block (FDE at 0x25cf0), CODE XREF=extend_buffers+149, re_string_reconstruct+298, re_compile_internal+724
00000000000115c2         push       r14
00000000000115c4         mov        r14, rdi
00000000000115c7         push       r13
00000000000115c9         push       r12
00000000000115cb         push       rbp
00000000000115cc         push       rbx
00000000000115cd         sub        rsp, 0xa8
00000000000115d4         mov        rbx, qword [rdi+0x58]
00000000000115d8         mov        r15, qword [rdi+0x30]
00000000000115dc         mov        rax, qword [fs:0x28]
00000000000115e5         mov        qword [rsp+0xd8+var_40], rax
00000000000115ed         xor        eax, eax
00000000000115ef         cmp        qword [rdi+0x40], rbx
00000000000115f3         cmovle     rbx, qword [rdi+0x40]
00000000000115f8         cmp        byte [rdi+0x8a], 0x0
00000000000115ff         jne        loc_1160c

0000000000011601         cmp        qword [rdi+0x78], 0x0
0000000000011606         je         loc_11790

                     loc_1160c:
000000000001160c         mov        r13, qword [r14+0x38]                       ; CODE XREF=build_wcs_upper_buffer+63, build_wcs_upper_buffer+471

                     loc_11610:
0000000000011610         cmp        r15, rbx                                    ; CODE XREF=build_wcs_upper_buffer+408, build_wcs_upper_buffer+450, build_wcs_upper_buffer+1169, build_wcs_upper_buffer+1184, build_wcs_upper_buffer+1459
0000000000011613         jl         loc_11650

                     loc_11615:
0000000000011615         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+1233
0000000000011619         mov        qword [r14+0x38], r13
000000000001161d         xor        eax, eax

                     loc_1161f:
000000000001161f         mov        rcx, qword [rsp+0xd8+var_40]                ; CODE XREF=build_wcs_upper_buffer+898, build_wcs_upper_buffer+1515
0000000000011627         xor        rcx, qword [fs:0x28]
0000000000011630         jne        loc_11bba

0000000000011636         add        rsp, 0xa8
000000000001163d         pop        rbx
000000000001163e         pop        rbp
000000000001163f         pop        r12
0000000000011641         pop        r13
0000000000011643         pop        r14
0000000000011645         pop        r15
0000000000011647         ret
                        ; endp
0000000000011648         align      16

                     loc_11650:
0000000000011650         lea        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+83
0000000000011654         mov        qword [rsp+0xd8+var_D0], rax
0000000000011659         mov        rax, rbx
000000000001165c         sub        rax, r15
000000000001165f         mov        qword [rsp+0xd8+var_C8], rax
0000000000011664         lea        rax, qword [rsp+0xd8+var_94]
0000000000011669         mov        qword [rsp+0xd8+var_B8], rax

                     loc_1166e:
000000000001166e         mov        rdx, qword [r14+0x78]                       ; CODE XREF=build_wcs_upper_buffer+1051
0000000000011672         mov        rax, qword [r14+0x20]
0000000000011676         test       rdx, rdx
0000000000011679         mov        qword [rsp+0xd8+var_90], rax
000000000001167e         jne        loc_11989

0000000000011684         mov        rbp, qword [r14+0x28]
0000000000011688         add        rbp, r13
000000000001168b         add        rbp, qword [r14]
000000000001168e         mov        qword [rsp+0xd8+var_C0], rbp

                     loc_11693:
0000000000011693         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=build_wcs_upper_buffer+1040
0000000000011698         mov        rdx, qword [rsp+0xd8+var_C8]
000000000001169d         mov        rsi, qword [rsp+0xd8+var_C0]
00000000000116a2         mov        rdi, qword [rsp+0xd8+var_B8]
00000000000116a7         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000116ac         mov        rbp, rax
00000000000116af         lea        rax, qword [rax-1]
00000000000116b3         cmp        rax, 0xfffffffffffffffc
00000000000116b7         mov        qword [rsp+0xd8+var_B8], rax
00000000000116bc         ja         loc_119f9

00000000000116c2         mov        edx, dword [rsp+0xd8+var_94]
00000000000116c6         mov        edi, edx                                    ; argument "__wc" for method j_towupper
00000000000116c8         mov        dword [rsp+0xd8+var_C8], edx
00000000000116cc         call       j_towupper                                  ; towupper
00000000000116d1         mov        edx, dword [rsp+0xd8+var_C8]
00000000000116d5         mov        r12d, eax
00000000000116d8         mov        qword [rsp+0xd8+var_D0], r15
00000000000116dd         cmp        edx, eax
00000000000116df         je         loc_119e0

00000000000116e5         lea        rcx, qword [rsp+0xd8+var_88]
00000000000116ea         lea        rdx, qword [rsp+0xd8+var_90]                ; argument "__ps" for method j_wcrtomb
00000000000116ef         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
00000000000116f1         mov        rdi, rcx                                    ; argument "__s" for method j_wcrtomb
00000000000116f4         mov        qword [rsp+0xd8+var_C8], rcx
00000000000116f9         call       j_wcrtomb                                   ; wcrtomb
00000000000116fe         cmp        rbp, rax
0000000000011701         mov        r11, rax
0000000000011704         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000011709         jne        loc_11a96

000000000001170f         mov        rdi, qword [r14+8]
0000000000011713         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000011716         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000011719         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000001171c         call       j_memcpy                                    ; memcpy

                     loc_11721:
0000000000011721         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1076
0000000000011729         lea        rax, qword [rbp+r13]
000000000001172e         jne        loc_11a65

                     loc_11734:
0000000000011734         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1219
0000000000011738         mov        rsi, qword [rsp+0xd8+var_D0]
000000000001173d         mov        rdx, qword [r14+0x10]
0000000000011741         lea        rcx, qword [r15+rbp-1]
0000000000011746         mov        r13, rax
0000000000011749         cmp        r15, rcx
000000000001174c         lea        rax, qword [rsi*4]
0000000000011754         mov        dword [rdx+rsi*4], r12d
0000000000011758         jge        loc_11610

000000000001175e         lea        rax, qword [rdx+rax+4]
0000000000011763         lea        rdx, qword [rdx+rcx*4]
0000000000011767         nop        word [rax+rax]

                     loc_11770:
0000000000011770         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+445
0000000000011776         add        rax, 0x4
000000000001177a         cmp        rdx, rax
000000000001177d         jne        loc_11770

000000000001177f         mov        r15, rcx
0000000000011782         jmp        loc_11610
0000000000011787         align      16

                     loc_11790:
0000000000011790         cmp        byte [rdi+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+70
0000000000011797         jne        loc_1160c

000000000001179d         cmp        r15, rbx
00000000000117a0         jge        loc_11938

00000000000117a6         lea        rax, qword [rdi+0x20]
00000000000117aa         mov        qword [rsp+0xd8+var_D0], rax
00000000000117af         lea        rax, qword [rsp+0xd8+var_94]
00000000000117b4         mov        qword [rsp+0xd8+var_A8], rax
00000000000117b9         lea        rax, qword [rsp+0xd8+var_90]
00000000000117be         mov        qword [rsp+0xd8+var_A0], rax
00000000000117c3         lea        rax, qword [rsp+0xd8+var_88]
00000000000117c8         mov        qword [rsp+0xd8+var_B0], rax
00000000000117cd         nop        dword [rax]

                     loc_117d0:
00000000000117d0         mov        rbp, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+765
00000000000117d4         mov        r13, r15
00000000000117d7         add        rbp, r15
00000000000117da         add        rbp, qword [r14]
00000000000117dd         movzx      r12d, byte [rbp]
00000000000117e2         test       r12b, 0x80
00000000000117e6         jne        loc_117fa

00000000000117e8         mov        rdi, qword [rsp+0xd8+var_D0]                ; argument "__ps" for method j_mbsinit
00000000000117ed         call       j_mbsinit                                   ; mbsinit
00000000000117f2         test       eax, eax
00000000000117f4         jne        loc_118e8

                     loc_117fa:
00000000000117fa         mov        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+550
00000000000117fe         mov        rdi, qword [rsp+0xd8+var_A8]
0000000000011803         mov        rdx, rbx
0000000000011806         mov        rcx, qword [rsp+0xd8+var_D0]
000000000001180b         sub        rdx, r15
000000000001180e         mov        rsi, rbp
0000000000011811         mov        qword [rsp+0xd8+var_C8], rdx
0000000000011816         mov        qword [rsp+0xd8+var_90], rax
000000000001181b         mov        qword [rsp+0xd8+var_B8], rdi
0000000000011820         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000011825         mov        rbp, rax
0000000000011828         lea        rax, qword [rax-1]
000000000001182c         cmp        rax, 0xfffffffffffffffc
0000000000011830         ja         loc_11918

0000000000011836         mov        edx, dword [rsp+0xd8+var_94]
000000000001183a         mov        edi, edx                                    ; argument "__wc" for method j_towupper
000000000001183c         mov        dword [rsp+0xd8+var_C0], edx
0000000000011840         call       j_towupper                                  ; towupper
0000000000011845         mov        edx, dword [rsp+0xd8+var_C0]
0000000000011849         mov        r12d, eax
000000000001184c         cmp        edx, eax
000000000001184e         je         loc_118c8

0000000000011850         mov        rdx, qword [rsp+0xd8+var_A0]                ; argument "__ps" for method j_wcrtomb
0000000000011855         mov        rdi, qword [rsp+0xd8+var_B0]                ; argument "__s" for method j_wcrtomb
000000000001185a         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000001185c         call       j_wcrtomb                                   ; wcrtomb
0000000000011861         cmp        rbp, rax
0000000000011864         jne        loc_119d8

000000000001186a         mov        rdi, qword [r14+8]
000000000001186e         mov        rsi, qword [rsp+0xd8+var_B0]                ; argument "__src" for method j_memcpy
0000000000011873         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000011876         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000011879         call       j_memcpy                                    ; memcpy

                     loc_1187e:
000000000001187e         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+801
0000000000011882         mov        rdx, qword [r14+0x10]
0000000000011886         lea        rax, qword [r13*4]
000000000001188e         lea        rcx, qword [r15+rbp-1]
0000000000011893         cmp        r15, rcx
0000000000011896         mov        dword [rdx+r13*4], r12d
000000000001189a         jge        loc_118ba

000000000001189c         lea        rax, qword [rdx+rax+4]
00000000000118a1         lea        rdx, qword [rdx+rcx*4]
00000000000118a5         nop        dword [rax]

                     loc_118a8:
00000000000118a8         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+757
00000000000118ae         add        rax, 0x4
00000000000118b2         cmp        rdx, rax
00000000000118b5         jne        loc_118a8

00000000000118b7         mov        r15, rcx

                     loc_118ba:
00000000000118ba         cmp        rbx, r15                                    ; CODE XREF=build_wcs_upper_buffer+730, build_wcs_upper_buffer+849, build_wcs_upper_buffer+949, build_wcs_upper_buffer+964
00000000000118bd         jg         loc_117d0

00000000000118c3         jmp        loc_11938
00000000000118c5         align      8

                     loc_118c8:
00000000000118c8         mov        rsi, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+654
00000000000118cc         mov        rdi, qword [r14+8]
00000000000118d0         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000118d3         add        rsi, r15
00000000000118d6         add        rsi, qword [r14]                            ; argument "__src" for method j_memcpy
00000000000118d9         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
00000000000118dc         call       j_memcpy                                    ; memcpy
00000000000118e1         jmp        loc_1187e
00000000000118e3         align      8

                     loc_118e8:
00000000000118e8         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc, CODE XREF=build_wcs_upper_buffer+564
00000000000118ed         mov        rax, qword [rax]
00000000000118f0         mov        rdx, qword [r14+8]
00000000000118f4         mov        eax, dword [rax+r12*4]
00000000000118f8         mov        byte [rdx+r15], al
00000000000118fc         mov        rdx, qword [r14+8]
0000000000011900         mov        rax, qword [r14+0x10]
0000000000011904         movzx      edx, byte [rdx+r15]
0000000000011909         mov        dword [rax+r15*4], edx
000000000001190d         add        r15, 0x1
0000000000011911         jmp        loc_118ba
0000000000011913         align      8

                     loc_11918:
0000000000011918         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=build_wcs_upper_buffer+624
000000000001191c         jne        loc_11950

000000000001191e         mov        rax, qword [r14+0x58]
0000000000011922         cmp        qword [r14+0x40], rax
0000000000011926         jge        loc_11950

0000000000011928         mov        rax, qword [rsp+0xd8+var_90]
000000000001192d         mov        qword [r14+0x20], rax
0000000000011931         nop        dword [rax]

                     loc_11938:
0000000000011938         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+480, build_wcs_upper_buffer+771
000000000001193c         mov        qword [r14+0x38], r15
0000000000011940         xor        eax, eax
0000000000011942         jmp        loc_1161f
0000000000011947         align      16

                     loc_11950:
0000000000011950         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+860, build_wcs_upper_buffer+870
0000000000011953         mov        rdx, qword [r14+8]
0000000000011957         add        rax, r15
000000000001195a         add        rax, qword [r14+0x28]
000000000001195e         movzx      eax, byte [rax]
0000000000011961         mov        byte [rdx+r15], al
0000000000011965         mov        rdx, qword [r14+0x10]
0000000000011969         add        r15, 0x1
000000000001196d         cmp        rbp, 0xffffffffffffffff
0000000000011971         mov        dword [rdx+r13*4], eax
0000000000011975         jne        loc_118ba

000000000001197b         mov        rax, qword [rsp+0xd8+var_90]
0000000000011980         mov        qword [r14+0x20], rax
0000000000011984         jmp        loc_118ba

                     loc_11989:
0000000000011989         mov        eax, dword [r14+0x90]                       ; CODE XREF=build_wcs_upper_buffer+190
0000000000011990         test       eax, eax
0000000000011992         jle        loc_11bb0

0000000000011998         mov        rdi, qword [r14+0x28]
000000000001199c         lea        r11d, dword [rax-1]
00000000000119a0         lea        rcx, qword [rsp+0xd8+var_88]
00000000000119a5         xor        eax, eax
00000000000119a7         add        rdi, r13
00000000000119aa         add        rdi, qword [r14]
00000000000119ad         jmp        loc_119ba

                     loc_119af:
00000000000119af         add        rax, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1033
00000000000119b3         cmp        qword [rsp+0xd8+var_C8], rax
00000000000119b8         je         loc_119cb

                     loc_119ba:
00000000000119ba         movzx      esi, byte [rdi+rax]                         ; CODE XREF=build_wcs_upper_buffer+1005
00000000000119be         cmp        r11, rax
00000000000119c1         movzx      esi, byte [rdx+rsi]
00000000000119c5         mov        byte [rcx+rax], sil
00000000000119c9         jne        loc_119af

                     loc_119cb:
00000000000119cb         mov        qword [rsp+0xd8+var_C0], rcx                ; CODE XREF=build_wcs_upper_buffer+1016, build_wcs_upper_buffer+1525
00000000000119d0         jmp        loc_11693
00000000000119d5         align      8

                     loc_119d8:
00000000000119d8         mov        r13, r15                                    ; CODE XREF=build_wcs_upper_buffer+676
00000000000119db         jmp        loc_1166e

                     loc_119e0:
00000000000119e0         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+287, build_wcs_upper_buffer+1242
00000000000119e4         mov        rsi, qword [rsp+0xd8+var_C0]                ; argument "__src" for method j_memcpy
00000000000119e9         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000119ec         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
00000000000119ef         call       j_memcpy                                    ; memcpy
00000000000119f4         jmp        loc_11721

                     loc_119f9:
00000000000119f9         cmp        qword [rsp+0xd8+var_B8], 0xfffffffffffffffd ; CODE XREF=build_wcs_upper_buffer+252
00000000000119ff         jne        loc_11a0b

0000000000011a01         mov        rax, qword [r14+0x58]
0000000000011a05         cmp        qword [r14+0x40], rax
0000000000011a09         jl         loc_11a88

                     loc_11a0b:
0000000000011a0b         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+1087
0000000000011a0e         mov        rdx, qword [r14+0x78]
0000000000011a12         add        rax, r13
0000000000011a15         add        rax, qword [r14+0x28]
0000000000011a19         test       rdx, rdx
0000000000011a1c         movzx      eax, byte [rax]
0000000000011a1f         jne        loc_11bcc

                     loc_11a25:
0000000000011a25         mov        rdx, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1552
0000000000011a29         mov        rcx, r15
0000000000011a2c         mov        byte [rdx+r15], al
0000000000011a30         cmp        byte [r14+0x8c], 0x0
0000000000011a38         jne        loc_11bbf

                     loc_11a3e:
0000000000011a3e         mov        rdx, qword [r14+0x10]                       ; CODE XREF=build_wcs_upper_buffer+1543
0000000000011a42         add        r13, 0x1
0000000000011a46         add        r15, 0x1
0000000000011a4a         cmp        rbp, 0xffffffffffffffff
0000000000011a4e         mov        dword [rdx+rcx*4], eax
0000000000011a51         jne        loc_11610

0000000000011a57         mov        rax, qword [rsp+0xd8+var_90]
0000000000011a5c         mov        qword [r14+0x20], rax
0000000000011a60         jmp        loc_11610

                     loc_11a65:
0000000000011a65         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+366
0000000000011a69         mov        rcx, r15
0000000000011a6c         mov        r10, r13
0000000000011a6f         sub        rcx, r13
0000000000011a72         lea        rdx, qword [rdx+rcx*8]

                     loc_11a76:
0000000000011a76         mov        qword [rdx+r10*8], r10                      ; CODE XREF=build_wcs_upper_buffer+1217
0000000000011a7a         add        r10, 0x1
0000000000011a7e         cmp        rax, r10
0000000000011a81         jne        loc_11a76

0000000000011a83         jmp        loc_11734

                     loc_11a88:
0000000000011a88         mov        rax, qword [rsp+0xd8+var_90]                ; CODE XREF=build_wcs_upper_buffer+1097, build_wcs_upper_buffer+1267
0000000000011a8d         mov        qword [r14+0x20], rax
0000000000011a91         jmp        loc_11615

                     loc_11a96:
0000000000011a96         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=build_wcs_upper_buffer+329
0000000000011a9a         je         loc_119e0

0000000000011aa0         lea        rax, qword [rax+r15]
0000000000011aa4         mov        rsi, rax
0000000000011aa7         mov        qword [rsp+0xd8+var_D0], rax
0000000000011aac         mov        rax, qword [r14+0x40]
0000000000011ab0         cmp        rsi, rax
0000000000011ab3         ja         loc_11a88

0000000000011ab5         cmp        qword [r14+0x18], 0x0
0000000000011aba         je         loc_11b78

                     loc_11ac0:
0000000000011ac0         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1504
0000000000011ac8         jne        loc_11aea

0000000000011aca         test       r15, r15
0000000000011acd         je         loc_11ae2

0000000000011acf         mov        rdx, qword [r14+0x18]
0000000000011ad3         xor        eax, eax

                     loc_11ad5:
0000000000011ad5         mov        qword [rdx+rax*8], rax                      ; CODE XREF=build_wcs_upper_buffer+1312
0000000000011ad9         add        rax, 0x1
0000000000011add         cmp        rax, r15
0000000000011ae0         jne        loc_11ad5

                     loc_11ae2:
0000000000011ae2         mov        byte [r14+0x8c], 0x1                        ; CODE XREF=build_wcs_upper_buffer+1293

                     loc_11aea:
0000000000011aea         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1288
0000000000011aee         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000011af1         mov        rdx, r11                                    ; argument "__n" for method j_memcpy
0000000000011af4         mov        qword [rsp+0xd8+var_C8], r11
0000000000011af9         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000011afc         call       j_memcpy                                    ; memcpy
0000000000011b01         mov        rax, qword [r14+0x10]
0000000000011b05         mov        r11, qword [rsp+0xd8+var_C8]
0000000000011b0a         lea        rcx, qword [rax+r15*4]
0000000000011b0e         mov        rax, qword [r14+0x18]
0000000000011b12         cmp        r11, 0x1
0000000000011b16         mov        dword [rcx], r12d
0000000000011b19         lea        rsi, qword [rax+r15*8]
0000000000011b1d         mov        qword [rsi], r13
0000000000011b20         jbe        loc_11b4a

0000000000011b22         mov        eax, 0x1

                     loc_11b27:
0000000000011b27         mov        rdx, qword [rsp+0xd8+var_B8]                ; CODE XREF=build_wcs_upper_buffer+1416
0000000000011b2c         cmp        rax, rbp
0000000000011b2f         cmovb      rdx, rax
0000000000011b33         add        rdx, r13
0000000000011b36         mov        qword [rsi+rax*8], rdx
0000000000011b3a         mov        dword [rcx+rax*4], 0xffffffff
0000000000011b41         add        rax, 0x1
0000000000011b45         cmp        rax, r11
0000000000011b48         jne        loc_11b27

                     loc_11b4a:
0000000000011b4a         mov        rbx, qword [r14+0x58]                       ; CODE XREF=build_wcs_upper_buffer+1376
0000000000011b4e         sub        r11, rbp
0000000000011b51         add        rbx, r11
0000000000011b54         cmp        r13, qword [r14+0x60]
0000000000011b58         mov        qword [r14+0x58], rbx
0000000000011b5c         jge        loc_11b62

0000000000011b5e         add        qword [r14+0x68], r11

                     loc_11b62:
0000000000011b62         cmp        qword [r14+0x40], rbx                       ; CODE XREF=build_wcs_upper_buffer+1436
0000000000011b66         mov        r15, qword [rsp+0xd8+var_D0]
0000000000011b6b         cmovle     rbx, qword [r14+0x40]
0000000000011b70         add        r13, rbp
0000000000011b73         jmp        loc_11610

                     loc_11b78:
0000000000011b78         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc, CODE XREF=build_wcs_upper_buffer+1274
0000000000011b80         mov        qword [rsp+0xd8+var_C0], rcx
0000000000011b85         mov        qword [rsp+0xd8+var_C8], r11
0000000000011b8a         call       j_malloc                                    ; malloc
0000000000011b8f         test       rax, rax
0000000000011b92         mov        qword [r14+0x18], rax
0000000000011b96         mov        r11, qword [rsp+0xd8+var_C8]
0000000000011b9b         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000011ba0         jne        loc_11ac0

0000000000011ba6         mov        eax, 0xc
0000000000011bab         jmp        loc_1161f

                     loc_11bb0:
0000000000011bb0         lea        rcx, qword [rsp+0xd8+var_88]                ; CODE XREF=build_wcs_upper_buffer+978
0000000000011bb5         jmp        loc_119cb

                     loc_11bba:
0000000000011bba         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_upper_buffer+112
                        ; endp

                     loc_11bbf:
0000000000011bbf         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+1144
0000000000011bc3         mov        qword [rdx+r15*8], r13
0000000000011bc7         jmp        loc_11a3e

                     loc_11bcc:
0000000000011bcc         movzx      eax, byte [rdx+rax]                         ; CODE XREF=build_wcs_upper_buffer+1119
0000000000011bd0         jmp        loc_11a25
0000000000011bd5         align      32                                          ; End of unwind block (FDE at 0x25cf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extend_buffers:
0000000000011be0         push       rbp                                         ; Begin of unwind block (FDE at 0x25d3c), CODE XREF=clean_state_log_if_needed+38, clean_state_log_if_needed+85, transit_state_bkref.isra.34+2162, re_search_internal+3125
0000000000011be1         push       rbx
0000000000011be2         movabs     rdx, 0xffffffffffffffe
0000000000011bec         sub        rsp, 0x8
0000000000011bf0         mov        rax, qword [rdi+0x40]
0000000000011bf4         cmp        rax, rdx
0000000000011bf7         ja         loc_11d08

0000000000011bfd         mov        rdx, qword [rdi+0x58]
0000000000011c01         add        rax, rax
0000000000011c04         movsxd     rsi, esi
0000000000011c07         mov        rbx, rdi
0000000000011c0a         cmp        rax, rdx
0000000000011c0d         cmovg      rax, rdx
0000000000011c11         cmp        rax, rsi
0000000000011c14         cmovge     rsi, rax
0000000000011c18         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000011c1d         test       eax, eax
0000000000011c1f         mov        ebp, eax
0000000000011c21         jne        loc_11cdd

0000000000011c27         mov        rdi, qword [rbx+0xb8]
0000000000011c2e         test       rdi, rdi
0000000000011c31         je         loc_11c54

0000000000011c33         mov        rax, qword [rbx+0x40]
0000000000011c37         lea        rsi, qword [0x8+rax*8]                      ; argument "__size" for method j_realloc
0000000000011c3f         call       j_realloc                                   ; realloc
0000000000011c44         test       rax, rax
0000000000011c47         je         loc_11d08

0000000000011c4d         mov        qword [rbx+0xb8], rax

                     loc_11c54:
0000000000011c54         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=extend_buffers+81
0000000000011c5b         mov        eax, dword [rbx+0x90]
0000000000011c61         je         loc_11c80

0000000000011c63         cmp        eax, 0x1
0000000000011c66         mov        rdi, rbx
0000000000011c69         jle        loc_11d20

0000000000011c6f         add        rsp, 0x8
0000000000011c73         pop        rbx
0000000000011c74         pop        rbp
0000000000011c75         jmp        build_wcs_upper_buffer                      ; build_wcs_upper_buffer
                        ; endp
0000000000011c7a         align      128

                     loc_11c80:
0000000000011c80         cmp        eax, 0x1                                    ; CODE XREF=extend_buffers+129
0000000000011c83         jg         loc_11cf0

0000000000011c85         mov        rcx, qword [rbx+0x78]
0000000000011c89         test       rcx, rcx
0000000000011c8c         je         loc_11cdd

0000000000011c8e         mov        rsi, qword [rbx+0x58]
0000000000011c92         cmp        qword [rbx+0x40], rsi
0000000000011c96         cmovle     rsi, qword [rbx+0x40]
0000000000011c9b         mov        rax, qword [rbx+0x30]
0000000000011c9f         cmp        rsi, rax
0000000000011ca2         jg         loc_11cb4

0000000000011ca4         jmp        loc_11cd5
0000000000011ca6         align      16

                     loc_11cb0:
0000000000011cb0         mov        rcx, qword [rbx+0x78]                       ; CODE XREF=extend_buffers+243

                     loc_11cb4:
0000000000011cb4         mov        rdx, qword [rbx]                            ; CODE XREF=extend_buffers+194
0000000000011cb7         add        rdx, rax
0000000000011cba         add        rdx, qword [rbx+0x28]
0000000000011cbe         movzx      edx, byte [rdx]
0000000000011cc1         movzx      ecx, byte [rcx+rdx]
0000000000011cc5         mov        rdx, qword [rbx+8]
0000000000011cc9         mov        byte [rdx+rax], cl
0000000000011ccc         add        rax, 0x1
0000000000011cd0         cmp        rsi, rax
0000000000011cd3         jne        loc_11cb0

                     loc_11cd5:
0000000000011cd5         mov        qword [rbx+0x30], rax                       ; CODE XREF=extend_buffers+196
0000000000011cd9         mov        qword [rbx+0x38], rax

                     loc_11cdd:
0000000000011cdd         add        rsp, 0x8                                    ; CODE XREF=extend_buffers+65, extend_buffers+172
0000000000011ce1         mov        eax, ebp
0000000000011ce3         pop        rbx
0000000000011ce4         pop        rbp
0000000000011ce5         ret
                        ; endp
0000000000011ce6         align      16

                     loc_11cf0:
0000000000011cf0         mov        rdi, rbx                                    ; CODE XREF=extend_buffers+163
0000000000011cf3         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000011cf8         add        rsp, 0x8
0000000000011cfc         mov        eax, ebp
0000000000011cfe         pop        rbx
0000000000011cff         pop        rbp
0000000000011d00         ret
                        ; endp
0000000000011d01         align      8

                     loc_11d08:
0000000000011d08         mov        ebp, 0xc                                    ; CODE XREF=extend_buffers+23, extend_buffers+103
0000000000011d0d         add        rsp, 0x8
0000000000011d11         mov        eax, ebp
0000000000011d13         pop        rbx
0000000000011d14         pop        rbp
0000000000011d15         ret
                        ; endp
0000000000011d16         align      32

                     loc_11d20:
0000000000011d20         call       build_upper_buffer                          ; build_upper_buffer, CODE XREF=extend_buffers+137
0000000000011d25         add        rsp, 0x8
0000000000011d29         mov        eax, ebp
0000000000011d2b         pop        rbx
0000000000011d2c         pop        rbp
0000000000011d2d         ret
                        ; endp
0000000000011d2e         align      16                                          ; End of unwind block (FDE at 0x25d3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     clean_state_log_if_needed:
0000000000011d30         push       r12                                         ; Begin of unwind block (FDE at 0x25d98), CODE XREF=get_subexp_sub.isra.32+244, transit_state_bkref.isra.34+816, re_search_internal+3351
0000000000011d32         push       rbp
0000000000011d33         mov        rbp, rsi
0000000000011d36         push       rbx
0000000000011d37         mov        rax, qword [rdi+0x40]
0000000000011d3b         mov        rbx, rdi
0000000000011d3e         mov        r12, qword [rdi+0xc0]
0000000000011d45         cmp        rax, rsi
0000000000011d48         jg         loc_11d70

0000000000011d4a         cmp        rax, qword [rdi+0x58]
0000000000011d4e         jge        loc_11d70

0000000000011d50         lea        esi, dword [rbp+1]
0000000000011d53         mov        rdi, rbx
0000000000011d56         call       extend_buffers                              ; extend_buffers
0000000000011d5b         test       eax, eax
0000000000011d5d         jne        loc_11d66

                     loc_11d5f:
0000000000011d5f         cmp        r12, rbp                                    ; CODE XREF=clean_state_log_if_needed+71, clean_state_log_if_needed+77, clean_state_log_if_needed+92
0000000000011d62         jl         loc_11d90

                     loc_11d64:
0000000000011d64         xor        eax, eax                                    ; CODE XREF=clean_state_log_if_needed+132

                     loc_11d66:
0000000000011d66         pop        rbx                                         ; CODE XREF=clean_state_log_if_needed+45, clean_state_log_if_needed+94
0000000000011d67         pop        rbp
0000000000011d68         pop        r12
0000000000011d6a         ret
                        ; endp
0000000000011d6b         align      16

                     loc_11d70:
0000000000011d70         mov        rax, qword [rbx+0x30]                       ; CODE XREF=clean_state_log_if_needed+24, clean_state_log_if_needed+30
0000000000011d74         cmp        rax, rbp
0000000000011d77         jg         loc_11d5f

0000000000011d79         cmp        rax, qword [rbx+0x58]
0000000000011d7d         jge        loc_11d5f

0000000000011d7f         lea        esi, dword [rbp+1]
0000000000011d82         mov        rdi, rbx
0000000000011d85         call       extend_buffers                              ; extend_buffers
0000000000011d8a         test       eax, eax
0000000000011d8c         je         loc_11d5f

0000000000011d8e         jmp        loc_11d66

                     loc_11d90:
0000000000011d90         mov        rax, qword [rbx+0xb8]                       ; CODE XREF=clean_state_log_if_needed+50
0000000000011d97         mov        rdx, rbp
0000000000011d9a         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000011d9c         sub        rdx, r12
0000000000011d9f         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
0000000000011da3         lea        rdi, qword [rax+r12*8+8]                    ; argument "__s" for method j_memset
0000000000011da8         call       j_memset                                    ; memset
0000000000011dad         mov        qword [rbx+0xc0], rbp
0000000000011db4         jmp        loc_11d64
0000000000011db6         align      64                                          ; End of unwind block (FDE at 0x25d98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_charset:
0000000000011dc0         push       rbx                                         ; Begin of unwind block (FDE at 0x25dc4), CODE XREF=free_token+35, build_charclass_op+499, build_charclass_op+523, build_charclass_op+593, sub_1c260+1155, sub_1c260+2271
0000000000011dc1         mov        rbx, rdi
0000000000011dc4         mov        rdi, qword [rdi]
0000000000011dc7         call       sub_2a10                                    ; sub_2a10
0000000000011dcc         mov        rdi, qword [rbx+8]
0000000000011dd0         call       sub_2a10                                    ; sub_2a10
0000000000011dd5         mov        rdi, qword [rbx+0x10]
0000000000011dd9         call       sub_2a10                                    ; sub_2a10
0000000000011dde         mov        rdi, qword [rbx+0x18]
0000000000011de2         call       sub_2a10                                    ; sub_2a10
0000000000011de7         mov        rdi, rbx
0000000000011dea         pop        rbx
0000000000011deb         jmp        sub_2a10                                    ; sub_2a10
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_token:
0000000000011df0         mov        eax, dword [rdi+8]                          ; End of unwind block (FDE at 0x25dc4), Begin of unwind block (FDE at 0x25de0), CODE XREF=free_tree+8, free_dfa_content+50
0000000000011df3         and        eax, 0x400ff
0000000000011df8         cmp        eax, 0x6
0000000000011dfb         je         loc_11e10

0000000000011dfd         cmp        eax, 0x3
0000000000011e00         je         loc_11e08

0000000000011e02         ret
                        ; endp
0000000000011e04         align      8

                     loc_11e08:
0000000000011e08         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+16
0000000000011e0b         jmp        sub_2a10                                    ; sub_2a10
                        ; endp

                     loc_11e10:
0000000000011e10         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+11
0000000000011e13         jmp        free_charset                                ; free_charset
                        ; endp
0000000000011e15         align      32                                          ; End of unwind block (FDE at 0x25de0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_tree:
0000000000011e20         lea        rdi, qword [rsi+0x28]                       ; Begin of unwind block (FDE at 0x25df4), DATA XREF=sub_1baf0+81, sub_1baf0+764, sub_1baf0+1024, sub_1baf0+1118, parse_branch+313, parse_branch+336, parse_branch+353, parse_reg_exp+305
0000000000011e24         sub        rsp, 0x8
0000000000011e28         call       free_token                                  ; free_token
0000000000011e2d         xor        eax, eax
0000000000011e2f         add        rsp, 0x8
0000000000011e33         ret
                        ; endp
0000000000011e34         align      64                                          ; End of unwind block (FDE at 0x25df4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     re_dfa_add_node:
0000000000011e40         push       r15                                         ; Begin of unwind block (FDE at 0x25e0c), CODE XREF=duplicate_node+38, calc_first+30
0000000000011e42         push       r14
0000000000011e44         mov        r14, rsi
0000000000011e47         push       r13
0000000000011e49         push       r12
0000000000011e4b         push       rbp
0000000000011e4c         push       rbx
0000000000011e4d         mov        rbx, rdi
0000000000011e50         sub        rsp, 0x18
0000000000011e54         mov        rsi, qword [rdi+0x10]
0000000000011e58         mov        rbp, qword [rdi+8]
0000000000011e5c         cmp        rsi, rbp
0000000000011e5f         jae        loc_11f10

0000000000011e65         mov        r12, qword [rdi+0x18]
0000000000011e69         mov        rbp, qword [rdi+0x28]

                     loc_11e6d:
0000000000011e6d         mov        rax, rsi                                    ; CODE XREF=re_dfa_add_node+391
0000000000011e70         mov        ecx, edx
0000000000011e72         shl        rax, 0x4
0000000000011e76         add        rax, qword [rbx]
0000000000011e79         and        ecx, 0xfffc00ff
0000000000011e7f         mov        qword [rax+8], rdx
0000000000011e83         mov        dword [rax+8], ecx
0000000000011e86         xor        ecx, ecx
0000000000011e88         cmp        dl, 0x6
0000000000011e8b         mov        qword [rax], r14
0000000000011e8e         sete       cl
0000000000011e91         cmp        dl, 0x5
0000000000011e94         jne        loc_11ea2

0000000000011e96         xor        ecx, ecx
0000000000011e98         cmp        dword [rbx+0xb4], 0x1
0000000000011e9f         setg       cl

                     loc_11ea2:
0000000000011ea2         movzx      edx, byte [rax+0xa]                         ; CODE XREF=re_dfa_add_node+84
0000000000011ea6         shl        ecx, 0x4
0000000000011ea9         pxor       xmm0, xmm0
0000000000011ead         and        edx, 0xffffffef
0000000000011eb0         or         edx, ecx
0000000000011eb2         mov        byte [rax+0xa], dl
0000000000011eb5         mov        qword [r12+rsi*8], 0xffffffffffffffff
0000000000011ebd         mov        rax, qword [rbx+0x10]
0000000000011ec1         lea        rax, qword [rax+rax*2]
0000000000011ec5         lea        rax, qword [rbp+rax*8]
0000000000011eca         movups     xmmword [rax], xmm0
0000000000011ecd         mov        qword [rax+0x10], 0x0
0000000000011ed5         mov        rax, qword [rbx+0x10]
0000000000011ed9         lea        rdx, qword [rax+rax*2]
0000000000011edd         mov        rax, qword [rbx+0x30]
0000000000011ee1         lea        rax, qword [rax+rdx*8]
0000000000011ee5         movups     xmmword [rax], xmm0
0000000000011ee8         mov        qword [rax+0x10], 0x0
0000000000011ef0         mov        rax, qword [rbx+0x10]
0000000000011ef4         lea        rdx, qword [rax+1]
0000000000011ef8         mov        qword [rbx+0x10], rdx

                     loc_11efc:
0000000000011efc         add        rsp, 0x18                                   ; CODE XREF=re_dfa_add_node+457
0000000000011f00         pop        rbx
0000000000011f01         pop        rbp
0000000000011f02         pop        r12
0000000000011f04         pop        r13
0000000000011f06         pop        r14
0000000000011f08         pop        r15
0000000000011f0a         ret
                        ; endp
0000000000011f0b         align      16

                     loc_11f10:
0000000000011f10         lea        r13, qword [rbp+rbp]                        ; CODE XREF=re_dfa_add_node+31
0000000000011f15         movabs     rax, 0xaaaaaaaaaaaaaaa
0000000000011f1f         cmp        r13, rax
0000000000011f22         ja         loc_12002

0000000000011f28         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_realloc
0000000000011f2b         mov        rsi, rbp
0000000000011f2e         mov        qword [rsp+0x48+var_40], rdx
0000000000011f33         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
0000000000011f37         call       j_realloc                                   ; realloc
0000000000011f3c         test       rax, rax
0000000000011f3f         je         loc_12002

0000000000011f45         mov        r15, rbp
0000000000011f48         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_realloc
0000000000011f4c         mov        qword [rbx], rax
0000000000011f4f         shl        r15, 0x4
0000000000011f53         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000011f56         call       j_realloc                                   ; realloc
0000000000011f5b         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_realloc
0000000000011f5f         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000011f62         lea        r15, qword [r13+rbp*4]
0000000000011f67         mov        r12, rax
0000000000011f6a         shl        r15, 0x3
0000000000011f6e         call       j_realloc                                   ; realloc
0000000000011f73         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_realloc
0000000000011f77         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000011f7a         mov        qword [rsp+0x48+var_48], rax
0000000000011f7e         call       j_realloc                                   ; realloc
0000000000011f83         mov        rdi, qword [rbx+0x30]                       ; argument "__ptr" for method j_realloc
0000000000011f87         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000011f8a         mov        rbp, rax
0000000000011f8d         call       j_realloc                                   ; realloc
0000000000011f92         test       r12, r12
0000000000011f95         mov        rcx, qword [rsp+0x48+var_48]
0000000000011f99         je         loc_11fd0

0000000000011f9b         test       rcx, rcx
0000000000011f9e         je         loc_11fd0

0000000000011fa0         test       rbp, rbp
0000000000011fa3         je         loc_11fd0

0000000000011fa5         test       rax, rax
0000000000011fa8         mov        rdx, qword [rsp+0x48+var_40]
0000000000011fad         je         loc_11fd0

0000000000011faf         mov        qword [rbx+0x18], r12
0000000000011fb3         mov        qword [rbx+0x20], rcx
0000000000011fb7         mov        qword [rbx+0x28], rbp
0000000000011fbb         mov        qword [rbx+0x30], rax
0000000000011fbf         mov        qword [rbx+8], r13
0000000000011fc3         mov        rsi, qword [rbx+0x10]
0000000000011fc7         jmp        loc_11e6d
0000000000011fcc         align      16

                     loc_11fd0:
0000000000011fd0         mov        rdi, r12                                    ; CODE XREF=re_dfa_add_node+345, re_dfa_add_node+350, re_dfa_add_node+355, re_dfa_add_node+365
0000000000011fd3         mov        qword [rsp+0x48+var_40], rax
0000000000011fd8         mov        qword [rsp+0x48+var_48], rcx
0000000000011fdc         call       sub_2a10                                    ; sub_2a10
0000000000011fe1         mov        rcx, qword [rsp+0x48+var_48]
0000000000011fe5         mov        rdi, rcx
0000000000011fe8         call       sub_2a10                                    ; sub_2a10
0000000000011fed         mov        rdi, rbp
0000000000011ff0         call       sub_2a10                                    ; sub_2a10
0000000000011ff5         mov        rax, qword [rsp+0x48+var_40]
0000000000011ffa         mov        rdi, rax
0000000000011ffd         call       sub_2a10                                    ; sub_2a10

                     loc_12002:
0000000000012002         mov        rax, 0xffffffffffffffff                     ; CODE XREF=re_dfa_add_node+226, re_dfa_add_node+255
0000000000012009         jmp        loc_11efc
000000000001200e         align      16                                          ; End of unwind block (FDE at 0x25e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     duplicate_node:
0000000000012010         push       r13                                         ; Begin of unwind block (FDE at 0x25e58), CODE XREF=duplicate_node_closure+258, duplicate_node_closure+328, duplicate_node_closure+437, duplicate_node_closure+542
0000000000012012         push       r12
0000000000012014         mov        r13, rsi
0000000000012017         push       rbp
0000000000012018         push       rbx
0000000000012019         shl        r13, 0x4
000000000001201d         mov        rbp, rsi
0000000000012020         mov        r12d, edx
0000000000012023         mov        rbx, rdi
0000000000012026         sub        rsp, 0x8
000000000001202a         mov        rax, qword [rdi]
000000000001202d         mov        rsi, qword [rax+r13]
0000000000012031         mov        rdx, qword [rax+r13+8]
0000000000012036         call       re_dfa_add_node                             ; re_dfa_add_node
000000000001203b         cmp        rax, 0xffffffffffffffff
000000000001203f         je         loc_120a4

0000000000012041         mov        edi, r12d
0000000000012044         mov        r8, qword [rbx]
0000000000012047         mov        rsi, rax
000000000001204a         and        di, 0x3ff
000000000001204f         shl        rsi, 0x4
0000000000012053         mov        ecx, edi
0000000000012055         and        ecx, 0x3ff
000000000001205b         add        rsi, r8
000000000001205e         shl        ecx, 0x8
0000000000012061         mov        edx, ecx
0000000000012063         mov        ecx, dword [rsi+8]
0000000000012066         and        ecx, 0xfffc00ff
000000000001206c         or         ecx, edx
000000000001206e         mov        dword [rsi+8], ecx
0000000000012071         mov        edx, dword [r8+r13+8]
0000000000012076         and        ecx, 0xfffc00ff
000000000001207c         shr        edx, 0x8
000000000001207f         or         edx, edi
0000000000012081         and        edx, 0x3ff
0000000000012087         shl        edx, 0x8
000000000001208a         or         edx, ecx
000000000001208c         mov        ecx, edx
000000000001208e         mov        dword [rsi+8], edx
0000000000012091         shr        ecx, 0x10
0000000000012094         mov        edx, ecx
0000000000012096         or         edx, 0x4
0000000000012099         mov        byte [rsi+0xa], dl
000000000001209c         mov        rdx, qword [rbx+0x20]
00000000000120a0         mov        qword [rdx+rax*8], rbp

                     loc_120a4:
00000000000120a4         add        rsp, 0x8                                    ; CODE XREF=duplicate_node+47
00000000000120a8         pop        rbx
00000000000120a9         pop        rbp
00000000000120aa         pop        r12
00000000000120ac         pop        r13
00000000000120ae         ret
                        ; endp
00000000000120af         align      16                                          ; End of unwind block (FDE at 0x25e58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     duplicate_node_closure:
00000000000120b0         push       r15                                         ; Begin of unwind block (FDE at 0x25e90), CODE XREF=duplicate_node_closure+378, calc_eclosure_iter+618
00000000000120b2         push       r14
00000000000120b4         mov        r9, rsi
00000000000120b7         push       r13
00000000000120b9         push       r12
00000000000120bb         mov        r14, rdi
00000000000120be         push       rbp
00000000000120bf         push       rbx
00000000000120c0         mov        r13, rdx
00000000000120c3         mov        ebp, r8d
00000000000120c6         sub        rsp, 0x18
00000000000120ca         mov        qword [rsp+0x48+var_40], rcx

                     loc_120cf:
00000000000120cf         mov        r8, qword [r14]                             ; CODE XREF=duplicate_node_closure+293, duplicate_node_closure+481
00000000000120d2         mov        rax, r9
00000000000120d5         mov        rdi, qword [r14+0x28]
00000000000120d9         shl        rax, 0x4
00000000000120dd         mov        r12, r13
00000000000120e0         add        rax, r8
00000000000120e3         cmp        byte [rax+8], 0x4
00000000000120e7         je         loc_122a0

00000000000120ed         lea        r12, qword [r9+r9*2]
00000000000120f1         shl        r12, 0x3
00000000000120f5         lea        rsi, qword [rdi+r12]
00000000000120f9         mov        rcx, qword [rsi+8]
00000000000120fd         test       rcx, rcx
0000000000012100         je         loc_122f9

0000000000012106         lea        rbx, qword [r13+r13*2]
000000000001210b         mov        rsi, qword [rsi+0x10]
000000000001210f         shl        rbx, 0x3
0000000000012113         add        rdi, rbx
0000000000012116         cmp        rcx, 0x1
000000000001211a         mov        r15, qword [rsi]
000000000001211d         mov        qword [rdi+8], 0x0
0000000000012125         je         loc_12240

000000000001212b         mov        rdx, qword [r14+0x10]
000000000001212f         lea        rsi, qword [rdx-1]
0000000000012133         mov        rax, rsi
0000000000012136         shl        rax, 0x4
000000000001213a         add        rax, r8
000000000001213d         test       byte [rax+0xa], 0x4
0000000000012141         je         loc_121f0

0000000000012147         test       rsi, rsi
000000000001214a         jle        loc_121f0

0000000000012150         shl        rdx, 0x4
0000000000012154         sub        r8, rax
0000000000012157         mov        rcx, qword [r14+0x20]
000000000001215b         lea        r8, qword [r8+rdx-0x20]
0000000000012160         jmp        loc_1217a
0000000000012162         align      8

                     loc_12168:
0000000000012168         add        rax, r8                                     ; CODE XREF=duplicate_node_closure+206, duplicate_node_closure+222
000000000001216b         sub        rsi, 0x1
000000000001216f         test       byte [rax+0xa], 0x4
0000000000012173         je         loc_121f0

0000000000012175         test       rsi, rsi
0000000000012178         jle        loc_121f0

                     loc_1217a:
000000000001217a         cmp        qword [rcx+rsi*8], r15                      ; CODE XREF=duplicate_node_closure+176
000000000001217e         jne        loc_12168

0000000000012180         mov        edx, dword [rax+8]
0000000000012183         shr        edx, 0x8
0000000000012186         and        edx, 0x3ff
000000000001218c         cmp        ebp, edx
000000000001218e         jne        loc_12168

0000000000012190         call       re_node_set_insert                          ; re_node_set_insert
0000000000012195         test       al, al
0000000000012197         je         loc_121db

                     loc_12199:
0000000000012199         mov        rax, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+385
000000000001219d         mov        edx, ebp
000000000001219f         mov        rdi, r14
00000000000121a2         mov        rax, qword [rax+r12+0x10]
00000000000121a7         mov        r9, qword [rax+8]
00000000000121ab         mov        rsi, r9
00000000000121ae         mov        qword [rsp+0x48+var_48], r9
00000000000121b2         call       duplicate_node                              ; duplicate_node
00000000000121b7         cmp        rax, 0xffffffffffffffff
00000000000121bb         mov        r13, rax
00000000000121be         je         loc_121db

                     loc_121c0:
00000000000121c0         add        rbx, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+580
00000000000121c4         mov        rsi, r13
00000000000121c7         mov        rdi, rbx
00000000000121ca         call       re_node_set_insert                          ; re_node_set_insert
00000000000121cf         test       al, al
00000000000121d1         mov        r9, qword [rsp+0x48+var_48]
00000000000121d5         jne        loc_120cf

                     loc_121db:
00000000000121db         mov        eax, 0xc                                    ; CODE XREF=duplicate_node_closure+231, duplicate_node_closure+270, duplicate_node_closure+340, duplicate_node_closure+359, duplicate_node_closure+449, duplicate_node_closure+472, duplicate_node_closure+558, duplicate_node_closure+624

                     loc_121e0:
00000000000121e0         add        rsp, 0x18                                   ; CODE XREF=duplicate_node_closure+391, duplicate_node_closure+599, duplicate_node_closure+618
00000000000121e4         pop        rbx
00000000000121e5         pop        rbp
00000000000121e6         pop        r12
00000000000121e8         pop        r13
00000000000121ea         pop        r14
00000000000121ec         pop        r15
00000000000121ee         ret
                        ; endp
00000000000121ef         align      16

                     loc_121f0:
00000000000121f0         mov        edx, ebp                                    ; CODE XREF=duplicate_node_closure+145, duplicate_node_closure+154, duplicate_node_closure+195, duplicate_node_closure+200
00000000000121f2         mov        rsi, r15
00000000000121f5         mov        rdi, r14
00000000000121f8         call       duplicate_node                              ; duplicate_node
00000000000121fd         cmp        rax, 0xffffffffffffffff
0000000000012201         mov        r13, rax
0000000000012204         je         loc_121db

0000000000012206         mov        rdi, qword [r14+0x28]
000000000001220a         mov        rsi, r13
000000000001220d         add        rdi, rbx
0000000000012210         call       re_node_set_insert                          ; re_node_set_insert
0000000000012215         test       al, al
0000000000012217         je         loc_121db

0000000000012219         mov        rcx, qword [rsp+0x48+var_40]
000000000001221e         mov        r8d, ebp
0000000000012221         mov        rdx, r13
0000000000012224         mov        rsi, r15
0000000000012227         mov        rdi, r14
000000000001222a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000001222f         test       eax, eax
0000000000012231         je         loc_12199

0000000000012237         jmp        loc_121e0
0000000000012239         align      64

                     loc_12240:
0000000000012240         cmp        r9, qword [rsp+0x48+var_40]                 ; CODE XREF=duplicate_node_closure+117
0000000000012245         jne        loc_12250

0000000000012247         cmp        r9, r13
000000000001224a         jne        loc_1230c

                     loc_12250:
0000000000012250         mov        eax, dword [rax+8]                          ; CODE XREF=duplicate_node_closure+405
0000000000012253         mov        rsi, r15
0000000000012256         mov        rdi, r14
0000000000012259         shr        eax, 0x8
000000000001225c         and        eax, 0x3ff
0000000000012261         or         ebp, eax
0000000000012263         mov        edx, ebp
0000000000012265         call       duplicate_node                              ; duplicate_node
000000000001226a         cmp        rax, 0xffffffffffffffff
000000000001226e         mov        r13, rax
0000000000012271         je         loc_121db

0000000000012277         add        rbx, qword [r14+0x28]
000000000001227b         mov        rsi, rax
000000000001227e         mov        rdi, rbx
0000000000012281         call       re_node_set_insert                          ; re_node_set_insert
0000000000012286         test       al, al
0000000000012288         je         loc_121db

000000000001228e         mov        r9, r15
0000000000012291         jmp        loc_120cf
0000000000012296         align      32

                     loc_122a0:
00000000000122a0         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+55
00000000000122a4         lea        rbx, qword [r13+r13*2]
00000000000122a9         lea        r15, qword [r9*8]
00000000000122b1         mov        edx, ebp
00000000000122b3         shl        rbx, 0x3
00000000000122b7         mov        r9, qword [rax+r9*8]
00000000000122bb         mov        qword [rdi+rbx+8], 0x0
00000000000122c4         mov        rdi, r14
00000000000122c7         mov        rsi, r9
00000000000122ca         mov        qword [rsp+0x48+var_48], r9
00000000000122ce         call       duplicate_node                              ; duplicate_node
00000000000122d3         cmp        rax, 0xffffffffffffffff
00000000000122d7         mov        r13, rax
00000000000122da         mov        r9, qword [rsp+0x48+var_48]
00000000000122de         je         loc_121db

00000000000122e4         mov        rax, qword [r14+0x18]
00000000000122e8         mov        qword [rsp+0x48+var_48], r9
00000000000122ec         mov        rcx, qword [rax+r15]
00000000000122f0         mov        qword [rax+r12*8], rcx
00000000000122f4         jmp        loc_121c0

                     loc_122f9:
00000000000122f9         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+80
00000000000122fd         mov        rcx, qword [rax+r9*8]
0000000000012301         mov        qword [rax+r13*8], rcx
0000000000012305         xor        eax, eax
0000000000012307         jmp        loc_121e0

                     loc_1230c:
000000000001230c         mov        rsi, r15                                    ; CODE XREF=duplicate_node_closure+410
000000000001230f         call       re_node_set_insert                          ; re_node_set_insert
0000000000012314         mov        edx, eax
0000000000012316         xor        eax, eax
0000000000012318         test       dl, dl
000000000001231a         jne        loc_121e0

0000000000012320         jmp        loc_121db
0000000000012325         align      16                                          ; End of unwind block (FDE at 0x25e90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_state:
0000000000012330         push       rbx                                         ; Begin of unwind block (FDE at 0x25edc), CODE XREF=free_dfa_content+252, re_acquire_state_context+529, re_acquire_state+487
0000000000012331         mov        rbx, rdi
0000000000012334         mov        rdi, qword [rdi+0x30]
0000000000012338         call       sub_2a10                                    ; sub_2a10
000000000001233d         mov        rdi, qword [rbx+0x48]
0000000000012341         call       sub_2a10                                    ; sub_2a10
0000000000012346         mov        rax, qword [rbx+0x50]
000000000001234a         lea        rdx, qword [rbx+8]
000000000001234e         cmp        rax, rdx
0000000000012351         je         loc_12365

0000000000012353         mov        rdi, qword [rax+0x10]
0000000000012357         call       sub_2a10                                    ; sub_2a10
000000000001235c         mov        rdi, qword [rbx+0x50]
0000000000012360         call       sub_2a10                                    ; sub_2a10

                     loc_12365:
0000000000012365         mov        rdi, qword [rbx+0x18]                       ; CODE XREF=free_state+33
0000000000012369         call       sub_2a10                                    ; sub_2a10
000000000001236e         mov        rdi, qword [rbx+0x60]
0000000000012372         call       sub_2a10                                    ; sub_2a10
0000000000012377         mov        rdi, qword [rbx+0x58]
000000000001237b         call       sub_2a10                                    ; sub_2a10
0000000000012380         mov        rdi, rbx
0000000000012383         pop        rbx
0000000000012384         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000012389         align      16                                          ; End of unwind block (FDE at 0x25edc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_destruct:
0000000000012390         push       rbx                                         ; Begin of unwind block (FDE at 0x25ef8), CODE XREF=re_search_internal+2932, re_compile_internal+887, sub_1dbd0+983
0000000000012391         mov        rbx, rdi
0000000000012394         mov        rdi, qword [rdi+0x10]
0000000000012398         call       sub_2a10                                    ; sub_2a10
000000000001239d         mov        rdi, qword [rbx+0x18]
00000000000123a1         call       sub_2a10                                    ; sub_2a10
00000000000123a6         cmp        byte [rbx+0x8b], 0x0
00000000000123ad         jne        loc_123b8

00000000000123af         pop        rbx
00000000000123b0         ret
                        ; endp
00000000000123b1         align      8

                     loc_123b8:
00000000000123b8         mov        rdi, qword [rbx+8]                          ; CODE XREF=re_string_destruct+29
00000000000123bc         pop        rbx
00000000000123bd         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
00000000000123c2         align      16                                          ; End of unwind block (FDE at 0x25ef8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_dfa_content:
00000000000123d0         push       r14                                         ; Begin of unwind block (FDE at 0x25f18), CODE XREF=re_compile_internal+895, rpl_regfree+12
00000000000123d2         push       r13
00000000000123d4         push       r12
00000000000123d6         mov        r12, rdi
00000000000123d9         push       rbp
00000000000123da         push       rbx
00000000000123db         mov        rdi, qword [rdi]
00000000000123de         test       rdi, rdi
00000000000123e1         je         loc_1240e

00000000000123e3         cmp        qword [r12+0x10], 0x0
00000000000123e9         je         loc_1240e

00000000000123eb         xor        ebx, ebx
00000000000123ed         jmp        loc_123f4
00000000000123ef         align      16

                     loc_123f0:
00000000000123f0         mov        rdi, qword [r12]                            ; CODE XREF=free_dfa_content+60

                     loc_123f4:
00000000000123f4         mov        rax, rbx                                    ; CODE XREF=free_dfa_content+29
00000000000123f7         add        rbx, 0x1
00000000000123fb         shl        rax, 0x4
00000000000123ff         add        rdi, rax
0000000000012402         call       free_token                                  ; free_token
0000000000012407         cmp        qword [r12+0x10], rbx
000000000001240c         ja         loc_123f0

                     loc_1240e:
000000000001240e         mov        rdi, qword [r12+0x18]                       ; CODE XREF=free_dfa_content+17, free_dfa_content+25
0000000000012413         call       sub_2a10                                    ; sub_2a10
0000000000012418         cmp        qword [r12+0x10], 0x0
000000000001241e         je         loc_12473

0000000000012420         xor        ebx, ebx
0000000000012422         xor        ebp, ebp
0000000000012424         nop        dword [rax]

                     loc_12428:
0000000000012428         mov        rax, qword [r12+0x30]                       ; CODE XREF=free_dfa_content+161
000000000001242d         test       rax, rax
0000000000012430         je         loc_1243c

0000000000012432         mov        rdi, qword [rax+rbx+0x10]
0000000000012437         call       sub_2a10                                    ; sub_2a10

                     loc_1243c:
000000000001243c         mov        rax, qword [r12+0x38]                       ; CODE XREF=free_dfa_content+96
0000000000012441         test       rax, rax
0000000000012444         je         loc_12450

0000000000012446         mov        rdi, qword [rax+rbx+0x10]
000000000001244b         call       sub_2a10                                    ; sub_2a10

                     loc_12450:
0000000000012450         mov        rax, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+116
0000000000012455         test       rax, rax
0000000000012458         je         loc_12464

000000000001245a         mov        rdi, qword [rax+rbx+0x10]
000000000001245f         call       sub_2a10                                    ; sub_2a10

                     loc_12464:
0000000000012464         add        rbp, 0x1                                    ; CODE XREF=free_dfa_content+136
0000000000012468         add        rbx, 0x18
000000000001246c         cmp        qword [r12+0x10], rbp
0000000000012471         ja         loc_12428

                     loc_12473:
0000000000012473         mov        rdi, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+78
0000000000012478         call       sub_2a10                                    ; sub_2a10
000000000001247d         mov        rdi, qword [r12+0x30]
0000000000012482         call       sub_2a10                                    ; sub_2a10
0000000000012487         mov        rdi, qword [r12+0x38]
000000000001248c         call       sub_2a10                                    ; sub_2a10
0000000000012491         mov        rdi, qword [r12]
0000000000012495         call       sub_2a10                                    ; sub_2a10
000000000001249a         mov        rdi, qword [r12+0x40]
000000000001249f         test       rdi, rdi
00000000000124a2         je         loc_124f7

00000000000124a4         xor        r14d, r14d
00000000000124a7         xor        r13d, r13d
00000000000124aa         nop        word [rax+rax]

                     loc_124b0:
00000000000124b0         lea        rbp, qword [rdi+r14]                        ; CODE XREF=free_dfa_content+293
00000000000124b4         cmp        qword [rbp], 0x0
00000000000124b9         jle        loc_124d7

00000000000124bb         xor        ebx, ebx
00000000000124bd         nop        dword [rax]

                     loc_124c0:
00000000000124c0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+261
00000000000124c4         mov        rdi, qword [rax+rbx*8]
00000000000124c8         add        rbx, 0x1
00000000000124cc         call       free_state                                  ; free_state
00000000000124d1         cmp        qword [rbp], rbx
00000000000124d5         jg         loc_124c0

                     loc_124d7:
00000000000124d7         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+233
00000000000124db         add        r13, 0x1
00000000000124df         add        r14, 0x18
00000000000124e3         call       sub_2a10                                    ; sub_2a10
00000000000124e8         cmp        qword [r12+0x88], r13
00000000000124f0         mov        rdi, qword [r12+0x40]
00000000000124f5         jae        loc_124b0

                     loc_124f7:
00000000000124f7         call       sub_2a10                                    ; sub_2a10, CODE XREF=free_dfa_content+210
00000000000124fc         mov        rdi, qword [r12+0x78]
0000000000012501         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
0000000000012508         cmp        rdi, rax
000000000001250b         je         loc_12512

000000000001250d         call       sub_2a10                                    ; sub_2a10

                     loc_12512:
0000000000012512         mov        rdi, qword [r12+0xe0]                       ; CODE XREF=free_dfa_content+315
000000000001251a         call       sub_2a10                                    ; sub_2a10
000000000001251f         pop        rbx
0000000000012520         mov        rdi, r12
0000000000012523         pop        rbp
0000000000012524         pop        r12
0000000000012526         pop        r13
0000000000012528         pop        r14
000000000001252a         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
000000000001252f         align      16                                          ; End of unwind block (FDE at 0x25f18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     match_ctx_clean:
0000000000012530         push       r14                                         ; Begin of unwind block (FDE at 0x25f54), CODE XREF=re_search_internal+3892, re_search_internal+5268
0000000000012532         push       r13
0000000000012534         mov        r14, rdi
0000000000012537         push       r12
0000000000012539         push       rbp
000000000001253a         push       rbx
000000000001253b         cmp        qword [rdi+0xe8], 0x0
0000000000012543         jle        loc_125c9

0000000000012549         xor        r13d, r13d
000000000001254c         nop        dword [rax]

                     loc_12550:
0000000000012550         mov        rax, qword [r14+0xf8]                       ; CODE XREF=match_ctx_clean+151
0000000000012557         mov        r12, qword [rax+r13*8]
000000000001255b         cmp        qword [r12+0x20], 0x0
0000000000012561         jle        loc_1258d

0000000000012563         xor        ebx, ebx
0000000000012565         nop        dword [rax]

                     loc_12568:
0000000000012568         mov        rax, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+91
000000000001256d         mov        rbp, qword [rax+rbx*8]
0000000000012571         add        rbx, 0x1
0000000000012575         mov        rdi, qword [rbp+0x20]
0000000000012579         call       sub_2a10                                    ; sub_2a10
000000000001257e         mov        rdi, rbp
0000000000012581         call       sub_2a10                                    ; sub_2a10
0000000000012586         cmp        qword [r12+0x20], rbx
000000000001258b         jg         loc_12568

                     loc_1258d:
000000000001258d         mov        rdi, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+49
0000000000012592         call       sub_2a10                                    ; sub_2a10
0000000000012597         mov        rax, qword [r12+0x10]
000000000001259c         test       rax, rax
000000000001259f         je         loc_125b4

00000000000125a1         mov        rdi, qword [rax+0x10]
00000000000125a5         call       sub_2a10                                    ; sub_2a10
00000000000125aa         mov        rdi, qword [r12+0x10]
00000000000125af         call       sub_2a10                                    ; sub_2a10

                     loc_125b4:
00000000000125b4         mov        rdi, r12                                    ; CODE XREF=match_ctx_clean+111
00000000000125b7         add        r13, 0x1
00000000000125bb         call       sub_2a10                                    ; sub_2a10
00000000000125c0         cmp        qword [r14+0xe8], r13
00000000000125c7         jg         loc_12550

                     loc_125c9:
00000000000125c9         pop        rbx                                         ; CODE XREF=match_ctx_clean+19
00000000000125ca         mov        qword [r14+0xe8], 0x0
00000000000125d5         mov        qword [r14+0xc8], 0x0
00000000000125e0         pop        rbp
00000000000125e1         pop        r12
00000000000125e3         pop        r13
00000000000125e5         pop        r14
00000000000125e7         ret
                        ; endp
00000000000125e8         align      16                                          ; End of unwind block (FDE at 0x25f54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_char_size_at.part.0:
00000000000125f0         mov        rcx, qword [rdi+0x30]                       ; Begin of unwind block (FDE at 0x25f90), CODE XREF=check_node_accept_bytes.isra.31+58, parse_bracket_element.constprop.37+59, parse_bracket_element.constprop.37+463
00000000000125f4         lea        rax, qword [rsi+1]
00000000000125f8         cmp        rax, rcx
00000000000125fb         jge        loc_12638

00000000000125fd         mov        rdx, qword [rdi+0x10]
0000000000012601         lea        rdi, qword [rax*4]
0000000000012609         cmp        dword [rdx+rax*4], 0xffffffff
000000000001260d         jne        loc_12638

000000000001260f         sub        rcx, rsi
0000000000012612         lea        rsi, qword [rdx+rdi-4]
0000000000012617         mov        edx, 0x2
000000000001261c         jmp        loc_1262b
000000000001261e         align      32

                     loc_12620:
0000000000012620         add        rdx, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+64
0000000000012624         cmp        dword [rsi+rdx*4-4], 0xffffffff
0000000000012629         jne        loc_1263d

                     loc_1262b:
000000000001262b         cmp        rdx, rcx                                    ; CODE XREF=re_string_char_size_at.part.0+44
000000000001262e         mov        eax, edx
0000000000012630         jne        loc_12620

0000000000012632         ret
                        ; endp
0000000000012634         align      8

                     loc_12638:
0000000000012638         mov        eax, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+11, re_string_char_size_at.part.0+29

                     loc_1263d:
000000000001263d         ret                                                    ; CODE XREF=re_string_char_size_at.part.0+57
                        ; endp
000000000001263f         align      64                                          ; End of unwind block (FDE at 0x25f90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_compare.part.2:
0000000000012640         mov        rdx, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x25fa4), CODE XREF=re_acquire_state_context+163, re_acquire_state+128
0000000000012644         xor        eax, eax
0000000000012646         cmp        rdx, qword [rsi+8]
000000000001264a         je         loc_12650

000000000001264c         ret
                        ; endp
000000000001264e         align      16

                     loc_12650:
0000000000012650         lea        rax, qword [rdx-1]                          ; CODE XREF=re_node_set_compare.part.2+10
0000000000012654         lea        rdx, qword [rax*8]
000000000001265c         jmp        loc_1267d
000000000001265e         align      32

                     loc_12660:
0000000000012660         mov        rcx, qword [rdi+0x10]                       ; CODE XREF=re_node_set_compare.part.2+64
0000000000012664         mov        r8, qword [rcx+rdx]
0000000000012668         mov        rcx, qword [rsi+0x10]
000000000001266c         mov        rcx, qword [rcx+rdx]
0000000000012670         sub        rdx, 0x8
0000000000012674         cmp        r8, rcx
0000000000012677         jne        loc_12690

0000000000012679         sub        rax, 0x1

                     loc_1267d:
000000000001267d         test       rax, rax                                    ; CODE XREF=re_node_set_compare.part.2+28
0000000000012680         jns        loc_12660

0000000000012682         mov        eax, 0x1
0000000000012687         ret
                        ; endp
0000000000012688         align      16

                     loc_12690:
0000000000012690         xor        eax, eax                                    ; CODE XREF=re_node_set_compare.part.2+55
0000000000012692         ret
                        ; endp
0000000000012693         align      32                                          ; End of unwind block (FDE at 0x25fa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_contains.isra.3:
00000000000126a0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x25fb8), CODE XREF=check_arrival_expand_ecl_sub+43, expand_bkref_cache+371, expand_bkref_cache+537, expand_bkref_cache+599, sub_epsilon_src_nodes+124, sub_epsilon_src_nodes+264, sub_epsilon_src_nodes+305, sub_epsilon_src_nodes+350, sub_epsilon_src_nodes+372, sub_epsilon_src_nodes+435, sub_epsilon_src_nodes+456
00000000000126a2         test       rdi, rdi
00000000000126a5         jle        loc_126e5

00000000000126a7         mov        r8, qword [rsi]
00000000000126aa         sub        rdi, 0x1
00000000000126ae         xor        esi, esi

                     loc_126b0:
00000000000126b0         cmp        rsi, rdi                                    ; CODE XREF=re_node_set_contains.isra.3+103
00000000000126b3         jae        loc_126dd

00000000000126b5         lea        rcx, qword [rsi+rdi]
00000000000126b9         shr        rcx, 0x1
00000000000126bc         cmp        rdx, qword [r8+rcx*8]
00000000000126c0         jle        loc_126d8

00000000000126c2         jmp        loc_126f0
00000000000126c4         align      8

                     loc_126c8:
00000000000126c8         lea        rax, qword [rsi+rcx]                        ; CODE XREF=re_node_set_contains.isra.3+59
00000000000126cc         shr        rax, 0x1
00000000000126cf         cmp        qword [r8+rax*8], rdx
00000000000126d3         jl         loc_12700

00000000000126d5         mov        rcx, rax

                     loc_126d8:
00000000000126d8         cmp        rsi, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+32
00000000000126db         jb         loc_126c8

                     loc_126dd:
00000000000126dd         xor        eax, eax                                    ; CODE XREF=re_node_set_contains.isra.3+19
00000000000126df         cmp        rdx, qword [r8+rsi*8]
00000000000126e3         je         loc_12710

                     loc_126e5:
00000000000126e5         ret                                                    ; CODE XREF=re_node_set_contains.isra.3+5
                        ; endp
00000000000126e7         align      16

                     loc_126f0:
00000000000126f0         mov        rax, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+34
00000000000126f3         mov        rcx, rdi
00000000000126f6         nop        word [cs:rax+rax]

                     loc_12700:
0000000000012700         lea        rsi, qword [rax+1]                          ; CODE XREF=re_node_set_contains.isra.3+51
0000000000012704         mov        rdi, rcx
0000000000012707         jmp        loc_126b0
0000000000012709         align      16

                     loc_12710:
0000000000012710         lea        rax, qword [rsi+1]                          ; CODE XREF=re_node_set_contains.isra.3+67
0000000000012714         ret
                        ; endp
0000000000012715         align      32                                          ; End of unwind block (FDE at 0x25fb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_arrival_expand_ecl_sub:
0000000000012720         push       r15                                         ; Begin of unwind block (FDE at 0x25fcc), CODE XREF=check_arrival_expand_ecl_sub+224, check_arrival_expand_ecl+216
0000000000012722         push       r14
0000000000012724         lea        r14, qword [rsi+0x10]
0000000000012728         push       r13
000000000001272a         push       r12
000000000001272c         mov        r15, rcx
000000000001272f         push       rbp
0000000000012730         push       rbx
0000000000012731         mov        r12, rdi
0000000000012734         mov        rbp, rsi
0000000000012737         mov        rbx, rdx
000000000001273a         mov        r13d, r8d
000000000001273d         sub        rsp, 0x8

                     loc_12741:
0000000000012741         mov        rdi, qword [rbp+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+131
0000000000012745         mov        rdx, rbx
0000000000012748         mov        rsi, r14
000000000001274b         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000012750         test       rax, rax
0000000000012753         jne        loc_127c0

0000000000012755         mov        rax, rbx
0000000000012758         shl        rax, 0x4
000000000001275c         add        rax, qword [r12]
0000000000012760         movzx      edx, byte [rax+8]
0000000000012764         cmp        edx, r13d
0000000000012767         jne        loc_1276e

0000000000012769         cmp        qword [rax], r15
000000000001276c         je         loc_127a8

                     loc_1276e:
000000000001276e         mov        rsi, rbx                                    ; CODE XREF=check_arrival_expand_ecl_sub+71
0000000000012771         mov        rdi, rbp
0000000000012774         call       re_node_set_insert                          ; re_node_set_insert
0000000000012779         test       al, al
000000000001277b         je         loc_127d8

000000000001277d         lea        rbx, qword [rbx+rbx*2]
0000000000012781         mov        rdx, qword [r12+0x28]
0000000000012786         shl        rbx, 0x3
000000000001278a         add        rdx, rbx
000000000001278d         mov        rax, qword [rdx+8]
0000000000012791         test       rax, rax
0000000000012794         je         loc_127c0

0000000000012796         cmp        rax, 0x2
000000000001279a         mov        rdx, qword [rdx+0x10]
000000000001279e         je         loc_127f0

                     loc_127a0:
00000000000127a0         mov        rbx, qword [rdx]                            ; CODE XREF=check_arrival_expand_ecl_sub+243
00000000000127a3         jmp        loc_12741
00000000000127a5         align      8

                     loc_127a8:
00000000000127a8         cmp        r13d, 0x9                                   ; CODE XREF=check_arrival_expand_ecl_sub+76
00000000000127ac         jne        loc_127c0

00000000000127ae         mov        rsi, rbx
00000000000127b1         mov        rdi, rbp
00000000000127b4         call       re_node_set_insert                          ; re_node_set_insert
00000000000127b9         test       al, al
00000000000127bb         je         loc_127d8

00000000000127bd         nop        dword [rax]

                     loc_127c0:
00000000000127c0         xor        eax, eax                                    ; CODE XREF=check_arrival_expand_ecl_sub+51, check_arrival_expand_ecl_sub+116, check_arrival_expand_ecl_sub+140

                     loc_127c2:
00000000000127c2         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+231
00000000000127c6         pop        rbx
00000000000127c7         pop        rbp
00000000000127c8         pop        r12
00000000000127ca         pop        r13
00000000000127cc         pop        r14
00000000000127ce         pop        r15
00000000000127d0         ret
                        ; endp
00000000000127d1         align      8

                     loc_127d8:
00000000000127d8         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+91, check_arrival_expand_ecl_sub+155
00000000000127dc         mov        eax, 0xc
00000000000127e1         pop        rbx
00000000000127e2         pop        rbp
00000000000127e3         pop        r12
00000000000127e5         pop        r13
00000000000127e7         pop        r14
00000000000127e9         pop        r15
00000000000127eb         ret
                        ; endp
00000000000127ec         align      16

                     loc_127f0:
00000000000127f0         mov        rdx, qword [rdx+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+126
00000000000127f4         mov        r8d, r13d
00000000000127f7         mov        rcx, r15
00000000000127fa         mov        rsi, rbp
00000000000127fd         mov        rdi, r12
0000000000012800         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
0000000000012805         test       eax, eax
0000000000012807         jne        loc_127c2

0000000000012809         mov        rax, qword [r12+0x28]
000000000001280e         mov        rdx, qword [rax+rbx+0x10]
0000000000012813         jmp        loc_127a0
0000000000012815         align      32                                          ; End of unwind block (FDE at 0x25fcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_remove_at.isra.4.part.5:
0000000000012820         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x26030), CODE XREF=re_acquire_state_context+473, sub_epsilon_src_nodes+477, update_cur_sifted_state+1890
0000000000012823         cmp        rax, rdx
0000000000012826         jle        loc_12852

0000000000012828         sub        rax, 0x1
000000000001282c         cmp        rdx, rax
000000000001282f         mov        qword [rdi], rax
0000000000012832         jge        loc_12852

0000000000012834         mov        rax, qword [rsi]
0000000000012837         nop        word [rax+rax]

                     loc_12840:
0000000000012840         mov        rcx, qword [rax+rdx*8+8]                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+48
0000000000012845         mov        qword [rax+rdx*8], rcx
0000000000012849         add        rdx, 0x1
000000000001284d         cmp        rdx, qword [rdi]
0000000000012850         jl         loc_12840

                     loc_12852:
0000000000012852         ret                                                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+6, re_node_set_remove_at.isra.4.part.5+18
                        ; endp
0000000000012854         align      32                                          ; End of unwind block (FDE at 0x26030)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     optimize_subexps:
0000000000012860         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x26044), DATA XREF=re_compile_internal+1553
0000000000012864         cmp        al, 0x4
0000000000012866         je         loc_128c0

0000000000012868         cmp        al, 0x11
000000000001286a         je         loc_12870

                     loc_1286c:
000000000001286c         xor        eax, eax                                    ; CODE XREF=optimize_subexps+23, optimize_subexps+29, optimize_subexps+74, optimize_subexps+93, optimize_subexps+106
000000000001286e         ret
                        ; endp
000000000001286f         align      16

                     loc_12870:
0000000000012870         mov        rax, qword [rsi+8]                          ; CODE XREF=optimize_subexps+10
0000000000012874         test       rax, rax
0000000000012877         je         loc_1286c

0000000000012879         cmp        byte [rax+0x30], 0x11
000000000001287d         jne        loc_1286c

000000000001287f         mov        rcx, qword [rax+0x28]
0000000000012883         mov        rax, qword [rax+8]
0000000000012887         test       rax, rax
000000000001288a         mov        qword [rsi+8], rax
000000000001288e         je         loc_12893

0000000000012890         mov        qword [rax], rsi

                     loc_12893:
0000000000012893         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+46
000000000001289a         mov        rdx, qword [rsi+0x28]
000000000001289e         cmp        rcx, 0x3f
00000000000128a2         mov        rdx, qword [rax+rdx*8]
00000000000128a6         mov        qword [rax+rcx*8], rdx
00000000000128aa         jg         loc_1286c

00000000000128ac         mov        rax, 0xfffffffffffffffe
00000000000128b3         rol        rax, cl
00000000000128b6         and        qword [rdi+0xa0], rax
00000000000128bd         jmp        loc_1286c
00000000000128bf         align      64

                     loc_128c0:
00000000000128c0         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+6
00000000000128c7         test       rax, rax
00000000000128ca         je         loc_1286c

00000000000128cc         movsxd     rdx, dword [rsi+0x28]
00000000000128d0         mov        rcx, qword [rax+rdx*8]
00000000000128d4         mov        eax, 0x1
00000000000128d9         shl        eax, cl
00000000000128db         mov        qword [rsi+0x28], rcx
00000000000128df         cdqe
00000000000128e1         or         qword [rdi+0xa0], rax
00000000000128e8         xor        eax, eax
00000000000128ea         ret
                        ; endp
00000000000128eb         align      16                                          ; End of unwind block (FDE at 0x26044)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_next:
00000000000128f0         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x26058), DATA XREF=re_compile_internal+1689
00000000000128f4         mov        rdx, qword [rsi+8]
00000000000128f8         cmp        al, 0xb
00000000000128fa         je         loc_12940

00000000000128fc         cmp        al, 0x10
00000000000128fe         je         loc_12928

0000000000012900         test       rdx, rdx
0000000000012903         je         loc_1290d

0000000000012905         mov        rax, qword [rsi+0x20]
0000000000012909         mov        qword [rdx+0x20], rax

                     loc_1290d:
000000000001290d         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+19
0000000000012911         test       rax, rax
0000000000012914         je         loc_1291e

0000000000012916         mov        rdx, qword [rsi+0x20]
000000000001291a         mov        qword [rax+0x20], rdx

                     loc_1291e:
000000000001291e         xor        eax, eax                                    ; CODE XREF=calc_next+36
0000000000012920         ret
                        ; endp
0000000000012921         align      8

                     loc_12928:
0000000000012928         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+14
000000000001292c         mov        rcx, qword [rax+0x18]
0000000000012930         mov        qword [rdx+0x20], rcx
0000000000012934         mov        rdx, qword [rsi+0x20]
0000000000012938         mov        qword [rax+0x20], rdx
000000000001293c         xor        eax, eax
000000000001293e         ret
                        ; endp
000000000001293f         align      64

                     loc_12940:
0000000000012940         mov        qword [rdx+0x20], rsi                       ; CODE XREF=calc_next+10
0000000000012944         xor        eax, eax
0000000000012946         ret
                        ; endp
0000000000012947         align      16                                          ; End of unwind block (FDE at 0x26058)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     check_dst_limits.isra.13:
0000000000012950         push       r15                                         ; Begin of unwind block (FDE at 0x2606c), CODE XREF=sift_states_backward+396, update_cur_sifted_state+1699
0000000000012952         push       r14
0000000000012954         push       r13
0000000000012956         push       r12
0000000000012958         push       rbp
0000000000012959         push       rbx
000000000001295a         xor        ebx, ebx
000000000001295c         sub        rsp, 0x48
0000000000012960         mov        rax, qword [rdi+0x98]
0000000000012967         mov        r15, qword [rdi+0xc8]
000000000001296e         mov        r12, qword [rsp+0x78+arg_0]
0000000000012976         mov        qword [rsp+0x78+var_70], rax
000000000001297b         mov        rbp, r15

                     loc_1297e:
000000000001297e         cmp        rbx, rbp                                    ; CODE XREF=check_dst_limits.isra.13+519
0000000000012981         jge        loc_129db

0000000000012983         lea        rax, qword [rbx+rbp]
0000000000012987         mov        r13, qword [rdi+0xd8]
000000000001298e         mov        r10, rax
0000000000012991         shr        r10, 0x3f
0000000000012995         add        r10, rax
0000000000012998         sar        r10, 0x1
000000000001299b         lea        rax, qword [r10+r10*4]
000000000001299f         cmp        r8, qword [r13+rax*8+8]
00000000000129a4         jle        loc_129d6

00000000000129a6         jmp        loc_12b40
00000000000129ab         align      16

                     loc_129b0:
00000000000129b0         lea        r11, qword [rbx+r10]                        ; CODE XREF=check_dst_limits.isra.13+137
00000000000129b4         mov        rax, r11
00000000000129b7         shr        rax, 0x3f
00000000000129bb         add        rax, r11
00000000000129be         sar        rax, 0x1
00000000000129c1         lea        r11, qword [rax+rax*4]
00000000000129c5         mov        r14, rax
00000000000129c8         cmp        qword [r13+r11*8+8], r8
00000000000129cd         jl         loc_12b50

00000000000129d3         mov        r10, rax

                     loc_129d6:
00000000000129d6         cmp        rbx, r10                                    ; CODE XREF=check_dst_limits.isra.13+84
00000000000129d9         jl         loc_129b0

                     loc_129db:
00000000000129db         cmp        r15, rbx                                    ; CODE XREF=check_dst_limits.isra.13+49
00000000000129de         jle        loc_12b80

00000000000129e4         mov        r11, qword [rdi+0xd8]
00000000000129eb         lea        rax, qword [rbx+rbx*4]
00000000000129ef         lea        rax, qword [r11+rax*8]
00000000000129f3         cmp        r8, qword [rax+8]
00000000000129f7         mov        rax, 0xffffffffffffffff
00000000000129fe         cmovne     rbx, rax

                     loc_12a02:
0000000000012a02         mov        rax, r15                                    ; CODE XREF=sub_12b60+39
0000000000012a05         xor        ebp, ebp

                     loc_12a07:
0000000000012a07         cmp        rbp, rax                                    ; CODE XREF=sub_12b60+23
0000000000012a0a         jge        loc_12a64

0000000000012a0c         lea        r11, qword [rbp+rax]
0000000000012a11         mov        r10, r11
0000000000012a14         shr        r10, 0x3f
0000000000012a18         add        r10, r11
0000000000012a1b         mov        r11, qword [rdi+0xd8]
0000000000012a22         sar        r10, 0x1
0000000000012a25         lea        r13, qword [r10+r10*4]
0000000000012a29         cmp        r12, qword [r11+r13*8+8]
0000000000012a2e         jle        loc_12a5f

0000000000012a30         jmp        sub_12b60                                   ; sub_12b60
                        ; endp
0000000000012a35         align      8

                     loc_12a38:
0000000000012a38         lea        r13, qword [rbp+r10]                        ; CODE XREF=check_dst_limits.isra.13+274
0000000000012a3d         mov        rax, r13
0000000000012a40         shr        rax, 0x3f
0000000000012a44         add        rax, r13
0000000000012a47         sar        rax, 0x1
0000000000012a4a         lea        r13, qword [rax+rax*4]
0000000000012a4e         mov        r14, rax
0000000000012a51         cmp        qword [r11+r13*8+8], r12
0000000000012a56         jl         loc_12b70

0000000000012a5c         mov        r10, rax

                     loc_12a5f:
0000000000012a5f         cmp        rbp, r10                                    ; CODE XREF=check_dst_limits.isra.13+222
0000000000012a62         jl         loc_12a38

                     loc_12a64:
0000000000012a64         cmp        r15, rbp                                    ; CODE XREF=check_dst_limits.isra.13+186
0000000000012a67         jle        loc_12b90

0000000000012a6d         mov        r10, qword [rdi+0xd8]
0000000000012a74         lea        rax, qword [rbp+rbp*4]
0000000000012a79         lea        rax, qword [r10+rax*8]
0000000000012a7d         cmp        r12, qword [rax+8]
0000000000012a81         mov        rax, 0xffffffffffffffff
0000000000012a88         cmovne     rbp, rax

                     loc_12a8c:
0000000000012a8c         cmp        qword [rsi], 0x0                            ; CODE XREF=sub_12b60+55
0000000000012a90         jle        loc_12bb2

0000000000012a96         mov        qword [rsp+0x78+var_48], rbp
0000000000012a9b         mov        qword [rsp+0x78+var_58], r9
0000000000012aa0         mov        r13, rdi
0000000000012aa3         mov        qword [rsp+0x78+var_60], r8
0000000000012aa8         mov        qword [rsp+0x78+var_68], rcx
0000000000012aad         xor        r14d, r14d
0000000000012ab0         mov        qword [rsp+0x78+var_40], rsi
0000000000012ab5         mov        qword [rsp+0x78+var_50], rbx
0000000000012aba         mov        rbp, rdx
0000000000012abd         mov        r15, r12

                     loc_12ac0:
0000000000012ac0         mov        rax, qword [rbp]                            ; CODE XREF=sub_12b60+76
0000000000012ac4         mov        rdx, qword [r13+0xd8]
0000000000012acb         mov        rdi, r13
0000000000012ace         mov        r9, qword [rsp+0x78+var_50]
0000000000012ad3         mov        r8, qword [rsp+0x78+var_60]
0000000000012ad8         mov        rcx, qword [rsp+0x78+var_68]
0000000000012add         mov        rsi, qword [rax+r14*8]
0000000000012ae1         lea        rax, qword [rsi+rsi*4]
0000000000012ae5         lea        rax, qword [rdx+rax*8]
0000000000012ae9         mov        rdx, qword [rsp+0x78+var_70]
0000000000012aee         mov        rax, qword [rax]
0000000000012af1         shl        rax, 0x4
0000000000012af5         add        rax, qword [rdx]
0000000000012af8         mov        r12, qword [rax]
0000000000012afb         mov        rdx, r12
0000000000012afe         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000012b03         mov        ebx, eax
0000000000012b05         mov        rax, qword [rbp]
0000000000012b09         mov        r9, qword [rsp+0x78+var_48]
0000000000012b0e         mov        rcx, qword [rsp+0x78+var_58]
0000000000012b13         mov        r8, r15
0000000000012b16         mov        rdx, r12
0000000000012b19         mov        rdi, r13
0000000000012b1c         mov        rsi, qword [rax+r14*8]
0000000000012b20         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000012b25         cmp        ebx, eax
0000000000012b27         je         loc_12ba0

0000000000012b29         mov        eax, 0x1

                     loc_12b2e:
0000000000012b2e         add        rsp, 0x48                                   ; CODE XREF=sub_12b60+84
0000000000012b32         pop        rbx
0000000000012b33         pop        rbp
0000000000012b34         pop        r12
0000000000012b36         pop        r13
0000000000012b38         pop        r14
0000000000012b3a         pop        r15
0000000000012b3c         ret
                        ; endp
0000000000012b3d         align      64

                     loc_12b40:
0000000000012b40         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+86
0000000000012b43         mov        r10, rbp
0000000000012b46         nop        word [cs:rax+rax]

                     loc_12b50:
0000000000012b50         lea        rbx, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+125
0000000000012b54         mov        rbp, r10
0000000000012b57         jmp        loc_1297e
0000000000012b5c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12b60:
0000000000012b60         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+224
0000000000012b63         mov        r10, rax
0000000000012b66         nop        word [cs:rax+rax]
                        ; endp

                     loc_12b70:
0000000000012b70         lea        rbp, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+262
0000000000012b74         mov        rax, r10
0000000000012b77         jmp        loc_12a07
0000000000012b7c         align      128

                     loc_12b80:
0000000000012b80         mov        rbx, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+142
0000000000012b87         jmp        loc_12a02
0000000000012b8c         align      16

                     loc_12b90:
0000000000012b90         mov        rbp, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+279
0000000000012b97         jmp        loc_12a8c
0000000000012b9c         align      32

                     loc_12ba0:
0000000000012ba0         mov        rax, qword [rsp+0x78+var_40]                ; CODE XREF=check_dst_limits.isra.13+471
0000000000012ba5         add        r14, 0x1
0000000000012ba9         cmp        r14, qword [rax]
0000000000012bac         jl         loc_12ac0

                     loc_12bb2:
0000000000012bb2         xor        eax, eax                                    ; CODE XREF=check_dst_limits.isra.13+320
0000000000012bb4         jmp        loc_12b2e
0000000000012bb9         align      64                                          ; End of unwind block (FDE at 0x2606c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_merge:
0000000000012bc0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x260bc), CODE XREF=calc_eclosure_iter+306, check_arrival_expand_ecl+275, expand_bkref_cache+694, build_trtable+557, check_arrival+389, check_arrival+692, update_cur_sifted_state+870, sub_1dbd0+791
0000000000012bc3         je         loc_12cb8

0000000000012bc9         mov        rdx, qword [rsi+8]
0000000000012bcd         test       rdx, rdx
0000000000012bd0         je         loc_12cb8

0000000000012bd6         push       r12
0000000000012bd8         push       rbp
0000000000012bd9         mov        r12, rsi
0000000000012bdc         push       rbx
0000000000012bdd         mov        rax, qword [rdi+8]
0000000000012be1         mov        rbx, rdi
0000000000012be4         mov        rsi, qword [rdi]
0000000000012be7         lea        rcx, qword [rax+rdx*2]
0000000000012beb         cmp        rsi, rcx
0000000000012bee         jl         loc_12d38

                     loc_12bf4:
0000000000012bf4         test       rax, rax                                    ; CODE XREF=re_node_set_merge+420
0000000000012bf7         je         loc_12d70

0000000000012bfd         lea        rbp, qword [rax+rdx*2]
0000000000012c01         sub        rdx, 0x1
0000000000012c05         sub        rax, 0x1
0000000000012c09         mov        rdi, rdx
0000000000012c0c         not        rdi

                     loc_12c0f:
0000000000012c0f         test       rdi, rdi                                    ; CODE XREF=re_node_set_merge+270, re_node_set_merge+284
0000000000012c12         jns        loc_12c50

                     loc_12c14:
0000000000012c14         test       rax, rax                                    ; CODE XREF=re_node_set_merge+139
0000000000012c17         js         loc_12c50

0000000000012c19         mov        rcx, qword [rbx+0x10]
0000000000012c1d         mov        rsi, qword [r12+0x10]
0000000000012c22         mov        rsi, qword [rsi+rdx*8]
0000000000012c26         cmp        qword [rcx+rax*8], rsi
0000000000012c2a         je         loc_12cc0

0000000000012c30         jge        loc_12cd8

0000000000012c36         sub        rdx, 0x1
0000000000012c3a         sub        rbp, 0x1
0000000000012c3e         mov        rdi, rdx
0000000000012c41         mov        qword [rcx+rbp*8], rsi
0000000000012c45         not        rdi
0000000000012c48         test       rdi, rdi
0000000000012c4b         js         loc_12c14

0000000000012c4d         nop        dword [rax]

                     loc_12c50:
0000000000012c50         test       rdx, rdx                                    ; CODE XREF=re_node_set_merge+82, re_node_set_merge+87
0000000000012c53         jns        loc_12ce8

                     loc_12c59:
0000000000012c59         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_merge+325
0000000000012c5d         mov        rax, qword [r12+8]
0000000000012c62         lea        r8, qword [rcx+rax*2-1]
0000000000012c67         mov        rdx, r8
0000000000012c6a         sub        rdx, rbp
0000000000012c6d         add        rdx, 0x1
0000000000012c71         je         loc_12caa

0000000000012c73         mov        rdi, qword [rbx+0x10]
0000000000012c77         lea        rax, qword [rcx-1]
0000000000012c7b         add        rcx, rdx
0000000000012c7e         mov        qword [rbx+8], rcx
0000000000012c82         nop        word [rax+rax]

                     loc_12c88:
0000000000012c88         mov        rsi, qword [rdi+r8*8]                       ; CODE XREF=re_node_set_merge+232, re_node_set_merge+343
0000000000012c8c         mov        rcx, qword [rdi+rax*8]
0000000000012c90         lea        r9, qword [rax+rdx]
0000000000012c94         lea        r9, qword [rdi+r9*8]
0000000000012c98         cmp        rsi, rcx
0000000000012c9b         jle        loc_12d10

0000000000012c9d         sub        r8, 0x1
0000000000012ca1         sub        rdx, 0x1
0000000000012ca5         mov        qword [r9], rsi
0000000000012ca8         jne        loc_12c88

                     loc_12caa:
0000000000012caa         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+177, re_node_set_merge+463

                     loc_12cac:
0000000000012cac         pop        rbx                                         ; CODE XREF=re_node_set_merge+364, re_node_set_merge+473
0000000000012cad         pop        rbp
0000000000012cae         pop        r12
0000000000012cb0         ret
                        ; endp
0000000000012cb1         align      8

                     loc_12cb8:
0000000000012cb8         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+3, re_node_set_merge+16
0000000000012cba         ret
                        ; endp
0000000000012cbb         align      64

                     loc_12cc0:
0000000000012cc0         sub        rdx, 0x1                                    ; CODE XREF=re_node_set_merge+106
0000000000012cc4         sub        rax, 0x1
0000000000012cc8         mov        rdi, rdx
0000000000012ccb         not        rdi
0000000000012cce         jmp        loc_12c0f
0000000000012cd3         align      8

                     loc_12cd8:
0000000000012cd8         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+112
0000000000012cdc         jmp        loc_12c0f
0000000000012ce1         align      8

                     loc_12ce8:
0000000000012ce8         mov        rax, qword [rbx+0x10]                       ; CODE XREF=re_node_set_merge+147
0000000000012cec         add        rdx, 0x1
0000000000012cf0         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000012cf5         sub        rbp, rdx
0000000000012cf8         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000012cfc         lea        rdi, qword [rax+rbp*8]                      ; argument "__dest" for method j_memcpy
0000000000012d00         call       j_memcpy                                    ; memcpy
0000000000012d05         jmp        loc_12c59
0000000000012d0a         align      16

                     loc_12d10:
0000000000012d10         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+219
0000000000012d14         mov        qword [r9], rcx
0000000000012d17         jns        loc_12c88

0000000000012d1d         lea        rsi, qword [rdi+rbp*8]                      ; argument "__src" for method j_memcpy
0000000000012d21         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000012d25         call       j_memcpy                                    ; memcpy
0000000000012d2a         xor        eax, eax
0000000000012d2c         jmp        loc_12cac
0000000000012d31         align      8

                     loc_12d38:
0000000000012d38         add        rdx, rsi                                    ; CODE XREF=re_node_set_merge+46
0000000000012d3b         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
0000000000012d3f         lea        rbp, qword [rdx+rdx]
0000000000012d43         shl        rdx, 0x4
0000000000012d47         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
0000000000012d4a         call       j_realloc                                   ; realloc
0000000000012d4f         test       rax, rax
0000000000012d52         je         loc_12d94

0000000000012d54         mov        qword [rbx+0x10], rax
0000000000012d58         mov        qword [rbx], rbp
0000000000012d5b         mov        rax, qword [rbx+8]
0000000000012d5f         mov        rdx, qword [r12+8]
0000000000012d64         jmp        loc_12bf4
0000000000012d69         align      16

                     loc_12d70:
0000000000012d70         mov        qword [rbx+8], rdx                          ; CODE XREF=re_node_set_merge+55
0000000000012d74         mov        rax, qword [r12+8]
0000000000012d79         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memcpy
0000000000012d7d         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000012d82         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memcpy
0000000000012d8a         call       j_memcpy                                    ; memcpy
0000000000012d8f         jmp        loc_12caa

                     loc_12d94:
0000000000012d94         mov        eax, 0xc                                    ; CODE XREF=re_node_set_merge+402
0000000000012d99         jmp        loc_12cac
0000000000012d9e         align      32                                          ; End of unwind block (FDE at 0x260bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_7D: int8_t, -125
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     calc_eclosure_iter:
0000000000012da0         push       r15                                         ; Begin of unwind block (FDE at 0x260f4), CODE XREF=calc_eclosure_iter+654, sub_1dbd0+170
0000000000012da2         push       r14
0000000000012da4         mov        r15, rsi
0000000000012da7         push       r13
0000000000012da9         push       r12
0000000000012dab         push       rbp
0000000000012dac         push       rbx
0000000000012dad         lea        rbx, qword [rdx+rdx*2]
0000000000012db1         mov        rbp, rdx
0000000000012db4         sub        rsp, 0x68
0000000000012db8         mov        r12, qword [rsi+0x28]
0000000000012dbc         shl        rbx, 0x3
0000000000012dc0         mov        rax, qword [fs:0x28]
0000000000012dc9         mov        qword [rsp+0x98+var_40], rax
0000000000012dce         xor        eax, eax
0000000000012dd0         mov        qword [rsp+0x98+var_88], rdi
0000000000012dd5         mov        dword [rsp+0x98+var_7C], ecx
0000000000012dd9         add        r12, rbx
0000000000012ddc         mov        rax, qword [r12+8]
0000000000012de1         mov        qword [rsp+0x98+var_70], 0x0
0000000000012dea         lea        rdi, qword [rax+1]
0000000000012dee         mov        qword [rsp+0x98+var_78], rdi
0000000000012df3         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000012df7         call       j_malloc                                    ; malloc
0000000000012dfc         test       rax, rax
0000000000012dff         mov        qword [rsp+0x98+var_68], rax
0000000000012e04         je         loc_13040

0000000000012e0a         mov        rax, qword [r15+0x30]
0000000000012e0e         mov        rdx, qword [r15]
0000000000012e11         mov        r13, rbp
0000000000012e14         shl        r13, 0x4
0000000000012e18         mov        qword [rax+rbx+8], 0xffffffffffffffff
0000000000012e21         lea        rax, qword [rdx+r13]
0000000000012e25         mov        r8d, dword [rax+8]
0000000000012e29         test       r8d, 0x3ff00
0000000000012e30         jne        loc_12fd0

                     loc_12e36:
0000000000012e36         test       byte [rax+8], 0x8                           ; CODE XREF=calc_eclosure_iter+589, calc_eclosure_iter+637
0000000000012e3a         je         loc_12f00

0000000000012e40         mov        rsi, qword [r15+0x28]
0000000000012e44         lea        rax, qword [rsi+rbx]
0000000000012e48         cmp        qword [rax+8], 0x0
0000000000012e4d         jle        loc_12f00

0000000000012e53         lea        rdx, qword [rsp+0x98+var_78]
0000000000012e58         mov        byte [rsp+0x98+var_7D], 0x0
0000000000012e5d         xor        r14d, r14d
0000000000012e60         lea        r12, qword [rsp+0x98+var_58]
0000000000012e65         mov        qword [rsp+0x98+var_90], rdx
0000000000012e6a         jmp        loc_12e86
0000000000012e6c         align      16

                     loc_12e70:
0000000000012e70         mov        rsi, qword [r15+0x28]                       ; CODE XREF=calc_eclosure_iter+325, calc_eclosure_iter+342
0000000000012e74         add        r14, 0x1
0000000000012e78         lea        rax, qword [rsi+rbx]
0000000000012e7c         cmp        qword [rax+8], r14
0000000000012e80         jle        loc_12f87

                     loc_12e86:
0000000000012e86         mov        rax, qword [rax+0x10]                       ; CODE XREF=calc_eclosure_iter+202, calc_eclosure_iter+481
0000000000012e8a         mov        rdx, qword [rax+r14*8]
0000000000012e8e         mov        rax, qword [r15+0x30]
0000000000012e92         lea        r8, qword [rdx+rdx*2]
0000000000012e96         lea        r13, qword [r8*8]
0000000000012e9e         add        rax, r13
0000000000012ea1         mov        rcx, qword [rax+8]
0000000000012ea5         cmp        rcx, 0xffffffffffffffff
0000000000012ea9         je         loc_12f70

0000000000012eaf         test       rcx, rcx
0000000000012eb2         je         loc_13028

0000000000012eb8         movdqu     xmm0, xmmword [rax]
0000000000012ebc         movaps     xmmword [rsp+0x98+var_58], xmm0
0000000000012ec1         mov        rax, qword [rax+0x10]
0000000000012ec5         mov        qword [rsp+0x98+var_48], rax

                     loc_12eca:
0000000000012eca         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=calc_eclosure_iter+661
0000000000012ecf         mov        rsi, r12
0000000000012ed2         call       re_node_set_merge                           ; re_node_set_merge
0000000000012ed7         test       eax, eax
0000000000012ed9         jne        loc_12f46

0000000000012edb         mov        rax, qword [r15+0x30]
0000000000012edf         cmp        qword [rax+r13+8], 0x0
0000000000012ee5         jne        loc_12e70

0000000000012ee7         mov        rdi, qword [rsp+0x98+var_48]
0000000000012eec         call       sub_2a10                                    ; sub_2a10
0000000000012ef1         mov        byte [rsp+0x98+var_7D], 0x1
0000000000012ef6         jmp        loc_12e70
0000000000012efb         align      256

                     loc_12f00:
0000000000012f00         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+154, calc_eclosure_iter+173, calc_eclosure_iter+566
0000000000012f05         mov        rsi, rbp
0000000000012f08         call       re_node_set_insert                          ; re_node_set_insert
0000000000012f0d         test       al, al
0000000000012f0f         je         loc_13040

0000000000012f15         mov        rax, qword [r15+0x30]

                     loc_12f19:
0000000000012f19         movdqa     xmm0, xmmword [rsp+0x98+var_78]             ; CODE XREF=calc_eclosure_iter+521, calc_eclosure_iter+532
0000000000012f1f         movups     xmmword [rax+rbx], xmm0
0000000000012f23         mov        rdx, qword [rsp+0x98+var_68]
0000000000012f28         mov        qword [rax+rbx+0x10], rdx

                     loc_12f2d:
0000000000012f2d         mov        rbx, qword [rsp+0x98+var_88]                ; CODE XREF=calc_eclosure_iter+546
0000000000012f32         mov        rax, qword [rsp+0x98+var_68]
0000000000012f37         movdqa     xmm0, xmmword [rsp+0x98+var_78]
0000000000012f3d         movaps     xmmword [rbx], xmm0
0000000000012f40         mov        qword [rbx+0x10], rax
0000000000012f44         xor        eax, eax

                     loc_12f46:
0000000000012f46         mov        rsi, qword [rsp+0x98+var_40]                ; CODE XREF=calc_eclosure_iter+313, calc_eclosure_iter+625, calc_eclosure_iter+667, calc_eclosure_iter+677
0000000000012f4b         xor        rsi, qword [fs:0x28]
0000000000012f54         jne        loc_1304a

0000000000012f5a         add        rsp, 0x68
0000000000012f5e         pop        rbx
0000000000012f5f         pop        rbp
0000000000012f60         pop        r12
0000000000012f62         pop        r13
0000000000012f64         pop        r14
0000000000012f66         pop        r15
0000000000012f68         ret
                        ; endp
0000000000012f69         align      16

                     loc_12f70:
0000000000012f70         lea        rax, qword [rsi+rbx]                        ; CODE XREF=calc_eclosure_iter+265
0000000000012f74         add        r14, 0x1
0000000000012f78         mov        byte [rsp+0x98+var_7D], 0x1
0000000000012f7d         cmp        qword [rax+8], r14
0000000000012f81         jg         loc_12e86

                     loc_12f87:
0000000000012f87         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+224
0000000000012f8c         mov        rsi, rbp
0000000000012f8f         call       re_node_set_insert                          ; re_node_set_insert
0000000000012f94         test       al, al
0000000000012f96         je         loc_13040

0000000000012f9c         cmp        byte [rsp+0x98+var_7C], 0x1
0000000000012fa1         mov        rax, qword [r15+0x30]
0000000000012fa5         lea        rdx, qword [rax+rbx]
0000000000012fa9         je         loc_12f19

0000000000012faf         cmp        byte [rsp+0x98+var_7D], 0x0
0000000000012fb4         je         loc_12f19

0000000000012fba         mov        qword [rdx+8], 0x0
0000000000012fc2         jmp        loc_12f2d
0000000000012fc7         align      16

                     loc_12fd0:
0000000000012fd0         cmp        qword [r12+8], 0x0                          ; CODE XREF=calc_eclosure_iter+144
0000000000012fd6         je         loc_12f00

0000000000012fdc         mov        rcx, qword [r12+0x10]
0000000000012fe1         mov        rcx, qword [rcx]
0000000000012fe4         shl        rcx, 0x4
0000000000012fe8         test       byte [rdx+rcx+0xa], 0x4
0000000000012fed         jne        loc_12e36

0000000000012ff3         shr        r8d, 0x8
0000000000012ff7         mov        rcx, rbp
0000000000012ffa         mov        rdx, rbp
0000000000012ffd         and        r8d, 0x3ff
0000000000013004         mov        rsi, rbp
0000000000013007         mov        rdi, r15
000000000001300a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000001300f         test       eax, eax
0000000000013011         jne        loc_12f46

0000000000013017         mov        rax, qword [r15]
000000000001301a         add        rax, r13
000000000001301d         jmp        loc_12e36
0000000000013022         align      8

                     loc_13028:
0000000000013028         mov        rsi, r15                                    ; CODE XREF=calc_eclosure_iter+274
000000000001302b         mov        rdi, r12
000000000001302e         call       calc_eclosure_iter                          ; calc_eclosure_iter
0000000000013033         test       eax, eax
0000000000013035         je         loc_12eca

000000000001303b         jmp        loc_12f46

                     loc_13040:
0000000000013040         mov        eax, 0xc                                    ; CODE XREF=calc_eclosure_iter+100, calc_eclosure_iter+367, calc_eclosure_iter+502
0000000000013045         jmp        loc_12f46

                     loc_1304a:
000000000001304a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=calc_eclosure_iter+436
                        ; endp
000000000001304f         align      16                                          ; End of unwind block (FDE at 0x260f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     check_arrival_expand_ecl:
0000000000013050         push       r15                                         ; Begin of unwind block (FDE at 0x26144), CODE XREF=expand_bkref_cache+680, check_arrival+884, check_arrival+1283
0000000000013052         push       r14
0000000000013054         mov        r14, rdi
0000000000013057         push       r13
0000000000013059         push       r12
000000000001305b         mov        r15, rsi
000000000001305e         push       rbp
000000000001305f         push       rbx
0000000000013060         mov        rbp, rdx
0000000000013063         mov        ebx, ecx
0000000000013065         sub        rsp, 0x38
0000000000013069         mov        r12, qword [rsi+8]
000000000001306d         mov        rax, qword [fs:0x28]
0000000000013076         mov        qword [rsp+0x68+var_40], rax
000000000001307b         xor        eax, eax
000000000001307d         mov        qword [rsp+0x68+var_50], 0x0
0000000000013086         lea        rdi, qword [r12*8]                          ; argument "__size" for method j_malloc
000000000001308e         mov        qword [rsp+0x68+var_58], r12
0000000000013093         call       j_malloc                                    ; malloc
0000000000013098         test       rax, rax
000000000001309b         mov        qword [rsp+0x68+var_48], rax
00000000000130a0         je         loc_1319d

00000000000130a6         test       r12, r12
00000000000130a9         jle        loc_1313b

00000000000130af         lea        r12, qword [rsp+0x68+var_58]
00000000000130b4         xor        r13d, r13d
00000000000130b7         nop        word [rax+rax]

                     loc_130c0:
00000000000130c0         mov        rax, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+233
00000000000130c4         mov        rdx, qword [rax+r13*8]
00000000000130c8         mov        rax, qword [r14+0x30]
00000000000130cc         lea        rcx, qword [rdx+rdx*2]
00000000000130d0         lea        rsi, qword [rax+rcx*8]
00000000000130d4         mov        r8, qword [rsi+8]
00000000000130d8         test       r8, r8
00000000000130db         jle        loc_13160

00000000000130e1         mov        r10, qword [rsi+0x10]
00000000000130e5         mov        r9, qword [r14]
00000000000130e8         xor        ecx, ecx
00000000000130ea         jmp        loc_130f9
00000000000130ec         align      16

                     loc_130f0:
00000000000130f0         add        rcx, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+191, check_arrival_expand_ecl+196
00000000000130f4         cmp        r8, rcx
00000000000130f7         je         loc_13160

                     loc_130f9:
00000000000130f9         mov        rdi, qword [r10+rcx*8]                      ; CODE XREF=check_arrival_expand_ecl+154
00000000000130fd         mov        rax, rdi
0000000000013100         shl        rax, 0x4
0000000000013104         add        rax, r9
0000000000013107         movzx      r11d, byte [rax+8]
000000000001310c         cmp        ebx, r11d
000000000001310f         jne        loc_130f0

0000000000013111         cmp        rbp, qword [rax]
0000000000013114         jne        loc_130f0

0000000000013116         cmp        rdi, 0xffffffffffffffff
000000000001311a         je         loc_13160

000000000001311c         mov        r8d, ebx
000000000001311f         mov        rcx, rbp
0000000000013122         mov        rsi, r12
0000000000013125         mov        rdi, r14
0000000000013128         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
000000000001312d         test       eax, eax
000000000001312f         jne        loc_1316c

                     loc_13131:
0000000000013131         add        r13, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+282
0000000000013135         cmp        qword [r15+8], r13
0000000000013139         jg         loc_130c0

                     loc_1313b:
000000000001313b         mov        rdi, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+89
000000000001313f         call       sub_2a10                                    ; sub_2a10
0000000000013144         mov        rax, qword [rsp+0x68+var_48]
0000000000013149         movdqa     xmm0, xmmword [rsp+0x68+var_58]
000000000001314f         mov        qword [r15+0x10], rax
0000000000013153         xor        eax, eax
0000000000013155         movaps     xmmword [r15], xmm0
0000000000013159         jmp        loc_1317e
000000000001315b         align      32

                     loc_13160:
0000000000013160         mov        rdi, r12                                    ; CODE XREF=check_arrival_expand_ecl+139, check_arrival_expand_ecl+167, check_arrival_expand_ecl+202
0000000000013163         call       re_node_set_merge                           ; re_node_set_merge
0000000000013168         test       eax, eax
000000000001316a         je         loc_13131

                     loc_1316c:
000000000001316c         mov        rdi, qword [rsp+0x68+var_48]                ; CODE XREF=check_arrival_expand_ecl+223
0000000000013171         mov        dword [rsp+0x68+var_5C], eax
0000000000013175         call       sub_2a10                                    ; sub_2a10
000000000001317a         mov        eax, dword [rsp+0x68+var_5C]

                     loc_1317e:
000000000001317e         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=check_arrival_expand_ecl+265, check_arrival_expand_ecl+338
0000000000013183         xor        rdx, qword [fs:0x28]
000000000001318c         jne        loc_131a4

000000000001318e         add        rsp, 0x38
0000000000013192         pop        rbx
0000000000013193         pop        rbp
0000000000013194         pop        r12
0000000000013196         pop        r13
0000000000013198         pop        r14
000000000001319a         pop        r15
000000000001319c         ret
                        ; endp

                     loc_1319d:
000000000001319d         mov        eax, 0xc                                    ; CODE XREF=check_arrival_expand_ecl+80
00000000000131a2         jmp        loc_1317e

                     loc_131a4:
00000000000131a4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival_expand_ecl+316
                        ; endp
00000000000131a9         align      16                                          ; End of unwind block (FDE at 0x26144)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_add_intersect:
00000000000131b0         mov        r9, qword [rsi+8]                           ; Begin of unwind block (FDE at 0x26190), CODE XREF=sub_epsilon_src_nodes+156, update_cur_sifted_state+263
00000000000131b4         xor        eax, eax
00000000000131b6         test       r9, r9
00000000000131b9         je         loc_13278

00000000000131bf         mov        r11, qword [rdx+8]
00000000000131c3         test       r11, r11
00000000000131c6         je         loc_13278

00000000000131cc         push       r13
00000000000131ce         push       r12
00000000000131d0         lea        rax, qword [r9+r11]
00000000000131d4         push       rbp
00000000000131d5         push       rbx
00000000000131d6         mov        r12, rdx
00000000000131d9         mov        rbx, rdi
00000000000131dc         mov        rbp, rsi
00000000000131df         sub        rsp, 0x8
00000000000131e3         mov        rcx, qword [rdi+8]
00000000000131e7         mov        r13, qword [rdi]
00000000000131ea         mov        rdi, qword [rdi+0x10]
00000000000131ee         lea        rdx, qword [rax+rcx]
00000000000131f2         cmp        rdx, r13
00000000000131f5         jg         loc_13320

                     loc_131fb:
00000000000131fb         lea        rsi, qword [rcx+r9]                         ; CODE XREF=re_node_set_add_intersect+412
00000000000131ff         mov        r13, qword [rbp+0x10]
0000000000013203         mov        rdx, qword [r12+0x10]
0000000000013208         sub        r9, 0x1
000000000001320c         sub        rcx, 0x1
0000000000013210         add        rsi, r11
0000000000013213         sub        r11, 0x1
0000000000013217         mov        rax, qword [r13+r9*8]
000000000001321c         mov        r8, qword [rdx+r11*8]

                     loc_13220:
0000000000013220         cmp        rax, r8                                     ; CODE XREF=re_node_set_add_intersect+219
0000000000013223         je         loc_13236

                     loc_13225:
0000000000013225         jge        loc_13280                                   ; CODE XREF=re_node_set_add_intersect+132

0000000000013227         sub        r11, 0x1
000000000001322b         js         loc_13290

                     loc_1322d:
000000000001322d         mov        r8, qword [rdx+r11*8]                       ; CODE XREF=re_node_set_add_intersect+193
0000000000013231         cmp        rax, r8
0000000000013234         jne        loc_13225

                     loc_13236:
0000000000013236         test       rcx, rcx                                    ; CODE XREF=re_node_set_add_intersect+115
0000000000013239         jns        loc_1324a

000000000001323b         jmp        loc_13258
000000000001323d         align      64

                     loc_13240:
0000000000013240         sub        rcx, 0x1                                    ; CODE XREF=re_node_set_add_intersect+161
0000000000013244         cmp        rcx, 0xffffffffffffffff
0000000000013248         je         loc_13258

                     loc_1324a:
000000000001324a         mov        r10, qword [rdi+rcx*8]                      ; CODE XREF=re_node_set_add_intersect+137
000000000001324e         cmp        r10, r8
0000000000013251         jg         loc_13240

0000000000013253         cmp        r10, r8
0000000000013256         je         loc_13260

                     loc_13258:
0000000000013258         sub        rsi, 0x1                                    ; CODE XREF=re_node_set_add_intersect+139, re_node_set_add_intersect+152
000000000001325c         mov        qword [rdi+rsi*8], r8

                     loc_13260:
0000000000013260         sub        r9, 0x1                                     ; CODE XREF=re_node_set_add_intersect+166
0000000000013264         js         loc_13290

0000000000013266         sub        r11, 0x1
000000000001326a         js         loc_13290

000000000001326c         mov        rax, qword [r13+r9*8]
0000000000013271         jmp        loc_1322d
0000000000013273         align      8

                     loc_13278:
0000000000013278         ret                                                    ; CODE XREF=re_node_set_add_intersect+9, re_node_set_add_intersect+22
                        ; endp
000000000001327a         align      128

                     loc_13280:
0000000000013280         sub        r9, 0x1                                     ; CODE XREF=loc_13225
0000000000013284         js         loc_13290

0000000000013286         mov        rax, qword [r13+r9*8]
000000000001328b         jmp        loc_13220
000000000001328d         align      16

                     loc_13290:
0000000000013290         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_add_intersect+123, re_node_set_add_intersect+180, re_node_set_add_intersect+186, re_node_set_add_intersect+212
0000000000013294         mov        rdx, qword [rbp+8]
0000000000013298         add        rdx, rcx
000000000001329b         add        rdx, qword [r12+8]
00000000000132a0         lea        rax, qword [rcx-1]
00000000000132a4         lea        r9, qword [rdx-1]
00000000000132a8         sub        rdx, rsi
00000000000132ab         add        rcx, rdx
00000000000132ae         test       rdx, rdx
00000000000132b1         mov        qword [rbx+8], rcx
00000000000132b5         jle        loc_132fd

00000000000132b7         test       rax, rax
00000000000132ba         js         loc_132fd

00000000000132bc         nop        dword [rax]

                     loc_132c0:
00000000000132c0         mov        r8, qword [rdi+r9*8]                        ; CODE XREF=re_node_set_add_intersect+304, re_node_set_add_intersect+331
00000000000132c4         mov        rcx, qword [rdi+rax*8]
00000000000132c8         lea        r10, qword [rax+rdx]
00000000000132cc         lea        r10, qword [rdi+r10*8]
00000000000132d0         cmp        r8, rcx
00000000000132d3         jle        loc_132f0

00000000000132d5         sub        r9, 0x1
00000000000132d9         sub        rdx, 0x1
00000000000132dd         mov        qword [r10], r8
00000000000132e0         jne        loc_132c0

00000000000132e2         xor        edx, edx
00000000000132e4         jmp        loc_13301
00000000000132e6         align      16

                     loc_132f0:
00000000000132f0         sub        rax, 0x1                                    ; CODE XREF=re_node_set_add_intersect+291
00000000000132f4         mov        qword [r10], rcx
00000000000132f7         cmp        rax, 0xffffffffffffffff
00000000000132fb         jne        loc_132c0

                     loc_132fd:
00000000000132fd         shl        rdx, 0x3                                    ; CODE XREF=re_node_set_add_intersect+261, re_node_set_add_intersect+266

                     loc_13301:
0000000000013301         lea        rsi, qword [rdi+rsi*8]                      ; argument "__src" for method j_memcpy, CODE XREF=re_node_set_add_intersect+308
0000000000013305         call       j_memcpy                                    ; memcpy
000000000001330a         xor        eax, eax

                     loc_1330c:
000000000001330c         add        rsp, 0x8                                    ; CODE XREF=re_node_set_add_intersect+422
0000000000013310         pop        rbx
0000000000013311         pop        rbp
0000000000013312         pop        r12
0000000000013314         pop        r13
0000000000013316         ret
                        ; endp
0000000000013317         align      32

                     loc_13320:
0000000000013320         add        r13, rax                                    ; CODE XREF=re_node_set_add_intersect+69
0000000000013323         lea        rsi, qword [r13*8]                          ; argument "__size" for method j_realloc
000000000001332b         call       j_realloc                                   ; realloc
0000000000013330         test       rax, rax
0000000000013333         mov        rdi, rax
0000000000013336         je         loc_13351

0000000000013338         mov        qword [rbx+0x10], rax
000000000001333c         mov        qword [rbx], r13
000000000001333f         mov        rcx, qword [rbx+8]
0000000000013343         mov        r9, qword [rbp+8]
0000000000013347         mov        r11, qword [r12+8]
000000000001334c         jmp        loc_131fb

                     loc_13351:
0000000000013351         mov        eax, 0xc                                    ; CODE XREF=re_node_set_add_intersect+390
0000000000013356         jmp        loc_1330c
0000000000013358         align      32                                          ; End of unwind block (FDE at 0x26190)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     create_token_tree.isra.16:
0000000000013360         push       rbx                                         ; Begin of unwind block (FDE at 0x261e0), CODE XREF=duplicate_tree+62, lower_subexp+130, lower_subexp+156, lower_subexp+215, lower_subexp+241, lower_subexp+279, lower_subexp+463, lower_subexp+489, lower_subexp+531, build_charclass_op+350, build_charclass_op+410
0000000000013361         mov        rbx, rdi
0000000000013364         sub        rsp, 0x20
0000000000013368         mov        eax, dword [rsi]
000000000001336a         cmp        eax, 0xf
000000000001336d         je         loc_133e8

000000000001336f         movsxd     r9, eax
0000000000013372         lea        r10d, dword [rax+1]
0000000000013376         mov        rdi, qword [rdi]
0000000000013379         mov        rax, r9
000000000001337c         shl        rax, 0x6
0000000000013380         add        rax, 0x8

                     loc_13384:
0000000000013384         shl        r9, 0x6                                     ; CODE XREF=create_token_tree.isra.16+215
0000000000013388         mov        dword [rsi], r10d
000000000001338b         add        rax, rdi
000000000001338e         lea        rsi, qword [rdi+r9]
0000000000013392         mov        qword [rsi+8], 0x0
000000000001339a         mov        qword [rsi+0x10], rdx
000000000001339e         lea        rdi, qword [rsi+0x20]
00000000000133a2         mov        qword [rsi+0x18], rcx
00000000000133a6         movdqu     xmm0, xmmword [r8]
00000000000133ab         movups     xmmword [rsi+0x30], xmm0
00000000000133af         and        byte [rdi+0x1a], 0xf3
00000000000133b3         test       rdx, rdx
00000000000133b6         mov        qword [rsi+0x20], 0x0
00000000000133be         mov        qword [rsi+0x28], 0x0
00000000000133c6         mov        qword [rsi+0x40], 0xffffffffffffffff
00000000000133ce         je         loc_133d3

00000000000133d0         mov        qword [rdx], rax

                     loc_133d3:
00000000000133d3         test       rcx, rcx                                    ; CODE XREF=create_token_tree.isra.16+110
00000000000133d6         je         loc_133db

00000000000133d8         mov        qword [rcx], rax

                     loc_133db:
00000000000133db         add        rsp, 0x20                                   ; CODE XREF=create_token_tree.isra.16+118, create_token_tree.isra.16+222
00000000000133df         pop        rbx
00000000000133e0         ret
                        ; endp
00000000000133e1         align      8

                     loc_133e8:
00000000000133e8         mov        edi, 0x3c8                                  ; argument "__size" for method j_malloc, CODE XREF=create_token_tree.isra.16+13
00000000000133ed         mov        qword [rsp+0x28+var_10], r8
00000000000133f2         mov        qword [rsp+0x28+var_18], rcx
00000000000133f7         mov        qword [rsp+0x28+var_20], rdx
00000000000133fc         mov        qword [rsp+0x28+var_28], rsi
0000000000013400         call       j_malloc                                    ; malloc
0000000000013405         test       rax, rax
0000000000013408         mov        rdi, rax
000000000001340b         je         loc_1343c

000000000001340d         mov        rax, qword [rbx]
0000000000013410         mov        r10d, 0x1
0000000000013416         mov        qword [rbx], rdi
0000000000013419         xor        r9d, r9d
000000000001341c         mov        r8, qword [rsp+0x28+var_10]
0000000000013421         mov        rcx, qword [rsp+0x28+var_18]
0000000000013426         mov        rdx, qword [rsp+0x28+var_20]
000000000001342b         mov        rsi, qword [rsp+0x28+var_28]
000000000001342f         mov        qword [rdi], rax
0000000000013432         mov        eax, 0x8
0000000000013437         jmp        loc_13384

                     loc_1343c:
000000000001343c         xor        eax, eax                                    ; CODE XREF=create_token_tree.isra.16+171
000000000001343e         jmp        loc_133db


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     duplicate_tree:
0000000000013440         push       r14                                         ; End of unwind block (FDE at 0x261e0), Begin of unwind block (FDE at 0x26204), CODE XREF=sub_1baf0+540, sub_1baf0+888, sub_1baf0+982
0000000000013442         push       r13
0000000000013444         lea        r13, qword [rsi+0x70]
0000000000013448         push       r12
000000000001344a         push       rbp
000000000001344b         lea        r12, qword [rsi+0x80]
0000000000013452         push       rbx
0000000000013453         mov        rbx, rdi
0000000000013456         sub        rsp, 0x10
000000000001345a         mov        rbp, qword [rdi]
000000000001345d         mov        rax, qword [fs:0x28]
0000000000013466         mov        qword [rsp+0x38+var_30], rax
000000000001346b         xor        eax, eax
000000000001346d         mov        r14, rsp

                     loc_13470:
0000000000013470         lea        r8, qword [rbx+0x28]                        ; CODE XREF=duplicate_tree+101, duplicate_tree+199
0000000000013474         xor        ecx, ecx
0000000000013476         xor        edx, edx
0000000000013478         mov        rsi, r12
000000000001347b         mov        rdi, r13
000000000001347e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013483         test       rax, rax
0000000000013486         mov        qword [r14], rax
0000000000013489         je         loc_134dc

000000000001348b         mov        qword [rax], rbp
000000000001348e         mov        rbp, qword [r14]
0000000000013491         or         byte [rbp+0x32], 0x4
0000000000013495         mov        rax, qword [rbx+8]
0000000000013499         test       rax, rax
000000000001349c         je         loc_134b0

000000000001349e         lea        r14, qword [rbp+8]
00000000000134a2         mov        rbx, rax
00000000000134a5         jmp        loc_13470
00000000000134a7         align      16

                     loc_134b0:
00000000000134b0         xor        edx, edx                                    ; CODE XREF=duplicate_tree+92
00000000000134b2         jmp        loc_134bb
00000000000134b4         align      8

                     loc_134b8:
00000000000134b8         mov        rbx, rax                                    ; CODE XREF=duplicate_tree+150

                     loc_134bb:
00000000000134bb         mov        rax, qword [rbx+0x10]                       ; CODE XREF=duplicate_tree+114
00000000000134bf         test       rax, rax
00000000000134c2         je         loc_134c9

00000000000134c4         cmp        rax, rdx
00000000000134c7         jne        loc_13500

                     loc_134c9:
00000000000134c9         mov        rax, qword [rbx]                            ; CODE XREF=duplicate_tree+130
00000000000134cc         mov        rbp, qword [rbp]
00000000000134d0         mov        rdx, rbx
00000000000134d3         test       rax, rax
00000000000134d6         jne        loc_134b8

00000000000134d8         mov        rax, qword [rsp+0x38+var_38]

                     loc_134dc:
00000000000134dc         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=duplicate_tree+73
00000000000134e1         xor        rcx, qword [fs:0x28]
00000000000134ea         jne        loc_1350c

00000000000134ec         add        rsp, 0x10
00000000000134f0         pop        rbx
00000000000134f1         pop        rbp
00000000000134f2         pop        r12
00000000000134f4         pop        r13
00000000000134f6         pop        r14
00000000000134f8         ret
                        ; endp
00000000000134f9         align      256

                     loc_13500:
0000000000013500         lea        r14, qword [rbp+0x10]                       ; CODE XREF=duplicate_tree+135
0000000000013504         mov        rbx, rax
0000000000013507         jmp        loc_13470

                     loc_1350c:
000000000001350c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=duplicate_tree+170
                        ; endp
0000000000013511         align      32                                          ; End of unwind block (FDE at 0x26204)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     lower_subexp:
0000000000013520         push       r15                                         ; Begin of unwind block (FDE at 0x26248), CODE XREF=lower_subexps+104, lower_subexps+136
0000000000013522         push       r14
0000000000013524         push       r13
0000000000013526         push       r12
0000000000013528         mov        r13, rdx
000000000001352b         push       rbp
000000000001352c         push       rbx
000000000001352d         sub        rsp, 0x48
0000000000013531         mov        rbx, qword [rsi]
0000000000013534         mov        rbp, qword [rdx+8]
0000000000013538         mov        rax, qword [fs:0x28]
0000000000013541         mov        qword [rsp+0x78+var_40], rax
0000000000013546         xor        eax, eax
0000000000013548         test       byte [rsi+0x38], 0x10
000000000001354c         mov        qword [rsp+0x78+var_60], rdi
0000000000013551         je         loc_136c8

0000000000013557         test       rbp, rbp
000000000001355a         je         loc_135d0

000000000001355c         mov        rax, qword [rdx+0x28]
0000000000013560         cmp        rax, 0x3f
0000000000013564         jg         loc_1369d

000000000001356a         mov        rdx, qword [rbx+0xa0]
0000000000013571         bt         rdx, rax
0000000000013575         jae        loc_1369d

000000000001357b         lea        rax, qword [rbx+0x70]
000000000001357f         lea        r14, qword [rsp+0x78+var_58]
0000000000013584         sub        rbx, 0xffffffffffffff80
0000000000013588         xor        ecx, ecx
000000000001358a         xor        edx, edx
000000000001358c         mov        rsi, rbx
000000000001358f         mov        r15, rax
0000000000013592         mov        r8, r14
0000000000013595         mov        rdi, rax
0000000000013598         mov        byte [rsp+0x78+var_50], 0x8
000000000001359d         mov        qword [rsp+0x78+var_70], rax
00000000000135a2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000135a7         mov        rdi, r15
00000000000135aa         mov        r8, r14
00000000000135ad         xor        ecx, ecx
00000000000135af         xor        edx, edx
00000000000135b1         mov        rsi, rbx
00000000000135b4         mov        r12, rax
00000000000135b7         mov        byte [rsp+0x78+var_50], 0x9
00000000000135bc         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000135c1         mov        r15, rax
00000000000135c4         jmp        loc_1371d
00000000000135c9         align      16

                     loc_135d0:
00000000000135d0         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+58
00000000000135d4         lea        r14, qword [rsp+0x78+var_58]
00000000000135d9         sub        rbx, 0xffffffffffffff80
00000000000135dd         xor        ecx, ecx
00000000000135df         xor        edx, edx
00000000000135e1         mov        rsi, rbx
00000000000135e4         mov        r15, rax
00000000000135e7         mov        r8, r14
00000000000135ea         mov        rdi, rax
00000000000135ed         mov        byte [rsp+0x78+var_50], 0x8
00000000000135f2         mov        qword [rsp+0x78+var_70], rax
00000000000135f7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000135fc         mov        rdi, r15
00000000000135ff         mov        r8, r14
0000000000013602         xor        ecx, ecx
0000000000013604         xor        edx, edx
0000000000013606         mov        rsi, rbx
0000000000013609         mov        r12, rax
000000000001360c         mov        byte [rsp+0x78+var_50], 0x9
0000000000013611         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013616         mov        r11, rax
0000000000013619         mov        r15, rax

                     loc_1361c:
000000000001361c         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+503, lower_subexp+539
0000000000013621         mov        r8, r14
0000000000013624         mov        rcx, r11
0000000000013627         mov        rdx, r12
000000000001362a         mov        rsi, rbx
000000000001362d         mov        byte [rsp+0x78+var_50], 0x10
0000000000013632         mov        qword [rsp+0x78+var_68], r11
0000000000013637         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001363c         test       rax, rax
000000000001363f         mov        rbp, rax
0000000000013642         je         loc_13740

0000000000013648         mov        r11, qword [rsp+0x78+var_68]
000000000001364d         test       r11, r11
0000000000013650         je         loc_13740

0000000000013656         test       r12, r12
0000000000013659         je         loc_13740

000000000001365f         test       r15, r15
0000000000013662         je         loc_13740

0000000000013668         mov        rax, qword [r13+0x28]
000000000001366c         mov        qword [r15+0x28], rax
0000000000013670         mov        qword [r12+0x28], rax
0000000000013675         movzx      eax, byte [r13+0x32]
000000000001367a         movzx      edx, byte [r15+0x32]
000000000001367f         and        eax, 0x8
0000000000013682         and        edx, 0xfffffff7
0000000000013685         mov        ecx, eax
0000000000013687         or         edx, ecx
0000000000013689         mov        byte [r15+0x32], dl
000000000001368d         movzx      eax, byte [r12+0x32]
0000000000013693         and        eax, 0xfffffff7
0000000000013696         or         eax, ecx
0000000000013698         mov        byte [r12+0x32], al

                     loc_1369d:
000000000001369d         mov        rdi, qword [rsp+0x78+var_40]                ; CODE XREF=lower_subexp+68, lower_subexp+85, lower_subexp+557
00000000000136a2         xor        rdi, qword [fs:0x28]
00000000000136ab         mov        rax, rbp
00000000000136ae         jne        loc_13752

00000000000136b4         add        rsp, 0x48
00000000000136b8         pop        rbx
00000000000136b9         pop        rbp
00000000000136ba         pop        r12
00000000000136bc         pop        r13
00000000000136be         pop        r14
00000000000136c0         pop        r15
00000000000136c2         ret
                        ; endp
00000000000136c3         align      8

                     loc_136c8:
00000000000136c8         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+49
00000000000136cc         lea        r14, qword [rsp+0x78+var_58]
00000000000136d1         sub        rbx, 0xffffffffffffff80
00000000000136d5         xor        ecx, ecx
00000000000136d7         xor        edx, edx
00000000000136d9         mov        rsi, rbx
00000000000136dc         mov        r15, rax
00000000000136df         mov        r8, r14
00000000000136e2         mov        rdi, rax
00000000000136e5         mov        byte [rsp+0x78+var_50], 0x8
00000000000136ea         mov        qword [rsp+0x78+var_70], rax
00000000000136ef         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000136f4         xor        ecx, ecx
00000000000136f6         xor        edx, edx
00000000000136f8         mov        rdi, r15
00000000000136fb         mov        r8, r14
00000000000136fe         mov        rsi, rbx
0000000000013701         mov        r12, rax
0000000000013704         mov        byte [rsp+0x78+var_50], 0x9
0000000000013709         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001370e         test       rbp, rbp
0000000000013711         mov        r15, rax
0000000000013714         mov        r11, rax
0000000000013717         je         loc_1361c

                     loc_1371d:
000000000001371d         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+164
0000000000013722         mov        r8, r14
0000000000013725         mov        rcx, r15
0000000000013728         mov        rdx, rbp
000000000001372b         mov        rsi, rbx
000000000001372e         mov        byte [rsp+0x78+var_50], 0x10
0000000000013733         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013738         mov        r11, rax
000000000001373b         jmp        loc_1361c

                     loc_13740:
0000000000013740         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=lower_subexp+290, lower_subexp+304, lower_subexp+313, lower_subexp+322
0000000000013745         xor        ebp, ebp
0000000000013747         mov        dword [rax], 0xc
000000000001374d         jmp        loc_1369d

                     loc_13752:
0000000000013752         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexp+398
                        ; endp
0000000000013757         align      32                                          ; End of unwind block (FDE at 0x26248)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     lower_subexps:
0000000000013760         push       rbp                                         ; Begin of unwind block (FDE at 0x26298), DATA XREF=re_compile_internal+1638
0000000000013761         push       rbx
0000000000013762         mov        rbp, rdi
0000000000013765         mov        rbx, rsi
0000000000013768         sub        rsp, 0x18
000000000001376c         mov        rdx, qword [rsi+8]
0000000000013770         mov        rax, qword [fs:0x28]
0000000000013779         mov        qword [rsp+0x28+var_20], rax
000000000001377e         xor        eax, eax
0000000000013780         mov        dword [rsp+0x28+var_24], 0x0
0000000000013788         test       rdx, rdx
000000000001378b         je         loc_13793

000000000001378d         cmp        byte [rdx+0x30], 0x11
0000000000013791         je         loc_137e0

                     loc_13793:
0000000000013793         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=lower_subexps+43, lower_subexps+148, lower_subexps+153
0000000000013797         test       rdx, rdx
000000000001379a         je         loc_137a2

000000000001379c         cmp        byte [rdx+0x30], 0x11
00000000000137a0         je         loc_137c0

                     loc_137a2:
00000000000137a2         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=lower_subexps+58, lower_subexps+116, lower_subexps+121
00000000000137a7         xor        rcx, qword [fs:0x28]
00000000000137b0         mov        eax, dword [rsp+0x28+var_24]
00000000000137b4         jne        loc_137fb

00000000000137b6         add        rsp, 0x18
00000000000137ba         pop        rbx
00000000000137bb         pop        rbp
00000000000137bc         ret
                        ; endp
00000000000137bd         align      64

                     loc_137c0:
00000000000137c0         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+64
00000000000137c5         mov        rsi, rbp
00000000000137c8         call       lower_subexp                                ; lower_subexp
00000000000137cd         test       rax, rax
00000000000137d0         mov        qword [rbx+0x10], rax
00000000000137d4         je         loc_137a2

00000000000137d6         mov        qword [rax], rbx
00000000000137d9         jmp        loc_137a2
00000000000137db         align      32

                     loc_137e0:
00000000000137e0         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+49
00000000000137e5         mov        rsi, rbp
00000000000137e8         call       lower_subexp                                ; lower_subexp
00000000000137ed         test       rax, rax
00000000000137f0         mov        qword [rbx+8], rax
00000000000137f4         je         loc_13793

00000000000137f6         mov        qword [rax], rbx
00000000000137f9         jmp        loc_13793

                     loc_137fb:
00000000000137fb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexps+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_copy:
0000000000013800         push       r12                                         ; End of unwind block (FDE at 0x26298), Begin of unwind block (FDE at 0x262c4), CODE XREF=re_node_set_init_union+235, re_acquire_state_context+232, re_acquire_state_context+649, re_acquire_state+187, expand_bkref_cache+390, build_trtable+1614, check_arrival+1551, set_regs+1237, update_cur_sifted_state+2049, sub_1dbd0+592
0000000000013802         push       rbp
0000000000013803         push       rbx
0000000000013804         mov        rax, qword [rsi+8]
0000000000013808         mov        qword [rdi+8], rax
000000000001380c         mov        r12, qword [rsi+8]
0000000000013810         test       r12, r12
0000000000013813         jle        loc_13850

0000000000013815         mov        rbx, rdi
0000000000013818         mov        qword [rdi], rax
000000000001381b         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc
0000000000013823         mov        rbp, rsi
0000000000013826         call       j_malloc                                    ; malloc
000000000001382b         test       rax, rax
000000000001382e         mov        qword [rbx+0x10], rax
0000000000013832         je         loc_13870

0000000000013834         mov        rsi, qword [rbp+0x10]                       ; argument "__src" for method j_memcpy
0000000000013838         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memcpy
0000000000013840         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000013843         call       j_memcpy                                    ; memcpy
0000000000013848         xor        eax, eax

                     loc_1384a:
000000000001384a         pop        rbx                                         ; CODE XREF=re_node_set_init_copy+132
000000000001384b         pop        rbp
000000000001384c         pop        r12
000000000001384e         ret
                        ; endp
000000000001384f         align      16

                     loc_13850:
0000000000013850         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_copy+19
0000000000013854         mov        qword [rdi+0x10], 0x0
000000000001385c         xor        eax, eax
000000000001385e         movups     xmmword [rdi], xmm0
0000000000013861         pop        rbx
0000000000013862         pop        rbp
0000000000013863         pop        r12
0000000000013865         ret
                        ; endp
0000000000013866         align      16

                     loc_13870:
0000000000013870         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_init_copy+50
0000000000013878         mov        qword [rbx], 0x0
000000000001387f         mov        eax, 0xc
0000000000013884         jmp        loc_1384a
0000000000013886         align      16                                          ; End of unwind block (FDE at 0x262c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_union:
0000000000013890         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x26300), CODE XREF=merge_state_array+96, transit_state_bkref.isra.34+1185, merge_state_with_log+188, re_search_internal+3431
0000000000013893         push       r14
0000000000013895         push       r13
0000000000013897         push       r12
0000000000013899         push       rbp
000000000001389a         push       rbx
000000000001389b         je         loc_13945

00000000000138a1         test       rdx, rdx
00000000000138a4         mov        r13, qword [rsi+8]
00000000000138a8         je         loc_13940

00000000000138ae         test       r13, r13
00000000000138b1         jle        loc_13940

00000000000138b7         mov        r14, qword [rdx+8]
00000000000138bb         test       r14, r14
00000000000138be         jle        loc_13973

00000000000138c4         mov        r12, rdi
00000000000138c7         lea        rdi, qword [r13+r14]
00000000000138cc         mov        rbx, rdx
00000000000138cf         mov        rbp, rsi
00000000000138d2         mov        qword [r12], rdi
00000000000138d6         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
00000000000138da         call       j_malloc                                    ; malloc
00000000000138df         test       rax, rax
00000000000138e2         mov        qword [r12+0x10], rax
00000000000138e7         je         loc_139d8

00000000000138ed         mov        r9, qword [rbx+0x10]
00000000000138f1         mov        r8, qword [rbp+0x10]
00000000000138f5         xor        ebx, ebx
00000000000138f7         xor        ecx, ecx
00000000000138f9         xor        esi, esi
00000000000138fb         jmp        loc_1391e
00000000000138fd         align      256

                     loc_13900:
0000000000013900         sete       dil                                         ; CODE XREF=re_node_set_init_union+157
0000000000013904         mov        qword [rax+rbx*8-8], rdx
0000000000013909         add        rsi, 0x1
000000000001390d         movzx      edi, dil
0000000000013911         add        rcx, rdi

                     loc_13914:
0000000000013914         cmp        r13, rsi                                    ; CODE XREF=re_node_set_init_union+168
0000000000013917         jle        loc_13980

0000000000013919         cmp        r14, rcx
000000000001391c         jle        loc_13998

                     loc_1391e:
000000000001391e         mov        rdx, qword [r8+rsi*8]                       ; CODE XREF=re_node_set_init_union+107
0000000000013922         mov        rdi, qword [r9+rcx*8]
0000000000013926         add        rbx, 0x1
000000000001392a         cmp        rdx, rdi
000000000001392d         jle        loc_13900

000000000001392f         add        rcx, 0x1
0000000000013933         mov        qword [rax+rbx*8-8], rdi
0000000000013938         jmp        loc_13914
000000000001393a         align      64

                     loc_13940:
0000000000013940         test       r13, r13                                    ; CODE XREF=re_node_set_init_union+24, re_node_set_init_union+33
0000000000013943         jg         loc_13973

                     loc_13945:
0000000000013945         test       rdx, rdx                                    ; CODE XREF=re_node_set_init_union+11
0000000000013948         je         loc_13951

000000000001394a         cmp        qword [rdx+8], 0x0
000000000001394f         jg         loc_13970

                     loc_13951:
0000000000013951         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_union+184
0000000000013955         mov        qword [rdi+0x10], 0x0
000000000001395d         xor        eax, eax
000000000001395f         movaps     xmmword [rdi], xmm0

                     loc_13962:
0000000000013962         pop        rbx                                         ; CODE XREF=re_node_set_init_union+333
0000000000013963         pop        rbp
0000000000013964         pop        r12
0000000000013966         pop        r13
0000000000013968         pop        r14
000000000001396a         ret
                        ; endp
000000000001396b         align      16

                     loc_13970:
0000000000013970         mov        rsi, rdx                                    ; CODE XREF=re_node_set_init_union+191

                     loc_13973:
0000000000013973         pop        rbx                                         ; CODE XREF=re_node_set_init_union+46, re_node_set_init_union+179
0000000000013974         pop        rbp
0000000000013975         pop        r12
0000000000013977         pop        r13
0000000000013979         pop        r14
000000000001397b         jmp        re_node_set_init_copy                       ; re_node_set_init_copy
                        ; endp

                     loc_13980:
0000000000013980         cmp        r14, rcx                                    ; CODE XREF=re_node_set_init_union+135
0000000000013983         jg         loc_139b8

                     loc_13985:
0000000000013985         mov        qword [r12+8], rbx                          ; CODE XREF=re_node_set_init_union+291, re_node_set_init_union+323
000000000001398a         xor        eax, eax
000000000001398c         pop        rbx
000000000001398d         pop        rbp
000000000001398e         pop        r12
0000000000013990         pop        r13
0000000000013992         pop        r14
0000000000013994         ret
                        ; endp
0000000000013995         align      8

                     loc_13998:
0000000000013998         sub        r13, rsi                                    ; CODE XREF=re_node_set_init_union+140
000000000001399b         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000001399f         lea        rsi, qword [r8+rsi*8]                       ; argument "__src" for method j_memcpy
00000000000139a3         lea        rdx, qword [r13*8]                          ; argument "__n" for method j_memcpy
00000000000139ab         add        rbx, r13
00000000000139ae         call       j_memcpy                                    ; memcpy
00000000000139b3         jmp        loc_13985
00000000000139b5         align      8

                     loc_139b8:
00000000000139b8         sub        r14, rcx                                    ; CODE XREF=re_node_set_init_union+243
00000000000139bb         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
00000000000139bf         lea        rsi, qword [r9+rcx*8]                       ; argument "__src" for method j_memcpy
00000000000139c3         lea        rdx, qword [r14*8]                          ; argument "__n" for method j_memcpy
00000000000139cb         add        rbx, r14
00000000000139ce         call       j_memcpy                                    ; memcpy
00000000000139d3         jmp        loc_13985
00000000000139d5         align      8

                     loc_139d8:
00000000000139d8         mov        eax, 0xc                                    ; CODE XREF=re_node_set_init_union+87
00000000000139dd         jmp        loc_13962
00000000000139e2         align      16                                          ; End of unwind block (FDE at 0x26300)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84


                     re_acquire_state_context:
00000000000139f0         push       r15                                         ; Begin of unwind block (FDE at 0x26364), CODE XREF=build_trtable+597, build_trtable+2464, build_trtable+2539, check_arrival+987, check_arrival+1653, transit_state_bkref.isra.34+1239, transit_state_bkref.isra.34+1970, merge_state_with_log+254, merge_state_with_log+354, re_search_internal+3497, re_search_internal+3734
00000000000139f2         push       r14
00000000000139f4         push       r13
00000000000139f6         push       r12
00000000000139f8         push       rbp
00000000000139f9         push       rbx
00000000000139fa         sub        rsp, 0x28
00000000000139fe         mov        r10, qword [rdx+8]
0000000000013a02         test       r10, r10
0000000000013a05         je         loc_13c8f

0000000000013a0b         mov        r8d, ecx
0000000000013a0e         test       r10, r10
0000000000013a11         lea        r12, qword [r8+r10]
0000000000013a15         jle        loc_13a2c

0000000000013a17         mov        rax, qword [rdx+0x10]
0000000000013a1b         lea        r10, qword [rax+r10*8]
0000000000013a1f         nop

                     loc_13a20:
0000000000013a20         add        r12, qword [rax]                            ; CODE XREF=re_acquire_state_context+58
0000000000013a23         add        rax, 0x8
0000000000013a27         cmp        r10, rax
0000000000013a2a         jne        loc_13a20

                     loc_13a2c:
0000000000013a2c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state_context+37
0000000000013a33         mov        rbp, rdx
0000000000013a36         mov        dword [rsp+0x58+var_54], ecx
0000000000013a3a         mov        r13, rsi
0000000000013a3d         mov        qword [rsp+0x58+var_40], rdi
0000000000013a42         and        rax, r12
0000000000013a45         lea        rdx, qword [rax+rax*2]
0000000000013a49         mov        rax, qword [rsi+0x40]
0000000000013a4d         lea        rax, qword [rax+rdx*8]
0000000000013a51         mov        r11, qword [rax]
0000000000013a54         test       r11, r11
0000000000013a57         jle        loc_13ab0

0000000000013a59         mov        rbx, qword [rax+0x10]
0000000000013a5d         xor        r10d, r10d
0000000000013a60         mov        r9d, ecx
0000000000013a63         jmp        loc_13a71
0000000000013a65         align      8

                     loc_13a68:
0000000000013a68         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+136, re_acquire_state_context+149, re_acquire_state_context+158, re_acquire_state_context+170
0000000000013a6c         cmp        r10, r11
0000000000013a6f         je         loc_13ab0

                     loc_13a71:
0000000000013a71         mov        r14, qword [rbx+r10*8]                      ; CODE XREF=re_acquire_state_context+115
0000000000013a75         cmp        qword [r14], r12
0000000000013a78         jne        loc_13a68

0000000000013a7a         movzx      eax, byte [r14+0x68]
0000000000013a7f         and        eax, 0xf
0000000000013a82         cmp        eax, r9d
0000000000013a85         jne        loc_13a68

0000000000013a87         mov        rdi, qword [r14+0x50]
0000000000013a8b         test       rdi, rdi
0000000000013a8e         je         loc_13a68

0000000000013a90         mov        rsi, rbp
0000000000013a93         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000013a98         test       al, al
0000000000013a9a         je         loc_13a68

                     loc_13a9c:
0000000000013a9c         add        rsp, 0x28                                   ; CODE XREF=re_acquire_state_context+520, re_acquire_state_context+548, re_acquire_state_context+680
0000000000013aa0         mov        rax, r14
0000000000013aa3         pop        rbx
0000000000013aa4         pop        rbp
0000000000013aa5         pop        r12
0000000000013aa7         pop        r13
0000000000013aa9         pop        r14
0000000000013aab         pop        r15
0000000000013aad         ret
                        ; endp
0000000000013aae         align      16

                     loc_13ab0:
0000000000013ab0         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state_context+103, re_acquire_state_context+127
0000000000013ab5         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
0000000000013aba         call       j_calloc                                    ; calloc
0000000000013abf         test       rax, rax
0000000000013ac2         mov        r14, rax
0000000000013ac5         je         loc_13c06

0000000000013acb         lea        rax, qword [rax+8]
0000000000013acf         mov        rsi, rbp
0000000000013ad2         mov        rdi, rax
0000000000013ad5         mov        rbx, rax
0000000000013ad8         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000013add         test       eax, eax
0000000000013adf         jne        loc_13c9d

0000000000013ae5         movzx      eax, byte [r14+0x68]
0000000000013aea         movzx      edx, byte [rsp+0x58+var_54]
0000000000013aef         mov        qword [r14+0x50], rbx
0000000000013af3         and        edx, 0xf
0000000000013af6         and        eax, 0xfffffff0
0000000000013af9         or         eax, edx
0000000000013afb         cmp        qword [rbp+8], 0x0
0000000000013b00         mov        byte [r14+0x68], al
0000000000013b04         jle        loc_13be8

0000000000013b0a         lea        rcx, qword [r14+0x18]
0000000000013b0e         xor        r15d, r15d
0000000000013b11         mov        qword [rsp+0x58+var_48], r12
0000000000013b16         xor        r10d, r10d
0000000000013b19         mov        r12, r13
0000000000013b1c         mov        r13, r15
0000000000013b1f         mov        qword [rsp+0x58+var_50], rcx
0000000000013b24         mov        r15, rbx
0000000000013b27         nop        word [rax+rax]

                     loc_13b30:
0000000000013b30         mov        rax, qword [rbp+0x10]                       ; CODE XREF=re_acquire_state_context+490
0000000000013b34         mov        rax, qword [rax+r13*8]
0000000000013b38         shl        rax, 0x4
0000000000013b3c         add        rax, qword [r12]
0000000000013b40         movzx      esi, byte [rax+8]
0000000000013b44         mov        ebx, dword [rax+8]
0000000000013b47         shr        ebx, 0x8
0000000000013b4a         and        bx, 0x3ff
0000000000013b4f         cmp        esi, 0x1
0000000000013b52         movzx      edi, bx
0000000000013b55         jne        loc_13b5b

0000000000013b57         test       edi, edi
0000000000013b59         je         loc_13bd2

                     loc_13b5b:
0000000000013b5b         movzx      edx, byte [r14+0x68]                        ; CODE XREF=re_acquire_state_context+357
0000000000013b60         movzx      eax, byte [rax+0xa]
0000000000013b64         mov        r9d, edx
0000000000013b67         shr        al, 0x4
0000000000013b6a         and        edx, 0xffffffdf
0000000000013b6d         shr        r9b, 0x5
0000000000013b71         or         eax, r9d
0000000000013b74         and        eax, 0x1
0000000000013b77         shl        eax, 0x5
0000000000013b7a         or         eax, edx
0000000000013b7c         cmp        esi, 0x2
0000000000013b7f         mov        byte [r14+0x68], al
0000000000013b83         je         loc_13c50

0000000000013b89         cmp        esi, 0x4
0000000000013b8c         jne        loc_13b95

0000000000013b8e         or         eax, 0x40
0000000000013b91         mov        byte [r14+0x68], al

                     loc_13b95:
0000000000013b95         test       edi, edi                                    ; CODE XREF=re_acquire_state_context+412, re_acquire_state_context+615
0000000000013b97         je         loc_13bd2

0000000000013b99         cmp        r15, qword [r14+0x50]
0000000000013b9d         je         loc_13c60

                     loc_13ba3:
0000000000013ba3         test       bl, 0x1                                     ; CODE XREF=re_acquire_state_context+666
0000000000013ba6         je         loc_13c20

0000000000013ba8         test       byte [rsp+0x58+var_54], 0x1
0000000000013bad         je         loc_13bb8

0000000000013baf         test       bl, 0x2
0000000000013bb2         je         loc_13c2c

0000000000013bb4         nop        dword [rax]

                     loc_13bb8:
0000000000013bb8         mov        rdx, r13                                    ; CODE XREF=re_acquire_state_context+445, re_acquire_state_context+570, re_acquire_state_context+582, re_acquire_state_context+596
0000000000013bbb         sub        rdx, r10
0000000000013bbe         js         loc_13bce

0000000000013bc0         mov        rsi, qword [rsp+0x58+var_50]
0000000000013bc5         lea        rdi, qword [r14+0x10]
0000000000013bc9         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_13bce:
0000000000013bce         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+462

                     loc_13bd2:
0000000000013bd2         add        r13, 0x1                                    ; CODE XREF=re_acquire_state_context+361, re_acquire_state_context+423, re_acquire_state_context+587, re_acquire_state_context+594
0000000000013bd6         cmp        r13, qword [rbp+8]
0000000000013bda         jl         loc_13b30

0000000000013be0         mov        r13, r12
0000000000013be3         mov        r12, qword [rsp+0x58+var_48]

                     loc_13be8:
0000000000013be8         mov        rdx, r12                                    ; CODE XREF=re_acquire_state_context+276
0000000000013beb         mov        rsi, r14
0000000000013bee         mov        rdi, r13
0000000000013bf1         call       register_state                              ; register_state
0000000000013bf6         test       eax, eax
0000000000013bf8         je         loc_13a9c

                     loc_13bfe:
0000000000013bfe         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+641
0000000000013c01         call       free_state                                  ; free_state

                     loc_13c06:
0000000000013c06         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=re_acquire_state_context+213, re_acquire_state_context+656, re_acquire_state_context+693
0000000000013c0b         xor        r14d, r14d
0000000000013c0e         mov        dword [rax], 0xc
0000000000013c14         jmp        loc_13a9c
0000000000013c19         align      32

                     loc_13c20:
0000000000013c20         test       bl, 0x2                                     ; CODE XREF=re_acquire_state_context+438
0000000000013c23         je         loc_13c2c

0000000000013c25         test       byte [rsp+0x58+var_54], 0x1
0000000000013c2a         jne        loc_13bb8

                     loc_13c2c:
0000000000013c2c         test       bl, 0x10                                    ; CODE XREF=re_acquire_state_context+450, re_acquire_state_context+563
0000000000013c2f         je         loc_13c38

0000000000013c31         test       byte [rsp+0x58+var_54], 0x2
0000000000013c36         je         loc_13bb8

                     loc_13c38:
0000000000013c38         and        ebx, 0x40                                   ; CODE XREF=re_acquire_state_context+575
0000000000013c3b         je         loc_13bd2

0000000000013c3d         test       byte [rsp+0x58+var_54], 0x4
0000000000013c42         jne        loc_13bd2

0000000000013c44         jmp        loc_13bb8
0000000000013c49         align      16

                     loc_13c50:
0000000000013c50         or         eax, 0x10                                   ; CODE XREF=re_acquire_state_context+403
0000000000013c53         mov        byte [r14+0x68], al
0000000000013c57         jmp        loc_13b95
0000000000013c5c         align      32

                     loc_13c60:
0000000000013c60         mov        edi, 0x18                                   ; argument "__size" for method j_malloc, CODE XREF=re_acquire_state_context+429
0000000000013c65         call       j_malloc                                    ; malloc
0000000000013c6a         test       rax, rax
0000000000013c6d         mov        qword [r14+0x50], rax
0000000000013c71         je         loc_13bfe

0000000000013c73         mov        rsi, rbp
0000000000013c76         mov        rdi, rax
0000000000013c79         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000013c7e         test       eax, eax
0000000000013c80         jne        loc_13c06

0000000000013c82         or         byte [r14+0x68], 0x80
0000000000013c87         xor        r10d, r10d
0000000000013c8a         jmp        loc_13ba3

                     loc_13c8f:
0000000000013c8f         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state_context+21
0000000000013c95         xor        r14d, r14d
0000000000013c98         jmp        loc_13a9c

                     loc_13c9d:
0000000000013c9d         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+239
0000000000013ca0         call       sub_2a10                                    ; sub_2a10
0000000000013ca5         jmp        loc_13c06
0000000000013caa         align      16                                          ; End of unwind block (FDE at 0x26364)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_acquire_state:
0000000000013cb0         push       r15                                         ; Begin of unwind block (FDE at 0x263b0), CODE XREF=merge_state_array+120, expand_bkref_cache+464, check_arrival+754, update_cur_sifted_state+219, update_cur_sifted_state+307
0000000000013cb2         push       r14
0000000000013cb4         push       r13
0000000000013cb6         push       r12
0000000000013cb8         push       rbp
0000000000013cb9         push       rbx
0000000000013cba         sub        rsp, 0x8
0000000000013cbe         mov        rbp, qword [rdx+8]
0000000000013cc2         test       rbp, rbp
0000000000013cc5         je         loc_13ea0

0000000000013ccb         test       rbp, rbp
0000000000013cce         jle        loc_13cec

0000000000013cd0         mov        rax, qword [rdx+0x10]
0000000000013cd4         lea        rcx, qword [rax+rbp*8]
0000000000013cd8         nop        dword [rax+rax]

                     loc_13ce0:
0000000000013ce0         add        rbp, qword [rax]                            ; CODE XREF=re_acquire_state+58
0000000000013ce3         add        rax, 0x8
0000000000013ce7         cmp        rcx, rax
0000000000013cea         jne        loc_13ce0

                     loc_13cec:
0000000000013cec         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state+30
0000000000013cf3         mov        r14, rdx
0000000000013cf6         mov        r12, rsi
0000000000013cf9         mov        r13, rdi
0000000000013cfc         and        rax, rbp
0000000000013cff         lea        rdx, qword [rax+rax*2]
0000000000013d03         mov        rax, qword [rsi+0x40]
0000000000013d07         lea        rax, qword [rax+rdx*8]
0000000000013d0b         mov        r10, qword [rax]
0000000000013d0e         test       r10, r10
0000000000013d11         jle        loc_13d46

0000000000013d13         mov        r11, qword [rax+0x10]
0000000000013d17         xor        r9d, r9d
0000000000013d1a         nop        word [rax+rax]

                     loc_13d20:
0000000000013d20         mov        rbx, qword [r11+r9*8]                       ; CODE XREF=re_acquire_state+148
0000000000013d24         cmp        qword [rbx], rbp
0000000000013d27         jne        loc_13d3d

0000000000013d29         lea        rdi, qword [rbx+8]
0000000000013d2d         mov        rsi, r14
0000000000013d30         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000013d35         test       al, al
0000000000013d37         jne        loc_13e3f

                     loc_13d3d:
0000000000013d3d         add        r9, 0x1                                     ; CODE XREF=re_acquire_state+119
0000000000013d41         cmp        r10, r9
0000000000013d44         jne        loc_13d20

                     loc_13d46:
0000000000013d46         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state+97
0000000000013d4b         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
0000000000013d50         call       j_calloc                                    ; calloc
0000000000013d55         test       rax, rax
0000000000013d58         mov        rbx, rax
0000000000013d5b         je         loc_13e88

0000000000013d61         lea        r15, qword [rax+8]
0000000000013d65         mov        rsi, r14
0000000000013d68         mov        rdi, r15
0000000000013d6b         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000013d70         test       eax, eax
0000000000013d72         jne        loc_13e80

0000000000013d78         mov        rax, qword [r14+8]
0000000000013d7c         mov        qword [rbx+0x50], r15
0000000000013d80         test       rax, rax
0000000000013d83         jle        loc_13e2d

0000000000013d89         mov        rsi, qword [r14+0x10]
0000000000013d8d         mov        r8, qword [r12]
0000000000013d91         lea        r9, qword [rsi+rax*8]
0000000000013d95         jmp        loc_13de4
0000000000013d97         align      32

                     loc_13da0:
0000000000013da0         movzx      ecx, byte [rbx+0x68]                        ; CODE XREF=re_acquire_state+325
0000000000013da4         movzx      edx, byte [rax+0xa]
0000000000013da8         mov        r10d, ecx
0000000000013dab         shr        dl, 0x4
0000000000013dae         and        ecx, 0xffffffdf
0000000000013db1         shr        r10b, 0x5
0000000000013db5         or         edx, r10d
0000000000013db8         and        edx, 0x1
0000000000013dbb         shl        edx, 0x5
0000000000013dbe         or         edx, ecx
0000000000013dc0         cmp        edi, 0x2
0000000000013dc3         mov        byte [rbx+0x68], dl
0000000000013dc6         je         loc_13e58

0000000000013dcc         cmp        edi, 0x4
0000000000013dcf         jne        loc_13e68

0000000000013dd5         or         edx, 0x40
0000000000013dd8         mov        byte [rbx+0x68], dl

                     loc_13ddb:
0000000000013ddb         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+334, re_acquire_state+430, re_acquire_state+452
0000000000013ddf         cmp        r9, rsi
0000000000013de2         je         loc_13e2d

                     loc_13de4:
0000000000013de4         mov        rax, qword [rsi]                            ; CODE XREF=re_acquire_state+229, re_acquire_state+379
0000000000013de7         shl        rax, 0x4
0000000000013deb         add        rax, r8
0000000000013dee         movzx      edi, byte [rax+8]
0000000000013df2         cmp        edi, 0x1
0000000000013df5         jne        loc_13da0

0000000000013df7         test       dword [rax+8], 0x3ff00
0000000000013dfe         je         loc_13ddb

0000000000013e00         movzx      edx, byte [rbx+0x68]
0000000000013e04         movzx      eax, byte [rax+0xa]
0000000000013e08         mov        ecx, edx
0000000000013e0a         shr        al, 0x4
0000000000013e0d         and        edx, 0xffffffdf
0000000000013e10         shr        cl, 0x5
0000000000013e13         or         eax, ecx
0000000000013e15         and        eax, 0x1
0000000000013e18         shl        eax, 0x5
0000000000013e1b         or         eax, edx
0000000000013e1d         mov        byte [rbx+0x68], al

                     loc_13e20:
0000000000013e20         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+443, re_acquire_state+458
0000000000013e24         or         byte [rbx+0x68], 0x80
0000000000013e28         cmp        r9, rsi
0000000000013e2b         jne        loc_13de4

                     loc_13e2d:
0000000000013e2d         mov        rdx, rbp                                    ; CODE XREF=re_acquire_state+211, re_acquire_state+306
0000000000013e30         mov        rsi, rbx
0000000000013e33         mov        rdi, r12
0000000000013e36         call       register_state                              ; register_state
0000000000013e3b         test       eax, eax
0000000000013e3d         jne        loc_13e94

                     loc_13e3f:
0000000000013e3f         add        rsp, 0x8                                    ; CODE XREF=re_acquire_state+135, re_acquire_state+482, re_acquire_state+504
0000000000013e43         mov        rax, rbx
0000000000013e46         pop        rbx
0000000000013e47         pop        rbp
0000000000013e48         pop        r12
0000000000013e4a         pop        r13
0000000000013e4c         pop        r14
0000000000013e4e         pop        r15
0000000000013e50         ret
                        ; endp
0000000000013e51         align      8

                     loc_13e58:
0000000000013e58         or         edx, 0x10                                   ; CODE XREF=re_acquire_state+278
0000000000013e5b         mov        byte [rbx+0x68], dl
0000000000013e5e         jmp        loc_13ddb
0000000000013e63         align      8

                     loc_13e68:
0000000000013e68         cmp        edi, 0xc                                    ; CODE XREF=re_acquire_state+287
0000000000013e6b         je         loc_13e20

0000000000013e6d         test       dword [rax+8], 0x3ff00
0000000000013e74         je         loc_13ddb

0000000000013e7a         jmp        loc_13e20
0000000000013e7c         align      128

                     loc_13e80:
0000000000013e80         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+194
0000000000013e83         call       sub_2a10                                    ; sub_2a10

                     loc_13e88:
0000000000013e88         mov        dword [r13], 0xc                            ; CODE XREF=re_acquire_state+171, re_acquire_state+492
0000000000013e90         xor        ebx, ebx
0000000000013e92         jmp        loc_13e3f

                     loc_13e94:
0000000000013e94         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+397
0000000000013e97         call       free_state                                  ; free_state
0000000000013e9c         jmp        loc_13e88
0000000000013e9e         align      32

                     loc_13ea0:
0000000000013ea0         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state+21
0000000000013ea6         xor        ebx, ebx
0000000000013ea8         jmp        loc_13e3f
0000000000013eaa         align      16                                          ; End of unwind block (FDE at 0x263b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112


                     merge_state_array:
0000000000013eb0         push       r15                                         ; Begin of unwind block (FDE at 0x263fc), CODE XREF=re_search_internal+5755, update_cur_sifted_state+1819
0000000000013eb2         push       r14
0000000000013eb4         push       r13
0000000000013eb6         push       r12
0000000000013eb8         push       rbp
0000000000013eb9         push       rbx
0000000000013eba         sub        rsp, 0x48
0000000000013ebe         mov        rax, qword [fs:0x28]
0000000000013ec7         mov        qword [rsp+0x78+var_40], rax
0000000000013ecc         xor        eax, eax
0000000000013ece         test       rcx, rcx
0000000000013ed1         jle        loc_13f66

0000000000013ed7         lea        rax, qword [rsp+0x78+var_5C]
0000000000013edc         mov        r14, rdi
0000000000013edf         mov        rbx, rsi
0000000000013ee2         mov        r12, rdx
0000000000013ee5         mov        rbp, rcx
0000000000013ee8         xor        r15d, r15d
0000000000013eeb         lea        r13, qword [rsp+0x78+var_58]
0000000000013ef0         mov        qword [rsp+0x78+var_70], rax
0000000000013ef5         jmp        loc_13f4c
0000000000013ef7         align      256

                     loc_13f00:
0000000000013f00         test       rdx, rdx                                    ; CODE XREF=merge_state_array+167
0000000000013f03         je         loc_13f43

0000000000013f05         add        rdx, 0x8
0000000000013f09         add        rsi, 0x8
0000000000013f0d         mov        rdi, r13
0000000000013f10         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000013f15         test       eax, eax
0000000000013f17         mov        dword [rsp+0x78+var_5C], eax
0000000000013f1b         jne        loc_13f68

0000000000013f1d         mov        rdi, qword [rsp+0x78+var_70]
0000000000013f22         mov        rdx, r13
0000000000013f25         mov        rsi, r14
0000000000013f28         call       re_acquire_state                            ; re_acquire_state
0000000000013f2d         mov        rdi, qword [rsp+0x78+var_48]
0000000000013f32         mov        qword [rbx+r15*8], rax
0000000000013f36         call       sub_2a10                                    ; sub_2a10
0000000000013f3b         mov        eax, dword [rsp+0x78+var_5C]
0000000000013f3f         test       eax, eax
0000000000013f41         jne        loc_13f68

                     loc_13f43:
0000000000013f43         add        r15, 0x1                                    ; CODE XREF=merge_state_array+83
0000000000013f47         cmp        rbp, r15
0000000000013f4a         je         loc_13f66

                     loc_13f4c:
0000000000013f4c         mov        rsi, qword [rbx+r15*8]                      ; CODE XREF=merge_state_array+69, merge_state_array+180
0000000000013f50         mov        rdx, qword [r12+r15*8]
0000000000013f54         test       rsi, rsi
0000000000013f57         jne        loc_13f00

0000000000013f59         mov        qword [rbx+r15*8], rdx
0000000000013f5d         add        r15, 0x1
0000000000013f61         cmp        rbp, r15
0000000000013f64         jne        loc_13f4c

                     loc_13f66:
0000000000013f66         xor        eax, eax                                    ; CODE XREF=merge_state_array+33, merge_state_array+154

                     loc_13f68:
0000000000013f68         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=merge_state_array+107, merge_state_array+145
0000000000013f6d         xor        rcx, qword [fs:0x28]
0000000000013f76         jne        loc_13f87

0000000000013f78         add        rsp, 0x48
0000000000013f7c         pop        rbx
0000000000013f7d         pop        rbp
0000000000013f7e         pop        r12
0000000000013f80         pop        r13
0000000000013f82         pop        r14
0000000000013f84         pop        r15
0000000000013f86         ret
                        ; endp

                     loc_13f87:
0000000000013f87         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_array+198
                        ; endp
0000000000013f8c         align      16                                          ; End of unwind block (FDE at 0x263fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     expand_bkref_cache:
0000000000013f90         push       r15                                         ; Begin of unwind block (FDE at 0x26448), CODE XREF=check_arrival+928, check_arrival+1614
0000000000013f92         push       r14
0000000000013f94         push       r13
0000000000013f96         push       r12
0000000000013f98         mov        r12, rdx
0000000000013f9b         push       rbp
0000000000013f9c         push       rbx
0000000000013f9d         mov        rbx, rdi
0000000000013fa0         mov        rbp, rsi
0000000000013fa3         xor        esi, esi
0000000000013fa5         sub        rsp, 0x78
0000000000013fa9         mov        rdi, qword [rdi+0xc8]
0000000000013fb0         mov        rax, qword [fs:0x28]
0000000000013fb9         mov        qword [rsp+0xa8+var_40], rax
0000000000013fbe         xor        eax, eax
0000000000013fc0         mov        qword [rsp+0xa8+var_88], rcx
0000000000013fc5         mov        dword [rsp+0xa8+var_7C], r8d
0000000000013fca         mov        rdx, rdi

                     loc_13fcd:
0000000000013fcd         cmp        rsi, rdx                                    ; CODE XREF=expand_bkref_cache+247
0000000000013fd0         jge        loc_14027

0000000000013fd2         lea        rax, qword [rsi+rdx]
0000000000013fd6         mov        r8, qword [rbx+0xd8]
0000000000013fdd         mov        rcx, rax
0000000000013fe0         shr        rcx, 0x3f
0000000000013fe4         add        rcx, rax
0000000000013fe7         sar        rcx, 0x1
0000000000013fea         lea        rax, qword [rcx+rcx*4]
0000000000013fee         cmp        r12, qword [r8+rax*8+8]
0000000000013ff3         jle        loc_14022

0000000000013ff5         jmp        loc_14078
0000000000013ffa         align      16384

                     loc_14000:
0000000000014000         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=expand_bkref_cache+149
0000000000014004         mov        rax, rdx
0000000000014007         shr        rax, 0x3f
000000000001400b         add        rax, rdx
000000000001400e         sar        rax, 0x1
0000000000014011         lea        rdx, qword [rax+rax*4]
0000000000014015         mov        r9, rax
0000000000014018         cmp        r12, qword [r8+rdx*8+8]
000000000001401d         jg         loc_14080

000000000001401f         mov        rcx, rax

                     loc_14022:
0000000000014022         cmp        rsi, rcx                                    ; CODE XREF=expand_bkref_cache+99
0000000000014025         jl         loc_14000

                     loc_14027:
0000000000014027         cmp        rdi, rsi                                    ; CODE XREF=expand_bkref_cache+64
000000000001402a         jle        loc_1404d

000000000001402c         mov        rcx, qword [rbx+0xd8]
0000000000014033         lea        rax, qword [rsi+rsi*4]
0000000000014037         shl        rax, 0x3
000000000001403b         cmp        qword [rcx+rax+8], r12
0000000000014040         mov        qword [rsp+0xa8+var_78], rax
0000000000014045         jne        loc_1404d

0000000000014047         cmp        rsi, 0xffffffffffffffff
000000000001404b         jne        loc_14090

                     loc_1404d:
000000000001404d         xor        eax, eax                                    ; CODE XREF=expand_bkref_cache+154, expand_bkref_cache+181, expand_bkref_cache+514

                     loc_1404f:
000000000001404f         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=expand_bkref_cache+833, expand_bkref_cache+854, expand_bkref_cache+865, expand_bkref_cache+872, expand_bkref_cache+888
0000000000014054         xor        rbx, qword [fs:0x28]
000000000001405d         jne        loc_14329

0000000000014063         add        rsp, 0x78
0000000000014067         pop        rbx
0000000000014068         pop        rbp
0000000000014069         pop        r12
000000000001406b         pop        r13
000000000001406d         pop        r14
000000000001406f         pop        r15
0000000000014071         ret
                        ; endp
0000000000014072         align      8

                     loc_14078:
0000000000014078         mov        r9, rcx                                     ; CODE XREF=expand_bkref_cache+101
000000000001407b         mov        rcx, rdx
000000000001407e         nop

                     loc_14080:
0000000000014080         lea        rsi, qword [r9+1]                           ; CODE XREF=expand_bkref_cache+141
0000000000014084         mov        rdx, rcx
0000000000014087         jmp        loc_13fcd
000000000001408c         align      16

                     loc_14090:
0000000000014090         lea        rax, qword [rbp+0x10]                       ; CODE XREF=expand_bkref_cache+187
0000000000014094         mov        r13, qword [rbx+0x98]
000000000001409b         mov        qword [rsp+0xa8+var_A8], rax
000000000001409f         lea        rax, qword [rsp+0xa8+var_5C]
00000000000140a4         mov        qword [rsp+0xa8+var_70], rax
00000000000140a9         lea        rax, qword [rsp+0xa8+var_58]
00000000000140ae         mov        qword [rsp+0xa8+var_98], rax

                     loc_140b3:
00000000000140b3         mov        rax, qword [rsp+0xa8+var_78]                ; CODE XREF=expand_bkref_cache+737
00000000000140b8         lea        r15, qword [rcx+rax]
00000000000140bc         jmp        loc_14198
00000000000140c1         align      8

                     loc_140c8:
00000000000140c8         mov        rax, qword [r13+0x18]                       ; CODE XREF=expand_bkref_cache+564
00000000000140cc         mov        rcx, qword [rax+r10*8]
00000000000140d0         mov        r10, qword [rbx+0xb8]
00000000000140d7         lea        rax, qword [r14*8]
00000000000140df         mov        qword [rsp+0xa8+var_90], rax
00000000000140e4         add        r10, rax
00000000000140e7         mov        qword [rsp+0xa8+var_A0], rcx
00000000000140ec         mov        r9, qword [r10]
00000000000140ef         test       r9, r9
00000000000140f2         je         loc_14280

00000000000140f8         mov        rdi, qword [r9+0x10]
00000000000140fc         lea        rsi, qword [r9+0x18]
0000000000014100         mov        rdx, rcx
0000000000014103         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000014108         test       rax, rax
000000000001410b         jne        loc_14189

000000000001410d         mov        rdi, qword [rsp+0xa8+var_98]
0000000000014112         lea        rsi, qword [r9+8]
0000000000014116         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000001411b         mov        rsi, qword [rsp+0xa8+var_A0]
0000000000014120         mov        rdi, qword [rsp+0xa8+var_98]
0000000000014125         mov        dword [rsp+0xa8+var_5C], eax
0000000000014129         call       re_node_set_insert                          ; re_node_set_insert
000000000001412e         mov        edx, dword [rsp+0xa8+var_5C]
0000000000014132         test       edx, edx
0000000000014134         jne        loc_142d6

000000000001413a         cmp        al, 0x1
000000000001413c         jne        loc_142d6

0000000000014142         mov        r10, qword [rsp+0xa8+var_90]
0000000000014147         add        r10, qword [rbx+0xb8]

                     loc_1414e:
000000000001414e         mov        rdx, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+816
0000000000014153         mov        rdi, qword [rsp+0xa8+var_70]
0000000000014158         mov        rsi, r13
000000000001415b         mov        qword [rsp+0xa8+var_A0], r10
0000000000014160         call       re_acquire_state                            ; re_acquire_state
0000000000014165         mov        r10, qword [rsp+0xa8+var_A0]
000000000001416a         mov        rdi, qword [rsp+0xa8+var_48]
000000000001416f         mov        qword [r10], rax
0000000000014172         call       sub_2a10                                    ; sub_2a10
0000000000014177         mov        rax, qword [rbx+0xb8]
000000000001417e         cmp        qword [rax+r14*8], 0x0
0000000000014183         je         loc_142c5

                     loc_14189:
0000000000014189         add        r15, 0x28                                   ; CODE XREF=expand_bkref_cache+379, expand_bkref_cache+545, expand_bkref_cache+607, expand_bkref_cache+827
000000000001418d         cmp        byte [r15-8], 0x0
0000000000014192         je         loc_1404d

                     loc_14198:
0000000000014198         mov        r10, qword [r15]                            ; CODE XREF=expand_bkref_cache+300
000000000001419b         mov        r9, qword [rbp+8]
000000000001419f         mov        rsi, qword [rsp+0xa8+var_A8]
00000000000141a3         mov        rdx, r10
00000000000141a6         mov        rdi, r9
00000000000141a9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000141ae         test       rax, rax
00000000000141b1         je         loc_14189

00000000000141b3         mov        r8, qword [r15+0x18]
00000000000141b7         add        r8, r12
00000000000141ba         mov        r14, r8
00000000000141bd         sub        r14, qword [r15+0x10]
00000000000141c1         cmp        r12, r14
00000000000141c4         jne        loc_140c8

00000000000141ca         mov        rcx, qword [r13+0x28]
00000000000141ce         lea        rax, qword [r10+r10*2]
00000000000141d2         mov        rsi, qword [rsp+0xa8+var_A8]
00000000000141d6         mov        rdi, r9
00000000000141d9         lea        rax, qword [rcx+rax*8]
00000000000141dd         mov        rax, qword [rax+0x10]
00000000000141e1         mov        r14, qword [rax]
00000000000141e4         mov        rdx, r14
00000000000141e7         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000141ec         test       rax, rax
00000000000141ef         jne        loc_14189

00000000000141f1         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000141f6         mov        qword [rsp+0xa8+var_58], 0x1
00000000000141ff         mov        qword [rsp+0xa8+var_50], 0x1
0000000000014208         call       j_malloc                                    ; malloc
000000000001420d         test       rax, rax
0000000000014210         mov        qword [rsp+0xa8+var_48], rax
0000000000014215         je         loc_1430d

000000000001421b         mov        qword [rax], r14
000000000001421e         xor        eax, eax

                     loc_14220:
0000000000014220         mov        r15, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+916
0000000000014225         mov        rdx, qword [rsp+0xa8+var_88]
000000000001422a         mov        rdi, r13
000000000001422d         mov        ecx, dword [rsp+0xa8+var_7C]
0000000000014231         mov        dword [rsp+0xa8+var_5C], eax
0000000000014235         mov        rsi, r15
0000000000014238         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000001423d         mov        rsi, r15
0000000000014240         mov        rdi, rbp
0000000000014243         mov        r14d, eax
0000000000014246         call       re_node_set_merge                           ; re_node_set_merge
000000000001424b         mov        rdi, qword [rsp+0xa8+var_48]
0000000000014250         mov        r15d, eax
0000000000014253         call       sub_2a10                                    ; sub_2a10
0000000000014258         mov        eax, dword [rsp+0xa8+var_5C]
000000000001425c         mov        edx, r14d
000000000001425f         or         edx, r15d
0000000000014262         or         edx, eax
0000000000014264         jne        loc_142f6

000000000001426a         mov        rcx, qword [rbx+0xd8]
0000000000014271         jmp        loc_140b3
0000000000014276         align      128

                     loc_14280:
0000000000014280         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=expand_bkref_cache+354
0000000000014285         mov        qword [rsp+0xa8+var_90], r10
000000000001428a         mov        qword [rsp+0xa8+var_58], 0x1
0000000000014293         mov        qword [rsp+0xa8+var_50], 0x1
000000000001429c         call       j_malloc                                    ; malloc
00000000000142a1         test       rax, rax
00000000000142a4         mov        qword [rsp+0xa8+var_48], rax
00000000000142a9         je         loc_142ec

00000000000142ab         mov        rdi, qword [rsp+0xa8+var_A0]
00000000000142b0         mov        dword [rsp+0xa8+var_5C], 0x0
00000000000142b8         mov        r10, qword [rsp+0xa8+var_90]
00000000000142bd         mov        qword [rax], rdi
00000000000142c0         jmp        loc_1414e

                     loc_142c5:
00000000000142c5         mov        eax, dword [rsp+0xa8+var_5C]                ; CODE XREF=expand_bkref_cache+499
00000000000142c9         test       eax, eax
00000000000142cb         je         loc_14189

00000000000142d1         jmp        loc_1404f

                     loc_142d6:
00000000000142d6         mov        rdi, qword [rsp+0xa8+var_48]                ; CODE XREF=expand_bkref_cache+420, expand_bkref_cache+428
00000000000142db         call       sub_2a10                                    ; sub_2a10
00000000000142e0         mov        eax, dword [rsp+0xa8+var_5C]
00000000000142e4         test       eax, eax
00000000000142e6         jne        loc_1404f

                     loc_142ec:
00000000000142ec         mov        eax, 0xc                                    ; CODE XREF=expand_bkref_cache+793
00000000000142f1         jmp        loc_1404f

                     loc_142f6:
00000000000142f6         test       eax, eax                                    ; CODE XREF=expand_bkref_cache+724
00000000000142f8         jne        loc_1404f

00000000000142fe         test       r14d, r14d
0000000000014301         mov        eax, r14d
0000000000014304         cmove      eax, r15d
0000000000014308         jmp        loc_1404f

                     loc_1430d:
000000000001430d         mov        qword [rsp+0xa8+var_50], 0x0                ; CODE XREF=expand_bkref_cache+645
0000000000014316         mov        qword [rsp+0xa8+var_58], 0x0
000000000001431f         mov        eax, 0xc
0000000000014324         jmp        loc_14220

                     loc_14329:
0000000000014329         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=expand_bkref_cache+205
                        ; endp
000000000001432e         align      16                                          ; End of unwind block (FDE at 0x26448)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     check_subexp_matching_top.isra.18:
0000000000014330         push       r15                                         ; Begin of unwind block (FDE at 0x26494), CODE XREF=transit_state_bkref.isra.34+2056, merge_state_with_log+417, re_search_internal+5535
0000000000014332         push       r14
0000000000014334         push       r13
0000000000014336         push       r12
0000000000014338         push       rbp
0000000000014339         push       rbx
000000000001433a         sub        rsp, 0x28
000000000001433e         cmp        qword [rsi], 0x0
0000000000014342         mov        r13, qword [rdi+0x98]
0000000000014349         jle        loc_14410

000000000001434f         mov        r14, rdx
0000000000014352         mov        r12, rsi
0000000000014355         mov        r15, rdi
0000000000014358         xor        ebx, ebx
000000000001435a         jmp        loc_1436e
000000000001435c         align      32

                     loc_14360:
0000000000014360         add        rbx, 0x1                                    ; CODE XREF=check_subexp_matching_top.isra.18+84, check_subexp_matching_top.isra.18+93, check_subexp_matching_top.isra.18+106
0000000000014364         cmp        rbx, qword [r12]
0000000000014368         jge        loc_14410

                     loc_1436e:
000000000001436e         mov        rax, qword [r14]                            ; CODE XREF=check_subexp_matching_top.isra.18+42, check_subexp_matching_top.isra.18+211
0000000000014371         mov        rbp, qword [rax+rbx*8]
0000000000014375         mov        rax, rbp
0000000000014378         shl        rax, 0x4
000000000001437c         add        rax, qword [r13]
0000000000014380         cmp        byte [rax+8], 0x8
0000000000014384         jne        loc_14360

0000000000014386         mov        rax, qword [rax]
0000000000014389         cmp        rax, 0x3f
000000000001438d         jg         loc_14360

000000000001438f         mov        rsi, qword [r13+0xa0]
0000000000014396         bt         rsi, rax
000000000001439a         jae        loc_14360

000000000001439c         mov        r8, qword [r15+0xe8]
00000000000143a3         cmp        r8, qword [r15+0xf0]
00000000000143aa         mov        r9, qword [r15+0xf8]
00000000000143b1         je         loc_14428

                     loc_143b3:
00000000000143b3         mov        esi, 0x30                                   ; argument "__size" for method j_calloc, CODE XREF=check_subexp_matching_top.isra.18+316
00000000000143b8         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
00000000000143bd         mov        qword [rsp+0x58+var_48], r9
00000000000143c2         mov        qword [rsp+0x58+var_50], r8
00000000000143c7         mov        qword [rsp+0x58+var_40], rcx
00000000000143cc         call       j_calloc                                    ; calloc
00000000000143d1         mov        r8, qword [rsp+0x58+var_50]
00000000000143d6         mov        r9, qword [rsp+0x58+var_48]
00000000000143db         test       rax, rax
00000000000143de         mov        qword [r9+r8*8], rax
00000000000143e2         je         loc_14421

00000000000143e4         add        r8, 0x1
00000000000143e8         add        rbx, 0x1
00000000000143ec         mov        rcx, qword [rsp+0x58+var_40]
00000000000143f1         mov        qword [r15+0xe8], r8
00000000000143f8         cmp        rbx, qword [r12]
00000000000143fc         mov        qword [rax+8], rbp
0000000000014400         mov        qword [rax], rcx
0000000000014403         jl         loc_1436e

0000000000014409         nop        dword [rax]

                     loc_14410:
0000000000014410         xor        eax, eax                                    ; CODE XREF=check_subexp_matching_top.isra.18+25, check_subexp_matching_top.isra.18+56

                     loc_14412:
0000000000014412         add        rsp, 0x28                                   ; CODE XREF=check_subexp_matching_top.isra.18+246
0000000000014416         pop        rbx
0000000000014417         pop        rbp
0000000000014418         pop        r12
000000000001441a         pop        r13
000000000001441c         pop        r14
000000000001441e         pop        r15
0000000000014420         ret
                        ; endp

                     loc_14421:
0000000000014421         mov        eax, 0xc                                    ; CODE XREF=check_subexp_matching_top.isra.18+178, check_subexp_matching_top.isra.18+288
0000000000014426         jmp        loc_14412

                     loc_14428:
0000000000014428         lea        rax, qword [r8+r8]                          ; CODE XREF=check_subexp_matching_top.isra.18+129
000000000001442c         mov        rsi, r8
000000000001442f         mov        rdi, r9                                     ; argument "__ptr" for method j_realloc
0000000000014432         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000014436         mov        qword [rsp+0x58+var_50], rcx
000000000001443b         mov        qword [rsp+0x58+var_48], rax
0000000000014440         call       j_realloc                                   ; realloc
0000000000014445         test       rax, rax
0000000000014448         mov        r9, rax
000000000001444b         mov        rcx, qword [rsp+0x58+var_50]
0000000000014450         je         loc_14421

0000000000014452         mov        qword [r15+0xf8], rax
0000000000014459         mov        rax, qword [rsp+0x58+var_48]
000000000001445e         mov        r8, qword [r15+0xe8]
0000000000014465         mov        qword [r15+0xf0], rax
000000000001446c         jmp        loc_143b3
0000000000014471         align      128                                         ; End of unwind block (FDE at 0x26494)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_context_at:
0000000000014480         push       rbp                                         ; Begin of unwind block (FDE at 0x264e0), CODE XREF=check_node_accept+109, check_halt_state_context.isra.20+22, re_string_reconstruct+201, re_string_reconstruct+805, re_string_reconstruct+1635, check_arrival+192, check_arrival+962, check_arrival+1179, transit_state_bkref.isra.34+265, transit_state_bkref.isra.34+1092, merge_state_with_log+222
0000000000014481         push       rbx
0000000000014482         mov        rbp, rdi
0000000000014485         sub        rsp, 0x8
0000000000014489         test       rsi, rsi
000000000001448c         js         loc_144e0

000000000001448e         cmp        qword [rdi+0x58], rsi
0000000000014492         je         loc_14538

0000000000014498         cmp        dword [rdi+0x90], 0x1
000000000001449f         jle        loc_144f0

00000000000144a1         mov        rax, qword [rdi+0x10]
00000000000144a5         jmp        loc_144ba
00000000000144a7         align      16

                     loc_144b0:
00000000000144b0         sub        rsi, 0x1                                    ; CODE XREF=re_string_context_at+64
00000000000144b4         cmp        rsi, 0xffffffffffffffff
00000000000144b8         je         loc_144e0

                     loc_144ba:
00000000000144ba         mov        ebx, dword [rax+rsi*4]                      ; CODE XREF=re_string_context_at+37
00000000000144bd         cmp        ebx, 0xffffffff
00000000000144c0         je         loc_144b0

00000000000144c2         cmp        byte [rbp+0x8e], 0x0
00000000000144c9         jne        loc_14548

                     loc_144cb:
00000000000144cb         xor        eax, eax                                    ; CODE XREF=re_string_context_at+214
00000000000144cd         cmp        ebx, 0xa
00000000000144d0         je         loc_1451c

                     loc_144d2:
00000000000144d2         add        rsp, 0x8                                    ; CODE XREF=re_string_context_at+147, re_string_context_at+154, re_string_context_at+198, re_string_context_at+225
00000000000144d6         pop        rbx
00000000000144d7         pop        rbp
00000000000144d8         ret
                        ; endp
00000000000144d9         align      32

                     loc_144e0:
00000000000144e0         mov        eax, dword [rbp+0x70]                       ; CODE XREF=re_string_context_at+12, re_string_context_at+56
00000000000144e3         add        rsp, 0x8
00000000000144e7         pop        rbx
00000000000144e8         pop        rbp
00000000000144e9         ret
                        ; endp
00000000000144ea         align      16

                     loc_144f0:
00000000000144f0         mov        rax, qword [rdi+8]                          ; CODE XREF=re_string_context_at+31
00000000000144f4         mov        rcx, qword [rdi+0x80]
00000000000144fb         movzx      eax, byte [rax+rsi]
00000000000144ff         mov        rdx, rax
0000000000014502         sar        rax, 0x6
0000000000014506         mov        rcx, qword [rcx+rax*8]
000000000001450a         mov        eax, 0x1
000000000001450f         bt         rcx, rdx
0000000000014513         jb         loc_144d2

0000000000014515         xor        eax, eax
0000000000014517         cmp        dl, 0xa
000000000001451a         jne        loc_144d2

                     loc_1451c:
000000000001451c         xor        eax, eax                                    ; CODE XREF=re_string_context_at+80
000000000001451e         cmp        byte [rbp+0x8d], 0x0
0000000000014525         setne      al
0000000000014528         add        rsp, 0x8
000000000001452c         add        eax, eax
000000000001452e         pop        rbx
000000000001452f         pop        rbp
0000000000014530         ret
                        ; endp
0000000000014531         align      8

                     loc_14538:
0000000000014538         and        edx, 0x2                                    ; CODE XREF=re_string_context_at+18
000000000001453b         cmp        edx, 0x1
000000000001453e         sbb        eax, eax
0000000000014540         and        eax, 0x2
0000000000014543         add        eax, 0x8
0000000000014546         jmp        loc_144d2

                     loc_14548:
0000000000014548         mov        edi, ebx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_context_at+73
000000000001454a         call       j_iswalnum                                  ; iswalnum
000000000001454f         test       eax, eax
0000000000014551         jne        loc_1455c

0000000000014553         cmp        ebx, 0x5f
0000000000014556         jne        loc_144cb

                     loc_1455c:
000000000001455c         mov        eax, 0x1                                    ; CODE XREF=re_string_context_at+209
0000000000014561         jmp        loc_144d2
0000000000014566         align      16                                          ; End of unwind block (FDE at 0x264e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept:
0000000000014570         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x26524), CODE XREF=check_arrival+495, set_regs+378, sift_states_backward+295
0000000000014574         movzx      ecx, byte [rax+rdx]
0000000000014578         movzx      eax, byte [rsi+8]
000000000001457c         cmp        al, 0x3
000000000001457e         je         loc_14638

0000000000014584         jbe        loc_14620

000000000001458a         cmp        al, 0x5
000000000001458c         je         loc_145a0

000000000001458e         cmp        al, 0x7
0000000000014590         jne        loc_14630

0000000000014596         xor        eax, eax
0000000000014598         test       cl, cl
000000000001459a         js         loc_1462a

                     loc_145a0:
00000000000145a0         cmp        cl, 0xa                                     ; CODE XREF=check_node_accept+28
00000000000145a3         je         loc_14668

00000000000145a9         test       cl, cl
00000000000145ab         jne        loc_145c0

00000000000145ad         mov        rcx, qword [rdi+0x98]
00000000000145b4         xor        eax, eax
00000000000145b6         test       byte [rcx+0xd8], 0x80
00000000000145bd         jne        loc_1462a

00000000000145bf         nop

                     loc_145c0:
00000000000145c0         push       rbx                                         ; CODE XREF=check_node_accept+59, check_node_accept+184, check_node_accept+220, check_node_accept+264
00000000000145c1         mov        ebx, dword [rsi+8]
00000000000145c4         mov        eax, 0x1
00000000000145c9         test       ebx, 0x3ff00
00000000000145cf         je         loc_1461c

00000000000145d1         mov        rsi, rdx
00000000000145d4         mov        edx, dword [rdi+0xa0]
00000000000145da         shr        ebx, 0x8
00000000000145dd         call       re_string_context_at                        ; re_string_context_at
00000000000145e2         mov        ecx, ebx
00000000000145e4         mov        edx, eax
00000000000145e6         and        cx, 0x3ff
00000000000145eb         test       bl, 0x4
00000000000145ee         je         loc_14658

00000000000145f0         xor        eax, eax
00000000000145f2         test       dl, 0x1
00000000000145f5         je         loc_1461c

00000000000145f7         and        ebx, 0x8
00000000000145fa         jne        loc_1461c

                     loc_145fc:
00000000000145fc         test       cl, 0x20                                    ; CODE XREF=check_node_accept+235, check_node_accept+239
00000000000145ff         je         loc_14608

0000000000014601         xor        eax, eax
0000000000014603         test       dl, 0x2
0000000000014606         je         loc_1461c

                     loc_14608:
0000000000014608         shr        edx, 0x3                                    ; CODE XREF=check_node_accept+143
000000000001460b         mov        eax, 0x1
0000000000014610         and        edx, 0x1
0000000000014613         and        ecx, 0x80
0000000000014619         cmovne     eax, edx

                     loc_1461c:
000000000001461c         pop        rbx                                         ; CODE XREF=check_node_accept+95, check_node_accept+133, check_node_accept+138, check_node_accept+150
000000000001461d         ret
                        ; endp
000000000001461e         align      32

                     loc_14620:
0000000000014620         cmp        al, 0x1                                     ; CODE XREF=check_node_accept+20
0000000000014622         jne        loc_14630

0000000000014624         xor        eax, eax
0000000000014626         cmp        byte [rsi], cl
0000000000014628         je         loc_145c0

                     loc_1462a:
000000000001462a         ret                                                    ; CODE XREF=check_node_accept+42, check_node_accept+77
                        ; endp
000000000001462c         align      16

                     loc_14630:
0000000000014630         xor        eax, eax                                    ; CODE XREF=check_node_accept+32, check_node_accept+178
0000000000014632         ret
                        ; endp
0000000000014633         align      8

                     loc_14638:
0000000000014638         mov        r8, qword [rsi]                             ; CODE XREF=check_node_accept+14
000000000001463b         movzx      eax, cl
000000000001463e         sar        rax, 0x6
0000000000014642         mov        r8, qword [r8+rax*8]
0000000000014646         xor        eax, eax
0000000000014648         bt         r8, rcx
000000000001464c         jb         loc_145c0

0000000000014652         ret
                        ; endp
0000000000014654         align      8

                     loc_14658:
0000000000014658         and        ebx, 0x8                                    ; CODE XREF=check_node_accept+126
000000000001465b         je         loc_145fc

000000000001465d         test       al, 0x1
000000000001465f         je         loc_145fc

0000000000014661         xor        eax, eax
0000000000014663         pop        rbx
0000000000014664         ret
                        ; endp
0000000000014665         align      8

                     loc_14668:
0000000000014668         mov        rcx, qword [rdi+0x98]                       ; CODE XREF=check_node_accept+51
000000000001466f         xor        eax, eax
0000000000014671         test       byte [rcx+0xd8], 0x40
0000000000014678         jne        loc_145c0

000000000001467e         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_halt_state_context.isra.20:
0000000000014680         push       r12                                         ; End of unwind block (FDE at 0x26524), Begin of unwind block (FDE at 0x2654c), CODE XREF=re_search_internal+2247, re_search_internal+2620, re_search_internal+3076, re_search_internal+4556, re_search_internal+5591
0000000000014682         mov        r12, rdx
0000000000014685         push       rbp
0000000000014686         push       rbx
0000000000014687         mov        edx, dword [rdi+0xa0]
000000000001468d         mov        rbx, rsi
0000000000014690         mov        rsi, rcx
0000000000014693         mov        rbp, rdi
0000000000014696         call       re_string_context_at                        ; re_string_context_at
000000000001469b         test       rbx, rbx
000000000001469e         jle        loc_14748

00000000000146a4         mov        rdx, qword [rbp+0x98]
00000000000146ab         mov        r11d, eax
00000000000146ae         mov        ebp, eax
00000000000146b0         and        eax, 0x1
00000000000146b3         mov        r9, qword [r12]
00000000000146b7         xor        esi, esi
00000000000146b9         and        ebp, 0x8
00000000000146bc         and        r11d, 0x2
00000000000146c0         mov        r10d, eax
00000000000146c3         mov        r8, qword [rdx]
00000000000146c6         jmp        loc_146d9
00000000000146c8         align      16

                     loc_146d0:
00000000000146d0         add        rsi, 0x1                                    ; CODE XREF=check_halt_state_context.isra.20+120, check_halt_state_context.isra.20+135, check_halt_state_context.isra.20+140, check_halt_state_context.isra.20+151, check_halt_state_context.isra.20+163, check_halt_state_context.isra.20+184
00000000000146d4         cmp        rsi, rbx
00000000000146d7         je         loc_14748

                     loc_146d9:
00000000000146d9         mov        rax, qword [r9+rsi*8]                       ; CODE XREF=check_halt_state_context.isra.20+70
00000000000146dd         mov        rdx, rax
00000000000146e0         shl        rdx, 0x4
00000000000146e4         add        rdx, r8
00000000000146e7         mov        ecx, dword [rdx+8]
00000000000146ea         shr        ecx, 0x8
00000000000146ed         mov        edi, ecx
00000000000146ef         and        di, 0x3ff
00000000000146f4         cmp        byte [rdx+8], 0x2
00000000000146f8         jne        loc_146d0

00000000000146fa         test       di, di
00000000000146fd         je         loc_14725

00000000000146ff         test       cl, 0x4
0000000000014702         je         loc_14730

0000000000014704         test       r10d, r10d
0000000000014707         je         loc_146d0

0000000000014709         and        ecx, 0x8
000000000001470c         jne        loc_146d0

                     loc_1470e:
000000000001470e         test       dil, 0x20                                   ; CODE XREF=check_halt_state_context.isra.20+179
0000000000014712         je         loc_14719

                     loc_14714:
0000000000014714         test       r11d, r11d                                  ; CODE XREF=check_halt_state_context.isra.20+192
0000000000014717         je         loc_146d0

                     loc_14719:
0000000000014719         and        edi, 0x80                                   ; CODE XREF=check_halt_state_context.isra.20+146, check_halt_state_context.isra.20+190
000000000001471f         je         loc_14725

0000000000014721         test       ebp, ebp
0000000000014723         je         loc_146d0

                     loc_14725:
0000000000014725         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+125, check_halt_state_context.isra.20+159
0000000000014726         pop        rbp
0000000000014727         pop        r12
0000000000014729         ret
                        ; endp
000000000001472a         align      16

                     loc_14730:
0000000000014730         and        ecx, 0x8                                    ; CODE XREF=check_halt_state_context.isra.20+130
0000000000014733         je         loc_1470e

0000000000014735         test       r10d, r10d
0000000000014738         jne        loc_146d0

000000000001473a         test       dil, 0x20
000000000001473e         je         loc_14719

0000000000014740         jmp        loc_14714
0000000000014742         align      8

                     loc_14748:
0000000000014748         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+30, check_halt_state_context.isra.20+87
0000000000014749         xor        eax, eax
000000000001474b         pop        rbp
000000000001474c         pop        r12
000000000001474e         ret
                        ; endp
000000000001474f         align      16                                          ; End of unwind block (FDE at 0x2654c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_46: int8_t, -70
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120


                     re_string_reconstruct:
0000000000014750         push       r15                                         ; Begin of unwind block (FDE at 0x26584), CODE XREF=re_search_internal+1510, re_search_internal+4443
0000000000014752         push       r14
0000000000014754         mov        r15, rsi
0000000000014757         push       r13
0000000000014759         push       r12
000000000001475b         mov        r10d, edx
000000000001475e         push       rbp
000000000001475f         push       rbx
0000000000014760         mov        rbp, rsi
0000000000014763         mov        rbx, rdi
0000000000014766         sub        rsp, 0x48
000000000001476a         mov        rax, qword [fs:0x28]
0000000000014773         mov        qword [rsp+0x78+var_40], rax
0000000000014778         xor        eax, eax
000000000001477a         mov        rax, qword [rdi+0x28]
000000000001477e         sub        rbp, rax
0000000000014781         cmp        rax, rsi
0000000000014784         jle        loc_147e6

0000000000014786         cmp        dword [rdi+0x90], 0x1
000000000001478d         jg         loc_148c0

                     loc_14793:
0000000000014793         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+376
0000000000014797         mov        qword [rbx+0x30], 0x0
000000000001479f         mov        rbp, r15
00000000000147a2         mov        qword [rbx+0x28], 0x0
00000000000147aa         mov        qword [rbx+0x38], 0x0
00000000000147b2         mov        byte [rbx+0x8c], 0x0
00000000000147b9         mov        qword [rbx+0x58], rax
00000000000147bd         mov        rax, qword [rbx+0x60]
00000000000147c1         mov        qword [rbx+0x68], rax
00000000000147c5         mov        eax, r10d
00000000000147c8         and        eax, 0x1
00000000000147cb         cmp        eax, 0x1
00000000000147ce         sbb        eax, eax
00000000000147d0         and        eax, 0x2
00000000000147d3         add        eax, 0x4
00000000000147d6         cmp        byte [rbx+0x8b], 0x0
00000000000147dd         mov        dword [rbx+0x70], eax
00000000000147e0         je         loc_148b0

                     loc_147e6:
00000000000147e6         test       rbp, rbp                                    ; CODE XREF=re_string_reconstruct+52, re_string_reconstruct+359
00000000000147e9         je         loc_1484e

00000000000147eb         mov        rax, qword [rbx+0x38]
00000000000147ef         movzx      edx, byte [rbx+0x8c]
00000000000147f6         mov        r8, qword [rbx+0x30]
00000000000147fa         cmp        rax, rbp
00000000000147fd         jle        loc_14920

0000000000014803         test       dl, dl
0000000000014805         jne        loc_14a18

000000000001480b         lea        rsi, qword [rbp-1]
000000000001480f         mov        edx, r10d
0000000000014812         mov        rdi, rbx
0000000000014815         mov        qword [rsp+0x78+var_78], r8
0000000000014819         call       re_string_context_at                        ; re_string_context_at
000000000001481e         mov        r8, qword [rsp+0x78+var_78]
0000000000014822         mov        dword [rbx+0x70], eax
0000000000014825         sub        r8, rbp
0000000000014828         cmp        dword [rbx+0x90], 0x1
000000000001482f         jg         loc_148d0

                     loc_14835:
0000000000014835         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+412
000000000001483c         jne        loc_14be0

0000000000014842         sub        qword [rbx+0x38], rbp
0000000000014846         mov        qword [rbx+0x30], r8

                     loc_1484a:
000000000001484a         add        qword [rbx+8], rbp                          ; CODE XREF=re_string_reconstruct+1150, re_string_reconstruct+1780

                     loc_1484e:
000000000001484e         mov        rax, qword [rbx+0x58]                       ; CODE XREF=re_string_reconstruct+153, re_string_reconstruct+1156
0000000000014852         sub        qword [rbx+0x68], rbp
0000000000014856         mov        qword [rbx+0x28], r15
000000000001485a         sub        rax, rbp
000000000001485d         cmp        dword [rbx+0x90], 0x1
0000000000014864         mov        qword [rbx+0x58], rax
0000000000014868         jle        loc_14908

000000000001486e         cmp        byte [rbx+0x88], 0x0
0000000000014875         mov        rdi, rbx
0000000000014878         je         loc_148f8

000000000001487a         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
000000000001487f         test       eax, eax
0000000000014881         jne        loc_1488d

                     loc_14883:
0000000000014883         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=re_string_reconstruct+429, re_string_reconstruct+457, re_string_reconstruct+1412, re_string_reconstruct+1488, re_string_reconstruct+1656
000000000001488b         xor        eax, eax

                     loc_1488d:
000000000001488d         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=re_string_reconstruct+305
0000000000014892         xor        rcx, qword [fs:0x28]
000000000001489b         jne        loc_14eea

00000000000148a1         add        rsp, 0x48
00000000000148a5         pop        rbx
00000000000148a6         pop        rbp
00000000000148a7         pop        r12
00000000000148a9         pop        r13
00000000000148ab         pop        r14
00000000000148ad         pop        r15
00000000000148af         ret
                        ; endp

                     loc_148b0:
00000000000148b0         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+144
00000000000148b3         mov        qword [rbx+8], rax
00000000000148b7         jmp        loc_147e6
00000000000148bc         align      64

                     loc_148c0:
00000000000148c0         mov        qword [rdi+0x20], 0x0                       ; CODE XREF=re_string_reconstruct+61
00000000000148c8         jmp        loc_14793
00000000000148cd         align      16

                     loc_148d0:
00000000000148d0         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+223
00000000000148d4         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
00000000000148dc         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
00000000000148e0         call       j_memmove                                   ; memmove
00000000000148e5         mov        r8, qword [rbx+0x30]
00000000000148e9         sub        r8, rbp
00000000000148ec         jmp        loc_14835
00000000000148f1         align      8

                     loc_148f8:
00000000000148f8         call       build_wcs_buffer                            ; build_wcs_buffer, CODE XREF=re_string_reconstruct+296
00000000000148fd         jmp        loc_14883
0000000000014902         align      8

                     loc_14908:
0000000000014908         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+280
000000000001490f         jne        loc_14cc0

0000000000014915         mov        qword [rbx+0x30], rax
0000000000014919         jmp        loc_14883
000000000001491e         align      32

                     loc_14920:
0000000000014920         test       dl, dl                                      ; CODE XREF=re_string_reconstruct+173
0000000000014922         jne        loc_14dcd

                     loc_14928:
0000000000014928         movsxd     rdx, dword [rbx+0x90]                       ; CODE XREF=re_string_reconstruct+1696
000000000001492f         mov        qword [rbx+0x30], 0x0
0000000000014937         mov        r11, qword [rbx+0x28]
000000000001493b         cmp        edx, 0x1
000000000001493e         jle        loc_14d28

0000000000014944         cmp        byte [rbx+0x89], 0x0
000000000001494b         jne        loc_14c08

                     loc_14951:
0000000000014951         lea        r14, qword [r11+rax]                        ; CODE XREF=re_string_reconstruct+1244, re_string_reconstruct+1263, re_string_reconstruct+1380
0000000000014955         cmp        r15, r14
0000000000014958         jle        loc_14d9f

000000000001495e         lea        rax, qword [rbx+0x20]
0000000000014962         lea        r13, qword [rsp+0x78+var_54]
0000000000014967         mov        qword [rsp+0x78+var_68], rax
000000000001496c         nop        dword [rax]

                     loc_14970:
0000000000014970         mov        r12, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+624
0000000000014974         mov        rsi, qword [rbx]
0000000000014977         mov        rdi, r13
000000000001497a         mov        rax, qword [rbx+0x20]
000000000001497e         mov        rcx, qword [rsp+0x78+var_68]
0000000000014983         mov        dword [rsp+0x78+var_6C], r10d
0000000000014988         mov        qword [rsp+0x78+var_78], r8
000000000001498c         sub        r12, r14
000000000001498f         add        rsi, r14
0000000000014992         mov        rdx, r12
0000000000014995         mov        qword [rsp+0x78+var_60], rax
000000000001499a         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001499f         lea        rcx, qword [rax-1]
00000000000149a3         mov        edx, dword [rsp+0x78+var_54]
00000000000149a7         mov        r8, qword [rsp+0x78+var_78]
00000000000149ab         mov        r10d, dword [rsp+0x78+var_6C]
00000000000149b0         cmp        rcx, 0xfffffffffffffffc
00000000000149b4         ja         loc_14df5

                     loc_149ba:
00000000000149ba         add        r14, rax                                    ; CODE XREF=re_string_reconstruct+1733
00000000000149bd         cmp        r15, r14
00000000000149c0         jg         loc_14970

00000000000149c2         sub        r14, r15
00000000000149c5         cmp        edx, 0xffffffff
00000000000149c8         mov        r12, r14
00000000000149cb         mov        qword [rbx+0x30], r14
00000000000149cf         je         loc_14da9

                     loc_149d5:
00000000000149d5         cmp        byte [rbx+0x8e], 0x0                        ; CODE XREF=re_string_reconstruct+1850
00000000000149dc         jne        loc_14e49

                     loc_149e2:
00000000000149e2         xor        eax, eax                                    ; CODE XREF=re_string_reconstruct+1805
00000000000149e4         cmp        edx, 0xa
00000000000149e7         jne        loc_149f7

00000000000149e9         xor        eax, eax
00000000000149eb         cmp        byte [rbx+0x8d], 0x0
00000000000149f2         setne      al
00000000000149f5         add        eax, eax

                     loc_149f7:
00000000000149f7         mov        dword [rbx+0x70], eax                       ; CODE XREF=re_string_reconstruct+663, re_string_reconstruct+1816

                     loc_149fa:
00000000000149fa         cmp        r12, 0x0                                    ; CODE XREF=re_string_reconstruct+1643
00000000000149fe         jne        loc_14e1a

                     loc_14a04:
0000000000014a04         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1885
0000000000014a0b         mov        qword [rbx+0x38], r12
0000000000014a0f         jmp        loc_14bcc
0000000000014a14         align      8

                     loc_14a18:
0000000000014a18         mov        r14, qword [rbx+0x18]                       ; CODE XREF=re_string_reconstruct+181
0000000000014a1c         mov        rcx, r8
0000000000014a1f         xor        esi, esi
0000000000014a21         jmp        loc_14a33
0000000000014a23         align      8

                     loc_14a28:
0000000000014a28         jge        loc_14a63                                   ; CODE XREF=re_string_reconstruct+766

0000000000014a2a         lea        rsi, qword [rax+1]

                     loc_14a2e:
0000000000014a2e         cmp        rsi, rcx                                    ; CODE XREF=re_string_reconstruct+771
0000000000014a31         jge        loc_14a58

                     loc_14a33:
0000000000014a33         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=re_string_reconstruct+721
0000000000014a37         mov        rax, rdx
0000000000014a3a         shr        rax, 0x3f
0000000000014a3e         add        rax, rdx
0000000000014a41         sar        rax, 0x1
0000000000014a44         mov        rdx, qword [r14+rax*8]
0000000000014a48         mov        r12, rax
0000000000014a4b         cmp        rdx, rbp
0000000000014a4e         jle        loc_14a28

0000000000014a50         mov        rcx, rax
0000000000014a53         jmp        loc_14a2e
0000000000014a55         align      8

                     loc_14a58:
0000000000014a58         lea        r12, qword [rax+1]                          ; CODE XREF=re_string_reconstruct+737
0000000000014a5c         cmp        rdx, rbp
0000000000014a5f         cmovge     r12, rax

                     loc_14a63:
0000000000014a63         lea        r13, qword [r12-1]                          ; CODE XREF=loc_14a28
0000000000014a68         mov        edx, r10d
0000000000014a6b         mov        rdi, rbx
0000000000014a6e         mov        qword [rsp+0x78+var_78], r8
0000000000014a72         mov        rsi, r13
0000000000014a75         call       re_string_context_at                        ; re_string_context_at
0000000000014a7a         cmp        rbp, r12
0000000000014a7d         mov        dword [rbx+0x70], eax
0000000000014a80         mov        r8, qword [rsp+0x78+var_78]
0000000000014a84         jne        loc_14b08

0000000000014a8a         cmp        rbp, r8
0000000000014a8d         jge        loc_14b08

0000000000014a8f         cmp        qword [r14+r12*8], rbp
0000000000014a93         jne        loc_14b08

0000000000014a95         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove
0000000000014a99         sub        r8, rbp
0000000000014a9c         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
0000000000014aa4         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
0000000000014aa8         call       j_memmove                                   ; memmove
0000000000014aad         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove
0000000000014ab1         mov        rdx, qword [rbx+0x30]
0000000000014ab5         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
0000000000014ab9         sub        rdx, rbp                                    ; argument "__n" for method j_memmove
0000000000014abc         call       j_memmove                                   ; memmove
0000000000014ac1         mov        rax, qword [rbx+0x30]
0000000000014ac5         sub        qword [rbx+0x38], rbp
0000000000014ac9         sub        rax, rbp
0000000000014acc         test       rax, rax
0000000000014acf         mov        qword [rbx+0x30], rax
0000000000014ad3         jle        loc_14af8

0000000000014ad5         mov        rcx, qword [rbx+0x18]
0000000000014ad9         xor        eax, eax
0000000000014adb         lea        rsi, qword [rcx+rbp*8]
0000000000014adf         nop

                     loc_14ae0:
0000000000014ae0         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=re_string_reconstruct+931
0000000000014ae4         sub        rdx, rbp
0000000000014ae7         mov        qword [rcx+rax*8], rdx
0000000000014aeb         add        rax, 0x1
0000000000014aef         cmp        qword [rbx+0x30], rax
0000000000014af3         jg         loc_14ae0

0000000000014af5         nop        dword [rax]

                     loc_14af8:
0000000000014af8         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+899, re_string_reconstruct+1587
0000000000014aff         jmp        loc_14bcc
0000000000014b04         align      8

                     loc_14b08:
0000000000014b08         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+820, re_string_reconstruct+829, re_string_reconstruct+835
0000000000014b0c         mov        byte [rbx+0x8c], 0x0
0000000000014b13         add        rax, rbp
0000000000014b16         sub        rax, r15
0000000000014b19         mov        qword [rbx+0x58], rax
0000000000014b1d         mov        rax, qword [rbx+0x60]
0000000000014b21         add        rax, rbp
0000000000014b24         sub        rax, r15
0000000000014b27         test       r12, r12
0000000000014b2a         mov        qword [rbx+0x68], rax
0000000000014b2e         jle        loc_14b53

0000000000014b30         cmp        qword [r14+r12*8-8], rbp
0000000000014b35         je         loc_14b4b

0000000000014b37         jmp        loc_14b53
0000000000014b39         align      64

                     loc_14b40:
0000000000014b40         cmp        qword [r14+r13*8-8], rbp                    ; CODE XREF=re_string_reconstruct+1025
0000000000014b45         jne        loc_14b53

0000000000014b47         sub        r13, 0x1

                     loc_14b4b:
0000000000014b4b         test       r13, r13                                    ; CODE XREF=re_string_reconstruct+997
0000000000014b4e         mov        r12, r13
0000000000014b51         jne        loc_14b40

                     loc_14b53:
0000000000014b53         cmp        r12, r8                                     ; CODE XREF=re_string_reconstruct+990, re_string_reconstruct+999, re_string_reconstruct+1013
0000000000014b56         jge        loc_14d88

0000000000014b5c         mov        rax, qword [rbx+0x10]
0000000000014b60         jmp        loc_14b75
0000000000014b62         align      8

                     loc_14b68:
0000000000014b68         add        r12, 0x1                                    ; CODE XREF=re_string_reconstruct+1066
0000000000014b6c         cmp        r12, r8
0000000000014b6f         je         loc_14d90

                     loc_14b75:
0000000000014b75         cmp        dword [rax+r12*4], 0xffffffff               ; CODE XREF=re_string_reconstruct+1040
0000000000014b7a         je         loc_14b68

                     loc_14b7c:
0000000000014b7c         mov        rdx, qword [r14+r12*8]                      ; CODE XREF=loc_14d88
0000000000014b80         sub        rdx, rbp
0000000000014b83         cmp        rdx, 0x0
0000000000014b87         mov        qword [rbx+0x30], rdx
0000000000014b8b         je         loc_14bc1

0000000000014b8d         jle        loc_14baf

0000000000014b8f         mov        rax, qword [rbx+0x10]
0000000000014b93         lea        rcx, qword [rax+rdx*4]
0000000000014b97         nop        word [rax+rax]

                     loc_14ba0:
0000000000014ba0         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1117
0000000000014ba6         add        rax, 0x4
0000000000014baa         cmp        rcx, rax
0000000000014bad         jne        loc_14ba0

                     loc_14baf:
0000000000014baf         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1085
0000000000014bb3         mov        esi, 0xff                                   ; argument "__c" for method j_memset
0000000000014bb8         call       j_memset                                    ; memset
0000000000014bbd         mov        rdx, qword [rbx+0x30]

                     loc_14bc1:
0000000000014bc1         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1083, re_string_reconstruct+1610
0000000000014bc8         mov        qword [rbx+0x38], rdx

                     loc_14bcc:
0000000000014bcc         test       al, al                                      ; CODE XREF=re_string_reconstruct+703, re_string_reconstruct+943, re_string_reconstruct+1199
0000000000014bce         je         loc_1484a

0000000000014bd4         jmp        loc_1484e
0000000000014bd9         align      32

                     loc_14be0:
0000000000014be0         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+236
0000000000014be4         mov        rdx, r8                                     ; argument "__n" for method j_memmove
0000000000014be7         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
0000000000014beb         call       j_memmove                                   ; memmove
0000000000014bf0         movzx      eax, byte [rbx+0x8b]
0000000000014bf7         sub        qword [rbx+0x30], rbp
0000000000014bfb         sub        qword [rbx+0x38], rbp
0000000000014bff         jmp        loc_14bcc
0000000000014c01         align      8

                     loc_14c08:
0000000000014c08         mov        rcx, qword [rbx]                            ; CODE XREF=re_string_reconstruct+507
0000000000014c0b         mov        rdi, rbp
0000000000014c0e         sub        rdi, rdx
0000000000014c11         mov        rdx, rdi
0000000000014c14         lea        r12, qword [rcx+r11]
0000000000014c18         add        rdx, r12
0000000000014c1b         lea        rsi, qword [r12+rbp-1]
0000000000014c20         cmp        rcx, rdx
0000000000014c23         cmovb      rcx, rdx
0000000000014c27         cmp        rcx, rsi
0000000000014c2a         jbe        loc_14c45

0000000000014c2c         jmp        loc_14951
0000000000014c31         align      8

                     loc_14c38:
0000000000014c38         sub        rsi, 0x1                                    ; CODE XREF=re_string_reconstruct+1278
0000000000014c3c         cmp        rcx, rsi
0000000000014c3f         ja         loc_14951

                     loc_14c45:
0000000000014c45         movzx      edx, byte [rsi]                             ; CODE XREF=re_string_reconstruct+1242
0000000000014c48         and        edx, 0xffffffc0
0000000000014c4b         cmp        dl, 0x80
0000000000014c4e         je         loc_14c38

0000000000014c50         mov        rdx, qword [rbx+0x58]
0000000000014c54         mov        rcx, qword [rbx+0x78]
0000000000014c58         mov        r14, rsi
0000000000014c5b         add        rdx, r12
0000000000014c5e         sub        rdx, rsi
0000000000014c61         test       rcx, rcx
0000000000014c64         jne        loc_14eb2

                     loc_14c6a:
0000000000014c6a         lea        r13, qword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1941
0000000000014c6f         add        r12, rbp
0000000000014c72         lea        rcx, qword [rsp+0x78+var_50]
0000000000014c77         sub        r12, r14
0000000000014c7a         mov        dword [rsp+0x78+var_6C], r10d
0000000000014c7f         mov        qword [rsp+0x78+var_78], r8
0000000000014c83         mov        rdi, r13
0000000000014c86         mov        qword [rsp+0x78+var_50], 0x0
0000000000014c8f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000014c94         cmp        r12, rax
0000000000014c97         mov        r8, qword [rsp+0x78+var_78]
0000000000014c9b         mov        r10d, dword [rsp+0x78+var_6C]
0000000000014ca0         ja         loc_14cac

0000000000014ca2         cmp        rax, 0xfffffffffffffffd
0000000000014ca6         jbe        loc_14e71

                     loc_14cac:
0000000000014cac         mov        r11, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1360, re_string_reconstruct+1856
0000000000014cb0         mov        rax, qword [rbx+0x38]
0000000000014cb4         jmp        loc_14951
0000000000014cb9         align      64

                     loc_14cc0:
0000000000014cc0         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=re_string_reconstruct+447
0000000000014cc7         jne        loc_14dc0

0000000000014ccd         mov        rcx, qword [rbx+0x78]
0000000000014cd1         test       rcx, rcx
0000000000014cd4         je         loc_14883

0000000000014cda         cmp        qword [rbx+0x40], rax
0000000000014cde         mov        rdx, qword [rbx+0x30]
0000000000014ce2         cmovle     rax, qword [rbx+0x40]
0000000000014ce7         cmp        rax, rdx
0000000000014cea         jg         loc_14cf8

0000000000014cec         jmp        loc_14d18
0000000000014cee         align      16

                     loc_14cf0:
0000000000014cf0         mov        r15, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1478
0000000000014cf4         mov        rcx, qword [rbx+0x78]

                     loc_14cf8:
0000000000014cf8         mov        rsi, qword [rbx]                            ; CODE XREF=re_string_reconstruct+1434
0000000000014cfb         add        rsi, rdx
0000000000014cfe         movzx      esi, byte [rsi+r15]
0000000000014d03         movzx      esi, byte [rcx+rsi]
0000000000014d07         mov        rcx, qword [rbx+8]
0000000000014d0b         mov        byte [rcx+rdx], sil
0000000000014d0f         add        rdx, 0x1
0000000000014d13         cmp        rax, rdx
0000000000014d16         jne        loc_14cf0

                     loc_14d18:
0000000000014d18         mov        qword [rbx+0x30], rdx                       ; CODE XREF=re_string_reconstruct+1436
0000000000014d1c         mov        qword [rbx+0x38], rdx
0000000000014d20         jmp        loc_14883
0000000000014d25         align      8

                     loc_14d28:
0000000000014d28         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+494
0000000000014d2b         mov        rdx, qword [rbx+0x78]
0000000000014d2f         add        rax, rbp
0000000000014d32         test       rdx, rdx
0000000000014d35         movzx      eax, byte [r11+rax-1]
0000000000014d3b         mov        qword [rbx+0x38], 0x0
0000000000014d43         je         loc_14d49

0000000000014d45         movzx      eax, byte [rdx+rax]

                     loc_14d49:
0000000000014d49         mov        rcx, qword [rbx+0x80]                       ; CODE XREF=re_string_reconstruct+1523
0000000000014d50         movzx      edx, al
0000000000014d53         sar        rdx, 0x6
0000000000014d57         mov        rcx, qword [rcx+rdx*8]
0000000000014d5b         mov        edx, 0x1
0000000000014d60         bt         rcx, rax
0000000000014d64         jb         loc_14d80

0000000000014d66         xor        edx, edx
0000000000014d68         cmp        al, 0xa
0000000000014d6a         jne        loc_14d80

0000000000014d6c         xor        edx, edx
0000000000014d6e         cmp        byte [rbx+0x8d], 0x0
0000000000014d75         setne      dl
0000000000014d78         add        edx, edx
0000000000014d7a         nop        word [rax+rax]

                     loc_14d80:
0000000000014d80         mov        dword [rbx+0x70], edx                       ; CODE XREF=re_string_reconstruct+1556, re_string_reconstruct+1562
0000000000014d83         jmp        loc_14af8

                     loc_14d88:
0000000000014d88         jne        loc_14b7c                                   ; CODE XREF=re_string_reconstruct+1030

0000000000014d8e         nop

                     loc_14d90:
0000000000014d90         mov        qword [rbx+0x30], 0x0                       ; CODE XREF=re_string_reconstruct+1055
0000000000014d98         xor        edx, edx
0000000000014d9a         jmp        loc_14bc1

                     loc_14d9f:
0000000000014d9f         sub        r14, r15                                    ; CODE XREF=re_string_reconstruct+520
0000000000014da2         mov        r12, r14
0000000000014da5         mov        qword [rbx+0x30], r14

                     loc_14da9:
0000000000014da9         lea        rsi, qword [r8-1]                           ; CODE XREF=re_string_reconstruct+639
0000000000014dad         mov        edx, r10d
0000000000014db0         mov        rdi, rbx
0000000000014db3         call       re_string_context_at                        ; re_string_context_at
0000000000014db8         mov        dword [rbx+0x70], eax
0000000000014dbb         jmp        loc_149fa

                     loc_14dc0:
0000000000014dc0         mov        rdi, rbx                                    ; CODE XREF=re_string_reconstruct+1399
0000000000014dc3         call       build_upper_buffer                          ; build_upper_buffer
0000000000014dc8         jmp        loc_14883

                     loc_14dcd:
0000000000014dcd         mov        rdx, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+466
0000000000014dd1         mov        byte [rbx+0x8c], 0x0
0000000000014dd8         add        rdx, rbp
0000000000014ddb         sub        rdx, r15
0000000000014dde         mov        qword [rbx+0x58], rdx
0000000000014de2         mov        rdx, qword [rbx+0x60]
0000000000014de6         add        rdx, rbp
0000000000014de9         sub        rdx, r15
0000000000014dec         mov        qword [rbx+0x68], rdx
0000000000014df0         jmp        loc_14928

                     loc_14df5:
0000000000014df5         test       rax, rax                                    ; CODE XREF=re_string_reconstruct+612
0000000000014df8         je         loc_14e6d

0000000000014dfa         test       r12, r12
0000000000014dfd         je         loc_14e6d

0000000000014dff         mov        rax, qword [rbx]
0000000000014e02         movzx      edx, byte [rax+r14]

                     loc_14e07:
0000000000014e07         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=re_string_reconstruct+1823
0000000000014e0c         mov        qword [rbx+0x20], rax
0000000000014e10         mov        eax, 0x1
0000000000014e15         jmp        loc_149ba

                     loc_14e1a:
0000000000014e1a         jle        loc_14e37                                   ; CODE XREF=re_string_reconstruct+686

0000000000014e1c         mov        rax, qword [rbx+0x10]
0000000000014e20         lea        rdx, qword [rax+r12*4]
0000000000014e24         nop        dword [rax]

                     loc_14e28:
0000000000014e28         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1765
0000000000014e2e         add        rax, 0x4
0000000000014e32         cmp        rdx, rax
0000000000014e35         jne        loc_14e28

                     loc_14e37:
0000000000014e37         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=loc_14e1a
0000000000014e3e         jne        loc_14e98

0000000000014e40         mov        qword [rbx+0x38], r12
0000000000014e44         jmp        loc_1484a

                     loc_14e49:
0000000000014e49         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_reconstruct+652
0000000000014e4b         mov        dword [rsp+0x78+var_78], edx
0000000000014e4e         call       j_iswalnum                                  ; iswalnum
0000000000014e53         test       eax, eax
0000000000014e55         jne        loc_14e63

0000000000014e57         mov        edx, dword [rsp+0x78+var_78]
0000000000014e5a         cmp        edx, 0x5f
0000000000014e5d         jne        loc_149e2

                     loc_14e63:
0000000000014e63         mov        eax, 0x1                                    ; CODE XREF=re_string_reconstruct+1797
0000000000014e68         jmp        loc_149f7

                     loc_14e6d:
0000000000014e6d         xor        edx, edx                                    ; CODE XREF=re_string_reconstruct+1704, re_string_reconstruct+1709
0000000000014e6f         jmp        loc_14e07

                     loc_14e71:
0000000000014e71         mov        edx, dword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1366
0000000000014e75         sub        rax, r12
0000000000014e78         mov        qword [rbx+0x20], 0x0
0000000000014e80         mov        r12, rax
0000000000014e83         mov        qword [rbx+0x30], rax
0000000000014e87         cmp        edx, 0xffffffff
0000000000014e8a         jne        loc_149d5

0000000000014e90         jmp        loc_14cac
0000000000014e95         align      8

                     loc_14e98:
0000000000014e98         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1774
0000000000014e9c         mov        rdx, r12                                    ; argument "__n" for method j_memset
0000000000014e9f         mov        esi, 0xff                                   ; argument "__c" for method j_memset
0000000000014ea4         call       j_memset                                    ; memset
0000000000014ea9         mov        r12, qword [rbx+0x30]
0000000000014ead         jmp        loc_14a04

                     loc_14eb2:
0000000000014eb2         cmp        rdx, 0x6                                    ; CODE XREF=re_string_reconstruct+1300
0000000000014eb6         mov        edi, 0x6
0000000000014ebb         lea        r11, qword [rsp+0x78+var_46]
0000000000014ec0         cmovle     rdi, rdx
0000000000014ec4         sub        edi, 0x1
0000000000014ec7         test       edi, edi
0000000000014ec9         movsxd     rax, edi
0000000000014ecc         js         loc_14ee2

                     loc_14ece:
0000000000014ece         movzx      edi, byte [rsi+rax]                         ; CODE XREF=re_string_reconstruct+1936
0000000000014ed2         movzx      edi, byte [rcx+rdi]
0000000000014ed6         mov        byte [r11+rax], dil
0000000000014eda         sub        rax, 0x1
0000000000014ede         test       eax, eax
0000000000014ee0         jns        loc_14ece

                     loc_14ee2:
0000000000014ee2         mov        rsi, r11                                    ; CODE XREF=re_string_reconstruct+1916
0000000000014ee5         jmp        loc_14c6a

                     loc_14eea:
0000000000014eea         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_string_reconstruct+331
                        ; endp
0000000000014eef         align      16                                          ; End of unwind block (FDE at 0x26584)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     sub_epsilon_src_nodes:
0000000000014ef0         push       r15                                         ; Begin of unwind block (FDE at 0x265d4), CODE XREF=update_cur_sifted_state+1100, update_cur_sifted_state+1290, update_cur_sifted_state+1448
0000000000014ef2         push       r14
0000000000014ef4         mov        r14, rdx
0000000000014ef7         push       r13
0000000000014ef9         push       r12
0000000000014efb         lea        rdx, qword [rsi+rsi*2]
0000000000014eff         push       rbp
0000000000014f00         push       rbx
0000000000014f01         pxor       xmm0, xmm0
0000000000014f05         sub        rsp, 0x48
0000000000014f09         mov        rax, qword [fs:0x28]
0000000000014f12         mov        qword [rsp+0x78+var_40], rax
0000000000014f17         xor        eax, eax
0000000000014f19         mov        rax, qword [rdi+0x38]
0000000000014f1d         mov        qword [rsp+0x78+var_48], 0x0
0000000000014f26         movaps     xmmword [rsp+0x78+var_58], xmm0
0000000000014f2b         mov        qword [rsp+0x78+var_68], rcx
0000000000014f30         lea        rbp, qword [rax+rdx*8]
0000000000014f34         mov        r10, qword [rbp+8]
0000000000014f38         test       r10, r10
0000000000014f3b         jle        loc_15122

0000000000014f41         lea        rax, qword [rsp+0x78+var_58]
0000000000014f46         mov        r12, rdi
0000000000014f49         mov        r13, rsi
0000000000014f4c         xor        ebx, ebx
0000000000014f4e         mov        qword [rsp+0x78+var_60], rax
0000000000014f53         jmp        loc_14fad
0000000000014f55         align      8

                     loc_14f58:
0000000000014f58         test       rax, rax                                    ; CODE XREF=sub_epsilon_src_nodes+283
0000000000014f5b         jne        loc_15038

0000000000014f61         mov        rdi, qword [r14+8]
0000000000014f65         lea        rsi, qword [r14+0x10]
0000000000014f69         mov        rdx, r8
0000000000014f6c         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000014f71         test       rax, rax
0000000000014f74         je         loc_15038

                     loc_14f7a:
0000000000014f7a         mov        rdx, qword [r12+0x38]                       ; CODE XREF=sub_epsilon_src_nodes+313, sub_epsilon_src_nodes+386
0000000000014f7f         mov        rsi, qword [rsp+0x78+var_68]
0000000000014f84         mov        rdi, qword [rsp+0x78+var_60]
0000000000014f89         add        rdx, r9
0000000000014f8c         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
0000000000014f91         test       eax, eax
0000000000014f93         jne        loc_15110

0000000000014f99         mov        r10, qword [rbp+8]
0000000000014f9d         nop        dword [rax]

                     loc_14fa0:
0000000000014fa0         add        rbx, 0x1                                    ; CODE XREF=sub_epsilon_src_nodes+200, sub_epsilon_src_nodes+217, sub_epsilon_src_nodes+292, sub_epsilon_src_nodes+319, sub_epsilon_src_nodes+335, sub_epsilon_src_nodes+358, sub_epsilon_src_nodes+380
0000000000014fa4         cmp        r10, rbx
0000000000014fa7         jle        loc_15080

                     loc_14fad:
0000000000014fad         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+99
0000000000014fb1         mov        rax, qword [rax+rbx*8]
0000000000014fb5         cmp        r13, rax
0000000000014fb8         je         loc_14fa0

0000000000014fba         mov        rdx, rax
0000000000014fbd         shl        rdx, 0x4
0000000000014fc1         add        rdx, qword [r12]
0000000000014fc5         test       byte [rdx+8], 0x8
0000000000014fc9         je         loc_14fa0

0000000000014fcb         lea        r9, qword [rax+rax*2]
0000000000014fcf         mov        rcx, qword [r12+0x28]
0000000000014fd4         lea        r11, qword [rbp+0x10]
0000000000014fd8         mov        rdi, r10
0000000000014fdb         shl        r9, 0x3
0000000000014fdf         mov        rsi, r11
0000000000014fe2         add        rcx, r9
0000000000014fe5         mov        r15, qword [rcx+0x10]
0000000000014fe9         mov        qword [rsp+0x78+var_70], rcx
0000000000014fee         mov        r8, qword [r15]
0000000000014ff1         mov        rdx, r8
0000000000014ff4         mov        qword [rsp+0x78+var_78], r8
0000000000014ff8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000014ffd         mov        rcx, qword [rsp+0x78+var_70]
0000000000015002         mov        r8, qword [rsp+0x78+var_78]
0000000000015006         cmp        qword [rcx+8], 0x1
000000000001500b         jg         loc_14f58

0000000000015011         test       rax, rax
0000000000015014         jne        loc_14fa0

0000000000015016         mov        rdi, qword [r14+8]
000000000001501a         lea        rsi, qword [r14+0x10]
000000000001501e         mov        rdx, r8
0000000000015021         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000015026         test       rax, rax
0000000000015029         jne        loc_14f7a

000000000001502f         jmp        loc_14fa0
0000000000015034         align      8

                     loc_15038:
0000000000015038         mov        r15, qword [r15+8]                          ; CODE XREF=sub_epsilon_src_nodes+107, sub_epsilon_src_nodes+132
000000000001503c         test       r15, r15
000000000001503f         jle        loc_14fa0

0000000000015045         mov        rdx, r15
0000000000015048         mov        rsi, r11
000000000001504b         mov        rdi, r10
000000000001504e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000015053         test       rax, rax
0000000000015056         jne        loc_14fa0

000000000001505c         mov        rdi, qword [r14+8]
0000000000015060         lea        rsi, qword [r14+0x10]
0000000000015064         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000015069         test       rax, rax
000000000001506c         je         loc_14fa0

0000000000015072         jmp        loc_14f7a
0000000000015077         align      128

                     loc_15080:
0000000000015080         xor        r9d, r9d                                    ; CODE XREF=sub_epsilon_src_nodes+183
0000000000015083         test       r10, r10
0000000000015086         lea        r11, qword [rsp+0x78+var_48]
000000000001508b         jle        loc_150dc

000000000001508d         nop        dword [rax]

                     loc_15090:
0000000000015090         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+490
0000000000015094         mov        rdi, qword [rsp+0x78+var_50]
0000000000015099         mov        rsi, r11
000000000001509c         mov        r10, qword [rax+r9*8]
00000000000150a0         mov        rdx, r10
00000000000150a3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000150a8         test       rax, rax
00000000000150ab         jne        loc_150d2

00000000000150ad         lea        rbx, qword [r14+0x10]
00000000000150b1         mov        rdi, qword [r14+8]
00000000000150b5         mov        rsi, rbx
00000000000150b8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000150bd         sub        rax, 0x1
00000000000150c1         mov        rdx, rax
00000000000150c4         js         loc_150d2

00000000000150c6         lea        rdi, qword [r14+8]
00000000000150ca         mov        rsi, rbx
00000000000150cd         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_150d2:
00000000000150d2         add        r9, 0x1                                     ; CODE XREF=sub_epsilon_src_nodes+443, sub_epsilon_src_nodes+468
00000000000150d6         cmp        qword [rbp+8], r9
00000000000150da         jg         loc_15090

                     loc_150dc:
00000000000150dc         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+411

                     loc_150e1:
00000000000150e1         call       sub_2a10                                    ; sub_2a10, CODE XREF=sub_epsilon_src_nodes+564
00000000000150e6         xor        eax, eax

                     loc_150e8:
00000000000150e8         mov        rsi, qword [rsp+0x78+var_40]                ; CODE XREF=sub_epsilon_src_nodes+560
00000000000150ed         xor        rsi, qword [fs:0x28]
00000000000150f6         jne        loc_15126

00000000000150f8         add        rsp, 0x48
00000000000150fc         pop        rbx
00000000000150fd         pop        rbp
00000000000150fe         pop        r12
0000000000015100         pop        r13
0000000000015102         pop        r14
0000000000015104         pop        r15
0000000000015106         ret
                        ; endp
0000000000015107         align      16

                     loc_15110:
0000000000015110         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+163
0000000000015115         mov        dword [rsp+0x78+var_78], eax
0000000000015118         call       sub_2a10                                    ; sub_2a10
000000000001511d         mov        eax, dword [rsp+0x78+var_78]
0000000000015120         jmp        loc_150e8

                     loc_15122:
0000000000015122         xor        edi, edi                                    ; CODE XREF=sub_epsilon_src_nodes+75
0000000000015124         jmp        loc_150e1

                     loc_15126:
0000000000015126         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_epsilon_src_nodes+518
                        ; endp
000000000001512b         align      16                                          ; End of unwind block (FDE at 0x265d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: -88
        ;    var_67: int8_t, -103
        ;    var_68: int8_t, -104
        ;    var_78: -120
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_CC: int32_t, -204
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_E9: int8_t, -233
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304


                     build_trtable:
0000000000015130         push       r15                                         ; Begin of unwind block (FDE at 0x26624), CODE XREF=re_search_internal+4240
0000000000015132         push       r14
0000000000015134         mov        r15, rdi
0000000000015137         push       r13
0000000000015139         push       r12
000000000001513b         mov        edi, 0x3800                                 ; argument "__size" for method j_malloc
0000000000015140         push       rbp
0000000000015141         push       rbx
0000000000015142         sub        rsp, 0x108
0000000000015149         mov        rax, qword [fs:0x28]
0000000000015152         mov        qword [rsp+0x138+var_40], rax
000000000001515a         xor        eax, eax
000000000001515c         mov        qword [rsp+0x138+var_130], rsi
0000000000015161         call       j_malloc                                    ; malloc
0000000000015166         test       rax, rax
0000000000015169         mov        qword [rsp+0x138+var_120], rax
000000000001516e         je         loc_15540

0000000000015174         mov        rax, qword [rsp+0x138+var_120]
0000000000015179         pxor       xmm0, xmm0
000000000001517d         lea        rbx, qword [rax+0x1800]
0000000000015184         mov        rax, qword [rsp+0x138+var_130]
0000000000015189         movaps     xmmword [rsp+0x138+var_A8], xmm0
0000000000015191         mov        qword [rsp+0x138+var_F8], rbx
0000000000015196         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000001519e         cmp        qword [rax+0x10], 0x0
00000000000151a3         mov        qword [rax+0x58], 0x0
00000000000151ab         mov        qword [rax+0x60], 0x0
00000000000151b3         jle        loc_15c2a

00000000000151b9         mov        qword [rsp+0x138+var_108], r15
00000000000151be         xor        ebp, ebp
00000000000151c0         mov        qword [rsp+0x138+var_128], 0x0
00000000000151c9         mov        r15, rbx

                     loc_151cc:
00000000000151cc         mov        rbx, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+275
00000000000151d1         lea        rax, qword [rbx*8]
00000000000151d9         mov        qword [rsp+0x138+var_118], rax
00000000000151de         mov        rax, qword [rsp+0x138+var_130]
00000000000151e3         mov        rax, qword [rax+0x18]
00000000000151e7         mov        r13, qword [rax+rbx*8]
00000000000151eb         mov        rax, qword [rsp+0x138+var_108]
00000000000151f0         shl        r13, 0x4
00000000000151f4         add        r13, qword [rax]
00000000000151f7         movzx      r14d, byte [r13+8]
00000000000151fc         mov        eax, dword [r13+8]
0000000000015200         shr        eax, 0x8
0000000000015203         and        ax, 0x3ff
0000000000015207         cmp        r14d, 0x1
000000000001520b         je         loc_15570

0000000000015211         cmp        r14d, 0x3
0000000000015215         je         loc_159e0

000000000001521b         cmp        r14d, 0x5
000000000001521f         je         loc_158a0

0000000000015225         cmp        r14d, 0x7
0000000000015229         je         loc_15a09

                     loc_1522f:
000000000001522f         mov        rbx, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1231, build_trtable+1316, build_trtable+1694, build_trtable+1827, build_trtable+2042, build_trtable+2144, build_trtable+2337
0000000000015234         add        qword [rsp+0x138+var_128], 0x1
000000000001523a         mov        rax, qword [rsp+0x138+var_128]
000000000001523f         cmp        rax, qword [rbx+0x10]
0000000000015243         jl         loc_151cc

0000000000015245         test       rbp, rbp
0000000000015248         mov        r15, qword [rsp+0x138+var_108]
000000000001524d         jle        loc_15ca9

0000000000015253         lea        rbx, qword [rbp+1]
0000000000015257         mov        qword [rsp+0x138+var_C0], 0x0
0000000000015260         mov        qword [rsp+0x138+var_C8], rbx
0000000000015265         shl        rbx, 0x3
0000000000015269         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000001526c         call       j_malloc                                    ; malloc
0000000000015271         test       rax, rax
0000000000015274         mov        r12, rax
0000000000015277         mov        qword [rsp+0x138+var_B8], rax
000000000001527f         je         loc_15a7f

0000000000015285         movabs     rax, 0xaaaaaaaaaaaa855
000000000001528f         mov        dword [rsp+0x138+var_CC], 0x0
0000000000015297         cmp        rbp, rax
000000000001529a         jg         loc_15a7f

00000000000152a0         lea        rax, qword [rbp+rbp*2]
00000000000152a5         shl        rax, 0x3
00000000000152a9         mov        rdi, rax                                    ; argument "__size" for method j_malloc
00000000000152ac         mov        qword [rsp+0x138+var_E0], rax
00000000000152b1         call       j_malloc                                    ; malloc
00000000000152b6         test       rax, rax
00000000000152b9         mov        qword [rsp+0x138+var_128], rax
00000000000152be         je         loc_15a7f

00000000000152c4         mov        rax, qword [rsp+0x138+var_128]
00000000000152c9         sub        rbx, 0x8
00000000000152cd         mov        r12, qword [rsp+0x138+var_F8]
00000000000152d2         pxor       xmm0, xmm0
00000000000152d6         lea        r14, qword [rsp+0x138+var_C8]
00000000000152db         mov        qword [rsp+0x138+var_118], rbp
00000000000152e0         mov        byte [rsp+0x138+var_E9], 0x0
00000000000152e5         mov        rbp, r15
00000000000152e8         add        rax, rbx
00000000000152eb         mov        qword [rsp+0x138+var_E8], r12
00000000000152f0         add        rbx, rax
00000000000152f3         mov        qword [rsp+0x138+var_108], rax
00000000000152f8         mov        rax, qword [rsp+0x138+var_120]
00000000000152fd         movaps     xmmword [rsp+0x138+var_68], xmm0
0000000000015305         mov        qword [rsp+0x138+var_100], rbx
000000000001530a         xor        ebx, ebx
000000000001530c         lea        r13, qword [rax+8]
0000000000015310         lea        rax, qword [rsp+0x138+var_CC]
0000000000015315         movaps     xmmword [rsp+0x138+var_58], xmm0
000000000001531d         mov        qword [rsp+0x138+var_110], rax

                     loc_15322:
0000000000015322         mov        qword [rsp+0x138+var_C0], 0x0               ; CODE XREF=build_trtable+706
000000000001532b         cmp        qword [r13], 0x0
0000000000015330         jle        loc_15378

0000000000015332         xor        r15d, r15d
0000000000015335         nop        dword [rax]

                     loc_15338:
0000000000015338         mov        rax, qword [r13+8]                          ; CODE XREF=build_trtable+582
000000000001533c         mov        rdx, qword [rax+r15*8]
0000000000015340         mov        rax, qword [rbp+0x18]
0000000000015344         mov        rax, qword [rax+rdx*8]
0000000000015348         cmp        rax, 0xffffffffffffffff
000000000001534c         je         loc_1536e

000000000001534e         lea        rdx, qword [rax+rax*2]
0000000000015352         mov        rax, qword [rbp+0x30]
0000000000015356         mov        rdi, r14
0000000000015359         lea        rsi, qword [rax+rdx*8]
000000000001535d         call       re_node_set_merge                           ; re_node_set_merge
0000000000015362         test       eax, eax
0000000000015364         mov        dword [rsp+0x138+var_CC], eax
0000000000015368         jne        loc_15a68

                     loc_1536e:
000000000001536e         add        r15, 0x1                                    ; CODE XREF=build_trtable+540
0000000000015372         cmp        qword [r13], r15
0000000000015376         jg         loc_15338

                     loc_15378:
0000000000015378         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+512
000000000001537d         xor        ecx, ecx
000000000001537f         mov        rsi, rbp
0000000000015382         mov        rdx, r14
0000000000015385         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001538a         mov        rsi, qword [rsp+0x138+var_128]
000000000001538f         test       rax, rax
0000000000015392         mov        qword [rsi+rbx*8], rax
0000000000015396         je         loc_15b48

                     loc_1539c:
000000000001539c         cmp        byte [rax+0x68], 0x0                        ; CODE XREF=build_trtable+2590
00000000000153a0         js         loc_15ac0

00000000000153a6         mov        rdi, qword [rsp+0x138+var_108]
00000000000153ab         mov        rsi, qword [rsp+0x138+var_100]
00000000000153b0         mov        qword [rdi+rbx*8], rax
00000000000153b4         mov        rax, qword [rsp+0x138+var_128]
00000000000153b9         mov        rax, qword [rax+rbx*8]
00000000000153bd         mov        qword [rsi+rbx*8], rax

                     loc_153c1:
00000000000153c1         lea        rdx, qword [rsp+0x138+var_68]               ; CODE XREF=build_trtable+2556, build_trtable+2568
00000000000153c9         xor        eax, eax

                     loc_153cb:
00000000000153cb         mov        rcx, qword [rdx+rax]                        ; CODE XREF=build_trtable+687
00000000000153cf         or         rcx, qword [r12+rax]
00000000000153d3         mov        qword [rdx+rax], rcx
00000000000153d7         add        rax, 0x8
00000000000153db         cmp        rax, 0x20
00000000000153df         jne        loc_153cb

00000000000153e1         add        rbx, 0x1
00000000000153e5         add        r13, 0x18
00000000000153e9         add        r12, 0x20
00000000000153ed         cmp        rbx, qword [rsp+0x138+var_118]
00000000000153f2         jne        loc_15322

00000000000153f8         cmp        byte [rsp+0x138+var_E9], 0x0
00000000000153fd         mov        r15, rbp
0000000000015400         mov        rbp, qword [rsp+0x138+var_118]
0000000000015405         mov        qword [rsp+0x138+var_118], rdx
000000000001540a         jne        loc_15b59

0000000000015410         mov        esi, 0x100                                  ; argument "__size" for method j_calloc
0000000000015415         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000001541a         call       j_calloc                                    ; calloc
000000000001541f         mov        r11, rax
0000000000015422         mov        rax, qword [rsp+0x138+var_130]
0000000000015427         test       r11, r11
000000000001542a         mov        qword [rax+0x58], r11
000000000001542e         je         loc_15a6d

0000000000015434         mov        rbx, qword [rsp+0x138+var_F8]
0000000000015439         mov        r12, qword [rsp+0x138+var_128]
000000000001543e         xor        r9d, r9d
0000000000015441         mov        r13, qword [rsp+0x138+var_108]
0000000000015446         mov        rdx, qword [rsp+0x138+var_118]
000000000001544b         add        rbx, 0x20

                     loc_1544f:
000000000001544f         mov        rax, qword [rdx+r9]                         ; CODE XREF=build_trtable+860
0000000000015453         test       rax, rax
0000000000015456         je         loc_15484

0000000000015458         mov        rsi, r9
000000000001545b         mov        ecx, 0x1
0000000000015460         shl        rsi, 0x6
0000000000015464         add        rsi, r11
0000000000015467         nop        word [rax+rax]

                     loc_15470:
0000000000015470         test       al, 0x1                                     ; CODE XREF=build_trtable+850
0000000000015472         jne        loc_15bd8

                     loc_15478:
0000000000015478         add        rcx, rcx                                    ; CODE XREF=build_trtable+2793, build_trtable+2805
000000000001547b         add        rsi, 0x8
000000000001547f         shr        rax, 0x1
0000000000015482         jne        loc_15470

                     loc_15484:
0000000000015484         add        r9, 0x8                                     ; CODE XREF=build_trtable+806
0000000000015488         cmp        r9, 0x20
000000000001548c         jne        loc_1544f

                     loc_1548e:
000000000001548e         test       byte [rsp+0x138+var_67], 0x4                ; CODE XREF=build_trtable+2720
0000000000015496         je         loc_154d2

0000000000015498         xor        eax, eax
000000000001549a         mov        rdx, qword [rsp+0x138+var_E8]
000000000001549f         jmp        loc_154ae

                     loc_154a1:
00000000000154a1         add        rax, 0x1                                    ; CODE XREF=build_trtable+901
00000000000154a5         add        rdx, 0x20
00000000000154a9         cmp        rax, rbp
00000000000154ac         je         loc_154d2

                     loc_154ae:
00000000000154ae         test       qword [rdx], 0x400                          ; CODE XREF=build_trtable+879
00000000000154b5         je         loc_154a1

00000000000154b7         mov        rbx, qword [rsp+0x138+var_100]
00000000000154bc         cmp        byte [rsp+0x138+var_E9], 0x0
00000000000154c1         mov        rax, qword [rbx+rax*8]
00000000000154c5         mov        qword [r11+0x50], rax
00000000000154c9         je         loc_154d2

00000000000154cb         mov        qword [r11+0x850], rax

                     loc_154d2:
00000000000154d2         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+870, build_trtable+892, build_trtable+921
00000000000154d7         call       sub_2a10                                    ; sub_2a10
00000000000154dc         mov        rdi, qword [rsp+0x138+var_B8]
00000000000154e4         call       sub_2a10                                    ; sub_2a10
00000000000154e9         mov        rax, qword [rsp+0x138+var_120]
00000000000154ee         mov        rbx, qword [rsp+0x138+var_E0]
00000000000154f3         lea        rbp, qword [rax+0x10]
00000000000154f7         add        rbx, rbp

                     loc_154fa:
00000000000154fa         mov        rdi, qword [rbp]                            ; CODE XREF=build_trtable+986
00000000000154fe         add        rbp, 0x18
0000000000015502         call       sub_2a10                                    ; sub_2a10
0000000000015507         cmp        rbx, rbp
000000000001550a         jne        loc_154fa

000000000001550c         mov        rdi, qword [rsp+0x138+var_120]
0000000000015511         call       sub_2a10                                    ; sub_2a10
0000000000015516         mov        eax, 0x1
000000000001551b         jmp        loc_15542

                     loc_1551d:
000000000001551d         test       rbp, rbp                                    ; CODE XREF=build_trtable+1799
0000000000015520         mov        qword [rbx+8], 0x0
0000000000015528         mov        qword [rbx], 0x0
000000000001552f         jne        loc_15860

0000000000015535         mov        rdi, qword [rsp+0x138+var_120]
000000000001553a         call       sub_2a10                                    ; sub_2a10
000000000001553f         nop

                     loc_15540:
0000000000015540         xor        eax, eax                                    ; CODE XREF=build_trtable+62, build_trtable+1891, build_trtable+2443, build_trtable+2950

                     loc_15542:
0000000000015542         mov        rbx, qword [rsp+0x138+var_40]               ; CODE XREF=build_trtable+1003, build_trtable+2850
000000000001554a         xor        rbx, qword [fs:0x28]
0000000000015553         jne        loc_15ca4

0000000000015559         add        rsp, 0x108
0000000000015560         pop        rbx
0000000000015561         pop        rbp
0000000000015562         pop        r12
0000000000015564         pop        r13
0000000000015566         pop        r14
0000000000015568         pop        r15
000000000001556a         ret
                        ; endp
000000000001556b         align      16

                     loc_15570:
0000000000015570         movzx      ecx, byte [r13]                             ; CODE XREF=build_trtable+219
0000000000015575         lea        r12, qword [rsp+0x138+var_A8]
000000000001557d         mov        edi, 0x1
0000000000015582         mov        rdx, rcx
0000000000015585         and        ecx, 0x3f
0000000000015588         shr        rdx, 0x3
000000000001558c         shl        rdi, cl
000000000001558f         and        edx, 0x18
0000000000015592         or         qword [r12+rdx], rdi

                     loc_15596:
0000000000015596         test       ax, ax                                      ; CODE XREF=build_trtable+1993, build_trtable+2008, build_trtable+2260
0000000000015599         je         loc_15660

000000000001559f         test       al, 0x20
00000000000155a1         jne        loc_15910

                     loc_155a7:
00000000000155a7         test       al, 0x80                                    ; CODE XREF=build_trtable+2060
00000000000155a9         jne        loc_15844

00000000000155af         test       al, 0x4
00000000000155b1         je         loc_15605

00000000000155b3         cmp        r14d, 0x1
00000000000155b7         je         loc_15995

00000000000155bd         mov        r8, qword [rsp+0x138+var_108]
00000000000155c2         cmp        dword [r8+0xb4], 0x1
00000000000155ca         jle        loc_15a22

                     loc_155d0:
00000000000155d0         mov        rdi, qword [r8+0x78]                        ; CODE XREF=build_trtable+2173
00000000000155d4         xor        esi, esi
00000000000155d6         xor        ecx, ecx

                     loc_155d8:
00000000000155d8         mov        rdx, qword [rdi+rcx*8]                      ; CODE XREF=build_trtable+1226
00000000000155dc         not        rdx
00000000000155df         or         rdx, qword [r8+rcx*8+0xb8]
00000000000155e7         and        rdx, qword [r12+rcx*8]
00000000000155eb         mov        qword [r12+rcx*8], rdx
00000000000155ef         add        rcx, 0x1
00000000000155f3         or         rsi, rdx
00000000000155f6         cmp        rcx, 0x4
00000000000155fa         jne        loc_155d8

00000000000155fc         test       rsi, rsi
00000000000155ff         je         loc_1522f

                     loc_15605:
0000000000015605         test       al, 0x8                                     ; CODE XREF=build_trtable+1153, build_trtable+2331
0000000000015607         je         loc_15660

0000000000015609         cmp        r14d, 0x1
000000000001560d         je         loc_15941

0000000000015613         mov        rdi, qword [rsp+0x138+var_108]
0000000000015618         cmp        dword [rdi+0xb4], 0x1
000000000001561f         jle        loc_1595e

                     loc_15625:
0000000000015625         mov        rsi, qword [rdi+0x78]                       ; CODE XREF=build_trtable+2088
0000000000015629         xor        ecx, ecx
000000000001562b         xor        edx, edx

                     loc_1562d:
000000000001562d         mov        rax, qword [rdi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+1311
0000000000015635         and        rax, qword [rsi+rdx*8]
0000000000015639         not        rax
000000000001563c         and        rax, qword [r12+rdx*8]
0000000000015640         mov        qword [r12+rdx*8], rax
0000000000015644         add        rdx, 0x1
0000000000015648         or         rcx, rax
000000000001564b         cmp        rdx, 0x4
000000000001564f         jne        loc_1562d

0000000000015651         test       rcx, rcx
0000000000015654         je         loc_1522f

000000000001565a         nop        word [rax+rax]

                     loc_15660:
0000000000015660         xor        ebx, ebx                                    ; CODE XREF=build_trtable+1129, build_trtable+1239, build_trtable+2138
0000000000015662         test       rbp, rbp
0000000000015665         jle        loc_157cb

000000000001566b         mov        qword [rsp+0x138+var_110], r13
0000000000015670         mov        r13, r15
0000000000015673         nop        dword [rax+rax]

                     loc_15678:
0000000000015678         mov        r10, rbx                                    ; CODE XREF=build_trtable+1682
000000000001567b         shl        r10, 0x5
000000000001567f         cmp        r14d, 0x1
0000000000015683         jne        loc_156a8

0000000000015685         mov        rax, qword [rsp+0x138+var_110]
000000000001568a         movzx      edx, byte [rax]
000000000001568d         mov        rax, rdx
0000000000015690         shr        rax, 0x3
0000000000015694         and        eax, 0x18
0000000000015697         add        rax, r13
000000000001569a         mov        rax, qword [rax+r10]
000000000001569e         bt         rax, rdx
00000000000156a2         jae        loc_157bb

                     loc_156a8:
00000000000156a8         lea        rdi, qword [r13+r10]                        ; CODE XREF=build_trtable+1363
00000000000156ad         lea        rsi, qword [rsp+0x138+var_88]
00000000000156b5         xor        ecx, ecx
00000000000156b7         xor        eax, eax

                     loc_156b9:
00000000000156b9         mov        rdx, qword [r12+rax*8]                      ; CODE XREF=build_trtable+1440
00000000000156bd         and        rdx, qword [rdi+rax*8]
00000000000156c1         mov        qword [rsi+rax*8], rdx
00000000000156c5         add        rax, 0x1
00000000000156c9         or         rcx, rdx
00000000000156cc         cmp        rax, 0x4
00000000000156d0         jne        loc_156b9

00000000000156d2         test       rcx, rcx
00000000000156d5         je         loc_157bb

00000000000156db         lea        r11, qword [rsp+0x138+var_68]
00000000000156e3         xor        r15d, r15d
00000000000156e6         xor        r9d, r9d
00000000000156e9         xor        ecx, ecx

                     loc_156eb:
00000000000156eb         mov        rsi, qword [r12+rcx*8]                      ; CODE XREF=build_trtable+1512
00000000000156ef         mov        rax, qword [rdi+rcx*8]
00000000000156f3         mov        rdx, rsi
00000000000156f6         not        rdx
00000000000156f9         and        rdx, rax
00000000000156fc         not        rax
00000000000156ff         and        rax, rsi
0000000000015702         mov        qword [r11+rcx*8], rdx
0000000000015706         or         r9, rdx
0000000000015709         mov        qword [r12+rcx*8], rax
000000000001570d         add        rcx, 0x1
0000000000015711         or         r15, rax
0000000000015714         cmp        rcx, 0x4
0000000000015718         jne        loc_156eb

000000000001571a         mov        rdi, qword [rsp+0x138+var_120]
000000000001571f         lea        rax, qword [rbx+rbx*2]
0000000000015723         test       r9, r9
0000000000015726         lea        rdx, qword [rdi+rax*8]
000000000001572a         je         loc_15794

000000000001572c         mov        rax, rbp
000000000001572f         movdqa     xmm0, xmmword [rsp+0x138+var_68]
0000000000015738         shl        rax, 0x5
000000000001573c         mov        rsi, rdx
000000000001573f         mov        qword [rsp+0x138+var_100], rdx
0000000000015744         add        rax, r13
0000000000015747         movups     xmmword [rax], xmm0
000000000001574a         movdqa     xmm0, xmmword [rsp+0x138+var_58]
0000000000015753         movups     xmmword [rax+0x10], xmm0
0000000000015757         lea        rax, qword [rbp+rbp*2]
000000000001575c         lea        rdi, qword [rdi+rax*8]
0000000000015760         movdqa     xmm0, xmmword [rsp+0x138+var_88]
0000000000015769         movups     xmmword [r13+r10], xmm0
000000000001576f         movdqa     xmm0, xmmword [rsp+0x138+var_78]
0000000000015778         movups     xmmword [r13+r10+0x10], xmm0
000000000001577e         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000015783         test       eax, eax
0000000000015785         jne        loc_15860

000000000001578b         mov        rdx, qword [rsp+0x138+var_100]
0000000000015790         add        rbp, 0x1

                     loc_15794:
0000000000015794         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1530
0000000000015799         mov        rsi, qword [rsp+0x138+var_118]
000000000001579e         mov        rdi, rdx
00000000000157a1         mov        rax, qword [rax+0x18]
00000000000157a5         mov        rsi, qword [rax+rsi]
00000000000157a9         call       re_node_set_insert                          ; re_node_set_insert
00000000000157ae         test       al, al
00000000000157b0         je         loc_15860

00000000000157b6         test       r15, r15
00000000000157b9         je         loc_157c8

                     loc_157bb:
00000000000157bb         add        rbx, 0x1                                    ; CODE XREF=build_trtable+1394, build_trtable+1445
00000000000157bf         cmp        rbx, rbp
00000000000157c2         jl         loc_15678

                     loc_157c8:
00000000000157c8         mov        r15, r13                                    ; CODE XREF=build_trtable+1673

                     loc_157cb:
00000000000157cb         cmp        rbp, rbx                                    ; CODE XREF=build_trtable+1333
00000000000157ce         jne        loc_1522f

00000000000157d4         mov        rax, rbp
00000000000157d7         movdqa     xmm0, xmmword [rsp+0x138+var_A8]
00000000000157e0         shl        rax, 0x5
00000000000157e4         mov        rbx, qword [rsp+0x138+var_118]
00000000000157e9         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000157ee         add        rax, r15
00000000000157f1         movups     xmmword [rax], xmm0
00000000000157f4         movdqa     xmm0, xmmword [rsp+0x138+var_98]
00000000000157fd         movups     xmmword [rax+0x10], xmm0
0000000000015801         mov        rax, qword [rsp+0x138+var_130]
0000000000015806         mov        rax, qword [rax+0x18]
000000000001580a         mov        r13, qword [rax+rbx]
000000000001580e         mov        rbx, qword [rsp+0x138+var_120]
0000000000015813         lea        rax, qword [rbp+rbp*2]
0000000000015818         lea        rbx, qword [rbx+rax*8]
000000000001581c         mov        qword [rbx], 0x1
0000000000015823         mov        qword [rbx+8], 0x1
000000000001582b         call       j_malloc                                    ; malloc
0000000000015830         test       rax, rax
0000000000015833         mov        qword [rbx+0x10], rax
0000000000015837         je         loc_1551d

000000000001583d         mov        qword [rax], r13
0000000000015840         add        rbp, 0x1

                     loc_15844:
0000000000015844         pxor       xmm0, xmm0                                  ; CODE XREF=build_trtable+1145, build_trtable+2070, build_trtable+2154
0000000000015848         movaps     xmmword [r12], xmm0
000000000001584d         movaps     xmmword [r12+0x10], xmm0
0000000000015853         jmp        loc_1522f
0000000000015858         align      32

                     loc_15860:
0000000000015860         mov        rax, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+1023, build_trtable+1621, build_trtable+1664
0000000000015865         lea        rbx, qword [rax+0x10]
0000000000015869         lea        rax, qword [rbp+rbp*2]
000000000001586e         lea        rbp, qword [rbx+rax*8]
0000000000015872         nop        word [rax+rax]

                     loc_15878:
0000000000015878         mov        rdi, qword [rbx]                            ; CODE XREF=build_trtable+1879
000000000001587b         add        rbx, 0x18
000000000001587f         call       sub_2a10                                    ; sub_2a10
0000000000015884         cmp        rbp, rbx
0000000000015887         jne        loc_15878

0000000000015889         mov        rdi, qword [rsp+0x138+var_120]
000000000001588e         call       sub_2a10                                    ; sub_2a10
0000000000015893         jmp        loc_15540
0000000000015898         align      32

                     loc_158a0:
00000000000158a0         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+239
00000000000158a5         cmp        dword [rsi+0xb4], 0x1
00000000000158ac         jle        loc_159b5

00000000000158b2         mov        rsi, qword [rsi+0x78]
00000000000158b6         lea        r12, qword [rsp+0x138+var_A8]
00000000000158be         xor        edx, edx

                     loc_158c0:
00000000000158c0         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+1956
00000000000158c4         or         rcx, qword [rsi+rdx]
00000000000158c8         mov        qword [r12+rdx], rcx
00000000000158cc         add        rdx, 0x8
00000000000158d0         cmp        rdx, 0x20
00000000000158d4         jne        loc_158c0

                     loc_158d6:
00000000000158d6         mov        rbx, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+2209, build_trtable+2285
00000000000158db         mov        rdx, qword [rbx+0xd8]
00000000000158e2         test       dl, 0x40
00000000000158e5         jne        loc_158f3

00000000000158e7         and        qword [rsp+0x138+var_A8], 0xfffffffffffffbff

                     loc_158f3:
00000000000158f3         and        edx, 0x80                                   ; CODE XREF=build_trtable+1973
00000000000158f9         je         loc_15596

00000000000158ff         and        qword [rsp+0x138+var_A8], 0xfffffffffffffffe
0000000000015908         jmp        loc_15596
000000000001590d         align      16

                     loc_15910:
0000000000015910         mov        rdx, qword [rsp+0x138+var_A8]               ; CODE XREF=build_trtable+1137
0000000000015918         pxor       xmm0, xmm0
000000000001591c         and        dh, 0x4
000000000001591f         movaps     xmmword [r12], xmm0
0000000000015924         movaps     xmmword [r12+0x10], xmm0
000000000001592a         je         loc_1522f

0000000000015930         mov        qword [rsp+0x138+var_A8], 0x400
000000000001593c         jmp        loc_155a7

                     loc_15941:
0000000000015941         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1245
0000000000015946         jne        loc_15844

000000000001594c         mov        rdi, qword [rsp+0x138+var_108]
0000000000015951         cmp        dword [rdi+0xb4], 0x1
0000000000015958         jg         loc_15625

                     loc_1595e:
000000000001595e         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1263
0000000000015963         xor        ecx, ecx
0000000000015965         xor        edx, edx

                     loc_15967:
0000000000015967         mov        rax, qword [rsi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+2133
000000000001596f         not        rax
0000000000015972         and        rax, qword [r12+rdx*8]
0000000000015976         mov        qword [r12+rdx*8], rax
000000000001597a         add        rdx, 0x1
000000000001597e         or         rcx, rax
0000000000015981         cmp        rdx, 0x4
0000000000015985         jne        loc_15967

0000000000015987         test       rcx, rcx
000000000001598a         jne        loc_15660

0000000000015990         jmp        loc_1522f

                     loc_15995:
0000000000015995         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1159
000000000001599a         je         loc_15844

00000000000159a0         mov        r8, qword [rsp+0x138+var_108]
00000000000159a5         cmp        dword [r8+0xb4], 0x1
00000000000159ad         jg         loc_155d0

00000000000159b3         jmp        loc_15a22

                     loc_159b5:
00000000000159b5         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+1916
00000000000159b9         lea        r12, qword [rsp+0x138+var_A8]
00000000000159c1         movaps     xmmword [rsp+0x138+var_A8], xmm0
00000000000159c9         movaps     xmmword [rsp+0x138+var_98], xmm0
00000000000159d1         jmp        loc_158d6
00000000000159d6         align      32

                     loc_159e0:
00000000000159e0         mov        rsi, qword [r13]                            ; CODE XREF=build_trtable+229
00000000000159e4         lea        r12, qword [rsp+0x138+var_A8]
00000000000159ec         xor        edx, edx

                     loc_159ee:
00000000000159ee         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+2258
00000000000159f2         or         rcx, qword [rsi+rdx]
00000000000159f6         mov        qword [r12+rdx], rcx
00000000000159fa         add        rdx, 0x8
00000000000159fe         cmp        rdx, 0x20
0000000000015a02         jne        loc_159ee

0000000000015a04         jmp        loc_15596

                     loc_15a09:
0000000000015a09         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+249
0000000000015a0d         lea        r12, qword [rsp+0x138+var_A8]
0000000000015a15         movaps     xmmword [rsp+0x138+var_A8], xmm0
0000000000015a1d         jmp        loc_158d6

                     loc_15a22:
0000000000015a22         mov        rdi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1178, build_trtable+2179
0000000000015a27         xor        esi, esi
0000000000015a29         xor        edx, edx

                     loc_15a2b:
0000000000015a2b         mov        rcx, qword [r12+rdx*8]                      ; CODE XREF=build_trtable+2326
0000000000015a2f         and        rcx, qword [rdi+rdx*8+0xb8]
0000000000015a37         mov        qword [r12+rdx*8], rcx
0000000000015a3b         add        rdx, 0x1
0000000000015a3f         or         rsi, rcx
0000000000015a42         cmp        rdx, 0x4
0000000000015a46         jne        loc_15a2b

0000000000015a48         test       rsi, rsi
0000000000015a4b         jne        loc_15605

0000000000015a51         jmp        loc_1522f

                     loc_15a56:
0000000000015a56         mov        edx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+2481
0000000000015a5a         test       edx, edx
0000000000015a5c         je         loc_15ae7

0000000000015a62         nop        word [rax+rax]

                     loc_15a68:
0000000000015a68         mov        rbp, qword [rsp+0x138+var_118]              ; CODE XREF=build_trtable+568, build_trtable+2574, build_trtable+2596

                     loc_15a6d:
0000000000015a6d         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+766, build_trtable+2631
0000000000015a72         call       sub_2a10                                    ; sub_2a10
0000000000015a77         mov        r12, qword [rsp+0x138+var_B8]

                     loc_15a7f:
0000000000015a7f         mov        rdi, r12                                    ; CODE XREF=build_trtable+335, build_trtable+362, build_trtable+398
0000000000015a82         call       sub_2a10                                    ; sub_2a10
0000000000015a87         mov        rax, qword [rsp+0x138+var_120]
0000000000015a8c         lea        rbx, qword [rax+0x10]
0000000000015a90         lea        rax, qword [rbp+rbp*2]
0000000000015a95         lea        rbp, qword [rbx+rax*8]
0000000000015a99         nop        dword [rax]

                     loc_15aa0:
0000000000015aa0         mov        rdi, qword [rbx]                            ; CODE XREF=build_trtable+2431
0000000000015aa3         add        rbx, 0x18
0000000000015aa7         call       sub_2a10                                    ; sub_2a10
0000000000015aac         cmp        rbp, rbx
0000000000015aaf         jne        loc_15aa0

0000000000015ab1         mov        rdi, qword [rsp+0x138+var_120]
0000000000015ab6         call       sub_2a10                                    ; sub_2a10
0000000000015abb         jmp        loc_15540

                     loc_15ac0:
0000000000015ac0         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+624
0000000000015ac5         mov        ecx, 0x1
0000000000015aca         mov        rdx, r14
0000000000015acd         mov        rsi, rbp
0000000000015ad0         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000015ad5         mov        rdi, qword [rsp+0x138+var_108]
0000000000015ada         test       rax, rax
0000000000015add         mov        qword [rdi+rbx*8], rax
0000000000015ae1         je         loc_15a56

                     loc_15ae7:
0000000000015ae7         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+2348
0000000000015aec         cmp        rax, qword [rdi+rbx*8]
0000000000015af0         je         loc_15b0b

0000000000015af2         movzx      edi, byte [rsp+0x138+var_E9]
0000000000015af7         cmp        dword [rbp+0xb4], 0x2
0000000000015afe         mov        eax, 0x1
0000000000015b03         cmovge     edi, eax
0000000000015b06         mov        byte [rsp+0x138+var_E9], dil

                     loc_15b0b:
0000000000015b0b         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+2496
0000000000015b10         mov        rsi, rbp
0000000000015b13         mov        ecx, 0x2
0000000000015b18         mov        rdx, r14
0000000000015b1b         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000015b20         mov        rsi, qword [rsp+0x138+var_100]
0000000000015b25         test       rax, rax
0000000000015b28         mov        qword [rsi+rbx*8], rax
0000000000015b2c         jne        loc_153c1

0000000000015b32         mov        eax, dword [rsp+0x138+var_CC]
0000000000015b36         test       eax, eax
0000000000015b38         je         loc_153c1

0000000000015b3e         jmp        loc_15a68
0000000000015b43         align      8

                     loc_15b48:
0000000000015b48         mov        ecx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+614
0000000000015b4c         test       ecx, ecx
0000000000015b4e         je         loc_1539c

0000000000015b54         jmp        loc_15a68

                     loc_15b59:
0000000000015b59         mov        esi, 0x200                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+730
0000000000015b5e         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
0000000000015b63         call       j_calloc                                    ; calloc
0000000000015b68         mov        r11, rax
0000000000015b6b         mov        rax, qword [rsp+0x138+var_130]
0000000000015b70         test       r11, r11
0000000000015b73         mov        qword [rax+0x60], r11
0000000000015b77         je         loc_15a6d

0000000000015b7d         mov        r13, qword [rsp+0x138+var_F8]
0000000000015b82         mov        r10, qword [rsp+0x138+var_128]
0000000000015b87         mov        r12, r11
0000000000015b8a         mov        r14, qword [rsp+0x138+var_108]
0000000000015b8f         mov        rdx, qword [rsp+0x138+var_118]
0000000000015b94         xor        ebx, ebx
0000000000015b96         add        r13, 0x20

                     loc_15b9a:
0000000000015b9a         mov        rax, qword [rdx+rbx]                        ; CODE XREF=build_trtable+2718
0000000000015b9e         test       rax, rax
0000000000015ba1         je         loc_15bbf

0000000000015ba3         mov        rsi, r12
0000000000015ba6         mov        ecx, 0x1

                     loc_15bab:
0000000000015bab         test       al, 0x1                                     ; CODE XREF=build_trtable+2701
0000000000015bad         jne        loc_15c5c

                     loc_15bb3:
0000000000015bb3         add        rcx, rcx                                    ; CODE XREF=build_trtable+2923
0000000000015bb6         add        rsi, 0x8
0000000000015bba         shr        rax, 0x1
0000000000015bbd         jne        loc_15bab

                     loc_15bbf:
0000000000015bbf         add        rbx, 0x8                                    ; CODE XREF=build_trtable+2673
0000000000015bc3         add        r12, 0x200
0000000000015bca         cmp        rbx, 0x20
0000000000015bce         jne        loc_15b9a

0000000000015bd0         jmp        loc_1548e
0000000000015bd5         align      8

                     loc_15bd8:
0000000000015bd8         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+834
0000000000015bdd         test       qword [rdi+r9+0x1800], rcx
0000000000015be5         jne        loc_15c57

0000000000015be7         lea        rdi, qword [rbx+r9]
0000000000015beb         xor        r8d, r8d
0000000000015bee         nop

                     loc_15bf0:
0000000000015bf0         mov        r10, qword [rdi]                            ; CODE XREF=build_trtable+2769
0000000000015bf3         add        r8, 0x1
0000000000015bf7         add        rdi, 0x20
0000000000015bfb         and        r10, rcx
0000000000015bfe         test       r10, r10
0000000000015c01         je         loc_15bf0

0000000000015c03         shl        r8, 0x3

                     loc_15c07:
0000000000015c07         test       qword [r15+r9+0xb8], rcx                    ; CODE XREF=build_trtable+2858
0000000000015c0f         je         loc_15c1e

0000000000015c11         mov        rdi, qword [r13+r8]
0000000000015c16         mov        qword [rsi], rdi
0000000000015c19         jmp        loc_15478

                     loc_15c1e:
0000000000015c1e         mov        rdi, qword [r12+r8]                         ; CODE XREF=build_trtable+2783
0000000000015c22         mov        qword [rsi], rdi
0000000000015c25         jmp        loc_15478

                     loc_15c2a:
0000000000015c2a         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+131
0000000000015c2f         call       sub_2a10                                    ; sub_2a10

                     loc_15c34:
0000000000015c34         mov        esi, 0x100                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+2956
0000000000015c39         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
0000000000015c3e         call       j_calloc                                    ; calloc
0000000000015c43         mov        rbx, qword [rsp+0x138+var_130]
0000000000015c48         test       rax, rax
0000000000015c4b         mov        qword [rbx+0x58], rax
0000000000015c4f         setne      al
0000000000015c52         jmp        loc_15542

                     loc_15c57:
0000000000015c57         xor        r8d, r8d                                    ; CODE XREF=build_trtable+2741
0000000000015c5a         jmp        loc_15c07

                     loc_15c5c:
0000000000015c5c         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+2685
0000000000015c61         test       qword [rdi+rbx+0x1800], rcx
0000000000015c69         jne        loc_15ca0

0000000000015c6b         lea        r9, qword [r13+rbx]
0000000000015c70         xor        r8d, r8d

                     loc_15c73:
0000000000015c73         mov        r15, qword [r9]                             ; CODE XREF=build_trtable+2903
0000000000015c76         add        r8, 0x1
0000000000015c7a         add        r9, 0x20
0000000000015c7e         mov        rdi, r8
0000000000015c81         and        r15, rcx
0000000000015c84         test       r15, r15
0000000000015c87         je         loc_15c73

                     loc_15c89:
0000000000015c89         mov        r8, qword [r10+rdi*8]                       ; CODE XREF=build_trtable+2930
0000000000015c8d         mov        qword [rsi], r8
0000000000015c90         mov        rdi, qword [r14+rdi*8]
0000000000015c94         mov        qword [rsi+0x800], rdi
0000000000015c9b         jmp        loc_15bb3

                     loc_15ca0:
0000000000015ca0         xor        edi, edi                                    ; CODE XREF=build_trtable+2873
0000000000015ca2         jmp        loc_15c89

                     loc_15ca4:
0000000000015ca4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_trtable+1059
                        ; endp

                     loc_15ca9:
0000000000015ca9         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+285
0000000000015cae         call       sub_2a10                                    ; sub_2a10
0000000000015cb3         test       rbp, rbp
0000000000015cb6         jne        loc_15540

0000000000015cbc         jmp        loc_15c34
0000000000015cc1         align      16                                          ; End of unwind block (FDE at 0x26624)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_first:
0000000000015cd0         cmp        byte [rsi+0x30], 0x10                       ; Begin of unwind block (FDE at 0x26674), DATA XREF=re_compile_internal+1662
0000000000015cd4         je         loc_15d38

0000000000015cd6         push       rbp
0000000000015cd7         push       rbx
0000000000015cd8         mov        rbx, rsi
0000000000015cdb         mov        rbp, rdi
0000000000015cde         sub        rsp, 0x8
0000000000015ce2         mov        qword [rbx+0x18], rsi
0000000000015ce6         mov        rdx, qword [rbx+0x30]
0000000000015cea         mov        rsi, qword [rsi+0x28]
0000000000015cee         call       re_dfa_add_node                             ; re_dfa_add_node
0000000000015cf3         cmp        rax, 0xffffffffffffffff
0000000000015cf7         mov        rdx, rax
0000000000015cfa         mov        qword [rbx+0x38], rax
0000000000015cfe         je         loc_15d50

0000000000015d00         xor        eax, eax
0000000000015d02         cmp        byte [rbx+0x30], 0xc
0000000000015d06         jne        loc_15d2c

0000000000015d08         mov        ecx, dword [rbx+0x28]
0000000000015d0b         shl        rdx, 0x4
0000000000015d0f         add        rdx, qword [rbp]
0000000000015d13         and        ecx, 0x3ff
0000000000015d19         shl        ecx, 0x8
0000000000015d1c         mov        esi, ecx
0000000000015d1e         mov        ecx, dword [rdx+8]
0000000000015d21         and        ecx, 0xfffc00ff
0000000000015d27         or         ecx, esi
0000000000015d29         mov        dword [rdx+8], ecx

                     loc_15d2c:
0000000000015d2c         add        rsp, 0x8                                    ; CODE XREF=calc_first+54, calc_first+133
0000000000015d30         pop        rbx
0000000000015d31         pop        rbp
0000000000015d32         ret
                        ; endp
0000000000015d33         align      8

                     loc_15d38:
0000000000015d38         mov        rax, qword [rsi+8]                          ; CODE XREF=calc_first+4
0000000000015d3c         mov        rdx, qword [rax+0x18]
0000000000015d40         mov        rax, qword [rax+0x38]
0000000000015d44         mov        qword [rsi+0x18], rdx
0000000000015d48         mov        qword [rsi+0x38], rax
0000000000015d4c         xor        eax, eax
0000000000015d4e         ret
                        ; endp
0000000000015d4f         align      16

                     loc_15d50:
0000000000015d50         mov        eax, 0xc                                    ; CODE XREF=calc_first+46
0000000000015d55         jmp        loc_15d2c
0000000000015d57         align      32                                          ; End of unwind block (FDE at 0x26674)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_fail_stack_return.part.24:
0000000000015d60         push       r12                                         ; Begin of unwind block (FDE at 0x266a8), CODE XREF=set_regs+1279, set_regs+1383, set_regs+1810, set_regs+2005
0000000000015d62         push       rbp
0000000000015d63         mov        rbp, rdi
0000000000015d66         push       rbx
0000000000015d67         cmp        qword [rdi], 0x0
0000000000015d6b         jle        loc_15da2

0000000000015d6d         xor        ebx, ebx
0000000000015d6f         xor        r12d, r12d
0000000000015d72         nop        word [rax+rax]

                     loc_15d78:
0000000000015d78         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_fail_stack_return.part.24+64
0000000000015d7c         add        r12, 0x1
0000000000015d80         mov        rdi, qword [rax+rbx+0x28]
0000000000015d85         call       sub_2a10                                    ; sub_2a10
0000000000015d8a         mov        rax, qword [rbp+0x10]
0000000000015d8e         mov        rdi, qword [rax+rbx+0x10]
0000000000015d93         add        rbx, 0x30
0000000000015d97         call       sub_2a10                                    ; sub_2a10
0000000000015d9c         cmp        r12, qword [rbp]
0000000000015da0         jl         loc_15d78

                     loc_15da2:
0000000000015da2         pop        rbx                                         ; CODE XREF=free_fail_stack_return.part.24+11
0000000000015da3         mov        rdi, qword [rbp+0x10]
0000000000015da7         pop        rbp
0000000000015da8         pop        r12
0000000000015daa         jmp        sub_2a10                                    ; sub_2a10
                        ; endp
0000000000015daf         align      16                                          ; End of unwind block (FDE at 0x266a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pop_fail_stack.isra.25:
0000000000015db0         push       r12                                         ; Begin of unwind block (FDE at 0x266d4), CODE XREF=set_regs+1459, set_regs+1542
0000000000015db2         push       rbp
0000000000015db3         push       rbx
0000000000015db4         mov        rax, qword [rdi]
0000000000015db7         sub        rax, 0x1
0000000000015dbb         test       rax, rax
0000000000015dbe         mov        qword [rdi], rax
0000000000015dc1         js         loc_15e25

0000000000015dc3         lea        rbx, qword [rax+rax*2]
0000000000015dc7         mov        rax, qword [rsi]
0000000000015dca         mov        r12, rsi
0000000000015dcd         shl        rcx, 0x4
0000000000015dd1         mov        rbp, r9
0000000000015dd4         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
0000000000015dd7         shl        rbx, 0x4
0000000000015ddb         add        rax, rbx
0000000000015dde         mov        rsi, qword [rax]
0000000000015de1         mov        qword [rdx], rsi
0000000000015de4         mov        rsi, qword [rax+0x10]                       ; argument "__src" for method j_memcpy
0000000000015de8         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000015deb         call       j_memcpy                                    ; memcpy
0000000000015df0         mov        rdi, qword [rbp+0x10]
0000000000015df4         call       sub_2a10                                    ; sub_2a10
0000000000015df9         mov        rax, qword [r12]
0000000000015dfd         mov        rdi, qword [rax+rbx+0x10]
0000000000015e02         call       sub_2a10                                    ; sub_2a10
0000000000015e07         add        rbx, qword [r12]
0000000000015e0b         movdqu     xmm0, xmmword [rbx+0x18]
0000000000015e10         movaps     xmmword [rbp], xmm0
0000000000015e14         mov        rax, qword [rbx+0x28]
0000000000015e18         mov        qword [rbp+0x10], rax
0000000000015e1c         mov        rax, qword [rbx+8]
0000000000015e20         pop        rbx
0000000000015e21         pop        rbp
0000000000015e22         pop        r12
0000000000015e24         ret
                        ; endp

                     loc_15e25:
0000000000015e25         lea        rcx, qword [__PRETTY_FUNCTION__.8040]       ; argument "__function" for method j___assert_fail, "pop_fail_stack", CODE XREF=pop_fail_stack.isra.25+17
0000000000015e2c         lea        rsi, qword [aCoreutils831li_227a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000015e33         lea        rdi, qword [aNum0]                          ; argument "__assertion" for method j___assert_fail, "num >= 0"
0000000000015e3a         mov        edx, 0x555                                  ; argument "__line" for method j___assert_fail
0000000000015e3f         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000015e44         align      16                                          ; End of unwind block (FDE at 0x266d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_collating_symbol.isra.28:
0000000000015e50         push       rbp                                         ; Begin of unwind block (FDE at 0x26704), CODE XREF=sub_1c260+1072, sub_1c260+1128
0000000000015e51         push       rbx
0000000000015e52         mov        rbp, rdi
0000000000015e55         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
0000000000015e58         mov        rbx, rsi
0000000000015e5b         sub        rsp, 0x8
0000000000015e5f         call       j_strlen                                    ; strlen
0000000000015e64         cmp        rax, 0x1
0000000000015e68         jne        loc_15e90

0000000000015e6a         movzx      ecx, byte [rbx]
0000000000015e6d         mov        rdx, rcx
0000000000015e70         and        ecx, 0x3f
0000000000015e73         shr        rdx, 0x3
0000000000015e77         shl        rax, cl
0000000000015e7a         and        edx, 0x18
0000000000015e7d         or         qword [rbp+rdx], rax
0000000000015e82         add        rsp, 0x8
0000000000015e86         xor        eax, eax
0000000000015e88         pop        rbx
0000000000015e89         pop        rbp
0000000000015e8a         ret
                        ; endp
0000000000015e8b         align      16

                     loc_15e90:
0000000000015e90         add        rsp, 0x8                                    ; CODE XREF=build_collating_symbol.isra.28+24
0000000000015e94         mov        eax, 0x3
0000000000015e99         pop        rbx
0000000000015e9a         pop        rbp
0000000000015e9b         ret
                        ; endp
0000000000015e9c         align      32                                          ; End of unwind block (FDE at 0x26704)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     build_charclass.isra.29:
0000000000015ea0         push       r14                                         ; Begin of unwind block (FDE at 0x26738), CODE XREF=build_charclass_op+163, sub_1c260+1309
0000000000015ea2         push       r13
0000000000015ea4         mov        r13, rcx
0000000000015ea7         push       r12
0000000000015ea9         push       rbp
0000000000015eaa         mov        r12, r9
0000000000015ead         push       rbx
0000000000015eae         mov        rbp, rdi
0000000000015eb1         mov        rbx, rsi
0000000000015eb4         sub        rsp, 0x10
0000000000015eb8         test       qword [rsp+0x38+arg_0], 0x400000
0000000000015ec1         je         loc_15ee8

0000000000015ec3         lea        rdi, qword [aUpper]                         ; "upper"
0000000000015eca         mov        ecx, 0x6
0000000000015ecf         mov        rsi, r9
0000000000015ed2         rep  cmpsb byte [rsi], byte [rdi]
0000000000015ed4         seta       al
0000000000015ed7         sbb        al, 0x0
0000000000015ed9         test       al, al
0000000000015edb         jne        loc_15fd6

0000000000015ee1         lea        r12, qword [aAlpha]                         ; "alpha"

                     loc_15ee8:
0000000000015ee8         mov        rcx, qword [r13]                            ; CODE XREF=build_charclass.isra.29+33
0000000000015eec         cmp        qword [r8], rcx
0000000000015eef         mov        rax, qword [rdx]
0000000000015ef2         je         loc_16009

                     loc_15ef8:
0000000000015ef8         lea        rdx, qword [rcx+1]                          ; CODE XREF=build_charclass.isra.29+355, build_charclass.isra.29+419
0000000000015efc         mov        rdi, r12                                    ; argument "__property" for method j_wctype
0000000000015eff         mov        qword [r13], rdx
0000000000015f03         lea        r13, qword [rax+rcx*8]
0000000000015f07         call       j_wctype                                    ; wctype
0000000000015f0c         lea        rdi, qword [aAlnum]                         ; "alnum"
0000000000015f13         mov        qword [r13], rax
0000000000015f17         mov        ecx, 0x6
0000000000015f1c         mov        rsi, r12
0000000000015f1f         rep  cmpsb byte [rsi], byte [rdi]
0000000000015f21         seta       al
0000000000015f24         sbb        al, 0x0
0000000000015f26         test       al, al
0000000000015f28         je         loc_15f98

0000000000015f2a         lea        rdi, qword [aCntrl]                         ; "cntrl"
0000000000015f31         mov        ecx, 0x6
0000000000015f36         mov        rsi, r12
0000000000015f39         rep  cmpsb byte [rsi], byte [rdi]
0000000000015f3b         seta       al
0000000000015f3e         sbb        al, 0x0
0000000000015f40         test       al, al
0000000000015f42         jne        loc_16048

0000000000015f48         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000015f4d         xor        ecx, ecx
0000000000015f4f         test       rbp, rbp
0000000000015f52         mov        rdx, qword [rax]
0000000000015f55         mov        edi, 0x1
0000000000015f5a         jne        loc_1621a

                     loc_15f60:
0000000000015f60         test       byte [rdx+rcx*2], 0x2                       ; CODE XREF=build_charclass.isra.29+226
0000000000015f64         je         loc_15f77

0000000000015f66         mov        rax, rcx
0000000000015f69         mov        rsi, rdi
0000000000015f6c         sar        rax, 0x6
0000000000015f70         shl        rsi, cl
0000000000015f73         or         qword [rbx+rax*8], rsi

                     loc_15f77:
0000000000015f77         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+196
0000000000015f7b         cmp        rcx, 0x100
0000000000015f82         jne        loc_15f60

                     loc_15f84:
0000000000015f84         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+308, build_charclass.isra.29+549, build_charclass.isra.29+621, build_charclass.isra.29+757, build_charclass.isra.29+814, build_charclass.isra.29+885, build_charclass.isra.29+942, build_charclass.isra.29+1037, build_charclass.isra.29+1095, build_charclass.isra.29+1187, build_charclass.isra.29+1292

                     loc_15f86:
0000000000015f86         add        rsp, 0x10                                   ; CODE XREF=build_charclass.isra.29+1197, build_charclass.isra.29+1893
0000000000015f8a         pop        rbx
0000000000015f8b         pop        rbp
0000000000015f8c         pop        r12
0000000000015f8e         pop        r13
0000000000015f90         pop        r14
0000000000015f92         ret
                        ; endp
0000000000015f93         align      8

                     loc_15f98:
0000000000015f98         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+136
0000000000015f9d         xor        ecx, ecx
0000000000015f9f         test       rbp, rbp
0000000000015fa2         mov        rdx, qword [rax]
0000000000015fa5         mov        edi, 0x1
0000000000015faa         jne        loc_1619a

                     loc_15fb0:
0000000000015fb0         test       byte [rdx+rcx*2], 0x8                       ; CODE XREF=build_charclass.isra.29+306
0000000000015fb4         je         loc_15fc7

0000000000015fb6         mov        rax, rcx
0000000000015fb9         mov        rsi, rdi
0000000000015fbc         sar        rax, 0x6
0000000000015fc0         shl        rsi, cl
0000000000015fc3         or         qword [rbx+rax*8], rsi

                     loc_15fc7:
0000000000015fc7         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+276
0000000000015fcb         cmp        rcx, 0x100
0000000000015fd2         jne        loc_15fb0

0000000000015fd4         jmp        loc_15f84

                     loc_15fd6:
0000000000015fd6         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+59
0000000000015fdd         mov        ecx, 0x6
0000000000015fe2         mov        rsi, r9
0000000000015fe5         rep  cmpsb byte [rsi], byte [rdi]
0000000000015fe7         mov        rcx, qword [r13]
0000000000015feb         seta       al
0000000000015fee         sbb        al, 0x0
0000000000015ff0         test       al, al
0000000000015ff2         lea        rax, qword [aAlpha]                         ; "alpha"
0000000000015ff9         cmove      r12, rax
0000000000015ffd         cmp        qword [r8], rcx
0000000000016000         mov        rax, qword [rdx]
0000000000016003         jne        loc_15ef8

                     loc_16009:
0000000000016009         lea        r14, qword [rcx+rcx+1]                      ; CODE XREF=build_charclass.isra.29+82
000000000001600e         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
0000000000016011         mov        qword [rsp+0x38+var_30], r8
0000000000016016         mov        qword [rsp+0x38+var_38], rdx
000000000001601a         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
0000000000016022         call       j_realloc                                   ; realloc
0000000000016027         test       rax, rax
000000000001602a         je         loc_16348

0000000000016030         mov        rdx, qword [rsp+0x38+var_38]
0000000000016034         mov        r8, qword [rsp+0x38+var_30]
0000000000016039         mov        qword [rdx], rax
000000000001603c         mov        qword [r8], r14
000000000001603f         mov        rcx, qword [r13]
0000000000016043         jmp        loc_15ef8

                     loc_16048:
0000000000016048         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+162
000000000001604f         mov        ecx, 0x6
0000000000016054         mov        rsi, r12
0000000000016057         rep  cmpsb byte [rsi], byte [rdi]
0000000000016059         seta       al
000000000001605c         sbb        al, 0x0
000000000001605e         test       al, al
0000000000016060         je         loc_160ca

0000000000016062         lea        rdi, qword [aSpace]                         ; "space"
0000000000016069         mov        ecx, 0x6
000000000001606e         mov        rsi, r12
0000000000016071         rep  cmpsb byte [rsi], byte [rdi]
0000000000016073         seta       al
0000000000016076         sbb        al, 0x0
0000000000016078         test       al, al
000000000001607a         jne        loc_16112

0000000000016080         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000016085         xor        ecx, ecx
0000000000016087         test       rbp, rbp
000000000001608a         mov        rdx, qword [rax]
000000000001608d         mov        edi, 0x1
0000000000016092         jne        loc_163ee

0000000000016098         nop        dword [rax+rax]

                     loc_160a0:
00000000000160a0         test       byte [rdx+rcx*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+547
00000000000160a5         je         loc_160b8

00000000000160a7         mov        rax, rcx
00000000000160aa         mov        rsi, rdi
00000000000160ad         sar        rax, 0x6
00000000000160b1         shl        rsi, cl
00000000000160b4         or         qword [rbx+rax*8], rsi

                     loc_160b8:
00000000000160b8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+517
00000000000160bc         cmp        rcx, 0x100
00000000000160c3         jne        loc_160a0

00000000000160c5         jmp        loc_15f84

                     loc_160ca:
00000000000160ca         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+448
00000000000160cf         xor        ecx, ecx
00000000000160d1         test       rbp, rbp
00000000000160d4         mov        rdx, qword [rax]
00000000000160d7         mov        edi, 0x1
00000000000160dc         jne        loc_162b2

00000000000160e2         nop        word [rax+rax]

                     loc_160e8:
00000000000160e8         test       byte [rdx+rcx*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+619
00000000000160ed         je         loc_16100

00000000000160ef         mov        rax, rcx
00000000000160f2         mov        rsi, rdi
00000000000160f5         sar        rax, 0x6
00000000000160f9         shl        rsi, cl
00000000000160fc         or         qword [rbx+rax*8], rsi

                     loc_16100:
0000000000016100         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+589
0000000000016104         cmp        rcx, 0x100
000000000001610b         jne        loc_160e8

000000000001610d         jmp        loc_15f84

                     loc_16112:
0000000000016112         lea        rdi, qword [aAlpha]                         ; "alpha", CODE XREF=build_charclass.isra.29+474
0000000000016119         mov        ecx, 0x6
000000000001611e         mov        rsi, r12
0000000000016121         rep  cmpsb byte [rsi], byte [rdi]
0000000000016123         seta       al
0000000000016126         sbb        al, 0x0
0000000000016128         test       al, al
000000000001612a         je         loc_161d3

0000000000016130         lea        rdi, qword [aDigit]                         ; "digit"
0000000000016137         mov        ecx, 0x6
000000000001613c         mov        rsi, r12
000000000001613f         rep  cmpsb byte [rsi], byte [rdi]
0000000000016141         seta       al
0000000000016144         sbb        al, 0x0
0000000000016146         test       al, al
0000000000016148         jne        loc_16253

000000000001614e         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000016153         xor        ecx, ecx
0000000000016155         test       rbp, rbp
0000000000016158         mov        rdx, qword [rax]
000000000001615b         mov        edi, 0x1
0000000000016160         jne        loc_1660a

0000000000016166         nop        word [cs:rax+rax]

                     loc_16170:
0000000000016170         test       byte [rdx+rcx*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+755
0000000000016175         je         loc_16188

0000000000016177         mov        rax, rcx
000000000001617a         mov        rsi, rdi
000000000001617d         sar        rax, 0x6
0000000000016181         shl        rsi, cl
0000000000016184         or         qword [rbx+rax*8], rsi

                     loc_16188:
0000000000016188         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+725
000000000001618c         cmp        rcx, 0x100
0000000000016193         jne        loc_16170

0000000000016195         jmp        loc_15f84

                     loc_1619a:
000000000001619a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+266
000000000001619c         nop        dword [rax]

                     loc_161a0:
00000000000161a0         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=build_charclass.isra.29+812
00000000000161a4         je         loc_161c2

00000000000161a6         movzx      ecx, byte [rbp+rax]
00000000000161ab         mov        r10, rdi
00000000000161ae         mov        rsi, rcx
00000000000161b1         and        ecx, 0x3f
00000000000161b4         shr        rsi, 0x3
00000000000161b8         shl        r10, cl
00000000000161bb         and        esi, 0x18
00000000000161be         or         qword [rbx+rsi], r10

                     loc_161c2:
00000000000161c2         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+772
00000000000161c6         cmp        rax, 0x100
00000000000161cc         jne        loc_161a0

00000000000161ce         jmp        loc_15f84

                     loc_161d3:
00000000000161d3         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+650
00000000000161d8         xor        ecx, ecx
00000000000161da         test       rbp, rbp
00000000000161dd         mov        rdx, qword [rax]
00000000000161e0         mov        edi, 0x1
00000000000161e5         jne        loc_163b8

00000000000161eb         nop        dword [rax+rax]

                     loc_161f0:
00000000000161f0         test       byte [rdx+rcx*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+883
00000000000161f5         je         loc_16208

00000000000161f7         mov        rax, rcx
00000000000161fa         mov        rsi, rdi
00000000000161fd         sar        rax, 0x6
0000000000016201         shl        rsi, cl
0000000000016204         or         qword [rbx+rax*8], rsi

                     loc_16208:
0000000000016208         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+853
000000000001620c         cmp        rcx, 0x100
0000000000016213         jne        loc_161f0

0000000000016215         jmp        loc_15f84

                     loc_1621a:
000000000001621a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+186
000000000001621c         nop        dword [rax]

                     loc_16220:
0000000000016220         test       byte [rdx+rax*2], 0x2                       ; CODE XREF=build_charclass.isra.29+940
0000000000016224         je         loc_16242

0000000000016226         movzx      ecx, byte [rbp+rax]
000000000001622b         mov        r11, rdi
000000000001622e         mov        rsi, rcx
0000000000016231         and        ecx, 0x3f
0000000000016234         shr        rsi, 0x3
0000000000016238         shl        r11, cl
000000000001623b         and        esi, 0x18
000000000001623e         or         qword [rbx+rsi], r11

                     loc_16242:
0000000000016242         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+900
0000000000016246         cmp        rax, 0x100
000000000001624c         jne        loc_16220

000000000001624e         jmp        loc_15f84

                     loc_16253:
0000000000016253         lea        rdi, qword [aPrint]                         ; "print", CODE XREF=build_charclass.isra.29+680
000000000001625a         mov        ecx, 0x6
000000000001625f         mov        rsi, r12
0000000000016262         rep  cmpsb byte [rsi], byte [rdi]
0000000000016264         seta       al
0000000000016267         sbb        al, 0x0
0000000000016269         test       al, al
000000000001626b         jne        loc_162ec

000000000001626d         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000016272         xor        ecx, ecx
0000000000016274         test       rbp, rbp
0000000000016277         mov        rdx, qword [rax]
000000000001627a         mov        edi, 0x1
000000000001627f         jne        loc_16677

0000000000016285         nop        dword [rax]

                     loc_16288:
0000000000016288         test       byte [rdx+rcx*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+1035
000000000001628d         je         loc_162a0

000000000001628f         mov        rax, rcx
0000000000016292         mov        rsi, rdi
0000000000016295         sar        rax, 0x6
0000000000016299         shl        rsi, cl
000000000001629c         or         qword [rbx+rax*8], rsi

                     loc_162a0:
00000000000162a0         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1005
00000000000162a4         cmp        rcx, 0x100
00000000000162ab         jne        loc_16288

00000000000162ad         jmp        loc_15f84

                     loc_162b2:
00000000000162b2         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+572
00000000000162b4         nop        dword [rax]

                     loc_162b8:
00000000000162b8         test       byte [rdx+rax*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+1093
00000000000162bd         je         loc_162db

00000000000162bf         movzx      ecx, byte [rbp+rax]
00000000000162c4         mov        r14, rdi
00000000000162c7         mov        rsi, rcx
00000000000162ca         and        ecx, 0x3f
00000000000162cd         shr        rsi, 0x3
00000000000162d1         shl        r14, cl
00000000000162d4         and        esi, 0x18
00000000000162d7         or         qword [rbx+rsi], r14

                     loc_162db:
00000000000162db         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1053
00000000000162df         cmp        rax, 0x100
00000000000162e5         jne        loc_162b8

00000000000162e7         jmp        loc_15f84

                     loc_162ec:
00000000000162ec         lea        rdi, qword [aUpper]                         ; "upper", CODE XREF=build_charclass.isra.29+971
00000000000162f3         mov        ecx, 0x6
00000000000162f8         mov        rsi, r12
00000000000162fb         rep  cmpsb byte [rsi], byte [rdi]
00000000000162fd         seta       al
0000000000016300         sbb        al, 0x0
0000000000016302         test       al, al
0000000000016304         jne        loc_16352

0000000000016306         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000001630b         xor        ecx, ecx
000000000001630d         test       rbp, rbp
0000000000016310         mov        rax, qword [rax]
0000000000016313         mov        edi, 0x1
0000000000016318         jne        loc_16640

                     loc_1631e:
000000000001631e         test       byte [rax+rcx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+1185
0000000000016323         je         loc_16336

0000000000016325         mov        rdx, rcx
0000000000016328         mov        rsi, rdi
000000000001632b         sar        rdx, 0x6
000000000001632f         shl        rsi, cl
0000000000016332         or         qword [rbx+rdx*8], rsi

                     loc_16336:
0000000000016336         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1155
000000000001633a         cmp        rcx, 0x100
0000000000016341         jne        loc_1631e

0000000000016343         jmp        loc_15f84

                     loc_16348:
0000000000016348         mov        eax, 0xc                                    ; CODE XREF=build_charclass.isra.29+394
000000000001634d         jmp        loc_15f86

                     loc_16352:
0000000000016352         lea        rdi, qword [aBlank]                         ; "blank", CODE XREF=build_charclass.isra.29+1124
0000000000016359         mov        ecx, 0x6
000000000001635e         mov        rsi, r12
0000000000016361         rep  cmpsb byte [rsi], byte [rdi]
0000000000016363         seta       al
0000000000016366         sbb        al, 0x0
0000000000016368         test       al, al
000000000001636a         jne        loc_1645e

0000000000016370         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000016375         xor        ecx, ecx
0000000000016377         test       rbp, rbp
000000000001637a         mov        rdx, qword [rax]
000000000001637d         mov        esi, 0x1
0000000000016382         jne        loc_16424

                     loc_16388:
0000000000016388         test       byte [rdx+rcx*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1290
000000000001638c         je         loc_1639f

000000000001638e         mov        rax, rcx
0000000000016391         mov        rdi, rsi
0000000000016394         sar        rax, 0x6
0000000000016398         shl        rdi, cl
000000000001639b         or         qword [rbx+rax*8], rdi

                     loc_1639f:
000000000001639f         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1260
00000000000163a3         cmp        rcx, 0x100
00000000000163aa         jne        loc_16388

00000000000163ac         jmp        loc_15f84
00000000000163b1         align      8

                     loc_163b8:
00000000000163b8         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+837

                     loc_163ba:
00000000000163ba         test       byte [rdx+rax*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+1351
00000000000163bf         je         loc_163dd

00000000000163c1         movzx      ecx, byte [rbp+rax]
00000000000163c6         mov        r9, rdi
00000000000163c9         mov        rsi, rcx
00000000000163cc         and        ecx, 0x3f
00000000000163cf         shr        rsi, 0x3
00000000000163d3         shl        r9, cl
00000000000163d6         and        esi, 0x18
00000000000163d9         or         qword [rbx+rsi], r9

                     loc_163dd:
00000000000163dd         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1311
00000000000163e1         cmp        rax, 0x100
00000000000163e7         jne        loc_163ba

00000000000163e9         jmp        loc_15f84

                     loc_163ee:
00000000000163ee         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+498

                     loc_163f0:
00000000000163f0         test       byte [rdx+rax*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+1405
00000000000163f5         je         loc_16413

00000000000163f7         movzx      ecx, byte [rbp+rax]
00000000000163fc         mov        r9, rdi
00000000000163ff         mov        rsi, rcx
0000000000016402         and        ecx, 0x3f
0000000000016405         shr        rsi, 0x3
0000000000016409         shl        r9, cl
000000000001640c         and        esi, 0x18
000000000001640f         or         qword [rbx+rsi], r9

                     loc_16413:
0000000000016413         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1365
0000000000016417         cmp        rax, 0x100
000000000001641d         jne        loc_163f0

000000000001641f         jmp        loc_15f84

                     loc_16424:
0000000000016424         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1250
0000000000016426         mov        edi, 0x1

                     loc_1642b:
000000000001642b         test       byte [rdx+rax*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1463
000000000001642f         je         loc_1644d

0000000000016431         movzx      ecx, byte [rbp+rax]
0000000000016436         mov        r14, rdi
0000000000016439         mov        rsi, rcx
000000000001643c         and        ecx, 0x3f
000000000001643f         shr        rsi, 0x3
0000000000016443         shl        r14, cl
0000000000016446         and        esi, 0x18
0000000000016449         or         qword [rbx+rsi], r14

                     loc_1644d:
000000000001644d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1423
0000000000016451         cmp        rax, 0x100
0000000000016457         jne        loc_1642b

0000000000016459         jmp        loc_15f84

                     loc_1645e:
000000000001645e         lea        rsi, qword [aGraph]                         ; argument "__s2" for method j_strcmp, "graph", CODE XREF=build_charclass.isra.29+1226
0000000000016465         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
0000000000016468         call       j_strcmp                                    ; strcmp
000000000001646d         test       eax, eax
000000000001646f         jne        loc_164ea

0000000000016471         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000016476         xor        ecx, ecx
0000000000016478         test       rbp, rbp
000000000001647b         mov        rsi, qword [rax]
000000000001647e         mov        edx, 0x1
0000000000016483         jne        loc_164af

                     loc_16485:
0000000000016485         cmp        word [rsi+rcx*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1544
000000000001648a         jns        loc_1649d

000000000001648c         mov        rax, rcx
000000000001648f         mov        rdi, rdx
0000000000016492         sar        rax, 0x6
0000000000016496         shl        rdi, cl
0000000000016499         or         qword [rbx+rax*8], rdi

                     loc_1649d:
000000000001649d         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1514
00000000000164a1         cmp        rcx, 0x100
00000000000164a8         jne        loc_16485

00000000000164aa         jmp        loc_15f84

                     loc_164af:
00000000000164af         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1507
00000000000164b1         mov        edi, 0x1

                     loc_164b6:
00000000000164b6         cmp        word [rsi+rax*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1603
00000000000164bb         jns        loc_164d9

00000000000164bd         movzx      ecx, byte [rbp+rax]
00000000000164c2         mov        r9, rdi
00000000000164c5         mov        rdx, rcx
00000000000164c8         and        ecx, 0x3f
00000000000164cb         shr        rdx, 0x3
00000000000164cf         shl        r9, cl
00000000000164d2         and        edx, 0x18
00000000000164d5         or         qword [rbx+rdx], r9

                     loc_164d9:
00000000000164d9         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1563
00000000000164dd         cmp        rax, 0x100
00000000000164e3         jne        loc_164b6

00000000000164e5         jmp        loc_15f84

                     loc_164ea:
00000000000164ea         lea        rsi, qword [aPunct]                         ; argument "__s2" for method j_strcmp, "punct", CODE XREF=build_charclass.isra.29+1487
00000000000164f1         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
00000000000164f4         call       j_strcmp                                    ; strcmp
00000000000164f9         test       eax, eax
00000000000164fb         jne        loc_16574

00000000000164fd         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000016502         xor        ecx, ecx
0000000000016504         test       rbp, rbp
0000000000016507         mov        rsi, qword [rax]
000000000001650a         mov        edx, 0x1
000000000001650f         jne        loc_1653a

                     loc_16511:
0000000000016511         test       byte [rsi+rcx*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1683
0000000000016515         je         loc_16528

0000000000016517         mov        rax, rcx
000000000001651a         mov        rdi, rdx
000000000001651d         sar        rax, 0x6
0000000000016521         shl        rdi, cl
0000000000016524         or         qword [rbx+rax*8], rdi

                     loc_16528:
0000000000016528         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1653
000000000001652c         cmp        rcx, 0x100
0000000000016533         jne        loc_16511

0000000000016535         jmp        loc_15f84

                     loc_1653a:
000000000001653a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1647
000000000001653c         mov        edi, 0x1

                     loc_16541:
0000000000016541         test       byte [rsi+rax*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1741
0000000000016545         je         loc_16563

0000000000016547         movzx      ecx, byte [rbp+rax]
000000000001654c         mov        r14, rdi
000000000001654f         mov        rdx, rcx
0000000000016552         and        ecx, 0x3f
0000000000016555         shr        rdx, 0x3
0000000000016559         shl        r14, cl
000000000001655c         and        edx, 0x18
000000000001655f         or         qword [rbx+rdx], r14

                     loc_16563:
0000000000016563         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1701
0000000000016567         cmp        rax, 0x100
000000000001656d         jne        loc_16541

000000000001656f         jmp        loc_15f84

                     loc_16574:
0000000000016574         lea        rsi, qword [aPunct+6]                       ; argument "__s2" for method j_strcmp, 0x22849, CODE XREF=build_charclass.isra.29+1627
000000000001657b         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000001657e         call       j_strcmp                                    ; strcmp
0000000000016583         test       eax, eax
0000000000016585         jne        loc_16600

0000000000016587         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000001658c         xor        ecx, ecx
000000000001658e         test       rbp, rbp
0000000000016591         mov        rsi, qword [rax]
0000000000016594         mov        edx, 0x1
0000000000016599         jne        loc_165c5

                     loc_1659b:
000000000001659b         test       byte [rsi+rcx*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1822
00000000000165a0         je         loc_165b3

00000000000165a2         mov        rax, rcx
00000000000165a5         mov        rdi, rdx
00000000000165a8         sar        rax, 0x6
00000000000165ac         shl        rdi, cl
00000000000165af         or         qword [rbx+rax*8], rdi

                     loc_165b3:
00000000000165b3         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1792
00000000000165b7         cmp        rcx, 0x100
00000000000165be         jne        loc_1659b

00000000000165c0         jmp        loc_15f84

                     loc_165c5:
00000000000165c5         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1785
00000000000165c7         mov        edi, 0x1

                     loc_165cc:
00000000000165cc         test       byte [rsi+rax*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1881
00000000000165d1         je         loc_165ef

00000000000165d3         movzx      ecx, byte [rbp+rax]
00000000000165d8         mov        r9, rdi
00000000000165db         mov        rdx, rcx
00000000000165de         and        ecx, 0x3f
00000000000165e1         shr        rdx, 0x3
00000000000165e5         shl        r9, cl
00000000000165e8         and        edx, 0x18
00000000000165eb         or         qword [rbx+rdx], r9

                     loc_165ef:
00000000000165ef         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1841
00000000000165f3         cmp        rax, 0x100
00000000000165f9         jne        loc_165cc

00000000000165fb         jmp        loc_15f84

                     loc_16600:
0000000000016600         mov        eax, 0x4                                    ; CODE XREF=build_charclass.isra.29+1765
0000000000016605         jmp        loc_15f86

                     loc_1660a:
000000000001660a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+704

                     loc_1660c:
000000000001660c         test       byte [rdx+rax*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+1945
0000000000016611         je         loc_1662f

0000000000016613         movzx      ecx, byte [rbp+rax]
0000000000016618         mov        r14, rdi
000000000001661b         mov        rsi, rcx
000000000001661e         and        ecx, 0x3f
0000000000016621         shr        rsi, 0x3
0000000000016625         shl        r14, cl
0000000000016628         and        esi, 0x18
000000000001662b         or         qword [rbx+rsi], r14

                     loc_1662f:
000000000001662f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1905
0000000000016633         cmp        rax, 0x100
0000000000016639         jne        loc_1660c

000000000001663b         jmp        loc_15f84

                     loc_16640:
0000000000016640         xor        edx, edx                                    ; CODE XREF=build_charclass.isra.29+1144

                     loc_16642:
0000000000016642         test       byte [rax+rdx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+2000
0000000000016647         je         loc_16665

0000000000016649         movzx      ecx, byte [rbp+rdx]
000000000001664e         mov        r9, rdi
0000000000016651         mov        rsi, rcx
0000000000016654         and        ecx, 0x3f
0000000000016657         shr        rsi, 0x3
000000000001665b         shl        r9, cl
000000000001665e         and        esi, 0x18
0000000000016661         or         qword [rbx+rsi], r9

                     loc_16665:
0000000000016665         add        rdx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1959
0000000000016669         cmp        rdx, 0x100
0000000000016670         jne        loc_16642

0000000000016672         jmp        loc_15f84

                     loc_16677:
0000000000016677         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+991

                     loc_16679:
0000000000016679         test       byte [rdx+rax*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+2054
000000000001667e         je         loc_1669c

0000000000016680         movzx      ecx, byte [rbp+rax]
0000000000016685         mov        r14, rdi
0000000000016688         mov        rsi, rcx
000000000001668b         and        ecx, 0x3f
000000000001668e         shr        rsi, 0x3
0000000000016692         shl        r14, cl
0000000000016695         and        esi, 0x18
0000000000016698         or         qword [rbx+rsi], r14

                     loc_1669c:
000000000001669c         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+2014
00000000000166a0         cmp        rax, 0x100
00000000000166a6         jne        loc_16679

00000000000166a8         jmp        loc_15f84
00000000000166ad         align      16                                          ; End of unwind block (FDE at 0x26738)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     build_charclass_op:
00000000000166b0         push       r15                                         ; Begin of unwind block (FDE at 0x2677c), CODE XREF=sub_1c260+402
00000000000166b2         push       r14
00000000000166b4         mov        r14, rdx
00000000000166b7         push       r13
00000000000166b9         push       r12
00000000000166bb         mov        r13, rcx
00000000000166be         push       rbp
00000000000166bf         push       rbx
00000000000166c0         mov        rbp, rdi
00000000000166c3         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
00000000000166c8         mov        r12d, r8d
00000000000166cb         sub        rsp, 0x58
00000000000166cf         mov        qword [rsp+0x88+var_88], rsi
00000000000166d3         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
00000000000166d8         mov        qword [rsp+0x88+var_80], r9
00000000000166dd         mov        rax, qword [fs:0x28]
00000000000166e6         mov        qword [rsp+0x88+var_40], rax
00000000000166eb         xor        eax, eax
00000000000166ed         mov        qword [rsp+0x88+var_70], 0x0
00000000000166f6         call       j_calloc                                    ; calloc
00000000000166fb         test       rax, rax
00000000000166fe         je         loc_168c0

0000000000016704         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000016709         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000001670e         mov        rbx, rax
0000000000016711         call       j_calloc                                    ; calloc
0000000000016716         test       rax, rax
0000000000016719         mov        r15, rax
000000000001671c         je         loc_168d0

0000000000016722         movzx      eax, byte [rax+0x20]
0000000000016726         sub        rsp, 0x8
000000000001672a         mov        edx, r12d
000000000001672d         push       0x0
000000000001672f         and        edx, 0x1
0000000000016732         mov        rdi, qword [rsp+0x98+var_88]
0000000000016737         lea        rcx, qword [r15+0x48]
000000000001673b         mov        r9, r14
000000000001673e         mov        rsi, rbx
0000000000016741         lea        r8, qword [rsp+0x98+var_70]
0000000000016746         and        eax, 0xfffffffe
0000000000016749         or         eax, edx
000000000001674b         lea        rdx, qword [r15+0x18]
000000000001674f         mov        byte [r15+0x20], al
0000000000016753         call       build_charclass.isra.29                     ; build_charclass.isra.29
0000000000016758         test       eax, eax
000000000001675a         pop        rdx
000000000001675b         pop        rcx
000000000001675c         jne        loc_168f0

0000000000016762         movsx      rcx, byte [r13]
0000000000016767         mov        esi, 0x1
000000000001676c         test       cl, cl
000000000001676e         je         loc_167aa

                     loc_16770:
0000000000016770         lea        rax, qword [rcx+0x3f]                       ; CODE XREF=build_charclass_op+248
0000000000016774         test       rcx, rcx
0000000000016777         mov        rdx, rcx
000000000001677a         cmovns     rax, rcx
000000000001677e         sar        rdx, 0x3f
0000000000016782         add        r13, 0x1
0000000000016786         shr        rdx, 0x3a
000000000001678a         sar        rax, 0x6
000000000001678e         add        rcx, rdx
0000000000016791         and        ecx, 0x3f
0000000000016794         sub        rcx, rdx
0000000000016797         mov        rdx, rsi
000000000001679a         shl        rdx, cl
000000000001679d         movsx      rcx, byte [r13]
00000000000167a2         or         qword [rbx+rax*8], rdx
00000000000167a6         test       cl, cl
00000000000167a8         jne        loc_16770

                     loc_167aa:
00000000000167aa         test       r12b, r12b                                  ; CODE XREF=build_charclass_op+190
00000000000167ad         je         loc_167c2

00000000000167af         lea        rdx, qword [rbx+0x20]
00000000000167b3         mov        rax, rbx

                     loc_167b6:
00000000000167b6         not        qword [rax]                                 ; CODE XREF=build_charclass_op+272
00000000000167b9         add        rax, 0x8
00000000000167bd         cmp        rdx, rax
00000000000167c0         jne        loc_167b6

                     loc_167c2:
00000000000167c2         cmp        dword [rbp+0xb4], 0x1                       ; CODE XREF=build_charclass_op+253
00000000000167c9         jle        loc_167e3

00000000000167cb         mov        rcx, qword [rbp+0x78]
00000000000167cf         xor        eax, eax

                     loc_167d1:
00000000000167d1         mov        rdx, qword [rcx+rax]                        ; CODE XREF=build_charclass_op+305
00000000000167d5         and        qword [rbx+rax], rdx
00000000000167d9         add        rax, 0x8
00000000000167dd         cmp        rax, 0x20
00000000000167e1         jne        loc_167d1

                     loc_167e3:
00000000000167e3         lea        r9, qword [rsp+0x88+var_68]                 ; CODE XREF=build_charclass_op+281
00000000000167e8         lea        r12, qword [rbp+0x70]
00000000000167ec         lea        r13, qword [rbp+0x80]
00000000000167f3         xor        ecx, ecx
00000000000167f5         xor        edx, edx
00000000000167f7         mov        byte [rsp+0x88+var_60], 0x3
00000000000167fc         mov        r8, r9
00000000000167ff         mov        rsi, r13
0000000000016802         mov        rdi, r12
0000000000016805         mov        qword [rsp+0x88+var_68], rbx
000000000001680a         mov        qword [rsp+0x88+var_88], r9
000000000001680e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000016813         test       rax, rax
0000000000016816         mov        r14, rax
0000000000016819         je         loc_168b0

000000000001681f         cmp        dword [rbp+0xb4], 0x1
0000000000016826         jle        loc_168a0

0000000000016828         or         byte [rbp+0xb0], 0x2
000000000001682f         mov        r9, qword [rsp+0x88+var_88]
0000000000016833         xor        ecx, ecx
0000000000016835         xor        edx, edx
0000000000016837         mov        rsi, r13
000000000001683a         mov        rdi, r12
000000000001683d         mov        byte [rsp+0x88+var_60], 0x6
0000000000016842         mov        qword [rsp+0x88+var_68], r15
0000000000016847         mov        r8, r9
000000000001684a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001684f         test       rax, rax
0000000000016852         je         loc_168b0

0000000000016854         lea        r8, qword [rsp+0x88+var_58]
0000000000016859         mov        rdx, r14
000000000001685c         mov        rcx, rax
000000000001685f         mov        rsi, r13
0000000000016862         mov        rdi, r12
0000000000016865         mov        byte [rsp+0x88+var_50], 0xa
000000000001686a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001686f         mov        r14, rax

                     loc_16872:
0000000000016872         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=build_charclass_op+504, build_charclass_op+542, build_charclass_op+566, build_charclass_op+608
0000000000016877         xor        rdi, qword [fs:0x28]
0000000000016880         mov        rax, r14
0000000000016883         jne        loc_16915

0000000000016889         add        rsp, 0x58
000000000001688d         pop        rbx
000000000001688e         pop        rbp
000000000001688f         pop        r12
0000000000016891         pop        r13
0000000000016893         pop        r14
0000000000016895         pop        r15
0000000000016897         ret
                        ; endp
0000000000016898         align      32

                     loc_168a0:
00000000000168a0         mov        rdi, r15                                    ; CODE XREF=build_charclass_op+374
00000000000168a3         call       free_charset                                ; free_charset
00000000000168a8         jmp        loc_16872
00000000000168aa         align      16

                     loc_168b0:
00000000000168b0         mov        rdi, rbx                                    ; CODE XREF=build_charclass_op+361, build_charclass_op+418
00000000000168b3         call       sub_2a10                                    ; sub_2a10
00000000000168b8         mov        rdi, r15
00000000000168bb         call       free_charset                                ; free_charset

                     loc_168c0:
00000000000168c0         mov        rax, qword [rsp+0x88+var_80]                ; CODE XREF=build_charclass_op+78
00000000000168c5         xor        r14d, r14d
00000000000168c8         mov        dword [rax], 0xc
00000000000168ce         jmp        loc_16872

                     loc_168d0:
00000000000168d0         mov        rdi, rbx                                    ; CODE XREF=build_charclass_op+108
00000000000168d3         xor        r14d, r14d
00000000000168d6         call       sub_2a10                                    ; sub_2a10
00000000000168db         mov        rax, qword [rsp+0x88+var_80]
00000000000168e0         mov        dword [rax], 0xc
00000000000168e6         jmp        loc_16872
00000000000168e8         align      16

                     loc_168f0:
00000000000168f0         mov        rdi, rbx                                    ; CODE XREF=build_charclass_op+172
00000000000168f3         mov        dword [rsp+0x88+var_88], eax
00000000000168f6         xor        r14d, r14d
00000000000168f9         call       sub_2a10                                    ; sub_2a10
00000000000168fe         mov        rdi, r15
0000000000016901         call       free_charset                                ; free_charset
0000000000016906         mov        rdi, qword [rsp+0x88+var_80]
000000000001690b         mov        eax, dword [rsp+0x88+var_88]
000000000001690e         mov        dword [rdi], eax
0000000000016910         jmp        loc_16872

                     loc_16915:
0000000000016915         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_charclass_op+467
                        ; endp
000000000001691a         align      32                                          ; End of unwind block (FDE at 0x2677c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_150: int8_t, -336
        ;    var_154: int32_t, -340
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     re_compile_fastmap_iter.isra.30:
0000000000016920         push       r15                                         ; Begin of unwind block (FDE at 0x267dc), CODE XREF=rpl_re_compile_fastmap+80, rpl_re_compile_fastmap+111, rpl_re_compile_fastmap+145, rpl_re_compile_fastmap+179
0000000000016922         push       r14
0000000000016924         mov        rax, rdi
0000000000016927         push       r13
0000000000016929         push       r12
000000000001692b         push       rbp
000000000001692c         push       rbx
000000000001692d         xor        ebx, ebx
000000000001692f         mov        rbp, rcx
0000000000016932         sub        rsp, 0x178
0000000000016939         mov        rax, qword [rax]
000000000001693c         mov        qword [rsp+0x1a8+var_178], rdi
0000000000016941         mov        qword [rsp+0x1a8+var_188], rsi
0000000000016946         mov        rdi, qword [fs:0x28]
000000000001694f         mov        qword [rsp+0x1a8+var_40], rdi
0000000000016957         xor        edi, edi
0000000000016959         cmp        dword [rax+0xb4], 0x1
0000000000016960         mov        qword [rsp+0x1a8+var_180], rdx
0000000000016965         mov        qword [rsp+0x1a8+var_1A0], rax
000000000001696a         jne        loc_16983

000000000001696c         mov        rax, qword [rsp+0x1a8+var_178]
0000000000016971         mov        rax, qword [rax+0x18]
0000000000016975         mov        rbx, rax
0000000000016978         mov        qword [rsp+0x1a8+var_1A8], rax
000000000001697c         shr        rbx, 0x16
0000000000016980         and        ebx, 0x1

                     loc_16983:
0000000000016983         mov        rax, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+74
0000000000016988         cmp        qword [rax], 0x0
000000000001698c         jle        loc_16d9d

0000000000016992         lea        rax, qword [rsp+0x1a8+var_150]
0000000000016997         mov        qword [rsp+0x1a8+var_1A8], 0x0
000000000001699f         mov        qword [rsp+0x1a8+var_168], rax
00000000000169a4         lea        rax, qword [rsp+0x1a8+var_154]
00000000000169a9         mov        qword [rsp+0x1a8+var_160], rax
00000000000169ae         lea        rax, qword [rsp+0x1a8+var_148]
00000000000169b3         mov        qword [rsp+0x1a8+var_170], rax
00000000000169b8         jmp        loc_169fe
00000000000169ba         align      64

                     loc_169c0:
00000000000169c0         cmp        eax, 0x3                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+271
00000000000169c3         je         loc_16cb6

00000000000169c9         cmp        eax, 0x6
00000000000169cc         je         loc_16b58

00000000000169d2         and        edx, 0xfffffffd
00000000000169d5         cmp        dl, 0x5
00000000000169d8         je         loc_16dd4

00000000000169de         cmp        eax, 0x2
00000000000169e1         je         loc_16d34

                     loc_169e7:
00000000000169e7         mov        rdi, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+313, re_compile_fastmap_iter.isra.30+327, re_compile_fastmap_iter.isra.30+507, re_compile_fastmap_iter.isra.30+543, re_compile_fastmap_iter.isra.30+559, re_compile_fastmap_iter.isra.30+630, re_compile_fastmap_iter.isra.30+842, re_compile_fastmap_iter.isra.30+913, re_compile_fastmap_iter.isra.30+1028
00000000000169ec         add        qword [rsp+0x1a8+var_1A8], 0x1
00000000000169f1         mov        rax, qword [rsp+0x1a8+var_1A8]
00000000000169f5         cmp        rax, qword [rdi]
00000000000169f8         jge        loc_16d9d

                     loc_169fe:
00000000000169fe         mov        rax, qword [rsp+0x1a8+var_180]              ; CODE XREF=re_compile_fastmap_iter.isra.30+152
0000000000016a03         mov        rdi, qword [rsp+0x1a8+var_1A8]
0000000000016a07         mov        rax, qword [rax]
0000000000016a0a         mov        r12, qword [rax+rdi*8]
0000000000016a0e         mov        rax, qword [rsp+0x1a8+var_1A0]
0000000000016a13         mov        rcx, qword [rax]
0000000000016a16         mov        rax, r12
0000000000016a19         shl        rax, 0x4
0000000000016a1d         mov        qword [rsp+0x1a8+var_198], rax
0000000000016a22         lea        rsi, qword [rcx+rax]
0000000000016a26         movzx      eax, byte [rsi+8]
0000000000016a2a         cmp        eax, 0x1
0000000000016a2d         mov        edx, eax
0000000000016a2f         jne        loc_169c0

0000000000016a31         movzx      r13d, byte [rsi]
0000000000016a35         test       ebx, ebx
0000000000016a37         mov        byte [rbp+r13], 0x1
0000000000016a3d         je         loc_16a50

0000000000016a3f         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000016a44         mov        rax, qword [rax]
0000000000016a47         movsxd     rax, dword [rax+r13*4]
0000000000016a4b         mov        byte [rbp+rax], 0x1

                     loc_16a50:
0000000000016a50         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+285
0000000000016a55         test       byte [rax+0x1a], 0x40
0000000000016a59         je         loc_169e7

0000000000016a5b         mov        rsi, qword [rsp+0x1a8+var_1A0]
0000000000016a60         cmp        dword [rsi+0xb4], 0x1
0000000000016a67         jle        loc_169e7

0000000000016a6d         mov        rax, qword [rsi]
0000000000016a70         mov        rdi, qword [rsp+0x1a8+var_198]
0000000000016a75         movzx      edx, byte [rax+rdi]
0000000000016a79         mov        byte [rsp+0x1a8+var_148], dl
0000000000016a7d         lea        rdx, qword [r12+1]
0000000000016a82         cmp        qword [rsi+0x10], rdx
0000000000016a86         jbe        loc_16dc6

0000000000016a8c         lea        rcx, qword [rax+rdi+0x10]
0000000000016a91         mov        eax, dword [rcx+8]
0000000000016a94         and        eax, 0x2000ff
0000000000016a99         cmp        eax, 0x200001
0000000000016a9e         jne        loc_16dc6

0000000000016aa4         add        rdi, 0x20
0000000000016aa8         mov        r13, rdi
0000000000016aab         mov        rdi, qword [rsp+0x1a8+var_170]
0000000000016ab0         lea        rax, qword [rdi+1]
0000000000016ab4         jmp        loc_16adb
0000000000016ab6         align      64

                     loc_16ac0:
0000000000016ac0         mov        rcx, qword [rsi]                            ; CODE XREF=re_compile_fastmap_iter.isra.30+466
0000000000016ac3         add        rcx, r13
0000000000016ac6         add        r13, 0x10
0000000000016aca         mov        edx, dword [rcx+8]
0000000000016acd         and        edx, 0x2000ff
0000000000016ad3         cmp        edx, 0x200001
0000000000016ad9         jne        loc_16af4

                     loc_16adb:
0000000000016adb         movzx      edx, byte [rcx]                             ; CODE XREF=re_compile_fastmap_iter.isra.30+404
0000000000016ade         add        rax, 0x1
0000000000016ae2         mov        byte [rax-1], dl
0000000000016ae5         mov        rdx, rax
0000000000016ae8         sub        rdx, rdi
0000000000016aeb         add        rdx, r12
0000000000016aee         cmp        qword [rsi+0x10], rdx
0000000000016af2         ja         loc_16ac0

                     loc_16af4:
0000000000016af4         mov        rsi, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+441, re_compile_fastmap_iter.isra.30+1199
0000000000016af9         mov        rcx, qword [rsp+0x1a8+var_168]
0000000000016afe         mov        rdi, qword [rsp+0x1a8+var_160]
0000000000016b03         sub        rax, rsi
0000000000016b06         mov        qword [rcx], 0x0
0000000000016b0d         mov        r12, rax
0000000000016b10         mov        rdx, rax
0000000000016b13         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000016b18         cmp        r12, rax
0000000000016b1b         jne        loc_169e7

0000000000016b21         mov        edi, dword [rsp+0x1a8+var_154]              ; argument "__wc" for method j_towlower
0000000000016b25         call       j_towlower                                  ; towlower
0000000000016b2a         mov        rdx, qword [rsp+0x1a8+var_168]              ; argument "__ps" for method j_wcrtomb
0000000000016b2f         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
0000000000016b34         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000016b36         call       j_wcrtomb                                   ; wcrtomb
0000000000016b3b         cmp        rax, 0xffffffffffffffff
0000000000016b3f         je         loc_169e7

0000000000016b45         movzx      eax, byte [rsp+0x1a8+var_148]
0000000000016b4a         mov        byte [rbp+rax], 0x1
0000000000016b4f         jmp        loc_169e7
0000000000016b54         align      8

                     loc_16b58:
0000000000016b58         mov        rax, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=re_compile_fastmap_iter.isra.30+172
0000000000016b5d         mov        r12, qword [rsi]
0000000000016b60         cmp        dword [rax+0xb4], 0x1
0000000000016b67         jle        loc_16b8d

0000000000016b69         cmp        qword [r12+0x48], 0x0
0000000000016b6f         jne        loc_16c6f

0000000000016b75         test       byte [r12+0x20], 0x1
0000000000016b7b         jne        loc_16c6f

0000000000016b81         cmp        qword [r12+0x40], 0x0
0000000000016b87         jne        loc_16c6f

                     loc_16b8d:
0000000000016b8d         xor        r13d, r13d                                  ; CODE XREF=re_compile_fastmap_iter.isra.30+583
0000000000016b90         cmp        qword [r12+0x28], 0x0
0000000000016b96         jle        loc_169e7

0000000000016b9c         mov        r15, r12
0000000000016b9f         mov        r14, qword [rsp+0x1a8+var_168]
0000000000016ba4         mov        r12, rbp
0000000000016ba7         mov        rbp, r13
0000000000016baa         mov        r13d, ebx
0000000000016bad         jmp        loc_16bbd

                     loc_16baf:
0000000000016baf         add        rbp, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+760, re_compile_fastmap_iter.isra.30+774, re_compile_fastmap_iter.isra.30+806
0000000000016bb3         cmp        rbp, qword [r15+0x28]
0000000000016bb7         jge        loc_16c64

                     loc_16bbd:
0000000000016bbd         mov        qword [r14], 0x0                            ; CODE XREF=re_compile_fastmap_iter.isra.30+653, re_compile_fastmap_iter.isra.30+830
0000000000016bc4         mov        rax, qword [r15]
0000000000016bc7         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
0000000000016bca         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
0000000000016bcf         lea        rbx, qword [rbp*4]
0000000000016bd7         mov        esi, dword [rax+rbp*4]                      ; argument "__wc" for method j_wcrtomb
0000000000016bda         call       j_wcrtomb                                   ; wcrtomb
0000000000016bdf         cmp        rax, 0xffffffffffffffff
0000000000016be3         je         loc_16c0f

0000000000016be5         movzx      edx, byte [rsp+0x1a8+var_148]
0000000000016bea         test       r13d, r13d
0000000000016bed         mov        byte [r12+rdx], 0x1
0000000000016bf2         mov        qword [rsp+0x1a8+var_198], rdx
0000000000016bf7         je         loc_16c0f

0000000000016bf9         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000016bfe         mov        rdx, qword [rsp+0x1a8+var_198]
0000000000016c03         mov        rax, qword [rax]
0000000000016c06         movsxd     rax, dword [rax+rdx*4]
0000000000016c0a         mov        byte [r12+rax], 0x1

                     loc_16c0f:
0000000000016c0f         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+707, re_compile_fastmap_iter.isra.30+727
0000000000016c14         test       byte [rax+0x1a], 0x40
0000000000016c18         je         loc_16baf

0000000000016c1a         mov        rax, qword [rsp+0x1a8+var_1A0]
0000000000016c1f         cmp        dword [rax+0xb4], 0x1
0000000000016c26         jle        loc_16baf

0000000000016c28         mov        rax, qword [r15]
0000000000016c2b         mov        edi, dword [rax+rbx]                        ; argument "__wc" for method j_towlower
0000000000016c2e         call       j_towlower                                  ; towlower
0000000000016c33         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
0000000000016c38         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
0000000000016c3b         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000016c3d         call       j_wcrtomb                                   ; wcrtomb
0000000000016c42         cmp        rax, 0xffffffffffffffff
0000000000016c46         je         loc_16baf

0000000000016c4c         movzx      eax, byte [rsp+0x1a8+var_148]
0000000000016c51         add        rbp, 0x1
0000000000016c55         mov        byte [r12+rax], 0x1
0000000000016c5a         cmp        rbp, qword [r15+0x28]
0000000000016c5e         jl         loc_16bbd

                     loc_16c64:
0000000000016c64         mov        ebx, r13d                                   ; CODE XREF=re_compile_fastmap_iter.isra.30+663
0000000000016c67         mov        rbp, r12
0000000000016c6a         jmp        loc_169e7

                     loc_16c6f:
0000000000016c6f         mov        r12, qword [rsp+0x1a8+var_168]              ; CODE XREF=re_compile_fastmap_iter.isra.30+591, re_compile_fastmap_iter.isra.30+603, re_compile_fastmap_iter.isra.30+615
0000000000016c74         mov        r13, qword [rsp+0x1a8+var_160]
0000000000016c79         mov        byte [rsp+0x1a8+var_154], 0x0
0000000000016c7e         nop

                     loc_16c80:
0000000000016c80         xor        edi, edi                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+911
0000000000016c82         mov        qword [r12], 0x0
0000000000016c8a         mov        rcx, r12
0000000000016c8d         mov        edx, 0x1
0000000000016c92         mov        rsi, r13
0000000000016c95         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000016c9a         cmp        rax, 0xfffffffffffffffe
0000000000016c9e         jne        loc_16caa

0000000000016ca0         movzx      eax, byte [rsp+0x1a8+var_154]
0000000000016ca5         mov        byte [rbp+rax], 0x1

                     loc_16caa:
0000000000016caa         add        byte [rsp+0x1a8+var_154], 0x1               ; CODE XREF=re_compile_fastmap_iter.isra.30+894
0000000000016caf         jne        loc_16c80

0000000000016cb1         jmp        loc_169e7

                     loc_16cb6:
0000000000016cb6         mov        r13, rbp                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+163
0000000000016cb9         xor        r12d, r12d
0000000000016cbc         mov        qword [rsp+0x1a8+var_190], 0x0

                     loc_16cc5:
0000000000016cc5         mov        rax, qword [rsp+0x1a8+var_198]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1042
0000000000016cca         mov        rsi, qword [rsp+0x1a8+var_190]
0000000000016ccf         xor        r14d, r14d
0000000000016cd2         mov        rax, qword [rcx+rax]
0000000000016cd6         mov        r15, qword [rax+rsi]
0000000000016cda         nop        word [rax+rax]

                     loc_16ce0:
0000000000016ce0         bt         r15, r14                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+1005
0000000000016ce4         jae        loc_16d05

0000000000016ce6         test       ebx, ebx
0000000000016ce8         mov        byte [r13+r14], 0x1
0000000000016cee         je         loc_16d05

0000000000016cf0         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000016cf5         mov        rax, qword [rax]
0000000000016cf8         lea        rdx, qword [r12+r14]
0000000000016cfc         movsxd     rax, dword [rax+rdx*4]
0000000000016d00         mov        byte [rbp+rax], 0x1

                     loc_16d05:
0000000000016d05         add        r14, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+964, re_compile_fastmap_iter.isra.30+974
0000000000016d09         cmp        r14, 0x40
0000000000016d0d         jne        loc_16ce0

0000000000016d0f         add        r12, 0x40
0000000000016d13         add        qword [rsp+0x1a8+var_190], 0x8
0000000000016d19         add        r13, 0x40
0000000000016d1d         cmp        r12, 0x100
0000000000016d24         je         loc_169e7

0000000000016d2a         mov        rax, qword [rsp+0x1a8+var_1A0]
0000000000016d2f         mov        rcx, qword [rax]
0000000000016d32         jmp        loc_16cc5

                     loc_16d34:
0000000000016d34         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x23000, CODE XREF=re_compile_fastmap_iter.isra.30+193
0000000000016d3c         movups     xmmword [rbp], xmm0
0000000000016d40         movups     xmmword [rbp+0x10], xmm0
0000000000016d44         movups     xmmword [rbp+0x20], xmm0
0000000000016d48         movups     xmmword [rbp+0x30], xmm0
0000000000016d4c         movups     xmmword [rbp+0x40], xmm0
0000000000016d50         movups     xmmword [rbp+0x50], xmm0
0000000000016d54         movups     xmmword [rbp+0x60], xmm0
0000000000016d58         movups     xmmword [rbp+0x70], xmm0
0000000000016d5c         movups     xmmword [rbp+0x80], xmm0
0000000000016d63         movups     xmmword [rbp+0x90], xmm0
0000000000016d6a         movups     xmmword [rbp+0xa0], xmm0
0000000000016d71         movups     xmmword [rbp+0xb0], xmm0
0000000000016d78         movups     xmmword [rbp+0xc0], xmm0
0000000000016d7f         movups     xmmword [rbp+0xd0], xmm0
0000000000016d86         movups     xmmword [rbp+0xe0], xmm0
0000000000016d8d         movups     xmmword [rbp+0xf0], xmm0

                     loc_16d94:
0000000000016d94         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1309
0000000000016d99         or         byte [rax+0x38], 0x1

                     loc_16d9d:
0000000000016d9d         mov        rax, qword [rsp+0x1a8+var_40]               ; CODE XREF=re_compile_fastmap_iter.isra.30+108, re_compile_fastmap_iter.isra.30+216, re_compile_fastmap_iter.isra.30+1303
0000000000016da5         xor        rax, qword [fs:0x28]
0000000000016dae         jne        loc_16e42

0000000000016db4         add        rsp, 0x178
0000000000016dbb         pop        rbx
0000000000016dbc         pop        rbp
0000000000016dbd         pop        r12
0000000000016dbf         pop        r13
0000000000016dc1         pop        r14
0000000000016dc3         pop        r15
0000000000016dc5         ret
                        ; endp

                     loc_16dc6:
0000000000016dc6         mov        rax, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+358, re_compile_fastmap_iter.isra.30+382
0000000000016dcb         add        rax, 0x1
0000000000016dcf         jmp        loc_16af4

                     loc_16dd4:
0000000000016dd4         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x23000, CODE XREF=re_compile_fastmap_iter.isra.30+184
0000000000016ddc         cmp        eax, 0x2
0000000000016ddf         movups     xmmword [rbp], xmm0
0000000000016de3         movups     xmmword [rbp+0x10], xmm0
0000000000016de7         movups     xmmword [rbp+0x20], xmm0
0000000000016deb         movups     xmmword [rbp+0x30], xmm0
0000000000016def         movups     xmmword [rbp+0x40], xmm0
0000000000016df3         movups     xmmword [rbp+0x50], xmm0
0000000000016df7         movups     xmmword [rbp+0x60], xmm0
0000000000016dfb         movups     xmmword [rbp+0x70], xmm0
0000000000016dff         movups     xmmword [rbp+0x80], xmm0
0000000000016e06         movups     xmmword [rbp+0x90], xmm0
0000000000016e0d         movups     xmmword [rbp+0xa0], xmm0
0000000000016e14         movups     xmmword [rbp+0xb0], xmm0
0000000000016e1b         movups     xmmword [rbp+0xc0], xmm0
0000000000016e22         movups     xmmword [rbp+0xd0], xmm0
0000000000016e29         movups     xmmword [rbp+0xe0], xmm0
0000000000016e30         movups     xmmword [rbp+0xf0], xmm0
0000000000016e37         jne        loc_16d9d

0000000000016e3d         jmp        loc_16d94

                     loc_16e42:
0000000000016e42         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_fastmap_iter.isra.30+1166
                        ; endp
0000000000016e47         align      16                                          ; End of unwind block (FDE at 0x267dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept_bytes.isra.31:
0000000000016e50         shl        rdx, 0x4                                    ; Begin of unwind block (FDE at 0x2682c), CODE XREF=check_arrival+597, set_regs+888, sift_states_backward+521, re_search_internal+3298
0000000000016e54         push       r13
0000000000016e56         push       r12
0000000000016e58         lea        r9, qword [rdi+rdx]
0000000000016e5c         push       rbp
0000000000016e5d         push       rbx
0000000000016e5e         sub        rsp, 0x8
0000000000016e62         movzx      r11d, byte [r9+8]
0000000000016e67         cmp        r11b, 0x7
0000000000016e6b         je         loc_16f80

0000000000016e71         cmp        dword [rcx+0x90], 0x1
0000000000016e78         je         loc_16f40

0000000000016e7e         mov        rbx, rsi
0000000000016e81         mov        rdi, rcx
0000000000016e84         mov        rsi, r8
0000000000016e87         mov        r10, rcx
0000000000016e8a         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
0000000000016e8f         cmp        r11b, 0x5
0000000000016e93         mov        ebp, eax
0000000000016e95         je         loc_16f50

0000000000016e9b         cmp        r11b, 0x6
0000000000016e9f         jne        loc_16f40

0000000000016ea5         cmp        eax, 0x1
0000000000016ea8         jle        loc_16f40

0000000000016eae         mov        r13, qword [r9]
0000000000016eb1         mov        rsi, qword [r13+0x40]
0000000000016eb5         mov        rdx, qword [r13+0x28]
0000000000016eb9         test       rsi, rsi
0000000000016ebc         jne        loc_16ec9

0000000000016ebe         cmp        qword [r13+0x48], 0x0
0000000000016ec3         je         loc_16fb8

                     loc_16ec9:
0000000000016ec9         mov        rax, qword [r10+0x10]                       ; CODE XREF=check_node_accept_bytes.isra.31+108, check_node_accept_bytes.isra.31+363
0000000000016ecd         test       rdx, rdx
0000000000016ed0         mov        r12d, dword [rax+r8*4]
0000000000016ed4         jle        loc_16ef7

0000000000016ed6         mov        rcx, qword [r13]
0000000000016eda         cmp        r12d, dword [rcx]
0000000000016edd         je         loc_16f32

0000000000016edf         xor        eax, eax
0000000000016ee1         jmp        loc_16eee
0000000000016ee3         align      8

                     loc_16ee8:
0000000000016ee8         cmp        r12d, dword [rcx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+165
0000000000016eec         je         loc_16f32

                     loc_16eee:
0000000000016eee         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+145
0000000000016ef2         cmp        rax, rdx
0000000000016ef5         jne        loc_16ee8

                     loc_16ef7:
0000000000016ef7         mov        rax, qword [r13+0x48]                       ; CODE XREF=check_node_accept_bytes.isra.31+132
0000000000016efb         test       rax, rax
0000000000016efe         jle        loc_16fdc

0000000000016f04         xor        ebx, ebx
0000000000016f06         jmp        loc_16f1e
0000000000016f08         align      16

                     loc_16f10:
0000000000016f10         add        rbx, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+224
0000000000016f14         cmp        rbx, qword [r13+0x48]
0000000000016f18         jge        loc_16fd8

                     loc_16f1e:
0000000000016f1e         mov        rax, qword [r13+0x18]                       ; CODE XREF=check_node_accept_bytes.isra.31+182
0000000000016f22         mov        edi, r12d                                   ; argument "__wc" for method j_iswctype
0000000000016f25         mov        rsi, qword [rax+rbx*8]                      ; argument "__desc" for method j_iswctype
0000000000016f29         call       j_iswctype                                  ; iswctype
0000000000016f2e         test       eax, eax
0000000000016f30         je         loc_16f10

                     loc_16f32:
0000000000016f32         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+141, check_node_accept_bytes.isra.31+156, check_node_accept_bytes.isra.31+441
0000000000016f37         je         loc_16f42

0000000000016f39         nop        dword [rax]

                     loc_16f40:
0000000000016f40         xor        ebp, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+40, check_node_accept_bytes.isra.31+79, check_node_accept_bytes.isra.31+88, check_node_accept_bytes.isra.31+259, check_node_accept_bytes.isra.31+281, check_node_accept_bytes.isra.31+299, check_node_accept_bytes.isra.31+317, check_node_accept_bytes.isra.31+330, check_node_accept_bytes.isra.31+353, check_node_accept_bytes.isra.31+380, check_node_accept_bytes.isra.31+457

                     loc_16f42:
0000000000016f42         add        rsp, 0x8                                    ; CODE XREF=check_node_accept_bytes.isra.31+231, check_node_accept_bytes.isra.31+270, check_node_accept_bytes.isra.31+283, check_node_accept_bytes.isra.31+355, check_node_accept_bytes.isra.31+374, check_node_accept_bytes.isra.31+497
0000000000016f46         mov        eax, ebp
0000000000016f48         pop        rbx
0000000000016f49         pop        rbp
0000000000016f4a         pop        r12
0000000000016f4c         pop        r13
0000000000016f4e         ret
                        ; endp
0000000000016f4f         align      16

                     loc_16f50:
0000000000016f50         cmp        eax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+69
0000000000016f53         jle        loc_16f40

0000000000016f55         mov        rax, qword [rbx]
0000000000016f58         test       al, 0x40
0000000000016f5a         je         loc_16f70

                     loc_16f5c:
0000000000016f5c         test       al, 0x80                                    ; CODE XREF=check_node_accept_bytes.isra.31+297
0000000000016f5e         je         loc_16f42

0000000000016f60         mov        rax, qword [r10+8]
0000000000016f64         cmp        byte [rax+r8], 0x0
0000000000016f69         je         loc_16f40

0000000000016f6b         jmp        loc_16f42
0000000000016f6d         align      16

                     loc_16f70:
0000000000016f70         mov        rdx, qword [r10+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+266
0000000000016f74         cmp        byte [rdx+r8], 0xa
0000000000016f79         jne        loc_16f5c

0000000000016f7b         jmp        loc_16f40
0000000000016f7d         align      128

                     loc_16f80:
0000000000016f80         mov        rdx, qword [rcx+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+27
0000000000016f84         lea        rsi, qword [rdx+r8]
0000000000016f88         movzx      eax, byte [rsi]
0000000000016f8b         cmp        al, 0xc1
0000000000016f8d         jbe        loc_16f40

0000000000016f8f         mov        rcx, qword [rcx+0x58]
0000000000016f93         lea        rdi, qword [r8+1]
0000000000016f97         cmp        rdi, rcx
0000000000016f9a         jge        loc_16f40

0000000000016f9c         cmp        al, 0xdf
0000000000016f9e         movzx      edx, byte [rdx+r8+1]
0000000000016fa4         ja         loc_1700e

0000000000016fa6         add        edx, 0xffffff80
0000000000016fa9         mov        ebp, 0x2
0000000000016fae         cmp        dl, 0x3f
0000000000016fb1         ja         loc_16f40

0000000000016fb3         jmp        loc_16f42
0000000000016fb5         align      8

                     loc_16fb8:
0000000000016fb8         test       rdx, rdx                                    ; CODE XREF=check_node_accept_bytes.isra.31+115
0000000000016fbb         jne        loc_16ec9

                     loc_16fc1:
0000000000016fc1         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+399, check_node_accept_bytes.isra.31+423
0000000000016fc6         jne        loc_16f42

0000000000016fcc         jmp        loc_16f40
0000000000016fd1         align      8

                     loc_16fd8:
0000000000016fd8         mov        rsi, qword [r13+0x40]                       ; CODE XREF=check_node_accept_bytes.isra.31+200

                     loc_16fdc:
0000000000016fdc         test       rsi, rsi                                    ; CODE XREF=check_node_accept_bytes.isra.31+174
0000000000016fdf         jle        loc_16fc1

0000000000016fe1         mov        rdx, qword [r13+8]
0000000000016fe5         xor        eax, eax
0000000000016fe7         jmp        loc_16ff9
0000000000016fe9         align      16

                     loc_16ff0:
0000000000016ff0         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+429, check_node_accept_bytes.isra.31+439
0000000000016ff4         cmp        rax, rsi
0000000000016ff7         je         loc_16fc1

                     loc_16ff9:
0000000000016ff9         cmp        r12d, dword [rdx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+407
0000000000016ffd         jl         loc_16ff0

0000000000016fff         mov        rcx, qword [r13+0x10]
0000000000017003         cmp        r12d, dword [rcx+rax*4]
0000000000017007         jg         loc_16ff0

0000000000017009         jmp        loc_16f32

                     loc_1700e:
000000000001700e         cmp        al, 0xef                                    ; CODE XREF=check_node_accept_bytes.isra.31+340
0000000000017010         ja         loc_17058

0000000000017012         cmp        al, 0xe0
0000000000017014         jne        loc_1701f

0000000000017016         cmp        dl, 0x9f
0000000000017019         jbe        loc_16f40

                     loc_1701f:
000000000001701f         mov        ebp, 0x3                                    ; CODE XREF=check_node_accept_bytes.isra.31+452

                     loc_17024:
0000000000017024         movsxd     rdi, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+542, check_node_accept_bytes.isra.31+566, check_node_accept_bytes.isra.31+594
0000000000017027         add        r8, rdi
000000000001702a         cmp        rcx, r8
000000000001702d         jl         loc_16f40

0000000000017033         mov        eax, 0x1
0000000000017038         jmp        loc_17047

                     loc_1703a:
000000000001703a         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+513
000000000001703e         cmp        rdi, rax
0000000000017041         jle        loc_16f42

                     loc_17047:
0000000000017047         movzx      ebx, byte [rsi+rax]                         ; CODE XREF=check_node_accept_bytes.isra.31+488
000000000001704b         lea        edx, dword [rbx-0x80]
000000000001704e         cmp        dl, 0x3f
0000000000017051         jbe        loc_1703a

0000000000017053         jmp        loc_16f40

                     loc_17058:
0000000000017058         cmp        al, 0xf7                                    ; CODE XREF=check_node_accept_bytes.isra.31+448
000000000001705a         ja         loc_17070

000000000001705c         cmp        al, 0xf0
000000000001705e         jne        loc_17069

0000000000017060         cmp        dl, 0x8f
0000000000017063         jbe        loc_16f40

                     loc_17069:
0000000000017069         mov        ebp, 0x4                                    ; CODE XREF=check_node_accept_bytes.isra.31+526
000000000001706e         jmp        loc_17024

                     loc_17070:
0000000000017070         cmp        al, 0xfb                                    ; CODE XREF=check_node_accept_bytes.isra.31+522
0000000000017072         ja         loc_17088

0000000000017074         cmp        al, 0xf8
0000000000017076         jne        loc_17081

0000000000017078         cmp        dl, 0x87
000000000001707b         jbe        loc_16f40

                     loc_17081:
0000000000017081         mov        ebp, 0x5                                    ; CODE XREF=check_node_accept_bytes.isra.31+550
0000000000017086         jmp        loc_17024

                     loc_17088:
0000000000017088         cmp        al, 0xfd                                    ; CODE XREF=check_node_accept_bytes.isra.31+546
000000000001708a         ja         loc_16f40

0000000000017090         cmp        al, 0xfc
0000000000017092         jne        loc_1709d

0000000000017094         cmp        dl, 0x83
0000000000017097         jbe        loc_16f40

                     loc_1709d:
000000000001709d         mov        ebp, 0x6                                    ; CODE XREF=check_node_accept_bytes.isra.31+578
00000000000170a2         jmp        loc_17024
00000000000170a4         align      16                                          ; End of unwind block (FDE at 0x2682c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     check_arrival:
00000000000170b0         push       r15                                         ; Begin of unwind block (FDE at 0x26868), CODE XREF=get_subexp_sub.isra.32+48, transit_state_bkref.isra.34+1675
00000000000170b2         push       r14
00000000000170b4         mov        r15, rdi
00000000000170b7         push       r13
00000000000170b9         push       r12
00000000000170bb         push       rbp
00000000000170bc         push       rbx
00000000000170bd         mov        rbp, rcx
00000000000170c0         mov        rbx, rdx
00000000000170c3         sub        rsp, 0xd8
00000000000170ca         mov        rcx, qword [rdi+0x98]
00000000000170d1         mov        r13, qword [rsi+8]
00000000000170d5         mov        rax, qword [fs:0x28]
00000000000170de         mov        qword [rsp+0x108+var_40], rax
00000000000170e6         xor        eax, eax
00000000000170e8         mov        rax, rdx
00000000000170eb         mov        qword [rsp+0x108+var_A8], rsi
00000000000170f0         mov        qword [rsp+0x108+var_90], r8
00000000000170f5         shl        rax, 0x4
00000000000170f9         add        rax, qword [rcx]
00000000000170fc         mov        qword [rsp+0x108+var_C8], r9
0000000000017101         mov        qword [rsp+0x108+var_D8], rcx
0000000000017106         mov        dword [rsp+0x108+var_80], 0x0
0000000000017111         mov        rax, qword [rax]
0000000000017114         mov        qword [rsp+0x108+var_C0], rax
0000000000017119         movsxd     rax, dword [rdi+0xe0]
0000000000017120         add        rax, r9
0000000000017123         cmp        rax, r13
0000000000017126         jge        loc_17746

                     loc_1712c:
000000000001712c         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1787
0000000000017131         mov        rdx, qword [r15+0xb8]
0000000000017138         mov        rcx, qword [r15+0x48]
000000000001713c         mov        r12, qword [rax]
000000000001713f         mov        r14, qword [rax+0x10]
0000000000017143         mov        qword [rsp+0x108+var_A0], rdx
0000000000017148         mov        qword [rsp+0x108+var_98], rcx
000000000001714d         mov        edx, dword [r15+0xa0]
0000000000017154         test       r12, r12
0000000000017157         mov        qword [r15+0xb8], r14
000000000001715e         je         loc_17540

0000000000017164         lea        rsi, qword [r12-1]
0000000000017169         mov        qword [r15+0x48], r12
000000000001716d         mov        rdi, r15
0000000000017170         call       re_string_context_at                        ; re_string_context_at
0000000000017175         cmp        r12, rbp
0000000000017178         mov        r13d, eax
000000000001717b         je         loc_17553

0000000000017181         mov        rbp, qword [r14+r12*8]
0000000000017185         test       rbp, rbp
0000000000017188         je         loc_17194

000000000001718a         test       byte [rbp+0x68], 0x40
000000000001718e         jne        loc_176b0

                     loc_17194:
0000000000017194         pxor       xmm0, xmm0                                  ; CODE XREF=check_arrival+216
0000000000017198         mov        qword [rsp+0x108+var_68], 0x0
00000000000171a4         movaps     xmmword [rsp+0x108+var_78], xmm0

                     loc_171ac:
00000000000171ac         cmp        r12, qword [rsp+0x108+var_C8]               ; CODE XREF=check_arrival+1575, check_arrival+1681
00000000000171b1         jge        loc_174d8

00000000000171b7         mov        ecx, dword [r15+0xe0]
00000000000171be         test       ecx, ecx
00000000000171c0         js         loc_174d8

00000000000171c6         lea        rbx, qword [rsp+0x108+var_78]
00000000000171ce         lea        rax, qword [0x8+r12*8]
00000000000171d6         mov        qword [rsp+0x108+var_108], r12
00000000000171da         mov        qword [rsp+0x108+var_E8], 0x0
00000000000171e3         mov        qword [rsp+0x108+var_100], rbx
00000000000171e8         lea        rbx, qword [rsp+0x108+var_58]
00000000000171f0         mov        qword [rsp+0x108+var_F8], rax
00000000000171f5         mov        rax, qword [r15+0xb8]
00000000000171fc         mov        qword [rsp+0x108+var_F0], rbx
0000000000017201         lea        rbx, qword [rsp+0x108+var_7C]
0000000000017209         mov        qword [rsp+0x108+var_B0], rbx

                     loc_1720e:
000000000001720e         mov        rcx, qword [rsp+0x108+var_F8]               ; CODE XREF=check_arrival+1058
0000000000017213         mov        qword [rsp+0x108+var_70], 0x0
000000000001721f         mov        rsi, qword [rax+rcx]
0000000000017223         test       rsi, rsi
0000000000017226         je         loc_175e8

000000000001722c         mov        rdi, qword [rsp+0x108+var_100]
0000000000017231         add        rsi, 0x8
0000000000017235         call       re_node_set_merge                           ; re_node_set_merge
000000000001723a         test       eax, eax
000000000001723c         mov        dword [rsp+0x108+var_80], eax
0000000000017243         jne        loc_17620

0000000000017249         test       rbp, rbp
000000000001724c         je         loc_173f8

                     loc_17252:
0000000000017252         cmp        qword [rbp+0x28], 0x0                       ; CODE XREF=check_arrival+1339
0000000000017257         mov        rax, qword [rsp+0x108+var_F0]
000000000001725c         pxor       xmm0, xmm0
0000000000017260         mov        r12, qword [r15+0x98]
0000000000017267         mov        dword [rsp+0x108+var_7C], 0x0
0000000000017272         mov        qword [rax+0x10], 0x0
000000000001727a         movaps     xmmword [rax], xmm0
000000000001727d         jle        loc_177b0

0000000000017283         lea        rax, qword [r12+0xd8]
000000000001728b         xor        ebx, ebx
000000000001728d         mov        qword [rsp+0x108+var_E0], rax
0000000000017292         jmp        loc_172d9
0000000000017294         align      8

                     loc_17298:
0000000000017298         mov        rdx, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+580, check_arrival+1327
000000000001729c         mov        rdi, r15
000000000001729f         call       check_node_accept                           ; check_node_accept
00000000000172a4         test       al, al
00000000000172a6         je         loc_172cb

                     loc_172a8:
00000000000172a8         lea        r13, qword [r14*8]                          ; CODE XREF=check_arrival+1314

                     loc_172b0:
00000000000172b0         mov        rax, qword [r12+0x18]                       ; CODE XREF=check_arrival+779, check_arrival+794
00000000000172b5         mov        rdi, qword [rsp+0x108+var_100]
00000000000172ba         mov        rsi, qword [rax+r13]
00000000000172be         call       re_node_set_insert                          ; re_node_set_insert
00000000000172c3         test       al, al
00000000000172c5         je         loc_17608

                     loc_172cb:
00000000000172cb         add        rbx, 0x1                                    ; CODE XREF=check_arrival+502
00000000000172cf         cmp        rbx, qword [rbp+0x28]
00000000000172d3         jge        loc_17660

                     loc_172d9:
00000000000172d9         mov        rax, qword [rbp+0x30]                       ; CODE XREF=check_arrival+482
00000000000172dd         mov        rdi, qword [r12]
00000000000172e1         mov        r14, qword [rax+rbx*8]
00000000000172e5         mov        r13, r14
00000000000172e8         shl        r13, 0x4
00000000000172ec         lea        rsi, qword [rdi+r13]
00000000000172f0         test       byte [rsi+0xa], 0x10
00000000000172f4         je         loc_17298

00000000000172f6         mov        r8, qword [rsp+0x108+var_108]
00000000000172fa         mov        rsi, qword [rsp+0x108+var_E0]
00000000000172ff         mov        rcx, r15
0000000000017302         mov        rdx, r14
0000000000017305         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000001730a         cmp        eax, 0x1
000000000001730d         jle        loc_175d0

0000000000017313         cdqe
0000000000017315         add        rax, qword [rsp+0x108+var_108]
0000000000017319         mov        rdx, qword [r12+0x18]
000000000001731e         lea        r13, qword [r14*8]
0000000000017326         mov        rdx, qword [rdx+r14*8]
000000000001732a         mov        rcx, rax
000000000001732d         mov        qword [rsp+0x108+var_D0], rax
0000000000017332         lea        r14, qword [rax*8]
000000000001733a         mov        rax, qword [r15+0xb8]
0000000000017341         mov        rsi, qword [rax+rcx*8]
0000000000017345         mov        qword [rsp+0x108+var_50], 0x0
0000000000017351         test       rsi, rsi
0000000000017354         je         loc_17379

0000000000017356         mov        rdi, qword [rsp+0x108+var_F0]
000000000001735b         add        rsi, 0x8
000000000001735f         mov        qword [rsp+0x108+var_B8], rdx
0000000000017364         call       re_node_set_merge                           ; re_node_set_merge
0000000000017369         test       eax, eax
000000000001736b         mov        dword [rsp+0x108+var_7C], eax
0000000000017372         mov        rdx, qword [rsp+0x108+var_B8]
0000000000017377         jne        loc_173d0

                     loc_17379:
0000000000017379         mov        rdi, qword [rsp+0x108+var_F0]               ; CODE XREF=check_arrival+676
000000000001737e         mov        rsi, rdx
0000000000017381         call       re_node_set_insert                          ; re_node_set_insert
0000000000017386         test       al, al
0000000000017388         je         loc_17608

000000000001738e         add        r14, qword [r15+0xb8]
0000000000017395         mov        rdx, qword [rsp+0x108+var_F0]
000000000001739a         mov        rsi, r12
000000000001739d         mov        rdi, qword [rsp+0x108+var_B0]
00000000000173a2         call       re_acquire_state                            ; re_acquire_state
00000000000173a7         mov        rdx, qword [rsp+0x108+var_D0]
00000000000173ac         mov        qword [r14], rax
00000000000173af         mov        rax, qword [r15+0xb8]
00000000000173b6         cmp        qword [rax+rdx*8], 0x0
00000000000173bb         jne        loc_172b0

00000000000173c1         mov        edx, dword [rsp+0x108+var_7C]
00000000000173c8         test       edx, edx
00000000000173ca         je         loc_172b0

                     loc_173d0:
00000000000173d0         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+711
00000000000173d8         call       sub_2a10                                    ; sub_2a10
00000000000173dd         mov        eax, dword [rsp+0x108+var_7C]
00000000000173e4         test       eax, eax
00000000000173e6         mov        dword [rsp+0x108+var_80], eax
00000000000173ed         jne        loc_17620

00000000000173f3         nop        dword [rax+rax]

                     loc_173f8:
00000000000173f8         mov        rax, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+412, check_arrival+1480
00000000000173fc         cmp        qword [rsp+0x108+var_70], 0x0
0000000000017405         lea        rbx, qword [rax+1]
0000000000017409         mov        r12, rbx
000000000001740c         je         loc_17464

000000000001740e         mov        ecx, dword [rsp+0x108+arg_0]
0000000000017415         mov        rdx, qword [rsp+0x108+var_C0]
000000000001741a         mov        rsi, qword [rsp+0x108+var_100]
000000000001741f         mov        rdi, qword [rsp+0x108+var_D8]
0000000000017424         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
0000000000017429         test       eax, eax
000000000001742b         mov        dword [rsp+0x108+var_80], eax
0000000000017432         jne        loc_17620

0000000000017438         mov        r8d, dword [rsp+0x108+arg_0]
0000000000017440         mov        rcx, qword [rsp+0x108+var_C0]
0000000000017445         mov        rdx, rbx
0000000000017448         mov        rsi, qword [rsp+0x108+var_100]
000000000001744d         mov        rdi, r15
0000000000017450         call       expand_bkref_cache                          ; expand_bkref_cache
0000000000017455         test       eax, eax
0000000000017457         mov        dword [rsp+0x108+var_80], eax
000000000001745e         jne        loc_17620

                     loc_17464:
0000000000017464         mov        edx, dword [r15+0xa0]                       ; CODE XREF=check_arrival+860, check_arrival+1356
000000000001746b         mov        rsi, qword [rsp+0x108+var_108]
000000000001746f         mov        rdi, r15
0000000000017472         call       re_string_context_at                        ; re_string_context_at
0000000000017477         mov        rdx, qword [rsp+0x108+var_100]
000000000001747c         mov        rsi, qword [rsp+0x108+var_D8]
0000000000017481         lea        rdi, qword [rsp+0x108+var_80]
0000000000017489         mov        ecx, eax
000000000001748b         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000017490         test       rax, rax
0000000000017493         mov        rbp, rax
0000000000017496         je         loc_17680

000000000001749c         mov        rax, qword [r15+0xb8]
00000000000174a3         mov        rdx, qword [rsp+0x108+var_F8]
00000000000174a8         mov        qword [rsp+0x108+var_E8], 0x0
00000000000174b1         mov        qword [rax+rdx], rbp

                     loc_174b5:
00000000000174b5         cmp        qword [rsp+0x108+var_C8], rbx               ; CODE XREF=check_arrival+1525
00000000000174ba         jle        loc_174d8

00000000000174bc         movsxd     rdx, dword [r15+0xe0]
00000000000174c3         add        qword [rsp+0x108+var_F8], 0x8
00000000000174c9         cmp        rdx, qword [rsp+0x108+var_E8]
00000000000174ce         mov        qword [rsp+0x108+var_108], rbx
00000000000174d2         jge        loc_1720e

                     loc_174d8:
00000000000174d8         mov        rdi, qword [rsp+0x108+var_68]               ; CODE XREF=check_arrival+257, check_arrival+272, check_arrival+1034
00000000000174e0         call       sub_2a10                                    ; sub_2a10
00000000000174e5         mov        rax, qword [r15+0xb8]
00000000000174ec         mov        rbx, qword [rsp+0x108+var_C8]
00000000000174f1         mov        rax, qword [rax+rbx*8]
00000000000174f5         test       rax, rax
00000000000174f8         je         loc_177d5

00000000000174fe         mov        rbx, qword [rsp+0x108+var_A8]
0000000000017503         mov        rdx, qword [rsp+0x108+var_90]
0000000000017508         lea        rsi, qword [rax+0x18]
000000000001750c         mov        qword [rbx], r12
000000000001750f         mov        rbx, qword [rsp+0x108+var_A0]
0000000000017514         mov        qword [r15+0xb8], rbx
000000000001751b         mov        rbx, qword [rsp+0x108+var_98]
0000000000017520         mov        qword [r15+0x48], rbx
0000000000017524         mov        rdi, qword [rax+0x10]
0000000000017528         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001752d         test       rax, rax
0000000000017530         sete       al
0000000000017533         movzx      eax, al
0000000000017536         jmp        loc_17634
000000000001753b         align      64

                     loc_17540:
0000000000017540         lea        rsi, qword [rbp-1]                          ; CODE XREF=check_arrival+174
0000000000017544         mov        qword [r15+0x48], rbp
0000000000017548         mov        rdi, r15
000000000001754b         call       re_string_context_at                        ; re_string_context_at
0000000000017550         mov        r13d, eax

                     loc_17553:
0000000000017553         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=check_arrival+203
0000000000017558         mov        qword [rsp+0x108+var_78], 0x1
0000000000017564         mov        qword [rsp+0x108+var_70], 0x1
0000000000017570         call       j_malloc                                    ; malloc
0000000000017575         test       rax, rax
0000000000017578         mov        qword [rsp+0x108+var_68], rax
0000000000017580         je         loc_177cb

0000000000017586         mov        qword [rax], rbx
0000000000017589         mov        ecx, dword [rsp+0x108+arg_0]
0000000000017590         lea        rbx, qword [rsp+0x108+var_78]
0000000000017598         mov        rdx, qword [rsp+0x108+var_C0]
000000000001759d         mov        rdi, qword [rsp+0x108+var_D8]
00000000000175a2         mov        r12, rbp
00000000000175a5         mov        rsi, rbx
00000000000175a8         mov        dword [rsp+0x108+var_80], 0x0
00000000000175b3         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
00000000000175b8         test       eax, eax
00000000000175ba         mov        dword [rsp+0x108+var_80], eax
00000000000175c1         je         loc_176dd

00000000000175c7         jmp        loc_17620
00000000000175c9         align      16

                     loc_175d0:
00000000000175d0         test       eax, eax                                    ; CODE XREF=check_arrival+605
00000000000175d2         jne        loc_172a8

00000000000175d8         mov        rsi, qword [r12]
00000000000175dc         add        rsi, r13
00000000000175df         jmp        loc_17298
00000000000175e4         align      8

                     loc_175e8:
00000000000175e8         test       rbp, rbp                                    ; CODE XREF=check_arrival+374
00000000000175eb         jne        loc_17252

00000000000175f1         mov        rax, qword [rsp+0x108+var_108]
00000000000175f5         lea        rbx, qword [rax+1]
00000000000175f9         mov        r12, rbx
00000000000175fc         jmp        loc_17464
0000000000017601         align      8

                     loc_17608:
0000000000017608         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+533, check_arrival+728
0000000000017610         call       sub_2a10                                    ; sub_2a10
0000000000017615         mov        dword [rsp+0x108+var_80], 0xc

                     loc_17620:
0000000000017620         mov        rdi, qword [rsp+0x108+var_68]               ; CODE XREF=check_arrival+403, check_arrival+829, check_arrival+898, check_arrival+942, check_arrival+1303, check_arrival+1497, check_arrival+1628, check_arrival+1814
0000000000017628         call       sub_2a10                                    ; sub_2a10
000000000001762d         mov        eax, dword [rsp+0x108+var_80]

                     loc_17634:
0000000000017634         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=check_arrival+1158, check_arrival+1565, check_arrival+1824, check_arrival+1863
000000000001763c         xor        rbx, qword [fs:0x28]
0000000000017645         jne        loc_177fc

000000000001764b         add        rsp, 0xd8
0000000000017652         pop        rbx
0000000000017653         pop        rbp
0000000000017654         pop        r12
0000000000017656         pop        r13
0000000000017658         pop        r14
000000000001765a         pop        r15
000000000001765c         ret
                        ; endp
000000000001765d         align      32

                     loc_17660:
0000000000017660         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+547

                     loc_17668:
0000000000017668         call       sub_2a10                                    ; sub_2a10, CODE XREF=check_arrival+1794
000000000001766d         mov        dword [rsp+0x108+var_80], 0x0
0000000000017678         jmp        loc_173f8
000000000001767d         align      128

                     loc_17680:
0000000000017680         mov        eax, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+998
0000000000017687         test       eax, eax
0000000000017689         jne        loc_17620

000000000001768b         mov        rax, qword [r15+0xb8]
0000000000017692         mov        rdx, qword [rsp+0x108+var_F8]
0000000000017697         add        qword [rsp+0x108+var_E8], 0x1
000000000001769d         mov        qword [rax+rdx], 0x0
00000000000176a5         jmp        loc_174b5
00000000000176aa         align      16

                     loc_176b0:
00000000000176b0         lea        rbx, qword [rsp+0x108+var_78]               ; CODE XREF=check_arrival+222
00000000000176b8         lea        rsi, qword [rbp+8]
00000000000176bc         mov        rdi, rbx
00000000000176bf         call       re_node_set_init_copy                       ; re_node_set_init_copy
00000000000176c4         test       eax, eax
00000000000176c6         mov        dword [rsp+0x108+var_80], eax
00000000000176cd         jne        loc_17634

00000000000176d3         test       byte [rbp+0x68], 0x40
00000000000176d7         je         loc_171ac

                     loc_176dd:
00000000000176dd         cmp        qword [rsp+0x108+var_70], 0x0               ; CODE XREF=check_arrival+1297
00000000000176e6         je         loc_17712

00000000000176e8         mov        r8d, dword [rsp+0x108+arg_0]
00000000000176f0         mov        rcx, qword [rsp+0x108+var_C0]
00000000000176f5         mov        rdx, r12
00000000000176f8         mov        rsi, rbx
00000000000176fb         mov        rdi, r15
00000000000176fe         call       expand_bkref_cache                          ; expand_bkref_cache
0000000000017703         test       eax, eax
0000000000017705         mov        dword [rsp+0x108+var_80], eax
000000000001770c         jne        loc_17620

                     loc_17712:
0000000000017712         mov        rsi, qword [rsp+0x108+var_D8]               ; CODE XREF=check_arrival+1590
0000000000017717         lea        rdi, qword [rsp+0x108+var_80]
000000000001771f         mov        ecx, r13d
0000000000017722         mov        rdx, rbx
0000000000017725         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001772a         test       rax, rax
000000000001772d         mov        rbp, rax
0000000000017730         je         loc_177b7

                     loc_17736:
0000000000017736         mov        rax, qword [r15+0xb8]                       ; CODE XREF=check_arrival+1808
000000000001773d         mov        qword [rax+r12*8], rbp
0000000000017741         jmp        loc_171ac

                     loc_17746:
0000000000017746         lea        r12, qword [rax+1]                          ; CODE XREF=check_arrival+118
000000000001774a         movabs     rax, 0x7fffffffffffffff
0000000000017754         sub        rax, r13
0000000000017757         cmp        rax, r12
000000000001775a         jl         loc_177cb

000000000001775c         lea        r14, qword [r13+r12]
0000000000017761         movabs     rax, 0x1fffffffffffffff
000000000001776b         cmp        r14, rax
000000000001776e         ja         loc_177cb

0000000000017770         mov        rax, qword [rsp+0x108+var_A8]
0000000000017775         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000001777d         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
0000000000017781         call       j_realloc                                   ; realloc
0000000000017786         test       rax, rax
0000000000017789         je         loc_177cb

000000000001778b         mov        rcx, qword [rsp+0x108+var_A8]
0000000000017790         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memset
0000000000017798         lea        rdi, qword [rax+r13*8]                      ; argument "__s" for method j_memset
000000000001779c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000001779e         mov        qword [rcx+0x10], rax
00000000000177a2         mov        qword [rcx+8], r14
00000000000177a6         call       j_memset                                    ; memset
00000000000177ab         jmp        loc_1712c

                     loc_177b0:
00000000000177b0         xor        edi, edi                                    ; CODE XREF=check_arrival+461
00000000000177b2         jmp        loc_17668

                     loc_177b7:
00000000000177b7         mov        esi, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+1664
00000000000177be         test       esi, esi
00000000000177c0         je         loc_17736

00000000000177c6         jmp        loc_17620

                     loc_177cb:
00000000000177cb         mov        eax, 0xc                                    ; CODE XREF=check_arrival+1232, check_arrival+1706, check_arrival+1726, check_arrival+1753
00000000000177d0         jmp        loc_17634

                     loc_177d5:
00000000000177d5         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1096
00000000000177da         mov        qword [rax], r12
00000000000177dd         mov        rax, qword [rsp+0x108+var_A0]
00000000000177e2         mov        qword [r15+0xb8], rax
00000000000177e9         mov        rax, qword [rsp+0x108+var_98]
00000000000177ee         mov        qword [r15+0x48], rax
00000000000177f2         mov        eax, 0x1
00000000000177f7         jmp        loc_17634

                     loc_177fc:
00000000000177fc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival+1429
                        ; endp
0000000000017801         align      16                                          ; End of unwind block (FDE at 0x26868)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int8_t, -112
        ;    var_78: int64_t, -120
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_C9: int8_t, -201
        ;    var_D1: int8_t, -209
        ;    var_D8: int64_t, -216


                     set_regs:
0000000000017810         push       rbp                                         ; Begin of unwind block (FDE at 0x268b8), CODE XREF=re_search_internal+4945
0000000000017811         mov        rbp, rsp
0000000000017814         push       r15
0000000000017816         push       r14
0000000000017818         push       r13
000000000001781a         push       r12
000000000001781c         mov        r13, rcx
000000000001781f         push       rbx
0000000000017820         mov        r12, rsi
0000000000017823         sub        rsp, 0xb8
000000000001782a         mov        qword [rbp+var_98], rdx
0000000000017831         mov        qword [rbp+var_50], 0x0
0000000000017839         mov        rax, qword [fs:0x28]
0000000000017842         mov        qword [rbp+var_38], rax
0000000000017846         xor        eax, eax
0000000000017848         mov        rax, qword [rdi]
000000000001784b         test       r8b, r8b
000000000001784e         mov        qword [rbp+var_48], 0x2
0000000000017856         mov        qword [rbp+var_40], 0x0
000000000001785e         mov        qword [rbp+var_90], rax
0000000000017865         je         loc_1800d

000000000001786b         mov        edi, 0x60                                   ; argument "__size" for method j_malloc
0000000000017870         call       j_malloc                                    ; malloc
0000000000017875         lea        rcx, qword [rbp+var_50]
0000000000017879         test       rax, rax
000000000001787c         mov        qword [rbp+var_40], rax
0000000000017880         mov        qword [rbp+var_88], rcx
0000000000017887         je         loc_17fac

                     loc_1788d:
000000000001788d         mov        rax, qword [rbp+var_90]                     ; CODE XREF=set_regs+2056
0000000000017894         pxor       xmm0, xmm0
0000000000017898         mov        qword [rbp+var_60], 0x0
00000000000178a0         mov        rbx, qword [rax+0x90]
00000000000178a7         mov        rax, qword [rbp+var_98]
00000000000178ae         movaps     xmmword [rbp+var_70], xmm0
00000000000178b2         shl        rax, 0x4
00000000000178b6         cmp        rax, aIntfchk                               ; "intf_chk"
00000000000178bc         mov        qword [rbp+var_B8], rax
00000000000178c3         ja         loc_17fb6

00000000000178c9         add        rax, 0x10
00000000000178cd         mov        byte [rbp+var_C9], 0x0
00000000000178d4         sub        rsp, rax
00000000000178d7         lea        rax, qword [rsp+0xe0+var_D1]
00000000000178dc         and        rax, 0xfffffffffffffff0
00000000000178e0         mov        qword [rbp+var_C0], rax

                     loc_178e7:
00000000000178e7         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+1987
00000000000178ee         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
00000000000178f5         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
00000000000178f8         call       j_memcpy                                    ; memcpy
00000000000178fd         lea        rax, qword [rbp+var_70]
0000000000017901         mov        rcx, qword [r13]
0000000000017905         mov        qword [rbp+var_A8], rax
000000000001790c         add        rax, 0x10
0000000000017910         mov        qword [rbp+var_78], rcx
0000000000017914         mov        qword [rbp+var_C8], rax

                     loc_1791b:
000000000001791b         lea        rax, qword [rbp+var_78]                     ; CODE XREF=set_regs+1554
000000000001791f         mov        qword [rbp+var_B0], rax
0000000000017926         jmp        loc_17a09
000000000001792b         align      16

                     loc_17930:
0000000000017930         cmp        esi, 0x9                                    ; CODE XREF=set_regs+548
0000000000017933         je         loc_17b20

                     loc_17939:
0000000000017939         cmp        rax, rcx                                    ; CODE XREF=set_regs+568, set_regs+596, set_regs+798, set_regs+854, set_regs+1770, set_regs+1901
000000000001793c         jne        loc_1794c

000000000001793e         cmp        qword [r12+0xb0], rbx
0000000000017946         je         loc_17d20

                     loc_1794c:
000000000001794c         mov        r14, qword [r12+0x98]                       ; CODE XREF=set_regs+300, set_regs+1477
0000000000017954         mov        rdi, qword [r14]
0000000000017957         lea        rsi, qword [rdi+r9]
000000000001795b         movzx      eax, byte [rsi+8]
000000000001795f         test       al, 0x8
0000000000017961         jne        loc_17a70

0000000000017967         test       byte [rsi+0xa], 0x10
000000000001796b         jne        loc_17b70

0000000000017971         cmp        al, 0x4
0000000000017973         je         loc_17bb0

0000000000017979         mov        rcx, qword [rbp+var_78]

                     loc_1797d:
000000000001797d         mov        rdx, rcx                                    ; CODE XREF=set_regs+922, set_regs+1701
0000000000017980         mov        rdi, r12
0000000000017983         mov        qword [rbp+var_A0], rcx
000000000001798a         call       check_node_accept                           ; check_node_accept
000000000001798f         test       al, al
0000000000017991         mov        rcx, qword [rbp+var_A0]
0000000000017998         je         loc_17de8

000000000001799e         mov        rax, qword [r14+0x18]
00000000000179a2         lea        rdx, qword [rcx+1]
00000000000179a6         mov        rbx, qword [rax+r15*8]

                     loc_179aa:
00000000000179aa         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+1073
00000000000179b2         mov        qword [rbp+var_78], rdx
00000000000179b6         je         loc_179f4

00000000000179b8         cmp        rdx, qword [r12+0xa8]
00000000000179c0         jg         loc_17df6

00000000000179c6         mov        rax, qword [r12+0xb8]
00000000000179ce         mov        rax, qword [rax+rdx*8]
00000000000179d2         test       rax, rax
00000000000179d5         je         loc_17df6

00000000000179db         mov        rdi, qword [rax+0x10]
00000000000179df         lea        rsi, qword [rax+0x18]
00000000000179e3         mov        rdx, rbx
00000000000179e6         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000179eb         test       rax, rax
00000000000179ee         je         loc_17df6

                     loc_179f4:
00000000000179f4         mov        qword [rbp+var_68], 0x0                     ; CODE XREF=set_regs+422

                     loc_179fc:
00000000000179fc         test       rbx, rbx                                    ; CODE XREF=set_regs+772, set_regs+1136, set_regs+1244, set_regs+1571, set_regs+1675
00000000000179ff         js         loc_17dda

0000000000017a05         mov        rcx, qword [rbp+var_78]

                     loc_17a09:
0000000000017a09         mov        rax, qword [r13+8]                          ; CODE XREF=set_regs+278
0000000000017a0d         cmp        rax, rcx
0000000000017a10         jl         loc_17f00

0000000000017a16         mov        rdi, qword [rbp+var_90]
0000000000017a1d         mov        r9, rbx
0000000000017a20         mov        r15, rbx
0000000000017a23         shl        r9, 0x4
0000000000017a27         mov        rdx, qword [rdi]
0000000000017a2a         add        rdx, r9
0000000000017a2d         movzx      esi, byte [rdx+8]
0000000000017a31         cmp        esi, 0x8
0000000000017a34         jne        loc_17930

0000000000017a3a         mov        rdx, qword [rdx]
0000000000017a3d         add        rdx, 0x1
0000000000017a41         cmp        qword [rbp+var_98], rdx
0000000000017a48         jle        loc_17939

0000000000017a4e         shl        rdx, 0x4
0000000000017a52         add        rdx, r13
0000000000017a55         mov        qword [rdx+8], 0xffffffffffffffff
0000000000017a5d         mov        qword [rdx], rcx
0000000000017a60         mov        rax, qword [r13+8]
0000000000017a64         jmp        loc_17939
0000000000017a69         align      16

                     loc_17a70:
0000000000017a70         mov        rax, qword [r12+0xb8]                       ; CODE XREF=set_regs+337
0000000000017a78         mov        rdx, qword [rbp+var_78]
0000000000017a7c         mov        rsi, rbx
0000000000017a7f         mov        rdi, qword [rbp+var_A8]
0000000000017a86         mov        r9, qword [rax+rdx*8]
0000000000017a8a         mov        rax, qword [r14+0x28]
0000000000017a8e         lea        rdx, qword [rbx+rbx*2]
0000000000017a92         mov        qword [rbp+var_A0], r9
0000000000017a99         lea        r15, qword [rax+rdx*8]
0000000000017a9d         call       re_node_set_insert                          ; re_node_set_insert
0000000000017aa2         test       al, al
0000000000017aa4         mov        r9, qword [rbp+var_A0]
0000000000017aab         je         loc_17f88

0000000000017ab1         mov        r10, qword [r15+8]
0000000000017ab5         test       r10, r10
0000000000017ab8         jle        loc_17de8

0000000000017abe         mov        r15, qword [r15+0x10]
0000000000017ac2         mov        r11, qword [r9+0x10]
0000000000017ac6         lea        r14, qword [r9+0x18]
0000000000017aca         mov        rbx, 0xffffffffffffffff
0000000000017ad1         xor        r9d, r9d
0000000000017ad4         mov        qword [rbp+var_A0], r12
0000000000017adb         nop        dword [rax+rax]

                     loc_17ae0:
0000000000017ae0         mov        r12, qword [r15+r9*8]                       ; CODE XREF=set_regs+763
0000000000017ae4         mov        rsi, r14
0000000000017ae7         mov        rdi, r11
0000000000017aea         mov        rdx, r12
0000000000017aed         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000017af2         test       rax, rax
0000000000017af5         je         loc_17b04

0000000000017af7         cmp        rbx, 0xffffffffffffffff
0000000000017afb         jne        loc_17c50

0000000000017b01         mov        rbx, r12

                     loc_17b04:
0000000000017b04         add        r9, 0x1                                     ; CODE XREF=set_regs+741
0000000000017b08         cmp        r10, r9
0000000000017b0b         jne        loc_17ae0

0000000000017b0d         mov        r12, qword [rbp+var_A0]
0000000000017b14         jmp        loc_179fc
0000000000017b19         align      32

                     loc_17b20:
0000000000017b20         mov        rdi, qword [rdx]                            ; CODE XREF=set_regs+291
0000000000017b23         lea        rsi, qword [rdi+1]
0000000000017b27         cmp        qword [rbp+var_98], rsi
0000000000017b2e         jle        loc_17939

0000000000017b34         shl        rsi, 0x4
0000000000017b38         lea        rax, qword [r13+rsi]
0000000000017b3d         cmp        qword [rax], rcx
0000000000017b40         jl         loc_17ec0

0000000000017b46         test       byte [rdx+0xa], 0x8
0000000000017b4a         je         loc_17b5e

0000000000017b4c         mov        rdi, qword [rbp+var_C0]
0000000000017b53         cmp        qword [rdi+rsi], 0xffffffffffffffff
0000000000017b58         jne        loc_17f4b

                     loc_17b5e:
0000000000017b5e         mov        qword [rax+8], rcx                          ; CODE XREF=set_regs+826
0000000000017b62         mov        rax, qword [r13+8]
0000000000017b66         jmp        loc_17939
0000000000017b6b         align      16

                     loc_17b70:
0000000000017b70         mov        r8, qword [rbp+var_78]                      ; CODE XREF=set_regs+347
0000000000017b74         lea        rsi, qword [r14+0xd8]
0000000000017b7b         mov        rcx, r12
0000000000017b7e         mov        rdx, rbx
0000000000017b81         mov        qword [rbp+var_A0], r9
0000000000017b88         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
0000000000017b8d         movsxd     rcx, eax
0000000000017b90         test       rcx, rcx
0000000000017b93         jne        loc_17d91

0000000000017b99         mov        r9, qword [rbp+var_A0]
0000000000017ba0         mov        rsi, qword [r14]
0000000000017ba3         mov        rcx, qword [rbp+var_78]
0000000000017ba7         add        rsi, r9
0000000000017baa         jmp        loc_1797d
0000000000017baf         align      16

                     loc_17bb0:
0000000000017bb0         mov        rax, qword [rsi]                            ; CODE XREF=set_regs+355
0000000000017bb3         add        rax, 0x1
0000000000017bb7         shl        rax, 0x4
0000000000017bbb         add        rax, r13
0000000000017bbe         mov        rdx, qword [rax+8]
0000000000017bc2         mov        rdi, qword [rax]
0000000000017bc5         mov        rcx, rdx
0000000000017bc8         sub        rcx, rdi
0000000000017bcb         cmp        qword [rbp+var_88], 0x0
0000000000017bd3         je         loc_17d88

0000000000017bd9         cmp        rdi, 0xffffffffffffffff
0000000000017bdd         je         loc_17df6

0000000000017be3         cmp        rdx, 0xffffffffffffffff
0000000000017be7         je         loc_17df6

0000000000017bed         test       rcx, rcx
0000000000017bf0         je         loc_17e40

0000000000017bf6         mov        r15, qword [rbp+var_78]
0000000000017bfa         mov        rdx, qword [r12+0x30]
0000000000017bff         mov        rax, qword [r12+8]
0000000000017c04         sub        rdx, r15
0000000000017c07         cmp        rcx, rdx
0000000000017c0a         jg         loc_17df6

0000000000017c10         lea        rsi, qword [rax+r15]                        ; argument "__s2" for method j_memcmp
0000000000017c14         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
0000000000017c17         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
0000000000017c1a         mov        qword [rbp+var_A0], rcx
0000000000017c21         call       j_memcmp                                    ; memcmp
0000000000017c26         test       eax, eax
0000000000017c28         mov        rcx, qword [rbp+var_A0]
0000000000017c2f         jne        loc_17df6

                     loc_17c35:
0000000000017c35         mov        rax, qword [r14+0x18]                       ; CODE XREF=set_regs+1413
0000000000017c39         lea        rdx, qword [r15+rcx]
0000000000017c3d         mov        rbx, qword [rax+rbx*8]
0000000000017c41         jmp        loc_179aa
0000000000017c46         align      16

                     loc_17c50:
0000000000017c50         mov        rsi, qword [rbp+var_C8]                     ; CODE XREF=set_regs+747
0000000000017c57         mov        rdi, qword [rbp+var_68]
0000000000017c5b         mov        rdx, rbx
0000000000017c5e         mov        r14, r12
0000000000017c61         mov        r12, qword [rbp+var_A0]
0000000000017c68         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000017c6d         test       rax, rax
0000000000017c70         jne        loc_17e30

0000000000017c76         mov        rcx, qword [rbp+var_88]
0000000000017c7d         test       rcx, rcx
0000000000017c80         je         loc_179fc

0000000000017c86         mov        r15, qword [rcx]
0000000000017c89         mov        rdx, qword [rbp+var_78]
0000000000017c8d         lea        rax, qword [r15+1]
0000000000017c91         cmp        rax, qword [rcx+8]
0000000000017c95         mov        qword [rcx], rax
0000000000017c98         je         loc_1801d

0000000000017c9e         mov        rax, qword [rcx+0x10]

                     loc_17ca2:
0000000000017ca2         lea        r15, qword [r15+r15*2]                      ; CODE XREF=set_regs+2119
0000000000017ca6         shl        r15, 0x4
0000000000017caa         add        r15, rax
0000000000017cad         mov        qword [r15+8], r14
0000000000017cb1         mov        r14, qword [rbp+var_B8]
0000000000017cb8         mov        qword [r15], rdx
0000000000017cbb         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000017cbe         call       j_malloc                                    ; malloc
0000000000017cc3         test       rax, rax
0000000000017cc6         mov        qword [r15+0x10], rax
0000000000017cca         je         loc_17cf2

0000000000017ccc         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000017ccf         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000017cd2         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000017cd5         call       j_memcpy                                    ; memcpy
0000000000017cda         mov        rsi, qword [rbp+var_A8]
0000000000017ce1         lea        rdi, qword [r15+0x18]
0000000000017ce5         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000017cea         test       eax, eax
0000000000017cec         je         loc_179fc

                     loc_17cf2:
0000000000017cf2         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+1210
0000000000017cf6         call       sub_2a10                                    ; sub_2a10
0000000000017cfb         cmp        byte [rbp+var_C9], 0x0
0000000000017d02         jne        loc_1809b

                     loc_17d08:
0000000000017d08         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1942, set_regs+2181
0000000000017d0f         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
0000000000017d14         mov        eax, 0xc
0000000000017d19         jmp        loc_17f29
0000000000017d1e         align      32

                     loc_17d20:
0000000000017d20         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+310
0000000000017d28         je         loc_1805c

0000000000017d2e         mov        rcx, qword [rbp+var_98]
0000000000017d35         test       rcx, rcx
0000000000017d38         je         loc_17d5a

0000000000017d3a         mov        rax, r13
0000000000017d3d         xor        edx, edx
0000000000017d3f         nop

                     loc_17d40:
0000000000017d40         cmp        qword [rax], 0x0                            ; CODE XREF=set_regs+1352
0000000000017d44         js         loc_17d4d

0000000000017d46         cmp        qword [rax+8], 0xffffffffffffffff
0000000000017d4b         je         loc_17da0

                     loc_17d4d:
0000000000017d4d         add        rdx, 0x1                                    ; CODE XREF=set_regs+1332
0000000000017d51         add        rax, 0x10
0000000000017d55         cmp        rcx, rdx
0000000000017d58         jne        loc_17d40

                     loc_17d5a:
0000000000017d5a         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+1320
0000000000017d5e         call       sub_2a10                                    ; sub_2a10
0000000000017d63         cmp        byte [rbp+var_C9], 0x0
0000000000017d6a         jne        loc_180e4

                     loc_17d70:
0000000000017d70         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+2272
0000000000017d77         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
0000000000017d7c         xor        eax, eax
0000000000017d7e         jmp        loc_17f29
0000000000017d83         align      8

                     loc_17d88:
0000000000017d88         test       rcx, rcx                                    ; CODE XREF=set_regs+963
0000000000017d8b         je         loc_17e40

                     loc_17d91:
0000000000017d91         mov        r15, qword [rbp+var_78]                     ; CODE XREF=set_regs+899
0000000000017d95         jmp        loc_17c35
0000000000017d9a         align      32

                     loc_17da0:
0000000000017da0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1339
0000000000017da7         mov        r9, qword [rbp+var_A8]
0000000000017dae         mov        r8, r13
0000000000017db1         mov        rcx, qword [rbp+var_98]
0000000000017db8         mov        rdx, qword [rbp+var_B0]
0000000000017dbf         lea        rsi, qword [rdi+0x10]
0000000000017dc3         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
0000000000017dc8         mov        r9, rax
0000000000017dcb         mov        rbx, rax
0000000000017dce         mov        r15, rax
0000000000017dd1         shl        r9, 0x4
0000000000017dd5         jmp        loc_1794c

                     loc_17dda:
0000000000017dda         cmp        rbx, 0xfffffffffffffffe                     ; CODE XREF=set_regs+495
0000000000017dde         je         loc_17f88

0000000000017de4         nop        dword [rax]

                     loc_17de8:
0000000000017de8         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+392, set_regs+680
0000000000017df0         je         loc_180ac

                     loc_17df6:
0000000000017df6         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+432, set_regs+453, set_regs+478, set_regs+973, set_regs+983, set_regs+1018, set_regs+1055
0000000000017dfd         mov        rcx, qword [rbp+var_98]
0000000000017e04         lea        rdx, qword [rbp+var_78]
0000000000017e08         mov        r9, qword [rbp+var_A8]
0000000000017e0f         mov        r8, r13
0000000000017e12         lea        rsi, qword [rdi+0x10]
0000000000017e16         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
0000000000017e1b         mov        rcx, qword [rbp+var_78]
0000000000017e1f         mov        rbx, rax
0000000000017e22         jmp        loc_1791b
0000000000017e27         align      16

                     loc_17e30:
0000000000017e30         mov        rbx, r14                                    ; CODE XREF=set_regs+1120
0000000000017e33         jmp        loc_179fc
0000000000017e38         align      64

                     loc_17e40:
0000000000017e40         mov        rdi, qword [rbp+var_A8]                     ; CODE XREF=set_regs+992, set_regs+1403
0000000000017e47         mov        rsi, rbx
0000000000017e4a         mov        qword [rbp+var_A0], r9
0000000000017e51         call       re_node_set_insert                          ; re_node_set_insert
0000000000017e56         test       al, al
0000000000017e58         je         loc_17f88

0000000000017e5e         mov        rdx, qword [r14+0x28]
0000000000017e62         lea        rax, qword [rbx+rbx*2]
0000000000017e66         mov        rcx, qword [rbp+var_78]
0000000000017e6a         lea        rax, qword [rdx+rax*8]
0000000000017e6e         mov        qword [rbp+var_D8], rcx
0000000000017e75         mov        rax, qword [rax+0x10]
0000000000017e79         mov        rbx, qword [rax]
0000000000017e7c         mov        rax, qword [r12+0xb8]
0000000000017e84         mov        rax, qword [rax+rcx*8]
0000000000017e88         mov        rdx, rbx
0000000000017e8b         mov        rdi, qword [rax+0x10]
0000000000017e8f         lea        rsi, qword [rax+0x18]
0000000000017e93         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000017e98         test       rax, rax
0000000000017e9b         jne        loc_179fc

0000000000017ea1         mov        r9, qword [rbp+var_A0]
0000000000017ea8         mov        rsi, qword [r14]
0000000000017eab         mov        rcx, qword [rbp+var_D8]
0000000000017eb2         add        rsi, r9
0000000000017eb5         jmp        loc_1797d
0000000000017eba         align      64

                     loc_17ec0:
0000000000017ec0         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+816
0000000000017ec7         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
0000000000017ece         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000017ed1         mov        qword [rax+8], rcx
0000000000017ed5         mov        qword [rbp+var_D8], r9
0000000000017edc         mov        qword [rbp+var_A0], rcx
0000000000017ee3         call       j_memcpy                                    ; memcpy
0000000000017ee8         mov        rax, qword [r13+8]
0000000000017eec         mov        rcx, qword [rbp+var_A0]
0000000000017ef3         mov        r9, qword [rbp+var_D8]
0000000000017efa         jmp        loc_17939
0000000000017eff         align      256

                     loc_17f00:
0000000000017f00         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+512
0000000000017f04         call       sub_2a10                                    ; sub_2a10
0000000000017f09         cmp        byte [rbp+var_C9], 0x0
0000000000017f10         jne        loc_17fec

0000000000017f16         mov        rdi, qword [rbp+var_88]
0000000000017f1d         test       rdi, rdi
0000000000017f20         je         loc_17f27

                     loc_17f22:
0000000000017f22         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24, CODE XREF=set_regs+2034

                     loc_17f27:
0000000000017f27         xor        eax, eax                                    ; CODE XREF=set_regs+1808, set_regs+2040, set_regs+2140

                     loc_17f29:
0000000000017f29         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=set_regs+1289, set_regs+1390, set_regs+1953, set_regs+2160, set_regs+2225, set_regs+2255
0000000000017f2d         xor        rbx, qword [fs:0x28]
0000000000017f36         jne        loc_180f5

0000000000017f3c         lea        rsp, qword [rbp+var_28]
0000000000017f40         pop        rbx
0000000000017f41         pop        r12
0000000000017f43         pop        r13
0000000000017f45         pop        r14
0000000000017f47         pop        r15
0000000000017f49         pop        rbp
0000000000017f4a         ret
                        ; endp

                     loc_17f4b:
0000000000017f4b         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+840
0000000000017f52         mov        rsi, rdi                                    ; argument "__src" for method j_memcpy
0000000000017f55         mov        rdi, r13                                    ; argument "__dest" for method j_memcpy
0000000000017f58         mov        qword [rbp+var_D8], rcx
0000000000017f5f         mov        qword [rbp+var_A0], r9
0000000000017f66         call       j_memcpy                                    ; memcpy
0000000000017f6b         mov        rax, qword [r13+8]
0000000000017f6f         mov        r9, qword [rbp+var_A0]
0000000000017f76         mov        rcx, qword [rbp+var_D8]
0000000000017f7d         jmp        loc_17939
0000000000017f82         align      8

                     loc_17f88:
0000000000017f88         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+667, set_regs+1486, set_regs+1608
0000000000017f8c         call       sub_2a10                                    ; sub_2a10
0000000000017f91         cmp        byte [rbp+var_C9], 0x0
0000000000017f98         jne        loc_1809b

                     loc_17f9e:
0000000000017f9e         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+2199
0000000000017fa6         jne        loc_17d08

                     loc_17fac:
0000000000017fac         mov        eax, 0xc                                    ; CODE XREF=set_regs+119, set_regs+2003, set_regs+2010
0000000000017fb1         jmp        loc_17f29

                     loc_17fb6:
0000000000017fb6         mov        rdi, qword [rbp+var_B8]                     ; argument "__size" for method j_malloc, CODE XREF=set_regs+179
0000000000017fbd         call       j_malloc                                    ; malloc
0000000000017fc2         test       rax, rax
0000000000017fc5         mov        qword [rbp+var_C0], rax
0000000000017fcc         mov        byte [rbp+var_C9], 0x1
0000000000017fd3         jne        loc_178e7

0000000000017fd9         mov        rdi, qword [rbp+var_88]
0000000000017fe0         test       rdi, rdi
0000000000017fe3         je         loc_17fac

0000000000017fe5         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
0000000000017fea         jmp        loc_17fac

                     loc_17fec:
0000000000017fec         mov        rdi, qword [rbp+var_C0]                     ; CODE XREF=set_regs+1792
0000000000017ff3         call       sub_2a10                                    ; sub_2a10
0000000000017ff8         mov        rdi, qword [rbp+var_88]
0000000000017fff         test       rdi, rdi
0000000000018002         jne        loc_17f22

0000000000018008         jmp        loc_17f27

                     loc_1800d:
000000000001800d         mov        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+85
0000000000018018         jmp        loc_1788d

                     loc_1801d:
000000000001801d         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=set_regs+1160
0000000000018021         mov        rax, qword [rbp+var_88]
0000000000018028         mov        qword [rbp+var_A0], rdx
000000000001802f         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
0000000000018033         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
0000000000018037         call       j_realloc                                   ; realloc
000000000001803c         test       rax, rax
000000000001803f         je         loc_18085

0000000000018041         mov        rcx, qword [rbp+var_88]
0000000000018048         mov        rdx, qword [rbp+var_A0]
000000000001804f         shl        qword [rcx+8], 0x1
0000000000018053         mov        qword [rcx+0x10], rax
0000000000018057         jmp        loc_17ca2

                     loc_1805c:
000000000001805c         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+1304
0000000000018060         call       sub_2a10                                    ; sub_2a10
0000000000018065         cmp        byte [rbp+var_C9], 0x0
000000000001806c         je         loc_17f27

0000000000018072         mov        rdi, qword [rbp+var_C0]
0000000000018079         call       sub_2a10                                    ; sub_2a10
000000000001807e         xor        eax, eax
0000000000018080         jmp        loc_17f29

                     loc_18085:
0000000000018085         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+2095
0000000000018089         call       sub_2a10                                    ; sub_2a10
000000000001808e         cmp        byte [rbp+var_C9], 0x0
0000000000018095         je         loc_17d08

                     loc_1809b:
000000000001809b         mov        rdi, qword [rbp+var_C0]                     ; CODE XREF=set_regs+1266, set_regs+1928
00000000000180a2         call       sub_2a10                                    ; sub_2a10
00000000000180a7         jmp        loc_17f9e

                     loc_180ac:
00000000000180ac         mov        rdi, qword [rbp+var_60]                     ; CODE XREF=set_regs+1504
00000000000180b0         call       sub_2a10                                    ; sub_2a10
00000000000180b5         cmp        byte [rbp+var_C9], 0x0
00000000000180bc         mov        eax, 0x1
00000000000180c1         je         loc_17f29

00000000000180c7         mov        rdi, qword [rbp+var_C0]
00000000000180ce         mov        dword [rbp+var_88], eax
00000000000180d4         call       sub_2a10                                    ; sub_2a10
00000000000180d9         mov        eax, dword [rbp+var_88]
00000000000180df         jmp        loc_17f29

                     loc_180e4:
00000000000180e4         mov        rdi, qword [rbp+var_C0]                     ; CODE XREF=set_regs+1370
00000000000180eb         call       sub_2a10                                    ; sub_2a10
00000000000180f0         jmp        loc_17d70

                     loc_180f5:
00000000000180f5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_regs+1830
                        ; endp
00000000000180fa         align      256                                         ; End of unwind block (FDE at 0x268b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     get_subexp_sub.isra.32:
0000000000018100         push       r15                                         ; Begin of unwind block (FDE at 0x268e8), CODE XREF=transit_state_bkref.isra.34+710, transit_state_bkref.isra.34+1789
0000000000018102         push       r14
0000000000018104         mov        r14, rcx
0000000000018107         push       r13
0000000000018109         push       r12
000000000001810b         mov        r13, rsi
000000000001810e         push       rbp
000000000001810f         push       rbx
0000000000018110         lea        rsi, qword [rdx+0x10]
0000000000018114         mov        rbp, rdx
0000000000018117         mov        r9, r8
000000000001811a         mov        r12, r8
000000000001811d         sub        rsp, 0x20
0000000000018121         mov        rcx, qword [rdx+8]
0000000000018125         mov        r8, r14
0000000000018128         push       0x8
000000000001812a         mov        rdx, qword [rdx]
000000000001812d         mov        rbx, rdi
0000000000018130         call       check_arrival                               ; check_arrival
0000000000018135         test       eax, eax
0000000000018137         pop        rdx
0000000000018138         pop        rcx
0000000000018139         je         loc_18150

                     loc_1813b:
000000000001813b         add        rsp, 0x18                                   ; CODE XREF=get_subexp_sub.isra.32+401
000000000001813f         pop        rbx
0000000000018140         pop        rbp
0000000000018141         pop        r12
0000000000018143         pop        r13
0000000000018145         pop        r14
0000000000018147         pop        r15
0000000000018149         ret
                        ; endp
000000000001814a         align      16

                     loc_18150:
0000000000018150         mov        rax, qword [rbx+0xc8]                       ; CODE XREF=get_subexp_sub.isra.32+57
0000000000018157         mov        rdx, qword [rbx+0xd0]
000000000001815e         mov        r15, qword [rbp+8]
0000000000018162         mov        rcx, qword [r13]
0000000000018166         mov        rdi, qword [rbx+0xd8]
000000000001816d         cmp        rax, rdx
0000000000018170         mov        rsi, r15
0000000000018173         jge        loc_18210

                     loc_18179:
0000000000018179         lea        rdx, qword [rax+rax*4]                      ; CODE XREF=get_subexp_sub.isra.32+379
000000000001817d         shl        rdx, 0x3
0000000000018181         test       rax, rax
0000000000018184         jle        loc_18191

0000000000018186         lea        r8, qword [rdi+rdx-0x28]
000000000001818b         cmp        r12, qword [r8+8]
000000000001818f         je         loc_18200

                     loc_18191:
0000000000018191         add        rdi, rdx                                    ; CODE XREF=get_subexp_sub.isra.32+132, get_subexp_sub.isra.32+261
0000000000018194         xor        edx, edx
0000000000018196         cmp        r15, rcx
0000000000018199         sete       dl
000000000001819c         add        rax, 0x1
00000000000181a0         mov        qword [rdi], r14
00000000000181a3         neg        edx
00000000000181a5         mov        qword [rdi+8], r12
00000000000181a9         mov        qword [rdi+0x10], rcx
00000000000181ad         mov        word [rdi+0x22], dx
00000000000181b1         mov        qword [rdi+0x18], r15
00000000000181b5         mov        qword [rbx+0xc8], rax
00000000000181bc         mov        byte [rdi+0x20], 0x0
00000000000181c0         mov        rax, r15
00000000000181c3         movsxd     rdx, dword [rbx+0xe0]
00000000000181ca         sub        rax, rcx
00000000000181cd         cmp        rdx, rax
00000000000181d0         jge        loc_181dc

00000000000181d2         sub        r15d, ecx
00000000000181d5         mov        dword [rbx+0xe0], r15d

                     loc_181dc:
00000000000181dc         add        rsi, r12                                    ; CODE XREF=get_subexp_sub.isra.32+208
00000000000181df         sub        rsi, qword [r13]
00000000000181e3         add        rsp, 0x18
00000000000181e7         mov        rdi, rbx
00000000000181ea         pop        rbx
00000000000181eb         pop        rbp
00000000000181ec         pop        r12
00000000000181ee         pop        r13
00000000000181f0         pop        r14
00000000000181f2         pop        r15
00000000000181f4         jmp        clean_state_log_if_needed                   ; clean_state_log_if_needed
                        ; endp
00000000000181f9         align      512

                     loc_18200:
0000000000018200         mov        byte [r8+0x20], 0x1                         ; CODE XREF=get_subexp_sub.isra.32+143
0000000000018205         jmp        loc_18191
0000000000018207         align      16

                     loc_18210:
0000000000018210         lea        rsi, qword [rdx+rdx*4]                      ; CODE XREF=get_subexp_sub.isra.32+115
0000000000018214         mov        qword [rsp+0x48+var_40], rcx
0000000000018219         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000001821d         call       j_realloc                                   ; realloc
0000000000018222         test       rax, rax
0000000000018225         mov        rcx, qword [rsp+0x48+var_40]
000000000001822a         je         loc_18280

000000000001822c         mov        rsi, qword [rbx+0xc8]
0000000000018233         mov        rdx, qword [rbx+0xd0]
000000000001823a         mov        qword [rbx+0xd8], rax
0000000000018241         mov        qword [rsp+0x48+var_40], rcx
0000000000018246         lea        rsi, qword [rsi+rsi*4]
000000000001824a         lea        rdx, qword [rdx+rdx*4]
000000000001824e         lea        rdi, qword [rax+rsi*8]                      ; argument "__s" for method j_memset
0000000000018252         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
0000000000018256         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000018258         call       j_memset                                    ; memset
000000000001825d         shl        qword [rbx+0xd0], 0x1
0000000000018264         mov        rax, qword [rbx+0xc8]
000000000001826b         mov        rdi, qword [rbx+0xd8]
0000000000018272         mov        rsi, qword [rbp+8]
0000000000018276         mov        rcx, qword [rsp+0x48+var_40]
000000000001827b         jmp        loc_18179

                     loc_18280:
0000000000018280         mov        rdi, qword [rbx+0xd8]                       ; CODE XREF=get_subexp_sub.isra.32+298
0000000000018287         call       sub_2a10                                    ; sub_2a10
000000000001828c         mov        eax, 0xc
0000000000018291         jmp        loc_1813b
0000000000018296         align      32                                          ; End of unwind block (FDE at 0x268e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232


                     transit_state_bkref.isra.34:
00000000000182a0         push       r15                                         ; Begin of unwind block (FDE at 0x26954), CODE XREF=transit_state_bkref.isra.34+2090, merge_state_with_log+449, re_search_internal+5802
00000000000182a2         push       r14
00000000000182a4         push       r13
00000000000182a6         push       r12
00000000000182a8         push       rbp
00000000000182a9         push       rbx
00000000000182aa         sub        rsp, 0xb8
00000000000182b1         mov        r15, qword [rdi+0x48]
00000000000182b5         mov        rax, qword [fs:0x28]
00000000000182be         mov        qword [rsp+0xe8+var_40], rax
00000000000182c6         xor        eax, eax
00000000000182c8         cmp        qword [rsi], 0x0
00000000000182cc         mov        rax, qword [rdi+0x98]
00000000000182d3         mov        qword [rsp+0xe8+var_A0], rsi
00000000000182d8         mov        qword [rsp+0xe8+var_A8], rdx
00000000000182dd         mov        qword [rsp+0xe8+var_B0], rax
00000000000182e2         jle        loc_18610

00000000000182e8         lea        rax, qword [r15*8]
00000000000182f0         mov        r14, rdi
00000000000182f3         mov        qword [rsp+0xe8+var_E8], 0x0
00000000000182fb         mov        qword [rsp+0xe8+var_E0], r15
0000000000018300         mov        qword [rsp+0xe8+var_88], rax
0000000000018305         lea        rax, qword [rsp+0xe8+var_58]
000000000001830d         mov        qword [rsp+0xe8+var_80], rax
0000000000018312         lea        rax, qword [rsp+0xe8+var_5C]
000000000001831a         mov        qword [rsp+0xe8+var_70], rax
000000000001831f         jmp        loc_18367
0000000000018321         align      8

                     loc_18328:
0000000000018328         test       al, 0x1                                     ; CODE XREF=transit_state_bkref.isra.34+285
000000000001832a         je         loc_18350

000000000001832c         and        edx, 0x8
000000000001832f         jne        loc_18350

                     loc_18331:
0000000000018331         test       cl, 0x20                                    ; CODE XREF=transit_state_bkref.isra.34+294, transit_state_bkref.isra.34+302
0000000000018334         je         loc_1833a

0000000000018336         test       al, 0x2
0000000000018338         je         loc_18350

                     loc_1833a:
000000000001833a         and        ecx, 0x80                                   ; CODE XREF=transit_state_bkref.isra.34+148
0000000000018340         je         loc_183e0

0000000000018346         test       al, 0x8
0000000000018348         jne        loc_183e0

000000000001834e         nop

                     loc_18350:
0000000000018350         mov        rdi, qword [rsp+0xe8+var_A0]                ; CODE XREF=transit_state_bkref.isra.34+138, transit_state_bkref.isra.34+143, transit_state_bkref.isra.34+152, transit_state_bkref.isra.34+237, transit_state_bkref.isra.34+308, transit_state_bkref.isra.34+976, transit_state_bkref.isra.34+1335
0000000000018355         add        qword [rsp+0xe8+var_E8], 0x1
000000000001835a         mov        rax, qword [rsp+0xe8+var_E8]
000000000001835e         cmp        rax, qword [rdi]
0000000000018361         jge        loc_18610

                     loc_18367:
0000000000018367         mov        rax, qword [rsp+0xe8+var_A8]                ; CODE XREF=transit_state_bkref.isra.34+127
000000000001836c         mov        rdi, qword [rsp+0xe8+var_E8]
0000000000018370         mov        rax, qword [rax]
0000000000018373         mov        r13, qword [rax+rdi*8]
0000000000018377         mov        rdi, qword [rsp+0xe8+var_B0]
000000000001837c         mov        rax, qword [rdi]
000000000001837f         mov        rbx, r13
0000000000018382         shl        rbx, 0x4
0000000000018386         add        rax, rbx
0000000000018389         cmp        byte [rax+8], 0x4
000000000001838d         jne        loc_18350

000000000001838f         mov        ebp, dword [rax+8]
0000000000018392         test       ebp, 0x3ff00
0000000000018398         je         loc_183e0

000000000001839a         mov        edx, dword [r14+0xa0]
00000000000183a1         mov        rsi, qword [rsp+0xe8+var_E0]
00000000000183a6         mov        rdi, r14
00000000000183a9         call       re_string_context_at                        ; re_string_context_at
00000000000183ae         mov        edx, ebp
00000000000183b0         shr        edx, 0x8
00000000000183b3         mov        ecx, edx
00000000000183b5         and        cx, 0x3ff
00000000000183ba         test       dl, 0x4
00000000000183bd         jne        loc_18328

00000000000183c3         and        edx, 0x8
00000000000183c6         je         loc_18331

00000000000183cc         test       al, 0x1
00000000000183ce         je         loc_18331

00000000000183d4         jmp        loc_18350
00000000000183d9         align      32

                     loc_183e0:
00000000000183e0         mov        rdi, qword [r14+0xc8]                       ; CODE XREF=transit_state_bkref.isra.34+160, transit_state_bkref.isra.34+168, transit_state_bkref.isra.34+248
00000000000183e7         mov        rax, qword [r14+0x98]
00000000000183ee         xor        ecx, ecx
00000000000183f0         mov        r10, qword [r14+8]
00000000000183f4         mov        r9, qword [rsp+0xe8+var_E0]
00000000000183f9         mov        qword [rsp+0xe8+var_78], rdi
00000000000183fe         mov        qword [rsp+0xe8+var_98], rax

                     loc_18403:
0000000000018403         cmp        rcx, rdi                                    ; CODE XREF=transit_state_bkref.isra.34+871
0000000000018406         jge        loc_1845b

0000000000018408         lea        rax, qword [rcx+rdi]
000000000001840c         mov        r11, qword [r14+0xd8]
0000000000018413         mov        rsi, rax
0000000000018416         shr        rsi, 0x3f
000000000001841a         add        rsi, rax
000000000001841d         sar        rsi, 0x1
0000000000018420         lea        rax, qword [rsi+rsi*4]
0000000000018424         cmp        r9, qword [r11+rax*8+8]
0000000000018429         jle        loc_18456

000000000001842b         jmp        loc_185f8

                     loc_18430:
0000000000018430         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=transit_state_bkref.isra.34+441
0000000000018434         mov        rax, rdx
0000000000018437         shr        rax, 0x3f
000000000001843b         add        rax, rdx
000000000001843e         sar        rax, 0x1
0000000000018441         lea        rdx, qword [rax+rax*4]
0000000000018445         mov        r8, rax
0000000000018448         cmp        r9, qword [r11+rdx*8+8]
000000000001844d         jg         loc_18600

0000000000018453         mov        rsi, rax

                     loc_18456:
0000000000018456         cmp        rsi, rcx                                    ; CODE XREF=transit_state_bkref.isra.34+393
0000000000018459         jg         loc_18430

                     loc_1845b:
000000000001845b         cmp        qword [rsp+0xe8+var_78], rcx                ; CODE XREF=transit_state_bkref.isra.34+358
0000000000018460         jle        loc_18486

0000000000018462         mov        rdx, qword [r14+0xd8]
0000000000018469         lea        rax, qword [rcx+rcx*4]
000000000001846d         mov        rdi, qword [rsp+0xe8+var_E0]
0000000000018472         lea        rax, qword [rdx+rax*8]
0000000000018476         cmp        qword [rax+8], rdi
000000000001847a         jne        loc_18486

000000000001847c         cmp        rcx, 0xffffffffffffffff
0000000000018480         jne        loc_18656

                     loc_18486:
0000000000018486         mov        rax, qword [rsp+0xe8+var_98]                ; CODE XREF=transit_state_bkref.isra.34+448, transit_state_bkref.isra.34+474, transit_state_bkref.isra.34+944
000000000001848b         cmp        qword [r14+0xe8], 0x0
0000000000018493         mov        rdx, qword [rax]
0000000000018496         mov        rax, qword [rdx+rbx]
000000000001849a         mov        qword [rsp+0xe8+var_90], rax
000000000001849f         jle        loc_1865b

00000000000184a5         mov        qword [rsp+0xe8+var_B8], r13
00000000000184aa         mov        qword [rsp+0xe8+var_C0], 0x0
00000000000184b3         mov        r13, r10

                     loc_184b6:
00000000000184b6         mov        rax, qword [r14+0xf8]                       ; CODE XREF=transit_state_bkref.isra.34+601
00000000000184bd         mov        rbx, qword [rsp+0xe8+var_C0]
00000000000184c2         mov        rdi, qword [rsp+0xe8+var_90]
00000000000184c7         mov        rbx, qword [rax+rbx*8]
00000000000184cb         mov        rax, qword [rbx+8]
00000000000184cf         shl        rax, 0x4
00000000000184d3         cmp        rdi, qword [rdx+rax]
00000000000184d7         je         loc_18500

                     loc_184d9:
00000000000184d9         add        qword [rsp+0xe8+var_C0], 0x1                ; CODE XREF=transit_state_bkref.isra.34+1447, transit_state_bkref.isra.34+1829, transit_state_bkref.isra.34+1925
00000000000184df         mov        rax, qword [rsp+0xe8+var_C0]
00000000000184e4         cmp        rax, qword [r14+0xe8]
00000000000184eb         jge        loc_18b61

00000000000184f1         mov        rax, qword [rsp+0xe8+var_98]
00000000000184f6         mov        rdx, qword [rax]
00000000000184f9         jmp        loc_184b6
00000000000184fb         align      256

                     loc_18500:
0000000000018500         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=transit_state_bkref.isra.34+567
0000000000018505         mov        r11, qword [rbx]
0000000000018508         jle        loc_18b72

000000000001850e         mov        rcx, qword [rsp+0xe8+var_E0]
0000000000018513         mov        r8, r13
0000000000018516         xor        ebp, ebp
0000000000018518         mov        r13, rbx
000000000001851b         mov        rbx, rcx
000000000001851e         jmp        loc_1858c

                     loc_18520:
0000000000018520         lea        rsi, qword [r8+r11]                         ; argument "__s2" for method j_memcmp, CODE XREF=transit_state_bkref.isra.34+779, transit_state_bkref.isra.34+844
0000000000018524         lea        rdi, qword [r8+rbx]                         ; argument "__s1" for method j_memcmp
0000000000018528         mov        qword [rsp+0xe8+var_C8], r9
000000000001852d         mov        qword [rsp+0xe8+var_D0], r11
0000000000018532         mov        qword [rsp+0xe8+var_D8], r8
0000000000018537         call       j_memcmp                                    ; memcmp
000000000001853c         test       eax, eax
000000000001853e         mov        r8, qword [rsp+0xe8+var_D8]
0000000000018543         mov        r11, qword [rsp+0xe8+var_D0]
0000000000018548         mov        r9, qword [rsp+0xe8+var_C8]
000000000001854d         jne        loc_18a18

                     loc_18553:
0000000000018553         mov        r8, qword [rsp+0xe8+var_E0]                 ; CODE XREF=transit_state_bkref.isra.34+773
0000000000018558         mov        rcx, qword [rsp+0xe8+var_B8]
000000000001855d         mov        rdx, r9
0000000000018560         mov        rsi, r13
0000000000018563         mov        rdi, r14
0000000000018566         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000001856b         cmp        eax, 0x1
000000000001856e         mov        r8, qword [r14+8]
0000000000018572         ja         loc_18618

0000000000018578         add        rbp, 0x1
000000000001857c         cmp        rbp, qword [r13+0x20]
0000000000018580         mov        r11, r15
0000000000018583         mov        rbx, r12
0000000000018586         jge        loc_18838

                     loc_1858c:
000000000001858c         mov        rax, qword [r13+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+638
0000000000018590         mov        r9, qword [rax+rbp*8]
0000000000018594         mov        r15, qword [r9+8]
0000000000018598         mov        rdx, r15
000000000001859b         sub        rdx, r11
000000000001859e         test       rdx, rdx
00000000000185a1         lea        r12, qword [rdx+rbx]
00000000000185a5         jle        loc_18553

00000000000185a7         cmp        qword [r14+0x30], r12
00000000000185ab         jge        loc_18520

00000000000185b1         cmp        qword [r14+0x58], r12
00000000000185b5         mov        qword [rsp+0xe8+var_D0], rdx
00000000000185ba         mov        qword [rsp+0xe8+var_D8], r9
00000000000185bf         jl         loc_18a18

00000000000185c5         mov        rsi, r12
00000000000185c8         mov        rdi, r14
00000000000185cb         mov        qword [rsp+0xe8+var_C8], r11
00000000000185d0         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
00000000000185d5         test       eax, eax
00000000000185d7         jne        loc_18618

00000000000185d9         mov        r8, qword [r14+8]
00000000000185dd         mov        rdx, qword [rsp+0xe8+var_D0]
00000000000185e2         mov        r9, qword [rsp+0xe8+var_D8]
00000000000185e7         mov        r11, qword [rsp+0xe8+var_C8]
00000000000185ec         jmp        loc_18520
00000000000185f1         align      8

                     loc_185f8:
00000000000185f8         mov        r8, rsi                                     ; CODE XREF=transit_state_bkref.isra.34+395
00000000000185fb         mov        rsi, rdi
00000000000185fe         nop

                     loc_18600:
0000000000018600         lea        rcx, qword [r8+1]                           ; CODE XREF=transit_state_bkref.isra.34+429
0000000000018604         mov        rdi, rsi
0000000000018607         jmp        loc_18403
000000000001860c         align      16

                     loc_18610:
0000000000018610         xor        eax, eax                                    ; CODE XREF=transit_state_bkref.isra.34+66, transit_state_bkref.isra.34+193
0000000000018612         nop        word [rax+rax]

                     loc_18618:
0000000000018618         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=transit_state_bkref.isra.34+722, transit_state_bkref.isra.34+823, transit_state_bkref.isra.34+1694, transit_state_bkref.isra.34+1801, transit_state_bkref.isra.34+1902, transit_state_bkref.isra.34+2016, transit_state_bkref.isra.34+2070, transit_state_bkref.isra.34+2110, transit_state_bkref.isra.34+2140, transit_state_bkref.isra.34+2169
0000000000018620         xor        rbx, qword [fs:0x28]
0000000000018629         jne        loc_18b7c

000000000001862f         add        rsp, 0xb8
0000000000018636         pop        rbx
0000000000018637         pop        rbp
0000000000018638         pop        r12
000000000001863a         pop        r13
000000000001863c         pop        r14
000000000001863e         pop        r15
0000000000018640         ret
                        ; endp
0000000000018641         align      8

                     loc_18648:
0000000000018648         add        rax, 0x28                                   ; CODE XREF=transit_state_bkref.isra.34+953
000000000001864c         cmp        byte [rax-8], 0x0
0000000000018650         je         loc_18486

                     loc_18656:
0000000000018656         cmp        r13, qword [rax]                            ; CODE XREF=transit_state_bkref.isra.34+480
0000000000018659         jne        loc_18648

                     loc_1865b:
000000000001865b         mov        rax, qword [rsp+0xe8+var_78]                ; CODE XREF=transit_state_bkref.isra.34+511

                     loc_18660:
0000000000018660         cmp        qword [rsp+0xe8+var_78], rax                ; CODE XREF=transit_state_bkref.isra.34+2253
0000000000018665         mov        dword [rsp+0xe8+var_5C], 0x0
0000000000018670         jge        loc_18350

0000000000018676         lea        rax, qword [r13*8]
000000000001867e         mov        r12, qword [rsp+0xe8+var_78]
0000000000018683         mov        rbp, qword [rsp+0xe8+var_B0]
0000000000018688         mov        qword [rsp+0xe8+var_98], rax
000000000001868d         lea        rax, qword [r13+r13*2]
0000000000018692         lea        r8, qword [r12+r12*4]
0000000000018696         shl        rax, 0x3
000000000001869a         mov        qword [rsp+0xe8+var_90], rax
000000000001869f         lea        r15, qword [r8*8]
00000000000186a7         jmp        loc_187dd
00000000000186ac         align      16

                     loc_186b0:
00000000000186b0         mov        rcx, qword [rbp+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+1390
00000000000186b4         mov        rdi, qword [rsp+0xe8+var_90]
00000000000186b9         mov        rcx, qword [rcx+rdi+0x10]
00000000000186be         mov        rcx, qword [rcx]
00000000000186c1         lea        rcx, qword [rcx+rcx*2]
00000000000186c5         lea        rcx, qword [rdx+rcx*8]
00000000000186c9         mov        qword [rsp+0xe8+var_D0], rcx

                     loc_186ce:
00000000000186ce         add        rbx, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+1422
00000000000186d3         mov        edx, dword [r14+0xa0]
00000000000186da         mov        rdi, r14
00000000000186dd         sub        rbx, rax
00000000000186e0         lea        rsi, qword [rbx-1]
00000000000186e4         call       re_string_context_at                        ; re_string_context_at
00000000000186e9         mov        rsi, qword [rsp+0xe8+var_88]
00000000000186ee         mov        ecx, eax
00000000000186f0         mov        rax, qword [r14+0xb8]
00000000000186f7         lea        r10, qword [rbx*8]
00000000000186ff         mov        qword [rsp+0xe8+var_D8], 0x0
0000000000018708         lea        r11, qword [rax+r10]
000000000001870c         mov        rax, qword [rax+rsi]
0000000000018710         mov        rdx, qword [r11]
0000000000018713         test       rax, rax
0000000000018716         je         loc_18721

0000000000018718         mov        rax, qword [rax+0x10]
000000000001871c         mov        qword [rsp+0xe8+var_D8], rax

                     loc_18721:
0000000000018721         test       rdx, rdx                                    ; CODE XREF=transit_state_bkref.isra.34+1142
0000000000018724         je         loc_18a40

000000000001872a         mov        rsi, qword [rdx+0x50]
000000000001872e         mov        rdi, qword [rsp+0xe8+var_80]
0000000000018733         mov        rdx, qword [rsp+0xe8+var_D0]
0000000000018738         mov        qword [rsp+0xe8+var_B8], r10
000000000001873d         mov        dword [rsp+0xe8+var_C0], ecx
0000000000018741         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000018746         test       eax, eax
0000000000018748         mov        dword [rsp+0xe8+var_5C], eax
000000000001874f         mov        ecx, dword [rsp+0xe8+var_C0]
0000000000018753         mov        r10, qword [rsp+0xe8+var_B8]
0000000000018758         jne        loc_18ae8

000000000001875e         add        r10, qword [r14+0xb8]
0000000000018765         mov        rdx, qword [rsp+0xe8+var_80]
000000000001876a         mov        rsi, rbp
000000000001876d         mov        rdi, qword [rsp+0xe8+var_70]
0000000000018772         mov        qword [rsp+0xe8+var_C0], r10
0000000000018777         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001877c         mov        r10, qword [rsp+0xe8+var_C0]
0000000000018781         mov        rdi, qword [rsp+0xe8+var_48]
0000000000018789         mov        qword [r10], rax
000000000001878c         call       sub_2a10                                    ; sub_2a10
0000000000018791         mov        rdx, qword [r14+0xb8]
0000000000018798         cmp        qword [rdx+rbx*8], 0x0
000000000001879d         je         loc_18a71

                     loc_187a3:
00000000000187a3         cmp        qword [rsp+0xe8+var_C8], 0x0                ; CODE XREF=transit_state_bkref.isra.34+1995, transit_state_bkref.isra.34+2010
00000000000187a9         jne        loc_187c8

00000000000187ab         mov        rax, qword [rsp+0xe8+var_88]
00000000000187b0         mov        rbx, qword [rsp+0xe8+var_D8]
00000000000187b5         mov        rax, qword [rdx+rax]
00000000000187b9         cmp        qword [rax+0x10], rbx
00000000000187bd         jg         loc_18a88

00000000000187c3         nop        dword [rax+rax]

                     loc_187c8:
00000000000187c8         add        r12, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1289, transit_state_bkref.isra.34+1354, transit_state_bkref.isra.34+1365, transit_state_bkref.isra.34+2104
00000000000187cc         add        r15, 0x28
00000000000187d0         cmp        r12, qword [r14+0xc8]
00000000000187d7         jge        loc_18350

                     loc_187dd:
00000000000187dd         mov        rax, qword [r14+0xd8]                       ; CODE XREF=transit_state_bkref.isra.34+1031
00000000000187e4         add        rax, r15
00000000000187e7         cmp        r13, qword [rax]
00000000000187ea         jne        loc_187c8

00000000000187ec         mov        rdi, qword [rsp+0xe8+var_E0]
00000000000187f1         cmp        rdi, qword [rax+8]
00000000000187f5         jne        loc_187c8

00000000000187f7         mov        rbx, qword [rax+0x18]
00000000000187fb         mov        rax, qword [rax+0x10]
00000000000187ff         mov        rdx, qword [rbp+0x30]
0000000000018803         mov        rcx, rbx
0000000000018806         sub        rcx, rax
0000000000018809         mov        qword [rsp+0xe8+var_C8], rcx
000000000001880e         je         loc_186b0

0000000000018814         mov        rcx, qword [rbp+0x18]
0000000000018818         mov        rdi, qword [rsp+0xe8+var_98]
000000000001881d         mov        rcx, qword [rcx+rdi]
0000000000018821         lea        rcx, qword [rcx+rcx*2]
0000000000018825         lea        rcx, qword [rdx+rcx*8]
0000000000018829         mov        qword [rsp+0xe8+var_D0], rcx
000000000001882e         jmp        loc_186ce
0000000000018833         align      8

                     loc_18838:
0000000000018838         mov        rbx, r13                                    ; CODE XREF=transit_state_bkref.isra.34+742
000000000001883b         mov        r13, r8

                     loc_1883e:
000000000001883e         lea        r11, qword [r15+1]                          ; CODE XREF=transit_state_bkref.isra.34+1946

                     loc_18842:
0000000000018842         cmp        qword [rsp+0xe8+var_E0], r11                ; CODE XREF=transit_state_bkref.isra.34+1937, transit_state_bkref.isra.34+2263
0000000000018847         jl         loc_184d9

000000000001884d         mov        rax, r12
0000000000018850         lea        r15, qword [r11*8]
0000000000018858         mov        r12, rbx
000000000001885b         mov        rbx, r11
000000000001885e         mov        r11, r13
0000000000018861         mov        r13, rax
0000000000018864         nop        dword [rax]

                     loc_18868:
0000000000018868         mov        rax, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1820
000000000001886b         sub        rax, qword [r12]
000000000001886f         test       rax, rax
0000000000018872         jle        loc_18895

0000000000018874         cmp        qword [r14+0x30], r13
0000000000018878         jle        loc_18b01

                     loc_1887e:
000000000001887e         movzx      ecx, byte [r11+rbx-1]                       ; CODE XREF=transit_state_bkref.isra.34+2179
0000000000018884         lea        rax, qword [r13+1]
0000000000018888         cmp        byte [r11+r13], cl
000000000001888c         jne        loc_189c2

0000000000018892         mov        r13, rax

                     loc_18895:
0000000000018895         mov        rax, qword [r14+0xb8]                       ; CODE XREF=transit_state_bkref.isra.34+1490
000000000001889c         mov        rax, qword [rax+r15]
00000000000188a0         test       rax, rax
00000000000188a3         je         loc_189af

00000000000188a9         mov        rcx, qword [rax+0x10]
00000000000188ad         test       rcx, rcx
00000000000188b0         jle        loc_189af

00000000000188b6         mov        rdi, qword [rax+0x18]
00000000000188ba         mov        rax, qword [rsp+0xe8+var_98]
00000000000188bf         xor        edx, edx
00000000000188c1         mov        r8, qword [rsp+0xe8+var_90]
00000000000188c6         mov        rsi, qword [rax]
00000000000188c9         jmp        loc_188dd
00000000000188cb         align      16

                     loc_188d0:
00000000000188d0         add        rdx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1615, transit_state_bkref.isra.34+1620
00000000000188d4         cmp        rcx, rdx
00000000000188d7         je         loc_189af

                     loc_188dd:
00000000000188dd         mov        rbp, qword [rdi+rdx*8]                      ; CODE XREF=transit_state_bkref.isra.34+1577
00000000000188e1         mov        rax, rbp
00000000000188e4         shl        rax, 0x4
00000000000188e8         add        rax, rsi
00000000000188eb         cmp        byte [rax+8], 0x9
00000000000188ef         jne        loc_188d0

00000000000188f1         cmp        r8, qword [rax]
00000000000188f4         jne        loc_188d0

00000000000188f6         cmp        rbp, 0xffffffffffffffff
00000000000188fa         je         loc_189af

0000000000018900         mov        rsi, qword [r12+0x10]
0000000000018905         mov        rcx, qword [r12]
0000000000018909         test       rsi, rsi
000000000001890c         je         loc_189d0

                     loc_18912:
0000000000018912         mov        qword [rsp+0xe8+var_D8], r11                ; CODE XREF=transit_state_bkref.isra.34+1891
0000000000018917         mov        rdx, qword [r12+8]
000000000001891c         sub        rsp, 0x8
0000000000018920         push       0x9
0000000000018922         mov        r9, rbx
0000000000018925         mov        r8, rbp
0000000000018928         mov        rdi, r14
000000000001892b         call       check_arrival                               ; check_arrival
0000000000018930         pop        rdx
0000000000018931         cmp        eax, 0x1
0000000000018934         pop        rcx
0000000000018935         mov        r11, qword [rsp+0xe8+var_D8]
000000000001893a         je         loc_189af

000000000001893c         test       eax, eax
000000000001893e         jne        loc_18618

0000000000018944         mov        rax, qword [r12+0x20]
0000000000018949         cmp        rax, qword [r12+0x18]
000000000001894e         je         loc_18b28

                     loc_18954:
0000000000018954         mov        esi, 0x28                                   ; argument "__size" for method j_calloc, CODE XREF=transit_state_bkref.isra.34+2236
0000000000018959         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000001895e         call       j_calloc                                    ; calloc
0000000000018963         test       rax, rax
0000000000018966         je         loc_18a09

000000000001896c         mov        rdx, qword [r12+0x20]
0000000000018971         mov        rcx, qword [r12+0x28]
0000000000018976         mov        rsi, r12
0000000000018979         mov        r8, qword [rsp+0xe8+var_E0]
000000000001897e         mov        rdi, r14
0000000000018981         mov        qword [rcx+rdx*8], rax
0000000000018985         mov        rcx, qword [rsp+0xe8+var_B8]
000000000001898a         add        rdx, 0x1
000000000001898e         mov        qword [rax], rbp
0000000000018991         mov        qword [rax+8], rbx
0000000000018995         mov        qword [r12+0x20], rdx
000000000001899a         mov        rdx, rax
000000000001899d         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
00000000000189a2         cmp        eax, 0x1
00000000000189a5         mov        r11, qword [r14+8]
00000000000189a9         ja         loc_18618

                     loc_189af:
00000000000189af         add        rbx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1539, transit_state_bkref.isra.34+1552, transit_state_bkref.isra.34+1591, transit_state_bkref.isra.34+1626, transit_state_bkref.isra.34+1690
00000000000189b3         add        r15, 0x8
00000000000189b7         cmp        qword [rsp+0xe8+var_E0], rbx
00000000000189bc         jge        loc_18868

                     loc_189c2:
00000000000189c2         mov        r13, r11                                    ; CODE XREF=transit_state_bkref.isra.34+1516, transit_state_bkref.isra.34+2149
00000000000189c5         jmp        loc_184d9
00000000000189ca         align      16

                     loc_189d0:
00000000000189d0         mov        rsi, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1644
00000000000189d3         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc
00000000000189d8         mov        qword [rsp+0xe8+var_D0], r11
00000000000189dd         sub        rsi, rcx
00000000000189e0         mov        qword [rsp+0xe8+var_D8], rcx
00000000000189e5         add        rsi, 0x1                                    ; argument "__size" for method j_calloc
00000000000189e9         call       j_calloc                                    ; calloc
00000000000189ee         test       rax, rax
00000000000189f1         mov        rsi, rax
00000000000189f4         mov        qword [r12+0x10], rax
00000000000189f9         mov        rcx, qword [rsp+0xe8+var_D8]
00000000000189fe         mov        r11, qword [rsp+0xe8+var_D0]
0000000000018a03         jne        loc_18912

                     loc_18a09:
0000000000018a09         mov        eax, 0xc                                    ; CODE XREF=transit_state_bkref.isra.34+1734, transit_state_bkref.isra.34+2215
0000000000018a0e         jmp        loc_18618
0000000000018a13         align      8

                     loc_18a18:
0000000000018a18         mov        rcx, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+685, transit_state_bkref.isra.34+799
0000000000018a1b         mov        rbx, r13
0000000000018a1e         mov        r13, r8
0000000000018a21         cmp        qword [rbx+0x20], rbp
0000000000018a25         jg         loc_184d9

0000000000018a2b         test       rbp, rbp
0000000000018a2e         mov        r12, rcx
0000000000018a31         je         loc_18842

0000000000018a37         mov        r15, r11
0000000000018a3a         jmp        loc_1883e
0000000000018a3f         align      64

                     loc_18a40:
0000000000018a40         mov        rdx, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1156
0000000000018a45         mov        rdi, qword [rsp+0xe8+var_70]
0000000000018a4a         mov        rsi, rbp
0000000000018a4d         mov        qword [rsp+0xe8+var_C0], r11
0000000000018a52         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000018a57         mov        r11, qword [rsp+0xe8+var_C0]
0000000000018a5c         mov        rdx, qword [r14+0xb8]
0000000000018a63         mov        qword [r11], rax
0000000000018a66         cmp        qword [rdx+rbx*8], 0x0
0000000000018a6b         jne        loc_187a3

                     loc_18a71:
0000000000018a71         mov        eax, dword [rsp+0xe8+var_5C]                ; CODE XREF=transit_state_bkref.isra.34+1277
0000000000018a78         test       eax, eax
0000000000018a7a         je         loc_187a3

0000000000018a80         jmp        loc_18618
0000000000018a85         align      8

                     loc_18a88:
0000000000018a88         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1309
0000000000018a8d         mov        rcx, qword [rsp+0xe8+var_E0]
0000000000018a92         mov        rdi, r14
0000000000018a95         lea        r8, qword [rax+0x10]
0000000000018a99         lea        rbx, qword [rax+8]
0000000000018a9d         mov        rdx, r8
0000000000018aa0         mov        rsi, rbx
0000000000018aa3         mov        qword [rsp+0xe8+var_D8], r8
0000000000018aa8         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
0000000000018aad         test       eax, eax
0000000000018aaf         mov        dword [rsp+0xe8+var_5C], eax
0000000000018ab6         jne        loc_18618

0000000000018abc         mov        r8, qword [rsp+0xe8+var_D8]
0000000000018ac1         mov        rsi, rbx
0000000000018ac4         mov        rdi, r14
0000000000018ac7         mov        rdx, r8
0000000000018aca         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
0000000000018acf         test       eax, eax
0000000000018ad1         mov        dword [rsp+0xe8+var_5C], eax
0000000000018ad8         je         loc_187c8

0000000000018ade         jmp        loc_18618
0000000000018ae3         align      8

                     loc_18ae8:
0000000000018ae8         mov        rdi, qword [rsp+0xe8+var_48]                ; CODE XREF=transit_state_bkref.isra.34+1208
0000000000018af0         call       sub_2a10                                    ; sub_2a10
0000000000018af5         mov        eax, dword [rsp+0xe8+var_5C]
0000000000018afc         jmp        loc_18618

                     loc_18b01:
0000000000018b01         cmp        qword [r14+0x58], r13                       ; CODE XREF=transit_state_bkref.isra.34+1496
0000000000018b05         jle        loc_189c2

0000000000018b0b         lea        esi, dword [r13+1]
0000000000018b0f         mov        rdi, r14
0000000000018b12         call       extend_buffers                              ; extend_buffers
0000000000018b17         test       eax, eax
0000000000018b19         jne        loc_18618

0000000000018b1f         mov        r11, qword [r14+8]
0000000000018b23         jmp        loc_1887e

                     loc_18b28:
0000000000018b28         lea        rdx, qword [rax+rax+1]                      ; CODE XREF=transit_state_bkref.isra.34+1710
0000000000018b2d         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_realloc
0000000000018b32         lea        rsi, qword [rdx*8]                          ; argument "__size" for method j_realloc
0000000000018b3a         mov        qword [rsp+0xe8+var_D8], rdx
0000000000018b3f         call       j_realloc                                   ; realloc
0000000000018b44         test       rax, rax
0000000000018b47         je         loc_18a09

0000000000018b4d         mov        rdx, qword [rsp+0xe8+var_D8]
0000000000018b52         mov        qword [r12+0x28], rax
0000000000018b57         mov        qword [r12+0x18], rdx
0000000000018b5c         jmp        loc_18954

                     loc_18b61:
0000000000018b61         mov        r13, qword [rsp+0xe8+var_B8]                ; CODE XREF=transit_state_bkref.isra.34+587
0000000000018b66         mov        rax, qword [r14+0xc8]
0000000000018b6d         jmp        loc_18660

                     loc_18b72:
0000000000018b72         mov        r12, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+616
0000000000018b77         jmp        loc_18842

                     loc_18b7c:
0000000000018b7c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=transit_state_bkref.isra.34+905
                        ; endp
0000000000018b81         align      16                                          ; End of unwind block (FDE at 0x26954)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     merge_state_with_log:
0000000000018b90         push       r15                                         ; Begin of unwind block (FDE at 0x269b4), CODE XREF=re_search_internal+2012, re_search_internal+3011
0000000000018b92         push       r14
0000000000018b94         push       r13
0000000000018b96         push       r12
0000000000018b98         mov        r13, rdi
0000000000018b9b         push       rbp
0000000000018b9c         push       rbx
0000000000018b9d         mov        rbx, rsi
0000000000018ba0         sub        rsp, 0x38
0000000000018ba4         mov        r12, qword [rsi+0x48]
0000000000018ba8         mov        r14, qword [rsi+0xb8]
0000000000018baf         mov        rax, qword [fs:0x28]
0000000000018bb8         mov        qword [rsp+0x68+var_40], rax
0000000000018bbd         xor        eax, eax
0000000000018bbf         mov        r15, qword [rsi+0x98]
0000000000018bc6         lea        rbp, qword [r12*8]
0000000000018bce         add        r14, rbp
0000000000018bd1         cmp        qword [rsi+0xc0], r12
0000000000018bd8         jge        loc_18c20

0000000000018bda         mov        qword [r14], rdx
0000000000018bdd         mov        rbp, rdx
0000000000018be0         mov        qword [rsi+0xc0], r12

                     loc_18be7:
0000000000018be7         cmp        qword [r15+0x98], 0x0                       ; CODE XREF=merge_state_with_log+273, merge_state_with_log+289, merge_state_with_log+365, merge_state_with_log+382
0000000000018bef         jne        loc_18d18

                     loc_18bf5:
0000000000018bf5         mov        rcx, qword [rsp+0x68+var_40]                ; CODE XREF=merge_state_with_log+434, merge_state_with_log+473, merge_state_with_log+482
0000000000018bfa         xor        rcx, qword [fs:0x28]
0000000000018c03         mov        rax, rbp
0000000000018c06         jne        loc_18d77

0000000000018c0c         add        rsp, 0x38
0000000000018c10         pop        rbx
0000000000018c11         pop        rbp
0000000000018c12         pop        r12
0000000000018c14         pop        r13
0000000000018c16         pop        r14
0000000000018c18         pop        r15
0000000000018c1a         ret
                        ; endp
0000000000018c1b         align      32

                     loc_18c20:
0000000000018c20         mov        rax, qword [r14]                            ; CODE XREF=merge_state_with_log+72
0000000000018c23         test       rax, rax
0000000000018c26         je         loc_18d08

0000000000018c2c         test       rdx, rdx
0000000000018c2f         mov        rax, qword [rax+0x50]
0000000000018c33         je         loc_18cc0

0000000000018c39         mov        r14, qword [rdx+0x50]
0000000000018c3d         lea        rdi, qword [rsp+0x68+var_58]
0000000000018c42         mov        rdx, rax
0000000000018c45         mov        qword [rsp+0x68+var_68], rdi
0000000000018c49         mov        rsi, r14
0000000000018c4c         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000018c51         test       eax, eax
0000000000018c53         mov        dword [r13], eax
0000000000018c57         jne        loc_18d70

0000000000018c5d         mov        rax, qword [rbx+0x48]
0000000000018c61         mov        edx, dword [rbx+0xa0]
0000000000018c67         mov        rdi, rbx
0000000000018c6a         lea        rsi, qword [rax-1]
0000000000018c6e         call       re_string_context_at                        ; re_string_context_at
0000000000018c73         mov        r8, qword [rbx+0xb8]
0000000000018c7a         mov        rdx, qword [rsp+0x68+var_68]
0000000000018c7e         mov        ecx, eax
0000000000018c80         mov        rsi, r15
0000000000018c83         mov        rdi, r13
0000000000018c86         add        r8, rbp
0000000000018c89         mov        qword [rsp+0x68+var_60], r8
0000000000018c8e         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000018c93         mov        r8, qword [rsp+0x68+var_60]
0000000000018c98         test       r14, r14
0000000000018c9b         mov        rbp, rax
0000000000018c9e         mov        qword [r8], rax
0000000000018ca1         je         loc_18be7

0000000000018ca7         mov        rdi, qword [rsp+0x68+var_48]
0000000000018cac         call       sub_2a10                                    ; sub_2a10
0000000000018cb1         jmp        loc_18be7
0000000000018cb6         align      64

                     loc_18cc0:
0000000000018cc0         movdqu     xmm0, xmmword [rax]                         ; CODE XREF=merge_state_with_log+163
0000000000018cc4         mov        rdi, rbx
0000000000018cc7         mov        edx, dword [rsi+0xa0]
0000000000018ccd         lea        rsi, qword [r12-1]
0000000000018cd2         movaps     xmmword [rsp+0x68+var_58], xmm0
0000000000018cd7         mov        rax, qword [rax+0x10]
0000000000018cdb         mov        qword [rsp+0x68+var_48], rax
0000000000018ce0         call       re_string_context_at                        ; re_string_context_at
0000000000018ce5         lea        rdx, qword [rsp+0x68+var_58]
0000000000018cea         mov        ecx, eax
0000000000018cec         mov        rsi, r15
0000000000018cef         mov        rdi, r13
0000000000018cf2         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000018cf7         mov        rbp, rax
0000000000018cfa         mov        qword [r14], rax
0000000000018cfd         jmp        loc_18be7
0000000000018d02         align      8

                     loc_18d08:
0000000000018d08         mov        qword [r14], rdx                            ; CODE XREF=merge_state_with_log+150
0000000000018d0b         mov        rbp, rdx
0000000000018d0e         jmp        loc_18be7
0000000000018d13         align      8

                     loc_18d18:
0000000000018d18         test       rbp, rbp                                    ; CODE XREF=merge_state_with_log+95
0000000000018d1b         je         loc_18d70

0000000000018d1d         lea        r14, qword [rbp+0x10]
0000000000018d21         lea        r15, qword [rbp+0x18]
0000000000018d25         mov        rcx, r12
0000000000018d28         mov        rdi, rbx
0000000000018d2b         mov        rdx, r15
0000000000018d2e         mov        rsi, r14
0000000000018d31         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
0000000000018d36         test       eax, eax
0000000000018d38         mov        dword [r13], eax
0000000000018d3c         jne        loc_18d70

0000000000018d3e         test       byte [rbp+0x68], 0x40
0000000000018d42         je         loc_18bf5

0000000000018d48         mov        rdx, r15
0000000000018d4b         mov        rsi, r14
0000000000018d4e         mov        rdi, rbx
0000000000018d51         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
0000000000018d56         test       eax, eax
0000000000018d58         mov        dword [r13], eax
0000000000018d5c         jne        loc_18d70

0000000000018d5e         mov        rax, qword [rbx+0xb8]
0000000000018d65         mov        rbp, qword [rax+r12*8]
0000000000018d69         jmp        loc_18bf5
0000000000018d6e         align      16

                     loc_18d70:
0000000000018d70         xor        ebp, ebp                                    ; CODE XREF=merge_state_with_log+199, merge_state_with_log+395, merge_state_with_log+428, merge_state_with_log+460
0000000000018d72         jmp        loc_18bf5

                     loc_18d77:
0000000000018d77         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_with_log+118
                        ; endp
0000000000018d7c         align      128                                         ; End of unwind block (FDE at 0x269b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152


                     sift_states_backward:
0000000000018d80         push       r15                                         ; Begin of unwind block (FDE at 0x26a00), CODE XREF=re_search_internal+2510, re_search_internal+4661, update_cur_sifted_state+1785
0000000000018d82         push       r14
0000000000018d84         mov        r14, rdi
0000000000018d87         push       r13
0000000000018d89         push       r12
0000000000018d8b         mov        r13, rsi
0000000000018d8e         push       rbp
0000000000018d8f         push       rbx
0000000000018d90         sub        rsp, 0x68
0000000000018d94         mov        r15, qword [rsi+0x18]
0000000000018d98         mov        rbx, qword [rsi+0x10]
0000000000018d9c         mov        qword [rsp+0x98+var_98], rdi
0000000000018da0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000018da5         mov        qword [rsp+0x98+var_58], 0x1
0000000000018dae         mov        rax, qword [fs:0x28]
0000000000018db7         mov        qword [rsp+0x98+var_40], rax
0000000000018dbc         xor        eax, eax
0000000000018dbe         mov        qword [rsp+0x98+var_50], 0x1
0000000000018dc7         call       j_malloc                                    ; malloc
0000000000018dcc         test       rax, rax
0000000000018dcf         mov        qword [rsp+0x98+var_48], rax
0000000000018dd4         je         loc_190b4

0000000000018dda         lea        rcx, qword [rsp+0x98+var_58]
0000000000018ddf         mov        qword [rax], rbx
0000000000018de2         mov        rdx, r15
0000000000018de5         mov        rsi, r13
0000000000018de8         mov        rdi, r14
0000000000018deb         mov        qword [rsp+0x98+var_88], rcx
0000000000018df0         call       update_cur_sifted_state                     ; update_cur_sifted_state
0000000000018df5         test       eax, eax
0000000000018df7         jne        loc_19085

0000000000018dfd         lea        rax, qword [r15*8]
0000000000018e05         test       r15, r15
0000000000018e08         mov        dword [rsp+0x98+var_6C], 0x0
0000000000018e10         mov        qword [rsp+0x98+var_90], rax
0000000000018e15         lea        rax, qword [r13+0x30]
0000000000018e19         mov        qword [rsp+0x98+var_60], rax
0000000000018e1e         jle        loc_19027

                     loc_18e24:
0000000000018e24         mov        rdi, qword [r13]                            ; CODE XREF=sift_states_backward+673
0000000000018e28         mov        rax, qword [rsp+0x98+var_90]
0000000000018e2d         cmp        qword [rdi+rax], 0x0
0000000000018e32         je         loc_19048

0000000000018e38         mov        rax, qword [rsp+0x98+var_98]
0000000000018e3c         mov        dword [rsp+0x98+var_6C], 0x0
0000000000018e44         mov        ecx, dword [rsp+0x98+var_6C]
0000000000018e48         cmp        dword [rax+0xe0], ecx
0000000000018e4e         jl         loc_19061

                     loc_18e54:
0000000000018e54         mov        rbx, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+731
0000000000018e58         mov        rdi, qword [rsp+0x98+var_90]
0000000000018e5d         sub        r15, 0x1
0000000000018e61         mov        qword [rsp+0x98+var_50], 0x0
0000000000018e6a         mov        rax, qword [rbx+0xb8]
0000000000018e71         mov        r12, qword [rax+rdi-8]
0000000000018e76         test       r12, r12
0000000000018e79         je         loc_19000

0000000000018e7f         cmp        qword [r12+0x28], 0x0
0000000000018e85         mov        r14, qword [rbx+0x98]
0000000000018e8c         jle        loc_19000

0000000000018e92         xor        ebx, ebx
0000000000018e94         jmp        loc_18f3b
0000000000018e99         align      32

                     loc_18ea0:
0000000000018ea0         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+469, sift_states_backward+625, sift_states_backward+700
0000000000018ea4         mov        rdx, r15
0000000000018ea7         call       check_node_accept                           ; check_node_accept
0000000000018eac         test       al, al
0000000000018eae         je         loc_18f2c

0000000000018eb0         mov        rax, qword [r13]
0000000000018eb4         mov        rcx, qword [rsp+0x98+var_90]
0000000000018eb9         mov        rax, qword [rax+rcx]
0000000000018ebd         test       rax, rax
0000000000018ec0         je         loc_18f2c

0000000000018ec2         mov        rdx, qword [r14+0x18]
0000000000018ec6         mov        rdi, qword [rax+0x10]
0000000000018eca         lea        rsi, qword [rax+0x18]
0000000000018ece         mov        rdx, qword [rdx+rbp*8]
0000000000018ed2         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000018ed7         test       rax, rax
0000000000018eda         je         loc_18f2c

0000000000018edc         mov        r10d, 0x1

                     loc_18ee2:
0000000000018ee2         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sift_states_backward+555, sift_states_backward+608, loc_19030
0000000000018ee7         je         loc_18f17

0000000000018ee9         mov        rax, qword [r14+0x18]
0000000000018eed         sub        rsp, 0x8
0000000000018ef1         lea        rsi, qword [r13+0x28]
0000000000018ef5         lea        r8, qword [r10+r15]
0000000000018ef9         mov        r9, rbp
0000000000018efc         mov        rcx, qword [rax+rbp*8]
0000000000018f00         push       r15
0000000000018f02         mov        rdx, qword [rsp+0xa8+var_60]
0000000000018f07         mov        rdi, qword [rsp+0xa8+var_98]
0000000000018f0c         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
0000000000018f11         test       al, al
0000000000018f13         pop        rdx
0000000000018f14         pop        rcx
0000000000018f15         jne        loc_18f2c

                     loc_18f17:
0000000000018f17         mov        rdi, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+359
0000000000018f1c         mov        rsi, rbp
0000000000018f1f         call       re_node_set_insert                          ; re_node_set_insert
0000000000018f24         test       al, al
0000000000018f26         je         loc_19080

                     loc_18f2c:
0000000000018f2c         add        rbx, 0x1                                    ; CODE XREF=sift_states_backward+302, sift_states_backward+320, sift_states_backward+346, sift_states_backward+405
0000000000018f30         cmp        rbx, qword [r12+0x28]
0000000000018f35         jge        loc_19000

                     loc_18f3b:
0000000000018f3b         mov        rax, qword [r12+0x30]                       ; CODE XREF=sift_states_backward+276
0000000000018f40         mov        rsi, qword [r14]
0000000000018f43         mov        rbp, qword [rax+rbx*8]
0000000000018f47         mov        r9, rbp
0000000000018f4a         shl        r9, 0x4
0000000000018f4e         add        rsi, r9
0000000000018f51         test       byte [rsi+0xa], 0x10
0000000000018f55         je         loc_18ea0

0000000000018f5b         mov        rcx, qword [rsp+0x98+var_98]
0000000000018f5f         mov        rax, qword [r13+0x18]
0000000000018f63         mov        r8, r15
0000000000018f66         mov        rdx, rbp
0000000000018f69         mov        qword [rsp+0x98+var_80], r9
0000000000018f6e         mov        r11, qword [rcx+0x98]
0000000000018f75         mov        qword [rsp+0x98+var_78], rax
0000000000018f7a         mov        rdi, qword [r11]
0000000000018f7d         lea        rsi, qword [r11+0xd8]
0000000000018f84         mov        qword [rsp+0x98+var_68], r11
0000000000018f89         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
0000000000018f8e         movsxd     r10, eax
0000000000018f91         mov        r9, qword [rsp+0x98+var_80]
0000000000018f96         cmp        r10d, 0x0
0000000000018f9a         jle        loc_19030

0000000000018fa0         movsxd     rax, r10d
0000000000018fa3         add        rax, r15
0000000000018fa6         cmp        qword [rsp+0x98+var_78], rax
0000000000018fab         jl         loc_18ee2

0000000000018fb1         mov        rdx, qword [r13]
0000000000018fb5         mov        r11, qword [rsp+0x98+var_68]
0000000000018fba         mov        rax, qword [rdx+rax*8]
0000000000018fbe         test       rax, rax
0000000000018fc1         je         loc_19036

0000000000018fc3         mov        rdx, qword [r11+0x18]
0000000000018fc7         mov        rdi, qword [rax+0x10]
0000000000018fcb         lea        rsi, qword [rax+0x18]
0000000000018fcf         mov        qword [rsp+0x98+var_80], r9
0000000000018fd4         mov        rdx, qword [rdx+rbp*8]
0000000000018fd8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000018fdd         test       rax, rax
0000000000018fe0         jne        loc_18ee2

0000000000018fe6         mov        r9, qword [rsp+0x98+var_80]
0000000000018feb         mov        rsi, qword [r14]
0000000000018fee         add        rsi, r9
0000000000018ff1         jmp        loc_18ea0
0000000000018ff6         align      4096

                     loc_19000:
0000000000019000         mov        rcx, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+249, sift_states_backward+268, sift_states_backward+437
0000000000019005         mov        rdi, qword [rsp+0x98+var_98]
0000000000019009         mov        rdx, r15
000000000001900c         mov        rsi, r13
000000000001900f         call       update_cur_sifted_state                     ; update_cur_sifted_state
0000000000019014         test       eax, eax
0000000000019016         jne        loc_19085

0000000000019018         sub        qword [rsp+0x98+var_90], 0x8
000000000001901e         test       r15, r15
0000000000019021         jne        loc_18e24

                     loc_19027:
0000000000019027         xor        eax, eax                                    ; CODE XREF=sift_states_backward+158
0000000000019029         jmp        loc_19085
000000000001902b         align      16

                     loc_19030:
0000000000019030         jne        loc_18ee2                                   ; CODE XREF=sift_states_backward+538

                     loc_19036:
0000000000019036         mov        rsi, qword [r14]                            ; CODE XREF=sift_states_backward+577
0000000000019039         add        rsi, r9
000000000001903c         jmp        loc_18ea0
0000000000019041         align      8

                     loc_19048:
0000000000019048         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+178
000000000001904c         add        dword [rsp+0x98+var_6C], 0x1
0000000000019051         mov        ecx, dword [rsp+0x98+var_6C]
0000000000019055         cmp        dword [rax+0xe0], ecx
000000000001905b         jge        loc_18e54

                     loc_19061:
0000000000019061         mov        rdx, qword [rsp+0x98+var_90]                ; argument "__n" for method j_memset, CODE XREF=sift_states_backward+206
0000000000019066         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000019068         call       j_memset                                    ; memset
000000000001906d         mov        rdi, qword [rsp+0x98+var_48]
0000000000019072         call       sub_2a10                                    ; sub_2a10
0000000000019077         xor        eax, eax
0000000000019079         jmp        loc_19095
000000000001907b         align      128

                     loc_19080:
0000000000019080         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+422

                     loc_19085:
0000000000019085         mov        rdi, qword [rsp+0x98+var_48]                ; CODE XREF=sift_states_backward+119, sift_states_backward+662, sift_states_backward+681
000000000001908a         mov        dword [rsp+0x98+var_98], eax
000000000001908d         call       sub_2a10                                    ; sub_2a10
0000000000019092         mov        eax, dword [rsp+0x98+var_98]

                     loc_19095:
0000000000019095         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=sift_states_backward+761, sift_states_backward+825
000000000001909a         xor        rdx, qword [fs:0x28]
00000000000190a3         jne        loc_190bb

00000000000190a5         add        rsp, 0x68
00000000000190a9         pop        rbx
00000000000190aa         pop        rbp
00000000000190ab         pop        r12
00000000000190ad         pop        r13
00000000000190af         pop        r14
00000000000190b1         pop        r15
00000000000190b3         ret
                        ; endp

                     loc_190b4:
00000000000190b4         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+84
00000000000190b9         jmp        loc_19095

                     loc_190bb:
00000000000190bb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sift_states_backward+803
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int32_t, -184
        ;    var_BA: int8_t, -186
        ;    var_BB: int8_t, -187
        ;    var_BC: int8_t, -188
        ;    var_BD: int8_t, -189
        ;    var_BE: int8_t, -190
        ;    var_BF: int8_t, -191
        ;    var_C0: int8_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int32_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_158: int64_t, -344
        ;    var_168: -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_194: int32_t, -404
        ;    var_198: int32_t, -408
        ;    var_199: int8_t, -409
        ;    var_19A: int8_t, -410
        ;    var_1A0: int32_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1BC: int32_t, -444
        ;    var_1C0: int32_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D0: int64_t, -464
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_1F8: int64_t, -504
        ;    var_200: int64_t, -512
        ;    var_208: int64_t, -520
        ;    var_20C: int32_t, -524
        ;    var_210: int32_t, -528
        ;    var_218: int64_t, -536
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616


                     re_search_internal:
00000000000190c0         push       r15                                         ; End of unwind block (FDE at 0x26a00), Begin of unwind block (FDE at 0x26a60), CODE XREF=re_search_stub+266, rpl_regexec+88
00000000000190c2         push       r14
00000000000190c4         push       r13
00000000000190c6         push       r12
00000000000190c8         mov        r13, r9
00000000000190cb         push       rbp
00000000000190cc         push       rbx
00000000000190cd         mov        rbp, rcx
00000000000190d0         mov        ecx, 0x20
00000000000190d5         mov        r12, r8
00000000000190d8         sub        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
00000000000190df         mov        rbx, qword [rdi]
00000000000190e2         mov        rax, qword [rsp+0x268+arg_8]
00000000000190ea         mov        qword [rsp+0x268+var_220], rdi
00000000000190ef         mov        qword [rsp+0x268+var_1F0], rsi
00000000000190f4         mov        rsi, rdi
00000000000190f7         lea        rdi, qword [rsp+0x268+var_148]
00000000000190ff         mov        qword [rsp+0x268+var_1E0], rdx
0000000000019107         mov        qword [rsp+0x268+var_230], rbx
000000000001910c         mov        qword [rsp+0x268+var_1B0], rax
0000000000019114         mov        qword [rsp+0x268+var_268], rdi
0000000000019118         mov        rax, qword [fs:0x28]
0000000000019121         mov        qword [rsp+0x268+var_40], rax
0000000000019129         xor        eax, eax
000000000001912b         rep stosq  qword [rdi], rax
000000000001912e         mov        rdi, qword [rsi+0x20]
0000000000019132         mov        qword [rsp+0x268+var_B0], rbx
000000000001913a         test       rdi, rdi
000000000001913d         mov        qword [rsp+0x268+var_200], rdi
0000000000019142         je         loc_19166

0000000000019144         movzx      edx, byte [rsi+0x38]
0000000000019148         test       dl, 0x8
000000000001914b         je         loc_195e0

0000000000019151         cmp        rbp, r8
0000000000019154         je         loc_195e0

000000000001915a         and        edx, 0x1
000000000001915d         cmove      rax, rdi
0000000000019161         mov        qword [rsp+0x268+var_200], rax

                     loc_19166:
0000000000019166         mov        rax, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+130, re_search_internal+1321
000000000001916b         mov        qword [rsp+0x268+var_1D0], 0x0
0000000000019177         mov        rax, qword [rax+0x30]
000000000001917b         cmp        rax, qword [rsp+0x268+arg_0]
0000000000019183         jae        loc_191a4

0000000000019185         mov        rcx, qword [rsp+0x268+arg_0]
000000000001918d         lea        rdx, qword [rcx-1]
0000000000019191         sub        rdx, rax
0000000000019194         sub        qword [rsp+0x268+arg_0], rdx
000000000001919c         mov        qword [rsp+0x268+var_1D0], rdx

                     loc_191a4:
00000000000191a4         mov        rsi, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+195
00000000000191a9         cmp        qword [rsi+0x10], 0x0
00000000000191ae         je         loc_1a040

00000000000191b4         mov        rdi, qword [rsp+0x268+var_230]
00000000000191b9         mov        rax, qword [rdi+0x48]
00000000000191bd         test       rax, rax
00000000000191c0         je         loc_1a040

00000000000191c6         mov        rdx, qword [rdi+0x50]
00000000000191ca         test       rdx, rdx
00000000000191cd         je         loc_1a040

00000000000191d3         mov        rcx, qword [rdi+0x58]
00000000000191d7         test       rcx, rcx
00000000000191da         je         loc_1a040

00000000000191e0         cmp        qword [rdi+0x60], 0x0
00000000000191e5         je         loc_1a040

00000000000191eb         cmp        qword [rax+0x10], 0x0
00000000000191f0         jne        loc_19228

00000000000191f2         cmp        qword [rdx+0x10], 0x0
00000000000191f7         jne        loc_19228

00000000000191f9         cmp        qword [rcx+0x10], 0x0
00000000000191fe         je         loc_19206

0000000000019200         cmp        byte [rsi+0x38], 0x0
0000000000019204         js         loc_19228

                     loc_19206:
0000000000019206         test       rbp, rbp                                    ; CODE XREF=re_search_internal+318
0000000000019209         je         loc_1921c

000000000001920b         test       r12, r12
000000000001920e         mov        dword [rsp+0x268+var_20C], 0x1
0000000000019216         jne        loc_19c39

                     loc_1921c:
000000000001921c         xor        r12d, r12d                                  ; CODE XREF=re_search_internal+329
000000000001921f         xor        ebp, ebp
0000000000019221         nop        dword [rax]

                     loc_19228:
0000000000019228         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+304, re_search_internal+311, re_search_internal+324
0000000000019231         mov        dword [rsp+0x268+var_210], 0x1
0000000000019239         je         loc_195c0

                     loc_1923f:
000000000001923f         mov        r11, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+1303
0000000000019244         mov        rax, qword [rsp+0x268+var_220]
0000000000019249         mov        rdi, qword [rsp+0x268+var_1E0]
0000000000019251         mov        rsi, qword [r11+0x10]
0000000000019255         mov        rbx, qword [rax+0x28]
0000000000019259         mov        edx, dword [r11+0xb4]
0000000000019260         mov        rax, qword [rax+0x18]
0000000000019264         mov        qword [rsp+0x268+var_F0], rdi
000000000001926c         mov        qword [rsp+0x268+var_F8], rdi
0000000000019274         mov        qword [rsp+0x268+var_260], rsi
0000000000019279         lea        rsi, qword [rsi+1]
000000000001927d         mov        qword [rsp+0x268+var_1B8], rbx
0000000000019285         movsxd     rcx, edx
0000000000019288         shr        rax, 0x16
000000000001928c         mov        qword [rsp+0x268+var_D0], rbx
0000000000019294         and        eax, 0x1
0000000000019297         cmp        rsi, rcx
000000000001929a         mov        dword [rsp+0x268+var_B8], edx
00000000000192a1         cmovl      rsi, rcx
00000000000192a5         lea        rcx, qword [rdi+1]
00000000000192a9         mov        byte [rsp+0x268+var_C0], al
00000000000192b0         mov        qword [rsp+0x268+var_E0], rdi
00000000000192b8         mov        qword [rsp+0x268+var_E8], rdi
00000000000192c0         cmp        rsi, rcx
00000000000192c3         mov        rdi, qword [rsp+0x268+var_268]
00000000000192c7         cmovg      rsi, rcx
00000000000192cb         test       rbx, rbx
00000000000192ce         mov        rcx, qword [rsp+0x268+var_1F0]
00000000000192d3         setne      bl
00000000000192d6         or         eax, ebx
00000000000192d8         mov        byte [rsp+0x268+var_BD], al
00000000000192df         movzx      eax, byte [r11+0xb0]
00000000000192e7         mov        qword [rsp+0x268+var_148], rcx
00000000000192ef         mov        edx, eax
00000000000192f1         shr        al, 0x3
00000000000192f4         shr        dl, 0x2
00000000000192f7         and        eax, 0x1
00000000000192fa         and        edx, 0x1
00000000000192fd         mov        byte [rsp+0x268+var_BE], al
0000000000019304         mov        byte [rsp+0x268+var_BF], dl
000000000001930b         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000019310         test       eax, eax
0000000000019312         mov        dword [rsp+0x268+var_20C], eax
0000000000019316         jne        loc_19c10

000000000001931c         mov        rdi, qword [rsp+0x268+var_230]
0000000000019321         lea        rax, qword [rdi+0xb8]
0000000000019328         mov        qword [rsp+0x268+var_C8], rax
0000000000019330         movzx      eax, byte [rdi+0xb0]
0000000000019337         mov        byte [rsp+0x268+var_260], al
000000000001933b         shr        al, 0x4
000000000001933e         and        eax, 0x1
0000000000019341         cmp        byte [rsp+0x268+var_BD], 0x0
0000000000019349         mov        byte [rsp+0x268+var_BA], al
0000000000019350         jne        loc_19375

0000000000019352         mov        rsi, qword [rsp+0x268+var_230]
0000000000019357         mov        rax, qword [rsp+0x268+var_1F0]
000000000001935c         cmp        dword [rsi+0xb4], 0x1
0000000000019363         mov        qword [rsp+0x268+var_140], rax
000000000001936b         mov        rax, qword [rsp+0x268+var_1E0]
0000000000019373         jle        loc_19377

                     loc_19375:
0000000000019375         xor        eax, eax                                    ; CODE XREF=re_search_internal+656

                     loc_19377:
0000000000019377         mov        qword [rsp+0x268+var_118], rax              ; CODE XREF=re_search_internal+691
000000000001937f         mov        qword [rsp+0x268+var_110], rax
0000000000019387         mov        rax, qword [rsp+0x268+var_220]
000000000001938c         mov        qword [rsp+0x268+var_E0], r13
0000000000019394         mov        qword [rsp+0x268+var_E8], r13
000000000001939c         movzx      eax, byte [rax+0x38]
00000000000193a0         mov        byte [rsp+0x268+var_260], al
00000000000193a4         shr        al, 0x7
00000000000193a7         mov        byte [rsp+0x268+var_BB], al
00000000000193ae         mov        rax, qword [rsp+0x268+var_230]
00000000000193b3         mov        r14, qword [rax+0x98]
00000000000193ba         mov        eax, dword [rsp+0x268+arg_10]
00000000000193c1         mov        qword [rsp+0x268+var_A0], 0xffffffffffffffff
00000000000193cd         lea        r13, qword [r14+r14]
00000000000193d1         mov        dword [rsp+0x268+var_A8], eax
00000000000193d8         test       r13, r13
00000000000193db         jle        loc_1942f

00000000000193dd         movabs     rax, 0x666666666666666
00000000000193e7         cmp        r13, rax
00000000000193ea         jg         loc_1a130

00000000000193f0         lea        rdi, qword [r13+r14*8]
00000000000193f5         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
00000000000193f9         call       j_malloc                                    ; malloc
00000000000193fe         mov        rdi, r14
0000000000019401         mov        r15, rax
0000000000019404         mov        qword [rsp+0x268+var_70], rax
000000000001940c         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000019410         call       j_malloc                                    ; malloc
0000000000019415         test       rax, rax
0000000000019418         mov        qword [rsp+0x268+var_50], rax
0000000000019420         je         loc_1a130

0000000000019426         test       r15, r15
0000000000019429         je         loc_1a130

                     loc_1942f:
000000000001942f         cmp        qword [rsp+0x268+arg_0], 0x1                ; CODE XREF=re_search_internal+795
0000000000019438         mov        qword [rsp+0x268+var_78], r13
0000000000019440         mov        dword [rsp+0x268+var_68], 0x1
000000000001944b         mov        qword [rsp+0x268+var_58], r13
0000000000019453         jbe        loc_1a578

                     loc_19459:
0000000000019459         mov        rax, qword [rsp+0x268+var_108]              ; CODE XREF=re_search_internal+5316
0000000000019461         movabs     rdx, 0x1ffffffffffffffe
000000000001946b         cmp        rax, rdx
000000000001946e         ja         loc_1a130

0000000000019474         lea        rdi, qword [0x8+rax*8]                      ; argument "__size" for method j_malloc
000000000001947c         call       j_malloc                                    ; malloc
0000000000019481         test       rax, rax
0000000000019484         mov        rdi, rax
0000000000019487         mov        qword [rsp+0x268+var_90], rax
000000000001948f         je         loc_1a180

                     loc_19495:
0000000000019495         mov        eax, dword [rsp+0x268+arg_10]               ; CODE XREF=re_search_internal+5334
000000000001949c         mov        qword [rsp+0x268+var_190], rbp
00000000000194a4         and        eax, 0x1
00000000000194a7         cmp        eax, 0x1
00000000000194aa         sbb        eax, eax
00000000000194ac         and        eax, 0x2
00000000000194af         add        eax, 0x4
00000000000194b2         mov        dword [rsp+0x268+var_D8], eax
00000000000194b9         xor        eax, eax
00000000000194bb         cmp        rbp, r12
00000000000194be         setle      al
00000000000194c1         lea        eax, dword [rax+rax-1]
00000000000194c5         mov        dword [rsp+0x268+var_1BC], eax
00000000000194cc         mov        rax, r12
00000000000194cf         cmovle     rax, rbp
00000000000194d3         mov        qword [rsp+0x268+var_1D8], rax
00000000000194db         mov        rax, r12
00000000000194de         cmovge     rax, rbp
00000000000194e2         cmp        qword [rsp+0x268+var_200], 0x0
00000000000194e8         mov        qword [rsp+0x268+var_1F8], rax
00000000000194ed         mov        rax, qword [rsp+0x268+var_230]
00000000000194f2         mov        esi, dword [rax+0xb4]
00000000000194f8         mov        eax, 0x8
00000000000194fd         mov        dword [rsp+0x268+var_1A0], esi
0000000000019504         je         loc_1953f

0000000000019506         cmp        esi, 0x1
0000000000019509         mov        ecx, 0x4
000000000001950e         je         loc_1952e

0000000000019510         mov        rax, qword [rsp+0x268+var_220]
0000000000019515         test       byte [rax+0x1a], 0x40
0000000000019519         jne        loc_1a29e

000000000001951f         cmp        qword [rsp+0x268+var_1B8], 0x0
0000000000019528         jne        loc_1a29e

                     loc_1952e:
000000000001952e         xor        edx, edx                                    ; CODE XREF=re_search_internal+1102, re_search_internal+4576
0000000000019530         cmp        rbp, r12
0000000000019533         movzx      eax, bl
0000000000019536         setle      dl
0000000000019539         or         eax, ecx
000000000001953b         add        edx, edx
000000000001953d         or         eax, edx

                     loc_1953f:
000000000001953f         cmp        rbp, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+1092
0000000000019544         setg       cl
0000000000019547         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000001954f         setl       dl
0000000000019552         or         cl, dl
0000000000019554         jne        loc_1a029

000000000001955a         lea        rcx, qword [rsp+0x268+var_190]
0000000000019562         cmp        rbp, r12
0000000000019565         mov        edx, 0x0
000000000001956a         cmovle     rdx, rcx
000000000001956e         test       rdx, rdx
0000000000019571         mov        qword [rsp+0x268+var_1A8], rdx
0000000000019579         setne      byte [rsp+0x268+var_199]
0000000000019581         sub        eax, 0x4
0000000000019584         mov        dword [rsp+0x268+var_1C0], eax
000000000001958b         lea        rax, qword [rsp+0x268+var_198]
0000000000019593         mov        qword [rsp+0x268+var_240], rax

                     loc_19598:
0000000000019598         mov        eax, dword [rsp+0x268+var_1C0]              ; CODE XREF=re_search_internal+3939
000000000001959f         cmp        eax, 0x4
00000000000195a2         ja         loc_1a18d

00000000000195a8         lea        rcx, qword [switch_table_228e0]             ; switch_table_228e0
00000000000195af         movsxd     rax, dword [rcx+rax*4]
00000000000195b3         add        rax, rcx
00000000000195b6         jmp        rax                                         ; switch statement using table at 0x228e0, with 5 cases, 0x195ee,0x19698,0x19b12,0x19b84
00000000000195b8         align      64

                     loc_195c0:
00000000000195c0         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+377
00000000000195c5         cmp        qword [rax+0x98], 0x0
00000000000195cd         setne      al
00000000000195d0         movzx      eax, al
00000000000195d3         mov        dword [rsp+0x268+var_210], eax
00000000000195d7         jmp        loc_1923f
00000000000195dc         align      32

                     loc_195e0:
00000000000195e0         mov        qword [rsp+0x268+var_200], 0x0              ; CODE XREF=re_search_internal+139, re_search_internal+148
00000000000195e9         jmp        loc_19166

                     loc_195ee:
00000000000195ee         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 2, CODE XREF=re_search_internal+1270
00000000000195f3         jle        loc_1964f

00000000000195f5         mov        rax, qword [rsp+0x268+var_1F0]
00000000000195fa         mov        rdi, qword [rsp+0x268+var_200]
00000000000195ff         movzx      edx, byte [rax+rbp]
0000000000019603         lea        rax, qword [rbp+1]
0000000000019607         cmp        byte [rdi+rdx], 0x0
000000000001960b         jne        loc_19698

0000000000019611         mov        rsi, qword [rsp+0x268+var_200]
0000000000019616         mov        rcx, qword [rsp+0x268+var_1F8]
000000000001961b         mov        rdi, qword [rsp+0x268+var_1F0]
0000000000019620         jmp        loc_1963a
0000000000019622         align      8

                     loc_19628:
0000000000019628         movzx      edx, byte [rdi+rax]                         ; CODE XREF=re_search_internal+1408
000000000001962c         lea        rax, qword [rax+1]
0000000000019630         cmp        byte [rsi+rdx], 0x0
0000000000019634         jne        loc_1a7d1

                     loc_1963a:
000000000001963a         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+1376
000000000001963d         mov        rbp, rax
0000000000019640         jne        loc_19628

                     loc_19642:
0000000000019642         mov        rax, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+2751
0000000000019647         mov        qword [rsp+0x268+var_190], rax

                     loc_1964f:
000000000001964f         cmp        qword [rsp+0x268+var_1F8], rbp              ; CODE XREF=re_search_internal+1331, re_search_internal+2647
0000000000019654         jne        loc_19698

0000000000019656         xor        eax, eax
0000000000019658         mov        rsi, qword [rsp+0x268+var_1F8]
000000000001965d         cmp        qword [rsp+0x268+var_1E0], rsi
0000000000019665         jle        loc_19670

0000000000019667         mov        rax, qword [rsp+0x268+var_1F0]
000000000001966c         movzx      eax, byte [rax+rsi]

                     loc_19670:
0000000000019670         mov        rsi, qword [rsp+0x268+var_1B8]              ; CODE XREF=re_search_internal+1445
0000000000019678         test       rsi, rsi
000000000001967b         je         loc_19681

000000000001967d         movzx      eax, byte [rsi+rax]

                     loc_19681:
0000000000019681         mov        rdi, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1467
0000000000019686         cmp        byte [rdi+rax], 0x0
000000000001968a         je         loc_1a029

0000000000019690         mov        rbp, qword [rsp+0x268+var_1F8]
0000000000019695         nop        dword [rax]

                     loc_19698:
0000000000019698         mov        edx, dword [rsp+0x268+arg_10]               ; case 4, CODE XREF=re_search_internal+1270, re_search_internal+1355, re_search_internal+1428, re_search_internal+2687, re_search_internal+2863, re_search_internal+2880, re_search_internal+4370, re_search_internal+5913
000000000001969f         mov        rdi, qword [rsp+0x268+var_268]
00000000000196a3         mov        rsi, rbp
00000000000196a6         call       re_string_reconstruct                       ; re_string_reconstruct
00000000000196ab         test       eax, eax
00000000000196ad         mov        dword [rsp+0x268+var_20C], eax
00000000000196b1         jne        loc_19c10

00000000000196b7         cmp        dword [rsp+0x268+var_1A0], 0x1
00000000000196bf         je         loc_196dd

00000000000196c1         cmp        qword [rsp+0x268+var_118], 0x0
00000000000196ca         je         loc_196dd

00000000000196cc         mov        rax, qword [rsp+0x268+var_138]
00000000000196d4         cmp        dword [rax], 0xffffffff
00000000000196d7         je         loc_1a001

                     loc_196dd:
00000000000196dd         mov        rbx, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+1535, re_search_internal+1546
00000000000196e5         movzx      eax, byte [rsp+0x268+var_210]
00000000000196ea         mov        dword [rsp+0x268+var_68], 0x0
00000000000196f5         mov        qword [rsp+0x268+var_80], 0x0
0000000000019701         mov        qword [rsp+0x268+var_88], 0x0
000000000001970d         mov        dword [rsp+0x268+var_198], 0x0
0000000000019718         mov        r14, qword [rbx+0x48]
000000000001971c         and        eax, 0x1
000000000001971f         mov        byte [rsp+0x268+var_19A], al
0000000000019726         mov        rax, qword [rsp+0x268+var_100]
000000000001972e         cmp        byte [r14+0x68], 0x0
0000000000019733         mov        qword [rsp+0x268+var_260], rax
0000000000019738         js         loc_1a0b0

                     loc_1973e:
000000000001973e         mov        rax, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4115, re_search_internal+4471, re_search_internal+5698
0000000000019746         test       rax, rax
0000000000019749         je         loc_19762

000000000001974b         cmp        qword [rbx+0x98], 0x0
0000000000019753         mov        rdi, qword [rsp+0x268+var_260]
0000000000019758         mov        qword [rax+rdi*8], r14
000000000001975c         jne        loc_1a64b

                     loc_19762:
0000000000019762         movzx      eax, byte [rsp+0x268+var_199]               ; CODE XREF=re_search_internal+1673
000000000001976a         mov        byte [rsp+0x268+var_250], al
000000000001976e         movzx      eax, byte [r14+0x68]

                     loc_19773:
0000000000019773         test       al, 0x10                                    ; CODE XREF=re_search_internal+5569
0000000000019775         mov        qword [rsp+0x268+var_248], 0xffffffffffffffff
000000000001977e         mov        qword [rsp+0x268+var_238], 0x0
0000000000019787         jne        loc_1a610

                     loc_1978d:
000000000001978d         mov        rax, qword [rsp+0x268+var_1A8]              ; CODE XREF=re_search_internal+5494, re_search_internal+5604
0000000000019795         mov        r8, qword [rsp+0x268+var_100]
000000000001979d         mov        qword [rsp+0x268+var_218], rax
00000000000197a2         lea        rax, qword [rsp+0x268+var_188]
00000000000197aa         mov        qword [rsp+0x268+var_208], rax
00000000000197af         lea        rax, qword [rsp+0x268+var_194]
00000000000197b7         mov        qword [rsp+0x268+var_1E8], rax
00000000000197bf         jmp        loc_1981c
00000000000197c1         align      8

                     loc_197c8:
00000000000197c8         cmp        r14, r13                                    ; CODE XREF=re_search_internal+2023, re_search_internal+5395, re_search_internal+5411
00000000000197cb         mov        r8, qword [rsp+0x268+var_100]
00000000000197d3         sete       al
00000000000197d6         and        byte [rsp+0x268+var_250], al
00000000000197da         movzx      eax, byte [r13+0x68]
00000000000197df         cmove      rbx, qword [rsp+0x268+var_260]
00000000000197e5         test       al, 0x10
00000000000197e7         mov        qword [rsp+0x268+var_260], rbx
00000000000197ec         je         loc_19819

00000000000197ee         test       al, al
00000000000197f0         js         loc_19cb0

                     loc_197f6:
00000000000197f6         mov        eax, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+3095
00000000000197fa         mov        qword [rsp+0x268+var_248], r8
00000000000197ff         test       eax, eax
0000000000019801         je         loc_19926

0000000000019807         mov        qword [rsp+0x268+var_238], 0x1
0000000000019810         mov        qword [rsp+0x268+var_218], 0x0

                     loc_19819:
0000000000019819         mov        r14, r13                                    ; CODE XREF=re_search_internal+1836, re_search_internal+3089

                     loc_1981c:
000000000001981c         cmp        qword [rsp+0x268+var_E0], r8                ; CODE XREF=re_search_internal+1791
0000000000019824         jle        loc_19914

000000000001982a         mov        rax, qword [rsp+0x268+var_108]
0000000000019832         lea        rbx, qword [r8+1]
0000000000019836         cmp        rbx, rax
0000000000019839         jge        loc_19ce0

                     loc_1983f:
000000000001983f         mov        rax, qword [rsp+0x268+var_118]              ; CODE XREF=re_search_internal+3112
0000000000019847         cmp        rbx, rax
000000000001984a         jge        loc_19fd0

                     loc_19850:
0000000000019850         test       byte [r14+0x68], 0x20                       ; CODE XREF=re_search_internal+3864
0000000000019855         jne        loc_19d20

                     loc_1985b:
000000000001985b         lea        rax, qword [r8+1]                           ; CODE XREF=re_search_internal+3158, re_search_internal+4006
000000000001985f         mov        qword [rsp+0x268+var_100], rax
0000000000019867         mov        rax, qword [rsp+0x268+var_140]
000000000001986f         movzx      r13d, byte [rax+r8]

                     loc_19874:
0000000000019874         mov        rax, qword [r14+0x58]                       ; CODE XREF=re_search_internal+4247
0000000000019878         test       rax, rax
000000000001987b         je         loc_19f90

0000000000019881         mov        r13, qword [rax+r13*8]

                     loc_19885:
0000000000019885         cmp        qword [rsp+0x268+var_90], 0x0               ; CODE XREF=re_search_internal+3849, re_search_internal+4021
000000000001988e         je         loc_198a4

                     loc_19890:
0000000000019890         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+4067
0000000000019894         mov        rdi, qword [rsp+0x268+var_240]
0000000000019899         mov        rdx, r13
000000000001989c         call       merge_state_with_log                        ; merge_state_with_log
00000000000198a1         mov        r13, rax

                     loc_198a4:
00000000000198a4         test       r13, r13                                    ; CODE XREF=re_search_internal+1998
00000000000198a7         jne        loc_197c8

00000000000198ad         mov        ecx, dword [rsp+0x268+var_198]
00000000000198b4         mov        rdi, qword [rsp+0x268+var_90]
00000000000198bc         test       ecx, ecx
00000000000198be         jne        loc_1a180

00000000000198c4         test       rdi, rdi
00000000000198c7         je         loc_19914

00000000000198c9         movzx      eax, byte [rsp+0x268+var_19A]
00000000000198d1         xor        eax, 0x1
00000000000198d4         test       byte [rsp+0x268+var_238], al
00000000000198d8         jne        loc_19914

                     loc_198da:
00000000000198da         mov        rsi, qword [rsp+0x268+var_88]               ; CODE XREF=re_search_internal+3048
00000000000198e2         mov        rax, qword [rsp+0x268+var_100]
00000000000198ea         xor        ecx, ecx
00000000000198ec         jmp        loc_19903
00000000000198ee         align      16

                     loc_198f0:
00000000000198f0         cmp        qword [rdi+rdx*8], 0x0                      ; CODE XREF=re_search_internal+2122
00000000000198f5         mov        rax, rdx
00000000000198f8         mov        ecx, 0x1
00000000000198fd         jne        loc_19c70

                     loc_19903:
0000000000019903         lea        rdx, qword [rax+1]                          ; CODE XREF=re_search_internal+2092
0000000000019907         cmp        rsi, rdx
000000000001990a         jge        loc_198f0

000000000001990c         test       cl, cl
000000000001990e         jne        loc_1a7de

                     loc_19914:
0000000000019914         mov        rax, qword [rsp+0x268+var_218]              ; CODE XREF=re_search_internal+1892, re_search_internal+2055, re_search_internal+2072, re_search_internal+5401, re_search_internal+5926
0000000000019919         test       rax, rax
000000000001991c         je         loc_19926

000000000001991e         mov        rdi, qword [rsp+0x268+var_260]
0000000000019923         add        qword [rax], rdi

                     loc_19926:
0000000000019926         mov        rax, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+1857, re_search_internal+2140, re_search_internal+5479, re_search_internal+5631
000000000001992b         cmp        rax, 0xffffffffffffffff
000000000001992f         je         loc_19ff0

0000000000019935         cmp        rax, 0xfffffffffffffffe
0000000000019939         je         loc_1a130

000000000001993f         mov        rax, qword [rsp+0x268+var_248]
0000000000019944         mov        qword [rsp+0x268+var_A0], rax
000000000001994c         mov        rax, qword [rsp+0x268+var_220]
0000000000019951         test       byte [rax+0x38], 0x10
0000000000019955         jne        loc_1a110

000000000001995b         cmp        qword [rsp+0x268+arg_0], 0x1
0000000000019964         jbe        loc_1a25c

000000000001996a         mov        rcx, qword [rsp+0x268+var_248]
000000000001996f         mov        rbx, qword [rsp+0x268+var_90]
0000000000019977         mov        rdi, qword [rsp+0x268+var_268]
000000000001997b         mov        rax, qword [rbx+rcx*8]
000000000001997f         mov        rsi, qword [rax+0x10]
0000000000019983         lea        rdx, qword [rax+0x18]
0000000000019987         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000001998c         mov        r13, rax
000000000001998f         mov        qword [rsp+0x268+var_98], rax
0000000000019997         mov        rax, qword [rsp+0x268+var_230]
000000000001999c         test       byte [rax+0xb0], 0x1
00000000000199a3         jne        loc_199c0

00000000000199a5         mov        rax, qword [rsp+0x268+var_230]
00000000000199aa         cmp        qword [rax+0x98], 0x0
00000000000199b2         je         loc_1a34c

                     loc_199b8:
00000000000199b8         mov        r13, qword [rsp+0x268+var_98]               ; CODE XREF=re_search_internal+4569

                     loc_199c0:
00000000000199c0         movabs     rsi, 0x1ffffffffffffffe                     ; CODE XREF=re_search_internal+2275
00000000000199ca         cmp        qword [rsp+0x268+var_248], rsi
00000000000199cf         mov        r15, qword [rsp+0x268+var_B0]
00000000000199d7         ja         loc_1a63b

00000000000199dd         mov        rax, qword [rsp+0x268+var_248]
00000000000199e2         add        rax, 0x1
00000000000199e6         lea        rbx, qword [rax*8]
00000000000199ee         mov        qword [rsp+0x268+var_260], rax
00000000000199f3         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
00000000000199f6         call       j_malloc                                    ; malloc
00000000000199fb         test       rax, rax
00000000000199fe         mov        r12, rax
0000000000019a01         je         loc_1a130

0000000000019a07         cmp        qword [r15+0x98], 0x0
0000000000019a0f         je         loc_1a2a5

0000000000019a15         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
0000000000019a18         call       j_malloc                                    ; malloc
0000000000019a1d         test       rax, rax
0000000000019a20         mov        rbp, rax
0000000000019a23         je         loc_1a128

0000000000019a29         mov        r14, qword [rsp+0x268+var_248]
0000000000019a2e         lea        rbx, qword [rsp+0x268+var_188]
0000000000019a36         mov        qword [rsp+0x268+var_258], r15
0000000000019a3b         mov        qword [rsp+0x268+var_250], rax

                     loc_19a40:
0000000000019a40         mov        rax, qword [rsp+0x268+var_260]              ; CODE XREF=re_search_internal+2637
0000000000019a45         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000019a47         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000019a4a         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memset
0000000000019a52         call       j_memset                                    ; memset
0000000000019a57         pxor       xmm0, xmm0
0000000000019a5b         mov        qword [rsp+0x268+var_188], r12
0000000000019a63         mov        qword [rsp+0x268+var_180], rbp
0000000000019a6b         mov        qword [rsp+0x268+var_178], r13
0000000000019a73         mov        rsi, rbx
0000000000019a76         mov        qword [rsp+0x268+var_170], r14
0000000000019a7e         mov        rdi, qword [rsp+0x268+var_268]
0000000000019a82         movaps     xmmword [rbx+0x20], xmm0
0000000000019a86         mov        qword [rbx+0x30], 0x0
0000000000019a8e         call       sift_states_backward                        ; sift_states_backward
0000000000019a93         mov        rdi, qword [rsp+0x268+var_158]
0000000000019a9b         mov        r15d, eax
0000000000019a9e         call       sub_2a10                                    ; sub_2a10
0000000000019aa3         test       r15d, r15d
0000000000019aa6         jne        loc_1a6c4

0000000000019aac         cmp        qword [r12], 0x0
0000000000019ab1         jne        loc_1a723

0000000000019ab7         cmp        qword [rbp], 0x0
0000000000019abc         jne        loc_1a723

0000000000019ac2         mov        rdx, qword [rsp+0x268+var_90]
0000000000019aca         nop        word [rax+rax]

                     loc_19ad0:
0000000000019ad0         sub        r14, 0x1                                    ; CODE XREF=re_search_internal+2597, re_search_internal+2603
0000000000019ad4         cmp        r14, 0xffffffffffffffff
0000000000019ad8         je         loc_1a59b

0000000000019ade         mov        rax, qword [rdx+r14*8]
0000000000019ae2         test       rax, rax
0000000000019ae5         je         loc_19ad0

0000000000019ae7         test       byte [rax+0x68], 0x10
0000000000019aeb         je         loc_19ad0

0000000000019aed         mov        rsi, qword [rax+0x10]
0000000000019af1         mov        rdi, qword [rsp+0x268+var_268]
0000000000019af5         lea        rdx, qword [rax+0x18]
0000000000019af9         mov        rcx, r14
0000000000019afc         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000019b01         mov        r13, rax
0000000000019b04         lea        rax, qword [r14+1]
0000000000019b08         mov        qword [rsp+0x268+var_260], rax
0000000000019b0d         jmp        loc_19a40

                     loc_19b12:
0000000000019b12         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 3, CODE XREF=re_search_internal+1270
0000000000019b17         jle        loc_1964f

0000000000019b1d         mov        rax, qword [rsp+0x268+var_1F0]
0000000000019b22         mov        rdi, qword [rsp+0x268+var_1B8]
0000000000019b2a         mov        rsi, qword [rsp+0x268+var_200]
0000000000019b2f         movzx      eax, byte [rax+rbp]
0000000000019b33         movzx      edx, byte [rdi+rax]
0000000000019b37         lea        rax, qword [rbp+1]
0000000000019b3b         cmp        byte [rsi+rdx], 0x0
0000000000019b3f         jne        loc_19698

0000000000019b45         mov        rsi, qword [rsp+0x268+var_200]
0000000000019b4a         mov        rdi, qword [rsp+0x268+var_1B8]
0000000000019b52         mov        rcx, qword [rsp+0x268+var_1F8]
0000000000019b57         mov        r8, qword [rsp+0x268+var_1F0]
0000000000019b5c         jmp        loc_19b77
0000000000019b5e         align      32

                     loc_19b60:
0000000000019b60         movzx      eax, byte [r8+rax]                          ; CODE XREF=re_search_internal+2749
0000000000019b65         movzx      edx, byte [rdi+rax]
0000000000019b69         lea        rax, qword [rbp+1]
0000000000019b6d         cmp        byte [rsi+rdx], 0x0
0000000000019b71         jne        loc_1a7d1

                     loc_19b77:
0000000000019b77         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+2716
0000000000019b7a         mov        rbp, rax
0000000000019b7d         jne        loc_19b60

0000000000019b7f         jmp        loc_19642

                     loc_19b84:
0000000000019b84         cmp        qword [rsp+0x268+var_1D8], rbp              ; case 1, CODE XREF=re_search_internal+1270
0000000000019b8c         jg         loc_1a029

0000000000019b92         xor        ecx, ecx
0000000000019b94         mov        rax, rbp
0000000000019b97         mov        rdi, qword [rsp+0x268+var_200]
0000000000019b9c         mov        rsi, qword [rsp+0x268+var_1B8]
0000000000019ba4         mov        r9, qword [rsp+0x268+var_1D8]
0000000000019bac         mov        r10, qword [rsp+0x268+var_1F0]
0000000000019bb1         mov        r8, qword [rsp+0x268+var_1E0]
0000000000019bb9         jmp        loc_19bd2
0000000000019bbb         align      64

                     loc_19bc0:
0000000000019bc0         sub        rax, 0x1                                    ; CODE XREF=re_search_internal+2859
0000000000019bc4         mov        ecx, 0x1
0000000000019bc9         cmp        rax, r9
0000000000019bcc         jl         loc_1a5b0

                     loc_19bd2:
0000000000019bd2         xor        edx, edx                                    ; CODE XREF=re_search_internal+2809
0000000000019bd4         cmp        r8, rax
0000000000019bd7         jle        loc_19bde

0000000000019bd9         movzx      edx, byte [r10+rax]

                     loc_19bde:
0000000000019bde         test       rsi, rsi                                    ; CODE XREF=re_search_internal+2839
0000000000019be1         je         loc_19be7

0000000000019be3         movzx      edx, byte [rsi+rdx]

                     loc_19be7:
0000000000019be7         cmp        byte [rdi+rdx], 0x0                         ; CODE XREF=re_search_internal+2849
0000000000019beb         je         loc_19bc0

0000000000019bed         test       cl, cl
0000000000019bef         je         loc_19698

0000000000019bf5         mov        qword [rsp+0x268+var_190], rax
0000000000019bfd         mov        rbp, rax
0000000000019c00         jmp        loc_19698
0000000000019c05         align      8

                     loc_19c08:
0000000000019c08         mov        dword [rsp+0x268+var_20C], eax              ; CODE XREF=re_search_internal+4450
0000000000019c0c         nop        dword [rax]

                     loc_19c10:
0000000000019c10         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+598, re_search_internal+1521, re_search_internal+4135, re_search_internal+4757

                     loc_19c18:
0000000000019c18         call       sub_2a10                                    ; sub_2a10, CODE XREF=re_search_internal+3961, re_search_internal+4224, re_search_internal+4296, re_search_internal+5164, re_search_internal+5250, re_search_internal+5384, re_search_internal+5510, re_search_internal+5689
0000000000019c1d         mov        rax, qword [rsp+0x268+var_230]
0000000000019c22         cmp        qword [rax+0x98], 0x0
0000000000019c2a         jne        loc_1a550

                     loc_19c30:
0000000000019c30         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5299
0000000000019c34         call       re_string_destruct                          ; re_string_destruct

                     loc_19c39:
0000000000019c39         mov        rsi, qword [rsp+0x268+var_40]               ; CODE XREF=re_search_internal+342, re_search_internal+3976
0000000000019c41         xor        rsi, qword [fs:0x28]
0000000000019c4a         mov        eax, dword [rsp+0x268+var_20C]
0000000000019c4e         jne        loc_1a7eb

0000000000019c54         add        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
0000000000019c5b         pop        rbx
0000000000019c5c         pop        rbp
0000000000019c5d         pop        r12
0000000000019c5f         pop        r13
0000000000019c61         pop        r14
0000000000019c63         pop        r15
0000000000019c65         ret
                        ; endp
0000000000019c66         align      16

                     loc_19c70:
0000000000019c70         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2109
0000000000019c74         mov        rdi, qword [rsp+0x268+var_240]
0000000000019c79         mov        qword [rsp+0x268+var_100], rdx
0000000000019c81         xor        edx, edx
0000000000019c83         call       merge_state_with_log                        ; merge_state_with_log
0000000000019c88         mov        edx, dword [rsp+0x268+var_198]
0000000000019c8f         test       edx, edx
0000000000019c91         jne        loc_1a5cd

0000000000019c97         test       rax, rax
0000000000019c9a         jne        loc_1a5e0

0000000000019ca0         mov        rdi, qword [rsp+0x268+var_90]
0000000000019ca8         jmp        loc_198da
0000000000019cad         align      16

                     loc_19cb0:
0000000000019cb0         mov        rsi, qword [r13+0x10]                       ; CODE XREF=re_search_internal+1840
0000000000019cb4         mov        rdi, qword [rsp+0x268+var_268]
0000000000019cb8         lea        rdx, qword [r13+0x18]
0000000000019cbc         mov        rcx, r8
0000000000019cbf         mov        qword [rsp+0x268+var_258], r8
0000000000019cc4         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000019cc9         test       rax, rax
0000000000019ccc         mov        r8, qword [rsp+0x268+var_258]
0000000000019cd1         je         loc_19819

0000000000019cd7         jmp        loc_197f6
0000000000019cdc         align      32

                     loc_19ce0:
0000000000019ce0         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1913
0000000000019ce8         jge        loc_1983f

                     loc_19cee:
0000000000019cee         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3870
0000000000019cf2         lea        esi, dword [rbx+1]
0000000000019cf5         call       extend_buffers                              ; extend_buffers
0000000000019cfa         test       eax, eax
0000000000019cfc         mov        dword [rsp+0x268+var_198], eax
0000000000019d03         jne        loc_1a5e8

0000000000019d09         test       byte [r14+0x68], 0x20
0000000000019d0e         mov        r8, qword [rsp+0x268+var_100]
0000000000019d16         je         loc_1985b

0000000000019d1c         nop        dword [rax]

                     loc_19d20:
0000000000019d20         cmp        qword [r14+0x10], 0x0                       ; CODE XREF=re_search_internal+1941
0000000000019d25         mov        r13, qword [rsp+0x268+var_B0]
0000000000019d2d         jle        loc_1a05b

0000000000019d33         lea        rax, qword [r13+0xd8]
0000000000019d3a         xor        r12d, r12d
0000000000019d3d         mov        qword [rsp+0x268+var_1C8], rbx
0000000000019d45         mov        rbx, r12
0000000000019d48         mov        r12, r8
0000000000019d4b         mov        qword [rsp+0x268+var_228], rax
0000000000019d50         jmp        loc_19ea8
0000000000019d55         align      8

                     loc_19d58:
0000000000019d58         test       al, 0x1                                     ; CODE XREF=re_search_internal+3643
0000000000019d5a         je         loc_19e9a

0000000000019d60         and        ecx, 0x8
0000000000019d63         jne        loc_19e9a

                     loc_19d69:
0000000000019d69         test       dl, 0x20                                    ; CODE XREF=re_search_internal+3652, re_search_internal+3660
0000000000019d6c         je         loc_19d76

0000000000019d6e         test       al, 0x2
0000000000019d70         je         loc_19e9a

                     loc_19d76:
0000000000019d76         and        edx, 0x80                                   ; CODE XREF=re_search_internal+3244
0000000000019d7c         je         loc_19d90

0000000000019d7e         test       al, 0x8
0000000000019d80         je         loc_19e9a

0000000000019d86         nop        word [cs:rax+rax]

                     loc_19d90:
0000000000019d90         mov        rcx, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3260, re_search_internal+3601
0000000000019d94         mov        rsi, qword [rsp+0x268+var_228]
0000000000019d99         mov        r8, r12
0000000000019d9c         mov        rdx, r15
0000000000019d9f         mov        rdi, rbp
0000000000019da2         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
0000000000019da7         test       eax, eax
0000000000019da9         je         loc_19e92

0000000000019daf         movsxd     rbp, eax
0000000000019db2         add        rbp, qword [rsp+0x268+var_100]
0000000000019dba         cmp        dword [rsp+0x268+var_68], eax
0000000000019dc1         cmovge     eax, dword [rsp+0x268+var_68]
0000000000019dc9         mov        rdi, qword [rsp+0x268+var_268]
0000000000019dcd         mov        rsi, rbp
0000000000019dd0         mov        dword [rsp+0x268+var_68], eax
0000000000019dd7         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
0000000000019ddc         test       eax, eax
0000000000019dde         mov        dword [rsp+0x268+var_194], eax
0000000000019de5         jne        loc_1a080

0000000000019deb         mov        rax, qword [r13+0x18]
0000000000019def         lea        r12, qword [rbp*8]
0000000000019df7         mov        rax, qword [rax+r15*8]
0000000000019dfb         mov        r15, qword [rsp+0x268+var_90]
0000000000019e03         lea        rdx, qword [rax+rax*2]
0000000000019e07         mov        rax, qword [r13+0x30]
0000000000019e0b         add        r15, r12
0000000000019e0e         lea        rdx, qword [rax+rdx*8]
0000000000019e12         mov        rax, qword [r15]
0000000000019e15         test       rax, rax
0000000000019e18         je         loc_19f18

0000000000019e1e         mov        rsi, qword [rax+0x50]
0000000000019e22         mov        rdi, qword [rsp+0x268+var_208]
0000000000019e27         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000019e2c         test       eax, eax
0000000000019e2e         mov        dword [rsp+0x268+var_194], eax
0000000000019e35         jne        loc_1a080

0000000000019e3b         mov        edx, dword [rsp+0x268+var_A8]
0000000000019e42         mov        rdi, qword [rsp+0x268+var_268]
0000000000019e46         lea        rsi, qword [rbp-1]
0000000000019e4a         call       re_string_context_at                        ; re_string_context_at
0000000000019e4f         mov        rdx, qword [rsp+0x268+var_208]
0000000000019e54         mov        rdi, qword [rsp+0x268+var_1E8]
0000000000019e5c         mov        ecx, eax
0000000000019e5e         add        r12, qword [rsp+0x268+var_90]
0000000000019e66         mov        rsi, r13
0000000000019e69         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000019e6e         mov        rdi, qword [rsp+0x268+var_178]
0000000000019e76         mov        qword [r12], rax
0000000000019e7a         call       sub_2a10                                    ; sub_2a10
0000000000019e7f         mov        rdi, qword [rsp+0x268+var_90]
0000000000019e87         cmp        qword [rdi+rbp*8], 0x0
0000000000019e8c         je         loc_19f71

                     loc_19e92:
0000000000019e92         mov        r12, qword [rsp+0x268+var_100]              ; CODE XREF=re_search_internal+3305, re_search_internal+3755, re_search_internal+3770

                     loc_19e9a:
0000000000019e9a         add        rbx, 0x1                                    ; CODE XREF=re_search_internal+3226, re_search_internal+3235, re_search_internal+3248, re_search_internal+3264, re_search_internal+3586, re_search_internal+3666
0000000000019e9e         cmp        rbx, qword [r14+0x10]
0000000000019ea2         jge        loc_1a050

                     loc_19ea8:
0000000000019ea8         mov        rax, qword [r14+0x18]                       ; CODE XREF=re_search_internal+3216
0000000000019eac         mov        rbp, qword [r13]
0000000000019eb0         mov        r15, qword [rax+rbx*8]
0000000000019eb4         mov        rax, r15
0000000000019eb7         shl        rax, 0x4
0000000000019ebb         add        rax, rbp
0000000000019ebe         test       byte [rax+0xa], 0x10
0000000000019ec2         je         loc_19e9a

0000000000019ec4         mov        ecx, dword [rax+8]
0000000000019ec7         test       ecx, 0x3ff00
0000000000019ecd         mov        dword [rsp+0x268+var_258], ecx
0000000000019ed1         je         loc_19d90

0000000000019ed7         mov        edx, dword [rsp+0x268+var_A8]
0000000000019ede         mov        rdi, qword [rsp+0x268+var_268]
0000000000019ee2         mov        rsi, r12
0000000000019ee5         call       re_string_context_at                        ; re_string_context_at
0000000000019eea         mov        ecx, dword [rsp+0x268+var_258]
0000000000019eee         shr        ecx, 0x8
0000000000019ef1         mov        edx, ecx
0000000000019ef3         and        dx, 0x3ff
0000000000019ef8         test       cl, 0x4
0000000000019efb         jne        loc_19d58

0000000000019f01         and        ecx, 0x8
0000000000019f04         je         loc_19d69

0000000000019f0a         test       al, 0x1
0000000000019f0c         je         loc_19d69

0000000000019f12         jmp        loc_19e9a
0000000000019f14         align      8

                     loc_19f18:
0000000000019f18         movdqu     xmm0, xmmword [rdx]                         ; CODE XREF=re_search_internal+3416
0000000000019f1c         lea        rsi, qword [rbp-1]
0000000000019f20         mov        rdi, qword [rsp+0x268+var_268]
0000000000019f24         movaps     xmmword [rsp+0x268+var_188], xmm0
0000000000019f2c         mov        rax, qword [rdx+0x10]
0000000000019f30         mov        edx, dword [rsp+0x268+var_A8]
0000000000019f37         mov        qword [rsp+0x268+var_178], rax
0000000000019f3f         call       re_string_context_at                        ; re_string_context_at
0000000000019f44         mov        rdi, qword [rsp+0x268+var_1E8]
0000000000019f4c         mov        rdx, qword [rsp+0x268+var_208]
0000000000019f51         mov        ecx, eax
0000000000019f53         mov        rsi, r13
0000000000019f56         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000019f5b         mov        rdi, qword [rsp+0x268+var_90]
0000000000019f63         mov        qword [r15], rax
0000000000019f66         cmp        qword [rdi+rbp*8], 0x0
0000000000019f6b         jne        loc_19e92

                     loc_19f71:
0000000000019f71         mov        eax, dword [rsp+0x268+var_194]              ; CODE XREF=re_search_internal+3532
0000000000019f78         test       eax, eax
0000000000019f7a         je         loc_19e92

0000000000019f80         mov        rbx, qword [rsp+0x268+var_1C8]
0000000000019f88         jmp        loc_1a090
0000000000019f8d         align      16

                     loc_19f90:
0000000000019f90         mov        rbp, qword [r14+0x60]                       ; CODE XREF=re_search_internal+1979
0000000000019f94         test       rbp, rbp
0000000000019f97         je         loc_1a145

0000000000019f9d         mov        rax, qword [rsp+0x268+var_100]
0000000000019fa5         mov        edx, dword [rsp+0x268+var_A8]
0000000000019fac         mov        rdi, qword [rsp+0x268+var_268]
0000000000019fb0         lea        rsi, qword [rax-1]
0000000000019fb4         call       re_string_context_at                        ; re_string_context_at
0000000000019fb9         test       al, 0x1
0000000000019fbb         je         loc_1a070

0000000000019fc1         mov        r13, qword [rbp+r13*8+0x800]
0000000000019fc9         jmp        loc_19885
0000000000019fce         align      16

                     loc_19fd0:
0000000000019fd0         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1930
0000000000019fd8         jge        loc_19850

0000000000019fde         jmp        loc_19cee

                     loc_19fe3:
0000000000019fe3         mov        rdi, r12                                    ; CODE XREF=re_search_internal+4700
0000000000019fe6         call       sub_2a10                                    ; sub_2a10
0000000000019feb         nop        dword [rax+rax]

                     loc_19ff0:
0000000000019ff0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2159, re_search_internal+5355, re_search_internal+5671
0000000000019ff4         call       match_ctx_clean                             ; match_ctx_clean
0000000000019ff9         mov        rbp, qword [rsp+0x268+var_190]

                     loc_1a001:
000000000001a001         movsxd     rax, dword [rsp+0x268+var_1BC]              ; CODE XREF=re_search_internal+1559
000000000001a009         add        rbp, rax
000000000001a00c         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000001a014         mov        qword [rsp+0x268+var_190], rbp
000000000001a01c         jl         loc_1a029

000000000001a01e         cmp        rbp, qword [rsp+0x268+var_1F8]
000000000001a023         jle        loc_19598

                     loc_1a029:
000000000001a029         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+1172, re_search_internal+1482, re_search_internal+2764, re_search_internal+3932, re_search_internal+4393, re_search_internal+4402
000000000001a031         mov        dword [rsp+0x268+var_20C], 0x1
000000000001a039         jmp        loc_19c18
000000000001a03e         align      64

                     loc_1a040:
000000000001a040         mov        dword [rsp+0x268+var_20C], 0x1              ; CODE XREF=re_search_internal+238, re_search_internal+256, re_search_internal+269, re_search_internal+282, re_search_internal+293
000000000001a048         jmp        loc_19c39
000000000001a04d         align      16

                     loc_1a050:
000000000001a050         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3554
000000000001a058         mov        r8, r12

                     loc_1a05b:
000000000001a05b         mov        dword [rsp+0x268+var_198], 0x0              ; CODE XREF=re_search_internal+3181
000000000001a066         jmp        loc_1985b
000000000001a06b         align      16

                     loc_1a070:
000000000001a070         mov        r13, qword [rbp+r13*8]                      ; CODE XREF=re_search_internal+3835
000000000001a075         jmp        loc_19885
000000000001a07a         align      128

                     loc_1a080:
000000000001a080         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3365, re_search_internal+3445
000000000001a088         mov        rdi, qword [rsp+0x268+var_90]

                     loc_1a090:
000000000001a090         test       rdi, rdi                                    ; CODE XREF=re_search_internal+3784
000000000001a093         mov        dword [rsp+0x268+var_198], eax
000000000001a09a         je         loc_1a180

                     loc_1a0a0:
000000000001a0a0         xor        r13d, r13d                                  ; CODE XREF=re_search_internal+4275
000000000001a0a3         jmp        loc_19890
000000000001a0a8         align      16

                     loc_1a0b0:
000000000001a0b0         mov        edx, dword [rsp+0x268+var_A8]               ; CODE XREF=re_search_internal+1656
000000000001a0b7         mov        rdi, qword [rsp+0x268+var_268]
000000000001a0bb         lea        rsi, qword [rax-1]
000000000001a0bf         call       re_string_context_at                        ; re_string_context_at
000000000001a0c4         test       al, 0x1
000000000001a0c6         je         loc_1a235

000000000001a0cc         mov        r14, qword [rbx+0x50]

                     loc_1a0d0:
000000000001a0d0         test       r14, r14                                    ; CODE XREF=re_search_internal+4503, re_search_internal+5619, re_search_internal+5726
000000000001a0d3         jne        loc_1973e

000000000001a0d9         mov        eax, dword [rsp+0x268+var_198]
000000000001a0e0         cmp        eax, 0xc
000000000001a0e3         mov        dword [rsp+0x268+var_20C], eax
000000000001a0e7         je         loc_19c10

000000000001a0ed         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
000000000001a0f4         lea        rsi, qword [aCoreutils831li_227a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001a0fb         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
000000000001a102         mov        edx, 0x435                                  ; argument "__line" for method j___assert_fail
000000000001a107         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001a10c         align      16

                     loc_1a110:
000000000001a110         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2197
000000000001a115         cmp        qword [rax+0x98], 0x0
000000000001a11d         je         loc_1a34c

000000000001a123         jmp        loc_1a26f

                     loc_1a128:
000000000001a128         mov        rdi, r12                                    ; CODE XREF=re_search_internal+2403
000000000001a12b         call       sub_2a10                                    ; sub_2a10

                     loc_1a130:
000000000001a130         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+810, re_search_internal+864, re_search_internal+873, re_search_internal+942, re_search_internal+2169, re_search_internal+2369, re_search_internal+5419
000000000001a138         mov        dword [rsp+0x268+var_20C], 0xc
000000000001a140         jmp        loc_19c18

                     loc_1a145:
000000000001a145         mov        rdi, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+3799
000000000001a14d         mov        rsi, r14
000000000001a150         call       build_trtable                               ; build_trtable
000000000001a155         test       al, al
000000000001a157         jne        loc_19874

000000000001a15d         mov        rdi, qword [rsp+0x268+var_90]
000000000001a165         mov        dword [rsp+0x268+var_198], 0xc
000000000001a170         test       rdi, rdi
000000000001a173         jne        loc_1a0a0

000000000001a179         nop        dword [rax]

                     loc_1a180:
000000000001a180         mov        dword [rsp+0x268+var_20C], 0xc              ; CODE XREF=re_search_internal+975, re_search_internal+2046, re_search_internal+4058
000000000001a188         jmp        loc_19c18

                     loc_1a18d:
000000000001a18d         mov        rbx, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1250
000000000001a192         mov        r13d, dword [rsp+0x268+var_1BC]
000000000001a19a         mov        r14, qword [rsp+0x268+var_1D8]
000000000001a1a2         mov        r15, qword [rsp+0x268+var_1F8]
000000000001a1a7         mov        r12, qword [rsp+0x268+var_1E0]
000000000001a1af         jmp        loc_1a1f8
000000000001a1b1         align      8

                     loc_1a1b8:
000000000001a1b8         cmp        r12, rbp                                    ; CODE XREF=re_search_internal+4427, re_search_internal+4467
000000000001a1bb         mov        rax, rbx
000000000001a1be         jle        loc_1a1cf

000000000001a1c0         mov        rax, qword [rsp+0x268+var_140]
000000000001a1c8         movzx      eax, byte [rax+rdx]
000000000001a1cc         add        rax, rbx

                     loc_1a1cf:
000000000001a1cf         cmp        byte [rax], 0x0                             ; CODE XREF=re_search_internal+4350
000000000001a1d2         jne        loc_19698

000000000001a1d8         movsxd     rax, r13d
000000000001a1db         add        rbp, rax
000000000001a1de         cmp        rbp, r14
000000000001a1e1         mov        qword [rsp+0x268+var_190], rbp
000000000001a1e9         jl         loc_1a029

000000000001a1ef         cmp        rbp, r15
000000000001a1f2         jg         loc_1a029

                     loc_1a1f8:
000000000001a1f8         mov        rdx, rbp                                    ; CODE XREF=re_search_internal+4335
000000000001a1fb         sub        rdx, qword [rsp+0x268+var_120]
000000000001a203         cmp        qword [rsp+0x268+var_110], rdx
000000000001a20b         ja         loc_1a1b8

000000000001a20d         mov        edx, dword [rsp+0x268+arg_10]
000000000001a214         mov        rdi, qword [rsp+0x268+var_268]
000000000001a218         mov        rsi, rbp
000000000001a21b         call       re_string_reconstruct                       ; re_string_reconstruct
000000000001a220         test       eax, eax
000000000001a222         jne        loc_19c08

000000000001a228         mov        rdx, rbp
000000000001a22b         sub        rdx, qword [rsp+0x268+var_120]
000000000001a233         jmp        loc_1a1b8

                     loc_1a235:
000000000001a235         test       eax, eax                                    ; CODE XREF=re_search_internal+4102
000000000001a237         je         loc_1973e

000000000001a23d         mov        edx, eax
000000000001a23f         and        edx, 0x6
000000000001a242         cmp        edx, 0x6
000000000001a245         je         loc_1a6af

000000000001a24b         test       al, 0x2
000000000001a24d         je         loc_1a700

000000000001a253         mov        r14, qword [rbx+0x58]
000000000001a257         jmp        loc_1a0d0

                     loc_1a25c:
000000000001a25c         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2212
000000000001a261         cmp        qword [rax+0x98], 0x0
000000000001a269         je         loc_1a34c

                     loc_1a26f:
000000000001a26f         mov        rcx, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+4195
000000000001a274         mov        rbx, qword [rsp+0x268+var_90]
000000000001a27c         mov        rdi, qword [rsp+0x268+var_268]
000000000001a280         mov        rax, qword [rbx+rcx*8]
000000000001a284         mov        rsi, qword [rax+0x10]
000000000001a288         lea        rdx, qword [rax+0x18]
000000000001a28c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000001a291         mov        qword [rsp+0x268+var_98], rax
000000000001a299         jmp        loc_199b8

                     loc_1a29e:
000000000001a29e         xor        ecx, ecx                                    ; CODE XREF=re_search_internal+1113, re_search_internal+1128
000000000001a2a0         jmp        loc_1952e

                     loc_1a2a5:
000000000001a2a5         pxor       xmm0, xmm0                                  ; CODE XREF=re_search_internal+2383
000000000001a2a9         mov        qword [rsp+0x268+var_188], rax
000000000001a2b1         mov        rdi, qword [rsp+0x268+var_268]
000000000001a2b5         mov        rax, qword [rsp+0x268+var_248]
000000000001a2ba         lea        rbx, qword [rsp+0x268+var_188]
000000000001a2c2         mov        qword [rsp+0x268+var_180], 0x0
000000000001a2ce         mov        qword [rsp+0x268+var_178], r13
000000000001a2d6         mov        rsi, rbx
000000000001a2d9         mov        qword [rsp+0x268+var_158], 0x0
000000000001a2e5         movaps     xmmword [rsp+0x268+var_168], xmm0
000000000001a2ed         mov        qword [rsp+0x268+var_170], rax
000000000001a2f5         call       sift_states_backward                        ; sift_states_backward
000000000001a2fa         mov        rdi, qword [rsp+0x268+var_158]
000000000001a302         mov        dword [rsp+0x268+var_260], eax
000000000001a306         call       sub_2a10                                    ; sub_2a10
000000000001a30b         mov        eax, dword [rsp+0x268+var_260]
000000000001a30f         test       eax, eax
000000000001a311         jne        loc_1a758

000000000001a317         cmp        qword [r12], 0x0
000000000001a31c         je         loc_19fe3

                     loc_1a322:
000000000001a322         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+5778
000000000001a32a         call       sub_2a10                                    ; sub_2a10
000000000001a32f         mov        rax, qword [rsp+0x268+var_248]
000000000001a334         mov        qword [rsp+0x268+var_90], r12
000000000001a33c         mov        qword [rsp+0x268+var_98], r13
000000000001a344         mov        qword [rsp+0x268+var_A0], rax

                     loc_1a34c:
000000000001a34c         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+2290, re_search_internal+4189, re_search_internal+4521
000000000001a355         je         loc_19c10

000000000001a35b         cmp        qword [rsp+0x268+arg_0], 0x1
000000000001a364         je         loc_1a788

000000000001a36a         mov        rsi, qword [rsp+0x268+var_1B0]
000000000001a372         mov        rcx, qword [rsp+0x268+arg_0]
000000000001a37a         mov        rdx, 0xffffffffffffffff
000000000001a381         shl        rcx, 0x4
000000000001a385         lea        rax, qword [rsi+0x10]
000000000001a389         add        rcx, rsi

                     loc_1a38c:
000000000001a38c         mov        qword [rax+8], rdx                          ; CODE XREF=re_search_internal+4826
000000000001a390         mov        qword [rax], rdx
000000000001a393         add        rax, 0x10
000000000001a397         cmp        rcx, rax
000000000001a39a         jne        loc_1a38c

000000000001a39c         mov        rdi, qword [rsp+0x268+var_1B0]
000000000001a3a4         mov        rax, qword [rsp+0x268+var_A0]
000000000001a3ac         mov        qword [rdi+8], rax
000000000001a3b0         mov        rax, qword [rsp+0x268+var_220]
000000000001a3b5         mov        qword [rdi], 0x0
000000000001a3bc         test       byte [rax+0x38], 0x10
000000000001a3c0         jne        loc_1a7a3

000000000001a3c6         cmp        qword [rsp+0x268+arg_0], 0x1
000000000001a3cf         je         loc_1a7a3

000000000001a3d5         mov        rax, qword [rsp+0x268+var_230]
000000000001a3da         xor        r8d, r8d
000000000001a3dd         test       byte [rax+0xb0], 0x1
000000000001a3e4         je         loc_1a3f5

000000000001a3e6         xor        r8d, r8d
000000000001a3e9         cmp        qword [rax+0x98], 0x0
000000000001a3f1         setg       r8b

                     loc_1a3f5:
000000000001a3f5         mov        rbx, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4900
000000000001a3fd         mov        rdx, qword [rsp+0x268+arg_0]
000000000001a405         mov        rsi, qword [rsp+0x268+var_268]
000000000001a409         mov        rdi, qword [rsp+0x268+var_220]
000000000001a40e         mov        rcx, rbx
000000000001a411         call       set_regs                                    ; set_regs
000000000001a416         test       eax, eax
000000000001a418         jne        loc_1a6ed

000000000001a41e         mov        rax, qword [rbx]

                     loc_1a421:
000000000001a421         movzx      r11d, byte [rsp+0x268+var_BC]               ; CODE XREF=re_search_internal+5861
000000000001a42a         mov        r10, qword [rsp+0x268+var_118]
000000000001a432         xor        ecx, ecx
000000000001a434         mov        r9, qword [rsp+0x268+var_130]
000000000001a43c         mov        r8, qword [rsp+0x268+var_110]
000000000001a444         mov        rdi, qword [rsp+0x268+var_190]
000000000001a44c         mov        rdx, qword [rsp+0x268+var_1B0]
000000000001a454         jmp        loc_1a459

                     loc_1a456:
000000000001a456         mov        rax, qword [rdx]                            ; CODE XREF=re_search_internal+5065

                     loc_1a459:
000000000001a459         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=re_search_internal+5012
000000000001a45d         je         loc_1a479

000000000001a45f         test       r11b, r11b
000000000001a462         mov        rsi, qword [rdx+8]
000000000001a466         jne        loc_1a7aa

                     loc_1a46c:
000000000001a46c         add        rax, rdi                                    ; CODE XREF=re_search_internal+5887, re_search_internal+5895
000000000001a46f         add        rsi, rdi
000000000001a472         mov        qword [rdx], rax
000000000001a475         mov        qword [rdx+8], rsi

                     loc_1a479:
000000000001a479         add        rcx, 0x1                                    ; CODE XREF=re_search_internal+5021
000000000001a47d         add        rdx, 0x10
000000000001a481         cmp        rcx, qword [rsp+0x268+arg_0]
000000000001a489         jne        loc_1a456

000000000001a48b         cmp        qword [rsp+0x268+var_1D0], 0x0
000000000001a494         jle        loc_1a4d5

000000000001a496         mov        rdx, qword [rsp+0x268+var_1D0]
000000000001a49e         mov        rdi, qword [rsp+0x268+var_1B0]
000000000001a4a6         mov        rax, rcx
000000000001a4a9         shl        rax, 0x4
000000000001a4ad         add        rdx, rcx
000000000001a4b0         lea        rax, qword [rdi+rax+8]
000000000001a4b5         shl        rdx, 0x4
000000000001a4b9         lea        rsi, qword [rdi+rdx+8]
000000000001a4be         mov        rdx, 0xffffffffffffffff

                     loc_1a4c5:
000000000001a4c5         mov        qword [rax-8], rdx                          ; CODE XREF=re_search_internal+5139
000000000001a4c9         mov        qword [rax], rdx
000000000001a4cc         add        rax, 0x10
000000000001a4d0         cmp        rsi, rax
000000000001a4d3         jne        loc_1a4c5

                     loc_1a4d5:
000000000001a4d5         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+5076
000000000001a4da         mov        rdi, qword [rsp+0x268+var_90]
000000000001a4e2         mov        r9, qword [rax+0xe0]
000000000001a4e9         test       r9, r9
000000000001a4ec         je         loc_19c18

000000000001a4f2         mov        r10, qword [rsp+0x268+var_1B0]
000000000001a4fa         xor        r8d, r8d
000000000001a4fd         lea        rdx, qword [r10+0x10]
000000000001a501         jmp        loc_1a539

                     loc_1a503:
000000000001a503         mov        rax, qword [r9+rsi*8-8]                     ; CODE XREF=re_search_internal+5248
000000000001a508         cmp        rax, r8
000000000001a50b         je         loc_1a532

000000000001a50d         add        rax, 0x1
000000000001a511         shl        rax, 0x4
000000000001a515         mov        rax, qword [r10+rax]
000000000001a519         mov        qword [rdx], rax
000000000001a51c         mov        rax, qword [r9+rsi*8-8]
000000000001a521         add        rax, 0x1
000000000001a525         shl        rax, 0x4
000000000001a529         mov        rax, qword [r10+rax+8]
000000000001a52e         mov        qword [rdx+8], rax

                     loc_1a532:
000000000001a532         add        rdx, 0x10                                   ; CODE XREF=re_search_internal+5195
000000000001a536         mov        r8, rsi

                     loc_1a539:
000000000001a539         lea        rsi, qword [r8+1]                           ; CODE XREF=re_search_internal+5185
000000000001a53d         cmp        rsi, rcx
000000000001a540         jne        loc_1a503

000000000001a542         jmp        loc_19c18
000000000001a547         align      16

                     loc_1a550:
000000000001a550         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2922
000000000001a554         call       match_ctx_clean                             ; match_ctx_clean
000000000001a559         mov        rdi, qword [rsp+0x268+var_50]
000000000001a561         call       sub_2a10                                    ; sub_2a10
000000000001a566         mov        rdi, qword [rsp+0x268+var_70]
000000000001a56e         call       sub_2a10                                    ; sub_2a10
000000000001a573         jmp        loc_19c30

                     loc_1a578:
000000000001a578         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+915
000000000001a57d         test       byte [rax+0xb0], 0x2
000000000001a584         jne        loc_19459

000000000001a58a         mov        qword [rsp+0x268+var_90], 0x0
000000000001a596         jmp        loc_19495

                     loc_1a59b:
000000000001a59b         mov        rdi, r12                                    ; CODE XREF=re_search_internal+2584
000000000001a59e         call       sub_2a10                                    ; sub_2a10
000000000001a5a3         mov        rdi, rbp
000000000001a5a6         call       sub_2a10                                    ; sub_2a10
000000000001a5ab         jmp        loc_19ff0

                     loc_1a5b0:
000000000001a5b0         mov        qword [rsp+0x268+var_190], rax              ; CODE XREF=re_search_internal+2828
000000000001a5b8         mov        rdi, qword [rsp+0x268+var_90]
000000000001a5c0         mov        dword [rsp+0x268+var_20C], 0x1
000000000001a5c8         jmp        loc_19c18

                     loc_1a5cd:
000000000001a5cd         test       rax, rax                                    ; CODE XREF=re_search_internal+3025
000000000001a5d0         mov        r13, rax
000000000001a5d3         jne        loc_197c8

000000000001a5d9         jmp        loc_19914
000000000001a5de         align      32

                     loc_1a5e0:
000000000001a5e0         mov        r13, rax                                    ; CODE XREF=re_search_internal+3034
000000000001a5e3         jmp        loc_197c8

                     loc_1a5e8:
000000000001a5e8         cmp        eax, 0xc                                    ; CODE XREF=re_search_internal+3139
000000000001a5eb         je         loc_1a130

000000000001a5f1         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
000000000001a5f8         lea        rsi, qword [aCoreutils831li_227a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001a5ff         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
000000000001a606         mov        edx, 0x46c                                  ; argument "__line" for method j___assert_fail
000000000001a60b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1a610:
000000000001a610         cmp        byte [r14+0x68], 0x0                        ; CODE XREF=re_search_internal+1735
000000000001a615         js         loc_1a686

                     loc_1a617:
000000000001a617         mov        esi, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+5610
000000000001a61b         mov        rax, qword [rsp+0x268+var_260]
000000000001a620         test       esi, esi
000000000001a622         mov        qword [rsp+0x268+var_248], rax
000000000001a627         je         loc_19926

000000000001a62d         mov        qword [rsp+0x268+var_238], 0x1
000000000001a636         jmp        loc_1978d

                     loc_1a63b:
000000000001a63b         mov        rdi, rbx                                    ; CODE XREF=re_search_internal+2327
000000000001a63e         mov        dword [rsp+0x268+var_20C], 0xc
000000000001a646         jmp        loc_19c18

                     loc_1a64b:
000000000001a64b         lea        rbx, qword [r14+0x10]                       ; CODE XREF=re_search_internal+1692
000000000001a64f         lea        rbp, qword [r14+0x18]
000000000001a653         mov        rdi, qword [rsp+0x268+var_268]
000000000001a657         xor        ecx, ecx
000000000001a659         mov        rdx, rbp
000000000001a65c         mov        rsi, rbx
000000000001a65f         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000001a664         test       eax, eax
000000000001a666         mov        dword [rsp+0x268+var_198], eax
000000000001a66d         jne        loc_1a6b8

000000000001a66f         movzx      eax, byte [r14+0x68]
000000000001a674         test       al, 0x40
000000000001a676         jne        loc_1a760

                     loc_1a67c:
000000000001a67c         mov        byte [rsp+0x268+var_250], 0x0               ; CODE XREF=re_search_internal+5827
000000000001a681         jmp        loc_19773

                     loc_1a686:
000000000001a686         mov        rsi, qword [r14+0x10]                       ; CODE XREF=re_search_internal+5461
000000000001a68a         mov        rcx, qword [rsp+0x268+var_260]
000000000001a68f         lea        rdx, qword [r14+0x18]
000000000001a693         mov        rdi, qword [rsp+0x268+var_268]
000000000001a697         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000001a69c         test       rax, rax
000000000001a69f         mov        qword [rsp+0x268+var_238], rax
000000000001a6a4         je         loc_1978d

000000000001a6aa         jmp        loc_1a617

                     loc_1a6af:
000000000001a6af         mov        r14, qword [rbx+0x60]                       ; CODE XREF=re_search_internal+4485
000000000001a6b3         jmp        loc_1a0d0

                     loc_1a6b8:
000000000001a6b8         cdqe                                                   ; CODE XREF=re_search_internal+5549, re_search_internal+5816
000000000001a6ba         mov        qword [rsp+0x268+var_248], rax
000000000001a6bf         jmp        loc_19926

                     loc_1a6c4:
000000000001a6c4         mov        r14, qword [rsp+0x268+var_250]              ; CODE XREF=re_search_internal+2534
000000000001a6c9         mov        eax, r15d

                     loc_1a6cc:
000000000001a6cc         mov        rdi, r12                                    ; CODE XREF=re_search_internal+5787
000000000001a6cf         mov        dword [rsp+0x268+var_260], eax
000000000001a6d3         call       sub_2a10                                    ; sub_2a10
000000000001a6d8         mov        rdi, r14
000000000001a6db         call       sub_2a10                                    ; sub_2a10
000000000001a6e0         mov        eax, dword [rsp+0x268+var_260]
000000000001a6e4         cmp        eax, 0x1
000000000001a6e7         je         loc_19ff0

                     loc_1a6ed:
000000000001a6ed         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4952
000000000001a6f5         mov        dword [rsp+0x268+var_20C], eax
000000000001a6f9         jmp        loc_19c18
000000000001a6fe         align      256

                     loc_1a700:
000000000001a700         test       al, 0x4                                     ; CODE XREF=re_search_internal+4493
000000000001a702         je         loc_1973e

000000000001a708         mov        rdx, qword [r14+0x50]
000000000001a70c         mov        rdi, qword [rsp+0x268+var_240]
000000000001a711         mov        ecx, eax
000000000001a713         mov        rsi, rbx
000000000001a716         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001a71b         mov        r14, rax
000000000001a71e         jmp        loc_1a0d0

                     loc_1a723:
000000000001a723         mov        r15, qword [rsp+0x268+var_258]              ; CODE XREF=re_search_internal+2545, re_search_internal+2556
000000000001a728         mov        rcx, qword [rsp+0x268+var_260]
000000000001a72d         mov        rdx, rbp
000000000001a730         mov        rsi, r12
000000000001a733         mov        qword [rsp+0x268+var_248], r14
000000000001a738         mov        rdi, r15
000000000001a73b         call       merge_state_array                           ; merge_state_array
000000000001a740         mov        rdi, rbp
000000000001a743         mov        dword [rsp+0x268+var_260], eax
000000000001a747         call       sub_2a10                                    ; sub_2a10
000000000001a74c         mov        eax, dword [rsp+0x268+var_260]
000000000001a750         test       eax, eax
000000000001a752         je         loc_1a322

                     loc_1a758:
000000000001a758         xor        r14d, r14d                                  ; CODE XREF=re_search_internal+4689
000000000001a75b         jmp        loc_1a6cc

                     loc_1a760:
000000000001a760         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5558
000000000001a764         mov        rdx, rbp
000000000001a767         mov        rsi, rbx
000000000001a76a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000001a76f         test       eax, eax
000000000001a771         mov        dword [rsp+0x268+var_198], eax
000000000001a778         jne        loc_1a6b8

000000000001a77e         movzx      eax, byte [r14+0x68]
000000000001a783         jmp        loc_1a67c

                     loc_1a788:
000000000001a788         mov        rsi, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4772
000000000001a790         mov        rax, qword [rsp+0x268+var_A0]
000000000001a798         mov        qword [rsi], 0x0
000000000001a79f         mov        qword [rsi+8], rax

                     loc_1a7a3:
000000000001a7a3         xor        eax, eax                                    ; CODE XREF=re_search_internal+4864, re_search_internal+4879
000000000001a7a5         jmp        loc_1a421

                     loc_1a7aa:
000000000001a7aa         cmp        r10, rax                                    ; CODE XREF=re_search_internal+5030
000000000001a7ad         je         loc_1a7cc

000000000001a7af         mov        rax, qword [r9+rax*8]

                     loc_1a7b3:
000000000001a7b3         cmp        r10, rsi                                    ; CODE XREF=re_search_internal+5903
000000000001a7b6         mov        qword [rdx], rax
000000000001a7b9         je         loc_1a7c4

000000000001a7bb         mov        rsi, qword [r9+rsi*8]
000000000001a7bf         jmp        loc_1a46c

                     loc_1a7c4:
000000000001a7c4         mov        rsi, r8                                     ; CODE XREF=re_search_internal+5881
000000000001a7c7         jmp        loc_1a46c

                     loc_1a7cc:
000000000001a7cc         mov        rax, r8                                     ; CODE XREF=re_search_internal+5869
000000000001a7cf         jmp        loc_1a7b3

                     loc_1a7d1:
000000000001a7d1         mov        qword [rsp+0x268+var_190], rbp              ; CODE XREF=re_search_internal+1396, re_search_internal+2737
000000000001a7d9         jmp        loc_19698

                     loc_1a7de:
000000000001a7de         mov        qword [rsp+0x268+var_100], rax              ; CODE XREF=re_search_internal+2126
000000000001a7e6         jmp        loc_19914

                     loc_1a7eb:
000000000001a7eb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_search_internal+2958
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     update_cur_sifted_state:
000000000001a7f0         push       r15                                         ; End of unwind block (FDE at 0x26a60), Begin of unwind block (FDE at 0x26ab0), CODE XREF=sift_states_backward+112, sift_states_backward+655
000000000001a7f2         push       r14
000000000001a7f4         mov        rax, rdi
000000000001a7f7         push       r13
000000000001a7f9         push       r12
000000000001a7fb         mov        r13, rsi
000000000001a7fe         push       rbp
000000000001a7ff         push       rbx
000000000001a800         mov        rbp, rdx
000000000001a803         mov        rbx, rcx
000000000001a806         lea        rcx, qword [rdx*8]
000000000001a80e         sub        rsp, 0xa8
000000000001a815         mov        r12, qword [rax+0x98]
000000000001a81c         mov        rax, qword [rax+0xb8]
000000000001a823         mov        qword [rsp+0xd8+var_D0], rdi
000000000001a828         mov        qword [rsp+0xd8+var_C0], rcx
000000000001a82d         mov        rdi, qword [fs:0x28]
000000000001a836         mov        qword [rsp+0xd8+var_40], rdi
000000000001a83e         xor        edi, edi
000000000001a840         mov        rdx, qword [rax+rdx*8]
000000000001a844         mov        dword [rsp+0xd8+var_7C], 0x0
000000000001a84c         mov        rcx, qword [rbx+8]
000000000001a850         test       rdx, rdx
000000000001a853         je         loc_1aaa8

000000000001a859         lea        rdi, qword [rdx+8]
000000000001a85d         test       rcx, rcx
000000000001a860         mov        qword [rsp+0xd8+var_C8], rdi
000000000001a865         jne        loc_1a8b8

000000000001a867         mov        rdx, qword [rsi]
000000000001a86a         mov        qword [rdx+rbp*8], 0x0
000000000001a872         mov        rdx, qword [rax+rbp*8]
000000000001a876         xor        eax, eax
000000000001a878         test       byte [rdx+0x68], 0x40
000000000001a87c         jne        loc_1a95f

000000000001a882         nop        word [rax+rax]

                     loc_1a888:
000000000001a888         mov        rdi, qword [rsp+0xd8+var_40]                ; CODE XREF=update_cur_sifted_state+233, update_cur_sifted_state+274, update_cur_sifted_state+321, update_cur_sifted_state+333, update_cur_sifted_state+361, update_cur_sifted_state+725, update_cur_sifted_state+738, update_cur_sifted_state+888, update_cur_sifted_state+1107, update_cur_sifted_state+1297, update_cur_sifted_state+1455
000000000001a890         xor        rdi, qword [fs:0x28]
000000000001a899         jne        loc_1b03b

000000000001a89f         add        rsp, 0xa8
000000000001a8a6         pop        rbx
000000000001a8a7         pop        rbp
000000000001a8a8         pop        r12
000000000001a8aa         pop        r13
000000000001a8ac         pop        r14
000000000001a8ae         pop        r15
000000000001a8b0         ret
                        ; endp
000000000001a8b1         align      8

                     loc_1a8b8:
000000000001a8b8         lea        rdi, qword [rsp+0xd8+var_78]                ; CODE XREF=update_cur_sifted_state+117
000000000001a8bd         mov        rdx, rbx
000000000001a8c0         mov        rsi, r12
000000000001a8c3         mov        dword [rsp+0xd8+var_78], 0x0
000000000001a8cb         call       re_acquire_state                            ; re_acquire_state
000000000001a8d0         mov        rdx, rax
000000000001a8d3         mov        eax, dword [rsp+0xd8+var_78]
000000000001a8d7         test       eax, eax
000000000001a8d9         jne        loc_1a888

000000000001a8db         mov        r15, qword [rdx+0x38]
000000000001a8df         lea        r14, qword [rdx+0x38]
000000000001a8e3         test       r15, r15
000000000001a8e6         je         loc_1aaf0

                     loc_1a8ec:
000000000001a8ec         mov        rsi, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+827, update_cur_sifted_state+840
000000000001a8f1         mov        rdx, r14
000000000001a8f4         mov        rdi, rbx
000000000001a8f7         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000001a8fc         test       eax, eax
000000000001a8fe         mov        dword [rsp+0xd8+var_7C], eax
000000000001a902         jne        loc_1a888

000000000001a904         cmp        qword [r13+0x28], 0x0
000000000001a909         jne        loc_1ab80

                     loc_1a90f:
000000000001a90f         mov        r14, qword [rsp+0xd8+var_C0]                ; CODE XREF=update_cur_sifted_state+1155
000000000001a914         add        r14, qword [r13]

                     loc_1a918:
000000000001a918         lea        rdi, qword [rsp+0xd8+var_7C]                ; CODE XREF=update_cur_sifted_state+905
000000000001a91d         mov        rdx, rbx
000000000001a920         mov        rsi, r12
000000000001a923         call       re_acquire_state                            ; re_acquire_state
000000000001a928         mov        qword [r14], rax
000000000001a92b         mov        eax, dword [rsp+0xd8+var_7C]
000000000001a92f         test       eax, eax
000000000001a931         jne        loc_1a888

000000000001a937         cmp        qword [rsp+0xd8+var_C8], 0x0
000000000001a93d         je         loc_1a888

000000000001a943         mov        rax, qword [rsp+0xd8+var_D0]
000000000001a948         mov        rax, qword [rax+0xb8]
000000000001a94f         mov        rdx, qword [rax+rbp*8]
000000000001a953         xor        eax, eax
000000000001a955         test       byte [rdx+0x68], 0x40
000000000001a959         je         loc_1a888

                     loc_1a95f:
000000000001a95f         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+140
000000000001a964         xor        ebx, ebx
000000000001a966         mov        rsi, qword [rax+0xc8]
000000000001a96d         mov        rdx, rsi

                     loc_1a970:
000000000001a970         cmp        rbx, rdx                                    ; CODE XREF=update_cur_sifted_state+759
000000000001a973         jge        loc_1a9d3

000000000001a975         lea        rax, qword [rbx+rdx]
000000000001a979         mov        rcx, rax
000000000001a97c         shr        rcx, 0x3f
000000000001a980         add        rcx, rax
000000000001a983         mov        rax, qword [rsp+0xd8+var_D0]
000000000001a988         sar        rcx, 0x1
000000000001a98b         mov        rdi, qword [rax+0xd8]
000000000001a992         lea        rax, qword [rcx+rcx*4]
000000000001a996         cmp        rbp, qword [rdi+rax*8+8]
000000000001a99b         jle        loc_1a9ce

000000000001a99d         jmp        loc_1aad7
000000000001a9a2         align      8

                     loc_1a9a8:
000000000001a9a8         lea        rdx, qword [rbx+rcx]                        ; CODE XREF=update_cur_sifted_state+481
000000000001a9ac         mov        rax, rdx
000000000001a9af         shr        rax, 0x3f
000000000001a9b3         add        rax, rdx
000000000001a9b6         sar        rax, 0x1
000000000001a9b9         lea        rdx, qword [rax+rax*4]
000000000001a9bd         mov        r8, rax
000000000001a9c0         cmp        rbp, qword [rdi+rdx*8+8]
000000000001a9c5         jg         loc_1aae0

000000000001a9cb         mov        rcx, rax

                     loc_1a9ce:
000000000001a9ce         cmp        rbx, rcx                                    ; CODE XREF=update_cur_sifted_state+427
000000000001a9d1         jl         loc_1a9a8

                     loc_1a9d3:
000000000001a9d3         cmp        rsi, rbx                                    ; CODE XREF=update_cur_sifted_state+387
000000000001a9d6         jle        loc_1aad0

000000000001a9dc         lea        rax, qword [rbx+rbx*4]
000000000001a9e0         lea        rsi, qword [rax*8]
000000000001a9e8         mov        rax, qword [rsp+0xd8+var_D0]
000000000001a9ed         mov        qword [rsp+0xd8+var_98], rsi
000000000001a9f2         mov        rax, qword [rax+0xd8]
000000000001a9f9         cmp        rbp, qword [rax+rsi+8]
000000000001a9fe         jne        loc_1aad0

000000000001aa04         cmp        rbx, 0xffffffffffffffff
000000000001aa08         je         loc_1aad0

000000000001aa0e         mov        rax, qword [rsp+0xd8+var_D0]
000000000001aa13         mov        qword [rsp+0xd8+var_78], 0x0
000000000001aa1c         mov        r12, qword [rax+0x98]
000000000001aa23         mov        rax, qword [rsp+0xd8+var_C8]
000000000001aa28         cmp        qword [rax+8], 0x0
000000000001aa2d         jle        loc_1aad0

000000000001aa33         lea        rax, qword [rsp+0xd8+var_78]
000000000001aa38         mov        qword [rsp+0xd8+var_B8], 0x0
000000000001aa41         mov        qword [rsp+0xd8+var_90], rbx
000000000001aa46         mov        r15, r13
000000000001aa49         mov        qword [rsp+0xd8+var_A0], rax
000000000001aa4e         jmp        loc_1aa72

                     loc_1aa50:
000000000001aa50         cmp        al, 0x4                                     ; CODE XREF=update_cur_sifted_state+679, update_cur_sifted_state+685
000000000001aa52         je         loc_1add8

                     loc_1aa58:
000000000001aa58         mov        rcx, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+687, update_cur_sifted_state+1987
000000000001aa5d         add        qword [rsp+0xd8+var_B8], 0x1
000000000001aa63         mov        rax, qword [rsp+0xd8+var_B8]
000000000001aa68         cmp        rax, qword [rcx+8]
000000000001aa6c         jge        loc_1b02b

                     loc_1aa72:
000000000001aa72         mov        rax, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+606
000000000001aa77         mov        rdi, qword [rsp+0xd8+var_B8]
000000000001aa7c         mov        rax, qword [rax+0x10]
000000000001aa80         mov        r14, qword [rax+rdi*8]
000000000001aa84         mov        rax, r14
000000000001aa87         shl        rax, 0x4
000000000001aa8b         add        rax, qword [r12]
000000000001aa8f         cmp        r14, qword [r15+0x10]
000000000001aa93         movzx      eax, byte [rax+8]
000000000001aa97         jne        loc_1aa50

000000000001aa99         cmp        rbp, qword [r15+0x18]
000000000001aa9d         jne        loc_1aa50

000000000001aa9f         jmp        loc_1aa58
000000000001aaa1         align      8

                     loc_1aaa8:
000000000001aaa8         lea        r14, qword [rbp*8]                          ; CODE XREF=update_cur_sifted_state+99
000000000001aab0         add        r14, qword [rsi]
000000000001aab3         test       rcx, rcx
000000000001aab6         jne        loc_1ab70

000000000001aabc         mov        qword [r14], 0x0
000000000001aac3         xor        eax, eax
000000000001aac5         jmp        loc_1a888
000000000001aaca         align      16

                     loc_1aad0:
000000000001aad0         xor        eax, eax                                    ; CODE XREF=update_cur_sifted_state+486, update_cur_sifted_state+526, update_cur_sifted_state+536, update_cur_sifted_state+573, update_cur_sifted_state+2113
000000000001aad2         jmp        loc_1a888

                     loc_1aad7:
000000000001aad7         mov        r8, rcx                                     ; CODE XREF=update_cur_sifted_state+429
000000000001aada         mov        rcx, rdx
000000000001aadd         nop        dword [rax]

                     loc_1aae0:
000000000001aae0         lea        rbx, qword [r8+1]                           ; CODE XREF=update_cur_sifted_state+469
000000000001aae4         mov        rdx, rcx
000000000001aae7         jmp        loc_1a970
000000000001aaec         align      16

                     loc_1aaf0:
000000000001aaf0         mov        rdi, qword [rbx+8]                          ; CODE XREF=update_cur_sifted_state+246
000000000001aaf4         mov        qword [rdx+0x40], 0x0
000000000001aafc         mov        qword [rsp+0xd8+var_B8], rdx
000000000001ab01         mov        qword [rdx+0x38], rdi
000000000001ab05         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000001ab09         call       j_malloc                                    ; malloc
000000000001ab0e         mov        rdx, qword [rsp+0xd8+var_B8]
000000000001ab13         test       rax, rax
000000000001ab16         mov        qword [rdx+0x48], rax
000000000001ab1a         je         loc_1ab63

000000000001ab1c         cmp        qword [rbx+8], 0x0
000000000001ab21         mov        dword [rsp+0xd8+var_78], 0x0
000000000001ab29         jg         loc_1ab3e

000000000001ab2b         jmp        loc_1a8ec

                     loc_1ab30:
000000000001ab30         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+881
000000000001ab34         cmp        r15, qword [rbx+8]
000000000001ab38         jge        loc_1a8ec

                     loc_1ab3e:
000000000001ab3e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+825
000000000001ab42         mov        rdi, r14
000000000001ab45         mov        rax, qword [rax+r15*8]
000000000001ab49         lea        rdx, qword [rax+rax*2]
000000000001ab4d         mov        rax, qword [r12+0x38]
000000000001ab52         lea        rsi, qword [rax+rdx*8]
000000000001ab56         call       re_node_set_merge                           ; re_node_set_merge
000000000001ab5b         test       eax, eax
000000000001ab5d         mov        dword [rsp+0xd8+var_78], eax
000000000001ab61         je         loc_1ab30

                     loc_1ab63:
000000000001ab63         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+810
000000000001ab68         jmp        loc_1a888
000000000001ab6d         align      16

                     loc_1ab70:
000000000001ab70         mov        qword [rsp+0xd8+var_C8], 0x0                ; CODE XREF=update_cur_sifted_state+710
000000000001ab79         jmp        loc_1a918
000000000001ab7e         align      128

                     loc_1ab80:
000000000001ab80         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+281
000000000001ab85         mov        rax, qword [rax+0xd8]
000000000001ab8c         mov        qword [rsp+0xd8+var_B8], rax
000000000001ab91         jle        loc_1ac6b

000000000001ab97         xor        r15d, r15d
000000000001ab9a         nop        word [rax+rax]

                     loc_1aba0:
000000000001aba0         mov        rax, qword [r13+0x30]                       ; CODE XREF=update_cur_sifted_state+1141
000000000001aba4         mov        rdi, qword [rsp+0xd8+var_B8]
000000000001aba9         mov        rax, qword [rax+r15*8]
000000000001abad         lea        rax, qword [rax+rax*4]
000000000001abb1         lea        rdx, qword [rdi+rax*8]
000000000001abb5         cmp        rbp, qword [rdx+0x10]
000000000001abb9         jle        loc_1ac5d

000000000001abbf         cmp        rbp, qword [rdx+8]
000000000001abc3         jg         loc_1ac5d

000000000001abc9         mov        rcx, qword [rdx]
000000000001abcc         mov        rax, qword [r12]
000000000001abd0         mov        rsi, qword [rbx+8]
000000000001abd4         shl        rcx, 0x4
000000000001abd8         cmp        rbp, qword [rdx+0x18]
000000000001abdc         mov        r8, qword [rax+rcx]
000000000001abe0         je         loc_1ac80

000000000001abe6         xor        r14d, r14d
000000000001abe9         test       rsi, rsi
000000000001abec         jle        loc_1ac5d

000000000001abee         mov        qword [rsp+0xd8+var_B0], rbp
000000000001abf3         mov        rbp, r8
000000000001abf6         jmp        loc_1ac0e
000000000001abf8         align      1024

                     loc_1ac00:
000000000001ac00         add        r14, 0x1                                    ; CODE XREF=update_cur_sifted_state+1082, update_cur_sifted_state+1087
000000000001ac04         cmp        r14, qword [rbx+8]
000000000001ac08         jge        loc_1ac58

                     loc_1ac0a:
000000000001ac0a         mov        rax, qword [r12]                            ; CODE XREF=update_cur_sifted_state+1121

                     loc_1ac0e:
000000000001ac0e         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+1030
000000000001ac12         mov        rsi, qword [rdx+r14*8]
000000000001ac16         mov        rdx, rsi
000000000001ac19         shl        rdx, 0x4
000000000001ac1d         add        rax, rdx
000000000001ac20         movzx      edx, byte [rax+8]
000000000001ac24         sub        edx, 0x8
000000000001ac27         cmp        edx, 0x1
000000000001ac2a         ja         loc_1ac00

000000000001ac2c         cmp        rbp, qword [rax]
000000000001ac2f         jne        loc_1ac00

000000000001ac31         mov        rcx, qword [rsp+0xd8+var_C8]
000000000001ac36         mov        rdx, rbx
000000000001ac39         mov        rdi, r12
000000000001ac3c         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000001ac41         test       eax, eax
000000000001ac43         jne        loc_1a888

000000000001ac49         add        r14, 0x1
000000000001ac4d         cmp        r14, qword [rbx+8]
000000000001ac51         jl         loc_1ac0a

000000000001ac53         nop        dword [rax+rax]

                     loc_1ac58:
000000000001ac58         mov        rbp, qword [rsp+0xd8+var_B0]                ; CODE XREF=update_cur_sifted_state+1048

                     loc_1ac5d:
000000000001ac5d         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+969, update_cur_sifted_state+979, update_cur_sifted_state+1020, update_cur_sifted_state+1171, update_cur_sifted_state+1306, update_cur_sifted_state+1317, update_cur_sifted_state+1484, update_cur_sifted_state+1501
000000000001ac61         cmp        r15, qword [r13+0x28]
000000000001ac65         jl         loc_1aba0

                     loc_1ac6b:
000000000001ac6b         mov        dword [rsp+0xd8+var_7C], 0x0                ; CODE XREF=update_cur_sifted_state+929
000000000001ac73         jmp        loc_1a90f
000000000001ac78         align      128

                     loc_1ac80:
000000000001ac80         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1008
000000000001ac83         jle        loc_1ac5d

000000000001ac85         mov        r10, qword [rbx+0x10]
000000000001ac89         mov        r9, 0xffffffffffffffff
000000000001ac90         lea        r11, qword [r10+rsi*8]
000000000001ac94         mov        rcx, r10
000000000001ac97         mov        rsi, r9
000000000001ac9a         jmp        loc_1acb6
000000000001ac9c         align      32

                     loc_1aca0:
000000000001aca0         cmp        r14d, 0x9                                   ; CODE XREF=update_cur_sifted_state+1244
000000000001aca4         jne        loc_1acad

000000000001aca6         cmp        r8, qword [rdx]
000000000001aca9         cmove      r9, rdi

                     loc_1acad:
000000000001acad         add        rcx, 0x8                                    ; CODE XREF=update_cur_sifted_state+1204
000000000001acb1         cmp        r11, rcx
000000000001acb4         je         loc_1acde

                     loc_1acb6:
000000000001acb6         mov        rdi, qword [rcx]                            ; CODE XREF=update_cur_sifted_state+1194, update_cur_sifted_state+1260
000000000001acb9         mov        rdx, rdi
000000000001acbc         shl        rdx, 0x4
000000000001acc0         add        rdx, rax
000000000001acc3         movzx      r14d, byte [rdx+8]
000000000001acc8         cmp        r14d, 0x8
000000000001accc         jne        loc_1aca0

000000000001acce         cmp        r8, qword [rdx]
000000000001acd1         cmove      rsi, rdi
000000000001acd5         add        rcx, 0x8
000000000001acd9         cmp        r11, rcx
000000000001acdc         jne        loc_1acb6

                     loc_1acde:
000000000001acde         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1220
000000000001ace1         mov        r14, r9
000000000001ace4         mov        qword [rsp+0xd8+var_B0], r9
000000000001ace9         js         loc_1adb0

000000000001acef         mov        rcx, qword [rsp+0xd8+var_C8]
000000000001acf4         mov        rdx, rbx
000000000001acf7         mov        rdi, r12
000000000001acfa         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000001acff         test       eax, eax
000000000001ad01         jne        loc_1a888

000000000001ad07         test       r14, r14
000000000001ad0a         js         loc_1ac5d

000000000001ad10         cmp        qword [rbx+8], 0x0
000000000001ad15         jle        loc_1ac5d

000000000001ad1b         mov        r10, qword [rbx+0x10]

                     loc_1ad1f:
000000000001ad1f         xor        r14d, r14d                                  ; CODE XREF=update_cur_sifted_state+1478
000000000001ad22         mov        qword [rsp+0xd8+var_A8], rbp
000000000001ad27         mov        rbp, r14
000000000001ad2a         mov        r14, qword [rsp+0xd8+var_B0]
000000000001ad2f         jmp        loc_1ad4a
000000000001ad31         align      8

                     loc_1ad38:
000000000001ad38         add        rbp, 0x1                                    ; CODE XREF=update_cur_sifted_state+1409, update_cur_sifted_state+1432, update_cur_sifted_state+1465
000000000001ad3c         cmp        rbp, qword [rbx+8]
000000000001ad40         jge        loc_1adc8

000000000001ad46         mov        r10, qword [rbx+0x10]

                     loc_1ad4a:
000000000001ad4a         mov        r10, qword [r10+rbp*8]                      ; CODE XREF=update_cur_sifted_state+1343
000000000001ad4e         mov        rax, qword [r12+0x38]
000000000001ad53         mov        rdx, r14
000000000001ad56         lea        r9, qword [r10+r10*2]
000000000001ad5a         shl        r9, 0x3
000000000001ad5e         add        rax, r9
000000000001ad61         mov        rdi, qword [rax+8]
000000000001ad65         lea        rsi, qword [rax+0x10]
000000000001ad69         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001ad6e         test       rax, rax
000000000001ad71         jne        loc_1ad38

000000000001ad73         add        r9, qword [r12+0x30]
000000000001ad78         mov        rdi, qword [r9+8]
000000000001ad7c         lea        rsi, qword [r9+0x10]
000000000001ad80         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001ad85         test       rax, rax
000000000001ad88         jne        loc_1ad38

000000000001ad8a         mov        rcx, qword [rsp+0xd8+var_C8]
000000000001ad8f         mov        rdx, rbx
000000000001ad92         mov        rsi, r10
000000000001ad95         mov        rdi, r12
000000000001ad98         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000001ad9d         test       eax, eax
000000000001ad9f         jne        loc_1a888

000000000001ada5         sub        rbp, 0x1
000000000001ada9         jmp        loc_1ad38
000000000001adab         align      16

                     loc_1adb0:
000000000001adb0         cmp        qword [rsp+0xd8+var_B0], 0x0                ; CODE XREF=update_cur_sifted_state+1273
000000000001adb6         jns        loc_1ad1f

000000000001adbc         jmp        loc_1ac5d
000000000001adc1         align      8

                     loc_1adc8:
000000000001adc8         mov        rbp, qword [rsp+0xd8+var_A8]                ; CODE XREF=update_cur_sifted_state+1360
000000000001adcd         jmp        loc_1ac5d
000000000001add2         align      8

                     loc_1add8:
000000000001add8         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+610
000000000001addd         mov        r13, qword [rsp+0xd8+var_98]
000000000001ade2         mov        rbx, qword [rsp+0xd8+var_90]
000000000001ade7         add        r13, qword [rax+0xd8]
000000000001adee         lea        rax, qword [r14+r14*2]
000000000001adf2         shl        rax, 0x3
000000000001adf6         mov        qword [rsp+0xd8+var_A8], rax
000000000001adfb         lea        rax, qword [r14*8]
000000000001ae03         mov        qword [rsp+0xd8+var_B0], rax
000000000001ae08         mov        rax, r15
000000000001ae0b         mov        r15, r13
000000000001ae0e         mov        r13, rbx
000000000001ae11         mov        rbx, rax
000000000001ae14         jmp        loc_1af7e
000000000001ae19         align      32

                     loc_1ae20:
000000000001ae20         mov        rax, qword [r15+0x18]                       ; CODE XREF=update_cur_sifted_state+1937
000000000001ae24         sub        rax, qword [r15+0x10]
000000000001ae28         test       rax, rax
000000000001ae2b         lea        r9, qword [rbp+rax]
000000000001ae30         je         loc_1af90

000000000001ae36         mov        rax, qword [r12+0x18]
000000000001ae3b         mov        rsi, qword [rsp+0xd8+var_B0]
000000000001ae40         mov        r10, qword [rax+rsi]

                     loc_1ae44:
000000000001ae44         cmp        r9, qword [rbx+0x18]                        ; CODE XREF=update_cur_sifted_state+1970
000000000001ae48         jg         loc_1af87

000000000001ae4e         mov        rax, qword [rbx]
000000000001ae51         mov        rax, qword [rax+r9*8]
000000000001ae55         test       rax, rax
000000000001ae58         je         loc_1af87

000000000001ae5e         mov        rdi, qword [rax+0x10]
000000000001ae62         lea        rsi, qword [rax+0x18]
000000000001ae66         mov        rdx, r10
000000000001ae69         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001ae6e         test       rax, rax
000000000001ae71         je         loc_1af87

000000000001ae77         sub        rsp, 0x8
000000000001ae7b         lea        rdx, qword [rbx+0x30]
000000000001ae7f         lea        rsi, qword [rbx+0x28]
000000000001ae83         push       r9
000000000001ae85         mov        rdi, qword [rsp+0xe8+var_D0]
000000000001ae8a         mov        rcx, r14
000000000001ae8d         mov        r9, r10
000000000001ae90         mov        r8, rbp
000000000001ae93         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
000000000001ae98         test       al, al
000000000001ae9a         pop        rdx
000000000001ae9b         pop        rcx
000000000001ae9c         jne        loc_1af87

000000000001aea2         cmp        qword [rsp+0xd8+var_78], 0x0
000000000001aea8         je         loc_1afb8

                     loc_1aeae:
000000000001aeae         mov        rax, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+2056
000000000001aeb3         mov        rsi, r13
000000000001aeb6         mov        qword [rsp+0xd8+var_68], r14
000000000001aebb         mov        qword [rsp+0xd8+var_60], rbp
000000000001aec0         lea        rdi, qword [rax+0x20]
000000000001aec4         call       re_node_set_insert                          ; re_node_set_insert
000000000001aec9         test       al, al
000000000001aecb         je         loc_1b024

000000000001aed1         mov        rdi, qword [rsp+0xd8+var_C0]
000000000001aed6         mov        rax, qword [rsp+0xd8+var_78]
000000000001aedb         mov        rsi, qword [rsp+0xd8+var_A0]
000000000001aee0         mov        r15, qword [rax+rdi]
000000000001aee4         mov        rdi, qword [rsp+0xd8+var_D0]
000000000001aee9         call       sift_states_backward                        ; sift_states_backward
000000000001aeee         test       eax, eax
000000000001aef0         jne        loc_1affe

000000000001aef6         mov        rsi, qword [rbx+8]
000000000001aefa         mov        rdx, qword [rsp+0xd8+var_78]
000000000001aeff         test       rsi, rsi
000000000001af02         je         loc_1af1d

000000000001af04         lea        rcx, qword [rbp+1]
000000000001af08         mov        rdi, r12
000000000001af0b         call       merge_state_array                           ; merge_state_array
000000000001af10         test       eax, eax
000000000001af12         jne        loc_1affe

000000000001af18         mov        rdx, qword [rsp+0xd8+var_78]

                     loc_1af1d:
000000000001af1d         mov        r11, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+1810
000000000001af22         mov        rax, qword [rsp+0xd8+var_C0]
000000000001af27         mov        rdi, qword [rsp+0xd8+var_50]
000000000001af2f         lea        r9, qword [r11+0x30]
000000000001af33         mov        qword [rdx+rax], r15
000000000001af37         mov        rdx, r13
000000000001af3a         mov        rsi, r9
000000000001af3d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001af42         sub        rax, 0x1
000000000001af46         mov        rdx, rax
000000000001af49         js         loc_1af57

000000000001af4b         lea        rdi, qword [r11+0x28]
000000000001af4f         mov        rsi, r9
000000000001af52         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_1af57:
000000000001af57         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+1881
000000000001af5c         lea        rax, qword [r13+r13*4]
000000000001af61         mov        rdx, qword [rcx+0xd8]
000000000001af68         lea        rax, qword [rdx+rax*8]
000000000001af6c         nop        dword [rax]

                     loc_1af70:
000000000001af70         add        r13, 0x1                                    ; CODE XREF=update_cur_sifted_state+1946
000000000001af74         cmp        byte [rax+0x20], 0x0
000000000001af78         lea        r15, qword [rax+0x28]
000000000001af7c         je         loc_1afb0

                     loc_1af7e:
000000000001af7e         cmp        r14, qword [r15]                            ; CODE XREF=update_cur_sifted_state+1572
000000000001af81         je         loc_1ae20

                     loc_1af87:
000000000001af87         mov        rax, r15                                    ; CODE XREF=update_cur_sifted_state+1624, update_cur_sifted_state+1640, update_cur_sifted_state+1665, update_cur_sifted_state+1708
000000000001af8a         jmp        loc_1af70
000000000001af8c         align      16

                     loc_1af90:
000000000001af90         mov        rax, qword [r12+0x28]                       ; CODE XREF=update_cur_sifted_state+1600
000000000001af95         mov        rdi, qword [rsp+0xd8+var_A8]
000000000001af9a         mov        rax, qword [rax+rdi+0x10]
000000000001af9f         mov        r10, qword [rax]
000000000001afa2         jmp        loc_1ae44
000000000001afa7         align      16

                     loc_1afb0:
000000000001afb0         mov        r15, rbx                                    ; CODE XREF=update_cur_sifted_state+1932
000000000001afb3         jmp        loc_1aa58

                     loc_1afb8:
000000000001afb8         mov        rax, qword [rbx+0x30]                       ; CODE XREF=update_cur_sifted_state+1720
000000000001afbc         lea        rsi, qword [rbx+0x20]
000000000001afc0         movdqa     xmm0, xmmword [rbx]
000000000001afc4         mov        qword [rsp+0xd8+var_48], rax
000000000001afcc         mov        rax, qword [rsp+0xd8+var_A0]
000000000001afd1         movaps     xmmword [rsp+0xd8+var_78], xmm0
000000000001afd6         lea        rdi, qword [rax+0x20]
000000000001afda         movdqa     xmm0, xmmword [rbx+0x10]
000000000001afdf         movaps     xmmword [rsp+0xd8+var_68], xmm0
000000000001afe4         movdqa     xmm0, xmmword [rbx+0x20]
000000000001afe9         movaps     xmmword [rsp+0xd8+var_58], xmm0
000000000001aff1         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000001aff6         test       eax, eax
000000000001aff8         je         loc_1aeae

                     loc_1affe:
000000000001affe         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+1792, update_cur_sifted_state+1826, update_cur_sifted_state+2105
000000000001b004         je         loc_1a888

                     loc_1b00a:
000000000001b00a         mov        rdi, qword [rsp+0xd8+var_48]                ; CODE XREF=update_cur_sifted_state+2121
000000000001b012         mov        dword [rsp+0xd8+var_D0], eax
000000000001b016         call       sub_2a10                                    ; sub_2a10
000000000001b01b         mov        eax, dword [rsp+0xd8+var_D0]
000000000001b01f         jmp        loc_1a888

                     loc_1b024:
000000000001b024         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+1755
000000000001b029         jmp        loc_1affe

                     loc_1b02b:
000000000001b02b         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+636
000000000001b031         je         loc_1aad0

000000000001b037         xor        eax, eax
000000000001b039         jmp        loc_1b00a

                     loc_1b03b:
000000000001b03b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=update_cur_sifted_state+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int8_t, -64


                     parse_bracket_element.constprop.37:
000000000001b040         push       r14                                         ; End of unwind block (FDE at 0x26ab0), Begin of unwind block (FDE at 0x26b10), CODE XREF=sub_1c260+271, sub_1c260+1639
000000000001b042         push       r13
000000000001b044         mov        r10, rsi
000000000001b047         push       r12
000000000001b049         push       rbp
000000000001b04a         movsxd     r11, ecx
000000000001b04d         push       rbx
000000000001b04e         mov        rbp, rdx
000000000001b051         mov        rbx, rdi
000000000001b054         sub        rsp, 0x20
000000000001b058         mov        r12, qword [rsi+0x48]
000000000001b05c         mov        rax, qword [fs:0x28]
000000000001b065         mov        qword [rsp+0x48+var_30], rax
000000000001b06a         xor        eax, eax
000000000001b06c         cmp        dword [rsi+0x90], 0x1
000000000001b073         je         loc_1b0c8

000000000001b075         mov        rsi, r12
000000000001b078         mov        rdi, r10
000000000001b07b         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000001b080         cmp        eax, 0x1
000000000001b083         jle        loc_1b0c8

000000000001b085         mov        rdx, qword [r10+0x10]
000000000001b089         cdqe
000000000001b08b         mov        dword [rbx], 0x1
000000000001b091         add        rax, r12
000000000001b094         mov        edx, dword [rdx+r12*4]
000000000001b098         mov        dword [rbx+8], edx
000000000001b09b         mov        qword [r10+0x48], rax
000000000001b09f         xor        eax, eax

                     loc_1b0a1:
000000000001b0a1         mov        rcx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_bracket_element.constprop.37+189, parse_bracket_element.constprop.37+353, parse_bracket_element.constprop.37+493, parse_bracket_element.constprop.37+528, parse_bracket_element.constprop.37+569, parse_bracket_element.constprop.37+582, parse_bracket_element.constprop.37+595
000000000001b0a6         xor        rcx, qword [fs:0x28]
000000000001b0af         jne        loc_1b298

000000000001b0b5         add        rsp, 0x20
000000000001b0b9         pop        rbx
000000000001b0ba         pop        rbp
000000000001b0bb         pop        r12
000000000001b0bd         pop        r13
000000000001b0bf         pop        r14
000000000001b0c1         ret
                        ; endp
000000000001b0c2         align      8

                     loc_1b0c8:
000000000001b0c8         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_bracket_element.constprop.37+51, parse_bracket_element.constprop.37+67
000000000001b0cc         add        r11, r12
000000000001b0cf         mov        qword [r10+0x48], r11
000000000001b0d3         mov        edx, eax
000000000001b0d5         and        edx, 0xfffffffb
000000000001b0d8         cmp        dl, 0x1a
000000000001b0db         je         loc_1b100

000000000001b0dd         cmp        al, 0x1c
000000000001b0df         je         loc_1b100

000000000001b0e1         cmp        al, 0x16
000000000001b0e3         jne        loc_1b0ee

000000000001b0e5         test       r9b, r9b
000000000001b0e8         je         loc_1b232

                     loc_1b0ee:
000000000001b0ee         movzx      eax, byte [rbp]                             ; CODE XREF=parse_bracket_element.constprop.37+163, parse_bracket_element.constprop.37+522
000000000001b0f2         mov        dword [rbx], 0x0
000000000001b0f8         mov        byte [rbx+8], al
000000000001b0fb         xor        eax, eax
000000000001b0fd         jmp        loc_1b0a1
000000000001b0ff         align      256

                     loc_1b100:
000000000001b100         mov        r12, qword [r10+0x68]                       ; CODE XREF=parse_bracket_element.constprop.37+155, parse_bracket_element.constprop.37+159
000000000001b104         cmp        r11, r12
000000000001b107         jge        loc_1b228

000000000001b10d         movzx      r13d, byte [rbp]
000000000001b112         xor        r8d, r8d
000000000001b115         jmp        loc_1b142
000000000001b117         align      32

                     loc_1b120:
000000000001b120         mov        rax, qword [rbx+8]                          ; CODE XREF=parse_bracket_element.constprop.37+294, parse_bracket_element.constprop.37+304
000000000001b124         mov        byte [rax+r8], r9b
000000000001b128         add        r8, 0x1
000000000001b12c         cmp        r8, 0x20
000000000001b130         je         loc_1b228

000000000001b136         movzx      eax, byte [rbp+8]
000000000001b13a         mov        r11, qword [r10+0x48]
000000000001b13e         mov        r12, qword [r10+0x68]

                     loc_1b142:
000000000001b142         cmp        al, 0x1e                                    ; CODE XREF=parse_bracket_element.constprop.37+213
000000000001b144         movsxd     r14, r8d
000000000001b147         je         loc_1b1b0

                     loc_1b149:
000000000001b149         mov        rdx, qword [r10+8]                          ; CODE XREF=parse_bracket_element.constprop.37+376, parse_bracket_element.constprop.37+407, parse_bracket_element.constprop.37+436
000000000001b14d         lea        rax, qword [r11+1]
000000000001b151         mov        qword [r10+0x48], rax
000000000001b155         movzx      r9d, byte [rdx+r11]

                     loc_1b15a:
000000000001b15a         cmp        rax, r12                                    ; CODE XREF=parse_bracket_element.constprop.37+477, parse_bracket_element.constprop.37+556
000000000001b15d         jge        loc_1b228

000000000001b163         cmp        r13b, r9b
000000000001b166         jne        loc_1b120

000000000001b168         mov        rdx, qword [r10+8]
000000000001b16c         cmp        byte [rdx+rax], 0x5d
000000000001b170         jne        loc_1b120

000000000001b172         add        rax, 0x1
000000000001b176         mov        qword [r10+0x48], rax
000000000001b17a         mov        rax, qword [rbx+8]
000000000001b17e         mov        byte [rax+r14], 0x0
000000000001b183         movzx      eax, byte [rbp+8]
000000000001b187         cmp        al, 0x1c
000000000001b189         je         loc_1b28b

000000000001b18f         cmp        al, 0x1e
000000000001b191         je         loc_1b27e

000000000001b197         cmp        al, 0x1a
000000000001b199         je         loc_1b271

000000000001b19f         xor        eax, eax
000000000001b1a1         jmp        loc_1b0a1
000000000001b1a6         align      16

                     loc_1b1b0:
000000000001b1b0         cmp        byte [r10+0x8b], 0x0                        ; CODE XREF=parse_bracket_element.constprop.37+263
000000000001b1b8         je         loc_1b149

000000000001b1ba         cmp        byte [r10+0x8c], 0x0
000000000001b1c2         je         loc_1b258

000000000001b1c8         cmp        r11, qword [r10+0x30]
000000000001b1cc         je         loc_1b1dd

000000000001b1ce         mov        rax, qword [r10+0x10]
000000000001b1d2         cmp        dword [rax+r11*4], 0xffffffff
000000000001b1d7         je         loc_1b149

                     loc_1b1dd:
000000000001b1dd         mov        rax, qword [r10+0x18]                       ; CODE XREF=parse_bracket_element.constprop.37+396
000000000001b1e1         mov        rax, qword [rax+r11*8]
000000000001b1e5         add        rax, qword [r10]
000000000001b1e8         add        rax, qword [r10+0x28]
000000000001b1ec         movzx      r9d, byte [rax]
000000000001b1f0         test       r9b, 0x80
000000000001b1f4         jne        loc_1b149

000000000001b1fa         cmp        dword [r10+0x90], 0x1
000000000001b202         mov        eax, 0x1
000000000001b207         je         loc_1b216

000000000001b209         mov        rsi, r11
000000000001b20c         mov        rdi, r10
000000000001b20f         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000001b214         cdqe

                     loc_1b216:
000000000001b216         add        rax, r11                                    ; CODE XREF=parse_bracket_element.constprop.37+455
000000000001b219         mov        qword [r10+0x48], rax
000000000001b21d         jmp        loc_1b15a
000000000001b222         align      8

                     loc_1b228:
000000000001b228         mov        eax, 0x7                                    ; CODE XREF=parse_bracket_element.constprop.37+199, parse_bracket_element.constprop.37+240, parse_bracket_element.constprop.37+285
000000000001b22d         jmp        loc_1b0a1

                     loc_1b232:
000000000001b232         mov        rdi, rsp                                    ; CODE XREF=parse_bracket_element.constprop.37+168
000000000001b235         mov        rdx, r8
000000000001b238         mov        rsi, r10
000000000001b23b         call       peek_token_bracket                          ; peek_token_bracket
000000000001b240         cmp        byte [rsp+0x48+var_40], 0x15
000000000001b245         mov        eax, 0xb
000000000001b24a         je         loc_1b0ee

000000000001b250         jmp        loc_1b0a1
000000000001b255         align      8

                     loc_1b258:
000000000001b258         lea        rax, qword [r11+1]                          ; CODE XREF=parse_bracket_element.constprop.37+386
000000000001b25c         add        r11, qword [r10]
000000000001b25f         mov        rdx, qword [r10+0x28]
000000000001b263         mov        qword [r10+0x48], rax
000000000001b267         movzx      r9d, byte [r11+rdx]
000000000001b26c         jmp        loc_1b15a

                     loc_1b271:
000000000001b271         mov        dword [rbx], 0x3                            ; CODE XREF=parse_bracket_element.constprop.37+345
000000000001b277         xor        eax, eax
000000000001b279         jmp        loc_1b0a1

                     loc_1b27e:
000000000001b27e         mov        dword [rbx], 0x4                            ; CODE XREF=parse_bracket_element.constprop.37+337
000000000001b284         xor        eax, eax
000000000001b286         jmp        loc_1b0a1

                     loc_1b28b:
000000000001b28b         mov        dword [rbx], 0x2                            ; CODE XREF=parse_bracket_element.constprop.37+329
000000000001b291         xor        eax, eax
000000000001b293         jmp        loc_1b0a1

                     loc_1b298:
000000000001b298         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_bracket_element.constprop.37+111
                        ; endp
000000000001b29d         align      32                                          ; End of unwind block (FDE at 0x26b10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     peek_token:
000000000001b2a0         push       r15                                         ; Begin of unwind block (FDE at 0x26b54), CODE XREF=peek_token+1722, fetch_number+41, parse_expression+139, sub_1baf0+292, sub_1baf0+385, sub_1baf0+1077, sub_1c120+304, sub_1c260+789, sub_1c260+2010, parse_reg_exp+266, re_compile_internal+1168
000000000001b2a2         push       r14
000000000001b2a4         push       r13
000000000001b2a6         push       r12
000000000001b2a8         push       rbp
000000000001b2a9         push       rbx
000000000001b2aa         mov        rbp, rdi
000000000001b2ad         sub        rsp, 0x38
000000000001b2b1         mov        r14, qword [rsi+0x48]
000000000001b2b5         mov        rax, qword [fs:0x28]
000000000001b2be         mov        qword [rsp+0x68+var_40], rax
000000000001b2c3         xor        eax, eax
000000000001b2c5         cmp        qword [rsi+0x68], r14
000000000001b2c9         jle        loc_1b360

000000000001b2cf         movzx      r13d, byte [rdi+0xa]
000000000001b2d4         mov        r15, rdx
000000000001b2d7         mov        rdx, qword [rsi+8]
000000000001b2db         mov        rbx, rsi
000000000001b2de         movzx      r12d, byte [rdx+r14]
000000000001b2e3         and        r13d, 0xffffff9f
000000000001b2e7         mov        byte [rdi+0xa], r13b
000000000001b2eb         mov        eax, dword [rsi+0x90]
000000000001b2f1         mov        byte [rdi], r12b
000000000001b2f4         cmp        eax, 0x1
000000000001b2f7         jle        loc_1b390

000000000001b2fd         cmp        r14, qword [rsi+0x30]
000000000001b301         je         loc_1b4a0

000000000001b307         mov        rcx, qword [rsi+0x10]
000000000001b30b         mov        ecx, dword [rcx+r14*4]
000000000001b30f         cmp        ecx, 0xffffffff
000000000001b312         je         loc_1b3f0

000000000001b318         cmp        r12b, 0x5c
000000000001b31c         je         loc_1b410

000000000001b322         mov        byte [rdi+8], 0x1

                     loc_1b326:
000000000001b326         mov        edi, ecx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+534
000000000001b328         mov        qword [rsp+0x68+var_60], rdx
000000000001b32d         mov        dword [rsp+0x68+var_68], ecx
000000000001b330         call       j_iswalnum                                  ; iswalnum
000000000001b335         mov        ecx, dword [rsp+0x68+var_68]
000000000001b338         test       eax, eax
000000000001b33a         setne      al
000000000001b33d         cmp        ecx, 0x5f
000000000001b340         sete       cl
000000000001b343         or         eax, ecx
000000000001b345         shl        eax, 0x6
000000000001b348         or         r13d, eax
000000000001b34b         mov        byte [rbp+0xa], r13b
000000000001b34f         mov        rdx, qword [rsp+0x68+var_60]
000000000001b354         jmp        loc_1b3cc
000000000001b356         align      32

                     loc_1b360:
000000000001b360         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token+41

                     loc_1b364:
000000000001b364         mov        rdi, qword [rsp+0x68+var_40]                ; CODE XREF=peek_token+353, peek_token+553, peek_token+579, peek_token+589, peek_token+625, peek_token+659, peek_token+669, peek_token+714, peek_token+729, peek_token+748, peek_token+758
000000000001b369         xor        rdi, qword [fs:0x28]
000000000001b372         jne        loc_1b998

000000000001b378         add        rsp, 0x38
000000000001b37c         pop        rbx
000000000001b37d         pop        rbp
000000000001b37e         pop        r12
000000000001b380         pop        r13
000000000001b382         pop        r14
000000000001b384         pop        r15
000000000001b386         ret
                        ; endp
000000000001b387         align      16

                     loc_1b390:
000000000001b390         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+87
000000000001b394         je         loc_1b410

000000000001b396         mov        byte [rbp+8], 0x1
000000000001b39a         mov        qword [rsp+0x68+var_68], rdx
000000000001b39e         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000001b3a3         mov        rsi, qword [rax]
000000000001b3a6         movzx      ecx, r12b
000000000001b3aa         movzx      eax, word [rsi+rcx*2]
000000000001b3ae         shr        ax, 0x3
000000000001b3b2         and        eax, 0x1
000000000001b3b5         cmp        r12b, 0x5f
000000000001b3b9         sete       cl
000000000001b3bc         or         eax, ecx
000000000001b3be         shl        eax, 0x6
000000000001b3c1         or         r13d, eax
000000000001b3c4         mov        byte [rbp+0xa], r13b
000000000001b3c8         mov        rdx, qword [rsp+0x68+var_68]

                     loc_1b3cc:
000000000001b3cc         sub        r12d, 0xa                                   ; CODE XREF=peek_token+180
000000000001b3d0         cmp        r12b, 0x73
000000000001b3d4         ja         loc_1b50c

000000000001b3da         lea        rcx, qword [switch_table_228f4]             ; switch_table_228f4
000000000001b3e1         movzx      r12d, r12b
000000000001b3e5         movsxd     rax, dword [rcx+r12*4]
000000000001b3e9         add        rax, rcx
000000000001b3ec         jmp        rax                                         ; switch statement using table at 0x228f4, with 116 cases, 0x1b4d0,0x1b4f8,0x1b50c,0x1b520,0x1b548,0x1b570,0x1b580,0x1b5a0,0x1b5b0,0x1b5d0,0x1b5f0,0x1b600,0x1b620,0x1b640
000000000001b3ee         align      16

                     loc_1b3f0:
000000000001b3f0         or         r13d, 0x20                                  ; CODE XREF=peek_token+114
000000000001b3f4         mov        byte [rdi+8], 0x1
000000000001b3f8         mov        eax, 0x1
000000000001b3fd         mov        byte [rdi+0xa], r13b
000000000001b401         jmp        loc_1b364
000000000001b406         align      16

                     loc_1b410:
000000000001b410         lea        rsi, qword [r14+1]                          ; CODE XREF=peek_token+124, peek_token+244, peek_token+516
000000000001b414         cmp        rsi, qword [rbx+0x58]
000000000001b418         jge        loc_1b4c0

000000000001b41e         cmp        byte [rbx+0x8b], 0x0
000000000001b425         jne        loc_1b8b0

                     loc_1b42b:
000000000001b42b         movzx      edi, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1647
000000000001b431         mov        r12d, edi
000000000001b434         mov        dword [rsp+0x68+var_60], edi

                     loc_1b438:
000000000001b438         cmp        eax, 0x1                                    ; CODE XREF=peek_token+1653, peek_token+1702
000000000001b43b         mov        byte [rbp], r12b
000000000001b43f         mov        byte [rbp+8], 0x1
000000000001b443         jle        loc_1b890

000000000001b449         mov        rax, qword [rbx+0x10]
000000000001b44d         mov        r8d, dword [rax+rsi*4]

                     loc_1b451:
000000000001b451         mov        edi, r8d                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+1779
000000000001b454         mov        dword [rsp+0x68+var_68], r8d
000000000001b458         call       j_iswalnum                                  ; iswalnum
000000000001b45d         mov        r8d, dword [rsp+0x68+var_68]
000000000001b461         test       eax, eax
000000000001b463         setne      al
000000000001b466         cmp        r8d, 0x5f

                     loc_1b46a:
000000000001b46a         sete       dl                                          ; CODE XREF=peek_token+1547
000000000001b46d         lea        ecx, dword [r12-0x27]
000000000001b472         or         eax, edx
000000000001b474         shl        eax, 0x6
000000000001b477         or         r13d, eax
000000000001b47a         cmp        cl, 0x56
000000000001b47d         mov        byte [rbp+0xa], r13b
000000000001b481         ja         loc_1b885

000000000001b487         lea        rdx, qword [switch_table_22ac4]             ; switch_table_22ac4
000000000001b48e         movzx      ecx, cl
000000000001b491         movsxd     rax, dword [rdx+rcx*4]
000000000001b495         add        rax, rdx
000000000001b498         jmp        rax                                         ; switch statement using table at 0x22ac4, with 87 cases, 0x1b669,0x1b684,0x1b6a2,0x1b6bd,0x1b6d8,0x1b6f6,0x1b718,0x1b73a,0x1b755,0x1b770,0x1b792,0x1b7ad,0x1b7cf,0x1b7f1,0x1b81a,0x1b835,0x1b84c,0x1b863,0x1b885
000000000001b49a         align      32

                     loc_1b4a0:
000000000001b4a0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+97
000000000001b4a4         je         loc_1b410

000000000001b4aa         mov        rax, qword [rbx+0x10]
000000000001b4ae         mov        byte [rbp+8], 0x1
000000000001b4b2         mov        ecx, dword [rax+r14*4]
000000000001b4b6         jmp        loc_1b326
000000000001b4bb         align      64

                     loc_1b4c0:
000000000001b4c0         mov        byte [rbp+8], 0x24                          ; CODE XREF=peek_token+376
000000000001b4c4         mov        eax, 0x1
000000000001b4c9         jmp        loc_1b364
000000000001b4ce         align      16

                     loc_1b4d0:
000000000001b4d0         and        r15d, aPrognamefull                         ; case 115, "__progname_full", CODE XREF=peek_token+332
000000000001b4d7         mov        eax, 0x1
000000000001b4dc         cmp        r15, aPrognamefull                          ; "__progname_full"
000000000001b4e3         jne        loc_1b364

                     loc_1b4e9:
000000000001b4e9         mov        byte [rbp+8], 0x18                          ; CODE XREF=peek_token+1105
000000000001b4ed         jmp        loc_1b364
000000000001b4f2         align      8

                     loc_1b4f8:
000000000001b4f8         and        r15d, 0x8400                                ; case 114, CODE XREF=peek_token+332
000000000001b4ff         cmp        r15, 0x8000
000000000001b506         je         loc_1b5e2

                     loc_1b50c:
000000000001b50c         mov        eax, 0x1                                    ; case 112, CODE XREF=peek_token+308, peek_token+332, peek_token+1664, peek_token+1677
000000000001b511         jmp        loc_1b364
000000000001b516         align      32

                     loc_1b520:
000000000001b520         and        r15d, aPrognamefull                         ; case 113, "__progname_full", CODE XREF=peek_token+332
000000000001b527         mov        eax, 0x1
000000000001b52c         cmp        r15, aPrognamefull                          ; "__progname_full"
000000000001b533         jne        loc_1b364

                     loc_1b539:
000000000001b539         mov        byte [rbp+8], 0x17                          ; CODE XREF=peek_token+1021
000000000001b53d         jmp        loc_1b364
000000000001b542         align      8

                     loc_1b548:
000000000001b548         test       r15d, 0x800008                              ; case 84, CODE XREF=peek_token+332
000000000001b54f         jne        loc_1b55a

000000000001b551         test       r14, r14
000000000001b554         jne        loc_1b91a

                     loc_1b55a:
000000000001b55a         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+687, peek_token+1683
000000000001b55e         mov        dword [rbp], 0x10
000000000001b565         mov        eax, 0x1
000000000001b56a         jmp        loc_1b364
000000000001b56f         align      16

                     loc_1b570:
000000000001b570         mov        byte [rbp+8], 0x14                          ; case 81, CODE XREF=peek_token+332
000000000001b574         mov        eax, 0x1
000000000001b579         jmp        loc_1b364
000000000001b57e         align      128

                     loc_1b580:
000000000001b580         test       r15d, 0x402                                 ; case 53, CODE XREF=peek_token+332
000000000001b587         mov        eax, 0x1
000000000001b58c         jne        loc_1b364

                     loc_1b592:
000000000001b592         mov        byte [rbp+8], 0x13                          ; CODE XREF=peek_token+1288
000000000001b596         jmp        loc_1b364
000000000001b59b         align      32

                     loc_1b5a0:
000000000001b5a0         mov        byte [rbp+8], 0x5                           ; case 36, CODE XREF=peek_token+332
000000000001b5a4         mov        eax, 0x1
000000000001b5a9         jmp        loc_1b364
000000000001b5ae         align      16

                     loc_1b5b0:
000000000001b5b0         test       r15d, 0x402                                 ; case 33, CODE XREF=peek_token+332
000000000001b5b7         mov        eax, 0x1
000000000001b5bc         jne        loc_1b364

                     loc_1b5c2:
000000000001b5c2         mov        byte [rbp+8], 0x12                          ; CODE XREF=peek_token+1424
000000000001b5c6         jmp        loc_1b364
000000000001b5cb         align      16

                     loc_1b5d0:
000000000001b5d0         test       r15d, 0x800                                 ; case 0, CODE XREF=peek_token+332
000000000001b5d7         mov        eax, 0x1
000000000001b5dc         je         loc_1b364

                     loc_1b5e2:
000000000001b5e2         mov        byte [rbp+8], 0xa                           ; CODE XREF=peek_token+614
000000000001b5e6         mov        eax, 0x1
000000000001b5eb         jmp        loc_1b364

                     loc_1b5f0:
000000000001b5f0         mov        byte [rbp+8], 0xb                           ; case 32, CODE XREF=peek_token+332
000000000001b5f4         mov        eax, 0x1
000000000001b5f9         jmp        loc_1b364
000000000001b5fe         align      512

                     loc_1b600:
000000000001b600         test       r15d, 0x2000                                ; case 31, CODE XREF=peek_token+332
000000000001b607         mov        eax, 0x1
000000000001b60c         je         loc_1b364

                     loc_1b612:
000000000001b612         mov        byte [rbp+8], 0x9                           ; CODE XREF=peek_token+1447
000000000001b616         jmp        loc_1b364
000000000001b61b         align      32

                     loc_1b620:
000000000001b620         test       r15d, 0x2000                                ; case 30, CODE XREF=peek_token+332
000000000001b627         mov        eax, 0x1
000000000001b62c         je         loc_1b364

                     loc_1b632:
000000000001b632         mov        byte [rbp+8], 0x8                           ; CODE XREF=peek_token+1470
000000000001b636         jmp        loc_1b364
000000000001b63b         align      64

                     loc_1b640:
000000000001b640         test       r15b, 0x8                                   ; case 26, CODE XREF=peek_token+332
000000000001b644         jne        loc_1b654

000000000001b646         add        r14, 0x1
000000000001b64a         cmp        r14, qword [rbx+0x58]
000000000001b64e         jne        loc_1b94b

                     loc_1b654:
000000000001b654         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+932, peek_token+1754
000000000001b658         mov        dword [rbp], 0x20
000000000001b65f         mov        eax, 0x1
000000000001b664         jmp        loc_1b364

                     loc_1b669:
000000000001b669         test       r15d, 0x8400                                ; case 85, CODE XREF=peek_token+504
000000000001b670         mov        eax, 0x2
000000000001b675         jne        loc_1b364

000000000001b67b         mov        byte [rbp+8], 0xa
000000000001b67f         jmp        loc_1b364

                     loc_1b684:
000000000001b684         and        r15d, aPrognamefull                         ; case 84, "__progname_full", CODE XREF=peek_token+504
000000000001b68b         mov        eax, 0x2
000000000001b690         cmp        r15, 0x200
000000000001b697         jne        loc_1b364

000000000001b69d         jmp        loc_1b539

                     loc_1b6a2:
000000000001b6a2         test       r15d, 0x80000                               ; case 80, CODE XREF=peek_token+504
000000000001b6a9         mov        eax, 0x2
000000000001b6ae         jne        loc_1b364

000000000001b6b4         mov        byte [rbp+8], 0x20
000000000001b6b8         jmp        loc_1b364

                     loc_1b6bd:
000000000001b6bd         test       r15d, 0x80000                               ; case 76, CODE XREF=peek_token+504
000000000001b6c4         mov        eax, 0x2
000000000001b6c9         jne        loc_1b364

000000000001b6cf         mov        byte [rbp+8], 0x22
000000000001b6d3         jmp        loc_1b364

                     loc_1b6d8:
000000000001b6d8         and        r15d, aPrognamefull                         ; case 86, "__progname_full", CODE XREF=peek_token+504
000000000001b6df         mov        eax, 0x2
000000000001b6e4         cmp        r15, 0x200
000000000001b6eb         jne        loc_1b364

000000000001b6f1         jmp        loc_1b4e9

                     loc_1b6f6:
000000000001b6f6         test       r15d, 0x80000                               ; case 59, CODE XREF=peek_token+504
000000000001b6fd         mov        eax, 0x2
000000000001b702         jne        loc_1b364

000000000001b708         mov        byte [rbp+8], 0xc
000000000001b70c         mov        dword [rbp], 0x100
000000000001b713         jmp        loc_1b364

                     loc_1b718:
000000000001b718         test       r15d, 0x80000                               ; case 57, CODE XREF=peek_token+504
000000000001b71f         mov        eax, 0x2
000000000001b724         jne        loc_1b364

000000000001b72a         mov        byte [rbp+8], 0xc
000000000001b72e         mov        dword [rbp], 0x40
000000000001b735         jmp        loc_1b364

                     loc_1b73a:
000000000001b73a         test       r15d, 0x80000                               ; case 48, CODE XREF=peek_token+504
000000000001b741         mov        eax, 0x2
000000000001b746         jne        loc_1b364

000000000001b74c         mov        byte [rbp+8], 0x21
000000000001b750         jmp        loc_1b364

                     loc_1b755:
000000000001b755         test       r15d, 0x80000                               ; case 44, CODE XREF=peek_token+504
000000000001b75c         mov        eax, 0x2
000000000001b761         jne        loc_1b364

000000000001b767         mov        byte [rbp+8], 0x23
000000000001b76b         jmp        loc_1b364

                     loc_1b770:
000000000001b770         test       r15d, 0x80000                               ; case 27, CODE XREF=peek_token+504
000000000001b777         mov        eax, 0x2
000000000001b77c         jne        loc_1b364

000000000001b782         mov        byte [rbp+8], 0xc
000000000001b786         mov        dword [rbp], 0x200
000000000001b78d         jmp        loc_1b364

                     loc_1b792:
000000000001b792         and        r15d, 0x402                                 ; case 24, CODE XREF=peek_token+504
000000000001b799         mov        eax, 0x2
000000000001b79e         cmp        r15, 0x2
000000000001b7a2         jne        loc_1b364

000000000001b7a8         jmp        loc_1b592

                     loc_1b7ad:
000000000001b7ad         test       r15d, 0x80000                               ; case 23, CODE XREF=peek_token+504
000000000001b7b4         mov        eax, 0x2
000000000001b7b9         jne        loc_1b364

000000000001b7bf         mov        byte [rbp+8], 0xc
000000000001b7c3         mov        dword [rbp], 0x9
000000000001b7ca         jmp        loc_1b364

                     loc_1b7cf:
000000000001b7cf         test       r15d, 0x80000                               ; case 21, CODE XREF=peek_token+504
000000000001b7d6         mov        eax, 0x2
000000000001b7db         jne        loc_1b364

000000000001b7e1         mov        byte [rbp+8], 0xc
000000000001b7e5         mov        dword [rbp], 0x6
000000000001b7ec         jmp        loc_1b364

                     loc_1b7f1:
000000000001b7f1         test       r15d, __do_global_dtors_aux                 ; case 18, CODE XREF=peek_token+504
000000000001b7f8         mov        eax, 0x2
000000000001b7fd         jne        loc_1b364

000000000001b803         mov        edx, dword [rsp+0x68+var_60]
000000000001b807         mov        byte [rbp+8], 0x4
000000000001b80b         sub        edx, 0x31
000000000001b80e         movsxd     rdx, edx
000000000001b811         mov        qword [rbp], rdx
000000000001b815         jmp        loc_1b364

                     loc_1b81a:
000000000001b81a         and        r15d, 0x402                                 ; case 4, CODE XREF=peek_token+504
000000000001b821         mov        eax, 0x2
000000000001b826         cmp        r15, 0x2
000000000001b82a         jne        loc_1b364

000000000001b830         jmp        loc_1b5c2

                     loc_1b835:
000000000001b835         test       r15d, 0x2000                                ; case 2, CODE XREF=peek_token+504
000000000001b83c         mov        eax, 0x2
000000000001b841         jne        loc_1b364

000000000001b847         jmp        loc_1b612

                     loc_1b84c:
000000000001b84c         test       r15d, 0x2000                                ; case 1, CODE XREF=peek_token+504
000000000001b853         mov        eax, 0x2
000000000001b858         jne        loc_1b364

000000000001b85e         jmp        loc_1b632

                     loc_1b863:
000000000001b863         test       r15d, 0x80000                               ; case 0, CODE XREF=peek_token+504
000000000001b86a         mov        eax, 0x2
000000000001b86f         jne        loc_1b364

000000000001b875         mov        byte [rbp+8], 0xc
000000000001b879         mov        dword [rbp], 0x80
000000000001b880         jmp        loc_1b364

                     loc_1b885:
000000000001b885         mov        eax, 0x2                                    ; case 83, CODE XREF=peek_token+481, peek_token+504
000000000001b88a         jmp        loc_1b364
000000000001b88f         align      16

                     loc_1b890:
000000000001b890         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=peek_token+419
000000000001b895         mov        rsi, qword [rax]
000000000001b898         movzx      edx, r12b
000000000001b89c         movzx      eax, word [rsi+rdx*2]
000000000001b8a0         shr        ax, 0x3
000000000001b8a4         and        eax, 0x1
000000000001b8a7         cmp        r12b, 0x5f
000000000001b8ab         jmp        loc_1b46a

                     loc_1b8b0:
000000000001b8b0         cmp        eax, 0x1                                    ; CODE XREF=peek_token+389
000000000001b8b3         jle        loc_1b8e4

000000000001b8b5         mov        rcx, qword [rbx+0x10]
000000000001b8b9         lea        rdi, qword [rsi*4]
000000000001b8c1         mov        r8d, dword [rcx+rsi*4]
000000000001b8c5         cmp        r8d, 0xffffffff
000000000001b8c9         je         loc_1b97f

000000000001b8cf         lea        r9, qword [r14+2]
000000000001b8d3         cmp        qword [rbx+0x30], r9
000000000001b8d7         je         loc_1b8e4

000000000001b8d9         cmp        dword [rcx+rdi+4], 0xffffffff
000000000001b8de         je         loc_1b97f

                     loc_1b8e4:
000000000001b8e4         cmp        byte [rbx+0x8c], 0x0                        ; CODE XREF=peek_token+1555, peek_token+1591
000000000001b8eb         mov        rcx, qword [rbx]
000000000001b8ee         mov        rdi, qword [rbx+0x28]
000000000001b8f2         je         loc_1b938

000000000001b8f4         mov        r8, qword [rbx+0x18]
000000000001b8f8         add        rcx, rdi
000000000001b8fb         add        rcx, qword [r8+rsi*8]
000000000001b8ff         movzx      edi, byte [rcx]
000000000001b902         mov        r12d, edi
000000000001b905         mov        dword [rsp+0x68+var_60], edi
000000000001b909         and        edi, 0x80
000000000001b90f         jne        loc_1b42b

000000000001b915         jmp        loc_1b438

                     loc_1b91a:
000000000001b91a         cmp        byte [rdx+r14-1], 0xa                       ; CODE XREF=peek_token+692
000000000001b920         jne        loc_1b50c

000000000001b926         test       r15d, 0x800
000000000001b92d         je         loc_1b50c

000000000001b933         jmp        loc_1b55a

                     loc_1b938:
000000000001b938         add        rcx, rsi                                    ; CODE XREF=peek_token+1618
000000000001b93b         movzx      edi, byte [rcx+rdi]
000000000001b93f         mov        r12d, edi
000000000001b942         mov        dword [rsp+0x68+var_60], edi
000000000001b946         jmp        loc_1b438

                     loc_1b94b:
000000000001b94b         lea        rdi, qword [rsp+0x68+var_58]                ; CODE XREF=peek_token+942
000000000001b950         mov        rdx, r15
000000000001b953         mov        qword [rbx+0x48], r14
000000000001b957         mov        rsi, rbx
000000000001b95a         call       peek_token                                  ; peek_token
000000000001b95f         movzx      eax, byte [rsp+0x68+var_50]
000000000001b964         sub        qword [rbx+0x48], 0x1
000000000001b969         lea        edx, dword [rax-9]
000000000001b96c         mov        eax, 0x1
000000000001b971         cmp        dl, 0x1
000000000001b974         ja         loc_1b364

000000000001b97a         jmp        loc_1b654

                     loc_1b97f:
000000000001b97f         movzx      eax, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1577, peek_token+1598
000000000001b985         mov        byte [rbp+8], 0x1
000000000001b989         mov        r12d, eax
000000000001b98c         mov        byte [rbp], al
000000000001b98f         mov        dword [rsp+0x68+var_60], eax
000000000001b993         jmp        loc_1b451

                     loc_1b998:
000000000001b998         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=peek_token+210
                        ; endp
000000000001b99d         align      32                                          ; End of unwind block (FDE at 0x26b54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fetch_number:
000000000001b9a0         push       r14                                         ; Begin of unwind block (FDE at 0x26ba0), CODE XREF=sub_1baf0+1175, sub_1baf0+1409
000000000001b9a2         mov        r14, rdi
000000000001b9a5         push       r13
000000000001b9a7         mov        r13, rsi
000000000001b9aa         push       r12
000000000001b9ac         mov        r12, 0xfffffffffffffffe
000000000001b9b3         push       rbp
000000000001b9b4         mov        rbp, rdx
000000000001b9b7         push       rbx
000000000001b9b8         mov        rbx, 0xffffffffffffffff
000000000001b9bf         nop

                     loc_1b9c0:
000000000001b9c0         mov        rdx, rbp                                    ; CODE XREF=fetch_number+82, fetch_number+135, fetch_number+177
000000000001b9c3         mov        rsi, r14
000000000001b9c6         mov        rdi, r13
000000000001b9c9         call       peek_token                                  ; peek_token
000000000001b9ce         cdqe
000000000001b9d0         add        qword [r14+0x48], rax
000000000001b9d4         movzx      eax, byte [r13+8]
000000000001b9d9         movzx      edx, byte [r13]
000000000001b9de         cmp        al, 0x2
000000000001b9e0         je         loc_1ba30

000000000001b9e2         cmp        al, 0x18
000000000001b9e4         je         loc_1ba37

000000000001b9e6         cmp        dl, 0x2c
000000000001b9e9         je         loc_1ba37

000000000001b9eb         cmp        al, 0x1
000000000001b9ed         je         loc_1b9f8

                     loc_1b9ef:
000000000001b9ef         mov        rbx, r12                                    ; CODE XREF=fetch_number+93, fetch_number+99
000000000001b9f2         jmp        loc_1b9c0
000000000001b9f4         align      8

                     loc_1b9f8:
000000000001b9f8         lea        eax, dword [rdx-0x30]                       ; CODE XREF=fetch_number+77
000000000001b9fb         cmp        al, 0x9
000000000001b9fd         ja         loc_1b9ef

000000000001b9ff         cmp        rbx, 0xfffffffffffffffe
000000000001ba03         je         loc_1b9ef

000000000001ba05         cmp        rbx, 0xffffffffffffffff
000000000001ba09         je         loc_1ba48

000000000001ba0b         lea        rax, qword [rbx+rbx*4]
000000000001ba0f         lea        rbx, qword [rdx+rax*2]
000000000001ba13         mov        eax, 0x8030
000000000001ba18         cmp        rbx, 0x8030
000000000001ba1f         cmovg      rbx, rax
000000000001ba23         sub        rbx, 0x30
000000000001ba27         jmp        loc_1b9c0
000000000001ba29         align      16

                     loc_1ba30:
000000000001ba30         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=fetch_number+64

                     loc_1ba37:
000000000001ba37         mov        rax, rbx                                    ; CODE XREF=fetch_number+68, fetch_number+73
000000000001ba3a         pop        rbx
000000000001ba3b         pop        rbp
000000000001ba3c         pop        r12
000000000001ba3e         pop        r13
000000000001ba40         pop        r14
000000000001ba42         ret
                        ; endp
000000000001ba43         align      8

                     loc_1ba48:
000000000001ba48         movzx      ebx, dl                                     ; CODE XREF=fetch_number+105
000000000001ba4b         sub        ebx, 0x30
000000000001ba4e         movsxd     rbx, ebx
000000000001ba51         jmp        loc_1b9c0
000000000001ba56         align      32                                          ; End of unwind block (FDE at 0x26ba0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_118: int64_t, -280
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     parse_expression:
000000000001ba60         push       r15                                         ; Begin of unwind block (FDE at 0x26be0), CODE XREF=sub_1c260+2042, parse_branch+57, parse_branch+146
000000000001ba62         push       r14
000000000001ba64         push       r13
000000000001ba66         push       r12
000000000001ba68         push       rbp
000000000001ba69         push       rbx
000000000001ba6a         sub        rsp, 0x128
000000000001ba71         mov        qword [rsp+0x158+var_138], rcx
000000000001ba76         movzx      ecx, byte [rdx+8]
000000000001ba7a         mov        rax, qword [fs:0x28]
000000000001ba83         mov        qword [rsp+0x158+var_40], rax
000000000001ba8b         xor        eax, eax
000000000001ba8d         mov        rax, qword [rsi]
000000000001ba90         mov        qword [rsp+0x158+var_140], rdx
000000000001ba95         mov        qword [rsp+0x158+var_118], r9
000000000001ba9a         cmp        cl, 0x24
000000000001ba9d         mov        qword [rsp+0x158+var_148], rax
000000000001baa2         ja         loc_1bb60

000000000001baa8         mov        rbp, rsi
000000000001baab         lea        rsi, qword [switch_table_22ac4+348]         ; 0x22c20
000000000001bab2         movzx      edx, cl
000000000001bab5         mov        r14, rdi
000000000001bab8         movsxd     rax, dword [rsi+rdx*4]
000000000001babc         add        rax, rsi
000000000001babf         jmp        rax
                        ; endp
000000000001bac1         mov        rbx, qword [rbp+0x30]
000000000001bac5         mov        r15, qword [rsp+0x20]
000000000001baca         mov        rsi, rdi
000000000001bacd         mov        r13, qword [rsp+0x18]
000000000001bad2         mov        qword [rsp], r8
000000000001bad6         lea        rax, qword [rbx+1]
000000000001bada         mov        rdx, r15
000000000001badd         or         rdx, 0x800000
000000000001bae4         mov        rdi, r13
000000000001bae7         mov        qword [rbp+0x30], rax
000000000001baeb         call       peek_token                                  ; peek_token


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1baf0:
000000000001baf0         cdqe
000000000001baf2         add        qword [r14+0x48], rax
000000000001baf6         xor        eax, eax
000000000001baf8         cmp        byte [r13+8], 0x9
000000000001bafd         mov        rdx, r13
000000000001bb00         je         loc_1c600

000000000001bb06         mov        r13, qword [rsp+64]
000000000001bb0b         mov        r8, qword [rsp+0]
000000000001bb0f         mov        rcx, r15                                    ; argument #4 for method parse_reg_exp
000000000001bb12         mov        rsi, rbp                                    ; argument #2 for method parse_reg_exp
000000000001bb15         mov        rdi, r14                                    ; argument #1 for method parse_reg_exp
000000000001bb18         add        r8, 0x1                                     ; argument #5 for method parse_reg_exp
000000000001bb1c         mov        r9, r13                                     ; argument #6 for method parse_reg_exp
000000000001bb1f         call       parse_reg_exp                               ; parse_reg_exp
000000000001bb24         mov        r11d, dword [r13]
000000000001bb28         test       r11d, r11d
000000000001bb2b         jne        sub_1baf0+112

000000000001bb2d         mov        rdx, qword [rsp+24]
000000000001bb32         cmp        byte [rdx+8], 0x9
000000000001bb36         je         loc_1c600

000000000001bb3c         test       rax, rax
000000000001bb3f         je         loc_1bb52

000000000001bb41         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
000000000001bb48         xor        edx, edx                                    ; argument #3 for method postorder
000000000001bb4a         mov        rdi, rax                                    ; argument #1 for method postorder
000000000001bb4d         call       postorder                                   ; postorder

                     loc_1bb52:
000000000001bb52         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1baf0+79
000000000001bb57         mov        dword [rax], 0x8
000000000001bb5d         nop        dword [rax]
                        ; endp

                     loc_1bb60:
000000000001bb60         mov        qword [rsp+0x158+var_130], 0x0              ; CODE XREF=parse_expression+66, sub_1c260+431
000000000001bb69         nop        dword [rax]
000000000001bb70         mov        rdi, qword [rsp+0x158+var_40]               ; CODE XREF=sub_1c260+923, sub_1c260+1015, sub_1c260+2052, sub_1c260+2114
000000000001bb78         xor        rdi, qword [fs:0x28]
000000000001bb81         mov        rax, qword [rsp+0x158+var_130]
000000000001bb86         jne        loc_1cefe

000000000001bb8c         add        rsp, 0x128
000000000001bb93         pop        rbx
000000000001bb94         pop        rbp
000000000001bb95         pop        r12
000000000001bb97         pop        r13
000000000001bb99         pop        r14
000000000001bb9b         pop        r15
000000000001bb9d         ret
                        ; endp
000000000001bb9e         test       qword [rsp+0x20], 0x1000000
000000000001bba7         jne        sub_1baf0+781
000000000001bbad         mov        rax, qword [rsp+0x20]
000000000001bbb2         test       al, 0x20
000000000001bbb4         jne        sub_1baf0+781
000000000001bbba         test       al, 0x10
000000000001bbbc         jne        sub_1c260+1989
000000000001bbc2         cmp        cl, 0x9
000000000001bbc5         je         sub_1c260+888
000000000001bbcb         mov        rax, qword [rsp+0x10]                       ; CODE XREF=sub_1c260+897
000000000001bbd0         mov        r8, qword [rsp+0x18]
000000000001bbd5         xor        ecx, ecx
000000000001bbd7         xor        edx, edx
000000000001bbd9         lea        rsi, qword [rax+0x80]
000000000001bbe0         lea        rdi, qword [rax+0x70]
000000000001bbe4         mov        byte [r8+8], 0x1
000000000001bbe9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001bbee         test       rax, rax
000000000001bbf1         mov        qword [rsp+0x28], rax
000000000001bbf6         je         sub_1c260+872

                     loc_1bbfc:
000000000001bbfc         mov        rbx, qword [rsp+24]                         ; CODE XREF=sub_1c260+416, sub_1c260+425, sub_1c260+580, sub_1c260+636, sub_1c260+649, sub_1c260+729, sub_1c260+990, sub_1c260+1526
000000000001bc01         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
000000000001bc06         mov        rsi, r14                                    ; argument #2 for method peek_token
000000000001bc09         lea        r15, qword [rsp+192]
000000000001bc11         mov        rdi, rbx                                    ; argument #1 for method peek_token
000000000001bc14         call       peek_token                                  ; peek_token
000000000001bc19         cdqe
000000000001bc1b         add        qword [r14+0x48], rax
000000000001bc1f         movzx      eax, byte [rbx+8]
000000000001bc23         nop        dword [rax+rax]

                     loc_1bc28:
000000000001bc28         cmp        al, 0x17                                    ; CODE XREF=sub_1baf0+736, sub_1baf0+748
000000000001bc2a         ja         sub_1baf0+128

000000000001bc30         cmp        al, 0x12
000000000001bc32         mov        ecx, 0x8c0800
000000000001bc37         sete       bl
000000000001bc3a         bt         rcx, rax
000000000001bc3e         jae        sub_1baf0+128

000000000001bc44         mov        rcx, qword [rsp+24]
000000000001bc49         cmp        al, 0x17
000000000001bc4b         mov        rbp, qword [r14+0x48]
000000000001bc4f         movdqa     xmm0, xmmword [rcx]
000000000001bc53         je         loc_1bf78

000000000001bc59         cmp        al, 0x13
000000000001bc5b         movzx      ebx, bl
000000000001bc5e         je         loc_1bf10

000000000001bc64         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
000000000001bc69         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001bc6e         mov        rsi, r14                                    ; argument #2 for method peek_token
000000000001bc71         call       peek_token                                  ; peek_token
000000000001bc76         cdqe
000000000001bc78         add        qword [r14+0x48], rax
000000000001bc7c         cmp        qword [rsp+40], 0x0
000000000001bc82         je         loc_1c010

000000000001bc88         mov        qword [rsp+0], 0xffffffffffffffff

                     loc_1bc90:
000000000001bc90         test       rbx, rbx                                    ; CODE XREF=sub_1baf0+1107
000000000001bc93         mov        rbp, qword [rsp+40]
000000000001bc98         mov        qword [rsp+48], 0x0
000000000001bca1         jg         loc_1be20

                     loc_1bca7:
000000000001bca7         cmp        byte [rbp+0x30], 0x11                       ; CODE XREF=sub_1baf0+993
000000000001bcab         je         loc_1bff0

                     loc_1bcb1:
000000000001bcb1         cmp        qword [rsp+0], 0xffffffffffffffff           ; CODE XREF=sub_1baf0+1299
000000000001bcb6         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
000000000001bcb9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001bcbc         sete       al
000000000001bcbf         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001bcc1         add        eax, 0xa
000000000001bcc4         mov        byte [rsp+200], al
000000000001bccb         mov        rax, qword [rsp+16]
000000000001bcd0         lea        r12, qword [rax+0x70]
000000000001bcd4         lea        r13, qword [rax+0x80]
000000000001bcdb         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001bcde         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
000000000001bce1         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001bce6         test       rax, rax
000000000001bce9         mov        rdx, rax
000000000001bcec         je         loc_1bee0

000000000001bcf2         add        rbx, 0x2
000000000001bcf6         cmp        rbx, qword [rsp+0]
000000000001bcfa         jg         loc_1bd7b

000000000001bcfc         mov        qword [rsp+72], r14
000000000001bd01         mov        r14, rax

                     loc_1bd04:
000000000001bd04         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_1baf0+641
000000000001bd09         mov        rdi, rbp                                    ; argument #1 for method duplicate_tree
000000000001bd0c         call       duplicate_tree                              ; duplicate_tree
000000000001bd11         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001bd14         mov        rbp, rax
000000000001bd17         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001bd1a         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
000000000001bd1d         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
000000000001bd20         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001bd23         mov        byte [rsp+200], 0x10
000000000001bd2b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001bd30         test       rbp, rbp
000000000001bd33         je         loc_1bee0

000000000001bd39         test       rax, rax
000000000001bd3c         je         loc_1bee0

000000000001bd42         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001bd44         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001bd47         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
000000000001bd4a         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
000000000001bd4d         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001bd50         mov        byte [rsp+200], 0xa
000000000001bd58         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001bd5d         test       rax, rax
000000000001bd60         mov        r14, rax
000000000001bd63         je         loc_1bee0

000000000001bd69         add        rbx, 0x1
000000000001bd6d         cmp        rbx, qword [rsp+0]
000000000001bd71         jle        loc_1bd04

000000000001bd73         mov        r14, qword [rsp+72]
000000000001bd78         mov        rdx, rax

                     loc_1bd7b:
000000000001bd7b         mov        rax, qword [rsp+48]                         ; CODE XREF=sub_1baf0+522
000000000001bd80         test       rax, rax
000000000001bd83         je         loc_1c030

000000000001bd89         mov        rcx, rdx                                    ; argument #4 for method create_token_tree.isra.16
000000000001bd8c         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001bd8f         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
000000000001bd92         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
000000000001bd95         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001bd98         mov        byte [rsp+200], 0x10
000000000001bda0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16

                     loc_1bda5:
000000000001bda5         mov        rdi, qword [rsp+64]                         ; CODE XREF=sub_1baf0+1265
000000000001bdaa         mov        edx, dword [rdi]
000000000001bdac         test       edx, edx
000000000001bdae         je         loc_1bdb9

000000000001bdb0         test       rax, rax
000000000001bdb3         je         loc_1c10b

                     loc_1bdb9:
000000000001bdb9         mov        qword [rsp+40], rax                         ; CODE XREF=sub_1baf0+702

                     loc_1bdbe:
000000000001bdbe         test       qword [rsp+32], 0x1000000                   ; CODE XREF=sub_1baf0+1152, sub_1baf0+1349
000000000001bdc7         mov        rax, qword [rsp+24]
000000000001bdcc         movzx      eax, byte [rax+8]
000000000001bdd0         je         loc_1bc28

000000000001bdd6         cmp        al, 0xb
000000000001bdd8         je         loc_1bde2

000000000001bdda         cmp        al, 0x17
000000000001bddc         jne        loc_1bc28

                     loc_1bde2:
000000000001bde2         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_1baf0+744
000000000001bde7         test       rax, rax
000000000001bdea         je         loc_1bdfd

000000000001bdec         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
000000000001bdf3         xor        edx, edx                                    ; argument #3 for method postorder
000000000001bdf5         mov        rdi, rax                                    ; argument #1 for method postorder
000000000001bdf8         call       postorder                                   ; postorder

                     loc_1bdfd:
000000000001bdfd         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1baf0+183, sub_1baf0+196, sub_1baf0+762
000000000001be02         mov        qword [rsp+40], 0x0
000000000001be0b         mov        dword [rax], 0xd
000000000001be11         jmp        sub_1baf0+128
                        ; endp
000000000001be16         nop        word [cs:rax+rax]

                     loc_1be20:
000000000001be20         cmp        rbx, 0x1                                    ; CODE XREF=sub_1baf0+433
000000000001be24         je         loc_1c65c

000000000001be2a         mov        rax, qword [rsp+16]
000000000001be2f         mov        r13, rbp
000000000001be32         mov        qword [rsp+72], r14
000000000001be37         lea        r12, qword [rax+0x80]
000000000001be3e         lea        rdi, qword [rax+0x70]
000000000001be42         mov        rax, rbp
000000000001be45         mov        r14, rax
000000000001be48         mov        ebp, 0x2
000000000001be4d         mov        rsi, r12
000000000001be50         mov        qword [rsp+48], rdi
000000000001be55         mov        r12, r13
000000000001be58         mov        r13, rbx
000000000001be5b         mov        rbx, rsi
000000000001be5e         nop

                     loc_1be60:
000000000001be60         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_1baf0+946
000000000001be65         mov        rdi, r12                                    ; argument #1 for method duplicate_tree
000000000001be68         call       duplicate_tree                              ; duplicate_tree
000000000001be6d         mov        rdi, qword [rsp+48]                         ; argument #1 for method create_token_tree.isra.16
000000000001be72         mov        r12, rax
000000000001be75         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
000000000001be78         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001be7b         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001be7e         mov        rsi, rbx                                    ; argument #2 for method create_token_tree.isra.16
000000000001be81         mov        byte [rsp+200], 0x10
000000000001be89         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001be8e         test       r12, r12
000000000001be91         mov        r14, rax
000000000001be94         je         loc_1bee0

000000000001be96         test       rax, rax
000000000001be99         je         loc_1bee0

000000000001be9b         add        rbp, 0x1
000000000001be9f         cmp        rbp, r13
000000000001bea2         jle        loc_1be60

000000000001bea4         mov        r14, qword [rsp+72]
000000000001bea9         mov        rbx, r13
000000000001beac         mov        qword [rsp+48], rax
000000000001beb1         mov        r13, r12

                     loc_1beb4:
000000000001beb4         cmp        qword [rsp+0], rbx                          ; CODE XREF=sub_1c260+1030
000000000001beb8         je         loc_1c024

000000000001bebe         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree
000000000001bec3         mov        rdi, r13                                    ; argument #1 for method duplicate_tree
000000000001bec6         call       duplicate_tree                              ; duplicate_tree
000000000001becb         test       rax, rax
000000000001bece         mov        rbp, rax
000000000001bed1         jne        loc_1bca7

000000000001bed7         nop        word [rax+rax]

                     loc_1bee0:
000000000001bee0         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1baf0+508, sub_1baf0+579, sub_1baf0+588, sub_1baf0+627, sub_1baf0+932, sub_1baf0+937
000000000001bee5         mov        dword [rax], 0xc

                     loc_1beeb:
000000000001beeb         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder, CODE XREF=sub_1baf0+1141, sub_1baf0+1569
000000000001bef0         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
000000000001bef7         xor        edx, edx                                    ; argument #3 for method postorder
000000000001bef9         call       postorder                                   ; postorder
000000000001befe         mov        qword [rsp+40], 0x0
000000000001bf07         jmp        sub_1baf0+128
                        ; endp
000000000001bf0c         nop        dword [rax]

                     loc_1bf10:
000000000001bf10         mov        qword [rsp+0], 0x1                          ; CODE XREF=sub_1baf0+366

                     loc_1bf18:
000000000001bf18         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_1baf0+1482
000000000001bf1d         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001bf22         mov        rsi, r14                                    ; argument #2 for method peek_token
000000000001bf25         call       peek_token                                  ; peek_token
000000000001bf2a         cdqe
000000000001bf2c         add        qword [r14+0x48], rax
000000000001bf30         cmp        qword [rsp+40], 0x0
000000000001bf36         je         loc_1c010

000000000001bf3c         mov        rax, qword [rsp+0]
000000000001bf40         or         rax, rbx
000000000001bf43         jne        loc_1bc90

000000000001bf49         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder
000000000001bf4e         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
000000000001bf55         xor        edx, edx                                    ; argument #3 for method postorder
000000000001bf57         call       postorder                                   ; postorder
000000000001bf5c         mov        rax, qword [rsp+64]
000000000001bf61         mov        esi, dword [rax]
000000000001bf63         test       esi, esi
000000000001bf65         jne        loc_1beeb

                     loc_1bf67:
000000000001bf67         mov        qword [rsp+40], 0x0                         ; CODE XREF=sub_1baf0+1321
000000000001bf70         jmp        loc_1bdbe
000000000001bf75         nop        dword [rax]

                     loc_1bf78:
000000000001bf78         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_1baf0+355
000000000001bf7d         mov        rsi, rcx                                    ; argument #2 for method fetch_number
000000000001bf80         mov        rdi, r14                                    ; argument #1 for method fetch_number
000000000001bf83         movaps     xmmword [rsp+0], xmm0
000000000001bf87         call       fetch_number                                ; fetch_number
000000000001bf8c         cmp        rax, 0xffffffffffffffff
000000000001bf90         mov        rbx, rax
000000000001bf93         movdqa     xmm0, xmmword [rsp+0]
000000000001bf98         je         loc_1c040

000000000001bf9e         cmp        rax, 0xfffffffffffffffe
000000000001bfa2         je         loc_1bfbd

000000000001bfa4         mov        rax, qword [rsp+24]
000000000001bfa9         movzx      eax, byte [rax+8]
000000000001bfad         cmp        al, 0x18
000000000001bfaf         je         loc_1c0d0

000000000001bfb5         cmp        al, 0x1
000000000001bfb7         je         loc_1c0e3

                     loc_1bfbd:
000000000001bfbd         test       qword [rsp+32], 0x200000                    ; CODE XREF=sub_1baf0+1202, sub_1baf0+1428
000000000001bfc6         je         loc_1cf03

                     loc_1bfcc:
000000000001bfcc         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_1baf0+1546
000000000001bfd1         mov        qword [r14+0x48], rbp
000000000001bfd5         movaps     xmmword [rax], xmm0
000000000001bfd8         mov        byte [rax+8], 0x1
000000000001bfdc         mov        rax, qword [rsp+40]
000000000001bfe1         jmp        loc_1bda5
000000000001bfe6         nop        word [cs:rax+rax]

                     loc_1bff0:
000000000001bff0         mov        rdx, qword [rbp+0x28]                       ; argument #3 for method postorder, CODE XREF=sub_1baf0+443
000000000001bff4         lea        rsi, qword [mark_opt_subexp]                ; argument #2 for method postorder, mark_opt_subexp
000000000001bffb         mov        rdi, rbp                                    ; argument #1 for method postorder
000000000001bffe         call       postorder                                   ; postorder
000000000001c003         jmp        loc_1bcb1
000000000001c008         nop        dword [rax+rax]

                     loc_1c010:
000000000001c010         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1baf0+402, sub_1baf0+1094
000000000001c015         mov        ecx, dword [rax]
000000000001c017         test       ecx, ecx
000000000001c019         je         loc_1bf67

000000000001c01f         jmp        sub_1baf0+112
                        ; endp

                     loc_1c024:
000000000001c024         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_1baf0+968
000000000001c029         nop        dword [rax]

                     loc_1c030:
000000000001c030         mov        qword [rsp+40], rdx                         ; CODE XREF=sub_1baf0+659
000000000001c035         jmp        loc_1bdbe
000000000001c03a         nop        word [rax+rax]

                     loc_1c040:
000000000001c040         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_1baf0+1192
000000000001c045         cmp        byte [rax+8], 0x1
000000000001c049         jne        loc_1c100

000000000001c04f         mov        rax, qword [rsp+24]
000000000001c054         cmp        byte [rax], 0x2c
000000000001c057         jne        loc_1c100

000000000001c05d         xor        ebx, ebx

                     loc_1c05f:
000000000001c05f         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_1baf0+1531
000000000001c064         mov        rsi, qword [rsp+24]                         ; argument #2 for method fetch_number
000000000001c069         mov        rdi, r14                                    ; argument #1 for method fetch_number
000000000001c06c         movaps     xmmword [rsp+48], xmm0
000000000001c071         call       fetch_number                                ; fetch_number
000000000001c076         cmp        rax, 0xfffffffffffffffe
000000000001c07a         mov        qword [rsp+0], rax
000000000001c07e         movdqa     xmm0, xmmword [rsp+48]
000000000001c084         je         loc_1bfbd

000000000001c08a         mov        rax, qword [rsp+0]
000000000001c08e         cmp        rax, 0xffffffffffffffff
000000000001c092         je         loc_1c099

000000000001c094         cmp        rax, rbx
000000000001c097         jl         loc_1c100

                     loc_1c099:
000000000001c099         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_1baf0+1442
000000000001c09e         cmp        byte [rax+8], 0x18
000000000001c0a2         jne        loc_1c100

000000000001c0a4         cmp        qword [rsp+0], 0xffffffffffffffff
000000000001c0a9         jne        loc_1c0d4

000000000001c0ab         xor        eax, eax
000000000001c0ad         cmp        rbx, 0x7fff
000000000001c0b4         setg       al

                     loc_1c0b7:
000000000001c0b7         test       rax, rax                                    ; CODE XREF=sub_1baf0+1521
000000000001c0ba         je         loc_1bf18

000000000001c0c0         mov        rax, qword [rsp+64]
000000000001c0c5         mov        dword [rax], 0xf
000000000001c0cb         jmp        loc_1c10b
000000000001c0cd         nop        dword [rax]

                     loc_1c0d0:
000000000001c0d0         mov        qword [rsp+0], rbx                          ; CODE XREF=sub_1baf0+1215

                     loc_1c0d4:
000000000001c0d4         xor        eax, eax                                    ; CODE XREF=sub_1baf0+1465
000000000001c0d6         cmp        qword [rsp+0], 0x7fff
000000000001c0de         setg       al
000000000001c0e1         jmp        loc_1c0b7

                     loc_1c0e3:
000000000001c0e3         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_1baf0+1223
000000000001c0e8         cmp        byte [rax], 0x2c
000000000001c0eb         je         loc_1c05f

000000000001c0f1         test       qword [rsp+32], 0x200000
000000000001c0fa         jne        loc_1bfcc

                     loc_1c100:
000000000001c100         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1baf0+1369, sub_1baf0+1383, sub_1baf0+1447, sub_1baf0+1458, sub_1c260+3244
000000000001c105         mov        dword [rax], 0xa

                     loc_1c10b:
000000000001c10b         cmp        qword [rsp+40], 0x0                         ; CODE XREF=sub_1baf0+707, sub_1baf0+1499, sub_1c260+3261
000000000001c111         jne        loc_1beeb

000000000001c117         jmp        sub_1baf0+112
                        ; endp
000000000001c11c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c120:
000000000001c120         mov        rax, qword [rsp+24]
000000000001c125         mov        ebp, dword [rax]
000000000001c127         test       ebp, 0x30f
000000000001c12d         je         loc_1c191

000000000001c12f         mov        rax, qword [rsp+16]
000000000001c134         movzx      eax, byte [rax+0xb0]
000000000001c13b         test       al, 0x10
000000000001c13d         jne        loc_1c191

000000000001c13f         mov        rdi, qword [rsp+16]
000000000001c144         or         eax, 0x10
000000000001c147         test       al, 0x8
000000000001c149         mov        byte [rdi+0xb0], al
000000000001c14f         jne        loc_1cd53

000000000001c155         movabs     rdx, 0x3ff000000000000
000000000001c15f         test       al, 0x4
000000000001c161         mov        qword [rdi+0xb8], rdx
000000000001c168         movabs     rdx, 0x7fffffe87fffffe
000000000001c172         mov        qword [rdi+0xc0], rdx
000000000001c179         je         loc_1ccd8

000000000001c17f         pxor       xmm0, xmm0
000000000001c183         mov        rax, qword [rsp+24]
000000000001c188         movups     xmmword [rdi+0xc8], xmm0
000000000001c18f         mov        ebp, dword [rax]

                     loc_1c191:
000000000001c191         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_1c120+13, sub_1c120+29, sub_1c260+2798
000000000001c196         lea        rbx, qword [rax+0x70]
000000000001c19a         lea        r12, qword [rax+0x80]
000000000001c1a1         lea        eax, dword [rbp-0x100]
000000000001c1a7         test       eax, 0xfffffeff
000000000001c1ac         jne        loc_1c81a

000000000001c1b2         cmp        ebp, 0x100
000000000001c1b8         mov        r15, qword [rsp+24]
000000000001c1bd         je         loc_1c7f2

000000000001c1c3         mov        dword [r15], 0x5
000000000001c1ca         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001c1cd         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001c1cf         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001c1d1         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001c1d4         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001c1d7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c1dc         mov        dword [r15], 0xa
000000000001c1e3         mov        rbp, rax

                     loc_1c1e6:
000000000001c1e6         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_1c260+1461
000000000001c1eb         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001c1ed         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001c1ef         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001c1f2         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001c1f5         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c1fa         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
000000000001c202         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
000000000001c205         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001c208         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001c20b         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001c20e         mov        r13, rax
000000000001c211         mov        byte [rsp+200], 0xa
000000000001c219         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c21e         test       rbp, rbp
000000000001c221         mov        rdi, rax
000000000001c224         mov        qword [rsp+40], rax
000000000001c229         sete       dl
000000000001c22c         test       r13, r13
000000000001c22f         sete       al
000000000001c232         or         dl, al
000000000001c234         jne        sub_1c260+872

000000000001c23a         test       rdi, rdi
000000000001c23d         je         sub_1c260+872

                     loc_1c243:
000000000001c243         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_1c260+1494
000000000001c248         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001c24d         mov        rsi, r14                                    ; argument #2 for method peek_token
000000000001c250         call       peek_token                                  ; peek_token
000000000001c255         cdqe
000000000001c257         add        qword [r14+0x48], rax
000000000001c25b         jmp        sub_1baf0+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c260:
000000000001c260         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000001c265         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000001c26a         mov        qword [rsp+152], 0x0
000000000001c276         call       j_calloc                                    ; calloc
000000000001c27b         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000001c280         mov        r12, rax
000000000001c283         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000001c288         call       j_calloc                                    ; calloc
000000000001c28d         test       r12, r12
000000000001c290         mov        r13, rax
000000000001c293         sete       dl
000000000001c296         test       rax, rax
000000000001c299         sete       al
000000000001c29c         or         dl, al
000000000001c29e         jne        loc_1ca79

000000000001c2a4         mov        r10, qword [rsp+24]
000000000001c2a9         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
000000000001c2ae         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
000000000001c2b1         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
000000000001c2b4         call       peek_token_bracket                          ; peek_token_bracket
000000000001c2b9         movsxd     rbx, eax
000000000001c2bc         movzx      eax, byte [r10+8]
000000000001c2c1         cmp        al, 0x2
000000000001c2c3         je         loc_1ca69

000000000001c2c9         cmp        al, 0x19
000000000001c2cb         mov        byte [rsp+87], 0x0
000000000001c2d0         je         loc_1c79a

                     loc_1c2d6:
000000000001c2d6         cmp        al, 0x15                                    ; CODE XREF=sub_1c260+1407
000000000001c2d8         je         loc_1c7e4

                     loc_1c2de:
000000000001c2de         lea        rax, qword [rsp+208]                        ; CODE XREF=sub_1c260+1421
000000000001c2e6         mov        r15, qword [rsp+24]
000000000001c2eb         lea        rbp, qword [switch_table_22cb4]             ; switch_table_22cb4
000000000001c2f2         mov        qword [rsp+72], 0x0
000000000001c2fb         mov        r9d, 0x1
000000000001c301         mov        qword [rsp+48], 0x0
000000000001c30a         mov        qword [rsp+40], rax
000000000001c30f         lea        rax, qword [rsp+160]
000000000001c317         mov        qword [rsp+0], rax
000000000001c31b         lea        rax, qword [rsp+152]
000000000001c323         mov        qword [rsp+88], rax
000000000001c328         lea        rax, qword [rsp+192]
000000000001c330         mov        qword [rsp+96], rax
000000000001c335         lea        rax, qword [rsp+240]
000000000001c33d         mov        qword [rsp+104], rax

                     loc_1c342:
000000000001c342         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_1c260+1112
000000000001c347         mov        r8, qword [rsp+32]                          ; argument #5 for method parse_bracket_element.constprop.37
000000000001c34c         and        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
000000000001c350         mov        rdi, qword [rsp+0]                          ; argument #1 for method parse_bracket_element.constprop.37
000000000001c354         mov        ecx, ebx                                    ; argument #4 for method parse_bracket_element.constprop.37
000000000001c356         mov        rdx, r15                                    ; argument #3 for method parse_bracket_element.constprop.37
000000000001c359         mov        rsi, r14                                    ; argument #2 for method parse_bracket_element.constprop.37
000000000001c35c         mov        dword [rsp+160], 0x3
000000000001c367         mov        qword [rsp+168], rax
000000000001c36f         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
000000000001c374         test       eax, eax
000000000001c376         jne        loc_1c85b

000000000001c37c         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
000000000001c381         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
000000000001c384         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
000000000001c387         call       peek_token_bracket                          ; peek_token_bracket
000000000001c38c         movsxd     rbx, eax
000000000001c38f         mov        eax, dword [rsp+160]
000000000001c396         lea        edx, dword [rax-2]
000000000001c399         and        edx, 0xfffffffd
000000000001c39c         je         loc_1c3b5

000000000001c39e         movzx      edx, byte [r15+8]
000000000001c3a3         cmp        dl, 0x2
000000000001c3a6         je         loc_1c841

000000000001c3ac         cmp        dl, 0x16
000000000001c3af         je         loc_1c867

                     loc_1c3b5:
000000000001c3b5         cmp        eax, 0x4                                    ; CODE XREF=sub_1c260+316, sub_1c260+2141
000000000001c3b8         ja         loc_1cd5a

000000000001c3be         movsxd     rax, dword [rbp+rax*4]
000000000001c3c3         add        rax, rbp
000000000001c3c6         jmp        rax                                         ; switch statement using table at 0x22cb4, with 5 cases, 0x1c685,0x1c6bd,0x1c707,0x1c731,0x1c759
000000000001c3c8         mov        rbx, qword [rsp+0x40]
000000000001c3cd         cmp        cl, 0x23
000000000001c3d0         mov        rsi, qword [rdi+0x78]
000000000001c3d4         sete       r8b
000000000001c3d8         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x21fe1
000000000001c3df         lea        rdx, qword [aSpace]                         ; "space"
000000000001c3e6         movzx      r8d, r8b
000000000001c3ea         mov        r9, rbx
000000000001c3ed         mov        rdi, qword [rsp+0x10]                       ; CODE XREF=sub_1c260+477
000000000001c3f2         call       build_charclass_op                          ; build_charclass_op
000000000001c3f7         mov        edi, dword [rbx]
000000000001c3f9         mov        qword [rsp+0x28], rax
000000000001c3fe         test       edi, edi
000000000001c400         je         sub_1baf0+268
000000000001c406         test       rax, rax
000000000001c409         jne        sub_1baf0+268
000000000001c40f         jmp        sub_1baf0+112
000000000001c414         nop        dword [rax]
000000000001c418         mov        rbx, qword [rsp+0x40]
000000000001c41d         cmp        cl, 0x21
000000000001c420         mov        rsi, qword [rdi+0x78]
000000000001c424         sete       r8b
000000000001c428         lea        rcx, qword [aCoreutils+12]                  ; 0x1fb17
000000000001c42f         lea        rdx, qword [aAlnum]                         ; "alnum"
000000000001c436         movzx      r8d, r8b
000000000001c43a         mov        r9, rbx
000000000001c43d         jmp        sub_1c260+397
000000000001c43f         mov        rax, qword [rsp+0x18]
000000000001c444         mov        rdi, qword [rsp+0x10]
000000000001c449         mov        rcx, qword [rax]
000000000001c44c         mov        eax, 0x1
000000000001c451         shl        eax, cl
000000000001c453         cdqe
000000000001c455         test       qword [rdi+0xa8], rax
000000000001c45c         je         sub_1c260+2094
000000000001c462         mov        rbx, qword [rsp+0x10]
000000000001c467         mov        r8, qword [rsp+0x18]
000000000001c46c         xor        ecx, ecx
000000000001c46e         xor        edx, edx
000000000001c470         or         qword [rbx+0xa0], rax
000000000001c477         lea        rsi, qword [rbx+0x80]
000000000001c47e         lea        rdi, qword [rbx+0x70]
000000000001c482         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c487         test       rax, rax
000000000001c48a         mov        qword [rsp+0x28], rax
000000000001c48f         je         sub_1c260+872
000000000001c495         add        qword [rbx+0x98], 0x1
000000000001c49d         or         byte [rbx+0xb0], 0x2
000000000001c4a4         jmp        sub_1baf0+268
000000000001c4a9         mov        rbx, qword [rsp+0x10]
000000000001c4ae         mov        r8, qword [rsp+0x18]
000000000001c4b3         xor        ecx, ecx
000000000001c4b5         xor        edx, edx
000000000001c4b7         lea        rsi, qword [rbx+0x80]
000000000001c4be         lea        rdi, qword [rbx+0x70]
000000000001c4c2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c4c7         test       rax, rax
000000000001c4ca         mov        qword [rsp+0x28], rax
000000000001c4cf         je         sub_1c260+872
000000000001c4d5         cmp        dword [rbx+0xb4], 0x1
000000000001c4dc         jle        sub_1baf0+268
000000000001c4e2         or         byte [rbx+0xb0], 0x2
000000000001c4e9         jmp        sub_1baf0+268
000000000001c4ee         mov        rax, qword [rsp+0x10]
000000000001c4f3         mov        r8, qword [rsp+0x18]
000000000001c4f8         xor        ecx, ecx
000000000001c4fa         xor        edx, edx
000000000001c4fc         lea        rbx, qword [rax+0x70]
000000000001c500         lea        rbp, qword [rax+0x80]
000000000001c507         mov        rdi, rbx
000000000001c50a         mov        rsi, rbp
000000000001c50d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c512         test       rax, rax
000000000001c515         mov        qword [rsp+0x28], rax
000000000001c51a         je         sub_1c260+872
000000000001c520         mov        rax, qword [rsp+0x10]
000000000001c525         lea        r12, qword [rsp+0xc0]
000000000001c52d         mov        r15, qword [rsp+0x28]
000000000001c532         cmp        dword [rax+0xb4], 0x1
000000000001c539         jle        sub_1baf0+268
000000000001c53f         mov        rax, qword [r14+0x48]                       ; CODE XREF=sub_1c260+866
000000000001c543         cmp        qword [r14+0x68], rax
000000000001c547         jle        sub_1c260+1521
000000000001c54d         cmp        rax, qword [r14+0x30]
000000000001c551         je         sub_1c260+1521
000000000001c557         mov        rdx, qword [r14+0x10]
000000000001c55b         cmp        dword [rdx+rax*4], 0xffffffff
000000000001c55f         jne        sub_1c260+1521
000000000001c565         mov        r13, qword [rsp+0x18]
000000000001c56a         mov        rdx, qword [rsp+0x20]
000000000001c56f         mov        rsi, r14
000000000001c572         mov        rdi, r13
000000000001c575         call       peek_token                                  ; peek_token
000000000001c57a         cdqe
000000000001c57c         add        qword [r14+0x48], rax
000000000001c580         mov        r8, r13
000000000001c583         xor        ecx, ecx
000000000001c585         xor        edx, edx
000000000001c587         mov        rsi, rbp
000000000001c58a         mov        rdi, rbx
000000000001c58d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c592         mov        rdx, r15
000000000001c595         mov        r13, rax
000000000001c598         mov        r8, r12
000000000001c59b         mov        rcx, rax
000000000001c59e         mov        rsi, rbp
000000000001c5a1         mov        rdi, rbx
000000000001c5a4         mov        byte [rsp+0xc8], 0x10
000000000001c5ac         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c5b1         test       r13, r13
000000000001c5b4         mov        r15, rax
000000000001c5b7         sete       dl
000000000001c5ba         test       rax, rax
000000000001c5bd         sete       al
000000000001c5c0         or         dl, al
000000000001c5c2         je         sub_1c260+735

                     loc_1c5c8:
000000000001c5c8         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1baf0+262, sub_1c260+559, sub_1c260+623, sub_1c260+698, sub_1c260+984
000000000001c5cd         mov        dword [rax], 0xc
000000000001c5d3         jmp        sub_1baf0+112
                        ; endp
000000000001c5d8         test       qword [rsp+0x20], 0x20000                   ; CODE XREF=sub_1baf0+213
000000000001c5e1         jne        sub_1baf0+219
000000000001c5e7         mov        rax, qword [rsp+0x40]
000000000001c5ec         mov        qword [rsp+0x28], 0x0
000000000001c5f5         mov        dword [rax], 0x10
000000000001c5fb         jmp        sub_1baf0+128

                     loc_1c600:
000000000001c600         cmp        rbx, 0x8                                    ; CODE XREF=sub_1baf0+16, sub_1baf0+70
000000000001c604         jbe        loc_1c66b

                     loc_1c606:
000000000001c606         mov        rdi, qword [rsp+16]                         ; CODE XREF=sub_1c260+1059
000000000001c60b         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
000000000001c613         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001c615         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
000000000001c618         mov        byte [rsp+200], 0x11
000000000001c620         lea        rsi, qword [rdi+0x80]                       ; argument #2 for method create_token_tree.isra.16
000000000001c627         add        rdi, 0x70                                   ; argument #1 for method create_token_tree.isra.16
000000000001c62b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c630         test       rax, rax
000000000001c633         mov        qword [rsp+40], rax
000000000001c638         je         loc_1c5c8

000000000001c63a         mov        qword [rax+0x28], rbx
000000000001c63e         jmp        loc_1bbfc
000000000001c643         mov        rax, qword [rsp+0x40]
000000000001c648         mov        qword [rsp+0x28], 0x0
000000000001c651         mov        dword [rax], 0x5
000000000001c657         jmp        sub_1baf0+128

                     loc_1c65c:
000000000001c65c         mov        r13, qword [rsp+40]                         ; CODE XREF=sub_1baf0+820
000000000001c661         mov        qword [rsp+48], r13
000000000001c666         jmp        loc_1beb4

                     loc_1c66b:
000000000001c66b         mov        rsi, qword [rsp+16]                         ; CODE XREF=sub_1c260+932
000000000001c670         mov        edx, 0x1
000000000001c675         mov        ecx, ebx
000000000001c677         shl        edx, cl
000000000001c679         movsxd     rdx, edx
000000000001c67c         or         qword [rsi+0xa8], rdx
000000000001c683         jmp        loc_1c606

                     loc_1c685:
000000000001c685         mov        rsi, qword [rsp+168]                        ; case 3, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_1c260+358
000000000001c68d         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
000000000001c690         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
000000000001c695         mov        rdx, qword [rsp+64]
000000000001c69a         test       eax, eax
000000000001c69c         mov        dword [rdx], eax
000000000001c69e         jne        loc_1c6d8

                     loc_1c6a0:
000000000001c6a0         movzx      eax, byte [r15+8]                           ; CODE XREF=sub_1c260+1142, sub_1c260+1228, sub_1c260+1268, sub_1c260+1327, sub_1c260+1984
000000000001c6a5         cmp        al, 0x2
000000000001c6a7         je         loc_1c841

000000000001c6ad         cmp        al, 0x15
000000000001c6af         je         loc_1cac2

000000000001c6b5         xor        r9d, r9d
000000000001c6b8         jmp        loc_1c342

                     loc_1c6bd:
000000000001c6bd         mov        rsi, qword [rsp+168]                        ; case 2, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_1c260+358
000000000001c6c5         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
000000000001c6c8         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
000000000001c6cd         mov        rdx, qword [rsp+64]
000000000001c6d2         test       eax, eax
000000000001c6d4         mov        dword [rdx], eax
000000000001c6d6         je         loc_1c6a0

                     loc_1c6d8:
000000000001c6d8         mov        rdi, r12                                    ; CODE XREF=sub_1c260+1086, sub_1c260+1333, sub_1c260+1516, sub_1c260+1538, sub_1c260+2068, sub_1c260+2350, sub_1c260+2852, sub_1c260+2904, sub_1c260+3128
000000000001c6db         call       sub_2a10                                    ; sub_2a10
000000000001c6e0         mov        rdi, r13                                    ; argument #1 for method free_charset
000000000001c6e3         call       free_charset                                ; free_charset
000000000001c6e8         mov        rax, qword [rsp+64]
000000000001c6ed         mov        r8d, dword [rax]
000000000001c6f0         test       r8d, r8d
000000000001c6f3         jne        sub_1baf0+112

000000000001c6f9         mov        qword [rsp+40], 0x0
000000000001c702         jmp        sub_1baf0+268
                        ; endp

                     loc_1c707:
000000000001c707         mov        rdx, qword [r13+0x28]                       ; case 1, CODE XREF=sub_1c260+358
000000000001c70b         cmp        rdx, qword [rsp+48]
000000000001c710         mov        rax, qword [r13]
000000000001c714         je         loc_1cc0e

                     loc_1c71a:
000000000001c71a         lea        rcx, qword [rdx+1]                          ; CODE XREF=sub_1c260+2526
000000000001c71e         mov        qword [r13+0x28], rcx
000000000001c722         mov        ecx, dword [rsp+168]
000000000001c729         mov        dword [rax+rdx*4], ecx
000000000001c72c         jmp        loc_1c6a0

                     loc_1c731:
000000000001c731         movzx      edx, byte [rsp+168]                         ; case 0, CODE XREF=sub_1c260+358
000000000001c739         mov        esi, 0x1
000000000001c73e         mov        rax, rdx
000000000001c741         and        edx, 0x3f
000000000001c744         shr        rax, 0x3
000000000001c748         mov        ecx, edx
000000000001c74a         and        eax, 0x18
000000000001c74d         shl        rsi, cl
000000000001c750         or         qword [r12+rax], rsi
000000000001c754         jmp        loc_1c6a0

                     loc_1c759:
000000000001c759         sub        rsp, 0x8                                    ; case 4, CODE XREF=sub_1c260+358
000000000001c75d         mov        rdi, qword [r14+0x78]                       ; argument #1 for method build_charclass.isra.29
000000000001c761         lea        rdx, qword [r13+0x18]                       ; argument #3 for method build_charclass.isra.29
000000000001c765         push       qword [rsp+40]                              ; argument #7 for method build_charclass.isra.29
000000000001c769         mov        r9, qword [rsp+184]                         ; argument #6 for method build_charclass.isra.29
000000000001c771         lea        rcx, qword [r13+0x48]                       ; argument #4 for method build_charclass.isra.29
000000000001c775         mov        r8, qword [rsp+104]                         ; argument #5 for method build_charclass.isra.29
000000000001c77a         mov        rsi, r12                                    ; argument #2 for method build_charclass.isra.29
000000000001c77d         call       build_charclass.isra.29                     ; build_charclass.isra.29
000000000001c782         mov        rdx, qword [rsp+80]
000000000001c787         test       eax, eax
000000000001c789         mov        dword [rdx], eax
000000000001c78b         pop        r9
000000000001c78d         pop        r10
000000000001c78f         je         loc_1c6a0

000000000001c795         jmp        loc_1c6d8

                     loc_1c79a:
000000000001c79a         or         byte [r13+0x20], 0x1                        ; CODE XREF=sub_1c260+112
000000000001c79f         test       qword [rsp+32], 0x100
000000000001c7a8         je         loc_1c7b2

000000000001c7aa         or         qword [r12], 0x400

                     loc_1c7b2:
000000000001c7b2         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_1c260+1352
000000000001c7b6         mov        r11, qword [rsp+24]
000000000001c7bb         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
000000000001c7be         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
000000000001c7c3         mov        rdi, r11                                    ; argument #1 for method peek_token_bracket
000000000001c7c6         call       peek_token_bracket                          ; peek_token_bracket
000000000001c7cb         mov        ebx, eax
000000000001c7cd         movzx      eax, byte [r11+8]
000000000001c7d2         cmp        al, 0x2
000000000001c7d4         je         loc_1ca69

000000000001c7da         mov        byte [rsp+87], 0x1
000000000001c7df         jmp        loc_1c2d6

                     loc_1c7e4:
000000000001c7e4         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_1c260+120
000000000001c7e9         mov        byte [rax+8], 0x1
000000000001c7ed         jmp        loc_1c2de

                     loc_1c7f2:
000000000001c7f2         mov        dword [r15], 0x6                            ; CODE XREF=sub_1c120+157
000000000001c7f9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001c7fc         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001c7fe         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001c800         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001c803         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001c806         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c80b         mov        dword [r15], 0x9
000000000001c812         mov        rbp, rax
000000000001c815         jmp        loc_1c1e6

                     loc_1c81a:
000000000001c81a         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_1c120+140
000000000001c81f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001c821         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001c823         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001c826         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001c829         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001c82e         test       rax, rax
000000000001c831         mov        qword [rsp+40], rax
000000000001c836         jne        loc_1c243

000000000001c83c         jmp        sub_1c260+872
                        ; endp

                     loc_1c841:
000000000001c841         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1c260+326, sub_1c260+1095, sub_1c260+1582
000000000001c846         mov        dword [rax], 0x7
000000000001c84c         jmp        loc_1c6d8
000000000001c851         mov        qword [rsp+0x28], r15                       ; CODE XREF=sub_1c260+743, sub_1c260+753, sub_1c260+767
000000000001c856         jmp        sub_1baf0+268

                     loc_1c85b:
000000000001c85b         mov        rdx, qword [rsp+64]                         ; CODE XREF=sub_1c260+278, sub_1c260+1646
000000000001c860         mov        dword [rdx], eax
000000000001c862         jmp        loc_1c6d8

                     loc_1c867:
000000000001c867         movsxd     rax, ebx                                    ; CODE XREF=sub_1c260+335
000000000001c86a         mov        r11, qword [rsp+32]
000000000001c86f         add        qword [r14+0x48], rax
000000000001c873         mov        r10, qword [rsp+96]
000000000001c878         mov        rdx, r11                                    ; argument #3 for method peek_token_bracket
000000000001c87b         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
000000000001c87e         call       peek_token_bracket                          ; peek_token_bracket
000000000001c883         movzx      edx, byte [rsp+200]
000000000001c88b         cmp        dl, 0x2
000000000001c88e         je         loc_1c841

000000000001c890         cmp        dl, 0x15
000000000001c893         je         loc_1caa7

000000000001c899         mov        rdx, qword [rsp+104]
000000000001c89e         lea        rdi, qword [rsp+176]                        ; argument #1 for method parse_bracket_element.constprop.37
000000000001c8a6         mov        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
000000000001c8ac         mov        r8, r11                                     ; argument #5 for method parse_bracket_element.constprop.37
000000000001c8af         mov        ecx, eax                                    ; argument #4 for method parse_bracket_element.constprop.37
000000000001c8b1         mov        dword [rsp+176], 0x3
000000000001c8bc         mov        qword [rsp+184], rdx
000000000001c8c4         mov        rdx, r10                                    ; argument #3 for method parse_bracket_element.constprop.37
000000000001c8c7         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
000000000001c8cc         test       eax, eax
000000000001c8ce         jne        loc_1c85b

000000000001c8d0         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
000000000001c8d5         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
000000000001c8d8         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
000000000001c8db         call       peek_token_bracket                          ; peek_token_bracket
000000000001c8e0         movsxd     rbx, eax
000000000001c8e3         mov        rax, qword [rsp+16]
000000000001c8e8         mov        esi, dword [rsp+160]
000000000001c8ef         mov        r9d, 0x0
000000000001c8f5         cmp        dword [rax+0xb4], 0x1
000000000001c8fc         lea        eax, dword [rsi-2]
000000000001c8ff         cmovg      r9, r13
000000000001c903         and        eax, 0xfffffffd
000000000001c906         je         loc_1cd79

000000000001c90c         mov        r10d, dword [rsp+176]
000000000001c914         lea        eax, dword [r10-2]
000000000001c918         and        eax, 0xfffffffd
000000000001c91b         je         loc_1cd79

000000000001c921         cmp        esi, 0x3
000000000001c924         sete       r11b
000000000001c928         je         loc_1cdbd

                     loc_1c92e:
000000000001c92e         cmp        r10d, 0x3                                   ; CODE XREF=sub_1c260+2939
000000000001c932         je         loc_1cd89

                     loc_1c938:
000000000001c938         test       esi, esi                                    ; CODE XREF=sub_1c260+2887
000000000001c93a         jne        loc_1cca9

000000000001c940         movzx      edx, byte [rsp+168]

                     loc_1c948:
000000000001c948         test       r10d, r10d                                  ; CODE XREF=sub_1c260+2638, sub_1c260+2655
000000000001c94b         jne        loc_1cc8d

000000000001c951         movzx      r8d, byte [rsp+184]

                     loc_1c95a:
000000000001c95a         test       esi, esi                                    ; CODE XREF=sub_1c260+3278
000000000001c95c         je         loc_1cc46

000000000001c962         test       r11b, r11b
000000000001c965         jne        loc_1cc46

000000000001c96b         test       r9, r9
000000000001c96e         mov        edx, dword [rsp+168]
000000000001c975         je         loc_1c994

                     loc_1c977:
000000000001c977         mov        edi, r8d                                    ; argument "__c" for method j_btowc, CODE XREF=sub_1c260+2578, sub_1c260+2586
000000000001c97a         mov        dword [rsp+120], edx
000000000001c97e         mov        qword [rsp+112], r9
000000000001c983         call       j_btowc                                     ; btowc
000000000001c988         mov        r9, qword [rsp+112]
000000000001c98d         mov        edx, dword [rsp+120]
000000000001c991         mov        r8d, eax

                     loc_1c994:
000000000001c994         cmp        edx, 0xffffffff                             ; CODE XREF=sub_1c260+1813, sub_1c260+2600
000000000001c997         je         loc_1cdad

000000000001c99d         cmp        r8d, 0xffffffff
000000000001c9a1         je         loc_1cdad

                     loc_1c9a7:
000000000001c9a7         test       qword [rsp+32], 0x10000                     ; CODE XREF=sub_1c260+2663, sub_1c260+2675
000000000001c9b0         je         loc_1c9bb

000000000001c9b2         cmp        r8d, edx
000000000001c9b5         jb         loc_1cd79

                     loc_1c9bb:
000000000001c9bb         test       r9, r9                                      ; CODE XREF=sub_1c260+1872
000000000001c9be         je         loc_1c9e6

000000000001c9c0         mov        rax, qword [r9+0x40]
000000000001c9c4         cmp        rax, qword [rsp+72]
000000000001c9c9         mov        rcx, qword [r9+8]
000000000001c9cd         je         loc_1cde3

                     loc_1c9d3:
000000000001c9d3         mov        dword [rcx+rax*4], edx                      ; CODE XREF=sub_1c260+3088
000000000001c9d6         mov        rcx, qword [r9+0x10]
000000000001c9da         lea        rsi, qword [rax+1]
000000000001c9de         mov        qword [r9+0x40], rsi
000000000001c9e2         mov        dword [rcx+rax*4], r8d

                     loc_1c9e6:
000000000001c9e6         xor        eax, eax                                    ; CODE XREF=sub_1c260+1886
000000000001c9e8         mov        edi, 0x1

                     loc_1c9ed:
000000000001c9ed         cmp        edx, eax                                    ; CODE XREF=sub_1c260+1971
000000000001c9ef         mov        ecx, eax
000000000001c9f1         ja         loc_1ca09

000000000001c9f3         cmp        r8d, eax
000000000001c9f6         jb         loc_1ca09

000000000001c9f8         mov        rsi, rax
000000000001c9fb         mov        r11, rdi
000000000001c9fe         sar        rsi, 0x6
000000000001ca02         shl        r11, cl
000000000001ca05         or         qword [r12+rsi*8], r11

                     loc_1ca09:
000000000001ca09         add        rax, 0x1                                    ; CODE XREF=sub_1c260+1937, sub_1c260+1942
000000000001ca0d         cmp        rax, 0x100
000000000001ca13         jne        loc_1c9ed

000000000001ca15         mov        rax, qword [rsp+64]
000000000001ca1a         mov        dword [rax], 0x0
000000000001ca20         jmp        loc_1c6a0
000000000001ca25         mov        rbx, qword [rsp+0x18]                       ; CODE XREF=sub_1baf0+204
000000000001ca2a         mov        rdx, rax
000000000001ca2d         mov        rsi, r14
000000000001ca30         mov        qword [rsp], r8
000000000001ca34         mov        r15, rax
000000000001ca37         mov        rdi, rbx
000000000001ca3a         call       peek_token                                  ; peek_token
000000000001ca3f         cdqe
000000000001ca41         add        qword [r14+0x48], rax
000000000001ca45         mov        r9, qword [rsp+0x40]
000000000001ca4a         mov        r8, qword [rsp]
000000000001ca4e         mov        rcx, r15
000000000001ca51         mov        rdx, rbx
000000000001ca54         mov        rsi, rbp
000000000001ca57         mov        rdi, r14
000000000001ca5a         call       parse_expression                            ; parse_expression
000000000001ca5f         mov        qword [rsp+0x28], rax
000000000001ca64         jmp        sub_1baf0+128

                     loc_1ca69:
000000000001ca69         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1c260+99, sub_1c260+1396
000000000001ca6e         mov        dword [rax], 0x2
000000000001ca74         jmp        loc_1c6d8

                     loc_1ca79:
000000000001ca79         mov        rdi, r12                                    ; CODE XREF=sub_1c260+62
000000000001ca7c         call       sub_2a10                                    ; sub_2a10
000000000001ca81         mov        rdi, r13
000000000001ca84         call       sub_2a10                                    ; sub_2a10
000000000001ca89         jmp        sub_1c260+872
                        ; endp
000000000001ca8e         mov        rax, qword [rsp+0x40]                       ; CODE XREF=sub_1c260+508
000000000001ca93         mov        qword [rsp+0x28], 0x0
000000000001ca9c         mov        dword [rax], 0x6
000000000001caa2         jmp        sub_1baf0+128

                     loc_1caa7:
000000000001caa7         mov        eax, ebx                                    ; CODE XREF=sub_1c260+1587
000000000001caa9         neg        eax
000000000001caab         cdqe
000000000001caad         add        qword [r14+0x48], rax
000000000001cab1         mov        byte [r15+8], 0x1
000000000001cab6         mov        eax, dword [rsp+160]
000000000001cabd         jmp        loc_1c3b5

                     loc_1cac2:
000000000001cac2         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_1c260+1103
000000000001cac6         cmp        byte [rsp+87], 0x0
000000000001cacb         je         loc_1cae1

000000000001cacd         lea        rdx, qword [r12+0x20]
000000000001cad2         mov        rax, r12

                     loc_1cad5:
000000000001cad5         not        qword [rax]                                 ; CODE XREF=sub_1c260+2175
000000000001cad8         add        rax, 0x8
000000000001cadc         cmp        rdx, rax
000000000001cadf         jne        loc_1cad5

                     loc_1cae1:
000000000001cae1         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_1c260+2155
000000000001cae6         mov        edx, dword [rax+0xb4]
000000000001caec         cmp        edx, 0x1
000000000001caef         jle        loc_1cb09

000000000001caf1         mov        rcx, qword [rax+0x78]
000000000001caf5         xor        eax, eax

                     loc_1caf7:
000000000001caf7         mov        rsi, qword [rcx+rax]                        ; CODE XREF=sub_1c260+2215
000000000001cafb         and        qword [r12+rax], rsi
000000000001caff         add        rax, 0x8
000000000001cb03         cmp        rax, 0x20
000000000001cb07         jne        loc_1caf7

                     loc_1cb09:
000000000001cb09         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sub_1c260+2191
000000000001cb0e         jne        loc_1cb98

000000000001cb14         cmp        qword [r13+0x30], 0x0
000000000001cb19         jne        loc_1cb98

000000000001cb1b         cmp        qword [r13+0x38], 0x0
000000000001cb20         jne        loc_1cb98

000000000001cb22         cmp        qword [r13+0x40], 0x0
000000000001cb27         jne        loc_1cb98

000000000001cb29         sub        edx, 0x1
000000000001cb2c         jle        loc_1cb3c

000000000001cb2e         cmp        qword [r13+0x48], 0x0
000000000001cb33         jne        loc_1cb98

000000000001cb35         test       byte [r13+0x20], 0x1
000000000001cb3a         jne        loc_1cb98

                     loc_1cb3c:
000000000001cb3c         mov        rdi, r13                                    ; argument #1 for method free_charset, CODE XREF=sub_1c260+2252
000000000001cb3f         call       free_charset                                ; free_charset
000000000001cb44         mov        rax, qword [rsp+16]
000000000001cb49         lea        r8, qword [rsp+176]                         ; argument #5 for method create_token_tree.isra.16
000000000001cb51         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001cb53         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001cb55         mov        byte [rsp+184], 0x3
000000000001cb5d         mov        qword [rsp+176], r12
000000000001cb65         lea        rsi, qword [rax+0x80]                       ; argument #2 for method create_token_tree.isra.16
000000000001cb6c         lea        rdi, qword [rax+0x70]                       ; argument #1 for method create_token_tree.isra.16
000000000001cb70         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001cb75         test       rax, rax
000000000001cb78         mov        qword [rsp+40], rax
000000000001cb7d         jne        sub_1baf0+268

                     loc_1cb83:
000000000001cb83         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1c260+2444, sub_1c260+2512, sub_1c260+3170, sub_1c260+3225
000000000001cb88         mov        dword [rax], 0xc
000000000001cb8e         jmp        loc_1c6d8
000000000001cb93         nop        dword [rax+rax]

                     loc_1cb98:
000000000001cb98         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_1c260+2222, sub_1c260+2233, sub_1c260+2240, sub_1c260+2247, sub_1c260+2259, sub_1c260+2266
000000000001cb9d         lea        r15, qword [rsp+176]
000000000001cba5         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001cba7         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001cba9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001cbac         or         byte [rax+0xb0], 0x2
000000000001cbb3         lea        rbx, qword [rax+0x70]
000000000001cbb7         lea        rbp, qword [rax+0x80]
000000000001cbbe         mov        byte [rsp+184], 0x6
000000000001cbc6         mov        qword [rsp+176], r13
000000000001cbce         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001cbd1         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
000000000001cbd4         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001cbd9         mov        rdi, rax
000000000001cbdc         mov        qword [rsp+40], rax
000000000001cbe1         lea        rdx, qword [r12+0x20]
000000000001cbe6         test       rdi, rdi
000000000001cbe9         mov        rax, r12
000000000001cbec         je         loc_1cb83

                     loc_1cbee:
000000000001cbee         cmp        qword [rax], 0x0                            ; CODE XREF=sub_1c260+2463
000000000001cbf2         jne        loc_1ce9d

000000000001cbf8         add        rax, 0x8
000000000001cbfc         cmp        rdx, rax
000000000001cbff         jne        loc_1cbee

000000000001cc01         mov        rdi, r12
000000000001cc04         call       sub_2a10                                    ; sub_2a10
000000000001cc09         jmp        sub_1baf0+268
                        ; endp

                     loc_1cc0e:
000000000001cc0e         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_1c260+1204
000000000001cc13         lea        rdi, qword [rdx+rdx+1]
000000000001cc18         lea        rsi, qword [rdi*4]                          ; argument "__size" for method j_realloc
000000000001cc20         mov        qword [rsp+48], rdi
000000000001cc25         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000001cc28         call       j_realloc                                   ; realloc
000000000001cc2d         test       rax, rax
000000000001cc30         je         loc_1cb83

000000000001cc36         mov        qword [r13], rax
000000000001cc3a         mov        rdx, qword [r13+0x28]
000000000001cc3e         jmp        loc_1c71a

                     loc_1cc43:
000000000001cc43         xor        r8d, r8d                                    ; CODE XREF=sub_1c260+2617, sub_1c260+2622

                     loc_1cc46:
000000000001cc46         test       r9, r9                                      ; CODE XREF=sub_1c260+1788, sub_1c260+1797
000000000001cc49         je         loc_1ccc4

000000000001cc4b         mov        edi, edx                                    ; argument "__c" for method j_btowc
000000000001cc4d         mov        dword [rsp+120], r8d
000000000001cc52         mov        qword [rsp+112], r9
000000000001cc57         call       j_btowc                                     ; btowc
000000000001cc5c         mov        edx, eax
000000000001cc5e         mov        eax, dword [rsp+176]
000000000001cc65         mov        r9, qword [rsp+112]
000000000001cc6a         mov        r8d, dword [rsp+120]
000000000001cc6f         cmp        eax, 0x3
000000000001cc72         je         loc_1c977

000000000001cc78         test       eax, eax
000000000001cc7a         je         loc_1c977

                     loc_1cc80:
000000000001cc80         mov        r8d, dword [rsp+184]                        ; CODE XREF=sub_1c260+2631, sub_1c260+2673
000000000001cc88         jmp        loc_1c994

                     loc_1cc8d:
000000000001cc8d         cmp        r10d, 0x3                                   ; CODE XREF=sub_1c260+1771
000000000001cc91         je         loc_1cf22

000000000001cc97         test       esi, esi
000000000001cc99         je         loc_1cc43

000000000001cc9b         test       r11b, r11b
000000000001cc9e         jne        loc_1cc43

000000000001cca0         mov        edx, dword [rsp+168]
000000000001cca7         jmp        loc_1cc80

                     loc_1cca9:
000000000001cca9         xor        edx, edx                                    ; CODE XREF=sub_1c260+1754
000000000001ccab         cmp        esi, 0x3
000000000001ccae         jne        loc_1c948

000000000001ccb4         mov        rax, qword [rsp+168]
000000000001ccbc         movzx      edx, byte [rax]
000000000001ccbf         jmp        loc_1c948

                     loc_1ccc4:
000000000001ccc4         test       r10d, r10d                                  ; CODE XREF=sub_1c260+2537
000000000001ccc7         je         loc_1c9a7

000000000001cccd         cmp        r10d, 0x3
000000000001ccd1         jne        loc_1cc80

000000000001ccd3         jmp        loc_1c9a7

                     loc_1ccd8:
000000000001ccd8         mov        ebx, 0x80                                   ; CODE XREF=sub_1c120+89
000000000001ccdd         mov        r12d, 0x2

                     loc_1cce3:
000000000001cce3         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=sub_1c260+2808
000000000001cce8         movsxd     rdx, ebx
000000000001cceb         movsxd     r9, r12d
000000000001ccee         mov        r8d, 0x1
000000000001ccf4         add        rdx, rdx
000000000001ccf7         add        rdx, qword [rax]
000000000001ccfa         mov        rax, qword [rsp+16]
000000000001ccff         lea        rdi, qword [rax+r9*8]

                     loc_1cd03:
000000000001cd03         xor        eax, eax                                    ; CODE XREF=sub_1c260+2796
000000000001cd05         jmp        loc_1cd22
000000000001cd07         nop        word [rax+rax]

                     loc_1cd10:
000000000001cd10         lea        esi, dword [rbx+rax]                        ; CODE XREF=sub_1c260+2760
000000000001cd13         cmp        esi, 0x5f
000000000001cd16         je         loc_1cd2a

                     loc_1cd18:
000000000001cd18         add        rax, 0x1                                    ; CODE XREF=sub_1c260+2775
000000000001cd1c         cmp        rax, 0x40
000000000001cd20         je         loc_1cd39

                     loc_1cd22:
000000000001cd22         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=sub_1c260+2725
000000000001cd26         mov        ecx, eax
000000000001cd28         je         loc_1cd10

                     loc_1cd2a:
000000000001cd2a         mov        rsi, r8                                     ; CODE XREF=sub_1c260+2742
000000000001cd2d         shl        rsi, cl
000000000001cd30         or         qword [rdi+0xb8], rsi
000000000001cd37         jmp        loc_1cd18

                     loc_1cd39:
000000000001cd39         add        r9, 0x1                                     ; CODE XREF=sub_1c260+2752
000000000001cd3d         add        ebx, 0x40
000000000001cd40         sub        rdx, 0xffffffffffffff80
000000000001cd44         add        rdi, 0x8
000000000001cd48         cmp        r9d, 0x3
000000000001cd4c         jle        loc_1cd03

000000000001cd4e         jmp        loc_1c191

                     loc_1cd53:
000000000001cd53         xor        ebx, ebx                                    ; CODE XREF=sub_1c120+47
000000000001cd55         xor        r12d, r12d
000000000001cd58         jmp        loc_1cce3

                     loc_1cd5a:
000000000001cd5a         lea        rcx, qword [__PRETTY_FUNCTION__.7327]       ; argument "__function" for method j___assert_fail, "parse_bracket_exp", CODE XREF=sub_1c260+344
000000000001cd61         lea        rsi, qword [aCoreutils831li_227c0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
000000000001cd68         lea        rdi, qword [aItercurwc0+16]                 ; argument "__assertion" for method j___assert_fail, 0x21506
000000000001cd6f         mov        edx, 0xced                                  ; argument "__line" for method j___assert_fail
000000000001cd74         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1cd79:
000000000001cd79         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1c260+1702, sub_1c260+1723, sub_1c260+1877
000000000001cd7e         mov        dword [rax], 0xb
000000000001cd84         jmp        loc_1c6d8

                     loc_1cd89:
000000000001cd89         mov        rdi, qword [rsp+184]                        ; CODE XREF=sub_1c260+1746
000000000001cd91         xor        eax, eax
000000000001cd93         or         rcx, 0xffffffffffffffff
000000000001cd97         repne scasb al, byte [rdi]
000000000001cd99         mov        rax, rcx
000000000001cd9c         not        rax
000000000001cd9f         sub        rax, 0x1
000000000001cda3         cmp        rax, 0x1
000000000001cda7         jbe        loc_1c938

                     loc_1cdad:
000000000001cdad         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_1c260+1847, sub_1c260+1857, sub_1c260+2945
000000000001cdb2         mov        dword [rax], 0x3
000000000001cdb8         jmp        loc_1c6d8

                     loc_1cdbd:
000000000001cdbd         mov        rdi, qword [rsp+168]                        ; CODE XREF=sub_1c260+1736
000000000001cdc5         xor        eax, eax
000000000001cdc7         or         rcx, 0xffffffffffffffff
000000000001cdcb         repne scasb al, byte [rdi]
000000000001cdcd         mov        rax, rcx
000000000001cdd0         not        rax
000000000001cdd3         sub        rax, 0x1
000000000001cdd7         cmp        rax, 0x1
000000000001cddb         jbe        loc_1c92e

000000000001cde1         jmp        loc_1cdad

                     loc_1cde3:
000000000001cde3         mov        rax, qword [rsp+72]                         ; CODE XREF=sub_1c260+1901
000000000001cde8         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000001cdeb         mov        dword [rsp+140], r8d
000000000001cdf3         mov        dword [rsp+136], edx
000000000001cdfa         mov        qword [rsp+112], r9
000000000001cdff         add        rax, rax
000000000001ce02         add        rax, 0x1
000000000001ce06         lea        r10, qword [rax*4]
000000000001ce0e         mov        qword [rsp+72], rax
000000000001ce13         mov        rsi, r10                                    ; argument "__size" for method j_realloc
000000000001ce16         mov        qword [rsp+128], r10
000000000001ce1e         call       j_realloc                                   ; realloc
000000000001ce23         mov        r9, qword [rsp+112]
000000000001ce28         mov        r10, qword [rsp+128]
000000000001ce30         mov        qword [rsp+120], rax
000000000001ce35         mov        rdi, qword [r9+0x10]                        ; argument "__ptr" for method j_realloc
000000000001ce39         mov        rsi, r10                                    ; argument "__size" for method j_realloc
000000000001ce3c         call       j_realloc                                   ; realloc
000000000001ce41         mov        rcx, qword [rsp+120]
000000000001ce46         test       rcx, rcx
000000000001ce49         je         loc_1ce75

000000000001ce4b         test       rax, rax
000000000001ce4e         mov        r9, qword [rsp+112]
000000000001ce53         mov        edx, dword [rsp+136]
000000000001ce5a         mov        r8d, dword [rsp+140]
000000000001ce62         je         loc_1ce75

000000000001ce64         mov        qword [r9+0x10], rax
000000000001ce68         mov        qword [r9+8], rcx
000000000001ce6c         mov        rax, qword [r9+0x40]
000000000001ce70         jmp        loc_1c9d3

                     loc_1ce75:
000000000001ce75         mov        rdi, rcx                                    ; CODE XREF=sub_1c260+3049, sub_1c260+3074
000000000001ce78         mov        qword [rsp+0], rax
000000000001ce7c         call       sub_2a10                                    ; sub_2a10
000000000001ce81         mov        rax, qword [rsp+0]
000000000001ce85         mov        rdi, rax
000000000001ce88         call       sub_2a10                                    ; sub_2a10
000000000001ce8d         mov        rax, qword [rsp+64]
000000000001ce92         mov        dword [rax], 0xc
000000000001ce98         jmp        loc_1c6d8

                     loc_1ce9d:
000000000001ce9d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16, CODE XREF=sub_1c260+2450
000000000001ce9f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001cea1         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001cea4         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
000000000001cea7         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001ceaa         mov        byte [rsp+184], 0x3
000000000001ceb2         mov        qword [rsp+176], r12
000000000001ceba         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001cebf         test       rax, rax
000000000001cec2         je         loc_1cb83

000000000001cec8         mov        rcx, qword [rsp+40]                         ; argument #4 for method create_token_tree.isra.16
000000000001cecd         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
000000000001ced5         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
000000000001ced8         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
000000000001cedb         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001cede         mov        byte [rsp+200], 0xa
000000000001cee6         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001ceeb         test       rax, rax
000000000001ceee         mov        qword [rsp+40], rax
000000000001cef3         jne        sub_1baf0+268

000000000001cef9         jmp        loc_1cb83

                     loc_1cefe:
000000000001cefe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_1baf0+150
                        ; endp

                     loc_1cf03:
000000000001cf03         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_1baf0+1238
000000000001cf08         cmp        byte [rax+8], 0x2
000000000001cf0c         jne        loc_1c100

000000000001cf12         mov        rax, qword [rsp+64]
000000000001cf17         mov        dword [rax], 0x9
000000000001cf1d         jmp        loc_1c10b

                     loc_1cf22:
000000000001cf22         mov        rax, qword [rsp+184]                        ; CODE XREF=sub_1c260+2609
000000000001cf2a         movzx      r8d, byte [rax]
000000000001cf2e         jmp        loc_1c95a
000000000001cf33         nop        dword [rax]                                 ; End of unwind block (FDE at 0x26be0)
000000000001cf36         nop        word [cs:rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     parse_branch:
000000000001cf40         push       r15                                         ; Begin of unwind block (FDE at 0x26c40), CODE XREF=parse_reg_exp+67, parse_reg_exp+174
000000000001cf42         push       r14
000000000001cf44         mov        r15, rcx
000000000001cf47         push       r13
000000000001cf49         push       r12
000000000001cf4b         mov        r13, rsi
000000000001cf4e         push       rbp
000000000001cf4f         push       rbx
000000000001cf50         mov        rbx, r9
000000000001cf53         mov        rbp, rdx
000000000001cf56         mov        r12, r8
000000000001cf59         sub        rsp, 0x48
000000000001cf5d         mov        rax, qword [fs:0x28]
000000000001cf66         mov        qword [rsp+0x78+var_40], rax
000000000001cf6b         xor        eax, eax
000000000001cf6d         mov        rax, qword [rsi]
000000000001cf70         mov        qword [rsp+0x78+var_78], rdi
000000000001cf74         mov        qword [rsp+0x78+var_68], rax
000000000001cf79         call       parse_expression                            ; parse_expression
000000000001cf7e         mov        edx, dword [rbx]
000000000001cf80         mov        r14, rax
000000000001cf83         test       edx, edx
000000000001cf85         je         loc_1cf90

000000000001cf87         test       rax, rax
000000000001cf8a         je         loc_1d08a

                     loc_1cf90:
000000000001cf90         lea        rax, qword [rsp+0x78+var_58]                ; CODE XREF=parse_branch+69
000000000001cf95         mov        qword [rsp+0x78+var_60], rax
000000000001cf9a         nop        word [rax+rax]

                     loc_1cfa0:
000000000001cfa0         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_branch+303
000000000001cfa4         mov        edx, eax
000000000001cfa6         and        edx, 0xfffffff7
000000000001cfa9         cmp        dl, 0x2
000000000001cfac         je         loc_1d040

                     loc_1cfb2:
000000000001cfb2         cmp        al, 0x9                                     ; CODE XREF=parse_branch+246
000000000001cfb4         jne        loc_1cfbf

000000000001cfb6         test       r12, r12
000000000001cfb9         jne        loc_1d040

                     loc_1cfbf:
000000000001cfbf         mov        rdi, qword [rsp+0x78+var_78]                ; CODE XREF=parse_branch+116
000000000001cfc3         mov        r9, rbx
000000000001cfc6         mov        r8, r12
000000000001cfc9         mov        rcx, r15
000000000001cfcc         mov        rdx, rbp
000000000001cfcf         mov        rsi, r13
000000000001cfd2         call       parse_expression                            ; parse_expression
000000000001cfd7         mov        r9, rax
000000000001cfda         mov        eax, dword [rbx]
000000000001cfdc         test       eax, eax
000000000001cfde         je         loc_1cfe9

000000000001cfe0         test       r9, r9
000000000001cfe3         je         loc_1d074

                     loc_1cfe9:
000000000001cfe9         test       r14, r14                                    ; CODE XREF=parse_branch+158
000000000001cfec         je         loc_1d068

000000000001cfee         test       r9, r9
000000000001cff1         je         loc_1d068

000000000001cff3         mov        rax, qword [rsp+0x78+var_68]
000000000001cff8         mov        r8, qword [rsp+0x78+var_60]
000000000001cffd         mov        rcx, r9
000000000001d000         mov        rdx, r14
000000000001d003         mov        qword [rsp+0x78+var_70], r9
000000000001d008         mov        byte [rsp+0x78+var_50], 0x10
000000000001d00d         lea        rsi, qword [rax+0x80]
000000000001d014         lea        rdi, qword [rax+0x70]
000000000001d018         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001d01d         test       rax, rax
000000000001d020         mov        r9, qword [rsp+0x78+var_70]
000000000001d025         je         loc_1d090

000000000001d027         mov        r14, rax
000000000001d02a         movzx      eax, byte [rbp+8]
000000000001d02e         mov        edx, eax
000000000001d030         and        edx, 0xfffffff7
000000000001d033         cmp        dl, 0x2
000000000001d036         jne        loc_1cfb2

000000000001d03c         nop        dword [rax]

                     loc_1d040:
000000000001d040         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=parse_branch+108, parse_branch+121, parse_branch+333, parse_branch+379
000000000001d045         xor        rcx, qword [fs:0x28]
000000000001d04e         mov        rax, r14
000000000001d051         jne        loc_1d0bd

000000000001d053         add        rsp, 0x48
000000000001d057         pop        rbx
000000000001d058         pop        rbp
000000000001d059         pop        r12
000000000001d05b         pop        r13
000000000001d05d         pop        r14
000000000001d05f         pop        r15
000000000001d061         ret
                        ; endp
000000000001d062         align      8

                     loc_1d068:
000000000001d068         test       r14, r14                                    ; CODE XREF=parse_branch+172, parse_branch+177
000000000001d06b         cmove      r14, r9
000000000001d06f         jmp        loc_1cfa0

                     loc_1d074:
000000000001d074         test       r14, r14                                    ; CODE XREF=parse_branch+163
000000000001d077         je         loc_1d08a

000000000001d079         lea        rsi, qword [free_tree]                      ; free_tree
000000000001d080         xor        edx, edx
000000000001d082         mov        rdi, r14
000000000001d085         call       postorder                                   ; postorder

                     loc_1d08a:
000000000001d08a         xor        r14d, r14d                                  ; CODE XREF=parse_branch+74, parse_branch+311
000000000001d08d         jmp        loc_1d040
000000000001d08f         align      16

                     loc_1d090:
000000000001d090         lea        rsi, qword [free_tree]                      ; free_tree, CODE XREF=parse_branch+229
000000000001d097         mov        rdi, r9
000000000001d09a         xor        edx, edx
000000000001d09c         call       postorder                                   ; postorder
000000000001d0a1         lea        rsi, qword [free_tree]                      ; free_tree
000000000001d0a8         mov        rdi, r14
000000000001d0ab         xor        edx, edx
000000000001d0ad         xor        r14d, r14d
000000000001d0b0         call       postorder                                   ; postorder
000000000001d0b5         mov        dword [rbx], 0xc
000000000001d0bb         jmp        loc_1d040

                     loc_1d0bd:
000000000001d0bd         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_branch+273
                        ; endp
000000000001d0c2         align      16                                          ; End of unwind block (FDE at 0x26c40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     parse_reg_exp:
000000000001d0d0         push       r15                                         ; Begin of unwind block (FDE at 0x26c8c), CODE XREF=sub_1baf0+47, re_compile_internal+1203
000000000001d0d2         push       r14
000000000001d0d4         mov        r14, rcx
000000000001d0d7         push       r13
000000000001d0d9         push       r12
000000000001d0db         mov        r13, r9
000000000001d0de         push       rbp
000000000001d0df         push       rbx
000000000001d0e0         mov        rbp, rdx
000000000001d0e3         mov        r12, rdi
000000000001d0e6         sub        rsp, 0x58
000000000001d0ea         mov        rbx, qword [rsi]
000000000001d0ed         mov        rax, qword [fs:0x28]
000000000001d0f6         mov        qword [rsp+0x88+var_40], rax
000000000001d0fb         xor        eax, eax
000000000001d0fd         mov        qword [rsp+0x88+var_60], rsi
000000000001d102         mov        qword [rsp+0x88+var_78], r8
000000000001d107         mov        rax, qword [rbx+0xa8]
000000000001d10e         mov        qword [rsp+0x88+var_68], rax
000000000001d113         call       parse_branch                                ; parse_branch
000000000001d118         mov        edx, dword [r13]
000000000001d11c         mov        r15, rax
000000000001d11f         test       edx, edx
000000000001d121         je         loc_1d12c

000000000001d123         test       rax, rax
000000000001d126         je         loc_1d212

                     loc_1d12c:
000000000001d12c         lea        rax, qword [rsp+0x88+var_58]                ; CODE XREF=parse_reg_exp+81
000000000001d131         mov        qword [rsp+0x88+var_80], rax
000000000001d136         jmp        loc_1d1c4
000000000001d13b         align      64

                     loc_1d140:
000000000001d140         cmp        al, 0x9                                     ; CODE XREF=parse_reg_exp+290
000000000001d142         jne        loc_1d150

000000000001d144         cmp        qword [rsp+0x88+var_78], 0x0
000000000001d14a         jne        loc_1d1f8

                     loc_1d150:
000000000001d150         mov        rax, qword [rbx+0xa8]                       ; CODE XREF=parse_reg_exp+114
000000000001d157         mov        r8, qword [rsp+0x88+var_78]
000000000001d15c         mov        rcx, r14
000000000001d15f         mov        rsi, qword [rsp+0x88+var_60]
000000000001d164         mov        r9, r13
000000000001d167         mov        rdx, rbp
000000000001d16a         mov        rdi, r12
000000000001d16d         mov        qword [rsp+0x88+var_70], rax
000000000001d172         mov        rax, qword [rsp+0x88+var_68]
000000000001d177         mov        qword [rbx+0xa8], rax
000000000001d17e         call       parse_branch                                ; parse_branch
000000000001d183         mov        rcx, rax
000000000001d186         mov        eax, dword [r13]
000000000001d18a         test       eax, eax
000000000001d18c         je         loc_1d193

000000000001d18e         test       rcx, rcx
000000000001d191         je         loc_1d1fc

                     loc_1d193:
000000000001d193         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=parse_reg_exp+188
000000000001d198         or         qword [rbx+0xa8], rax

                     loc_1d19f:
000000000001d19f         mov        r8, qword [rsp+0x88+var_80]                 ; CODE XREF=parse_reg_exp+298
000000000001d1a4         lea        rsi, qword [rbx+0x80]
000000000001d1ab         lea        rdi, qword [rbx+0x70]
000000000001d1af         mov        rdx, r15
000000000001d1b2         mov        byte [rsp+0x88+var_50], 0xa
000000000001d1b7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001d1bc         test       rax, rax
000000000001d1bf         mov        r15, rax
000000000001d1c2         je         loc_1d240

                     loc_1d1c4:
000000000001d1c4         cmp        byte [rbp+8], 0xa                           ; CODE XREF=parse_reg_exp+102
000000000001d1c8         jne        loc_1d218

000000000001d1ca         mov        rdx, r14
000000000001d1cd         mov        rsi, r12
000000000001d1d0         mov        rdi, rbp
000000000001d1d3         or         rdx, 0x800000
000000000001d1da         call       peek_token                                  ; peek_token
000000000001d1df         cdqe
000000000001d1e1         add        qword [r12+0x48], rax
000000000001d1e6         movzx      eax, byte [rbp+8]
000000000001d1ea         mov        edx, eax
000000000001d1ec         and        edx, 0xfffffff7
000000000001d1ef         cmp        dl, 0x2
000000000001d1f2         jne        loc_1d140

                     loc_1d1f8:
000000000001d1f8         xor        ecx, ecx                                    ; CODE XREF=parse_reg_exp+122
000000000001d1fa         jmp        loc_1d19f

                     loc_1d1fc:
000000000001d1fc         test       r15, r15                                    ; CODE XREF=parse_reg_exp+193
000000000001d1ff         je         loc_1d212

000000000001d201         lea        rsi, qword [free_tree]                      ; free_tree
000000000001d208         xor        edx, edx
000000000001d20a         mov        rdi, r15
000000000001d20d         call       postorder                                   ; postorder

                     loc_1d212:
000000000001d212         xor        r15d, r15d                                  ; CODE XREF=parse_reg_exp+86, parse_reg_exp+303
000000000001d215         nop        dword [rax]

                     loc_1d218:
000000000001d218         mov        rcx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_reg_exp+248, parse_reg_exp+376
000000000001d21d         xor        rcx, qword [fs:0x28]
000000000001d226         mov        rax, r15
000000000001d229         jne        loc_1d24a

000000000001d22b         add        rsp, 0x58
000000000001d22f         pop        rbx
000000000001d230         pop        rbp
000000000001d231         pop        r12
000000000001d233         pop        r13
000000000001d235         pop        r14
000000000001d237         pop        r15
000000000001d239         ret
                        ; endp
000000000001d23a         align      64

                     loc_1d240:
000000000001d240         mov        dword [r13], 0xc                            ; CODE XREF=parse_reg_exp+242
000000000001d248         jmp        loc_1d218

                     loc_1d24a:
000000000001d24a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_reg_exp+345
                        ; endp
000000000001d24f         align      16                                          ; End of unwind block (FDE at 0x26c8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int32_t, -72
        ;    var_4D: int8_t, -77
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int8_t, -248
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     re_compile_internal:
000000000001d250         push       r15                                         ; Begin of unwind block (FDE at 0x26cdc), CODE XREF=rpl_re_compile_pattern+53, rpl_regcomp+164
000000000001d252         push       r14
000000000001d254         push       r13
000000000001d256         push       r12
000000000001d258         push       rbp
000000000001d259         push       rbx
000000000001d25a         sub        rsp, 0x128
000000000001d261         mov        qword [rdi+0x18], rcx
000000000001d265         mov        qword [rdi+0x10], 0x0
000000000001d26d         mov        rax, qword [fs:0x28]
000000000001d276         mov        qword [rsp+0x158+var_40], rax
000000000001d27e         xor        eax, eax
000000000001d280         movzx      eax, byte [rdi+0x38]
000000000001d284         mov        qword [rsp+0x158+var_150], rdi
000000000001d289         mov        qword [rsp+0x158+var_148], rsi
000000000001d28e         mov        qword [rsp+0x158+var_158], rdx
000000000001d292         mov        qword [rsp+0x158+var_140], rcx
000000000001d297         mov        dword [rsp+0x158+var_10C], 0x0
000000000001d29f         mov        qword [rdi+0x30], 0x0
000000000001d2a7         mov        rbx, qword [rdi]
000000000001d2aa         mov        byte [rsp+0x158+var_138], al
000000000001d2ae         and        eax, 0xffffff90
000000000001d2b1         cmp        qword [rdi+8], 0xe7
000000000001d2b9         mov        byte [rdi+0x38], al
000000000001d2bc         jbe        loc_1e0b6

                     loc_1d2c2:
000000000001d2c2         lea        rdi, qword [rbx+8]                          ; CODE XREF=sub_1dbd0+1295
000000000001d2c6         mov        rax, qword [rsp+0x158+var_150]
000000000001d2cb         mov        rcx, rbx
000000000001d2ce         and        rdi, 0xfffffffffffffff8
000000000001d2d2         sub        rcx, rdi
000000000001d2d5         mov        qword [rax+0x10], 0xe8
000000000001d2dd         xor        eax, eax
000000000001d2df         add        ecx, 0xe8
000000000001d2e5         mov        qword [rbx], 0x0
000000000001d2ec         mov        qword [rbx+0xe0], 0x0
000000000001d2f7         shr        ecx, 0x3
000000000001d2fa         rep stosq  qword [rdi], rax
000000000001d2fd         movabs     rax, 0x555555555555554
000000000001d307         mov        dword [rbx+0x80], 0xf
000000000001d311         cmp        qword [rsp+0x158+var_158], rax
000000000001d315         ja         loc_1d956

000000000001d31b         mov        r14, qword [rsp+0x158+var_158]
000000000001d31f         lea        rax, qword [r14+1]
000000000001d323         mov        rdi, rax
000000000001d326         mov        qword [rbx+8], rax
000000000001d32a         mov        qword [rsp+0x158+var_130], rax
000000000001d32f         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
000000000001d333         call       j_malloc                                    ; malloc
000000000001d338         test       r14, r14
000000000001d33b         mov        qword [rbx], rax
000000000001d33e         je         loc_1e025

000000000001d344         mov        esi, 0x1
000000000001d349         nop        dword [rax]

                     loc_1d350:
000000000001d350         add        rsi, rsi                                    ; CODE XREF=re_compile_internal+263
000000000001d353         cmp        qword [rsp+0x158+var_158], rsi
000000000001d357         jae        loc_1d350

000000000001d359         lea        rbp, qword [rsi-1]

                     loc_1d35d:
000000000001d35d         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc, CODE XREF=sub_1dbd0+1116
000000000001d362         call       j_calloc                                    ; calloc
000000000001d367         mov        qword [rbx+0x88], rbp
000000000001d36e         mov        qword [rbx+0x40], rax
000000000001d372         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000001d377         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000001d37c         mov        dword [rbx+0xb4], eax
000000000001d382         call       j_nl_langinfo                               ; nl_langinfo
000000000001d387         movzx      edx, byte [rax]
000000000001d38a         and        edx, 0xffffffdf
000000000001d38d         cmp        dl, 0x55
000000000001d390         jne        loc_1d3e0

000000000001d392         movzx      edx, byte [rax+1]
000000000001d396         and        edx, 0xffffffdf
000000000001d399         cmp        dl, 0x54
000000000001d39c         jne        loc_1d3e0

000000000001d39e         movzx      edx, byte [rax+2]
000000000001d3a2         and        edx, 0xffffffdf
000000000001d3a5         cmp        dl, 0x46
000000000001d3a8         jne        loc_1d3e0

000000000001d3aa         xor        edx, edx
000000000001d3ac         cmp        byte [rax+3], 0x2d
000000000001d3b0         lea        rdi, qword [aErrRegespace+18]               ; 0x22862
000000000001d3b7         mov        ecx, 0x2
000000000001d3bc         sete       dl
000000000001d3bf         lea        rsi, qword [rax+rdx+3]
000000000001d3c4         rep  cmpsb byte [rsi], byte [rdi]
000000000001d3c6         seta       al
000000000001d3c9         sbb        al, 0x0
000000000001d3cb         test       al, al
000000000001d3cd         jne        loc_1d3e0

000000000001d3cf         or         byte [rbx+0xb0], 0x4
000000000001d3d6         nop        word [cs:rax+rax]

                     loc_1d3e0:
000000000001d3e0         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=re_compile_internal+320, re_compile_internal+332, re_compile_internal+344, re_compile_internal+381
000000000001d3e7         mov        edx, eax
000000000001d3e9         and        edx, 0xfffffff7
000000000001d3ec         cmp        dword [rbx+0xb4], 0x1
000000000001d3f3         mov        byte [rbx+0xb0], dl
000000000001d3f9         jle        loc_1d40e

000000000001d3fb         test       al, 0x4
000000000001d3fd         je         loc_1d963

000000000001d403         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
000000000001d40a         mov        qword [rbx+0x78], rax

                     loc_1d40e:
000000000001d40e         cmp        qword [rbx], 0x0                            ; CODE XREF=re_compile_internal+425, re_compile_internal+1939
000000000001d412         je         loc_1d956

000000000001d418         cmp        qword [rbx+0x40], 0x0
000000000001d41d         je         loc_1d956

000000000001d423         mov        rax, qword [rsp+0x158+var_140]
000000000001d428         lea        rbp, qword [rsp+0x158+var_D8]
000000000001d430         mov        ecx, 0x12
000000000001d435         mov        dword [rsp+0x158+var_10C], 0x0
000000000001d43d         lea        r8, qword [rbp+8]
000000000001d441         and        eax, 0x400000
000000000001d446         mov        qword [rsp+0x158+var_138], rax
000000000001d44b         mov        rax, qword [rsp+0x158+var_150]
000000000001d450         setne      dl
000000000001d453         mov        rdi, r8
000000000001d456         mov        rsi, qword [rax+0x28]
000000000001d45a         xor        eax, eax
000000000001d45c         rep stosq  qword [rdi], rax
000000000001d45f         mov        rax, qword [rsp+0x158+var_148]
000000000001d464         mov        rdi, qword [rsp+0x158+var_158]
000000000001d468         test       rsi, rsi
000000000001d46b         mov        byte [rsp+0x158+var_50], dl
000000000001d472         mov        ecx, dword [rbx+0xb4]
000000000001d478         setne      r12b
000000000001d47c         mov        qword [rsp+0x158+var_60], rsi
000000000001d484         mov        qword [rsp+0x158+var_D8], rax
000000000001d48c         movzx      eax, byte [rbx+0xb0]
000000000001d493         or         r12d, edx
000000000001d496         mov        qword [rsp+0x158+var_80], rdi
000000000001d49e         mov        qword [rsp+0x158+var_88], rdi
000000000001d4a6         mov        esi, r12d
000000000001d4a9         mov        byte [rsp+0x158+var_4D], r12b
000000000001d4b1         mov        dword [rsp+0x158+var_48], ecx
000000000001d4b8         mov        qword [rsp+0x158+var_70], rdi
000000000001d4c0         mov        qword [rsp+0x158+var_78], rdi
000000000001d4c8         mov        edx, eax
000000000001d4ca         shr        al, 0x3
000000000001d4cd         shr        dl, 0x2
000000000001d4d0         and        eax, 0x1
000000000001d4d3         and        edx, 0x1
000000000001d4d6         test       rdi, rdi
000000000001d4d9         mov        byte [rsp+0x158+var_4E], al
000000000001d4e0         mov        byte [rsp+0x158+var_4F], dl
000000000001d4e7         jne        loc_1d925

000000000001d4ed         test       sil, sil
000000000001d4f0         je         loc_1d4ff

                     loc_1d4f2:
000000000001d4f2         mov        rax, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1793
000000000001d4fa         mov        qword [rsp+0x158+var_148], rax

                     loc_1d4ff:
000000000001d4ff         cmp        qword [rsp+0x158+var_138], 0x0              ; CODE XREF=re_compile_internal+672, re_compile_internal+1787
000000000001d505         mov        rax, qword [rsp+0x158+var_148]
000000000001d50a         mov        qword [rsp+0x158+var_D0], rax
000000000001d512         je         loc_1d615

000000000001d518         cmp        ecx, 0x1
000000000001d51b         jle        loc_1e10d

                     loc_1d521:
000000000001d521         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+796
000000000001d524         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
000000000001d529         test       eax, eax
000000000001d52b         jne        loc_1d570

000000000001d52d         mov        rax, qword [rsp+0x158+var_158]
000000000001d531         cmp        rax, qword [rsp+0x158+var_A0]
000000000001d539         jle        loc_1e0f0

000000000001d53f         movsxd     rax, dword [rbx+0xb4]
000000000001d546         mov        rsi, qword [rsp+0x158+var_98]
000000000001d54e         add        rax, qword [rsp+0x158+var_A8]
000000000001d556         cmp        rsi, rax
000000000001d559         jg         loc_1e0f0

000000000001d55f         add        rsi, rsi
000000000001d562         mov        rdi, rbp
000000000001d565         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000001d56a         test       eax, eax
000000000001d56c         je         loc_1d521

000000000001d56e         nop

                     loc_1d570:
000000000001d570         mov        dword [rsp+0x158+var_10C], eax              ; CODE XREF=re_compile_internal+731, re_compile_internal+1652, re_compile_internal+1679, re_compile_internal+1764, sub_1dbd0+177, sub_1dbd0+495
000000000001d574         mov        rax, qword [rsp+0x158+var_150]
000000000001d579         mov        r13, qword [rax]

                     loc_1d57c:
000000000001d57c         mov        rdi, qword [r13+0x70]                       ; CODE XREF=sub_1dbd0+1013, sub_1dbd0+1378, sub_1e1e0+124, sub_1e1e0+155
000000000001d580         test       rdi, rdi
000000000001d583         je         loc_1d598

000000000001d585         nop        dword [rax]

                     loc_1d588:
000000000001d588         mov        r12, qword [rdi]                            ; CODE XREF=re_compile_internal+838
000000000001d58b         call       sub_2a10                                    ; sub_2a10
000000000001d590         test       r12, r12
000000000001d593         mov        rdi, r12
000000000001d596         jne        loc_1d588

                     loc_1d598:
000000000001d598         mov        rdi, qword [r13+0x20]                       ; CODE XREF=re_compile_internal+819
000000000001d59c         mov        qword [r13+0x70], 0x0
000000000001d5a4         mov        dword [r13+0x80], 0xf
000000000001d5af         mov        qword [r13+0x68], 0x0
000000000001d5b7         call       sub_2a10                                    ; sub_2a10
000000000001d5bc         mov        qword [r13+0x20], 0x0
000000000001d5c4         mov        rdi, rbp
000000000001d5c7         call       re_string_destruct                          ; re_string_destruct

                     loc_1d5cc:
000000000001d5cc         mov        rdi, rbx                                    ; CODE XREF=re_compile_internal+1806, sub_1dbd0+1000
000000000001d5cf         call       free_dfa_content                            ; free_dfa_content
000000000001d5d4         mov        rax, qword [rsp+0x158+var_150]
000000000001d5d9         mov        qword [rax], 0x0
000000000001d5e0         mov        qword [rax+8], 0x0
000000000001d5e8         mov        eax, dword [rsp+0x158+var_10C]

                     loc_1d5ec:
000000000001d5ec         mov        rbx, qword [rsp+0x158+var_40]               ; CODE XREF=sub_1dbd0+994, sub_1e1e0+134
000000000001d5f4         xor        rbx, qword [fs:0x28]
000000000001d5fd         jne        loc_1e340

000000000001d603         add        rsp, 0x128
000000000001d60a         pop        rbx
000000000001d60b         pop        rbp
000000000001d60c         pop        r12
000000000001d60e         pop        r13
000000000001d610         pop        r14
000000000001d612         pop        r15
000000000001d614         ret
                        ; endp

                     loc_1d615:
000000000001d615         cmp        ecx, 0x1                                    ; CODE XREF=re_compile_internal+706
000000000001d618         jg         loc_1dfca

000000000001d61e         test       r12b, r12b
000000000001d621         mov        rsi, qword [rsp+0x158+var_98]
000000000001d629         je         loc_1dc44

000000000001d62f         cmp        qword [rsp+0x158+var_80], rsi
000000000001d637         mov        rax, qword [rsp+0x158+var_A8]
000000000001d63f         cmovle     rsi, qword [rsp+0x158+var_80]
000000000001d648         cmp        rsi, rax
000000000001d64b         jg         loc_1d65d

000000000001d64d         jmp        loc_1d690
000000000001d64f         align      16

                     loc_1d650:
000000000001d650         mov        rdx, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1086
000000000001d658         mov        qword [rsp+0x158+var_148], rdx

                     loc_1d65d:
000000000001d65d         mov        rdx, qword [rsp+0x158+var_D8]               ; CODE XREF=re_compile_internal+1019
000000000001d665         mov        rcx, qword [rsp+0x158+var_60]
000000000001d66d         add        rdx, rax
000000000001d670         add        rdx, qword [rsp+0x158+var_B0]
000000000001d678         movzx      edx, byte [rdx]
000000000001d67b         movzx      edx, byte [rcx+rdx]
000000000001d67f         mov        rcx, qword [rsp+0x158+var_148]
000000000001d684         mov        byte [rcx+rax], dl
000000000001d687         add        rax, 0x1
000000000001d68b         cmp        rsi, rax
000000000001d68e         jne        loc_1d650

                     loc_1d690:
000000000001d690         mov        qword [rsp+0x158+var_A8], rax               ; CODE XREF=re_compile_internal+1021
000000000001d698         mov        qword [rsp+0x158+var_A0], rax
000000000001d6a0         mov        dword [rsp+0x158+var_10C], 0x0

                     loc_1d6a8:
000000000001d6a8         mov        r12, qword [rsp+0x158+var_150]              ; CODE XREF=sub_1dbd0+140, sub_1dbd0+1034, sub_1dbd0+1320, sub_1dbd0+1357
000000000001d6ad         mov        r14, qword [rsp+0x158+var_140]
000000000001d6b2         lea        r13, qword [rsp+0x158+var_108]
000000000001d6b7         mov        rsi, rbp
000000000001d6ba         mov        rdi, r13
000000000001d6bd         mov        qword [rsp+0x158+var_130], r13
000000000001d6c2         mov        r15, qword [r12]
000000000001d6c6         mov        rdx, r14
000000000001d6c9         mov        qword [r12+0x30], 0x0
000000000001d6d2         or         rdx, 0x800000
000000000001d6d9         mov        qword [r15+0xd8], r14
000000000001d6e0         call       peek_token                                  ; peek_token
000000000001d6e5         lea        r9, qword [rsp+0x158+var_10C]
000000000001d6ea         xor        r8d, r8d
000000000001d6ed         mov        rcx, r14
000000000001d6f0         mov        rdx, r13
000000000001d6f3         mov        rsi, r12
000000000001d6f6         mov        rdi, rbp
000000000001d6f9         cdqe
000000000001d6fb         add        qword [rsp+0x158+var_90], rax
000000000001d703         call       parse_reg_exp                               ; parse_reg_exp
000000000001d708         mov        ecx, dword [rsp+0x158+var_10C]
000000000001d70c         test       ecx, ecx
000000000001d70e         jne        loc_1e137

000000000001d714         lea        r13, qword [r15+0x70]
000000000001d718         lea        r12, qword [rsp+0x158+var_F8]
000000000001d71d         sub        r15, 0xffffffffffffff80
000000000001d721         xor        edx, edx
000000000001d723         xor        ecx, ecx
000000000001d725         mov        rsi, r15
000000000001d728         mov        r8, r12
000000000001d72b         mov        rdi, r13
000000000001d72e         mov        qword [rsp+0x158+var_158], rax
000000000001d732         mov        byte [rsp+0x158+var_F0], 0x2
000000000001d737         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001d73c         mov        r9, qword [rsp+0x158+var_158]
000000000001d740         mov        r11, rax
000000000001d743         mov        rdx, rax
000000000001d746         test       r9, r9
000000000001d749         je         loc_1d772

                     loc_1d74b:
000000000001d74b         mov        rcx, r11                                    ; CODE XREF=sub_1dbd0+1439
000000000001d74e         mov        rdx, r9
000000000001d751         mov        r8, r12
000000000001d754         mov        rsi, r15
000000000001d757         mov        rdi, r13
000000000001d75a         mov        qword [rsp+0x158+var_158], r11
000000000001d75e         mov        byte [rsp+0x158+var_F0], 0x10
000000000001d763         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001d768         mov        r11, qword [rsp+0x158+var_158]
000000000001d76c         mov        rdx, r11
000000000001d76f         mov        r11, rax

                     loc_1d772:
000000000001d772         test       rdx, rdx                                    ; CODE XREF=re_compile_internal+1273
000000000001d775         mov        rcx, qword [rsp+0x158+var_150]
000000000001d77a         sete       dl
000000000001d77d         test       r11, r11
000000000001d780         sete       al
000000000001d783         or         dl, al
000000000001d785         mov        r13, qword [rcx]
000000000001d788         jne        loc_1e122

000000000001d78e         mov        r15, qword [r13+8]
000000000001d792         mov        qword [rbx+0x68], r11
000000000001d796         lea        rcx, qword [r15*8]
000000000001d79e         lea        r15, qword [r15+r15*2]
000000000001d7a2         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
000000000001d7a5         mov        qword [rsp+0x158+var_158], rcx
000000000001d7a9         shl        r15, 0x3
000000000001d7ad         call       j_malloc                                    ; malloc
000000000001d7b2         mov        rcx, qword [rsp+0x158+var_158]
000000000001d7b6         mov        qword [r13+0x18], rax
000000000001d7ba         mov        qword [rsp+0x158+var_140], rax
000000000001d7bf         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
000000000001d7c2         call       j_malloc                                    ; malloc
000000000001d7c7         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001d7ca         mov        qword [r13+0x20], rax
000000000001d7ce         mov        qword [rsp+0x158+var_148], rax
000000000001d7d3         call       j_malloc                                    ; malloc
000000000001d7d8         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001d7db         mov        qword [r13+0x28], rax
000000000001d7df         mov        qword [rsp+0x158+var_158], rax
000000000001d7e3         call       j_malloc                                    ; malloc
000000000001d7e8         mov        rdx, qword [rsp+0x158+var_140]
000000000001d7ed         mov        qword [r13+0x30], rax
000000000001d7f1         mov        rsi, qword [rsp+0x158+var_158]
000000000001d7f5         mov        rcx, qword [rsp+0x158+var_148]
000000000001d7fa         test       rdx, rdx
000000000001d7fd         je         loc_1dfbd

000000000001d803         test       rcx, rcx
000000000001d806         je         loc_1dfbd

000000000001d80c         test       rsi, rsi
000000000001d80f         je         loc_1dfbd

000000000001d815         test       rax, rax
000000000001d818         je         loc_1dfbd

000000000001d81e         mov        rax, qword [rsp+0x158+var_150]
000000000001d823         mov        r15, qword [rax+0x30]
000000000001d827         lea        rdi, qword [r15*8]                          ; argument "__size" for method j_malloc
000000000001d82f         call       j_malloc                                    ; malloc
000000000001d834         test       rax, rax
000000000001d837         mov        qword [r13+0xe0], rax
000000000001d83e         je         loc_1d8ad

000000000001d840         test       r15, r15
000000000001d843         je         loc_1d85d

000000000001d845         xor        edx, edx
000000000001d847         nop        word [rax+rax]

                     loc_1d850:
000000000001d850         mov        qword [rax+rdx*8], rdx                      ; CODE XREF=re_compile_internal+1547
000000000001d854         add        rdx, 0x1
000000000001d858         cmp        rdx, r15
000000000001d85b         jne        loc_1d850

                     loc_1d85d:
000000000001d85d         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1523
000000000001d861         lea        rsi, qword [optimize_subexps]               ; optimize_subexps
000000000001d868         mov        rdx, r13
000000000001d86b         call       preorder                                    ; preorder
000000000001d870         mov        rax, qword [rsp+0x158+var_150]
000000000001d875         mov        rdi, qword [r13+0xe0]
000000000001d87c         mov        rdx, qword [rax+0x30]
000000000001d880         test       rdx, rdx
000000000001d883         je         loc_1e174

000000000001d889         mov        rax, qword [rdi]
000000000001d88c         test       rax, rax
000000000001d88f         je         loc_1d89e

000000000001d891         jmp        loc_1d8ad
000000000001d893         align      8

                     loc_1d898:
000000000001d898         cmp        qword [rdi+rax*8], rax                      ; CODE XREF=re_compile_internal+1621
000000000001d89c         jne        loc_1d8ad

                     loc_1d89e:
000000000001d89e         add        rax, 0x1                                    ; CODE XREF=re_compile_internal+1599
000000000001d8a2         cmp        rdx, rax
000000000001d8a5         ja         loc_1d898

000000000001d8a7         je         loc_1e174

                     loc_1d8ad:
000000000001d8ad         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1518, re_compile_internal+1601, re_compile_internal+1612, sub_1dbd0+1460
000000000001d8b1         mov        rdx, qword [rsp+0x158+var_150]
000000000001d8b6         lea        rsi, qword [lower_subexps]                  ; lower_subexps
000000000001d8bd         call       postorder                                   ; postorder
000000000001d8c2         test       eax, eax
000000000001d8c4         jne        loc_1d570

000000000001d8ca         mov        rdi, qword [r13+0x68]
000000000001d8ce         lea        rsi, qword [calc_first]                     ; calc_first
000000000001d8d5         mov        rdx, r13
000000000001d8d8         call       postorder                                   ; postorder
000000000001d8dd         test       eax, eax
000000000001d8df         jne        loc_1d570

000000000001d8e5         mov        rdi, qword [r13+0x68]
000000000001d8e9         lea        rsi, qword [calc_next]                      ; calc_next
000000000001d8f0         mov        rdx, r13
000000000001d8f3         call       preorder                                    ; preorder
000000000001d8f8         mov        rdx, qword [r13+0x68]
000000000001d8fc         lea        rsi, qword [switch_table_22cb4+20]          ; 0x22cc8
000000000001d903         nop        dword [rax+rax]

                     loc_1d908:
000000000001d908         movzx      ecx, byte [rdx+0x30]                        ; CODE XREF=re_compile_internal+1983
000000000001d90c         mov        rdi, qword [rdx+0x38]
000000000001d910         cmp        cl, 0x10
000000000001d913         ja         loc_1d9e8

000000000001d919         movzx      eax, cl
000000000001d91c         movsxd     rax, dword [rsi+rax*4]
000000000001d920         add        rax, rsi
000000000001d923         jmp        rax
                        ; endp

                     loc_1d925:
000000000001d925         mov        rsi, qword [rsp+0x158+var_130]              ; CODE XREF=re_compile_internal+663
000000000001d92a         mov        rdi, rbp
000000000001d92d         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000001d932         test       eax, eax
000000000001d934         jne        loc_1d570

000000000001d93a         movzx      esi, byte [rsp+0x158+var_4D]
000000000001d942         mov        ecx, dword [rbx+0xb4]
000000000001d948         test       sil, sil
000000000001d94b         je         loc_1d4ff

000000000001d951         jmp        loc_1d4f2

                     loc_1d956:
000000000001d956         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+197, re_compile_internal+450, re_compile_internal+461, re_compile_internal+1833
000000000001d95e         jmp        loc_1d5cc

                     loc_1d963:
000000000001d963         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_compile_internal+429
000000000001d968         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000001d96d         call       j_calloc                                    ; calloc
000000000001d972         test       rax, rax
000000000001d975         mov        qword [rbx+0x78], rax
000000000001d979         je         loc_1d956

000000000001d97b         xor        r12d, r12d
000000000001d97e         xor        ebp, ebp
000000000001d980         mov        r13d, 0x1

                     loc_1d986:
000000000001d986         xor        r15d, r15d                                  ; CODE XREF=re_compile_internal+1937
000000000001d989         nop        dword [rax]

                     loc_1d990:
000000000001d990         lea        r14d, dword [rbp+r15]                       ; CODE XREF=re_compile_internal+1922
000000000001d995         mov        edi, r14d                                   ; argument "__c" for method j_btowc
000000000001d998         call       j_btowc                                     ; btowc
000000000001d99d         cmp        eax, 0xffffffff
000000000001d9a0         je         loc_1d9b5

000000000001d9a2         mov        rsi, qword [rbx+0x78]
000000000001d9a6         mov        rdi, r13
000000000001d9a9         mov        ecx, r15d
000000000001d9ac         shl        rdi, cl
000000000001d9af         add        rsi, r12
000000000001d9b2         or         qword [rsi], rdi

                     loc_1d9b5:
000000000001d9b5         test       r14d, 0xffffff80                            ; CODE XREF=re_compile_internal+1872
000000000001d9bc         jne        loc_1d9ca

000000000001d9be         cmp        eax, r14d
000000000001d9c1         je         loc_1d9ca

000000000001d9c3         or         byte [rbx+0xb0], 0x8

                     loc_1d9ca:
000000000001d9ca         add        r15, 0x1                                    ; CODE XREF=re_compile_internal+1900, re_compile_internal+1905
000000000001d9ce         cmp        r15, 0x40
000000000001d9d2         jne        loc_1d990

000000000001d9d4         add        ebp, 0x40
000000000001d9d7         add        r12, 0x8
000000000001d9db         cmp        ebp, 0x100
000000000001d9e1         jne        loc_1d986

000000000001d9e3         jmp        loc_1d40e

                     loc_1d9e8:
000000000001d9e8         and        ecx, 0x8                                    ; CODE XREF=re_compile_internal+1731
000000000001d9eb         jne        loc_1e302

000000000001d9f1         mov        rax, qword [rdx+0x20]
000000000001d9f5         mov        rcx, qword [rax+0x38]
000000000001d9f9         mov        rax, qword [r13+0x18]
000000000001d9fd         mov        qword [rax+rdi*8], rcx
000000000001da01         mov        r15, qword [rdx+8]
000000000001da05         xor        edi, edi                                    ; CODE XREF=sub_1db00+155
000000000001da07         test       r15, r15
000000000001da0a         je         loc_1da1b

                     loc_1da0c:
000000000001da0c         mov        rdx, r15                                    ; CODE XREF=re_compile_internal+2017
000000000001da0f         jmp        loc_1d908
000000000001da14         align      8

                     loc_1da18:
000000000001da18         mov        rdx, rax                                    ; CODE XREF=re_compile_internal+2028

                     loc_1da1b:
000000000001da1b         mov        r15, qword [rdx+0x10]                       ; CODE XREF=re_compile_internal+1978
000000000001da1f         test       r15, r15
000000000001da22         sete       cl
000000000001da25         cmp        r15, rdi
000000000001da28         sete       al
000000000001da2b         or         cl, al
000000000001da2d         mov        byte [rsp+0x158+var_148], cl
000000000001da31         je         loc_1da0c

000000000001da33         mov        rax, qword [rdx]
000000000001da36         mov        rdi, rdx
000000000001da39         test       rax, rax
000000000001da3c         jne        loc_1da18

000000000001da3e         xor        r14d, r14d
000000000001da41         xor        r15d, r15d
000000000001da44         nop        dword [rax]

                     loc_1da48:
000000000001da48         mov        rdx, qword [r13+0x10]                       ; CODE XREF=sub_1dbd0+201
000000000001da4c         cmp        rdx, r15
000000000001da4f         je         loc_1da76

                     loc_1da51:
000000000001da51         lea        r10, qword [r15+r15*2]                      ; CODE XREF=re_compile_internal+2084, re_compile_internal+2101, sub_1dbd0+233
000000000001da55         mov        rax, qword [r13+0x30]
000000000001da59         shl        r10, 0x3
000000000001da5d         cmp        qword [rax+r10+8], 0x0
000000000001da63         je         loc_1dc68

000000000001da69         mov        rdx, qword [r13+0x10]
000000000001da6d         add        r15, 0x1
000000000001da71         cmp        rdx, r15
000000000001da74         jne        loc_1da51

                     loc_1da76:
000000000001da76         test       r14b, r14b                                  ; CODE XREF=re_compile_internal+2047
000000000001da79         je         loc_1dcbe

                     loc_1da7f:
000000000001da7f         xor        r14d, r14d                                  ; CODE XREF=sub_1dbd0+221
000000000001da82         xor        r15d, r15d
000000000001da85         jmp        loc_1da51
000000000001da87         or         byte [r13+0xb0], 0x1
000000000001da8f         mov        r15, qword [rdx+8]
000000000001da93         test       r15, r15
000000000001da96         je         sub_1dbd0+1241
000000000001da9c         mov        rax, qword [r15+0x18]
000000000001daa0         mov        rcx, qword [rax+0x38]
000000000001daa4         mov        rax, qword [rdx+0x10]                       ; CODE XREF=sub_1dbd0+1249
000000000001daa8         test       rax, rax
000000000001daab         je         sub_1dbd0+1228
000000000001dab1         mov        rax, qword [rax+0x18]
000000000001dab5         mov        r9, qword [rax+0x38]
000000000001dab9         test       rcx, rcx                                    ; CODE XREF=sub_1dbd0+1236
000000000001dabc         js         sub_1e280+161
000000000001dac2         test       r9, r9
000000000001dac5         js         sub_1e280+99
000000000001dacb         mov        rax, qword [r13+0x28]
000000000001dacf         lea        rdi, qword [rdi+rdi*2]
000000000001dad3         mov        qword [rsp+0x38], rsi
000000000001dad8         mov        qword [rsp+0x30], r9
000000000001dadd         mov        qword [rsp+0x18], rcx
000000000001dae2         mov        qword [rsp+0x10], rdx
000000000001dae7         lea        r10, qword [rax+rdi*8]
000000000001daeb         mov        edi, 0x10
000000000001daf0         mov        qword [r10], 0x2
000000000001daf7         mov        qword [rsp], r10
000000000001dafb         call       j_malloc                                    ; malloc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db00:
000000000001db00         mov        r10, qword [rsp+0]
000000000001db04         test       rax, rax
000000000001db07         mov        rdx, qword [rsp+16]
000000000001db0c         mov        rcx, qword [rsp+24]
000000000001db11         mov        r9, qword [rsp+48]
000000000001db16         mov        rsi, qword [rsp+56]
000000000001db1b         mov        qword [r10+0x10], rax
000000000001db1f         je         sub_1dbd0+490

000000000001db25         cmp        rcx, r9
000000000001db28         je         loc_1e0fd

000000000001db2e         mov        qword [r10+8], 0x2
000000000001db36         jl         loc_1e0e4

000000000001db3c         mov        qword [rax], r9
000000000001db3f         mov        qword [rax+8], rcx
000000000001db43         jmp        re_compile_internal+1973
                        ; endp
000000000001db48         mov        rax, qword [rdx+0x20]
000000000001db4c         lea        rcx, qword [rdi+rdi*2]
000000000001db50         mov        edi, 0x8
000000000001db55         mov        qword [rsp+0x10], rsi
000000000001db5a         mov        qword [rsp], rdx
000000000001db5e         mov        r14, qword [rax+0x38]
000000000001db62         mov        rax, qword [r13+0x28]
000000000001db66         lea        r15, qword [rax+rcx*8]
000000000001db6a         mov        qword [r15], 0x1
000000000001db71         mov        qword [r15+8], 0x1
000000000001db79         call       j_malloc                                    ; malloc
000000000001db7e         test       rax, rax
000000000001db81         mov        qword [r15+0x10], rax
000000000001db85         mov        rdx, qword [rsp]
000000000001db89         mov        rsi, qword [rsp+0x10]
000000000001db8e         je         sub_1e1e0+88
000000000001db94         mov        qword [rax], r14
000000000001db97         mov        r15, qword [rdx+8]
000000000001db9b         jmp        re_compile_internal+1973


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dba0:
000000000001dba0         cmp        qword [rdx+0x20], 0x0
000000000001dba5         je         re_compile_internal+1969

000000000001dbab         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes"
000000000001dbb2         lea        rsi, qword [aCoreutils831li_227c0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
000000000001dbb9         lea        rdi, qword [aNodenextNull]                  ; argument "__assertion" for method j___assert_fail, "node->next == NULL"
000000000001dbc0         mov        edx, 0x59f                                  ; argument "__line" for method j___assert_fail
000000000001dbc5         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001dbca         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dbd0:
000000000001dbd0         mov        rax, qword [rdx+0x20]
000000000001dbd4         mov        r15, qword [rax+0x38]
000000000001dbd8         mov        rax, qword [r13+0x18]
000000000001dbdc         mov        qword [rax+rdi*8], r15
000000000001dbe0         cmp        byte [rdx+0x30], 0x4
000000000001dbe4         jne        re_compile_internal+1969

000000000001dbea         mov        rax, qword [r13+0x28]
000000000001dbee         lea        rcx, qword [rdi+rdi*2]
000000000001dbf2         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000001dbf7         mov        qword [rsp+24], rsi
000000000001dbfc         mov        qword [rsp+16], rdx
000000000001dc01         lea        rcx, qword [rax+rcx*8]
000000000001dc05         mov        qword [rcx], 0x1
000000000001dc0c         mov        qword [rcx+8], 0x1
000000000001dc14         mov        qword [rsp+0], rcx
000000000001dc18         call       j_malloc                                    ; malloc
000000000001dc1d         mov        rcx, qword [rsp+0]
000000000001dc21         test       rax, rax
000000000001dc24         mov        rdx, qword [rsp+16]
000000000001dc29         mov        rsi, qword [rsp+24]
000000000001dc2e         mov        qword [rcx+0x10], rax
000000000001dc32         je         sub_1e280                                   ; sub_1e280

000000000001dc38         mov        qword [rax], r15
000000000001dc3b         mov        r15, qword [rdx+8]
000000000001dc3f         jmp        re_compile_internal+1973
                        ; endp

                     loc_1dc44:
000000000001dc44         mov        qword [rsp+0x158+var_A8], rsi               ; CODE XREF=re_compile_internal+985
000000000001dc4c         mov        qword [rsp+0x158+var_A0], rsi
000000000001dc54         mov        dword [rsp+0x158+var_10C], 0x0
000000000001dc5c         jmp        loc_1d6a8
000000000001dc61         align      8

                     loc_1dc68:
000000000001dc68         mov        ecx, 0x1                                    ; CODE XREF=re_compile_internal+2067
000000000001dc6d         mov        rdx, r15
000000000001dc70         mov        rsi, r13
000000000001dc73         mov        rdi, r12
000000000001dc76         mov        qword [rsp+0x158+var_158], r10
000000000001dc7a         call       calc_eclosure_iter                          ; calc_eclosure_iter
000000000001dc7f         test       eax, eax
000000000001dc81         jne        loc_1d570

000000000001dc87         mov        rax, qword [r13+0x30]
000000000001dc8b         mov        r10, qword [rsp+0x158+var_158]
000000000001dc8f         add        r15, 0x1
000000000001dc93         cmp        qword [rax+r10+8], 0x0
000000000001dc99         jne        loc_1da48

000000000001dc9f         mov        rdi, qword [rsp+0x158+var_E8]
000000000001dca4         call       sub_2a10                                    ; sub_2a10
000000000001dca9         cmp        qword [r13+0x10], r15
000000000001dcad         je         loc_1da7f

000000000001dcb3         movzx      r14d, byte [rsp+0x158+var_148]
000000000001dcb9         jmp        loc_1da51

                     loc_1dcbe:
000000000001dcbe         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=re_compile_internal+2089
000000000001dcc3         test       byte [rax+0x38], 0x10
000000000001dcc7         jne        loc_1dcda

000000000001dcc9         cmp        qword [rax+0x30], 0x0
000000000001dcce         je         loc_1dcda

000000000001dcd0         test       byte [r13+0xb0], 0x1
000000000001dcd8         jne        loc_1dce8

                     loc_1dcda:
000000000001dcda         cmp        qword [r13+0x98], 0x0                       ; CODE XREF=sub_1dbd0+247, sub_1dbd0+254
000000000001dce2         je         loc_1dddb

                     loc_1dce8:
000000000001dce8         lea        rdi, qword [rdx+rdx*2]                      ; CODE XREF=sub_1dbd0+264
000000000001dcec         mov        qword [rsp+0x158+var_158], rdx
000000000001dcf0         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000001dcf4         call       j_malloc                                    ; malloc
000000000001dcf9         test       rax, rax
000000000001dcfc         mov        qword [r13+0x38], rax
000000000001dd00         je         loc_1e24c

000000000001dd06         mov        rdx, qword [rsp+0x158+var_158]
000000000001dd0a         xor        esi, esi
000000000001dd0c         xor        ecx, ecx
000000000001dd0e         test       rdx, rdx
000000000001dd11         jne        loc_1dd24

000000000001dd13         jmp        loc_1dddb
000000000001dd18         align      32

                     loc_1dd20:
000000000001dd20         mov        rax, qword [r13+0x38]                       ; CODE XREF=sub_1dbd0+373

                     loc_1dd24:
000000000001dd24         pxor       xmm0, xmm0                                  ; CODE XREF=sub_1dbd0+321
000000000001dd28         add        rax, rsi
000000000001dd2b         add        rcx, 0x1
000000000001dd2f         mov        qword [rax+0x10], 0x0
000000000001dd37         add        rsi, 0x18
000000000001dd3b         movups     xmmword [rax], xmm0
000000000001dd3e         mov        rax, qword [r13+0x10]
000000000001dd42         cmp        rcx, rax
000000000001dd45         jb         loc_1dd20

000000000001dd47         test       rax, rax
000000000001dd4a         je         loc_1dddb

000000000001dd50         mov        rax, qword [r13+0x30]
000000000001dd54         mov        qword [rsp+0x158+var_140], 0x0
000000000001dd5d         mov        qword [rsp+0x158+var_148], 0x0

                     loc_1dd66:
000000000001dd66         mov        rcx, qword [rsp+0x158+var_140]              ; CODE XREF=sub_1dbd0+521
000000000001dd6b         lea        rdx, qword [rax+rcx]
000000000001dd6f         cmp        qword [rdx+8], 0x0
000000000001dd74         mov        rcx, qword [rdx+0x10]
000000000001dd78         jle        loc_1ddc4

000000000001dd7a         xor        r15d, r15d
000000000001dd7d         jmp        loc_1dd98
000000000001dd7f         align      128

                     loc_1dd80:
000000000001dd80         mov        rax, qword [r13+0x30]                       ; CODE XREF=sub_1dbd0+488
000000000001dd84         mov        rdx, qword [rsp+0x158+var_140]
000000000001dd89         add        r15, 0x1
000000000001dd8d         mov        rcx, qword [rsp+0x158+var_158]
000000000001dd91         cmp        r15, qword [rax+rdx+8]
000000000001dd96         jge        loc_1ddc4

                     loc_1dd98:
000000000001dd98         mov        rax, qword [rcx+r15*8]                      ; CODE XREF=sub_1dbd0+429
000000000001dd9c         mov        qword [rsp+0x158+var_158], rcx
000000000001dda0         lea        rsi, qword [rax+rax*2]
000000000001dda4         mov        rax, qword [r13+0x38]
000000000001dda8         lea        rdi, qword [rax+rsi*8]
000000000001ddac         mov        rsi, qword [rsp+0x158+var_148]
000000000001ddb1         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000001ddb6         test       al, al
000000000001ddb8         jne        loc_1dd80

000000000001ddba         mov        eax, 0xc                                    ; CODE XREF=sub_1e1e0+103
000000000001ddbf         jmp        loc_1d570

                     loc_1ddc4:
000000000001ddc4         add        qword [rsp+0x158+var_148], 0x1              ; CODE XREF=sub_1dbd0+424, sub_1dbd0+454
000000000001ddca         add        qword [rsp+0x158+var_140], 0x18
000000000001ddd0         mov        rdx, qword [rsp+0x158+var_148]
000000000001ddd5         cmp        rdx, qword [r13+0x10]
000000000001ddd9         jb         loc_1dd66

                     loc_1dddb:
000000000001dddb         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=sub_1dbd0+274, sub_1dbd0+323, sub_1dbd0+378
000000000001dde2         mov        dword [rsp+0x158+var_10C], 0x0
000000000001ddea         shr        al, 0x2
000000000001dded         cmp        qword [rsp+0x158+var_138], 0x0
000000000001ddf3         sete       dl
000000000001ddf6         and        al, dl
000000000001ddf8         jne        loc_1dfdf

                     loc_1ddfe:
000000000001ddfe         mov        rax, qword [rbx+0x68]                       ; CODE XREF=sub_1dbd0+1049, sub_1e1e0+32, sub_1e1e0+48, sub_1e1e0+65, sub_1e280+34, sub_1e280+89
000000000001de02         mov        rdi, r12
000000000001de05         mov        rax, qword [rax+0x18]
000000000001de09         mov        rax, qword [rax+0x38]
000000000001de0d         lea        rdx, qword [rax+rax*2]
000000000001de11         mov        qword [rbx+0x90], rax
000000000001de18         mov        rax, qword [rbx+0x30]
000000000001de1c         lea        rsi, qword [rax+rdx*8]
000000000001de20         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000001de25         test       eax, eax
000000000001de27         mov        r15d, eax
000000000001de2a         mov        dword [rsp+0x158+var_108], eax
000000000001de2e         jne        loc_1df4f

000000000001de34         cmp        qword [rbx+0x98], 0x0
000000000001de3c         jle        loc_1df10

000000000001de42         mov        r9, qword [rsp+0x158+var_F0]
000000000001de47         test       r9, r9
000000000001de4a         jle        loc_1df10

000000000001de50         xor        r10d, r10d
000000000001de53         lea        r13, qword [r12+0x10]
000000000001de58         jmp        loc_1de6d
000000000001de5a         align      32

                     loc_1de60:
000000000001de60         add        r10, 0x1                                    ; CODE XREF=sub_1dbd0+695, sub_1dbd0+711, sub_1dbd0+774
000000000001de64         cmp        r9, r10
000000000001de67         jle        loc_1df10

                     loc_1de6d:
000000000001de6d         mov        rcx, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_1dbd0+648, sub_1dbd0+818
000000000001de72         mov        rsi, qword [rbx]
000000000001de75         mov        r8, qword [rcx+r10*8]
000000000001de79         mov        rdi, r8
000000000001de7c         shl        rdi, 0x4
000000000001de80         add        rdi, rsi
000000000001de83         cmp        byte [rdi+8], 0x4
000000000001de87         jne        loc_1de60

000000000001de89         xor        edx, edx
000000000001de8b         jmp        loc_1de99
000000000001de8d         align      16

                     loc_1de90:
000000000001de90         add        rdx, 0x1                                    ; CODE XREF=sub_1dbd0+728, sub_1dbd0+736
000000000001de94         cmp        r9, rdx
000000000001de97         je         loc_1de60

                     loc_1de99:
000000000001de99         mov        rax, qword [rcx+rdx*8]                      ; CODE XREF=sub_1dbd0+699
000000000001de9d         shl        rax, 0x4
000000000001dea1         add        rax, rsi
000000000001dea4         cmp        byte [rax+8], 0x9
000000000001dea8         jne        loc_1de90

000000000001deaa         mov        r11, qword [rdi]
000000000001dead         cmp        qword [rax], r11
000000000001deb0         jne        loc_1de90

000000000001deb2         mov        rdx, qword [rbx+0x28]
000000000001deb6         lea        rax, qword [r8+r8*2]
000000000001deba         mov        rsi, r13
000000000001debd         mov        rdi, r9
000000000001dec0         lea        rax, qword [rdx+rax*8]
000000000001dec4         mov        rax, qword [rax+0x10]
000000000001dec8         mov        r11, qword [rax]
000000000001decb         mov        rdx, r11
000000000001dece         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001ded3         test       rax, rax
000000000001ded6         jne        loc_1de60

000000000001ded8         mov        rax, qword [rbx+0x30]
000000000001dedc         lea        rdx, qword [r11+r11*2]
000000000001dee0         mov        rdi, r12
000000000001dee3         lea        rsi, qword [rax+rdx*8]
000000000001dee7         call       re_node_set_merge                           ; re_node_set_merge
000000000001deec         test       eax, eax
000000000001deee         jne        loc_1e230

000000000001def4         mov        r9, qword [rsp+0x158+var_F0]
000000000001def9         mov        r10d, 0x1
000000000001deff         cmp        r9, r10
000000000001df02         jg         loc_1de6d

000000000001df08         nop        dword [rax+rax]

                     loc_1df10:
000000000001df10         mov        rdi, qword [rsp+0x158+var_130]              ; CODE XREF=sub_1dbd0+620, sub_1dbd0+634, sub_1dbd0+663
000000000001df15         xor        ecx, ecx
000000000001df17         mov        rdx, r12
000000000001df1a         mov        rsi, rbx
000000000001df1d         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001df22         test       rax, rax
000000000001df25         mov        qword [rbx+0x48], rax
000000000001df29         je         loc_1e092

000000000001df2f         cmp        byte [rax+0x68], 0x0
000000000001df33         js         loc_1e031

000000000001df39         mov        qword [rbx+0x60], rax
000000000001df3d         mov        qword [rbx+0x58], rax
000000000001df41         mov        qword [rbx+0x50], rax

                     loc_1df45:
000000000001df45         mov        rdi, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_1dbd0+1212
000000000001df4a         call       sub_2a10                                    ; sub_2a10

                     loc_1df4f:
000000000001df4f         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_1dbd0+606, sub_1dbd0+1223, sub_1e1e0+83
000000000001df54         mov        dword [rsp+0x158+var_10C], r15d
000000000001df59         mov        r13, qword [rax]
000000000001df5c         mov        rdi, qword [r13+0x70]
000000000001df60         test       rdi, rdi
000000000001df63         je         loc_1df78

000000000001df65         nop        dword [rax]

                     loc_1df68:
000000000001df68         mov        r12, qword [rdi]                            ; CODE XREF=sub_1dbd0+934
000000000001df6b         call       sub_2a10                                    ; sub_2a10
000000000001df70         test       r12, r12
000000000001df73         mov        rdi, r12
000000000001df76         jne        loc_1df68

                     loc_1df78:
000000000001df78         mov        rdi, qword [r13+0x20]                       ; CODE XREF=sub_1dbd0+915
000000000001df7c         mov        qword [r13+0x70], 0x0
000000000001df84         mov        dword [r13+0x80], 0xf
000000000001df8f         mov        qword [r13+0x68], 0x0
000000000001df97         call       sub_2a10                                    ; sub_2a10
000000000001df9c         mov        qword [r13+0x20], 0x0
000000000001dfa4         mov        rdi, rbp
000000000001dfa7         call       re_string_destruct                          ; re_string_destruct
000000000001dfac         mov        eax, dword [rsp+0x158+var_10C]
000000000001dfb0         test       eax, eax
000000000001dfb2         je         loc_1d5ec

000000000001dfb8         jmp        loc_1d5cc

                     loc_1dfbd:
000000000001dfbd         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1453, re_compile_internal+1462, re_compile_internal+1471, re_compile_internal+1480
000000000001dfc5         jmp        loc_1d57c

                     loc_1dfca:
000000000001dfca         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+968
000000000001dfcd         call       build_wcs_buffer                            ; build_wcs_buffer
000000000001dfd2         mov        dword [rsp+0x158+var_10C], 0x0
000000000001dfda         jmp        loc_1d6a8

                     loc_1dfdf:
000000000001dfdf         mov        rcx, qword [rsp+0x158+var_150]              ; CODE XREF=sub_1dbd0+552
000000000001dfe4         cmp        qword [rcx+0x28], 0x0
000000000001dfe9         jne        loc_1ddfe

000000000001dfef         mov        r10, qword [rbx+0x10]
000000000001dff3         test       r10, r10
000000000001dff6         je         loc_1e2aa

000000000001dffc         mov        rsi, qword [rbx]
000000000001dfff         lea        r9, qword [switch_table_22cb4+88]           ; 0x22d0c
000000000001e006         xor        r8d, r8d
000000000001e009         xor        edx, edx
000000000001e00b         mov        rcx, rsi
000000000001e00e         cmp        byte [rcx+8], 0xc
000000000001e012         ja         loc_1e2de

000000000001e018         movzx      edi, byte [rcx+8]
000000000001e01c         movsxd     rdi, dword [r9+rdi*4]
000000000001e020         add        rdi, r9
000000000001e023         jmp        rdi
                        ; endp

                     loc_1e025:
000000000001e025         xor        ebp, ebp                                    ; CODE XREF=re_compile_internal+238
000000000001e027         mov        esi, 0x1
000000000001e02c         jmp        loc_1d35d

                     loc_1e031:
000000000001e031         mov        r14, qword [rsp+0x158+var_130]              ; CODE XREF=sub_1dbd0+867
000000000001e036         mov        ecx, 0x1
000000000001e03b         mov        rdx, r12
000000000001e03e         mov        rsi, rbx
000000000001e041         mov        rdi, r14
000000000001e044         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001e049         mov        ecx, 0x2
000000000001e04e         mov        rdx, r12
000000000001e051         mov        rsi, rbx
000000000001e054         mov        rdi, r14
000000000001e057         mov        qword [rbx+0x50], rax
000000000001e05b         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001e060         mov        ecx, 0x6
000000000001e065         mov        qword [rbx+0x58], rax
000000000001e069         mov        rdx, r12
000000000001e06c         mov        rsi, rbx
000000000001e06f         mov        rdi, r14
000000000001e072         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001e077         cmp        qword [rbx+0x50], 0x0
000000000001e07c         mov        qword [rbx+0x60], rax
000000000001e080         je         loc_1e092

000000000001e082         cmp        qword [rbx+0x58], 0x0
000000000001e087         je         loc_1e092

000000000001e089         test       rax, rax
000000000001e08c         jne        loc_1df45

                     loc_1e092:
000000000001e092         mov        r15d, dword [rsp+0x158+var_108]             ; CODE XREF=sub_1dbd0+857, sub_1dbd0+1200, sub_1dbd0+1207
000000000001e097         jmp        loc_1df4f
000000000001e09c         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2139
000000000001e0a0         mov        r9, qword [rax+0x38]
000000000001e0a4         jmp        re_compile_internal+2153
000000000001e0a9         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2118
000000000001e0ad         mov        rcx, qword [rax+0x38]
000000000001e0b1         jmp        re_compile_internal+2132

                     loc_1e0b6:
000000000001e0b6         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc, CODE XREF=re_compile_internal+108
000000000001e0b9         mov        esi, 0xe8                                   ; argument "__size" for method j_realloc
000000000001e0be         call       j_realloc                                   ; realloc
000000000001e0c3         test       rax, rax
000000000001e0c6         mov        rbx, rax
000000000001e0c9         je         loc_1e261

000000000001e0cf         mov        rax, qword [rsp+0x158+var_150]
000000000001e0d4         mov        qword [rax+8], 0xe8
000000000001e0dc         mov        qword [rax], rbx
000000000001e0df         jmp        loc_1d2c2

                     loc_1e0e4:
000000000001e0e4         mov        qword [rax], rcx                            ; CODE XREF=sub_1db00+54
000000000001e0e7         mov        qword [rax+8], r9
000000000001e0eb         jmp        re_compile_internal+1973
                        ; endp

                     loc_1e0f0:
000000000001e0f0         mov        dword [rsp+0x158+var_10C], 0x0              ; CODE XREF=re_compile_internal+745, re_compile_internal+777
000000000001e0f8         jmp        loc_1d6a8

                     loc_1e0fd:
000000000001e0fd         mov        qword [r10+8], 0x1                          ; CODE XREF=sub_1db00+40
000000000001e105         mov        qword [rax], rcx
000000000001e108         jmp        re_compile_internal+1973
                        ; endp

                     loc_1e10d:
000000000001e10d         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+715
000000000001e110         call       build_upper_buffer                          ; build_upper_buffer
000000000001e115         mov        dword [rsp+0x158+var_10C], 0x0
000000000001e11d         jmp        loc_1d6a8

                     loc_1e122:
000000000001e122         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1336
000000000001e12a         mov        qword [rbx+0x68], 0x0
000000000001e132         jmp        loc_1d57c

                     loc_1e137:
000000000001e137         test       rax, rax                                    ; CODE XREF=re_compile_internal+1214
000000000001e13a         je         loc_1e26b

000000000001e140         lea        r13, qword [r15+0x70]
000000000001e144         lea        r12, qword [rsp+0x158+var_F8]
000000000001e149         sub        r15, 0xffffffffffffff80
000000000001e14d         xor        ecx, ecx
000000000001e14f         xor        edx, edx
000000000001e151         mov        rsi, r15
000000000001e154         mov        r8, r12
000000000001e157         mov        rdi, r13
000000000001e15a         mov        qword [rsp+0x158+var_158], rax
000000000001e15e         mov        byte [rsp+0x158+var_F0], 0x2
000000000001e163         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001e168         mov        r9, qword [rsp+0x158+var_158]
000000000001e16c         mov        r11, rax
000000000001e16f         jmp        loc_1d74b

                     loc_1e174:
000000000001e174         call       sub_2a10                                    ; sub_2a10, CODE XREF=re_compile_internal+1587, re_compile_internal+1623
000000000001e179         mov        qword [r13+0xe0], 0x0
000000000001e184         jmp        loc_1d8ad
000000000001e189         mov        r8d, eax

                     loc_1e18c:
000000000001e18c         add        rdx, 0x1                                    ; CODE XREF=sub_1e1e0+7, sub_1e1e0+14, sub_1e1e0+25, sub_1e1e0+30, sub_1e1e0+59, sub_1e280+28
000000000001e190         add        rcx, 0x10
000000000001e194         cmp        rdx, r10
000000000001e197         jne        sub_1dbd0+1086

000000000001e19d         or         r14b, r8b
000000000001e1a0         je         sub_1e280+42

000000000001e1a6         mov        rax, rdx
000000000001e1a9         shl        rax, 0x4
000000000001e1ad         add        rax, rsi
000000000001e1b0         jmp        loc_1e1c8

                     loc_1e1b2:
000000000001e1b2         cmp        dl, 0x5                                     ; CODE XREF=sub_1dbd0+1535
000000000001e1b5         jne        loc_1e1bb

000000000001e1b7         mov        byte [rsi+8], 0x7

                     loc_1e1bb:
000000000001e1bb         add        rsi, 0x10                                   ; CODE XREF=sub_1dbd0+1509, sub_1dbd0+1540, sub_1dbd0+1546
000000000001e1bf         cmp        rax, rsi
000000000001e1c2         je         loc_1e2a7

                     loc_1e1c8:
000000000001e1c8         movzx      edx, byte [rsi+8]                           ; CODE XREF=sub_1dbd0+1504
000000000001e1cc         cmp        dl, 0x1
000000000001e1cf         jne        loc_1e1b2

000000000001e1d1         cmp        byte [rsi], 0x0
000000000001e1d4         jns        loc_1e1bb

000000000001e1d6         and        byte [rsi+0xa], 0xdf
000000000001e1da         jmp        loc_1e1bb
000000000001e1dc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e1e0:
000000000001e1e0         cmp        byte [rcx], 0x0
000000000001e1e3         cmovs      r14d, eax
000000000001e1e7         jmp        loc_1e18c
000000000001e1e9         mov        edi, dword [rcx]
000000000001e1eb         cmp        edi, 0x20
000000000001e1ee         je         sub_1dbd0+1468
000000000001e1f0         jbe        sub_1e280+25
000000000001e1f6         cmp        edi, 0x40
000000000001e1f9         je         sub_1dbd0+1468
000000000001e1fb         add        edi, 0xffffff80
000000000001e1fe         je         sub_1dbd0+1468
000000000001e200         jmp        sub_1dbd0+558
000000000001e205         nop        dword [rax]
000000000001e208         mov        rdi, qword [rcx]
000000000001e20b         cmp        qword [rdi+0x10], 0x0
000000000001e210         jne        sub_1dbd0+558
000000000001e216         cmp        qword [rdi+0x18], 0x0
000000000001e21b         je         sub_1dbd0+1468
000000000001e221         jmp        sub_1dbd0+558
000000000001e226         nop        word [cs:rax+rax]

                     loc_1e230:
000000000001e230         mov        r15d, eax                                   ; CODE XREF=sub_1dbd0+798
000000000001e233         jmp        loc_1df4f
000000000001e238         mov        qword [r15+8], 0x0                          ; CODE XREF=sub_1db00+142
000000000001e240         mov        qword [r15], 0x0
000000000001e247         jmp        sub_1dbd0+490

                     loc_1e24c:
000000000001e24c         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_1dbd0+304
000000000001e251         mov        dword [rsp+0x158+var_10C], 0xc
000000000001e259         mov        r13, qword [rax]
000000000001e25c         jmp        loc_1d57c

                     loc_1e261:
000000000001e261         mov        eax, 0xc                                    ; CODE XREF=sub_1dbd0+1273
000000000001e266         jmp        loc_1d5ec

                     loc_1e26b:
000000000001e26b         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_1dbd0+1386
000000000001e270         mov        qword [rbx+0x68], 0x0
000000000001e278         mov        r13, qword [rax]
000000000001e27b         jmp        loc_1d57c


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e280:
000000000001e280         mov        qword [rcx+8], 0x0
000000000001e288         mov        qword [rcx], 0x0
000000000001e28f         mov        eax, 0xc
000000000001e294         jmp        re_compile_internal+800
                        ; endp
000000000001e299         cmp        edi, 0x10                                   ; CODE XREF=sub_1e1e0+16
000000000001e29c         je         sub_1dbd0+1468
000000000001e2a2         jmp        sub_1dbd0+558

                     loc_1e2a7:
000000000001e2a7         mov        r14d, r8d                                   ; CODE XREF=sub_1dbd0+1522
                        ; endp

                     loc_1e2aa:
000000000001e2aa         cmp        qword [rbx+0x98], 0x0                       ; CODE XREF=sub_1dbd0+1062
000000000001e2b2         movzx      edx, byte [rbx+0xb0]
000000000001e2b9         mov        dword [rbx+0xb4], 0x1
000000000001e2c3         setg       al
000000000001e2c6         and        edx, 0xfffffff9
000000000001e2c9         or         eax, r14d
000000000001e2cc         and        eax, 0x1
000000000001e2cf         add        eax, eax
000000000001e2d1         or         eax, edx
000000000001e2d3         mov        byte [rbx+0xb0], al
000000000001e2d9         jmp        loc_1ddfe

                     loc_1e2de:
000000000001e2de         call       j_abort                                     ; abort, CODE XREF=sub_1dbd0+1090
                        ; endp
000000000001e2e3         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2165
000000000001e2ea         lea        rsi, qword [aCoreutils831li_227c0]          ; "../coreutils-8.31/lib/regcomp.c"
000000000001e2f1         lea        rdi, qword [aRight1]                        ; "right > -1"
000000000001e2f8         mov        edx, 0x5b0
000000000001e2fd         call       j___assert_fail                             ; __assert_fail

                     loc_1e302:
000000000001e302         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes", CODE XREF=re_compile_internal+1947
000000000001e309         lea        rsi, qword [aCoreutils831li_227c0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
000000000001e310         lea        rdi, qword [aIsepsilonnodeN]                ; argument "__assertion" for method j___assert_fail, "!IS_EPSILON_NODE (node->token.type)"
000000000001e317         mov        edx, 0x5c2                                  ; argument "__line" for method j___assert_fail
000000000001e31c         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001e321         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2156
000000000001e328         lea        rsi, qword [aCoreutils831li_227c0]          ; "../coreutils-8.31/lib/regcomp.c"
000000000001e32f         lea        rdi, qword [aLeft1]                         ; "left > -1"
000000000001e336         mov        edx, 0x5af
000000000001e33b         call       j___assert_fail                             ; __assert_fail

                     loc_1e340:
000000000001e340         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_internal+941
                        ; endp
000000000001e345         align      16                                          ; End of unwind block (FDE at 0x26cdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_pattern:
000000000001e350         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x26d2c)
000000000001e354         mov        rcx, qword [rpl_re_syntax_options]          ; rpl_re_syntax_options
000000000001e35b         mov        r8, rdi
000000000001e35e         mov        rdi, rdx
000000000001e361         mov        rax, rcx
000000000001e364         shr        rax, 0x19
000000000001e368         and        eax, 0x1
000000000001e36b         shl        eax, 0x4
000000000001e36e         mov        edx, eax
000000000001e370         movzx      eax, byte [rdi+0x38]
000000000001e374         and        eax, 0xffffffef
000000000001e377         or         eax, edx
000000000001e379         mov        rdx, rsi
000000000001e37c         mov        rsi, r8
000000000001e37f         or         eax, 0xffffff80
000000000001e382         mov        byte [rdi+0x38], al
000000000001e385         call       re_compile_internal                         ; re_compile_internal
000000000001e38a         test       eax, eax
000000000001e38c         je         loc_1e3b8

000000000001e38e         lea        rdx, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
000000000001e395         cdqe
000000000001e397         lea        rsi, qword [__re_error_msgid]               ; "Success"
000000000001e39e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001e3a0         add        rsi, qword [rdx+rax*8]                      ; argument "msgid" for method j_dcgettext
000000000001e3a4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000001e3a9         add        rsp, 0x8
000000000001e3ad         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000001e3b2         align      8

                     loc_1e3b8:
000000000001e3b8         xor        eax, eax                                    ; CODE XREF=rpl_re_compile_pattern+60
000000000001e3ba         add        rsp, 0x8
000000000001e3be         ret
                        ; endp
000000000001e3bf         align      64                                          ; End of unwind block (FDE at 0x26d2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_syntax:
000000000001e3c0         mov        rax, qword [rpl_re_syntax_options]          ; Begin of unwind block (FDE at 0x26d4c), rpl_re_syntax_options
000000000001e3c7         mov        qword [rpl_re_syntax_options], rdi          ; rpl_re_syntax_options
000000000001e3ce         ret
                        ; endp
000000000001e3cf         align      16                                          ; End of unwind block (FDE at 0x26d4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_fastmap:
000000000001e3d0         push       r12                                         ; Begin of unwind block (FDE at 0x26d60), CODE XREF=re_search_stub+663, rpl_regcomp+183
000000000001e3d2         push       rbp
000000000001e3d3         xor        eax, eax
000000000001e3d5         push       rbx
000000000001e3d6         mov        rbp, qword [rdi+0x20]
000000000001e3da         mov        rbx, rdi
000000000001e3dd         mov        r12, qword [rdi]
000000000001e3e0         lea        rdi, qword [rbp+8]
000000000001e3e4         mov        rcx, rbp
000000000001e3e7         mov        qword [rbp], 0x0
000000000001e3ef         mov        qword [rbp+0xf8], 0x0
000000000001e3fa         and        rdi, 0xfffffffffffffff8
000000000001e3fe         sub        rcx, rdi
000000000001e401         add        ecx, 0x100
000000000001e407         shr        ecx, 0x3
000000000001e40a         rep stosq  qword [rdi], rax
000000000001e40d         mov        rcx, rbp
000000000001e410         mov        rdi, rbx
000000000001e413         mov        rsi, qword [r12+0x48]
000000000001e418         lea        rdx, qword [rsi+0x18]
000000000001e41c         add        rsi, 0x10
000000000001e420         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
000000000001e425         mov        rax, qword [r12+0x50]
000000000001e42a         cmp        qword [r12+0x48], rax
000000000001e42f         je         loc_1e449

000000000001e431         lea        rdx, qword [rax+0x18]
000000000001e435         lea        rsi, qword [rax+0x10]
000000000001e439         mov        rcx, rbp
000000000001e43c         mov        rdi, rbx
000000000001e43f         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
000000000001e444         mov        rax, qword [r12+0x48]

                     loc_1e449:
000000000001e449         mov        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_re_compile_fastmap+95
000000000001e44e         cmp        rsi, rax
000000000001e451         je         loc_1e46b

000000000001e453         lea        rdx, qword [rsi+0x18]
000000000001e457         mov        rcx, rbp
000000000001e45a         add        rsi, 0x10
000000000001e45e         mov        rdi, rbx
000000000001e461         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
000000000001e466         mov        rax, qword [r12+0x48]

                     loc_1e46b:
000000000001e46b         mov        rsi, qword [r12+0x60]                       ; CODE XREF=rpl_re_compile_fastmap+129
000000000001e470         cmp        rsi, rax
000000000001e473         je         loc_1e488

000000000001e475         lea        rdx, qword [rsi+0x18]
000000000001e479         mov        rcx, rbp
000000000001e47c         add        rsi, 0x10
000000000001e480         mov        rdi, rbx
000000000001e483         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30

                     loc_1e488:
000000000001e488         or         byte [rbx+0x38], 0x8                        ; CODE XREF=rpl_re_compile_fastmap+163
000000000001e48c         xor        eax, eax
000000000001e48e         pop        rbx
000000000001e48f         pop        rbp
000000000001e490         pop        r12
000000000001e492         ret
                        ; endp
000000000001e493         align      32                                          ; End of unwind block (FDE at 0x26d60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96


                     re_search_stub:
000000000001e4a0         push       r15                                         ; Begin of unwind block (FDE at 0x26d8c), CODE XREF=re_search_2_stub+136, rpl_re_match+14, rpl_re_search+11
000000000001e4a2         push       r14
000000000001e4a4         mov        rax, r8
000000000001e4a7         push       r13
000000000001e4a9         push       r12
000000000001e4ab         add        r8, rcx
000000000001e4ae         push       rbp
000000000001e4af         push       rbx
000000000001e4b0         sub        rsp, 0x38
000000000001e4b4         test       rcx, rcx
000000000001e4b7         mov        ebx, dword [rsp+0x68+arg_8]
000000000001e4bb         mov        r12, qword [rsp+0x68+arg_0]
000000000001e4c0         mov        dword [rsp+0x68+var_40], ebx
000000000001e4c4         js         loc_1e800

000000000001e4ca         cmp        rcx, rdx
000000000001e4cd         jg         loc_1e800

000000000001e4d3         cmp        r8, rdx
000000000001e4d6         mov        rbx, rcx
000000000001e4d9         mov        r15, rdi
000000000001e4dc         jg         loc_1e760

000000000001e4e2         test       rax, rax
000000000001e4e5         js         loc_1e4f0

000000000001e4e7         cmp        rcx, r8
000000000001e4ea         jg         loc_1e760

                     loc_1e4f0:
000000000001e4f0         test       r8, r8                                      ; CODE XREF=re_search_stub+69
000000000001e4f3         js         loc_1e7d8

000000000001e4f9         test       rax, rax
000000000001e4fc         jns        loc_1e507

000000000001e4fe         cmp        rbx, r8
000000000001e501         jle        loc_1e7d8

                     loc_1e507:
000000000001e507         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+92, re_search_stub+707
000000000001e50c         mov        r13d, eax
000000000001e50f         shr        r13b, 0x5
000000000001e513         mov        edi, r13d
000000000001e516         and        edi, 0x3
000000000001e519         cmp        r8, rbx
000000000001e51c         mov        dword [rsp+0x68+var_3C], edi
000000000001e520         jle        loc_1e531

000000000001e522         cmp        qword [r15+0x20], 0x0
000000000001e527         je         loc_1e531

000000000001e529         test       al, 0x8
000000000001e52b         je         loc_1e720

                     loc_1e531:
000000000001e531         test       al, 0x10                                    ; CODE XREF=re_search_stub+128, re_search_stub+135, re_search_stub+693, re_search_stub+849
000000000001e533         jne        loc_1e700

000000000001e539         test       r12, r12
000000000001e53c         je         loc_1e700

000000000001e542         and        eax, 0x6
000000000001e545         mov        rcx, qword [r15+0x30]
000000000001e549         cmp        al, 0x4
000000000001e54b         je         loc_1e6e0

                     loc_1e551:
000000000001e551         lea        r14, qword [rcx+1]                          ; CODE XREF=re_search_stub+583
000000000001e555         mov        r13, r14

                     loc_1e558:
000000000001e558         mov        rdi, r14                                    ; CODE XREF=re_search_stub+595
000000000001e55b         shl        rdi, 0x4

                     loc_1e55f:
000000000001e55f         mov        qword [rsp+0x68+var_48], r9                 ; CODE XREF=re_search_stub+628
000000000001e564         mov        qword [rsp+0x68+var_50], rdx
000000000001e569         mov        qword [rsp+0x68+var_58], rsi
000000000001e56e         mov        qword [rsp+0x68+var_60], r8
000000000001e573         call       j_malloc                                    ; malloc
000000000001e578         test       rax, rax
000000000001e57b         mov        rbp, rax
000000000001e57e         je         loc_1e810

000000000001e584         sub        rsp, 0x8
000000000001e588         mov        rcx, rbx
000000000001e58b         mov        rdi, r15
000000000001e58e         mov        eax, dword [rsp+0x70+var_3C]
000000000001e592         push       rax
000000000001e593         push       rbp
000000000001e594         push       r14
000000000001e596         mov        r9, qword [rsp+0x88+var_48]
000000000001e59b         mov        r8, qword [rsp+0x88+var_60]
000000000001e5a0         mov        rdx, qword [rsp+0x88+var_50]
000000000001e5a5         mov        rsi, qword [rsp+0x88+var_58]
000000000001e5aa         call       re_search_internal                          ; re_search_internal
000000000001e5af         add        rsp, 0x20
000000000001e5b3         test       eax, eax
000000000001e5b5         je         loc_1e5e8

000000000001e5b7         cmp        eax, 0x1
000000000001e5ba         mov        r12, 0xffffffffffffffff
000000000001e5c1         je         loc_1e5ca

                     loc_1e5c3:
000000000001e5c3         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+530

                     loc_1e5ca:
000000000001e5ca         mov        rdi, rbp                                    ; CODE XREF=re_search_stub+289, re_search_stub+545, re_search_stub+567
000000000001e5cd         call       sub_2a10                                    ; sub_2a10

                     loc_1e5d2:
000000000001e5d2         add        rsp, 0x38                                   ; CODE XREF=re_search_stub+871, re_search_stub+887
000000000001e5d6         mov        rax, r12
000000000001e5d9         pop        rbx
000000000001e5da         pop        rbp
000000000001e5db         pop        r12
000000000001e5dd         pop        r13
000000000001e5df         pop        r14
000000000001e5e1         pop        r15
000000000001e5e3         ret
                        ; endp
000000000001e5e4         align      8

                     loc_1e5e8:
000000000001e5e8         test       r12, r12                                    ; CODE XREF=re_search_stub+277
000000000001e5eb         je         loc_1e6b8

000000000001e5f1         movzx      eax, byte [r15+0x38]
000000000001e5f6         lea        rdx, qword [r13+1]
000000000001e5fa         shr        al, 0x1
000000000001e5fc         and        eax, 0x3
000000000001e5ff         je         loc_1e770

000000000001e605         cmp        eax, 0x1
000000000001e608         je         loc_1e820

000000000001e60e         cmp        eax, 0x2
000000000001e611         jne        loc_1e900

000000000001e617         cmp        r14, qword [r12]
000000000001e61b         ja         loc_1e8e1

000000000001e621         mov        r9d, 0x2

                     loc_1e627:
000000000001e627         test       r13, r13                                    ; CODE XREF=re_search_stub+812, re_search_stub+906, re_search_stub+1004
000000000001e62a         jle        loc_1e898

000000000001e630         mov        r8, qword [r12+8]
000000000001e635         mov        rdi, qword [r12+0x10]
000000000001e63a         lea        rsi, qword [r13*8]
000000000001e642         mov        rdx, r13
000000000001e645         xor        eax, eax
000000000001e647         nop        word [rax+rax]

                     loc_1e650:
000000000001e650         mov        rcx, qword [rbp+rax*2]                      ; CODE XREF=re_search_stub+457
000000000001e655         mov        qword [r8+rax], rcx
000000000001e659         mov        rcx, qword [rbp+rax*2+8]
000000000001e65e         mov        qword [rdi+rax], rcx
000000000001e662         add        rax, 0x8
000000000001e666         cmp        rsi, rax
000000000001e669         jne        loc_1e650

                     loc_1e66b:
000000000001e66b         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+1021
000000000001e66f         jbe        loc_1e69d

000000000001e671         mov        rsi, qword [r12+0x10]
000000000001e676         mov        rcx, qword [r12+8]
000000000001e67b         mov        rax, 0xffffffffffffffff
000000000001e682         nop        word [rax+rax]

                     loc_1e688:
000000000001e688         mov        qword [rsi+rdx*8], rax                      ; CODE XREF=re_search_stub+507
000000000001e68c         add        r13, 0x1
000000000001e690         mov        qword [rcx+rdx*8], rax
000000000001e694         cmp        r13, qword [r12]
000000000001e698         mov        rdx, r13
000000000001e69b         jb         loc_1e688

                     loc_1e69d:
000000000001e69d         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+463, re_search_stub+1037, re_search_stub+1053
000000000001e6a2         lea        r13d, dword [r9+r9]
000000000001e6a6         and        eax, 0xfffffff9
000000000001e6a9         or         eax, r13d
000000000001e6ac         test       al, 0x6
000000000001e6ae         mov        byte [r15+0x38], al
000000000001e6b2         je         loc_1e5c3

                     loc_1e6b8:
000000000001e6b8         cmp        byte [rsp+0x68+var_40], 0x0                 ; CODE XREF=re_search_stub+331
000000000001e6bd         mov        r12, qword [rbp]
000000000001e6c1         je         loc_1e5ca

000000000001e6c7         cmp        r12, rbx
000000000001e6ca         jne        loc_1e8c2

000000000001e6d0         mov        r12, qword [rbp+8]
000000000001e6d4         sub        r12, rbx
000000000001e6d7         jmp        loc_1e5ca
000000000001e6dc         align      32

                     loc_1e6e0:
000000000001e6e0         mov        r14, qword [r12]                            ; CODE XREF=re_search_stub+171
000000000001e6e4         cmp        r14, rcx
000000000001e6e7         ja         loc_1e551

000000000001e6ed         test       r14, r14
000000000001e6f0         mov        r13, r14
000000000001e6f3         jg         loc_1e558

000000000001e6f9         nop        dword [rax]

                     loc_1e700:
000000000001e700         mov        edi, 0x10                                   ; CODE XREF=re_search_stub+147, re_search_stub+156
000000000001e705         mov        r14d, 0x1
000000000001e70b         mov        r13d, 0x1
000000000001e711         xor        r12d, r12d
000000000001e714         jmp        loc_1e55f
000000000001e719         align      32

                     loc_1e720:
000000000001e720         mov        rdi, r15                                    ; CODE XREF=re_search_stub+139
000000000001e723         mov        qword [rsp+0x68+var_48], r9
000000000001e728         mov        qword [rsp+0x68+var_50], rdx
000000000001e72d         mov        qword [rsp+0x68+var_58], rsi
000000000001e732         mov        qword [rsp+0x68+var_60], r8
000000000001e737         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap
000000000001e73c         movzx      eax, byte [r15+0x38]
000000000001e741         mov        r9, qword [rsp+0x68+var_48]
000000000001e746         mov        rdx, qword [rsp+0x68+var_50]
000000000001e74b         mov        rsi, qword [rsp+0x68+var_58]
000000000001e750         mov        r8, qword [rsp+0x68+var_60]
000000000001e755         jmp        loc_1e531
000000000001e75a         align      32

                     loc_1e760:
000000000001e760         mov        r8, rdx                                     ; CODE XREF=re_search_stub+60, re_search_stub+74
000000000001e763         jmp        loc_1e507
000000000001e768         align      16

                     loc_1e770:
000000000001e770         lea        r14, qword [rdx*8]                          ; CODE XREF=re_search_stub+351
000000000001e778         mov        qword [rsp+0x68+var_60], rdx
000000000001e77d         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000001e780         call       j_malloc                                    ; malloc
000000000001e785         test       rax, rax
000000000001e788         mov        qword [r12+8], rax
000000000001e78d         mov        rdx, qword [rsp+0x68+var_60]
000000000001e792         je         loc_1e8aa

000000000001e798         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000001e79b         mov        qword [rsp+0x68+var_60], rdx
000000000001e7a0         mov        qword [rsp+0x68+var_58], rax
000000000001e7a5         call       j_malloc                                    ; malloc
000000000001e7aa         test       rax, rax
000000000001e7ad         mov        qword [r12+0x10], rax
000000000001e7b2         mov        rdx, qword [rsp+0x68+var_60]
000000000001e7b7         mov        rcx, qword [rsp+0x68+var_58]
000000000001e7bc         je         loc_1e8a2

000000000001e7c2         mov        qword [r12], rdx
000000000001e7c6         mov        r9d, 0x1
000000000001e7cc         jmp        loc_1e627
000000000001e7d1         align      8

                     loc_1e7d8:
000000000001e7d8         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+83, re_search_stub+97
000000000001e7dd         xor        r8d, r8d
000000000001e7e0         mov        r13d, eax
000000000001e7e3         shr        r13b, 0x5
000000000001e7e7         mov        edi, r13d
000000000001e7ea         and        edi, 0x3
000000000001e7ed         mov        dword [rsp+0x68+var_3C], edi
000000000001e7f1         jmp        loc_1e531
000000000001e7f6         align      2048

                     loc_1e800:
000000000001e800         mov        r12, 0xffffffffffffffff                     ; CODE XREF=re_search_stub+36, re_search_stub+45
000000000001e807         jmp        loc_1e5d2
000000000001e80c         align      16

                     loc_1e810:
000000000001e810         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+222
000000000001e817         jmp        loc_1e5d2
000000000001e81c         align      32

                     loc_1e820:
000000000001e820         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+360
000000000001e824         mov        r9d, 0x1
000000000001e82a         jae        loc_1e627

000000000001e830         lea        rcx, qword [rdx*8]
000000000001e838         mov        rdi, qword [r12+8]                          ; argument "__ptr" for method j_realloc
000000000001e83d         mov        byte [rsp+0x68+var_50], r9b
000000000001e842         mov        qword [rsp+0x68+var_58], rdx
000000000001e847         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
000000000001e84a         mov        qword [rsp+0x68+var_60], rcx
000000000001e84f         call       j_realloc                                   ; realloc
000000000001e854         test       rax, rax
000000000001e857         mov        r14, rax
000000000001e85a         je         loc_1e8aa

000000000001e85c         mov        rcx, qword [rsp+0x68+var_60]
000000000001e861         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_realloc
000000000001e866         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
000000000001e869         call       j_realloc                                   ; realloc
000000000001e86e         test       rax, rax
000000000001e871         mov        rdx, qword [rsp+0x68+var_58]
000000000001e876         movzx      r9d, byte [rsp+0x68+var_50]
000000000001e87c         je         loc_1e8b2

000000000001e87e         mov        qword [r12+8], r14
000000000001e883         mov        qword [r12+0x10], rax
000000000001e888         mov        qword [r12], rdx
000000000001e88c         jmp        loc_1e627
000000000001e891         align      8

                     loc_1e898:
000000000001e898         xor        edx, edx                                    ; CODE XREF=re_search_stub+394
000000000001e89a         xor        r13d, r13d
000000000001e89d         jmp        loc_1e66b

                     loc_1e8a2:
000000000001e8a2         mov        rdi, rcx                                    ; CODE XREF=re_search_stub+796
000000000001e8a5         call       sub_2a10                                    ; sub_2a10

                     loc_1e8aa:
000000000001e8aa         xor        r9d, r9d                                    ; CODE XREF=re_search_stub+754, re_search_stub+954
000000000001e8ad         jmp        loc_1e69d

                     loc_1e8b2:
000000000001e8b2         mov        rdi, r14                                    ; CODE XREF=re_search_stub+988
000000000001e8b5         call       sub_2a10                                    ; sub_2a10
000000000001e8ba         xor        r9d, r9d
000000000001e8bd         jmp        loc_1e69d

                     loc_1e8c2:
000000000001e8c2         lea        rcx, qword [__PRETTY_FUNCTION__.7847]       ; argument "__function" for method j___assert_fail, "re_search_stub", CODE XREF=re_search_stub+554
000000000001e8c9         lea        rsi, qword [aCoreutils831li_227a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001e8d0         lea        rdi, qword [aPmatch0rmsoSta]                ; argument "__assertion" for method j___assert_fail, "pmatch[0].rm_so == start"
000000000001e8d7         mov        edx, 0x1be                                  ; argument "__line" for method j___assert_fail
000000000001e8dc         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1e8e1:
000000000001e8e1         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+379
000000000001e8e8         lea        rsi, qword [aCoreutils831li_227a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001e8ef         lea        rdi, qword [aRegsnumregsNre]                ; argument "__assertion" for method j___assert_fail, "regs->num_regs >= nregs"
000000000001e8f6         mov        edx, 0x1fb                                  ; argument "__line" for method j___assert_fail
000000000001e8fb         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1e900:
000000000001e900         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+369
000000000001e907         lea        rsi, qword [aCoreutils831li_227a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001e90e         lea        rdi, qword [aRegsallocatedR]                ; argument "__assertion" for method j___assert_fail, "regs_allocated == REGS_FIXED"
000000000001e915         mov        edx, 0x1f9                                  ; argument "__line" for method j___assert_fail
000000000001e91a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001e91f         align      32                                          ; End of unwind block (FDE at 0x26d8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     re_search_2_stub:
000000000001e920         push       r15                                         ; Begin of unwind block (FDE at 0x26dec), CODE XREF=rpl_re_match_2+16, rpl_re_search_2+18
000000000001e922         push       r14
000000000001e924         push       r13
000000000001e926         push       r12
000000000001e928         mov        r12, rdi
000000000001e92b         push       rbp
000000000001e92c         push       rbx
000000000001e92d         mov        rbp, r8
000000000001e930         mov        rbx, rdx
000000000001e933         mov        rdx, rbp
000000000001e936         sub        rsp, 0x28
000000000001e93a         shr        rdx, 0x3f
000000000001e93e         mov        rax, qword [rsp+0x58+arg_10]
000000000001e943         mov        edi, edx
000000000001e945         mov        r8d, dword [rsp+0x58+arg_18]
000000000001e94a         shr        rax, 0x3f
000000000001e94e         or         dil, al
000000000001e951         jne        loc_1ea20

000000000001e957         test       rbx, rbx
000000000001e95a         js         loc_1ea20

000000000001e960         mov        r15, rbx
000000000001e963         add        r15, rbp
000000000001e966         jo         loc_1ea20

000000000001e96c         test       rbp, rbp
000000000001e96f         mov        r14, rcx
000000000001e972         mov        rcx, r9
000000000001e975         je         loc_1ea30

000000000001e97b         xor        r13d, r13d
000000000001e97e         test       rbx, rbx
000000000001e981         mov        qword [rsp+0x58+var_50], rsi
000000000001e986         jne        loc_1e9d0

                     loc_1e988:
000000000001e988         movzx      r8d, r8b                                    ; CODE XREF=re_search_2_stub+247, re_search_2_stub+278
000000000001e98c         mov        rdx, r15
000000000001e98f         mov        rsi, r14
000000000001e992         push       r8
000000000001e994         push       qword [rsp+0x60+arg_8]
000000000001e998         mov        rdi, r12
000000000001e99b         mov        r9, qword [rsp+0x68+arg_10]
000000000001e9a3         mov        r8, qword [rsp+0x68+arg_0]
000000000001e9a8         call       re_search_stub                              ; re_search_stub
000000000001e9ad         mov        rdi, r13
000000000001e9b0         mov        rbx, rax
000000000001e9b3         call       sub_2a10                                    ; sub_2a10
000000000001e9b8         pop        rax
000000000001e9b9         pop        rdx

                     loc_1e9ba:
000000000001e9ba         add        rsp, 0x28                                   ; CODE XREF=re_search_2_stub+263
000000000001e9be         mov        rax, rbx
000000000001e9c1         pop        rbx
000000000001e9c2         pop        rbp
000000000001e9c3         pop        r12
000000000001e9c5         pop        r13
000000000001e9c7         pop        r14
000000000001e9c9         pop        r15
000000000001e9cb         ret
                        ; endp
000000000001e9cc         align      16

                     loc_1e9d0:
000000000001e9d0         mov        rdi, r15                                    ; argument "__size" for method j_malloc, CODE XREF=re_search_2_stub+102
000000000001e9d3         mov        dword [rsp+0x58+var_3C], r8d
000000000001e9d8         mov        qword [rsp+0x58+var_48], r9
000000000001e9dd         call       j_malloc                                    ; malloc
000000000001e9e2         test       rax, rax
000000000001e9e5         mov        r13, rax
000000000001e9e8         je         loc_1ea20

000000000001e9ea         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__src" for method j_memcpy
000000000001e9ef         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000001e9f2         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000001e9f5         call       j_memcpy                                    ; memcpy
000000000001e9fa         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy
000000000001e9ff         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
000000000001ea02         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000001ea05         mov        r14, r13
000000000001ea08         call       j_memcpy                                    ; memcpy
000000000001ea0d         mov        rcx, qword [rsp+0x58+var_48]
000000000001ea12         mov        r8d, dword [rsp+0x58+var_3C]
000000000001ea17         jmp        loc_1e988
000000000001ea1c         align      32

                     loc_1ea20:
000000000001ea20         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=re_search_2_stub+49, re_search_2_stub+58, re_search_2_stub+70, re_search_2_stub+200
000000000001ea27         jmp        loc_1e9ba
000000000001ea29         align      16

                     loc_1ea30:
000000000001ea30         mov        r14, rsi                                    ; CODE XREF=re_search_2_stub+85
000000000001ea33         xor        r13d, r13d
000000000001ea36         jmp        loc_1e988
000000000001ea3b         align      64                                          ; End of unwind block (FDE at 0x26dec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regcomp:
000000000001ea40         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x26e44), CODE XREF=sub_5a6e+12, sub_5a6e+101
000000000001ea42         push       r14
000000000001ea44         push       r13
000000000001ea46         and        eax, 0x1
000000000001ea49         push       r12
000000000001ea4b         push       rbp
000000000001ea4c         cmp        eax, 0x1
000000000001ea4f         push       rbx
000000000001ea50         mov        rbx, rdi
000000000001ea53         sbb        r14, r14
000000000001ea56         mov        qword [rdi], 0x0
000000000001ea5d         mov        qword [rdi+8], 0x0
000000000001ea65         and        r14d, 0xfd4fca
000000000001ea6c         mov        qword [rdi+0x10], 0x0
000000000001ea74         mov        edi, 0x100                                  ; argument "__size" for method j_malloc
000000000001ea79         mov        r12, rsi
000000000001ea7c         mov        ebp, edx
000000000001ea7e         add        r14, 0x3b2fc
000000000001ea85         call       j_malloc                                    ; malloc
000000000001ea8a         test       rax, rax
000000000001ea8d         mov        qword [rbx+0x20], rax
000000000001ea91         je         loc_1eb40

000000000001ea97         mov        r13, rbp
000000000001ea9a         shl        r13, 0x15
000000000001ea9e         and        r13d, 0x400000
000000000001eaa5         or         r13, r14
000000000001eaa8         test       bpl, 0x4
000000000001eaac         jne        loc_1eb10

000000000001eaae         and        byte [rbx+0x38], 0x7f

                     loc_1eab2:
000000000001eab2         movzx      edx, byte [rbx+0x38]                        ; CODE XREF=rpl_regcomp+223
000000000001eab6         shr        ebp, 0x3
000000000001eab9         mov        rdi, r12                                    ; argument "__s" for method j_strlen
000000000001eabc         and        ebp, 0x1
000000000001eabf         mov        qword [rbx+0x28], 0x0
000000000001eac7         shl        ebp, 0x4
000000000001eaca         and        edx, 0xffffffef
000000000001eacd         or         ebp, edx
000000000001eacf         mov        byte [rbx+0x38], bpl
000000000001ead3         call       j_strlen                                    ; strlen
000000000001ead8         mov        rcx, r13
000000000001eadb         mov        rdx, rax
000000000001eade         mov        rsi, r12
000000000001eae1         mov        rdi, rbx
000000000001eae4         call       re_compile_internal                         ; re_compile_internal
000000000001eae9         cmp        eax, 0x10
000000000001eaec         mov        ebp, eax
000000000001eaee         je         loc_1eb28

000000000001eaf0         test       eax, eax
000000000001eaf2         jne        loc_1eb2d

000000000001eaf4         mov        rdi, rbx
000000000001eaf7         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_1eafc:
000000000001eafc         pop        rbx                                         ; CODE XREF=rpl_regcomp+254
000000000001eafd         mov        eax, ebp
000000000001eaff         pop        rbp
000000000001eb00         pop        r12
000000000001eb02         pop        r13
000000000001eb04         pop        r14
000000000001eb06         ret
                        ; endp
000000000001eb07         align      16

                     loc_1eb10:
000000000001eb10         and        r13, 0xffffffffffffffbf                     ; CODE XREF=rpl_regcomp+108
000000000001eb14         or         byte [rbx+0x38], 0x80
000000000001eb18         or         r13, 0x100
000000000001eb1f         jmp        loc_1eab2
000000000001eb21         align      8

                     loc_1eb28:
000000000001eb28         mov        ebp, 0x8                                    ; CODE XREF=rpl_regcomp+174

                     loc_1eb2d:
000000000001eb2d         mov        rdi, qword [rbx+0x20]                       ; CODE XREF=rpl_regcomp+178
000000000001eb31         call       sub_2a10                                    ; sub_2a10
000000000001eb36         mov        qword [rbx+0x20], 0x0
000000000001eb3e         jmp        loc_1eafc

                     loc_1eb40:
000000000001eb40         mov        ebp, 0xc                                    ; CODE XREF=rpl_regcomp+81
000000000001eb45         pop        rbx
000000000001eb46         mov        eax, ebp
000000000001eb48         pop        rbp
000000000001eb49         pop        r12
000000000001eb4b         pop        r13
000000000001eb4d         pop        r14
000000000001eb4f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regerror:
000000000001eb50         push       r13                                         ; End of unwind block (FDE at 0x26e44), Begin of unwind block (FDE at 0x26e90)
000000000001eb52         push       r12
000000000001eb54         push       rbp
000000000001eb55         push       rbx
000000000001eb56         sub        rsp, 0x8
000000000001eb5a         cmp        edi, 0x10
000000000001eb5d         ja         loc_1ebc0

000000000001eb5f         lea        rax, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
000000000001eb66         movsxd     rdi, edi
000000000001eb69         lea        rsi, qword [__re_error_msgid]               ; "Success"
000000000001eb70         mov        rbp, rdx
000000000001eb73         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000001eb78         mov        r12, rcx
000000000001eb7b         add        rsi, qword [rax+rdi*8]                      ; argument "msgid" for method j_dcgettext
000000000001eb7f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001eb81         call       j_dcgettext                                 ; dcgettext
000000000001eb86         mov        rdi, rax                                    ; argument "__s" for method j_strlen
000000000001eb89         mov        r13, rax
000000000001eb8c         call       j_strlen                                    ; strlen
000000000001eb91         test       r12, r12
000000000001eb94         lea        rbx, qword [rax+1]
000000000001eb98         je         loc_1ebad

000000000001eb9a         cmp        rbx, r12
000000000001eb9d         mov        rdx, rbx
000000000001eba0         ja         loc_1ebc8

                     loc_1eba2:
000000000001eba2         mov        rsi, r13                                    ; argument "__src" for method j_memcpy, CODE XREF=rpl_regerror+131
000000000001eba5         mov        rdi, rbp                                    ; argument "__dest" for method j_memcpy
000000000001eba8         call       j_memcpy                                    ; memcpy

                     loc_1ebad:
000000000001ebad         add        rsp, 0x8                                    ; CODE XREF=rpl_regerror+72
000000000001ebb1         mov        rax, rbx
000000000001ebb4         pop        rbx
000000000001ebb5         pop        rbp
000000000001ebb6         pop        r12
000000000001ebb8         pop        r13
000000000001ebba         ret
                        ; endp
000000000001ebbb         align      64

                     loc_1ebc0:
000000000001ebc0         call       j_abort                                     ; abort, CODE XREF=rpl_regerror+13
                        ; endp
000000000001ebc5         align      8

                     loc_1ebc8:
000000000001ebc8         lea        rdx, qword [r12-1]                          ; CODE XREF=rpl_regerror+80
000000000001ebcd         mov        byte [rbp+r12-1], 0x0
000000000001ebd3         jmp        loc_1eba2
000000000001ebd5         align      32                                          ; End of unwind block (FDE at 0x26e90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regfree:
000000000001ebe0         push       rbx                                         ; Begin of unwind block (FDE at 0x26ecc), CODE XREF=free_exclude+102
000000000001ebe1         mov        rbx, rdi
000000000001ebe4         mov        rdi, qword [rdi]
000000000001ebe7         test       rdi, rdi
000000000001ebea         je         loc_1ebf1

000000000001ebec         call       free_dfa_content                            ; free_dfa_content

                     loc_1ebf1:
000000000001ebf1         mov        rdi, qword [rbx+0x20]                       ; CODE XREF=rpl_regfree+10
000000000001ebf5         mov        qword [rbx], 0x0
000000000001ebfc         mov        qword [rbx+8], 0x0
000000000001ec04         call       sub_2a10                                    ; sub_2a10
000000000001ec09         mov        rdi, qword [rbx+0x28]
000000000001ec0d         mov        qword [rbx+0x20], 0x0
000000000001ec15         call       sub_2a10                                    ; sub_2a10
000000000001ec1a         mov        qword [rbx+0x28], 0x0
000000000001ec22         pop        rbx
000000000001ec23         ret
                        ; endp
000000000001ec24         align      16                                          ; End of unwind block (FDE at 0x26ecc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     rpl_regexec:
000000000001ec30         test       r8d, 0xfffffff8                             ; Begin of unwind block (FDE at 0x26ee8), CODE XREF=excluded_file_name+356
000000000001ec37         jne        loc_1ecc8

000000000001ec3d         push       r13
000000000001ec3f         push       r12
000000000001ec41         mov        r13, rdx
000000000001ec44         push       rbp
000000000001ec45         push       rbx
000000000001ec46         mov        r12, rcx
000000000001ec49         mov        ebx, r8d
000000000001ec4c         mov        rbp, rdi
000000000001ec4f         sub        rsp, 0x18
000000000001ec53         test       r8b, 0x4
000000000001ec57         jne        loc_1eca8

000000000001ec59         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000001ec5c         mov        qword [rsp+0x38+var_30], rsi
000000000001ec61         call       j_strlen                                    ; strlen
000000000001ec66         xor        ecx, ecx
000000000001ec68         test       byte [rbp+0x38], 0x10
000000000001ec6c         mov        rdx, rax
000000000001ec6f         mov        rsi, qword [rsp+0x38+var_30]
000000000001ec74         je         loc_1ecb6

                     loc_1ec76:
000000000001ec76         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+132
000000000001ec7a         push       rbx
000000000001ec7b         push       0x0
000000000001ec7d         push       0x0

                     loc_1ec7f:
000000000001ec7f         mov        rdi, rbp                                    ; CODE XREF=rpl_regexec+143
000000000001ec82         mov        r9, rdx
000000000001ec85         mov        r8, rdx
000000000001ec88         call       re_search_internal                          ; re_search_internal
000000000001ec8d         add        rsp, 0x20
000000000001ec91         test       eax, eax
000000000001ec93         setne      al
000000000001ec96         add        rsp, 0x18
000000000001ec9a         pop        rbx
000000000001ec9b         movzx      eax, al
000000000001ec9e         pop        rbp
000000000001ec9f         pop        r12
000000000001eca1         pop        r13
000000000001eca3         ret
                        ; endp
000000000001eca4         align      8

                     loc_1eca8:
000000000001eca8         test       byte [rbp+0x38], 0x10                       ; CODE XREF=rpl_regexec+39
000000000001ecac         mov        rcx, qword [rcx]
000000000001ecaf         mov        rdx, qword [r12+8]
000000000001ecb4         jne        loc_1ec76

                     loc_1ecb6:
000000000001ecb6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+68
000000000001ecba         push       rbx
000000000001ecbb         push       r12
000000000001ecbd         push       r13
000000000001ecbf         jmp        loc_1ec7f
000000000001ecc1         align      8

                     loc_1ecc8:
000000000001ecc8         mov        eax, 0x2                                    ; CODE XREF=rpl_regexec+7
000000000001eccd         ret
                        ; endp
000000000001ecce         align      16                                          ; End of unwind block (FDE at 0x26ee8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_match:
000000000001ecd0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x26f44)
000000000001ecd4         mov        r9, rdx
000000000001ecd7         push       0x1
000000000001ecd9         push       r8
000000000001ecdb         xor        r8d, r8d
000000000001ecde         call       re_search_stub                              ; re_search_stub
000000000001ece3         add        rsp, 0x18
000000000001ece7         ret
                        ; endp
000000000001ece8         align      16                                          ; End of unwind block (FDE at 0x26f44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_search:
000000000001ecf0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x26f64)
000000000001ecf4         push       0x0
000000000001ecf6         push       r9
000000000001ecf8         mov        r9, rdx
000000000001ecfb         call       re_search_stub                              ; re_search_stub
000000000001ed00         add        rsp, 0x18
000000000001ed04         ret
                        ; endp
000000000001ed05         align      16                                          ; End of unwind block (FDE at 0x26f64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_match_2:
000000000001ed10         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x26f84)
000000000001ed14         push       0x1
000000000001ed16         push       qword [rsp+0x10+arg_8]
000000000001ed1a         push       qword [rsp+0x18+arg_0]
000000000001ed1e         push       0x0
000000000001ed20         call       re_search_2_stub                            ; re_search_2_stub
000000000001ed25         add        rsp, 0x28
000000000001ed29         ret
                        ; endp
000000000001ed2a         align      16                                          ; End of unwind block (FDE at 0x26f84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_search_2:
000000000001ed30         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x26fa8)
000000000001ed34         push       0x0
000000000001ed36         push       qword [rsp+0x10+arg_10]
000000000001ed3a         push       qword [rsp+0x18+arg_8]
000000000001ed3e         push       qword [rsp+0x20+arg_0]
000000000001ed42         call       re_search_2_stub                            ; re_search_2_stub
000000000001ed47         add        rsp, 0x28
000000000001ed4b         ret
                        ; endp
000000000001ed4c         align      16                                          ; End of unwind block (FDE at 0x26fa8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_registers:
000000000001ed50         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x26fcc)
000000000001ed53         jne        loc_1ed78

000000000001ed55         and        byte [rdi+0x38], 0xf9
000000000001ed59         mov        qword [rsi], 0x0
000000000001ed60         mov        qword [rsi+0x10], 0x0
000000000001ed68         mov        qword [rsi+8], 0x0
000000000001ed70         ret
                        ; endp
000000000001ed71         align      8

                     loc_1ed78:
000000000001ed78         movzx      eax, byte [rdi+0x38]                        ; CODE XREF=rpl_re_set_registers+3
000000000001ed7c         and        eax, 0xfffffff9
000000000001ed7f         or         eax, 0x2
000000000001ed82         mov        byte [rdi+0x38], al
000000000001ed85         mov        qword [rsi], rdx
000000000001ed88         mov        qword [rsi+8], rcx
000000000001ed8c         mov        qword [rsi+0x10], r8
000000000001ed90         ret
                        ; endp
000000000001ed91         align      32                                          ; End of unwind block (FDE at 0x26fcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setenv_TZ:
000000000001eda0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x26fe4), CODE XREF=revert_tz.part.1+36, set_tz+69
000000000001eda3         je         loc_1edc0

000000000001eda5         mov        rsi, rdi                                    ; argument "__value" for method j_setenv
000000000001eda8         lea        rdi, qword [aTime+7]                        ; argument "__name" for method j_setenv, 0x1fba7
000000000001edaf         mov        edx, 0x1                                    ; argument "__replace" for method j_setenv
000000000001edb4         jmp        j_setenv                                    ; setenv
                        ; endp
000000000001edb9         align      64

                     loc_1edc0:
000000000001edc0         lea        rdi, qword [aTime+7]                        ; argument "__name" for method j_unsetenv, 0x1fba7, CODE XREF=setenv_TZ+3
000000000001edc7         jmp        j_unsetenv                                  ; unsetenv
                        ; endp
000000000001edcc         align      16                                          ; End of unwind block (FDE at 0x26fe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzfree.part.0:
000000000001edd0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x26ff8), CODE XREF=revert_tz.part.1+54, set_tz+103, tzfree+6
000000000001edd3         je         loc_1edf8

000000000001edd5         push       rbx
000000000001edd6         nop        word [cs:rax+rax]

                     loc_1ede0:
000000000001ede0         mov        rbx, qword [rdi]                            ; CODE XREF=tzfree.part.0+30
000000000001ede3         call       sub_2a10                                    ; sub_2a10
000000000001ede8         test       rbx, rbx
000000000001edeb         mov        rdi, rbx
000000000001edee         jne        loc_1ede0

000000000001edf0         pop        rbx
000000000001edf1         ret
                        ; endp
000000000001edf2         align      8

                     loc_1edf8:
000000000001edf8         ret                                                    ; CODE XREF=tzfree.part.0+3
                        ; endp
000000000001edfa         align      512                                         ; End of unwind block (FDE at 0x26ff8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     revert_tz.part.1:
000000000001ee00         push       r13                                         ; Begin of unwind block (FDE at 0x27014), CODE XREF=localtime_rz+105, localtime_rz+152, mktime_z+108
000000000001ee02         push       r12
000000000001ee04         push       rbp
000000000001ee05         push       rbx
000000000001ee06         mov        rbp, rdi
000000000001ee09         sub        rsp, 0x8
000000000001ee0d         call       j___errno_location                          ; __errno_location
000000000001ee12         cmp        byte [rbp+8], 0x0
000000000001ee16         mov        rbx, rax
000000000001ee19         mov        r12d, dword [rax]
000000000001ee1c         lea        rdi, qword [rbp+9]
000000000001ee20         jne        loc_1ee24

000000000001ee22         xor        edi, edi

                     loc_1ee24:
000000000001ee24         call       setenv_TZ                                   ; setenv_TZ, CODE XREF=revert_tz.part.1+32
000000000001ee29         test       eax, eax
000000000001ee2b         je         loc_1ee50

000000000001ee2d         mov        r12d, dword [rbx]
000000000001ee30         xor        r13d, r13d

                     loc_1ee33:
000000000001ee33         mov        rdi, rbp                                    ; CODE XREF=revert_tz.part.1+91
000000000001ee36         call       tzfree.part.0                               ; tzfree.part.0
000000000001ee3b         mov        dword [rbx], r12d
000000000001ee3e         add        rsp, 0x8
000000000001ee42         mov        eax, r13d
000000000001ee45         pop        rbx
000000000001ee46         pop        rbp
000000000001ee47         pop        r12
000000000001ee49         pop        r13
000000000001ee4b         ret
                        ; endp
000000000001ee4c         align      16

                     loc_1ee50:
000000000001ee50         call       j_tzset                                     ; tzset, CODE XREF=revert_tz.part.1+43
000000000001ee55         mov        r13d, 0x1
000000000001ee5b         jmp        loc_1ee33
000000000001ee5d         align      32                                          ; End of unwind block (FDE at 0x27014)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzalloc:
000000000001ee60         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x27050), CODE XREF=main+1068, save_abbr+236, set_tz+44
000000000001ee63         push       r12
000000000001ee65         push       rbp
000000000001ee66         push       rbx
000000000001ee67         je         loc_1eec8

000000000001ee69         mov        r12, rdi
000000000001ee6c         call       j_strlen                                    ; strlen
000000000001ee71         lea        rbp, qword [rax+1]
000000000001ee75         mov        edi, 0x76
000000000001ee7a         cmp        rbp, 0x76
000000000001ee7e         cmovae     rdi, rbp
000000000001ee82         add        rdi, 0x11
000000000001ee86         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
000000000001ee8a         call       j_malloc                                    ; malloc
000000000001ee8f         test       rax, rax
000000000001ee92         mov        rbx, rax
000000000001ee95         je         loc_1eebb

000000000001ee97         mov        qword [rax], 0x0
000000000001ee9e         lea        rdi, qword [rbx+9]                          ; argument "__dest" for method j_memcpy
000000000001eea2         mov        eax, 0x1
000000000001eea7         mov        word [rbx+8], ax
000000000001eeab         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000001eeae         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
000000000001eeb1         call       j_memcpy                                    ; memcpy
000000000001eeb6         mov        byte [rbx+rbp+9], 0x0

                     loc_1eebb:
000000000001eebb         mov        rax, rbx                                    ; CODE XREF=tzalloc+53, tzalloc+120
000000000001eebe         pop        rbx
000000000001eebf         pop        rbp
000000000001eec0         pop        r12
000000000001eec2         ret
                        ; endp
000000000001eec3         align      8

                     loc_1eec8:
000000000001eec8         mov        edi, 0x80                                   ; argument "__size" for method j_malloc, CODE XREF=tzalloc+7
000000000001eecd         call       j_malloc                                    ; malloc
000000000001eed2         test       rax, rax
000000000001eed5         mov        rbx, rax
000000000001eed8         je         loc_1eebb

000000000001eeda         xor        edx, edx
000000000001eedc         mov        qword [rbx], 0x0
000000000001eee3         mov        rax, rbx
000000000001eee6         mov        word [rbx+8], dx
000000000001eeea         pop        rbx
000000000001eeeb         pop        rbp
000000000001eeec         pop        r12
000000000001eeee         ret
                        ; endp
000000000001eeef         align      16                                          ; End of unwind block (FDE at 0x27050)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     save_abbr:
000000000001eef0         push       r15                                         ; Begin of unwind block (FDE at 0x27088), CODE XREF=localtime_rz+59, mktime_z+81
000000000001eef2         push       r14
000000000001eef4         mov        eax, 0x1
000000000001eef9         push       r13
000000000001eefb         push       r12
000000000001eefd         push       rbp
000000000001eefe         push       rbx
000000000001eeff         sub        rsp, 0x8
000000000001ef03         mov        rbp, qword [rsi+0x30]
000000000001ef07         test       rbp, rbp
000000000001ef0a         je         loc_1efa0

000000000001ef10         cmp        rsi, rbp
000000000001ef13         mov        r12, rdi
000000000001ef16         mov        r13, rsi
000000000001ef19         ja         loc_1ef24

000000000001ef1b         lea        rdx, qword [rsi+0x38]
000000000001ef1f         cmp        rbp, rdx
000000000001ef22         jb         loc_1efa0

                     loc_1ef24:
000000000001ef24         cmp        byte [rbp], 0x0                             ; CODE XREF=save_abbr+41
000000000001ef28         lea        rbx, qword [r12+9]
000000000001ef2d         je         loc_1ef90

000000000001ef2f         nop

                     loc_1ef30:
000000000001ef30         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp, CODE XREF=save_abbr+118, save_abbr+127
000000000001ef33         mov        rdi, rbx                                    ; argument "__s1" for method j_strcmp
000000000001ef36         call       j_strcmp                                    ; strcmp
000000000001ef3b         test       eax, eax
000000000001ef3d         je         loc_1ef97

                     loc_1ef3f:
000000000001ef3f         cmp        byte [rbx], 0x0                             ; CODE XREF=save_abbr+149
000000000001ef42         jne        loc_1ef56

000000000001ef44         lea        r14, qword [r12+9]
000000000001ef49         cmp        r14, rbx
000000000001ef4c         jne        loc_1efb0

000000000001ef4e         cmp        byte [r12+8], 0x0
000000000001ef54         je         loc_1efb0

                     loc_1ef56:
000000000001ef56         mov        rdi, rbx                                    ; argument "__s" for method j_strlen, CODE XREF=save_abbr+82
000000000001ef59         call       j_strlen                                    ; strlen
000000000001ef5e         lea        rbx, qword [rbx+rax+1]
000000000001ef63         cmp        byte [rbx], 0x0
000000000001ef66         jne        loc_1ef30

000000000001ef68         mov        rax, qword [r12]
000000000001ef6c         test       rax, rax
000000000001ef6f         je         loc_1ef30

000000000001ef71         lea        rbx, qword [rax+9]
000000000001ef75         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp
000000000001ef78         mov        r12, rax
000000000001ef7b         mov        rdi, rbx                                    ; argument "__s1" for method j_strcmp
000000000001ef7e         call       j_strcmp                                    ; strcmp
000000000001ef83         test       eax, eax
000000000001ef85         jne        loc_1ef3f

000000000001ef87         jmp        loc_1ef97
000000000001ef89         align      16

                     loc_1ef90:
000000000001ef90         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x21fe1, CODE XREF=save_abbr+61

                     loc_1ef97:
000000000001ef97         mov        qword [r13+0x30], rbx                       ; CODE XREF=save_abbr+77, save_abbr+151, save_abbr+263, save_abbr+305
000000000001ef9b         mov        eax, 0x1

                     loc_1efa0:
000000000001efa0         add        rsp, 0x8                                    ; CODE XREF=save_abbr+26, save_abbr+50, save_abbr+253, save_abbr+285
000000000001efa4         pop        rbx
000000000001efa5         pop        rbp
000000000001efa6         pop        r12
000000000001efa8         pop        r13
000000000001efaa         pop        r14
000000000001efac         pop        r15
000000000001efae         ret
                        ; endp
000000000001efaf         align      16

                     loc_1efb0:
000000000001efb0         mov        rdi, rbp                                    ; argument "__s" for method j_strlen, CODE XREF=save_abbr+92, save_abbr+100
000000000001efb3         call       j_strlen                                    ; strlen
000000000001efb8         lea        rdx, qword [rax+1]
000000000001efbc         mov        r15, rax
000000000001efbf         mov        rax, rbx
000000000001efc2         sub        rax, r14
000000000001efc5         mov        rcx, rax
000000000001efc8         not        rcx
000000000001efcb         cmp        rcx, rdx
000000000001efce         jb         loc_1f000

000000000001efd0         add        rax, rdx
000000000001efd3         cmp        rax, 0x76
000000000001efd7         jbe        loc_1f010

000000000001efd9         mov        rdi, rbp
000000000001efdc         call       tzalloc                                     ; tzalloc
000000000001efe1         mov        rbx, rax
000000000001efe4         mov        qword [r12], rax
000000000001efe8         xor        eax, eax
000000000001efea         test       rbx, rbx
000000000001efed         je         loc_1efa0

000000000001efef         mov        byte [rbx+8], 0x0
000000000001eff3         add        rbx, 0x9
000000000001eff7         jmp        loc_1ef97
000000000001eff9         align      4096

                     loc_1f000:
000000000001f000         call       j___errno_location                          ; __errno_location, CODE XREF=save_abbr+222
000000000001f005         mov        dword [rax], 0xc
000000000001f00b         xor        eax, eax
000000000001f00d         jmp        loc_1efa0
000000000001f00f         align      16

                     loc_1f010:
000000000001f010         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy, CODE XREF=save_abbr+231
000000000001f013         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000001f016         call       j_memcpy                                    ; memcpy
000000000001f01b         mov        byte [rbx+r15+1], 0x0
000000000001f021         jmp        loc_1ef97
000000000001f026         align      16                                          ; End of unwind block (FDE at 0x27088)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     set_tz:
000000000001f030         push       r12                                         ; Begin of unwind block (FDE at 0x270d4), CODE XREF=localtime_rz+24, mktime_z+39
000000000001f032         push       rbp
000000000001f033         mov        rbp, rdi
000000000001f036         push       rbx
000000000001f037         lea        rdi, qword [aTime+7]                        ; argument "__name" for method j_getenv, 0x1fba7
000000000001f03e         sub        rsp, 0x10
000000000001f042         call       j_getenv                                    ; getenv
000000000001f047         test       rax, rax
000000000001f04a         mov        rbx, rax
000000000001f04d         je         loc_1f0e8

000000000001f053         cmp        byte [rbp+8], 0x0
000000000001f057         jne        loc_1f0c0

                     loc_1f059:
000000000001f059         mov        rdi, rbx                                    ; CODE XREF=set_tz+164, set_tz+194
000000000001f05c         call       tzalloc                                     ; tzalloc
000000000001f061         test       rax, rax
000000000001f064         mov        r12, rax
000000000001f067         je         loc_1f0ad

000000000001f069         xor        edi, edi
000000000001f06b         cmp        byte [rbp+8], 0x0
000000000001f06f         je         loc_1f075

000000000001f071         lea        rdi, qword [rbp+9]

                     loc_1f075:
000000000001f075         call       setenv_TZ                                   ; setenv_TZ, CODE XREF=set_tz+63
000000000001f07a         test       eax, eax
000000000001f07c         je         loc_1f108

000000000001f082         call       j___errno_location                          ; __errno_location
000000000001f087         cmp        r12, 0x1
000000000001f08b         mov        ebx, dword [rax]
000000000001f08d         je         loc_1f0a8

000000000001f08f         mov        rdi, r12
000000000001f092         mov        qword [rsp+0x28+var_20], rax
000000000001f097         call       tzfree.part.0                               ; tzfree.part.0
000000000001f09c         mov        rax, qword [rsp+0x28+var_20]
000000000001f0a1         nop        dword [rax]

                     loc_1f0a8:
000000000001f0a8         mov        dword [rax], ebx                            ; CODE XREF=set_tz+93
000000000001f0aa         xor        r12d, r12d

                     loc_1f0ad:
000000000001f0ad         add        rsp, 0x10                                   ; CODE XREF=set_tz+55, set_tz+221
000000000001f0b1         mov        rax, r12
000000000001f0b4         pop        rbx
000000000001f0b5         pop        rbp
000000000001f0b6         pop        r12
000000000001f0b8         ret
                        ; endp
000000000001f0b9         align      64

                     loc_1f0c0:
000000000001f0c0         lea        rdi, qword [rbp+9]                          ; argument "__s1" for method j_strcmp, CODE XREF=set_tz+39
000000000001f0c4         mov        rsi, rax                                    ; argument "__s2" for method j_strcmp
000000000001f0c7         mov        r12d, 0x1
000000000001f0cd         call       j_strcmp                                    ; strcmp
000000000001f0d2         test       eax, eax
000000000001f0d4         jne        loc_1f059

000000000001f0d6         add        rsp, 0x10
000000000001f0da         mov        rax, r12
000000000001f0dd         pop        rbx
000000000001f0de         pop        rbp
000000000001f0df         pop        r12
000000000001f0e1         ret
                        ; endp
000000000001f0e2         align      8

                     loc_1f0e8:
000000000001f0e8         cmp        byte [rbp+8], 0x0                           ; CODE XREF=set_tz+29
000000000001f0ec         mov        r12d, 0x1
000000000001f0f2         jne        loc_1f059

000000000001f0f8         add        rsp, 0x10
000000000001f0fc         mov        rax, r12
000000000001f0ff         pop        rbx
000000000001f100         pop        rbp
000000000001f101         pop        r12
000000000001f103         ret
                        ; endp
000000000001f104         align      8

                     loc_1f108:
000000000001f108         call       j_tzset                                     ; tzset, CODE XREF=set_tz+76
000000000001f10d         jmp        loc_1f0ad
000000000001f10f         align      16                                          ; End of unwind block (FDE at 0x270d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzfree:
000000000001f110         cmp        rdi, 0x1                                    ; Begin of unwind block (FDE at 0x27128)
000000000001f114         je         loc_1f11b

000000000001f116         jmp        tzfree.part.0                               ; tzfree.part.0
                        ; endp

                     loc_1f11b:
000000000001f11b         ret                                                    ; CODE XREF=tzfree+4
                        ; endp
000000000001f11c         align      32                                          ; End of unwind block (FDE at 0x27128)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     localtime_rz:
000000000001f120         push       r13                                         ; Begin of unwind block (FDE at 0x2713c), CODE XREF=print_size+130
000000000001f122         push       r12
000000000001f124         push       rbp
000000000001f125         push       rbx
000000000001f126         mov        rbp, rsi
000000000001f129         sub        rsp, 0x8
000000000001f12d         test       rdi, rdi
000000000001f130         je         loc_1f1a0

000000000001f132         mov        r13, rdx
000000000001f135         mov        rbx, rdi
000000000001f138         call       set_tz                                      ; set_tz
000000000001f13d         test       rax, rax
000000000001f140         mov        r12, rax
000000000001f143         je         loc_1f18e

000000000001f145         mov        rsi, r13                                    ; argument "__tp" for method j_localtime_r
000000000001f148         mov        rdi, rbp                                    ; argument "__timer" for method j_localtime_r
000000000001f14b         call       j_localtime_r                               ; localtime_r
000000000001f150         test       rax, rax
000000000001f153         je         loc_1f180

000000000001f155         mov        rsi, r13
000000000001f158         mov        rdi, rbx
000000000001f15b         call       save_abbr                                   ; save_abbr
000000000001f160         test       al, al
000000000001f162         je         loc_1f180

000000000001f164         cmp        r12, 0x1
000000000001f168         jne        loc_1f1b5

                     loc_1f16a:
000000000001f16a         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+159
000000000001f16e         mov        rax, r13
000000000001f171         pop        rbx
000000000001f172         pop        rbp
000000000001f173         pop        r12
000000000001f175         pop        r13
000000000001f177         ret
                        ; endp
000000000001f178         align      128

                     loc_1f180:
000000000001f180         cmp        r12, 0x1                                    ; CODE XREF=localtime_rz+51, localtime_rz+66
000000000001f184         je         loc_1f18e

000000000001f186         mov        rdi, r12
000000000001f189         call       revert_tz.part.1                            ; revert_tz.part.1

                     loc_1f18e:
000000000001f18e         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+35, localtime_rz+100, localtime_rz+161
000000000001f192         xor        eax, eax
000000000001f194         pop        rbx
000000000001f195         pop        rbp
000000000001f196         pop        r12
000000000001f198         pop        r13
000000000001f19a         ret
                        ; endp
000000000001f19b         align      32

                     loc_1f1a0:
000000000001f1a0         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+16
000000000001f1a4         mov        rdi, rbp                                    ; argument "__timer" for method j_gmtime_r
000000000001f1a7         mov        rsi, rdx                                    ; argument "__tp" for method j_gmtime_r
000000000001f1aa         pop        rbx
000000000001f1ab         pop        rbp
000000000001f1ac         pop        r12
000000000001f1ae         pop        r13
000000000001f1b0         jmp        j_gmtime_r                                  ; gmtime_r
                        ; endp

                     loc_1f1b5:
000000000001f1b5         mov        rdi, r12                                    ; CODE XREF=localtime_rz+72
000000000001f1b8         call       revert_tz.part.1                            ; revert_tz.part.1
000000000001f1bd         test       al, al
000000000001f1bf         jne        loc_1f16a

000000000001f1c1         jmp        loc_1f18e
000000000001f1c3         align      16                                          ; End of unwind block (FDE at 0x2713c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_38: int32_t, -56
        ;    var_44: int32_t, -68
        ;    var_48: int32_t, -72
        ;    var_4C: int32_t, -76
        ;    var_50: int32_t, -80
        ;    var_54: int32_t, -84
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96


                     mktime_z:
000000000001f1d0         push       r12                                         ; Begin of unwind block (FDE at 0x2719c), CODE XREF=sub_6390+571
000000000001f1d2         push       rbp
000000000001f1d3         push       rbx
000000000001f1d4         mov        rbx, rsi
000000000001f1d7         sub        rsp, 0x50
000000000001f1db         mov        rax, qword [fs:0x28]
000000000001f1e4         mov        qword [rsp+0x68+var_20], rax
000000000001f1e9         xor        eax, eax
000000000001f1eb         test       rdi, rdi
000000000001f1ee         je         loc_1f2f0

000000000001f1f4         mov        rbp, rdi
000000000001f1f7         call       set_tz                                      ; set_tz
000000000001f1fc         test       rax, rax
000000000001f1ff         mov        r12, rax
000000000001f202         je         loc_1f300

000000000001f208         mov        rdi, rbx                                    ; argument "__tp" for method j_mktime
000000000001f20b         call       j_mktime                                    ; mktime
000000000001f210         cmp        rax, 0xffffffffffffffff
000000000001f214         mov        qword [rsp+0x68+var_60], rax
000000000001f219         je         loc_1f270

                     loc_1f21b:
000000000001f21b         mov        rsi, rbx                                    ; CODE XREF=mktime_z+269
000000000001f21e         mov        rdi, rbp
000000000001f221         call       save_abbr                                   ; save_abbr
000000000001f226         test       al, al
000000000001f228         jne        loc_1f233

000000000001f22a         mov        qword [rsp+0x68+var_60], 0xffffffffffffffff

                     loc_1f233:
000000000001f233         cmp        r12, 0x1                                    ; CODE XREF=mktime_z+88, mktime_z+178, mktime_z+261, mktime_z+275
000000000001f237         je         loc_1f249

000000000001f239         mov        rdi, r12
000000000001f23c         call       revert_tz.part.1                            ; revert_tz.part.1
000000000001f241         test       al, al
000000000001f243         je         loc_1f300

                     loc_1f249:
000000000001f249         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=mktime_z+103

                     loc_1f24e:
000000000001f24e         mov        rcx, qword [rsp+0x68+var_20]                ; CODE XREF=mktime_z+296, mktime_z+311
000000000001f253         xor        rcx, qword [fs:0x28]
000000000001f25c         jne        loc_1f30c

000000000001f262         add        rsp, 0x50
000000000001f266         pop        rbx
000000000001f267         pop        rbp
000000000001f268         pop        r12
000000000001f26a         ret
                        ; endp
000000000001f26b         align      16

                     loc_1f270:
000000000001f270         lea        rsi, qword [rsp+0x68+var_58]                ; argument "__tp" for method j_localtime_r, CODE XREF=mktime_z+73
000000000001f275         lea        rdi, qword [rsp+0x68+var_60]                ; argument "__timer" for method j_localtime_r
000000000001f27a         call       j_localtime_r                               ; localtime_r
000000000001f27f         test       rax, rax
000000000001f282         je         loc_1f233

000000000001f284         mov        eax, dword [rbx]
000000000001f286         mov        edx, dword [rbx+4]
000000000001f289         xor        eax, dword [rsp+0x68+var_58]
000000000001f28d         xor        edx, dword [rsp+0x68+var_54]
000000000001f291         mov        ecx, dword [rsp+0x68+var_38]
000000000001f295         or         eax, edx
000000000001f297         mov        edx, dword [rbx+8]
000000000001f29a         xor        edx, dword [rsp+0x68+var_50]
000000000001f29e         or         eax, edx
000000000001f2a0         mov        edx, dword [rbx+0xc]
000000000001f2a3         xor        edx, dword [rsp+0x68+var_4C]
000000000001f2a7         or         eax, edx
000000000001f2a9         mov        edx, dword [rbx+0x10]
000000000001f2ac         xor        edx, dword [rsp+0x68+var_48]
000000000001f2b0         or         eax, edx
000000000001f2b2         mov        edx, dword [rbx+0x14]
000000000001f2b5         xor        edx, dword [rsp+0x68+var_44]
000000000001f2b9         or         eax, edx
000000000001f2bb         mov        edx, dword [rbx+0x20]
000000000001f2be         test       edx, edx
000000000001f2c0         sete       dil
000000000001f2c4         test       ecx, ecx
000000000001f2c6         sete       sil
000000000001f2ca         cmp        dil, sil
000000000001f2cd         je         loc_1f2db

000000000001f2cf         test       edx, edx
000000000001f2d1         js         loc_1f2db

000000000001f2d3         test       ecx, ecx
000000000001f2d5         jns        loc_1f233

                     loc_1f2db:
000000000001f2db         test       eax, eax                                    ; CODE XREF=mktime_z+253, mktime_z+257
000000000001f2dd         je         loc_1f21b

000000000001f2e3         jmp        loc_1f233
000000000001f2e8         align      16

                     loc_1f2f0:
000000000001f2f0         mov        rdi, rsi                                    ; argument "__tp" for method j_timegm, CODE XREF=mktime_z+30
000000000001f2f3         call       j_timegm                                    ; timegm
000000000001f2f8         jmp        loc_1f24e
000000000001f2fd         align      256

                     loc_1f300:
000000000001f300         mov        rax, 0xffffffffffffffff                     ; CODE XREF=mktime_z+50, mktime_z+115
000000000001f307         jmp        loc_1f24e

                     loc_1f30c:
000000000001f30c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mktime_z+140
                        ; endp
000000000001f311         align      32                                          ; End of unwind block (FDE at 0x2719c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
000000000001f320         push       r12                                         ; Begin of unwind block (FDE at 0x271d4), CODE XREF=close_stdout+13, close_stdout+51
000000000001f322         push       rbp
000000000001f323         mov        rbp, rdi
000000000001f326         push       rbx
000000000001f327         call       j___fpending                                ; __fpending
000000000001f32c         mov        ebx, dword [rbp]
000000000001f32f         mov        rdi, rbp
000000000001f332         mov        r12, rax
000000000001f335         call       rpl_fclose                                  ; rpl_fclose
000000000001f33a         and        ebx, 0x20
000000000001f33d         test       ebx, ebx
000000000001f33f         jne        loc_1f358

000000000001f341         test       eax, eax
000000000001f343         je         loc_1f34f

000000000001f345         test       r12, r12
000000000001f348         mov        eax, 0xffffffff
000000000001f34d         je         loc_1f388

                     loc_1f34f:
000000000001f34f         pop        rbx                                         ; CODE XREF=close_stream+35
000000000001f350         pop        rbp
000000000001f351         pop        r12
000000000001f353         ret
                        ; endp
000000000001f354         align      8

                     loc_1f358:
000000000001f358         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000001f35a         jne        loc_1f378

000000000001f35c         call       j___errno_location                          ; __errno_location
000000000001f361         mov        dword [rax], 0x0
000000000001f367         mov        eax, 0xffffffff
000000000001f36c         pop        rbx
000000000001f36d         pop        rbp
000000000001f36e         pop        r12
000000000001f370         ret
                        ; endp
000000000001f371         align      8

                     loc_1f378:
000000000001f378         pop        rbx                                         ; CODE XREF=close_stream+58
000000000001f379         mov        eax, 0xffffffff
000000000001f37e         pop        rbp
000000000001f37f         pop        r12
000000000001f381         ret
                        ; endp
000000000001f382         align      8

                     loc_1f388:
000000000001f388         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000001f38d         cmp        dword [rax], 0x9
000000000001f390         pop        rbx
000000000001f391         pop        rbp
000000000001f392         pop        r12
000000000001f394         setne      al
000000000001f397         movzx      eax, al
000000000001f39a         neg        eax
000000000001f39c         ret
                        ; endp
000000000001f39d         align      32                                          ; End of unwind block (FDE at 0x271d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check_init:
000000000001f3a0         mov        qword [rdi+0x10], 0x0                       ; Begin of unwind block (FDE at 0x27224), CODE XREF=setup_dir.isra.4+87
000000000001f3a8         mov        dword [rdi+0x18], 0x95f616
000000000001f3af         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check:
000000000001f3b0         cmp        dword [rdi+0x18], 0x95f616                  ; End of unwind block (FDE at 0x27224), Begin of unwind block (FDE at 0x27238), CODE XREF=enter_dir.isra.10+136
000000000001f3b7         jne        loc_1f417

000000000001f3b9         mov        rdx, qword [rdi+0x10]
000000000001f3bd         mov        rcx, qword [rsi+8]
000000000001f3c1         test       rdx, rdx
000000000001f3c4         je         loc_1f3e0

000000000001f3c6         cmp        qword [rdi], rcx
000000000001f3c9         je         loc_1f3f8

                     loc_1f3cb:
000000000001f3cb         lea        r8, qword [rdx+1]                           ; CODE XREF=cycle_check+79
000000000001f3cf         xor        eax, eax
000000000001f3d1         test       rdx, r8
000000000001f3d4         mov        qword [rdi+0x10], r8
000000000001f3d8         je         loc_1f410

000000000001f3da         ret
                        ; endp
000000000001f3dc         align      32

                     loc_1f3e0:
000000000001f3e0         mov        qword [rdi+0x10], 0x1                       ; CODE XREF=cycle_check+20

                     loc_1f3e8:
000000000001f3e8         mov        rax, qword [rsi]                            ; CODE XREF=cycle_check+101
000000000001f3eb         mov        qword [rdi], rcx
000000000001f3ee         mov        qword [rdi+8], rax
000000000001f3f2         xor        eax, eax
000000000001f3f4         ret
                        ; endp
000000000001f3f5         align      8

                     loc_1f3f8:
000000000001f3f8         mov        rax, qword [rdi+8]                          ; CODE XREF=cycle_check+25
000000000001f3fc         cmp        qword [rsi], rax
000000000001f3ff         jne        loc_1f3cb

                     loc_1f401:
000000000001f401         mov        eax, 0x1                                    ; CODE XREF=cycle_check+99
000000000001f406         ret
                        ; endp
000000000001f407         align      16

                     loc_1f410:
000000000001f410         test       r8, r8                                      ; CODE XREF=cycle_check+40
000000000001f413         je         loc_1f401

000000000001f415         jmp        loc_1f3e8

                     loc_1f417:
000000000001f417         lea        rcx, qword [__PRETTY_FUNCTION__.3994]       ; argument "__function" for method j___assert_fail, "cycle_check", CODE XREF=cycle_check+7
000000000001f41e         lea        rsi, qword [aCoreutils831li_23010]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/cycle-check.c"
000000000001f425         lea        rdi, qword [aStatemagic9827]                ; argument "__assertion" for method j___assert_fail, "state->magic == 9827862"
000000000001f42c         sub        rsp, 0x8
000000000001f430         mov        edx, 0x3c                                   ; argument "__line" for method j___assert_fail
000000000001f435         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001f43a         align      64                                          ; End of unwind block (FDE at 0x27238)

                     open_safer:
000000000001f440         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0x27254), CODE XREF=diropen.isra.6+35
000000000001f444         mov        qword [rsp+0x58+var_28], rdx
000000000001f449         xor        edx, edx
000000000001f44b         mov        rax, qword [fs:0x28]
000000000001f454         mov        qword [rsp+0x58+var_40], rax
000000000001f459         xor        eax, eax
000000000001f45b         test       sil, 0x40
000000000001f45f         jne        loc_1f488

                     loc_1f461:
000000000001f461         xor        eax, eax                                    ; CODE XREF=open_safer+103
000000000001f463         call       j_open                                      ; open
000000000001f468         mov        edi, eax
000000000001f46a         call       fd_safer                                    ; fd_safer
000000000001f46f         mov        rcx, qword [rsp+0x58+var_40]
000000000001f474         xor        rcx, qword [fs:0x28]
000000000001f47d         jne        loc_1f4a9

000000000001f47f         add        rsp, 0x58
000000000001f483         ret
                        ; endp
000000000001f484         align      8

                     loc_1f488:
000000000001f488         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
000000000001f48d         mov        dword [rsp+0x58+var_58], 0x10
000000000001f494         mov        edx, dword [rsp+0x58+var_28]
000000000001f498         mov        qword [rsp+0x58+var_50], rax
000000000001f49d         lea        rax, qword [rsp+0x58+var_38]
000000000001f4a2         mov        qword [rsp+0x58+var_48], rax
000000000001f4a7         jmp        loc_1f461

                     loc_1f4a9:
000000000001f4a9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
000000000001f4ae         align      16                                          ; End of unwind block (FDE at 0x27254)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
000000000001f4b0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x27274), CODE XREF=rpl_mbrtowc+71
000000000001f4b4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000001f4b6         call       j_setlocale                                 ; setlocale
000000000001f4bb         mov        rdx, rax
000000000001f4be         mov        eax, 0x1
000000000001f4c3         test       rdx, rdx
000000000001f4c6         je         loc_1f4e5

000000000001f4c8         lea        rdi, qword [__PRETTY_FUNCTION__.3994+12]    ; 0x2305c
000000000001f4cf         mov        ecx, 0x2
000000000001f4d4         mov        rsi, rdx
000000000001f4d7         rep  cmpsb byte [rsi], byte [rdi]
000000000001f4d9         seta       cl
000000000001f4dc         sbb        cl, 0x0
000000000001f4df         xor        eax, eax
000000000001f4e1         test       cl, cl
000000000001f4e3         jne        loc_1f4f0

                     loc_1f4e5:
000000000001f4e5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
000000000001f4e9         ret
                        ; endp
000000000001f4ea         align      16

                     loc_1f4f0:
000000000001f4f0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
000000000001f4f7         mov        ecx, 0x6
000000000001f4fc         mov        rsi, rdx
000000000001f4ff         rep  cmpsb byte [rsi], byte [rdi]
000000000001f501         seta       al
000000000001f504         sbb        al, 0x0
000000000001f506         test       al, al
000000000001f508         setne      al
000000000001f50b         add        rsp, 0x8
000000000001f50f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_init:
000000000001f510         mov        byte [rdi+0x1c], 0x1                        ; End of unwind block (FDE at 0x27274), Begin of unwind block (FDE at 0x27294), CODE XREF=rpl_fts_open+681
000000000001f514         mov        qword [rdi+0x14], 0x0
000000000001f51c         mov        dword [rdi], esi
000000000001f51e         mov        dword [rdi+4], esi
000000000001f521         mov        dword [rdi+8], esi
000000000001f524         mov        dword [rdi+0xc], esi
000000000001f527         mov        dword [rdi+0x10], esi
000000000001f52a         ret
                        ; endp
000000000001f52b         align      16                                          ; End of unwind block (FDE at 0x27294)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_empty:
000000000001f530         movzx      eax, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0x272a8), CODE XREF=fd_ring_clear+31, fts_safe_changedir+455
000000000001f534         ret
                        ; endp
000000000001f535         align      64                                          ; End of unwind block (FDE at 0x272a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_push:
000000000001f540         movzx      edx, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0x272bc), CODE XREF=cwd_advance_fd+52
000000000001f544         mov        ecx, dword [rdi+0x14]
000000000001f547         xor        edx, 0x1
000000000001f54a         movzx      edx, dl
000000000001f54d         add        ecx, edx
000000000001f54f         and        ecx, 0x3
000000000001f552         mov        eax, ecx
000000000001f554         lea        r8, qword [rdi+rax*4]
000000000001f558         mov        eax, dword [r8]
000000000001f55b         mov        dword [r8], esi
000000000001f55e         mov        esi, dword [rdi+0x18]
000000000001f561         mov        dword [rdi+0x14], ecx
000000000001f564         cmp        esi, ecx
000000000001f566         jne        loc_1f570

000000000001f568         add        edx, esi
000000000001f56a         and        edx, 0x3
000000000001f56d         mov        dword [rdi+0x18], edx

                     loc_1f570:
000000000001f570         mov        byte [rdi+0x1c], 0x0                        ; CODE XREF=i_ring_push+38
000000000001f574         ret
                        ; endp
000000000001f575         align      128                                         ; End of unwind block (FDE at 0x272bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_pop:
000000000001f580         cmp        byte [rdi+0x1c], 0x0                        ; Begin of unwind block (FDE at 0x272d0), CODE XREF=fd_ring_clear+19, fts_safe_changedir+475
000000000001f584         jne        loc_1f5b5

000000000001f586         mov        eax, dword [rdi+0x14]
000000000001f589         mov        esi, dword [rdi+0x10]
000000000001f58c         lea        rcx, qword [rdi+rax*4]
000000000001f590         mov        rdx, rax
000000000001f593         mov        eax, dword [rcx]
000000000001f595         mov        dword [rcx], esi
000000000001f597         cmp        edx, dword [rdi+0x18]
000000000001f59a         je         loc_1f5b0

000000000001f59c         add        edx, 0x3
000000000001f59f         and        edx, 0x3
000000000001f5a2         mov        dword [rdi+0x14], edx
000000000001f5a5         ret
                        ; endp
000000000001f5a6         align      16

                     loc_1f5b0:
000000000001f5b0         mov        byte [rdi+0x1c], 0x1                        ; CODE XREF=i_ring_pop+26
000000000001f5b4         ret
                        ; endp

                     loc_1f5b5:
000000000001f5b5         sub        rsp, 0x8                                    ; CODE XREF=i_ring_pop+4
000000000001f5b9         call       j_abort                                     ; abort
                        ; endp
000000000001f5be         align      64                                          ; End of unwind block (FDE at 0x272d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000001f5c0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x272e4), CODE XREF=gettext_quote.part.1+11
000000000001f5c4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000001f5c9         call       j_nl_langinfo                               ; nl_langinfo
000000000001f5ce         test       rax, rax
000000000001f5d1         je         loc_1f5f0

000000000001f5d3         cmp        byte [rax], 0x0
000000000001f5d6         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000001f5dd         cmove      rax, rdx
000000000001f5e1         add        rsp, 0x8
000000000001f5e5         ret
                        ; endp
000000000001f5e6         align      16

                     loc_1f5f0:
000000000001f5f0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000001f5f7         add        rsp, 0x8
000000000001f5fb         ret
                        ; endp
000000000001f5fc         align      512                                         ; End of unwind block (FDE at 0x272e4)

                     openat_safer:
000000000001f600         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0x27304), CODE XREF=diropen.isra.6+53, opendirat+21
000000000001f604         mov        qword [rsp+0x58+var_20], rcx
000000000001f609         xor        ecx, ecx
000000000001f60b         mov        rax, qword [fs:0x28]
000000000001f614         mov        qword [rsp+0x58+var_40], rax
000000000001f619         xor        eax, eax
000000000001f61b         test       dl, 0x40
000000000001f61e         jne        loc_1f648

                     loc_1f620:
000000000001f620         xor        eax, eax                                    ; CODE XREF=openat_safer+103
000000000001f622         call       j_openat                                    ; openat
000000000001f627         mov        edi, eax
000000000001f629         call       fd_safer                                    ; fd_safer
000000000001f62e         mov        rsi, qword [rsp+0x58+var_40]
000000000001f633         xor        rsi, qword [fs:0x28]
000000000001f63c         jne        loc_1f669

000000000001f63e         add        rsp, 0x58
000000000001f642         ret
                        ; endp
000000000001f643         align      8

                     loc_1f648:
000000000001f648         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=openat_safer+30
000000000001f64d         mov        dword [rsp+0x58+var_58], 0x18
000000000001f654         mov        ecx, dword [rsp+0x58+var_20]
000000000001f658         mov        qword [rsp+0x58+var_50], rax
000000000001f65d         lea        rax, qword [rsp+0x58+var_38]
000000000001f662         mov        qword [rsp+0x58+var_48], rax
000000000001f667         jmp        loc_1f620

                     loc_1f669:
000000000001f669         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=openat_safer+60
                        ; endp
000000000001f66e         align      16                                          ; End of unwind block (FDE at 0x27304)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     opendirat:
000000000001f670         push       r13                                         ; Begin of unwind block (FDE at 0x27324), CODE XREF=fts_build+1189
000000000001f672         push       r12
000000000001f674         or         edx, 0x90900
000000000001f67a         push       rbp
000000000001f67b         push       rbx
000000000001f67c         xor        eax, eax
000000000001f67e         mov        r12, rcx
000000000001f681         sub        rsp, 0x8
000000000001f685         call       openat_safer                                ; openat_safer
000000000001f68a         test       eax, eax
000000000001f68c         js         loc_1f6e0

000000000001f68e         mov        edi, eax                                    ; argument "__fd" for method j_fdopendir
000000000001f690         mov        ebx, eax
000000000001f692         call       j_fdopendir                                 ; fdopendir
000000000001f697         test       rax, rax
000000000001f69a         mov        rbp, rax
000000000001f69d         je         loc_1f6b8

000000000001f69f         mov        dword [r12], ebx
000000000001f6a3         add        rsp, 0x8
000000000001f6a7         mov        rax, rbp
000000000001f6aa         pop        rbx
000000000001f6ab         pop        rbp
000000000001f6ac         pop        r12
000000000001f6ae         pop        r13
000000000001f6b0         ret
                        ; endp
000000000001f6b1         align      8

                     loc_1f6b8:
000000000001f6b8         call       j___errno_location                          ; __errno_location, CODE XREF=opendirat+45
000000000001f6bd         mov        r13d, dword [rax]
000000000001f6c0         mov        r12, rax
000000000001f6c3         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000001f6c5         call       j_close                                     ; close
000000000001f6ca         mov        rax, rbp
000000000001f6cd         mov        dword [r12], r13d
000000000001f6d1         add        rsp, 0x8
000000000001f6d5         pop        rbx
000000000001f6d6         pop        rbp
000000000001f6d7         pop        r12
000000000001f6d9         pop        r13
000000000001f6db         ret
                        ; endp
000000000001f6dc         align      32

                     loc_1f6e0:
000000000001f6e0         add        rsp, 0x8                                    ; CODE XREF=opendirat+28
000000000001f6e4         xor        ebp, ebp
000000000001f6e6         pop        rbx
000000000001f6e7         mov        rax, rbp
000000000001f6ea         pop        rbp
000000000001f6eb         pop        r12
000000000001f6ed         pop        r13
000000000001f6ef         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
000000000001f6f0         push       r13                                         ; End of unwind block (FDE at 0x27324), Begin of unwind block (FDE at 0x27384), CODE XREF=open_safer+42, openat_safer+41
000000000001f6f2         push       r12
000000000001f6f4         push       rbp
000000000001f6f5         push       rbx
000000000001f6f6         mov        ebx, edi
000000000001f6f8         sub        rsp, 0x8
000000000001f6fc         cmp        edi, 0x2
000000000001f6ff         ja         loc_1f722

000000000001f701         call       dup_safer                                   ; dup_safer
000000000001f706         mov        r12d, eax
000000000001f709         call       j___errno_location                          ; __errno_location
000000000001f70e         mov        r13d, dword [rax]
000000000001f711         mov        rbp, rax
000000000001f714         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000001f716         call       j_close                                     ; close
000000000001f71b         mov        ebx, r12d
000000000001f71e         mov        dword [rbp], r13d

                     loc_1f722:
000000000001f722         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
000000000001f726         mov        eax, ebx
000000000001f728         pop        rbx
000000000001f729         pop        rbp
000000000001f72a         pop        r12
000000000001f72c         pop        r13
000000000001f72e         ret
                        ; endp
000000000001f72f         align      16                                          ; End of unwind block (FDE at 0x27384)

                     rpl_fcntl:
000000000001f730         push       r12                                         ; Begin of unwind block (FDE at 0x273bc), CODE XREF=fts_build+2314, dup_safer+9
000000000001f732         push       rbp
000000000001f733         mov        ebp, edi
000000000001f735         push       rbx
000000000001f736         sub        rsp, 0x50
000000000001f73a         mov        rax, qword [fs:0x28]
000000000001f743         mov        qword [rsp+0x68+var_50], rax
000000000001f748         xor        eax, eax
000000000001f74a         lea        rax, qword [rsp+0x68+arg_0]
000000000001f74f         test       esi, esi
000000000001f751         mov        qword [rsp+0x68+var_38], rdx
000000000001f756         mov        qword [rsp+0x68+var_30], rcx
000000000001f75b         mov        qword [rsp+0x68+var_28], r8
000000000001f760         mov        qword [rsp+0x68+var_60], rax
000000000001f765         lea        rax, qword [rsp+0x68+var_48]
000000000001f76a         mov        qword [rsp+0x68+var_20], r9
000000000001f76f         mov        dword [rsp+0x68+var_68], 0x10
000000000001f776         mov        qword [rsp+0x68+var_58], rax
000000000001f77b         je         loc_1f982

000000000001f781         cmp        esi, 0x406
000000000001f787         jne        loc_1f7d0

000000000001f789         mov        rax, qword [rsp+0x68+var_58]
000000000001f78e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000001f795         mov        dword [rsp+0x68+var_68], 0x18
000000000001f79c         mov        r12d, dword [rax+0x10]
000000000001f7a0         mov        edx, r12d
000000000001f7a3         js         loc_1f8d3

000000000001f7a9         xor        eax, eax
000000000001f7ab         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000001f7b0         call       j_fcntl                                     ; fcntl
000000000001f7b5         test       eax, eax
000000000001f7b7         mov        ebx, eax
000000000001f7b9         js         loc_1f948

                     loc_1f7bf:
000000000001f7bf         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000001f7c9         jmp        loc_1f810
000000000001f7cb         align      16

                     loc_1f7d0:
000000000001f7d0         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000001f7d3         je         loc_1f800

000000000001f7d5         jg         loc_1f830

000000000001f7d7         cmp        esi, 0x4
000000000001f7da         je         loc_1f8b0

000000000001f7e0         jg         loc_1f8a0

000000000001f7e6         cmp        esi, 0x2
000000000001f7e9         je         loc_1f8b0

000000000001f7ef         jg         loc_1f800

000000000001f7f1         cmp        esi, 0x1
000000000001f7f4         jne        loc_1f858

000000000001f7f6         nop        word [cs:rax+rax]

                     loc_1f800:
000000000001f800         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000001f802         xor        eax, eax
000000000001f804         call       j_fcntl                                     ; fcntl
000000000001f809         mov        ebx, eax
000000000001f80b         nop        dword [rax+rax]

                     loc_1f810:
000000000001f810         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000001f815         xor        rcx, qword [fs:0x28]
000000000001f81e         mov        eax, ebx
000000000001f820         jne        loc_1f97d

000000000001f826         add        rsp, 0x50
000000000001f82a         pop        rbx
000000000001f82b         pop        rbp
000000000001f82c         pop        r12
000000000001f82e         ret
                        ; endp
000000000001f82f         align      16

                     loc_1f830:
000000000001f830         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000001f836         jg         loc_1f880

000000000001f838         cmp        esi, 0x406
000000000001f83e         jge        loc_1f8b0

000000000001f840         cmp        esi, 0x401
000000000001f846         je         loc_1f800

000000000001f848         cmp        esi, 0x402
000000000001f84e         je         loc_1f8b0

000000000001f850         cmp        esi, 0x400
000000000001f856         je         loc_1f8b0

                     loc_1f858:
000000000001f858         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000001f85b         cmp        eax, 0x2f
000000000001f85e         ja         loc_1f99a

000000000001f864         add        rax, qword [rsp+0x68+var_58]

                     loc_1f869:
000000000001f869         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000001f86c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000001f86e         xor        eax, eax
000000000001f870         call       j_fcntl                                     ; fcntl
000000000001f875         mov        ebx, eax
000000000001f877         jmp        loc_1f810
000000000001f879         align      128

                     loc_1f880:
000000000001f880         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000001f886         je         loc_1f8b0

000000000001f888         jl         loc_1f800

000000000001f88e         cmp        esi, 0x40a
000000000001f894         jne        loc_1f858

000000000001f896         jmp        loc_1f800
000000000001f89b         align      32

                     loc_1f8a0:
000000000001f8a0         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000001f8a3         je         loc_1f800

000000000001f8a9         jg         loc_1f8b0

000000000001f8ab         cmp        esi, 0x8
000000000001f8ae         jne        loc_1f858

                     loc_1f8b0:
000000000001f8b0         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000001f8b3         cmp        eax, 0x2f
000000000001f8b6         ja         loc_1f9a4

000000000001f8bc         add        rax, qword [rsp+0x68+var_58]

                     loc_1f8c1:
000000000001f8c1         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000001f8c3         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000001f8c5         xor        eax, eax
000000000001f8c7         call       j_fcntl                                     ; fcntl
000000000001f8cc         mov        ebx, eax
000000000001f8ce         jmp        loc_1f810

                     loc_1f8d3:
000000000001f8d3         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000001f8d5         xor        eax, eax
000000000001f8d7         call       j_fcntl                                     ; fcntl
000000000001f8dc         test       eax, eax
000000000001f8de         mov        ebx, eax
000000000001f8e0         js         loc_1f810

000000000001f8e6         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000001f8ed         jne        loc_1f810

                     loc_1f8f3:
000000000001f8f3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000001f8f5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000001f8fa         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000001f8fc         call       j_fcntl                                     ; fcntl
000000000001f901         test       eax, eax
000000000001f903         js         loc_1f921

000000000001f905         or         eax, 0x1
000000000001f908         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000001f90d         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000001f90f         mov        edx, eax
000000000001f911         xor        eax, eax
000000000001f913         call       j_fcntl                                     ; fcntl
000000000001f918         cmp        eax, 0xffffffff
000000000001f91b         jne        loc_1f810

                     loc_1f921:
000000000001f921         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000001f926         mov        r12d, dword [rax]
000000000001f929         mov        rbp, rax
000000000001f92c         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000001f92e         call       j_close                                     ; close
000000000001f933         mov        ebx, 0xffffffff
000000000001f938         mov        dword [rbp], r12d
000000000001f93c         jmp        loc_1f810
000000000001f941         align      8

                     loc_1f948:
000000000001f948         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000001f94d         cmp        dword [rax], 0x16
000000000001f950         jne        loc_1f7bf

000000000001f956         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000001f958         xor        eax, eax
000000000001f95a         mov        edx, r12d
000000000001f95d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000001f95f         call       j_fcntl                                     ; fcntl
000000000001f964         test       eax, eax
000000000001f966         mov        ebx, eax
000000000001f968         js         loc_1f810

000000000001f96e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000001f978         jmp        loc_1f8f3

                     loc_1f97d:
000000000001f97d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_1f982:
000000000001f982         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000001f987         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000001f989         mov        edx, dword [rax+0x10]
000000000001f98c         xor        eax, eax
000000000001f98e         call       j_fcntl                                     ; fcntl
000000000001f993         mov        ebx, eax
000000000001f995         jmp        loc_1f810

                     loc_1f99a:
000000000001f99a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000001f99f         jmp        loc_1f869

                     loc_1f9a4:
000000000001f9a4         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000001f9a9         jmp        loc_1f8c1
000000000001f9ae         align      16                                          ; End of unwind block (FDE at 0x273bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer:
000000000001f9b0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0x273f4), CODE XREF=fd_safer+17
000000000001f9b5         xor        esi, esi
000000000001f9b7         xor        eax, eax
000000000001f9b9         jmp        rpl_fcntl                                   ; rpl_fcntl
000000000001f9be         align      64                                          ; End of unwind block (FDE at 0x273f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000001f9c0         push       r15                                         ; Begin of unwind block (FDE at 0x2740c), DATA XREF=_start+22
000000000001f9c2         push       r14
000000000001f9c4         mov        r15, rdx
000000000001f9c7         push       r13
000000000001f9c9         push       r12
000000000001f9cb         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000001f9d2         push       rbp
000000000001f9d3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000001f9da         push       rbx
000000000001f9db         mov        r13d, edi
000000000001f9de         mov        r14, rsi
000000000001f9e1         sub        rbp, r12
000000000001f9e4         sub        rsp, 0x8
000000000001f9e8         sar        rbp, 0x3
000000000001f9ec         call       _init                                       ; _init
000000000001f9f1         test       rbp, rbp
000000000001f9f4         je         loc_1fa16

000000000001f9f6         xor        ebx, ebx
000000000001f9f8         nop        dword [rax+rax]

                     loc_1fa00:
000000000001fa00         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000001fa03         mov        rsi, r14
000000000001fa06         mov        edi, r13d
000000000001fa09         call       qword [r12+rbx*8]
000000000001fa0d         add        rbx, 0x1
000000000001fa11         cmp        rbp, rbx
000000000001fa14         jne        loc_1fa00

                     loc_1fa16:
000000000001fa16         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000001fa1a         pop        rbx
000000000001fa1b         pop        rbp
000000000001fa1c         pop        r12
000000000001fa1e         pop        r13
000000000001fa20         pop        r14
000000000001fa22         pop        r15
000000000001fa24         ret
                        ; endp
000000000001fa25         align      16                                          ; End of unwind block (FDE at 0x2740c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000001fa30         ret                                                    ; Begin of unwind block (FDE at 0x27454), DATA XREF=_start+15
                        ; endp
000000000001fa32         align      64                                          ; End of unwind block (FDE at 0x27454)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000001fa40         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x2746c), __dso_handle, CODE XREF=main+150
000000000001fa47         xor        esi, esi
000000000001fa49         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000001fa4e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x2746c)
000000000001fa4f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x1fa50; 0x1fa59[ (9 bytes)
        ; File offset : [129616; 129625[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000001fa50         sub        rsp, 0x8
000000000001fa54         add        rsp, 0x8
000000000001fa58         ret
                        ; endp
000000000001fa59         db  0x00 ; '.'
000000000001fa5a         db  0x00 ; '.'
000000000001fa5b         db  0x00 ; '.'
000000000001fa5c         db  0x00 ; '.'
000000000001fa5d         db  0x00 ; '.'
000000000001fa5e         db  0x00 ; '.'
000000000001fa5f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x1fa60; 0x2306a[ (13834 bytes)
        ; File offset : [129632; 143466[ (13834 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000001fa60         db  0x01 ; '.'
000000000001fa61         db  0x00 ; '.'
000000000001fa62         db  0x02 ; '.'
000000000001fa63         db  0x00 ; '.'
                     aInfinity:
000000000001fa64         db         "Infinity", 0                               ; DATA XREF=print_only_size+112
                     aTimeSIsOutOfRa:
000000000001fa6d         db         "time %s is out of range", 0                ; DATA XREF=print_size+281
                     aTsc:
000000000001fa85         db         "\t%s%c", 0                                 ; DATA XREF=print_size+173
000000000001fa8b         db  0x64 ; 'd'                                         ; DATA XREF=main+920, usage+608, usage+924, usage+1108, usage+1127, usage+1161
000000000001fa8c         db  0x75 ; 'u'
000000000001fa8d         db  0x00 ; '.'
000000000001fa8e         db  0x44 ; 'D'                                         ; DATA XREF=usage+554
000000000001fa8f         db  0x55 ; 'U'
000000000001fa90         db  0x00 ; '.'
000000000001fa91         db  0x5b ; '['                                         ; DATA XREF=usage+620
000000000001fa92         db  0x00 ; '.'
                     aTestInvocation:
000000000001fa93         db         "test invocation", 0                        ; DATA XREF=usage+659
                     aMulticallInvoc:
000000000001faa3         db         "Multi-call invocation", 0                  ; DATA XREF=usage+707
                     aSha224sum:
000000000001fab9         db         "sha224sum", 0                              ; DATA XREF=usage+724
                     aSha2Utilities:
000000000001fac3         db         "sha2 utilities", 0                         ; DATA XREF=usage+736
                     aSha256sum:
000000000001fad2         db         "sha256sum", 0                              ; DATA XREF=usage+627
                     aSha384sum:
000000000001fadc         db         "sha384sum", 0                              ; DATA XREF=usage+671
                     aSha512sum:
000000000001fae6         db         "sha512sum", 0                              ; DATA XREF=usage+695
                     aNsOnlineHelpSn:
000000000001faf0         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+810
000000000001fb07         db  0x47 ; 'G'                                         ; DATA XREF=main+913, usage+838, usage+1031, emit_bug_reporting_address+68
000000000001fb08         db  0x4e ; 'N'
000000000001fb09         db  0x55 ; 'U'
000000000001fb0a         db  0x20 ; ' '
                     aCoreutils:
000000000001fb0b         db         "coreutils", 0                              ; DATA XREF=main+119, main+131, usage+683
000000000001fb15         db  0x65 ; 'e'                                         ; DATA XREF=usage+877, usage+1070
000000000001fb16         db  0x6e ; 'n'
000000000001fb17         db  0x5f ; '_'                                         ; DATA XREF=sub_1c260+456
000000000001fb18         db  0x00 ; '.'
                     aFullDocumentat:
000000000001fb19         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+905, usage+1094
                     aLongiso:
000000000001fb34         db         "long-iso", 0                               ; DATA XREF=main+4263
                     aUsrlocalsharel:
000000000001fb3d         db         "/usr/local/share/locale", 0                ; DATA XREF=main+112
                     aDublocksize:
000000000001fb55         db         "DU_BLOCK_SIZE", 0                          ; DATA XREF=main+160
                     a0abdchhklmstxb:
000000000001fb63         db         "0abd:chHklmst:xB:DLPSX:", 0                ; DATA XREF=main+255
                     aInvalidMaximum:
000000000001fb7b         db         "invalid maximum depth %s", 0               ; DATA XREF=main+3374
                     aKkmmgtpezy0:
000000000001fb94         db         "kKmMGTPEZY0", 0                            ; DATA XREF=main+335
                     aTime:
000000000001fba0         db         "--time", 0                                 ; DATA XREF=main+1019
000000000001fba7         db  0x54 ; 'T'                                         ; DATA XREF=main+1047, setenv_TZ+8, setenv_TZ+32, set_tz+7
000000000001fba8         db  0x5a ; 'Z'
000000000001fba9         db  0x00 ; '.'
                     aDavidMackenzie:
000000000001fbaa         db         "David MacKenzie", 0                        ; DATA XREF=main+891
                     aTorbjornGranlu:
000000000001fbba         db         "Torbjorn Granlund", 0                      ; DATA XREF=main+906
                     aJimMeyering:
000000000001fbcc         db         "Jim Meyering", 0                           ; DATA XREF=main+864
                     aPaulEggert:
000000000001fbd9         db         "Paul Eggert", 0                            ; DATA XREF=main+899
                     aTimestyle:
000000000001fbe5         db         "TIME_STYLE", 0                             ; DATA XREF=main+4504
                     aTimeStyle:
000000000001fbf0         db         "time style", 0                             ; DATA XREF=main+4298
                     aYmdHmsnZ:
000000000001fbfb         db         "%Y-%m-%d %H:%M:%S.%N %z", 0                ; DATA XREF=main+4821
                     aYmdHm:
000000000001fc13         db         "%Y-%m-%d %H:%M", 0                         ; DATA XREF=main+4840
                     aYmd:
000000000001fc22         db         "%Y-%m-%d", 0                               ; DATA XREF=main+4353, sub_65d0+1630, sub_77e0+415
                     aExtraOperandS:
000000000001fc2b         db         "extra operand %s", 0                       ; DATA XREF=main+5027
                     aCannotOpenSFor:
000000000001fc3c         db         "cannot open %s for reading", 0             ; DATA XREF=main+3737
                     aSReadError:
000000000001fc57         db         "%s: read error", 0                         ; DATA XREF=main+2846
                     aCoreutils831sr:
000000000001fc66         db         "../coreutils-8.31/src/du.c", 0             ; DATA XREF=main+2807, main+4124, main+5252, main+5283
                     aFtsreadFailedS:
000000000001fc81         db         "fts_read failed: %s", 0                    ; DATA XREF=main+3870
                     aCannotReadDire:
000000000001fc95         db         "cannot read directory %s", 0               ; DATA XREF=main+3144
                     aEEnt:
000000000001fcae         db         "e == ent", 0                               ; DATA XREF=main+4131, main+5259
                     aCannotAccessS:
000000000001fcb7         db         "cannot access %s", 0                       ; DATA XREF=main+3930
                     aLevelPrevlevel:
000000000001fcc8         db         "level == prev_level - 1", 0                ; DATA XREF=main+5290
                     aFtscloseFailed:
000000000001fce0         db         "fts_close failed", 0                       ; DATA XREF=main+3805
                     aErrorReadingS:
000000000001fcf1         db         "error reading %s", 0                       ; DATA XREF=main+5183
                     aTotal:
000000000001fd02         db         "total", 0                                  ; DATA XREF=main+2976
                     aInvalidZerolen:
000000000001fd08         db         "invalid zero-length file name", 0          ; DATA XREF=main+2576, main+2665
                     aSluS:
000000000001fd26         db         "%s:%lu: %s", 0                             ; DATA XREF=main+2616
                     aFulliso:
000000000001fd31         db         "full-iso", 0
                     aAtime:
000000000001fd3a         db         "atime", 0
                     aAccess:
000000000001fd40         db         "access", 0
000000000001fd47         db  0x75 ; 'u'
000000000001fd48         db  0x73 ; 's'
000000000001fd49         db  0x65 ; 'e'
000000000001fd4a         db  0x00 ; '.'
                     aCtime:
000000000001fd4b         db         "ctime", 0
                     aStatus:
000000000001fd51         db         "status", 0
000000000001fd58         db  0x61 ; 'a'
000000000001fd59         db  0x6c ; 'l'
000000000001fd5a         db  0x6c ; 'l'
000000000001fd5b         db  0x00 ; '.'
                     aApparentsize:
000000000001fd5c         db         "apparent-size", 0
                     aBlocksize_1fd6a:        // aBlocksize
000000000001fd6a         db         "block-size", 0
                     aBytes:
000000000001fd75         db         "bytes", 0
                     aCountlinks:
000000000001fd7b         db         "count-links", 0
                     aDereferencearg:
000000000001fd87         db         "dereference-args", 0
                     aExclude:
000000000001fd98         db         "exclude", 0
                     aExcludefrom:
000000000001fda0         db         "exclude-from", 0
                     aFiles0from:
000000000001fdad         db         "files0-from", 0
                     aHumanreadable:
000000000001fdb9         db         "human-readable", 0
                     aInodes:
000000000001fdc8         db         "inodes", 0
000000000001fdcf         db  0x73 ; 's'
000000000001fdd0         db  0x69 ; 'i'
000000000001fdd1         db  0x00 ; '.'
                     aMaxdepth:
000000000001fdd2         db         "max-depth", 0
000000000001fddc         db  0x6e ; 'n'
000000000001fddd         db  0x6f ; 'o'
000000000001fdde         db  0x2d ; '-'
                     aDereference:
000000000001fddf         db         "dereference", 0
                     aOnefilesystem:
000000000001fdeb         db         "one-file-system", 0
                     aSeparatedirs:
000000000001fdfb         db         "separate-dirs", 0
                     aSummarize:
000000000001fe09         db         "summarize", 0
                     aThreshold:
000000000001fe13         db         "threshold", 0
                     aTimestyle_1fe1d:        // aTimestyle
000000000001fe1d         db         "time-style", 0
                     aHelp:
000000000001fe28         db         "help", 0
                     aVersion:
000000000001fe2d         db         "version", 0
000000000001fe35         align      8
                     aTrySHelpForMor:
000000000001fe38         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000001fe5f         align      32
                     aUsageSOptionFi:
000000000001fe60         db         "Usage: %s [OPTION]... [FILE]...\n  or:  %s [OPTION]... --files0-from=F\n", 0 ; DATA XREF=usage+93
000000000001fea7         align      8
                     aSummarizeDiskU:
000000000001fea8         db         "Summarize disk usage of the set of FILEs, recursively for directories.\n", 0 ; DATA XREF=usage+135
                     aNmandatoryArgu:
000000000001fef0         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+172
000000000001ff3b         align      64
                     a0NullEndEachOu:
000000000001ff40         db         "  -0, --null            end each output line with NUL, not newline\n  -a, --all             write counts for all files, not just directories\n      --apparent-size   print apparent sizes, rather than disk usage; although\n                          the apparen" ; DATA XREF=usage+209
0000000000020040         db         "t size is usually smaller, it may be\n                          larger due to holes in ('sparse') files, internal\n                          fragmentation, indirect blocks, and the like\n", 0
00000000000200f9         align      256
                     aBBlocksizesize:
0000000000020100         db         "  -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\n                           '-BM' prints sizes in units of 1,048,576 bytes;\n                           see SIZE format below\n  -b, --bytes           equivalent to '--apparent-size --bl" ; DATA XREF=usage+246
0000000000020200         db         "ock-size=1'\n  -c, --total           produce a grand total\n  -D, --dereference-args  dereference only symlinks that are listed on the\n                          command line\n  -d, --max-depth=N     print the total for a directory (or file, with --all)\n      "
0000000000020300         db         "                    only if it is N or fewer levels below the command\n                          line argument;  --max-depth=0 is the same as\n                          --summarize\n", 0
00000000000203b4         align      8
                     aFiles0fromfSum:
00000000000203b8         db         "      --files0-from=F   summarize disk usage of the\n                          NUL-terminated file names specified in file F;\n                          if F is -, then read names from standard input\n  -H                    equivalent to --dereference-args (" ; DATA XREF=usage+283
00000000000204b8         db         "-D)\n  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)\n      --inodes          list inode usage information instead of block usage\n", 0
0000000000020559         align      32
                     aKLikeBlocksize:
0000000000020560         db         "  -k                    like --block-size=1K\n  -L, --dereference     dereference all symbolic links\n  -l, --count-links     count sizes many times if hard linked\n  -m                    like --block-size=1M\n", 0 ; DATA XREF=usage+320
                     aPNodereference:
0000000000020630         db         "  -P, --no-dereference  don't follow any symbolic links (this is the default)\n  -S, --separate-dirs   for directories do not include size of subdirectories\n      --si              like -h, but use powers of 1000 not 1024\n  -s, --summarize       display onl" ; DATA XREF=usage+357
0000000000020730         db         "y a total for each argument\n", 0
000000000002074d         align      16
                     aTThresholdsize:
0000000000020750         db         "  -t, --threshold=SIZE  exclude entries smaller than SIZE if positive,\n                          or entries greater than SIZE if negative\n      --time            show time of the last modification of any file in the\n                          directory, or " ; DATA XREF=usage+394
0000000000020850         db         "any of its subdirectories\n      --time=WORD       show time as WORD instead of modification time:\n                          atime, access, use, ctime or status\n      --time-style=STYLE  show times using STYLE, which can be:\n                            full"
0000000000020950         db         "-iso, long-iso, iso, or +FORMAT;\n                            FORMAT is interpreted like in 'date'\n", 0
00000000000209b3         align      8
                     aXExcludefromfi:
00000000000209b8         db         "  -X, --exclude-from=FILE  exclude files that match any pattern in FILE\n      --exclude=PATTERN    exclude files that match PATTERN\n  -x, --one-file-system    skip directories on different file systems\n", 0 ; DATA XREF=usage+431
0000000000020a83         align      8
                     aHelpDisplayThi:
0000000000020a88         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+468
0000000000020ab5         align      8
                     aVersionOutputV:
0000000000020ab8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+505
0000000000020aee         align      16
                     aNdisplayValues:
0000000000020af0         db         "\nDisplay values are in units of the first available SIZE from --block-size,\nand the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\nOtherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\n", 0 ; DATA XREF=usage+535
0000000000020bcf         align      16
                     aNtheSizeArgume:
0000000000020bd0         db         "\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\n", 0 ; DATA XREF=usage+583
0000000000020ca4         align      8
                     aHttpswwwgnuorg:
0000000000020ca8         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+831, usage+931, usage+1024, usage+1134, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000020cd0         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1175
0000000000020d17         align      8
                     aOrAvailableLoc:
0000000000020d18         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+974
0000000000020d4b         align      16
                     aInvalidThresho:
0000000000020d50         db         "invalid --threshold argument '-0'", 0      ; DATA XREF=main+392
0000000000020d72         align      8
                     aCannotBothSumm:
0000000000020d78         db         "cannot both summarize and show all entries", 0 ; DATA XREF=main+5307
0000000000020da3         align      8
                     aWarningSummari_20da8:        // aWarningSummari
0000000000020da8         db         "warning: summarizing is the same as using --max-depth=0", 0 ; DATA XREF=main+3976
                     aWarningSummari:
0000000000020de0         db         "warning: summarizing conflicts with --max-depth=%lu", 0 ; DATA XREF=main+3316
0000000000020e14         align      8
                     aWarningOptions:
0000000000020e18         db         "warning: options --apparent-size and -b are ineffective with --inodes", 0 ; DATA XREF=main+4041
0000000000020e5e         align      32
                     aFileOperandsCa:
0000000000020e60         db         "file operands cannot be combined with --files0-from", 0 ; DATA XREF=main+5066
0000000000020e94         align      8
                     aUnexpectedErro:
0000000000020e98         db         "!\"unexpected error code from argv_iter\"", 0 ; DATA XREF=main+2814
                     aWhenReadingFil:
0000000000020ec0         db         "when reading file names from stdin, no file name of %s allowed", 0 ; DATA XREF=main+2517
0000000000020eff         align      256
                     aWarningCircula:
0000000000020f00         db         "WARNING: Circular directory structure.\nThis almost certainly means that you have a corrupted file system.\nNOTIFY YOUR SYSTEM MANAGER.\nThe following directory is part of the cycle:\n  %s\n", 0 ; DATA XREF=main+4777
0000000000020fba         align      64
                     switch_table_20fc0:        // switch_table
0000000000020fc0         dd         main.loc_2db0-switch_table_20fc0, main.loc_3c5b-switch_table_20fc0, 177 dup (main.loc_2edc-switch_table_20fc0), main.loc_2da4-switch_table_20fc0 ; switch table used at 0x2b8c containing 267 entries, DATA XREF=main+19
0000000000021290         dd         17 dup (main.loc_2edc-switch_table_20fc0), main.loc_2d64-switch_table_20fc0, main.loc_2edc-switch_table_20fc0, main.loc_2d57-switch_table_20fc0
00000000000212e0         dd         3 dup (main.loc_2edc-switch_table_20fc0), main.loc_2d57-switch_table_20fc0, 3 dup (main.loc_2edc-switch_table_20fc0), main.loc_2d4a-switch_table_20fc0
0000000000021300         dd         3 dup (main.loc_2edc-switch_table_20fc0), main.loc_2d3d-switch_table_20fc0, 2 dup (main.loc_2edc-switch_table_20fc0), main.loc_2d31-switch_table_20fc0
000000000002131c         dd         4 dup (main.loc_2edc-switch_table_20fc0), main.loc_2cc6-switch_table_20fc0, 8 dup (main.loc_2edc-switch_table_20fc0), main.loc_2cba-switch_table_20fc0
0000000000021354         dd         main.loc_2c9c-switch_table_20fc0, main.loc_2c90-switch_table_20fc0, main.loc_2c5a-switch_table_20fc0, 3 dup (main.loc_2edc-switch_table_20fc0)
000000000002136c         dd         main.loc_2c40-switch_table_20fc0, 2 dup (main.loc_2edc-switch_table_20fc0), main.loc_2c29-switch_table_20fc0, main.loc_2c1d-switch_table_20fc0
0000000000021380         dd         main.loc_2c06-switch_table_20fc0, 5 dup (main.loc_2edc-switch_table_20fc0), main.loc_2bfc-switch_table_20fc0, main.loc_2b98-switch_table_20fc0
00000000000213a0         dd         3 dup (main.loc_2edc-switch_table_20fc0), main.loc_2b8e-switch_table_20fc0, 7 dup (main.loc_2edc-switch_table_20fc0), main.loc_2ec4-switch_table_20fc0
00000000000213d0         dd         main.loc_2ea7-switch_table_20fc0, main.loc_2ed0-switch_table_20fc0, main.loc_2e8d-switch_table_20fc0, main.loc_2edc-switch_table_20fc0
00000000000213e0         dd         main.loc_2e21-switch_table_20fc0, main.loc_2e0e-switch_table_20fc0, main.loc_2e02-switch_table_20fc0
00000000000213ec         align      16
                     __PRETTY_FUNCTION__.7293:
00000000000213f0         db         "process_file", 0                           ; DATA XREF=main+4117, main+5245, main+5276
                     __PRETTY_FUNCTION__.7387:
00000000000213fd         db  0x6d ; 'm'                                         ; DATA XREF=main+2800
00000000000213fe         db  0x61 ; 'a'
00000000000213ff         db  0x69 ; 'i'
0000000000021400         db  0x6e ; 'n'
0000000000021401         db  0x00 ; '.'
                     posix_prefix.7365:
0000000000021402         db         "posix-", 0                                 ; DATA XREF=main+4562
0000000000021409         db  0x00 ; '.'
000000000002140a         db  0x00 ; '.'
000000000002140b         db  0x00 ; '.'
000000000002140c         db  0x00 ; '.'
000000000002140d         db  0x00 ; '.'
000000000002140e         db  0x00 ; '.'
000000000002140f         db  0x00 ; '.'
                     time_style_types:
0000000000021410         db  0x00 ; '.'                                         ; DATA XREF=main+4291, main+4319
0000000000021411         db  0x00 ; '.'
0000000000021412         db  0x00 ; '.'
0000000000021413         db  0x00 ; '.'
0000000000021414         db  0x01 ; '.'
0000000000021415         db  0x00 ; '.'
0000000000021416         db  0x00 ; '.'
0000000000021417         db  0x00 ; '.'
0000000000021418         db  0x02 ; '.'
0000000000021419         db  0x00 ; '.'
000000000002141a         db  0x00 ; '.'
000000000002141b         db  0x00 ; '.'
000000000002141c         db  0x00 ; '.'
000000000002141d         db  0x00 ; '.'
000000000002141e         db  0x00 ; '.'
000000000002141f         db  0x00 ; '.'
                     time_types:
0000000000021420         db  0x02 ; '.'                                         ; DATA XREF=main+1012, main+1037
0000000000021421         db  0x00 ; '.'
0000000000021422         db  0x00 ; '.'
0000000000021423         db  0x00 ; '.'
0000000000021424         db  0x02 ; '.'
0000000000021425         db  0x00 ; '.'
0000000000021426         db  0x00 ; '.'
0000000000021427         db  0x00 ; '.'
0000000000021428         db  0x02 ; '.'
0000000000021429         db  0x00 ; '.'
000000000002142a         db  0x00 ; '.'
000000000002142b         db  0x00 ; '.'
000000000002142c         db  0x01 ; '.'
000000000002142d         db  0x00 ; '.'
000000000002142e         db  0x00 ; '.'
000000000002142f         db  0x00 ; '.'
0000000000021430         db  0x01 ; '.'
0000000000021431         db  0x00 ; '.'
0000000000021432         db  0x00 ; '.'
0000000000021433         db  0x00 ; '.'
                     a831:
0000000000021434         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
0000000000021439         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
0000000000021454         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
0000000000021471         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
0000000000021486         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000002148e         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000002148f         db  0x20 ; ' '
0000000000021490         db  0x25 ; '%'                                         ; DATA XREF=main+711, main+2684, main+4645, close_stdout+143, xalloc_die+29
0000000000021491         db  0x73 ; 's'
0000000000021492         db  0x00 ; '.'
                     aWriteError:
0000000000021493         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000002149f         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
00000000000214a6         align      8
                     aCoreutils831li:
00000000000214a8         db         "../coreutils-8.31/lib/mbuiter.h", 0        ; DATA XREF=mbuiter_multi_next.part.0+7, string_hasher_ci+553, string_hasher_ci+584, string_hasher_ci+615, mbscasecmp+1735, mbscasecmp+1771
                     aMbsinitItersta:
00000000000214c8         db         "mbsinit (&iter->state)", 0                 ; DATA XREF=string_hasher_ci+560, mbscasecmp+1742
                     aItercurptr0:
00000000000214df         db         "*iter->cur.ptr == '\0'", 0                 ; DATA XREF=string_hasher_ci+622, mbscasecmp+1778
                     aItercurwc0:
00000000000214f6         db         "iter->cur.wc == 0", 0                      ; DATA XREF=mbuiter_multi_next.part.0+14, string_hasher_ci+591
0000000000021508         align      16
                     switch_table_21510:        // switch_table
0000000000021510         dd         fnmatch_pattern_has_wildcards.loc_53b0-switch_table_21510, 32 dup (fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510), fnmatch_pattern_has_wildcards.loc_53f8-switch_table_21510, 6 dup (fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510) ; switch table used at 0x53ad containing 126 entries, DATA XREF=fnmatch_pattern_has_wildcards+9
00000000000215b0         dd         2 dup (fnmatch_pattern_has_wildcards.loc_53b8-switch_table_21510), fnmatch_pattern_has_wildcards.loc_53bd-switch_table_21510, fnmatch_pattern_has_wildcards.loc_53f8-switch_table_21510, 2 dup (fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510)
00000000000215c8         dd         fnmatch_pattern_has_wildcards.loc_53b8-switch_table_21510, 16 dup (fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510), fnmatch_pattern_has_wildcards.loc_53bd-switch_table_21510, fnmatch_pattern_has_wildcards.loc_53f8-switch_table_21510
0000000000021614         dd         26 dup (fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510), fnmatch_pattern_has_wildcards.loc_53bd-switch_table_21510, fnmatch_pattern_has_wildcards.loc_53d8-switch_table_21510, 30 dup (fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510)
00000000000216fc         dd         fnmatch_pattern_has_wildcards.loc_53b8-switch_table_21510, fnmatch_pattern_has_wildcards.loc_53c8-switch_table_21510, fnmatch_pattern_has_wildcards.loc_53b8-switch_table_21510
0000000000021708         align      16
                     __PRETTY_FUNCTION__.5373:
0000000000021710         db         "mbuiter_multi_next", 0                     ; DATA XREF=string_hasher_ci+546, string_hasher_ci+577, string_hasher_ci+608
                     aHms:
0000000000021723         db         "%H:%M:%S", 0                               ; DATA XREF=sub_65d0+826
                     aMdy:
000000000002172c         db         "%m/%d/%y", 0                               ; DATA XREF=sub_65d0+1575
0000000000021735         db  0x00 ; '.'
0000000000021736         db  0x00 ; '.'
0000000000021737         db  0x00 ; '.'
0000000000021738         db  0x15 ; '.'                                         ; DATA XREF=__strftime_internal+433
0000000000021739         db  0x55 ; 'U'
000000000002173a         db  0xfe ; '.'
000000000002173b         db  0xff ; '.'
000000000002173c         db  0x58 ; 'X'
000000000002173d         db  0x49 ; 'I'
000000000002173e         db  0xfe ; '.'
000000000002173f         db  0xff ; '.'
0000000000021740         db  0x58 ; 'X'
0000000000021741         db  0x49 ; 'I'
0000000000021742         db  0xfe ; '.'
0000000000021743         db  0xff ; '.'
0000000000021744         db  0x58 ; 'X'
0000000000021745         db  0x49 ; 'I'
0000000000021746         db  0xfe ; '.'
0000000000021747         db  0xff ; '.'
0000000000021748         db  0x58 ; 'X'
0000000000021749         db  0x49 ; 'I'
000000000002174a         db  0xfe ; '.'
000000000002174b         db  0xff ; '.'
000000000002174c         db  0x58 ; 'X'
000000000002174d         db  0x49 ; 'I'
000000000002174e         db  0xfe ; '.'
000000000002174f         db  0xff ; '.'
0000000000021750         db  0x58 ; 'X'
0000000000021751         db  0x49 ; 'I'
0000000000021752         db  0xfe ; '.'
0000000000021753         db  0xff ; '.'
0000000000021754         db  0x58 ; 'X'
0000000000021755         db  0x49 ; 'I'
0000000000021756         db  0xfe ; '.'
0000000000021757         db  0xff ; '.'
0000000000021758         db  0x58 ; 'X'
0000000000021759         db  0x49 ; 'I'
000000000002175a         db  0xfe ; '.'
000000000002175b         db  0xff ; '.'
000000000002175c         db  0x58 ; 'X'
000000000002175d         db  0x49 ; 'I'
000000000002175e         db  0xfe ; '.'
000000000002175f         db  0xff ; '.'
0000000000021760         db  0x58 ; 'X'
0000000000021761         db  0x49 ; 'I'
0000000000021762         db  0xfe ; '.'
0000000000021763         db  0xff ; '.'
0000000000021764         db  0x58 ; 'X'
0000000000021765         db  0x49 ; 'I'
0000000000021766         db  0xfe ; '.'
0000000000021767         db  0xff ; '.'
0000000000021768         db  0x58 ; 'X'
0000000000021769         db  0x49 ; 'I'
000000000002176a         db  0xfe ; '.'
000000000002176b         db  0xff ; '.'
000000000002176c         db  0x58 ; 'X'
000000000002176d         db  0x49 ; 'I'
000000000002176e         db  0xfe ; '.'
000000000002176f         db  0xff ; '.'
0000000000021770         db  0x58 ; 'X'
0000000000021771         db  0x49 ; 'I'
0000000000021772         db  0xfe ; '.'
0000000000021773         db  0xff ; '.'
0000000000021774         db  0x58 ; 'X'
0000000000021775         db  0x49 ; 'I'
0000000000021776         db  0xfe ; '.'
0000000000021777         db  0xff ; '.'
0000000000021778         db  0x58 ; 'X'
0000000000021779         db  0x49 ; 'I'
000000000002177a         db  0xfe ; '.'
000000000002177b         db  0xff ; '.'
000000000002177c         db  0x58 ; 'X'
000000000002177d         db  0x49 ; 'I'
000000000002177e         db  0xfe ; '.'
000000000002177f         db  0xff ; '.'
0000000000021780         db  0x58 ; 'X'
0000000000021781         db  0x49 ; 'I'
0000000000021782         db  0xfe ; '.'
0000000000021783         db  0xff ; '.'
0000000000021784         db  0x58 ; 'X'
0000000000021785         db  0x49 ; 'I'
0000000000021786         db  0xfe ; '.'
0000000000021787         db  0xff ; '.'
0000000000021788         db  0x58 ; 'X'
0000000000021789         db  0x49 ; 'I'
000000000002178a         db  0xfe ; '.'
000000000002178b         db  0xff ; '.'
000000000002178c         db  0x58 ; 'X'
000000000002178d         db  0x49 ; 'I'
000000000002178e         db  0xfe ; '.'
000000000002178f         db  0xff ; '.'
0000000000021790         db  0x58 ; 'X'
0000000000021791         db  0x49 ; 'I'
0000000000021792         db  0xfe ; '.'
0000000000021793         db  0xff ; '.'
0000000000021794         db  0x58 ; 'X'
0000000000021795         db  0x49 ; 'I'
0000000000021796         db  0xfe ; '.'
0000000000021797         db  0xff ; '.'
0000000000021798         db  0x58 ; 'X'
0000000000021799         db  0x49 ; 'I'
000000000002179a         db  0xfe ; '.'
000000000002179b         db  0xff ; '.'
000000000002179c         db  0x58 ; 'X'
000000000002179d         db  0x49 ; 'I'
000000000002179e         db  0xfe ; '.'
000000000002179f         db  0xff ; '.'
00000000000217a0         db  0x58 ; 'X'
00000000000217a1         db  0x49 ; 'I'
00000000000217a2         db  0xfe ; '.'
00000000000217a3         db  0xff ; '.'
00000000000217a4         db  0x58 ; 'X'
00000000000217a5         db  0x49 ; 'I'
00000000000217a6         db  0xfe ; '.'
00000000000217a7         db  0xff ; '.'
00000000000217a8         db  0x58 ; 'X'
00000000000217a9         db  0x49 ; 'I'
00000000000217aa         db  0xfe ; '.'
00000000000217ab         db  0xff ; '.'
00000000000217ac         db  0x58 ; 'X'
00000000000217ad         db  0x49 ; 'I'
00000000000217ae         db  0xfe ; '.'
00000000000217af         db  0xff ; '.'
00000000000217b0         db  0x58 ; 'X'
00000000000217b1         db  0x49 ; 'I'
00000000000217b2         db  0xfe ; '.'
00000000000217b3         db  0xff ; '.'
00000000000217b4         db  0x58 ; 'X'
00000000000217b5         db  0x49 ; 'I'
00000000000217b6         db  0xfe ; '.'
00000000000217b7         db  0xff ; '.'
00000000000217b8         db  0x58 ; 'X'
00000000000217b9         db  0x49 ; 'I'
00000000000217ba         db  0xfe ; '.'
00000000000217bb         db  0xff ; '.'
00000000000217bc         db  0x58 ; 'X'
00000000000217bd         db  0x49 ; 'I'
00000000000217be         db  0xfe ; '.'
00000000000217bf         db  0xff ; '.'
00000000000217c0         db  0x58 ; 'X'
00000000000217c1         db  0x49 ; 'I'
00000000000217c2         db  0xfe ; '.'
00000000000217c3         db  0xff ; '.'
00000000000217c4         db  0x58 ; 'X'
00000000000217c5         db  0x49 ; 'I'
00000000000217c6         db  0xfe ; '.'
00000000000217c7         db  0xff ; '.'
00000000000217c8         db  0x58 ; 'X'
00000000000217c9         db  0x49 ; 'I'
00000000000217ca         db  0xfe ; '.'
00000000000217cb         db  0xff ; '.'
00000000000217cc         db  0x79 ; 'y'
00000000000217cd         db  0x55 ; 'U'
00000000000217ce         db  0xfe ; '.'
00000000000217cf         db  0xff ; '.'
00000000000217d0         db  0x58 ; 'X'
00000000000217d1         db  0x49 ; 'I'
00000000000217d2         db  0xfe ; '.'
00000000000217d3         db  0xff ; '.'
00000000000217d4         db  0x58 ; 'X'
00000000000217d5         db  0x49 ; 'I'
00000000000217d6         db  0xfe ; '.'
00000000000217d7         db  0xff ; '.'
00000000000217d8         db  0x58 ; 'X'
00000000000217d9         db  0x49 ; 'I'
00000000000217da         db  0xfe ; '.'
00000000000217db         db  0xff ; '.'
00000000000217dc         db  0x58 ; 'X'
00000000000217dd         db  0x49 ; 'I'
00000000000217de         db  0xfe ; '.'
00000000000217df         db  0xff ; '.'
00000000000217e0         db  0x58 ; 'X'
00000000000217e1         db  0x49 ; 'I'
00000000000217e2         db  0xfe ; '.'
00000000000217e3         db  0xff ; '.'
00000000000217e4         db  0x58 ; 'X'
00000000000217e5         db  0x49 ; 'I'
00000000000217e6         db  0xfe ; '.'
00000000000217e7         db  0xff ; '.'
00000000000217e8         db  0x58 ; 'X'
00000000000217e9         db  0x49 ; 'I'
00000000000217ea         db  0xfe ; '.'
00000000000217eb         db  0xff ; '.'
00000000000217ec         db  0x58 ; 'X'
00000000000217ed         db  0x49 ; 'I'
00000000000217ee         db  0xfe ; '.'
00000000000217ef         db  0xff ; '.'
00000000000217f0         db  0x58 ; 'X'
00000000000217f1         db  0x49 ; 'I'
00000000000217f2         db  0xfe ; '.'
00000000000217f3         db  0xff ; '.'
00000000000217f4         db  0x58 ; 'X'
00000000000217f5         db  0x49 ; 'I'
00000000000217f6         db  0xfe ; '.'
00000000000217f7         db  0xff ; '.'
00000000000217f8         db  0x58 ; 'X'
00000000000217f9         db  0x49 ; 'I'
00000000000217fa         db  0xfe ; '.'
00000000000217fb         db  0xff ; '.'
00000000000217fc         db  0x58 ; 'X'
00000000000217fd         db  0x49 ; 'I'
00000000000217fe         db  0xfe ; '.'
00000000000217ff         db  0xff ; '.'
0000000000021800         db  0x58 ; 'X'
0000000000021801         db  0x49 ; 'I'
0000000000021802         db  0xfe ; '.'
0000000000021803         db  0xff ; '.'
0000000000021804         db  0x58 ; 'X'
0000000000021805         db  0x49 ; 'I'
0000000000021806         db  0xfe ; '.'
0000000000021807         db  0xff ; '.'
0000000000021808         db  0x58 ; 'X'
0000000000021809         db  0x49 ; 'I'
000000000002180a         db  0xfe ; '.'
000000000002180b         db  0xff ; '.'
000000000002180c         db  0x58 ; 'X'
000000000002180d         db  0x49 ; 'I'
000000000002180e         db  0xfe ; '.'
000000000002180f         db  0xff ; '.'
0000000000021810         db  0x58 ; 'X'
0000000000021811         db  0x49 ; 'I'
0000000000021812         db  0xfe ; '.'
0000000000021813         db  0xff ; '.'
0000000000021814         db  0x58 ; 'X'
0000000000021815         db  0x49 ; 'I'
0000000000021816         db  0xfe ; '.'
0000000000021817         db  0xff ; '.'
0000000000021818         db  0x58 ; 'X'
0000000000021819         db  0x49 ; 'I'
000000000002181a         db  0xfe ; '.'
000000000002181b         db  0xff ; '.'
000000000002181c         db  0x58 ; 'X'
000000000002181d         db  0x49 ; 'I'
000000000002181e         db  0xfe ; '.'
000000000002181f         db  0xff ; '.'
0000000000021820         db  0xf9 ; '.'
0000000000021821         db  0x55 ; 'U'
0000000000021822         db  0xfe ; '.'
0000000000021823         db  0xff ; '.'
0000000000021824         db  0x58 ; 'X'
0000000000021825         db  0x49 ; 'I'
0000000000021826         db  0xfe ; '.'
0000000000021827         db  0xff ; '.'
0000000000021828         db  0x58 ; 'X'
0000000000021829         db  0x49 ; 'I'
000000000002182a         db  0xfe ; '.'
000000000002182b         db  0xff ; '.'
000000000002182c         db  0x58 ; 'X'
000000000002182d         db  0x49 ; 'I'
000000000002182e         db  0xfe ; '.'
000000000002182f         db  0xff ; '.'
0000000000021830         db  0x58 ; 'X'
0000000000021831         db  0x49 ; 'I'
0000000000021832         db  0xfe ; '.'
0000000000021833         db  0xff ; '.'
0000000000021834         db  0x58 ; 'X'
0000000000021835         db  0x49 ; 'I'
0000000000021836         db  0xfe ; '.'
0000000000021837         db  0xff ; '.'
0000000000021838         db  0x58 ; 'X'
0000000000021839         db  0x49 ; 'I'
000000000002183a         db  0xfe ; '.'
000000000002183b         db  0xff ; '.'
000000000002183c         db  0x18 ; '.'
000000000002183d         db  0x4c ; 'L'
000000000002183e         db  0xfe ; '.'
000000000002183f         db  0xff ; '.'
0000000000021840         db  0x5c ; '\'
0000000000021841         db  0x55 ; 'U'
0000000000021842         db  0xfe ; '.'
0000000000021843         db  0xff ; '.'
0000000000021844         db  0x3f ; '?'
0000000000021845         db  0x54 ; 'T'
0000000000021846         db  0xfe ; '.'
0000000000021847         db  0xff ; '.'
0000000000021848         db  0xb6 ; '.'
0000000000021849         db  0x54 ; 'T'
000000000002184a         db  0xfe ; '.'
000000000002184b         db  0xff ; '.'
000000000002184c         db  0x58 ; 'X'
000000000002184d         db  0x49 ; 'I'
000000000002184e         db  0xfe ; '.'
000000000002184f         db  0xff ; '.'
0000000000021850         db  0xd6 ; '.'
0000000000021851         db  0x54 ; 'T'
0000000000021852         db  0xfe ; '.'
0000000000021853         db  0xff ; '.'
0000000000021854         db  0x1e ; '.'
0000000000021855         db  0x52 ; 'R'
0000000000021856         db  0xfe ; '.'
0000000000021857         db  0xff ; '.'
0000000000021858         db  0x9c ; '.'
0000000000021859         db  0x53 ; 'S'
000000000002185a         db  0xfe ; '.'
000000000002185b         db  0xff ; '.'
000000000002185c         db  0x27 ; '''
000000000002185d         db  0x54 ; 'T'
000000000002185e         db  0xfe ; '.'
000000000002185f         db  0xff ; '.'
0000000000021860         db  0x58 ; 'X'
0000000000021861         db  0x49 ; 'I'
0000000000021862         db  0xfe ; '.'
0000000000021863         db  0xff ; '.'
0000000000021864         db  0x58 ; 'X'
0000000000021865         db  0x49 ; 'I'
0000000000021866         db  0xfe ; '.'
0000000000021867         db  0xff ; '.'
0000000000021868         db  0x58 ; 'X'
0000000000021869         db  0x49 ; 'I'
000000000002186a         db  0xfe ; '.'
000000000002186b         db  0xff ; '.'
000000000002186c         db  0xb7 ; '.'
000000000002186d         db  0x53 ; 'S'
000000000002186e         db  0xfe ; '.'
000000000002186f         db  0xff ; '.'
0000000000021870         db  0xd2 ; '.'
0000000000021871         db  0x53 ; 'S'
0000000000021872         db  0xfe ; '.'
0000000000021873         db  0xff ; '.'
0000000000021874         db  0x58 ; 'X'
0000000000021875         db  0x49 ; 'I'
0000000000021876         db  0xfe ; '.'
0000000000021877         db  0xff ; '.'
0000000000021878         db  0x89 ; '.'
0000000000021879         db  0x4d ; 'M'
000000000002187a         db  0xfe ; '.'
000000000002187b         db  0xff ; '.'
000000000002187c         db  0x58 ; 'X'
000000000002187d         db  0x49 ; 'I'
000000000002187e         db  0xfe ; '.'
000000000002187f         db  0xff ; '.'
0000000000021880         db  0xa5 ; '.'
0000000000021881         db  0x4d ; 'M'
0000000000021882         db  0xfe ; '.'
0000000000021883         db  0xff ; '.'
0000000000021884         db  0x32 ; '2'
0000000000021885         db  0x4e ; 'N'
0000000000021886         db  0xfe ; '.'
0000000000021887         db  0xff ; '.'
0000000000021888         db  0xd2 ; '.'
0000000000021889         db  0x51 ; 'Q'
000000000002188a         db  0xfe ; '.'
000000000002188b         db  0xff ; '.'
000000000002188c         db  0xe9 ; '.'
000000000002188d         db  0x51 ; 'Q'
000000000002188e         db  0xfe ; '.'
000000000002188f         db  0xff ; '.'
0000000000021890         db  0x1e ; '.'
0000000000021891         db  0x52 ; 'R'
0000000000021892         db  0xfe ; '.'
0000000000021893         db  0xff ; '.'
0000000000021894         db  0xf0 ; '.'
0000000000021895         db  0x56 ; 'V'
0000000000021896         db  0xfe ; '.'
0000000000021897         db  0xff ; '.'
0000000000021898         db  0xe8 ; '.'
0000000000021899         db  0x4a ; 'J'
000000000002189a         db  0xfe ; '.'
000000000002189b         db  0xff ; '.'
000000000002189c         db  0x3d ; '='
000000000002189d         db  0x57 ; 'W'
000000000002189e         db  0xfe ; '.'
000000000002189f         db  0xff ; '.'
00000000000218a0         db  0x9b ; '.'
00000000000218a1         db  0x57 ; 'W'
00000000000218a2         db  0xfe ; '.'
00000000000218a3         db  0xff ; '.'
00000000000218a4         db  0x58 ; 'X'
00000000000218a5         db  0x49 ; 'I'
00000000000218a6         db  0xfe ; '.'
00000000000218a7         db  0xff ; '.'
00000000000218a8         db  0x58 ; 'X'
00000000000218a9         db  0x49 ; 'I'
00000000000218aa         db  0xfe ; '.'
00000000000218ab         db  0xff ; '.'
00000000000218ac         db  0x58 ; 'X'
00000000000218ad         db  0x49 ; 'I'
00000000000218ae         db  0xfe ; '.'
00000000000218af         db  0xff ; '.'
00000000000218b0         db  0x58 ; 'X'
00000000000218b1         db  0x49 ; 'I'
00000000000218b2         db  0xfe ; '.'
00000000000218b3         db  0xff ; '.'
00000000000218b4         db  0x58 ; 'X'
00000000000218b5         db  0x49 ; 'I'
00000000000218b6         db  0xfe ; '.'
00000000000218b7         db  0xff ; '.'
00000000000218b8         db  0x58 ; 'X'
00000000000218b9         db  0x49 ; 'I'
00000000000218ba         db  0xfe ; '.'
00000000000218bb         db  0xff ; '.'
00000000000218bc         db  0x18 ; '.'
00000000000218bd         db  0x4c ; 'L'
00000000000218be         db  0xfe ; '.'
00000000000218bf         db  0xff ; '.'
00000000000218c0         db  0x13 ; '.'
00000000000218c1         db  0x5a ; 'Z'
00000000000218c2         db  0xfe ; '.'
00000000000218c3         db  0xff ; '.'
00000000000218c4         db  0xe8 ; '.'
00000000000218c5         db  0x4a ; 'J'
00000000000218c6         db  0xfe ; '.'
00000000000218c7         db  0xff ; '.'
00000000000218c8         db  0xba ; '.'
00000000000218c9         db  0x58 ; 'X'
00000000000218ca         db  0xfe ; '.'
00000000000218cb         db  0xff ; '.'
00000000000218cc         db  0xd5 ; '.'
00000000000218cd         db  0x58 ; 'X'
00000000000218ce         db  0xfe ; '.'
00000000000218cf         db  0xff ; '.'
00000000000218d0         db  0x58 ; 'X'
00000000000218d1         db  0x49 ; 'I'
00000000000218d2         db  0xfe ; '.'
00000000000218d3         db  0xff ; '.'
00000000000218d4         db  0x1e ; '.'
00000000000218d5         db  0x52 ; 'R'
00000000000218d6         db  0xfe ; '.'
00000000000218d7         db  0xff ; '.'
00000000000218d8         db  0x13 ; '.'
00000000000218d9         db  0x5a ; 'Z'
00000000000218da         db  0xfe ; '.'
00000000000218db         db  0xff ; '.'
00000000000218dc         db  0x58 ; 'X'
00000000000218dd         db  0x49 ; 'I'
00000000000218de         db  0xfe ; '.'
00000000000218df         db  0xff ; '.'
00000000000218e0         db  0x06 ; '.'
00000000000218e1         db  0x59 ; 'Y'
00000000000218e2         db  0xfe ; '.'
00000000000218e3         db  0xff ; '.'
00000000000218e4         db  0x37 ; '7'
00000000000218e5         db  0x59 ; 'Y'
00000000000218e6         db  0xfe ; '.'
00000000000218e7         db  0xff ; '.'
00000000000218e8         db  0x4a ; 'J'
00000000000218e9         db  0x59 ; 'Y'
00000000000218ea         db  0xfe ; '.'
00000000000218eb         db  0xff ; '.'
00000000000218ec         db  0x5a ; 'Z'
00000000000218ed         db  0x59 ; 'Y'
00000000000218ee         db  0xfe ; '.'
00000000000218ef         db  0xff ; '.'
00000000000218f0         db  0x8b ; '.'
00000000000218f1         db  0x59 ; 'Y'
00000000000218f2         db  0xfe ; '.'
00000000000218f3         db  0xff ; '.'
00000000000218f4         db  0x58 ; 'X'
00000000000218f5         db  0x49 ; 'I'
00000000000218f6         db  0xfe ; '.'
00000000000218f7         db  0xff ; '.'
00000000000218f8         db  0x0c ; '.'
00000000000218f9         db  0x5a ; 'Z'
00000000000218fa         db  0xfe ; '.'
00000000000218fb         db  0xff ; '.'
00000000000218fc         db  0xfe ; '.'
00000000000218fd         db  0x4f ; 'O'
00000000000218fe         db  0xfe ; '.'
00000000000218ff         db  0xff ; '.'
0000000000021900         db  0xf2 ; '.'
0000000000021901         db  0x4a ; 'J'
0000000000021902         db  0xfe ; '.'
0000000000021903         db  0xff ; '.'
0000000000021904         db  0x4c ; 'L'
0000000000021905         db  0x4e ; 'N'
0000000000021906         db  0xfe ; '.'
0000000000021907         db  0xff ; '.'
0000000000021908         db  0x58 ; 'X'
0000000000021909         db  0x4c ; 'L'
000000000002190a         db  0xfe ; '.'
000000000002190b         db  0xff ; '.'
000000000002190c         db  0xd9 ; '.'
000000000002190d         db  0x4c ; 'L'
000000000002190e         db  0xfe ; '.'
000000000002190f         db  0xff ; '.'
0000000000021910         db  0x58 ; 'X'
0000000000021911         db  0x49 ; 'I'
0000000000021912         db  0xfe ; '.'
0000000000021913         db  0xff ; '.'
0000000000021914         db  0x71 ; 'q'
0000000000021915         db  0x4d ; 'M'
0000000000021916         db  0xfe ; '.'
0000000000021917         db  0xff ; '.'
0000000000021918         db  0xe8 ; '.'
0000000000021919         db  0x4a ; 'J'
000000000002191a         db  0xfe ; '.'
000000000002191b         db  0xff ; '.'
000000000002191c         db  0x72 ; 'r'
000000000002191d         db  0x58 ; 'X'
000000000002191e         db  0xfe ; '.'
000000000002191f         db  0xff ; '.'
0000000000021920         db  0x38 ; '8'
0000000000021921         db  0x5a ; 'Z'
0000000000021922         db  0xfe ; '.'
0000000000021923         db  0xff ; '.'
                     aDevnull:
0000000000021924         db         "/dev/null", 0                              ; DATA XREF=protect_fd+4
                     aEntriesLun:
000000000002192e         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
0000000000021946         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
000000000002195e         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
0000000000021976         align      8
                     aBucketsUsedLu2:
0000000000021978         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
0000000000021999         db  0x00 ; '.'
000000000002199a         db  0x00 ; '.'
000000000002199b         db  0x00 ; '.'
000000000002199c         db  0x00 ; '.'
000000000002199d         db  0x00 ; '.'
000000000002199e         db  0x00 ; '.'
000000000002199f         db  0x00 ; '.'
                     default_tuning:
00000000000219a0         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
00000000000219a1         db  0x00 ; '.'
00000000000219a2         db  0x00 ; '.'
00000000000219a3         db  0x00 ; '.'
00000000000219a4         db  0x00 ; '.'
00000000000219a5         db  0x00 ; '.'
00000000000219a6         db  0x80 ; '.'
00000000000219a7         db  0x3f ; '?'
00000000000219a8         db  0xcd ; '.'
00000000000219a9         db  0xcc ; '.'
00000000000219aa         db  0x4c ; 'L'
00000000000219ab         db  0x3f ; '?'
00000000000219ac         db  0xf4 ; '.'
00000000000219ad         db  0xfd ; '.'
00000000000219ae         db  0xb4 ; '.'
00000000000219af         db  0x3f ; '?'
00000000000219b0         db  0x00 ; '.'
00000000000219b1         db  0x00 ; '.'
00000000000219b2         db  0x00 ; '.'
00000000000219b3         db  0x00 ; '.'
                     float_219b4:        // float
00000000000219b4         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_219b8:        // float
00000000000219b8         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_219bc:        // float
00000000000219bc         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_219c0:        // float
00000000000219c0         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_219c4:        // float
00000000000219c4         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_219c8:        // float
00000000000219c8         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     float_219cc:        // float
00000000000219cc         dd         1.84467e+19f                                ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413, adjust_value.part.0+66, adjust_value.part.0+192, human_readable+243, human_readable+268, human_readable+290
                     float_219d0:        // float
00000000000219d0         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400, adjust_value.part.0
00000000000219d4         align      2
00000000000219de         db  0x59 ; 'Y'
00000000000219df         db  0x40 ; '@'
                     a0lf:
00000000000219e0         db         "%.0Lf", 0                                  ; DATA XREF=human_readable+784, human_readable+1865
                     a1lf:
00000000000219e6         db         "%.1Lf", 0                                  ; DATA XREF=human_readable+417, human_readable+1780
                     aBlocksize:
00000000000219ec         db         "BLOCKSIZE", 0                              ; DATA XREF=human_options+344
                     aPosixlycorrect:
00000000000219f6         db         "POSIXLY_CORRECT", 0                        ; DATA XREF=human_options+269, human_options+368
                     aEeggkkmmppttyy:
0000000000021a06         db         "eEgGkKmMpPtTyYzZ0", 0                      ; DATA XREF=human_options+152
                     block_size_opts:
0000000000021a18         db  0xb0 ; '.'                                         ; DATA XREF=human_options+60, human_options+91
0000000000021a19         db  0x00 ; '.'
0000000000021a1a         db  0x00 ; '.'
0000000000021a1b         db  0x00 ; '.'
0000000000021a1c         db  0x90 ; '.'
0000000000021a1d         db  0x00 ; '.'
0000000000021a1e         db  0x00 ; '.'
0000000000021a1f         db  0x00 ; '.'
                     power_letter:
0000000000021a20         db  0x00 ; '.'                                         ; DATA XREF=human_readable+972
0000000000021a21         db  0x4b ; 'K'
0000000000021a22         db  0x4d ; 'M'
0000000000021a23         db  0x47 ; 'G'
0000000000021a24         db  0x54 ; 'T'
0000000000021a25         db  0x50 ; 'P'
0000000000021a26         db  0x45 ; 'E'
0000000000021a27         db  0x5a ; 'Z'
0000000000021a28         db  0x59 ; 'Y'
0000000000021a29         db  0x00 ; '.'
0000000000021a2a         db  0x00 ; '.'
0000000000021a2b         db  0x00 ; '.'
                     dword_21a2c:
0000000000021a2c         dd         0x41200000                                  ; DATA XREF=human_readable+508, human_readable+1851, human_readable+1928
0000000000021a30         db  0xff ; '.'                                         ; DATA XREF=human_readable+393, human_readable+766, human_readable+1936
0000000000021a31         db  0xff ; '.'
0000000000021a32         db  0xff ; '.'
0000000000021a33         db  0xff ; '.'
0000000000021a34         db  0xff ; '.'
0000000000021a35         db  0xff ; '.'
0000000000021a36         db  0xff ; '.'
0000000000021a37         db  0xff ; '.'
0000000000021a38         db  0x3e ; '>'
0000000000021a39         db  0x40 ; '@'
0000000000021a3a         db  0x00 ; '.'
0000000000021a3b         db  0x00 ; '.'
0000000000021a3c         db  0x00 ; '.'
0000000000021a3d         db  0x00 ; '.'
0000000000021a3e         db  0x00 ; '.'
0000000000021a3f         db  0x00 ; '.'
                     is_basic_table:
0000000000021a40         db  0x00 ; '.'                                         ; DATA XREF=string_hasher_ci+11, is_basic+2, mbscasecmp+242, mbscasecmp+1217, mbscasecmp+1317
0000000000021a41         db  0x1a ; '.'
0000000000021a42         db  0x00 ; '.'
0000000000021a43         db  0x00 ; '.'
0000000000021a44         db  0xef ; '.'
0000000000021a45         db  0xff ; '.'
0000000000021a46         db  0xff ; '.'
0000000000021a47         db  0xff ; '.'
0000000000021a48         db  0xfe ; '.'
0000000000021a49         db  0xff ; '.'
0000000000021a4a         db  0xff ; '.'
0000000000021a4b         db  0xff ; '.'
0000000000021a4c         db  0xfe ; '.'
0000000000021a4d         db  0xff ; '.'
0000000000021a4e         db  0xff ; '.'
0000000000021a4f         db  0x7f ; '.'
0000000000021a50         db  0x00 ; '.'
0000000000021a51         db  0x00 ; '.'
0000000000021a52         db  0x00 ; '.'
0000000000021a53         db  0x00 ; '.'
0000000000021a54         db  0x00 ; '.'
0000000000021a55         db  0x00 ; '.'
0000000000021a56         db  0x00 ; '.'
0000000000021a57         db  0x00 ; '.'
0000000000021a58         db  0x00 ; '.'
0000000000021a59         db  0x00 ; '.'
0000000000021a5a         db  0x00 ; '.'
0000000000021a5b         db  0x00 ; '.'
0000000000021a5c         db  0x00 ; '.'
0000000000021a5d         db  0x00 ; '.'
0000000000021a5e         db  0x00 ; '.'
0000000000021a5f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.5133:
0000000000021a60         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbuiter_multi_next.part.0, mbscasecmp+1728, mbscasecmp+1764
0000000000021a73         align      8
                     aANullArgv0WasP:
0000000000021a78         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000021ab0         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000021ab8         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000021ab9         db  0x74 ; 't'
0000000000021aba         db  0x2d ; '-'
0000000000021abb         db  0x00 ; '.'
0000000000021abc         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000021abd         db  0x80 ; '.'
0000000000021abe         db  0x98 ; '.'
0000000000021abf         db  0x00 ; '.'
0000000000021ac0         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000021ac1         db  0x80 ; '.'
0000000000021ac2         db  0x99 ; '.'
0000000000021ac3         db  0x00 ; '.'
0000000000021ac4         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000021ac5         db  0x07 ; '.'
0000000000021ac6         db  0x65 ; 'e'
0000000000021ac7         db  0x00 ; '.'
0000000000021ac8         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000021ac9         db  0xaf ; '.'
0000000000021aca         db  0x00 ; '.'
0000000000021acb         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_af20+1451, sub_af20+1493, sub_af20+2429
0000000000021acc         db  0x00 ; '.'
0000000000021acd         db  0x60 ; '`'                                         ; DATA XREF=sub_af20+1627, sub_af20+1654
0000000000021ace         db  0x00 ; '.'
                     aLiteral:
0000000000021acf         db         "literal", 0
                     aShell:
0000000000021ad7         db         "shell", 0
                     aShellalways:
0000000000021add         db         "shell-always", 0
0000000000021aea         db  0x73 ; 's'
0000000000021aeb         db  0x68 ; 'h'
0000000000021aec         db  0x65 ; 'e'
0000000000021aed         db  0x6c ; 'l'
0000000000021aee         db  0x6c ; 'l'
0000000000021aef         db  0x2d ; '-'
                     aEscape:
0000000000021af0         db         "escape", 0
                     aShellescapealw:
0000000000021af7         db         "shell-escape-always", 0
                     aCmaybe:
0000000000021b0b         db         "c-maybe", 0
                     aClocale:
0000000000021b13         db         "clocale", 0
0000000000021b1b         align      32
                     switch_table_21b20:        // switch_table
0000000000021b20         dd         quotearg_buffer_restyled.loc_b61a-switch_table_21b20, quotearg_buffer_restyled.loc_a873-switch_table_21b20, quotearg_buffer_restyled.loc_b848-switch_table_21b20, quotearg_buffer_restyled.loc_b654-switch_table_21b20 ; switch table used at 0xa871 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000021b30         dd         quotearg_buffer_restyled.loc_b444-switch_table_21b20, quotearg_buffer_restyled.loc_b4a0-switch_table_21b20, quotearg_buffer_restyled.loc_b4f5-switch_table_21b20, quotearg_buffer_restyled.loc_b53a-switch_table_21b20
0000000000021b40         dd         3 dup (quotearg_buffer_restyled.loc_b574-switch_table_21b20)
0000000000021b4c         db  0xa4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
0000000000021b4d         db  0x90 ; '.'
0000000000021b4e         db  0xfe ; '.'
0000000000021b4f         db  0xff ; '.'
0000000000021b50         db  0x8c ; '.'
0000000000021b51         db  0x91 ; '.'
0000000000021b52         db  0xfe ; '.'
0000000000021b53         db  0xff ; '.'
0000000000021b54         db  0x8c ; '.'
0000000000021b55         db  0x91 ; '.'
0000000000021b56         db  0xfe ; '.'
0000000000021b57         db  0xff ; '.'
0000000000021b58         db  0x8c ; '.'
0000000000021b59         db  0x91 ; '.'
0000000000021b5a         db  0xfe ; '.'
0000000000021b5b         db  0xff ; '.'
0000000000021b5c         db  0x8c ; '.'
0000000000021b5d         db  0x91 ; '.'
0000000000021b5e         db  0xfe ; '.'
0000000000021b5f         db  0xff ; '.'
0000000000021b60         db  0x8c ; '.'
0000000000021b61         db  0x91 ; '.'
0000000000021b62         db  0xfe ; '.'
0000000000021b63         db  0xff ; '.'
0000000000021b64         db  0x8c ; '.'
0000000000021b65         db  0x91 ; '.'
0000000000021b66         db  0xfe ; '.'
0000000000021b67         db  0xff ; '.'
0000000000021b68         db  0xe4 ; '.'
0000000000021b69         db  0x90 ; '.'
0000000000021b6a         db  0xfe ; '.'
0000000000021b6b         db  0xff ; '.'
0000000000021b6c         db  0xec ; '.'
0000000000021b6d         db  0x8f ; '.'
0000000000021b6e         db  0xfe ; '.'
0000000000021b6f         db  0xff ; '.'
0000000000021b70         db  0xac ; '.'
0000000000021b71         db  0x8f ; '.'
0000000000021b72         db  0xfe ; '.'
0000000000021b73         db  0xff ; '.'
0000000000021b74         db  0x74 ; 't'
0000000000021b75         db  0x91 ; '.'
0000000000021b76         db  0xfe ; '.'
0000000000021b77         db  0xff ; '.'
0000000000021b78         db  0x64 ; 'd'
0000000000021b79         db  0x91 ; '.'
0000000000021b7a         db  0xfe ; '.'
0000000000021b7b         db  0xff ; '.'
0000000000021b7c         db  0x54 ; 'T'
0000000000021b7d         db  0x91 ; '.'
0000000000021b7e         db  0xfe ; '.'
0000000000021b7f         db  0xff ; '.'
0000000000021b80         db  0x44 ; 'D'
0000000000021b81         db  0x91 ; '.'
0000000000021b82         db  0xfe ; '.'
0000000000021b83         db  0xff ; '.'
0000000000021b84         db  0x8c ; '.'
0000000000021b85         db  0x91 ; '.'
0000000000021b86         db  0xfe ; '.'
0000000000021b87         db  0xff ; '.'
0000000000021b88         db  0x8c ; '.'
0000000000021b89         db  0x91 ; '.'
0000000000021b8a         db  0xfe ; '.'
0000000000021b8b         db  0xff ; '.'
0000000000021b8c         db  0x8c ; '.'
0000000000021b8d         db  0x91 ; '.'
0000000000021b8e         db  0xfe ; '.'
0000000000021b8f         db  0xff ; '.'
0000000000021b90         db  0x8c ; '.'
0000000000021b91         db  0x91 ; '.'
0000000000021b92         db  0xfe ; '.'
0000000000021b93         db  0xff ; '.'
0000000000021b94         db  0x8c ; '.'
0000000000021b95         db  0x91 ; '.'
0000000000021b96         db  0xfe ; '.'
0000000000021b97         db  0xff ; '.'
0000000000021b98         db  0x8c ; '.'
0000000000021b99         db  0x91 ; '.'
0000000000021b9a         db  0xfe ; '.'
0000000000021b9b         db  0xff ; '.'
0000000000021b9c         db  0x8c ; '.'
0000000000021b9d         db  0x91 ; '.'
0000000000021b9e         db  0xfe ; '.'
0000000000021b9f         db  0xff ; '.'
0000000000021ba0         db  0x8c ; '.'
0000000000021ba1         db  0x91 ; '.'
0000000000021ba2         db  0xfe ; '.'
0000000000021ba3         db  0xff ; '.'
0000000000021ba4         db  0x8c ; '.'
0000000000021ba5         db  0x91 ; '.'
0000000000021ba6         db  0xfe ; '.'
0000000000021ba7         db  0xff ; '.'
0000000000021ba8         db  0x8c ; '.'
0000000000021ba9         db  0x91 ; '.'
0000000000021baa         db  0xfe ; '.'
0000000000021bab         db  0xff ; '.'
0000000000021bac         db  0x8c ; '.'
0000000000021bad         db  0x91 ; '.'
0000000000021bae         db  0xfe ; '.'
0000000000021baf         db  0xff ; '.'
0000000000021bb0         db  0x8c ; '.'
0000000000021bb1         db  0x91 ; '.'
0000000000021bb2         db  0xfe ; '.'
0000000000021bb3         db  0xff ; '.'
0000000000021bb4         db  0x8c ; '.'
0000000000021bb5         db  0x91 ; '.'
0000000000021bb6         db  0xfe ; '.'
0000000000021bb7         db  0xff ; '.'
0000000000021bb8         db  0x8c ; '.'
0000000000021bb9         db  0x91 ; '.'
0000000000021bba         db  0xfe ; '.'
0000000000021bbb         db  0xff ; '.'
0000000000021bbc         db  0x8c ; '.'
0000000000021bbd         db  0x91 ; '.'
0000000000021bbe         db  0xfe ; '.'
0000000000021bbf         db  0xff ; '.'
0000000000021bc0         db  0x8c ; '.'
0000000000021bc1         db  0x91 ; '.'
0000000000021bc2         db  0xfe ; '.'
0000000000021bc3         db  0xff ; '.'
0000000000021bc4         db  0x8c ; '.'
0000000000021bc5         db  0x91 ; '.'
0000000000021bc6         db  0xfe ; '.'
0000000000021bc7         db  0xff ; '.'
0000000000021bc8         db  0x8c ; '.'
0000000000021bc9         db  0x91 ; '.'
0000000000021bca         db  0xfe ; '.'
0000000000021bcb         db  0xff ; '.'
0000000000021bcc         db  0x34 ; '4'
0000000000021bcd         db  0x91 ; '.'
0000000000021bce         db  0xfe ; '.'
0000000000021bcf         db  0xff ; '.'
0000000000021bd0         db  0x24 ; '$'
0000000000021bd1         db  0x91 ; '.'
0000000000021bd2         db  0xfe ; '.'
0000000000021bd3         db  0xff ; '.'
0000000000021bd4         db  0x24 ; '$'
0000000000021bd5         db  0x91 ; '.'
0000000000021bd6         db  0xfe ; '.'
0000000000021bd7         db  0xff ; '.'
0000000000021bd8         db  0xf4 ; '.'
0000000000021bd9         db  0x90 ; '.'
0000000000021bda         db  0xfe ; '.'
0000000000021bdb         db  0xff ; '.'
0000000000021bdc         db  0x24 ; '$'
0000000000021bdd         db  0x91 ; '.'
0000000000021bde         db  0xfe ; '.'
0000000000021bdf         db  0xff ; '.'
0000000000021be0         db  0xcc ; '.'
0000000000021be1         db  0x90 ; '.'
0000000000021be2         db  0xfe ; '.'
0000000000021be3         db  0xff ; '.'
0000000000021be4         db  0x24 ; '$'
0000000000021be5         db  0x91 ; '.'
0000000000021be6         db  0xfe ; '.'
0000000000021be7         db  0xff ; '.'
0000000000021be8         db  0x87 ; '.'
0000000000021be9         db  0x8f ; '.'
0000000000021bea         db  0xfe ; '.'
0000000000021beb         db  0xff ; '.'
0000000000021bec         db  0x24 ; '$'
0000000000021bed         db  0x91 ; '.'
0000000000021bee         db  0xfe ; '.'
0000000000021bef         db  0xff ; '.'
0000000000021bf0         db  0x24 ; '$'
0000000000021bf1         db  0x91 ; '.'
0000000000021bf2         db  0xfe ; '.'
0000000000021bf3         db  0xff ; '.'
0000000000021bf4         db  0x24 ; '$'
0000000000021bf5         db  0x91 ; '.'
0000000000021bf6         db  0xfe ; '.'
0000000000021bf7         db  0xff ; '.'
0000000000021bf8         db  0xcc ; '.'
0000000000021bf9         db  0x90 ; '.'
0000000000021bfa         db  0xfe ; '.'
0000000000021bfb         db  0xff ; '.'
0000000000021bfc         db  0xcc ; '.'
0000000000021bfd         db  0x90 ; '.'
0000000000021bfe         db  0xfe ; '.'
0000000000021bff         db  0xff ; '.'
0000000000021c00         db  0xcc ; '.'
0000000000021c01         db  0x90 ; '.'
0000000000021c02         db  0xfe ; '.'
0000000000021c03         db  0xff ; '.'
0000000000021c04         db  0xcc ; '.'
0000000000021c05         db  0x90 ; '.'
0000000000021c06         db  0xfe ; '.'
0000000000021c07         db  0xff ; '.'
0000000000021c08         db  0xcc ; '.'
0000000000021c09         db  0x90 ; '.'
0000000000021c0a         db  0xfe ; '.'
0000000000021c0b         db  0xff ; '.'
0000000000021c0c         db  0xcc ; '.'
0000000000021c0d         db  0x90 ; '.'
0000000000021c0e         db  0xfe ; '.'
0000000000021c0f         db  0xff ; '.'
0000000000021c10         db  0xcc ; '.'
0000000000021c11         db  0x90 ; '.'
0000000000021c12         db  0xfe ; '.'
0000000000021c13         db  0xff ; '.'
0000000000021c14         db  0xcc ; '.'
0000000000021c15         db  0x90 ; '.'
0000000000021c16         db  0xfe ; '.'
0000000000021c17         db  0xff ; '.'
0000000000021c18         db  0xcc ; '.'
0000000000021c19         db  0x90 ; '.'
0000000000021c1a         db  0xfe ; '.'
0000000000021c1b         db  0xff ; '.'
0000000000021c1c         db  0xcc ; '.'
0000000000021c1d         db  0x90 ; '.'
0000000000021c1e         db  0xfe ; '.'
0000000000021c1f         db  0xff ; '.'
0000000000021c20         db  0xcc ; '.'
0000000000021c21         db  0x90 ; '.'
0000000000021c22         db  0xfe ; '.'
0000000000021c23         db  0xff ; '.'
0000000000021c24         db  0xcc ; '.'
0000000000021c25         db  0x90 ; '.'
0000000000021c26         db  0xfe ; '.'
0000000000021c27         db  0xff ; '.'
0000000000021c28         db  0xcc ; '.'
0000000000021c29         db  0x90 ; '.'
0000000000021c2a         db  0xfe ; '.'
0000000000021c2b         db  0xff ; '.'
0000000000021c2c         db  0xcc ; '.'
0000000000021c2d         db  0x90 ; '.'
0000000000021c2e         db  0xfe ; '.'
0000000000021c2f         db  0xff ; '.'
0000000000021c30         db  0xcc ; '.'
0000000000021c31         db  0x90 ; '.'
0000000000021c32         db  0xfe ; '.'
0000000000021c33         db  0xff ; '.'
0000000000021c34         db  0xcc ; '.'
0000000000021c35         db  0x90 ; '.'
0000000000021c36         db  0xfe ; '.'
0000000000021c37         db  0xff ; '.'
0000000000021c38         db  0x24 ; '$'
0000000000021c39         db  0x91 ; '.'
0000000000021c3a         db  0xfe ; '.'
0000000000021c3b         db  0xff ; '.'
0000000000021c3c         db  0x24 ; '$'
0000000000021c3d         db  0x91 ; '.'
0000000000021c3e         db  0xfe ; '.'
0000000000021c3f         db  0xff ; '.'
0000000000021c40         db  0x24 ; '$'
0000000000021c41         db  0x91 ; '.'
0000000000021c42         db  0xfe ; '.'
0000000000021c43         db  0xff ; '.'
0000000000021c44         db  0x24 ; '$'
0000000000021c45         db  0x91 ; '.'
0000000000021c46         db  0xfe ; '.'
0000000000021c47         db  0xff ; '.'
0000000000021c48         db  0x57 ; 'W'
0000000000021c49         db  0x8f ; '.'
0000000000021c4a         db  0xfe ; '.'
0000000000021c4b         db  0xff ; '.'
0000000000021c4c         db  0x8c ; '.'
0000000000021c4d         db  0x91 ; '.'
0000000000021c4e         db  0xfe ; '.'
0000000000021c4f         db  0xff ; '.'
0000000000021c50         db  0xcc ; '.'
0000000000021c51         db  0x90 ; '.'
0000000000021c52         db  0xfe ; '.'
0000000000021c53         db  0xff ; '.'
0000000000021c54         db  0xcc ; '.'
0000000000021c55         db  0x90 ; '.'
0000000000021c56         db  0xfe ; '.'
0000000000021c57         db  0xff ; '.'
0000000000021c58         db  0xcc ; '.'
0000000000021c59         db  0x90 ; '.'
0000000000021c5a         db  0xfe ; '.'
0000000000021c5b         db  0xff ; '.'
0000000000021c5c         db  0xcc ; '.'
0000000000021c5d         db  0x90 ; '.'
0000000000021c5e         db  0xfe ; '.'
0000000000021c5f         db  0xff ; '.'
0000000000021c60         db  0xcc ; '.'
0000000000021c61         db  0x90 ; '.'
0000000000021c62         db  0xfe ; '.'
0000000000021c63         db  0xff ; '.'
0000000000021c64         db  0xcc ; '.'
0000000000021c65         db  0x90 ; '.'
0000000000021c66         db  0xfe ; '.'
0000000000021c67         db  0xff ; '.'
0000000000021c68         db  0xcc ; '.'
0000000000021c69         db  0x90 ; '.'
0000000000021c6a         db  0xfe ; '.'
0000000000021c6b         db  0xff ; '.'
0000000000021c6c         db  0xcc ; '.'
0000000000021c6d         db  0x90 ; '.'
0000000000021c6e         db  0xfe ; '.'
0000000000021c6f         db  0xff ; '.'
0000000000021c70         db  0xcc ; '.'
0000000000021c71         db  0x90 ; '.'
0000000000021c72         db  0xfe ; '.'
0000000000021c73         db  0xff ; '.'
0000000000021c74         db  0xcc ; '.'
0000000000021c75         db  0x90 ; '.'
0000000000021c76         db  0xfe ; '.'
0000000000021c77         db  0xff ; '.'
0000000000021c78         db  0xcc ; '.'
0000000000021c79         db  0x90 ; '.'
0000000000021c7a         db  0xfe ; '.'
0000000000021c7b         db  0xff ; '.'
0000000000021c7c         db  0xcc ; '.'
0000000000021c7d         db  0x90 ; '.'
0000000000021c7e         db  0xfe ; '.'
0000000000021c7f         db  0xff ; '.'
0000000000021c80         db  0xcc ; '.'
0000000000021c81         db  0x90 ; '.'
0000000000021c82         db  0xfe ; '.'
0000000000021c83         db  0xff ; '.'
0000000000021c84         db  0xcc ; '.'
0000000000021c85         db  0x90 ; '.'
0000000000021c86         db  0xfe ; '.'
0000000000021c87         db  0xff ; '.'
0000000000021c88         db  0xcc ; '.'
0000000000021c89         db  0x90 ; '.'
0000000000021c8a         db  0xfe ; '.'
0000000000021c8b         db  0xff ; '.'
0000000000021c8c         db  0xcc ; '.'
0000000000021c8d         db  0x90 ; '.'
0000000000021c8e         db  0xfe ; '.'
0000000000021c8f         db  0xff ; '.'
0000000000021c90         db  0xcc ; '.'
0000000000021c91         db  0x90 ; '.'
0000000000021c92         db  0xfe ; '.'
0000000000021c93         db  0xff ; '.'
0000000000021c94         db  0xcc ; '.'
0000000000021c95         db  0x90 ; '.'
0000000000021c96         db  0xfe ; '.'
0000000000021c97         db  0xff ; '.'
0000000000021c98         db  0xcc ; '.'
0000000000021c99         db  0x90 ; '.'
0000000000021c9a         db  0xfe ; '.'
0000000000021c9b         db  0xff ; '.'
0000000000021c9c         db  0xcc ; '.'
0000000000021c9d         db  0x90 ; '.'
0000000000021c9e         db  0xfe ; '.'
0000000000021c9f         db  0xff ; '.'
0000000000021ca0         db  0xcc ; '.'
0000000000021ca1         db  0x90 ; '.'
0000000000021ca2         db  0xfe ; '.'
0000000000021ca3         db  0xff ; '.'
0000000000021ca4         db  0xcc ; '.'
0000000000021ca5         db  0x90 ; '.'
0000000000021ca6         db  0xfe ; '.'
0000000000021ca7         db  0xff ; '.'
0000000000021ca8         db  0xcc ; '.'
0000000000021ca9         db  0x90 ; '.'
0000000000021caa         db  0xfe ; '.'
0000000000021cab         db  0xff ; '.'
0000000000021cac         db  0xcc ; '.'
0000000000021cad         db  0x90 ; '.'
0000000000021cae         db  0xfe ; '.'
0000000000021caf         db  0xff ; '.'
0000000000021cb0         db  0xcc ; '.'
0000000000021cb1         db  0x90 ; '.'
0000000000021cb2         db  0xfe ; '.'
0000000000021cb3         db  0xff ; '.'
0000000000021cb4         db  0xcc ; '.'
0000000000021cb5         db  0x90 ; '.'
0000000000021cb6         db  0xfe ; '.'
0000000000021cb7         db  0xff ; '.'
0000000000021cb8         db  0x24 ; '$'
0000000000021cb9         db  0x91 ; '.'
0000000000021cba         db  0xfe ; '.'
0000000000021cbb         db  0xff ; '.'
0000000000021cbc         db  0xfc ; '.'
0000000000021cbd         db  0x8f ; '.'
0000000000021cbe         db  0xfe ; '.'
0000000000021cbf         db  0xff ; '.'
0000000000021cc0         db  0xcc ; '.'
0000000000021cc1         db  0x90 ; '.'
0000000000021cc2         db  0xfe ; '.'
0000000000021cc3         db  0xff ; '.'
0000000000021cc4         db  0x24 ; '$'
0000000000021cc5         db  0x91 ; '.'
0000000000021cc6         db  0xfe ; '.'
0000000000021cc7         db  0xff ; '.'
0000000000021cc8         db  0xcc ; '.'
0000000000021cc9         db  0x90 ; '.'
0000000000021cca         db  0xfe ; '.'
0000000000021ccb         db  0xff ; '.'
0000000000021ccc         db  0x24 ; '$'
0000000000021ccd         db  0x91 ; '.'
0000000000021cce         db  0xfe ; '.'
0000000000021ccf         db  0xff ; '.'
0000000000021cd0         db  0xcc ; '.'
0000000000021cd1         db  0x90 ; '.'
0000000000021cd2         db  0xfe ; '.'
0000000000021cd3         db  0xff ; '.'
0000000000021cd4         db  0xcc ; '.'
0000000000021cd5         db  0x90 ; '.'
0000000000021cd6         db  0xfe ; '.'
0000000000021cd7         db  0xff ; '.'
0000000000021cd8         db  0xcc ; '.'
0000000000021cd9         db  0x90 ; '.'
0000000000021cda         db  0xfe ; '.'
0000000000021cdb         db  0xff ; '.'
0000000000021cdc         db  0xcc ; '.'
0000000000021cdd         db  0x90 ; '.'
0000000000021cde         db  0xfe ; '.'
0000000000021cdf         db  0xff ; '.'
0000000000021ce0         db  0xcc ; '.'
0000000000021ce1         db  0x90 ; '.'
0000000000021ce2         db  0xfe ; '.'
0000000000021ce3         db  0xff ; '.'
0000000000021ce4         db  0xcc ; '.'
0000000000021ce5         db  0x90 ; '.'
0000000000021ce6         db  0xfe ; '.'
0000000000021ce7         db  0xff ; '.'
0000000000021ce8         db  0xcc ; '.'
0000000000021ce9         db  0x90 ; '.'
0000000000021cea         db  0xfe ; '.'
0000000000021ceb         db  0xff ; '.'
0000000000021cec         db  0xcc ; '.'
0000000000021ced         db  0x90 ; '.'
0000000000021cee         db  0xfe ; '.'
0000000000021cef         db  0xff ; '.'
0000000000021cf0         db  0xcc ; '.'
0000000000021cf1         db  0x90 ; '.'
0000000000021cf2         db  0xfe ; '.'
0000000000021cf3         db  0xff ; '.'
0000000000021cf4         db  0xcc ; '.'
0000000000021cf5         db  0x90 ; '.'
0000000000021cf6         db  0xfe ; '.'
0000000000021cf7         db  0xff ; '.'
0000000000021cf8         db  0xcc ; '.'
0000000000021cf9         db  0x90 ; '.'
0000000000021cfa         db  0xfe ; '.'
0000000000021cfb         db  0xff ; '.'
0000000000021cfc         db  0xcc ; '.'
0000000000021cfd         db  0x90 ; '.'
0000000000021cfe         db  0xfe ; '.'
0000000000021cff         db  0xff ; '.'
0000000000021d00         db  0xcc ; '.'
0000000000021d01         db  0x90 ; '.'
0000000000021d02         db  0xfe ; '.'
0000000000021d03         db  0xff ; '.'
0000000000021d04         db  0xcc ; '.'
0000000000021d05         db  0x90 ; '.'
0000000000021d06         db  0xfe ; '.'
0000000000021d07         db  0xff ; '.'
0000000000021d08         db  0xcc ; '.'
0000000000021d09         db  0x90 ; '.'
0000000000021d0a         db  0xfe ; '.'
0000000000021d0b         db  0xff ; '.'
0000000000021d0c         db  0xcc ; '.'
0000000000021d0d         db  0x90 ; '.'
0000000000021d0e         db  0xfe ; '.'
0000000000021d0f         db  0xff ; '.'
0000000000021d10         db  0xcc ; '.'
0000000000021d11         db  0x90 ; '.'
0000000000021d12         db  0xfe ; '.'
0000000000021d13         db  0xff ; '.'
0000000000021d14         db  0xcc ; '.'
0000000000021d15         db  0x90 ; '.'
0000000000021d16         db  0xfe ; '.'
0000000000021d17         db  0xff ; '.'
0000000000021d18         db  0xcc ; '.'
0000000000021d19         db  0x90 ; '.'
0000000000021d1a         db  0xfe ; '.'
0000000000021d1b         db  0xff ; '.'
0000000000021d1c         db  0xcc ; '.'
0000000000021d1d         db  0x90 ; '.'
0000000000021d1e         db  0xfe ; '.'
0000000000021d1f         db  0xff ; '.'
0000000000021d20         db  0xcc ; '.'
0000000000021d21         db  0x90 ; '.'
0000000000021d22         db  0xfe ; '.'
0000000000021d23         db  0xff ; '.'
0000000000021d24         db  0xcc ; '.'
0000000000021d25         db  0x90 ; '.'
0000000000021d26         db  0xfe ; '.'
0000000000021d27         db  0xff ; '.'
0000000000021d28         db  0xcc ; '.'
0000000000021d29         db  0x90 ; '.'
0000000000021d2a         db  0xfe ; '.'
0000000000021d2b         db  0xff ; '.'
0000000000021d2c         db  0xcc ; '.'
0000000000021d2d         db  0x90 ; '.'
0000000000021d2e         db  0xfe ; '.'
0000000000021d2f         db  0xff ; '.'
0000000000021d30         db  0xcc ; '.'
0000000000021d31         db  0x90 ; '.'
0000000000021d32         db  0xfe ; '.'
0000000000021d33         db  0xff ; '.'
0000000000021d34         db  0xcc ; '.'
0000000000021d35         db  0x90 ; '.'
0000000000021d36         db  0xfe ; '.'
0000000000021d37         db  0xff ; '.'
0000000000021d38         db  0x87 ; '.'
0000000000021d39         db  0x8e ; '.'
0000000000021d3a         db  0xfe ; '.'
0000000000021d3b         db  0xff ; '.'
0000000000021d3c         db  0x24 ; '$'
0000000000021d3d         db  0x91 ; '.'
0000000000021d3e         db  0xfe ; '.'
0000000000021d3f         db  0xff ; '.'
0000000000021d40         db  0x87 ; '.'
0000000000021d41         db  0x8e ; '.'
0000000000021d42         db  0xfe ; '.'
0000000000021d43         db  0xff ; '.'
0000000000021d44         db  0xf4 ; '.'
0000000000021d45         db  0x90 ; '.'
0000000000021d46         db  0xfe ; '.'
0000000000021d47         db  0xff ; '.'
0000000000021d48         db  0x78 ; 'x'                                         ; DATA XREF=sub_acc0+137
0000000000021d49         db  0x90 ; '.'
0000000000021d4a         db  0xfe ; '.'
0000000000021d4b         db  0xff ; '.'
0000000000021d4c         db  0x88 ; '.'
0000000000021d4d         db  0x8f ; '.'
0000000000021d4e         db  0xfe ; '.'
0000000000021d4f         db  0xff ; '.'
0000000000021d50         db  0x88 ; '.'
0000000000021d51         db  0x8f ; '.'
0000000000021d52         db  0xfe ; '.'
0000000000021d53         db  0xff ; '.'
0000000000021d54         db  0x88 ; '.'
0000000000021d55         db  0x8f ; '.'
0000000000021d56         db  0xfe ; '.'
0000000000021d57         db  0xff ; '.'
0000000000021d58         db  0x88 ; '.'
0000000000021d59         db  0x8f ; '.'
0000000000021d5a         db  0xfe ; '.'
0000000000021d5b         db  0xff ; '.'
0000000000021d5c         db  0x88 ; '.'
0000000000021d5d         db  0x8f ; '.'
0000000000021d5e         db  0xfe ; '.'
0000000000021d5f         db  0xff ; '.'
0000000000021d60         db  0x88 ; '.'
0000000000021d61         db  0x8f ; '.'
0000000000021d62         db  0xfe ; '.'
0000000000021d63         db  0xff ; '.'
0000000000021d64         db  0x68 ; 'h'
0000000000021d65         db  0x90 ; '.'
0000000000021d66         db  0xfe ; '.'
0000000000021d67         db  0xff ; '.'
0000000000021d68         db  0xb8 ; '.'
0000000000021d69         db  0x91 ; '.'
0000000000021d6a         db  0xfe ; '.'
0000000000021d6b         db  0xff ; '.'
0000000000021d6c         db  0xa0 ; '.'
0000000000021d6d         db  0x91 ; '.'
0000000000021d6e         db  0xfe ; '.'
0000000000021d6f         db  0xff ; '.'
0000000000021d70         db  0x50 ; 'P'
0000000000021d71         db  0x90 ; '.'
0000000000021d72         db  0xfe ; '.'
0000000000021d73         db  0xff ; '.'
0000000000021d74         db  0x90 ; '.'
0000000000021d75         db  0x91 ; '.'
0000000000021d76         db  0xfe ; '.'
0000000000021d77         db  0xff ; '.'
0000000000021d78         db  0x38 ; '8'
0000000000021d79         db  0x90 ; '.'
0000000000021d7a         db  0xfe ; '.'
0000000000021d7b         db  0xff ; '.'
0000000000021d7c         db  0x78 ; 'x'
0000000000021d7d         db  0x91 ; '.'
0000000000021d7e         db  0xfe ; '.'
0000000000021d7f         db  0xff ; '.'
0000000000021d80         db  0x88 ; '.'
0000000000021d81         db  0x8f ; '.'
0000000000021d82         db  0xfe ; '.'
0000000000021d83         db  0xff ; '.'
0000000000021d84         db  0x88 ; '.'
0000000000021d85         db  0x8f ; '.'
0000000000021d86         db  0xfe ; '.'
0000000000021d87         db  0xff ; '.'
0000000000021d88         db  0x88 ; '.'
0000000000021d89         db  0x8f ; '.'
0000000000021d8a         db  0xfe ; '.'
0000000000021d8b         db  0xff ; '.'
0000000000021d8c         db  0x88 ; '.'
0000000000021d8d         db  0x8f ; '.'
0000000000021d8e         db  0xfe ; '.'
0000000000021d8f         db  0xff ; '.'
0000000000021d90         db  0x88 ; '.'
0000000000021d91         db  0x8f ; '.'
0000000000021d92         db  0xfe ; '.'
0000000000021d93         db  0xff ; '.'
0000000000021d94         db  0x88 ; '.'
0000000000021d95         db  0x8f ; '.'
0000000000021d96         db  0xfe ; '.'
0000000000021d97         db  0xff ; '.'
0000000000021d98         db  0x88 ; '.'
0000000000021d99         db  0x8f ; '.'
0000000000021d9a         db  0xfe ; '.'
0000000000021d9b         db  0xff ; '.'
0000000000021d9c         db  0x88 ; '.'
0000000000021d9d         db  0x8f ; '.'
0000000000021d9e         db  0xfe ; '.'
0000000000021d9f         db  0xff ; '.'
0000000000021da0         db  0x88 ; '.'
0000000000021da1         db  0x8f ; '.'
0000000000021da2         db  0xfe ; '.'
0000000000021da3         db  0xff ; '.'
0000000000021da4         db  0x88 ; '.'
0000000000021da5         db  0x8f ; '.'
0000000000021da6         db  0xfe ; '.'
0000000000021da7         db  0xff ; '.'
0000000000021da8         db  0x88 ; '.'
0000000000021da9         db  0x8f ; '.'
0000000000021daa         db  0xfe ; '.'
0000000000021dab         db  0xff ; '.'
0000000000021dac         db  0x88 ; '.'
0000000000021dad         db  0x8f ; '.'
0000000000021dae         db  0xfe ; '.'
0000000000021daf         db  0xff ; '.'
0000000000021db0         db  0x88 ; '.'
0000000000021db1         db  0x8f ; '.'
0000000000021db2         db  0xfe ; '.'
0000000000021db3         db  0xff ; '.'
0000000000021db4         db  0x88 ; '.'
0000000000021db5         db  0x8f ; '.'
0000000000021db6         db  0xfe ; '.'
0000000000021db7         db  0xff ; '.'
0000000000021db8         db  0x88 ; '.'
0000000000021db9         db  0x8f ; '.'
0000000000021dba         db  0xfe ; '.'
0000000000021dbb         db  0xff ; '.'
0000000000021dbc         db  0x88 ; '.'
0000000000021dbd         db  0x8f ; '.'
0000000000021dbe         db  0xfe ; '.'
0000000000021dbf         db  0xff ; '.'
0000000000021dc0         db  0x88 ; '.'
0000000000021dc1         db  0x8f ; '.'
0000000000021dc2         db  0xfe ; '.'
0000000000021dc3         db  0xff ; '.'
0000000000021dc4         db  0x88 ; '.'
0000000000021dc5         db  0x8f ; '.'
0000000000021dc6         db  0xfe ; '.'
0000000000021dc7         db  0xff ; '.'
0000000000021dc8         db  0x60 ; '`'
0000000000021dc9         db  0x91 ; '.'
0000000000021dca         db  0xfe ; '.'
0000000000021dcb         db  0xff ; '.'
0000000000021dcc         db  0x48 ; 'H'
0000000000021dcd         db  0x91 ; '.'
0000000000021dce         db  0xfe ; '.'
0000000000021dcf         db  0xff ; '.'
0000000000021dd0         db  0x48 ; 'H'
0000000000021dd1         db  0x91 ; '.'
0000000000021dd2         db  0xfe ; '.'
0000000000021dd3         db  0xff ; '.'
0000000000021dd4         db  0x30 ; '0'
0000000000021dd5         db  0x91 ; '.'
0000000000021dd6         db  0xfe ; '.'
0000000000021dd7         db  0xff ; '.'
0000000000021dd8         db  0x48 ; 'H'
0000000000021dd9         db  0x91 ; '.'
0000000000021dda         db  0xfe ; '.'
0000000000021ddb         db  0xff ; '.'
0000000000021ddc         db  0x18 ; '.'
0000000000021ddd         db  0x91 ; '.'
0000000000021dde         db  0xfe ; '.'
0000000000021ddf         db  0xff ; '.'
0000000000021de0         db  0x48 ; 'H'
0000000000021de1         db  0x91 ; '.'
0000000000021de2         db  0xfe ; '.'
0000000000021de3         db  0xff ; '.'
0000000000021de4         db  0x88 ; '.'
0000000000021de5         db  0x8d ; '.'
0000000000021de6         db  0xfe ; '.'
0000000000021de7         db  0xff ; '.'
0000000000021de8         db  0x48 ; 'H'
0000000000021de9         db  0x91 ; '.'
0000000000021dea         db  0xfe ; '.'
0000000000021deb         db  0xff ; '.'
0000000000021dec         db  0x48 ; 'H'
0000000000021ded         db  0x91 ; '.'
0000000000021dee         db  0xfe ; '.'
0000000000021def         db  0xff ; '.'
0000000000021df0         db  0x48 ; 'H'
0000000000021df1         db  0x91 ; '.'
0000000000021df2         db  0xfe ; '.'
0000000000021df3         db  0xff ; '.'
0000000000021df4         db  0x18 ; '.'
0000000000021df5         db  0x91 ; '.'
0000000000021df6         db  0xfe ; '.'
0000000000021df7         db  0xff ; '.'
0000000000021df8         db  0x18 ; '.'
0000000000021df9         db  0x91 ; '.'
0000000000021dfa         db  0xfe ; '.'
0000000000021dfb         db  0xff ; '.'
0000000000021dfc         db  0x18 ; '.'
0000000000021dfd         db  0x91 ; '.'
0000000000021dfe         db  0xfe ; '.'
0000000000021dff         db  0xff ; '.'
0000000000021e00         db  0x18 ; '.'
0000000000021e01         db  0x91 ; '.'
0000000000021e02         db  0xfe ; '.'
0000000000021e03         db  0xff ; '.'
0000000000021e04         db  0x18 ; '.'
0000000000021e05         db  0x91 ; '.'
0000000000021e06         db  0xfe ; '.'
0000000000021e07         db  0xff ; '.'
0000000000021e08         db  0x18 ; '.'
0000000000021e09         db  0x91 ; '.'
0000000000021e0a         db  0xfe ; '.'
0000000000021e0b         db  0xff ; '.'
0000000000021e0c         db  0x18 ; '.'
0000000000021e0d         db  0x91 ; '.'
0000000000021e0e         db  0xfe ; '.'
0000000000021e0f         db  0xff ; '.'
0000000000021e10         db  0x18 ; '.'
0000000000021e11         db  0x91 ; '.'
0000000000021e12         db  0xfe ; '.'
0000000000021e13         db  0xff ; '.'
0000000000021e14         db  0x18 ; '.'
0000000000021e15         db  0x91 ; '.'
0000000000021e16         db  0xfe ; '.'
0000000000021e17         db  0xff ; '.'
0000000000021e18         db  0x18 ; '.'
0000000000021e19         db  0x91 ; '.'
0000000000021e1a         db  0xfe ; '.'
0000000000021e1b         db  0xff ; '.'
0000000000021e1c         db  0x18 ; '.'
0000000000021e1d         db  0x91 ; '.'
0000000000021e1e         db  0xfe ; '.'
0000000000021e1f         db  0xff ; '.'
0000000000021e20         db  0x18 ; '.'
0000000000021e21         db  0x91 ; '.'
0000000000021e22         db  0xfe ; '.'
0000000000021e23         db  0xff ; '.'
0000000000021e24         db  0x18 ; '.'
0000000000021e25         db  0x91 ; '.'
0000000000021e26         db  0xfe ; '.'
0000000000021e27         db  0xff ; '.'
0000000000021e28         db  0x18 ; '.'
0000000000021e29         db  0x91 ; '.'
0000000000021e2a         db  0xfe ; '.'
0000000000021e2b         db  0xff ; '.'
0000000000021e2c         db  0x18 ; '.'
0000000000021e2d         db  0x91 ; '.'
0000000000021e2e         db  0xfe ; '.'
0000000000021e2f         db  0xff ; '.'
0000000000021e30         db  0x18 ; '.'
0000000000021e31         db  0x91 ; '.'
0000000000021e32         db  0xfe ; '.'
0000000000021e33         db  0xff ; '.'
0000000000021e34         db  0x48 ; 'H'
0000000000021e35         db  0x91 ; '.'
0000000000021e36         db  0xfe ; '.'
0000000000021e37         db  0xff ; '.'
0000000000021e38         db  0x48 ; 'H'
0000000000021e39         db  0x91 ; '.'
0000000000021e3a         db  0xfe ; '.'
0000000000021e3b         db  0xff ; '.'
0000000000021e3c         db  0x48 ; 'H'
0000000000021e3d         db  0x91 ; '.'
0000000000021e3e         db  0xfe ; '.'
0000000000021e3f         db  0xff ; '.'
0000000000021e40         db  0x48 ; 'H'
0000000000021e41         db  0x91 ; '.'
0000000000021e42         db  0xfe ; '.'
0000000000021e43         db  0xff ; '.'
0000000000021e44         db  0x58 ; 'X'
0000000000021e45         db  0x8d ; '.'
0000000000021e46         db  0xfe ; '.'
0000000000021e47         db  0xff ; '.'
0000000000021e48         db  0x88 ; '.'
0000000000021e49         db  0x8f ; '.'
0000000000021e4a         db  0xfe ; '.'
0000000000021e4b         db  0xff ; '.'
0000000000021e4c         db  0x18 ; '.'
0000000000021e4d         db  0x91 ; '.'
0000000000021e4e         db  0xfe ; '.'
0000000000021e4f         db  0xff ; '.'
0000000000021e50         db  0x18 ; '.'
0000000000021e51         db  0x91 ; '.'
0000000000021e52         db  0xfe ; '.'
0000000000021e53         db  0xff ; '.'
0000000000021e54         db  0x18 ; '.'
0000000000021e55         db  0x91 ; '.'
0000000000021e56         db  0xfe ; '.'
0000000000021e57         db  0xff ; '.'
0000000000021e58         db  0x18 ; '.'
0000000000021e59         db  0x91 ; '.'
0000000000021e5a         db  0xfe ; '.'
0000000000021e5b         db  0xff ; '.'
0000000000021e5c         db  0x18 ; '.'
0000000000021e5d         db  0x91 ; '.'
0000000000021e5e         db  0xfe ; '.'
0000000000021e5f         db  0xff ; '.'
0000000000021e60         db  0x18 ; '.'
0000000000021e61         db  0x91 ; '.'
0000000000021e62         db  0xfe ; '.'
0000000000021e63         db  0xff ; '.'
0000000000021e64         db  0x18 ; '.'
0000000000021e65         db  0x91 ; '.'
0000000000021e66         db  0xfe ; '.'
0000000000021e67         db  0xff ; '.'
0000000000021e68         db  0x18 ; '.'
0000000000021e69         db  0x91 ; '.'
0000000000021e6a         db  0xfe ; '.'
0000000000021e6b         db  0xff ; '.'
0000000000021e6c         db  0x18 ; '.'
0000000000021e6d         db  0x91 ; '.'
0000000000021e6e         db  0xfe ; '.'
0000000000021e6f         db  0xff ; '.'
0000000000021e70         db  0x18 ; '.'
0000000000021e71         db  0x91 ; '.'
0000000000021e72         db  0xfe ; '.'
0000000000021e73         db  0xff ; '.'
0000000000021e74         db  0x18 ; '.'
0000000000021e75         db  0x91 ; '.'
0000000000021e76         db  0xfe ; '.'
0000000000021e77         db  0xff ; '.'
0000000000021e78         db  0x18 ; '.'
0000000000021e79         db  0x91 ; '.'
0000000000021e7a         db  0xfe ; '.'
0000000000021e7b         db  0xff ; '.'
0000000000021e7c         db  0x18 ; '.'
0000000000021e7d         db  0x91 ; '.'
0000000000021e7e         db  0xfe ; '.'
0000000000021e7f         db  0xff ; '.'
0000000000021e80         db  0x18 ; '.'
0000000000021e81         db  0x91 ; '.'
0000000000021e82         db  0xfe ; '.'
0000000000021e83         db  0xff ; '.'
0000000000021e84         db  0x18 ; '.'
0000000000021e85         db  0x91 ; '.'
0000000000021e86         db  0xfe ; '.'
0000000000021e87         db  0xff ; '.'
0000000000021e88         db  0x18 ; '.'
0000000000021e89         db  0x91 ; '.'
0000000000021e8a         db  0xfe ; '.'
0000000000021e8b         db  0xff ; '.'
0000000000021e8c         db  0x18 ; '.'
0000000000021e8d         db  0x91 ; '.'
0000000000021e8e         db  0xfe ; '.'
0000000000021e8f         db  0xff ; '.'
0000000000021e90         db  0x18 ; '.'
0000000000021e91         db  0x91 ; '.'
0000000000021e92         db  0xfe ; '.'
0000000000021e93         db  0xff ; '.'
0000000000021e94         db  0x18 ; '.'
0000000000021e95         db  0x91 ; '.'
0000000000021e96         db  0xfe ; '.'
0000000000021e97         db  0xff ; '.'
0000000000021e98         db  0x18 ; '.'
0000000000021e99         db  0x91 ; '.'
0000000000021e9a         db  0xfe ; '.'
0000000000021e9b         db  0xff ; '.'
0000000000021e9c         db  0x18 ; '.'
0000000000021e9d         db  0x91 ; '.'
0000000000021e9e         db  0xfe ; '.'
0000000000021e9f         db  0xff ; '.'
0000000000021ea0         db  0x18 ; '.'
0000000000021ea1         db  0x91 ; '.'
0000000000021ea2         db  0xfe ; '.'
0000000000021ea3         db  0xff ; '.'
0000000000021ea4         db  0x18 ; '.'
0000000000021ea5         db  0x91 ; '.'
0000000000021ea6         db  0xfe ; '.'
0000000000021ea7         db  0xff ; '.'
0000000000021ea8         db  0x18 ; '.'
0000000000021ea9         db  0x91 ; '.'
0000000000021eaa         db  0xfe ; '.'
0000000000021eab         db  0xff ; '.'
0000000000021eac         db  0x18 ; '.'
0000000000021ead         db  0x91 ; '.'
0000000000021eae         db  0xfe ; '.'
0000000000021eaf         db  0xff ; '.'
0000000000021eb0         db  0x18 ; '.'
0000000000021eb1         db  0x91 ; '.'
0000000000021eb2         db  0xfe ; '.'
0000000000021eb3         db  0xff ; '.'
0000000000021eb4         db  0x48 ; 'H'
0000000000021eb5         db  0x91 ; '.'
0000000000021eb6         db  0xfe ; '.'
0000000000021eb7         db  0xff ; '.'
0000000000021eb8         db  0x18 ; '.'
0000000000021eb9         db  0x90 ; '.'
0000000000021eba         db  0xfe ; '.'
0000000000021ebb         db  0xff ; '.'
0000000000021ebc         db  0x18 ; '.'
0000000000021ebd         db  0x91 ; '.'
0000000000021ebe         db  0xfe ; '.'
0000000000021ebf         db  0xff ; '.'
0000000000021ec0         db  0x48 ; 'H'
0000000000021ec1         db  0x91 ; '.'
0000000000021ec2         db  0xfe ; '.'
0000000000021ec3         db  0xff ; '.'
0000000000021ec4         db  0x18 ; '.'
0000000000021ec5         db  0x91 ; '.'
0000000000021ec6         db  0xfe ; '.'
0000000000021ec7         db  0xff ; '.'
0000000000021ec8         db  0x48 ; 'H'
0000000000021ec9         db  0x91 ; '.'
0000000000021eca         db  0xfe ; '.'
0000000000021ecb         db  0xff ; '.'
0000000000021ecc         db  0x18 ; '.'
0000000000021ecd         db  0x91 ; '.'
0000000000021ece         db  0xfe ; '.'
0000000000021ecf         db  0xff ; '.'
0000000000021ed0         db  0x18 ; '.'
0000000000021ed1         db  0x91 ; '.'
0000000000021ed2         db  0xfe ; '.'
0000000000021ed3         db  0xff ; '.'
0000000000021ed4         db  0x18 ; '.'
0000000000021ed5         db  0x91 ; '.'
0000000000021ed6         db  0xfe ; '.'
0000000000021ed7         db  0xff ; '.'
0000000000021ed8         db  0x18 ; '.'
0000000000021ed9         db  0x91 ; '.'
0000000000021eda         db  0xfe ; '.'
0000000000021edb         db  0xff ; '.'
0000000000021edc         db  0x18 ; '.'
0000000000021edd         db  0x91 ; '.'
0000000000021ede         db  0xfe ; '.'
0000000000021edf         db  0xff ; '.'
0000000000021ee0         db  0x18 ; '.'
0000000000021ee1         db  0x91 ; '.'
0000000000021ee2         db  0xfe ; '.'
0000000000021ee3         db  0xff ; '.'
0000000000021ee4         db  0x18 ; '.'
0000000000021ee5         db  0x91 ; '.'
0000000000021ee6         db  0xfe ; '.'
0000000000021ee7         db  0xff ; '.'
0000000000021ee8         db  0x18 ; '.'
0000000000021ee9         db  0x91 ; '.'
0000000000021eea         db  0xfe ; '.'
0000000000021eeb         db  0xff ; '.'
0000000000021eec         db  0x18 ; '.'
0000000000021eed         db  0x91 ; '.'
0000000000021eee         db  0xfe ; '.'
0000000000021eef         db  0xff ; '.'
0000000000021ef0         db  0x18 ; '.'
0000000000021ef1         db  0x91 ; '.'
0000000000021ef2         db  0xfe ; '.'
0000000000021ef3         db  0xff ; '.'
0000000000021ef4         db  0x18 ; '.'
0000000000021ef5         db  0x91 ; '.'
0000000000021ef6         db  0xfe ; '.'
0000000000021ef7         db  0xff ; '.'
0000000000021ef8         db  0x18 ; '.'
0000000000021ef9         db  0x91 ; '.'
0000000000021efa         db  0xfe ; '.'
0000000000021efb         db  0xff ; '.'
0000000000021efc         db  0x18 ; '.'
0000000000021efd         db  0x91 ; '.'
0000000000021efe         db  0xfe ; '.'
0000000000021eff         db  0xff ; '.'
0000000000021f00         db  0x18 ; '.'
0000000000021f01         db  0x91 ; '.'
0000000000021f02         db  0xfe ; '.'
0000000000021f03         db  0xff ; '.'
0000000000021f04         db  0x18 ; '.'
0000000000021f05         db  0x91 ; '.'
0000000000021f06         db  0xfe ; '.'
0000000000021f07         db  0xff ; '.'
0000000000021f08         db  0x18 ; '.'
0000000000021f09         db  0x91 ; '.'
0000000000021f0a         db  0xfe ; '.'
0000000000021f0b         db  0xff ; '.'
0000000000021f0c         db  0x18 ; '.'
0000000000021f0d         db  0x91 ; '.'
0000000000021f0e         db  0xfe ; '.'
0000000000021f0f         db  0xff ; '.'
0000000000021f10         db  0x18 ; '.'
0000000000021f11         db  0x91 ; '.'
0000000000021f12         db  0xfe ; '.'
0000000000021f13         db  0xff ; '.'
0000000000021f14         db  0x18 ; '.'
0000000000021f15         db  0x91 ; '.'
0000000000021f16         db  0xfe ; '.'
0000000000021f17         db  0xff ; '.'
0000000000021f18         db  0x18 ; '.'
0000000000021f19         db  0x91 ; '.'
0000000000021f1a         db  0xfe ; '.'
0000000000021f1b         db  0xff ; '.'
0000000000021f1c         db  0x18 ; '.'
0000000000021f1d         db  0x91 ; '.'
0000000000021f1e         db  0xfe ; '.'
0000000000021f1f         db  0xff ; '.'
0000000000021f20         db  0x18 ; '.'
0000000000021f21         db  0x91 ; '.'
0000000000021f22         db  0xfe ; '.'
0000000000021f23         db  0xff ; '.'
0000000000021f24         db  0x18 ; '.'
0000000000021f25         db  0x91 ; '.'
0000000000021f26         db  0xfe ; '.'
0000000000021f27         db  0xff ; '.'
0000000000021f28         db  0x18 ; '.'
0000000000021f29         db  0x91 ; '.'
0000000000021f2a         db  0xfe ; '.'
0000000000021f2b         db  0xff ; '.'
0000000000021f2c         db  0x18 ; '.'
0000000000021f2d         db  0x91 ; '.'
0000000000021f2e         db  0xfe ; '.'
0000000000021f2f         db  0xff ; '.'
0000000000021f30         db  0x18 ; '.'
0000000000021f31         db  0x91 ; '.'
0000000000021f32         db  0xfe ; '.'
0000000000021f33         db  0xff ; '.'
0000000000021f34         db  0x88 ; '.'
0000000000021f35         db  0x8c ; '.'
0000000000021f36         db  0xfe ; '.'
0000000000021f37         db  0xff ; '.'
0000000000021f38         db  0x48 ; 'H'
0000000000021f39         db  0x91 ; '.'
0000000000021f3a         db  0xfe ; '.'
0000000000021f3b         db  0xff ; '.'
0000000000021f3c         db  0x88 ; '.'
0000000000021f3d         db  0x8c ; '.'
0000000000021f3e         db  0xfe ; '.'
0000000000021f3f         db  0xff ; '.'
0000000000021f40         db  0x30 ; '0'
0000000000021f41         db  0x91 ; '.'
0000000000021f42         db  0xfe ; '.'
0000000000021f43         db  0xff ; '.'
0000000000021f44         db  0x00 ; '.'
0000000000021f45         db  0x00 ; '.'
0000000000021f46         db  0x00 ; '.'
0000000000021f47         db  0x00 ; '.'
0000000000021f48         db  0x00 ; '.'
0000000000021f49         db  0x00 ; '.'
0000000000021f4a         db  0x00 ; '.'
0000000000021f4b         db  0x00 ; '.'
0000000000021f4c         db  0x00 ; '.'
0000000000021f4d         db  0x00 ; '.'
0000000000021f4e         db  0x00 ; '.'
0000000000021f4f         db  0x00 ; '.'
0000000000021f50         db  0x00 ; '.'
0000000000021f51         db  0x00 ; '.'
0000000000021f52         db  0x00 ; '.'
0000000000021f53         db  0x00 ; '.'
0000000000021f54         db  0x00 ; '.'
0000000000021f55         db  0x00 ; '.'
0000000000021f56         db  0x00 ; '.'
0000000000021f57         db  0x00 ; '.'
0000000000021f58         db  0x00 ; '.'
0000000000021f59         db  0x00 ; '.'
0000000000021f5a         db  0x00 ; '.'
0000000000021f5b         db  0x00 ; '.'
0000000000021f5c         db  0x00 ; '.'
0000000000021f5d         db  0x00 ; '.'
0000000000021f5e         db  0x00 ; '.'
0000000000021f5f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000021f60         db  0x00 ; '.'
0000000000021f61         db  0x00 ; '.'
0000000000021f62         db  0x00 ; '.'
0000000000021f63         db  0x00 ; '.'
0000000000021f64         db  0x01 ; '.'
0000000000021f65         db  0x00 ; '.'
0000000000021f66         db  0x00 ; '.'
0000000000021f67         db  0x00 ; '.'
0000000000021f68         db  0x02 ; '.'
0000000000021f69         db  0x00 ; '.'
0000000000021f6a         db  0x00 ; '.'
0000000000021f6b         db  0x00 ; '.'
0000000000021f6c         db  0x03 ; '.'
0000000000021f6d         db  0x00 ; '.'
0000000000021f6e         db  0x00 ; '.'
0000000000021f6f         db  0x00 ; '.'
0000000000021f70         db  0x04 ; '.'
0000000000021f71         db  0x00 ; '.'
0000000000021f72         db  0x00 ; '.'
0000000000021f73         db  0x00 ; '.'
0000000000021f74         db  0x05 ; '.'
0000000000021f75         db  0x00 ; '.'
0000000000021f76         db  0x00 ; '.'
0000000000021f77         db  0x00 ; '.'
0000000000021f78         db  0x06 ; '.'
0000000000021f79         db  0x00 ; '.'
0000000000021f7a         db  0x00 ; '.'
0000000000021f7b         db  0x00 ; '.'
0000000000021f7c         db  0x07 ; '.'
0000000000021f7d         db  0x00 ; '.'
0000000000021f7e         db  0x00 ; '.'
0000000000021f7f         db  0x00 ; '.'
0000000000021f80         db  0x08 ; '.'
0000000000021f81         db  0x00 ; '.'
0000000000021f82         db  0x00 ; '.'
0000000000021f83         db  0x00 ; '.'
0000000000021f84         db  0x09 ; '.'
0000000000021f85         db  0x00 ; '.'
0000000000021f86         db  0x00 ; '.'
0000000000021f87         db  0x00 ; '.'
                     aSSSn:
0000000000021f88         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000021f94         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
0000000000021f9b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
0000000000021f9c         db  0x43 ; 'C'
0000000000021f9d         db  0x29 ; ')'
0000000000021f9e         db  0x00 ; '.'
                     aWrittenBySn:
0000000000021f9f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
0000000000021faf         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
0000000000021fc6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000021fe2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000021ff7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000002200d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000022021         align      8
                     aNlicenseGplv3G:
0000000000022028         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
00000000000220f4         align      8
                     aWrittenBySSSna:
00000000000220f8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_22118:        // aWrittenBySSSns
0000000000022118         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000002213c         align      64
                     aWrittenBySSSns_22140:        // aWrittenBySSSns
0000000000022140         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_22168:        // aWrittenBySSSns
0000000000022168         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000022194         align      8
                     aWrittenBySSSns_22198:        // aWrittenBySSSns
0000000000022198         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
00000000000221c8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
00000000000221fc         align      512
                     aWrittenBySSSns_22200:        // aWrittenBySSSns
0000000000022200         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000002223c         align      64
                     aGeneralHelpUsi:
0000000000022240         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000022281         align      4
                     switch_table_22284:        // switch_table
0000000000022284         dd         version_etc_arn.loc_c4e6-switch_table_22284, version_etc_arn.loc_c578-switch_table_22284, version_etc_arn.loc_c5b8-switch_table_22284, version_etc_arn.loc_c600-switch_table_22284 ; switch table used at 0xc464 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000022294         dd         version_etc_arn.loc_c650-switch_table_22284, version_etc_arn.loc_c6a8-switch_table_22284, version_etc_arn.loc_c6d8-switch_table_22284, version_etc_arn.loc_c740-switch_table_22284
00000000000222a4         dd         version_etc_arn.loc_c470-switch_table_22284, version_etc_arn.loc_c520-switch_table_22284
00000000000222ac         align      64
                     version_etc_copyright:
00000000000222c0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
00000000000222ef         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li_22300:        // aCoreutils831li
0000000000022300         db         "../coreutils-8.31/lib/xfts.c", 0           ; DATA XREF=sub_cc9f+8
                     aErrnoEinval:
000000000002231d         db         "errno != EINVAL", 0                        ; DATA XREF=sub_cc9f+15
000000000002232d         align      16
                     __PRETTY_FUNCTION__.3434:
0000000000022330         db         "xfts_open", 0                              ; DATA XREF=sub_cc9f+1
000000000002233a         align      64
                     aCoreutils831li_22340:        // aCoreutils831li
0000000000022340         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoimax+1686, xstrtoul+908, xstrtoumax+908
                     a0StrtolbaseStr:
0000000000022360         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoimax+1693, xstrtoul+915, xstrtoumax+915
0000000000022386         align      8
                     switch_table_22388:        // switch_table
0000000000022388         dd         xstrtoimax.loc_d1d0-switch_table_22388, 2 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_d100-switch_table_22388, xstrtoimax.loc_ce68-switch_table_22388 ; switch table used at 0xce9e containing 54 entries, DATA XREF=xstrtoimax+412
000000000002239c         dd         xstrtoimax.loc_d0a0-switch_table_22388, 3 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_d060-switch_table_22388, xstrtoimax.loc_ce68-switch_table_22388
00000000000223b4         dd         xstrtoimax.loc_cea0-switch_table_22388, 2 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_d168-switch_table_22388, 3 dup (xstrtoimax.loc_ce68-switch_table_22388)
00000000000223d0         dd         xstrtoimax.loc_d200-switch_table_22388, 4 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_cff0-switch_table_22388, xstrtoimax.loc_cf80-switch_table_22388
00000000000223ec         dd         7 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_cf50-switch_table_22388, xstrtoimax.loc_cf00-switch_table_22388, 3 dup (xstrtoimax.loc_ce68-switch_table_22388)
000000000002241c         dd         xstrtoimax.loc_d0a0-switch_table_22388, 3 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_d060-switch_table_22388, xstrtoimax.loc_ce68-switch_table_22388
0000000000022434         dd         xstrtoimax.loc_cea0-switch_table_22388, 6 dup (xstrtoimax.loc_ce68-switch_table_22388), xstrtoimax.loc_d200-switch_table_22388, 2 dup (xstrtoimax.loc_ce68-switch_table_22388)
000000000002245c         dd         xstrtoimax.loc_cf20-switch_table_22388
                     __PRETTY_FUNCTION__.4162:
0000000000022460         db         "xstrtoimax", 0                             ; DATA XREF=xstrtoimax+1679
000000000002246b         align      16
                     switch_table_22470:        // switch_table
0000000000022470         dd         xstrtoul.loc_d6d6-switch_table_22470, 2 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d6b3-switch_table_22470, xstrtoul.loc_d5cc-switch_table_22470 ; switch table used at 0xd586 containing 54 entries, DATA XREF=xstrtoul+452
0000000000022484         dd         xstrtoul.loc_d6ec-switch_table_22470, 3 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d66f-switch_table_22470, xstrtoul.loc_d5cc-switch_table_22470
000000000002249c         dd         xstrtoul.loc_d588-switch_table_22470, 2 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d690-switch_table_22470, 3 dup (xstrtoul.loc_d5cc-switch_table_22470)
00000000000224b8         dd         xstrtoul.loc_d64f-switch_table_22470, 4 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d62a-switch_table_22470, xstrtoul.loc_d604-switch_table_22470
00000000000224d4         dd         7 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d5ed-switch_table_22470, xstrtoul.loc_d5b0-switch_table_22470, 3 dup (xstrtoul.loc_d5cc-switch_table_22470)
0000000000022504         dd         xstrtoul.loc_d6ec-switch_table_22470, 3 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d66f-switch_table_22470, xstrtoul.loc_d5cc-switch_table_22470
000000000002251c         dd         xstrtoul.loc_d588-switch_table_22470, 6 dup (xstrtoul.loc_d5cc-switch_table_22470), xstrtoul.loc_d64f-switch_table_22470, 2 dup (xstrtoul.loc_d5cc-switch_table_22470)
0000000000022544         dd         xstrtoul.loc_d5d7-switch_table_22470
                     __PRETTY_FUNCTION__.4162_22548:        // __PRETTY_FUNCTION__.4162
0000000000022548         db         "xstrtoul", 0                               ; DATA XREF=xstrtoul+901
                     aInvalidSsArgum:
0000000000022551         db         "invalid %s%s argument '%s'", 0             ; DATA XREF=xstrtol_fatal+135
                     aSsArgumentSToo:
000000000002256c         db         "%s%s argument '%s' too large", 0           ; DATA XREF=xstrtol_fatal+51
0000000000022589         db  0x2d ; '-'                                         ; DATA XREF=xstrtol_fatal+72, xstrtol_fatal+146
000000000002258a         db  0x2d ; '-'                                         ; DATA XREF=main+1318, main+1488
000000000002258b         db  0x00 ; '.'
000000000002258c         db  0x00 ; '.'
000000000002258d         db  0x00 ; '.'
000000000002258e         db  0x00 ; '.'
000000000002258f         db  0x00 ; '.'
                     aInvalidSuffixI:
0000000000022590         db         "invalid suffix in %s%s argument '%s'", 0   ; DATA XREF=xstrtol_fatal+123
00000000000225b5         align      8
                     switch_table_225b8:        // switch_table
00000000000225b8         dd         xstrtoumax.loc_dba6-switch_table_225b8, 2 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_db83-switch_table_225b8, xstrtoumax.loc_da9c-switch_table_225b8 ; switch table used at 0xda56 containing 54 entries, DATA XREF=xstrtoumax+452
00000000000225cc         dd         xstrtoumax.loc_dbbc-switch_table_225b8, 3 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_db3f-switch_table_225b8, xstrtoumax.loc_da9c-switch_table_225b8
00000000000225e4         dd         xstrtoumax.loc_da58-switch_table_225b8, 2 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_db60-switch_table_225b8, 3 dup (xstrtoumax.loc_da9c-switch_table_225b8)
0000000000022600         dd         xstrtoumax.loc_db1f-switch_table_225b8, 4 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_dafa-switch_table_225b8, xstrtoumax.loc_dad4-switch_table_225b8
000000000002261c         dd         7 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_dabd-switch_table_225b8, xstrtoumax.loc_da80-switch_table_225b8, 3 dup (xstrtoumax.loc_da9c-switch_table_225b8)
000000000002264c         dd         xstrtoumax.loc_dbbc-switch_table_225b8, 3 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_db3f-switch_table_225b8, xstrtoumax.loc_da9c-switch_table_225b8
0000000000022664         dd         xstrtoumax.loc_da58-switch_table_225b8, 6 dup (xstrtoumax.loc_da9c-switch_table_225b8), xstrtoumax.loc_db1f-switch_table_225b8, 2 dup (xstrtoumax.loc_da9c-switch_table_225b8)
000000000002268c         dd         xstrtoumax.loc_daa7-switch_table_225b8
                     __PRETTY_FUNCTION__.4162_22690:        // __PRETTY_FUNCTION__.4162
0000000000022690         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
000000000002269b         db  0x2e ; '.'                                         ; DATA XREF=fts_safe_changedir+67, fts_safe_changedir+335, fts_build+2154, rpl_fts_read+1108
000000000002269c         db  0x2e ; '.'                                         ; DATA XREF=main+58, human_readable+132, rpl_fts_open+640, rpl_fts_read+1745, rpl_fts_read+1825, rpl_fts_children+195
000000000002269d         db  0x00 ; '.'
000000000002269e         db  0x00 ; '.'
000000000002269f         db  0x00 ; '.'
                     CSWTCH.53:
00000000000226a0         db  0x00 ; '.'                                         ; DATA XREF=fts_build+372, fts_build+2486
00000000000226a1         db  0x10 ; '.'
00000000000226a2         db  0x00 ; '.'
00000000000226a3         db  0x00 ; '.'
00000000000226a4         db  0x00 ; '.'
00000000000226a5         db  0x20 ; ' '
00000000000226a6         db  0x00 ; '.'
00000000000226a7         db  0x00 ; '.'
00000000000226a8         db  0x00 ; '.'
00000000000226a9         db  0x00 ; '.'
00000000000226aa         db  0x00 ; '.'
00000000000226ab         db  0x00 ; '.'
00000000000226ac         db  0x00 ; '.'
00000000000226ad         db  0x40 ; '@'
00000000000226ae         db  0x00 ; '.'
00000000000226af         db  0x00 ; '.'
00000000000226b0         db  0x00 ; '.'
00000000000226b1         db  0x00 ; '.'
00000000000226b2         db  0x00 ; '.'
00000000000226b3         db  0x00 ; '.'
00000000000226b4         db  0x00 ; '.'
00000000000226b5         db  0x60 ; '`'
00000000000226b6         db  0x00 ; '.'
00000000000226b7         db  0x00 ; '.'
00000000000226b8         db  0x00 ; '.'
00000000000226b9         db  0x00 ; '.'
00000000000226ba         db  0x00 ; '.'
00000000000226bb         db  0x00 ; '.'
00000000000226bc         db  0x00 ; '.'
00000000000226bd         db  0x80 ; '.'
00000000000226be         db  0x00 ; '.'
00000000000226bf         db  0x00 ; '.'
00000000000226c0         db  0x00 ; '.'
00000000000226c1         db  0x00 ; '.'
00000000000226c2         db  0x00 ; '.'
00000000000226c3         db  0x00 ; '.'
00000000000226c4         db  0x00 ; '.'
00000000000226c5         db  0xa0 ; '.'
00000000000226c6         db  0x00 ; '.'
00000000000226c7         db  0x00 ; '.'
00000000000226c8         db  0x00 ; '.'
00000000000226c9         db  0x00 ; '.'
00000000000226ca         db  0x00 ; '.'
00000000000226cb         db  0x00 ; '.'
00000000000226cc         db  0x00 ; '.'
00000000000226cd         db  0xc0 ; '.'
00000000000226ce         db  0x00 ; '.'
00000000000226cf         db  0x00 ; '.'
                     aProcselfmounti:
00000000000226d0         db         "/proc/self/mountinfo", 0                   ; DATA XREF=read_file_system_list+15
00000000000226e5         db  0x20 ; ' '                                         ; DATA XREF=read_file_system_list+203
00000000000226e6         db  0x2d ; '-'
00000000000226e7         db  0x20 ; ' '
00000000000226e8         db  0x00 ; '.'
                     aNsnNsnC:
00000000000226e9         db         " - %n%*s%n %n%*s%n %c", 0                  ; DATA XREF=read_file_system_list+247
                     aAutofs:
00000000000226ff         db         "autofs", 0                                 ; DATA XREF=read_file_system_list+484, read_file_system_list+1191
0000000000022706         db  0x70 ; 'p'                                         ; DATA XREF=read_file_system_list+572, read_file_system_list+1337
0000000000022707         db  0x72 ; 'r'
0000000000022708         db  0x6f ; 'o'
0000000000022709         db  0x63 ; 'c'
000000000002270a         db  0x00 ; '.'
                     aSubfs:
000000000002270b         db         "subfs", 0                                  ; DATA XREF=read_file_system_list+776, read_file_system_list+1367
                     aDebugfs:
0000000000022711         db         "debugfs", 0                                ; DATA XREF=read_file_system_list+806, read_file_system_list+1397
                     aDevpts:
0000000000022719         db         "devpts", 0                                 ; DATA XREF=read_file_system_list+836, read_file_system_list+1427
                     aFusectl:
0000000000022720         db         "fusectl", 0                                ; DATA XREF=read_file_system_list+866, read_file_system_list+1457
                     aMqueue:
0000000000022728         db         "mqueue", 0                                 ; DATA XREF=read_file_system_list+896, read_file_system_list+1487
                     aRpcpipefs:
000000000002272f         db         "rpc_pipefs", 0                             ; DATA XREF=read_file_system_list+926, read_file_system_list+1517
                     aSysfs:
000000000002273a         db         "sysfs", 0                                  ; DATA XREF=read_file_system_list+956, read_file_system_list+1547
                     aDevfs:
0000000000022740         db         "devfs", 0                                  ; DATA XREF=read_file_system_list+986, read_file_system_list+1573
                     aKernfs:
0000000000022746         db         "kernfs", 0                                 ; DATA XREF=read_file_system_list+1016, read_file_system_list+1599
                     aIgnore:
000000000002274d         db         "ignore", 0                                 ; DATA XREF=read_file_system_list+1046, read_file_system_list+1625
0000000000022754         db  0x6e ; 'n'                                         ; DATA XREF=read_file_system_list+1078, read_file_system_list+1653
0000000000022755         db  0x6f ; 'o'
0000000000022756         db  0x6e ; 'n'
0000000000022757         db  0x65 ; 'e'
0000000000022758         db  0x00 ; '.'
                     aSmbfs:
0000000000022759         db         "smbfs", 0                                  ; DATA XREF=read_file_system_list+1931, read_file_system_list+2007
000000000002275f         db  0x63 ; 'c'                                         ; DATA XREF=read_file_system_list+1961, read_file_system_list+2037
0000000000022760         db  0x69 ; 'i'
0000000000022761         db  0x66 ; 'f'
0000000000022762         db  0x73 ; 's'
0000000000022763         db  0x00 ; '.'
                     aHosts:
0000000000022764         db         "-hosts", 0                                 ; DATA XREF=read_file_system_list+1114, read_file_system_list+1886
                     aEtcmtab:
000000000002276b         db         "/etc/mtab", 0                              ; DATA XREF=read_file_system_list+1159
0000000000022775         db  0x62 ; 'b'                                         ; DATA XREF=read_file_system_list+1216
0000000000022776         db  0x69 ; 'i'
0000000000022777         db  0x6e ; 'n'
0000000000022778         db  0x64 ; 'd'
0000000000022779         db  0x00 ; '.'
000000000002277a         db  0x00 ; '.'
000000000002277b         db  0x00 ; '.'
000000000002277c         db  0x00 ; '.'
000000000002277d         db  0x00 ; '.'
000000000002277e         db  0x00 ; '.'
000000000002277f         db  0x00 ; '.'
                     aUUUuNsnNsnc:
0000000000022780         db         "%*u %*u %u:%u %n%*s%n %n%*s%n%c", 0        ; DATA XREF=read_file_system_list+144
                     aCoreutils831li_227a0:        // aCoreutils831li
00000000000227a0         db         "../coreutils-8.31/lib/regexec.c", 0        ; DATA XREF=pop_fail_stack.isra.25+124, re_search_internal+4148, re_search_internal+5432, re_search_stub+1065, re_search_stub+1096, re_search_stub+1127
                     aCoreutils831li_227c0:        // aCoreutils831li
00000000000227c0         db         "../coreutils-8.31/lib/regcomp.c", 0        ; DATA XREF=sub_1c260+2817, sub_1dba0+18, sub_1e280+106, sub_1e280+137, sub_1e280+168
                     aIsepsilonnodeN:
00000000000227e0         db         "!IS_EPSILON_NODE (node->token.type)", 0    ; DATA XREF=sub_1e280+144
                     aNum0:
0000000000022804         db         "num >= 0", 0                               ; DATA XREF=pop_fail_stack.isra.25+131
                     aAlpha:
000000000002280d         db         "alpha", 0                                  ; DATA XREF=build_charclass.isra.29+65, build_charclass.isra.29+338, build_charclass.isra.29+626
                     aUpper:
0000000000022813         db         "upper", 0                                  ; DATA XREF=build_charclass.isra.29+35, build_charclass.isra.29+1100
                     aLower:
0000000000022819         db         "lower", 0                                  ; DATA XREF=build_charclass.isra.29+310, build_charclass.isra.29+424
                     aAlnum:
000000000002281f         db         "alnum", 0                                  ; DATA XREF=build_charclass.isra.29+108, sub_1c260+463
                     aCntrl:
0000000000022825         db         "cntrl", 0                                  ; DATA XREF=build_charclass.isra.29+138
                     aSpace:
000000000002282b         db         "space", 0                                  ; DATA XREF=build_charclass.isra.29+450, sub_1c260+383
                     aPrint:
0000000000022831         db         "print", 0                                  ; DATA XREF=build_charclass.isra.29+947
                     aBlank:
0000000000022837         db         "blank", 0                                  ; DATA XREF=build_charclass.isra.29+1202
                     aGraph:
000000000002283d         db         "graph", 0                                  ; DATA XREF=build_charclass.isra.29+1470
                     aPunct:
0000000000022843         db         "punct", 0                                  ; DATA XREF=build_charclass.isra.29+1610
0000000000022849         db  0x78 ; 'x'                                         ; DATA XREF=build_charclass.isra.29+1748
                     aDigit:
000000000002284a         db         "digit", 0                                  ; DATA XREF=build_charclass.isra.29+656
                     aErrRegespace:
0000000000022850         db         "err == REG_ESPACE", 0                      ; DATA XREF=re_search_internal+4155, re_search_internal+5439
0000000000022862         db  0x38 ; '8'                                         ; DATA XREF=re_compile_internal+352
0000000000022863         db  0x00 ; '.'
                     aNodenextNull:
0000000000022864         db         "node->next == NULL", 0                     ; DATA XREF=sub_1dba0+25
                     aLeft1:
0000000000022877         db         "left > -1", 0                              ; DATA XREF=sub_1e280+175
                     aRight1:
0000000000022881         db         "right > -1", 0                             ; DATA XREF=sub_1e280+113
                     aRegsallocatedR:
000000000002288c         db         "regs_allocated == REGS_FIXED", 0           ; DATA XREF=re_search_stub+1134
                     aRegsnumregsNre:
00000000000228a9         db         "regs->num_regs >= nregs", 0                ; DATA XREF=re_search_stub+1103
                     aPmatch0rmsoSta:
00000000000228c1         db         "pmatch[0].rm_so == start", 0               ; DATA XREF=re_search_stub+1072
00000000000228da         align      32
                     switch_table_228e0:        // switch_table
00000000000228e0         dd         2 dup (re_search_internal.loc_19b84-switch_table_228e0), re_search_internal.loc_195ee-switch_table_228e0, re_search_internal.loc_19b12-switch_table_228e0, re_search_internal.loc_19698-switch_table_228e0 ; switch table used at 0x195b6 containing 5 entries, DATA XREF=re_search_internal+1256
                     switch_table_228f4:        // switch_table
00000000000228f4         dd         peek_token.loc_1b5d0-switch_table_228f4, 25 dup (peek_token.loc_1b50c-switch_table_228f4), peek_token.loc_1b640-switch_table_228f4, 3 dup (peek_token.loc_1b50c-switch_table_228f4) ; switch table used at 0x1b3ec containing 116 entries, DATA XREF=peek_token+314
000000000002296c         dd         peek_token.loc_1b620-switch_table_228f4, peek_token.loc_1b600-switch_table_228f4, peek_token.loc_1b5f0-switch_table_228f4, peek_token.loc_1b5b0-switch_table_228f4
000000000002297c         dd         2 dup (peek_token.loc_1b50c-switch_table_228f4), peek_token.loc_1b5a0-switch_table_228f4, 16 dup (peek_token.loc_1b50c-switch_table_228f4), peek_token.loc_1b580-switch_table_228f4
00000000000229cc         dd         27 dup (peek_token.loc_1b50c-switch_table_228f4), peek_token.loc_1b570-switch_table_228f4, 2 dup (peek_token.loc_1b50c-switch_table_228f4), peek_token.loc_1b548-switch_table_228f4
0000000000022a48         dd         28 dup (peek_token.loc_1b50c-switch_table_228f4), peek_token.loc_1b520-switch_table_228f4, peek_token.loc_1b4f8-switch_table_228f4, peek_token.loc_1b4d0-switch_table_228f4
                     switch_table_22ac4:        // switch_table
0000000000022ac4         dd         peek_token.loc_1b863-switch_table_22ac4, peek_token.loc_1b84c-switch_table_22ac4, peek_token.loc_1b835-switch_table_22ac4, peek_token.loc_1b885-switch_table_22ac4 ; switch table used at 0x1b498 containing 87 entries, DATA XREF=peek_token+487
0000000000022ad4         dd         peek_token.loc_1b81a-switch_table_22ac4, 5 dup (peek_token.loc_1b885-switch_table_22ac4), 9 dup (peek_token.loc_1b7f1-switch_table_22ac4), 2 dup (peek_token.loc_1b885-switch_table_22ac4)
0000000000022b18         dd         peek_token.loc_1b7cf-switch_table_22ac4, peek_token.loc_1b885-switch_table_22ac4, peek_token.loc_1b7ad-switch_table_22ac4, peek_token.loc_1b792-switch_table_22ac4
0000000000022b28         dd         2 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b770-switch_table_22ac4, 16 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b755-switch_table_22ac4
0000000000022b78         dd         3 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b73a-switch_table_22ac4, 8 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b718-switch_table_22ac4
0000000000022bac         dd         peek_token.loc_1b885-switch_table_22ac4, peek_token.loc_1b6f6-switch_table_22ac4, 16 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b6bd-switch_table_22ac4
0000000000022bf8         dd         3 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b6a2-switch_table_22ac4, 3 dup (peek_token.loc_1b885-switch_table_22ac4), peek_token.loc_1b684-switch_table_22ac4
0000000000022c18         dd         peek_token.loc_1b669-switch_table_22ac4, peek_token.loc_1b6d8-switch_table_22ac4
0000000000022c20         db  0x40 ; '@'                                         ; DATA XREF=parse_expression+75
0000000000022c21         db  0x8f ; '.'
0000000000022c22         db  0xff ; '.'
0000000000022c23         db  0xff ; '.'
0000000000022c24         db  0xce ; '.'
0000000000022c25         db  0x98 ; '.'
0000000000022c26         db  0xff ; '.'
0000000000022c27         db  0xff ; '.'
0000000000022c28         db  0x40 ; '@'
0000000000022c29         db  0x8f ; '.'
0000000000022c2a         db  0xff ; '.'
0000000000022c2b         db  0xff ; '.'
0000000000022c2c         db  0x40 ; '@'
0000000000022c2d         db  0x8f ; '.'
0000000000022c2e         db  0xff ; '.'
0000000000022c2f         db  0xff ; '.'
0000000000022c30         db  0x1f ; '.'
0000000000022c31         db  0x98 ; '.'
0000000000022c32         db  0xff ; '.'
0000000000022c33         db  0xff ; '.'
0000000000022c34         db  0x89 ; '.'
0000000000022c35         db  0x98 ; '.'
0000000000022c36         db  0xff ; '.'
0000000000022c37         db  0xff ; '.'
0000000000022c38         db  0x40 ; '@'
0000000000022c39         db  0x8f ; '.'
0000000000022c3a         db  0xff ; '.'
0000000000022c3b         db  0xff ; '.'
0000000000022c3c         db  0x40 ; '@'
0000000000022c3d         db  0x8f ; '.'
0000000000022c3e         db  0xff ; '.'
0000000000022c3f         db  0xff ; '.'
0000000000022c40         db  0xa1 ; '.'
0000000000022c41         db  0x8e ; '.'
0000000000022c42         db  0xff ; '.'
0000000000022c43         db  0xff ; '.'
0000000000022c44         db  0xb8 ; '.'
0000000000022c45         db  0x99 ; '.'
0000000000022c46         db  0xff ; '.'
0000000000022c47         db  0xff ; '.'
0000000000022c48         db  0x40 ; '@'
0000000000022c49         db  0x8f ; '.'
0000000000022c4a         db  0xff ; '.'
0000000000022c4b         db  0xff ; '.'
0000000000022c4c         db  0x8d ; '.'
0000000000022c4d         db  0x8f ; '.'
0000000000022c4e         db  0xff ; '.'
0000000000022c4f         db  0xff ; '.'
0000000000022c50         db  0x00 ; '.'
0000000000022c51         db  0x95 ; '.'
0000000000022c52         db  0xff ; '.'
0000000000022c53         db  0xff ; '.'
0000000000022c54         db  0x40 ; '@'
0000000000022c55         db  0x8f ; '.'
0000000000022c56         db  0xff ; '.'
0000000000022c57         db  0xff ; '.'
0000000000022c58         db  0x40 ; '@'
0000000000022c59         db  0x8f ; '.'
0000000000022c5a         db  0xff ; '.'
0000000000022c5b         db  0xff ; '.'
0000000000022c5c         db  0x40 ; '@'
0000000000022c5d         db  0x8f ; '.'
0000000000022c5e         db  0xff ; '.'
0000000000022c5f         db  0xff ; '.'
0000000000022c60         db  0x40 ; '@'
0000000000022c61         db  0x8f ; '.'
0000000000022c62         db  0xff ; '.'
0000000000022c63         db  0xff ; '.'
0000000000022c64         db  0x40 ; '@'
0000000000022c65         db  0x8f ; '.'
0000000000022c66         db  0xff ; '.'
0000000000022c67         db  0xff ; '.'
0000000000022c68         db  0x8d ; '.'
0000000000022c69         db  0x8f ; '.'
0000000000022c6a         db  0xff ; '.'
0000000000022c6b         db  0xff ; '.'
0000000000022c6c         db  0x8d ; '.'
0000000000022c6d         db  0x8f ; '.'
0000000000022c6e         db  0xff ; '.'
0000000000022c6f         db  0xff ; '.'
0000000000022c70         db  0x40 ; '@'
0000000000022c71         db  0x96 ; '.'
0000000000022c72         db  0xff ; '.'
0000000000022c73         db  0xff ; '.'
0000000000022c74         db  0x40 ; '@'
0000000000022c75         db  0x8f ; '.'
0000000000022c76         db  0xff ; '.'
0000000000022c77         db  0xff ; '.'
0000000000022c78         db  0x40 ; '@'
0000000000022c79         db  0x8f ; '.'
0000000000022c7a         db  0xff ; '.'
0000000000022c7b         db  0xff ; '.'
0000000000022c7c         db  0x7e ; '~'
0000000000022c7d         db  0x8f ; '.'
0000000000022c7e         db  0xff ; '.'
0000000000022c7f         db  0xff ; '.'
0000000000022c80         db  0xab ; '.'
0000000000022c81         db  0x8f ; '.'
0000000000022c82         db  0xff ; '.'
0000000000022c83         db  0xff ; '.'
0000000000022c84         db  0x40 ; '@'
0000000000022c85         db  0x8f ; '.'
0000000000022c86         db  0xff ; '.'
0000000000022c87         db  0xff ; '.'
0000000000022c88         db  0x40 ; '@'
0000000000022c89         db  0x8f ; '.'
0000000000022c8a         db  0xff ; '.'
0000000000022c8b         db  0xff ; '.'
0000000000022c8c         db  0x40 ; '@'
0000000000022c8d         db  0x8f ; '.'
0000000000022c8e         db  0xff ; '.'
0000000000022c8f         db  0xff ; '.'
0000000000022c90         db  0x40 ; '@'
0000000000022c91         db  0x8f ; '.'
0000000000022c92         db  0xff ; '.'
0000000000022c93         db  0xff ; '.'
0000000000022c94         db  0x40 ; '@'
0000000000022c95         db  0x8f ; '.'
0000000000022c96         db  0xff ; '.'
0000000000022c97         db  0xff ; '.'
0000000000022c98         db  0x40 ; '@'
0000000000022c99         db  0x8f ; '.'
0000000000022c9a         db  0xff ; '.'
0000000000022c9b         db  0xff ; '.'
0000000000022c9c         db  0x40 ; '@'
0000000000022c9d         db  0x8f ; '.'
0000000000022c9e         db  0xff ; '.'
0000000000022c9f         db  0xff ; '.'
0000000000022ca0         db  0xf8 ; '.'
0000000000022ca1         db  0x97 ; '.'
0000000000022ca2         db  0xff ; '.'
0000000000022ca3         db  0xff ; '.'
0000000000022ca4         db  0xf8 ; '.'
0000000000022ca5         db  0x97 ; '.'
0000000000022ca6         db  0xff ; '.'
0000000000022ca7         db  0xff ; '.'
0000000000022ca8         db  0xa8 ; '.'
0000000000022ca9         db  0x97 ; '.'
0000000000022caa         db  0xff ; '.'
0000000000022cab         db  0xff ; '.'
0000000000022cac         db  0xa8 ; '.'
0000000000022cad         db  0x97 ; '.'
0000000000022cae         db  0xff ; '.'
0000000000022caf         db  0xff ; '.'
0000000000022cb0         db  0x23 ; '#'
0000000000022cb1         db  0x9a ; '.'
0000000000022cb2         db  0xff ; '.'
0000000000022cb3         db  0xff ; '.'
                     switch_table_22cb4:        // switch_table
0000000000022cb4         dd         sub_1c260.loc_1c731-switch_table_22cb4, sub_1c260.loc_1c707-switch_table_22cb4, sub_1c260.loc_1c6bd-switch_table_22cb4, sub_1c260.loc_1c685-switch_table_22cb4 ; switch table used at 0x1c3c6 containing 5 entries, DATA XREF=sub_1c260+139
0000000000022cc4         dd         sub_1c260.loc_1c759-switch_table_22cb4
0000000000022cc8         db  0x20 ; ' '                                         ; DATA XREF=re_compile_internal+1708
0000000000022cc9         db  0xad ; '.'
0000000000022cca         db  0xff ; '.'
0000000000022ccb         db  0xff ; '.'
0000000000022ccc         db  0x20 ; ' '
0000000000022ccd         db  0xad ; '.'
0000000000022cce         db  0xff ; '.'
0000000000022ccf         db  0xff ; '.'
0000000000022cd0         db  0xd8 ; '.'
0000000000022cd1         db  0xae ; '.'
0000000000022cd2         db  0xff ; '.'
0000000000022cd3         db  0xff ; '.'
0000000000022cd4         db  0x20 ; ' '
0000000000022cd5         db  0xad ; '.'
0000000000022cd6         db  0xff ; '.'
0000000000022cd7         db  0xff ; '.'
0000000000022cd8         db  0x08 ; '.'
0000000000022cd9         db  0xaf ; '.'
0000000000022cda         db  0xff ; '.'
0000000000022cdb         db  0xff ; '.'
0000000000022cdc         db  0x20 ; ' '
0000000000022cdd         db  0xad ; '.'
0000000000022cde         db  0xff ; '.'
0000000000022cdf         db  0xff ; '.'
0000000000022ce0         db  0x20 ; ' '
0000000000022ce1         db  0xad ; '.'
0000000000022ce2         db  0xff ; '.'
0000000000022ce3         db  0xff ; '.'
0000000000022ce4         db  0x20 ; ' '
0000000000022ce5         db  0xad ; '.'
0000000000022ce6         db  0xff ; '.'
0000000000022ce7         db  0xff ; '.'
0000000000022ce8         db  0x80 ; '.'
0000000000022ce9         db  0xae ; '.'
0000000000022cea         db  0xff ; '.'
0000000000022ceb         db  0xff ; '.'
0000000000022cec         db  0x80 ; '.'
0000000000022ced         db  0xae ; '.'
0000000000022cee         db  0xff ; '.'
0000000000022cef         db  0xff ; '.'
0000000000022cf0         db  0xbf ; '.'
0000000000022cf1         db  0xad ; '.'
0000000000022cf2         db  0xff ; '.'
0000000000022cf3         db  0xff ; '.'
0000000000022cf4         db  0xbf ; '.'
0000000000022cf5         db  0xad ; '.'
0000000000022cf6         db  0xff ; '.'
0000000000022cf7         db  0xff ; '.'
0000000000022cf8         db  0x80 ; '.'
0000000000022cf9         db  0xae ; '.'
0000000000022cfa         db  0xff ; '.'
0000000000022cfb         db  0xff ; '.'
0000000000022cfc         db  0x20 ; ' '
0000000000022cfd         db  0xad ; '.'
0000000000022cfe         db  0xff ; '.'
0000000000022cff         db  0xff ; '.'
0000000000022d00         db  0x20 ; ' '
0000000000022d01         db  0xad ; '.'
0000000000022d02         db  0xff ; '.'
0000000000022d03         db  0xff ; '.'
0000000000022d04         db  0x20 ; ' '
0000000000022d05         db  0xad ; '.'
0000000000022d06         db  0xff ; '.'
0000000000022d07         db  0xff ; '.'
0000000000022d08         db  0x39 ; '9'
0000000000022d09         db  0xad ; '.'
0000000000022d0a         db  0xff ; '.'
0000000000022d0b         db  0xff ; '.'
0000000000022d0c         db  0xd2 ; '.'                                         ; DATA XREF=sub_1dbd0+1071
0000000000022d0d         db  0xb5 ; '.'
0000000000022d0e         db  0xff ; '.'
0000000000022d0f         db  0xff ; '.'
0000000000022d10         db  0xd4 ; '.'
0000000000022d11         db  0xb4 ; '.'
0000000000022d12         db  0xff ; '.'
0000000000022d13         db  0xff ; '.'
0000000000022d14         db  0x80 ; '.'
0000000000022d15         db  0xb4 ; '.'
0000000000022d16         db  0xff ; '.'
0000000000022d17         db  0xff ; '.'
0000000000022d18         db  0xfc ; '.'
0000000000022d19         db  0xb4 ; '.'
0000000000022d1a         db  0xff ; '.'
0000000000022d1b         db  0xff ; '.'
0000000000022d1c         db  0x80 ; '.'
0000000000022d1d         db  0xb4 ; '.'
0000000000022d1e         db  0xff ; '.'
0000000000022d1f         db  0xff ; '.'
0000000000022d20         db  0x7d ; '}'
0000000000022d21         db  0xb4 ; '.'
0000000000022d22         db  0xff ; '.'
0000000000022d23         db  0xff ; '.'
0000000000022d24         db  0xf2 ; '.'
0000000000022d25         db  0xb0 ; '.'
0000000000022d26         db  0xff ; '.'
0000000000022d27         db  0xff ; '.'
0000000000022d28         db  0xd2 ; '.'
0000000000022d29         db  0xb5 ; '.'
0000000000022d2a         db  0xff ; '.'
0000000000022d2b         db  0xff ; '.'
0000000000022d2c         db  0x80 ; '.'
0000000000022d2d         db  0xb4 ; '.'
0000000000022d2e         db  0xff ; '.'
0000000000022d2f         db  0xff ; '.'
0000000000022d30         db  0x80 ; '.'
0000000000022d31         db  0xb4 ; '.'
0000000000022d32         db  0xff ; '.'
0000000000022d33         db  0xff ; '.'
0000000000022d34         db  0x80 ; '.'
0000000000022d35         db  0xb4 ; '.'
0000000000022d36         db  0xff ; '.'
0000000000022d37         db  0xff ; '.'
0000000000022d38         db  0x80 ; '.'
0000000000022d39         db  0xb4 ; '.'
0000000000022d3a         db  0xff ; '.'
0000000000022d3b         db  0xff ; '.'
0000000000022d3c         db  0xdd ; '.'
0000000000022d3d         db  0xb4 ; '.'
0000000000022d3e         db  0xff ; '.'
0000000000022d3f         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7859:
0000000000022d40         db         "re_copy_regs", 0                           ; DATA XREF=re_search_stub+1089, re_search_stub+1120
0000000000022d4d         align      16
                     __PRETTY_FUNCTION__.7847:
0000000000022d50         db         "re_search_stub", 0                         ; DATA XREF=re_search_stub+1058
0000000000022d5f         align      32
                     __PRETTY_FUNCTION__.8040:
0000000000022d60         db         "pop_fail_stack", 0                         ; DATA XREF=pop_fail_stack.isra.25+117
0000000000022d6f         align      16
                     __PRETTY_FUNCTION__.7972:
0000000000022d70         db         "check_matching", 0                         ; DATA XREF=re_search_internal+4141, re_search_internal+5425
0000000000022d7f         align      128
                     __PRETTY_FUNCTION__.6981:
0000000000022d80         db         "link_nfa_nodes", 0                         ; DATA XREF=sub_1dba0+11, sub_1e280+99, sub_1e280+130, sub_1e280+161
0000000000022d8f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7327:
0000000000022d90         db         "parse_bracket_exp", 0                      ; DATA XREF=sub_1c260+2810
0000000000022da2         db  0x00 ; '.'
0000000000022da3         db  0x00 ; '.'
0000000000022da4         db  0x00 ; '.'
0000000000022da5         db  0x00 ; '.'
0000000000022da6         db  0x00 ; '.'
0000000000022da7         db  0x00 ; '.'
0000000000022da8         db  0x00 ; '.'
0000000000022da9         db  0x00 ; '.'
0000000000022daa         db  0x00 ; '.'
0000000000022dab         db  0x00 ; '.'
0000000000022dac         db  0x00 ; '.'
0000000000022dad         db  0x00 ; '.'
0000000000022dae         db  0x00 ; '.'
0000000000022daf         db  0x00 ; '.'
0000000000022db0         db  0x00 ; '.'
0000000000022db1         db  0x00 ; '.'
0000000000022db2         db  0x00 ; '.'
0000000000022db3         db  0x00 ; '.'
0000000000022db4         db  0x00 ; '.'
0000000000022db5         db  0x00 ; '.'
0000000000022db6         db  0x00 ; '.'
0000000000022db7         db  0x00 ; '.'
0000000000022db8         db  0x00 ; '.'
0000000000022db9         db  0x00 ; '.'
0000000000022dba         db  0x00 ; '.'
0000000000022dbb         db  0x00 ; '.'
0000000000022dbc         db  0x00 ; '.'
0000000000022dbd         db  0x00 ; '.'
0000000000022dbe         db  0x00 ; '.'
0000000000022dbf         db  0x00 ; '.'
                     utf8_sb_map:
0000000000022dc0         db  0xff ; '.'                                         ; DATA XREF=free_dfa_content+305, re_compile_internal+435
0000000000022dc1         db  0xff ; '.'
0000000000022dc2         db  0xff ; '.'
0000000000022dc3         db  0xff ; '.'
0000000000022dc4         db  0xff ; '.'
0000000000022dc5         db  0xff ; '.'
0000000000022dc6         db  0xff ; '.'
0000000000022dc7         db  0xff ; '.'
0000000000022dc8         db  0xff ; '.'
0000000000022dc9         db  0xff ; '.'
0000000000022dca         db  0xff ; '.'
0000000000022dcb         db  0xff ; '.'
0000000000022dcc         db  0xff ; '.'
0000000000022dcd         db  0xff ; '.'
0000000000022dce         db  0xff ; '.'
0000000000022dcf         db  0xff ; '.'
0000000000022dd0         db  0x00 ; '.'
0000000000022dd1         db  0x00 ; '.'
0000000000022dd2         db  0x00 ; '.'
0000000000022dd3         db  0x00 ; '.'
0000000000022dd4         db  0x00 ; '.'
0000000000022dd5         db  0x00 ; '.'
0000000000022dd6         db  0x00 ; '.'
0000000000022dd7         db  0x00 ; '.'
0000000000022dd8         db  0x00 ; '.'
0000000000022dd9         db  0x00 ; '.'
0000000000022dda         db  0x00 ; '.'
0000000000022ddb         db  0x00 ; '.'
0000000000022ddc         db  0x00 ; '.'
0000000000022ddd         db  0x00 ; '.'
0000000000022dde         db  0x00 ; '.'
0000000000022ddf         db  0x00 ; '.'
                     __re_error_msgid_idx:
0000000000022de0         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+62, rpl_regerror+15
0000000000022de1         db  0x00 ; '.'
0000000000022de2         db  0x00 ; '.'
0000000000022de3         db  0x00 ; '.'
0000000000022de4         db  0x00 ; '.'
0000000000022de5         db  0x00 ; '.'
0000000000022de6         db  0x00 ; '.'
0000000000022de7         db  0x00 ; '.'
0000000000022de8         db  0x08 ; '.'
0000000000022de9         db  0x00 ; '.'
0000000000022dea         db  0x00 ; '.'
0000000000022deb         db  0x00 ; '.'
0000000000022dec         db  0x00 ; '.'
0000000000022ded         db  0x00 ; '.'
0000000000022dee         db  0x00 ; '.'
0000000000022def         db  0x00 ; '.'
0000000000022df0         db  0x11 ; '.'
0000000000022df1         db  0x00 ; '.'
0000000000022df2         db  0x00 ; '.'
0000000000022df3         db  0x00 ; '.'
0000000000022df4         db  0x00 ; '.'
0000000000022df5         db  0x00 ; '.'
0000000000022df6         db  0x00 ; '.'
0000000000022df7         db  0x00 ; '.'
0000000000022df8         db  0x2c ; ','
0000000000022df9         db  0x00 ; '.'
0000000000022dfa         db  0x00 ; '.'
0000000000022dfb         db  0x00 ; '.'
0000000000022dfc         db  0x00 ; '.'
0000000000022dfd         db  0x00 ; '.'
0000000000022dfe         db  0x00 ; '.'
0000000000022dff         db  0x00 ; '.'
0000000000022e00         db  0x48 ; 'H'
0000000000022e01         db  0x00 ; '.'
0000000000022e02         db  0x00 ; '.'
0000000000022e03         db  0x00 ; '.'
0000000000022e04         db  0x00 ; '.'
0000000000022e05         db  0x00 ; '.'
0000000000022e06         db  0x00 ; '.'
0000000000022e07         db  0x00 ; '.'
0000000000022e08         db  0x65 ; 'e'
0000000000022e09         db  0x00 ; '.'
0000000000022e0a         db  0x00 ; '.'
0000000000022e0b         db  0x00 ; '.'
0000000000022e0c         db  0x00 ; '.'
0000000000022e0d         db  0x00 ; '.'
0000000000022e0e         db  0x00 ; '.'
0000000000022e0f         db  0x00 ; '.'
0000000000022e10         db  0x78 ; 'x'
0000000000022e11         db  0x00 ; '.'
0000000000022e12         db  0x00 ; '.'
0000000000022e13         db  0x00 ; '.'
0000000000022e14         db  0x00 ; '.'
0000000000022e15         db  0x00 ; '.'
0000000000022e16         db  0x00 ; '.'
0000000000022e17         db  0x00 ; '.'
0000000000022e18         db  0x8f ; '.'
0000000000022e19         db  0x00 ; '.'
0000000000022e1a         db  0x00 ; '.'
0000000000022e1b         db  0x00 ; '.'
0000000000022e1c         db  0x00 ; '.'
0000000000022e1d         db  0x00 ; '.'
0000000000022e1e         db  0x00 ; '.'
0000000000022e1f         db  0x00 ; '.'
0000000000022e20         db  0xae ; '.'
0000000000022e21         db  0x00 ; '.'
0000000000022e22         db  0x00 ; '.'
0000000000022e23         db  0x00 ; '.'
0000000000022e24         db  0x00 ; '.'
0000000000022e25         db  0x00 ; '.'
0000000000022e26         db  0x00 ; '.'
0000000000022e27         db  0x00 ; '.'
0000000000022e28         db  0xc0 ; '.'
0000000000022e29         db  0x00 ; '.'
0000000000022e2a         db  0x00 ; '.'
0000000000022e2b         db  0x00 ; '.'
0000000000022e2c         db  0x00 ; '.'
0000000000022e2d         db  0x00 ; '.'
0000000000022e2e         db  0x00 ; '.'
0000000000022e2f         db  0x00 ; '.'
0000000000022e30         db  0xcd ; '.'
0000000000022e31         db  0x00 ; '.'
0000000000022e32         db  0x00 ; '.'
0000000000022e33         db  0x00 ; '.'
0000000000022e34         db  0x00 ; '.'
0000000000022e35         db  0x00 ; '.'
0000000000022e36         db  0x00 ; '.'
0000000000022e37         db  0x00 ; '.'
0000000000022e38         db  0xe5 ; '.'
0000000000022e39         db  0x00 ; '.'
0000000000022e3a         db  0x00 ; '.'
0000000000022e3b         db  0x00 ; '.'
0000000000022e3c         db  0x00 ; '.'
0000000000022e3d         db  0x00 ; '.'
0000000000022e3e         db  0x00 ; '.'
0000000000022e3f         db  0x00 ; '.'
0000000000022e40         db  0xf7 ; '.'
0000000000022e41         db  0x00 ; '.'
0000000000022e42         db  0x00 ; '.'
0000000000022e43         db  0x00 ; '.'
0000000000022e44         db  0x00 ; '.'
0000000000022e45         db  0x00 ; '.'
0000000000022e46         db  0x00 ; '.'
0000000000022e47         db  0x00 ; '.'
0000000000022e48         db  0x08 ; '.'
0000000000022e49         db  0x01 ; '.'
0000000000022e4a         db  0x00 ; '.'
0000000000022e4b         db  0x00 ; '.'
0000000000022e4c         db  0x00 ; '.'
0000000000022e4d         db  0x00 ; '.'
0000000000022e4e         db  0x00 ; '.'
0000000000022e4f         db  0x00 ; '.'
0000000000022e50         db  0x2d ; '-'
0000000000022e51         db  0x01 ; '.'
0000000000022e52         db  0x00 ; '.'
0000000000022e53         db  0x00 ; '.'
0000000000022e54         db  0x00 ; '.'
0000000000022e55         db  0x00 ; '.'
0000000000022e56         db  0x00 ; '.'
0000000000022e57         db  0x00 ; '.'
0000000000022e58         db  0x51 ; 'Q'
0000000000022e59         db  0x01 ; '.'
0000000000022e5a         db  0x00 ; '.'
0000000000022e5b         db  0x00 ; '.'
0000000000022e5c         db  0x00 ; '.'
0000000000022e5d         db  0x00 ; '.'
0000000000022e5e         db  0x00 ; '.'
0000000000022e5f         db  0x00 ; '.'
0000000000022e60         db  0x6c ; 'l'
0000000000022e61         db  0x01 ; '.'
0000000000022e62         db  0x00 ; '.'
0000000000022e63         db  0x00 ; '.'
0000000000022e64         db  0x00 ; '.'
0000000000022e65         db  0x00 ; '.'
0000000000022e66         db  0x00 ; '.'
0000000000022e67         db  0x00 ; '.'
0000000000022e68         db  0x00 ; '.'
0000000000022e69         db  0x00 ; '.'
0000000000022e6a         db  0x00 ; '.'
0000000000022e6b         db  0x00 ; '.'
0000000000022e6c         db  0x00 ; '.'
0000000000022e6d         db  0x00 ; '.'
0000000000022e6e         db  0x00 ; '.'
0000000000022e6f         db  0x00 ; '.'
0000000000022e70         db  0x00 ; '.'
0000000000022e71         db  0x00 ; '.'
0000000000022e72         db  0x00 ; '.'
0000000000022e73         db  0x00 ; '.'
0000000000022e74         db  0x00 ; '.'
0000000000022e75         db  0x00 ; '.'
0000000000022e76         db  0x00 ; '.'
0000000000022e77         db  0x00 ; '.'
0000000000022e78         db  0x00 ; '.'
0000000000022e79         db  0x00 ; '.'
0000000000022e7a         db  0x00 ; '.'
0000000000022e7b         db  0x00 ; '.'
0000000000022e7c         db  0x00 ; '.'
0000000000022e7d         db  0x00 ; '.'
0000000000022e7e         db  0x00 ; '.'
0000000000022e7f         db  0x00 ; '.'
                     __re_error_msgid:
0000000000022e80         db         "Success", 0                                ; DATA XREF=rpl_re_compile_pattern+71, rpl_regerror+25
0000000000022e88         db  0x4e ; 'N'
0000000000022e89         db  0x6f ; 'o'
0000000000022e8a         db  0x20 ; ' '
0000000000022e8b         db  0x6d ; 'm'
0000000000022e8c         db  0x61 ; 'a'
0000000000022e8d         db  0x74 ; 't'
0000000000022e8e         db  0x63 ; 'c'
0000000000022e8f         db  0x68 ; 'h'
0000000000022e90         db  0x00 ; '.'
0000000000022e91         db  0x49 ; 'I'
0000000000022e92         db  0x6e ; 'n'
0000000000022e93         db  0x76 ; 'v'
0000000000022e94         db  0x61 ; 'a'
0000000000022e95         db  0x6c ; 'l'
0000000000022e96         db  0x69 ; 'i'
0000000000022e97         db  0x64 ; 'd'
0000000000022e98         db  0x20 ; ' '
0000000000022e99         db  0x72 ; 'r'
0000000000022e9a         db  0x65 ; 'e'
0000000000022e9b         db  0x67 ; 'g'
0000000000022e9c         db  0x75 ; 'u'
0000000000022e9d         db  0x6c ; 'l'
0000000000022e9e         db  0x61 ; 'a'
0000000000022e9f         db  0x72 ; 'r'
0000000000022ea0         db  0x20 ; ' '
0000000000022ea1         db  0x65 ; 'e'
0000000000022ea2         db  0x78 ; 'x'
0000000000022ea3         db  0x70 ; 'p'
0000000000022ea4         db  0x72 ; 'r'
0000000000022ea5         db  0x65 ; 'e'
0000000000022ea6         db  0x73 ; 's'
0000000000022ea7         db  0x73 ; 's'
0000000000022ea8         db  0x69 ; 'i'
0000000000022ea9         db  0x6f ; 'o'
0000000000022eaa         db  0x6e ; 'n'
0000000000022eab         db  0x00 ; '.'
0000000000022eac         db  0x49 ; 'I'
0000000000022ead         db  0x6e ; 'n'
0000000000022eae         db  0x76 ; 'v'
0000000000022eaf         db  0x61 ; 'a'
0000000000022eb0         db  0x6c ; 'l'
0000000000022eb1         db  0x69 ; 'i'
0000000000022eb2         db  0x64 ; 'd'
0000000000022eb3         db  0x20 ; ' '
0000000000022eb4         db  0x63 ; 'c'
0000000000022eb5         db  0x6f ; 'o'
0000000000022eb6         db  0x6c ; 'l'
0000000000022eb7         db  0x6c ; 'l'
0000000000022eb8         db  0x61 ; 'a'
0000000000022eb9         db  0x74 ; 't'
0000000000022eba         db  0x69 ; 'i'
0000000000022ebb         db  0x6f ; 'o'
0000000000022ebc         db  0x6e ; 'n'
0000000000022ebd         db  0x20 ; ' '
0000000000022ebe         db  0x63 ; 'c'
0000000000022ebf         db  0x68 ; 'h'
0000000000022ec0         db  0x61 ; 'a'
0000000000022ec1         db  0x72 ; 'r'
0000000000022ec2         db  0x61 ; 'a'
0000000000022ec3         db  0x63 ; 'c'
0000000000022ec4         db  0x74 ; 't'
0000000000022ec5         db  0x65 ; 'e'
0000000000022ec6         db  0x72 ; 'r'
0000000000022ec7         db  0x00 ; '.'
0000000000022ec8         db  0x49 ; 'I'
0000000000022ec9         db  0x6e ; 'n'
0000000000022eca         db  0x76 ; 'v'
0000000000022ecb         db  0x61 ; 'a'
0000000000022ecc         db  0x6c ; 'l'
0000000000022ecd         db  0x69 ; 'i'
0000000000022ece         db  0x64 ; 'd'
0000000000022ecf         db  0x20 ; ' '
0000000000022ed0         db  0x63 ; 'c'
0000000000022ed1         db  0x68 ; 'h'
0000000000022ed2         db  0x61 ; 'a'
0000000000022ed3         db  0x72 ; 'r'
0000000000022ed4         db  0x61 ; 'a'
0000000000022ed5         db  0x63 ; 'c'
0000000000022ed6         db  0x74 ; 't'
0000000000022ed7         db  0x65 ; 'e'
0000000000022ed8         db  0x72 ; 'r'
0000000000022ed9         db  0x20 ; ' '
0000000000022eda         db  0x63 ; 'c'
0000000000022edb         db  0x6c ; 'l'
0000000000022edc         db  0x61 ; 'a'
0000000000022edd         db  0x73 ; 's'
0000000000022ede         db  0x73 ; 's'
0000000000022edf         db  0x20 ; ' '
0000000000022ee0         db  0x6e ; 'n'
0000000000022ee1         db  0x61 ; 'a'
0000000000022ee2         db  0x6d ; 'm'
0000000000022ee3         db  0x65 ; 'e'
0000000000022ee4         db  0x00 ; '.'
0000000000022ee5         db  0x54 ; 'T'
0000000000022ee6         db  0x72 ; 'r'
0000000000022ee7         db  0x61 ; 'a'
0000000000022ee8         db  0x69 ; 'i'
0000000000022ee9         db  0x6c ; 'l'
0000000000022eea         db  0x69 ; 'i'
0000000000022eeb         db  0x6e ; 'n'
0000000000022eec         db  0x67 ; 'g'
0000000000022eed         db  0x20 ; ' '
0000000000022eee         db  0x62 ; 'b'
0000000000022eef         db  0x61 ; 'a'
0000000000022ef0         db  0x63 ; 'c'
0000000000022ef1         db  0x6b ; 'k'
0000000000022ef2         db  0x73 ; 's'
0000000000022ef3         db  0x6c ; 'l'
0000000000022ef4         db  0x61 ; 'a'
0000000000022ef5         db  0x73 ; 's'
0000000000022ef6         db  0x68 ; 'h'
0000000000022ef7         db  0x00 ; '.'
0000000000022ef8         db  0x49 ; 'I'
0000000000022ef9         db  0x6e ; 'n'
0000000000022efa         db  0x76 ; 'v'
0000000000022efb         db  0x61 ; 'a'
0000000000022efc         db  0x6c ; 'l'
0000000000022efd         db  0x69 ; 'i'
0000000000022efe         db  0x64 ; 'd'
0000000000022eff         db  0x20 ; ' '
0000000000022f00         db  0x62 ; 'b'
0000000000022f01         db  0x61 ; 'a'
0000000000022f02         db  0x63 ; 'c'
0000000000022f03         db  0x6b ; 'k'
0000000000022f04         db  0x20 ; ' '
0000000000022f05         db  0x72 ; 'r'
0000000000022f06         db  0x65 ; 'e'
0000000000022f07         db  0x66 ; 'f'
0000000000022f08         db  0x65 ; 'e'
0000000000022f09         db  0x72 ; 'r'
0000000000022f0a         db  0x65 ; 'e'
0000000000022f0b         db  0x6e ; 'n'
0000000000022f0c         db  0x63 ; 'c'
0000000000022f0d         db  0x65 ; 'e'
0000000000022f0e         db  0x00 ; '.'
0000000000022f0f         db  0x55 ; 'U'
0000000000022f10         db  0x6e ; 'n'
0000000000022f11         db  0x6d ; 'm'
0000000000022f12         db  0x61 ; 'a'
0000000000022f13         db  0x74 ; 't'
0000000000022f14         db  0x63 ; 'c'
0000000000022f15         db  0x68 ; 'h'
0000000000022f16         db  0x65 ; 'e'
0000000000022f17         db  0x64 ; 'd'
0000000000022f18         db  0x20 ; ' '
0000000000022f19         db  0x5b ; '['
0000000000022f1a         db  0x2c ; ','
0000000000022f1b         db  0x20 ; ' '
0000000000022f1c         db  0x5b ; '['
0000000000022f1d         db  0x5e ; '^'
0000000000022f1e         db  0x2c ; ','
0000000000022f1f         db  0x20 ; ' '
0000000000022f20         db  0x5b ; '['
0000000000022f21         db  0x3a ; ':'
0000000000022f22         db  0x2c ; ','
0000000000022f23         db  0x20 ; ' '
0000000000022f24         db  0x5b ; '['
0000000000022f25         db  0x2e ; '.'
0000000000022f26         db  0x2c ; ','
0000000000022f27         db  0x20 ; ' '
0000000000022f28         db  0x6f ; 'o'
0000000000022f29         db  0x72 ; 'r'
0000000000022f2a         db  0x20 ; ' '
0000000000022f2b         db  0x5b ; '['
0000000000022f2c         db  0x3d ; '='
0000000000022f2d         db  0x00 ; '.'
0000000000022f2e         db  0x55 ; 'U'
0000000000022f2f         db  0x6e ; 'n'
0000000000022f30         db  0x6d ; 'm'
0000000000022f31         db  0x61 ; 'a'
0000000000022f32         db  0x74 ; 't'
0000000000022f33         db  0x63 ; 'c'
0000000000022f34         db  0x68 ; 'h'
0000000000022f35         db  0x65 ; 'e'
0000000000022f36         db  0x64 ; 'd'
0000000000022f37         db  0x20 ; ' '
0000000000022f38         db  0x28 ; '('
0000000000022f39         db  0x20 ; ' '
0000000000022f3a         db  0x6f ; 'o'
0000000000022f3b         db  0x72 ; 'r'
0000000000022f3c         db  0x20 ; ' '
0000000000022f3d         db  0x5c ; '\'
0000000000022f3e         db  0x28 ; '('
0000000000022f3f         db  0x00 ; '.'
0000000000022f40         db  0x55 ; 'U'
0000000000022f41         db  0x6e ; 'n'
0000000000022f42         db  0x6d ; 'm'
0000000000022f43         db  0x61 ; 'a'
0000000000022f44         db  0x74 ; 't'
0000000000022f45         db  0x63 ; 'c'
0000000000022f46         db  0x68 ; 'h'
0000000000022f47         db  0x65 ; 'e'
0000000000022f48         db  0x64 ; 'd'
0000000000022f49         db  0x20 ; ' '
0000000000022f4a         db  0x5c ; '\'
0000000000022f4b         db  0x7b ; '{'
0000000000022f4c         db  0x00 ; '.'
0000000000022f4d         db  0x49 ; 'I'
0000000000022f4e         db  0x6e ; 'n'
0000000000022f4f         db  0x76 ; 'v'
0000000000022f50         db  0x61 ; 'a'
0000000000022f51         db  0x6c ; 'l'
0000000000022f52         db  0x69 ; 'i'
0000000000022f53         db  0x64 ; 'd'
0000000000022f54         db  0x20 ; ' '
0000000000022f55         db  0x63 ; 'c'
0000000000022f56         db  0x6f ; 'o'
0000000000022f57         db  0x6e ; 'n'
0000000000022f58         db  0x74 ; 't'
0000000000022f59         db  0x65 ; 'e'
0000000000022f5a         db  0x6e ; 'n'
0000000000022f5b         db  0x74 ; 't'
0000000000022f5c         db  0x20 ; ' '
0000000000022f5d         db  0x6f ; 'o'
0000000000022f5e         db  0x66 ; 'f'
0000000000022f5f         db  0x20 ; ' '
0000000000022f60         db  0x5c ; '\'
0000000000022f61         db  0x7b ; '{'
0000000000022f62         db  0x5c ; '\'
0000000000022f63         db  0x7d ; '}'
0000000000022f64         db  0x00 ; '.'
0000000000022f65         db  0x49 ; 'I'
0000000000022f66         db  0x6e ; 'n'
0000000000022f67         db  0x76 ; 'v'
0000000000022f68         db  0x61 ; 'a'
0000000000022f69         db  0x6c ; 'l'
0000000000022f6a         db  0x69 ; 'i'
0000000000022f6b         db  0x64 ; 'd'
0000000000022f6c         db  0x20 ; ' '
0000000000022f6d         db  0x72 ; 'r'
0000000000022f6e         db  0x61 ; 'a'
0000000000022f6f         db  0x6e ; 'n'
0000000000022f70         db  0x67 ; 'g'
0000000000022f71         db  0x65 ; 'e'
0000000000022f72         db  0x20 ; ' '
0000000000022f73         db  0x65 ; 'e'
0000000000022f74         db  0x6e ; 'n'
0000000000022f75         db  0x64 ; 'd'
0000000000022f76         db  0x00 ; '.'
0000000000022f77         db  0x4d ; 'M'
0000000000022f78         db  0x65 ; 'e'
0000000000022f79         db  0x6d ; 'm'
0000000000022f7a         db  0x6f ; 'o'
0000000000022f7b         db  0x72 ; 'r'
0000000000022f7c         db  0x79 ; 'y'
0000000000022f7d         db  0x20 ; ' '
0000000000022f7e         db  0x65 ; 'e'
0000000000022f7f         db  0x78 ; 'x'
0000000000022f80         db  0x68 ; 'h'
0000000000022f81         db  0x61 ; 'a'
0000000000022f82         db  0x75 ; 'u'
0000000000022f83         db  0x73 ; 's'
0000000000022f84         db  0x74 ; 't'
0000000000022f85         db  0x65 ; 'e'
0000000000022f86         db  0x64 ; 'd'
0000000000022f87         db  0x00 ; '.'
0000000000022f88         db  0x49 ; 'I'
0000000000022f89         db  0x6e ; 'n'
0000000000022f8a         db  0x76 ; 'v'
0000000000022f8b         db  0x61 ; 'a'
0000000000022f8c         db  0x6c ; 'l'
0000000000022f8d         db  0x69 ; 'i'
0000000000022f8e         db  0x64 ; 'd'
0000000000022f8f         db  0x20 ; ' '
0000000000022f90         db  0x70 ; 'p'
0000000000022f91         db  0x72 ; 'r'
0000000000022f92         db  0x65 ; 'e'
0000000000022f93         db  0x63 ; 'c'
0000000000022f94         db  0x65 ; 'e'
0000000000022f95         db  0x64 ; 'd'
0000000000022f96         db  0x69 ; 'i'
0000000000022f97         db  0x6e ; 'n'
0000000000022f98         db  0x67 ; 'g'
0000000000022f99         db  0x20 ; ' '
0000000000022f9a         db  0x72 ; 'r'
0000000000022f9b         db  0x65 ; 'e'
0000000000022f9c         db  0x67 ; 'g'
0000000000022f9d         db  0x75 ; 'u'
0000000000022f9e         db  0x6c ; 'l'
0000000000022f9f         db  0x61 ; 'a'
0000000000022fa0         db  0x72 ; 'r'
0000000000022fa1         db  0x20 ; ' '
0000000000022fa2         db  0x65 ; 'e'
0000000000022fa3         db  0x78 ; 'x'
0000000000022fa4         db  0x70 ; 'p'
0000000000022fa5         db  0x72 ; 'r'
0000000000022fa6         db  0x65 ; 'e'
0000000000022fa7         db  0x73 ; 's'
0000000000022fa8         db  0x73 ; 's'
0000000000022fa9         db  0x69 ; 'i'
0000000000022faa         db  0x6f ; 'o'
0000000000022fab         db  0x6e ; 'n'
0000000000022fac         db  0x00 ; '.'
0000000000022fad         db  0x50 ; 'P'
0000000000022fae         db  0x72 ; 'r'
0000000000022faf         db  0x65 ; 'e'
0000000000022fb0         db  0x6d ; 'm'
0000000000022fb1         db  0x61 ; 'a'
0000000000022fb2         db  0x74 ; 't'
0000000000022fb3         db  0x75 ; 'u'
0000000000022fb4         db  0x72 ; 'r'
0000000000022fb5         db  0x65 ; 'e'
0000000000022fb6         db  0x20 ; ' '
0000000000022fb7         db  0x65 ; 'e'
0000000000022fb8         db  0x6e ; 'n'
0000000000022fb9         db  0x64 ; 'd'
0000000000022fba         db  0x20 ; ' '
0000000000022fbb         db  0x6f ; 'o'
0000000000022fbc         db  0x66 ; 'f'
0000000000022fbd         db  0x20 ; ' '
0000000000022fbe         db  0x72 ; 'r'
0000000000022fbf         db  0x65 ; 'e'
0000000000022fc0         db  0x67 ; 'g'
0000000000022fc1         db  0x75 ; 'u'
0000000000022fc2         db  0x6c ; 'l'
0000000000022fc3         db  0x61 ; 'a'
0000000000022fc4         db  0x72 ; 'r'
0000000000022fc5         db  0x20 ; ' '
0000000000022fc6         db  0x65 ; 'e'
0000000000022fc7         db  0x78 ; 'x'
0000000000022fc8         db  0x70 ; 'p'
0000000000022fc9         db  0x72 ; 'r'
0000000000022fca         db  0x65 ; 'e'
0000000000022fcb         db  0x73 ; 's'
0000000000022fcc         db  0x73 ; 's'
0000000000022fcd         db  0x69 ; 'i'
0000000000022fce         db  0x6f ; 'o'
0000000000022fcf         db  0x6e ; 'n'
0000000000022fd0         db  0x00 ; '.'
0000000000022fd1         db  0x52 ; 'R'
0000000000022fd2         db  0x65 ; 'e'
0000000000022fd3         db  0x67 ; 'g'
0000000000022fd4         db  0x75 ; 'u'
0000000000022fd5         db  0x6c ; 'l'
0000000000022fd6         db  0x61 ; 'a'
0000000000022fd7         db  0x72 ; 'r'
0000000000022fd8         db  0x20 ; ' '
0000000000022fd9         db  0x65 ; 'e'
0000000000022fda         db  0x78 ; 'x'
0000000000022fdb         db  0x70 ; 'p'
0000000000022fdc         db  0x72 ; 'r'
0000000000022fdd         db  0x65 ; 'e'
0000000000022fde         db  0x73 ; 's'
0000000000022fdf         db  0x73 ; 's'
0000000000022fe0         db  0x69 ; 'i'
0000000000022fe1         db  0x6f ; 'o'
0000000000022fe2         db  0x6e ; 'n'
0000000000022fe3         db  0x20 ; ' '
0000000000022fe4         db  0x74 ; 't'
0000000000022fe5         db  0x6f ; 'o'
0000000000022fe6         db  0x6f ; 'o'
0000000000022fe7         db  0x20 ; ' '
0000000000022fe8         db  0x62 ; 'b'
0000000000022fe9         db  0x69 ; 'i'
0000000000022fea         db  0x67 ; 'g'
0000000000022feb         db  0x00 ; '.'
0000000000022fec         db  0x55 ; 'U'
0000000000022fed         db  0x6e ; 'n'
0000000000022fee         db  0x6d ; 'm'
0000000000022fef         db  0x61 ; 'a'
0000000000022ff0         db  0x74 ; 't'
0000000000022ff1         db  0x63 ; 'c'
0000000000022ff2         db  0x68 ; 'h'
0000000000022ff3         db  0x65 ; 'e'
0000000000022ff4         db  0x64 ; 'd'
0000000000022ff5         db  0x20 ; ' '
0000000000022ff6         db  0x29 ; ')'
0000000000022ff7         db  0x20 ; ' '
0000000000022ff8         db  0x6f ; 'o'
0000000000022ff9         db  0x72 ; 'r'
0000000000022ffa         db  0x20 ; ' '
0000000000022ffb         db  0x5c ; '\'
0000000000022ffc         db  0x29 ; ')'
0000000000022ffd         db  0x00 ; '.'
0000000000022ffe         db  0x00 ; '.'
0000000000022fff         db  0x00 ; '.'
0000000000023000         dq         2 dup (7.7486e-304)                         ; DATA XREF=re_compile_fastmap_iter.isra.30+1044, re_compile_fastmap_iter.isra.30+1204
                     aCoreutils831li_23010:        // aCoreutils831li
0000000000023010         db         "../coreutils-8.31/lib/cycle-check.c", 0    ; DATA XREF=cycle_check+110
0000000000023034         align      8
                     aStatemagic9827:
0000000000023038         db         "state->magic == 9827862", 0                ; DATA XREF=cycle_check+117
                     __PRETTY_FUNCTION__.3994:
0000000000023050         db         "cycle_check", 0                            ; DATA XREF=cycle_check+103
000000000002305c         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000002305d         db  0x00 ; '.'
                     aPosix:
000000000002305e         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
0000000000023064         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000002306a         db  0x00 ; '.'
000000000002306b         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x2306c; 0x239f8[ (2444 bytes)
        ; File offset : [143468; 145912[ (2444 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000002306c         db  0x01 ; '.'
000000000002306d         db  0x1b ; '.'
000000000002306e         db  0x03 ; '.'
000000000002306f         db  0x3b ; ';'
0000000000023070         db  0x88 ; '.'
0000000000023071         db  0x09 ; '.'
0000000000023072         db  0x00 ; '.'
0000000000023073         db  0x00 ; '.'
0000000000023074         db  0x30 ; '0'
0000000000023075         db  0x01 ; '.'
0000000000023076         db  0x00 ; '.'
0000000000023077         db  0x00 ; '.'
0000000000023078         db  0x44 ; 'D'
0000000000023079         db  0xf3 ; '.'
000000000002307a         db  0xfd ; '.'
000000000002307b         db  0xff ; '.'
000000000002307c         db  0xd4 ; '.'
000000000002307d         db  0x09 ; '.'
000000000002307e         db  0x00 ; '.'
000000000002307f         db  0x00 ; '.'
0000000000023080         db  0xa4 ; '.'
0000000000023081         db  0xf9 ; '.'
0000000000023082         db  0xfd ; '.'
0000000000023083         db  0xff ; '.'
0000000000023084         db  0xfc ; '.'
0000000000023085         db  0x09 ; '.'
0000000000023086         db  0x00 ; '.'
0000000000023087         db  0x00 ; '.'
0000000000023088         db  0xb4 ; '.'
0000000000023089         db  0xf9 ; '.'
000000000002308a         db  0xfd ; '.'
000000000002308b         db  0xff ; '.'
000000000002308c         db  0x3c ; '<'
000000000002308d         db  0x1a ; '.'
000000000002308e         db  0x00 ; '.'
000000000002308f         db  0x00 ; '.'
0000000000023090         db  0xe4 ; '.'
0000000000023091         db  0xf9 ; '.'
0000000000023092         db  0xfd ; '.'
0000000000023093         db  0xff ; '.'
0000000000023094         db  0xa0 ; '.'
0000000000023095         db  0x0a ; '.'
0000000000023096         db  0x00 ; '.'
0000000000023097         db  0x00 ; '.'
0000000000023098         db  0xd4 ; '.'
0000000000023099         db  0x0e ; '.'
000000000002309a         db  0xfe ; '.'
000000000002309b         db  0xff ; '.'
000000000002309c         db  0xa4 ; '.'
000000000002309d         db  0x09 ; '.'
000000000002309e         db  0x00 ; '.'
000000000002309f         db  0x00 ; '.'
00000000000230a0         db  0xe4 ; '.'
00000000000230a1         db  0x0f ; '.'
00000000000230a2         db  0xfe ; '.'
00000000000230a3         db  0xff ; '.'
00000000000230a4         db  0x14 ; '.'
00000000000230a5         db  0x0a ; '.'
00000000000230a6         db  0x00 ; '.'
00000000000230a7         db  0x00 ; '.'
00000000000230a8         db  0x74 ; 't'
00000000000230a9         db  0x10 ; '.'
00000000000230aa         db  0xfe ; '.'
00000000000230ab         db  0xff ; '.'
00000000000230ac         db  0x38 ; '8'
00000000000230ad         db  0x0a ; '.'
00000000000230ae         db  0x00 ; '.'
00000000000230af         db  0x00 ; '.'
00000000000230b0         db  0xd4 ; '.'
00000000000230b1         db  0x11 ; '.'
00000000000230b2         db  0xfe ; '.'
00000000000230b3         db  0xff ; '.'
00000000000230b4         db  0x74 ; 't'
00000000000230b5         db  0x0a ; '.'
00000000000230b6         db  0x00 ; '.'
00000000000230b7         db  0x00 ; '.'
00000000000230b8         db  0x94 ; '.'
00000000000230b9         db  0x16 ; '.'
00000000000230ba         db  0xfe ; '.'
00000000000230bb         db  0xff ; '.'
00000000000230bc         db  0x04 ; '.'
00000000000230bd         db  0x0b ; '.'
00000000000230be         db  0x00 ; '.'
00000000000230bf         db  0x00 ; '.'
00000000000230c0         db  0xa4 ; '.'
00000000000230c1         db  0x16 ; '.'
00000000000230c2         db  0xfe ; '.'
00000000000230c3         db  0xff ; '.'
00000000000230c4         db  0x18 ; '.'
00000000000230c5         db  0x0b ; '.'
00000000000230c6         db  0x00 ; '.'
00000000000230c7         db  0x00 ; '.'
00000000000230c8         db  0xc4 ; '.'
00000000000230c9         db  0x17 ; '.'
00000000000230ca         db  0xfe ; '.'
00000000000230cb         db  0xff ; '.'
00000000000230cc         db  0x64 ; 'd'
00000000000230cd         db  0x0b ; '.'
00000000000230ce         db  0x00 ; '.'
00000000000230cf         db  0x00 ; '.'
00000000000230d0         db  0x44 ; 'D'
00000000000230d1         db  0x18 ; '.'
00000000000230d2         db  0xfe ; '.'
00000000000230d3         db  0xff ; '.'
00000000000230d4         db  0x90 ; '.'
00000000000230d5         db  0x0b ; '.'
00000000000230d6         db  0x00 ; '.'
00000000000230d7         db  0x00 ; '.'
00000000000230d8         db  0x64 ; 'd'
00000000000230d9         db  0x19 ; '.'
00000000000230da         db  0xfe ; '.'
00000000000230db         db  0xff ; '.'
00000000000230dc         db  0xf0 ; '.'
00000000000230dd         db  0x0b ; '.'
00000000000230de         db  0x00 ; '.'
00000000000230df         db  0x00 ; '.'
00000000000230e0         db  0xd4 ; '.'
00000000000230e1         db  0x19 ; '.'
00000000000230e2         db  0xfe ; '.'
00000000000230e3         db  0xff ; '.'
00000000000230e4         db  0x3c ; '<'
00000000000230e5         db  0x0c ; '.'
00000000000230e6         db  0x00 ; '.'
00000000000230e7         db  0x00 ; '.'
00000000000230e8         db  0x24 ; '$'
00000000000230e9         db  0x1a ; '.'
00000000000230ea         db  0xfe ; '.'
00000000000230eb         db  0xff ; '.'
00000000000230ec         db  0x7c ; '|'
00000000000230ed         db  0x0c ; '.'
00000000000230ee         db  0x00 ; '.'
00000000000230ef         db  0x00 ; '.'
00000000000230f0         db  0x54 ; 'T'
00000000000230f1         db  0x1a ; '.'
00000000000230f2         db  0xfe ; '.'
00000000000230f3         db  0xff ; '.'
00000000000230f4         db  0x98 ; '.'
00000000000230f5         db  0x0c ; '.'
00000000000230f6         db  0x00 ; '.'
00000000000230f7         db  0x00 ; '.'
00000000000230f8         db  0x94 ; '.'
00000000000230f9         db  0x1a ; '.'
00000000000230fa         db  0xfe ; '.'
00000000000230fb         db  0xff ; '.'
00000000000230fc         db  0xb4 ; '.'
00000000000230fd         db  0x0c ; '.'
00000000000230fe         db  0x00 ; '.'
00000000000230ff         db  0x00 ; '.'
0000000000023100         db  0x24 ; '$'
0000000000023101         db  0x1b ; '.'
0000000000023102         db  0xfe ; '.'
0000000000023103         db  0xff ; '.'
0000000000023104         db  0xe8 ; '.'
0000000000023105         db  0x0c ; '.'
0000000000023106         db  0x00 ; '.'
0000000000023107         db  0x00 ; '.'
0000000000023108         db  0x44 ; 'D'
0000000000023109         db  0x1b ; '.'
000000000002310a         db  0xfe ; '.'
000000000002310b         db  0xff ; '.'
000000000002310c         db  0xfc ; '.'
000000000002310d         db  0x0c ; '.'
000000000002310e         db  0x00 ; '.'
000000000002310f         db  0x00 ; '.'
0000000000023110         db  0x64 ; 'd'
0000000000023111         db  0x1b ; '.'
0000000000023112         db  0xfe ; '.'
0000000000023113         db  0xff ; '.'
0000000000023114         db  0x1c ; '.'
0000000000023115         db  0x0d ; '.'
0000000000023116         db  0x00 ; '.'
0000000000023117         db  0x00 ; '.'
0000000000023118         db  0x74 ; 't'
0000000000023119         db  0x1b ; '.'
000000000002311a         db  0xfe ; '.'
000000000002311b         db  0xff ; '.'
000000000002311c         db  0x30 ; '0'
000000000002311d         db  0x0d ; '.'
000000000002311e         db  0x00 ; '.'
000000000002311f         db  0x00 ; '.'
0000000000023120         db  0x84 ; '.'
0000000000023121         db  0x1b ; '.'
0000000000023122         db  0xfe ; '.'
0000000000023123         db  0xff ; '.'
0000000000023124         db  0x44 ; 'D'
0000000000023125         db  0x0d ; '.'
0000000000023126         db  0x00 ; '.'
0000000000023127         db  0x00 ; '.'
0000000000023128         db  0x34 ; '4'
0000000000023129         db  0x1c ; '.'
000000000002312a         db  0xfe ; '.'
000000000002312b         db  0xff ; '.'
000000000002312c         db  0x74 ; 't'
000000000002312d         db  0x0d ; '.'
000000000002312e         db  0x00 ; '.'
000000000002312f         db  0x00 ; '.'
0000000000023130         db  0x44 ; 'D'
0000000000023131         db  0x1c ; '.'
0000000000023132         db  0xfe ; '.'
0000000000023133         db  0xff ; '.'
0000000000023134         db  0x88 ; '.'
0000000000023135         db  0x0d ; '.'
0000000000023136         db  0x00 ; '.'
0000000000023137         db  0x00 ; '.'
0000000000023138         db  0x54 ; 'T'
0000000000023139         db  0x1c ; '.'
000000000002313a         db  0xfe ; '.'
000000000002313b         db  0xff ; '.'
000000000002313c         db  0x9c ; '.'
000000000002313d         db  0x0d ; '.'
000000000002313e         db  0x00 ; '.'
000000000002313f         db  0x00 ; '.'
0000000000023140         db  0x64 ; 'd'
0000000000023141         db  0x1c ; '.'
0000000000023142         db  0xfe ; '.'
0000000000023143         db  0xff ; '.'
0000000000023144         db  0xb0 ; '.'
0000000000023145         db  0x0d ; '.'
0000000000023146         db  0x00 ; '.'
0000000000023147         db  0x00 ; '.'
0000000000023148         db  0x84 ; '.'
0000000000023149         db  0x1c ; '.'
000000000002314a         db  0xfe ; '.'
000000000002314b         db  0xff ; '.'
000000000002314c         db  0xcc ; '.'
000000000002314d         db  0x0d ; '.'
000000000002314e         db  0x00 ; '.'
000000000002314f         db  0x00 ; '.'
0000000000023150         db  0x44 ; 'D'
0000000000023151         db  0x1d ; '.'
0000000000023152         db  0xfe ; '.'
0000000000023153         db  0xff ; '.'
0000000000023154         db  0x1c ; '.'
0000000000023155         db  0x0e ; '.'
0000000000023156         db  0x00 ; '.'
0000000000023157         db  0x00 ; '.'
0000000000023158         db  0xb4 ; '.'
0000000000023159         db  0x1d ; '.'
000000000002315a         db  0xfe ; '.'
000000000002315b         db  0xff ; '.'
000000000002315c         db  0x48 ; 'H'
000000000002315d         db  0x0e ; '.'
000000000002315e         db  0x00 ; '.'
000000000002315f         db  0x00 ; '.'
0000000000023160         db  0x24 ; '$'
0000000000023161         db  0x1e ; '.'
0000000000023162         db  0xfe ; '.'
0000000000023163         db  0xff ; '.'
0000000000023164         db  0x68 ; 'h'
0000000000023165         db  0x0e ; '.'
0000000000023166         db  0x00 ; '.'
0000000000023167         db  0x00 ; '.'
0000000000023168         db  0x54 ; 'T'
0000000000023169         db  0x1e ; '.'
000000000002316a         db  0xfe ; '.'
000000000002316b         db  0xff ; '.'
000000000002316c         db  0x84 ; '.'
000000000002316d         db  0x0e ; '.'
000000000002316e         db  0x00 ; '.'
000000000002316f         db  0x00 ; '.'
0000000000023170         db  0xb4 ; '.'
0000000000023171         db  0x1e ; '.'
0000000000023172         db  0xfe ; '.'
0000000000023173         db  0xff ; '.'
0000000000023174         db  0xbc ; '.'
0000000000023175         db  0x0e ; '.'
0000000000023176         db  0x00 ; '.'
0000000000023177         db  0x00 ; '.'
0000000000023178         db  0x14 ; '.'
0000000000023179         db  0x1f ; '.'
000000000002317a         db  0xfe ; '.'
000000000002317b         db  0xff ; '.'
000000000002317c         db  0xec ; '.'
000000000002317d         db  0x0e ; '.'
000000000002317e         db  0x00 ; '.'
000000000002317f         db  0x00 ; '.'
0000000000023180         db  0x24 ; '$'
0000000000023181         db  0x1f ; '.'
0000000000023182         db  0xfe ; '.'
0000000000023183         db  0xff ; '.'
0000000000023184         db  0x00 ; '.'
0000000000023185         db  0x0f ; '.'
0000000000023186         db  0x00 ; '.'
0000000000023187         db  0x00 ; '.'
0000000000023188         db  0x34 ; '4'
0000000000023189         db  0x1f ; '.'
000000000002318a         db  0xfe ; '.'
000000000002318b         db  0xff ; '.'
000000000002318c         db  0x14 ; '.'
000000000002318d         db  0x0f ; '.'
000000000002318e         db  0x00 ; '.'
000000000002318f         db  0x00 ; '.'
0000000000023190         db  0x54 ; 'T'
0000000000023191         db  0x1f ; '.'
0000000000023192         db  0xfe ; '.'
0000000000023193         db  0xff ; '.'
0000000000023194         db  0x2c ; ','
0000000000023195         db  0x0f ; '.'
0000000000023196         db  0x00 ; '.'
0000000000023197         db  0x00 ; '.'
0000000000023198         db  0x74 ; 't'
0000000000023199         db  0x1f ; '.'
000000000002319a         db  0xfe ; '.'
000000000002319b         db  0xff ; '.'
000000000002319c         db  0x44 ; 'D'
000000000002319d         db  0x0f ; '.'
000000000002319e         db  0x00 ; '.'
000000000002319f         db  0x00 ; '.'
00000000000231a0         db  0x84 ; '.'
00000000000231a1         db  0x1f ; '.'
00000000000231a2         db  0xfe ; '.'
00000000000231a3         db  0xff ; '.'
00000000000231a4         db  0x58 ; 'X'
00000000000231a5         db  0x0f ; '.'
00000000000231a6         db  0x00 ; '.'
00000000000231a7         db  0x00 ; '.'
00000000000231a8         db  0x54 ; 'T'
00000000000231a9         db  0x20 ; ' '
00000000000231aa         db  0xfe ; '.'
00000000000231ab         db  0xff ; '.'
00000000000231ac         db  0xa4 ; '.'
00000000000231ad         db  0x0f ; '.'
00000000000231ae         db  0x00 ; '.'
00000000000231af         db  0x00 ; '.'
00000000000231b0         db  0xe4 ; '.'
00000000000231b1         db  0x22 ; '"'
00000000000231b2         db  0xfe ; '.'
00000000000231b3         db  0xff ; '.'
00000000000231b4         db  0xf4 ; '.'
00000000000231b5         db  0x0f ; '.'
00000000000231b6         db  0x00 ; '.'
00000000000231b7         db  0x00 ; '.'
00000000000231b8         db  0x14 ; '.'
00000000000231b9         db  0x23 ; '#'
00000000000231ba         db  0xfe ; '.'
00000000000231bb         db  0xff ; '.'
00000000000231bc         db  0x1c ; '.'
00000000000231bd         db  0x10 ; '.'
00000000000231be         db  0x00 ; '.'
00000000000231bf         db  0x00 ; '.'
00000000000231c0         db  0xa4 ; '.'
00000000000231c1         db  0x23 ; '#'
00000000000231c2         db  0xfe ; '.'
00000000000231c3         db  0xff ; '.'
00000000000231c4         db  0x30 ; '0'
00000000000231c5         db  0x10 ; '.'
00000000000231c6         db  0x00 ; '.'
00000000000231c7         db  0x00 ; '.'
00000000000231c8         db  0xb4 ; '.'
00000000000231c9         db  0x23 ; '#'
00000000000231ca         db  0xfe ; '.'
00000000000231cb         db  0xff ; '.'
00000000000231cc         db  0x44 ; 'D'
00000000000231cd         db  0x10 ; '.'
00000000000231ce         db  0x00 ; '.'
00000000000231cf         db  0x00 ; '.'
00000000000231d0         db  0xa4 ; '.'
00000000000231d1         db  0x24 ; '$'
00000000000231d2         db  0xfe ; '.'
00000000000231d3         db  0xff ; '.'
00000000000231d4         db  0x84 ; '.'
00000000000231d5         db  0x10 ; '.'
00000000000231d6         db  0x00 ; '.'
00000000000231d7         db  0x00 ; '.'
00000000000231d8         db  0x74 ; 't'
00000000000231d9         db  0x25 ; '%'
00000000000231da         db  0xfe ; '.'
00000000000231db         db  0xff ; '.'
00000000000231dc         db  0xd4 ; '.'
00000000000231dd         db  0x10 ; '.'
00000000000231de         db  0x00 ; '.'
00000000000231df         db  0x00 ; '.'
00000000000231e0         db  0x14 ; '.'
00000000000231e1         db  0x27 ; '''
00000000000231e2         db  0xfe ; '.'
00000000000231e3         db  0xff ; '.'
00000000000231e4         db  0x20 ; ' '
00000000000231e5         db  0x11 ; '.'
00000000000231e6         db  0x00 ; '.'
00000000000231e7         db  0x00 ; '.'
00000000000231e8         db  0x84 ; '.'
00000000000231e9         db  0x2a ; '*'
00000000000231ea         db  0xfe ; '.'
00000000000231eb         db  0xff ; '.'
00000000000231ec         db  0xa0 ; '.'
00000000000231ed         db  0x11 ; '.'
00000000000231ee         db  0x00 ; '.'
00000000000231ef         db  0x00 ; '.'
00000000000231f0         db  0xa4 ; '.'
00000000000231f1         db  0x2c ; ','
00000000000231f2         db  0xfe ; '.'
00000000000231f3         db  0xff ; '.'
00000000000231f4         db  0xf0 ; '.'
00000000000231f5         db  0x11 ; '.'
00000000000231f6         db  0x00 ; '.'
00000000000231f7         db  0x00 ; '.'
00000000000231f8         db  0x54 ; 'T'
00000000000231f9         db  0x2d ; '-'
00000000000231fa         db  0xfe ; '.'
00000000000231fb         db  0xff ; '.'
00000000000231fc         db  0x34 ; '4'
00000000000231fd         db  0x12 ; '.'
00000000000231fe         db  0x00 ; '.'
00000000000231ff         db  0x00 ; '.'
0000000000023200         db  0xb4 ; '.'
0000000000023201         db  0x2d ; '-'
0000000000023202         db  0xfe ; '.'
0000000000023203         db  0xff ; '.'
0000000000023204         db  0x70 ; 'p'
0000000000023205         db  0x12 ; '.'
0000000000023206         db  0x00 ; '.'
0000000000023207         db  0x00 ; '.'
0000000000023208         db  0x14 ; '.'
0000000000023209         db  0x2e ; '.'
000000000002320a         db  0xfe ; '.'
000000000002320b         db  0xff ; '.'
000000000002320c         db  0xac ; '.'
000000000002320d         db  0x12 ; '.'
000000000002320e         db  0x00 ; '.'
000000000002320f         db  0x00 ; '.'
0000000000023210         db  0x34 ; '4'
0000000000023211         db  0x4a ; 'J'
0000000000023212         db  0xfe ; '.'
0000000000023213         db  0xff ; '.'
0000000000023214         db  0x24 ; '$'
0000000000023215         db  0x13 ; '.'
0000000000023216         db  0x00 ; '.'
0000000000023217         db  0x00 ; '.'
0000000000023218         db  0x84 ; '.'
0000000000023219         db  0x4a ; 'J'
000000000002321a         db  0xfe ; '.'
000000000002321b         db  0xff ; '.'
000000000002321c         db  0x4c ; 'L'
000000000002321d         db  0x13 ; '.'
000000000002321e         db  0x00 ; '.'
000000000002321f         db  0x00 ; '.'
0000000000023220         db  0xd4 ; '.'
0000000000023221         db  0x4a ; 'J'
0000000000023222         db  0xfe ; '.'
0000000000023223         db  0xff ; '.'
0000000000023224         db  0x74 ; 't'
0000000000023225         db  0x13 ; '.'
0000000000023226         db  0x00 ; '.'
0000000000023227         db  0x00 ; '.'
0000000000023228         db  0x84 ; '.'
0000000000023229         db  0x4c ; 'L'
000000000002322a         db  0xfe ; '.'
000000000002322b         db  0xff ; '.'
000000000002322c         db  0xc4 ; '.'
000000000002322d         db  0x13 ; '.'
000000000002322e         db  0x00 ; '.'
000000000002322f         db  0x00 ; '.'
0000000000023230         db  0x24 ; '$'
0000000000023231         db  0x4d ; 'M'
0000000000023232         db  0xfe ; '.'
0000000000023233         db  0xff ; '.'
0000000000023234         db  0xd8 ; '.'
0000000000023235         db  0x13 ; '.'
0000000000023236         db  0x00 ; '.'
0000000000023237         db  0x00 ; '.'
0000000000023238         db  0x34 ; '4'
0000000000023239         db  0x4d ; 'M'
000000000002323a         db  0xfe ; '.'
000000000002323b         db  0xff ; '.'
000000000002323c         db  0xec ; '.'
000000000002323d         db  0x13 ; '.'
000000000002323e         db  0x00 ; '.'
000000000002323f         db  0x00 ; '.'
0000000000023240         db  0x44 ; 'D'
0000000000023241         db  0x4d ; 'M'
0000000000023242         db  0xfe ; '.'
0000000000023243         db  0xff ; '.'
0000000000023244         db  0x00 ; '.'
0000000000023245         db  0x14 ; '.'
0000000000023246         db  0x00 ; '.'
0000000000023247         db  0x00 ; '.'
0000000000023248         db  0x74 ; 't'
0000000000023249         db  0x4d ; 'M'
000000000002324a         db  0xfe ; '.'
000000000002324b         db  0xff ; '.'
000000000002324c         db  0x1c ; '.'
000000000002324d         db  0x14 ; '.'
000000000002324e         db  0x00 ; '.'
000000000002324f         db  0x00 ; '.'
0000000000023250         db  0x94 ; '.'
0000000000023251         db  0x4e ; 'N'
0000000000023252         db  0xfe ; '.'
0000000000023253         db  0xff ; '.'
0000000000023254         db  0x7c ; '|'
0000000000023255         db  0x14 ; '.'
0000000000023256         db  0x00 ; '.'
0000000000023257         db  0x00 ; '.'
0000000000023258         db  0x14 ; '.'
0000000000023259         db  0x4f ; 'O'
000000000002325a         db  0xfe ; '.'
000000000002325b         db  0xff ; '.'
000000000002325c         db  0x90 ; '.'
000000000002325d         db  0x14 ; '.'
000000000002325e         db  0x00 ; '.'
000000000002325f         db  0x00 ; '.'
0000000000023260         db  0x54 ; 'T'
0000000000023261         db  0x50 ; 'P'
0000000000023262         db  0xfe ; '.'
0000000000023263         db  0xff ; '.'
0000000000023264         db  0xf0 ; '.'
0000000000023265         db  0x14 ; '.'
0000000000023266         db  0x00 ; '.'
0000000000023267         db  0x00 ; '.'
0000000000023268         db  0x64 ; 'd'
0000000000023269         db  0x50 ; 'P'
000000000002326a         db  0xfe ; '.'
000000000002326b         db  0xff ; '.'
000000000002326c         db  0x04 ; '.'
000000000002326d         db  0x15 ; '.'
000000000002326e         db  0x00 ; '.'
000000000002326f         db  0x00 ; '.'
0000000000023270         db  0x74 ; 't'
0000000000023271         db  0x50 ; 'P'
0000000000023272         db  0xfe ; '.'
0000000000023273         db  0xff ; '.'
0000000000023274         db  0x18 ; '.'
0000000000023275         db  0x15 ; '.'
0000000000023276         db  0x00 ; '.'
0000000000023277         db  0x00 ; '.'
0000000000023278         db  0x84 ; '.'
0000000000023279         db  0x50 ; 'P'
000000000002327a         db  0xfe ; '.'
000000000002327b         db  0xff ; '.'
000000000002327c         db  0x2c ; ','
000000000002327d         db  0x15 ; '.'
000000000002327e         db  0x00 ; '.'
000000000002327f         db  0x00 ; '.'
0000000000023280         db  0xd4 ; '.'
0000000000023281         db  0x50 ; 'P'
0000000000023282         db  0xfe ; '.'
0000000000023283         db  0xff ; '.'
0000000000023284         db  0x40 ; '@'
0000000000023285         db  0x15 ; '.'
0000000000023286         db  0x00 ; '.'
0000000000023287         db  0x00 ; '.'
0000000000023288         db  0x34 ; '4'
0000000000023289         db  0x51 ; 'Q'
000000000002328a         db  0xfe ; '.'
000000000002328b         db  0xff ; '.'
000000000002328c         db  0x54 ; 'T'
000000000002328d         db  0x15 ; '.'
000000000002328e         db  0x00 ; '.'
000000000002328f         db  0x00 ; '.'
0000000000023290         db  0x84 ; '.'
0000000000023291         db  0x52 ; 'R'
0000000000023292         db  0xfe ; '.'
0000000000023293         db  0xff ; '.'
0000000000023294         db  0x90 ; '.'
0000000000023295         db  0x15 ; '.'
0000000000023296         db  0x00 ; '.'
0000000000023297         db  0x00 ; '.'
0000000000023298         db  0xe4 ; '.'
0000000000023299         db  0x52 ; 'R'
000000000002329a         db  0xfe ; '.'
000000000002329b         db  0xff ; '.'
000000000002329c         db  0xc8 ; '.'
000000000002329d         db  0x15 ; '.'
000000000002329e         db  0x00 ; '.'
000000000002329f         db  0x00 ; '.'
00000000000232a0         db  0x34 ; '4'
00000000000232a1         db  0x53 ; 'S'
00000000000232a2         db  0xfe ; '.'
00000000000232a3         db  0xff ; '.'
00000000000232a4         db  0xdc ; '.'
00000000000232a5         db  0x15 ; '.'
00000000000232a6         db  0x00 ; '.'
00000000000232a7         db  0x00 ; '.'
00000000000232a8         db  0xb4 ; '.'
00000000000232a9         db  0x53 ; 'S'
00000000000232aa         db  0xfe ; '.'
00000000000232ab         db  0xff ; '.'
00000000000232ac         db  0x10 ; '.'
00000000000232ad         db  0x16 ; '.'
00000000000232ae         db  0x00 ; '.'
00000000000232af         db  0x00 ; '.'
00000000000232b0         db  0x24 ; '$'
00000000000232b1         db  0x54 ; 'T'
00000000000232b2         db  0xfe ; '.'
00000000000232b3         db  0xff ; '.'
00000000000232b4         db  0x24 ; '$'
00000000000232b5         db  0x16 ; '.'
00000000000232b6         db  0x00 ; '.'
00000000000232b7         db  0x00 ; '.'
00000000000232b8         db  0x94 ; '.'
00000000000232b9         db  0x54 ; 'T'
00000000000232ba         db  0xfe ; '.'
00000000000232bb         db  0xff ; '.'
00000000000232bc         db  0x70 ; 'p'
00000000000232bd         db  0x16 ; '.'
00000000000232be         db  0x00 ; '.'
00000000000232bf         db  0x00 ; '.'
00000000000232c0         db  0xd4 ; '.'
00000000000232c1         db  0x54 ; 'T'
00000000000232c2         db  0xfe ; '.'
00000000000232c3         db  0xff ; '.'
00000000000232c4         db  0x84 ; '.'
00000000000232c5         db  0x16 ; '.'
00000000000232c6         db  0x00 ; '.'
00000000000232c7         db  0x00 ; '.'
00000000000232c8         db  0xf4 ; '.'
00000000000232c9         db  0x54 ; 'T'
00000000000232ca         db  0xfe ; '.'
00000000000232cb         db  0xff ; '.'
00000000000232cc         db  0x98 ; '.'
00000000000232cd         db  0x16 ; '.'
00000000000232ce         db  0x00 ; '.'
00000000000232cf         db  0x00 ; '.'
00000000000232d0         db  0xb4 ; '.'
00000000000232d1         db  0x56 ; 'V'
00000000000232d2         db  0xfe ; '.'
00000000000232d3         db  0xff ; '.'
00000000000232d4         db  0xe4 ; '.'
00000000000232d5         db  0x16 ; '.'
00000000000232d6         db  0x00 ; '.'
00000000000232d7         db  0x00 ; '.'
00000000000232d8         db  0x44 ; 'D'
00000000000232d9         db  0x57 ; 'W'
00000000000232da         db  0xfe ; '.'
00000000000232db         db  0xff ; '.'
00000000000232dc         db  0x10 ; '.'
00000000000232dd         db  0x17 ; '.'
00000000000232de         db  0x00 ; '.'
00000000000232df         db  0x00 ; '.'
00000000000232e0         db  0x24 ; '$'
00000000000232e1         db  0x58 ; 'X'
00000000000232e2         db  0xfe ; '.'
00000000000232e3         db  0xff ; '.'
00000000000232e4         db  0x3c ; '<'
00000000000232e5         db  0x17 ; '.'
00000000000232e6         db  0x00 ; '.'
00000000000232e7         db  0x00 ; '.'
00000000000232e8         db  0x64 ; 'd'
00000000000232e9         db  0x5a ; 'Z'
00000000000232ea         db  0xfe ; '.'
00000000000232eb         db  0xff ; '.'
00000000000232ec         db  0x74 ; 't'
00000000000232ed         db  0x17 ; '.'
00000000000232ee         db  0x00 ; '.'
00000000000232ef         db  0x00 ; '.'
00000000000232f0         db  0xf4 ; '.'
00000000000232f1         db  0x5c ; '\'
00000000000232f2         db  0xfe ; '.'
00000000000232f3         db  0xff ; '.'
00000000000232f4         db  0xb0 ; '.'
00000000000232f5         db  0x17 ; '.'
00000000000232f6         db  0x00 ; '.'
00000000000232f7         db  0x00 ; '.'
00000000000232f8         db  0x54 ; 'T'
00000000000232f9         db  0x5d ; ']'
00000000000232fa         db  0xfe ; '.'
00000000000232fb         db  0xff ; '.'
00000000000232fc         db  0xd4 ; '.'
00000000000232fd         db  0x17 ; '.'
00000000000232fe         db  0x00 ; '.'
00000000000232ff         db  0x00 ; '.'
0000000000023300         db  0x64 ; 'd'
0000000000023301         db  0x5f ; '_'
0000000000023302         db  0xfe ; '.'
0000000000023303         db  0xff ; '.'
0000000000023304         db  0x0c ; '.'
0000000000023305         db  0x18 ; '.'
0000000000023306         db  0x00 ; '.'
0000000000023307         db  0x00 ; '.'
0000000000023308         db  0x34 ; '4'
0000000000023309         db  0x60 ; '`'
000000000002330a         db  0xfe ; '.'
000000000002330b         db  0xff ; '.'
000000000002330c         db  0x20 ; ' '
000000000002330d         db  0x18 ; '.'
000000000002330e         db  0x00 ; '.'
000000000002330f         db  0x00 ; '.'
0000000000023310         db  0x44 ; 'D'
0000000000023311         db  0x6a ; 'j'
0000000000023312         db  0xfe ; '.'
0000000000023313         db  0xff ; '.'
0000000000023314         db  0xc8 ; '.'
0000000000023315         db  0x18 ; '.'
0000000000023316         db  0x00 ; '.'
0000000000023317         db  0x00 ; '.'
0000000000023318         db  0x34 ; '4'
0000000000023319         db  0x6c ; 'l'
000000000002331a         db  0xfe ; '.'
000000000002331b         db  0xff ; '.'
000000000002331c         db  0x04 ; '.'
000000000002331d         db  0x19 ; '.'
000000000002331e         db  0x00 ; '.'
000000000002331f         db  0x00 ; '.'
0000000000023320         db  0x44 ; 'D'
0000000000023321         db  0x6c ; 'l'
0000000000023322         db  0xfe ; '.'
0000000000023323         db  0xff ; '.'
0000000000023324         db  0x18 ; '.'
0000000000023325         db  0x19 ; '.'
0000000000023326         db  0x00 ; '.'
0000000000023327         db  0x00 ; '.'
0000000000023328         db  0x54 ; 'T'
0000000000023329         db  0x6c ; 'l'
000000000002332a         db  0xfe ; '.'
000000000002332b         db  0xff ; '.'
000000000002332c         db  0x2c ; ','
000000000002332d         db  0x19 ; '.'
000000000002332e         db  0x00 ; '.'
000000000002332f         db  0x00 ; '.'
0000000000023330         db  0xc4 ; '.'
0000000000023331         db  0x6c ; 'l'
0000000000023332         db  0xfe ; '.'
0000000000023333         db  0xff ; '.'
0000000000023334         db  0x58 ; 'X'
0000000000023335         db  0x19 ; '.'
0000000000023336         db  0x00 ; '.'
0000000000023337         db  0x00 ; '.'
0000000000023338         db  0xe4 ; '.'
0000000000023339         db  0x6c ; 'l'
000000000002333a         db  0xfe ; '.'
000000000002333b         db  0xff ; '.'
000000000002333c         db  0x74 ; 't'
000000000002333d         db  0x19 ; '.'
000000000002333e         db  0x00 ; '.'
000000000002333f         db  0x00 ; '.'
0000000000023340         db  0x84 ; '.'
0000000000023341         db  0x6d ; 'm'
0000000000023342         db  0xfe ; '.'
0000000000023343         db  0xff ; '.'
0000000000023344         db  0xc4 ; '.'
0000000000023345         db  0x19 ; '.'
0000000000023346         db  0x00 ; '.'
0000000000023347         db  0x00 ; '.'
0000000000023348         db  0x24 ; '$'
0000000000023349         db  0x6e ; 'n'
000000000002334a         db  0xfe ; '.'
000000000002334b         db  0xff ; '.'
000000000002334c         db  0xdc ; '.'
000000000002334d         db  0x19 ; '.'
000000000002334e         db  0x00 ; '.'
000000000002334f         db  0x00 ; '.'
0000000000023350         db  0x54 ; 'T'
0000000000023351         db  0x6e ; 'n'
0000000000023352         db  0xfe ; '.'
0000000000023353         db  0xff ; '.'
0000000000023354         db  0xfc ; '.'
0000000000023355         db  0x19 ; '.'
0000000000023356         db  0x00 ; '.'
0000000000023357         db  0x00 ; '.'
0000000000023358         db  0xb4 ; '.'
0000000000023359         db  0x6e ; 'n'
000000000002335a         db  0xfe ; '.'
000000000002335b         db  0xff ; '.'
000000000002335c         db  0x28 ; '('
000000000002335d         db  0x1a ; '.'
000000000002335e         db  0x00 ; '.'
000000000002335f         db  0x00 ; '.'
0000000000023360         db  0xd4 ; '.'
0000000000023361         db  0x6e ; 'n'
0000000000023362         db  0xfe ; '.'
0000000000023363         db  0xff ; '.'
0000000000023364         db  0x50 ; 'P'
0000000000023365         db  0x1a ; '.'
0000000000023366         db  0x00 ; '.'
0000000000023367         db  0x00 ; '.'
0000000000023368         db  0xe4 ; '.'
0000000000023369         db  0x75 ; 'u'
000000000002336a         db  0xfe ; '.'
000000000002336b         db  0xff ; '.'
000000000002336c         db  0x9c ; '.'
000000000002336d         db  0x1a ; '.'
000000000002336e         db  0x00 ; '.'
000000000002336f         db  0x00 ; '.'
0000000000023370         db  0x84 ; '.'
0000000000023371         db  0x76 ; 'v'
0000000000023372         db  0xfe ; '.'
0000000000023373         db  0xff ; '.'
0000000000023374         db  0xbc ; '.'
0000000000023375         db  0x1a ; '.'
0000000000023376         db  0x00 ; '.'
0000000000023377         db  0x00 ; '.'
0000000000023378         db  0x74 ; 't'
0000000000023379         db  0x77 ; 'w'
000000000002337a         db  0xfe ; '.'
000000000002337b         db  0xff ; '.'
000000000002337c         db  0x00 ; '.'
000000000002337d         db  0x1b ; '.'
000000000002337e         db  0x00 ; '.'
000000000002337f         db  0x00 ; '.'
0000000000023380         db  0xb4 ; '.'
0000000000023381         db  0x89 ; '.'
0000000000023382         db  0xfe ; '.'
0000000000023383         db  0xff ; '.'
0000000000023384         db  0x78 ; 'x'
0000000000023385         db  0x1b ; '.'
0000000000023386         db  0x00 ; '.'
0000000000023387         db  0x00 ; '.'
0000000000023388         db  0x64 ; 'd'
0000000000023389         db  0x8b ; '.'
000000000002338a         db  0xfe ; '.'
000000000002338b         db  0xff ; '.'
000000000002338c         db  0xe4 ; '.'
000000000002338d         db  0x1b ; '.'
000000000002338e         db  0x00 ; '.'
000000000002338f         db  0x00 ; '.'
0000000000023390         db  0xa4 ; '.'
0000000000023391         db  0x8b ; '.'
0000000000023392         db  0xfe ; '.'
0000000000023393         db  0xff ; '.'
0000000000023394         db  0x10 ; '.'
0000000000023395         db  0x1c ; '.'
0000000000023396         db  0x00 ; '.'
0000000000023397         db  0x00 ; '.'
0000000000023398         db  0xc4 ; '.'
0000000000023399         db  0x8b ; '.'
000000000002339a         db  0xfe ; '.'
000000000002339b         db  0xff ; '.'
000000000002339c         db  0x24 ; '$'
000000000002339d         db  0x1c ; '.'
000000000002339e         db  0x00 ; '.'
000000000002339f         db  0x00 ; '.'
00000000000233a0         db  0xe4 ; '.'
00000000000233a1         db  0x8b ; '.'
00000000000233a2         db  0xfe ; '.'
00000000000233a3         db  0xff ; '.'
00000000000233a4         db  0x38 ; '8'
00000000000233a5         db  0x1c ; '.'
00000000000233a6         db  0x00 ; '.'
00000000000233a7         db  0x00 ; '.'
00000000000233a8         db  0x24 ; '$'
00000000000233a9         db  0x8c ; '.'
00000000000233aa         db  0xfe ; '.'
00000000000233ab         db  0xff ; '.'
00000000000233ac         db  0x4c ; 'L'
00000000000233ad         db  0x1c ; '.'
00000000000233ae         db  0x00 ; '.'
00000000000233af         db  0x00 ; '.'
00000000000233b0         db  0x44 ; 'D'
00000000000233b1         db  0x8c ; '.'
00000000000233b2         db  0xfe ; '.'
00000000000233b3         db  0xff ; '.'
00000000000233b4         db  0x60 ; '`'
00000000000233b5         db  0x1c ; '.'
00000000000233b6         db  0x00 ; '.'
00000000000233b7         db  0x00 ; '.'
00000000000233b8         db  0x74 ; 't'
00000000000233b9         db  0x8c ; '.'
00000000000233ba         db  0xfe ; '.'
00000000000233bb         db  0xff ; '.'
00000000000233bc         db  0x74 ; 't'
00000000000233bd         db  0x1c ; '.'
00000000000233be         db  0x00 ; '.'
00000000000233bf         db  0x00 ; '.'
00000000000233c0         db  0xf4 ; '.'
00000000000233c1         db  0x8c ; '.'
00000000000233c2         db  0xfe ; '.'
00000000000233c3         db  0xff ; '.'
00000000000233c4         db  0xc8 ; '.'
00000000000233c5         db  0x1c ; '.'
00000000000233c6         db  0x00 ; '.'
00000000000233c7         db  0x00 ; '.'
00000000000233c8         db  0xe4 ; '.'
00000000000233c9         db  0x8d ; '.'
00000000000233ca         db  0xfe ; '.'
00000000000233cb         db  0xff ; '.'
00000000000233cc         db  0x34 ; '4'
00000000000233cd         db  0x1d ; '.'
00000000000233ce         db  0x00 ; '.'
00000000000233cf         db  0x00 ; '.'
00000000000233d0         db  0xf4 ; '.'
00000000000233d1         db  0x8d ; '.'
00000000000233d2         db  0xfe ; '.'
00000000000233d3         db  0xff ; '.'
00000000000233d4         db  0x48 ; 'H'
00000000000233d5         db  0x1d ; '.'
00000000000233d6         db  0x00 ; '.'
00000000000233d7         db  0x00 ; '.'
00000000000233d8         db  0x94 ; '.'
00000000000233d9         db  0x8e ; '.'
00000000000233da         db  0xfe ; '.'
00000000000233db         db  0xff ; '.'
00000000000233dc         db  0x74 ; 't'
00000000000233dd         db  0x1d ; '.'
00000000000233de         db  0x00 ; '.'
00000000000233df         db  0x00 ; '.'
00000000000233e0         db  0xb4 ; '.'
00000000000233e1         db  0x8e ; '.'
00000000000233e2         db  0xfe ; '.'
00000000000233e3         db  0xff ; '.'
00000000000233e4         db  0x88 ; '.'
00000000000233e5         db  0x1d ; '.'
00000000000233e6         db  0x00 ; '.'
00000000000233e7         db  0x00 ; '.'
00000000000233e8         db  0xc4 ; '.'
00000000000233e9         db  0x8e ; '.'
00000000000233ea         db  0xfe ; '.'
00000000000233eb         db  0xff ; '.'
00000000000233ec         db  0x9c ; '.'
00000000000233ed         db  0x1d ; '.'
00000000000233ee         db  0x00 ; '.'
00000000000233ef         db  0x00 ; '.'
00000000000233f0         db  0xe4 ; '.'
00000000000233f1         db  0x8e ; '.'
00000000000233f2         db  0xfe ; '.'
00000000000233f3         db  0xff ; '.'
00000000000233f4         db  0xb0 ; '.'
00000000000233f5         db  0x1d ; '.'
00000000000233f6         db  0x00 ; '.'
00000000000233f7         db  0x00 ; '.'
00000000000233f8         db  0x04 ; '.'
00000000000233f9         db  0x8f ; '.'
00000000000233fa         db  0xfe ; '.'
00000000000233fb         db  0xff ; '.'
00000000000233fc         db  0xc4 ; '.'
00000000000233fd         db  0x1d ; '.'
00000000000233fe         db  0x00 ; '.'
00000000000233ff         db  0x00 ; '.'
0000000000023400         db  0x94 ; '.'
0000000000023401         db  0x8f ; '.'
0000000000023402         db  0xfe ; '.'
0000000000023403         db  0xff ; '.'
0000000000023404         db  0xe0 ; '.'
0000000000023405         db  0x1d ; '.'
0000000000023406         db  0x00 ; '.'
0000000000023407         db  0x00 ; '.'
0000000000023408         db  0x24 ; '$'
0000000000023409         db  0x90 ; '.'
000000000002340a         db  0xfe ; '.'
000000000002340b         db  0xff ; '.'
000000000002340c         db  0xfc ; '.'
000000000002340d         db  0x1d ; '.'
000000000002340e         db  0x00 ; '.'
000000000002340f         db  0x00 ; '.'
0000000000023410         db  0x34 ; '4'
0000000000023411         db  0x90 ; '.'
0000000000023412         db  0xfe ; '.'
0000000000023413         db  0xff ; '.'
0000000000023414         db  0x10 ; '.'
0000000000023415         db  0x1e ; '.'
0000000000023416         db  0x00 ; '.'
0000000000023417         db  0x00 ; '.'
0000000000023418         db  0x44 ; 'D'
0000000000023419         db  0x90 ; '.'
000000000002341a         db  0xfe ; '.'
000000000002341b         db  0xff ; '.'
000000000002341c         db  0x24 ; '$'
000000000002341d         db  0x1e ; '.'
000000000002341e         db  0x00 ; '.'
000000000002341f         db  0x00 ; '.'
0000000000023420         db  0xe4 ; '.'
0000000000023421         db  0x90 ; '.'
0000000000023422         db  0xfe ; '.'
0000000000023423         db  0xff ; '.'
0000000000023424         db  0x40 ; '@'
0000000000023425         db  0x1e ; '.'
0000000000023426         db  0x00 ; '.'
0000000000023427         db  0x00 ; '.'
0000000000023428         db  0xf4 ; '.'
0000000000023429         db  0x90 ; '.'
000000000002342a         db  0xfe ; '.'
000000000002342b         db  0xff ; '.'
000000000002342c         db  0x54 ; 'T'
000000000002342d         db  0x1e ; '.'
000000000002342e         db  0x00 ; '.'
000000000002342f         db  0x00 ; '.'
0000000000023430         db  0x14 ; '.'
0000000000023431         db  0x91 ; '.'
0000000000023432         db  0xfe ; '.'
0000000000023433         db  0xff ; '.'
0000000000023434         db  0x68 ; 'h'
0000000000023435         db  0x1e ; '.'
0000000000023436         db  0x00 ; '.'
0000000000023437         db  0x00 ; '.'
0000000000023438         db  0x24 ; '$'
0000000000023439         db  0x91 ; '.'
000000000002343a         db  0xfe ; '.'
000000000002343b         db  0xff ; '.'
000000000002343c         db  0x7c ; '|'
000000000002343d         db  0x1e ; '.'
000000000002343e         db  0x00 ; '.'
000000000002343f         db  0x00 ; '.'
0000000000023440         db  0xb4 ; '.'
0000000000023441         db  0x91 ; '.'
0000000000023442         db  0xfe ; '.'
0000000000023443         db  0xff ; '.'
0000000000023444         db  0x98 ; '.'
0000000000023445         db  0x1e ; '.'
0000000000023446         db  0x00 ; '.'
0000000000023447         db  0x00 ; '.'
0000000000023448         db  0x54 ; 'T'
0000000000023449         db  0x92 ; '.'
000000000002344a         db  0xfe ; '.'
000000000002344b         db  0xff ; '.'
000000000002344c         db  0xb4 ; '.'
000000000002344d         db  0x1e ; '.'
000000000002344e         db  0x00 ; '.'
000000000002344f         db  0x00 ; '.'
0000000000023450         db  0x64 ; 'd'
0000000000023451         db  0x92 ; '.'
0000000000023452         db  0xfe ; '.'
0000000000023453         db  0xff ; '.'
0000000000023454         db  0xc8 ; '.'
0000000000023455         db  0x1e ; '.'
0000000000023456         db  0x00 ; '.'
0000000000023457         db  0x00 ; '.'
0000000000023458         db  0x84 ; '.'
0000000000023459         db  0x92 ; '.'
000000000002345a         db  0xfe ; '.'
000000000002345b         db  0xff ; '.'
000000000002345c         db  0xdc ; '.'
000000000002345d         db  0x1e ; '.'
000000000002345e         db  0x00 ; '.'
000000000002345f         db  0x00 ; '.'
0000000000023460         db  0xa4 ; '.'
0000000000023461         db  0x92 ; '.'
0000000000023462         db  0xfe ; '.'
0000000000023463         db  0xff ; '.'
0000000000023464         db  0xf0 ; '.'
0000000000023465         db  0x1e ; '.'
0000000000023466         db  0x00 ; '.'
0000000000023467         db  0x00 ; '.'
0000000000023468         db  0xb4 ; '.'
0000000000023469         db  0x92 ; '.'
000000000002346a         db  0xfe ; '.'
000000000002346b         db  0xff ; '.'
000000000002346c         db  0x04 ; '.'
000000000002346d         db  0x1f ; '.'
000000000002346e         db  0x00 ; '.'
000000000002346f         db  0x00 ; '.'
0000000000023470         db  0xd4 ; '.'
0000000000023471         db  0x92 ; '.'
0000000000023472         db  0xfe ; '.'
0000000000023473         db  0xff ; '.'
0000000000023474         db  0x18 ; '.'
0000000000023475         db  0x1f ; '.'
0000000000023476         db  0x00 ; '.'
0000000000023477         db  0x00 ; '.'
0000000000023478         db  0xf4 ; '.'
0000000000023479         db  0x92 ; '.'
000000000002347a         db  0xfe ; '.'
000000000002347b         db  0xff ; '.'
000000000002347c         db  0x2c ; ','
000000000002347d         db  0x1f ; '.'
000000000002347e         db  0x00 ; '.'
000000000002347f         db  0x00 ; '.'
0000000000023480         db  0x14 ; '.'
0000000000023481         db  0x93 ; '.'
0000000000023482         db  0xfe ; '.'
0000000000023483         db  0xff ; '.'
0000000000023484         db  0x44 ; 'D'
0000000000023485         db  0x1f ; '.'
0000000000023486         db  0x00 ; '.'
0000000000023487         db  0x00 ; '.'
0000000000023488         db  0x54 ; 'T'
0000000000023489         db  0x93 ; '.'
000000000002348a         db  0xfe ; '.'
000000000002348b         db  0xff ; '.'
000000000002348c         db  0x6c ; 'l'
000000000002348d         db  0x1f ; '.'
000000000002348e         db  0x00 ; '.'
000000000002348f         db  0x00 ; '.'
0000000000023490         db  0x74 ; 't'
0000000000023491         db  0x97 ; '.'
0000000000023492         db  0xfe ; '.'
0000000000023493         db  0xff ; '.'
0000000000023494         db  0x80 ; '.'
0000000000023495         db  0x20 ; ' '
0000000000023496         db  0x00 ; '.'
0000000000023497         db  0x00 ; '.'
0000000000023498         db  0x94 ; '.'
0000000000023499         db  0x97 ; '.'
000000000002349a         db  0xfe ; '.'
000000000002349b         db  0xff ; '.'
000000000002349c         db  0x94 ; '.'
000000000002349d         db  0x20 ; ' '
000000000002349e         db  0x00 ; '.'
000000000002349f         db  0x00 ; '.'
00000000000234a0         db  0x14 ; '.'
00000000000234a1         db  0x98 ; '.'
00000000000234a2         db  0xfe ; '.'
00000000000234a3         db  0xff ; '.'
00000000000234a4         db  0xb0 ; '.'
00000000000234a5         db  0x20 ; ' '
00000000000234a6         db  0x00 ; '.'
00000000000234a7         db  0x00 ; '.'
00000000000234a8         db  0xf4 ; '.'
00000000000234a9         db  0x98 ; '.'
00000000000234aa         db  0xfe ; '.'
00000000000234ab         db  0xff ; '.'
00000000000234ac         db  0xdc ; '.'
00000000000234ad         db  0x20 ; ' '
00000000000234ae         db  0x00 ; '.'
00000000000234af         db  0x00 ; '.'
00000000000234b0         db  0x74 ; 't'
00000000000234b1         db  0x99 ; '.'
00000000000234b2         db  0xfe ; '.'
00000000000234b3         db  0xff ; '.'
00000000000234b4         db  0xfc ; '.'
00000000000234b5         db  0x20 ; ' '
00000000000234b6         db  0x00 ; '.'
00000000000234b7         db  0x00 ; '.'
00000000000234b8         db  0x94 ; '.'
00000000000234b9         db  0x99 ; '.'
00000000000234ba         db  0xfe ; '.'
00000000000234bb         db  0xff ; '.'
00000000000234bc         db  0x18 ; '.'
00000000000234bd         db  0x21 ; '!'
00000000000234be         db  0x00 ; '.'
00000000000234bf         db  0x00 ; '.'
00000000000234c0         db  0xc4 ; '.'
00000000000234c1         db  0x99 ; '.'
00000000000234c2         db  0xfe ; '.'
00000000000234c3         db  0xff ; '.'
00000000000234c4         db  0x2c ; ','
00000000000234c5         db  0x21 ; '!'
00000000000234c6         db  0x00 ; '.'
00000000000234c7         db  0x00 ; '.'
00000000000234c8         db  0xd4 ; '.'
00000000000234c9         db  0x99 ; '.'
00000000000234ca         db  0xfe ; '.'
00000000000234cb         db  0xff ; '.'
00000000000234cc         db  0x40 ; '@'
00000000000234cd         db  0x21 ; '!'
00000000000234ce         db  0x00 ; '.'
00000000000234cf         db  0x00 ; '.'
00000000000234d0         db  0x14 ; '.'
00000000000234d1         db  0x9a ; '.'
00000000000234d2         db  0xfe ; '.'
00000000000234d3         db  0xff ; '.'
00000000000234d4         db  0x64 ; 'd'
00000000000234d5         db  0x21 ; '!'
00000000000234d6         db  0x00 ; '.'
00000000000234d7         db  0x00 ; '.'
00000000000234d8         db  0x44 ; 'D'
00000000000234d9         db  0x9a ; '.'
00000000000234da         db  0xfe ; '.'
00000000000234db         db  0xff ; '.'
00000000000234dc         db  0x78 ; 'x'
00000000000234dd         db  0x21 ; '!'
00000000000234de         db  0x00 ; '.'
00000000000234df         db  0x00 ; '.'
00000000000234e0         db  0xd4 ; '.'
00000000000234e1         db  0x9a ; '.'
00000000000234e2         db  0xfe ; '.'
00000000000234e3         db  0xff ; '.'
00000000000234e4         db  0x90 ; '.'
00000000000234e5         db  0x21 ; '!'
00000000000234e6         db  0x00 ; '.'
00000000000234e7         db  0x00 ; '.'
00000000000234e8         db  0x24 ; '$'
00000000000234e9         db  0x9b ; '.'
00000000000234ea         db  0xfe ; '.'
00000000000234eb         db  0xff ; '.'
00000000000234ec         db  0xa8 ; '.'
00000000000234ed         db  0x21 ; '!'
00000000000234ee         db  0x00 ; '.'
00000000000234ef         db  0x00 ; '.'
00000000000234f0         db  0x44 ; 'D'
00000000000234f1         db  0x9b ; '.'
00000000000234f2         db  0xfe ; '.'
00000000000234f3         db  0xff ; '.'
00000000000234f4         db  0xc4 ; '.'
00000000000234f5         db  0x21 ; '!'
00000000000234f6         db  0x00 ; '.'
00000000000234f7         db  0x00 ; '.'
00000000000234f8         db  0x74 ; 't'
00000000000234f9         db  0x9b ; '.'
00000000000234fa         db  0xfe ; '.'
00000000000234fb         db  0xff ; '.'
00000000000234fc         db  0xe0 ; '.'
00000000000234fd         db  0x21 ; '!'
00000000000234fe         db  0x00 ; '.'
00000000000234ff         db  0x00 ; '.'
0000000000023500         db  0xa4 ; '.'
0000000000023501         db  0x9b ; '.'
0000000000023502         db  0xfe ; '.'
0000000000023503         db  0xff ; '.'
0000000000023504         db  0x08 ; '.'
0000000000023505         db  0x22 ; '"'
0000000000023506         db  0x00 ; '.'
0000000000023507         db  0x00 ; '.'
0000000000023508         db  0xc4 ; '.'
0000000000023509         db  0x9b ; '.'
000000000002350a         db  0xfe ; '.'
000000000002350b         db  0xff ; '.'
000000000002350c         db  0x24 ; '$'
000000000002350d         db  0x22 ; '"'
000000000002350e         db  0x00 ; '.'
000000000002350f         db  0x00 ; '.'
0000000000023510         db  0x04 ; '.'
0000000000023511         db  0x9c ; '.'
0000000000023512         db  0xfe ; '.'
0000000000023513         db  0xff ; '.'
0000000000023514         db  0x3c ; '<'
0000000000023515         db  0x22 ; '"'
0000000000023516         db  0x00 ; '.'
0000000000023517         db  0x00 ; '.'
0000000000023518         db  0x54 ; 'T'
0000000000023519         db  0x9c ; '.'
000000000002351a         db  0xfe ; '.'
000000000002351b         db  0xff ; '.'
000000000002351c         db  0x58 ; 'X'
000000000002351d         db  0x22 ; '"'
000000000002351e         db  0x00 ; '.'
000000000002351f         db  0x00 ; '.'
0000000000023520         db  0x84 ; '.'
0000000000023521         db  0x9c ; '.'
0000000000023522         db  0xfe ; '.'
0000000000023523         db  0xff ; '.'
0000000000023524         db  0x6c ; 'l'
0000000000023525         db  0x22 ; '"'
0000000000023526         db  0x00 ; '.'
0000000000023527         db  0x00 ; '.'
0000000000023528         db  0x44 ; 'D'
0000000000023529         db  0xa3 ; '.'
000000000002352a         db  0xfe ; '.'
000000000002352b         db  0xff ; '.'
000000000002352c         db  0xbc ; '.'
000000000002352d         db  0x22 ; '"'
000000000002352e         db  0x00 ; '.'
000000000002352f         db  0x00 ; '.'
0000000000023530         db  0x64 ; 'd'
0000000000023531         db  0xa7 ; '.'
0000000000023532         db  0xfe ; '.'
0000000000023533         db  0xff ; '.'
0000000000023534         db  0x0c ; '.'
0000000000023535         db  0x23 ; '#'
0000000000023536         db  0x00 ; '.'
0000000000023537         db  0x00 ; '.'
0000000000023538         db  0x14 ; '.'
0000000000023539         db  0xa8 ; '.'
000000000002353a         db  0xfe ; '.'
000000000002353b         db  0xff ; '.'
000000000002353c         db  0x34 ; '4'
000000000002353d         db  0x23 ; '#'
000000000002353e         db  0x00 ; '.'
000000000002353f         db  0x00 ; '.'
0000000000023540         db  0x34 ; '4'
0000000000023541         db  0xac ; '.'
0000000000023542         db  0xfe ; '.'
0000000000023543         db  0xff ; '.'
0000000000023544         db  0x84 ; '.'
0000000000023545         db  0x23 ; '#'
0000000000023546         db  0x00 ; '.'
0000000000023547         db  0x00 ; '.'
0000000000023548         db  0xb4 ; '.'
0000000000023549         db  0xac ; '.'
000000000002354a         db  0xfe ; '.'
000000000002354b         db  0xff ; '.'
000000000002354c         db  0xbc ; '.'
000000000002354d         db  0x23 ; '#'
000000000002354e         db  0x00 ; '.'
000000000002354f         db  0x00 ; '.'
0000000000023550         db  0xf4 ; '.'
0000000000023551         db  0xac ; '.'
0000000000023552         db  0xfe ; '.'
0000000000023553         db  0xff ; '.'
0000000000023554         db  0xdc ; '.'
0000000000023555         db  0x23 ; '#'
0000000000023556         db  0x00 ; '.'
0000000000023557         db  0x00 ; '.'
0000000000023558         db  0x54 ; 'T'
0000000000023559         db  0xad ; '.'
000000000002355a         db  0xfe ; '.'
000000000002355b         db  0xff ; '.'
000000000002355c         db  0x0c ; '.'
000000000002355d         db  0x24 ; '$'
000000000002355e         db  0x00 ; '.'
000000000002355f         db  0x00 ; '.'
0000000000023560         db  0x74 ; 't'
0000000000023561         db  0xad ; '.'
0000000000023562         db  0xfe ; '.'
0000000000023563         db  0xff ; '.'
0000000000023564         db  0x20 ; ' '
0000000000023565         db  0x24 ; '$'
0000000000023566         db  0x00 ; '.'
0000000000023567         db  0x00 ; '.'
0000000000023568         db  0x84 ; '.'
0000000000023569         db  0xad ; '.'
000000000002356a         db  0xfe ; '.'
000000000002356b         db  0xff ; '.'
000000000002356c         db  0x34 ; '4'
000000000002356d         db  0x24 ; '$'
000000000002356e         db  0x00 ; '.'
000000000002356f         db  0x00 ; '.'
0000000000023570         db  0x94 ; '.'
0000000000023571         db  0xad ; '.'
0000000000023572         db  0xfe ; '.'
0000000000023573         db  0xff ; '.'
0000000000023574         db  0x48 ; 'H'
0000000000023575         db  0x24 ; '$'
0000000000023576         db  0x00 ; '.'
0000000000023577         db  0x00 ; '.'
0000000000023578         db  0xa4 ; '.'
0000000000023579         db  0xad ; '.'
000000000002357a         db  0xfe ; '.'
000000000002357b         db  0xff ; '.'
000000000002357c         db  0x5c ; '\'
000000000002357d         db  0x24 ; '$'
000000000002357e         db  0x00 ; '.'
000000000002357f         db  0x00 ; '.'
0000000000023580         db  0xd4 ; '.'
0000000000023581         db  0xad ; '.'
0000000000023582         db  0xfe ; '.'
0000000000023583         db  0xff ; '.'
0000000000023584         db  0x70 ; 'p'
0000000000023585         db  0x24 ; '$'
0000000000023586         db  0x00 ; '.'
0000000000023587         db  0x00 ; '.'
0000000000023588         db  0xa4 ; '.'
0000000000023589         db  0xaf ; '.'
000000000002358a         db  0xfe ; '.'
000000000002358b         db  0xff ; '.'
000000000002358c         db  0xac ; '.'
000000000002358d         db  0x24 ; '$'
000000000002358e         db  0x00 ; '.'
000000000002358f         db  0x00 ; '.'
0000000000023590         db  0xb4 ; '.'
0000000000023591         db  0xb0 ; '.'
0000000000023592         db  0xfe ; '.'
0000000000023593         db  0xff ; '.'
0000000000023594         db  0xfc ; '.'
0000000000023595         db  0x24 ; '$'
0000000000023596         db  0x00 ; '.'
0000000000023597         db  0x00 ; '.'
0000000000023598         db  0x44 ; 'D'
0000000000023599         db  0xb1 ; '.'
000000000002359a         db  0xfe ; '.'
000000000002359b         db  0xff ; '.'
000000000002359c         db  0x34 ; '4'
000000000002359d         db  0x25 ; '%'
000000000002359e         db  0x00 ; '.'
000000000002359f         db  0x00 ; '.'
00000000000235a0         db  0x94 ; '.'
00000000000235a1         db  0xb1 ; '.'
00000000000235a2         db  0xfe ; '.'
00000000000235a3         db  0xff ; '.'
00000000000235a4         db  0x60 ; '`'
00000000000235a5         db  0x25 ; '%'
00000000000235a6         db  0x00 ; '.'
00000000000235a7         db  0x00 ; '.'
00000000000235a8         db  0xd4 ; '.'
00000000000235a9         db  0xb1 ; '.'
00000000000235aa         db  0xfe ; '.'
00000000000235ab         db  0xff ; '.'
00000000000235ac         db  0x7c ; '|'
00000000000235ad         db  0x25 ; '%'
00000000000235ae         db  0x00 ; '.'
00000000000235af         db  0x00 ; '.'
00000000000235b0         db  0x04 ; '.'
00000000000235b1         db  0xb3 ; '.'
00000000000235b2         db  0xfe ; '.'
00000000000235b3         db  0xff ; '.'
00000000000235b4         db  0xb8 ; '.'
00000000000235b5         db  0x25 ; '%'
00000000000235b6         db  0x00 ; '.'
00000000000235b7         db  0x00 ; '.'
00000000000235b8         db  0x74 ; 't'
00000000000235b9         db  0xb3 ; '.'
00000000000235ba         db  0xfe ; '.'
00000000000235bb         db  0xff ; '.'
00000000000235bc         db  0xdc ; '.'
00000000000235bd         db  0x25 ; '%'
00000000000235be         db  0x00 ; '.'
00000000000235bf         db  0x00 ; '.'
00000000000235c0         db  0xe4 ; '.'
00000000000235c1         db  0xb3 ; '.'
00000000000235c2         db  0xfe ; '.'
00000000000235c3         db  0xff ; '.'
00000000000235c4         db  0x20 ; ' '
00000000000235c5         db  0x26 ; '&'
00000000000235c6         db  0x00 ; '.'
00000000000235c7         db  0x00 ; '.'
00000000000235c8         db  0x44 ; 'D'
00000000000235c9         db  0xb4 ; '.'
00000000000235ca         db  0xfe ; '.'
00000000000235cb         db  0xff ; '.'
00000000000235cc         db  0x4c ; 'L'
00000000000235cd         db  0x26 ; '&'
00000000000235ce         db  0x00 ; '.'
00000000000235cf         db  0x00 ; '.'
00000000000235d0         db  0xb4 ; '.'
00000000000235d1         db  0xb4 ; '.'
00000000000235d2         db  0xfe ; '.'
00000000000235d3         db  0xff ; '.'
00000000000235d4         db  0x74 ; 't'
00000000000235d5         db  0x26 ; '&'
00000000000235d6         db  0x00 ; '.'
00000000000235d7         db  0x00 ; '.'
00000000000235d8         db  0x24 ; '$'
00000000000235d9         db  0xb5 ; '.'
00000000000235da         db  0xfe ; '.'
00000000000235db         db  0xff ; '.'
00000000000235dc         db  0x94 ; '.'
00000000000235dd         db  0x26 ; '&'
00000000000235de         db  0x00 ; '.'
00000000000235df         db  0x00 ; '.'
00000000000235e0         db  0x64 ; 'd'
00000000000235e1         db  0xb5 ; '.'
00000000000235e2         db  0xfe ; '.'
00000000000235e3         db  0xff ; '.'
00000000000235e4         db  0xa8 ; '.'
00000000000235e5         db  0x26 ; '&'
00000000000235e6         db  0x00 ; '.'
00000000000235e7         db  0x00 ; '.'
00000000000235e8         db  0xe4 ; '.'
00000000000235e9         db  0xb7 ; '.'
00000000000235ea         db  0xfe ; '.'
00000000000235eb         db  0xff ; '.'
00000000000235ec         db  0xf8 ; '.'
00000000000235ed         db  0x26 ; '&'
00000000000235ee         db  0x00 ; '.'
00000000000235ef         db  0x00 ; '.'
00000000000235f0         db  0x94 ; '.'
00000000000235f1         db  0xb8 ; '.'
00000000000235f2         db  0xfe ; '.'
00000000000235f3         db  0xff ; '.'
00000000000235f4         db  0x3c ; '<'
00000000000235f5         db  0x27 ; '''
00000000000235f6         db  0x00 ; '.'
00000000000235f7         db  0x00 ; '.'
00000000000235f8         db  0x54 ; 'T'
00000000000235f9         db  0xb9 ; '.'
00000000000235fa         db  0xfe ; '.'
00000000000235fb         db  0xff ; '.'
00000000000235fc         db  0x58 ; 'X'
00000000000235fd         db  0x27 ; '''
00000000000235fe         db  0x00 ; '.'
00000000000235ff         db  0x00 ; '.'
0000000000023600         db  0x34 ; '4'
0000000000023601         db  0xc3 ; '.'
0000000000023602         db  0xfe ; '.'
0000000000023603         db  0xff ; '.'
0000000000023604         db  0xa8 ; '.'
0000000000023605         db  0x27 ; '''
0000000000023606         db  0x00 ; '.'
0000000000023607         db  0x00 ; '.'
0000000000023608         db  0xe4 ; '.'
0000000000023609         db  0xc6 ; '.'
000000000002360a         db  0xfe ; '.'
000000000002360b         db  0xff ; '.'
000000000002360c         db  0xf4 ; '.'
000000000002360d         db  0x27 ; '''
000000000002360e         db  0x00 ; '.'
000000000002360f         db  0x00 ; '.'
0000000000023610         db  0x74 ; 't'
0000000000023611         db  0xc8 ; '.'
0000000000023612         db  0xfe ; '.'
0000000000023613         db  0xff ; '.'
0000000000023614         db  0x24 ; '$'
0000000000023615         db  0x28 ; '('
0000000000023616         db  0x00 ; '.'
0000000000023617         db  0x00 ; '.'
0000000000023618         db  0xf4 ; '.'
0000000000023619         db  0xcf ; '.'
000000000002361a         db  0xfe ; '.'
000000000002361b         db  0xff ; '.'
000000000002361c         db  0x88 ; '.'
000000000002361d         db  0x28 ; '('
000000000002361e         db  0x00 ; '.'
000000000002361f         db  0x00 ; '.'
0000000000023620         db  0x24 ; '$'
0000000000023621         db  0xd0 ; '.'
0000000000023622         db  0xfe ; '.'
0000000000023623         db  0xff ; '.'
0000000000023624         db  0xa0 ; '.'
0000000000023625         db  0x28 ; '('
0000000000023626         db  0x00 ; '.'
0000000000023627         db  0x00 ; '.'
0000000000023628         db  0x74 ; 't'
0000000000023629         db  0xd1 ; '.'
000000000002362a         db  0xfe ; '.'
000000000002362b         db  0xff ; '.'
000000000002362c         db  0x04 ; '.'
000000000002362d         db  0x29 ; ')'
000000000002362e         db  0x00 ; '.'
000000000002362f         db  0x00 ; '.'
0000000000023630         db  0x04 ; '.'
0000000000023631         db  0xd2 ; '.'
0000000000023632         db  0xfe ; '.'
0000000000023633         db  0xff ; '.'
0000000000023634         db  0x44 ; 'D'
0000000000023635         db  0x29 ; ')'
0000000000023636         db  0x00 ; '.'
0000000000023637         db  0x00 ; '.'
0000000000023638         db  0x94 ; '.'
0000000000023639         db  0xd2 ; '.'
000000000002363a         db  0xfe ; '.'
000000000002363b         db  0xff ; '.'
000000000002363c         db  0x60 ; '`'
000000000002363d         db  0x29 ; ')'
000000000002363e         db  0x00 ; '.'
000000000002363f         db  0x00 ; '.'
0000000000023640         db  0xd4 ; '.'
0000000000023641         db  0xd2 ; '.'
0000000000023642         db  0xfe ; '.'
0000000000023643         db  0xff ; '.'
0000000000023644         db  0x7c ; '|'
0000000000023645         db  0x29 ; ')'
0000000000023646         db  0x00 ; '.'
0000000000023647         db  0x00 ; '.'
0000000000023648         db  0x24 ; '$'
0000000000023649         db  0xdb ; '.'
000000000002364a         db  0xfe ; '.'
000000000002364b         db  0xff ; '.'
000000000002364c         db  0xf4 ; '.'
000000000002364d         db  0x29 ; ')'
000000000002364e         db  0x00 ; '.'
000000000002364f         db  0x00 ; '.'
0000000000023650         db  0x54 ; 'T'
0000000000023651         db  0xdc ; '.'
0000000000023652         db  0xfe ; '.'
0000000000023653         db  0xff ; '.'
0000000000023654         db  0x08 ; '.'
0000000000023655         db  0x2a ; '*'
0000000000023656         db  0x00 ; '.'
0000000000023657         db  0x00 ; '.'
0000000000023658         db  0x74 ; 't'
0000000000023659         db  0xdc ; '.'
000000000002365a         db  0xfe ; '.'
000000000002365b         db  0xff ; '.'
000000000002365c         db  0x1c ; '.'
000000000002365d         db  0x2a ; '*'
000000000002365e         db  0x00 ; '.'
000000000002365f         db  0x00 ; '.'
0000000000023660         db  0xa4 ; '.'
0000000000023661         db  0xde ; '.'
0000000000023662         db  0xfe ; '.'
0000000000023663         db  0xff ; '.'
0000000000023664         db  0xb0 ; '.'
0000000000023665         db  0x2a ; '*'
0000000000023666         db  0x00 ; '.'
0000000000023667         db  0x00 ; '.'
0000000000023668         db  0x14 ; '.'
0000000000023669         db  0xdf ; '.'
000000000002366a         db  0xfe ; '.'
000000000002366b         db  0xff ; '.'
000000000002366c         db  0xc4 ; '.'
000000000002366d         db  0x2a ; '*'
000000000002366e         db  0x00 ; '.'
000000000002366f         db  0x00 ; '.'
0000000000023670         db  0x84 ; '.'
0000000000023671         db  0xdf ; '.'
0000000000023672         db  0xfe ; '.'
0000000000023673         db  0xff ; '.'
0000000000023674         db  0xf0 ; '.'
0000000000023675         db  0x2a ; '*'
0000000000023676         db  0x00 ; '.'
0000000000023677         db  0x00 ; '.'
0000000000023678         db  0xe4 ; '.'
0000000000023679         db  0xdf ; '.'
000000000002367a         db  0xfe ; '.'
000000000002367b         db  0xff ; '.'
000000000002367c         db  0x1c ; '.'
000000000002367d         db  0x2b ; '+'
000000000002367e         db  0x00 ; '.'
000000000002367f         db  0x00 ; '.'
0000000000023680         db  0x84 ; '.'
0000000000023681         db  0xe0 ; '.'
0000000000023682         db  0xfe ; '.'
0000000000023683         db  0xff ; '.'
0000000000023684         db  0x50 ; 'P'
0000000000023685         db  0x2b ; '+'
0000000000023686         db  0x00 ; '.'
0000000000023687         db  0x00 ; '.'
0000000000023688         db  0xf4 ; '.'
0000000000023689         db  0xe0 ; '.'
000000000002368a         db  0xfe ; '.'
000000000002368b         db  0xff ; '.'
000000000002368c         db  0x7c ; '|'
000000000002368d         db  0x2b ; '+'
000000000002368e         db  0x00 ; '.'
000000000002368f         db  0x00 ; '.'
0000000000023690         db  0x24 ; '$'
0000000000023691         db  0xe2 ; '.'
0000000000023692         db  0xfe ; '.'
0000000000023693         db  0xff ; '.'
0000000000023694         db  0xb4 ; '.'
0000000000023695         db  0x2b ; '+'
0000000000023696         db  0x00 ; '.'
0000000000023697         db  0x00 ; '.'
0000000000023698         db  0x14 ; '.'
0000000000023699         db  0xe3 ; '.'
000000000002369a         db  0xfe ; '.'
000000000002369b         db  0xff ; '.'
000000000002369c         db  0x04 ; '.'
000000000002369d         db  0x2c ; ','
000000000002369e         db  0x00 ; '.'
000000000002369f         db  0x00 ; '.'
00000000000236a0         db  0x84 ; '.'
00000000000236a1         db  0xe3 ; '.'
00000000000236a2         db  0xfe ; '.'
00000000000236a3         db  0xff ; '.'
00000000000236a4         db  0x34 ; '4'
00000000000236a5         db  0x2c ; ','
00000000000236a6         db  0x00 ; '.'
00000000000236a7         db  0x00 ; '.'
00000000000236a8         db  0x54 ; 'T'
00000000000236a9         db  0xe5 ; '.'
00000000000236aa         db  0xfe ; '.'
00000000000236ab         db  0xff ; '.'
00000000000236ac         db  0x80 ; '.'
00000000000236ad         db  0x2c ; ','
00000000000236ae         db  0x00 ; '.'
00000000000236af         db  0x00 ; '.'
00000000000236b0         db  0x74 ; 't'
00000000000236b1         db  0xeb ; '.'
00000000000236b2         db  0xfe ; '.'
00000000000236b3         db  0xff ; '.'
00000000000236b4         db  0xcc ; '.'
00000000000236b5         db  0x2c ; ','
00000000000236b6         db  0x00 ; '.'
00000000000236b7         db  0x00 ; '.'
00000000000236b8         db  0xc4 ; '.'
00000000000236b9         db  0xec ; '.'
00000000000236ba         db  0xfe ; '.'
00000000000236bb         db  0xff ; '.'
00000000000236bc         db  0x28 ; '('
00000000000236bd         db  0x2d ; '-'
00000000000236be         db  0x00 ; '.'
00000000000236bf         db  0x00 ; '.'
00000000000236c0         db  0x54 ; 'T'
00000000000236c1         db  0xed ; '.'
00000000000236c2         db  0xfe ; '.'
00000000000236c3         db  0xff ; '.'
00000000000236c4         db  0x54 ; 'T'
00000000000236c5         db  0x2d ; '-'
00000000000236c6         db  0x00 ; '.'
00000000000236c7         db  0x00 ; '.'
00000000000236c8         db  0x84 ; '.'
00000000000236c9         db  0xed ; '.'
00000000000236ca         db  0xfe ; '.'
00000000000236cb         db  0xff ; '.'
00000000000236cc         db  0x70 ; 'p'
00000000000236cd         db  0x2d ; '-'
00000000000236ce         db  0x00 ; '.'
00000000000236cf         db  0x00 ; '.'
00000000000236d0         db  0xb4 ; '.'
00000000000236d1         db  0xed ; '.'
00000000000236d2         db  0xfe ; '.'
00000000000236d3         db  0xff ; '.'
00000000000236d4         db  0x84 ; '.'
00000000000236d5         db  0x2d ; '-'
00000000000236d6         db  0x00 ; '.'
00000000000236d7         db  0x00 ; '.'
00000000000236d8         db  0xd4 ; '.'
00000000000236d9         db  0xed ; '.'
00000000000236da         db  0xfe ; '.'
00000000000236db         db  0xff ; '.'
00000000000236dc         db  0x9c ; '.'
00000000000236dd         db  0x2d ; '-'
00000000000236de         db  0x00 ; '.'
00000000000236df         db  0x00 ; '.'
00000000000236e0         db  0xa4 ; '.'
00000000000236e1         db  0xef ; '.'
00000000000236e2         db  0xfe ; '.'
00000000000236e3         db  0xff ; '.'
00000000000236e4         db  0xe8 ; '.'
00000000000236e5         db  0x2d ; '-'
00000000000236e6         db  0x00 ; '.'
00000000000236e7         db  0x00 ; '.'
00000000000236e8         db  0x44 ; 'D'
00000000000236e9         db  0xf0 ; '.'
00000000000236ea         db  0xfe ; '.'
00000000000236eb         db  0xff ; '.'
00000000000236ec         db  0x20 ; ' '
00000000000236ed         db  0x2e ; '.'
00000000000236ee         db  0x00 ; '.'
00000000000236ef         db  0x00 ; '.'
00000000000236f0         db  0xc4 ; '.'
00000000000236f1         db  0xf2 ; '.'
00000000000236f2         db  0xfe ; '.'
00000000000236f3         db  0xff ; '.'
00000000000236f4         db  0x6c ; 'l'
00000000000236f5         db  0x2e ; '.'
00000000000236f6         db  0x00 ; '.'
00000000000236f7         db  0x00 ; '.'
00000000000236f8         db  0x24 ; '$'
00000000000236f9         db  0xf3 ; '.'
00000000000236fa         db  0xfe ; '.'
00000000000236fb         db  0xff ; '.'
00000000000236fc         db  0x88 ; '.'
00000000000236fd         db  0x2e ; '.'
00000000000236fe         db  0x00 ; '.'
00000000000236ff         db  0x00 ; '.'
0000000000023700         db  0x64 ; 'd'
0000000000023701         db  0xf3 ; '.'
0000000000023702         db  0xfe ; '.'
0000000000023703         db  0xff ; '.'
0000000000023704         db  0xa8 ; '.'
0000000000023705         db  0x2e ; '.'
0000000000023706         db  0x00 ; '.'
0000000000023707         db  0x00 ; '.'
0000000000023708         db  0xc4 ; '.'
0000000000023709         db  0xf4 ; '.'
000000000002370a         db  0xfe ; '.'
000000000002370b         db  0xff ; '.'
000000000002370c         db  0xe4 ; '.'
000000000002370d         db  0x2e ; '.'
000000000002370e         db  0x00 ; '.'
000000000002370f         db  0x00 ; '.'
0000000000023710         db  0x84 ; '.'
0000000000023711         db  0xf5 ; '.'
0000000000023712         db  0xfe ; '.'
0000000000023713         db  0xff ; '.'
0000000000023714         db  0x20 ; ' '
0000000000023715         db  0x2f ; '/'
0000000000023716         db  0x00 ; '.'
0000000000023717         db  0x00 ; '.'
0000000000023718         db  0xd4 ; '.'
0000000000023719         db  0xf5 ; '.'
000000000002371a         db  0xfe ; '.'
000000000002371b         db  0xff ; '.'
000000000002371c         db  0x34 ; '4'
000000000002371d         db  0x2f ; '/'
000000000002371e         db  0x00 ; '.'
000000000002371f         db  0x00 ; '.'
0000000000023720         db  0x34 ; '4'
0000000000023721         db  0xf6 ; '.'
0000000000023722         db  0xfe ; '.'
0000000000023723         db  0xff ; '.'
0000000000023724         db  0x48 ; 'H'
0000000000023725         db  0x2f ; '/'
0000000000023726         db  0x00 ; '.'
0000000000023727         db  0x00 ; '.'
0000000000023728         db  0xb4 ; '.'
0000000000023729         db  0xf6 ; '.'
000000000002372a         db  0xfe ; '.'
000000000002372b         db  0xff ; '.'
000000000002372c         db  0x5c ; '\'
000000000002372d         db  0x2f ; '/'
000000000002372e         db  0x00 ; '.'
000000000002372f         db  0x00 ; '.'
0000000000023730         db  0xb4 ; '.'
0000000000023731         db  0xf7 ; '.'
0000000000023732         db  0xfe ; '.'
0000000000023733         db  0xff ; '.'
0000000000023734         db  0xc0 ; '.'
0000000000023735         db  0x2f ; '/'
0000000000023736         db  0x00 ; '.'
0000000000023737         db  0x00 ; '.'
0000000000023738         db  0xf4 ; '.'
0000000000023739         db  0xf7 ; '.'
000000000002373a         db  0xfe ; '.'
000000000002373b         db  0xff ; '.'
000000000002373c         db  0xd4 ; '.'
000000000002373d         db  0x2f ; '/'
000000000002373e         db  0x00 ; '.'
000000000002373f         db  0x00 ; '.'
0000000000023740         db  0x84 ; '.'
0000000000023741         db  0xf8 ; '.'
0000000000023742         db  0xfe ; '.'
0000000000023743         db  0xff ; '.'
0000000000023744         db  0xe8 ; '.'
0000000000023745         db  0x2f ; '/'
0000000000023746         db  0x00 ; '.'
0000000000023747         db  0x00 ; '.'
0000000000023748         db  0xe4 ; '.'
0000000000023749         db  0xf8 ; '.'
000000000002374a         db  0xfe ; '.'
000000000002374b         db  0xff ; '.'
000000000002374c         db  0xfc ; '.'
000000000002374d         db  0x2f ; '/'
000000000002374e         db  0x00 ; '.'
000000000002374f         db  0x00 ; '.'
0000000000023750         db  0x54 ; 'T'
0000000000023751         db  0xfb ; '.'
0000000000023752         db  0xfe ; '.'
0000000000023753         db  0xff ; '.'
0000000000023754         db  0x4c ; 'L'
0000000000023755         db  0x30 ; '0'
0000000000023756         db  0x00 ; '.'
0000000000023757         db  0x00 ; '.'
0000000000023758         db  0x34 ; '4'
0000000000023759         db  0xfd ; '.'
000000000002375a         db  0xfe ; '.'
000000000002375b         db  0xff ; '.'
000000000002375c         db  0x84 ; '.'
000000000002375d         db  0x30 ; '0'
000000000002375e         db  0x00 ; '.'
000000000002375f         db  0x00 ; '.'
0000000000023760         db  0xe4 ; '.'
0000000000023761         db  0xff ; '.'
0000000000023762         db  0xfe ; '.'
0000000000023763         db  0xff ; '.'
0000000000023764         db  0xd4 ; '.'
0000000000023765         db  0x30 ; '0'
0000000000023766         db  0x00 ; '.'
0000000000023767         db  0x00 ; '.'
0000000000023768         db  0x44 ; 'D'
0000000000023769         db  0x01 ; '.'
000000000002376a         db  0xff ; '.'
000000000002376b         db  0xff ; '.'
000000000002376c         db  0x20 ; ' '
000000000002376d         db  0x31 ; '1'
000000000002376e         db  0x00 ; '.'
000000000002376f         db  0x00 ; '.'
0000000000023770         db  0xf4 ; '.'
0000000000023771         db  0x02 ; '.'
0000000000023772         db  0xff ; '.'
0000000000023773         db  0xff ; '.'
0000000000023774         db  0x70 ; 'p'
0000000000023775         db  0x31 ; '1'
0000000000023776         db  0x00 ; '.'
0000000000023777         db  0x00 ; '.'
0000000000023778         db  0xd4 ; '.'
0000000000023779         db  0x03 ; '.'
000000000002377a         db  0xff ; '.'
000000000002377b         db  0xff ; '.'
000000000002377c         db  0x94 ; '.'
000000000002377d         db  0x31 ; '1'
000000000002377e         db  0x00 ; '.'
000000000002377f         db  0x00 ; '.'
0000000000023780         db  0xb4 ; '.'
0000000000023781         db  0x04 ; '.'
0000000000023782         db  0xff ; '.'
0000000000023783         db  0xff ; '.'
0000000000023784         db  0xd8 ; '.'
0000000000023785         db  0x31 ; '1'
0000000000023786         db  0x00 ; '.'
0000000000023787         db  0x00 ; '.'
0000000000023788         db  0xf4 ; '.'
0000000000023789         db  0x06 ; '.'
000000000002378a         db  0xff ; '.'
000000000002378b         db  0xff ; '.'
000000000002378c         db  0x28 ; '('
000000000002378d         db  0x32 ; '2'
000000000002378e         db  0x00 ; '.'
000000000002378f         db  0x00 ; '.'
0000000000023790         db  0x94 ; '.'
0000000000023791         db  0x07 ; '.'
0000000000023792         db  0xff ; '.'
0000000000023793         db  0xff ; '.'
0000000000023794         db  0x54 ; 'T'
0000000000023795         db  0x32 ; '2'
0000000000023796         db  0x00 ; '.'
0000000000023797         db  0x00 ; '.'
0000000000023798         db  0x24 ; '$'
0000000000023799         db  0x08 ; '.'
000000000002379a         db  0xff ; '.'
000000000002379b         db  0xff ; '.'
000000000002379c         db  0x90 ; '.'
000000000002379d         db  0x32 ; '2'
000000000002379e         db  0x00 ; '.'
000000000002379f         db  0x00 ; '.'
00000000000237a0         db  0x84 ; '.'
00000000000237a1         db  0x09 ; '.'
00000000000237a2         db  0xff ; '.'
00000000000237a3         db  0xff ; '.'
00000000000237a4         db  0xf4 ; '.'
00000000000237a5         db  0x32 ; '2'
00000000000237a6         db  0x00 ; '.'
00000000000237a7         db  0x00 ; '.'
00000000000237a8         db  0x44 ; 'D'
00000000000237a9         db  0x0c ; '.'
00000000000237aa         db  0xff ; '.'
00000000000237ab         db  0xff ; '.'
00000000000237ac         db  0x40 ; '@'
00000000000237ad         db  0x33 ; '3'
00000000000237ae         db  0x00 ; '.'
00000000000237af         db  0x00 ; '.'
00000000000237b0         db  0x44 ; 'D'
00000000000237b1         db  0x0e ; '.'
00000000000237b2         db  0xff ; '.'
00000000000237b3         db  0xff ; '.'
00000000000237b4         db  0x8c ; '.'
00000000000237b5         db  0x33 ; '3'
00000000000237b6         db  0x00 ; '.'
00000000000237b7         db  0x00 ; '.'
00000000000237b8         db  0x24 ; '$'
00000000000237b9         db  0x0f ; '.'
00000000000237ba         db  0xff ; '.'
00000000000237bb         db  0xff ; '.'
00000000000237bc         db  0xd8 ; '.'
00000000000237bd         db  0x33 ; '3'
00000000000237be         db  0x00 ; '.'
00000000000237bf         db  0x00 ; '.'
00000000000237c0         db  0xc4 ; '.'
00000000000237c1         db  0x12 ; '.'
00000000000237c2         db  0xff ; '.'
00000000000237c3         db  0xff ; '.'
00000000000237c4         db  0x24 ; '$'
00000000000237c5         db  0x34 ; '4'
00000000000237c6         db  0x00 ; '.'
00000000000237c7         db  0x00 ; '.'
00000000000237c8         db  0x14 ; '.'
00000000000237c9         db  0x14 ; '.'
00000000000237ca         db  0xff ; '.'
00000000000237cb         db  0xff ; '.'
00000000000237cc         db  0x70 ; 'p'
00000000000237cd         db  0x34 ; '4'
00000000000237ce         db  0x00 ; '.'
00000000000237cf         db  0x00 ; '.'
00000000000237d0         db  0x04 ; '.'
00000000000237d1         db  0x15 ; '.'
00000000000237d2         db  0xff ; '.'
00000000000237d3         db  0xff ; '.'
00000000000237d4         db  0xb4 ; '.'
00000000000237d5         db  0x34 ; '4'
00000000000237d6         db  0x00 ; '.'
00000000000237d7         db  0x00 ; '.'
00000000000237d8         db  0x14 ; '.'
00000000000237d9         db  0x16 ; '.'
00000000000237da         db  0xff ; '.'
00000000000237db         db  0xff ; '.'
00000000000237dc         db  0xdc ; '.'
00000000000237dd         db  0x34 ; '4'
00000000000237de         db  0x00 ; '.'
00000000000237df         db  0x00 ; '.'
00000000000237e0         db  0xe4 ; '.'
00000000000237e1         db  0x16 ; '.'
00000000000237e2         db  0xff ; '.'
00000000000237e3         db  0xff ; '.'
00000000000237e4         db  0x14 ; '.'
00000000000237e5         db  0x35 ; '5'
00000000000237e6         db  0x00 ; '.'
00000000000237e7         db  0x00 ; '.'
00000000000237e8         db  0x84 ; '.'
00000000000237e9         db  0x1e ; '.'
00000000000237ea         db  0xff ; '.'
00000000000237eb         db  0xff ; '.'
00000000000237ec         db  0x64 ; 'd'
00000000000237ed         db  0x35 ; '5'
00000000000237ee         db  0x00 ; '.'
00000000000237ef         db  0x00 ; '.'
00000000000237f0         db  0xc4 ; '.'
00000000000237f1         db  0x20 ; ' '
00000000000237f2         db  0xff ; '.'
00000000000237f3         db  0xff ; '.'
00000000000237f4         db  0xb4 ; '.'
00000000000237f5         db  0x35 ; '5'
00000000000237f6         db  0x00 ; '.'
00000000000237f7         db  0x00 ; '.'
00000000000237f8         db  0x64 ; 'd'
00000000000237f9         db  0x2c ; ','
00000000000237fa         db  0xff ; '.'
00000000000237fb         db  0xff ; '.'
00000000000237fc         db  0x04 ; '.'
00000000000237fd         db  0x36 ; '6'
00000000000237fe         db  0x00 ; '.'
00000000000237ff         db  0x00 ; '.'
0000000000023800         db  0xf4 ; '.'
0000000000023801         db  0x2c ; ','
0000000000023802         db  0xff ; '.'
0000000000023803         db  0xff ; '.'
0000000000023804         db  0x38 ; '8'
0000000000023805         db  0x36 ; '6'
0000000000023806         db  0x00 ; '.'
0000000000023807         db  0x00 ; '.'
0000000000023808         db  0x44 ; 'D'
0000000000023809         db  0x2d ; '-'
000000000002380a         db  0xff ; '.'
000000000002380b         db  0xff ; '.'
000000000002380c         db  0x64 ; 'd'
000000000002380d         db  0x36 ; '6'
000000000002380e         db  0x00 ; '.'
000000000002380f         db  0x00 ; '.'
0000000000023810         db  0xe4 ; '.'
0000000000023811         db  0x2d ; '-'
0000000000023812         db  0xff ; '.'
0000000000023813         db  0xff ; '.'
0000000000023814         db  0x94 ; '.'
0000000000023815         db  0x36 ; '6'
0000000000023816         db  0x00 ; '.'
0000000000023817         db  0x00 ; '.'
0000000000023818         db  0x34 ; '4'
0000000000023819         db  0x2e ; '.'
000000000002381a         db  0xff ; '.'
000000000002381b         db  0xff ; '.'
000000000002381c         db  0xc8 ; '.'
000000000002381d         db  0x36 ; '6'
000000000002381e         db  0x00 ; '.'
000000000002381f         db  0x00 ; '.'
0000000000023820         db  0x44 ; 'D'
0000000000023821         db  0x36 ; '6'
0000000000023822         db  0xff ; '.'
0000000000023823         db  0xff ; '.'
0000000000023824         db  0x0c ; '.'
0000000000023825         db  0x37 ; '7'
0000000000023826         db  0x00 ; '.'
0000000000023827         db  0x00 ; '.'
0000000000023828         db  0xb4 ; '.'
0000000000023829         db  0x38 ; '8'
000000000002382a         db  0xff ; '.'
000000000002382b         db  0xff ; '.'
000000000002382c         db  0x6c ; 'l'
000000000002382d         db  0x37 ; '7'
000000000002382e         db  0x00 ; '.'
000000000002382f         db  0x00 ; '.'
0000000000023830         db  0xe4 ; '.'
0000000000023831         db  0x3d ; '='
0000000000023832         db  0xff ; '.'
0000000000023833         db  0xff ; '.'
0000000000023834         db  0xbc ; '.'
0000000000023835         db  0x37 ; '7'
0000000000023836         db  0x00 ; '.'
0000000000023837         db  0x00 ; '.'
0000000000023838         db  0x44 ; 'D'
0000000000023839         db  0x40 ; '@'
000000000002383a         db  0xff ; '.'
000000000002383b         db  0xff ; '.'
000000000002383c         db  0xf8 ; '.'
000000000002383d         db  0x37 ; '7'
000000000002383e         db  0x00 ; '.'
000000000002383f         db  0x00 ; '.'
0000000000023840         db  0xa4 ; '.'
0000000000023841         db  0x47 ; 'G'
0000000000023842         db  0xff ; '.'
0000000000023843         db  0xff ; '.'
0000000000023844         db  0x48 ; 'H'
0000000000023845         db  0x38 ; '8'
0000000000023846         db  0x00 ; '.'
0000000000023847         db  0x00 ; '.'
0000000000023848         db  0x94 ; '.'
0000000000023849         db  0x50 ; 'P'
000000000002384a         db  0xff ; '.'
000000000002384b         db  0xff ; '.'
000000000002384c         db  0x78 ; 'x'
000000000002384d         db  0x38 ; '8'
000000000002384e         db  0x00 ; '.'
000000000002384f         db  0x00 ; '.'
0000000000023850         db  0x34 ; '4'
0000000000023851         db  0x52 ; 'R'
0000000000023852         db  0xff ; '.'
0000000000023853         db  0xff ; '.'
0000000000023854         db  0xe4 ; '.'
0000000000023855         db  0x38 ; '8'
0000000000023856         db  0x00 ; '.'
0000000000023857         db  0x00 ; '.'
0000000000023858         db  0x24 ; '$'
0000000000023859         db  0x5b ; '['
000000000002385a         db  0xff ; '.'
000000000002385b         db  0xff ; '.'
000000000002385c         db  0x44 ; 'D'
000000000002385d         db  0x39 ; '9'
000000000002385e         db  0x00 ; '.'
000000000002385f         db  0x00 ; '.'
0000000000023860         db  0x14 ; '.'
0000000000023861         db  0x5d ; ']'
0000000000023862         db  0xff ; '.'
0000000000023863         db  0xff ; '.'
0000000000023864         db  0x90 ; '.'
0000000000023865         db  0x39 ; '9'
0000000000023866         db  0x00 ; '.'
0000000000023867         db  0x00 ; '.'
0000000000023868         db  0x54 ; 'T'
0000000000023869         db  0x60 ; '`'
000000000002386a         db  0xff ; '.'
000000000002386b         db  0xff ; '.'
000000000002386c         db  0xf0 ; '.'
000000000002386d         db  0x39 ; '9'
000000000002386e         db  0x00 ; '.'
000000000002386f         db  0x00 ; '.'
0000000000023870         db  0x84 ; '.'
0000000000023871         db  0x77 ; 'w'
0000000000023872         db  0xff ; '.'
0000000000023873         db  0xff ; '.'
0000000000023874         db  0x40 ; '@'
0000000000023875         db  0x3a ; ':'
0000000000023876         db  0x00 ; '.'
0000000000023877         db  0x00 ; '.'
0000000000023878         db  0xd4 ; '.'
0000000000023879         db  0x7f ; '.'
000000000002387a         db  0xff ; '.'
000000000002387b         db  0xff ; '.'
000000000002387c         db  0xa0 ; '.'
000000000002387d         db  0x3a ; ':'
000000000002387e         db  0x00 ; '.'
000000000002387f         db  0x00 ; '.'
0000000000023880         db  0x34 ; '4'
0000000000023881         db  0x82 ; '.'
0000000000023882         db  0xff ; '.'
0000000000023883         db  0xff ; '.'
0000000000023884         db  0xe4 ; '.'
0000000000023885         db  0x3a ; ':'
0000000000023886         db  0x00 ; '.'
0000000000023887         db  0x00 ; '.'
0000000000023888         db  0x34 ; '4'
0000000000023889         db  0x89 ; '.'
000000000002388a         db  0xff ; '.'
000000000002388b         db  0xff ; '.'
000000000002388c         db  0x30 ; '0'
000000000002388d         db  0x3b ; ';'
000000000002388e         db  0x00 ; '.'
000000000002388f         db  0x00 ; '.'
0000000000023890         db  0xf4 ; '.'
0000000000023891         db  0x89 ; '.'
0000000000023892         db  0xff ; '.'
0000000000023893         db  0xff ; '.'
0000000000023894         db  0x70 ; 'p'
0000000000023895         db  0x3b ; ';'
0000000000023896         db  0x00 ; '.'
0000000000023897         db  0x00 ; '.'
0000000000023898         db  0xd4 ; '.'
0000000000023899         db  0x9e ; '.'
000000000002389a         db  0xff ; '.'
000000000002389b         db  0xff ; '.'
000000000002389c         db  0xd0 ; '.'
000000000002389d         db  0x3b ; ';'
000000000002389e         db  0x00 ; '.'
000000000002389f         db  0x00 ; '.'
00000000000238a0         db  0x64 ; 'd'
00000000000238a1         db  0xa0 ; '.'
00000000000238a2         db  0xff ; '.'
00000000000238a3         db  0xff ; '.'
00000000000238a4         db  0x1c ; '.'
00000000000238a5         db  0x3c ; '<'
00000000000238a6         db  0x00 ; '.'
00000000000238a7         db  0x00 ; '.'
00000000000238a8         db  0xe4 ; '.'
00000000000238a9         db  0xa1 ; '.'
00000000000238aa         db  0xff ; '.'
00000000000238ab         db  0xff ; '.'
00000000000238ac         db  0x6c ; 'l'
00000000000238ad         db  0x3c ; '<'
00000000000238ae         db  0x00 ; '.'
00000000000238af         db  0x00 ; '.'
00000000000238b0         db  0xe4 ; '.'
00000000000238b1         db  0xb2 ; '.'
00000000000238b2         db  0xff ; '.'
00000000000238b3         db  0xff ; '.'
00000000000238b4         db  0xbc ; '.'
00000000000238b5         db  0x3c ; '<'
00000000000238b6         db  0x00 ; '.'
00000000000238b7         db  0x00 ; '.'
00000000000238b8         db  0x54 ; 'T'
00000000000238b9         db  0xb3 ; '.'
00000000000238ba         db  0xff ; '.'
00000000000238bb         db  0xff ; '.'
00000000000238bc         db  0xdc ; '.'
00000000000238bd         db  0x3c ; '<'
00000000000238be         db  0x00 ; '.'
00000000000238bf         db  0x00 ; '.'
00000000000238c0         db  0x64 ; 'd'
00000000000238c1         db  0xb3 ; '.'
00000000000238c2         db  0xff ; '.'
00000000000238c3         db  0xff ; '.'
00000000000238c4         db  0xf0 ; '.'
00000000000238c5         db  0x3c ; '<'
00000000000238c6         db  0x00 ; '.'
00000000000238c7         db  0x00 ; '.'
00000000000238c8         db  0x34 ; '4'
00000000000238c9         db  0xb4 ; '.'
00000000000238ca         db  0xff ; '.'
00000000000238cb         db  0xff ; '.'
00000000000238cc         db  0x1c ; '.'
00000000000238cd         db  0x3d ; '='
00000000000238ce         db  0x00 ; '.'
00000000000238cf         db  0x00 ; '.'
00000000000238d0         db  0xb4 ; '.'
00000000000238d1         db  0xb8 ; '.'
00000000000238d2         db  0xff ; '.'
00000000000238d3         db  0xff ; '.'
00000000000238d4         db  0x7c ; '|'
00000000000238d5         db  0x3d ; '='
00000000000238d6         db  0x00 ; '.'
00000000000238d7         db  0x00 ; '.'
00000000000238d8         db  0xd4 ; '.'
00000000000238d9         db  0xb9 ; '.'
00000000000238da         db  0xff ; '.'
00000000000238db         db  0xff ; '.'
00000000000238dc         db  0xd4 ; '.'
00000000000238dd         db  0x3d ; '='
00000000000238de         db  0x00 ; '.'
00000000000238df         db  0x00 ; '.'
00000000000238e0         db  0xe4 ; '.'
00000000000238e1         db  0xba ; '.'
00000000000238e2         db  0xff ; '.'
00000000000238e3         db  0xff ; '.'
00000000000238e4         db  0x20 ; ' '
00000000000238e5         db  0x3e ; '>'
00000000000238e6         db  0x00 ; '.'
00000000000238e7         db  0x00 ; '.'
00000000000238e8         db  0x74 ; 't'
00000000000238e9         db  0xbb ; '.'
00000000000238ea         db  0xff ; '.'
00000000000238eb         db  0xff ; '.'
00000000000238ec         db  0x5c ; '\'
00000000000238ed         db  0x3e ; '>'
00000000000238ee         db  0x00 ; '.'
00000000000238ef         db  0x00 ; '.'
00000000000238f0         db  0xc4 ; '.'
00000000000238f1         db  0xbb ; '.'
00000000000238f2         db  0xff ; '.'
00000000000238f3         db  0xff ; '.'
00000000000238f4         db  0x78 ; 'x'
00000000000238f5         db  0x3e ; '>'
00000000000238f6         db  0x00 ; '.'
00000000000238f7         db  0x00 ; '.'
00000000000238f8         db  0x64 ; 'd'
00000000000238f9         db  0xbc ; '.'
00000000000238fa         db  0xff ; '.'
00000000000238fb         db  0xff ; '.'
00000000000238fc         db  0xd4 ; '.'
00000000000238fd         db  0x3e ; '>'
00000000000238fe         db  0x00 ; '.'
00000000000238ff         db  0x00 ; '.'
0000000000023900         db  0x84 ; '.'
0000000000023901         db  0xbc ; '.'
0000000000023902         db  0xff ; '.'
0000000000023903         db  0xff ; '.'
0000000000023904         db  0xf4 ; '.'
0000000000023905         db  0x3e ; '>'
0000000000023906         db  0x00 ; '.'
0000000000023907         db  0x00 ; '.'
0000000000023908         db  0xa4 ; '.'
0000000000023909         db  0xbc ; '.'
000000000002390a         db  0xff ; '.'
000000000002390b         db  0xff ; '.'
000000000002390c         db  0x14 ; '.'
000000000002390d         db  0x3f ; '?'
000000000002390e         db  0x00 ; '.'
000000000002390f         db  0x00 ; '.'
0000000000023910         db  0xc4 ; '.'
0000000000023911         db  0xbc ; '.'
0000000000023912         db  0xff ; '.'
0000000000023913         db  0xff ; '.'
0000000000023914         db  0x38 ; '8'
0000000000023915         db  0x3f ; '?'
0000000000023916         db  0x00 ; '.'
0000000000023917         db  0x00 ; '.'
0000000000023918         db  0xe4 ; '.'
0000000000023919         db  0xbc ; '.'
000000000002391a         db  0xff ; '.'
000000000002391b         db  0xff ; '.'
000000000002391c         db  0x5c ; '\'
000000000002391d         db  0x3f ; '?'
000000000002391e         db  0x00 ; '.'
000000000002391f         db  0x00 ; '.'
0000000000023920         db  0x34 ; '4'
0000000000023921         db  0xbd ; '.'
0000000000023922         db  0xff ; '.'
0000000000023923         db  0xff ; '.'
0000000000023924         db  0x74 ; 't'
0000000000023925         db  0x3f ; '?'
0000000000023926         db  0x00 ; '.'
0000000000023927         db  0x00 ; '.'
0000000000023928         db  0x64 ; 'd'
0000000000023929         db  0xbd ; '.'
000000000002392a         db  0xff ; '.'
000000000002392b         db  0xff ; '.'
000000000002392c         db  0x88 ; '.'
000000000002392d         db  0x3f ; '?'
000000000002392e         db  0x00 ; '.'
000000000002392f         db  0x00 ; '.'
0000000000023930         db  0x94 ; '.'
0000000000023931         db  0xbd ; '.'
0000000000023932         db  0xff ; '.'
0000000000023933         db  0xff ; '.'
0000000000023934         db  0xa4 ; '.'
0000000000023935         db  0x3f ; '?'
0000000000023936         db  0x00 ; '.'
0000000000023937         db  0x00 ; '.'
0000000000023938         db  0xf4 ; '.'
0000000000023939         db  0xbd ; '.'
000000000002393a         db  0xff ; '.'
000000000002393b         db  0xff ; '.'
000000000002393c         db  0xe0 ; '.'
000000000002393d         db  0x3f ; '?'
000000000002393e         db  0x00 ; '.'
000000000002393f         db  0x00 ; '.'
0000000000023940         db  0x84 ; '.'
0000000000023941         db  0xbe ; '.'
0000000000023942         db  0xff ; '.'
0000000000023943         db  0xff ; '.'
0000000000023944         db  0x18 ; '.'
0000000000023945         db  0x40 ; '@'
0000000000023946         db  0x00 ; '.'
0000000000023947         db  0x00 ; '.'
0000000000023948         db  0xc4 ; '.'
0000000000023949         db  0xbf ; '.'
000000000002394a         db  0xff ; '.'
000000000002394b         db  0xff ; '.'
000000000002394c         db  0x64 ; 'd'
000000000002394d         db  0x40 ; '@'
000000000002394e         db  0x00 ; '.'
000000000002394f         db  0x00 ; '.'
0000000000023950         db  0xa4 ; '.'
0000000000023951         db  0xc0 ; '.'
0000000000023952         db  0xff ; '.'
0000000000023953         db  0xff ; '.'
0000000000023954         db  0xb8 ; '.'
0000000000023955         db  0x40 ; '@'
0000000000023956         db  0x00 ; '.'
0000000000023957         db  0x00 ; '.'
0000000000023958         db  0xb4 ; '.'
0000000000023959         db  0xc0 ; '.'
000000000002395a         db  0xff ; '.'
000000000002395b         db  0xff ; '.'
000000000002395c         db  0xcc ; '.'
000000000002395d         db  0x40 ; '@'
000000000002395e         db  0x00 ; '.'
000000000002395f         db  0x00 ; '.'
0000000000023960         db  0x64 ; 'd'
0000000000023961         db  0xc1 ; '.'
0000000000023962         db  0xff ; '.'
0000000000023963         db  0xff ; '.'
0000000000023964         db  0x2c ; ','
0000000000023965         db  0x41 ; 'A'
0000000000023966         db  0x00 ; '.'
0000000000023967         db  0x00 ; '.'
0000000000023968         db  0xb4 ; '.'
0000000000023969         db  0xc2 ; '.'
000000000002396a         db  0xff ; '.'
000000000002396b         db  0xff ; '.'
000000000002396c         db  0x64 ; 'd'
000000000002396d         db  0x41 ; 'A'
000000000002396e         db  0x00 ; '.'
000000000002396f         db  0x00 ; '.'
0000000000023970         db  0x34 ; '4'
0000000000023971         db  0xc3 ; '.'
0000000000023972         db  0xff ; '.'
0000000000023973         db  0xff ; '.'
0000000000023974         db  0xb4 ; '.'
0000000000023975         db  0x41 ; 'A'
0000000000023976         db  0x00 ; '.'
0000000000023977         db  0x00 ; '.'
0000000000023978         db  0x44 ; 'D'
0000000000023979         db  0xc3 ; '.'
000000000002397a         db  0xff ; '.'
000000000002397b         db  0xff ; '.'
000000000002397c         db  0xc8 ; '.'
000000000002397d         db  0x41 ; 'A'
000000000002397e         db  0x00 ; '.'
000000000002397f         db  0x00 ; '.'
0000000000023980         db  0xd4 ; '.'
0000000000023981         db  0xc3 ; '.'
0000000000023982         db  0xff ; '.'
0000000000023983         db  0xff ; '.'
0000000000023984         db  0xe4 ; '.'
0000000000023985         db  0x41 ; 'A'
0000000000023986         db  0x00 ; '.'
0000000000023987         db  0x00 ; '.'
0000000000023988         db  0x44 ; 'D'
0000000000023989         db  0xc4 ; '.'
000000000002398a         db  0xff ; '.'
000000000002398b         db  0xff ; '.'
000000000002398c         db  0x04 ; '.'
000000000002398d         db  0x42 ; 'B'
000000000002398e         db  0x00 ; '.'
000000000002398f         db  0x00 ; '.'
0000000000023990         db  0xa4 ; '.'
0000000000023991         db  0xc4 ; '.'
0000000000023992         db  0xff ; '.'
0000000000023993         db  0xff ; '.'
0000000000023994         db  0x24 ; '$'
0000000000023995         db  0x42 ; 'B'
0000000000023996         db  0x00 ; '.'
0000000000023997         db  0x00 ; '.'
0000000000023998         db  0xc4 ; '.'
0000000000023999         db  0xc4 ; '.'
000000000002399a         db  0xff ; '.'
000000000002399b         db  0xff ; '.'
000000000002399c         db  0x38 ; '8'
000000000002399d         db  0x42 ; 'B'
000000000002399e         db  0x00 ; '.'
000000000002399f         db  0x00 ; '.'
00000000000239a0         db  0xd4 ; '.'
00000000000239a1         db  0xc4 ; '.'
00000000000239a2         db  0xff ; '.'
00000000000239a3         db  0xff ; '.'
00000000000239a4         db  0x4c ; 'L'
00000000000239a5         db  0x42 ; 'B'
00000000000239a6         db  0x00 ; '.'
00000000000239a7         db  0x00 ; '.'
00000000000239a8         db  0x14 ; '.'
00000000000239a9         db  0xc5 ; '.'
00000000000239aa         db  0xff ; '.'
00000000000239ab         db  0xff ; '.'
00000000000239ac         db  0x60 ; '`'
00000000000239ad         db  0x42 ; 'B'
00000000000239ae         db  0x00 ; '.'
00000000000239af         db  0x00 ; '.'
00000000000239b0         db  0x54 ; 'T'
00000000000239b1         db  0xc5 ; '.'
00000000000239b2         db  0xff ; '.'
00000000000239b3         db  0xff ; '.'
00000000000239b4         db  0x74 ; 't'
00000000000239b5         db  0x42 ; 'B'
00000000000239b6         db  0x00 ; '.'
00000000000239b7         db  0x00 ; '.'
00000000000239b8         db  0x94 ; '.'
00000000000239b9         db  0xc5 ; '.'
00000000000239ba         db  0xff ; '.'
00000000000239bb         db  0xff ; '.'
00000000000239bc         db  0x94 ; '.'
00000000000239bd         db  0x42 ; 'B'
00000000000239be         db  0x00 ; '.'
00000000000239bf         db  0x00 ; '.'
00000000000239c0         db  0x04 ; '.'
00000000000239c1         db  0xc6 ; '.'
00000000000239c2         db  0xff ; '.'
00000000000239c3         db  0xff ; '.'
00000000000239c4         db  0xb4 ; '.'
00000000000239c5         db  0x42 ; 'B'
00000000000239c6         db  0x00 ; '.'
00000000000239c7         db  0x00 ; '.'
00000000000239c8         db  0x84 ; '.'
00000000000239c9         db  0xc6 ; '.'
00000000000239ca         db  0xff ; '.'
00000000000239cb         db  0xff ; '.'
00000000000239cc         db  0x14 ; '.'
00000000000239cd         db  0x43 ; 'C'
00000000000239ce         db  0x00 ; '.'
00000000000239cf         db  0x00 ; '.'
00000000000239d0         db  0xc4 ; '.'
00000000000239d1         db  0xc6 ; '.'
00000000000239d2         db  0xff ; '.'
00000000000239d3         db  0xff ; '.'
00000000000239d4         db  0x4c ; 'L'
00000000000239d5         db  0x43 ; 'C'
00000000000239d6         db  0x00 ; '.'
00000000000239d7         db  0x00 ; '.'
00000000000239d8         db  0x44 ; 'D'
00000000000239d9         db  0xc9 ; '.'
00000000000239da         db  0xff ; '.'
00000000000239db         db  0xff ; '.'
00000000000239dc         db  0x84 ; '.'
00000000000239dd         db  0x43 ; 'C'
00000000000239de         db  0x00 ; '.'
00000000000239df         db  0x00 ; '.'
00000000000239e0         db  0x54 ; 'T'
00000000000239e1         db  0xc9 ; '.'
00000000000239e2         db  0xff ; '.'
00000000000239e3         db  0xff ; '.'
00000000000239e4         db  0x9c ; '.'
00000000000239e5         db  0x43 ; 'C'
00000000000239e6         db  0x00 ; '.'
00000000000239e7         db  0x00 ; '.'
00000000000239e8         db  0xc4 ; '.'
00000000000239e9         db  0xc9 ; '.'
00000000000239ea         db  0xff ; '.'
00000000000239eb         db  0xff ; '.'
00000000000239ec         db  0xe4 ; '.'
00000000000239ed         db  0x43 ; 'C'
00000000000239ee         db  0x00 ; '.'
00000000000239ef         db  0x00 ; '.'
00000000000239f0         db  0xd4 ; '.'
00000000000239f1         db  0xc9 ; '.'
00000000000239f2         db  0xff ; '.'
00000000000239f3         db  0xff ; '.'
00000000000239f4         db  0xfc ; '.'
00000000000239f5         db  0x43 ; 'C'
00000000000239f6         db  0x00 ; '.'
00000000000239f7         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x239f8; 0x27480[ (14984 bytes)
        ; File offset : [145912; 160896[ (14984 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000239f8         dd         0x00000014                                  ; Length of the record
00000000000239fc         dd         0x00000000                                  ; CIE ID
0000000000023a00         db         0x01                                        ; Version
0000000000023a01         db         "zR", 0                                     ; Augmentation String
0000000000023a04         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000023a05         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000023a06         db         0x10                                        ; Return address register
0000000000023a07         db         0x01                                        ; Augmentation data length
0000000000023a08         db         0x1b                                        ; FDE encoding
0000000000023a09         db  0x0c ; '.'
0000000000023a0a         db  0x07 ; '.'
0000000000023a0b         db  0x08 ; '.'
0000000000023a0c         db  0x90 ; '.'
0000000000023a0d         db  0x01 ; '.'
0000000000023a0e         db  0x07 ; '.'
0000000000023a0f         db  0x10 ; '.'
0000000000023a10         dd         0x00000014                                  ; Length of the record
0000000000023a14         dd         0x0000001c                                  ; FDE: parent CIE at 0x239f8 (FDE encoding = 0x1B)
0000000000023a18         db         0x28, 0x05, 0xfe, 0xff                      ; begin 0x3f40
0000000000023a1c         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x3f6b)
0000000000023a20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023a21         align      8
0000000000023a28         dd         0x00000014                                  ; Length of the record
0000000000023a2c         dd         0x00000000                                  ; CIE ID
0000000000023a30         db         0x01                                        ; Version
0000000000023a31         db         "zR", 0                                     ; Augmentation String
0000000000023a34         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000023a35         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000023a36         db         0x10                                        ; Return address register
0000000000023a37         db         0x01                                        ; Augmentation data length
0000000000023a38         db         0x1b                                        ; FDE encoding
0000000000023a39         db  0x0c ; '.'
0000000000023a3a         db  0x07 ; '.'
0000000000023a3b         db  0x08 ; '.'
0000000000023a3c         db  0x90 ; '.'
0000000000023a3d         db  0x01 ; '.'
0000000000023a3e         db  0x00 ; '.'
0000000000023a3f         db  0x00 ; '.'
0000000000023a40         dd         0x00000024                                  ; Length of the record
0000000000023a44         dd         0x0000001c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023a48         db         0x68, 0xe9, 0xfd, 0xff                      ; begin 0x23b0
0000000000023a4c         db         0x60, 0x06, 2 dup (0x00)                    ; length 0x660 (end at 0x2a10)
0000000000023a50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023a51         db  0x0e ; '.'
0000000000023a52         db  0x10 ; '.'
0000000000023a53         db  0x46 ; 'F'
0000000000023a54         db  0x0e ; '.'
0000000000023a55         db  0x18 ; '.'
0000000000023a56         db  0x4a ; 'J'
0000000000023a57         db  0x0f ; '.'
0000000000023a58         db  0x0b ; '.'
0000000000023a59         db  0x77 ; 'w'
0000000000023a5a         db  0x08 ; '.'
0000000000023a5b         db  0x80 ; '.'
0000000000023a5c         db  0x00 ; '.'
0000000000023a5d         db  0x3f ; '?'
0000000000023a5e         db  0x1a ; '.'
0000000000023a5f         db  0x3b ; ';'
0000000000023a60         db  0x2a ; '*'
0000000000023a61         db  0x33 ; '3'
0000000000023a62         db  0x24 ; '$'
0000000000023a63         db  0x22 ; '"'
0000000000023a64         db  0x00 ; '.'
0000000000023a65         db  0x00 ; '.'
0000000000023a66         db  0x00 ; '.'
0000000000023a67         db  0x00 ; '.'
0000000000023a68         dd         0x00000014                                  ; Length of the record
0000000000023a6c         dd         0x00000044                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023a70         db         0xa0, 0xef, 0xfd, 0xff                      ; begin 0x2a10
0000000000023a74         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x2a20)
0000000000023a78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023a79         align      128
0000000000023a80         dd         0x00000020                                  ; Length of the record
0000000000023a84         dd         0x0000005c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023a88         db         0xc8, 0x05, 0xfe, 0xff                      ; begin 0x4050
0000000000023a8c         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x40da)
0000000000023a90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023a91         db  0x41 ; 'A'
0000000000023a92         db  0x0e ; '.'
0000000000023a93         db  0x10 ; '.'
0000000000023a94         db  0x83 ; '.'
0000000000023a95         db  0x02 ; '.'
0000000000023a96         db  0x47 ; 'G'
0000000000023a97         db  0x0e ; '.'
0000000000023a98         db  0xb0 ; '.'
0000000000023a99         db  0x05 ; '.'
0000000000023a9a         db  0x02 ; '.'
0000000000023a9b         db  0x5f ; '_'
0000000000023a9c         db  0x0a ; '.'
0000000000023a9d         db  0x0e ; '.'
0000000000023a9e         db  0x10 ; '.'
0000000000023a9f         db  0x41 ; 'A'
0000000000023aa0         db  0x0e ; '.'
0000000000023aa1         db  0x08 ; '.'
0000000000023aa2         db  0x48 ; 'H'
0000000000023aa3         db  0x0b ; '.'
0000000000023aa4         dd         0x00000038                                  ; Length of the record
0000000000023aa8         dd         0x00000080                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023aac         db         0x34, 0x06, 0xfe, 0xff                      ; begin 0x40e0
0000000000023ab0         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0x4239)
0000000000023ab4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023ab5         db  0x42 ; 'B'
0000000000023ab6         db  0x0e ; '.'
0000000000023ab7         db  0x10 ; '.'
0000000000023ab8         db  0x8d ; '.'
0000000000023ab9         db  0x02 ; '.'
0000000000023aba         db  0x42 ; 'B'
0000000000023abb         db  0x0e ; '.'
0000000000023abc         db  0x18 ; '.'
0000000000023abd         db  0x8c ; '.'
0000000000023abe         db  0x03 ; '.'
0000000000023abf         db  0x41 ; 'A'
0000000000023ac0         db  0x0e ; '.'
0000000000023ac1         db  0x20 ; ' '
0000000000023ac2         db  0x86 ; '.'
0000000000023ac3         db  0x04 ; '.'
0000000000023ac4         db  0x41 ; 'A'
0000000000023ac5         db  0x0e ; '.'
0000000000023ac6         db  0x28 ; '('
0000000000023ac7         db  0x83 ; '.'
0000000000023ac8         db  0x05 ; '.'
0000000000023ac9         db  0x4a ; 'J'
0000000000023aca         db  0x0e ; '.'
0000000000023acb         db  0xa0 ; '.'
0000000000023acc         db  0x01 ; '.'
0000000000023acd         db  0x02 ; '.'
0000000000023ace         db  0xd8 ; '.'
0000000000023acf         db  0x0a ; '.'
0000000000023ad0         db  0x0e ; '.'
0000000000023ad1         db  0x28 ; '('
0000000000023ad2         db  0x41 ; 'A'
0000000000023ad3         db  0x0e ; '.'
0000000000023ad4         db  0x20 ; ' '
0000000000023ad5         db  0x41 ; 'A'
0000000000023ad6         db  0x0e ; '.'
0000000000023ad7         db  0x18 ; '.'
0000000000023ad8         db  0x42 ; 'B'
0000000000023ad9         db  0x0e ; '.'
0000000000023ada         db  0x10 ; '.'
0000000000023adb         db  0x42 ; 'B'
0000000000023adc         db  0x0e ; '.'
0000000000023add         db  0x08 ; '.'
0000000000023ade         db  0x42 ; 'B'
0000000000023adf         db  0x0b ; '.'
0000000000023ae0         dd         0x00000028                                  ; Length of the record
0000000000023ae4         dd         0x000000bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023ae8         db         0x58, 0x07, 0xfe, 0xff                      ; begin 0x4240
0000000000023aec         db         0xba, 0x04, 2 dup (0x00)                    ; length 0x4ba (end at 0x46fa)
0000000000023af0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023af1         db  0x42 ; 'B'
0000000000023af2         db  0x0e ; '.'
0000000000023af3         db  0x10 ; '.'
0000000000023af4         db  0x8d ; '.'
0000000000023af5         db  0x02 ; '.'
0000000000023af6         db  0x42 ; 'B'
0000000000023af7         db  0x0e ; '.'
0000000000023af8         db  0x18 ; '.'
0000000000023af9         db  0x8c ; '.'
0000000000023afa         db  0x03 ; '.'
0000000000023afb         db  0x46 ; 'F'
0000000000023afc         db  0x0e ; '.'
0000000000023afd         db  0x20 ; ' '
0000000000023afe         db  0x86 ; '.'
0000000000023aff         db  0x04 ; '.'
0000000000023b00         db  0x41 ; 'A'
0000000000023b01         db  0x0e ; '.'
0000000000023b02         db  0x28 ; '('
0000000000023b03         db  0x83 ; '.'
0000000000023b04         db  0x05 ; '.'
0000000000023b05         db  0x49 ; 'I'
0000000000023b06         db  0x0e ; '.'
0000000000023b07         db  0xb0 ; '.'
0000000000023b08         db  0x01 ; '.'
0000000000023b09         db  0x00 ; '.'
0000000000023b0a         db  0x00 ; '.'
0000000000023b0b         db  0x00 ; '.'
0000000000023b0c         dd         0x00000060                                  ; Length of the record
0000000000023b10         dd         0x000000e8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023b14         db         0x3c, 0xef, 0xfd, 0xff                      ; begin 0x2a50
0000000000023b18         db         0xe6, 0x14, 2 dup (0x00)                    ; length 0x14e6 (end at 0x3f36)
0000000000023b1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023b1d         db  0x42 ; 'B'
0000000000023b1e         db  0x0e ; '.'
0000000000023b1f         db  0x10 ; '.'
0000000000023b20         db  0x8f ; '.'
0000000000023b21         db  0x02 ; '.'
0000000000023b22         db  0x42 ; 'B'
0000000000023b23         db  0x0e ; '.'
0000000000023b24         db  0x18 ; '.'
0000000000023b25         db  0x8e ; '.'
0000000000023b26         db  0x03 ; '.'
0000000000023b27         db  0x45 ; 'E'
0000000000023b28         db  0x0e ; '.'
0000000000023b29         db  0x20 ; ' '
0000000000023b2a         db  0x8d ; '.'
0000000000023b2b         db  0x04 ; '.'
0000000000023b2c         db  0x42 ; 'B'
0000000000023b2d         db  0x0e ; '.'
0000000000023b2e         db  0x28 ; '('
0000000000023b2f         db  0x8c ; '.'
0000000000023b30         db  0x05 ; '.'
0000000000023b31         db  0x44 ; 'D'
0000000000023b32         db  0x0e ; '.'
0000000000023b33         db  0x30 ; '0'
0000000000023b34         db  0x86 ; '.'
0000000000023b35         db  0x06 ; '.'
0000000000023b36         db  0x41 ; 'A'
0000000000023b37         db  0x0e ; '.'
0000000000023b38         db  0x38 ; '8'
0000000000023b39         db  0x83 ; '.'
0000000000023b3a         db  0x07 ; '.'
0000000000023b3b         db  0x54 ; 'T'
0000000000023b3c         db  0x0e ; '.'
0000000000023b3d         db  0xf0 ; '.'
0000000000023b3e         db  0x02 ; '.'
0000000000023b3f         db  0x03 ; '.'
0000000000023b40         db  0x47 ; 'G'
0000000000023b41         db  0x03 ; '.'
0000000000023b42         db  0x0e ; '.'
0000000000023b43         db  0xf8 ; '.'
0000000000023b44         db  0x02 ; '.'
0000000000023b45         db  0x49 ; 'I'
0000000000023b46         db  0x0e ; '.'
0000000000023b47         db  0x80 ; '.'
0000000000023b48         db  0x03 ; '.'
0000000000023b49         db  0x4f ; 'O'
0000000000023b4a         db  0x0e ; '.'
0000000000023b4b         db  0x88 ; '.'
0000000000023b4c         db  0x03 ; '.'
0000000000023b4d         db  0x5d ; ']'
0000000000023b4e         db  0x0e ; '.'
0000000000023b4f         db  0x90 ; '.'
0000000000023b50         db  0x03 ; '.'
0000000000023b51         db  0x4b ; 'K'
0000000000023b52         db  0x0e ; '.'
0000000000023b53         db  0xf0 ; '.'
0000000000023b54         db  0x02 ; '.'
0000000000023b55         db  0x03 ; '.'
0000000000023b56         db  0x40 ; '@'
0000000000023b57         db  0x08 ; '.'
0000000000023b58         db  0x0a ; '.'
0000000000023b59         db  0x0e ; '.'
0000000000023b5a         db  0x38 ; '8'
0000000000023b5b         db  0x41 ; 'A'
0000000000023b5c         db  0x0e ; '.'
0000000000023b5d         db  0x30 ; '0'
0000000000023b5e         db  0x41 ; 'A'
0000000000023b5f         db  0x0e ; '.'
0000000000023b60         db  0x28 ; '('
0000000000023b61         db  0x42 ; 'B'
0000000000023b62         db  0x0e ; '.'
0000000000023b63         db  0x20 ; ' '
0000000000023b64         db  0x42 ; 'B'
0000000000023b65         db  0x0e ; '.'
0000000000023b66         db  0x18 ; '.'
0000000000023b67         db  0x42 ; 'B'
0000000000023b68         db  0x0e ; '.'
0000000000023b69         db  0x10 ; '.'
0000000000023b6a         db  0x42 ; 'B'
0000000000023b6b         db  0x0e ; '.'
0000000000023b6c         db  0x08 ; '.'
0000000000023b6d         db  0x41 ; 'A'
0000000000023b6e         db  0x0b ; '.'
0000000000023b6f         db  0x00 ; '.'
0000000000023b70         dd         0x00000010                                  ; Length of the record
0000000000023b74         dd         0x0000014c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023b78         db         0x88, 0x0b, 0xfe, 0xff                      ; begin 0x4700
0000000000023b7c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x470a)
0000000000023b80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023b81         align      4
0000000000023b84         dd         0x00000048                                  ; Length of the record
0000000000023b88         dd         0x00000160                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023b8c         db         0x84, 0x0b, 0xfe, 0xff                      ; begin 0x4710
0000000000023b90         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x4826)
0000000000023b94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023b95         db  0x42 ; 'B'
0000000000023b96         db  0x0e ; '.'
0000000000023b97         db  0x10 ; '.'
0000000000023b98         db  0x8f ; '.'
0000000000023b99         db  0x02 ; '.'
0000000000023b9a         db  0x42 ; 'B'
0000000000023b9b         db  0x0e ; '.'
0000000000023b9c         db  0x18 ; '.'
0000000000023b9d         db  0x8e ; '.'
0000000000023b9e         db  0x03 ; '.'
0000000000023b9f         db  0x45 ; 'E'
0000000000023ba0         db  0x0e ; '.'
0000000000023ba1         db  0x20 ; ' '
0000000000023ba2         db  0x8d ; '.'
0000000000023ba3         db  0x04 ; '.'
0000000000023ba4         db  0x42 ; 'B'
0000000000023ba5         db  0x0e ; '.'
0000000000023ba6         db  0x28 ; '('
0000000000023ba7         db  0x8c ; '.'
0000000000023ba8         db  0x05 ; '.'
0000000000023ba9         db  0x44 ; 'D'
0000000000023baa         db  0x0e ; '.'
0000000000023bab         db  0x30 ; '0'
0000000000023bac         db  0x86 ; '.'
0000000000023bad         db  0x06 ; '.'
0000000000023bae         db  0x41 ; 'A'
0000000000023baf         db  0x0e ; '.'
0000000000023bb0         db  0x38 ; '8'
0000000000023bb1         db  0x83 ; '.'
0000000000023bb2         db  0x07 ; '.'
0000000000023bb3         db  0x47 ; 'G'
0000000000023bb4         db  0x0e ; '.'
0000000000023bb5         db  0x60 ; '`'
0000000000023bb6         db  0x02 ; '.'
0000000000023bb7         db  0xde ; '.'
0000000000023bb8         db  0x0a ; '.'
0000000000023bb9         db  0x0e ; '.'
0000000000023bba         db  0x38 ; '8'
0000000000023bbb         db  0x41 ; 'A'
0000000000023bbc         db  0x0e ; '.'
0000000000023bbd         db  0x30 ; '0'
0000000000023bbe         db  0x41 ; 'A'
0000000000023bbf         db  0x0e ; '.'
0000000000023bc0         db  0x28 ; '('
0000000000023bc1         db  0x42 ; 'B'
0000000000023bc2         db  0x0e ; '.'
0000000000023bc3         db  0x20 ; ' '
0000000000023bc4         db  0x42 ; 'B'
0000000000023bc5         db  0x0e ; '.'
0000000000023bc6         db  0x18 ; '.'
0000000000023bc7         db  0x42 ; 'B'
0000000000023bc8         db  0x0e ; '.'
0000000000023bc9         db  0x10 ; '.'
0000000000023bca         db  0x42 ; 'B'
0000000000023bcb         db  0x0e ; '.'
0000000000023bcc         db  0x08 ; '.'
0000000000023bcd         db  0x41 ; 'A'
0000000000023bce         db  0x0b ; '.'
0000000000023bcf         db  0x00 ; '.'
0000000000023bd0         dd         0x00000028                                  ; Length of the record
0000000000023bd4         dd         0x000001ac                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023bd8         db         0x58, 0x0c, 0xfe, 0xff                      ; begin 0x4830
0000000000023bdc         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x48a3)
0000000000023be0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023be1         db  0x46 ; 'F'
0000000000023be2         db  0x0e ; '.'
0000000000023be3         db  0x10 ; '.'
0000000000023be4         db  0x8c ; '.'
0000000000023be5         db  0x02 ; '.'
0000000000023be6         db  0x46 ; 'F'
0000000000023be7         db  0x0e ; '.'
0000000000023be8         db  0x18 ; '.'
0000000000023be9         db  0x86 ; '.'
0000000000023bea         db  0x03 ; '.'
0000000000023beb         db  0x44 ; 'D'
0000000000023bec         db  0x0e ; '.'
0000000000023bed         db  0x20 ; ' '
0000000000023bee         db  0x83 ; '.'
0000000000023bef         db  0x04 ; '.'
0000000000023bf0         db  0x7f ; '.'
0000000000023bf1         db  0x0a ; '.'
0000000000023bf2         db  0x0e ; '.'
0000000000023bf3         db  0x18 ; '.'
0000000000023bf4         db  0x41 ; 'A'
0000000000023bf5         db  0x0e ; '.'
0000000000023bf6         db  0x10 ; '.'
0000000000023bf7         db  0x42 ; 'B'
0000000000023bf8         db  0x0e ; '.'
0000000000023bf9         db  0x08 ; '.'
0000000000023bfa         db  0x4e ; 'N'
0000000000023bfb         db  0x0b ; '.'
0000000000023bfc         dd         0x0000005c                                  ; Length of the record
0000000000023c00         dd         0x000001d8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023c04         db         0xac, 0x0c, 0xfe, 0xff                      ; begin 0x48b0
0000000000023c08         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x49d0)
0000000000023c0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023c0d         db  0x42 ; 'B'
0000000000023c0e         db  0x0e ; '.'
0000000000023c0f         db  0x10 ; '.'
0000000000023c10         db  0x8f ; '.'
0000000000023c11         db  0x02 ; '.'
0000000000023c12         db  0x42 ; 'B'
0000000000023c13         db  0x0e ; '.'
0000000000023c14         db  0x18 ; '.'
0000000000023c15         db  0x8e ; '.'
0000000000023c16         db  0x03 ; '.'
0000000000023c17         db  0x45 ; 'E'
0000000000023c18         db  0x0e ; '.'
0000000000023c19         db  0x20 ; ' '
0000000000023c1a         db  0x8d ; '.'
0000000000023c1b         db  0x04 ; '.'
0000000000023c1c         db  0x42 ; 'B'
0000000000023c1d         db  0x0e ; '.'
0000000000023c1e         db  0x28 ; '('
0000000000023c1f         db  0x8c ; '.'
0000000000023c20         db  0x05 ; '.'
0000000000023c21         db  0x43 ; 'C'
0000000000023c22         db  0x0e ; '.'
0000000000023c23         db  0x30 ; '0'
0000000000023c24         db  0x86 ; '.'
0000000000023c25         db  0x06 ; '.'
0000000000023c26         db  0x41 ; 'A'
0000000000023c27         db  0x0e ; '.'
0000000000023c28         db  0x38 ; '8'
0000000000023c29         db  0x83 ; '.'
0000000000023c2a         db  0x07 ; '.'
0000000000023c2b         db  0x56 ; 'V'
0000000000023c2c         db  0x0e ; '.'
0000000000023c2d         db  0x40 ; '@'
0000000000023c2e         db  0x02 ; '.'
0000000000023c2f         db  0xd3 ; '.'
0000000000023c30         db  0x0a ; '.'
0000000000023c31         db  0x0e ; '.'
0000000000023c32         db  0x38 ; '8'
0000000000023c33         db  0x41 ; 'A'
0000000000023c34         db  0x0e ; '.'
0000000000023c35         db  0x30 ; '0'
0000000000023c36         db  0x41 ; 'A'
0000000000023c37         db  0x0e ; '.'
0000000000023c38         db  0x28 ; '('
0000000000023c39         db  0x42 ; 'B'
0000000000023c3a         db  0x0e ; '.'
0000000000023c3b         db  0x20 ; ' '
0000000000023c3c         db  0x42 ; 'B'
0000000000023c3d         db  0x0e ; '.'
0000000000023c3e         db  0x18 ; '.'
0000000000023c3f         db  0x42 ; 'B'
0000000000023c40         db  0x0e ; '.'
0000000000023c41         db  0x10 ; '.'
0000000000023c42         db  0x42 ; 'B'
0000000000023c43         db  0x0e ; '.'
0000000000023c44         db  0x08 ; '.'
0000000000023c45         db  0x46 ; 'F'
0000000000023c46         db  0x0b ; '.'
0000000000023c47         db  0x44 ; 'D'
0000000000023c48         db  0x0e ; '.'
0000000000023c49         db  0x38 ; '8'
0000000000023c4a         db  0x46 ; 'F'
0000000000023c4b         db  0x0e ; '.'
0000000000023c4c         db  0x30 ; '0'
0000000000023c4d         db  0x41 ; 'A'
0000000000023c4e         db  0x0e ; '.'
0000000000023c4f         db  0x28 ; '('
0000000000023c50         db  0x42 ; 'B'
0000000000023c51         db  0x0e ; '.'
0000000000023c52         db  0x20 ; ' '
0000000000023c53         db  0x42 ; 'B'
0000000000023c54         db  0x0e ; '.'
0000000000023c55         db  0x18 ; '.'
0000000000023c56         db  0x42 ; 'B'
0000000000023c57         db  0x0e ; '.'
0000000000023c58         db  0x10 ; '.'
0000000000023c59         db  0x42 ; 'B'
0000000000023c5a         db  0x0e ; '.'
0000000000023c5b         db  0x08 ; '.'
0000000000023c5c         dd         0x00000048                                  ; Length of the record
0000000000023c60         dd         0x00000238                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023c64         db         0x6c, 0x0d, 0xfe, 0xff                      ; begin 0x49d0
0000000000023c68         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x4a3d)
0000000000023c6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023c6d         db  0x42 ; 'B'
0000000000023c6e         db  0x0e ; '.'
0000000000023c6f         db  0x10 ; '.'
0000000000023c70         db  0x8f ; '.'
0000000000023c71         db  0x02 ; '.'
0000000000023c72         db  0x42 ; 'B'
0000000000023c73         db  0x0e ; '.'
0000000000023c74         db  0x18 ; '.'
0000000000023c75         db  0x8e ; '.'
0000000000023c76         db  0x03 ; '.'
0000000000023c77         db  0x45 ; 'E'
0000000000023c78         db  0x0e ; '.'
0000000000023c79         db  0x20 ; ' '
0000000000023c7a         db  0x8d ; '.'
0000000000023c7b         db  0x04 ; '.'
0000000000023c7c         db  0x42 ; 'B'
0000000000023c7d         db  0x0e ; '.'
0000000000023c7e         db  0x28 ; '('
0000000000023c7f         db  0x8c ; '.'
0000000000023c80         db  0x05 ; '.'
0000000000023c81         db  0x44 ; 'D'
0000000000023c82         db  0x0e ; '.'
0000000000023c83         db  0x30 ; '0'
0000000000023c84         db  0x86 ; '.'
0000000000023c85         db  0x06 ; '.'
0000000000023c86         db  0x41 ; 'A'
0000000000023c87         db  0x0e ; '.'
0000000000023c88         db  0x38 ; '8'
0000000000023c89         db  0x83 ; '.'
0000000000023c8a         db  0x07 ; '.'
0000000000023c8b         db  0x50 ; 'P'
0000000000023c8c         db  0x0e ; '.'
0000000000023c8d         db  0x40 ; '@'
0000000000023c8e         db  0x5a ; 'Z'
0000000000023c8f         db  0x0a ; '.'
0000000000023c90         db  0x0e ; '.'
0000000000023c91         db  0x38 ; '8'
0000000000023c92         db  0x41 ; 'A'
0000000000023c93         db  0x0e ; '.'
0000000000023c94         db  0x30 ; '0'
0000000000023c95         db  0x41 ; 'A'
0000000000023c96         db  0x0e ; '.'
0000000000023c97         db  0x28 ; '('
0000000000023c98         db  0x42 ; 'B'
0000000000023c99         db  0x0e ; '.'
0000000000023c9a         db  0x20 ; ' '
0000000000023c9b         db  0x42 ; 'B'
0000000000023c9c         db  0x0e ; '.'
0000000000023c9d         db  0x18 ; '.'
0000000000023c9e         db  0x42 ; 'B'
0000000000023c9f         db  0x0e ; '.'
0000000000023ca0         db  0x10 ; '.'
0000000000023ca1         db  0x42 ; 'B'
0000000000023ca2         db  0x0e ; '.'
0000000000023ca3         db  0x08 ; '.'
0000000000023ca4         db  0x41 ; 'A'
0000000000023ca5         db  0x0b ; '.'
0000000000023ca6         db  0x00 ; '.'
0000000000023ca7         db  0x00 ; '.'
0000000000023ca8         dd         0x0000003c                                  ; Length of the record
0000000000023cac         dd         0x00000284                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023cb0         db         0x90, 0x0d, 0xfe, 0xff                      ; begin 0x4a40
0000000000023cb4         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x4a8d)
0000000000023cb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023cb9         db  0x42 ; 'B'
0000000000023cba         db  0x0e ; '.'
0000000000023cbb         db  0x10 ; '.'
0000000000023cbc         db  0x8e ; '.'
0000000000023cbd         db  0x02 ; '.'
0000000000023cbe         db  0x42 ; 'B'
0000000000023cbf         db  0x0e ; '.'
0000000000023cc0         db  0x18 ; '.'
0000000000023cc1         db  0x8d ; '.'
0000000000023cc2         db  0x03 ; '.'
0000000000023cc3         db  0x42 ; 'B'
0000000000023cc4         db  0x0e ; '.'
0000000000023cc5         db  0x20 ; ' '
0000000000023cc6         db  0x8c ; '.'
0000000000023cc7         db  0x04 ; '.'
0000000000023cc8         db  0x41 ; 'A'
0000000000023cc9         db  0x0e ; '.'
0000000000023cca         db  0x28 ; '('
0000000000023ccb         db  0x86 ; '.'
0000000000023ccc         db  0x05 ; '.'
0000000000023ccd         db  0x41 ; 'A'
0000000000023cce         db  0x0e ; '.'
0000000000023ccf         db  0x30 ; '0'
0000000000023cd0         db  0x83 ; '.'
0000000000023cd1         db  0x06 ; '.'
0000000000023cd2         db  0x7a ; 'z'
0000000000023cd3         db  0x0e ; '.'
0000000000023cd4         db  0x28 ; '('
0000000000023cd5         db  0x44 ; 'D'
0000000000023cd6         db  0x0e ; '.'
0000000000023cd7         db  0x20 ; ' '
0000000000023cd8         db  0x42 ; 'B'
0000000000023cd9         db  0x0e ; '.'
0000000000023cda         db  0x18 ; '.'
0000000000023cdb         db  0x42 ; 'B'
0000000000023cdc         db  0x0e ; '.'
0000000000023cdd         db  0x10 ; '.'
0000000000023cde         db  0x42 ; 'B'
0000000000023cdf         db  0x0e ; '.'
0000000000023ce0         db  0x08 ; '.'
0000000000023ce1         db  0x00 ; '.'
0000000000023ce2         db  0x00 ; '.'
0000000000023ce3         db  0x00 ; '.'
0000000000023ce4         db  0x00 ; '.'
0000000000023ce5         db  0x00 ; '.'
0000000000023ce6         db  0x00 ; '.'
0000000000023ce7         db  0x00 ; '.'
0000000000023ce8         dd         0x00000018                                  ; Length of the record
0000000000023cec         dd         0x000002c4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023cf0         db         0xa0, 0x0d, 0xfe, 0xff                      ; begin 0x4a90
0000000000023cf4         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x4ab4)
0000000000023cf8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023cf9         db  0x41 ; 'A'
0000000000023cfa         db  0x0e ; '.'
0000000000023cfb         db  0x10 ; '.'
0000000000023cfc         db  0x83 ; '.'
0000000000023cfd         db  0x02 ; '.'
0000000000023cfe         db  0x62 ; 'b'
0000000000023cff         db  0x0e ; '.'
0000000000023d00         db  0x08 ; '.'
0000000000023d01         db  0x00 ; '.'
0000000000023d02         db  0x00 ; '.'
0000000000023d03         db  0x00 ; '.'
0000000000023d04         dd         0x00000018                                  ; Length of the record
0000000000023d08         dd         0x000002e0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023d0c         db         0xb4, 0x0d, 0xfe, 0xff                      ; begin 0x4ac0
0000000000023d10         db         0x38, 3 dup (0x00)                          ; length 0x38 (end at 0x4af8)
0000000000023d14         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023d15         db  0x41 ; 'A'
0000000000023d16         db  0x0e ; '.'
0000000000023d17         db  0x10 ; '.'
0000000000023d18         db  0x83 ; '.'
0000000000023d19         db  0x02 ; '.'
0000000000023d1a         db  0x76 ; 'v'
0000000000023d1b         db  0x0e ; '.'
0000000000023d1c         db  0x08 ; '.'
0000000000023d1d         db  0x00 ; '.'
0000000000023d1e         db  0x00 ; '.'
0000000000023d1f         db  0x00 ; '.'
0000000000023d20         dd         0x00000030                                  ; Length of the record
0000000000023d24         dd         0x000002fc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023d28         db         0xd8, 0x0d, 0xfe, 0xff                      ; begin 0x4b00
0000000000023d2c         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4b8a)
0000000000023d30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023d31         db  0x49 ; 'I'
0000000000023d32         db  0x0e ; '.'
0000000000023d33         db  0x10 ; '.'
0000000000023d34         db  0x86 ; '.'
0000000000023d35         db  0x02 ; '.'
0000000000023d36         db  0x41 ; 'A'
0000000000023d37         db  0x0e ; '.'
0000000000023d38         db  0x18 ; '.'
0000000000023d39         db  0x83 ; '.'
0000000000023d3a         db  0x03 ; '.'
0000000000023d3b         db  0x52 ; 'R'
0000000000023d3c         db  0x0e ; '.'
0000000000023d3d         db  0x20 ; ' '
0000000000023d3e         db  0x60 ; '`'
0000000000023d3f         db  0x0e ; '.'
0000000000023d40         db  0x18 ; '.'
0000000000023d41         db  0x41 ; 'A'
0000000000023d42         db  0x0e ; '.'
0000000000023d43         db  0x10 ; '.'
0000000000023d44         db  0x41 ; 'A'
0000000000023d45         db  0x0e ; '.'
0000000000023d46         db  0x08 ; '.'
0000000000023d47         db  0x42 ; 'B'
0000000000023d48         db  0xc3 ; '.'
0000000000023d49         db  0xc6 ; '.'
0000000000023d4a         db  0x70 ; 'p'
0000000000023d4b         db  0x0e ; '.'
0000000000023d4c         db  0x20 ; ' '
0000000000023d4d         db  0x83 ; '.'
0000000000023d4e         db  0x03 ; '.'
0000000000023d4f         db  0x86 ; '.'
0000000000023d50         db  0x02 ; '.'
0000000000023d51         db  0x00 ; '.'
0000000000023d52         db  0x00 ; '.'
0000000000023d53         db  0x00 ; '.'
0000000000023d54         dd         0x00000010                                  ; Length of the record
0000000000023d58         dd         0x00000330                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023d5c         db         0x34, 0x0e, 0xfe, 0xff                      ; begin 0x4b90
0000000000023d60         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x4bad)
0000000000023d64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023d65         align      8
0000000000023d68         dd         0x0000001c                                  ; Length of the record
0000000000023d6c         dd         0x00000344                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023d70         db         0x40, 0x0e, 0xfe, 0xff                      ; begin 0x4bb0
0000000000023d74         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x4bcc)
0000000000023d78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023d79         db  0x41 ; 'A'
0000000000023d7a         db  0x0e ; '.'
0000000000023d7b         db  0x10 ; '.'
0000000000023d7c         db  0x83 ; '.'
0000000000023d7d         db  0x02 ; '.'
0000000000023d7e         db  0x56 ; 'V'
0000000000023d7f         db  0x0e ; '.'
0000000000023d80         db  0x08 ; '.'
0000000000023d81         db  0x00 ; '.'
0000000000023d82         db  0x00 ; '.'
0000000000023d83         db  0x00 ; '.'
0000000000023d84         db  0x00 ; '.'
0000000000023d85         db  0x00 ; '.'
0000000000023d86         db  0x00 ; '.'
0000000000023d87         db  0x00 ; '.'
0000000000023d88         dd         0x00000010                                  ; Length of the record
0000000000023d8c         dd         0x00000364                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023d90         db         0x40, 0x0e, 0xfe, 0xff                      ; begin 0x4bd0
0000000000023d94         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x4bd8)
0000000000023d98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023d99         align      4
0000000000023d9c         dd         0x00000010                                  ; Length of the record
0000000000023da0         dd         0x00000378                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023da4         db         0x3c, 0x0e, 0xfe, 0xff                      ; begin 0x4be0
0000000000023da8         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x4be8)
0000000000023dac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023dad         align      16
0000000000023db0         dd         0x0000002c                                  ; Length of the record
0000000000023db4         dd         0x0000038c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023db8         db         0x38, 0x0e, 0xfe, 0xff                      ; begin 0x4bf0
0000000000023dbc         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x4c94)
0000000000023dc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023dc1         db  0x41 ; 'A'
0000000000023dc2         db  0x0e ; '.'
0000000000023dc3         db  0x10 ; '.'
0000000000023dc4         db  0x86 ; '.'
0000000000023dc5         db  0x02 ; '.'
0000000000023dc6         db  0x41 ; 'A'
0000000000023dc7         db  0x0e ; '.'
0000000000023dc8         db  0x18 ; '.'
0000000000023dc9         db  0x83 ; '.'
0000000000023dca         db  0x03 ; '.'
0000000000023dcb         db  0x44 ; 'D'
0000000000023dcc         db  0x0e ; '.'
0000000000023dcd         db  0x20 ; ' '
0000000000023dce         db  0x7a ; 'z'
0000000000023dcf         db  0x0a ; '.'
0000000000023dd0         db  0x0e ; '.'
0000000000023dd1         db  0x18 ; '.'
0000000000023dd2         db  0x41 ; 'A'
0000000000023dd3         db  0x0e ; '.'
0000000000023dd4         db  0x10 ; '.'
0000000000023dd5         db  0x41 ; 'A'
0000000000023dd6         db  0x0e ; '.'
0000000000023dd7         db  0x08 ; '.'
0000000000023dd8         db  0x41 ; 'A'
0000000000023dd9         db  0x0b ; '.'
0000000000023dda         db  0x00 ; '.'
0000000000023ddb         db  0x00 ; '.'
0000000000023ddc         db  0x00 ; '.'
0000000000023ddd         db  0x00 ; '.'
0000000000023dde         db  0x00 ; '.'
0000000000023ddf         db  0x00 ; '.'
0000000000023de0         dd         0x00000010                                  ; Length of the record
0000000000023de4         dd         0x000003bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023de8         db         0xb8, 0x0e, 0xfe, 0xff                      ; begin 0x4ca0
0000000000023dec         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4cac)
0000000000023df0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023df1         align      4
0000000000023df4         dd         0x00000010                                  ; Length of the record
0000000000023df8         dd         0x000003d0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023dfc         db         0xb4, 0x0e, 0xfe, 0xff                      ; begin 0x4cb0
0000000000023e00         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4cba)
0000000000023e04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023e05         align      8
0000000000023e08         dd         0x00000010                                  ; Length of the record
0000000000023e0c         dd         0x000003e4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023e10         db         0xb0, 0x0e, 0xfe, 0xff                      ; begin 0x4cc0
0000000000023e14         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4ccc)
0000000000023e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023e19         align      4
0000000000023e1c         dd         0x00000018                                  ; Length of the record
0000000000023e20         dd         0x000003f8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023e24         db         0xac, 0x0e, 0xfe, 0xff                      ; begin 0x4cd0
0000000000023e28         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0x4ce6)
0000000000023e2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023e2d         db  0x41 ; 'A'
0000000000023e2e         db  0x0e ; '.'
0000000000023e2f         db  0x10 ; '.'
0000000000023e30         db  0x83 ; '.'
0000000000023e31         db  0x02 ; '.'
0000000000023e32         db  0x50 ; 'P'
0000000000023e33         db  0x0e ; '.'
0000000000023e34         db  0x08 ; '.'
0000000000023e35         db  0x00 ; '.'
0000000000023e36         db  0x00 ; '.'
0000000000023e37         db  0x00 ; '.'
0000000000023e38         dd         0x0000004c                                  ; Length of the record
0000000000023e3c         dd         0x00000414                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023e40         db         0xb0, 0x0e, 0xfe, 0xff                      ; begin 0x4cf0
0000000000023e44         db         0xb5, 3 dup (0x00)                          ; length 0xb5 (end at 0x4da5)
0000000000023e48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023e49         db  0x42 ; 'B'
0000000000023e4a         db  0x0e ; '.'
0000000000023e4b         db  0x10 ; '.'
0000000000023e4c         db  0x8c ; '.'
0000000000023e4d         db  0x02 ; '.'
0000000000023e4e         db  0x41 ; 'A'
0000000000023e4f         db  0x0e ; '.'
0000000000023e50         db  0x18 ; '.'
0000000000023e51         db  0x86 ; '.'
0000000000023e52         db  0x03 ; '.'
0000000000023e53         db  0x44 ; 'D'
0000000000023e54         db  0x0e ; '.'
0000000000023e55         db  0x20 ; ' '
0000000000023e56         db  0x83 ; '.'
0000000000023e57         db  0x04 ; '.'
0000000000023e58         db  0x47 ; 'G'
0000000000023e59         db  0x0e ; '.'
0000000000023e5a         db  0x30 ; '0'
0000000000023e5b         db  0x71 ; 'q'
0000000000023e5c         db  0x0a ; '.'
0000000000023e5d         db  0x0e ; '.'
0000000000023e5e         db  0x20 ; ' '
0000000000023e5f         db  0x41 ; 'A'
0000000000023e60         db  0x0e ; '.'
0000000000023e61         db  0x18 ; '.'
0000000000023e62         db  0x41 ; 'A'
0000000000023e63         db  0x0e ; '.'
0000000000023e64         db  0x10 ; '.'
0000000000023e65         db  0x42 ; 'B'
0000000000023e66         db  0x0e ; '.'
0000000000023e67         db  0x08 ; '.'
0000000000023e68         db  0x45 ; 'E'
0000000000023e69         db  0x0b ; '.'
0000000000023e6a         db  0x48 ; 'H'
0000000000023e6b         db  0x0a ; '.'
0000000000023e6c         db  0x0e ; '.'
0000000000023e6d         db  0x20 ; ' '
0000000000023e6e         db  0x41 ; 'A'
0000000000023e6f         db  0x0e ; '.'
0000000000023e70         db  0x18 ; '.'
0000000000023e71         db  0x41 ; 'A'
0000000000023e72         db  0x0e ; '.'
0000000000023e73         db  0x10 ; '.'
0000000000023e74         db  0x42 ; 'B'
0000000000023e75         db  0x0e ; '.'
0000000000023e76         db  0x08 ; '.'
0000000000023e77         db  0x44 ; 'D'
0000000000023e78         db  0x0b ; '.'
0000000000023e79         db  0x02 ; '.'
0000000000023e7a         db  0x58 ; 'X'
0000000000023e7b         db  0x0e ; '.'
0000000000023e7c         db  0x20 ; ' '
0000000000023e7d         db  0x41 ; 'A'
0000000000023e7e         db  0x0e ; '.'
0000000000023e7f         db  0x18 ; '.'
0000000000023e80         db  0x41 ; 'A'
0000000000023e81         db  0x0e ; '.'
0000000000023e82         db  0x10 ; '.'
0000000000023e83         db  0x42 ; 'B'
0000000000023e84         db  0x0e ; '.'
0000000000023e85         db  0x08 ; '.'
0000000000023e86         db  0x00 ; '.'
0000000000023e87         db  0x00 ; '.'
0000000000023e88         dd         0x00000028                                  ; Length of the record
0000000000023e8c         dd         0x00000464                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023e90         db         0x20, 0x0f, 0xfe, 0xff                      ; begin 0x4db0
0000000000023e94         db         0x69, 3 dup (0x00)                          ; length 0x69 (end at 0x4e19)
0000000000023e98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023e99         db  0x54 ; 'T'
0000000000023e9a         db  0x0e ; '.'
0000000000023e9b         db  0x10 ; '.'
0000000000023e9c         db  0x83 ; '.'
0000000000023e9d         db  0x02 ; '.'
0000000000023e9e         db  0x47 ; 'G'
0000000000023e9f         db  0x0e ; '.'
0000000000023ea0         db  0x20 ; ' '
0000000000023ea1         db  0x4c ; 'L'
0000000000023ea2         db  0x0e ; '.'
0000000000023ea3         db  0x10 ; '.'
0000000000023ea4         db  0x41 ; 'A'
0000000000023ea5         db  0xc3 ; '.'
0000000000023ea6         db  0x0e ; '.'
0000000000023ea7         db  0x08 ; '.'
0000000000023ea8         db  0x50 ; 'P'
0000000000023ea9         db  0x0e ; '.'
0000000000023eaa         db  0x20 ; ' '
0000000000023eab         db  0x83 ; '.'
0000000000023eac         db  0x02 ; '.'
0000000000023ead         db  0x68 ; 'h'
0000000000023eae         db  0x0e ; '.'
0000000000023eaf         db  0x10 ; '.'
0000000000023eb0         db  0x48 ; 'H'
0000000000023eb1         db  0x0e ; '.'
0000000000023eb2         db  0x08 ; '.'
0000000000023eb3         db  0x00 ; '.'
0000000000023eb4         dd         0x0000001c                                  ; Length of the record
0000000000023eb8         dd         0x00000490                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023ebc         db         0x64, 0x0f, 0xfe, 0xff                      ; begin 0x4e20
0000000000023ec0         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x4e84)
0000000000023ec4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023ec5         db  0x41 ; 'A'
0000000000023ec6         db  0x0e ; '.'
0000000000023ec7         db  0x10 ; '.'
0000000000023ec8         db  0x83 ; '.'
0000000000023ec9         db  0x02 ; '.'
0000000000023eca         db  0x02 ; '.'
0000000000023ecb         db  0x4f ; 'O'
0000000000023ecc         db  0x0a ; '.'
0000000000023ecd         db  0x0e ; '.'
0000000000023ece         db  0x08 ; '.'
0000000000023ecf         db  0x48 ; 'H'
0000000000023ed0         db  0x0b ; '.'
0000000000023ed1         db  0x00 ; '.'
0000000000023ed2         db  0x00 ; '.'
0000000000023ed3         db  0x00 ; '.'
0000000000023ed4         dd         0x00000018                                  ; Length of the record
0000000000023ed8         dd         0x000004b0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023edc         db         0xb4, 0x0f, 0xfe, 0xff                      ; begin 0x4e90
0000000000023ee0         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x4eb7)
0000000000023ee4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023ee5         db  0x41 ; 'A'
0000000000023ee6         db  0x0e ; '.'
0000000000023ee7         db  0x10 ; '.'
0000000000023ee8         db  0x83 ; '.'
0000000000023ee9         db  0x02 ; '.'
0000000000023eea         db  0x61 ; 'a'
0000000000023eeb         db  0x0e ; '.'
0000000000023eec         db  0x08 ; '.'
0000000000023eed         db  0x00 ; '.'
0000000000023eee         db  0x00 ; '.'
0000000000023eef         db  0x00 ; '.'
0000000000023ef0         dd         0x00000034                                  ; Length of the record
0000000000023ef4         dd         0x000004cc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023ef8         db         0xc8, 0x0f, 0xfe, 0xff                      ; begin 0x4ec0
0000000000023efc         db         0x5a, 3 dup (0x00)                          ; length 0x5a (end at 0x4f1a)
0000000000023f00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023f01         db  0x42 ; 'B'
0000000000023f02         db  0x0e ; '.'
0000000000023f03         db  0x10 ; '.'
0000000000023f04         db  0x8c ; '.'
0000000000023f05         db  0x02 ; '.'
0000000000023f06         db  0x44 ; 'D'
0000000000023f07         db  0x0e ; '.'
0000000000023f08         db  0x18 ; '.'
0000000000023f09         db  0x86 ; '.'
0000000000023f0a         db  0x03 ; '.'
0000000000023f0b         db  0x45 ; 'E'
0000000000023f0c         db  0x0e ; '.'
0000000000023f0d         db  0x20 ; ' '
0000000000023f0e         db  0x83 ; '.'
0000000000023f0f         db  0x04 ; '.'
0000000000023f10         db  0x6c ; 'l'
0000000000023f11         db  0x0a ; '.'
0000000000023f12         db  0x0e ; '.'
0000000000023f13         db  0x18 ; '.'
0000000000023f14         db  0x49 ; 'I'
0000000000023f15         db  0x0e ; '.'
0000000000023f16         db  0x10 ; '.'
0000000000023f17         db  0x42 ; 'B'
0000000000023f18         db  0x0e ; '.'
0000000000023f19         db  0x08 ; '.'
0000000000023f1a         db  0x4e ; 'N'
0000000000023f1b         db  0x0b ; '.'
0000000000023f1c         db  0x41 ; 'A'
0000000000023f1d         db  0x0e ; '.'
0000000000023f1e         db  0x18 ; '.'
0000000000023f1f         db  0x46 ; 'F'
0000000000023f20         db  0x0e ; '.'
0000000000023f21         db  0x10 ; '.'
0000000000023f22         db  0x42 ; 'B'
0000000000023f23         db  0x0e ; '.'
0000000000023f24         db  0x08 ; '.'
0000000000023f25         db  0x00 ; '.'
0000000000023f26         db  0x00 ; '.'
0000000000023f27         db  0x00 ; '.'
0000000000023f28         dd         0x0000002c                                  ; Length of the record
0000000000023f2c         dd         0x00000504                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023f30         db         0xf0, 0x0f, 0xfe, 0xff                      ; begin 0x4f20
0000000000023f34         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x4f77)
0000000000023f38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023f39         db  0x42 ; 'B'
0000000000023f3a         db  0x0e ; '.'
0000000000023f3b         db  0x10 ; '.'
0000000000023f3c         db  0x8c ; '.'
0000000000023f3d         db  0x02 ; '.'
0000000000023f3e         db  0x44 ; 'D'
0000000000023f3f         db  0x0e ; '.'
0000000000023f40         db  0x18 ; '.'
0000000000023f41         db  0x86 ; '.'
0000000000023f42         db  0x03 ; '.'
0000000000023f43         db  0x45 ; 'E'
0000000000023f44         db  0x0e ; '.'
0000000000023f45         db  0x20 ; ' '
0000000000023f46         db  0x83 ; '.'
0000000000023f47         db  0x04 ; '.'
0000000000023f48         db  0x02 ; '.'
0000000000023f49         db  0x40 ; '@'
0000000000023f4a         db  0x0a ; '.'
0000000000023f4b         db  0x0e ; '.'
0000000000023f4c         db  0x18 ; '.'
0000000000023f4d         db  0x41 ; 'A'
0000000000023f4e         db  0x0e ; '.'
0000000000023f4f         db  0x10 ; '.'
0000000000023f50         db  0x42 ; 'B'
0000000000023f51         db  0x0e ; '.'
0000000000023f52         db  0x08 ; '.'
0000000000023f53         db  0x42 ; 'B'
0000000000023f54         db  0x0b ; '.'
0000000000023f55         db  0x00 ; '.'
0000000000023f56         db  0x00 ; '.'
0000000000023f57         db  0x00 ; '.'
0000000000023f58         dd         0x00000010                                  ; Length of the record
0000000000023f5c         dd         0x00000534                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023f60         db         0x20, 0x10, 0xfe, 0xff                      ; begin 0x4f80
0000000000023f64         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x4f82)
0000000000023f68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023f69         align      4
0000000000023f6c         dd         0x00000010                                  ; Length of the record
0000000000023f70         dd         0x00000548                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023f74         db         0x1c, 0x10, 0xfe, 0xff                      ; begin 0x4f90
0000000000023f78         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x4f95)
0000000000023f7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023f7d         align      128
0000000000023f80         dd         0x00000014                                  ; Length of the record
0000000000023f84         dd         0x0000055c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023f88         db         0x18, 0x10, 0xfe, 0xff                      ; begin 0x4fa0
0000000000023f8c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4fb3)
0000000000023f90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023f91         db  0x44 ; 'D'
0000000000023f92         db  0x0e ; '.'
0000000000023f93         db  0x10 ; '.'
0000000000023f94         db  0x4e ; 'N'
0000000000023f95         db  0x0e ; '.'
0000000000023f96         db  0x08 ; '.'
0000000000023f97         db  0x00 ; '.'
0000000000023f98         dd         0x00000014                                  ; Length of the record
0000000000023f9c         dd         0x00000574                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023fa0         db         0x20, 0x10, 0xfe, 0xff                      ; begin 0x4fc0
0000000000023fa4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4fd3)
0000000000023fa8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023fa9         db  0x44 ; 'D'
0000000000023faa         db  0x0e ; '.'
0000000000023fab         db  0x10 ; '.'
0000000000023fac         db  0x4e ; 'N'
0000000000023fad         db  0x0e ; '.'
0000000000023fae         db  0x08 ; '.'
0000000000023faf         db  0x00 ; '.'
0000000000023fb0         dd         0x00000010                                  ; Length of the record
0000000000023fb4         dd         0x0000058c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023fb8         db         0x28, 0x10, 0xfe, 0xff                      ; begin 0x4fe0
0000000000023fbc         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x4fe5)
0000000000023fc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023fc1         align      4
0000000000023fc4         dd         0x00000048                                  ; Length of the record
0000000000023fc8         dd         0x000005a0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000023fcc         db         0x24, 0x10, 0xfe, 0xff                      ; begin 0x4ff0
0000000000023fd0         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0x50bf)
0000000000023fd4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000023fd5         db  0x5a ; 'Z'
0000000000023fd6         db  0x0e ; '.'
0000000000023fd7         db  0x10 ; '.'
0000000000023fd8         db  0x8c ; '.'
0000000000023fd9         db  0x02 ; '.'
0000000000023fda         db  0x41 ; 'A'
0000000000023fdb         db  0x0e ; '.'
0000000000023fdc         db  0x18 ; '.'
0000000000023fdd         db  0x86 ; '.'
0000000000023fde         db  0x03 ; '.'
0000000000023fdf         db  0x44 ; 'D'
0000000000023fe0         db  0x0e ; '.'
0000000000023fe1         db  0x20 ; ' '
0000000000023fe2         db  0x83 ; '.'
0000000000023fe3         db  0x04 ; '.'
0000000000023fe4         db  0x47 ; 'G'
0000000000023fe5         db  0x0e ; '.'
0000000000023fe6         db  0x30 ; '0'
0000000000023fe7         db  0x6d ; 'm'
0000000000023fe8         db  0x0e ; '.'
0000000000023fe9         db  0x20 ; ' '
0000000000023fea         db  0x41 ; 'A'
0000000000023feb         db  0x0e ; '.'
0000000000023fec         db  0x18 ; '.'
0000000000023fed         db  0x41 ; 'A'
0000000000023fee         db  0x0e ; '.'
0000000000023fef         db  0x10 ; '.'
0000000000023ff0         db  0x42 ; 'B'
0000000000023ff1         db  0x0e ; '.'
0000000000023ff2         db  0x08 ; '.'
0000000000023ff3         db  0x49 ; 'I'
0000000000023ff4         db  0xc3 ; '.'
0000000000023ff5         db  0xc6 ; '.'
0000000000023ff6         db  0xcc ; '.'
0000000000023ff7         db  0x48 ; 'H'
0000000000023ff8         db  0x0e ; '.'
0000000000023ff9         db  0x30 ; '0'
0000000000023ffa         db  0x83 ; '.'
0000000000023ffb         db  0x04 ; '.'
0000000000023ffc         db  0x86 ; '.'
0000000000023ffd         db  0x03 ; '.'
0000000000023ffe         db  0x8c ; '.'
0000000000023fff         db  0x02 ; '.'
0000000000024000         db  0x02 ; '.'
0000000000024001         db  0x62 ; 'b'
0000000000024002         db  0x0e ; '.'
0000000000024003         db  0x20 ; ' '
0000000000024004         db  0x41 ; 'A'
0000000000024005         db  0x0e ; '.'
0000000000024006         db  0x18 ; '.'
0000000000024007         db  0x41 ; 'A'
0000000000024008         db  0x0e ; '.'
0000000000024009         db  0x10 ; '.'
000000000002400a         db  0x42 ; 'B'
000000000002400b         db  0x0e ; '.'
000000000002400c         db  0x08 ; '.'
000000000002400d         db  0x00 ; '.'
000000000002400e         db  0x00 ; '.'
000000000002400f         db  0x00 ; '.'
0000000000024010         dd         0x0000004c                                  ; Length of the record
0000000000024014         dd         0x000005ec                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024018         db         0xa8, 0x10, 0xfe, 0xff                      ; begin 0x50c0
000000000002401c         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0x5344)
0000000000024020         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024021         db  0x42 ; 'B'
0000000000024022         db  0x0e ; '.'
0000000000024023         db  0x10 ; '.'
0000000000024024         db  0x8f ; '.'
0000000000024025         db  0x02 ; '.'
0000000000024026         db  0x42 ; 'B'
0000000000024027         db  0x0e ; '.'
0000000000024028         db  0x18 ; '.'
0000000000024029         db  0x8e ; '.'
000000000002402a         db  0x03 ; '.'
000000000002402b         db  0x45 ; 'E'
000000000002402c         db  0x0e ; '.'
000000000002402d         db  0x20 ; ' '
000000000002402e         db  0x8d ; '.'
000000000002402f         db  0x04 ; '.'
0000000000024030         db  0x42 ; 'B'
0000000000024031         db  0x0e ; '.'
0000000000024032         db  0x28 ; '('
0000000000024033         db  0x8c ; '.'
0000000000024034         db  0x05 ; '.'
0000000000024035         db  0x48 ; 'H'
0000000000024036         db  0x0e ; '.'
0000000000024037         db  0x30 ; '0'
0000000000024038         db  0x86 ; '.'
0000000000024039         db  0x06 ; '.'
000000000002403a         db  0x41 ; 'A'
000000000002403b         db  0x0e ; '.'
000000000002403c         db  0x38 ; '8'
000000000002403d         db  0x83 ; '.'
000000000002403e         db  0x07 ; '.'
000000000002403f         db  0x47 ; 'G'
0000000000024040         db  0x0e ; '.'
0000000000024041         db  0xa0 ; '.'
0000000000024042         db  0x01 ; '.'
0000000000024043         db  0x03 ; '.'
0000000000024044         db  0x90 ; '.'
0000000000024045         db  0x01 ; '.'
0000000000024046         db  0x0a ; '.'
0000000000024047         db  0x0e ; '.'
0000000000024048         db  0x38 ; '8'
0000000000024049         db  0x41 ; 'A'
000000000002404a         db  0x0e ; '.'
000000000002404b         db  0x30 ; '0'
000000000002404c         db  0x41 ; 'A'
000000000002404d         db  0x0e ; '.'
000000000002404e         db  0x28 ; '('
000000000002404f         db  0x42 ; 'B'
0000000000024050         db  0x0e ; '.'
0000000000024051         db  0x20 ; ' '
0000000000024052         db  0x42 ; 'B'
0000000000024053         db  0x0e ; '.'
0000000000024054         db  0x18 ; '.'
0000000000024055         db  0x42 ; 'B'
0000000000024056         db  0x0e ; '.'
0000000000024057         db  0x10 ; '.'
0000000000024058         db  0x42 ; 'B'
0000000000024059         db  0x0e ; '.'
000000000002405a         db  0x08 ; '.'
000000000002405b         db  0x4b ; 'K'
000000000002405c         db  0x0b ; '.'
000000000002405d         db  0x00 ; '.'
000000000002405e         db  0x00 ; '.'
000000000002405f         db  0x00 ; '.'
0000000000024060         dd         0x00000024                                  ; Length of the record
0000000000024064         dd         0x0000063c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024068         db         0xe8, 0x12, 0xfe, 0xff                      ; begin 0x5350
000000000002406c         db         0x2c, 3 dup (0x00)                          ; length 0x2c (end at 0x537c)
0000000000024070         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024071         db  0x41 ; 'A'
0000000000024072         db  0x0e ; '.'
0000000000024073         db  0x10 ; '.'
0000000000024074         db  0x86 ; '.'
0000000000024075         db  0x02 ; '.'
0000000000024076         db  0x41 ; 'A'
0000000000024077         db  0x0e ; '.'
0000000000024078         db  0x18 ; '.'
0000000000024079         db  0x83 ; '.'
000000000002407a         db  0x03 ; '.'
000000000002407b         db  0x4f ; 'O'
000000000002407c         db  0x0e ; '.'
000000000002407d         db  0x20 ; ' '
000000000002407e         db  0x58 ; 'X'
000000000002407f         db  0x0e ; '.'
0000000000024080         db  0x18 ; '.'
0000000000024081         db  0x41 ; 'A'
0000000000024082         db  0x0e ; '.'
0000000000024083         db  0x10 ; '.'
0000000000024084         db  0x41 ; 'A'
0000000000024085         db  0x0e ; '.'
0000000000024086         db  0x08 ; '.'
0000000000024087         db  0x00 ; '.'
0000000000024088         dd         0x00000010                                  ; Length of the record
000000000002408c         dd         0x00000664                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024090         db         0xf0, 0x12, 0xfe, 0xff                      ; begin 0x5380
0000000000024094         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x540a)
0000000000024098         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024099         align      4
000000000002409c         dd         0x00000010                                  ; Length of the record
00000000000240a0         dd         0x00000678                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000240a4         db         0x6c, 0x13, 0xfe, 0xff                      ; begin 0x5410
00000000000240a8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x541a)
00000000000240ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000240ad         align      16
00000000000240b0         dd         0x0000003c                                  ; Length of the record
00000000000240b4         dd         0x0000068c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000240b8         db         0x68, 0x13, 0xfe, 0xff                      ; begin 0x5420
00000000000240bc         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x5507)
00000000000240c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000240c1         db  0x42 ; 'B'
00000000000240c2         db  0x0e ; '.'
00000000000240c3         db  0x10 ; '.'
00000000000240c4         db  0x8e ; '.'
00000000000240c5         db  0x02 ; '.'
00000000000240c6         db  0x42 ; 'B'
00000000000240c7         db  0x0e ; '.'
00000000000240c8         db  0x18 ; '.'
00000000000240c9         db  0x8d ; '.'
00000000000240ca         db  0x03 ; '.'
00000000000240cb         db  0x45 ; 'E'
00000000000240cc         db  0x0e ; '.'
00000000000240cd         db  0x20 ; ' '
00000000000240ce         db  0x8c ; '.'
00000000000240cf         db  0x04 ; '.'
00000000000240d0         db  0x41 ; 'A'
00000000000240d1         db  0x0e ; '.'
00000000000240d2         db  0x28 ; '('
00000000000240d3         db  0x86 ; '.'
00000000000240d4         db  0x05 ; '.'
00000000000240d5         db  0x41 ; 'A'
00000000000240d6         db  0x0e ; '.'
00000000000240d7         db  0x30 ; '0'
00000000000240d8         db  0x83 ; '.'
00000000000240d9         db  0x06 ; '.'
00000000000240da         db  0x02 ; '.'
00000000000240db         db  0xaa ; '.'
00000000000240dc         db  0x0a ; '.'
00000000000240dd         db  0x0e ; '.'
00000000000240de         db  0x28 ; '('
00000000000240df         db  0x44 ; 'D'
00000000000240e0         db  0x0e ; '.'
00000000000240e1         db  0x20 ; ' '
00000000000240e2         db  0x42 ; 'B'
00000000000240e3         db  0x0e ; '.'
00000000000240e4         db  0x18 ; '.'
00000000000240e5         db  0x42 ; 'B'
00000000000240e6         db  0x0e ; '.'
00000000000240e7         db  0x10 ; '.'
00000000000240e8         db  0x42 ; 'B'
00000000000240e9         db  0x0e ; '.'
00000000000240ea         db  0x08 ; '.'
00000000000240eb         db  0x49 ; 'I'
00000000000240ec         db  0x0b ; '.'
00000000000240ed         db  0x00 ; '.'
00000000000240ee         db  0x00 ; '.'
00000000000240ef         db  0x00 ; '.'
00000000000240f0         dd         0x0000004c                                  ; Length of the record
00000000000240f4         dd         0x000006cc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000240f8         db         0x18, 0x14, 0xfe, 0xff                      ; begin 0x5510
00000000000240fc         db         0xc7, 3 dup (0x00)                          ; length 0xc7 (end at 0x55d7)
0000000000024100         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024101         db  0x42 ; 'B'
0000000000024102         db  0x0e ; '.'
0000000000024103         db  0x10 ; '.'
0000000000024104         db  0x8e ; '.'
0000000000024105         db  0x02 ; '.'
0000000000024106         db  0x42 ; 'B'
0000000000024107         db  0x0e ; '.'
0000000000024108         db  0x18 ; '.'
0000000000024109         db  0x8d ; '.'
000000000002410a         db  0x03 ; '.'
000000000002410b         db  0x45 ; 'E'
000000000002410c         db  0x0e ; '.'
000000000002410d         db  0x20 ; ' '
000000000002410e         db  0x8c ; '.'
000000000002410f         db  0x04 ; '.'
0000000000024110         db  0x4a ; 'J'
0000000000024111         db  0x0e ; '.'
0000000000024112         db  0x28 ; '('
0000000000024113         db  0x86 ; '.'
0000000000024114         db  0x05 ; '.'
0000000000024115         db  0x48 ; 'H'
0000000000024116         db  0x0e ; '.'
0000000000024117         db  0x30 ; '0'
0000000000024118         db  0x83 ; '.'
0000000000024119         db  0x06 ; '.'
000000000002411a         db  0x02 ; '.'
000000000002411b         db  0x4e ; 'N'
000000000002411c         db  0x0a ; '.'
000000000002411d         db  0x0e ; '.'
000000000002411e         db  0x28 ; '('
000000000002411f         db  0x43 ; 'C'
0000000000024120         db  0x0e ; '.'
0000000000024121         db  0x20 ; ' '
0000000000024122         db  0x42 ; 'B'
0000000000024123         db  0x0e ; '.'
0000000000024124         db  0x18 ; '.'
0000000000024125         db  0x42 ; 'B'
0000000000024126         db  0x0e ; '.'
0000000000024127         db  0x10 ; '.'
0000000000024128         db  0x42 ; 'B'
0000000000024129         db  0x0e ; '.'
000000000002412a         db  0x08 ; '.'
000000000002412b         db  0x46 ; 'F'
000000000002412c         db  0x0b ; '.'
000000000002412d         db  0x75 ; 'u'
000000000002412e         db  0x0a ; '.'
000000000002412f         db  0x0e ; '.'
0000000000024130         db  0x28 ; '('
0000000000024131         db  0x43 ; 'C'
0000000000024132         db  0x0e ; '.'
0000000000024133         db  0x20 ; ' '
0000000000024134         db  0x42 ; 'B'
0000000000024135         db  0x0e ; '.'
0000000000024136         db  0x18 ; '.'
0000000000024137         db  0x42 ; 'B'
0000000000024138         db  0x0e ; '.'
0000000000024139         db  0x10 ; '.'
000000000002413a         db  0x42 ; 'B'
000000000002413b         db  0x0e ; '.'
000000000002413c         db  0x08 ; '.'
000000000002413d         db  0x4a ; 'J'
000000000002413e         db  0x0b ; '.'
000000000002413f         db  0x00 ; '.'
0000000000024140         dd         0x00000048                                  ; Length of the record
0000000000024144         dd         0x0000071c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024148         db         0x98, 0x14, 0xfe, 0xff                      ; begin 0x55e0
000000000002414c         db         0x95, 0x01, 2 dup (0x00)                    ; length 0x195 (end at 0x5775)
0000000000024150         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024151         db  0x42 ; 'B'
0000000000024152         db  0x0e ; '.'
0000000000024153         db  0x10 ; '.'
0000000000024154         db  0x8f ; '.'
0000000000024155         db  0x02 ; '.'
0000000000024156         db  0x42 ; 'B'
0000000000024157         db  0x0e ; '.'
0000000000024158         db  0x18 ; '.'
0000000000024159         db  0x8e ; '.'
000000000002415a         db  0x03 ; '.'
000000000002415b         db  0x44 ; 'D'
000000000002415c         db  0x0e ; '.'
000000000002415d         db  0x20 ; ' '
000000000002415e         db  0x8d ; '.'
000000000002415f         db  0x04 ; '.'
0000000000024160         db  0x42 ; 'B'
0000000000024161         db  0x0e ; '.'
0000000000024162         db  0x28 ; '('
0000000000024163         db  0x8c ; '.'
0000000000024164         db  0x05 ; '.'
0000000000024165         db  0x41 ; 'A'
0000000000024166         db  0x0e ; '.'
0000000000024167         db  0x30 ; '0'
0000000000024168         db  0x86 ; '.'
0000000000024169         db  0x06 ; '.'
000000000002416a         db  0x41 ; 'A'
000000000002416b         db  0x0e ; '.'
000000000002416c         db  0x38 ; '8'
000000000002416d         db  0x83 ; '.'
000000000002416e         db  0x07 ; '.'
000000000002416f         db  0x44 ; 'D'
0000000000024170         db  0x0e ; '.'
0000000000024171         db  0x50 ; 'P'
0000000000024172         db  0x02 ; '.'
0000000000024173         db  0x9f ; '.'
0000000000024174         db  0x0a ; '.'
0000000000024175         db  0x0e ; '.'
0000000000024176         db  0x38 ; '8'
0000000000024177         db  0x41 ; 'A'
0000000000024178         db  0x0e ; '.'
0000000000024179         db  0x30 ; '0'
000000000002417a         db  0x41 ; 'A'
000000000002417b         db  0x0e ; '.'
000000000002417c         db  0x28 ; '('
000000000002417d         db  0x42 ; 'B'
000000000002417e         db  0x0e ; '.'
000000000002417f         db  0x20 ; ' '
0000000000024180         db  0x42 ; 'B'
0000000000024181         db  0x0e ; '.'
0000000000024182         db  0x18 ; '.'
0000000000024183         db  0x42 ; 'B'
0000000000024184         db  0x0e ; '.'
0000000000024185         db  0x10 ; '.'
0000000000024186         db  0x42 ; 'B'
0000000000024187         db  0x0e ; '.'
0000000000024188         db  0x08 ; '.'
0000000000024189         db  0x47 ; 'G'
000000000002418a         db  0x0b ; '.'
000000000002418b         db  0x00 ; '.'
000000000002418c         dd         0x0000007c                                  ; Length of the record
0000000000024190         dd         0x00000768                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024194         db         0xec, 0x15, 0xfe, 0xff                      ; begin 0x5780
0000000000024198         db         0x6e, 0x03, 2 dup (0x00)                    ; length 0x36e (end at 0x5aee)
000000000002419c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002419d         db  0x42 ; 'B'
000000000002419e         db  0x0e ; '.'
000000000002419f         db  0x10 ; '.'
00000000000241a0         db  0x8f ; '.'
00000000000241a1         db  0x02 ; '.'
00000000000241a2         db  0x42 ; 'B'
00000000000241a3         db  0x0e ; '.'
00000000000241a4         db  0x18 ; '.'
00000000000241a5         db  0x8e ; '.'
00000000000241a6         db  0x03 ; '.'
00000000000241a7         db  0x42 ; 'B'
00000000000241a8         db  0x0e ; '.'
00000000000241a9         db  0x20 ; ' '
00000000000241aa         db  0x8d ; '.'
00000000000241ab         db  0x04 ; '.'
00000000000241ac         db  0x42 ; 'B'
00000000000241ad         db  0x0e ; '.'
00000000000241ae         db  0x28 ; '('
00000000000241af         db  0x8c ; '.'
00000000000241b0         db  0x05 ; '.'
00000000000241b1         db  0x44 ; 'D'
00000000000241b2         db  0x0e ; '.'
00000000000241b3         db  0x30 ; '0'
00000000000241b4         db  0x86 ; '.'
00000000000241b5         db  0x06 ; '.'
00000000000241b6         db  0x41 ; 'A'
00000000000241b7         db  0x0e ; '.'
00000000000241b8         db  0x38 ; '8'
00000000000241b9         db  0x83 ; '.'
00000000000241ba         db  0x07 ; '.'
00000000000241bb         db  0x49 ; 'I'
00000000000241bc         db  0x0e ; '.'
00000000000241bd         db  0x40 ; '@'
00000000000241be         db  0x02 ; '.'
00000000000241bf         db  0xde ; '.'
00000000000241c0         db  0x0a ; '.'
00000000000241c1         db  0x0e ; '.'
00000000000241c2         db  0x38 ; '8'
00000000000241c3         db  0x41 ; 'A'
00000000000241c4         db  0x0e ; '.'
00000000000241c5         db  0x30 ; '0'
00000000000241c6         db  0x41 ; 'A'
00000000000241c7         db  0x0e ; '.'
00000000000241c8         db  0x28 ; '('
00000000000241c9         db  0x42 ; 'B'
00000000000241ca         db  0x0e ; '.'
00000000000241cb         db  0x20 ; ' '
00000000000241cc         db  0x42 ; 'B'
00000000000241cd         db  0x0e ; '.'
00000000000241ce         db  0x18 ; '.'
00000000000241cf         db  0x42 ; 'B'
00000000000241d0         db  0x0e ; '.'
00000000000241d1         db  0x10 ; '.'
00000000000241d2         db  0x42 ; 'B'
00000000000241d3         db  0x0e ; '.'
00000000000241d4         db  0x08 ; '.'
00000000000241d5         db  0x42 ; 'B'
00000000000241d6         db  0x0b ; '.'
00000000000241d7         db  0x02 ; '.'
00000000000241d8         db  0xa1 ; '.'
00000000000241d9         db  0x0a ; '.'
00000000000241da         db  0x0e ; '.'
00000000000241db         db  0x38 ; '8'
00000000000241dc         db  0x44 ; 'D'
00000000000241dd         db  0x0e ; '.'
00000000000241de         db  0x30 ; '0'
00000000000241df         db  0x41 ; 'A'
00000000000241e0         db  0x0e ; '.'
00000000000241e1         db  0x28 ; '('
00000000000241e2         db  0x42 ; 'B'
00000000000241e3         db  0x0e ; '.'
00000000000241e4         db  0x20 ; ' '
00000000000241e5         db  0x42 ; 'B'
00000000000241e6         db  0x0e ; '.'
00000000000241e7         db  0x18 ; '.'
00000000000241e8         db  0x42 ; 'B'
00000000000241e9         db  0x0e ; '.'
00000000000241ea         db  0x10 ; '.'
00000000000241eb         db  0x42 ; 'B'
00000000000241ec         db  0x0e ; '.'
00000000000241ed         db  0x08 ; '.'
00000000000241ee         db  0x4a ; 'J'
00000000000241ef         db  0x0b ; '.'
00000000000241f0         db  0x02 ; '.'
00000000000241f1         db  0x9e ; '.'
00000000000241f2         db  0x0a ; '.'
00000000000241f3         db  0x0e ; '.'
00000000000241f4         db  0x38 ; '8'
00000000000241f5         db  0x41 ; 'A'
00000000000241f6         db  0x0e ; '.'
00000000000241f7         db  0x30 ; '0'
00000000000241f8         db  0x41 ; 'A'
00000000000241f9         db  0x0e ; '.'
00000000000241fa         db  0x28 ; '('
00000000000241fb         db  0x42 ; 'B'
00000000000241fc         db  0x0e ; '.'
00000000000241fd         db  0x20 ; ' '
00000000000241fe         db  0x42 ; 'B'
00000000000241ff         db  0x0e ; '.'
0000000000024200         db  0x18 ; '.'
0000000000024201         db  0x42 ; 'B'
0000000000024202         db  0x0e ; '.'
0000000000024203         db  0x10 ; '.'
0000000000024204         db  0x42 ; 'B'
0000000000024205         db  0x0e ; '.'
0000000000024206         db  0x08 ; '.'
0000000000024207         db  0x48 ; 'H'
0000000000024208         db  0x0b ; '.'
0000000000024209         db  0x00 ; '.'
000000000002420a         db  0x00 ; '.'
000000000002420b         db  0x00 ; '.'
000000000002420c         dd         0x0000004c                                  ; Length of the record
0000000000024210         dd         0x000007e8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024214         db         0xdc, 0x18, 0xfe, 0xff                      ; begin 0x5af0
0000000000024218         db         0x13, 0x02, 2 dup (0x00)                    ; length 0x213 (end at 0x5d03)
000000000002421c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002421d         db  0x42 ; 'B'
000000000002421e         db  0x0e ; '.'
000000000002421f         db  0x10 ; '.'
0000000000024220         db  0x8f ; '.'
0000000000024221         db  0x02 ; '.'
0000000000024222         db  0x42 ; 'B'
0000000000024223         db  0x0e ; '.'
0000000000024224         db  0x18 ; '.'
0000000000024225         db  0x8e ; '.'
0000000000024226         db  0x03 ; '.'
0000000000024227         db  0x45 ; 'E'
0000000000024228         db  0x0e ; '.'
0000000000024229         db  0x20 ; ' '
000000000002422a         db  0x8d ; '.'
000000000002422b         db  0x04 ; '.'
000000000002422c         db  0x42 ; 'B'
000000000002422d         db  0x0e ; '.'
000000000002422e         db  0x28 ; '('
000000000002422f         db  0x8c ; '.'
0000000000024230         db  0x05 ; '.'
0000000000024231         db  0x44 ; 'D'
0000000000024232         db  0x0e ; '.'
0000000000024233         db  0x30 ; '0'
0000000000024234         db  0x86 ; '.'
0000000000024235         db  0x06 ; '.'
0000000000024236         db  0x41 ; 'A'
0000000000024237         db  0x0e ; '.'
0000000000024238         db  0x38 ; '8'
0000000000024239         db  0x83 ; '.'
000000000002423a         db  0x07 ; '.'
000000000002423b         db  0x4c ; 'L'
000000000002423c         db  0x0e ; '.'
000000000002423d         db  0x80 ; '.'
000000000002423e         db  0x01 ; '.'
000000000002423f         db  0x03 ; '.'
0000000000024240         db  0x83 ; '.'
0000000000024241         db  0x01 ; '.'
0000000000024242         db  0x0a ; '.'
0000000000024243         db  0x0e ; '.'
0000000000024244         db  0x38 ; '8'
0000000000024245         db  0x41 ; 'A'
0000000000024246         db  0x0e ; '.'
0000000000024247         db  0x30 ; '0'
0000000000024248         db  0x41 ; 'A'
0000000000024249         db  0x0e ; '.'
000000000002424a         db  0x28 ; '('
000000000002424b         db  0x42 ; 'B'
000000000002424c         db  0x0e ; '.'
000000000002424d         db  0x20 ; ' '
000000000002424e         db  0x42 ; 'B'
000000000002424f         db  0x0e ; '.'
0000000000024250         db  0x18 ; '.'
0000000000024251         db  0x42 ; 'B'
0000000000024252         db  0x0e ; '.'
0000000000024253         db  0x10 ; '.'
0000000000024254         db  0x42 ; 'B'
0000000000024255         db  0x0e ; '.'
0000000000024256         db  0x08 ; '.'
0000000000024257         db  0x47 ; 'G'
0000000000024258         db  0x0b ; '.'
0000000000024259         db  0x00 ; '.'
000000000002425a         db  0x00 ; '.'
000000000002425b         db  0x00 ; '.'
000000000002425c         dd         0x00000040                                  ; Length of the record
0000000000024260         dd         0x00000838                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024264         db         0xac, 0x1a, 0xfe, 0xff                      ; begin 0x5d10
0000000000024268         db         0xa7, 3 dup (0x00)                          ; length 0xa7 (end at 0x5db7)
000000000002426c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002426d         db  0x42 ; 'B'
000000000002426e         db  0x0e ; '.'
000000000002426f         db  0x10 ; '.'
0000000000024270         db  0x8c ; '.'
0000000000024271         db  0x02 ; '.'
0000000000024272         db  0x41 ; 'A'
0000000000024273         db  0x0e ; '.'
0000000000024274         db  0x18 ; '.'
0000000000024275         db  0x86 ; '.'
0000000000024276         db  0x03 ; '.'
0000000000024277         db  0x44 ; 'D'
0000000000024278         db  0x0e ; '.'
0000000000024279         db  0x20 ; ' '
000000000002427a         db  0x83 ; '.'
000000000002427b         db  0x04 ; '.'
000000000002427c         db  0x47 ; 'G'
000000000002427d         db  0x0e ; '.'
000000000002427e         db  0x30 ; '0'
000000000002427f         db  0x02 ; '.'
0000000000024280         db  0x56 ; 'V'
0000000000024281         db  0x0a ; '.'
0000000000024282         db  0x0e ; '.'
0000000000024283         db  0x20 ; ' '
0000000000024284         db  0x43 ; 'C'
0000000000024285         db  0x0e ; '.'
0000000000024286         db  0x18 ; '.'
0000000000024287         db  0x41 ; 'A'
0000000000024288         db  0x0e ; '.'
0000000000024289         db  0x10 ; '.'
000000000002428a         db  0x42 ; 'B'
000000000002428b         db  0x0e ; '.'
000000000002428c         db  0x08 ; '.'
000000000002428d         db  0x46 ; 'F'
000000000002428e         db  0x0b ; '.'
000000000002428f         db  0x66 ; 'f'
0000000000024290         db  0x0a ; '.'
0000000000024291         db  0x0e ; '.'
0000000000024292         db  0x20 ; ' '
0000000000024293         db  0x45 ; 'E'
0000000000024294         db  0x0e ; '.'
0000000000024295         db  0x18 ; '.'
0000000000024296         db  0x41 ; 'A'
0000000000024297         db  0x0e ; '.'
0000000000024298         db  0x10 ; '.'
0000000000024299         db  0x42 ; 'B'
000000000002429a         db  0x0e ; '.'
000000000002429b         db  0x08 ; '.'
000000000002429c         db  0x42 ; 'B'
000000000002429d         db  0x0b ; '.'
000000000002429e         db  0x00 ; '.'
000000000002429f         db  0x00 ; '.'
00000000000242a0         dd         0x00000038                                  ; Length of the record
00000000000242a4         dd         0x0000087c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000242a8         db         0x18, 0x1b, 0xfe, 0xff                      ; begin 0x5dc0
00000000000242ac         db         0x52, 3 dup (0x00)                          ; length 0x52 (end at 0x5e12)
00000000000242b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000242b1         db  0x47 ; 'G'
00000000000242b2         db  0x0e ; '.'
00000000000242b3         db  0x10 ; '.'
00000000000242b4         db  0x8d ; '.'
00000000000242b5         db  0x02 ; '.'
00000000000242b6         db  0x42 ; 'B'
00000000000242b7         db  0x0e ; '.'
00000000000242b8         db  0x18 ; '.'
00000000000242b9         db  0x8c ; '.'
00000000000242ba         db  0x03 ; '.'
00000000000242bb         db  0x44 ; 'D'
00000000000242bc         db  0x0e ; '.'
00000000000242bd         db  0x20 ; ' '
00000000000242be         db  0x86 ; '.'
00000000000242bf         db  0x04 ; '.'
00000000000242c0         db  0x41 ; 'A'
00000000000242c1         db  0x0e ; '.'
00000000000242c2         db  0x28 ; '('
00000000000242c3         db  0x83 ; '.'
00000000000242c4         db  0x05 ; '.'
00000000000242c5         db  0x4a ; 'J'
00000000000242c6         db  0x0e ; '.'
00000000000242c7         db  0x30 ; '0'
00000000000242c8         db  0x6f ; 'o'
00000000000242c9         db  0x0e ; '.'
00000000000242ca         db  0x28 ; '('
00000000000242cb         db  0x41 ; 'A'
00000000000242cc         db  0x0e ; '.'
00000000000242cd         db  0x20 ; ' '
00000000000242ce         db  0x41 ; 'A'
00000000000242cf         db  0x0e ; '.'
00000000000242d0         db  0x18 ; '.'
00000000000242d1         db  0x42 ; 'B'
00000000000242d2         db  0x0e ; '.'
00000000000242d3         db  0x10 ; '.'
00000000000242d4         db  0x42 ; 'B'
00000000000242d5         db  0x0e ; '.'
00000000000242d6         db  0x08 ; '.'
00000000000242d7         db  0x43 ; 'C'
00000000000242d8         db  0xc3 ; '.'
00000000000242d9         db  0xc6 ; '.'
00000000000242da         db  0xcc ; '.'
00000000000242db         db  0xcd ; '.'
00000000000242dc         dd         0x00000038                                  ; Length of the record
00000000000242e0         dd         0x000008b8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000242e4         db         0x3c, 0x1b, 0xfe, 0xff                      ; begin 0x5e20
00000000000242e8         db         0x52, 3 dup (0x00)                          ; length 0x52 (end at 0x5e72)
00000000000242ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000242ed         db  0x47 ; 'G'
00000000000242ee         db  0x0e ; '.'
00000000000242ef         db  0x10 ; '.'
00000000000242f0         db  0x8d ; '.'
00000000000242f1         db  0x02 ; '.'
00000000000242f2         db  0x42 ; 'B'
00000000000242f3         db  0x0e ; '.'
00000000000242f4         db  0x18 ; '.'
00000000000242f5         db  0x8c ; '.'
00000000000242f6         db  0x03 ; '.'
00000000000242f7         db  0x44 ; 'D'
00000000000242f8         db  0x0e ; '.'
00000000000242f9         db  0x20 ; ' '
00000000000242fa         db  0x86 ; '.'
00000000000242fb         db  0x04 ; '.'
00000000000242fc         db  0x41 ; 'A'
00000000000242fd         db  0x0e ; '.'
00000000000242fe         db  0x28 ; '('
00000000000242ff         db  0x83 ; '.'
0000000000024300         db  0x05 ; '.'
0000000000024301         db  0x4a ; 'J'
0000000000024302         db  0x0e ; '.'
0000000000024303         db  0x30 ; '0'
0000000000024304         db  0x6f ; 'o'
0000000000024305         db  0x0e ; '.'
0000000000024306         db  0x28 ; '('
0000000000024307         db  0x41 ; 'A'
0000000000024308         db  0x0e ; '.'
0000000000024309         db  0x20 ; ' '
000000000002430a         db  0x41 ; 'A'
000000000002430b         db  0x0e ; '.'
000000000002430c         db  0x18 ; '.'
000000000002430d         db  0x42 ; 'B'
000000000002430e         db  0x0e ; '.'
000000000002430f         db  0x10 ; '.'
0000000000024310         db  0x42 ; 'B'
0000000000024311         db  0x0e ; '.'
0000000000024312         db  0x08 ; '.'
0000000000024313         db  0x43 ; 'C'
0000000000024314         db  0xc3 ; '.'
0000000000024315         db  0xc6 ; '.'
0000000000024316         db  0xcc ; '.'
0000000000024317         db  0xcd ; '.'
0000000000024318         dd         0x00000074                                  ; Length of the record
000000000002431c         dd         0x000008f4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024320         db         0x60, 0x1b, 0xfe, 0xff                      ; begin 0x5e80
0000000000024324         db         0x17, 0x1c, 2 dup (0x00)                    ; length 0x1c17 (end at 0x7a97)
0000000000024328         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024329         db  0x42 ; 'B'
000000000002432a         db  0x0e ; '.'
000000000002432b         db  0x10 ; '.'
000000000002432c         db  0x8f ; '.'
000000000002432d         db  0x02 ; '.'
000000000002432e         db  0x42 ; 'B'
000000000002432f         db  0x0e ; '.'
0000000000024330         db  0x18 ; '.'
0000000000024331         db  0x8e ; '.'
0000000000024332         db  0x03 ; '.'
0000000000024333         db  0x45 ; 'E'
0000000000024334         db  0x0e ; '.'
0000000000024335         db  0x20 ; ' '
0000000000024336         db  0x8d ; '.'
0000000000024337         db  0x04 ; '.'
0000000000024338         db  0x42 ; 'B'
0000000000024339         db  0x0e ; '.'
000000000002433a         db  0x28 ; '('
000000000002433b         db  0x8c ; '.'
000000000002433c         db  0x05 ; '.'
000000000002433d         db  0x44 ; 'D'
000000000002433e         db  0x0e ; '.'
000000000002433f         db  0x30 ; '0'
0000000000024340         db  0x86 ; '.'
0000000000024341         db  0x06 ; '.'
0000000000024342         db  0x41 ; 'A'
0000000000024343         db  0x0e ; '.'
0000000000024344         db  0x38 ; '8'
0000000000024345         db  0x83 ; '.'
0000000000024346         db  0x07 ; '.'
0000000000024347         db  0x4a ; 'J'
0000000000024348         db  0x0e ; '.'
0000000000024349         db  0xf0 ; '.'
000000000002434a         db  0x09 ; '.'
000000000002434b         db  0x02 ; '.'
000000000002434c         db  0xc9 ; '.'
000000000002434d         db  0x0a ; '.'
000000000002434e         db  0x0e ; '.'
000000000002434f         db  0x38 ; '8'
0000000000024350         db  0x41 ; 'A'
0000000000024351         db  0x0e ; '.'
0000000000024352         db  0x30 ; '0'
0000000000024353         db  0x41 ; 'A'
0000000000024354         db  0x0e ; '.'
0000000000024355         db  0x28 ; '('
0000000000024356         db  0x42 ; 'B'
0000000000024357         db  0x0e ; '.'
0000000000024358         db  0x20 ; ' '
0000000000024359         db  0x42 ; 'B'
000000000002435a         db  0x0e ; '.'
000000000002435b         db  0x18 ; '.'
000000000002435c         db  0x42 ; 'B'
000000000002435d         db  0x0e ; '.'
000000000002435e         db  0x10 ; '.'
000000000002435f         db  0x42 ; 'B'
0000000000024360         db  0x0e ; '.'
0000000000024361         db  0x08 ; '.'
0000000000024362         db  0x43 ; 'C'
0000000000024363         db  0x0b ; '.'
0000000000024364         db  0x03 ; '.'
0000000000024365         db  0x8d ; '.'
0000000000024366         db  0x05 ; '.'
0000000000024367         db  0x0e ; '.'
0000000000024368         db  0xf8 ; '.'
0000000000024369         db  0x09 ; '.'
000000000002436a         db  0x4d ; 'M'
000000000002436b         db  0x0e ; '.'
000000000002436c         db  0x80 ; '.'
000000000002436d         db  0x0a ; '.'
000000000002436e         db  0x44 ; 'D'
000000000002436f         db  0x0e ; '.'
0000000000024370         db  0x88 ; '.'
0000000000024371         db  0x0a ; '.'
0000000000024372         db  0x46 ; 'F'
0000000000024373         db  0x0e ; '.'
0000000000024374         db  0x90 ; '.'
0000000000024375         db  0x0a ; '.'
0000000000024376         db  0x58 ; 'X'
0000000000024377         db  0x0e ; '.'
0000000000024378         db  0xf0 ; '.'
0000000000024379         db  0x09 ; '.'
000000000002437a         db  0x03 ; '.'
000000000002437b         db  0x8f ; '.'
000000000002437c         db  0x0e ; '.'
000000000002437d         db  0x0e ; '.'
000000000002437e         db  0xf8 ; '.'
000000000002437f         db  0x09 ; '.'
0000000000024380         db  0x50 ; 'P'
0000000000024381         db  0x0e ; '.'
0000000000024382         db  0x80 ; '.'
0000000000024383         db  0x0a ; '.'
0000000000024384         db  0x44 ; 'D'
0000000000024385         db  0x0e ; '.'
0000000000024386         db  0x88 ; '.'
0000000000024387         db  0x0a ; '.'
0000000000024388         db  0x44 ; 'D'
0000000000024389         db  0x0e ; '.'
000000000002438a         db  0x90 ; '.'
000000000002438b         db  0x0a ; '.'
000000000002438c         db  0x58 ; 'X'
000000000002438d         db  0x0e ; '.'
000000000002438e         db  0xf0 ; '.'
000000000002438f         db  0x09 ; '.'
0000000000024390         dd         0x00000024                                  ; Length of the record
0000000000024394         dd         0x0000096c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024398         db         0x08, 0x37, 0xfe, 0xff                      ; begin 0x7aa0
000000000002439c         db         0x50, 3 dup (0x00)                          ; length 0x50 (end at 0x7af0)
00000000000243a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000243a1         db  0x44 ; 'D'
00000000000243a2         db  0x0e ; '.'
00000000000243a3         db  0x28 ; '('
00000000000243a4         db  0x5d ; ']'
00000000000243a5         db  0x0e ; '.'
00000000000243a6         db  0x30 ; '0'
00000000000243a7         db  0x44 ; 'D'
00000000000243a8         db  0x0e ; '.'
00000000000243a9         db  0x38 ; '8'
00000000000243aa         db  0x48 ; 'H'
00000000000243ab         db  0x0e ; '.'
00000000000243ac         db  0x40 ; '@'
00000000000243ad         db  0x49 ; 'I'
00000000000243ae         db  0x0e ; '.'
00000000000243af         db  0x20 ; ' '
00000000000243b0         db  0x54 ; 'T'
00000000000243b1         db  0x0a ; '.'
00000000000243b2         db  0x0e ; '.'
00000000000243b3         db  0x08 ; '.'
00000000000243b4         db  0x41 ; 'A'
00000000000243b5         db  0x0b ; '.'
00000000000243b6         db  0x00 ; '.'
00000000000243b7         db  0x00 ; '.'
00000000000243b8         dd         0x00000024                                  ; Length of the record
00000000000243bc         dd         0x00000994                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000243c0         db         0x30, 0x37, 0xfe, 0xff                      ; begin 0x7af0
00000000000243c4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x7b32)
00000000000243c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000243c9         db  0x41 ; 'A'
00000000000243ca         db  0x0e ; '.'
00000000000243cb         db  0x10 ; '.'
00000000000243cc         db  0x86 ; '.'
00000000000243cd         db  0x02 ; '.'
00000000000243ce         db  0x41 ; 'A'
00000000000243cf         db  0x0e ; '.'
00000000000243d0         db  0x18 ; '.'
00000000000243d1         db  0x83 ; '.'
00000000000243d2         db  0x03 ; '.'
00000000000243d3         db  0x51 ; 'Q'
00000000000243d4         db  0x0e ; '.'
00000000000243d5         db  0x20 ; ' '
00000000000243d6         db  0x6a ; 'j'
00000000000243d7         db  0x0e ; '.'
00000000000243d8         db  0x18 ; '.'
00000000000243d9         db  0x43 ; 'C'
00000000000243da         db  0x0e ; '.'
00000000000243db         db  0x10 ; '.'
00000000000243dc         db  0x41 ; 'A'
00000000000243dd         db  0x0e ; '.'
00000000000243de         db  0x08 ; '.'
00000000000243df         db  0x00 ; '.'
00000000000243e0         dd         0x0000004c                                  ; Length of the record
00000000000243e4         dd         0x000009bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000243e8         db         0x58, 0x37, 0xfe, 0xff                      ; begin 0x7b40
00000000000243ec         db         0xae, 0x01, 2 dup (0x00)                    ; length 0x1ae (end at 0x7cee)
00000000000243f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000243f1         db  0x42 ; 'B'
00000000000243f2         db  0x0e ; '.'
00000000000243f3         db  0x10 ; '.'
00000000000243f4         db  0x8f ; '.'
00000000000243f5         db  0x02 ; '.'
00000000000243f6         db  0x42 ; 'B'
00000000000243f7         db  0x0e ; '.'
00000000000243f8         db  0x18 ; '.'
00000000000243f9         db  0x8e ; '.'
00000000000243fa         db  0x03 ; '.'
00000000000243fb         db  0x45 ; 'E'
00000000000243fc         db  0x0e ; '.'
00000000000243fd         db  0x20 ; ' '
00000000000243fe         db  0x8d ; '.'
00000000000243ff         db  0x04 ; '.'
0000000000024400         db  0x42 ; 'B'
0000000000024401         db  0x0e ; '.'
0000000000024402         db  0x28 ; '('
0000000000024403         db  0x8c ; '.'
0000000000024404         db  0x05 ; '.'
0000000000024405         db  0x44 ; 'D'
0000000000024406         db  0x0e ; '.'
0000000000024407         db  0x30 ; '0'
0000000000024408         db  0x86 ; '.'
0000000000024409         db  0x06 ; '.'
000000000002440a         db  0x41 ; 'A'
000000000002440b         db  0x0e ; '.'
000000000002440c         db  0x38 ; '8'
000000000002440d         db  0x83 ; '.'
000000000002440e         db  0x07 ; '.'
000000000002440f         db  0x44 ; 'D'
0000000000024410         db  0x0e ; '.'
0000000000024411         db  0x50 ; 'P'
0000000000024412         db  0x02 ; '.'
0000000000024413         db  0xd0 ; '.'
0000000000024414         db  0x0a ; '.'
0000000000024415         db  0x0e ; '.'
0000000000024416         db  0x38 ; '8'
0000000000024417         db  0x44 ; 'D'
0000000000024418         db  0x0e ; '.'
0000000000024419         db  0x30 ; '0'
000000000002441a         db  0x41 ; 'A'
000000000002441b         db  0x0e ; '.'
000000000002441c         db  0x28 ; '('
000000000002441d         db  0x42 ; 'B'
000000000002441e         db  0x0e ; '.'
000000000002441f         db  0x20 ; ' '
0000000000024420         db  0x42 ; 'B'
0000000000024421         db  0x0e ; '.'
0000000000024422         db  0x18 ; '.'
0000000000024423         db  0x42 ; 'B'
0000000000024424         db  0x0e ; '.'
0000000000024425         db  0x10 ; '.'
0000000000024426         db  0x42 ; 'B'
0000000000024427         db  0x0e ; '.'
0000000000024428         db  0x08 ; '.'
0000000000024429         db  0x47 ; 'G'
000000000002442a         db  0x0b ; '.'
000000000002442b         db  0x00 ; '.'
000000000002442c         db  0x00 ; '.'
000000000002442d         db  0x00 ; '.'
000000000002442e         db  0x00 ; '.'
000000000002442f         db  0x00 ; '.'
0000000000024430         dd         0x00000010                                  ; Length of the record
0000000000024434         dd         0x00000a0c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024438         db         0xb8, 0x38, 0xfe, 0xff                      ; begin 0x7cf0
000000000002443c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x7d83)
0000000000024440         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024441         align      4
0000000000024444         dd         0x00000010                                  ; Length of the record
0000000000024448         dd         0x00000a20                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002444c         db         0x44, 0x39, 0xfe, 0xff                      ; begin 0x7d90
0000000000024450         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x7da0)
0000000000024454         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024455         align      8
0000000000024458         dd         0x00000010                                  ; Length of the record
000000000002445c         dd         0x00000a34                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024460         db         0x40, 0x39, 0xfe, 0xff                      ; begin 0x7da0
0000000000024464         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x7da7)
0000000000024468         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024469         align      4
000000000002446c         dd         0x00000018                                  ; Length of the record
0000000000024470         dd         0x00000a48                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024474         db         0x3c, 0x39, 0xfe, 0xff                      ; begin 0x7db0
0000000000024478         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x7dd2)
000000000002447c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002447d         db  0x41 ; 'A'
000000000002447e         db  0x0e ; '.'
000000000002447f         db  0x10 ; '.'
0000000000024480         db  0x83 ; '.'
0000000000024481         db  0x02 ; '.'
0000000000024482         db  0x5b ; '['
0000000000024483         db  0x0a ; '.'
0000000000024484         db  0x0e ; '.'
0000000000024485         db  0x08 ; '.'
0000000000024486         db  0x41 ; 'A'
0000000000024487         db  0x0b ; '.'
0000000000024488         dd         0x0000005c                                  ; Length of the record
000000000002448c         dd         0x00000a64                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024490         db         0x50, 0x39, 0xfe, 0xff                      ; begin 0x7de0
0000000000024494         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0x7efe)
0000000000024498         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024499         db  0x42 ; 'B'
000000000002449a         db  0x0e ; '.'
000000000002449b         db  0x10 ; '.'
000000000002449c         db  0x8e ; '.'
000000000002449d         db  0x02 ; '.'
000000000002449e         db  0x42 ; 'B'
000000000002449f         db  0x0e ; '.'
00000000000244a0         db  0x18 ; '.'
00000000000244a1         db  0x8d ; '.'
00000000000244a2         db  0x03 ; '.'
00000000000244a3         db  0x45 ; 'E'
00000000000244a4         db  0x0e ; '.'
00000000000244a5         db  0x20 ; ' '
00000000000244a6         db  0x8c ; '.'
00000000000244a7         db  0x04 ; '.'
00000000000244a8         db  0x41 ; 'A'
00000000000244a9         db  0x0e ; '.'
00000000000244aa         db  0x28 ; '('
00000000000244ab         db  0x86 ; '.'
00000000000244ac         db  0x05 ; '.'
00000000000244ad         db  0x44 ; 'D'
00000000000244ae         db  0x0e ; '.'
00000000000244af         db  0x30 ; '0'
00000000000244b0         db  0x83 ; '.'
00000000000244b1         db  0x06 ; '.'
00000000000244b2         db  0x02 ; '.'
00000000000244b3         db  0xa1 ; '.'
00000000000244b4         db  0x0a ; '.'
00000000000244b5         db  0x0e ; '.'
00000000000244b6         db  0x28 ; '('
00000000000244b7         db  0x44 ; 'D'
00000000000244b8         db  0x0e ; '.'
00000000000244b9         db  0x20 ; ' '
00000000000244ba         db  0x42 ; 'B'
00000000000244bb         db  0x0e ; '.'
00000000000244bc         db  0x18 ; '.'
00000000000244bd         db  0x42 ; 'B'
00000000000244be         db  0x0e ; '.'
00000000000244bf         db  0x10 ; '.'
00000000000244c0         db  0x42 ; 'B'
00000000000244c1         db  0x0e ; '.'
00000000000244c2         db  0x08 ; '.'
00000000000244c3         db  0x47 ; 'G'
00000000000244c4         db  0x0b ; '.'
00000000000244c5         db  0x71 ; 'q'
00000000000244c6         db  0x0a ; '.'
00000000000244c7         db  0x0e ; '.'
00000000000244c8         db  0x28 ; '('
00000000000244c9         db  0x41 ; 'A'
00000000000244ca         db  0x0e ; '.'
00000000000244cb         db  0x20 ; ' '
00000000000244cc         db  0x42 ; 'B'
00000000000244cd         db  0x0e ; '.'
00000000000244ce         db  0x18 ; '.'
00000000000244cf         db  0x42 ; 'B'
00000000000244d0         db  0x0e ; '.'
00000000000244d1         db  0x10 ; '.'
00000000000244d2         db  0x42 ; 'B'
00000000000244d3         db  0x0e ; '.'
00000000000244d4         db  0x08 ; '.'
00000000000244d5         db  0x48 ; 'H'
00000000000244d6         db  0x0b ; '.'
00000000000244d7         db  0x53 ; 'S'
00000000000244d8         db  0x0e ; '.'
00000000000244d9         db  0x28 ; '('
00000000000244da         db  0x44 ; 'D'
00000000000244db         db  0x0e ; '.'
00000000000244dc         db  0x20 ; ' '
00000000000244dd         db  0x42 ; 'B'
00000000000244de         db  0x0e ; '.'
00000000000244df         db  0x18 ; '.'
00000000000244e0         db  0x42 ; 'B'
00000000000244e1         db  0x0e ; '.'
00000000000244e2         db  0x10 ; '.'
00000000000244e3         db  0x42 ; 'B'
00000000000244e4         db  0x0e ; '.'
00000000000244e5         db  0x08 ; '.'
00000000000244e6         db  0x00 ; '.'
00000000000244e7         db  0x00 ; '.'
00000000000244e8         dd         0x00000010                                  ; Length of the record
00000000000244ec         dd         0x00000ac4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000244f0         db         0x10, 0x3a, 0xfe, 0xff                      ; begin 0x7f00
00000000000244f4         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0x7f77)
00000000000244f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000244f9         align      4
00000000000244fc         dd         0x0000005c                                  ; Length of the record
0000000000024500         dd         0x00000ad8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024504         db         0x7c, 0x3a, 0xfe, 0xff                      ; begin 0x7f80
0000000000024508         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0x80c0)
000000000002450c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002450d         db  0x42 ; 'B'
000000000002450e         db  0x0e ; '.'
000000000002450f         db  0x10 ; '.'
0000000000024510         db  0x8f ; '.'
0000000000024511         db  0x02 ; '.'
0000000000024512         db  0x42 ; 'B'
0000000000024513         db  0x0e ; '.'
0000000000024514         db  0x18 ; '.'
0000000000024515         db  0x8e ; '.'
0000000000024516         db  0x03 ; '.'
0000000000024517         db  0x42 ; 'B'
0000000000024518         db  0x0e ; '.'
0000000000024519         db  0x20 ; ' '
000000000002451a         db  0x8d ; '.'
000000000002451b         db  0x04 ; '.'
000000000002451c         db  0x42 ; 'B'
000000000002451d         db  0x0e ; '.'
000000000002451e         db  0x28 ; '('
000000000002451f         db  0x8c ; '.'
0000000000024520         db  0x05 ; '.'
0000000000024521         db  0x41 ; 'A'
0000000000024522         db  0x0e ; '.'
0000000000024523         db  0x30 ; '0'
0000000000024524         db  0x86 ; '.'
0000000000024525         db  0x06 ; '.'
0000000000024526         db  0x41 ; 'A'
0000000000024527         db  0x0e ; '.'
0000000000024528         db  0x38 ; '8'
0000000000024529         db  0x83 ; '.'
000000000002452a         db  0x07 ; '.'
000000000002452b         db  0x44 ; 'D'
000000000002452c         db  0x0e ; '.'
000000000002452d         db  0x40 ; '@'
000000000002452e         db  0x02 ; '.'
000000000002452f         db  0xee ; '.'
0000000000024530         db  0x0a ; '.'
0000000000024531         db  0x0e ; '.'
0000000000024532         db  0x38 ; '8'
0000000000024533         db  0x46 ; 'F'
0000000000024534         db  0x0e ; '.'
0000000000024535         db  0x30 ; '0'
0000000000024536         db  0x41 ; 'A'
0000000000024537         db  0x0e ; '.'
0000000000024538         db  0x28 ; '('
0000000000024539         db  0x42 ; 'B'
000000000002453a         db  0x0e ; '.'
000000000002453b         db  0x20 ; ' '
000000000002453c         db  0x42 ; 'B'
000000000002453d         db  0x0e ; '.'
000000000002453e         db  0x18 ; '.'
000000000002453f         db  0x42 ; 'B'
0000000000024540         db  0x0e ; '.'
0000000000024541         db  0x10 ; '.'
0000000000024542         db  0x42 ; 'B'
0000000000024543         db  0x0e ; '.'
0000000000024544         db  0x08 ; '.'
0000000000024545         db  0x45 ; 'E'
0000000000024546         db  0x0b ; '.'
0000000000024547         db  0x63 ; 'c'
0000000000024548         db  0x0e ; '.'
0000000000024549         db  0x38 ; '8'
000000000002454a         db  0x43 ; 'C'
000000000002454b         db  0x0e ; '.'
000000000002454c         db  0x30 ; '0'
000000000002454d         db  0x41 ; 'A'
000000000002454e         db  0x0e ; '.'
000000000002454f         db  0x28 ; '('
0000000000024550         db  0x42 ; 'B'
0000000000024551         db  0x0e ; '.'
0000000000024552         db  0x20 ; ' '
0000000000024553         db  0x42 ; 'B'
0000000000024554         db  0x0e ; '.'
0000000000024555         db  0x18 ; '.'
0000000000024556         db  0x42 ; 'B'
0000000000024557         db  0x0e ; '.'
0000000000024558         db  0x10 ; '.'
0000000000024559         db  0x42 ; 'B'
000000000002455a         db  0x0e ; '.'
000000000002455b         db  0x08 ; '.'
000000000002455c         dd         0x00000010                                  ; Length of the record
0000000000024560         dd         0x00000b38                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024564         db         0x5c, 0x3b, 0xfe, 0xff                      ; begin 0x80c0
0000000000024568         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x80c5)
000000000002456c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002456d         align      16
0000000000024570         dd         0x00000010                                  ; Length of the record
0000000000024574         dd         0x00000b4c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024578         db         0x58, 0x3b, 0xfe, 0xff                      ; begin 0x80d0
000000000002457c         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x80d5)
0000000000024580         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024581         align      4
0000000000024584         dd         0x00000010                                  ; Length of the record
0000000000024588         dd         0x00000b60                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002458c         db         0x54, 0x3b, 0xfe, 0xff                      ; begin 0x80e0
0000000000024590         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x80e5)
0000000000024594         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024595         align      8
0000000000024598         dd         0x00000010                                  ; Length of the record
000000000002459c         dd         0x00000b74                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000245a0         db         0x50, 0x3b, 0xfe, 0xff                      ; begin 0x80f0
00000000000245a4         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x8139)
00000000000245a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000245a9         align      4
00000000000245ac         dd         0x00000010                                  ; Length of the record
00000000000245b0         dd         0x00000b88                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000245b4         db         0x8c, 0x3b, 0xfe, 0xff                      ; begin 0x8140
00000000000245b8         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x8198)
00000000000245bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000245bd         align      64
00000000000245c0         dd         0x00000038                                  ; Length of the record
00000000000245c4         dd         0x00000b9c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000245c8         db         0xd8, 0x3b, 0xfe, 0xff                      ; begin 0x81a0
00000000000245cc         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0x82e7)
00000000000245d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000245d1         db  0x42 ; 'B'
00000000000245d2         db  0x0e ; '.'
00000000000245d3         db  0x10 ; '.'
00000000000245d4         db  0x8d ; '.'
00000000000245d5         db  0x02 ; '.'
00000000000245d6         db  0x42 ; 'B'
00000000000245d7         db  0x0e ; '.'
00000000000245d8         db  0x18 ; '.'
00000000000245d9         db  0x8c ; '.'
00000000000245da         db  0x03 ; '.'
00000000000245db         db  0x44 ; 'D'
00000000000245dc         db  0x0e ; '.'
00000000000245dd         db  0x20 ; ' '
00000000000245de         db  0x86 ; '.'
00000000000245df         db  0x04 ; '.'
00000000000245e0         db  0x41 ; 'A'
00000000000245e1         db  0x0e ; '.'
00000000000245e2         db  0x28 ; '('
00000000000245e3         db  0x83 ; '.'
00000000000245e4         db  0x05 ; '.'
00000000000245e5         db  0x46 ; 'F'
00000000000245e6         db  0x0e ; '.'
00000000000245e7         db  0x30 ; '0'
00000000000245e8         db  0x02 ; '.'
00000000000245e9         db  0xcd ; '.'
00000000000245ea         db  0x0a ; '.'
00000000000245eb         db  0x0e ; '.'
00000000000245ec         db  0x28 ; '('
00000000000245ed         db  0x47 ; 'G'
00000000000245ee         db  0x0e ; '.'
00000000000245ef         db  0x20 ; ' '
00000000000245f0         db  0x41 ; 'A'
00000000000245f1         db  0x0e ; '.'
00000000000245f2         db  0x18 ; '.'
00000000000245f3         db  0x42 ; 'B'
00000000000245f4         db  0x0e ; '.'
00000000000245f5         db  0x10 ; '.'
00000000000245f6         db  0x42 ; 'B'
00000000000245f7         db  0x0e ; '.'
00000000000245f8         db  0x08 ; '.'
00000000000245f9         db  0x58 ; 'X'
00000000000245fa         db  0x0b ; '.'
00000000000245fb         db  0x00 ; '.'
00000000000245fc         dd         0x00000034                                  ; Length of the record
0000000000024600         dd         0x00000bd8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024604         db         0xec, 0x3c, 0xfe, 0xff                      ; begin 0x82f0
0000000000024608         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x834b)
000000000002460c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002460d         db  0x42 ; 'B'
000000000002460e         db  0x0e ; '.'
000000000002460f         db  0x10 ; '.'
0000000000024610         db  0x8c ; '.'
0000000000024611         db  0x02 ; '.'
0000000000024612         db  0x41 ; 'A'
0000000000024613         db  0x0e ; '.'
0000000000024614         db  0x18 ; '.'
0000000000024615         db  0x86 ; '.'
0000000000024616         db  0x03 ; '.'
0000000000024617         db  0x44 ; 'D'
0000000000024618         db  0x0e ; '.'
0000000000024619         db  0x20 ; ' '
000000000002461a         db  0x83 ; '.'
000000000002461b         db  0x04 ; '.'
000000000002461c         db  0x79 ; 'y'
000000000002461d         db  0x0a ; '.'
000000000002461e         db  0x0e ; '.'
000000000002461f         db  0x18 ; '.'
0000000000024620         db  0x44 ; 'D'
0000000000024621         db  0x0e ; '.'
0000000000024622         db  0x10 ; '.'
0000000000024623         db  0x42 ; 'B'
0000000000024624         db  0x0e ; '.'
0000000000024625         db  0x08 ; '.'
0000000000024626         db  0x4a ; 'J'
0000000000024627         db  0x0b ; '.'
0000000000024628         db  0x44 ; 'D'
0000000000024629         db  0x0e ; '.'
000000000002462a         db  0x18 ; '.'
000000000002462b         db  0x41 ; 'A'
000000000002462c         db  0x0e ; '.'
000000000002462d         db  0x10 ; '.'
000000000002462e         db  0x45 ; 'E'
000000000002462f         db  0x0e ; '.'
0000000000024630         db  0x08 ; '.'
0000000000024631         db  0x00 ; '.'
0000000000024632         db  0x00 ; '.'
0000000000024633         db  0x00 ; '.'
0000000000024634         dd         0x00000010                                  ; Length of the record
0000000000024638         dd         0x00000c10                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002463c         db         0x14, 0x3d, 0xfe, 0xff                      ; begin 0x8350
0000000000024640         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x8391)
0000000000024644         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024645         db  0x7c ; '|'
0000000000024646         db  0x0e ; '.'
0000000000024647         db  0x10 ; '.'
0000000000024648         dd         0x00000030                                  ; Length of the record
000000000002464c         dd         0x00000c24                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024650         db         0x50, 0x3d, 0xfe, 0xff                      ; begin 0x83a0
0000000000024654         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0x8412)
0000000000024658         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024659         db  0x41 ; 'A'
000000000002465a         db  0x0e ; '.'
000000000002465b         db  0x10 ; '.'
000000000002465c         db  0x86 ; '.'
000000000002465d         db  0x02 ; '.'
000000000002465e         db  0x41 ; 'A'
000000000002465f         db  0x0e ; '.'
0000000000024660         db  0x18 ; '.'
0000000000024661         db  0x83 ; '.'
0000000000024662         db  0x03 ; '.'
0000000000024663         db  0x4a ; 'J'
0000000000024664         db  0x0e ; '.'
0000000000024665         db  0x20 ; ' '
0000000000024666         db  0x02 ; '.'
0000000000024667         db  0x53 ; 'S'
0000000000024668         db  0x0a ; '.'
0000000000024669         db  0x0e ; '.'
000000000002466a         db  0x18 ; '.'
000000000002466b         db  0x41 ; 'A'
000000000002466c         db  0x0e ; '.'
000000000002466d         db  0x10 ; '.'
000000000002466e         db  0x41 ; 'A'
000000000002466f         db  0x0e ; '.'
0000000000024670         db  0x08 ; '.'
0000000000024671         db  0x47 ; 'G'
0000000000024672         db  0x0b ; '.'
0000000000024673         db  0x47 ; 'G'
0000000000024674         db  0x0e ; '.'
0000000000024675         db  0x18 ; '.'
0000000000024676         db  0x41 ; 'A'
0000000000024677         db  0x0e ; '.'
0000000000024678         db  0x10 ; '.'
0000000000024679         db  0x41 ; 'A'
000000000002467a         db  0x0e ; '.'
000000000002467b         db  0x08 ; '.'
000000000002467c         dd         0x00000010                                  ; Length of the record
0000000000024680         dd         0x00000c58                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024684         db         0x9c, 0x3d, 0xfe, 0xff                      ; begin 0x8420
0000000000024688         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x8485)
000000000002468c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002468d         align      16
0000000000024690         dd         0x00000048                                  ; Length of the record
0000000000024694         dd         0x00000c6c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024698         db         0xf8, 0x3d, 0xfe, 0xff                      ; begin 0x8490
000000000002469c         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x84fa)
00000000000246a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000246a1         db  0x42 ; 'B'
00000000000246a2         db  0x0e ; '.'
00000000000246a3         db  0x10 ; '.'
00000000000246a4         db  0x8f ; '.'
00000000000246a5         db  0x02 ; '.'
00000000000246a6         db  0x42 ; 'B'
00000000000246a7         db  0x0e ; '.'
00000000000246a8         db  0x18 ; '.'
00000000000246a9         db  0x8e ; '.'
00000000000246aa         db  0x03 ; '.'
00000000000246ab         db  0x42 ; 'B'
00000000000246ac         db  0x0e ; '.'
00000000000246ad         db  0x20 ; ' '
00000000000246ae         db  0x8d ; '.'
00000000000246af         db  0x04 ; '.'
00000000000246b0         db  0x42 ; 'B'
00000000000246b1         db  0x0e ; '.'
00000000000246b2         db  0x28 ; '('
00000000000246b3         db  0x8c ; '.'
00000000000246b4         db  0x05 ; '.'
00000000000246b5         db  0x41 ; 'A'
00000000000246b6         db  0x0e ; '.'
00000000000246b7         db  0x30 ; '0'
00000000000246b8         db  0x86 ; '.'
00000000000246b9         db  0x06 ; '.'
00000000000246ba         db  0x41 ; 'A'
00000000000246bb         db  0x0e ; '.'
00000000000246bc         db  0x38 ; '8'
00000000000246bd         db  0x83 ; '.'
00000000000246be         db  0x07 ; '.'
00000000000246bf         db  0x44 ; 'D'
00000000000246c0         db  0x0e ; '.'
00000000000246c1         db  0x40 ; '@'
00000000000246c2         db  0x02 ; '.'
00000000000246c3         db  0x4a ; 'J'
00000000000246c4         db  0x0a ; '.'
00000000000246c5         db  0x0e ; '.'
00000000000246c6         db  0x38 ; '8'
00000000000246c7         db  0x44 ; 'D'
00000000000246c8         db  0x0e ; '.'
00000000000246c9         db  0x30 ; '0'
00000000000246ca         db  0x41 ; 'A'
00000000000246cb         db  0x0e ; '.'
00000000000246cc         db  0x28 ; '('
00000000000246cd         db  0x42 ; 'B'
00000000000246ce         db  0x0e ; '.'
00000000000246cf         db  0x20 ; ' '
00000000000246d0         db  0x42 ; 'B'
00000000000246d1         db  0x0e ; '.'
00000000000246d2         db  0x18 ; '.'
00000000000246d3         db  0x42 ; 'B'
00000000000246d4         db  0x0e ; '.'
00000000000246d5         db  0x10 ; '.'
00000000000246d6         db  0x42 ; 'B'
00000000000246d7         db  0x0e ; '.'
00000000000246d8         db  0x08 ; '.'
00000000000246d9         db  0x41 ; 'A'
00000000000246da         db  0x0b ; '.'
00000000000246db         db  0x00 ; '.'
00000000000246dc         dd         0x00000010                                  ; Length of the record
00000000000246e0         dd         0x00000cb8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000246e4         db         0x1c, 0x3e, 0xfe, 0xff                      ; begin 0x8500
00000000000246e8         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x8531)
00000000000246ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000246ed         align      16
00000000000246f0         dd         0x00000010                                  ; Length of the record
00000000000246f4         dd         0x00000ccc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000246f8         db         0x48, 0x3e, 0xfe, 0xff                      ; begin 0x8540
00000000000246fc         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x8560)
0000000000024700         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024701         align      4
0000000000024704         dd         0x00000048                                  ; Length of the record
0000000000024708         dd         0x00000ce0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002470c         db         0x54, 0x3e, 0xfe, 0xff                      ; begin 0x8560
0000000000024710         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0x8714)
0000000000024714         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024715         db  0x42 ; 'B'
0000000000024716         db  0x0e ; '.'
0000000000024717         db  0x10 ; '.'
0000000000024718         db  0x8f ; '.'
0000000000024719         db  0x02 ; '.'
000000000002471a         db  0x42 ; 'B'
000000000002471b         db  0x0e ; '.'
000000000002471c         db  0x18 ; '.'
000000000002471d         db  0x8e ; '.'
000000000002471e         db  0x03 ; '.'
000000000002471f         db  0x49 ; 'I'
0000000000024720         db  0x0e ; '.'
0000000000024721         db  0x20 ; ' '
0000000000024722         db  0x8d ; '.'
0000000000024723         db  0x04 ; '.'
0000000000024724         db  0x42 ; 'B'
0000000000024725         db  0x0e ; '.'
0000000000024726         db  0x28 ; '('
0000000000024727         db  0x8c ; '.'
0000000000024728         db  0x05 ; '.'
0000000000024729         db  0x44 ; 'D'
000000000002472a         db  0x0e ; '.'
000000000002472b         db  0x30 ; '0'
000000000002472c         db  0x86 ; '.'
000000000002472d         db  0x06 ; '.'
000000000002472e         db  0x41 ; 'A'
000000000002472f         db  0x0e ; '.'
0000000000024730         db  0x38 ; '8'
0000000000024731         db  0x83 ; '.'
0000000000024732         db  0x07 ; '.'
0000000000024733         db  0x52 ; 'R'
0000000000024734         db  0x0e ; '.'
0000000000024735         db  0x40 ; '@'
0000000000024736         db  0x02 ; '.'
0000000000024737         db  0xd8 ; '.'
0000000000024738         db  0x0a ; '.'
0000000000024739         db  0x0e ; '.'
000000000002473a         db  0x38 ; '8'
000000000002473b         db  0x44 ; 'D'
000000000002473c         db  0x0e ; '.'
000000000002473d         db  0x30 ; '0'
000000000002473e         db  0x41 ; 'A'
000000000002473f         db  0x0e ; '.'
0000000000024740         db  0x28 ; '('
0000000000024741         db  0x42 ; 'B'
0000000000024742         db  0x0e ; '.'
0000000000024743         db  0x20 ; ' '
0000000000024744         db  0x42 ; 'B'
0000000000024745         db  0x0e ; '.'
0000000000024746         db  0x18 ; '.'
0000000000024747         db  0x42 ; 'B'
0000000000024748         db  0x0e ; '.'
0000000000024749         db  0x10 ; '.'
000000000002474a         db  0x42 ; 'B'
000000000002474b         db  0x0e ; '.'
000000000002474c         db  0x08 ; '.'
000000000002474d         db  0x45 ; 'E'
000000000002474e         db  0x0b ; '.'
000000000002474f         db  0x00 ; '.'
0000000000024750         dd         0x00000028                                  ; Length of the record
0000000000024754         dd         0x00000d2c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024758         db         0xc8, 0x3f, 0xfe, 0xff                      ; begin 0x8720
000000000002475c         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x87b0)
0000000000024760         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024761         db  0x42 ; 'B'
0000000000024762         db  0x0e ; '.'
0000000000024763         db  0x10 ; '.'
0000000000024764         db  0x8c ; '.'
0000000000024765         db  0x02 ; '.'
0000000000024766         db  0x41 ; 'A'
0000000000024767         db  0x0e ; '.'
0000000000024768         db  0x18 ; '.'
0000000000024769         db  0x86 ; '.'
000000000002476a         db  0x03 ; '.'
000000000002476b         db  0x44 ; 'D'
000000000002476c         db  0x0e ; '.'
000000000002476d         db  0x20 ; ' '
000000000002476e         db  0x83 ; '.'
000000000002476f         db  0x04 ; '.'
0000000000024770         db  0x02 ; '.'
0000000000024771         db  0x85 ; '.'
0000000000024772         db  0x0e ; '.'
0000000000024773         db  0x18 ; '.'
0000000000024774         db  0x41 ; 'A'
0000000000024775         db  0x0e ; '.'
0000000000024776         db  0x10 ; '.'
0000000000024777         db  0x42 ; 'B'
0000000000024778         db  0x0e ; '.'
0000000000024779         db  0x08 ; '.'
000000000002477a         db  0x00 ; '.'
000000000002477b         db  0x00 ; '.'
000000000002477c         dd         0x00000028                                  ; Length of the record
0000000000024780         dd         0x00000d58                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024784         db         0x2c, 0x40, 0xfe, 0xff                      ; begin 0x87b0
0000000000024788         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0x8886)
000000000002478c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002478d         db  0x42 ; 'B'
000000000002478e         db  0x0e ; '.'
000000000002478f         db  0x10 ; '.'
0000000000024790         db  0x8c ; '.'
0000000000024791         db  0x02 ; '.'
0000000000024792         db  0x41 ; 'A'
0000000000024793         db  0x0e ; '.'
0000000000024794         db  0x18 ; '.'
0000000000024795         db  0x86 ; '.'
0000000000024796         db  0x03 ; '.'
0000000000024797         db  0x44 ; 'D'
0000000000024798         db  0x0e ; '.'
0000000000024799         db  0x20 ; ' '
000000000002479a         db  0x83 ; '.'
000000000002479b         db  0x04 ; '.'
000000000002479c         db  0x02 ; '.'
000000000002479d         db  0xc4 ; '.'
000000000002479e         db  0x0e ; '.'
000000000002479f         db  0x18 ; '.'
00000000000247a0         db  0x44 ; 'D'
00000000000247a1         db  0x0e ; '.'
00000000000247a2         db  0x10 ; '.'
00000000000247a3         db  0x42 ; 'B'
00000000000247a4         db  0x0e ; '.'
00000000000247a5         db  0x08 ; '.'
00000000000247a6         db  0x00 ; '.'
00000000000247a7         db  0x00 ; '.'
00000000000247a8         dd         0x00000034                                  ; Length of the record
00000000000247ac         dd         0x00000d84                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000247b0         db         0xe0, 0x40, 0xfe, 0xff                      ; begin 0x8890
00000000000247b4         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0x8ace)
00000000000247b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000247b9         db  0x42 ; 'B'
00000000000247ba         db  0x0e ; '.'
00000000000247bb         db  0x10 ; '.'
00000000000247bc         db  0x8c ; '.'
00000000000247bd         db  0x02 ; '.'
00000000000247be         db  0x41 ; 'A'
00000000000247bf         db  0x0e ; '.'
00000000000247c0         db  0x18 ; '.'
00000000000247c1         db  0x86 ; '.'
00000000000247c2         db  0x03 ; '.'
00000000000247c3         db  0x44 ; 'D'
00000000000247c4         db  0x0e ; '.'
00000000000247c5         db  0x20 ; ' '
00000000000247c6         db  0x83 ; '.'
00000000000247c7         db  0x04 ; '.'
00000000000247c8         db  0x44 ; 'D'
00000000000247c9         db  0x0e ; '.'
00000000000247ca         db  0x80 ; '.'
00000000000247cb         db  0x01 ; '.'
00000000000247cc         db  0x03 ; '.'
00000000000247cd         db  0x91 ; '.'
00000000000247ce         db  0x01 ; '.'
00000000000247cf         db  0x0a ; '.'
00000000000247d0         db  0x0e ; '.'
00000000000247d1         db  0x20 ; ' '
00000000000247d2         db  0x41 ; 'A'
00000000000247d3         db  0x0e ; '.'
00000000000247d4         db  0x18 ; '.'
00000000000247d5         db  0x41 ; 'A'
00000000000247d6         db  0x0e ; '.'
00000000000247d7         db  0x10 ; '.'
00000000000247d8         db  0x42 ; 'B'
00000000000247d9         db  0x0e ; '.'
00000000000247da         db  0x08 ; '.'
00000000000247db         db  0x48 ; 'H'
00000000000247dc         db  0x0b ; '.'
00000000000247dd         db  0x00 ; '.'
00000000000247de         db  0x00 ; '.'
00000000000247df         db  0x00 ; '.'
00000000000247e0         dd         0x00000038                                  ; Length of the record
00000000000247e4         dd         0x00000dbc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000247e8         db         0xe8, 0x42, 0xfe, 0xff                      ; begin 0x8ad0
00000000000247ec         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0x8d54)
00000000000247f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000247f1         db  0x42 ; 'B'
00000000000247f2         db  0x0e ; '.'
00000000000247f3         db  0x10 ; '.'
00000000000247f4         db  0x8d ; '.'
00000000000247f5         db  0x02 ; '.'
00000000000247f6         db  0x42 ; 'B'
00000000000247f7         db  0x0e ; '.'
00000000000247f8         db  0x18 ; '.'
00000000000247f9         db  0x8c ; '.'
00000000000247fa         db  0x03 ; '.'
00000000000247fb         db  0x41 ; 'A'
00000000000247fc         db  0x0e ; '.'
00000000000247fd         db  0x20 ; ' '
00000000000247fe         db  0x86 ; '.'
00000000000247ff         db  0x04 ; '.'
0000000000024800         db  0x41 ; 'A'
0000000000024801         db  0x0e ; '.'
0000000000024802         db  0x28 ; '('
0000000000024803         db  0x83 ; '.'
0000000000024804         db  0x05 ; '.'
0000000000024805         db  0x44 ; 'D'
0000000000024806         db  0x0e ; '.'
0000000000024807         db  0x40 ; '@'
0000000000024808         db  0x02 ; '.'
0000000000024809         db  0x5a ; 'Z'
000000000002480a         db  0x0a ; '.'
000000000002480b         db  0x0e ; '.'
000000000002480c         db  0x28 ; '('
000000000002480d         db  0x41 ; 'A'
000000000002480e         db  0x0e ; '.'
000000000002480f         db  0x20 ; ' '
0000000000024810         db  0x41 ; 'A'
0000000000024811         db  0x0e ; '.'
0000000000024812         db  0x18 ; '.'
0000000000024813         db  0x42 ; 'B'
0000000000024814         db  0x0e ; '.'
0000000000024815         db  0x10 ; '.'
0000000000024816         db  0x42 ; 'B'
0000000000024817         db  0x0e ; '.'
0000000000024818         db  0x08 ; '.'
0000000000024819         db  0x46 ; 'F'
000000000002481a         db  0x0b ; '.'
000000000002481b         db  0x00 ; '.'
000000000002481c         dd         0x00000020                                  ; Length of the record
0000000000024820         dd         0x00000df8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024824         db         0x3c, 0x45, 0xfe, 0xff                      ; begin 0x8d60
0000000000024828         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x8db9)
000000000002482c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002482d         db  0x41 ; 'A'
000000000002482e         db  0x0e ; '.'
000000000002482f         db  0x10 ; '.'
0000000000024830         db  0x83 ; '.'
0000000000024831         db  0x02 ; '.'
0000000000024832         db  0x47 ; 'G'
0000000000024833         db  0x0e ; '.'
0000000000024834         db  0x20 ; ' '
0000000000024835         db  0x7c ; '|'
0000000000024836         db  0x0a ; '.'
0000000000024837         db  0x0e ; '.'
0000000000024838         db  0x10 ; '.'
0000000000024839         db  0x41 ; 'A'
000000000002483a         db  0x0e ; '.'
000000000002483b         db  0x08 ; '.'
000000000002483c         db  0x4b ; 'K'
000000000002483d         db  0x0b ; '.'
000000000002483e         db  0x00 ; '.'
000000000002483f         db  0x00 ; '.'
0000000000024840         dd         0x00000034                                  ; Length of the record
0000000000024844         dd         0x00000e1c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024848         db         0x78, 0x45, 0xfe, 0xff                      ; begin 0x8dc0
000000000002484c         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0x8fc3)
0000000000024850         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024851         db  0x42 ; 'B'
0000000000024852         db  0x0e ; '.'
0000000000024853         db  0x10 ; '.'
0000000000024854         db  0x8c ; '.'
0000000000024855         db  0x02 ; '.'
0000000000024856         db  0x41 ; 'A'
0000000000024857         db  0x0e ; '.'
0000000000024858         db  0x18 ; '.'
0000000000024859         db  0x86 ; '.'
000000000002485a         db  0x03 ; '.'
000000000002485b         db  0x46 ; 'F'
000000000002485c         db  0x0e ; '.'
000000000002485d         db  0x20 ; ' '
000000000002485e         db  0x83 ; '.'
000000000002485f         db  0x04 ; '.'
0000000000024860         db  0x47 ; 'G'
0000000000024861         db  0x0e ; '.'
0000000000024862         db  0x30 ; '0'
0000000000024863         db  0x02 ; '.'
0000000000024864         db  0x4a ; 'J'
0000000000024865         db  0x0a ; '.'
0000000000024866         db  0x0e ; '.'
0000000000024867         db  0x20 ; ' '
0000000000024868         db  0x41 ; 'A'
0000000000024869         db  0x0e ; '.'
000000000002486a         db  0x18 ; '.'
000000000002486b         db  0x41 ; 'A'
000000000002486c         db  0x0e ; '.'
000000000002486d         db  0x10 ; '.'
000000000002486e         db  0x42 ; 'B'
000000000002486f         db  0x0e ; '.'
0000000000024870         db  0x08 ; '.'
0000000000024871         db  0x42 ; 'B'
0000000000024872         db  0x0b ; '.'
0000000000024873         db  0x00 ; '.'
0000000000024874         db  0x00 ; '.'
0000000000024875         db  0x00 ; '.'
0000000000024876         db  0x00 ; '.'
0000000000024877         db  0x00 ; '.'
0000000000024878         dd         0x00000010                                  ; Length of the record
000000000002487c         dd         0x00000e54                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024880         db         0x50, 0x47, 0xfe, 0xff                      ; begin 0x8fd0
0000000000024884         db         0xc7, 3 dup (0x00)                          ; length 0xc7 (end at 0x9097)
0000000000024888         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024889         align      4
000000000002488c         dd         0x000000a4                                  ; Length of the record
0000000000024890         dd         0x00000e68                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024894         db         0x0c, 0x48, 0xfe, 0xff                      ; begin 0x90a0
0000000000024898         db         0x07, 0x0a, 2 dup (0x00)                    ; length 0xa07 (end at 0x9aa7)
000000000002489c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002489d         db  0x42 ; 'B'
000000000002489e         db  0x0e ; '.'
000000000002489f         db  0x10 ; '.'
00000000000248a0         db  0x8f ; '.'
00000000000248a1         db  0x02 ; '.'
00000000000248a2         db  0x42 ; 'B'
00000000000248a3         db  0x0e ; '.'
00000000000248a4         db  0x18 ; '.'
00000000000248a5         db  0x8e ; '.'
00000000000248a6         db  0x03 ; '.'
00000000000248a7         db  0x44 ; 'D'
00000000000248a8         db  0x0e ; '.'
00000000000248a9         db  0x20 ; ' '
00000000000248aa         db  0x8d ; '.'
00000000000248ab         db  0x04 ; '.'
00000000000248ac         db  0x42 ; 'B'
00000000000248ad         db  0x0e ; '.'
00000000000248ae         db  0x28 ; '('
00000000000248af         db  0x8c ; '.'
00000000000248b0         db  0x05 ; '.'
00000000000248b1         db  0x44 ; 'D'
00000000000248b2         db  0x0e ; '.'
00000000000248b3         db  0x30 ; '0'
00000000000248b4         db  0x86 ; '.'
00000000000248b5         db  0x06 ; '.'
00000000000248b6         db  0x41 ; 'A'
00000000000248b7         db  0x0e ; '.'
00000000000248b8         db  0x38 ; '8'
00000000000248b9         db  0x83 ; '.'
00000000000248ba         db  0x07 ; '.'
00000000000248bb         db  0x54 ; 'T'
00000000000248bc         db  0x0e ; '.'
00000000000248bd         db  0xd0 ; '.'
00000000000248be         db  0x01 ; '.'
00000000000248bf         db  0x03 ; '.'
00000000000248c0         db  0x7e ; '~'
00000000000248c1         db  0x01 ; '.'
00000000000248c2         db  0x0e ; '.'
00000000000248c3         db  0xe0 ; '.'
00000000000248c4         db  0x01 ; '.'
00000000000248c5         db  0x6e ; 'n'
00000000000248c6         db  0x0e ; '.'
00000000000248c7         db  0xd8 ; '.'
00000000000248c8         db  0x01 ; '.'
00000000000248c9         db  0x41 ; 'A'
00000000000248ca         db  0x0e ; '.'
00000000000248cb         db  0xd0 ; '.'
00000000000248cc         db  0x01 ; '.'
00000000000248cd         db  0x03 ; '.'
00000000000248ce         db  0x40 ; '@'
00000000000248cf         db  0x01 ; '.'
00000000000248d0         db  0x0e ; '.'
00000000000248d1         db  0xe0 ; '.'
00000000000248d2         db  0x01 ; '.'
00000000000248d3         db  0x75 ; 'u'
00000000000248d4         db  0x0e ; '.'
00000000000248d5         db  0xd8 ; '.'
00000000000248d6         db  0x01 ; '.'
00000000000248d7         db  0x41 ; 'A'
00000000000248d8         db  0x0e ; '.'
00000000000248d9         db  0xd0 ; '.'
00000000000248da         db  0x01 ; '.'
00000000000248db         db  0x02 ; '.'
00000000000248dc         db  0xea ; '.'
00000000000248dd         db  0x0a ; '.'
00000000000248de         db  0x0e ; '.'
00000000000248df         db  0x38 ; '8'
00000000000248e0         db  0x41 ; 'A'
00000000000248e1         db  0x0e ; '.'
00000000000248e2         db  0x30 ; '0'
00000000000248e3         db  0x41 ; 'A'
00000000000248e4         db  0x0e ; '.'
00000000000248e5         db  0x28 ; '('
00000000000248e6         db  0x42 ; 'B'
00000000000248e7         db  0x0e ; '.'
00000000000248e8         db  0x20 ; ' '
00000000000248e9         db  0x42 ; 'B'
00000000000248ea         db  0x0e ; '.'
00000000000248eb         db  0x18 ; '.'
00000000000248ec         db  0x42 ; 'B'
00000000000248ed         db  0x0e ; '.'
00000000000248ee         db  0x10 ; '.'
00000000000248ef         db  0x42 ; 'B'
00000000000248f0         db  0x0e ; '.'
00000000000248f1         db  0x08 ; '.'
00000000000248f2         db  0x46 ; 'F'
00000000000248f3         db  0x0b ; '.'
00000000000248f4         db  0x03 ; '.'
00000000000248f5         db  0x2c ; ','
00000000000248f6         db  0x01 ; '.'
00000000000248f7         db  0x0e ; '.'
00000000000248f8         db  0xe0 ; '.'
00000000000248f9         db  0x01 ; '.'
00000000000248fa         db  0x52 ; 'R'
00000000000248fb         db  0x0e ; '.'
00000000000248fc         db  0xd8 ; '.'
00000000000248fd         db  0x01 ; '.'
00000000000248fe         db  0x41 ; 'A'
00000000000248ff         db  0x0e ; '.'
0000000000024900         db  0xd0 ; '.'
0000000000024901         db  0x01 ; '.'
0000000000024902         db  0x55 ; 'U'
0000000000024903         db  0x0e ; '.'
0000000000024904         db  0xe0 ; '.'
0000000000024905         db  0x01 ; '.'
0000000000024906         db  0x4d ; 'M'
0000000000024907         db  0x0e ; '.'
0000000000024908         db  0xd8 ; '.'
0000000000024909         db  0x01 ; '.'
000000000002490a         db  0x42 ; 'B'
000000000002490b         db  0x0e ; '.'
000000000002490c         db  0xd0 ; '.'
000000000002490d         db  0x01 ; '.'
000000000002490e         db  0x03 ; '.'
000000000002490f         db  0x51 ; 'Q'
0000000000024910         db  0x01 ; '.'
0000000000024911         db  0x0e ; '.'
0000000000024912         db  0xe0 ; '.'
0000000000024913         db  0x01 ; '.'
0000000000024914         db  0x77 ; 'w'
0000000000024915         db  0x0e ; '.'
0000000000024916         db  0xd8 ; '.'
0000000000024917         db  0x01 ; '.'
0000000000024918         db  0x41 ; 'A'
0000000000024919         db  0x0e ; '.'
000000000002491a         db  0xd0 ; '.'
000000000002491b         db  0x01 ; '.'
000000000002491c         db  0x5d ; ']'
000000000002491d         db  0x0e ; '.'
000000000002491e         db  0xe0 ; '.'
000000000002491f         db  0x01 ; '.'
0000000000024920         db  0x71 ; 'q'
0000000000024921         db  0x0e ; '.'
0000000000024922         db  0xd8 ; '.'
0000000000024923         db  0x01 ; '.'
0000000000024924         db  0x45 ; 'E'
0000000000024925         db  0x0e ; '.'
0000000000024926         db  0xd0 ; '.'
0000000000024927         db  0x01 ; '.'
0000000000024928         db  0x63 ; 'c'
0000000000024929         db  0x0e ; '.'
000000000002492a         db  0xe0 ; '.'
000000000002492b         db  0x01 ; '.'
000000000002492c         db  0x4c ; 'L'
000000000002492d         db  0x0e ; '.'
000000000002492e         db  0xd8 ; '.'
000000000002492f         db  0x01 ; '.'
0000000000024930         db  0x42 ; 'B'
0000000000024931         db  0x0e ; '.'
0000000000024932         db  0xd0 ; '.'
0000000000024933         db  0x01 ; '.'
0000000000024934         dd         0x00000038                                  ; Length of the record
0000000000024938         dd         0x00000f10                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002493c         db         0x74, 0x51, 0xfe, 0xff                      ; begin 0x9ab0
0000000000024940         db         0xe6, 0x01, 2 dup (0x00)                    ; length 0x1e6 (end at 0x9c96)
0000000000024944         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024945         db  0x42 ; 'B'
0000000000024946         db  0x0e ; '.'
0000000000024947         db  0x10 ; '.'
0000000000024948         db  0x8d ; '.'
0000000000024949         db  0x02 ; '.'
000000000002494a         db  0x42 ; 'B'
000000000002494b         db  0x0e ; '.'
000000000002494c         db  0x18 ; '.'
000000000002494d         db  0x8c ; '.'
000000000002494e         db  0x03 ; '.'
000000000002494f         db  0x44 ; 'D'
0000000000024950         db  0x0e ; '.'
0000000000024951         db  0x20 ; ' '
0000000000024952         db  0x86 ; '.'
0000000000024953         db  0x04 ; '.'
0000000000024954         db  0x41 ; 'A'
0000000000024955         db  0x0e ; '.'
0000000000024956         db  0x28 ; '('
0000000000024957         db  0x83 ; '.'
0000000000024958         db  0x05 ; '.'
0000000000024959         db  0x4a ; 'J'
000000000002495a         db  0x0e ; '.'
000000000002495b         db  0x40 ; '@'
000000000002495c         db  0x02 ; '.'
000000000002495d         db  0x7a ; 'z'
000000000002495e         db  0x0a ; '.'
000000000002495f         db  0x0e ; '.'
0000000000024960         db  0x28 ; '('
0000000000024961         db  0x41 ; 'A'
0000000000024962         db  0x0e ; '.'
0000000000024963         db  0x20 ; ' '
0000000000024964         db  0x41 ; 'A'
0000000000024965         db  0x0e ; '.'
0000000000024966         db  0x18 ; '.'
0000000000024967         db  0x42 ; 'B'
0000000000024968         db  0x0e ; '.'
0000000000024969         db  0x10 ; '.'
000000000002496a         db  0x42 ; 'B'
000000000002496b         db  0x0e ; '.'
000000000002496c         db  0x08 ; '.'
000000000002496d         db  0x45 ; 'E'
000000000002496e         db  0x0b ; '.'
000000000002496f         db  0x00 ; '.'
0000000000024970         dd         0x00000010                                  ; Length of the record
0000000000024974         dd         0x00000f4c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024978         db         0x28, 0x53, 0xfe, 0xff                      ; begin 0x9ca0
000000000002497c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x9cac)
0000000000024980         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024981         align      4
0000000000024984         dd         0x00000010                                  ; Length of the record
0000000000024988         dd         0x00000f60                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002498c         db         0x24, 0x53, 0xfe, 0xff                      ; begin 0x9cb0
0000000000024990         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x9cba)
0000000000024994         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024995         align      8
0000000000024998         dd         0x00000028                                  ; Length of the record
000000000002499c         dd         0x00000f74                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000249a0         db         0x20, 0x53, 0xfe, 0xff                      ; begin 0x9cc0
00000000000249a4         db         0x6c, 3 dup (0x00)                          ; length 0x6c (end at 0x9d2c)
00000000000249a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000249a9         db  0x41 ; 'A'
00000000000249aa         db  0x0e ; '.'
00000000000249ab         db  0x10 ; '.'
00000000000249ac         db  0x86 ; '.'
00000000000249ad         db  0x02 ; '.'
00000000000249ae         db  0x41 ; 'A'
00000000000249af         db  0x0e ; '.'
00000000000249b0         db  0x18 ; '.'
00000000000249b1         db  0x83 ; '.'
00000000000249b2         db  0x03 ; '.'
00000000000249b3         db  0x4c ; 'L'
00000000000249b4         db  0x0e ; '.'
00000000000249b5         db  0x20 ; ' '
00000000000249b6         db  0x02 ; '.'
00000000000249b7         db  0x46 ; 'F'
00000000000249b8         db  0x0a ; '.'
00000000000249b9         db  0x0e ; '.'
00000000000249ba         db  0x18 ; '.'
00000000000249bb         db  0x44 ; 'D'
00000000000249bc         db  0x0e ; '.'
00000000000249bd         db  0x10 ; '.'
00000000000249be         db  0x41 ; 'A'
00000000000249bf         db  0x0e ; '.'
00000000000249c0         db  0x08 ; '.'
00000000000249c1         db  0x47 ; 'G'
00000000000249c2         db  0x0b ; '.'
00000000000249c3         db  0x00 ; '.'
00000000000249c4         dd         0x00000018                                  ; Length of the record
00000000000249c8         dd         0x00000fa0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000249cc         db         0x64, 0x53, 0xfe, 0xff                      ; begin 0x9d30
00000000000249d0         db         0x1e, 3 dup (0x00)                          ; length 0x1e (end at 0x9d4e)
00000000000249d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000249d5         db  0x41 ; 'A'
00000000000249d6         db  0x0e ; '.'
00000000000249d7         db  0x10 ; '.'
00000000000249d8         db  0x83 ; '.'
00000000000249d9         db  0x02 ; '.'
00000000000249da         db  0x58 ; 'X'
00000000000249db         db  0x0e ; '.'
00000000000249dc         db  0x08 ; '.'
00000000000249dd         db  0x00 ; '.'
00000000000249de         db  0x00 ; '.'
00000000000249df         db  0x00 ; '.'
00000000000249e0         dd         0x0000004c                                  ; Length of the record
00000000000249e4         dd         0x00000fbc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000249e8         db         0x68, 0x53, 0xfe, 0xff                      ; begin 0x9d50
00000000000249ec         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x9dee)
00000000000249f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000249f1         db  0x41 ; 'A'
00000000000249f2         db  0x0e ; '.'
00000000000249f3         db  0x10 ; '.'
00000000000249f4         db  0x86 ; '.'
00000000000249f5         db  0x02 ; '.'
00000000000249f6         db  0x41 ; 'A'
00000000000249f7         db  0x0e ; '.'
00000000000249f8         db  0x18 ; '.'
00000000000249f9         db  0x83 ; '.'
00000000000249fa         db  0x03 ; '.'
00000000000249fb         db  0x47 ; 'G'
00000000000249fc         db  0x0e ; '.'
00000000000249fd         db  0x30 ; '0'
00000000000249fe         db  0x73 ; 's'
00000000000249ff         db  0x0a ; '.'
0000000000024a00         db  0x0e ; '.'
0000000000024a01         db  0x18 ; '.'
0000000000024a02         db  0x41 ; 'A'
0000000000024a03         db  0x0e ; '.'
0000000000024a04         db  0x10 ; '.'
0000000000024a05         db  0x41 ; 'A'
0000000000024a06         db  0x0e ; '.'
0000000000024a07         db  0x08 ; '.'
0000000000024a08         db  0x42 ; 'B'
0000000000024a09         db  0x0b ; '.'
0000000000024a0a         db  0x48 ; 'H'
0000000000024a0b         db  0x0a ; '.'
0000000000024a0c         db  0x0e ; '.'
0000000000024a0d         db  0x18 ; '.'
0000000000024a0e         db  0x41 ; 'A'
0000000000024a0f         db  0x0e ; '.'
0000000000024a10         db  0x10 ; '.'
0000000000024a11         db  0x41 ; 'A'
0000000000024a12         db  0x0e ; '.'
0000000000024a13         db  0x08 ; '.'
0000000000024a14         db  0x46 ; 'F'
0000000000024a15         db  0x0b ; '.'
0000000000024a16         db  0x5c ; '\'
0000000000024a17         db  0x0a ; '.'
0000000000024a18         db  0x0e ; '.'
0000000000024a19         db  0x18 ; '.'
0000000000024a1a         db  0x41 ; 'A'
0000000000024a1b         db  0x0e ; '.'
0000000000024a1c         db  0x10 ; '.'
0000000000024a1d         db  0x41 ; 'A'
0000000000024a1e         db  0x0e ; '.'
0000000000024a1f         db  0x08 ; '.'
0000000000024a20         db  0x42 ; 'B'
0000000000024a21         db  0x0b ; '.'
0000000000024a22         db  0x64 ; 'd'
0000000000024a23         db  0x0e ; '.'
0000000000024a24         db  0x18 ; '.'
0000000000024a25         db  0x48 ; 'H'
0000000000024a26         db  0x0e ; '.'
0000000000024a27         db  0x10 ; '.'
0000000000024a28         db  0x41 ; 'A'
0000000000024a29         db  0x0e ; '.'
0000000000024a2a         db  0x08 ; '.'
0000000000024a2b         db  0x00 ; '.'
0000000000024a2c         db  0x00 ; '.'
0000000000024a2d         db  0x00 ; '.'
0000000000024a2e         db  0x00 ; '.'
0000000000024a2f         db  0x00 ; '.'
0000000000024a30         dd         0x00000014                                  ; Length of the record
0000000000024a34         dd         0x0000100c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024a38         db         0xb8, 0x53, 0xfe, 0xff                      ; begin 0x9df0
0000000000024a3c         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x9e8c)
0000000000024a40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024a41         align      8
0000000000024a48         dd         0x0000001c                                  ; Length of the record
0000000000024a4c         dd         0x00001024                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024a50         db         0x40, 0x54, 0xfe, 0xff                      ; begin 0x9e90
0000000000024a54         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x9eb1)
0000000000024a58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024a59         db  0x41 ; 'A'
0000000000024a5a         db  0x0e ; '.'
0000000000024a5b         db  0x10 ; '.'
0000000000024a5c         db  0x83 ; '.'
0000000000024a5d         db  0x02 ; '.'
0000000000024a5e         db  0x4c ; 'L'
0000000000024a5f         db  0x0a ; '.'
0000000000024a60         db  0x0e ; '.'
0000000000024a61         db  0x08 ; '.'
0000000000024a62         db  0x43 ; 'C'
0000000000024a63         db  0x0b ; '.'
0000000000024a64         db  0x50 ; 'P'
0000000000024a65         db  0x0e ; '.'
0000000000024a66         db  0x08 ; '.'
0000000000024a67         db  0x00 ; '.'
0000000000024a68         dd         0x00000028                                  ; Length of the record
0000000000024a6c         dd         0x00001044                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024a70         db         0x50, 0x54, 0xfe, 0xff                      ; begin 0x9ec0
0000000000024a74         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0x9f16)
0000000000024a78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024a79         db  0x41 ; 'A'
0000000000024a7a         db  0x0e ; '.'
0000000000024a7b         db  0x10 ; '.'
0000000000024a7c         db  0x86 ; '.'
0000000000024a7d         db  0x02 ; '.'
0000000000024a7e         db  0x41 ; 'A'
0000000000024a7f         db  0x0e ; '.'
0000000000024a80         db  0x18 ; '.'
0000000000024a81         db  0x83 ; '.'
0000000000024a82         db  0x03 ; '.'
0000000000024a83         db  0x4e ; 'N'
0000000000024a84         db  0x0e ; '.'
0000000000024a85         db  0x20 ; ' '
0000000000024a86         db  0x68 ; 'h'
0000000000024a87         db  0x0a ; '.'
0000000000024a88         db  0x0e ; '.'
0000000000024a89         db  0x18 ; '.'
0000000000024a8a         db  0x41 ; 'A'
0000000000024a8b         db  0x0e ; '.'
0000000000024a8c         db  0x10 ; '.'
0000000000024a8d         db  0x41 ; 'A'
0000000000024a8e         db  0x0e ; '.'
0000000000024a8f         db  0x08 ; '.'
0000000000024a90         db  0x46 ; 'F'
0000000000024a91         db  0x0b ; '.'
0000000000024a92         db  0x00 ; '.'
0000000000024a93         db  0x00 ; '.'
0000000000024a94         dd         0x00000010                                  ; Length of the record
0000000000024a98         dd         0x00001070                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024a9c         db         0x84, 0x54, 0xfe, 0xff                      ; begin 0x9f20
0000000000024aa0         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x9f3d)
0000000000024aa4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024aa5         align      8
0000000000024aa8         dd         0x00000010                                  ; Length of the record
0000000000024aac         dd         0x00001084                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024ab0         db         0x70, 0xdf, 0xfd, 0xff                      ; begin 0x2a20
0000000000024ab4         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x2a43)
0000000000024ab8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ab9         db  0x59 ; 'Y'
0000000000024aba         db  0x0e ; '.'
0000000000024abb         db  0x10 ; '.'
0000000000024abc         dd         0x00000048                                  ; Length of the record
0000000000024ac0         dd         0x00001098                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024ac4         db         0x7c, 0x54, 0xfe, 0xff                      ; begin 0x9f40
0000000000024ac8         db         0x03, 0x07, 2 dup (0x00)                    ; length 0x703 (end at 0xa643)
0000000000024acc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024acd         db  0x42 ; 'B'
0000000000024ace         db  0x0e ; '.'
0000000000024acf         db  0x10 ; '.'
0000000000024ad0         db  0x8f ; '.'
0000000000024ad1         db  0x02 ; '.'
0000000000024ad2         db  0x42 ; 'B'
0000000000024ad3         db  0x0e ; '.'
0000000000024ad4         db  0x18 ; '.'
0000000000024ad5         db  0x8e ; '.'
0000000000024ad6         db  0x03 ; '.'
0000000000024ad7         db  0x42 ; 'B'
0000000000024ad8         db  0x0e ; '.'
0000000000024ad9         db  0x20 ; ' '
0000000000024ada         db  0x8d ; '.'
0000000000024adb         db  0x04 ; '.'
0000000000024adc         db  0x42 ; 'B'
0000000000024add         db  0x0e ; '.'
0000000000024ade         db  0x28 ; '('
0000000000024adf         db  0x8c ; '.'
0000000000024ae0         db  0x05 ; '.'
0000000000024ae1         db  0x41 ; 'A'
0000000000024ae2         db  0x0e ; '.'
0000000000024ae3         db  0x30 ; '0'
0000000000024ae4         db  0x86 ; '.'
0000000000024ae5         db  0x06 ; '.'
0000000000024ae6         db  0x41 ; 'A'
0000000000024ae7         db  0x0e ; '.'
0000000000024ae8         db  0x38 ; '8'
0000000000024ae9         db  0x83 ; '.'
0000000000024aea         db  0x07 ; '.'
0000000000024aeb         db  0x47 ; 'G'
0000000000024aec         db  0x0e ; '.'
0000000000024aed         db  0xd0 ; '.'
0000000000024aee         db  0x01 ; '.'
0000000000024aef         db  0x02 ; '.'
0000000000024af0         db  0xb5 ; '.'
0000000000024af1         db  0x0a ; '.'
0000000000024af2         db  0x0e ; '.'
0000000000024af3         db  0x38 ; '8'
0000000000024af4         db  0x41 ; 'A'
0000000000024af5         db  0x0e ; '.'
0000000000024af6         db  0x30 ; '0'
0000000000024af7         db  0x41 ; 'A'
0000000000024af8         db  0x0e ; '.'
0000000000024af9         db  0x28 ; '('
0000000000024afa         db  0x42 ; 'B'
0000000000024afb         db  0x0e ; '.'
0000000000024afc         db  0x20 ; ' '
0000000000024afd         db  0x42 ; 'B'
0000000000024afe         db  0x0e ; '.'
0000000000024aff         db  0x18 ; '.'
0000000000024b00         db  0x42 ; 'B'
0000000000024b01         db  0x0e ; '.'
0000000000024b02         db  0x10 ; '.'
0000000000024b03         db  0x42 ; 'B'
0000000000024b04         db  0x0e ; '.'
0000000000024b05         db  0x08 ; '.'
0000000000024b06         db  0x48 ; 'H'
0000000000024b07         db  0x0b ; '.'
0000000000024b08         dd         0x0000001c                                  ; Length of the record
0000000000024b0c         dd         0x000010e4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024b10         db         0x40, 0x5b, 0xfe, 0xff                      ; begin 0xa650
0000000000024b14         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0xa6ef)
0000000000024b18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024b19         db  0x44 ; 'D'
0000000000024b1a         db  0x0e ; '.'
0000000000024b1b         db  0x10 ; '.'
0000000000024b1c         db  0x83 ; '.'
0000000000024b1d         db  0x02 ; '.'
0000000000024b1e         db  0x02 ; '.'
0000000000024b1f         db  0x78 ; 'x'
0000000000024b20         db  0x0a ; '.'
0000000000024b21         db  0x0e ; '.'
0000000000024b22         db  0x08 ; '.'
0000000000024b23         db  0x41 ; 'A'
0000000000024b24         db  0x0b ; '.'
0000000000024b25         db  0x00 ; '.'
0000000000024b26         db  0x00 ; '.'
0000000000024b27         db  0x00 ; '.'
0000000000024b28         dd         0x00000040                                  ; Length of the record
0000000000024b2c         dd         0x00001104                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024b30         db         0xc0, 0x5b, 0xfe, 0xff                      ; begin 0xa6f0
0000000000024b34         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0xa7d7)
0000000000024b38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024b39         db  0x41 ; 'A'
0000000000024b3a         db  0x0e ; '.'
0000000000024b3b         db  0x10 ; '.'
0000000000024b3c         db  0x86 ; '.'
0000000000024b3d         db  0x02 ; '.'
0000000000024b3e         db  0x41 ; 'A'
0000000000024b3f         db  0x0e ; '.'
0000000000024b40         db  0x18 ; '.'
0000000000024b41         db  0x83 ; '.'
0000000000024b42         db  0x03 ; '.'
0000000000024b43         db  0x49 ; 'I'
0000000000024b44         db  0x0e ; '.'
0000000000024b45         db  0x20 ; ' '
0000000000024b46         db  0x6e ; 'n'
0000000000024b47         db  0x0a ; '.'
0000000000024b48         db  0x0e ; '.'
0000000000024b49         db  0x18 ; '.'
0000000000024b4a         db  0x41 ; 'A'
0000000000024b4b         db  0x0e ; '.'
0000000000024b4c         db  0x10 ; '.'
0000000000024b4d         db  0x41 ; 'A'
0000000000024b4e         db  0x0e ; '.'
0000000000024b4f         db  0x08 ; '.'
0000000000024b50         db  0x45 ; 'E'
0000000000024b51         db  0x0b ; '.'
0000000000024b52         db  0x02 ; '.'
0000000000024b53         db  0x4a ; 'J'
0000000000024b54         db  0x0a ; '.'
0000000000024b55         db  0x0e ; '.'
0000000000024b56         db  0x18 ; '.'
0000000000024b57         db  0x41 ; 'A'
0000000000024b58         db  0x0e ; '.'
0000000000024b59         db  0x10 ; '.'
0000000000024b5a         db  0x41 ; 'A'
0000000000024b5b         db  0x0e ; '.'
0000000000024b5c         db  0x08 ; '.'
0000000000024b5d         db  0x44 ; 'D'
0000000000024b5e         db  0x0b ; '.'
0000000000024b5f         db  0x02 ; '.'
0000000000024b60         db  0x54 ; 'T'
0000000000024b61         db  0x0e ; '.'
0000000000024b62         db  0x18 ; '.'
0000000000024b63         db  0x41 ; 'A'
0000000000024b64         db  0x0e ; '.'
0000000000024b65         db  0x10 ; '.'
0000000000024b66         db  0x41 ; 'A'
0000000000024b67         db  0x0e ; '.'
0000000000024b68         db  0x08 ; '.'
0000000000024b69         db  0x00 ; '.'
0000000000024b6a         db  0x00 ; '.'
0000000000024b6b         db  0x00 ; '.'
0000000000024b6c         dd         0x00000074                                  ; Length of the record
0000000000024b70         dd         0x00001148                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024b74         db         0x6c, 0x5c, 0xfe, 0xff                      ; begin 0xa7e0
0000000000024b78         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0xba14)
0000000000024b7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024b7d         db  0x42 ; 'B'
0000000000024b7e         db  0x0e ; '.'
0000000000024b7f         db  0x10 ; '.'
0000000000024b80         db  0x8f ; '.'
0000000000024b81         db  0x02 ; '.'
0000000000024b82         db  0x42 ; 'B'
0000000000024b83         db  0x0e ; '.'
0000000000024b84         db  0x18 ; '.'
0000000000024b85         db  0x8e ; '.'
0000000000024b86         db  0x03 ; '.'
0000000000024b87         db  0x45 ; 'E'
0000000000024b88         db  0x0e ; '.'
0000000000024b89         db  0x20 ; ' '
0000000000024b8a         db  0x8d ; '.'
0000000000024b8b         db  0x04 ; '.'
0000000000024b8c         db  0x42 ; 'B'
0000000000024b8d         db  0x0e ; '.'
0000000000024b8e         db  0x28 ; '('
0000000000024b8f         db  0x8c ; '.'
0000000000024b90         db  0x05 ; '.'
0000000000024b91         db  0x44 ; 'D'
0000000000024b92         db  0x0e ; '.'
0000000000024b93         db  0x30 ; '0'
0000000000024b94         db  0x86 ; '.'
0000000000024b95         db  0x06 ; '.'
0000000000024b96         db  0x41 ; 'A'
0000000000024b97         db  0x0e ; '.'
0000000000024b98         db  0x38 ; '8'
0000000000024b99         db  0x83 ; '.'
0000000000024b9a         db  0x07 ; '.'
0000000000024b9b         db  0x53 ; 'S'
0000000000024b9c         db  0x0e ; '.'
0000000000024b9d         db  0xf0 ; '.'
0000000000024b9e         db  0x01 ; '.'
0000000000024b9f         db  0x03 ; '.'
0000000000024ba0         db  0x81 ; '.'
0000000000024ba1         db  0x0b ; '.'
0000000000024ba2         db  0x0e ; '.'
0000000000024ba3         db  0xf8 ; '.'
0000000000024ba4         db  0x01 ; '.'
0000000000024ba5         db  0x4a ; 'J'
0000000000024ba6         db  0x0e ; '.'
0000000000024ba7         db  0x80 ; '.'
0000000000024ba8         db  0x02 ; '.'
0000000000024ba9         db  0x44 ; 'D'
0000000000024baa         db  0x0e ; '.'
0000000000024bab         db  0x88 ; '.'
0000000000024bac         db  0x02 ; '.'
0000000000024bad         db  0x45 ; 'E'
0000000000024bae         db  0x0e ; '.'
0000000000024baf         db  0x90 ; '.'
0000000000024bb0         db  0x02 ; '.'
0000000000024bb1         db  0x5f ; '_'
0000000000024bb2         db  0x0e ; '.'
0000000000024bb3         db  0xf0 ; '.'
0000000000024bb4         db  0x01 ; '.'
0000000000024bb5         db  0x64 ; 'd'
0000000000024bb6         db  0x0a ; '.'
0000000000024bb7         db  0x0e ; '.'
0000000000024bb8         db  0x38 ; '8'
0000000000024bb9         db  0x41 ; 'A'
0000000000024bba         db  0x0e ; '.'
0000000000024bbb         db  0x30 ; '0'
0000000000024bbc         db  0x41 ; 'A'
0000000000024bbd         db  0x0e ; '.'
0000000000024bbe         db  0x28 ; '('
0000000000024bbf         db  0x42 ; 'B'
0000000000024bc0         db  0x0e ; '.'
0000000000024bc1         db  0x20 ; ' '
0000000000024bc2         db  0x42 ; 'B'
0000000000024bc3         db  0x0e ; '.'
0000000000024bc4         db  0x18 ; '.'
0000000000024bc5         db  0x42 ; 'B'
0000000000024bc6         db  0x0e ; '.'
0000000000024bc7         db  0x10 ; '.'
0000000000024bc8         db  0x42 ; 'B'
0000000000024bc9         db  0x0e ; '.'
0000000000024bca         db  0x08 ; '.'
0000000000024bcb         db  0x44 ; 'D'
0000000000024bcc         db  0x0b ; '.'
0000000000024bcd         db  0x03 ; '.'
0000000000024bce         db  0x99 ; '.'
0000000000024bcf         db  0x05 ; '.'
0000000000024bd0         db  0x0e ; '.'
0000000000024bd1         db  0xf8 ; '.'
0000000000024bd2         db  0x01 ; '.'
0000000000024bd3         db  0x4d ; 'M'
0000000000024bd4         db  0x0e ; '.'
0000000000024bd5         db  0x80 ; '.'
0000000000024bd6         db  0x02 ; '.'
0000000000024bd7         db  0x44 ; 'D'
0000000000024bd8         db  0x0e ; '.'
0000000000024bd9         db  0x88 ; '.'
0000000000024bda         db  0x02 ; '.'
0000000000024bdb         db  0x47 ; 'G'
0000000000024bdc         db  0x0e ; '.'
0000000000024bdd         db  0x90 ; '.'
0000000000024bde         db  0x02 ; '.'
0000000000024bdf         db  0x5b ; '['
0000000000024be0         db  0x0e ; '.'
0000000000024be1         db  0xf0 ; '.'
0000000000024be2         db  0x01 ; '.'
0000000000024be3         db  0x00 ; '.'
0000000000024be4         dd         0x00000068                                  ; Length of the record
0000000000024be8         dd         0x000011c0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024bec         db         0x34, 0x6e, 0xfe, 0xff                      ; begin 0xba20
0000000000024bf0         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0xbbcb)
0000000000024bf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024bf5         db  0x42 ; 'B'
0000000000024bf6         db  0x0e ; '.'
0000000000024bf7         db  0x10 ; '.'
0000000000024bf8         db  0x8f ; '.'
0000000000024bf9         db  0x02 ; '.'
0000000000024bfa         db  0x42 ; 'B'
0000000000024bfb         db  0x0e ; '.'
0000000000024bfc         db  0x18 ; '.'
0000000000024bfd         db  0x8e ; '.'
0000000000024bfe         db  0x03 ; '.'
0000000000024bff         db  0x45 ; 'E'
0000000000024c00         db  0x0e ; '.'
0000000000024c01         db  0x20 ; ' '
0000000000024c02         db  0x8d ; '.'
0000000000024c03         db  0x04 ; '.'
0000000000024c04         db  0x42 ; 'B'
0000000000024c05         db  0x0e ; '.'
0000000000024c06         db  0x28 ; '('
0000000000024c07         db  0x8c ; '.'
0000000000024c08         db  0x05 ; '.'
0000000000024c09         db  0x44 ; 'D'
0000000000024c0a         db  0x0e ; '.'
0000000000024c0b         db  0x30 ; '0'
0000000000024c0c         db  0x86 ; '.'
0000000000024c0d         db  0x06 ; '.'
0000000000024c0e         db  0x41 ; 'A'
0000000000024c0f         db  0x0e ; '.'
0000000000024c10         db  0x38 ; '8'
0000000000024c11         db  0x83 ; '.'
0000000000024c12         db  0x07 ; '.'
0000000000024c13         db  0x47 ; 'G'
0000000000024c14         db  0x0e ; '.'
0000000000024c15         db  0x60 ; '`'
0000000000024c16         db  0x02 ; '.'
0000000000024c17         db  0x99 ; '.'
0000000000024c18         db  0x0e ; '.'
0000000000024c19         db  0x68 ; 'h'
0000000000024c1a         db  0x5f ; '_'
0000000000024c1b         db  0x0e ; '.'
0000000000024c1c         db  0x70 ; 'p'
0000000000024c1d         db  0x46 ; 'F'
0000000000024c1e         db  0x0e ; '.'
0000000000024c1f         db  0x78 ; 'x'
0000000000024c20         db  0x42 ; 'B'
0000000000024c21         db  0x0e ; '.'
0000000000024c22         db  0x80 ; '.'
0000000000024c23         db  0x01 ; '.'
0000000000024c24         db  0x59 ; 'Y'
0000000000024c25         db  0x0e ; '.'
0000000000024c26         db  0x60 ; '`'
0000000000024c27         db  0x02 ; '.'
0000000000024c28         db  0x40 ; '@'
0000000000024c29         db  0x0e ; '.'
0000000000024c2a         db  0x68 ; 'h'
0000000000024c2b         db  0x4b ; 'K'
0000000000024c2c         db  0x0e ; '.'
0000000000024c2d         db  0x70 ; 'p'
0000000000024c2e         db  0x43 ; 'C'
0000000000024c2f         db  0x0e ; '.'
0000000000024c30         db  0x78 ; 'x'
0000000000024c31         db  0x45 ; 'E'
0000000000024c32         db  0x0e ; '.'
0000000000024c33         db  0x80 ; '.'
0000000000024c34         db  0x01 ; '.'
0000000000024c35         db  0x5e ; '^'
0000000000024c36         db  0x0e ; '.'
0000000000024c37         db  0x60 ; '`'
0000000000024c38         db  0x4c ; 'L'
0000000000024c39         db  0x0a ; '.'
0000000000024c3a         db  0x0e ; '.'
0000000000024c3b         db  0x38 ; '8'
0000000000024c3c         db  0x44 ; 'D'
0000000000024c3d         db  0x0e ; '.'
0000000000024c3e         db  0x30 ; '0'
0000000000024c3f         db  0x41 ; 'A'
0000000000024c40         db  0x0e ; '.'
0000000000024c41         db  0x28 ; '('
0000000000024c42         db  0x42 ; 'B'
0000000000024c43         db  0x0e ; '.'
0000000000024c44         db  0x20 ; ' '
0000000000024c45         db  0x42 ; 'B'
0000000000024c46         db  0x0e ; '.'
0000000000024c47         db  0x18 ; '.'
0000000000024c48         db  0x42 ; 'B'
0000000000024c49         db  0x0e ; '.'
0000000000024c4a         db  0x10 ; '.'
0000000000024c4b         db  0x42 ; 'B'
0000000000024c4c         db  0x0e ; '.'
0000000000024c4d         db  0x08 ; '.'
0000000000024c4e         db  0x46 ; 'F'
0000000000024c4f         db  0x0b ; '.'
0000000000024c50         dd         0x00000028                                  ; Length of the record
0000000000024c54         dd         0x0000122c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024c58         db         0x78, 0x6f, 0xfe, 0xff                      ; begin 0xbbd0
0000000000024c5c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xbc06)
0000000000024c60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024c61         db  0x42 ; 'B'
0000000000024c62         db  0x0e ; '.'
0000000000024c63         db  0x10 ; '.'
0000000000024c64         db  0x8c ; '.'
0000000000024c65         db  0x02 ; '.'
0000000000024c66         db  0x41 ; 'A'
0000000000024c67         db  0x0e ; '.'
0000000000024c68         db  0x18 ; '.'
0000000000024c69         db  0x86 ; '.'
0000000000024c6a         db  0x03 ; '.'
0000000000024c6b         db  0x41 ; 'A'
0000000000024c6c         db  0x0e ; '.'
0000000000024c6d         db  0x20 ; ' '
0000000000024c6e         db  0x83 ; '.'
0000000000024c6f         db  0x04 ; '.'
0000000000024c70         db  0x6e ; 'n'
0000000000024c71         db  0x0e ; '.'
0000000000024c72         db  0x18 ; '.'
0000000000024c73         db  0x41 ; 'A'
0000000000024c74         db  0x0e ; '.'
0000000000024c75         db  0x10 ; '.'
0000000000024c76         db  0x42 ; 'B'
0000000000024c77         db  0x0e ; '.'
0000000000024c78         db  0x08 ; '.'
0000000000024c79         db  0x00 ; '.'
0000000000024c7a         db  0x00 ; '.'
0000000000024c7b         db  0x00 ; '.'
0000000000024c7c         dd         0x00000010                                  ; Length of the record
0000000000024c80         dd         0x00001258                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024c84         db         0x8c, 0x6f, 0xfe, 0xff                      ; begin 0xbc10
0000000000024c88         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xbc21)
0000000000024c8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024c8d         align      16
0000000000024c90         dd         0x00000010                                  ; Length of the record
0000000000024c94         dd         0x0000126c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024c98         db         0x98, 0x6f, 0xfe, 0xff                      ; begin 0xbc30
0000000000024c9c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xbc41)
0000000000024ca0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ca1         align      4
0000000000024ca4         dd         0x00000010                                  ; Length of the record
0000000000024ca8         dd         0x00001280                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024cac         db         0xa4, 0x6f, 0xfe, 0xff                      ; begin 0xbc50
0000000000024cb0         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xbc85)
0000000000024cb4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024cb5         align      8
0000000000024cb8         dd         0x00000010                                  ; Length of the record
0000000000024cbc         dd         0x00001294                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024cc0         db         0xd0, 0x6f, 0xfe, 0xff                      ; begin 0xbc90
0000000000024cc4         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0xbca5)
0000000000024cc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024cc9         align      4
0000000000024ccc         dd         0x00000010                                  ; Length of the record
0000000000024cd0         dd         0x000012a8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024cd4         db         0xdc, 0x6f, 0xfe, 0xff                      ; begin 0xbcb0
0000000000024cd8         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0xbce0)
0000000000024cdc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024cdd         db  0x6b ; 'k'
0000000000024cde         db  0x0e ; '.'
0000000000024cdf         db  0x10 ; '.'
0000000000024ce0         dd         0x00000050                                  ; Length of the record
0000000000024ce4         dd         0x000012bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024ce8         db         0xf8, 0x6f, 0xfe, 0xff                      ; begin 0xbce0
0000000000024cec         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0xbd54)
0000000000024cf0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024cf1         db  0x42 ; 'B'
0000000000024cf2         db  0x0e ; '.'
0000000000024cf3         db  0x10 ; '.'
0000000000024cf4         db  0x8f ; '.'
0000000000024cf5         db  0x02 ; '.'
0000000000024cf6         db  0x42 ; 'B'
0000000000024cf7         db  0x0e ; '.'
0000000000024cf8         db  0x18 ; '.'
0000000000024cf9         db  0x8e ; '.'
0000000000024cfa         db  0x03 ; '.'
0000000000024cfb         db  0x49 ; 'I'
0000000000024cfc         db  0x0e ; '.'
0000000000024cfd         db  0x20 ; ' '
0000000000024cfe         db  0x8d ; '.'
0000000000024cff         db  0x04 ; '.'
0000000000024d00         db  0x42 ; 'B'
0000000000024d01         db  0x0e ; '.'
0000000000024d02         db  0x28 ; '('
0000000000024d03         db  0x8c ; '.'
0000000000024d04         db  0x05 ; '.'
0000000000024d05         db  0x44 ; 'D'
0000000000024d06         db  0x0e ; '.'
0000000000024d07         db  0x30 ; '0'
0000000000024d08         db  0x86 ; '.'
0000000000024d09         db  0x06 ; '.'
0000000000024d0a         db  0x41 ; 'A'
0000000000024d0b         db  0x0e ; '.'
0000000000024d0c         db  0x38 ; '8'
0000000000024d0d         db  0x83 ; '.'
0000000000024d0e         db  0x07 ; '.'
0000000000024d0f         db  0x4d ; 'M'
0000000000024d10         db  0x0e ; '.'
0000000000024d11         db  0x50 ; 'P'
0000000000024d12         db  0x5f ; '_'
0000000000024d13         db  0x0e ; '.'
0000000000024d14         db  0x58 ; 'X'
0000000000024d15         db  0x47 ; 'G'
0000000000024d16         db  0x0e ; '.'
0000000000024d17         db  0x60 ; '`'
0000000000024d18         db  0x46 ; 'F'
0000000000024d19         db  0x0e ; '.'
0000000000024d1a         db  0x68 ; 'h'
0000000000024d1b         db  0x44 ; 'D'
0000000000024d1c         db  0x0e ; '.'
0000000000024d1d         db  0x70 ; 'p'
0000000000024d1e         db  0x58 ; 'X'
0000000000024d1f         db  0x0e ; '.'
0000000000024d20         db  0x38 ; '8'
0000000000024d21         db  0x41 ; 'A'
0000000000024d22         db  0x0e ; '.'
0000000000024d23         db  0x30 ; '0'
0000000000024d24         db  0x41 ; 'A'
0000000000024d25         db  0x0e ; '.'
0000000000024d26         db  0x28 ; '('
0000000000024d27         db  0x42 ; 'B'
0000000000024d28         db  0x0e ; '.'
0000000000024d29         db  0x20 ; ' '
0000000000024d2a         db  0x42 ; 'B'
0000000000024d2b         db  0x0e ; '.'
0000000000024d2c         db  0x18 ; '.'
0000000000024d2d         db  0x42 ; 'B'
0000000000024d2e         db  0x0e ; '.'
0000000000024d2f         db  0x10 ; '.'
0000000000024d30         db  0x42 ; 'B'
0000000000024d31         db  0x0e ; '.'
0000000000024d32         db  0x08 ; '.'
0000000000024d33         db  0x00 ; '.'
0000000000024d34         dd         0x00000068                                  ; Length of the record
0000000000024d38         dd         0x00001310                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024d3c         db         0x24, 0x70, 0xfe, 0xff                      ; begin 0xbd60
0000000000024d40         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0xbe43)
0000000000024d44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024d45         db  0x42 ; 'B'
0000000000024d46         db  0x0e ; '.'
0000000000024d47         db  0x10 ; '.'
0000000000024d48         db  0x8f ; '.'
0000000000024d49         db  0x02 ; '.'
0000000000024d4a         db  0x42 ; 'B'
0000000000024d4b         db  0x0e ; '.'
0000000000024d4c         db  0x18 ; '.'
0000000000024d4d         db  0x8e ; '.'
0000000000024d4e         db  0x03 ; '.'
0000000000024d4f         db  0x49 ; 'I'
0000000000024d50         db  0x0e ; '.'
0000000000024d51         db  0x20 ; ' '
0000000000024d52         db  0x8d ; '.'
0000000000024d53         db  0x04 ; '.'
0000000000024d54         db  0x42 ; 'B'
0000000000024d55         db  0x0e ; '.'
0000000000024d56         db  0x28 ; '('
0000000000024d57         db  0x8c ; '.'
0000000000024d58         db  0x05 ; '.'
0000000000024d59         db  0x44 ; 'D'
0000000000024d5a         db  0x0e ; '.'
0000000000024d5b         db  0x30 ; '0'
0000000000024d5c         db  0x86 ; '.'
0000000000024d5d         db  0x06 ; '.'
0000000000024d5e         db  0x41 ; 'A'
0000000000024d5f         db  0x0e ; '.'
0000000000024d60         db  0x38 ; '8'
0000000000024d61         db  0x83 ; '.'
0000000000024d62         db  0x07 ; '.'
0000000000024d63         db  0x4d ; 'M'
0000000000024d64         db  0x0e ; '.'
0000000000024d65         db  0x70 ; 'p'
0000000000024d66         db  0x65 ; 'e'
0000000000024d67         db  0x0e ; '.'
0000000000024d68         db  0x78 ; 'x'
0000000000024d69         db  0x4d ; 'M'
0000000000024d6a         db  0x0e ; '.'
0000000000024d6b         db  0x80 ; '.'
0000000000024d6c         db  0x01 ; '.'
0000000000024d6d         db  0x46 ; 'F'
0000000000024d6e         db  0x0e ; '.'
0000000000024d6f         db  0x88 ; '.'
0000000000024d70         db  0x01 ; '.'
0000000000024d71         db  0x42 ; 'B'
0000000000024d72         db  0x0e ; '.'
0000000000024d73         db  0x90 ; '.'
0000000000024d74         db  0x01 ; '.'
0000000000024d75         db  0x5e ; '^'
0000000000024d76         db  0x0e ; '.'
0000000000024d77         db  0x70 ; 'p'
0000000000024d78         db  0x56 ; 'V'
0000000000024d79         db  0x0e ; '.'
0000000000024d7a         db  0x78 ; 'x'
0000000000024d7b         db  0x43 ; 'C'
0000000000024d7c         db  0x0e ; '.'
0000000000024d7d         db  0x80 ; '.'
0000000000024d7e         db  0x01 ; '.'
0000000000024d7f         db  0x43 ; 'C'
0000000000024d80         db  0x0e ; '.'
0000000000024d81         db  0x88 ; '.'
0000000000024d82         db  0x01 ; '.'
0000000000024d83         db  0x56 ; 'V'
0000000000024d84         db  0x0e ; '.'
0000000000024d85         db  0x90 ; '.'
0000000000024d86         db  0x01 ; '.'
0000000000024d87         db  0x52 ; 'R'
0000000000024d88         db  0x0e ; '.'
0000000000024d89         db  0x70 ; 'p'
0000000000024d8a         db  0x5b ; '['
0000000000024d8b         db  0x0e ; '.'
0000000000024d8c         db  0x38 ; '8'
0000000000024d8d         db  0x41 ; 'A'
0000000000024d8e         db  0x0e ; '.'
0000000000024d8f         db  0x30 ; '0'
0000000000024d90         db  0x41 ; 'A'
0000000000024d91         db  0x0e ; '.'
0000000000024d92         db  0x28 ; '('
0000000000024d93         db  0x42 ; 'B'
0000000000024d94         db  0x0e ; '.'
0000000000024d95         db  0x20 ; ' '
0000000000024d96         db  0x42 ; 'B'
0000000000024d97         db  0x0e ; '.'
0000000000024d98         db  0x18 ; '.'
0000000000024d99         db  0x42 ; 'B'
0000000000024d9a         db  0x0e ; '.'
0000000000024d9b         db  0x10 ; '.'
0000000000024d9c         db  0x42 ; 'B'
0000000000024d9d         db  0x0e ; '.'
0000000000024d9e         db  0x08 ; '.'
0000000000024d9f         db  0x00 ; '.'
0000000000024da0         dd         0x00000010                                  ; Length of the record
0000000000024da4         dd         0x0000137c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024da8         db         0xa8, 0x70, 0xfe, 0xff                      ; begin 0xbe50
0000000000024dac         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xbe5a)
0000000000024db0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024db1         align      4
0000000000024db4         dd         0x00000028                                  ; Length of the record
0000000000024db8         dd         0x00001390                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024dbc         db         0xa4, 0x70, 0xfe, 0xff                      ; begin 0xbe60
0000000000024dc0         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0xbef3)
0000000000024dc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024dc5         db  0x48 ; 'H'
0000000000024dc6         db  0x0e ; '.'
0000000000024dc7         db  0x10 ; '.'
0000000000024dc8         db  0x8c ; '.'
0000000000024dc9         db  0x02 ; '.'
0000000000024dca         db  0x48 ; 'H'
0000000000024dcb         db  0x0e ; '.'
0000000000024dcc         db  0x18 ; '.'
0000000000024dcd         db  0x86 ; '.'
0000000000024dce         db  0x03 ; '.'
0000000000024dcf         db  0x41 ; 'A'
0000000000024dd0         db  0x0e ; '.'
0000000000024dd1         db  0x20 ; ' '
0000000000024dd2         db  0x83 ; '.'
0000000000024dd3         db  0x04 ; '.'
0000000000024dd4         db  0x02 ; '.'
0000000000024dd5         db  0x74 ; 't'
0000000000024dd6         db  0x0e ; '.'
0000000000024dd7         db  0x18 ; '.'
0000000000024dd8         db  0x4b ; 'K'
0000000000024dd9         db  0x0e ; '.'
0000000000024dda         db  0x10 ; '.'
0000000000024ddb         db  0x42 ; 'B'
0000000000024ddc         db  0x0e ; '.'
0000000000024ddd         db  0x08 ; '.'
0000000000024dde         db  0x00 ; '.'
0000000000024ddf         db  0x00 ; '.'
0000000000024de0         dd         0x00000010                                  ; Length of the record
0000000000024de4         dd         0x000013bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024de8         db         0x18, 0x71, 0xfe, 0xff                      ; begin 0xbf00
0000000000024dec         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xbf13)
0000000000024df0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024df1         align      4
0000000000024df4         dd         0x00000010                                  ; Length of the record
0000000000024df8         dd         0x000013d0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024dfc         db         0x24, 0x71, 0xfe, 0xff                      ; begin 0xbf20
0000000000024e00         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xbf2c)
0000000000024e04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e05         align      8
0000000000024e08         dd         0x00000010                                  ; Length of the record
0000000000024e0c         dd         0x000013e4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e10         db         0x20, 0x71, 0xfe, 0xff                      ; begin 0xbf30
0000000000024e14         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xbf48)
0000000000024e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e19         align      4
0000000000024e1c         dd         0x00000010                                  ; Length of the record
0000000000024e20         dd         0x000013f8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e24         db         0x2c, 0x71, 0xfe, 0xff                      ; begin 0xbf50
0000000000024e28         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xbf64)
0000000000024e2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e2d         align      16
0000000000024e30         dd         0x00000018                                  ; Length of the record
0000000000024e34         dd         0x0000140c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e38         db         0x38, 0x71, 0xfe, 0xff                      ; begin 0xbf70
0000000000024e3c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0xbffe)
0000000000024e40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e41         db  0x44 ; 'D'
0000000000024e42         db  0x0e ; '.'
0000000000024e43         db  0x50 ; 'P'
0000000000024e44         db  0x02 ; '.'
0000000000024e45         db  0x7f ; '.'
0000000000024e46         db  0x0a ; '.'
0000000000024e47         db  0x0e ; '.'
0000000000024e48         db  0x08 ; '.'
0000000000024e49         db  0x41 ; 'A'
0000000000024e4a         db  0x0b ; '.'
0000000000024e4b         db  0x00 ; '.'
0000000000024e4c         dd         0x00000018                                  ; Length of the record
0000000000024e50         dd         0x00001428                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e54         db         0xac, 0x71, 0xfe, 0xff                      ; begin 0xc000
0000000000024e58         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0xc08a)
0000000000024e5c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e5d         db  0x44 ; 'D'
0000000000024e5e         db  0x0e ; '.'
0000000000024e5f         db  0x50 ; 'P'
0000000000024e60         db  0x02 ; '.'
0000000000024e61         db  0x7b ; '{'
0000000000024e62         db  0x0a ; '.'
0000000000024e63         db  0x0e ; '.'
0000000000024e64         db  0x08 ; '.'
0000000000024e65         db  0x41 ; 'A'
0000000000024e66         db  0x0b ; '.'
0000000000024e67         db  0x00 ; '.'
0000000000024e68         dd         0x00000010                                  ; Length of the record
0000000000024e6c         dd         0x00001444                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e70         db         0x20, 0x72, 0xfe, 0xff                      ; begin 0xc090
0000000000024e74         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xc09c)
0000000000024e78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e79         align      4
0000000000024e7c         dd         0x00000010                                  ; Length of the record
0000000000024e80         dd         0x00001458                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e84         db         0x1c, 0x72, 0xfe, 0xff                      ; begin 0xc0a0
0000000000024e88         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0xc0af)
0000000000024e8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024e8d         align      16
0000000000024e90         dd         0x00000018                                  ; Length of the record
0000000000024e94         dd         0x0000146c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024e98         db         0x18, 0x72, 0xfe, 0xff                      ; begin 0xc0b0
0000000000024e9c         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0xc148)
0000000000024ea0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ea1         db  0x44 ; 'D'
0000000000024ea2         db  0x0e ; '.'
0000000000024ea3         db  0x50 ; 'P'
0000000000024ea4         db  0x02 ; '.'
0000000000024ea5         db  0x8e ; '.'
0000000000024ea6         db  0x0a ; '.'
0000000000024ea7         db  0x0e ; '.'
0000000000024ea8         db  0x08 ; '.'
0000000000024ea9         db  0x41 ; 'A'
0000000000024eaa         db  0x0b ; '.'
0000000000024eab         db  0x00 ; '.'
0000000000024eac         dd         0x00000010                                  ; Length of the record
0000000000024eb0         dd         0x00001488                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024eb4         db         0x9c, 0x72, 0xfe, 0xff                      ; begin 0xc150
0000000000024eb8         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0xc160)
0000000000024ebc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ebd         align      64
0000000000024ec0         dd         0x00000010                                  ; Length of the record
0000000000024ec4         dd         0x0000149c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024ec8         db         0x98, 0x72, 0xfe, 0xff                      ; begin 0xc160
0000000000024ecc         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xc171)
0000000000024ed0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ed1         align      4
0000000000024ed4         dd         0x00000010                                  ; Length of the record
0000000000024ed8         dd         0x000014b0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024edc         db         0xa4, 0x72, 0xfe, 0xff                      ; begin 0xc180
0000000000024ee0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xc18a)
0000000000024ee4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ee5         align      8
0000000000024ee8         dd         0x00000018                                  ; Length of the record
0000000000024eec         dd         0x000014c4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024ef0         db         0xa0, 0x72, 0xfe, 0xff                      ; begin 0xc190
0000000000024ef4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0xc21e)
0000000000024ef8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024ef9         db  0x44 ; 'D'
0000000000024efa         db  0x0e ; '.'
0000000000024efb         db  0x50 ; 'P'
0000000000024efc         db  0x02 ; '.'
0000000000024efd         db  0x7f ; '.'
0000000000024efe         db  0x0a ; '.'
0000000000024eff         db  0x0e ; '.'
0000000000024f00         db  0x08 ; '.'
0000000000024f01         db  0x41 ; 'A'
0000000000024f02         db  0x0b ; '.'
0000000000024f03         db  0x00 ; '.'
0000000000024f04         dd         0x00000018                                  ; Length of the record
0000000000024f08         dd         0x000014e0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f0c         db         0x14, 0x73, 0xfe, 0xff                      ; begin 0xc220
0000000000024f10         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0xc2b1)
0000000000024f14         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f15         db  0x44 ; 'D'
0000000000024f16         db  0x0e ; '.'
0000000000024f17         db  0x50 ; 'P'
0000000000024f18         db  0x02 ; '.'
0000000000024f19         db  0x82 ; '.'
0000000000024f1a         db  0x0a ; '.'
0000000000024f1b         db  0x0e ; '.'
0000000000024f1c         db  0x08 ; '.'
0000000000024f1d         db  0x41 ; 'A'
0000000000024f1e         db  0x0b ; '.'
0000000000024f1f         db  0x00 ; '.'
0000000000024f20         dd         0x00000010                                  ; Length of the record
0000000000024f24         dd         0x000014fc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f28         db         0x98, 0x73, 0xfe, 0xff                      ; begin 0xc2c0
0000000000024f2c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xc2cc)
0000000000024f30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f31         align      4
0000000000024f34         dd         0x00000010                                  ; Length of the record
0000000000024f38         dd         0x00001510                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f3c         db         0x94, 0x73, 0xfe, 0xff                      ; begin 0xc2d0
0000000000024f40         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0xc2e7)
0000000000024f44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f45         align      8
0000000000024f48         dd         0x00000010                                  ; Length of the record
0000000000024f4c         dd         0x00001524                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f50         db         0xa0, 0x73, 0xfe, 0xff                      ; begin 0xc2f0
0000000000024f54         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xc303)
0000000000024f58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f59         align      4
0000000000024f5c         dd         0x00000010                                  ; Length of the record
0000000000024f60         dd         0x00001538                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f64         db         0xac, 0x73, 0xfe, 0xff                      ; begin 0xc310
0000000000024f68         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xc31c)
0000000000024f6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f6d         align      16
0000000000024f70         dd         0x00000010                                  ; Length of the record
0000000000024f74         dd         0x0000154c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f78         db         0xa8, 0x73, 0xfe, 0xff                      ; begin 0xc320
0000000000024f7c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xc334)
0000000000024f80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f81         align      4
0000000000024f84         dd         0x00000010                                  ; Length of the record
0000000000024f88         dd         0x00001560                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024f8c         db         0xb4, 0x73, 0xfe, 0xff                      ; begin 0xc340
0000000000024f90         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xc353)
0000000000024f94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024f95         align      8
0000000000024f98         dd         0x00000014                                  ; Length of the record
0000000000024f9c         dd         0x00001574                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024fa0         db         0xc0, 0x73, 0xfe, 0xff                      ; begin 0xc360
0000000000024fa4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xc378)
0000000000024fa8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024fa9         align      16
0000000000024fb0         dd         0x00000024                                  ; Length of the record
0000000000024fb4         dd         0x0000158c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024fb8         db         0xc8, 0x73, 0xfe, 0xff                      ; begin 0xc380
0000000000024fbc         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0xc3b1)
0000000000024fc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024fc1         db  0x41 ; 'A'
0000000000024fc2         db  0x0e ; '.'
0000000000024fc3         db  0x10 ; '.'
0000000000024fc4         db  0x86 ; '.'
0000000000024fc5         db  0x02 ; '.'
0000000000024fc6         db  0x41 ; 'A'
0000000000024fc7         db  0x0e ; '.'
0000000000024fc8         db  0x18 ; '.'
0000000000024fc9         db  0x83 ; '.'
0000000000024fca         db  0x03 ; '.'
0000000000024fcb         db  0x4f ; 'O'
0000000000024fcc         db  0x0e ; '.'
0000000000024fcd         db  0x20 ; ' '
0000000000024fce         db  0x5d ; ']'
0000000000024fcf         db  0x0e ; '.'
0000000000024fd0         db  0x18 ; '.'
0000000000024fd1         db  0x41 ; 'A'
0000000000024fd2         db  0x0e ; '.'
0000000000024fd3         db  0x10 ; '.'
0000000000024fd4         db  0x41 ; 'A'
0000000000024fd5         db  0x0e ; '.'
0000000000024fd6         db  0x08 ; '.'
0000000000024fd7         db  0x00 ; '.'
0000000000024fd8         dd         0x00000110                                  ; Length of the record
0000000000024fdc         dd         0x000015b4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000024fe0         db         0xe0, 0x73, 0xfe, 0xff                      ; begin 0xc3c0
0000000000024fe4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0xc7d7)
0000000000024fe8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000024fe9         db  0x42 ; 'B'
0000000000024fea         db  0x0e ; '.'
0000000000024feb         db  0x10 ; '.'
0000000000024fec         db  0x8f ; '.'
0000000000024fed         db  0x02 ; '.'
0000000000024fee         db  0x42 ; 'B'
0000000000024fef         db  0x0e ; '.'
0000000000024ff0         db  0x18 ; '.'
0000000000024ff1         db  0x8e ; '.'
0000000000024ff2         db  0x03 ; '.'
0000000000024ff3         db  0x42 ; 'B'
0000000000024ff4         db  0x0e ; '.'
0000000000024ff5         db  0x20 ; ' '
0000000000024ff6         db  0x8d ; '.'
0000000000024ff7         db  0x04 ; '.'
0000000000024ff8         db  0x42 ; 'B'
0000000000024ff9         db  0x0e ; '.'
0000000000024ffa         db  0x28 ; '('
0000000000024ffb         db  0x8c ; '.'
0000000000024ffc         db  0x05 ; '.'
0000000000024ffd         db  0x44 ; 'D'
0000000000024ffe         db  0x0e ; '.'
0000000000024fff         db  0x30 ; '0'
0000000000025000         db  0x86 ; '.'
0000000000025001         db  0x06 ; '.'
0000000000025002         db  0x41 ; 'A'
0000000000025003         db  0x0e ; '.'
0000000000025004         db  0x38 ; '8'
0000000000025005         db  0x83 ; '.'
0000000000025006         db  0x07 ; '.'
0000000000025007         db  0x4a ; 'J'
0000000000025008         db  0x0e ; '.'
0000000000025009         db  0x60 ; '`'
000000000002500a         db  0x02 ; '.'
000000000002500b         db  0xdd ; '.'
000000000002500c         db  0x0e ; '.'
000000000002500d         db  0x68 ; 'h'
000000000002500e         db  0x57 ; 'W'
000000000002500f         db  0x0e ; '.'
0000000000025010         db  0x70 ; 'p'
0000000000025011         db  0x42 ; 'B'
0000000000025012         db  0x0e ; '.'
0000000000025013         db  0x78 ; 'x'
0000000000025014         db  0x42 ; 'B'
0000000000025015         db  0x0e ; '.'
0000000000025016         db  0x80 ; '.'
0000000000025017         db  0x01 ; '.'
0000000000025018         db  0x42 ; 'B'
0000000000025019         db  0x0e ; '.'
000000000002501a         db  0x88 ; '.'
000000000002501b         db  0x01 ; '.'
000000000002501c         db  0x42 ; 'B'
000000000002501d         db  0x0e ; '.'
000000000002501e         db  0x90 ; '.'
000000000002501f         db  0x01 ; '.'
0000000000025020         db  0x53 ; 'S'
0000000000025021         db  0x0e ; '.'
0000000000025022         db  0x60 ; '`'
0000000000025023         db  0x44 ; 'D'
0000000000025024         db  0x0a ; '.'
0000000000025025         db  0x0e ; '.'
0000000000025026         db  0x38 ; '8'
0000000000025027         db  0x41 ; 'A'
0000000000025028         db  0x0e ; '.'
0000000000025029         db  0x30 ; '0'
000000000002502a         db  0x41 ; 'A'
000000000002502b         db  0x0e ; '.'
000000000002502c         db  0x28 ; '('
000000000002502d         db  0x42 ; 'B'
000000000002502e         db  0x0e ; '.'
000000000002502f         db  0x20 ; ' '
0000000000025030         db  0x42 ; 'B'
0000000000025031         db  0x0e ; '.'
0000000000025032         db  0x18 ; '.'
0000000000025033         db  0x42 ; 'B'
0000000000025034         db  0x0e ; '.'
0000000000025035         db  0x10 ; '.'
0000000000025036         db  0x42 ; 'B'
0000000000025037         db  0x0e ; '.'
0000000000025038         db  0x08 ; '.'
0000000000025039         db  0x44 ; 'D'
000000000002503a         db  0x0b ; '.'
000000000002503b         db  0x02 ; '.'
000000000002503c         db  0x78 ; 'x'
000000000002503d         db  0x0a ; '.'
000000000002503e         db  0x0e ; '.'
000000000002503f         db  0x68 ; 'h'
0000000000025040         db  0x48 ; 'H'
0000000000025041         db  0x0b ; '.'
0000000000025042         db  0x5a ; 'Z'
0000000000025043         db  0x0a ; '.'
0000000000025044         db  0x0e ; '.'
0000000000025045         db  0x38 ; '8'
0000000000025046         db  0x47 ; 'G'
0000000000025047         db  0x0e ; '.'
0000000000025048         db  0x30 ; '0'
0000000000025049         db  0x41 ; 'A'
000000000002504a         db  0x0e ; '.'
000000000002504b         db  0x28 ; '('
000000000002504c         db  0x42 ; 'B'
000000000002504d         db  0x0e ; '.'
000000000002504e         db  0x20 ; ' '
000000000002504f         db  0x42 ; 'B'
0000000000025050         db  0x0e ; '.'
0000000000025051         db  0x18 ; '.'
0000000000025052         db  0x42 ; 'B'
0000000000025053         db  0x0e ; '.'
0000000000025054         db  0x10 ; '.'
0000000000025055         db  0x42 ; 'B'
0000000000025056         db  0x0e ; '.'
0000000000025057         db  0x08 ; '.'
0000000000025058         db  0x56 ; 'V'
0000000000025059         db  0x0b ; '.'
000000000002505a         db  0x5e ; '^'
000000000002505b         db  0x0a ; '.'
000000000002505c         db  0x0e ; '.'
000000000002505d         db  0x38 ; '8'
000000000002505e         db  0x52 ; 'R'
000000000002505f         db  0x0e ; '.'
0000000000025060         db  0x30 ; '0'
0000000000025061         db  0x41 ; 'A'
0000000000025062         db  0x0e ; '.'
0000000000025063         db  0x28 ; '('
0000000000025064         db  0x42 ; 'B'
0000000000025065         db  0x0e ; '.'
0000000000025066         db  0x20 ; ' '
0000000000025067         db  0x42 ; 'B'
0000000000025068         db  0x0e ; '.'
0000000000025069         db  0x18 ; '.'
000000000002506a         db  0x42 ; 'B'
000000000002506b         db  0x0e ; '.'
000000000002506c         db  0x10 ; '.'
000000000002506d         db  0x42 ; 'B'
000000000002506e         db  0x0e ; '.'
000000000002506f         db  0x08 ; '.'
0000000000025070         db  0x4f ; 'O'
0000000000025071         db  0x0b ; '.'
0000000000025072         db  0x62 ; 'b'
0000000000025073         db  0x0a ; '.'
0000000000025074         db  0x0e ; '.'
0000000000025075         db  0x38 ; '8'
0000000000025076         db  0x50 ; 'P'
0000000000025077         db  0x0e ; '.'
0000000000025078         db  0x30 ; '0'
0000000000025079         db  0x41 ; 'A'
000000000002507a         db  0x0e ; '.'
000000000002507b         db  0x28 ; '('
000000000002507c         db  0x42 ; 'B'
000000000002507d         db  0x0e ; '.'
000000000002507e         db  0x20 ; ' '
000000000002507f         db  0x42 ; 'B'
0000000000025080         db  0x0e ; '.'
0000000000025081         db  0x18 ; '.'
0000000000025082         db  0x42 ; 'B'
0000000000025083         db  0x0e ; '.'
0000000000025084         db  0x10 ; '.'
0000000000025085         db  0x42 ; 'B'
0000000000025086         db  0x0e ; '.'
0000000000025087         db  0x08 ; '.'
0000000000025088         db  0x55 ; 'U'
0000000000025089         db  0x0b ; '.'
000000000002508a         db  0x66 ; 'f'
000000000002508b         db  0x0e ; '.'
000000000002508c         db  0x68 ; 'h'
000000000002508d         db  0x42 ; 'B'
000000000002508e         db  0x0e ; '.'
000000000002508f         db  0x70 ; 'p'
0000000000025090         db  0x5c ; '\'
0000000000025091         db  0x0e ; '.'
0000000000025092         db  0x68 ; 'h'
0000000000025093         db  0x41 ; 'A'
0000000000025094         db  0x0e ; '.'
0000000000025095         db  0x60 ; '`'
0000000000025096         db  0x44 ; 'D'
0000000000025097         db  0x0a ; '.'
0000000000025098         db  0x0e ; '.'
0000000000025099         db  0x38 ; '8'
000000000002509a         db  0x41 ; 'A'
000000000002509b         db  0x0e ; '.'
000000000002509c         db  0x30 ; '0'
000000000002509d         db  0x41 ; 'A'
000000000002509e         db  0x0e ; '.'
000000000002509f         db  0x28 ; '('
00000000000250a0         db  0x42 ; 'B'
00000000000250a1         db  0x0e ; '.'
00000000000250a2         db  0x20 ; ' '
00000000000250a3         db  0x42 ; 'B'
00000000000250a4         db  0x0e ; '.'
00000000000250a5         db  0x18 ; '.'
00000000000250a6         db  0x42 ; 'B'
00000000000250a7         db  0x0e ; '.'
00000000000250a8         db  0x10 ; '.'
00000000000250a9         db  0x42 ; 'B'
00000000000250aa         db  0x0e ; '.'
00000000000250ab         db  0x08 ; '.'
00000000000250ac         db  0x45 ; 'E'
00000000000250ad         db  0x0b ; '.'
00000000000250ae         db  0x68 ; 'h'
00000000000250af         db  0x0a ; '.'
00000000000250b0         db  0x0e ; '.'
00000000000250b1         db  0x68 ; 'h'
00000000000250b2         db  0x48 ; 'H'
00000000000250b3         db  0x0b ; '.'
00000000000250b4         db  0x72 ; 'r'
00000000000250b5         db  0x0e ; '.'
00000000000250b6         db  0x68 ; 'h'
00000000000250b7         db  0x45 ; 'E'
00000000000250b8         db  0x0e ; '.'
00000000000250b9         db  0x70 ; 'p'
00000000000250ba         db  0x42 ; 'B'
00000000000250bb         db  0x0e ; '.'
00000000000250bc         db  0x78 ; 'x'
00000000000250bd         db  0x42 ; 'B'
00000000000250be         db  0x0e ; '.'
00000000000250bf         db  0x80 ; '.'
00000000000250c0         db  0x01 ; '.'
00000000000250c1         db  0x5e ; '^'
00000000000250c2         db  0x0e ; '.'
00000000000250c3         db  0x60 ; '`'
00000000000250c4         db  0x44 ; 'D'
00000000000250c5         db  0x0a ; '.'
00000000000250c6         db  0x0e ; '.'
00000000000250c7         db  0x38 ; '8'
00000000000250c8         db  0x41 ; 'A'
00000000000250c9         db  0x0e ; '.'
00000000000250ca         db  0x30 ; '0'
00000000000250cb         db  0x41 ; 'A'
00000000000250cc         db  0x0e ; '.'
00000000000250cd         db  0x28 ; '('
00000000000250ce         db  0x42 ; 'B'
00000000000250cf         db  0x0e ; '.'
00000000000250d0         db  0x20 ; ' '
00000000000250d1         db  0x42 ; 'B'
00000000000250d2         db  0x0e ; '.'
00000000000250d3         db  0x18 ; '.'
00000000000250d4         db  0x42 ; 'B'
00000000000250d5         db  0x0e ; '.'
00000000000250d6         db  0x10 ; '.'
00000000000250d7         db  0x42 ; 'B'
00000000000250d8         db  0x0e ; '.'
00000000000250d9         db  0x08 ; '.'
00000000000250da         db  0x41 ; 'A'
00000000000250db         db  0x0b ; '.'
00000000000250dc         db  0x79 ; 'y'
00000000000250dd         db  0x0a ; '.'
00000000000250de         db  0x0e ; '.'
00000000000250df         db  0x68 ; 'h'
00000000000250e0         db  0x42 ; 'B'
00000000000250e1         db  0x0e ; '.'
00000000000250e2         db  0x70 ; 'p'
00000000000250e3         db  0x42 ; 'B'
00000000000250e4         db  0x0e ; '.'
00000000000250e5         db  0x78 ; 'x'
00000000000250e6         db  0x42 ; 'B'
00000000000250e7         db  0x0e ; '.'
00000000000250e8         db  0x80 ; '.'
00000000000250e9         db  0x01 ; '.'
00000000000250ea         db  0x51 ; 'Q'
00000000000250eb         db  0x0b ; '.'
00000000000250ec         dd         0x00000010                                  ; Length of the record
00000000000250f0         dd         0x000016c8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000250f4         db         0xec, 0x76, 0xfe, 0xff                      ; begin 0xc7e0
00000000000250f8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0xc800)
00000000000250fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000250fd         align      256
0000000000025100         dd         0x00000018                                  ; Length of the record
0000000000025104         dd         0x000016dc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025108         db         0xf8, 0x76, 0xfe, 0xff                      ; begin 0xc800
000000000002510c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0xc878)
0000000000025110         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025111         db  0x44 ; 'D'
0000000000025112         db  0x0e ; '.'
0000000000025113         db  0x70 ; 'p'
0000000000025114         db  0x02 ; '.'
0000000000025115         db  0x60 ; '`'
0000000000025116         db  0x0a ; '.'
0000000000025117         db  0x0e ; '.'
0000000000025118         db  0x08 ; '.'
0000000000025119         db  0x41 ; 'A'
000000000002511a         db  0x0b ; '.'
000000000002511b         db  0x00 ; '.'
000000000002511c         dd         0x00000028                                  ; Length of the record
0000000000025120         dd         0x000016f8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025124         db         0x5c, 0x77, 0xfe, 0xff                      ; begin 0xc880
0000000000025128         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0xc955)
000000000002512c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002512d         db  0x41 ; 'A'
000000000002512e         db  0x0e ; '.'
000000000002512f         db  0x10 ; '.'
0000000000025130         db  0x86 ; '.'
0000000000025131         db  0x02 ; '.'
0000000000025132         db  0x41 ; 'A'
0000000000025133         db  0x0e ; '.'
0000000000025134         db  0x18 ; '.'
0000000000025135         db  0x83 ; '.'
0000000000025136         db  0x03 ; '.'
0000000000025137         db  0x50 ; 'P'
0000000000025138         db  0x0e ; '.'
0000000000025139         db  0xd0 ; '.'
000000000002513a         db  0x01 ; '.'
000000000002513b         db  0x02 ; '.'
000000000002513c         db  0xab ; '.'
000000000002513d         db  0x0a ; '.'
000000000002513e         db  0x0e ; '.'
000000000002513f         db  0x18 ; '.'
0000000000025140         db  0x41 ; 'A'
0000000000025141         db  0x0e ; '.'
0000000000025142         db  0x10 ; '.'
0000000000025143         db  0x41 ; 'A'
0000000000025144         db  0x0e ; '.'
0000000000025145         db  0x08 ; '.'
0000000000025146         db  0x41 ; 'A'
0000000000025147         db  0x0b ; '.'
0000000000025148         dd         0x0000001c                                  ; Length of the record
000000000002514c         dd         0x00001724                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025150         db         0x10, 0x78, 0xfe, 0xff                      ; begin 0xc960
0000000000025154         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0xc9e0)
0000000000025158         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025159         db  0x41 ; 'A'
000000000002515a         db  0x0e ; '.'
000000000002515b         db  0x10 ; '.'
000000000002515c         db  0x83 ; '.'
000000000002515d         db  0x02 ; '.'
000000000002515e         db  0x02 ; '.'
000000000002515f         db  0x7a ; 'z'
0000000000025160         db  0x0e ; '.'
0000000000025161         db  0x08 ; '.'
0000000000025162         db  0x00 ; '.'
0000000000025163         db  0x00 ; '.'
0000000000025164         db  0x00 ; '.'
0000000000025165         db  0x00 ; '.'
0000000000025166         db  0x00 ; '.'
0000000000025167         db  0x00 ; '.'
0000000000025168         dd         0x00000018                                  ; Length of the record
000000000002516c         dd         0x00001744                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025170         db         0x70, 0x78, 0xfe, 0xff                      ; begin 0xc9e0
0000000000025174         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0xc9fa)
0000000000025178         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025179         db  0x41 ; 'A'
000000000002517a         db  0x0e ; '.'
000000000002517b         db  0x10 ; '.'
000000000002517c         db  0x83 ; '.'
000000000002517d         db  0x02 ; '.'
000000000002517e         db  0x53 ; 'S'
000000000002517f         db  0x0a ; '.'
0000000000025180         db  0x0e ; '.'
0000000000025181         db  0x08 ; '.'
0000000000025182         db  0x41 ; 'A'
0000000000025183         db  0x0b ; '.'
0000000000025184         dd         0x00000010                                  ; Length of the record
0000000000025188         dd         0x00001760                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002518c         db         0x74, 0x78, 0xfe, 0xff                      ; begin 0xca00
0000000000025190         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0xca24)
0000000000025194         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025195         db  0x5f ; '_'
0000000000025196         db  0x0e ; '.'
0000000000025197         db  0x10 ; '.'
0000000000025198         dd         0x00000010                                  ; Length of the record
000000000002519c         dd         0x00001774                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000251a0         db         0x90, 0x78, 0xfe, 0xff                      ; begin 0xca30
00000000000251a4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xca32)
00000000000251a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000251a9         align      4
00000000000251ac         dd         0x00000020                                  ; Length of the record
00000000000251b0         dd         0x00001788                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000251b4         db         0x8c, 0x78, 0xfe, 0xff                      ; begin 0xca40
00000000000251b8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xca76)
00000000000251bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000251bd         db  0x44 ; 'D'
00000000000251be         db  0x0e ; '.'
00000000000251bf         db  0x10 ; '.'
00000000000251c0         db  0x83 ; '.'
00000000000251c1         db  0x02 ; '.'
00000000000251c2         db  0x5d ; ']'
00000000000251c3         db  0x0a ; '.'
00000000000251c4         db  0x0e ; '.'
00000000000251c5         db  0x08 ; '.'
00000000000251c6         db  0x47 ; 'G'
00000000000251c7         db  0x0b ; '.'
00000000000251c8         db  0x48 ; 'H'
00000000000251c9         db  0x0a ; '.'
00000000000251ca         db  0x0e ; '.'
00000000000251cb         db  0x08 ; '.'
00000000000251cc         db  0x41 ; 'A'
00000000000251cd         db  0x0b ; '.'
00000000000251ce         db  0x00 ; '.'
00000000000251cf         db  0x00 ; '.'
00000000000251d0         dd         0x00000010                                  ; Length of the record
00000000000251d4         dd         0x000017ac                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000251d8         db         0xa8, 0x78, 0xfe, 0xff                      ; begin 0xca80
00000000000251dc         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0xcaa4)
00000000000251e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000251e1         db  0x5f ; '_'
00000000000251e2         db  0x0e ; '.'
00000000000251e3         db  0x10 ; '.'
00000000000251e4         dd         0x00000014                                  ; Length of the record
00000000000251e8         dd         0x000017c0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000251ec         db         0xc4, 0x78, 0xfe, 0xff                      ; begin 0xcab0
00000000000251f0         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0xcb32)
00000000000251f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000251f5         db  0x02 ; '.'
00000000000251f6         db  0x5f ; '_'
00000000000251f7         db  0x0e ; '.'
00000000000251f8         db  0x10 ; '.'
00000000000251f9         db  0x49 ; 'I'
00000000000251fa         db  0x0e ; '.'
00000000000251fb         db  0x08 ; '.'
00000000000251fc         dd         0x00000014                                  ; Length of the record
0000000000025200         dd         0x000017d8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025204         db         0x3c, 0x79, 0xfe, 0xff                      ; begin 0xcb40
0000000000025208         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0xcb8a)
000000000002520c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002520d         db  0x02 ; '.'
000000000002520e         db  0x45 ; 'E'
000000000002520f         db  0x0e ; '.'
0000000000025210         db  0x10 ; '.'
0000000000025211         db  0x00 ; '.'
0000000000025212         db  0x00 ; '.'
0000000000025213         db  0x00 ; '.'
0000000000025214         dd         0x00000018                                  ; Length of the record
0000000000025218         dd         0x000017f0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002521c         db         0x74, 0x79, 0xfe, 0xff                      ; begin 0xcb90
0000000000025220         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0xcba7)
0000000000025224         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025225         db  0x41 ; 'A'
0000000000025226         db  0x0e ; '.'
0000000000025227         db  0x10 ; '.'
0000000000025228         db  0x83 ; '.'
0000000000025229         db  0x02 ; '.'
000000000002522a         db  0x51 ; 'Q'
000000000002522b         db  0x0e ; '.'
000000000002522c         db  0x08 ; '.'
000000000002522d         db  0x00 ; '.'
000000000002522e         db  0x00 ; '.'
000000000002522f         db  0x00 ; '.'
0000000000025230         dd         0x00000018                                  ; Length of the record
0000000000025234         dd         0x0000180c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025238         db         0x78, 0x79, 0xfe, 0xff                      ; begin 0xcbb0
000000000002523c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0xcbde)
0000000000025240         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025241         db  0x47 ; 'G'
0000000000025242         db  0x0e ; '.'
0000000000025243         db  0x10 ; '.'
0000000000025244         db  0x61 ; 'a'
0000000000025245         db  0x0a ; '.'
0000000000025246         db  0x0e ; '.'
0000000000025247         db  0x08 ; '.'
0000000000025248         db  0x41 ; 'A'
0000000000025249         db  0x0b ; '.'
000000000002524a         db  0x00 ; '.'
000000000002524b         db  0x00 ; '.'
000000000002524c         dd         0x00000024                                  ; Length of the record
0000000000025250         dd         0x00001828                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025254         db         0x8c, 0x79, 0xfe, 0xff                      ; begin 0xcbe0
0000000000025258         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0xcc08)
000000000002525c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002525d         db  0x41 ; 'A'
000000000002525e         db  0x0e ; '.'
000000000002525f         db  0x10 ; '.'
0000000000025260         db  0x86 ; '.'
0000000000025261         db  0x02 ; '.'
0000000000025262         db  0x41 ; 'A'
0000000000025263         db  0x0e ; '.'
0000000000025264         db  0x18 ; '.'
0000000000025265         db  0x83 ; '.'
0000000000025266         db  0x03 ; '.'
0000000000025267         db  0x4d ; 'M'
0000000000025268         db  0x0e ; '.'
0000000000025269         db  0x20 ; ' '
000000000002526a         db  0x49 ; 'I'
000000000002526b         db  0x0e ; '.'
000000000002526c         db  0x18 ; '.'
000000000002526d         db  0x47 ; 'G'
000000000002526e         db  0x0e ; '.'
000000000002526f         db  0x10 ; '.'
0000000000025270         db  0x41 ; 'A'
0000000000025271         db  0x0e ; '.'
0000000000025272         db  0x08 ; '.'
0000000000025273         db  0x00 ; '.'
0000000000025274         dd         0x00000018                                  ; Length of the record
0000000000025278         dd         0x00001850                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002527c         db         0x94, 0x79, 0xfe, 0xff                      ; begin 0xcc10
0000000000025280         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xcc23)
0000000000025284         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025285         db  0x41 ; 'A'
0000000000025286         db  0x0e ; '.'
0000000000025287         db  0x10 ; '.'
0000000000025288         db  0x83 ; '.'
0000000000025289         db  0x02 ; '.'
000000000002528a         db  0x50 ; 'P'
000000000002528b         db  0x0e ; '.'
000000000002528c         db  0x08 ; '.'
000000000002528d         db  0x00 ; '.'
000000000002528e         db  0x00 ; '.'
000000000002528f         db  0x00 ; '.'
0000000000025290         dd         0x00000014                                  ; Length of the record
0000000000025294         dd         0x0000186c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025298         db         0x98, 0x79, 0xfe, 0xff                      ; begin 0xcc30
000000000002529c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xcc65)
00000000000252a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000252a1         db  0x4b ; 'K'
00000000000252a2         db  0x0e ; '.'
00000000000252a3         db  0x10 ; '.'
00000000000252a4         db  0x00 ; '.'
00000000000252a5         db  0x00 ; '.'
00000000000252a6         db  0x00 ; '.'
00000000000252a7         db  0x00 ; '.'
00000000000252a8         dd         0x00000018                                  ; Length of the record
00000000000252ac         dd         0x00001884                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000252b0         db         0xc0, 0x79, 0xfe, 0xff                      ; begin 0xcc70
00000000000252b4         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xccbf)
00000000000252b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000252b9         db  0x44 ; 'D'
00000000000252ba         db  0x0e ; '.'
00000000000252bb         db  0x10 ; '.'
00000000000252bc         db  0x54 ; 'T'
00000000000252bd         db  0x0a ; '.'
00000000000252be         db  0x0e ; '.'
00000000000252bf         db  0x08 ; '.'
00000000000252c0         db  0x48 ; 'H'
00000000000252c1         db  0x0b ; '.'
00000000000252c2         db  0x00 ; '.'
00000000000252c3         db  0x00 ; '.'
00000000000252c4         dd         0x00000010                                  ; Length of the record
00000000000252c8         dd         0x000018a0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000252cc         db         0xf4, 0x79, 0xfe, 0xff                      ; begin 0xccc0
00000000000252d0         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0xcce9)
00000000000252d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000252d5         align      8
00000000000252d8         dd         0x0000004c                                  ; Length of the record
00000000000252dc         dd         0x000018b4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000252e0         db         0x10, 0x7a, 0xfe, 0xff                      ; begin 0xccf0
00000000000252e4         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0xd3a3)
00000000000252e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000252e9         db  0x42 ; 'B'
00000000000252ea         db  0x0e ; '.'
00000000000252eb         db  0x10 ; '.'
00000000000252ec         db  0x8f ; '.'
00000000000252ed         db  0x02 ; '.'
00000000000252ee         db  0x42 ; 'B'
00000000000252ef         db  0x0e ; '.'
00000000000252f0         db  0x18 ; '.'
00000000000252f1         db  0x8e ; '.'
00000000000252f2         db  0x03 ; '.'
00000000000252f3         db  0x42 ; 'B'
00000000000252f4         db  0x0e ; '.'
00000000000252f5         db  0x20 ; ' '
00000000000252f6         db  0x8d ; '.'
00000000000252f7         db  0x04 ; '.'
00000000000252f8         db  0x42 ; 'B'
00000000000252f9         db  0x0e ; '.'
00000000000252fa         db  0x28 ; '('
00000000000252fb         db  0x8c ; '.'
00000000000252fc         db  0x05 ; '.'
00000000000252fd         db  0x41 ; 'A'
00000000000252fe         db  0x0e ; '.'
00000000000252ff         db  0x30 ; '0'
0000000000025300         db  0x86 ; '.'
0000000000025301         db  0x06 ; '.'
0000000000025302         db  0x41 ; 'A'
0000000000025303         db  0x0e ; '.'
0000000000025304         db  0x38 ; '8'
0000000000025305         db  0x83 ; '.'
0000000000025306         db  0x07 ; '.'
0000000000025307         db  0x44 ; 'D'
0000000000025308         db  0x0e ; '.'
0000000000025309         db  0x60 ; '`'
000000000002530a         db  0x02 ; '.'
000000000002530b         db  0x96 ; '.'
000000000002530c         db  0x0a ; '.'
000000000002530d         db  0x0e ; '.'
000000000002530e         db  0x38 ; '8'
000000000002530f         db  0x41 ; 'A'
0000000000025310         db  0x0e ; '.'
0000000000025311         db  0x30 ; '0'
0000000000025312         db  0x41 ; 'A'
0000000000025313         db  0x0e ; '.'
0000000000025314         db  0x28 ; '('
0000000000025315         db  0x42 ; 'B'
0000000000025316         db  0x0e ; '.'
0000000000025317         db  0x20 ; ' '
0000000000025318         db  0x42 ; 'B'
0000000000025319         db  0x0e ; '.'
000000000002531a         db  0x18 ; '.'
000000000002531b         db  0x42 ; 'B'
000000000002531c         db  0x0e ; '.'
000000000002531d         db  0x10 ; '.'
000000000002531e         db  0x42 ; 'B'
000000000002531f         db  0x0e ; '.'
0000000000025320         db  0x08 ; '.'
0000000000025321         db  0x42 ; 'B'
0000000000025322         db  0x0b ; '.'
0000000000025323         db  0x00 ; '.'
0000000000025324         db  0x00 ; '.'
0000000000025325         db  0x00 ; '.'
0000000000025326         db  0x00 ; '.'
0000000000025327         db  0x00 ; '.'
0000000000025328         dd         0x0000004c                                  ; Length of the record
000000000002532c         dd         0x00001904                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025330         db         2 dup (0x80), 0xfe, 0xff                    ; begin 0xd3b0
0000000000025334         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0xd7cc)
0000000000025338         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025339         db  0x42 ; 'B'
000000000002533a         db  0x0e ; '.'
000000000002533b         db  0x10 ; '.'
000000000002533c         db  0x8f ; '.'
000000000002533d         db  0x02 ; '.'
000000000002533e         db  0x42 ; 'B'
000000000002533f         db  0x0e ; '.'
0000000000025340         db  0x18 ; '.'
0000000000025341         db  0x8e ; '.'
0000000000025342         db  0x03 ; '.'
0000000000025343         db  0x42 ; 'B'
0000000000025344         db  0x0e ; '.'
0000000000025345         db  0x20 ; ' '
0000000000025346         db  0x8d ; '.'
0000000000025347         db  0x04 ; '.'
0000000000025348         db  0x42 ; 'B'
0000000000025349         db  0x0e ; '.'
000000000002534a         db  0x28 ; '('
000000000002534b         db  0x8c ; '.'
000000000002534c         db  0x05 ; '.'
000000000002534d         db  0x41 ; 'A'
000000000002534e         db  0x0e ; '.'
000000000002534f         db  0x30 ; '0'
0000000000025350         db  0x86 ; '.'
0000000000025351         db  0x06 ; '.'
0000000000025352         db  0x41 ; 'A'
0000000000025353         db  0x0e ; '.'
0000000000025354         db  0x38 ; '8'
0000000000025355         db  0x83 ; '.'
0000000000025356         db  0x07 ; '.'
0000000000025357         db  0x44 ; 'D'
0000000000025358         db  0x0e ; '.'
0000000000025359         db  0x60 ; '`'
000000000002535a         db  0x02 ; '.'
000000000002535b         db  0xe9 ; '.'
000000000002535c         db  0x0a ; '.'
000000000002535d         db  0x0e ; '.'
000000000002535e         db  0x38 ; '8'
000000000002535f         db  0x41 ; 'A'
0000000000025360         db  0x0e ; '.'
0000000000025361         db  0x30 ; '0'
0000000000025362         db  0x41 ; 'A'
0000000000025363         db  0x0e ; '.'
0000000000025364         db  0x28 ; '('
0000000000025365         db  0x42 ; 'B'
0000000000025366         db  0x0e ; '.'
0000000000025367         db  0x20 ; ' '
0000000000025368         db  0x42 ; 'B'
0000000000025369         db  0x0e ; '.'
000000000002536a         db  0x18 ; '.'
000000000002536b         db  0x42 ; 'B'
000000000002536c         db  0x0e ; '.'
000000000002536d         db  0x10 ; '.'
000000000002536e         db  0x42 ; 'B'
000000000002536f         db  0x0e ; '.'
0000000000025370         db  0x08 ; '.'
0000000000025371         db  0x47 ; 'G'
0000000000025372         db  0x0b ; '.'
0000000000025373         db  0x00 ; '.'
0000000000025374         db  0x00 ; '.'
0000000000025375         db  0x00 ; '.'
0000000000025376         db  0x00 ; '.'
0000000000025377         db  0x00 ; '.'
0000000000025378         dd         0x00000024                                  ; Length of the record
000000000002537c         dd         0x00001954                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025380         db         0x50, 0x84, 0xfe, 0xff                      ; begin 0xd7d0
0000000000025384         db         0xac, 3 dup (0x00)                          ; length 0xac (end at 0xd87c)
0000000000025388         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025389         db  0x42 ; 'B'
000000000002538a         db  0x0e ; '.'
000000000002538b         db  0x10 ; '.'
000000000002538c         db  0x8d ; '.'
000000000002538d         db  0x02 ; '.'
000000000002538e         db  0x42 ; 'B'
000000000002538f         db  0x0e ; '.'
0000000000025390         db  0x18 ; '.'
0000000000025391         db  0x8c ; '.'
0000000000025392         db  0x03 ; '.'
0000000000025393         db  0x44 ; 'D'
0000000000025394         db  0x0e ; '.'
0000000000025395         db  0x20 ; ' '
0000000000025396         db  0x86 ; '.'
0000000000025397         db  0x04 ; '.'
0000000000025398         db  0x41 ; 'A'
0000000000025399         db  0x0e ; '.'
000000000002539a         db  0x28 ; '('
000000000002539b         db  0x83 ; '.'
000000000002539c         db  0x05 ; '.'
000000000002539d         db  0x47 ; 'G'
000000000002539e         db  0x0e ; '.'
000000000002539f         db  0x40 ; '@'
00000000000253a0         dd         0x0000004c                                  ; Length of the record
00000000000253a4         dd         0x0000197c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000253a8         db         0xd8, 0x84, 0xfe, 0xff                      ; begin 0xd880
00000000000253ac         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0xdc9c)
00000000000253b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000253b1         db  0x42 ; 'B'
00000000000253b2         db  0x0e ; '.'
00000000000253b3         db  0x10 ; '.'
00000000000253b4         db  0x8f ; '.'
00000000000253b5         db  0x02 ; '.'
00000000000253b6         db  0x42 ; 'B'
00000000000253b7         db  0x0e ; '.'
00000000000253b8         db  0x18 ; '.'
00000000000253b9         db  0x8e ; '.'
00000000000253ba         db  0x03 ; '.'
00000000000253bb         db  0x42 ; 'B'
00000000000253bc         db  0x0e ; '.'
00000000000253bd         db  0x20 ; ' '
00000000000253be         db  0x8d ; '.'
00000000000253bf         db  0x04 ; '.'
00000000000253c0         db  0x42 ; 'B'
00000000000253c1         db  0x0e ; '.'
00000000000253c2         db  0x28 ; '('
00000000000253c3         db  0x8c ; '.'
00000000000253c4         db  0x05 ; '.'
00000000000253c5         db  0x41 ; 'A'
00000000000253c6         db  0x0e ; '.'
00000000000253c7         db  0x30 ; '0'
00000000000253c8         db  0x86 ; '.'
00000000000253c9         db  0x06 ; '.'
00000000000253ca         db  0x41 ; 'A'
00000000000253cb         db  0x0e ; '.'
00000000000253cc         db  0x38 ; '8'
00000000000253cd         db  0x83 ; '.'
00000000000253ce         db  0x07 ; '.'
00000000000253cf         db  0x44 ; 'D'
00000000000253d0         db  0x0e ; '.'
00000000000253d1         db  0x60 ; '`'
00000000000253d2         db  0x02 ; '.'
00000000000253d3         db  0xe9 ; '.'
00000000000253d4         db  0x0a ; '.'
00000000000253d5         db  0x0e ; '.'
00000000000253d6         db  0x38 ; '8'
00000000000253d7         db  0x41 ; 'A'
00000000000253d8         db  0x0e ; '.'
00000000000253d9         db  0x30 ; '0'
00000000000253da         db  0x41 ; 'A'
00000000000253db         db  0x0e ; '.'
00000000000253dc         db  0x28 ; '('
00000000000253dd         db  0x42 ; 'B'
00000000000253de         db  0x0e ; '.'
00000000000253df         db  0x20 ; ' '
00000000000253e0         db  0x42 ; 'B'
00000000000253e1         db  0x0e ; '.'
00000000000253e2         db  0x18 ; '.'
00000000000253e3         db  0x42 ; 'B'
00000000000253e4         db  0x0e ; '.'
00000000000253e5         db  0x10 ; '.'
00000000000253e6         db  0x42 ; 'B'
00000000000253e7         db  0x0e ; '.'
00000000000253e8         db  0x08 ; '.'
00000000000253e9         db  0x47 ; 'G'
00000000000253ea         db  0x0b ; '.'
00000000000253eb         db  0x00 ; '.'
00000000000253ec         db  0x00 ; '.'
00000000000253ed         db  0x00 ; '.'
00000000000253ee         db  0x00 ; '.'
00000000000253ef         db  0x00 ; '.'
00000000000253f0         dd         0x00000034                                  ; Length of the record
00000000000253f4         dd         0x000019cc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000253f8         db         0xa8, 0x88, 0xfe, 0xff                      ; begin 0xdca0
00000000000253fc         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xdd1b)
0000000000025400         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025401         db  0x42 ; 'B'
0000000000025402         db  0x0e ; '.'
0000000000025403         db  0x10 ; '.'
0000000000025404         db  0x8c ; '.'
0000000000025405         db  0x02 ; '.'
0000000000025406         db  0x41 ; 'A'
0000000000025407         db  0x0e ; '.'
0000000000025408         db  0x18 ; '.'
0000000000025409         db  0x86 ; '.'
000000000002540a         db  0x03 ; '.'
000000000002540b         db  0x41 ; 'A'
000000000002540c         db  0x0e ; '.'
000000000002540d         db  0x20 ; ' '
000000000002540e         db  0x83 ; '.'
000000000002540f         db  0x04 ; '.'
0000000000025410         db  0x7d ; '}'
0000000000025411         db  0x0a ; '.'
0000000000025412         db  0x0e ; '.'
0000000000025413         db  0x18 ; '.'
0000000000025414         db  0x41 ; 'A'
0000000000025415         db  0x0e ; '.'
0000000000025416         db  0x10 ; '.'
0000000000025417         db  0x42 ; 'B'
0000000000025418         db  0x0e ; '.'
0000000000025419         db  0x08 ; '.'
000000000002541a         db  0x44 ; 'D'
000000000002541b         db  0x0b ; '.'
000000000002541c         db  0x60 ; '`'
000000000002541d         db  0x0a ; '.'
000000000002541e         db  0x0e ; '.'
000000000002541f         db  0x18 ; '.'
0000000000025420         db  0x41 ; 'A'
0000000000025421         db  0x0e ; '.'
0000000000025422         db  0x10 ; '.'
0000000000025423         db  0x42 ; 'B'
0000000000025424         db  0x0e ; '.'
0000000000025425         db  0x08 ; '.'
0000000000025426         db  0x45 ; 'E'
0000000000025427         db  0x0b ; '.'
0000000000025428         dd         0x0000001c                                  ; Length of the record
000000000002542c         dd         0x00001a04                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025430         db         0xf0, 0x88, 0xfe, 0xff                      ; begin 0xdd20
0000000000025434         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xdd60)
0000000000025438         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025439         db  0x44 ; 'D'
000000000002543a         db  0x0e ; '.'
000000000002543b         db  0x10 ; '.'
000000000002543c         db  0x83 ; '.'
000000000002543d         db  0x02 ; '.'
000000000002543e         db  0x5a ; 'Z'
000000000002543f         db  0x0a ; '.'
0000000000025440         db  0x0e ; '.'
0000000000025441         db  0x08 ; '.'
0000000000025442         db  0x4a ; 'J'
0000000000025443         db  0x0b ; '.'
0000000000025444         db  0x53 ; 'S'
0000000000025445         db  0x0e ; '.'
0000000000025446         db  0x08 ; '.'
0000000000025447         db  0x00 ; '.'
0000000000025448         dd         0x0000002c                                  ; Length of the record
000000000002544c         dd         0x00001a24                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025450         db         0x10, 0x89, 0xfe, 0xff                      ; begin 0xdd60
0000000000025454         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xddb7)
0000000000025458         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025459         db  0x63 ; 'c'
000000000002545a         db  0x0e ; '.'
000000000002545b         db  0x10 ; '.'
000000000002545c         db  0x8c ; '.'
000000000002545d         db  0x02 ; '.'
000000000002545e         db  0x41 ; 'A'
000000000002545f         db  0x0e ; '.'
0000000000025460         db  0x18 ; '.'
0000000000025461         db  0x86 ; '.'
0000000000025462         db  0x03 ; '.'
0000000000025463         db  0x44 ; 'D'
0000000000025464         db  0x0e ; '.'
0000000000025465         db  0x20 ; ' '
0000000000025466         db  0x83 ; '.'
0000000000025467         db  0x04 ; '.'
0000000000025468         db  0x6b ; 'k'
0000000000025469         db  0x0e ; '.'
000000000002546a         db  0x18 ; '.'
000000000002546b         db  0x41 ; 'A'
000000000002546c         db  0x0e ; '.'
000000000002546d         db  0x10 ; '.'
000000000002546e         db  0x42 ; 'B'
000000000002546f         db  0x0e ; '.'
0000000000025470         db  0x08 ; '.'
0000000000025471         db  0x00 ; '.'
0000000000025472         db  0x00 ; '.'
0000000000025473         db  0x00 ; '.'
0000000000025474         db  0x00 ; '.'
0000000000025475         db  0x00 ; '.'
0000000000025476         db  0x00 ; '.'
0000000000025477         db  0x00 ; '.'
0000000000025478         dd         0x00000010                                  ; Length of the record
000000000002547c         dd         0x00001a54                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025480         db         0x40, 0x89, 0xfe, 0xff                      ; begin 0xddc0
0000000000025484         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0xddda)
0000000000025488         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025489         align      4
000000000002548c         dd         0x00000010                                  ; Length of the record
0000000000025490         dd         0x00001a68                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025494         db         0x4c, 0x89, 0xfe, 0xff                      ; begin 0xdde0
0000000000025498         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0xdded)
000000000002549c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002549d         align      32
00000000000254a0         dd         0x00000010                                  ; Length of the record
00000000000254a4         dd         0x00001a7c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000254a8         db         0x48, 0x89, 0xfe, 0xff                      ; begin 0xddf0
00000000000254ac         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xddfc)
00000000000254b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000254b1         align      4
00000000000254b4         dd         0x00000010                                  ; Length of the record
00000000000254b8         dd         0x00001a90                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000254bc         db         0x44, 0x89, 0xfe, 0xff                      ; begin 0xde00
00000000000254c0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xde0a)
00000000000254c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000254c5         align      8
00000000000254c8         dd         0x00000010                                  ; Length of the record
00000000000254cc         dd         0x00001aa4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000254d0         db         0x40, 0x89, 0xfe, 0xff                      ; begin 0xde10
00000000000254d4         db         0x26, 3 dup (0x00)                          ; length 0x26 (end at 0xde36)
00000000000254d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000254d9         align      4
00000000000254dc         dd         0x00000038                                  ; Length of the record
00000000000254e0         dd         0x00001ab8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000254e4         db         0x5c, 0x89, 0xfe, 0xff                      ; begin 0xde40
00000000000254e8         db         0xc5, 0x01, 2 dup (0x00)                    ; length 0x1c5 (end at 0xe005)
00000000000254ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000254ed         db  0x42 ; 'B'
00000000000254ee         db  0x0e ; '.'
00000000000254ef         db  0x10 ; '.'
00000000000254f0         db  0x8c ; '.'
00000000000254f1         db  0x02 ; '.'
00000000000254f2         db  0x41 ; 'A'
00000000000254f3         db  0x0e ; '.'
00000000000254f4         db  0x18 ; '.'
00000000000254f5         db  0x86 ; '.'
00000000000254f6         db  0x03 ; '.'
00000000000254f7         db  0x44 ; 'D'
00000000000254f8         db  0x0e ; '.'
00000000000254f9         db  0x20 ; ' '
00000000000254fa         db  0x83 ; '.'
00000000000254fb         db  0x04 ; '.'
00000000000254fc         db  0x02 ; '.'
00000000000254fd         db  0x72 ; 'r'
00000000000254fe         db  0x0a ; '.'
00000000000254ff         db  0x0e ; '.'
0000000000025500         db  0x18 ; '.'
0000000000025501         db  0x41 ; 'A'
0000000000025502         db  0x0e ; '.'
0000000000025503         db  0x10 ; '.'
0000000000025504         db  0x42 ; 'B'
0000000000025505         db  0x0e ; '.'
0000000000025506         db  0x08 ; '.'
0000000000025507         db  0x44 ; 'D'
0000000000025508         db  0x0b ; '.'
0000000000025509         db  0x02 ; '.'
000000000002550a         db  0x54 ; 'T'
000000000002550b         db  0x0a ; '.'
000000000002550c         db  0x0e ; '.'
000000000002550d         db  0x18 ; '.'
000000000002550e         db  0x45 ; 'E'
000000000002550f         db  0x0e ; '.'
0000000000025510         db  0x10 ; '.'
0000000000025511         db  0x42 ; 'B'
0000000000025512         db  0x0e ; '.'
0000000000025513         db  0x08 ; '.'
0000000000025514         db  0x45 ; 'E'
0000000000025515         db  0x0b ; '.'
0000000000025516         db  0x00 ; '.'
0000000000025517         db  0x00 ; '.'
0000000000025518         dd         0x0000004c                                  ; Length of the record
000000000002551c         dd         0x00001af4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025520         db         0xf0, 0x8a, 0xfe, 0xff                      ; begin 0xe010
0000000000025524         db         0x05, 0x01, 2 dup (0x00)                    ; length 0x105 (end at 0xe115)
0000000000025528         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025529         db  0x42 ; 'B'
000000000002552a         db  0x0e ; '.'
000000000002552b         db  0x10 ; '.'
000000000002552c         db  0x8d ; '.'
000000000002552d         db  0x02 ; '.'
000000000002552e         db  0x42 ; 'B'
000000000002552f         db  0x0e ; '.'
0000000000025530         db  0x18 ; '.'
0000000000025531         db  0x8c ; '.'
0000000000025532         db  0x03 ; '.'
0000000000025533         db  0x44 ; 'D'
0000000000025534         db  0x0e ; '.'
0000000000025535         db  0x20 ; ' '
0000000000025536         db  0x86 ; '.'
0000000000025537         db  0x04 ; '.'
0000000000025538         db  0x41 ; 'A'
0000000000025539         db  0x0e ; '.'
000000000002553a         db  0x28 ; '('
000000000002553b         db  0x83 ; '.'
000000000002553c         db  0x05 ; '.'
000000000002553d         db  0x4a ; 'J'
000000000002553e         db  0x0e ; '.'
000000000002553f         db  0x30 ; '0'
0000000000025540         db  0x02 ; '.'
0000000000025541         db  0xb3 ; '.'
0000000000025542         db  0x0a ; '.'
0000000000025543         db  0x0e ; '.'
0000000000025544         db  0x28 ; '('
0000000000025545         db  0x41 ; 'A'
0000000000025546         db  0x0e ; '.'
0000000000025547         db  0x20 ; ' '
0000000000025548         db  0x41 ; 'A'
0000000000025549         db  0x0e ; '.'
000000000002554a         db  0x18 ; '.'
000000000002554b         db  0x42 ; 'B'
000000000002554c         db  0x0e ; '.'
000000000002554d         db  0x10 ; '.'
000000000002554e         db  0x42 ; 'B'
000000000002554f         db  0x0e ; '.'
0000000000025550         db  0x08 ; '.'
0000000000025551         db  0x44 ; 'D'
0000000000025552         db  0x0b ; '.'
0000000000025553         db  0x5d ; ']'
0000000000025554         db  0x0a ; '.'
0000000000025555         db  0x0e ; '.'
0000000000025556         db  0x28 ; '('
0000000000025557         db  0x44 ; 'D'
0000000000025558         db  0x0e ; '.'
0000000000025559         db  0x20 ; ' '
000000000002555a         db  0x41 ; 'A'
000000000002555b         db  0x0e ; '.'
000000000002555c         db  0x18 ; '.'
000000000002555d         db  0x42 ; 'B'
000000000002555e         db  0x0e ; '.'
000000000002555f         db  0x10 ; '.'
0000000000025560         db  0x42 ; 'B'
0000000000025561         db  0x0e ; '.'
0000000000025562         db  0x08 ; '.'
0000000000025563         db  0x4a ; 'J'
0000000000025564         db  0x0b ; '.'
0000000000025565         db  0x00 ; '.'
0000000000025566         db  0x00 ; '.'
0000000000025567         db  0x00 ; '.'
0000000000025568         dd         0x00000034                                  ; Length of the record
000000000002556c         dd         0x00001b44                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025570         db         0xb0, 0x8b, 0xfe, 0xff                      ; begin 0xe120
0000000000025574         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0xe1aa)
0000000000025578         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025579         db  0x42 ; 'B'
000000000002557a         db  0x0e ; '.'
000000000002557b         db  0x10 ; '.'
000000000002557c         db  0x8d ; '.'
000000000002557d         db  0x02 ; '.'
000000000002557e         db  0x42 ; 'B'
000000000002557f         db  0x0e ; '.'
0000000000025580         db  0x18 ; '.'
0000000000025581         db  0x8c ; '.'
0000000000025582         db  0x03 ; '.'
0000000000025583         db  0x44 ; 'D'
0000000000025584         db  0x0e ; '.'
0000000000025585         db  0x20 ; ' '
0000000000025586         db  0x86 ; '.'
0000000000025587         db  0x04 ; '.'
0000000000025588         db  0x48 ; 'H'
0000000000025589         db  0x0e ; '.'
000000000002558a         db  0x28 ; '('
000000000002558b         db  0x83 ; '.'
000000000002558c         db  0x05 ; '.'
000000000002558d         db  0x4a ; 'J'
000000000002558e         db  0x0e ; '.'
000000000002558f         db  0x30 ; '0'
0000000000025590         db  0x02 ; '.'
0000000000025591         db  0x66 ; 'f'
0000000000025592         db  0x0e ; '.'
0000000000025593         db  0x28 ; '('
0000000000025594         db  0x44 ; 'D'
0000000000025595         db  0x0e ; '.'
0000000000025596         db  0x20 ; ' '
0000000000025597         db  0x41 ; 'A'
0000000000025598         db  0x0e ; '.'
0000000000025599         db  0x18 ; '.'
000000000002559a         db  0x42 ; 'B'
000000000002559b         db  0x0e ; '.'
000000000002559c         db  0x10 ; '.'
000000000002559d         db  0x42 ; 'B'
000000000002559e         db  0x0e ; '.'
000000000002559f         db  0x08 ; '.'
00000000000255a0         dd         0x00000028                                  ; Length of the record
00000000000255a4         dd         0x00001b7c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000255a8         db         0x08, 0x8c, 0xfe, 0xff                      ; begin 0xe1b0
00000000000255ac         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0xe1f2)
00000000000255b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000255b1         db  0x46 ; 'F'
00000000000255b2         db  0x0e ; '.'
00000000000255b3         db  0x10 ; '.'
00000000000255b4         db  0x86 ; '.'
00000000000255b5         db  0x02 ; '.'
00000000000255b6         db  0x41 ; 'A'
00000000000255b7         db  0x0e ; '.'
00000000000255b8         db  0x18 ; '.'
00000000000255b9         db  0x83 ; '.'
00000000000255ba         db  0x03 ; '.'
00000000000255bb         db  0x47 ; 'G'
00000000000255bc         db  0x0e ; '.'
00000000000255bd         db  0x20 ; ' '
00000000000255be         db  0x68 ; 'h'
00000000000255bf         db  0x0e ; '.'
00000000000255c0         db  0x18 ; '.'
00000000000255c1         db  0x41 ; 'A'
00000000000255c2         db  0x0e ; '.'
00000000000255c3         db  0x10 ; '.'
00000000000255c4         db  0x41 ; 'A'
00000000000255c5         db  0x0e ; '.'
00000000000255c6         db  0x08 ; '.'
00000000000255c7         db  0x48 ; 'H'
00000000000255c8         db  0xc3 ; '.'
00000000000255c9         db  0xc6 ; '.'
00000000000255ca         db  0x00 ; '.'
00000000000255cb         db  0x00 ; '.'
00000000000255cc         dd         0x00000018                                  ; Length of the record
00000000000255d0         dd         0x00001ba8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000255d4         db         0x2c, 0x8c, 0xfe, 0xff                      ; begin 0xe200
00000000000255d8         db         0x39, 3 dup (0x00)                          ; length 0x39 (end at 0xe239)
00000000000255dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000255dd         db  0x41 ; 'A'
00000000000255de         db  0x0e ; '.'
00000000000255df         db  0x10 ; '.'
00000000000255e0         db  0x83 ; '.'
00000000000255e1         db  0x02 ; '.'
00000000000255e2         db  0x68 ; 'h'
00000000000255e3         db  0x0a ; '.'
00000000000255e4         db  0x0e ; '.'
00000000000255e5         db  0x08 ; '.'
00000000000255e6         db  0x47 ; 'G'
00000000000255e7         db  0x0b ; '.'
00000000000255e8         dd         0x00000038                                  ; Length of the record
00000000000255ec         dd         0x00001bc4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000255f0         db         0x50, 0x8c, 0xfe, 0xff                      ; begin 0xe240
00000000000255f4         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0xe36c)
00000000000255f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000255f9         db  0x42 ; 'B'
00000000000255fa         db  0x0e ; '.'
00000000000255fb         db  0x10 ; '.'
00000000000255fc         db  0x8d ; '.'
00000000000255fd         db  0x02 ; '.'
00000000000255fe         db  0x42 ; 'B'
00000000000255ff         db  0x0e ; '.'
0000000000025600         db  0x18 ; '.'
0000000000025601         db  0x8c ; '.'
0000000000025602         db  0x03 ; '.'
0000000000025603         db  0x41 ; 'A'
0000000000025604         db  0x0e ; '.'
0000000000025605         db  0x20 ; ' '
0000000000025606         db  0x86 ; '.'
0000000000025607         db  0x04 ; '.'
0000000000025608         db  0x41 ; 'A'
0000000000025609         db  0x0e ; '.'
000000000002560a         db  0x28 ; '('
000000000002560b         db  0x83 ; '.'
000000000002560c         db  0x05 ; '.'
000000000002560d         db  0x47 ; 'G'
000000000002560e         db  0x0e ; '.'
000000000002560f         db  0xc0 ; '.'
0000000000025610         db  0x01 ; '.'
0000000000025611         db  0x02 ; '.'
0000000000025612         db  0xa4 ; '.'
0000000000025613         db  0x0a ; '.'
0000000000025614         db  0x0e ; '.'
0000000000025615         db  0x28 ; '('
0000000000025616         db  0x41 ; 'A'
0000000000025617         db  0x0e ; '.'
0000000000025618         db  0x20 ; ' '
0000000000025619         db  0x41 ; 'A'
000000000002561a         db  0x0e ; '.'
000000000002561b         db  0x18 ; '.'
000000000002561c         db  0x42 ; 'B'
000000000002561d         db  0x0e ; '.'
000000000002561e         db  0x10 ; '.'
000000000002561f         db  0x42 ; 'B'
0000000000025620         db  0x0e ; '.'
0000000000025621         db  0x08 ; '.'
0000000000025622         db  0x49 ; 'I'
0000000000025623         db  0x0b ; '.'
0000000000025624         dd         0x00000020                                  ; Length of the record
0000000000025628         dd         0x00001c00                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002562c         db         0x44, 0x8d, 0xfe, 0xff                      ; begin 0xe370
0000000000025630         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0xe3da)
0000000000025634         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025635         db  0x44 ; 'D'
0000000000025636         db  0x0e ; '.'
0000000000025637         db  0x10 ; '.'
0000000000025638         db  0x72 ; 'r'
0000000000025639         db  0x0a ; '.'
000000000002563a         db  0x0e ; '.'
000000000002563b         db  0x08 ; '.'
000000000002563c         db  0x4a ; 'J'
000000000002563d         db  0x0b ; '.'
000000000002563e         db  0x5b ; '['
000000000002563f         db  0x0a ; '.'
0000000000025640         db  0x0e ; '.'
0000000000025641         db  0x08 ; '.'
0000000000025642         db  0x45 ; 'E'
0000000000025643         db  0x0b ; '.'
0000000000025644         db  0x49 ; 'I'
0000000000025645         db  0x0e ; '.'
0000000000025646         db  0x08 ; '.'
0000000000025647         db  0x00 ; '.'
0000000000025648         dd         0x00000040                                  ; Length of the record
000000000002564c         dd         0x00001c24                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025650         db         0x90, 0x8d, 0xfe, 0xff                      ; begin 0xe3e0
0000000000025654         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0xe446)
0000000000025658         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025659         db  0x41 ; 'A'
000000000002565a         db  0x0e ; '.'
000000000002565b         db  0x10 ; '.'
000000000002565c         db  0x86 ; '.'
000000000002565d         db  0x02 ; '.'
000000000002565e         db  0x41 ; 'A'
000000000002565f         db  0x0e ; '.'
0000000000025660         db  0x18 ; '.'
0000000000025661         db  0x83 ; '.'
0000000000025662         db  0x03 ; '.'
0000000000025663         db  0x49 ; 'I'
0000000000025664         db  0x0e ; '.'
0000000000025665         db  0x20 ; ' '
0000000000025666         db  0x61 ; 'a'
0000000000025667         db  0x0a ; '.'
0000000000025668         db  0x0e ; '.'
0000000000025669         db  0x18 ; '.'
000000000002566a         db  0x41 ; 'A'
000000000002566b         db  0x0e ; '.'
000000000002566c         db  0x10 ; '.'
000000000002566d         db  0x41 ; 'A'
000000000002566e         db  0x0e ; '.'
000000000002566f         db  0x08 ; '.'
0000000000025670         db  0x42 ; 'B'
0000000000025671         db  0x0b ; '.'
0000000000025672         db  0x5b ; '['
0000000000025673         db  0x0a ; '.'
0000000000025674         db  0x0e ; '.'
0000000000025675         db  0x18 ; '.'
0000000000025676         db  0x41 ; 'A'
0000000000025677         db  0x0e ; '.'
0000000000025678         db  0x10 ; '.'
0000000000025679         db  0x41 ; 'A'
000000000002567a         db  0x0e ; '.'
000000000002567b         db  0x08 ; '.'
000000000002567c         db  0x43 ; 'C'
000000000002567d         db  0x0b ; '.'
000000000002567e         db  0x4e ; 'N'
000000000002567f         db  0x0a ; '.'
0000000000025680         db  0x0e ; '.'
0000000000025681         db  0x18 ; '.'
0000000000025682         db  0x41 ; 'A'
0000000000025683         db  0x0e ; '.'
0000000000025684         db  0x10 ; '.'
0000000000025685         db  0x41 ; 'A'
0000000000025686         db  0x0e ; '.'
0000000000025687         db  0x08 ; '.'
0000000000025688         db  0x41 ; 'A'
0000000000025689         db  0x0b ; '.'
000000000002568a         db  0x00 ; '.'
000000000002568b         db  0x00 ; '.'
000000000002568c         dd         0x00000028                                  ; Length of the record
0000000000025690         dd         0x00001c68                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025694         db         0xbc, 0x8d, 0xfe, 0xff                      ; begin 0xe450
0000000000025698         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0xe4ac)
000000000002569c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002569d         db  0x41 ; 'A'
000000000002569e         db  0x0e ; '.'
000000000002569f         db  0x10 ; '.'
00000000000256a0         db  0x86 ; '.'
00000000000256a1         db  0x02 ; '.'
00000000000256a2         db  0x41 ; 'A'
00000000000256a3         db  0x0e ; '.'
00000000000256a4         db  0x18 ; '.'
00000000000256a5         db  0x83 ; '.'
00000000000256a6         db  0x03 ; '.'
00000000000256a7         db  0x47 ; 'G'
00000000000256a8         db  0x0e ; '.'
00000000000256a9         db  0x20 ; ' '
00000000000256aa         db  0x6c ; 'l'
00000000000256ab         db  0x0a ; '.'
00000000000256ac         db  0x0e ; '.'
00000000000256ad         db  0x18 ; '.'
00000000000256ae         db  0x43 ; 'C'
00000000000256af         db  0x0e ; '.'
00000000000256b0         db  0x10 ; '.'
00000000000256b1         db  0x41 ; 'A'
00000000000256b2         db  0x0e ; '.'
00000000000256b3         db  0x08 ; '.'
00000000000256b4         db  0x47 ; 'G'
00000000000256b5         db  0x0b ; '.'
00000000000256b6         db  0x00 ; '.'
00000000000256b7         db  0x00 ; '.'
00000000000256b8         dd         0x00000024                                  ; Length of the record
00000000000256bc         dd         0x00001c94                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000256c0         db         0xf0, 0x8d, 0xfe, 0xff                      ; begin 0xe4b0
00000000000256c4         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0xe51b)
00000000000256c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000256c9         db  0x41 ; 'A'
00000000000256ca         db  0x0e ; '.'
00000000000256cb         db  0x10 ; '.'
00000000000256cc         db  0x83 ; '.'
00000000000256cd         db  0x02 ; '.'
00000000000256ce         db  0x6f ; 'o'
00000000000256cf         db  0x0a ; '.'
00000000000256d0         db  0x0e ; '.'
00000000000256d1         db  0x08 ; '.'
00000000000256d2         db  0x48 ; 'H'
00000000000256d3         db  0x0b ; '.'
00000000000256d4         db  0x5a ; 'Z'
00000000000256d5         db  0x0a ; '.'
00000000000256d6         db  0x0e ; '.'
00000000000256d7         db  0x08 ; '.'
00000000000256d8         db  0x46 ; 'F'
00000000000256d9         db  0x0b ; '.'
00000000000256da         db  0x52 ; 'R'
00000000000256db         db  0x0e ; '.'
00000000000256dc         db  0x08 ; '.'
00000000000256dd         db  0x00 ; '.'
00000000000256de         db  0x00 ; '.'
00000000000256df         db  0x00 ; '.'
00000000000256e0         dd         0x0000001c                                  ; Length of the record
00000000000256e4         dd         0x00001cbc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000256e8         db         0x38, 0x8e, 0xfe, 0xff                      ; begin 0xe520
00000000000256ec         db         0x63, 3 dup (0x00)                          ; length 0x63 (end at 0xe583)
00000000000256f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000256f1         db  0x47 ; 'G'
00000000000256f2         db  0x0e ; '.'
00000000000256f3         db  0x10 ; '.'
00000000000256f4         db  0x83 ; '.'
00000000000256f5         db  0x02 ; '.'
00000000000256f6         db  0x70 ; 'p'
00000000000256f7         db  0x0a ; '.'
00000000000256f8         db  0x0e ; '.'
00000000000256f9         db  0x08 ; '.'
00000000000256fa         db  0x49 ; 'I'
00000000000256fb         db  0x0b ; '.'
00000000000256fc         db  0x62 ; 'b'
00000000000256fd         db  0x0e ; '.'
00000000000256fe         db  0x08 ; '.'
00000000000256ff         db  0x00 ; '.'
0000000000025700         dd         0x00000010                                  ; Length of the record
0000000000025704         dd         0x00001cdc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025708         db         0x88, 0x8e, 0xfe, 0xff                      ; begin 0xe590
000000000002570c         db         0x3a, 3 dup (0x00)                          ; length 0x3a (end at 0xe5ca)
0000000000025710         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025711         align      4
0000000000025714         dd         0x0000004c                                  ; Length of the record
0000000000025718         dd         0x00001cf0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002571c         db         0xb4, 0x8e, 0xfe, 0xff                      ; begin 0xe5d0
0000000000025720         db         0x7a, 0x02, 2 dup (0x00)                    ; length 0x27a (end at 0xe84a)
0000000000025724         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025725         db  0x42 ; 'B'
0000000000025726         db  0x0e ; '.'
0000000000025727         db  0x10 ; '.'
0000000000025728         db  0x8f ; '.'
0000000000025729         db  0x02 ; '.'
000000000002572a         db  0x42 ; 'B'
000000000002572b         db  0x0e ; '.'
000000000002572c         db  0x18 ; '.'
000000000002572d         db  0x8e ; '.'
000000000002572e         db  0x03 ; '.'
000000000002572f         db  0x45 ; 'E'
0000000000025730         db  0x0e ; '.'
0000000000025731         db  0x20 ; ' '
0000000000025732         db  0x8d ; '.'
0000000000025733         db  0x04 ; '.'
0000000000025734         db  0x42 ; 'B'
0000000000025735         db  0x0e ; '.'
0000000000025736         db  0x28 ; '('
0000000000025737         db  0x8c ; '.'
0000000000025738         db  0x05 ; '.'
0000000000025739         db  0x44 ; 'D'
000000000002573a         db  0x0e ; '.'
000000000002573b         db  0x30 ; '0'
000000000002573c         db  0x86 ; '.'
000000000002573d         db  0x06 ; '.'
000000000002573e         db  0x41 ; 'A'
000000000002573f         db  0x0e ; '.'
0000000000025740         db  0x38 ; '8'
0000000000025741         db  0x83 ; '.'
0000000000025742         db  0x07 ; '.'
0000000000025743         db  0x4d ; 'M'
0000000000025744         db  0x0e ; '.'
0000000000025745         db  0xf0 ; '.'
0000000000025746         db  0x01 ; '.'
0000000000025747         db  0x03 ; '.'
0000000000025748         db  0x08 ; '.'
0000000000025749         db  0x01 ; '.'
000000000002574a         db  0x0a ; '.'
000000000002574b         db  0x0e ; '.'
000000000002574c         db  0x38 ; '8'
000000000002574d         db  0x41 ; 'A'
000000000002574e         db  0x0e ; '.'
000000000002574f         db  0x30 ; '0'
0000000000025750         db  0x41 ; 'A'
0000000000025751         db  0x0e ; '.'
0000000000025752         db  0x28 ; '('
0000000000025753         db  0x42 ; 'B'
0000000000025754         db  0x0e ; '.'
0000000000025755         db  0x20 ; ' '
0000000000025756         db  0x42 ; 'B'
0000000000025757         db  0x0e ; '.'
0000000000025758         db  0x18 ; '.'
0000000000025759         db  0x42 ; 'B'
000000000002575a         db  0x0e ; '.'
000000000002575b         db  0x10 ; '.'
000000000002575c         db  0x42 ; 'B'
000000000002575d         db  0x0e ; '.'
000000000002575e         db  0x08 ; '.'
000000000002575f         db  0x41 ; 'A'
0000000000025760         db  0x0b ; '.'
0000000000025761         db  0x00 ; '.'
0000000000025762         db  0x00 ; '.'
0000000000025763         db  0x00 ; '.'
0000000000025764         dd         0x00000040                                  ; Length of the record
0000000000025768         dd         0x00001d40                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002576c         db         0xe4, 0x90, 0xfe, 0xff                      ; begin 0xe850
0000000000025770         db         0xaf, 3 dup (0x00)                          ; length 0xaf (end at 0xe8ff)
0000000000025774         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025775         db  0x48 ; 'H'
0000000000025776         db  0x0e ; '.'
0000000000025777         db  0x10 ; '.'
0000000000025778         db  0x8c ; '.'
0000000000025779         db  0x02 ; '.'
000000000002577a         db  0x44 ; 'D'
000000000002577b         db  0x0e ; '.'
000000000002577c         db  0x18 ; '.'
000000000002577d         db  0x86 ; '.'
000000000002577e         db  0x03 ; '.'
000000000002577f         db  0x41 ; 'A'
0000000000025780         db  0x0e ; '.'
0000000000025781         db  0x20 ; ' '
0000000000025782         db  0x83 ; '.'
0000000000025783         db  0x04 ; '.'
0000000000025784         db  0x02 ; '.'
0000000000025785         db  0x65 ; 'e'
0000000000025786         db  0x0a ; '.'
0000000000025787         db  0x0e ; '.'
0000000000025788         db  0x18 ; '.'
0000000000025789         db  0x46 ; 'F'
000000000002578a         db  0x0e ; '.'
000000000002578b         db  0x10 ; '.'
000000000002578c         db  0x42 ; 'B'
000000000002578d         db  0x0e ; '.'
000000000002578e         db  0x08 ; '.'
000000000002578f         db  0x46 ; 'F'
0000000000025790         db  0x0b ; '.'
0000000000025791         db  0x5e ; '^'
0000000000025792         db  0x0a ; '.'
0000000000025793         db  0x0e ; '.'
0000000000025794         db  0x18 ; '.'
0000000000025795         db  0x41 ; 'A'
0000000000025796         db  0x0e ; '.'
0000000000025797         db  0x10 ; '.'
0000000000025798         db  0x42 ; 'B'
0000000000025799         db  0x0e ; '.'
000000000002579a         db  0x08 ; '.'
000000000002579b         db  0x47 ; 'G'
000000000002579c         db  0x0b ; '.'
000000000002579d         db  0x41 ; 'A'
000000000002579e         db  0x0e ; '.'
000000000002579f         db  0x18 ; '.'
00000000000257a0         db  0x43 ; 'C'
00000000000257a1         db  0x0e ; '.'
00000000000257a2         db  0x10 ; '.'
00000000000257a3         db  0x42 ; 'B'
00000000000257a4         db  0x0e ; '.'
00000000000257a5         db  0x08 ; '.'
00000000000257a6         db  0x00 ; '.'
00000000000257a7         db  0x00 ; '.'
00000000000257a8         dd         0x00000018                                  ; Length of the record
00000000000257ac         dd         0x00001d84                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000257b0         db         0x50, 0x91, 0xfe, 0xff                      ; begin 0xe900
00000000000257b4         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0xe9b8)
00000000000257b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000257b9         db  0x44 ; 'D'
00000000000257ba         db  0x0e ; '.'
00000000000257bb         db  0x30 ; '0'
00000000000257bc         db  0x02 ; '.'
00000000000257bd         db  0x55 ; 'U'
00000000000257be         db  0x0a ; '.'
00000000000257bf         db  0x0e ; '.'
00000000000257c0         db  0x08 ; '.'
00000000000257c1         db  0x47 ; 'G'
00000000000257c2         db  0x0b ; '.'
00000000000257c3         db  0x00 ; '.'
00000000000257c4         dd         0x0000004c                                  ; Length of the record
00000000000257c8         dd         0x00001da0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000257cc         db         0xf4, 0x91, 0xfe, 0xff                      ; begin 0xe9c0
00000000000257d0         db         0xd1, 0x09, 2 dup (0x00)                    ; length 0x9d1 (end at 0xf391)
00000000000257d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000257d5         db  0x42 ; 'B'
00000000000257d6         db  0x0e ; '.'
00000000000257d7         db  0x10 ; '.'
00000000000257d8         db  0x8f ; '.'
00000000000257d9         db  0x02 ; '.'
00000000000257da         db  0x42 ; 'B'
00000000000257db         db  0x0e ; '.'
00000000000257dc         db  0x18 ; '.'
00000000000257dd         db  0x8e ; '.'
00000000000257de         db  0x03 ; '.'
00000000000257df         db  0x45 ; 'E'
00000000000257e0         db  0x0e ; '.'
00000000000257e1         db  0x20 ; ' '
00000000000257e2         db  0x8d ; '.'
00000000000257e3         db  0x04 ; '.'
00000000000257e4         db  0x42 ; 'B'
00000000000257e5         db  0x0e ; '.'
00000000000257e6         db  0x28 ; '('
00000000000257e7         db  0x8c ; '.'
00000000000257e8         db  0x05 ; '.'
00000000000257e9         db  0x41 ; 'A'
00000000000257ea         db  0x0e ; '.'
00000000000257eb         db  0x30 ; '0'
00000000000257ec         db  0x86 ; '.'
00000000000257ed         db  0x06 ; '.'
00000000000257ee         db  0x41 ; 'A'
00000000000257ef         db  0x0e ; '.'
00000000000257f0         db  0x38 ; '8'
00000000000257f1         db  0x83 ; '.'
00000000000257f2         db  0x07 ; '.'
00000000000257f3         db  0x44 ; 'D'
00000000000257f4         db  0x0e ; '.'
00000000000257f5         db  0xb0 ; '.'
00000000000257f6         db  0x01 ; '.'
00000000000257f7         db  0x03 ; '.'
00000000000257f8         db  0xd1 ; '.'
00000000000257f9         db  0x05 ; '.'
00000000000257fa         db  0x0a ; '.'
00000000000257fb         db  0x0e ; '.'
00000000000257fc         db  0x38 ; '8'
00000000000257fd         db  0x41 ; 'A'
00000000000257fe         db  0x0e ; '.'
00000000000257ff         db  0x30 ; '0'
0000000000025800         db  0x41 ; 'A'
0000000000025801         db  0x0e ; '.'
0000000000025802         db  0x28 ; '('
0000000000025803         db  0x42 ; 'B'
0000000000025804         db  0x0e ; '.'
0000000000025805         db  0x20 ; ' '
0000000000025806         db  0x42 ; 'B'
0000000000025807         db  0x0e ; '.'
0000000000025808         db  0x18 ; '.'
0000000000025809         db  0x42 ; 'B'
000000000002580a         db  0x0e ; '.'
000000000002580b         db  0x10 ; '.'
000000000002580c         db  0x42 ; 'B'
000000000002580d         db  0x0e ; '.'
000000000002580e         db  0x08 ; '.'
000000000002580f         db  0x44 ; 'D'
0000000000025810         db  0x0b ; '.'
0000000000025811         db  0x00 ; '.'
0000000000025812         db  0x00 ; '.'
0000000000025813         db  0x00 ; '.'
0000000000025814         dd         0x00000048                                  ; Length of the record
0000000000025818         dd         0x00001df0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002581c         db         0x84, 0x9b, 0xfe, 0xff                      ; begin 0xf3a0
0000000000025820         db         0xaa, 0x03, 2 dup (0x00)                    ; length 0x3aa (end at 0xf74a)
0000000000025824         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025825         db  0x42 ; 'B'
0000000000025826         db  0x0e ; '.'
0000000000025827         db  0x10 ; '.'
0000000000025828         db  0x8f ; '.'
0000000000025829         db  0x02 ; '.'
000000000002582a         db  0x42 ; 'B'
000000000002582b         db  0x0e ; '.'
000000000002582c         db  0x18 ; '.'
000000000002582d         db  0x8e ; '.'
000000000002582e         db  0x03 ; '.'
000000000002582f         db  0x42 ; 'B'
0000000000025830         db  0x0e ; '.'
0000000000025831         db  0x20 ; ' '
0000000000025832         db  0x8d ; '.'
0000000000025833         db  0x04 ; '.'
0000000000025834         db  0x42 ; 'B'
0000000000025835         db  0x0e ; '.'
0000000000025836         db  0x28 ; '('
0000000000025837         db  0x8c ; '.'
0000000000025838         db  0x05 ; '.'
0000000000025839         db  0x41 ; 'A'
000000000002583a         db  0x0e ; '.'
000000000002583b         db  0x30 ; '0'
000000000002583c         db  0x86 ; '.'
000000000002583d         db  0x06 ; '.'
000000000002583e         db  0x41 ; 'A'
000000000002583f         db  0x0e ; '.'
0000000000025840         db  0x38 ; '8'
0000000000025841         db  0x83 ; '.'
0000000000025842         db  0x07 ; '.'
0000000000025843         db  0x44 ; 'D'
0000000000025844         db  0x0e ; '.'
0000000000025845         db  0x60 ; '`'
0000000000025846         db  0x03 ; '.'
0000000000025847         db  0xa4 ; '.'
0000000000025848         db  0x02 ; '.'
0000000000025849         db  0x0a ; '.'
000000000002584a         db  0x0e ; '.'
000000000002584b         db  0x38 ; '8'
000000000002584c         db  0x44 ; 'D'
000000000002584d         db  0x0e ; '.'
000000000002584e         db  0x30 ; '0'
000000000002584f         db  0x41 ; 'A'
0000000000025850         db  0x0e ; '.'
0000000000025851         db  0x28 ; '('
0000000000025852         db  0x42 ; 'B'
0000000000025853         db  0x0e ; '.'
0000000000025854         db  0x20 ; ' '
0000000000025855         db  0x42 ; 'B'
0000000000025856         db  0x0e ; '.'
0000000000025857         db  0x18 ; '.'
0000000000025858         db  0x42 ; 'B'
0000000000025859         db  0x0e ; '.'
000000000002585a         db  0x10 ; '.'
000000000002585b         db  0x42 ; 'B'
000000000002585c         db  0x0e ; '.'
000000000002585d         db  0x08 ; '.'
000000000002585e         db  0x41 ; 'A'
000000000002585f         db  0x0b ; '.'
0000000000025860         dd         0x0000002c                                  ; Length of the record
0000000000025864         dd         0x00001e3c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025868         db         0xe8, 0x9e, 0xfe, 0xff                      ; begin 0xf750
000000000002586c         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0xf8d2)
0000000000025870         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025871         db  0x42 ; 'B'
0000000000025872         db  0x0e ; '.'
0000000000025873         db  0x10 ; '.'
0000000000025874         db  0x8c ; '.'
0000000000025875         db  0x02 ; '.'
0000000000025876         db  0x41 ; 'A'
0000000000025877         db  0x0e ; '.'
0000000000025878         db  0x18 ; '.'
0000000000025879         db  0x86 ; '.'
000000000002587a         db  0x03 ; '.'
000000000002587b         db  0x44 ; 'D'
000000000002587c         db  0x0e ; '.'
000000000002587d         db  0x20 ; ' '
000000000002587e         db  0x83 ; '.'
000000000002587f         db  0x04 ; '.'
0000000000025880         db  0x02 ; '.'
0000000000025881         db  0xc2 ; '.'
0000000000025882         db  0x0a ; '.'
0000000000025883         db  0x0e ; '.'
0000000000025884         db  0x18 ; '.'
0000000000025885         db  0x41 ; 'A'
0000000000025886         db  0x0e ; '.'
0000000000025887         db  0x10 ; '.'
0000000000025888         db  0x42 ; 'B'
0000000000025889         db  0x0e ; '.'
000000000002588a         db  0x08 ; '.'
000000000002588b         db  0x44 ; 'D'
000000000002588c         db  0x0b ; '.'
000000000002588d         db  0x00 ; '.'
000000000002588e         db  0x00 ; '.'
000000000002588f         db  0x00 ; '.'
0000000000025890         dd         0x00000060                                  ; Length of the record
0000000000025894         dd         0x00001e6c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025898         db         0x48, 0xa0, 0xfe, 0xff                      ; begin 0xf8e0
000000000002589c         db         0x78, 0x07, 2 dup (0x00)                    ; length 0x778 (end at 0x10058)
00000000000258a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000258a1         db  0x42 ; 'B'
00000000000258a2         db  0x0e ; '.'
00000000000258a3         db  0x10 ; '.'
00000000000258a4         db  0x8e ; '.'
00000000000258a5         db  0x02 ; '.'
00000000000258a6         db  0x42 ; 'B'
00000000000258a7         db  0x0e ; '.'
00000000000258a8         db  0x18 ; '.'
00000000000258a9         db  0x8d ; '.'
00000000000258aa         db  0x03 ; '.'
00000000000258ab         db  0x42 ; 'B'
00000000000258ac         db  0x0e ; '.'
00000000000258ad         db  0x20 ; ' '
00000000000258ae         db  0x8c ; '.'
00000000000258af         db  0x04 ; '.'
00000000000258b0         db  0x41 ; 'A'
00000000000258b1         db  0x0e ; '.'
00000000000258b2         db  0x28 ; '('
00000000000258b3         db  0x86 ; '.'
00000000000258b4         db  0x05 ; '.'
00000000000258b5         db  0x41 ; 'A'
00000000000258b6         db  0x0e ; '.'
00000000000258b7         db  0x30 ; '0'
00000000000258b8         db  0x83 ; '.'
00000000000258b9         db  0x06 ; '.'
00000000000258ba         db  0x03 ; '.'
00000000000258bb         db  0x19 ; '.'
00000000000258bc         db  0x01 ; '.'
00000000000258bd         db  0x0a ; '.'
00000000000258be         db  0x0e ; '.'
00000000000258bf         db  0x28 ; '('
00000000000258c0         db  0x44 ; 'D'
00000000000258c1         db  0x0e ; '.'
00000000000258c2         db  0x20 ; ' '
00000000000258c3         db  0x42 ; 'B'
00000000000258c4         db  0x0e ; '.'
00000000000258c5         db  0x18 ; '.'
00000000000258c6         db  0x42 ; 'B'
00000000000258c7         db  0x0e ; '.'
00000000000258c8         db  0x10 ; '.'
00000000000258c9         db  0x42 ; 'B'
00000000000258ca         db  0x0e ; '.'
00000000000258cb         db  0x08 ; '.'
00000000000258cc         db  0x45 ; 'E'
00000000000258cd         db  0x0b ; '.'
00000000000258ce         db  0x02 ; '.'
00000000000258cf         db  0x6b ; 'k'
00000000000258d0         db  0x0a ; '.'
00000000000258d1         db  0x0e ; '.'
00000000000258d2         db  0x28 ; '('
00000000000258d3         db  0x44 ; 'D'
00000000000258d4         db  0x0e ; '.'
00000000000258d5         db  0x20 ; ' '
00000000000258d6         db  0x42 ; 'B'
00000000000258d7         db  0x0e ; '.'
00000000000258d8         db  0x18 ; '.'
00000000000258d9         db  0x42 ; 'B'
00000000000258da         db  0x0e ; '.'
00000000000258db         db  0x10 ; '.'
00000000000258dc         db  0x42 ; 'B'
00000000000258dd         db  0x0e ; '.'
00000000000258de         db  0x08 ; '.'
00000000000258df         db  0x4b ; 'K'
00000000000258e0         db  0x0b ; '.'
00000000000258e1         db  0x02 ; '.'
00000000000258e2         db  0xe2 ; '.'
00000000000258e3         db  0x0a ; '.'
00000000000258e4         db  0x0e ; '.'
00000000000258e5         db  0x28 ; '('
00000000000258e6         db  0x41 ; 'A'
00000000000258e7         db  0x0e ; '.'
00000000000258e8         db  0x20 ; ' '
00000000000258e9         db  0x42 ; 'B'
00000000000258ea         db  0x0e ; '.'
00000000000258eb         db  0x18 ; '.'
00000000000258ec         db  0x42 ; 'B'
00000000000258ed         db  0x0e ; '.'
00000000000258ee         db  0x10 ; '.'
00000000000258ef         db  0x42 ; 'B'
00000000000258f0         db  0x0e ; '.'
00000000000258f1         db  0x08 ; '.'
00000000000258f2         db  0x47 ; 'G'
00000000000258f3         db  0x0b ; '.'
00000000000258f4         dd         0x00000014                                  ; Length of the record
00000000000258f8         dd         0x00001ed0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000258fc         db         0x64, 0xa7, 0xfe, 0xff                      ; begin 0x10060
0000000000025900         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x10089)
0000000000025904         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025905         db  0x54 ; 'T'
0000000000025906         db  0x0e ; '.'
0000000000025907         db  0x10 ; '.'
0000000000025908         db  0x54 ; 'T'
0000000000025909         db  0x0e ; '.'
000000000002590a         db  0x08 ; '.'
000000000002590b         db  0x00 ; '.'
000000000002590c         dd         0x00000060                                  ; Length of the record
0000000000025910         dd         0x00001ee8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025914         db         0x7c, 0xa7, 0xfe, 0xff                      ; begin 0x10090
0000000000025918         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x101de)
000000000002591c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002591d         db  0x42 ; 'B'
000000000002591e         db  0x0e ; '.'
000000000002591f         db  0x10 ; '.'
0000000000025920         db  0x8e ; '.'
0000000000025921         db  0x02 ; '.'
0000000000025922         db  0x42 ; 'B'
0000000000025923         db  0x0e ; '.'
0000000000025924         db  0x18 ; '.'
0000000000025925         db  0x8d ; '.'
0000000000025926         db  0x03 ; '.'
0000000000025927         db  0x42 ; 'B'
0000000000025928         db  0x0e ; '.'
0000000000025929         db  0x20 ; ' '
000000000002592a         db  0x8c ; '.'
000000000002592b         db  0x04 ; '.'
000000000002592c         db  0x41 ; 'A'
000000000002592d         db  0x0e ; '.'
000000000002592e         db  0x28 ; '('
000000000002592f         db  0x86 ; '.'
0000000000025930         db  0x05 ; '.'
0000000000025931         db  0x44 ; 'D'
0000000000025932         db  0x0e ; '.'
0000000000025933         db  0x30 ; '0'
0000000000025934         db  0x83 ; '.'
0000000000025935         db  0x06 ; '.'
0000000000025936         db  0x02 ; '.'
0000000000025937         db  0x8a ; '.'
0000000000025938         db  0x0a ; '.'
0000000000025939         db  0x0e ; '.'
000000000002593a         db  0x28 ; '('
000000000002593b         db  0x41 ; 'A'
000000000002593c         db  0x0e ; '.'
000000000002593d         db  0x20 ; ' '
000000000002593e         db  0x42 ; 'B'
000000000002593f         db  0x0e ; '.'
0000000000025940         db  0x18 ; '.'
0000000000025941         db  0x42 ; 'B'
0000000000025942         db  0x0e ; '.'
0000000000025943         db  0x10 ; '.'
0000000000025944         db  0x42 ; 'B'
0000000000025945         db  0x0e ; '.'
0000000000025946         db  0x08 ; '.'
0000000000025947         db  0x44 ; 'D'
0000000000025948         db  0x0b ; '.'
0000000000025949         db  0x41 ; 'A'
000000000002594a         db  0x0a ; '.'
000000000002594b         db  0x0e ; '.'
000000000002594c         db  0x28 ; '('
000000000002594d         db  0x45 ; 'E'
000000000002594e         db  0x0e ; '.'
000000000002594f         db  0x20 ; ' '
0000000000025950         db  0x42 ; 'B'
0000000000025951         db  0x0e ; '.'
0000000000025952         db  0x18 ; '.'
0000000000025953         db  0x42 ; 'B'
0000000000025954         db  0x0e ; '.'
0000000000025955         db  0x10 ; '.'
0000000000025956         db  0x42 ; 'B'
0000000000025957         db  0x0e ; '.'
0000000000025958         db  0x08 ; '.'
0000000000025959         db  0x44 ; 'D'
000000000002595a         db  0x0b ; '.'
000000000002595b         db  0x41 ; 'A'
000000000002595c         db  0x0a ; '.'
000000000002595d         db  0x0e ; '.'
000000000002595e         db  0x28 ; '('
000000000002595f         db  0x43 ; 'C'
0000000000025960         db  0x0e ; '.'
0000000000025961         db  0x20 ; ' '
0000000000025962         db  0x42 ; 'B'
0000000000025963         db  0x0e ; '.'
0000000000025964         db  0x18 ; '.'
0000000000025965         db  0x42 ; 'B'
0000000000025966         db  0x0e ; '.'
0000000000025967         db  0x10 ; '.'
0000000000025968         db  0x42 ; 'B'
0000000000025969         db  0x0e ; '.'
000000000002596a         db  0x08 ; '.'
000000000002596b         db  0x46 ; 'F'
000000000002596c         db  0x0b ; '.'
000000000002596d         db  0x00 ; '.'
000000000002596e         db  0x00 ; '.'
000000000002596f         db  0x00 ; '.'
0000000000025970         dd         0x0000003c                                  ; Length of the record
0000000000025974         dd         0x00001f4c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025978         db         0x68, 0xa8, 0xfe, 0xff                      ; begin 0x101e0
000000000002597c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x10263)
0000000000025980         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025981         db  0x42 ; 'B'
0000000000025982         db  0x0e ; '.'
0000000000025983         db  0x10 ; '.'
0000000000025984         db  0x8d ; '.'
0000000000025985         db  0x02 ; '.'
0000000000025986         db  0x42 ; 'B'
0000000000025987         db  0x0e ; '.'
0000000000025988         db  0x18 ; '.'
0000000000025989         db  0x8c ; '.'
000000000002598a         db  0x03 ; '.'
000000000002598b         db  0x44 ; 'D'
000000000002598c         db  0x0e ; '.'
000000000002598d         db  0x20 ; ' '
000000000002598e         db  0x86 ; '.'
000000000002598f         db  0x04 ; '.'
0000000000025990         db  0x41 ; 'A'
0000000000025991         db  0x0e ; '.'
0000000000025992         db  0x28 ; '('
0000000000025993         db  0x83 ; '.'
0000000000025994         db  0x05 ; '.'
0000000000025995         db  0x4a ; 'J'
0000000000025996         db  0x0e ; '.'
0000000000025997         db  0x40 ; '@'
0000000000025998         db  0x02 ; '.'
0000000000025999         db  0x64 ; 'd'
000000000002599a         db  0x0a ; '.'
000000000002599b         db  0x0e ; '.'
000000000002599c         db  0x28 ; '('
000000000002599d         db  0x41 ; 'A'
000000000002599e         db  0x0e ; '.'
000000000002599f         db  0x20 ; ' '
00000000000259a0         db  0x41 ; 'A'
00000000000259a1         db  0x0e ; '.'
00000000000259a2         db  0x18 ; '.'
00000000000259a3         db  0x42 ; 'B'
00000000000259a4         db  0x0e ; '.'
00000000000259a5         db  0x10 ; '.'
00000000000259a6         db  0x42 ; 'B'
00000000000259a7         db  0x0e ; '.'
00000000000259a8         db  0x08 ; '.'
00000000000259a9         db  0x41 ; 'A'
00000000000259aa         db  0x0b ; '.'
00000000000259ab         db  0x00 ; '.'
00000000000259ac         db  0x00 ; '.'
00000000000259ad         db  0x00 ; '.'
00000000000259ae         db  0x00 ; '.'
00000000000259af         db  0x00 ; '.'
00000000000259b0         dd         0x00000018                                  ; Length of the record
00000000000259b4         dd         0x00001f8c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000259b8         db         0xb8, 0xa8, 0xfe, 0xff                      ; begin 0x10270
00000000000259bc         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x102f2)
00000000000259c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000259c1         db  0x41 ; 'A'
00000000000259c2         db  0x0e ; '.'
00000000000259c3         db  0x10 ; '.'
00000000000259c4         db  0x83 ; '.'
00000000000259c5         db  0x02 ; '.'
00000000000259c6         db  0x02 ; '.'
00000000000259c7         db  0x80 ; '.'
00000000000259c8         db  0x0e ; '.'
00000000000259c9         db  0x08 ; '.'
00000000000259ca         db  0x00 ; '.'
00000000000259cb         db  0x00 ; '.'
00000000000259cc         dd         0x00000018                                  ; Length of the record
00000000000259d0         dd         0x00001fa8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000259d4         db         0x2c, 0xa9, 0xfe, 0xff                      ; begin 0x10300
00000000000259d8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x10336)
00000000000259dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000259dd         db  0x41 ; 'A'
00000000000259de         db  0x0e ; '.'
00000000000259df         db  0x10 ; '.'
00000000000259e0         db  0x83 ; '.'
00000000000259e1         db  0x02 ; '.'
00000000000259e2         db  0x70 ; 'p'
00000000000259e3         db  0x0e ; '.'
00000000000259e4         db  0x08 ; '.'
00000000000259e5         db  0x00 ; '.'
00000000000259e6         db  0x00 ; '.'
00000000000259e7         db  0x00 ; '.'
00000000000259e8         dd         0x00000074                                  ; Length of the record
00000000000259ec         dd         0x00001fc4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000259f0         db         0x50, 0xa9, 0xfe, 0xff                      ; begin 0x10340
00000000000259f4         db         0x48, 0x08, 2 dup (0x00)                    ; length 0x848 (end at 0x10b88)
00000000000259f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000259f9         db  0x42 ; 'B'
00000000000259fa         db  0x0e ; '.'
00000000000259fb         db  0x10 ; '.'
00000000000259fc         db  0x8f ; '.'
00000000000259fd         db  0x02 ; '.'
00000000000259fe         db  0x42 ; 'B'
00000000000259ff         db  0x0e ; '.'
0000000000025a00         db  0x18 ; '.'
0000000000025a01         db  0x8e ; '.'
0000000000025a02         db  0x03 ; '.'
0000000000025a03         db  0x49 ; 'I'
0000000000025a04         db  0x0e ; '.'
0000000000025a05         db  0x20 ; ' '
0000000000025a06         db  0x8d ; '.'
0000000000025a07         db  0x04 ; '.'
0000000000025a08         db  0x42 ; 'B'
0000000000025a09         db  0x0e ; '.'
0000000000025a0a         db  0x28 ; '('
0000000000025a0b         db  0x8c ; '.'
0000000000025a0c         db  0x05 ; '.'
0000000000025a0d         db  0x48 ; 'H'
0000000000025a0e         db  0x0e ; '.'
0000000000025a0f         db  0x30 ; '0'
0000000000025a10         db  0x86 ; '.'
0000000000025a11         db  0x06 ; '.'
0000000000025a12         db  0x41 ; 'A'
0000000000025a13         db  0x0e ; '.'
0000000000025a14         db  0x38 ; '8'
0000000000025a15         db  0x83 ; '.'
0000000000025a16         db  0x07 ; '.'
0000000000025a17         db  0x44 ; 'D'
0000000000025a18         db  0x0e ; '.'
0000000000025a19         db  0xa0 ; '.'
0000000000025a1a         db  0x01 ; '.'
0000000000025a1b         db  0x02 ; '.'
0000000000025a1c         db  0x6f ; 'o'
0000000000025a1d         db  0x0e ; '.'
0000000000025a1e         db  0xa8 ; '.'
0000000000025a1f         db  0x01 ; '.'
0000000000025a20         db  0x4d ; 'M'
0000000000025a21         db  0x0e ; '.'
0000000000025a22         db  0xb0 ; '.'
0000000000025a23         db  0x01 ; '.'
0000000000025a24         db  0x46 ; 'F'
0000000000025a25         db  0x0e ; '.'
0000000000025a26         db  0xb8 ; '.'
0000000000025a27         db  0x01 ; '.'
0000000000025a28         db  0x46 ; 'F'
0000000000025a29         db  0x0e ; '.'
0000000000025a2a         db  0xc0 ; '.'
0000000000025a2b         db  0x01 ; '.'
0000000000025a2c         db  0x5d ; ']'
0000000000025a2d         db  0x0e ; '.'
0000000000025a2e         db  0xa0 ; '.'
0000000000025a2f         db  0x01 ; '.'
0000000000025a30         db  0x75 ; 'u'
0000000000025a31         db  0x0e ; '.'
0000000000025a32         db  0xa8 ; '.'
0000000000025a33         db  0x01 ; '.'
0000000000025a34         db  0x41 ; 'A'
0000000000025a35         db  0x0e ; '.'
0000000000025a36         db  0xb0 ; '.'
0000000000025a37         db  0x01 ; '.'
0000000000025a38         db  0x62 ; 'b'
0000000000025a39         db  0x0e ; '.'
0000000000025a3a         db  0xa8 ; '.'
0000000000025a3b         db  0x01 ; '.'
0000000000025a3c         db  0x41 ; 'A'
0000000000025a3d         db  0x0e ; '.'
0000000000025a3e         db  0xa0 ; '.'
0000000000025a3f         db  0x01 ; '.'
0000000000025a40         db  0x03 ; '.'
0000000000025a41         db  0xdf ; '.'
0000000000025a42         db  0x01 ; '.'
0000000000025a43         db  0x0a ; '.'
0000000000025a44         db  0x0e ; '.'
0000000000025a45         db  0x38 ; '8'
0000000000025a46         db  0x41 ; 'A'
0000000000025a47         db  0x0e ; '.'
0000000000025a48         db  0x30 ; '0'
0000000000025a49         db  0x41 ; 'A'
0000000000025a4a         db  0x0e ; '.'
0000000000025a4b         db  0x28 ; '('
0000000000025a4c         db  0x42 ; 'B'
0000000000025a4d         db  0x0e ; '.'
0000000000025a4e         db  0x20 ; ' '
0000000000025a4f         db  0x42 ; 'B'
0000000000025a50         db  0x0e ; '.'
0000000000025a51         db  0x18 ; '.'
0000000000025a52         db  0x42 ; 'B'
0000000000025a53         db  0x0e ; '.'
0000000000025a54         db  0x10 ; '.'
0000000000025a55         db  0x42 ; 'B'
0000000000025a56         db  0x0e ; '.'
0000000000025a57         db  0x08 ; '.'
0000000000025a58         db  0x45 ; 'E'
0000000000025a59         db  0x0b ; '.'
0000000000025a5a         db  0x00 ; '.'
0000000000025a5b         db  0x00 ; '.'
0000000000025a5c         db  0x00 ; '.'
0000000000025a5d         db  0x00 ; '.'
0000000000025a5e         db  0x00 ; '.'
0000000000025a5f         db  0x00 ; '.'
0000000000025a60         dd         0x00000010                                  ; Length of the record
0000000000025a64         dd         0x0000203c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025a68         db         0x28, 0xb1, 0xfe, 0xff                      ; begin 0x10b90
0000000000025a6c         db         0x2f, 0x01, 2 dup (0x00)                    ; length 0x12f (end at 0x10cbf)
0000000000025a70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025a71         align      4
0000000000025a74         dd         0x00000010                                  ; Length of the record
0000000000025a78         dd         0x00002050                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025a7c         db         0x44, 0xb2, 0xfe, 0xff                      ; begin 0x10cc0
0000000000025a80         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x10cdd)
0000000000025a84         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025a85         align      4
0000000000025a8c         dd         0x00002064                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025a90         db         0x50, 0xb2, 0xfe, 0xff                      ; begin 0x10ce0
0000000000025a94         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x10f0c)
0000000000025a98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025a99         db  0x42 ; 'B'
0000000000025a9a         db  0x0e ; '.'
0000000000025a9b         db  0x10 ; '.'
0000000000025a9c         db  0x8f ; '.'
0000000000025a9d         db  0x02 ; '.'
0000000000025a9e         db  0x42 ; 'B'
0000000000025a9f         db  0x0e ; '.'
0000000000025aa0         db  0x18 ; '.'
0000000000025aa1         db  0x8e ; '.'
0000000000025aa2         db  0x03 ; '.'
0000000000025aa3         db  0x45 ; 'E'
0000000000025aa4         db  0x0e ; '.'
0000000000025aa5         db  0x20 ; ' '
0000000000025aa6         db  0x8d ; '.'
0000000000025aa7         db  0x04 ; '.'
0000000000025aa8         db  0x42 ; 'B'
0000000000025aa9         db  0x0e ; '.'
0000000000025aaa         db  0x28 ; '('
0000000000025aab         db  0x8c ; '.'
0000000000025aac         db  0x05 ; '.'
0000000000025aad         db  0x45 ; 'E'
0000000000025aae         db  0x0e ; '.'
0000000000025aaf         db  0x30 ; '0'
0000000000025ab0         db  0x86 ; '.'
0000000000025ab1         db  0x06 ; '.'
0000000000025ab2         db  0x41 ; 'A'
0000000000025ab3         db  0x0e ; '.'
0000000000025ab4         db  0x38 ; '8'
0000000000025ab5         db  0x83 ; '.'
0000000000025ab6         db  0x07 ; '.'
0000000000025ab7         db  0x47 ; 'G'
0000000000025ab8         db  0x0e ; '.'
0000000000025ab9         db  0x80 ; '.'
0000000000025aba         db  0x01 ; '.'
0000000000025abb         db  0x02 ; '.'
0000000000025abc         db  0xba ; '.'
0000000000025abd         db  0x0a ; '.'
0000000000025abe         db  0x0e ; '.'
0000000000025abf         db  0x38 ; '8'
0000000000025ac0         db  0x46 ; 'F'
0000000000025ac1         db  0x0e ; '.'
0000000000025ac2         db  0x30 ; '0'
0000000000025ac3         db  0x41 ; 'A'
0000000000025ac4         db  0x0e ; '.'
0000000000025ac5         db  0x28 ; '('
0000000000025ac6         db  0x42 ; 'B'
0000000000025ac7         db  0x0e ; '.'
0000000000025ac8         db  0x20 ; ' '
0000000000025ac9         db  0x42 ; 'B'
0000000000025aca         db  0x0e ; '.'
0000000000025acb         db  0x18 ; '.'
0000000000025acc         db  0x42 ; 'B'
0000000000025acd         db  0x0e ; '.'
0000000000025ace         db  0x10 ; '.'
0000000000025acf         db  0x42 ; 'B'
0000000000025ad0         db  0x0e ; '.'
0000000000025ad1         db  0x08 ; '.'
0000000000025ad2         db  0x47 ; 'G'
0000000000025ad3         db  0x0b ; '.'
0000000000025ad4         db  0x02 ; '.'
0000000000025ad5         db  0xe1 ; '.'
0000000000025ad6         db  0x0a ; '.'
0000000000025ad7         db  0x0e ; '.'
0000000000025ad8         db  0x38 ; '8'
0000000000025ad9         db  0x44 ; 'D'
0000000000025ada         db  0x0e ; '.'
0000000000025adb         db  0x30 ; '0'
0000000000025adc         db  0x43 ; 'C'
0000000000025add         db  0x0e ; '.'
0000000000025ade         db  0x28 ; '('
0000000000025adf         db  0x42 ; 'B'
0000000000025ae0         db  0x0e ; '.'
0000000000025ae1         db  0x20 ; ' '
0000000000025ae2         db  0x42 ; 'B'
0000000000025ae3         db  0x0e ; '.'
0000000000025ae4         db  0x18 ; '.'
0000000000025ae5         db  0x42 ; 'B'
0000000000025ae6         db  0x0e ; '.'
0000000000025ae7         db  0x10 ; '.'
0000000000025ae8         db  0x42 ; 'B'
0000000000025ae9         db  0x0e ; '.'
0000000000025aea         db  0x08 ; '.'
0000000000025aeb         db  0x48 ; 'H'
0000000000025aec         db  0x0b ; '.'
0000000000025aed         db  0x59 ; 'Y'
0000000000025aee         db  0x0a ; '.'
0000000000025aef         db  0x0e ; '.'
0000000000025af0         db  0x38 ; '8'
0000000000025af1         db  0x43 ; 'C'
0000000000025af2         db  0x0e ; '.'
0000000000025af3         db  0x30 ; '0'
0000000000025af4         db  0x41 ; 'A'
0000000000025af5         db  0x0e ; '.'
0000000000025af6         db  0x28 ; '('
0000000000025af7         db  0x42 ; 'B'
0000000000025af8         db  0x0e ; '.'
0000000000025af9         db  0x20 ; ' '
0000000000025afa         db  0x42 ; 'B'
0000000000025afb         db  0x0e ; '.'
0000000000025afc         db  0x18 ; '.'
0000000000025afd         db  0x42 ; 'B'
0000000000025afe         db  0x0e ; '.'
0000000000025aff         db  0x10 ; '.'
0000000000025b00         db  0x42 ; 'B'
0000000000025b01         db  0x0e ; '.'
0000000000025b02         db  0x08 ; '.'
0000000000025b03         db  0x4b ; 'K'
0000000000025b04         db  0x0b ; '.'
0000000000025b05         db  0x49 ; 'I'
0000000000025b06         db  0x0e ; '.'
0000000000025b07         db  0x38 ; '8'
0000000000025b08         db  0x41 ; 'A'
0000000000025b09         db  0x0e ; '.'
0000000000025b0a         db  0x30 ; '0'
0000000000025b0b         db  0x41 ; 'A'
0000000000025b0c         db  0x0e ; '.'
0000000000025b0d         db  0x28 ; '('
0000000000025b0e         db  0x48 ; 'H'
0000000000025b0f         db  0x0e ; '.'
0000000000025b10         db  0x20 ; ' '
0000000000025b11         db  0x44 ; 'D'
0000000000025b12         db  0x0e ; '.'
0000000000025b13         db  0x18 ; '.'
0000000000025b14         db  0x42 ; 'B'
0000000000025b15         db  0x0e ; '.'
0000000000025b16         db  0x10 ; '.'
0000000000025b17         db  0x42 ; 'B'
0000000000025b18         db  0x0e ; '.'
0000000000025b19         db  0x08 ; '.'
0000000000025b1a         db  0x00 ; '.'
0000000000025b1b         db  0x00 ; '.'
0000000000025b1c         dd         0x00000010                                  ; Length of the record
0000000000025b20         dd         0x000020f8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025b24         db         0xec, 0xb3, 0xfe, 0xff                      ; begin 0x10f10
0000000000025b28         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x10f76)
0000000000025b2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025b2d         align      16
0000000000025b30         dd         0x00000028                                  ; Length of the record
0000000000025b34         dd         0x0000210c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025b38         db         0x48, 0xb4, 0xfe, 0xff                      ; begin 0x10f80
0000000000025b3c         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x10feb)
0000000000025b40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025b41         db  0x42 ; 'B'
0000000000025b42         db  0x0e ; '.'
0000000000025b43         db  0x10 ; '.'
0000000000025b44         db  0x8c ; '.'
0000000000025b45         db  0x02 ; '.'
0000000000025b46         db  0x44 ; 'D'
0000000000025b47         db  0x0e ; '.'
0000000000025b48         db  0x18 ; '.'
0000000000025b49         db  0x86 ; '.'
0000000000025b4a         db  0x03 ; '.'
0000000000025b4b         db  0x44 ; 'D'
0000000000025b4c         db  0x0e ; '.'
0000000000025b4d         db  0x20 ; ' '
0000000000025b4e         db  0x83 ; '.'
0000000000025b4f         db  0x04 ; '.'
0000000000025b50         db  0x02 ; '.'
0000000000025b51         db  0x5d ; ']'
0000000000025b52         db  0x0e ; '.'
0000000000025b53         db  0x18 ; '.'
0000000000025b54         db  0x41 ; 'A'
0000000000025b55         db  0x0e ; '.'
0000000000025b56         db  0x10 ; '.'
0000000000025b57         db  0x42 ; 'B'
0000000000025b58         db  0x0e ; '.'
0000000000025b59         db  0x08 ; '.'
0000000000025b5a         db  0x00 ; '.'
0000000000025b5b         db  0x00 ; '.'
0000000000025b5c         dd         0x00000028                                  ; Length of the record
0000000000025b60         dd         0x00002138                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025b64         db         0x8c, 0xb4, 0xfe, 0xff                      ; begin 0x10ff0
0000000000025b68         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x11041)
0000000000025b6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025b6d         db  0x42 ; 'B'
0000000000025b6e         db  0x0e ; '.'
0000000000025b6f         db  0x10 ; '.'
0000000000025b70         db  0x8c ; '.'
0000000000025b71         db  0x02 ; '.'
0000000000025b72         db  0x44 ; 'D'
0000000000025b73         db  0x0e ; '.'
0000000000025b74         db  0x18 ; '.'
0000000000025b75         db  0x86 ; '.'
0000000000025b76         db  0x03 ; '.'
0000000000025b77         db  0x44 ; 'D'
0000000000025b78         db  0x0e ; '.'
0000000000025b79         db  0x20 ; ' '
0000000000025b7a         db  0x83 ; '.'
0000000000025b7b         db  0x04 ; '.'
0000000000025b7c         db  0x02 ; '.'
0000000000025b7d         db  0x43 ; 'C'
0000000000025b7e         db  0x0e ; '.'
0000000000025b7f         db  0x18 ; '.'
0000000000025b80         db  0x41 ; 'A'
0000000000025b81         db  0x0e ; '.'
0000000000025b82         db  0x10 ; '.'
0000000000025b83         db  0x42 ; 'B'
0000000000025b84         db  0x0e ; '.'
0000000000025b85         db  0x08 ; '.'
0000000000025b86         db  0x00 ; '.'
0000000000025b87         db  0x00 ; '.'
0000000000025b88         dd         0x00000030                                  ; Length of the record
0000000000025b8c         dd         0x00002164                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025b90         db         0xc0, 0xb4, 0xfe, 0xff                      ; begin 0x11050
0000000000025b94         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x110ec)
0000000000025b98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025b99         db  0x41 ; 'A'
0000000000025b9a         db  0x0e ; '.'
0000000000025b9b         db  0x10 ; '.'
0000000000025b9c         db  0x86 ; '.'
0000000000025b9d         db  0x02 ; '.'
0000000000025b9e         db  0x41 ; 'A'
0000000000025b9f         db  0x0e ; '.'
0000000000025ba0         db  0x18 ; '.'
0000000000025ba1         db  0x83 ; '.'
0000000000025ba2         db  0x03 ; '.'
0000000000025ba3         db  0x4a ; 'J'
0000000000025ba4         db  0x0e ; '.'
0000000000025ba5         db  0x20 ; ' '
0000000000025ba6         db  0x02 ; '.'
0000000000025ba7         db  0x62 ; 'b'
0000000000025ba8         db  0x0a ; '.'
0000000000025ba9         db  0x0e ; '.'
0000000000025baa         db  0x18 ; '.'
0000000000025bab         db  0x43 ; 'C'
0000000000025bac         db  0x0e ; '.'
0000000000025bad         db  0x10 ; '.'
0000000000025bae         db  0x41 ; 'A'
0000000000025baf         db  0x0e ; '.'
0000000000025bb0         db  0x08 ; '.'
0000000000025bb1         db  0x46 ; 'F'
0000000000025bb2         db  0x0b ; '.'
0000000000025bb3         db  0x5c ; '\'
0000000000025bb4         db  0x0e ; '.'
0000000000025bb5         db  0x18 ; '.'
0000000000025bb6         db  0x46 ; 'F'
0000000000025bb7         db  0x0e ; '.'
0000000000025bb8         db  0x10 ; '.'
0000000000025bb9         db  0x41 ; 'A'
0000000000025bba         db  0x0e ; '.'
0000000000025bbb         db  0x08 ; '.'
0000000000025bbc         dd         0x00000028                                  ; Length of the record
0000000000025bc0         dd         0x00002198                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025bc4         db         0x2c, 0xb5, 0xfe, 0xff                      ; begin 0x110f0
0000000000025bc8         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x11154)
0000000000025bcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025bcd         db  0x41 ; 'A'
0000000000025bce         db  0x0e ; '.'
0000000000025bcf         db  0x10 ; '.'
0000000000025bd0         db  0x86 ; '.'
0000000000025bd1         db  0x02 ; '.'
0000000000025bd2         db  0x41 ; 'A'
0000000000025bd3         db  0x0e ; '.'
0000000000025bd4         db  0x18 ; '.'
0000000000025bd5         db  0x83 ; '.'
0000000000025bd6         db  0x03 ; '.'
0000000000025bd7         db  0x4a ; 'J'
0000000000025bd8         db  0x0e ; '.'
0000000000025bd9         db  0x20 ; ' '
0000000000025bda         db  0x62 ; 'b'
0000000000025bdb         db  0x0a ; '.'
0000000000025bdc         db  0x0e ; '.'
0000000000025bdd         db  0x18 ; '.'
0000000000025bde         db  0x41 ; 'A'
0000000000025bdf         db  0x0e ; '.'
0000000000025be0         db  0x10 ; '.'
0000000000025be1         db  0x41 ; 'A'
0000000000025be2         db  0x0e ; '.'
0000000000025be3         db  0x08 ; '.'
0000000000025be4         db  0x48 ; 'H'
0000000000025be5         db  0x0b ; '.'
0000000000025be6         db  0x00 ; '.'
0000000000025be7         db  0x00 ; '.'
0000000000025be8         dd         0x00000034                                  ; Length of the record
0000000000025bec         dd         0x000021c4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025bf0         db         0x70, 0xb5, 0xfe, 0xff                      ; begin 0x11160
0000000000025bf4         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x1128c)
0000000000025bf8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025bf9         db  0x41 ; 'A'
0000000000025bfa         db  0x0e ; '.'
0000000000025bfb         db  0x10 ; '.'
0000000000025bfc         db  0x86 ; '.'
0000000000025bfd         db  0x02 ; '.'
0000000000025bfe         db  0x41 ; 'A'
0000000000025bff         db  0x0e ; '.'
0000000000025c00         db  0x18 ; '.'
0000000000025c01         db  0x83 ; '.'
0000000000025c02         db  0x03 ; '.'
0000000000025c03         db  0x4a ; 'J'
0000000000025c04         db  0x0e ; '.'
0000000000025c05         db  0x20 ; ' '
0000000000025c06         db  0x66 ; 'f'
0000000000025c07         db  0x0a ; '.'
0000000000025c08         db  0x0e ; '.'
0000000000025c09         db  0x18 ; '.'
0000000000025c0a         db  0x41 ; 'A'
0000000000025c0b         db  0x0e ; '.'
0000000000025c0c         db  0x10 ; '.'
0000000000025c0d         db  0x41 ; 'A'
0000000000025c0e         db  0x0e ; '.'
0000000000025c0f         db  0x08 ; '.'
0000000000025c10         db  0x44 ; 'D'
0000000000025c11         db  0x0b ; '.'
0000000000025c12         db  0x6d ; 'm'
0000000000025c13         db  0x0a ; '.'
0000000000025c14         db  0x0e ; '.'
0000000000025c15         db  0x18 ; '.'
0000000000025c16         db  0x46 ; 'F'
0000000000025c17         db  0x0e ; '.'
0000000000025c18         db  0x10 ; '.'
0000000000025c19         db  0x41 ; 'A'
0000000000025c1a         db  0x0e ; '.'
0000000000025c1b         db  0x08 ; '.'
0000000000025c1c         db  0x44 ; 'D'
0000000000025c1d         db  0x0b ; '.'
0000000000025c1e         db  0x00 ; '.'
0000000000025c1f         db  0x00 ; '.'
0000000000025c20         dd         0x0000004c                                  ; Length of the record
0000000000025c24         dd         0x000021fc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025c28         db         0x68, 0xb6, 0xfe, 0xff                      ; begin 0x11290
0000000000025c2c         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x1137c)
0000000000025c30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025c31         db  0x42 ; 'B'
0000000000025c32         db  0x0e ; '.'
0000000000025c33         db  0x10 ; '.'
0000000000025c34         db  0x8e ; '.'
0000000000025c35         db  0x02 ; '.'
0000000000025c36         db  0x42 ; 'B'
0000000000025c37         db  0x0e ; '.'
0000000000025c38         db  0x18 ; '.'
0000000000025c39         db  0x8d ; '.'
0000000000025c3a         db  0x03 ; '.'
0000000000025c3b         db  0x45 ; 'E'
0000000000025c3c         db  0x0e ; '.'
0000000000025c3d         db  0x20 ; ' '
0000000000025c3e         db  0x8c ; '.'
0000000000025c3f         db  0x04 ; '.'
0000000000025c40         db  0x41 ; 'A'
0000000000025c41         db  0x0e ; '.'
0000000000025c42         db  0x28 ; '('
0000000000025c43         db  0x86 ; '.'
0000000000025c44         db  0x05 ; '.'
0000000000025c45         db  0x44 ; 'D'
0000000000025c46         db  0x0e ; '.'
0000000000025c47         db  0x30 ; '0'
0000000000025c48         db  0x83 ; '.'
0000000000025c49         db  0x06 ; '.'
0000000000025c4a         db  0x02 ; '.'
0000000000025c4b         db  0x71 ; 'q'
0000000000025c4c         db  0x0a ; '.'
0000000000025c4d         db  0x0e ; '.'
0000000000025c4e         db  0x28 ; '('
0000000000025c4f         db  0x46 ; 'F'
0000000000025c50         db  0x0e ; '.'
0000000000025c51         db  0x20 ; ' '
0000000000025c52         db  0x42 ; 'B'
0000000000025c53         db  0x0e ; '.'
0000000000025c54         db  0x18 ; '.'
0000000000025c55         db  0x42 ; 'B'
0000000000025c56         db  0x0e ; '.'
0000000000025c57         db  0x10 ; '.'
0000000000025c58         db  0x42 ; 'B'
0000000000025c59         db  0x0e ; '.'
0000000000025c5a         db  0x08 ; '.'
0000000000025c5b         db  0x45 ; 'E'
0000000000025c5c         db  0x0b ; '.'
0000000000025c5d         db  0x6e ; 'n'
0000000000025c5e         db  0x0a ; '.'
0000000000025c5f         db  0x0e ; '.'
0000000000025c60         db  0x28 ; '('
0000000000025c61         db  0x41 ; 'A'
0000000000025c62         db  0x0e ; '.'
0000000000025c63         db  0x20 ; ' '
0000000000025c64         db  0x42 ; 'B'
0000000000025c65         db  0x0e ; '.'
0000000000025c66         db  0x18 ; '.'
0000000000025c67         db  0x42 ; 'B'
0000000000025c68         db  0x0e ; '.'
0000000000025c69         db  0x10 ; '.'
0000000000025c6a         db  0x42 ; 'B'
0000000000025c6b         db  0x0e ; '.'
0000000000025c6c         db  0x08 ; '.'
0000000000025c6d         db  0x41 ; 'A'
0000000000025c6e         db  0x0b ; '.'
0000000000025c6f         db  0x00 ; '.'
0000000000025c70         dd         0x0000002c                                  ; Length of the record
0000000000025c74         dd         0x0000224c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025c78         db         0x08, 0xb7, 0xfe, 0xff                      ; begin 0x11380
0000000000025c7c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x113ee)
0000000000025c80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025c81         db  0x42 ; 'B'
0000000000025c82         db  0x0e ; '.'
0000000000025c83         db  0x10 ; '.'
0000000000025c84         db  0x8c ; '.'
0000000000025c85         db  0x02 ; '.'
0000000000025c86         db  0x49 ; 'I'
0000000000025c87         db  0x0e ; '.'
0000000000025c88         db  0x18 ; '.'
0000000000025c89         db  0x86 ; '.'
0000000000025c8a         db  0x03 ; '.'
0000000000025c8b         db  0x49 ; 'I'
0000000000025c8c         db  0x0e ; '.'
0000000000025c8d         db  0x20 ; ' '
0000000000025c8e         db  0x83 ; '.'
0000000000025c8f         db  0x04 ; '.'
0000000000025c90         db  0x02 ; '.'
0000000000025c91         db  0x4a ; 'J'
0000000000025c92         db  0x0a ; '.'
0000000000025c93         db  0x0e ; '.'
0000000000025c94         db  0x18 ; '.'
0000000000025c95         db  0x41 ; 'A'
0000000000025c96         db  0x0e ; '.'
0000000000025c97         db  0x10 ; '.'
0000000000025c98         db  0x42 ; 'B'
0000000000025c99         db  0x0e ; '.'
0000000000025c9a         db  0x08 ; '.'
0000000000025c9b         db  0x47 ; 'G'
0000000000025c9c         db  0x0b ; '.'
0000000000025c9d         db  0x00 ; '.'
0000000000025c9e         db  0x00 ; '.'
0000000000025c9f         db  0x00 ; '.'
0000000000025ca0         dd         0x00000048                                  ; Length of the record
0000000000025ca4         dd         0x0000227c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025ca8         db         0x48, 0xb7, 0xfe, 0xff                      ; begin 0x113f0
0000000000025cac         db         0xc3, 0x01, 2 dup (0x00)                    ; length 0x1c3 (end at 0x115b3)
0000000000025cb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025cb1         db  0x42 ; 'B'
0000000000025cb2         db  0x0e ; '.'
0000000000025cb3         db  0x10 ; '.'
0000000000025cb4         db  0x8f ; '.'
0000000000025cb5         db  0x02 ; '.'
0000000000025cb6         db  0x42 ; 'B'
0000000000025cb7         db  0x0e ; '.'
0000000000025cb8         db  0x18 ; '.'
0000000000025cb9         db  0x8e ; '.'
0000000000025cba         db  0x03 ; '.'
0000000000025cbb         db  0x42 ; 'B'
0000000000025cbc         db  0x0e ; '.'
0000000000025cbd         db  0x20 ; ' '
0000000000025cbe         db  0x8d ; '.'
0000000000025cbf         db  0x04 ; '.'
0000000000025cc0         db  0x42 ; 'B'
0000000000025cc1         db  0x0e ; '.'
0000000000025cc2         db  0x28 ; '('
0000000000025cc3         db  0x8c ; '.'
0000000000025cc4         db  0x05 ; '.'
0000000000025cc5         db  0x41 ; 'A'
0000000000025cc6         db  0x0e ; '.'
0000000000025cc7         db  0x30 ; '0'
0000000000025cc8         db  0x86 ; '.'
0000000000025cc9         db  0x06 ; '.'
0000000000025cca         db  0x41 ; 'A'
0000000000025ccb         db  0x0e ; '.'
0000000000025ccc         db  0x38 ; '8'
0000000000025ccd         db  0x83 ; '.'
0000000000025cce         db  0x07 ; '.'
0000000000025ccf         db  0x47 ; 'G'
0000000000025cd0         db  0x0e ; '.'
0000000000025cd1         db  0xa0 ; '.'
0000000000025cd2         db  0x01 ; '.'
0000000000025cd3         db  0x02 ; '.'
0000000000025cd4         db  0xd3 ; '.'
0000000000025cd5         db  0x0a ; '.'
0000000000025cd6         db  0x0e ; '.'
0000000000025cd7         db  0x38 ; '8'
0000000000025cd8         db  0x41 ; 'A'
0000000000025cd9         db  0x0e ; '.'
0000000000025cda         db  0x30 ; '0'
0000000000025cdb         db  0x41 ; 'A'
0000000000025cdc         db  0x0e ; '.'
0000000000025cdd         db  0x28 ; '('
0000000000025cde         db  0x42 ; 'B'
0000000000025cdf         db  0x0e ; '.'
0000000000025ce0         db  0x20 ; ' '
0000000000025ce1         db  0x42 ; 'B'
0000000000025ce2         db  0x0e ; '.'
0000000000025ce3         db  0x18 ; '.'
0000000000025ce4         db  0x42 ; 'B'
0000000000025ce5         db  0x0e ; '.'
0000000000025ce6         db  0x10 ; '.'
0000000000025ce7         db  0x42 ; 'B'
0000000000025ce8         db  0x0e ; '.'
0000000000025ce9         db  0x08 ; '.'
0000000000025cea         db  0x42 ; 'B'
0000000000025ceb         db  0x0b ; '.'
0000000000025cec         dd         0x00000048                                  ; Length of the record
0000000000025cf0         dd         0x000022c8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025cf4         db         0xcc, 0xb8, 0xfe, 0xff                      ; begin 0x115c0
0000000000025cf8         db         0x15, 0x06, 2 dup (0x00)                    ; length 0x615 (end at 0x11bd5)
0000000000025cfc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025cfd         db  0x42 ; 'B'
0000000000025cfe         db  0x0e ; '.'
0000000000025cff         db  0x10 ; '.'
0000000000025d00         db  0x8f ; '.'
0000000000025d01         db  0x02 ; '.'
0000000000025d02         db  0x42 ; 'B'
0000000000025d03         db  0x0e ; '.'
0000000000025d04         db  0x18 ; '.'
0000000000025d05         db  0x8e ; '.'
0000000000025d06         db  0x03 ; '.'
0000000000025d07         db  0x45 ; 'E'
0000000000025d08         db  0x0e ; '.'
0000000000025d09         db  0x20 ; ' '
0000000000025d0a         db  0x8d ; '.'
0000000000025d0b         db  0x04 ; '.'
0000000000025d0c         db  0x42 ; 'B'
0000000000025d0d         db  0x0e ; '.'
0000000000025d0e         db  0x28 ; '('
0000000000025d0f         db  0x8c ; '.'
0000000000025d10         db  0x05 ; '.'
0000000000025d11         db  0x41 ; 'A'
0000000000025d12         db  0x0e ; '.'
0000000000025d13         db  0x30 ; '0'
0000000000025d14         db  0x86 ; '.'
0000000000025d15         db  0x06 ; '.'
0000000000025d16         db  0x41 ; 'A'
0000000000025d17         db  0x0e ; '.'
0000000000025d18         db  0x38 ; '8'
0000000000025d19         db  0x83 ; '.'
0000000000025d1a         db  0x07 ; '.'
0000000000025d1b         db  0x47 ; 'G'
0000000000025d1c         db  0x0e ; '.'
0000000000025d1d         db  0xe0 ; '.'
0000000000025d1e         db  0x01 ; '.'
0000000000025d1f         db  0x02 ; '.'
0000000000025d20         db  0x69 ; 'i'
0000000000025d21         db  0x0a ; '.'
0000000000025d22         db  0x0e ; '.'
0000000000025d23         db  0x38 ; '8'
0000000000025d24         db  0x41 ; 'A'
0000000000025d25         db  0x0e ; '.'
0000000000025d26         db  0x30 ; '0'
0000000000025d27         db  0x41 ; 'A'
0000000000025d28         db  0x0e ; '.'
0000000000025d29         db  0x28 ; '('
0000000000025d2a         db  0x42 ; 'B'
0000000000025d2b         db  0x0e ; '.'
0000000000025d2c         db  0x20 ; ' '
0000000000025d2d         db  0x42 ; 'B'
0000000000025d2e         db  0x0e ; '.'
0000000000025d2f         db  0x18 ; '.'
0000000000025d30         db  0x42 ; 'B'
0000000000025d31         db  0x0e ; '.'
0000000000025d32         db  0x10 ; '.'
0000000000025d33         db  0x42 ; 'B'
0000000000025d34         db  0x0e ; '.'
0000000000025d35         db  0x08 ; '.'
0000000000025d36         db  0x49 ; 'I'
0000000000025d37         db  0x0b ; '.'
0000000000025d38         dd         0x00000058                                  ; Length of the record
0000000000025d3c         dd         0x00002314                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025d40         db         0xa0, 0xbe, 0xfe, 0xff                      ; begin 0x11be0
0000000000025d44         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x11d2e)
0000000000025d48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025d49         db  0x41 ; 'A'
0000000000025d4a         db  0x0e ; '.'
0000000000025d4b         db  0x10 ; '.'
0000000000025d4c         db  0x86 ; '.'
0000000000025d4d         db  0x02 ; '.'
0000000000025d4e         db  0x41 ; 'A'
0000000000025d4f         db  0x0e ; '.'
0000000000025d50         db  0x18 ; '.'
0000000000025d51         db  0x83 ; '.'
0000000000025d52         db  0x03 ; '.'
0000000000025d53         db  0x4e ; 'N'
0000000000025d54         db  0x0e ; '.'
0000000000025d55         db  0x20 ; ' '
0000000000025d56         db  0x02 ; '.'
0000000000025d57         db  0x83 ; '.'
0000000000025d58         db  0x0a ; '.'
0000000000025d59         db  0x0e ; '.'
0000000000025d5a         db  0x18 ; '.'
0000000000025d5b         db  0x41 ; 'A'
0000000000025d5c         db  0x0e ; '.'
0000000000025d5d         db  0x10 ; '.'
0000000000025d5e         db  0x41 ; 'A'
0000000000025d5f         db  0x0e ; '.'
0000000000025d60         db  0x08 ; '.'
0000000000025d61         db  0x4b ; 'K'
0000000000025d62         db  0x0b ; '.'
0000000000025d63         db  0x02 ; '.'
0000000000025d64         db  0x61 ; 'a'
0000000000025d65         db  0x0a ; '.'
0000000000025d66         db  0x0e ; '.'
0000000000025d67         db  0x18 ; '.'
0000000000025d68         db  0x43 ; 'C'
0000000000025d69         db  0x0e ; '.'
0000000000025d6a         db  0x10 ; '.'
0000000000025d6b         db  0x41 ; 'A'
0000000000025d6c         db  0x0e ; '.'
0000000000025d6d         db  0x08 ; '.'
0000000000025d6e         db  0x4b ; 'K'
0000000000025d6f         db  0x0b ; '.'
0000000000025d70         db  0x4c ; 'L'
0000000000025d71         db  0x0a ; '.'
0000000000025d72         db  0x0e ; '.'
0000000000025d73         db  0x18 ; '.'
0000000000025d74         db  0x43 ; 'C'
0000000000025d75         db  0x0e ; '.'
0000000000025d76         db  0x10 ; '.'
0000000000025d77         db  0x41 ; 'A'
0000000000025d78         db  0x0e ; '.'
0000000000025d79         db  0x08 ; '.'
0000000000025d7a         db  0x48 ; 'H'
0000000000025d7b         db  0x0b ; '.'
0000000000025d7c         db  0x49 ; 'I'
0000000000025d7d         db  0x0a ; '.'
0000000000025d7e         db  0x0e ; '.'
0000000000025d7f         db  0x18 ; '.'
0000000000025d80         db  0x43 ; 'C'
0000000000025d81         db  0x0e ; '.'
0000000000025d82         db  0x10 ; '.'
0000000000025d83         db  0x41 ; 'A'
0000000000025d84         db  0x0e ; '.'
0000000000025d85         db  0x08 ; '.'
0000000000025d86         db  0x4b ; 'K'
0000000000025d87         db  0x0b ; '.'
0000000000025d88         db  0x49 ; 'I'
0000000000025d89         db  0x0e ; '.'
0000000000025d8a         db  0x18 ; '.'
0000000000025d8b         db  0x43 ; 'C'
0000000000025d8c         db  0x0e ; '.'
0000000000025d8d         db  0x10 ; '.'
0000000000025d8e         db  0x41 ; 'A'
0000000000025d8f         db  0x0e ; '.'
0000000000025d90         db  0x08 ; '.'
0000000000025d91         db  0x00 ; '.'
0000000000025d92         db  0x00 ; '.'
0000000000025d93         db  0x00 ; '.'
0000000000025d94         dd         0x00000028                                  ; Length of the record
0000000000025d98         dd         0x00002370                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025d9c         db         0x94, 0xbf, 0xfe, 0xff                      ; begin 0x11d30
0000000000025da0         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x11db6)
0000000000025da4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025da5         db  0x42 ; 'B'
0000000000025da6         db  0x0e ; '.'
0000000000025da7         db  0x10 ; '.'
0000000000025da8         db  0x8c ; '.'
0000000000025da9         db  0x02 ; '.'
0000000000025daa         db  0x41 ; 'A'
0000000000025dab         db  0x0e ; '.'
0000000000025dac         db  0x18 ; '.'
0000000000025dad         db  0x86 ; '.'
0000000000025dae         db  0x03 ; '.'
0000000000025daf         db  0x44 ; 'D'
0000000000025db0         db  0x0e ; '.'
0000000000025db1         db  0x20 ; ' '
0000000000025db2         db  0x83 ; '.'
0000000000025db3         db  0x04 ; '.'
0000000000025db4         db  0x70 ; 'p'
0000000000025db5         db  0x0a ; '.'
0000000000025db6         db  0x0e ; '.'
0000000000025db7         db  0x18 ; '.'
0000000000025db8         db  0x41 ; 'A'
0000000000025db9         db  0x0e ; '.'
0000000000025dba         db  0x10 ; '.'
0000000000025dbb         db  0x42 ; 'B'
0000000000025dbc         db  0x0e ; '.'
0000000000025dbd         db  0x08 ; '.'
0000000000025dbe         db  0x46 ; 'F'
0000000000025dbf         db  0x0b ; '.'
0000000000025dc0         dd         0x00000018                                  ; Length of the record
0000000000025dc4         dd         0x0000239c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025dc8         db         0xf8, 0xbf, 0xfe, 0xff                      ; begin 0x11dc0
0000000000025dcc         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x11df0)
0000000000025dd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025dd1         db  0x41 ; 'A'
0000000000025dd2         db  0x0e ; '.'
0000000000025dd3         db  0x10 ; '.'
0000000000025dd4         db  0x83 ; '.'
0000000000025dd5         db  0x02 ; '.'
0000000000025dd6         db  0x6a ; 'j'
0000000000025dd7         db  0x0e ; '.'
0000000000025dd8         db  0x08 ; '.'
0000000000025dd9         db  0x00 ; '.'
0000000000025dda         db  0x00 ; '.'
0000000000025ddb         db  0x00 ; '.'
0000000000025ddc         dd         0x00000010                                  ; Length of the record
0000000000025de0         dd         0x000023b8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025de4         db         0x0c, 0xc0, 0xfe, 0xff                      ; begin 0x11df0
0000000000025de8         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x11e15)
0000000000025dec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025ded         align      16
0000000000025df0         dd         0x00000014                                  ; Length of the record
0000000000025df4         dd         0x000023cc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025df8         db         0x28, 0xc0, 0xfe, 0xff                      ; begin 0x11e20
0000000000025dfc         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x11e34)
0000000000025e00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025e01         db  0x48 ; 'H'
0000000000025e02         db  0x0e ; '.'
0000000000025e03         db  0x10 ; '.'
0000000000025e04         db  0x4b ; 'K'
0000000000025e05         db  0x0e ; '.'
0000000000025e06         db  0x08 ; '.'
0000000000025e07         db  0x00 ; '.'
0000000000025e08         dd         0x00000048                                  ; Length of the record
0000000000025e0c         dd         0x000023e4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025e10         db         0x30, 0xc0, 0xfe, 0xff                      ; begin 0x11e40
0000000000025e14         db         0xce, 0x01, 2 dup (0x00)                    ; length 0x1ce (end at 0x1200e)
0000000000025e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025e19         db  0x42 ; 'B'
0000000000025e1a         db  0x0e ; '.'
0000000000025e1b         db  0x10 ; '.'
0000000000025e1c         db  0x8f ; '.'
0000000000025e1d         db  0x02 ; '.'
0000000000025e1e         db  0x42 ; 'B'
0000000000025e1f         db  0x0e ; '.'
0000000000025e20         db  0x18 ; '.'
0000000000025e21         db  0x8e ; '.'
0000000000025e22         db  0x03 ; '.'
0000000000025e23         db  0x45 ; 'E'
0000000000025e24         db  0x0e ; '.'
0000000000025e25         db  0x20 ; ' '
0000000000025e26         db  0x8d ; '.'
0000000000025e27         db  0x04 ; '.'
0000000000025e28         db  0x42 ; 'B'
0000000000025e29         db  0x0e ; '.'
0000000000025e2a         db  0x28 ; '('
0000000000025e2b         db  0x8c ; '.'
0000000000025e2c         db  0x05 ; '.'
0000000000025e2d         db  0x41 ; 'A'
0000000000025e2e         db  0x0e ; '.'
0000000000025e2f         db  0x30 ; '0'
0000000000025e30         db  0x86 ; '.'
0000000000025e31         db  0x06 ; '.'
0000000000025e32         db  0x41 ; 'A'
0000000000025e33         db  0x0e ; '.'
0000000000025e34         db  0x38 ; '8'
0000000000025e35         db  0x83 ; '.'
0000000000025e36         db  0x07 ; '.'
0000000000025e37         db  0x47 ; 'G'
0000000000025e38         db  0x0e ; '.'
0000000000025e39         db  0x50 ; 'P'
0000000000025e3a         db  0x02 ; '.'
0000000000025e3b         db  0xac ; '.'
0000000000025e3c         db  0x0a ; '.'
0000000000025e3d         db  0x0e ; '.'
0000000000025e3e         db  0x38 ; '8'
0000000000025e3f         db  0x41 ; 'A'
0000000000025e40         db  0x0e ; '.'
0000000000025e41         db  0x30 ; '0'
0000000000025e42         db  0x41 ; 'A'
0000000000025e43         db  0x0e ; '.'
0000000000025e44         db  0x28 ; '('
0000000000025e45         db  0x42 ; 'B'
0000000000025e46         db  0x0e ; '.'
0000000000025e47         db  0x20 ; ' '
0000000000025e48         db  0x42 ; 'B'
0000000000025e49         db  0x0e ; '.'
0000000000025e4a         db  0x18 ; '.'
0000000000025e4b         db  0x42 ; 'B'
0000000000025e4c         db  0x0e ; '.'
0000000000025e4d         db  0x10 ; '.'
0000000000025e4e         db  0x42 ; 'B'
0000000000025e4f         db  0x0e ; '.'
0000000000025e50         db  0x08 ; '.'
0000000000025e51         db  0x46 ; 'F'
0000000000025e52         db  0x0b ; '.'
0000000000025e53         db  0x00 ; '.'
0000000000025e54         dd         0x00000034                                  ; Length of the record
0000000000025e58         dd         0x00002430                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025e5c         db         0xb4, 0xc1, 0xfe, 0xff                      ; begin 0x12010
0000000000025e60         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x120af)
0000000000025e64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025e65         db  0x42 ; 'B'
0000000000025e66         db  0x0e ; '.'
0000000000025e67         db  0x10 ; '.'
0000000000025e68         db  0x8d ; '.'
0000000000025e69         db  0x02 ; '.'
0000000000025e6a         db  0x42 ; 'B'
0000000000025e6b         db  0x0e ; '.'
0000000000025e6c         db  0x18 ; '.'
0000000000025e6d         db  0x8c ; '.'
0000000000025e6e         db  0x03 ; '.'
0000000000025e6f         db  0x44 ; 'D'
0000000000025e70         db  0x0e ; '.'
0000000000025e71         db  0x20 ; ' '
0000000000025e72         db  0x86 ; '.'
0000000000025e73         db  0x04 ; '.'
0000000000025e74         db  0x41 ; 'A'
0000000000025e75         db  0x0e ; '.'
0000000000025e76         db  0x28 ; '('
0000000000025e77         db  0x83 ; '.'
0000000000025e78         db  0x05 ; '.'
0000000000025e79         db  0x51 ; 'Q'
0000000000025e7a         db  0x0e ; '.'
0000000000025e7b         db  0x30 ; '0'
0000000000025e7c         db  0x02 ; '.'
0000000000025e7d         db  0x7e ; '~'
0000000000025e7e         db  0x0e ; '.'
0000000000025e7f         db  0x28 ; '('
0000000000025e80         db  0x41 ; 'A'
0000000000025e81         db  0x0e ; '.'
0000000000025e82         db  0x20 ; ' '
0000000000025e83         db  0x41 ; 'A'
0000000000025e84         db  0x0e ; '.'
0000000000025e85         db  0x18 ; '.'
0000000000025e86         db  0x42 ; 'B'
0000000000025e87         db  0x0e ; '.'
0000000000025e88         db  0x10 ; '.'
0000000000025e89         db  0x42 ; 'B'
0000000000025e8a         db  0x0e ; '.'
0000000000025e8b         db  0x08 ; '.'
0000000000025e8c         dd         0x00000048                                  ; Length of the record
0000000000025e90         dd         0x00002468                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025e94         db         0x1c, 0xc2, 0xfe, 0xff                      ; begin 0x120b0
0000000000025e98         db         0x75, 0x02, 2 dup (0x00)                    ; length 0x275 (end at 0x12325)
0000000000025e9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025e9d         db  0x42 ; 'B'
0000000000025e9e         db  0x0e ; '.'
0000000000025e9f         db  0x10 ; '.'
0000000000025ea0         db  0x8f ; '.'
0000000000025ea1         db  0x02 ; '.'
0000000000025ea2         db  0x42 ; 'B'
0000000000025ea3         db  0x0e ; '.'
0000000000025ea4         db  0x18 ; '.'
0000000000025ea5         db  0x8e ; '.'
0000000000025ea6         db  0x03 ; '.'
0000000000025ea7         db  0x45 ; 'E'
0000000000025ea8         db  0x0e ; '.'
0000000000025ea9         db  0x20 ; ' '
0000000000025eaa         db  0x8d ; '.'
0000000000025eab         db  0x04 ; '.'
0000000000025eac         db  0x42 ; 'B'
0000000000025ead         db  0x0e ; '.'
0000000000025eae         db  0x28 ; '('
0000000000025eaf         db  0x8c ; '.'
0000000000025eb0         db  0x05 ; '.'
0000000000025eb1         db  0x44 ; 'D'
0000000000025eb2         db  0x0e ; '.'
0000000000025eb3         db  0x30 ; '0'
0000000000025eb4         db  0x86 ; '.'
0000000000025eb5         db  0x06 ; '.'
0000000000025eb6         db  0x41 ; 'A'
0000000000025eb7         db  0x0e ; '.'
0000000000025eb8         db  0x38 ; '8'
0000000000025eb9         db  0x83 ; '.'
0000000000025eba         db  0x07 ; '.'
0000000000025ebb         db  0x4a ; 'J'
0000000000025ebc         db  0x0e ; '.'
0000000000025ebd         db  0x50 ; 'P'
0000000000025ebe         db  0x03 ; '.'
0000000000025ebf         db  0x1a ; '.'
0000000000025ec0         db  0x01 ; '.'
0000000000025ec1         db  0x0a ; '.'
0000000000025ec2         db  0x0e ; '.'
0000000000025ec3         db  0x38 ; '8'
0000000000025ec4         db  0x41 ; 'A'
0000000000025ec5         db  0x0e ; '.'
0000000000025ec6         db  0x30 ; '0'
0000000000025ec7         db  0x41 ; 'A'
0000000000025ec8         db  0x0e ; '.'
0000000000025ec9         db  0x28 ; '('
0000000000025eca         db  0x42 ; 'B'
0000000000025ecb         db  0x0e ; '.'
0000000000025ecc         db  0x20 ; ' '
0000000000025ecd         db  0x42 ; 'B'
0000000000025ece         db  0x0e ; '.'
0000000000025ecf         db  0x18 ; '.'
0000000000025ed0         db  0x42 ; 'B'
0000000000025ed1         db  0x0e ; '.'
0000000000025ed2         db  0x10 ; '.'
0000000000025ed3         db  0x42 ; 'B'
0000000000025ed4         db  0x0e ; '.'
0000000000025ed5         db  0x08 ; '.'
0000000000025ed6         db  0x42 ; 'B'
0000000000025ed7         db  0x0b ; '.'
0000000000025ed8         dd         0x00000018                                  ; Length of the record
0000000000025edc         dd         0x000024b4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025ee0         db         0x50, 0xc4, 0xfe, 0xff                      ; begin 0x12330
0000000000025ee4         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x12389)
0000000000025ee8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025ee9         db  0x41 ; 'A'
0000000000025eea         db  0x0e ; '.'
0000000000025eeb         db  0x10 ; '.'
0000000000025eec         db  0x83 ; '.'
0000000000025eed         db  0x02 ; '.'
0000000000025eee         db  0x02 ; '.'
0000000000025eef         db  0x53 ; 'S'
0000000000025ef0         db  0x0e ; '.'
0000000000025ef1         db  0x08 ; '.'
0000000000025ef2         db  0x00 ; '.'
0000000000025ef3         db  0x00 ; '.'
0000000000025ef4         dd         0x0000001c                                  ; Length of the record
0000000000025ef8         dd         0x000024d0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025efc         db         0x94, 0xc4, 0xfe, 0xff                      ; begin 0x12390
0000000000025f00         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x123c2)
0000000000025f04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025f05         db  0x41 ; 'A'
0000000000025f06         db  0x0e ; '.'
0000000000025f07         db  0x10 ; '.'
0000000000025f08         db  0x83 ; '.'
0000000000025f09         db  0x02 ; '.'
0000000000025f0a         db  0x5f ; '_'
0000000000025f0b         db  0x0a ; '.'
0000000000025f0c         db  0x0e ; '.'
0000000000025f0d         db  0x08 ; '.'
0000000000025f0e         db  0x48 ; 'H'
0000000000025f0f         db  0x0b ; '.'
0000000000025f10         db  0x45 ; 'E'
0000000000025f11         db  0x0e ; '.'
0000000000025f12         db  0x08 ; '.'
0000000000025f13         db  0x00 ; '.'
0000000000025f14         dd         0x00000038                                  ; Length of the record
0000000000025f18         dd         0x000024f0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025f1c         db         0xb4, 0xc4, 0xfe, 0xff                      ; begin 0x123d0
0000000000025f20         db         0x5f, 0x01, 2 dup (0x00)                    ; length 0x15f (end at 0x1252f)
0000000000025f24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025f25         db  0x42 ; 'B'
0000000000025f26         db  0x0e ; '.'
0000000000025f27         db  0x10 ; '.'
0000000000025f28         db  0x8e ; '.'
0000000000025f29         db  0x02 ; '.'
0000000000025f2a         db  0x42 ; 'B'
0000000000025f2b         db  0x0e ; '.'
0000000000025f2c         db  0x18 ; '.'
0000000000025f2d         db  0x8d ; '.'
0000000000025f2e         db  0x03 ; '.'
0000000000025f2f         db  0x42 ; 'B'
0000000000025f30         db  0x0e ; '.'
0000000000025f31         db  0x20 ; ' '
0000000000025f32         db  0x8c ; '.'
0000000000025f33         db  0x04 ; '.'
0000000000025f34         db  0x44 ; 'D'
0000000000025f35         db  0x0e ; '.'
0000000000025f36         db  0x28 ; '('
0000000000025f37         db  0x86 ; '.'
0000000000025f38         db  0x05 ; '.'
0000000000025f39         db  0x41 ; 'A'
0000000000025f3a         db  0x0e ; '.'
0000000000025f3b         db  0x30 ; '0'
0000000000025f3c         db  0x83 ; '.'
0000000000025f3d         db  0x06 ; '.'
0000000000025f3e         db  0x03 ; '.'
0000000000025f3f         db  0x45 ; 'E'
0000000000025f40         db  0x01 ; '.'
0000000000025f41         db  0x0e ; '.'
0000000000025f42         db  0x28 ; '('
0000000000025f43         db  0x44 ; 'D'
0000000000025f44         db  0x0e ; '.'
0000000000025f45         db  0x20 ; ' '
0000000000025f46         db  0x42 ; 'B'
0000000000025f47         db  0x0e ; '.'
0000000000025f48         db  0x18 ; '.'
0000000000025f49         db  0x42 ; 'B'
0000000000025f4a         db  0x0e ; '.'
0000000000025f4b         db  0x10 ; '.'
0000000000025f4c         db  0x42 ; 'B'
0000000000025f4d         db  0x0e ; '.'
0000000000025f4e         db  0x08 ; '.'
0000000000025f4f         db  0x00 ; '.'
0000000000025f50         dd         0x00000038                                  ; Length of the record
0000000000025f54         dd         0x0000252c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025f58         db         0xd8, 0xc5, 0xfe, 0xff                      ; begin 0x12530
0000000000025f5c         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x125e8)
0000000000025f60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025f61         db  0x42 ; 'B'
0000000000025f62         db  0x0e ; '.'
0000000000025f63         db  0x10 ; '.'
0000000000025f64         db  0x8e ; '.'
0000000000025f65         db  0x02 ; '.'
0000000000025f66         db  0x42 ; 'B'
0000000000025f67         db  0x0e ; '.'
0000000000025f68         db  0x18 ; '.'
0000000000025f69         db  0x8d ; '.'
0000000000025f6a         db  0x03 ; '.'
0000000000025f6b         db  0x45 ; 'E'
0000000000025f6c         db  0x0e ; '.'
0000000000025f6d         db  0x20 ; ' '
0000000000025f6e         db  0x8c ; '.'
0000000000025f6f         db  0x04 ; '.'
0000000000025f70         db  0x41 ; 'A'
0000000000025f71         db  0x0e ; '.'
0000000000025f72         db  0x28 ; '('
0000000000025f73         db  0x86 ; '.'
0000000000025f74         db  0x05 ; '.'
0000000000025f75         db  0x41 ; 'A'
0000000000025f76         db  0x0e ; '.'
0000000000025f77         db  0x30 ; '0'
0000000000025f78         db  0x83 ; '.'
0000000000025f79         db  0x06 ; '.'
0000000000025f7a         db  0x02 ; '.'
0000000000025f7b         db  0x8f ; '.'
0000000000025f7c         db  0x0e ; '.'
0000000000025f7d         db  0x28 ; '('
0000000000025f7e         db  0x57 ; 'W'
0000000000025f7f         db  0x0e ; '.'
0000000000025f80         db  0x20 ; ' '
0000000000025f81         db  0x42 ; 'B'
0000000000025f82         db  0x0e ; '.'
0000000000025f83         db  0x18 ; '.'
0000000000025f84         db  0x42 ; 'B'
0000000000025f85         db  0x0e ; '.'
0000000000025f86         db  0x10 ; '.'
0000000000025f87         db  0x42 ; 'B'
0000000000025f88         db  0x0e ; '.'
0000000000025f89         db  0x08 ; '.'
0000000000025f8a         db  0x00 ; '.'
0000000000025f8b         db  0x00 ; '.'
0000000000025f8c         dd         0x00000010                                  ; Length of the record
0000000000025f90         dd         0x00002568                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025f94         db         0x5c, 0xc6, 0xfe, 0xff                      ; begin 0x125f0
0000000000025f98         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x1263f)
0000000000025f9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025f9d         align      32
0000000000025fa0         dd         0x00000010                                  ; Length of the record
0000000000025fa4         dd         0x0000257c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025fa8         db         0x98, 0xc6, 0xfe, 0xff                      ; begin 0x12640
0000000000025fac         db         0x53, 3 dup (0x00)                          ; length 0x53 (end at 0x12693)
0000000000025fb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025fb1         align      4
0000000000025fb4         dd         0x00000010                                  ; Length of the record
0000000000025fb8         dd         0x00002590                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025fbc         db         0xe4, 0xc6, 0xfe, 0xff                      ; begin 0x126a0
0000000000025fc0         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x12715)
0000000000025fc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025fc5         align      8
0000000000025fc8         dd         0x00000060                                  ; Length of the record
0000000000025fcc         dd         0x000025a4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000025fd0         db         0x50, 0xc7, 0xfe, 0xff                      ; begin 0x12720
0000000000025fd4         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0x12815)
0000000000025fd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000025fd9         db  0x42 ; 'B'
0000000000025fda         db  0x0e ; '.'
0000000000025fdb         db  0x10 ; '.'
0000000000025fdc         db  0x8f ; '.'
0000000000025fdd         db  0x02 ; '.'
0000000000025fde         db  0x42 ; 'B'
0000000000025fdf         db  0x0e ; '.'
0000000000025fe0         db  0x18 ; '.'
0000000000025fe1         db  0x8e ; '.'
0000000000025fe2         db  0x03 ; '.'
0000000000025fe3         db  0x46 ; 'F'
0000000000025fe4         db  0x0e ; '.'
0000000000025fe5         db  0x20 ; ' '
0000000000025fe6         db  0x8d ; '.'
0000000000025fe7         db  0x04 ; '.'
0000000000025fe8         db  0x42 ; 'B'
0000000000025fe9         db  0x0e ; '.'
0000000000025fea         db  0x28 ; '('
0000000000025feb         db  0x8c ; '.'
0000000000025fec         db  0x05 ; '.'
0000000000025fed         db  0x44 ; 'D'
0000000000025fee         db  0x0e ; '.'
0000000000025fef         db  0x30 ; '0'
0000000000025ff0         db  0x86 ; '.'
0000000000025ff1         db  0x06 ; '.'
0000000000025ff2         db  0x41 ; 'A'
0000000000025ff3         db  0x0e ; '.'
0000000000025ff4         db  0x38 ; '8'
0000000000025ff5         db  0x83 ; '.'
0000000000025ff6         db  0x07 ; '.'
0000000000025ff7         db  0x50 ; 'P'
0000000000025ff8         db  0x0e ; '.'
0000000000025ff9         db  0x40 ; '@'
0000000000025ffa         db  0x02 ; '.'
0000000000025ffb         db  0x85 ; '.'
0000000000025ffc         db  0x0a ; '.'
0000000000025ffd         db  0x0e ; '.'
0000000000025ffe         db  0x38 ; '8'
0000000000025fff         db  0x41 ; 'A'
0000000000026000         db  0x0e ; '.'
0000000000026001         db  0x30 ; '0'
0000000000026002         db  0x41 ; 'A'
0000000000026003         db  0x0e ; '.'
0000000000026004         db  0x28 ; '('
0000000000026005         db  0x42 ; 'B'
0000000000026006         db  0x0e ; '.'
0000000000026007         db  0x20 ; ' '
0000000000026008         db  0x42 ; 'B'
0000000000026009         db  0x0e ; '.'
000000000002600a         db  0x18 ; '.'
000000000002600b         db  0x42 ; 'B'
000000000002600c         db  0x0e ; '.'
000000000002600d         db  0x10 ; '.'
000000000002600e         db  0x42 ; 'B'
000000000002600f         db  0x0e ; '.'
0000000000026010         db  0x08 ; '.'
0000000000026011         db  0x48 ; 'H'
0000000000026012         db  0x0b ; '.'
0000000000026013         db  0x44 ; 'D'
0000000000026014         db  0x0a ; '.'
0000000000026015         db  0x0e ; '.'
0000000000026016         db  0x38 ; '8'
0000000000026017         db  0x46 ; 'F'
0000000000026018         db  0x0e ; '.'
0000000000026019         db  0x30 ; '0'
000000000002601a         db  0x41 ; 'A'
000000000002601b         db  0x0e ; '.'
000000000002601c         db  0x28 ; '('
000000000002601d         db  0x42 ; 'B'
000000000002601e         db  0x0e ; '.'
000000000002601f         db  0x20 ; ' '
0000000000026020         db  0x42 ; 'B'
0000000000026021         db  0x0e ; '.'
0000000000026022         db  0x18 ; '.'
0000000000026023         db  0x42 ; 'B'
0000000000026024         db  0x0e ; '.'
0000000000026025         db  0x10 ; '.'
0000000000026026         db  0x42 ; 'B'
0000000000026027         db  0x0e ; '.'
0000000000026028         db  0x08 ; '.'
0000000000026029         db  0x45 ; 'E'
000000000002602a         db  0x0b ; '.'
000000000002602b         db  0x00 ; '.'
000000000002602c         dd         0x00000010                                  ; Length of the record
0000000000026030         dd         0x00002608                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026034         db         0xec, 0xc7, 0xfe, 0xff                      ; begin 0x12820
0000000000026038         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x12854)
000000000002603c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002603d         align      64
0000000000026040         dd         0x00000010                                  ; Length of the record
0000000000026044         dd         0x0000261c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026048         db         0x18, 0xc8, 0xfe, 0xff                      ; begin 0x12860
000000000002604c         db         0x8b, 3 dup (0x00)                          ; length 0x8b (end at 0x128eb)
0000000000026050         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026051         align      4
0000000000026054         dd         0x00000010                                  ; Length of the record
0000000000026058         dd         0x00002630                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002605c         db         0x94, 0xc8, 0xfe, 0xff                      ; begin 0x128f0
0000000000026060         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x12947)
0000000000026064         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026065         align      8
0000000000026068         dd         0x0000004c                                  ; Length of the record
000000000002606c         dd         0x00002644                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026070         db         0xe0, 0xc8, 0xfe, 0xff                      ; begin 0x12950
0000000000026074         db         0x69, 0x02, 2 dup (0x00)                    ; length 0x269 (end at 0x12bb9)
0000000000026078         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026079         db  0x42 ; 'B'
000000000002607a         db  0x0e ; '.'
000000000002607b         db  0x10 ; '.'
000000000002607c         db  0x8f ; '.'
000000000002607d         db  0x02 ; '.'
000000000002607e         db  0x42 ; 'B'
000000000002607f         db  0x0e ; '.'
0000000000026080         db  0x18 ; '.'
0000000000026081         db  0x8e ; '.'
0000000000026082         db  0x03 ; '.'
0000000000026083         db  0x42 ; 'B'
0000000000026084         db  0x0e ; '.'
0000000000026085         db  0x20 ; ' '
0000000000026086         db  0x8d ; '.'
0000000000026087         db  0x04 ; '.'
0000000000026088         db  0x42 ; 'B'
0000000000026089         db  0x0e ; '.'
000000000002608a         db  0x28 ; '('
000000000002608b         db  0x8c ; '.'
000000000002608c         db  0x05 ; '.'
000000000002608d         db  0x41 ; 'A'
000000000002608e         db  0x0e ; '.'
000000000002608f         db  0x30 ; '0'
0000000000026090         db  0x86 ; '.'
0000000000026091         db  0x06 ; '.'
0000000000026092         db  0x41 ; 'A'
0000000000026093         db  0x0e ; '.'
0000000000026094         db  0x38 ; '8'
0000000000026095         db  0x83 ; '.'
0000000000026096         db  0x07 ; '.'
0000000000026097         db  0x46 ; 'F'
0000000000026098         db  0x0e ; '.'
0000000000026099         db  0x80 ; '.'
000000000002609a         db  0x01 ; '.'
000000000002609b         db  0x03 ; '.'
000000000002609c         db  0xd2 ; '.'
000000000002609d         db  0x01 ; '.'
000000000002609e         db  0x0a ; '.'
000000000002609f         db  0x0e ; '.'
00000000000260a0         db  0x38 ; '8'
00000000000260a1         db  0x41 ; 'A'
00000000000260a2         db  0x0e ; '.'
00000000000260a3         db  0x30 ; '0'
00000000000260a4         db  0x41 ; 'A'
00000000000260a5         db  0x0e ; '.'
00000000000260a6         db  0x28 ; '('
00000000000260a7         db  0x42 ; 'B'
00000000000260a8         db  0x0e ; '.'
00000000000260a9         db  0x20 ; ' '
00000000000260aa         db  0x42 ; 'B'
00000000000260ab         db  0x0e ; '.'
00000000000260ac         db  0x18 ; '.'
00000000000260ad         db  0x42 ; 'B'
00000000000260ae         db  0x0e ; '.'
00000000000260af         db  0x10 ; '.'
00000000000260b0         db  0x42 ; 'B'
00000000000260b1         db  0x0e ; '.'
00000000000260b2         db  0x08 ; '.'
00000000000260b3         db  0x44 ; 'D'
00000000000260b4         db  0x0b ; '.'
00000000000260b5         db  0x00 ; '.'
00000000000260b6         db  0x00 ; '.'
00000000000260b7         db  0x00 ; '.'
00000000000260b8         dd         0x00000034                                  ; Length of the record
00000000000260bc         dd         0x00002694                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000260c0         db         0x00, 0xcb, 0xfe, 0xff                      ; begin 0x12bc0
00000000000260c4         db         0xde, 0x01, 2 dup (0x00)                    ; length 0x1de (end at 0x12d9e)
00000000000260c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000260c9         db  0x58 ; 'X'
00000000000260ca         db  0x0e ; '.'
00000000000260cb         db  0x10 ; '.'
00000000000260cc         db  0x8c ; '.'
00000000000260cd         db  0x02 ; '.'
00000000000260ce         db  0x41 ; 'A'
00000000000260cf         db  0x0e ; '.'
00000000000260d0         db  0x18 ; '.'
00000000000260d1         db  0x86 ; '.'
00000000000260d2         db  0x03 ; '.'
00000000000260d3         db  0x44 ; 'D'
00000000000260d4         db  0x0e ; '.'
00000000000260d5         db  0x20 ; ' '
00000000000260d6         db  0x83 ; '.'
00000000000260d7         db  0x04 ; '.'
00000000000260d8         db  0x02 ; '.'
00000000000260d9         db  0xd0 ; '.'
00000000000260da         db  0x0e ; '.'
00000000000260db         db  0x18 ; '.'
00000000000260dc         db  0x41 ; 'A'
00000000000260dd         db  0x0e ; '.'
00000000000260de         db  0x10 ; '.'
00000000000260df         db  0x42 ; 'B'
00000000000260e0         db  0x0e ; '.'
00000000000260e1         db  0x08 ; '.'
00000000000260e2         db  0x48 ; 'H'
00000000000260e3         db  0xc3 ; '.'
00000000000260e4         db  0xc6 ; '.'
00000000000260e5         db  0xcc ; '.'
00000000000260e6         db  0x48 ; 'H'
00000000000260e7         db  0x0e ; '.'
00000000000260e8         db  0x20 ; ' '
00000000000260e9         db  0x83 ; '.'
00000000000260ea         db  0x04 ; '.'
00000000000260eb         db  0x86 ; '.'
00000000000260ec         db  0x03 ; '.'
00000000000260ed         db  0x8c ; '.'
00000000000260ee         db  0x02 ; '.'
00000000000260ef         db  0x00 ; '.'
00000000000260f0         dd         0x0000004c                                  ; Length of the record
00000000000260f4         dd         0x000026cc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000260f8         db         0xa8, 0xcc, 0xfe, 0xff                      ; begin 0x12da0
00000000000260fc         db         0xaf, 0x02, 2 dup (0x00)                    ; length 0x2af (end at 0x1304f)
0000000000026100         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026101         db  0x42 ; 'B'
0000000000026102         db  0x0e ; '.'
0000000000026103         db  0x10 ; '.'
0000000000026104         db  0x8f ; '.'
0000000000026105         db  0x02 ; '.'
0000000000026106         db  0x42 ; 'B'
0000000000026107         db  0x0e ; '.'
0000000000026108         db  0x18 ; '.'
0000000000026109         db  0x8e ; '.'
000000000002610a         db  0x03 ; '.'
000000000002610b         db  0x45 ; 'E'
000000000002610c         db  0x0e ; '.'
000000000002610d         db  0x20 ; ' '
000000000002610e         db  0x8d ; '.'
000000000002610f         db  0x04 ; '.'
0000000000026110         db  0x42 ; 'B'
0000000000026111         db  0x0e ; '.'
0000000000026112         db  0x28 ; '('
0000000000026113         db  0x8c ; '.'
0000000000026114         db  0x05 ; '.'
0000000000026115         db  0x41 ; 'A'
0000000000026116         db  0x0e ; '.'
0000000000026117         db  0x30 ; '0'
0000000000026118         db  0x86 ; '.'
0000000000026119         db  0x06 ; '.'
000000000002611a         db  0x41 ; 'A'
000000000002611b         db  0x0e ; '.'
000000000002611c         db  0x38 ; '8'
000000000002611d         db  0x83 ; '.'
000000000002611e         db  0x07 ; '.'
000000000002611f         db  0x4b ; 'K'
0000000000026120         db  0x0e ; '.'
0000000000026121         db  0xa0 ; '.'
0000000000026122         db  0x01 ; '.'
0000000000026123         db  0x03 ; '.'
0000000000026124         db  0xa6 ; '.'
0000000000026125         db  0x01 ; '.'
0000000000026126         db  0x0a ; '.'
0000000000026127         db  0x0e ; '.'
0000000000026128         db  0x38 ; '8'
0000000000026129         db  0x41 ; 'A'
000000000002612a         db  0x0e ; '.'
000000000002612b         db  0x30 ; '0'
000000000002612c         db  0x41 ; 'A'
000000000002612d         db  0x0e ; '.'
000000000002612e         db  0x28 ; '('
000000000002612f         db  0x42 ; 'B'
0000000000026130         db  0x0e ; '.'
0000000000026131         db  0x20 ; ' '
0000000000026132         db  0x42 ; 'B'
0000000000026133         db  0x0e ; '.'
0000000000026134         db  0x18 ; '.'
0000000000026135         db  0x42 ; 'B'
0000000000026136         db  0x0e ; '.'
0000000000026137         db  0x10 ; '.'
0000000000026138         db  0x42 ; 'B'
0000000000026139         db  0x0e ; '.'
000000000002613a         db  0x08 ; '.'
000000000002613b         db  0x48 ; 'H'
000000000002613c         db  0x0b ; '.'
000000000002613d         db  0x00 ; '.'
000000000002613e         db  0x00 ; '.'
000000000002613f         db  0x00 ; '.'
0000000000026140         dd         0x00000048                                  ; Length of the record
0000000000026144         dd         0x0000271c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026148         db         0x08, 0xcf, 0xfe, 0xff                      ; begin 0x13050
000000000002614c         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0x131a9)
0000000000026150         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026151         db  0x42 ; 'B'
0000000000026152         db  0x0e ; '.'
0000000000026153         db  0x10 ; '.'
0000000000026154         db  0x8f ; '.'
0000000000026155         db  0x02 ; '.'
0000000000026156         db  0x42 ; 'B'
0000000000026157         db  0x0e ; '.'
0000000000026158         db  0x18 ; '.'
0000000000026159         db  0x8e ; '.'
000000000002615a         db  0x03 ; '.'
000000000002615b         db  0x45 ; 'E'
000000000002615c         db  0x0e ; '.'
000000000002615d         db  0x20 ; ' '
000000000002615e         db  0x8d ; '.'
000000000002615f         db  0x04 ; '.'
0000000000026160         db  0x42 ; 'B'
0000000000026161         db  0x0e ; '.'
0000000000026162         db  0x28 ; '('
0000000000026163         db  0x8c ; '.'
0000000000026164         db  0x05 ; '.'
0000000000026165         db  0x44 ; 'D'
0000000000026166         db  0x0e ; '.'
0000000000026167         db  0x30 ; '0'
0000000000026168         db  0x86 ; '.'
0000000000026169         db  0x06 ; '.'
000000000002616a         db  0x41 ; 'A'
000000000002616b         db  0x0e ; '.'
000000000002616c         db  0x38 ; '8'
000000000002616d         db  0x83 ; '.'
000000000002616e         db  0x07 ; '.'
000000000002616f         db  0x49 ; 'I'
0000000000026170         db  0x0e ; '.'
0000000000026171         db  0x70 ; 'p'
0000000000026172         db  0x03 ; '.'
0000000000026173         db  0x29 ; ')'
0000000000026174         db  0x01 ; '.'
0000000000026175         db  0x0a ; '.'
0000000000026176         db  0x0e ; '.'
0000000000026177         db  0x38 ; '8'
0000000000026178         db  0x41 ; 'A'
0000000000026179         db  0x0e ; '.'
000000000002617a         db  0x30 ; '0'
000000000002617b         db  0x41 ; 'A'
000000000002617c         db  0x0e ; '.'
000000000002617d         db  0x28 ; '('
000000000002617e         db  0x42 ; 'B'
000000000002617f         db  0x0e ; '.'
0000000000026180         db  0x20 ; ' '
0000000000026181         db  0x42 ; 'B'
0000000000026182         db  0x0e ; '.'
0000000000026183         db  0x18 ; '.'
0000000000026184         db  0x42 ; 'B'
0000000000026185         db  0x0e ; '.'
0000000000026186         db  0x10 ; '.'
0000000000026187         db  0x42 ; 'B'
0000000000026188         db  0x0e ; '.'
0000000000026189         db  0x08 ; '.'
000000000002618a         db  0x41 ; 'A'
000000000002618b         db  0x0b ; '.'
000000000002618c         dd         0x0000004c                                  ; Length of the record
0000000000026190         dd         0x00002768                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026194         db         0x1c, 0xd0, 0xfe, 0xff                      ; begin 0x131b0
0000000000026198         db         0xa8, 0x01, 2 dup (0x00)                    ; length 0x1a8 (end at 0x13358)
000000000002619c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002619d         db  0x5e ; '^'
000000000002619e         db  0x0e ; '.'
000000000002619f         db  0x10 ; '.'
00000000000261a0         db  0x8d ; '.'
00000000000261a1         db  0x02 ; '.'
00000000000261a2         db  0x42 ; 'B'
00000000000261a3         db  0x0e ; '.'
00000000000261a4         db  0x18 ; '.'
00000000000261a5         db  0x8c ; '.'
00000000000261a6         db  0x03 ; '.'
00000000000261a7         db  0x45 ; 'E'
00000000000261a8         db  0x0e ; '.'
00000000000261a9         db  0x20 ; ' '
00000000000261aa         db  0x86 ; '.'
00000000000261ab         db  0x04 ; '.'
00000000000261ac         db  0x41 ; 'A'
00000000000261ad         db  0x0e ; '.'
00000000000261ae         db  0x28 ; '('
00000000000261af         db  0x83 ; '.'
00000000000261b0         db  0x05 ; '.'
00000000000261b1         db  0x4d ; 'M'
00000000000261b2         db  0x0e ; '.'
00000000000261b3         db  0x30 ; '0'
00000000000261b4         db  0x02 ; '.'
00000000000261b5         db  0x95 ; '.'
00000000000261b6         db  0x0e ; '.'
00000000000261b7         db  0x08 ; '.'
00000000000261b8         db  0xc3 ; '.'
00000000000261b9         db  0xc6 ; '.'
00000000000261ba         db  0xcc ; '.'
00000000000261bb         db  0xcd ; '.'
00000000000261bc         db  0x48 ; 'H'
00000000000261bd         db  0x0e ; '.'
00000000000261be         db  0x30 ; '0'
00000000000261bf         db  0x83 ; '.'
00000000000261c0         db  0x05 ; '.'
00000000000261c1         db  0x86 ; '.'
00000000000261c2         db  0x04 ; '.'
00000000000261c3         db  0x8c ; '.'
00000000000261c4         db  0x03 ; '.'
00000000000261c5         db  0x8d ; '.'
00000000000261c6         db  0x02 ; '.'
00000000000261c7         db  0x02 ; '.'
00000000000261c8         db  0x90 ; '.'
00000000000261c9         db  0x0a ; '.'
00000000000261ca         db  0x0e ; '.'
00000000000261cb         db  0x28 ; '('
00000000000261cc         db  0x41 ; 'A'
00000000000261cd         db  0x0e ; '.'
00000000000261ce         db  0x20 ; ' '
00000000000261cf         db  0x41 ; 'A'
00000000000261d0         db  0x0e ; '.'
00000000000261d1         db  0x18 ; '.'
00000000000261d2         db  0x42 ; 'B'
00000000000261d3         db  0x0e ; '.'
00000000000261d4         db  0x10 ; '.'
00000000000261d5         db  0x42 ; 'B'
00000000000261d6         db  0x0e ; '.'
00000000000261d7         db  0x08 ; '.'
00000000000261d8         db  0x4a ; 'J'
00000000000261d9         db  0x0b ; '.'
00000000000261da         db  0x00 ; '.'
00000000000261db         db  0x00 ; '.'
00000000000261dc         dd         0x00000020                                  ; Length of the record
00000000000261e0         dd         0x000027b8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000261e4         db         0x7c, 0xd1, 0xfe, 0xff                      ; begin 0x13360
00000000000261e8         db         0xe0, 3 dup (0x00)                          ; length 0xe0 (end at 0x13440)
00000000000261ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000261ed         db  0x41 ; 'A'
00000000000261ee         db  0x0e ; '.'
00000000000261ef         db  0x10 ; '.'
00000000000261f0         db  0x83 ; '.'
00000000000261f1         db  0x02 ; '.'
00000000000261f2         db  0x47 ; 'G'
00000000000261f3         db  0x0e ; '.'
00000000000261f4         db  0x30 ; '0'
00000000000261f5         db  0x02 ; '.'
00000000000261f6         db  0x77 ; 'w'
00000000000261f7         db  0x0a ; '.'
00000000000261f8         db  0x0e ; '.'
00000000000261f9         db  0x10 ; '.'
00000000000261fa         db  0x41 ; 'A'
00000000000261fb         db  0x0e ; '.'
00000000000261fc         db  0x08 ; '.'
00000000000261fd         db  0x48 ; 'H'
00000000000261fe         db  0x0b ; '.'
00000000000261ff         db  0x00 ; '.'
0000000000026200         dd         0x00000040                                  ; Length of the record
0000000000026204         dd         0x000027dc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026208         db         0x38, 0xd2, 0xfe, 0xff                      ; begin 0x13440
000000000002620c         db         0xd1, 3 dup (0x00)                          ; length 0xd1 (end at 0x13511)
0000000000026210         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026211         db  0x42 ; 'B'
0000000000026212         db  0x0e ; '.'
0000000000026213         db  0x10 ; '.'
0000000000026214         db  0x8e ; '.'
0000000000026215         db  0x02 ; '.'
0000000000026216         db  0x42 ; 'B'
0000000000026217         db  0x0e ; '.'
0000000000026218         db  0x18 ; '.'
0000000000026219         db  0x8d ; '.'
000000000002621a         db  0x03 ; '.'
000000000002621b         db  0x46 ; 'F'
000000000002621c         db  0x0e ; '.'
000000000002621d         db  0x20 ; ' '
000000000002621e         db  0x8c ; '.'
000000000002621f         db  0x04 ; '.'
0000000000026220         db  0x41 ; 'A'
0000000000026221         db  0x0e ; '.'
0000000000026222         db  0x28 ; '('
0000000000026223         db  0x86 ; '.'
0000000000026224         db  0x05 ; '.'
0000000000026225         db  0x48 ; 'H'
0000000000026226         db  0x0e ; '.'
0000000000026227         db  0x30 ; '0'
0000000000026228         db  0x83 ; '.'
0000000000026229         db  0x06 ; '.'
000000000002622a         db  0x47 ; 'G'
000000000002622b         db  0x0e ; '.'
000000000002622c         db  0x40 ; '@'
000000000002622d         db  0x02 ; '.'
000000000002622e         db  0x96 ; '.'
000000000002622f         db  0x0a ; '.'
0000000000026230         db  0x0e ; '.'
0000000000026231         db  0x30 ; '0'
0000000000026232         db  0x41 ; 'A'
0000000000026233         db  0x0e ; '.'
0000000000026234         db  0x28 ; '('
0000000000026235         db  0x41 ; 'A'
0000000000026236         db  0x0e ; '.'
0000000000026237         db  0x20 ; ' '
0000000000026238         db  0x42 ; 'B'
0000000000026239         db  0x0e ; '.'
000000000002623a         db  0x18 ; '.'
000000000002623b         db  0x42 ; 'B'
000000000002623c         db  0x0e ; '.'
000000000002623d         db  0x10 ; '.'
000000000002623e         db  0x42 ; 'B'
000000000002623f         db  0x0e ; '.'
0000000000026240         db  0x08 ; '.'
0000000000026241         db  0x48 ; 'H'
0000000000026242         db  0x0b ; '.'
0000000000026243         db  0x00 ; '.'
0000000000026244         dd         0x0000004c                                  ; Length of the record
0000000000026248         dd         0x00002820                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002624c         db         0xd4, 0xd2, 0xfe, 0xff                      ; begin 0x13520
0000000000026250         db         0x37, 0x02, 2 dup (0x00)                    ; length 0x237 (end at 0x13757)
0000000000026254         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026255         db  0x42 ; 'B'
0000000000026256         db  0x0e ; '.'
0000000000026257         db  0x10 ; '.'
0000000000026258         db  0x8f ; '.'
0000000000026259         db  0x02 ; '.'
000000000002625a         db  0x42 ; 'B'
000000000002625b         db  0x0e ; '.'
000000000002625c         db  0x18 ; '.'
000000000002625d         db  0x8e ; '.'
000000000002625e         db  0x03 ; '.'
000000000002625f         db  0x42 ; 'B'
0000000000026260         db  0x0e ; '.'
0000000000026261         db  0x20 ; ' '
0000000000026262         db  0x8d ; '.'
0000000000026263         db  0x04 ; '.'
0000000000026264         db  0x42 ; 'B'
0000000000026265         db  0x0e ; '.'
0000000000026266         db  0x28 ; '('
0000000000026267         db  0x8c ; '.'
0000000000026268         db  0x05 ; '.'
0000000000026269         db  0x44 ; 'D'
000000000002626a         db  0x0e ; '.'
000000000002626b         db  0x30 ; '0'
000000000002626c         db  0x86 ; '.'
000000000002626d         db  0x06 ; '.'
000000000002626e         db  0x41 ; 'A'
000000000002626f         db  0x0e ; '.'
0000000000026270         db  0x38 ; '8'
0000000000026271         db  0x83 ; '.'
0000000000026272         db  0x07 ; '.'
0000000000026273         db  0x44 ; 'D'
0000000000026274         db  0x0e ; '.'
0000000000026275         db  0x80 ; '.'
0000000000026276         db  0x01 ; '.'
0000000000026277         db  0x03 ; '.'
0000000000026278         db  0x87 ; '.'
0000000000026279         db  0x01 ; '.'
000000000002627a         db  0x0a ; '.'
000000000002627b         db  0x0e ; '.'
000000000002627c         db  0x38 ; '8'
000000000002627d         db  0x41 ; 'A'
000000000002627e         db  0x0e ; '.'
000000000002627f         db  0x30 ; '0'
0000000000026280         db  0x41 ; 'A'
0000000000026281         db  0x0e ; '.'
0000000000026282         db  0x28 ; '('
0000000000026283         db  0x42 ; 'B'
0000000000026284         db  0x0e ; '.'
0000000000026285         db  0x20 ; ' '
0000000000026286         db  0x42 ; 'B'
0000000000026287         db  0x0e ; '.'
0000000000026288         db  0x18 ; '.'
0000000000026289         db  0x42 ; 'B'
000000000002628a         db  0x0e ; '.'
000000000002628b         db  0x10 ; '.'
000000000002628c         db  0x42 ; 'B'
000000000002628d         db  0x0e ; '.'
000000000002628e         db  0x08 ; '.'
000000000002628f         db  0x46 ; 'F'
0000000000026290         db  0x0b ; '.'
0000000000026291         db  0x00 ; '.'
0000000000026292         db  0x00 ; '.'
0000000000026293         db  0x00 ; '.'
0000000000026294         dd         0x00000028                                  ; Length of the record
0000000000026298         dd         0x00002870                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002629c         db         0xc4, 0xd4, 0xfe, 0xff                      ; begin 0x13760
00000000000262a0         db         0xa0, 3 dup (0x00)                          ; length 0xa0 (end at 0x13800)
00000000000262a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000262a5         db  0x41 ; 'A'
00000000000262a6         db  0x0e ; '.'
00000000000262a7         db  0x10 ; '.'
00000000000262a8         db  0x86 ; '.'
00000000000262a9         db  0x02 ; '.'
00000000000262aa         db  0x41 ; 'A'
00000000000262ab         db  0x0e ; '.'
00000000000262ac         db  0x18 ; '.'
00000000000262ad         db  0x83 ; '.'
00000000000262ae         db  0x03 ; '.'
00000000000262af         db  0x4a ; 'J'
00000000000262b0         db  0x0e ; '.'
00000000000262b1         db  0x30 ; '0'
00000000000262b2         db  0x02 ; '.'
00000000000262b3         db  0x4e ; 'N'
00000000000262b4         db  0x0a ; '.'
00000000000262b5         db  0x0e ; '.'
00000000000262b6         db  0x18 ; '.'
00000000000262b7         db  0x41 ; 'A'
00000000000262b8         db  0x0e ; '.'
00000000000262b9         db  0x10 ; '.'
00000000000262ba         db  0x41 ; 'A'
00000000000262bb         db  0x0e ; '.'
00000000000262bc         db  0x08 ; '.'
00000000000262bd         db  0x44 ; 'D'
00000000000262be         db  0x0b ; '.'
00000000000262bf         db  0x00 ; '.'
00000000000262c0         dd         0x00000038                                  ; Length of the record
00000000000262c4         dd         0x0000289c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000262c8         db         0x38, 0xd5, 0xfe, 0xff                      ; begin 0x13800
00000000000262cc         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x13886)
00000000000262d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000262d1         db  0x42 ; 'B'
00000000000262d2         db  0x0e ; '.'
00000000000262d3         db  0x10 ; '.'
00000000000262d4         db  0x8c ; '.'
00000000000262d5         db  0x02 ; '.'
00000000000262d6         db  0x41 ; 'A'
00000000000262d7         db  0x0e ; '.'
00000000000262d8         db  0x18 ; '.'
00000000000262d9         db  0x86 ; '.'
00000000000262da         db  0x03 ; '.'
00000000000262db         db  0x41 ; 'A'
00000000000262dc         db  0x0e ; '.'
00000000000262dd         db  0x20 ; ' '
00000000000262de         db  0x83 ; '.'
00000000000262df         db  0x04 ; '.'
00000000000262e0         db  0x02 ; '.'
00000000000262e1         db  0x47 ; 'G'
00000000000262e2         db  0x0a ; '.'
00000000000262e3         db  0x0e ; '.'
00000000000262e4         db  0x18 ; '.'
00000000000262e5         db  0x41 ; 'A'
00000000000262e6         db  0x0e ; '.'
00000000000262e7         db  0x10 ; '.'
00000000000262e8         db  0x42 ; 'B'
00000000000262e9         db  0x0e ; '.'
00000000000262ea         db  0x08 ; '.'
00000000000262eb         db  0x42 ; 'B'
00000000000262ec         db  0x0b ; '.'
00000000000262ed         db  0x52 ; 'R'
00000000000262ee         db  0x0a ; '.'
00000000000262ef         db  0x0e ; '.'
00000000000262f0         db  0x18 ; '.'
00000000000262f1         db  0x41 ; 'A'
00000000000262f2         db  0x0e ; '.'
00000000000262f3         db  0x10 ; '.'
00000000000262f4         db  0x42 ; 'B'
00000000000262f5         db  0x0e ; '.'
00000000000262f6         db  0x08 ; '.'
00000000000262f7         db  0x4b ; 'K'
00000000000262f8         db  0x0b ; '.'
00000000000262f9         db  0x00 ; '.'
00000000000262fa         db  0x00 ; '.'
00000000000262fb         db  0x00 ; '.'
00000000000262fc         dd         0x00000060                                  ; Length of the record
0000000000026300         dd         0x000028d8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026304         db         0x8c, 0xd5, 0xfe, 0xff                      ; begin 0x13890
0000000000026308         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0x139e2)
000000000002630c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002630d         db  0x45 ; 'E'
000000000002630e         db  0x0e ; '.'
000000000002630f         db  0x10 ; '.'
0000000000026310         db  0x8e ; '.'
0000000000026311         db  0x02 ; '.'
0000000000026312         db  0x42 ; 'B'
0000000000026313         db  0x0e ; '.'
0000000000026314         db  0x18 ; '.'
0000000000026315         db  0x8d ; '.'
0000000000026316         db  0x03 ; '.'
0000000000026317         db  0x42 ; 'B'
0000000000026318         db  0x0e ; '.'
0000000000026319         db  0x20 ; ' '
000000000002631a         db  0x8c ; '.'
000000000002631b         db  0x04 ; '.'
000000000002631c         db  0x41 ; 'A'
000000000002631d         db  0x0e ; '.'
000000000002631e         db  0x28 ; '('
000000000002631f         db  0x86 ; '.'
0000000000026320         db  0x05 ; '.'
0000000000026321         db  0x41 ; 'A'
0000000000026322         db  0x0e ; '.'
0000000000026323         db  0x30 ; '0'
0000000000026324         db  0x83 ; '.'
0000000000026325         db  0x06 ; '.'
0000000000026326         db  0x02 ; '.'
0000000000026327         db  0xc8 ; '.'
0000000000026328         db  0x0a ; '.'
0000000000026329         db  0x0e ; '.'
000000000002632a         db  0x28 ; '('
000000000002632b         db  0x41 ; 'A'
000000000002632c         db  0x0e ; '.'
000000000002632d         db  0x20 ; ' '
000000000002632e         db  0x42 ; 'B'
000000000002632f         db  0x0e ; '.'
0000000000026330         db  0x18 ; '.'
0000000000026331         db  0x42 ; 'B'
0000000000026332         db  0x0e ; '.'
0000000000026333         db  0x10 ; '.'
0000000000026334         db  0x42 ; 'B'
0000000000026335         db  0x0e ; '.'
0000000000026336         db  0x08 ; '.'
0000000000026337         db  0x46 ; 'F'
0000000000026338         db  0x0b ; '.'
0000000000026339         db  0x44 ; 'D'
000000000002633a         db  0x0a ; '.'
000000000002633b         db  0x0e ; '.'
000000000002633c         db  0x28 ; '('
000000000002633d         db  0x41 ; 'A'
000000000002633e         db  0x0e ; '.'
000000000002633f         db  0x20 ; ' '
0000000000026340         db  0x42 ; 'B'
0000000000026341         db  0x0e ; '.'
0000000000026342         db  0x18 ; '.'
0000000000026343         db  0x42 ; 'B'
0000000000026344         db  0x0e ; '.'
0000000000026345         db  0x10 ; '.'
0000000000026346         db  0x42 ; 'B'
0000000000026347         db  0x0e ; '.'
0000000000026348         db  0x08 ; '.'
0000000000026349         db  0x45 ; 'E'
000000000002634a         db  0x0b ; '.'
000000000002634b         db  0x4d ; 'M'
000000000002634c         db  0x0a ; '.'
000000000002634d         db  0x0e ; '.'
000000000002634e         db  0x28 ; '('
000000000002634f         db  0x41 ; 'A'
0000000000026350         db  0x0e ; '.'
0000000000026351         db  0x20 ; ' '
0000000000026352         db  0x42 ; 'B'
0000000000026353         db  0x0e ; '.'
0000000000026354         db  0x18 ; '.'
0000000000026355         db  0x42 ; 'B'
0000000000026356         db  0x0e ; '.'
0000000000026357         db  0x10 ; '.'
0000000000026358         db  0x42 ; 'B'
0000000000026359         db  0x0e ; '.'
000000000002635a         db  0x08 ; '.'
000000000002635b         db  0x44 ; 'D'
000000000002635c         db  0x0b ; '.'
000000000002635d         db  0x00 ; '.'
000000000002635e         db  0x00 ; '.'
000000000002635f         db  0x00 ; '.'
0000000000026360         dd         0x00000048                                  ; Length of the record
0000000000026364         dd         0x0000293c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026368         db         0x88, 0xd6, 0xfe, 0xff                      ; begin 0x139f0
000000000002636c         db         0xba, 0x02, 2 dup (0x00)                    ; length 0x2ba (end at 0x13caa)
0000000000026370         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026371         db  0x42 ; 'B'
0000000000026372         db  0x0e ; '.'
0000000000026373         db  0x10 ; '.'
0000000000026374         db  0x8f ; '.'
0000000000026375         db  0x02 ; '.'
0000000000026376         db  0x42 ; 'B'
0000000000026377         db  0x0e ; '.'
0000000000026378         db  0x18 ; '.'
0000000000026379         db  0x8e ; '.'
000000000002637a         db  0x03 ; '.'
000000000002637b         db  0x42 ; 'B'
000000000002637c         db  0x0e ; '.'
000000000002637d         db  0x20 ; ' '
000000000002637e         db  0x8d ; '.'
000000000002637f         db  0x04 ; '.'
0000000000026380         db  0x42 ; 'B'
0000000000026381         db  0x0e ; '.'
0000000000026382         db  0x28 ; '('
0000000000026383         db  0x8c ; '.'
0000000000026384         db  0x05 ; '.'
0000000000026385         db  0x41 ; 'A'
0000000000026386         db  0x0e ; '.'
0000000000026387         db  0x30 ; '0'
0000000000026388         db  0x86 ; '.'
0000000000026389         db  0x06 ; '.'
000000000002638a         db  0x41 ; 'A'
000000000002638b         db  0x0e ; '.'
000000000002638c         db  0x38 ; '8'
000000000002638d         db  0x83 ; '.'
000000000002638e         db  0x07 ; '.'
000000000002638f         db  0x44 ; 'D'
0000000000026390         db  0x0e ; '.'
0000000000026391         db  0x60 ; '`'
0000000000026392         db  0x02 ; '.'
0000000000026393         db  0xa2 ; '.'
0000000000026394         db  0x0a ; '.'
0000000000026395         db  0x0e ; '.'
0000000000026396         db  0x38 ; '8'
0000000000026397         db  0x44 ; 'D'
0000000000026398         db  0x0e ; '.'
0000000000026399         db  0x30 ; '0'
000000000002639a         db  0x41 ; 'A'
000000000002639b         db  0x0e ; '.'
000000000002639c         db  0x28 ; '('
000000000002639d         db  0x42 ; 'B'
000000000002639e         db  0x0e ; '.'
000000000002639f         db  0x20 ; ' '
00000000000263a0         db  0x42 ; 'B'
00000000000263a1         db  0x0e ; '.'
00000000000263a2         db  0x18 ; '.'
00000000000263a3         db  0x42 ; 'B'
00000000000263a4         db  0x0e ; '.'
00000000000263a5         db  0x10 ; '.'
00000000000263a6         db  0x42 ; 'B'
00000000000263a7         db  0x0e ; '.'
00000000000263a8         db  0x08 ; '.'
00000000000263a9         db  0x43 ; 'C'
00000000000263aa         db  0x0b ; '.'
00000000000263ab         db  0x00 ; '.'
00000000000263ac         dd         0x00000048                                  ; Length of the record
00000000000263b0         dd         0x00002988                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000263b4         db         0xfc, 0xd8, 0xfe, 0xff                      ; begin 0x13cb0
00000000000263b8         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0x13eaa)
00000000000263bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000263bd         db  0x42 ; 'B'
00000000000263be         db  0x0e ; '.'
00000000000263bf         db  0x10 ; '.'
00000000000263c0         db  0x8f ; '.'
00000000000263c1         db  0x02 ; '.'
00000000000263c2         db  0x42 ; 'B'
00000000000263c3         db  0x0e ; '.'
00000000000263c4         db  0x18 ; '.'
00000000000263c5         db  0x8e ; '.'
00000000000263c6         db  0x03 ; '.'
00000000000263c7         db  0x42 ; 'B'
00000000000263c8         db  0x0e ; '.'
00000000000263c9         db  0x20 ; ' '
00000000000263ca         db  0x8d ; '.'
00000000000263cb         db  0x04 ; '.'
00000000000263cc         db  0x42 ; 'B'
00000000000263cd         db  0x0e ; '.'
00000000000263ce         db  0x28 ; '('
00000000000263cf         db  0x8c ; '.'
00000000000263d0         db  0x05 ; '.'
00000000000263d1         db  0x41 ; 'A'
00000000000263d2         db  0x0e ; '.'
00000000000263d3         db  0x30 ; '0'
00000000000263d4         db  0x86 ; '.'
00000000000263d5         db  0x06 ; '.'
00000000000263d6         db  0x41 ; 'A'
00000000000263d7         db  0x0e ; '.'
00000000000263d8         db  0x38 ; '8'
00000000000263d9         db  0x83 ; '.'
00000000000263da         db  0x07 ; '.'
00000000000263db         db  0x44 ; 'D'
00000000000263dc         db  0x0e ; '.'
00000000000263dd         db  0x40 ; '@'
00000000000263de         db  0x03 ; '.'
00000000000263df         db  0x85 ; '.'
00000000000263e0         db  0x01 ; '.'
00000000000263e1         db  0x0a ; '.'
00000000000263e2         db  0x0e ; '.'
00000000000263e3         db  0x38 ; '8'
00000000000263e4         db  0x44 ; 'D'
00000000000263e5         db  0x0e ; '.'
00000000000263e6         db  0x30 ; '0'
00000000000263e7         db  0x41 ; 'A'
00000000000263e8         db  0x0e ; '.'
00000000000263e9         db  0x28 ; '('
00000000000263ea         db  0x42 ; 'B'
00000000000263eb         db  0x0e ; '.'
00000000000263ec         db  0x20 ; ' '
00000000000263ed         db  0x42 ; 'B'
00000000000263ee         db  0x0e ; '.'
00000000000263ef         db  0x18 ; '.'
00000000000263f0         db  0x42 ; 'B'
00000000000263f1         db  0x0e ; '.'
00000000000263f2         db  0x10 ; '.'
00000000000263f3         db  0x42 ; 'B'
00000000000263f4         db  0x0e ; '.'
00000000000263f5         db  0x08 ; '.'
00000000000263f6         db  0x48 ; 'H'
00000000000263f7         db  0x0b ; '.'
00000000000263f8         dd         0x00000048                                  ; Length of the record
00000000000263fc         dd         0x000029d4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026400         db         0xb0, 0xda, 0xfe, 0xff                      ; begin 0x13eb0
0000000000026404         db         0xdc, 3 dup (0x00)                          ; length 0xdc (end at 0x13f8c)
0000000000026408         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026409         db  0x42 ; 'B'
000000000002640a         db  0x0e ; '.'
000000000002640b         db  0x10 ; '.'
000000000002640c         db  0x8f ; '.'
000000000002640d         db  0x02 ; '.'
000000000002640e         db  0x42 ; 'B'
000000000002640f         db  0x0e ; '.'
0000000000026410         db  0x18 ; '.'
0000000000026411         db  0x8e ; '.'
0000000000026412         db  0x03 ; '.'
0000000000026413         db  0x42 ; 'B'
0000000000026414         db  0x0e ; '.'
0000000000026415         db  0x20 ; ' '
0000000000026416         db  0x8d ; '.'
0000000000026417         db  0x04 ; '.'
0000000000026418         db  0x42 ; 'B'
0000000000026419         db  0x0e ; '.'
000000000002641a         db  0x28 ; '('
000000000002641b         db  0x8c ; '.'
000000000002641c         db  0x05 ; '.'
000000000002641d         db  0x41 ; 'A'
000000000002641e         db  0x0e ; '.'
000000000002641f         db  0x30 ; '0'
0000000000026420         db  0x86 ; '.'
0000000000026421         db  0x06 ; '.'
0000000000026422         db  0x41 ; 'A'
0000000000026423         db  0x0e ; '.'
0000000000026424         db  0x38 ; '8'
0000000000026425         db  0x83 ; '.'
0000000000026426         db  0x07 ; '.'
0000000000026427         db  0x44 ; 'D'
0000000000026428         db  0x0e ; '.'
0000000000026429         db  0x80 ; '.'
000000000002642a         db  0x01 ; '.'
000000000002642b         db  0x02 ; '.'
000000000002642c         db  0xbe ; '.'
000000000002642d         db  0x0a ; '.'
000000000002642e         db  0x0e ; '.'
000000000002642f         db  0x38 ; '8'
0000000000026430         db  0x41 ; 'A'
0000000000026431         db  0x0e ; '.'
0000000000026432         db  0x30 ; '0'
0000000000026433         db  0x41 ; 'A'
0000000000026434         db  0x0e ; '.'
0000000000026435         db  0x28 ; '('
0000000000026436         db  0x42 ; 'B'
0000000000026437         db  0x0e ; '.'
0000000000026438         db  0x20 ; ' '
0000000000026439         db  0x42 ; 'B'
000000000002643a         db  0x0e ; '.'
000000000002643b         db  0x18 ; '.'
000000000002643c         db  0x42 ; 'B'
000000000002643d         db  0x0e ; '.'
000000000002643e         db  0x10 ; '.'
000000000002643f         db  0x42 ; 'B'
0000000000026440         db  0x0e ; '.'
0000000000026441         db  0x08 ; '.'
0000000000026442         db  0x41 ; 'A'
0000000000026443         db  0x0b ; '.'
0000000000026444         dd         0x00000048                                  ; Length of the record
0000000000026448         dd         0x00002a20                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002644c         db         0x44, 0xdb, 0xfe, 0xff                      ; begin 0x13f90
0000000000026450         db         0x9e, 0x03, 2 dup (0x00)                    ; length 0x39e (end at 0x1432e)
0000000000026454         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026455         db  0x42 ; 'B'
0000000000026456         db  0x0e ; '.'
0000000000026457         db  0x10 ; '.'
0000000000026458         db  0x8f ; '.'
0000000000026459         db  0x02 ; '.'
000000000002645a         db  0x42 ; 'B'
000000000002645b         db  0x0e ; '.'
000000000002645c         db  0x18 ; '.'
000000000002645d         db  0x8e ; '.'
000000000002645e         db  0x03 ; '.'
000000000002645f         db  0x42 ; 'B'
0000000000026460         db  0x0e ; '.'
0000000000026461         db  0x20 ; ' '
0000000000026462         db  0x8d ; '.'
0000000000026463         db  0x04 ; '.'
0000000000026464         db  0x42 ; 'B'
0000000000026465         db  0x0e ; '.'
0000000000026466         db  0x28 ; '('
0000000000026467         db  0x8c ; '.'
0000000000026468         db  0x05 ; '.'
0000000000026469         db  0x44 ; 'D'
000000000002646a         db  0x0e ; '.'
000000000002646b         db  0x30 ; '0'
000000000002646c         db  0x86 ; '.'
000000000002646d         db  0x06 ; '.'
000000000002646e         db  0x41 ; 'A'
000000000002646f         db  0x0e ; '.'
0000000000026470         db  0x38 ; '8'
0000000000026471         db  0x83 ; '.'
0000000000026472         db  0x07 ; '.'
0000000000026473         db  0x4c ; 'L'
0000000000026474         db  0x0e ; '.'
0000000000026475         db  0xb0 ; '.'
0000000000026476         db  0x01 ; '.'
0000000000026477         db  0x02 ; '.'
0000000000026478         db  0xbe ; '.'
0000000000026479         db  0x0a ; '.'
000000000002647a         db  0x0e ; '.'
000000000002647b         db  0x38 ; '8'
000000000002647c         db  0x41 ; 'A'
000000000002647d         db  0x0e ; '.'
000000000002647e         db  0x30 ; '0'
000000000002647f         db  0x41 ; 'A'
0000000000026480         db  0x0e ; '.'
0000000000026481         db  0x28 ; '('
0000000000026482         db  0x42 ; 'B'
0000000000026483         db  0x0e ; '.'
0000000000026484         db  0x20 ; ' '
0000000000026485         db  0x42 ; 'B'
0000000000026486         db  0x0e ; '.'
0000000000026487         db  0x18 ; '.'
0000000000026488         db  0x42 ; 'B'
0000000000026489         db  0x0e ; '.'
000000000002648a         db  0x10 ; '.'
000000000002648b         db  0x42 ; 'B'
000000000002648c         db  0x0e ; '.'
000000000002648d         db  0x08 ; '.'
000000000002648e         db  0x47 ; 'G'
000000000002648f         db  0x0b ; '.'
0000000000026490         dd         0x00000048                                  ; Length of the record
0000000000026494         dd         0x00002a6c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026498         db         0x98, 0xde, 0xfe, 0xff                      ; begin 0x14330
000000000002649c         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0x14471)
00000000000264a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000264a1         db  0x42 ; 'B'
00000000000264a2         db  0x0e ; '.'
00000000000264a3         db  0x10 ; '.'
00000000000264a4         db  0x8f ; '.'
00000000000264a5         db  0x02 ; '.'
00000000000264a6         db  0x42 ; 'B'
00000000000264a7         db  0x0e ; '.'
00000000000264a8         db  0x18 ; '.'
00000000000264a9         db  0x8e ; '.'
00000000000264aa         db  0x03 ; '.'
00000000000264ab         db  0x42 ; 'B'
00000000000264ac         db  0x0e ; '.'
00000000000264ad         db  0x20 ; ' '
00000000000264ae         db  0x8d ; '.'
00000000000264af         db  0x04 ; '.'
00000000000264b0         db  0x42 ; 'B'
00000000000264b1         db  0x0e ; '.'
00000000000264b2         db  0x28 ; '('
00000000000264b3         db  0x8c ; '.'
00000000000264b4         db  0x05 ; '.'
00000000000264b5         db  0x41 ; 'A'
00000000000264b6         db  0x0e ; '.'
00000000000264b7         db  0x30 ; '0'
00000000000264b8         db  0x86 ; '.'
00000000000264b9         db  0x06 ; '.'
00000000000264ba         db  0x41 ; 'A'
00000000000264bb         db  0x0e ; '.'
00000000000264bc         db  0x38 ; '8'
00000000000264bd         db  0x83 ; '.'
00000000000264be         db  0x07 ; '.'
00000000000264bf         db  0x44 ; 'D'
00000000000264c0         db  0x0e ; '.'
00000000000264c1         db  0x60 ; '`'
00000000000264c2         db  0x02 ; '.'
00000000000264c3         db  0xd8 ; '.'
00000000000264c4         db  0x0a ; '.'
00000000000264c5         db  0x0e ; '.'
00000000000264c6         db  0x38 ; '8'
00000000000264c7         db  0x41 ; 'A'
00000000000264c8         db  0x0e ; '.'
00000000000264c9         db  0x30 ; '0'
00000000000264ca         db  0x41 ; 'A'
00000000000264cb         db  0x0e ; '.'
00000000000264cc         db  0x28 ; '('
00000000000264cd         db  0x42 ; 'B'
00000000000264ce         db  0x0e ; '.'
00000000000264cf         db  0x20 ; ' '
00000000000264d0         db  0x42 ; 'B'
00000000000264d1         db  0x0e ; '.'
00000000000264d2         db  0x18 ; '.'
00000000000264d3         db  0x42 ; 'B'
00000000000264d4         db  0x0e ; '.'
00000000000264d5         db  0x10 ; '.'
00000000000264d6         db  0x42 ; 'B'
00000000000264d7         db  0x0e ; '.'
00000000000264d8         db  0x08 ; '.'
00000000000264d9         db  0x41 ; 'A'
00000000000264da         db  0x0b ; '.'
00000000000264db         db  0x00 ; '.'
00000000000264dc         dd         0x00000040                                  ; Length of the record
00000000000264e0         dd         0x00002ab8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000264e4         db         0x9c, 0xdf, 0xfe, 0xff                      ; begin 0x14480
00000000000264e8         db         0xe6, 3 dup (0x00)                          ; length 0xe6 (end at 0x14566)
00000000000264ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000264ed         db  0x41 ; 'A'
00000000000264ee         db  0x0e ; '.'
00000000000264ef         db  0x10 ; '.'
00000000000264f0         db  0x86 ; '.'
00000000000264f1         db  0x02 ; '.'
00000000000264f2         db  0x41 ; 'A'
00000000000264f3         db  0x0e ; '.'
00000000000264f4         db  0x18 ; '.'
00000000000264f5         db  0x83 ; '.'
00000000000264f6         db  0x03 ; '.'
00000000000264f7         db  0x47 ; 'G'
00000000000264f8         db  0x0e ; '.'
00000000000264f9         db  0x20 ; ' '
00000000000264fa         db  0x02 ; '.'
00000000000264fb         db  0x4d ; 'M'
00000000000264fc         db  0x0a ; '.'
00000000000264fd         db  0x0e ; '.'
00000000000264fe         db  0x18 ; '.'
00000000000264ff         db  0x41 ; 'A'
0000000000026500         db  0x0e ; '.'
0000000000026501         db  0x10 ; '.'
0000000000026502         db  0x41 ; 'A'
0000000000026503         db  0x0e ; '.'
0000000000026504         db  0x08 ; '.'
0000000000026505         db  0x48 ; 'H'
0000000000026506         db  0x0b ; '.'
0000000000026507         db  0x47 ; 'G'
0000000000026508         db  0x0a ; '.'
0000000000026509         db  0x0e ; '.'
000000000002650a         db  0x18 ; '.'
000000000002650b         db  0x41 ; 'A'
000000000002650c         db  0x0e ; '.'
000000000002650d         db  0x10 ; '.'
000000000002650e         db  0x41 ; 'A'
000000000002650f         db  0x0e ; '.'
0000000000026510         db  0x08 ; '.'
0000000000026511         db  0x47 ; 'G'
0000000000026512         db  0x0b ; '.'
0000000000026513         db  0x7c ; '|'
0000000000026514         db  0x0a ; '.'
0000000000026515         db  0x0e ; '.'
0000000000026516         db  0x18 ; '.'
0000000000026517         db  0x43 ; 'C'
0000000000026518         db  0x0e ; '.'
0000000000026519         db  0x10 ; '.'
000000000002651a         db  0x41 ; 'A'
000000000002651b         db  0x0e ; '.'
000000000002651c         db  0x08 ; '.'
000000000002651d         db  0x48 ; 'H'
000000000002651e         db  0x0b ; '.'
000000000002651f         db  0x00 ; '.'
0000000000026520         dd         0x00000024                                  ; Length of the record
0000000000026524         dd         0x00002afc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026528         db         0x48, 0xe0, 0xfe, 0xff                      ; begin 0x14570
000000000002652c         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x14680)
0000000000026530         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026531         db  0x02 ; '.'
0000000000026532         db  0x51 ; 'Q'
0000000000026533         db  0x0e ; '.'
0000000000026534         db  0x10 ; '.'
0000000000026535         db  0x83 ; '.'
0000000000026536         db  0x02 ; '.'
0000000000026537         db  0x02 ; '.'
0000000000026538         db  0x5c ; '\'
0000000000026539         db  0x0e ; '.'
000000000002653a         db  0x08 ; '.'
000000000002653b         db  0x43 ; 'C'
000000000002653c         db  0xc3 ; '.'
000000000002653d         db  0x78 ; 'x'
000000000002653e         db  0x0e ; '.'
000000000002653f         db  0x10 ; '.'
0000000000026540         db  0x83 ; '.'
0000000000026541         db  0x02 ; '.'
0000000000026542         db  0x4c ; 'L'
0000000000026543         db  0x0e ; '.'
0000000000026544         db  0x08 ; '.'
0000000000026545         db  0x44 ; 'D'
0000000000026546         db  0xc3 ; '.'
0000000000026547         db  0x00 ; '.'
0000000000026548         dd         0x00000034                                  ; Length of the record
000000000002654c         dd         0x00002b24                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026550         db         0x30, 0xe1, 0xfe, 0xff                      ; begin 0x14680
0000000000026554         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0x1474f)
0000000000026558         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026559         db  0x42 ; 'B'
000000000002655a         db  0x0e ; '.'
000000000002655b         db  0x10 ; '.'
000000000002655c         db  0x8c ; '.'
000000000002655d         db  0x02 ; '.'
000000000002655e         db  0x44 ; 'D'
000000000002655f         db  0x0e ; '.'
0000000000026560         db  0x18 ; '.'
0000000000026561         db  0x86 ; '.'
0000000000026562         db  0x03 ; '.'
0000000000026563         db  0x41 ; 'A'
0000000000026564         db  0x0e ; '.'
0000000000026565         db  0x20 ; ' '
0000000000026566         db  0x83 ; '.'
0000000000026567         db  0x04 ; '.'
0000000000026568         db  0x02 ; '.'
0000000000026569         db  0x9f ; '.'
000000000002656a         db  0x0a ; '.'
000000000002656b         db  0x0e ; '.'
000000000002656c         db  0x18 ; '.'
000000000002656d         db  0x41 ; 'A'
000000000002656e         db  0x0e ; '.'
000000000002656f         db  0x10 ; '.'
0000000000026570         db  0x42 ; 'B'
0000000000026571         db  0x0e ; '.'
0000000000026572         db  0x08 ; '.'
0000000000026573         db  0x47 ; 'G'
0000000000026574         db  0x0b ; '.'
0000000000026575         db  0x59 ; 'Y'
0000000000026576         db  0x0e ; '.'
0000000000026577         db  0x18 ; '.'
0000000000026578         db  0x43 ; 'C'
0000000000026579         db  0x0e ; '.'
000000000002657a         db  0x10 ; '.'
000000000002657b         db  0x42 ; 'B'
000000000002657c         db  0x0e ; '.'
000000000002657d         db  0x08 ; '.'
000000000002657e         db  0x00 ; '.'
000000000002657f         db  0x00 ; '.'
0000000000026580         dd         0x0000004c                                  ; Length of the record
0000000000026584         dd         0x00002b5c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026588         db         0xc8, 0xe1, 0xfe, 0xff                      ; begin 0x14750
000000000002658c         db         0x9f, 0x07, 2 dup (0x00)                    ; length 0x79f (end at 0x14eef)
0000000000026590         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026591         db  0x42 ; 'B'
0000000000026592         db  0x0e ; '.'
0000000000026593         db  0x10 ; '.'
0000000000026594         db  0x8f ; '.'
0000000000026595         db  0x02 ; '.'
0000000000026596         db  0x42 ; 'B'
0000000000026597         db  0x0e ; '.'
0000000000026598         db  0x18 ; '.'
0000000000026599         db  0x8e ; '.'
000000000002659a         db  0x03 ; '.'
000000000002659b         db  0x45 ; 'E'
000000000002659c         db  0x0e ; '.'
000000000002659d         db  0x20 ; ' '
000000000002659e         db  0x8d ; '.'
000000000002659f         db  0x04 ; '.'
00000000000265a0         db  0x42 ; 'B'
00000000000265a1         db  0x0e ; '.'
00000000000265a2         db  0x28 ; '('
00000000000265a3         db  0x8c ; '.'
00000000000265a4         db  0x05 ; '.'
00000000000265a5         db  0x44 ; 'D'
00000000000265a6         db  0x0e ; '.'
00000000000265a7         db  0x30 ; '0'
00000000000265a8         db  0x86 ; '.'
00000000000265a9         db  0x06 ; '.'
00000000000265aa         db  0x41 ; 'A'
00000000000265ab         db  0x0e ; '.'
00000000000265ac         db  0x38 ; '8'
00000000000265ad         db  0x83 ; '.'
00000000000265ae         db  0x07 ; '.'
00000000000265af         db  0x4a ; 'J'
00000000000265b0         db  0x0e ; '.'
00000000000265b1         db  0x80 ; '.'
00000000000265b2         db  0x01 ; '.'
00000000000265b3         db  0x03 ; '.'
00000000000265b4         db  0x3b ; ';'
00000000000265b5         db  0x01 ; '.'
00000000000265b6         db  0x0a ; '.'
00000000000265b7         db  0x0e ; '.'
00000000000265b8         db  0x38 ; '8'
00000000000265b9         db  0x41 ; 'A'
00000000000265ba         db  0x0e ; '.'
00000000000265bb         db  0x30 ; '0'
00000000000265bc         db  0x41 ; 'A'
00000000000265bd         db  0x0e ; '.'
00000000000265be         db  0x28 ; '('
00000000000265bf         db  0x42 ; 'B'
00000000000265c0         db  0x0e ; '.'
00000000000265c1         db  0x20 ; ' '
00000000000265c2         db  0x42 ; 'B'
00000000000265c3         db  0x0e ; '.'
00000000000265c4         db  0x18 ; '.'
00000000000265c5         db  0x42 ; 'B'
00000000000265c6         db  0x0e ; '.'
00000000000265c7         db  0x10 ; '.'
00000000000265c8         db  0x42 ; 'B'
00000000000265c9         db  0x0e ; '.'
00000000000265ca         db  0x08 ; '.'
00000000000265cb         db  0x41 ; 'A'
00000000000265cc         db  0x0b ; '.'
00000000000265cd         db  0x00 ; '.'
00000000000265ce         db  0x00 ; '.'
00000000000265cf         db  0x00 ; '.'
00000000000265d0         dd         0x0000004c                                  ; Length of the record
00000000000265d4         dd         0x00002bac                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000265d8         db         0x18, 0xe9, 0xfe, 0xff                      ; begin 0x14ef0
00000000000265dc         db         0x3b, 0x02, 2 dup (0x00)                    ; length 0x23b (end at 0x1512b)
00000000000265e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000265e1         db  0x42 ; 'B'
00000000000265e2         db  0x0e ; '.'
00000000000265e3         db  0x10 ; '.'
00000000000265e4         db  0x8f ; '.'
00000000000265e5         db  0x02 ; '.'
00000000000265e6         db  0x42 ; 'B'
00000000000265e7         db  0x0e ; '.'
00000000000265e8         db  0x18 ; '.'
00000000000265e9         db  0x8e ; '.'
00000000000265ea         db  0x03 ; '.'
00000000000265eb         db  0x45 ; 'E'
00000000000265ec         db  0x0e ; '.'
00000000000265ed         db  0x20 ; ' '
00000000000265ee         db  0x8d ; '.'
00000000000265ef         db  0x04 ; '.'
00000000000265f0         db  0x42 ; 'B'
00000000000265f1         db  0x0e ; '.'
00000000000265f2         db  0x28 ; '('
00000000000265f3         db  0x8c ; '.'
00000000000265f4         db  0x05 ; '.'
00000000000265f5         db  0x45 ; 'E'
00000000000265f6         db  0x0e ; '.'
00000000000265f7         db  0x30 ; '0'
00000000000265f8         db  0x86 ; '.'
00000000000265f9         db  0x06 ; '.'
00000000000265fa         db  0x41 ; 'A'
00000000000265fb         db  0x0e ; '.'
00000000000265fc         db  0x38 ; '8'
00000000000265fd         db  0x83 ; '.'
00000000000265fe         db  0x07 ; '.'
00000000000265ff         db  0x48 ; 'H'
0000000000026600         db  0x0e ; '.'
0000000000026601         db  0x80 ; '.'
0000000000026602         db  0x01 ; '.'
0000000000026603         db  0x03 ; '.'
0000000000026604         db  0xf3 ; '.'
0000000000026605         db  0x01 ; '.'
0000000000026606         db  0x0a ; '.'
0000000000026607         db  0x0e ; '.'
0000000000026608         db  0x38 ; '8'
0000000000026609         db  0x41 ; 'A'
000000000002660a         db  0x0e ; '.'
000000000002660b         db  0x30 ; '0'
000000000002660c         db  0x41 ; 'A'
000000000002660d         db  0x0e ; '.'
000000000002660e         db  0x28 ; '('
000000000002660f         db  0x42 ; 'B'
0000000000026610         db  0x0e ; '.'
0000000000026611         db  0x20 ; ' '
0000000000026612         db  0x42 ; 'B'
0000000000026613         db  0x0e ; '.'
0000000000026614         db  0x18 ; '.'
0000000000026615         db  0x42 ; 'B'
0000000000026616         db  0x0e ; '.'
0000000000026617         db  0x10 ; '.'
0000000000026618         db  0x42 ; 'B'
0000000000026619         db  0x0e ; '.'
000000000002661a         db  0x08 ; '.'
000000000002661b         db  0x4a ; 'J'
000000000002661c         db  0x0b ; '.'
000000000002661d         db  0x00 ; '.'
000000000002661e         db  0x00 ; '.'
000000000002661f         db  0x00 ; '.'
0000000000026620         dd         0x0000004c                                  ; Length of the record
0000000000026624         dd         0x00002bfc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026628         db         0x08, 0xeb, 0xfe, 0xff                      ; begin 0x15130
000000000002662c         db         0x91, 0x0b, 2 dup (0x00)                    ; length 0xb91 (end at 0x15cc1)
0000000000026630         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026631         db  0x42 ; 'B'
0000000000026632         db  0x0e ; '.'
0000000000026633         db  0x10 ; '.'
0000000000026634         db  0x8f ; '.'
0000000000026635         db  0x02 ; '.'
0000000000026636         db  0x42 ; 'B'
0000000000026637         db  0x0e ; '.'
0000000000026638         db  0x18 ; '.'
0000000000026639         db  0x8e ; '.'
000000000002663a         db  0x03 ; '.'
000000000002663b         db  0x45 ; 'E'
000000000002663c         db  0x0e ; '.'
000000000002663d         db  0x20 ; ' '
000000000002663e         db  0x8d ; '.'
000000000002663f         db  0x04 ; '.'
0000000000026640         db  0x42 ; 'B'
0000000000026641         db  0x0e ; '.'
0000000000026642         db  0x28 ; '('
0000000000026643         db  0x8c ; '.'
0000000000026644         db  0x05 ; '.'
0000000000026645         db  0x46 ; 'F'
0000000000026646         db  0x0e ; '.'
0000000000026647         db  0x30 ; '0'
0000000000026648         db  0x86 ; '.'
0000000000026649         db  0x06 ; '.'
000000000002664a         db  0x41 ; 'A'
000000000002664b         db  0x0e ; '.'
000000000002664c         db  0x38 ; '8'
000000000002664d         db  0x83 ; '.'
000000000002664e         db  0x07 ; '.'
000000000002664f         db  0x47 ; 'G'
0000000000026650         db  0x0e ; '.'
0000000000026651         db  0xc0 ; '.'
0000000000026652         db  0x02 ; '.'
0000000000026653         db  0x03 ; '.'
0000000000026654         db  0x17 ; '.'
0000000000026655         db  0x04 ; '.'
0000000000026656         db  0x0a ; '.'
0000000000026657         db  0x0e ; '.'
0000000000026658         db  0x38 ; '8'
0000000000026659         db  0x41 ; 'A'
000000000002665a         db  0x0e ; '.'
000000000002665b         db  0x30 ; '0'
000000000002665c         db  0x41 ; 'A'
000000000002665d         db  0x0e ; '.'
000000000002665e         db  0x28 ; '('
000000000002665f         db  0x42 ; 'B'
0000000000026660         db  0x0e ; '.'
0000000000026661         db  0x20 ; ' '
0000000000026662         db  0x42 ; 'B'
0000000000026663         db  0x0e ; '.'
0000000000026664         db  0x18 ; '.'
0000000000026665         db  0x42 ; 'B'
0000000000026666         db  0x0e ; '.'
0000000000026667         db  0x10 ; '.'
0000000000026668         db  0x42 ; 'B'
0000000000026669         db  0x0e ; '.'
000000000002666a         db  0x08 ; '.'
000000000002666b         db  0x46 ; 'F'
000000000002666c         db  0x0b ; '.'
000000000002666d         db  0x00 ; '.'
000000000002666e         db  0x00 ; '.'
000000000002666f         db  0x00 ; '.'
0000000000026670         dd         0x00000030                                  ; Length of the record
0000000000026674         dd         0x00002c4c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026678         db         0x58, 0xf6, 0xfe, 0xff                      ; begin 0x15cd0
000000000002667c         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0x15d57)
0000000000026680         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026681         db  0x47 ; 'G'
0000000000026682         db  0x0e ; '.'
0000000000026683         db  0x10 ; '.'
0000000000026684         db  0x86 ; '.'
0000000000026685         db  0x02 ; '.'
0000000000026686         db  0x41 ; 'A'
0000000000026687         db  0x0e ; '.'
0000000000026688         db  0x18 ; '.'
0000000000026689         db  0x83 ; '.'
000000000002668a         db  0x03 ; '.'
000000000002668b         db  0x4a ; 'J'
000000000002668c         db  0x0e ; '.'
000000000002668d         db  0x20 ; ' '
000000000002668e         db  0x02 ; '.'
000000000002668f         db  0x4e ; 'N'
0000000000026690         db  0x0e ; '.'
0000000000026691         db  0x18 ; '.'
0000000000026692         db  0x41 ; 'A'
0000000000026693         db  0x0e ; '.'
0000000000026694         db  0x10 ; '.'
0000000000026695         db  0x41 ; 'A'
0000000000026696         db  0x0e ; '.'
0000000000026697         db  0x08 ; '.'
0000000000026698         db  0x46 ; 'F'
0000000000026699         db  0xc3 ; '.'
000000000002669a         db  0xc6 ; '.'
000000000002669b         db  0x58 ; 'X'
000000000002669c         db  0x0e ; '.'
000000000002669d         db  0x20 ; ' '
000000000002669e         db  0x83 ; '.'
000000000002669f         db  0x03 ; '.'
00000000000266a0         db  0x86 ; '.'
00000000000266a1         db  0x02 ; '.'
00000000000266a2         db  0x00 ; '.'
00000000000266a3         db  0x00 ; '.'
00000000000266a4         dd         0x00000028                                  ; Length of the record
00000000000266a8         dd         0x00002c80                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000266ac         db         0xb4, 0xf6, 0xfe, 0xff                      ; begin 0x15d60
00000000000266b0         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x15daf)
00000000000266b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000266b5         db  0x42 ; 'B'
00000000000266b6         db  0x0e ; '.'
00000000000266b7         db  0x10 ; '.'
00000000000266b8         db  0x8c ; '.'
00000000000266b9         db  0x02 ; '.'
00000000000266ba         db  0x41 ; 'A'
00000000000266bb         db  0x0e ; '.'
00000000000266bc         db  0x18 ; '.'
00000000000266bd         db  0x86 ; '.'
00000000000266be         db  0x03 ; '.'
00000000000266bf         db  0x44 ; 'D'
00000000000266c0         db  0x0e ; '.'
00000000000266c1         db  0x20 ; ' '
00000000000266c2         db  0x83 ; '.'
00000000000266c3         db  0x04 ; '.'
00000000000266c4         db  0x7c ; '|'
00000000000266c5         db  0x0e ; '.'
00000000000266c6         db  0x18 ; '.'
00000000000266c7         db  0x45 ; 'E'
00000000000266c8         db  0x0e ; '.'
00000000000266c9         db  0x10 ; '.'
00000000000266ca         db  0x42 ; 'B'
00000000000266cb         db  0x0e ; '.'
00000000000266cc         db  0x08 ; '.'
00000000000266cd         db  0x00 ; '.'
00000000000266ce         db  0x00 ; '.'
00000000000266cf         db  0x00 ; '.'
00000000000266d0         dd         0x0000002c                                  ; Length of the record
00000000000266d4         dd         0x00002cac                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000266d8         db         0xd8, 0xf6, 0xfe, 0xff                      ; begin 0x15db0
00000000000266dc         db         0x94, 3 dup (0x00)                          ; length 0x94 (end at 0x15e44)
00000000000266e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000266e1         db  0x42 ; 'B'
00000000000266e2         db  0x0e ; '.'
00000000000266e3         db  0x10 ; '.'
00000000000266e4         db  0x8c ; '.'
00000000000266e5         db  0x02 ; '.'
00000000000266e6         db  0x41 ; 'A'
00000000000266e7         db  0x0e ; '.'
00000000000266e8         db  0x18 ; '.'
00000000000266e9         db  0x86 ; '.'
00000000000266ea         db  0x03 ; '.'
00000000000266eb         db  0x41 ; 'A'
00000000000266ec         db  0x0e ; '.'
00000000000266ed         db  0x20 ; ' '
00000000000266ee         db  0x83 ; '.'
00000000000266ef         db  0x04 ; '.'
00000000000266f0         db  0x02 ; '.'
00000000000266f1         db  0x6d ; 'm'
00000000000266f2         db  0x0a ; '.'
00000000000266f3         db  0x0e ; '.'
00000000000266f4         db  0x18 ; '.'
00000000000266f5         db  0x41 ; 'A'
00000000000266f6         db  0x0e ; '.'
00000000000266f7         db  0x10 ; '.'
00000000000266f8         db  0x42 ; 'B'
00000000000266f9         db  0x0e ; '.'
00000000000266fa         db  0x08 ; '.'
00000000000266fb         db  0x41 ; 'A'
00000000000266fc         db  0x0b ; '.'
00000000000266fd         db  0x00 ; '.'
00000000000266fe         db  0x00 ; '.'
00000000000266ff         db  0x00 ; '.'
0000000000026700         dd         0x00000030                                  ; Length of the record
0000000000026704         dd         0x00002cdc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026708         db         0x48, 0xf7, 0xfe, 0xff                      ; begin 0x15e50
000000000002670c         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0x15e9c)
0000000000026710         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026711         db  0x41 ; 'A'
0000000000026712         db  0x0e ; '.'
0000000000026713         db  0x10 ; '.'
0000000000026714         db  0x86 ; '.'
0000000000026715         db  0x02 ; '.'
0000000000026716         db  0x41 ; 'A'
0000000000026717         db  0x0e ; '.'
0000000000026718         db  0x18 ; '.'
0000000000026719         db  0x83 ; '.'
000000000002671a         db  0x03 ; '.'
000000000002671b         db  0x4d ; 'M'
000000000002671c         db  0x0e ; '.'
000000000002671d         db  0x20 ; ' '
000000000002671e         db  0x67 ; 'g'
000000000002671f         db  0x0a ; '.'
0000000000026720         db  0x0e ; '.'
0000000000026721         db  0x18 ; '.'
0000000000026722         db  0x43 ; 'C'
0000000000026723         db  0x0e ; '.'
0000000000026724         db  0x10 ; '.'
0000000000026725         db  0x41 ; 'A'
0000000000026726         db  0x0e ; '.'
0000000000026727         db  0x08 ; '.'
0000000000026728         db  0x46 ; 'F'
0000000000026729         db  0x0b ; '.'
000000000002672a         db  0x44 ; 'D'
000000000002672b         db  0x0e ; '.'
000000000002672c         db  0x18 ; '.'
000000000002672d         db  0x46 ; 'F'
000000000002672e         db  0x0e ; '.'
000000000002672f         db  0x10 ; '.'
0000000000026730         db  0x41 ; 'A'
0000000000026731         db  0x0e ; '.'
0000000000026732         db  0x08 ; '.'
0000000000026733         db  0x00 ; '.'
0000000000026734         dd         0x00000040                                  ; Length of the record
0000000000026738         dd         0x00002d10                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002673c         db         0x64, 0xf7, 0xfe, 0xff                      ; begin 0x15ea0
0000000000026740         db         0x0d, 0x08, 2 dup (0x00)                    ; length 0x80d (end at 0x166ad)
0000000000026744         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026745         db  0x42 ; 'B'
0000000000026746         db  0x0e ; '.'
0000000000026747         db  0x10 ; '.'
0000000000026748         db  0x8e ; '.'
0000000000026749         db  0x02 ; '.'
000000000002674a         db  0x42 ; 'B'
000000000002674b         db  0x0e ; '.'
000000000002674c         db  0x18 ; '.'
000000000002674d         db  0x8d ; '.'
000000000002674e         db  0x03 ; '.'
000000000002674f         db  0x45 ; 'E'
0000000000026750         db  0x0e ; '.'
0000000000026751         db  0x20 ; ' '
0000000000026752         db  0x8c ; '.'
0000000000026753         db  0x04 ; '.'
0000000000026754         db  0x41 ; 'A'
0000000000026755         db  0x0e ; '.'
0000000000026756         db  0x28 ; '('
0000000000026757         db  0x86 ; '.'
0000000000026758         db  0x05 ; '.'
0000000000026759         db  0x44 ; 'D'
000000000002675a         db  0x0e ; '.'
000000000002675b         db  0x30 ; '0'
000000000002675c         db  0x83 ; '.'
000000000002675d         db  0x06 ; '.'
000000000002675e         db  0x4a ; 'J'
000000000002675f         db  0x0e ; '.'
0000000000026760         db  0x40 ; '@'
0000000000026761         db  0x02 ; '.'
0000000000026762         db  0xd2 ; '.'
0000000000026763         db  0x0a ; '.'
0000000000026764         db  0x0e ; '.'
0000000000026765         db  0x30 ; '0'
0000000000026766         db  0x41 ; 'A'
0000000000026767         db  0x0e ; '.'
0000000000026768         db  0x28 ; '('
0000000000026769         db  0x41 ; 'A'
000000000002676a         db  0x0e ; '.'
000000000002676b         db  0x20 ; ' '
000000000002676c         db  0x42 ; 'B'
000000000002676d         db  0x0e ; '.'
000000000002676e         db  0x18 ; '.'
000000000002676f         db  0x42 ; 'B'
0000000000026770         db  0x0e ; '.'
0000000000026771         db  0x10 ; '.'
0000000000026772         db  0x42 ; 'B'
0000000000026773         db  0x0e ; '.'
0000000000026774         db  0x08 ; '.'
0000000000026775         db  0x46 ; 'F'
0000000000026776         db  0x0b ; '.'
0000000000026777         db  0x00 ; '.'
0000000000026778         dd         0x0000005c                                  ; Length of the record
000000000002677c         dd         0x00002d54                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026780         db         0x30, 0xff, 0xfe, 0xff                      ; begin 0x166b0
0000000000026784         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0x1691a)
0000000000026788         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026789         db  0x42 ; 'B'
000000000002678a         db  0x0e ; '.'
000000000002678b         db  0x10 ; '.'
000000000002678c         db  0x8f ; '.'
000000000002678d         db  0x02 ; '.'
000000000002678e         db  0x42 ; 'B'
000000000002678f         db  0x0e ; '.'
0000000000026790         db  0x18 ; '.'
0000000000026791         db  0x8e ; '.'
0000000000026792         db  0x03 ; '.'
0000000000026793         db  0x45 ; 'E'
0000000000026794         db  0x0e ; '.'
0000000000026795         db  0x20 ; ' '
0000000000026796         db  0x8d ; '.'
0000000000026797         db  0x04 ; '.'
0000000000026798         db  0x42 ; 'B'
0000000000026799         db  0x0e ; '.'
000000000002679a         db  0x28 ; '('
000000000002679b         db  0x8c ; '.'
000000000002679c         db  0x05 ; '.'
000000000002679d         db  0x44 ; 'D'
000000000002679e         db  0x0e ; '.'
000000000002679f         db  0x30 ; '0'
00000000000267a0         db  0x86 ; '.'
00000000000267a1         db  0x06 ; '.'
00000000000267a2         db  0x41 ; 'A'
00000000000267a3         db  0x0e ; '.'
00000000000267a4         db  0x38 ; '8'
00000000000267a5         db  0x83 ; '.'
00000000000267a6         db  0x07 ; '.'
00000000000267a7         db  0x4f ; 'O'
00000000000267a8         db  0x0e ; '.'
00000000000267a9         db  0x90 ; '.'
00000000000267aa         db  0x01 ; '.'
00000000000267ab         db  0x02 ; '.'
00000000000267ac         db  0x5b ; '['
00000000000267ad         db  0x0e ; '.'
00000000000267ae         db  0x98 ; '.'
00000000000267af         db  0x01 ; '.'
00000000000267b0         db  0x45 ; 'E'
00000000000267b1         db  0x0e ; '.'
00000000000267b2         db  0xa0 ; '.'
00000000000267b3         db  0x01 ; '.'
00000000000267b4         db  0x6c ; 'l'
00000000000267b5         db  0x0e ; '.'
00000000000267b6         db  0x98 ; '.'
00000000000267b7         db  0x01 ; '.'
00000000000267b8         db  0x41 ; 'A'
00000000000267b9         db  0x0e ; '.'
00000000000267ba         db  0x90 ; '.'
00000000000267bb         db  0x01 ; '.'
00000000000267bc         db  0x03 ; '.'
00000000000267bd         db  0x31 ; '1'
00000000000267be         db  0x01 ; '.'
00000000000267bf         db  0x0a ; '.'
00000000000267c0         db  0x0e ; '.'
00000000000267c1         db  0x38 ; '8'
00000000000267c2         db  0x41 ; 'A'
00000000000267c3         db  0x0e ; '.'
00000000000267c4         db  0x30 ; '0'
00000000000267c5         db  0x41 ; 'A'
00000000000267c6         db  0x0e ; '.'
00000000000267c7         db  0x28 ; '('
00000000000267c8         db  0x42 ; 'B'
00000000000267c9         db  0x0e ; '.'
00000000000267ca         db  0x20 ; ' '
00000000000267cb         db  0x42 ; 'B'
00000000000267cc         db  0x0e ; '.'
00000000000267cd         db  0x18 ; '.'
00000000000267ce         db  0x42 ; 'B'
00000000000267cf         db  0x0e ; '.'
00000000000267d0         db  0x10 ; '.'
00000000000267d1         db  0x42 ; 'B'
00000000000267d2         db  0x0e ; '.'
00000000000267d3         db  0x08 ; '.'
00000000000267d4         db  0x49 ; 'I'
00000000000267d5         db  0x0b ; '.'
00000000000267d6         db  0x00 ; '.'
00000000000267d7         db  0x00 ; '.'
00000000000267d8         dd         0x0000004c                                  ; Length of the record
00000000000267dc         dd         0x00002db4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000267e0         db         0x40, 0x01, 2 dup (0xff)                    ; begin 0x16920
00000000000267e4         db         0x27, 0x05, 2 dup (0x00)                    ; length 0x527 (end at 0x16e47)
00000000000267e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000267e9         db  0x42 ; 'B'
00000000000267ea         db  0x0e ; '.'
00000000000267eb         db  0x10 ; '.'
00000000000267ec         db  0x8f ; '.'
00000000000267ed         db  0x02 ; '.'
00000000000267ee         db  0x42 ; 'B'
00000000000267ef         db  0x0e ; '.'
00000000000267f0         db  0x18 ; '.'
00000000000267f1         db  0x8e ; '.'
00000000000267f2         db  0x03 ; '.'
00000000000267f3         db  0x45 ; 'E'
00000000000267f4         db  0x0e ; '.'
00000000000267f5         db  0x20 ; ' '
00000000000267f6         db  0x8d ; '.'
00000000000267f7         db  0x04 ; '.'
00000000000267f8         db  0x42 ; 'B'
00000000000267f9         db  0x0e ; '.'
00000000000267fa         db  0x28 ; '('
00000000000267fb         db  0x8c ; '.'
00000000000267fc         db  0x05 ; '.'
00000000000267fd         db  0x41 ; 'A'
00000000000267fe         db  0x0e ; '.'
00000000000267ff         db  0x30 ; '0'
0000000000026800         db  0x86 ; '.'
0000000000026801         db  0x06 ; '.'
0000000000026802         db  0x41 ; 'A'
0000000000026803         db  0x0e ; '.'
0000000000026804         db  0x38 ; '8'
0000000000026805         db  0x83 ; '.'
0000000000026806         db  0x07 ; '.'
0000000000026807         db  0x4c ; 'L'
0000000000026808         db  0x0e ; '.'
0000000000026809         db  0xb0 ; '.'
000000000002680a         db  0x03 ; '.'
000000000002680b         db  0x03 ; '.'
000000000002680c         db  0x82 ; '.'
000000000002680d         db  0x04 ; '.'
000000000002680e         db  0x0a ; '.'
000000000002680f         db  0x0e ; '.'
0000000000026810         db  0x38 ; '8'
0000000000026811         db  0x41 ; 'A'
0000000000026812         db  0x0e ; '.'
0000000000026813         db  0x30 ; '0'
0000000000026814         db  0x41 ; 'A'
0000000000026815         db  0x0e ; '.'
0000000000026816         db  0x28 ; '('
0000000000026817         db  0x42 ; 'B'
0000000000026818         db  0x0e ; '.'
0000000000026819         db  0x20 ; ' '
000000000002681a         db  0x42 ; 'B'
000000000002681b         db  0x0e ; '.'
000000000002681c         db  0x18 ; '.'
000000000002681d         db  0x42 ; 'B'
000000000002681e         db  0x0e ; '.'
000000000002681f         db  0x10 ; '.'
0000000000026820         db  0x42 ; 'B'
0000000000026821         db  0x0e ; '.'
0000000000026822         db  0x08 ; '.'
0000000000026823         db  0x41 ; 'A'
0000000000026824         db  0x0b ; '.'
0000000000026825         db  0x00 ; '.'
0000000000026826         db  0x00 ; '.'
0000000000026827         db  0x00 ; '.'
0000000000026828         dd         0x00000038                                  ; Length of the record
000000000002682c         dd         0x00002e04                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026830         db         0x20, 0x06, 2 dup (0xff)                    ; begin 0x16e50
0000000000026834         db         0x54, 0x02, 2 dup (0x00)                    ; length 0x254 (end at 0x170a4)
0000000000026838         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026839         db  0x46 ; 'F'
000000000002683a         db  0x0e ; '.'
000000000002683b         db  0x10 ; '.'
000000000002683c         db  0x8d ; '.'
000000000002683d         db  0x02 ; '.'
000000000002683e         db  0x42 ; 'B'
000000000002683f         db  0x0e ; '.'
0000000000026840         db  0x18 ; '.'
0000000000026841         db  0x8c ; '.'
0000000000026842         db  0x03 ; '.'
0000000000026843         db  0x45 ; 'E'
0000000000026844         db  0x0e ; '.'
0000000000026845         db  0x20 ; ' '
0000000000026846         db  0x86 ; '.'
0000000000026847         db  0x04 ; '.'
0000000000026848         db  0x41 ; 'A'
0000000000026849         db  0x0e ; '.'
000000000002684a         db  0x28 ; '('
000000000002684b         db  0x83 ; '.'
000000000002684c         db  0x05 ; '.'
000000000002684d         db  0x44 ; 'D'
000000000002684e         db  0x0e ; '.'
000000000002684f         db  0x30 ; '0'
0000000000026850         db  0x02 ; '.'
0000000000026851         db  0xe4 ; '.'
0000000000026852         db  0x0a ; '.'
0000000000026853         db  0x0e ; '.'
0000000000026854         db  0x28 ; '('
0000000000026855         db  0x43 ; 'C'
0000000000026856         db  0x0e ; '.'
0000000000026857         db  0x20 ; ' '
0000000000026858         db  0x41 ; 'A'
0000000000026859         db  0x0e ; '.'
000000000002685a         db  0x18 ; '.'
000000000002685b         db  0x42 ; 'B'
000000000002685c         db  0x0e ; '.'
000000000002685d         db  0x10 ; '.'
000000000002685e         db  0x42 ; 'B'
000000000002685f         db  0x0e ; '.'
0000000000026860         db  0x08 ; '.'
0000000000026861         db  0x42 ; 'B'
0000000000026862         db  0x0b ; '.'
0000000000026863         db  0x00 ; '.'
0000000000026864         dd         0x0000004c                                  ; Length of the record
0000000000026868         dd         0x00002e40                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002686c         db         0x44, 0x08, 2 dup (0xff)                    ; begin 0x170b0
0000000000026870         db         0x51, 0x07, 2 dup (0x00)                    ; length 0x751 (end at 0x17801)
0000000000026874         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026875         db  0x42 ; 'B'
0000000000026876         db  0x0e ; '.'
0000000000026877         db  0x10 ; '.'
0000000000026878         db  0x8f ; '.'
0000000000026879         db  0x02 ; '.'
000000000002687a         db  0x42 ; 'B'
000000000002687b         db  0x0e ; '.'
000000000002687c         db  0x18 ; '.'
000000000002687d         db  0x8e ; '.'
000000000002687e         db  0x03 ; '.'
000000000002687f         db  0x45 ; 'E'
0000000000026880         db  0x0e ; '.'
0000000000026881         db  0x20 ; ' '
0000000000026882         db  0x8d ; '.'
0000000000026883         db  0x04 ; '.'
0000000000026884         db  0x42 ; 'B'
0000000000026885         db  0x0e ; '.'
0000000000026886         db  0x28 ; '('
0000000000026887         db  0x8c ; '.'
0000000000026888         db  0x05 ; '.'
0000000000026889         db  0x41 ; 'A'
000000000002688a         db  0x0e ; '.'
000000000002688b         db  0x30 ; '0'
000000000002688c         db  0x86 ; '.'
000000000002688d         db  0x06 ; '.'
000000000002688e         db  0x41 ; 'A'
000000000002688f         db  0x0e ; '.'
0000000000026890         db  0x38 ; '8'
0000000000026891         db  0x83 ; '.'
0000000000026892         db  0x07 ; '.'
0000000000026893         db  0x4d ; 'M'
0000000000026894         db  0x0e ; '.'
0000000000026895         db  0x90 ; '.'
0000000000026896         db  0x02 ; '.'
0000000000026897         db  0x03 ; '.'
0000000000026898         db  0x88 ; '.'
0000000000026899         db  0x05 ; '.'
000000000002689a         db  0x0a ; '.'
000000000002689b         db  0x0e ; '.'
000000000002689c         db  0x38 ; '8'
000000000002689d         db  0x41 ; 'A'
000000000002689e         db  0x0e ; '.'
000000000002689f         db  0x30 ; '0'
00000000000268a0         db  0x41 ; 'A'
00000000000268a1         db  0x0e ; '.'
00000000000268a2         db  0x28 ; '('
00000000000268a3         db  0x42 ; 'B'
00000000000268a4         db  0x0e ; '.'
00000000000268a5         db  0x20 ; ' '
00000000000268a6         db  0x42 ; 'B'
00000000000268a7         db  0x0e ; '.'
00000000000268a8         db  0x18 ; '.'
00000000000268a9         db  0x42 ; 'B'
00000000000268aa         db  0x0e ; '.'
00000000000268ab         db  0x10 ; '.'
00000000000268ac         db  0x42 ; 'B'
00000000000268ad         db  0x0e ; '.'
00000000000268ae         db  0x08 ; '.'
00000000000268af         db  0x44 ; 'D'
00000000000268b0         db  0x0b ; '.'
00000000000268b1         db  0x00 ; '.'
00000000000268b2         db  0x00 ; '.'
00000000000268b3         db  0x00 ; '.'
00000000000268b4         dd         0x0000002c                                  ; Length of the record
00000000000268b8         dd         0x00002e90                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000268bc         db         0x54, 0x0f, 2 dup (0xff)                    ; begin 0x17810
00000000000268c0         db         0xea, 0x08, 2 dup (0x00)                    ; length 0x8ea (end at 0x180fa)
00000000000268c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000268c5         db  0x41 ; 'A'
00000000000268c6         db  0x0e ; '.'
00000000000268c7         db  0x10 ; '.'
00000000000268c8         db  0x86 ; '.'
00000000000268c9         db  0x02 ; '.'
00000000000268ca         db  0x43 ; 'C'
00000000000268cb         db  0x0d ; '.'
00000000000268cc         db  0x06 ; '.'
00000000000268cd         db  0x48 ; 'H'
00000000000268ce         db  0x8f ; '.'
00000000000268cf         db  0x03 ; '.'
00000000000268d0         db  0x8e ; '.'
00000000000268d1         db  0x04 ; '.'
00000000000268d2         db  0x8d ; '.'
00000000000268d3         db  0x05 ; '.'
00000000000268d4         db  0x8c ; '.'
00000000000268d5         db  0x06 ; '.'
00000000000268d6         db  0x4e ; 'N'
00000000000268d7         db  0x83 ; '.'
00000000000268d8         db  0x07 ; '.'
00000000000268d9         db  0x03 ; '.'
00000000000268da         db  0x20 ; ' '
00000000000268db         db  0x07 ; '.'
00000000000268dc         db  0x0a ; '.'
00000000000268dd         db  0x0c ; '.'
00000000000268de         db  0x07 ; '.'
00000000000268df         db  0x08 ; '.'
00000000000268e0         db  0x41 ; 'A'
00000000000268e1         db  0x0b ; '.'
00000000000268e2         db  0x00 ; '.'
00000000000268e3         db  0x00 ; '.'
00000000000268e4         dd         0x00000068                                  ; Length of the record
00000000000268e8         dd         0x00002ec0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000268ec         db         0x14, 0x18, 2 dup (0xff)                    ; begin 0x18100
00000000000268f0         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0x18296)
00000000000268f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000268f5         db  0x42 ; 'B'
00000000000268f6         db  0x0e ; '.'
00000000000268f7         db  0x10 ; '.'
00000000000268f8         db  0x8f ; '.'
00000000000268f9         db  0x02 ; '.'
00000000000268fa         db  0x42 ; 'B'
00000000000268fb         db  0x0e ; '.'
00000000000268fc         db  0x18 ; '.'
00000000000268fd         db  0x8e ; '.'
00000000000268fe         db  0x03 ; '.'
00000000000268ff         db  0x45 ; 'E'
0000000000026900         db  0x0e ; '.'
0000000000026901         db  0x20 ; ' '
0000000000026902         db  0x8d ; '.'
0000000000026903         db  0x04 ; '.'
0000000000026904         db  0x42 ; 'B'
0000000000026905         db  0x0e ; '.'
0000000000026906         db  0x28 ; '('
0000000000026907         db  0x8c ; '.'
0000000000026908         db  0x05 ; '.'
0000000000026909         db  0x44 ; 'D'
000000000002690a         db  0x0e ; '.'
000000000002690b         db  0x30 ; '0'
000000000002690c         db  0x86 ; '.'
000000000002690d         db  0x06 ; '.'
000000000002690e         db  0x41 ; 'A'
000000000002690f         db  0x0e ; '.'
0000000000026910         db  0x38 ; '8'
0000000000026911         db  0x83 ; '.'
0000000000026912         db  0x07 ; '.'
0000000000026913         db  0x51 ; 'Q'
0000000000026914         db  0x0e ; '.'
0000000000026915         db  0x58 ; 'X'
0000000000026916         db  0x49 ; 'I'
0000000000026917         db  0x0e ; '.'
0000000000026918         db  0x60 ; '`'
0000000000026919         db  0x4e ; 'N'
000000000002691a         db  0x0e ; '.'
000000000002691b         db  0x58 ; 'X'
000000000002691c         db  0x41 ; 'A'
000000000002691d         db  0x0e ; '.'
000000000002691e         db  0x50 ; 'P'
000000000002691f         db  0x46 ; 'F'
0000000000026920         db  0x0a ; '.'
0000000000026921         db  0x0e ; '.'
0000000000026922         db  0x38 ; '8'
0000000000026923         db  0x41 ; 'A'
0000000000026924         db  0x0e ; '.'
0000000000026925         db  0x30 ; '0'
0000000000026926         db  0x41 ; 'A'
0000000000026927         db  0x0e ; '.'
0000000000026928         db  0x28 ; '('
0000000000026929         db  0x42 ; 'B'
000000000002692a         db  0x0e ; '.'
000000000002692b         db  0x20 ; ' '
000000000002692c         db  0x42 ; 'B'
000000000002692d         db  0x0e ; '.'
000000000002692e         db  0x18 ; '.'
000000000002692f         db  0x42 ; 'B'
0000000000026930         db  0x0e ; '.'
0000000000026931         db  0x10 ; '.'
0000000000026932         db  0x42 ; 'B'
0000000000026933         db  0x0e ; '.'
0000000000026934         db  0x08 ; '.'
0000000000026935         db  0x47 ; 'G'
0000000000026936         db  0x0b ; '.'
0000000000026937         db  0x02 ; '.'
0000000000026938         db  0x97 ; '.'
0000000000026939         db  0x0a ; '.'
000000000002693a         db  0x0e ; '.'
000000000002693b         db  0x38 ; '8'
000000000002693c         db  0x44 ; 'D'
000000000002693d         db  0x0e ; '.'
000000000002693e         db  0x30 ; '0'
000000000002693f         db  0x41 ; 'A'
0000000000026940         db  0x0e ; '.'
0000000000026941         db  0x28 ; '('
0000000000026942         db  0x42 ; 'B'
0000000000026943         db  0x0e ; '.'
0000000000026944         db  0x20 ; ' '
0000000000026945         db  0x42 ; 'B'
0000000000026946         db  0x0e ; '.'
0000000000026947         db  0x18 ; '.'
0000000000026948         db  0x42 ; 'B'
0000000000026949         db  0x0e ; '.'
000000000002694a         db  0x10 ; '.'
000000000002694b         db  0x42 ; 'B'
000000000002694c         db  0x0e ; '.'
000000000002694d         db  0x08 ; '.'
000000000002694e         db  0x4c ; 'L'
000000000002694f         db  0x0b ; '.'
0000000000026950         dd         0x0000005c                                  ; Length of the record
0000000000026954         dd         0x00002f2c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026958         db         0x48, 0x19, 2 dup (0xff)                    ; begin 0x182a0
000000000002695c         db         0xe1, 0x08, 2 dup (0x00)                    ; length 0x8e1 (end at 0x18b81)
0000000000026960         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026961         db  0x42 ; 'B'
0000000000026962         db  0x0e ; '.'
0000000000026963         db  0x10 ; '.'
0000000000026964         db  0x8f ; '.'
0000000000026965         db  0x02 ; '.'
0000000000026966         db  0x42 ; 'B'
0000000000026967         db  0x0e ; '.'
0000000000026968         db  0x18 ; '.'
0000000000026969         db  0x8e ; '.'
000000000002696a         db  0x03 ; '.'
000000000002696b         db  0x42 ; 'B'
000000000002696c         db  0x0e ; '.'
000000000002696d         db  0x20 ; ' '
000000000002696e         db  0x8d ; '.'
000000000002696f         db  0x04 ; '.'
0000000000026970         db  0x42 ; 'B'
0000000000026971         db  0x0e ; '.'
0000000000026972         db  0x28 ; '('
0000000000026973         db  0x8c ; '.'
0000000000026974         db  0x05 ; '.'
0000000000026975         db  0x41 ; 'A'
0000000000026976         db  0x0e ; '.'
0000000000026977         db  0x30 ; '0'
0000000000026978         db  0x86 ; '.'
0000000000026979         db  0x06 ; '.'
000000000002697a         db  0x41 ; 'A'
000000000002697b         db  0x0e ; '.'
000000000002697c         db  0x38 ; '8'
000000000002697d         db  0x83 ; '.'
000000000002697e         db  0x07 ; '.'
000000000002697f         db  0x47 ; 'G'
0000000000026980         db  0x0e ; '.'
0000000000026981         db  0xf0 ; '.'
0000000000026982         db  0x01 ; '.'
0000000000026983         db  0x03 ; '.'
0000000000026984         db  0x85 ; '.'
0000000000026985         db  0x03 ; '.'
0000000000026986         db  0x0a ; '.'
0000000000026987         db  0x0e ; '.'
0000000000026988         db  0x38 ; '8'
0000000000026989         db  0x41 ; 'A'
000000000002698a         db  0x0e ; '.'
000000000002698b         db  0x30 ; '0'
000000000002698c         db  0x41 ; 'A'
000000000002698d         db  0x0e ; '.'
000000000002698e         db  0x28 ; '('
000000000002698f         db  0x42 ; 'B'
0000000000026990         db  0x0e ; '.'
0000000000026991         db  0x20 ; ' '
0000000000026992         db  0x42 ; 'B'
0000000000026993         db  0x0e ; '.'
0000000000026994         db  0x18 ; '.'
0000000000026995         db  0x42 ; 'B'
0000000000026996         db  0x0e ; '.'
0000000000026997         db  0x10 ; '.'
0000000000026998         db  0x42 ; 'B'
0000000000026999         db  0x0e ; '.'
000000000002699a         db  0x08 ; '.'
000000000002699b         db  0x48 ; 'H'
000000000002699c         db  0x0b ; '.'
000000000002699d         db  0x03 ; '.'
000000000002699e         db  0xd8 ; '.'
000000000002699f         db  0x02 ; '.'
00000000000269a0         db  0x0e ; '.'
00000000000269a1         db  0xf8 ; '.'
00000000000269a2         db  0x01 ; '.'
00000000000269a3         db  0x42 ; 'B'
00000000000269a4         db  0x0e ; '.'
00000000000269a5         db  0x80 ; '.'
00000000000269a6         db  0x02 ; '.'
00000000000269a7         db  0x4f ; 'O'
00000000000269a8         db  0x0e ; '.'
00000000000269a9         db  0xf8 ; '.'
00000000000269aa         db  0x01 ; '.'
00000000000269ab         db  0x44 ; 'D'
00000000000269ac         db  0x0e ; '.'
00000000000269ad         db  0xf0 ; '.'
00000000000269ae         db  0x01 ; '.'
00000000000269af         db  0x00 ; '.'
00000000000269b0         dd         0x00000048                                  ; Length of the record
00000000000269b4         dd         0x00002f8c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000269b8         db         0xd8, 0x21, 2 dup (0xff)                    ; begin 0x18b90
00000000000269bc         db         0xec, 0x01, 2 dup (0x00)                    ; length 0x1ec (end at 0x18d7c)
00000000000269c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000269c1         db  0x42 ; 'B'
00000000000269c2         db  0x0e ; '.'
00000000000269c3         db  0x10 ; '.'
00000000000269c4         db  0x8f ; '.'
00000000000269c5         db  0x02 ; '.'
00000000000269c6         db  0x42 ; 'B'
00000000000269c7         db  0x0e ; '.'
00000000000269c8         db  0x18 ; '.'
00000000000269c9         db  0x8e ; '.'
00000000000269ca         db  0x03 ; '.'
00000000000269cb         db  0x42 ; 'B'
00000000000269cc         db  0x0e ; '.'
00000000000269cd         db  0x20 ; ' '
00000000000269ce         db  0x8d ; '.'
00000000000269cf         db  0x04 ; '.'
00000000000269d0         db  0x42 ; 'B'
00000000000269d1         db  0x0e ; '.'
00000000000269d2         db  0x28 ; '('
00000000000269d3         db  0x8c ; '.'
00000000000269d4         db  0x05 ; '.'
00000000000269d5         db  0x44 ; 'D'
00000000000269d6         db  0x0e ; '.'
00000000000269d7         db  0x30 ; '0'
00000000000269d8         db  0x86 ; '.'
00000000000269d9         db  0x06 ; '.'
00000000000269da         db  0x41 ; 'A'
00000000000269db         db  0x0e ; '.'
00000000000269dc         db  0x38 ; '8'
00000000000269dd         db  0x83 ; '.'
00000000000269de         db  0x07 ; '.'
00000000000269df         db  0x47 ; 'G'
00000000000269e0         db  0x0e ; '.'
00000000000269e1         db  0x70 ; 'p'
00000000000269e2         db  0x02 ; '.'
00000000000269e3         db  0x6c ; 'l'
00000000000269e4         db  0x0a ; '.'
00000000000269e5         db  0x0e ; '.'
00000000000269e6         db  0x38 ; '8'
00000000000269e7         db  0x41 ; 'A'
00000000000269e8         db  0x0e ; '.'
00000000000269e9         db  0x30 ; '0'
00000000000269ea         db  0x41 ; 'A'
00000000000269eb         db  0x0e ; '.'
00000000000269ec         db  0x28 ; '('
00000000000269ed         db  0x42 ; 'B'
00000000000269ee         db  0x0e ; '.'
00000000000269ef         db  0x20 ; ' '
00000000000269f0         db  0x42 ; 'B'
00000000000269f1         db  0x0e ; '.'
00000000000269f2         db  0x18 ; '.'
00000000000269f3         db  0x42 ; 'B'
00000000000269f4         db  0x0e ; '.'
00000000000269f5         db  0x10 ; '.'
00000000000269f6         db  0x42 ; 'B'
00000000000269f7         db  0x0e ; '.'
00000000000269f8         db  0x08 ; '.'
00000000000269f9         db  0x46 ; 'F'
00000000000269fa         db  0x0b ; '.'
00000000000269fb         db  0x00 ; '.'
00000000000269fc         dd         0x0000005c                                  ; Length of the record
0000000000026a00         dd         0x00002fd8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026a04         db         0x7c, 0x23, 2 dup (0xff)                    ; begin 0x18d80
0000000000026a08         db         0x40, 0x03, 2 dup (0x00)                    ; length 0x340 (end at 0x190c0)
0000000000026a0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026a0d         db  0x42 ; 'B'
0000000000026a0e         db  0x0e ; '.'
0000000000026a0f         db  0x10 ; '.'
0000000000026a10         db  0x8f ; '.'
0000000000026a11         db  0x02 ; '.'
0000000000026a12         db  0x42 ; 'B'
0000000000026a13         db  0x0e ; '.'
0000000000026a14         db  0x18 ; '.'
0000000000026a15         db  0x8e ; '.'
0000000000026a16         db  0x03 ; '.'
0000000000026a17         db  0x45 ; 'E'
0000000000026a18         db  0x0e ; '.'
0000000000026a19         db  0x20 ; ' '
0000000000026a1a         db  0x8d ; '.'
0000000000026a1b         db  0x04 ; '.'
0000000000026a1c         db  0x42 ; 'B'
0000000000026a1d         db  0x0e ; '.'
0000000000026a1e         db  0x28 ; '('
0000000000026a1f         db  0x8c ; '.'
0000000000026a20         db  0x05 ; '.'
0000000000026a21         db  0x44 ; 'D'
0000000000026a22         db  0x0e ; '.'
0000000000026a23         db  0x30 ; '0'
0000000000026a24         db  0x86 ; '.'
0000000000026a25         db  0x06 ; '.'
0000000000026a26         db  0x41 ; 'A'
0000000000026a27         db  0x0e ; '.'
0000000000026a28         db  0x38 ; '8'
0000000000026a29         db  0x83 ; '.'
0000000000026a2a         db  0x07 ; '.'
0000000000026a2b         db  0x44 ; 'D'
0000000000026a2c         db  0x0e ; '.'
0000000000026a2d         db  0xa0 ; '.'
0000000000026a2e         db  0x01 ; '.'
0000000000026a2f         db  0x03 ; '.'
0000000000026a30         db  0x5d ; ']'
0000000000026a31         db  0x01 ; '.'
0000000000026a32         db  0x0e ; '.'
0000000000026a33         db  0xa8 ; '.'
0000000000026a34         db  0x01 ; '.'
0000000000026a35         db  0x51 ; 'Q'
0000000000026a36         db  0x0e ; '.'
0000000000026a37         db  0xb0 ; '.'
0000000000026a38         db  0x01 ; '.'
0000000000026a39         db  0x52 ; 'R'
0000000000026a3a         db  0x0e ; '.'
0000000000026a3b         db  0xa8 ; '.'
0000000000026a3c         db  0x01 ; '.'
0000000000026a3d         db  0x41 ; 'A'
0000000000026a3e         db  0x0e ; '.'
0000000000026a3f         db  0xa0 ; '.'
0000000000026a40         db  0x01 ; '.'
0000000000026a41         db  0x03 ; '.'
0000000000026a42         db  0x94 ; '.'
0000000000026a43         db  0x01 ; '.'
0000000000026a44         db  0x0a ; '.'
0000000000026a45         db  0x0e ; '.'
0000000000026a46         db  0x38 ; '8'
0000000000026a47         db  0x41 ; 'A'
0000000000026a48         db  0x0e ; '.'
0000000000026a49         db  0x30 ; '0'
0000000000026a4a         db  0x41 ; 'A'
0000000000026a4b         db  0x0e ; '.'
0000000000026a4c         db  0x28 ; '('
0000000000026a4d         db  0x42 ; 'B'
0000000000026a4e         db  0x0e ; '.'
0000000000026a4f         db  0x20 ; ' '
0000000000026a50         db  0x42 ; 'B'
0000000000026a51         db  0x0e ; '.'
0000000000026a52         db  0x18 ; '.'
0000000000026a53         db  0x42 ; 'B'
0000000000026a54         db  0x0e ; '.'
0000000000026a55         db  0x10 ; '.'
0000000000026a56         db  0x42 ; 'B'
0000000000026a57         db  0x0e ; '.'
0000000000026a58         db  0x08 ; '.'
0000000000026a59         db  0x41 ; 'A'
0000000000026a5a         db  0x0b ; '.'
0000000000026a5b         db  0x00 ; '.'
0000000000026a5c         dd         0x0000004c                                  ; Length of the record
0000000000026a60         dd         0x00003038                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026a64         db         0x5c, 0x26, 2 dup (0xff)                    ; begin 0x190c0
0000000000026a68         db         0x30, 0x17, 2 dup (0x00)                    ; length 0x1730 (end at 0x1a7f0)
0000000000026a6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026a6d         db  0x42 ; 'B'
0000000000026a6e         db  0x0e ; '.'
0000000000026a6f         db  0x10 ; '.'
0000000000026a70         db  0x8f ; '.'
0000000000026a71         db  0x02 ; '.'
0000000000026a72         db  0x42 ; 'B'
0000000000026a73         db  0x0e ; '.'
0000000000026a74         db  0x18 ; '.'
0000000000026a75         db  0x8e ; '.'
0000000000026a76         db  0x03 ; '.'
0000000000026a77         db  0x42 ; 'B'
0000000000026a78         db  0x0e ; '.'
0000000000026a79         db  0x20 ; ' '
0000000000026a7a         db  0x8d ; '.'
0000000000026a7b         db  0x04 ; '.'
0000000000026a7c         db  0x42 ; 'B'
0000000000026a7d         db  0x0e ; '.'
0000000000026a7e         db  0x28 ; '('
0000000000026a7f         db  0x8c ; '.'
0000000000026a80         db  0x05 ; '.'
0000000000026a81         db  0x44 ; 'D'
0000000000026a82         db  0x0e ; '.'
0000000000026a83         db  0x30 ; '0'
0000000000026a84         db  0x86 ; '.'
0000000000026a85         db  0x06 ; '.'
0000000000026a86         db  0x41 ; 'A'
0000000000026a87         db  0x0e ; '.'
0000000000026a88         db  0x38 ; '8'
0000000000026a89         db  0x83 ; '.'
0000000000026a8a         db  0x07 ; '.'
0000000000026a8b         db  0x52 ; 'R'
0000000000026a8c         db  0x0e ; '.'
0000000000026a8d         db  0xf0 ; '.'
0000000000026a8e         db  0x04 ; '.'
0000000000026a8f         db  0x03 ; '.'
0000000000026a90         db  0x7c ; '|'
0000000000026a91         db  0x0b ; '.'
0000000000026a92         db  0x0a ; '.'
0000000000026a93         db  0x0e ; '.'
0000000000026a94         db  0x38 ; '8'
0000000000026a95         db  0x41 ; 'A'
0000000000026a96         db  0x0e ; '.'
0000000000026a97         db  0x30 ; '0'
0000000000026a98         db  0x41 ; 'A'
0000000000026a99         db  0x0e ; '.'
0000000000026a9a         db  0x28 ; '('
0000000000026a9b         db  0x42 ; 'B'
0000000000026a9c         db  0x0e ; '.'
0000000000026a9d         db  0x20 ; ' '
0000000000026a9e         db  0x42 ; 'B'
0000000000026a9f         db  0x0e ; '.'
0000000000026aa0         db  0x18 ; '.'
0000000000026aa1         db  0x42 ; 'B'
0000000000026aa2         db  0x0e ; '.'
0000000000026aa3         db  0x10 ; '.'
0000000000026aa4         db  0x42 ; 'B'
0000000000026aa5         db  0x0e ; '.'
0000000000026aa6         db  0x08 ; '.'
0000000000026aa7         db  0x4b ; 'K'
0000000000026aa8         db  0x0b ; '.'
0000000000026aa9         db  0x00 ; '.'
0000000000026aaa         db  0x00 ; '.'
0000000000026aab         db  0x00 ; '.'
0000000000026aac         dd         0x0000005c                                  ; Length of the record
0000000000026ab0         dd         0x00003088                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026ab4         db         0x3c, 0x3d, 2 dup (0xff)                    ; begin 0x1a7f0
0000000000026ab8         db         0x50, 0x08, 2 dup (0x00)                    ; length 0x850 (end at 0x1b040)
0000000000026abc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026abd         db  0x42 ; 'B'
0000000000026abe         db  0x0e ; '.'
0000000000026abf         db  0x10 ; '.'
0000000000026ac0         db  0x8f ; '.'
0000000000026ac1         db  0x02 ; '.'
0000000000026ac2         db  0x42 ; 'B'
0000000000026ac3         db  0x0e ; '.'
0000000000026ac4         db  0x18 ; '.'
0000000000026ac5         db  0x8e ; '.'
0000000000026ac6         db  0x03 ; '.'
0000000000026ac7         db  0x45 ; 'E'
0000000000026ac8         db  0x0e ; '.'
0000000000026ac9         db  0x20 ; ' '
0000000000026aca         db  0x8d ; '.'
0000000000026acb         db  0x04 ; '.'
0000000000026acc         db  0x42 ; 'B'
0000000000026acd         db  0x0e ; '.'
0000000000026ace         db  0x28 ; '('
0000000000026acf         db  0x8c ; '.'
0000000000026ad0         db  0x05 ; '.'
0000000000026ad1         db  0x44 ; 'D'
0000000000026ad2         db  0x0e ; '.'
0000000000026ad3         db  0x30 ; '0'
0000000000026ad4         db  0x86 ; '.'
0000000000026ad5         db  0x06 ; '.'
0000000000026ad6         db  0x41 ; 'A'
0000000000026ad7         db  0x0e ; '.'
0000000000026ad8         db  0x38 ; '8'
0000000000026ad9         db  0x83 ; '.'
0000000000026ada         db  0x07 ; '.'
0000000000026adb         db  0x55 ; 'U'
0000000000026adc         db  0x0e ; '.'
0000000000026add         db  0xe0 ; '.'
0000000000026ade         db  0x01 ; '.'
0000000000026adf         db  0x02 ; '.'
0000000000026ae0         db  0x91 ; '.'
0000000000026ae1         db  0x0a ; '.'
0000000000026ae2         db  0x0e ; '.'
0000000000026ae3         db  0x38 ; '8'
0000000000026ae4         db  0x41 ; 'A'
0000000000026ae5         db  0x0e ; '.'
0000000000026ae6         db  0x30 ; '0'
0000000000026ae7         db  0x41 ; 'A'
0000000000026ae8         db  0x0e ; '.'
0000000000026ae9         db  0x28 ; '('
0000000000026aea         db  0x42 ; 'B'
0000000000026aeb         db  0x0e ; '.'
0000000000026aec         db  0x20 ; ' '
0000000000026aed         db  0x42 ; 'B'
0000000000026aee         db  0x0e ; '.'
0000000000026aef         db  0x18 ; '.'
0000000000026af0         db  0x42 ; 'B'
0000000000026af1         db  0x0e ; '.'
0000000000026af2         db  0x10 ; '.'
0000000000026af3         db  0x42 ; 'B'
0000000000026af4         db  0x0e ; '.'
0000000000026af5         db  0x08 ; '.'
0000000000026af6         db  0x48 ; 'H'
0000000000026af7         db  0x0b ; '.'
0000000000026af8         db  0x03 ; '.'
0000000000026af9         db  0xc3 ; '.'
0000000000026afa         db  0x05 ; '.'
0000000000026afb         db  0x0e ; '.'
0000000000026afc         db  0xe8 ; '.'
0000000000026afd         db  0x01 ; '.'
0000000000026afe         db  0x4a ; 'J'
0000000000026aff         db  0x0e ; '.'
0000000000026b00         db  0xf0 ; '.'
0000000000026b01         db  0x01 ; '.'
0000000000026b02         db  0x56 ; 'V'
0000000000026b03         db  0x0e ; '.'
0000000000026b04         db  0xe8 ; '.'
0000000000026b05         db  0x01 ; '.'
0000000000026b06         db  0x41 ; 'A'
0000000000026b07         db  0x0e ; '.'
0000000000026b08         db  0xe0 ; '.'
0000000000026b09         db  0x01 ; '.'
0000000000026b0a         db  0x00 ; '.'
0000000000026b0b         db  0x00 ; '.'
0000000000026b0c         dd         0x00000040                                  ; Length of the record
0000000000026b10         dd         0x000030e8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026b14         db         0x2c, 0x45, 2 dup (0xff)                    ; begin 0x1b040
0000000000026b18         db         0x5d, 0x02, 2 dup (0x00)                    ; length 0x25d (end at 0x1b29d)
0000000000026b1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026b1d         db  0x42 ; 'B'
0000000000026b1e         db  0x0e ; '.'
0000000000026b1f         db  0x10 ; '.'
0000000000026b20         db  0x8e ; '.'
0000000000026b21         db  0x02 ; '.'
0000000000026b22         db  0x42 ; 'B'
0000000000026b23         db  0x0e ; '.'
0000000000026b24         db  0x18 ; '.'
0000000000026b25         db  0x8d ; '.'
0000000000026b26         db  0x03 ; '.'
0000000000026b27         db  0x45 ; 'E'
0000000000026b28         db  0x0e ; '.'
0000000000026b29         db  0x20 ; ' '
0000000000026b2a         db  0x8c ; '.'
0000000000026b2b         db  0x04 ; '.'
0000000000026b2c         db  0x41 ; 'A'
0000000000026b2d         db  0x0e ; '.'
0000000000026b2e         db  0x28 ; '('
0000000000026b2f         db  0x86 ; '.'
0000000000026b30         db  0x05 ; '.'
0000000000026b31         db  0x44 ; 'D'
0000000000026b32         db  0x0e ; '.'
0000000000026b33         db  0x30 ; '0'
0000000000026b34         db  0x83 ; '.'
0000000000026b35         db  0x06 ; '.'
0000000000026b36         db  0x4a ; 'J'
0000000000026b37         db  0x0e ; '.'
0000000000026b38         db  0x50 ; 'P'
0000000000026b39         db  0x02 ; '.'
0000000000026b3a         db  0x61 ; 'a'
0000000000026b3b         db  0x0a ; '.'
0000000000026b3c         db  0x0e ; '.'
0000000000026b3d         db  0x30 ; '0'
0000000000026b3e         db  0x41 ; 'A'
0000000000026b3f         db  0x0e ; '.'
0000000000026b40         db  0x28 ; '('
0000000000026b41         db  0x41 ; 'A'
0000000000026b42         db  0x0e ; '.'
0000000000026b43         db  0x20 ; ' '
0000000000026b44         db  0x42 ; 'B'
0000000000026b45         db  0x0e ; '.'
0000000000026b46         db  0x18 ; '.'
0000000000026b47         db  0x42 ; 'B'
0000000000026b48         db  0x0e ; '.'
0000000000026b49         db  0x10 ; '.'
0000000000026b4a         db  0x42 ; 'B'
0000000000026b4b         db  0x0e ; '.'
0000000000026b4c         db  0x08 ; '.'
0000000000026b4d         db  0x47 ; 'G'
0000000000026b4e         db  0x0b ; '.'
0000000000026b4f         db  0x00 ; '.'
0000000000026b50         dd         0x00000048                                  ; Length of the record
0000000000026b54         dd         0x0000312c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026b58         db         0x48, 0x47, 2 dup (0xff)                    ; begin 0x1b2a0
0000000000026b5c         db         0xfd, 0x06, 2 dup (0x00)                    ; length 0x6fd (end at 0x1b99d)
0000000000026b60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026b61         db  0x42 ; 'B'
0000000000026b62         db  0x0e ; '.'
0000000000026b63         db  0x10 ; '.'
0000000000026b64         db  0x8f ; '.'
0000000000026b65         db  0x02 ; '.'
0000000000026b66         db  0x42 ; 'B'
0000000000026b67         db  0x0e ; '.'
0000000000026b68         db  0x18 ; '.'
0000000000026b69         db  0x8e ; '.'
0000000000026b6a         db  0x03 ; '.'
0000000000026b6b         db  0x42 ; 'B'
0000000000026b6c         db  0x0e ; '.'
0000000000026b6d         db  0x20 ; ' '
0000000000026b6e         db  0x8d ; '.'
0000000000026b6f         db  0x04 ; '.'
0000000000026b70         db  0x42 ; 'B'
0000000000026b71         db  0x0e ; '.'
0000000000026b72         db  0x28 ; '('
0000000000026b73         db  0x8c ; '.'
0000000000026b74         db  0x05 ; '.'
0000000000026b75         db  0x41 ; 'A'
0000000000026b76         db  0x0e ; '.'
0000000000026b77         db  0x30 ; '0'
0000000000026b78         db  0x86 ; '.'
0000000000026b79         db  0x06 ; '.'
0000000000026b7a         db  0x41 ; 'A'
0000000000026b7b         db  0x0e ; '.'
0000000000026b7c         db  0x38 ; '8'
0000000000026b7d         db  0x83 ; '.'
0000000000026b7e         db  0x07 ; '.'
0000000000026b7f         db  0x47 ; 'G'
0000000000026b80         db  0x0e ; '.'
0000000000026b81         db  0x70 ; 'p'
0000000000026b82         db  0x02 ; '.'
0000000000026b83         db  0xcb ; '.'
0000000000026b84         db  0x0a ; '.'
0000000000026b85         db  0x0e ; '.'
0000000000026b86         db  0x38 ; '8'
0000000000026b87         db  0x41 ; 'A'
0000000000026b88         db  0x0e ; '.'
0000000000026b89         db  0x30 ; '0'
0000000000026b8a         db  0x41 ; 'A'
0000000000026b8b         db  0x0e ; '.'
0000000000026b8c         db  0x28 ; '('
0000000000026b8d         db  0x42 ; 'B'
0000000000026b8e         db  0x0e ; '.'
0000000000026b8f         db  0x20 ; ' '
0000000000026b90         db  0x42 ; 'B'
0000000000026b91         db  0x0e ; '.'
0000000000026b92         db  0x18 ; '.'
0000000000026b93         db  0x42 ; 'B'
0000000000026b94         db  0x0e ; '.'
0000000000026b95         db  0x10 ; '.'
0000000000026b96         db  0x42 ; 'B'
0000000000026b97         db  0x0e ; '.'
0000000000026b98         db  0x08 ; '.'
0000000000026b99         db  0x4a ; 'J'
0000000000026b9a         db  0x0b ; '.'
0000000000026b9b         db  0x00 ; '.'
0000000000026b9c         dd         0x0000003c                                  ; Length of the record
0000000000026ba0         dd         0x00003178                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026ba4         db         0xfc, 0x4d, 2 dup (0xff)                    ; begin 0x1b9a0
0000000000026ba8         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x1ba56)
0000000000026bac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026bad         db  0x42 ; 'B'
0000000000026bae         db  0x0e ; '.'
0000000000026baf         db  0x10 ; '.'
0000000000026bb0         db  0x8e ; '.'
0000000000026bb1         db  0x02 ; '.'
0000000000026bb2         db  0x45 ; 'E'
0000000000026bb3         db  0x0e ; '.'
0000000000026bb4         db  0x18 ; '.'
0000000000026bb5         db  0x8d ; '.'
0000000000026bb6         db  0x03 ; '.'
0000000000026bb7         db  0x45 ; 'E'
0000000000026bb8         db  0x0e ; '.'
0000000000026bb9         db  0x20 ; ' '
0000000000026bba         db  0x8c ; '.'
0000000000026bbb         db  0x04 ; '.'
0000000000026bbc         db  0x48 ; 'H'
0000000000026bbd         db  0x0e ; '.'
0000000000026bbe         db  0x28 ; '('
0000000000026bbf         db  0x86 ; '.'
0000000000026bc0         db  0x05 ; '.'
0000000000026bc1         db  0x44 ; 'D'
0000000000026bc2         db  0x0e ; '.'
0000000000026bc3         db  0x30 ; '0'
0000000000026bc4         db  0x83 ; '.'
0000000000026bc5         db  0x06 ; '.'
0000000000026bc6         db  0x02 ; '.'
0000000000026bc7         db  0x83 ; '.'
0000000000026bc8         db  0x0a ; '.'
0000000000026bc9         db  0x0e ; '.'
0000000000026bca         db  0x28 ; '('
0000000000026bcb         db  0x41 ; 'A'
0000000000026bcc         db  0x0e ; '.'
0000000000026bcd         db  0x20 ; ' '
0000000000026bce         db  0x42 ; 'B'
0000000000026bcf         db  0x0e ; '.'
0000000000026bd0         db  0x18 ; '.'
0000000000026bd1         db  0x42 ; 'B'
0000000000026bd2         db  0x0e ; '.'
0000000000026bd3         db  0x10 ; '.'
0000000000026bd4         db  0x42 ; 'B'
0000000000026bd5         db  0x0e ; '.'
0000000000026bd6         db  0x08 ; '.'
0000000000026bd7         db  0x46 ; 'F'
0000000000026bd8         db  0x0b ; '.'
0000000000026bd9         db  0x00 ; '.'
0000000000026bda         db  0x00 ; '.'
0000000000026bdb         db  0x00 ; '.'
0000000000026bdc         dd         0x0000005c                                  ; Length of the record
0000000000026be0         dd         0x000031b8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026be4         db         0x7c, 0x4e, 2 dup (0xff)                    ; begin 0x1ba60
0000000000026be8         db         0xd3, 0x14, 2 dup (0x00)                    ; length 0x14d3 (end at 0x1cf33)
0000000000026bec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026bed         db  0x42 ; 'B'
0000000000026bee         db  0x0e ; '.'
0000000000026bef         db  0x10 ; '.'
0000000000026bf0         db  0x8f ; '.'
0000000000026bf1         db  0x02 ; '.'
0000000000026bf2         db  0x42 ; 'B'
0000000000026bf3         db  0x0e ; '.'
0000000000026bf4         db  0x18 ; '.'
0000000000026bf5         db  0x8e ; '.'
0000000000026bf6         db  0x03 ; '.'
0000000000026bf7         db  0x42 ; 'B'
0000000000026bf8         db  0x0e ; '.'
0000000000026bf9         db  0x20 ; ' '
0000000000026bfa         db  0x8d ; '.'
0000000000026bfb         db  0x04 ; '.'
0000000000026bfc         db  0x42 ; 'B'
0000000000026bfd         db  0x0e ; '.'
0000000000026bfe         db  0x28 ; '('
0000000000026bff         db  0x8c ; '.'
0000000000026c00         db  0x05 ; '.'
0000000000026c01         db  0x41 ; 'A'
0000000000026c02         db  0x0e ; '.'
0000000000026c03         db  0x30 ; '0'
0000000000026c04         db  0x86 ; '.'
0000000000026c05         db  0x06 ; '.'
0000000000026c06         db  0x41 ; 'A'
0000000000026c07         db  0x0e ; '.'
0000000000026c08         db  0x38 ; '8'
0000000000026c09         db  0x83 ; '.'
0000000000026c0a         db  0x07 ; '.'
0000000000026c0b         db  0x47 ; 'G'
0000000000026c0c         db  0x0e ; '.'
0000000000026c0d         db  0xe0 ; '.'
0000000000026c0e         db  0x02 ; '.'
0000000000026c0f         db  0x03 ; '.'
0000000000026c10         db  0x22 ; '"'
0000000000026c11         db  0x01 ; '.'
0000000000026c12         db  0x0a ; '.'
0000000000026c13         db  0x0e ; '.'
0000000000026c14         db  0x38 ; '8'
0000000000026c15         db  0x41 ; 'A'
0000000000026c16         db  0x0e ; '.'
0000000000026c17         db  0x30 ; '0'
0000000000026c18         db  0x41 ; 'A'
0000000000026c19         db  0x0e ; '.'
0000000000026c1a         db  0x28 ; '('
0000000000026c1b         db  0x42 ; 'B'
0000000000026c1c         db  0x0e ; '.'
0000000000026c1d         db  0x20 ; ' '
0000000000026c1e         db  0x42 ; 'B'
0000000000026c1f         db  0x0e ; '.'
0000000000026c20         db  0x18 ; '.'
0000000000026c21         db  0x42 ; 'B'
0000000000026c22         db  0x0e ; '.'
0000000000026c23         db  0x10 ; '.'
0000000000026c24         db  0x42 ; 'B'
0000000000026c25         db  0x0e ; '.'
0000000000026c26         db  0x08 ; '.'
0000000000026c27         db  0x41 ; 'A'
0000000000026c28         db  0x0b ; '.'
0000000000026c29         db  0x03 ; '.'
0000000000026c2a         db  0xbf ; '.'
0000000000026c2b         db  0x0b ; '.'
0000000000026c2c         db  0x0e ; '.'
0000000000026c2d         db  0xe8 ; '.'
0000000000026c2e         db  0x02 ; '.'
0000000000026c2f         db  0x4c ; 'L'
0000000000026c30         db  0x0e ; '.'
0000000000026c31         db  0xf0 ; '.'
0000000000026c32         db  0x02 ; '.'
0000000000026c33         db  0x64 ; 'd'
0000000000026c34         db  0x0e ; '.'
0000000000026c35         db  0xe8 ; '.'
0000000000026c36         db  0x02 ; '.'
0000000000026c37         db  0x42 ; 'B'
0000000000026c38         db  0x0e ; '.'
0000000000026c39         db  0xe0 ; '.'
0000000000026c3a         db  0x02 ; '.'
0000000000026c3b         db  0x00 ; '.'
0000000000026c3c         dd         0x00000048                                  ; Length of the record
0000000000026c40         dd         0x00003218                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026c44         db         0xfc, 0x62, 2 dup (0xff)                    ; begin 0x1cf40
0000000000026c48         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x1d0c2)
0000000000026c4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026c4d         db  0x42 ; 'B'
0000000000026c4e         db  0x0e ; '.'
0000000000026c4f         db  0x10 ; '.'
0000000000026c50         db  0x8f ; '.'
0000000000026c51         db  0x02 ; '.'
0000000000026c52         db  0x42 ; 'B'
0000000000026c53         db  0x0e ; '.'
0000000000026c54         db  0x18 ; '.'
0000000000026c55         db  0x8e ; '.'
0000000000026c56         db  0x03 ; '.'
0000000000026c57         db  0x45 ; 'E'
0000000000026c58         db  0x0e ; '.'
0000000000026c59         db  0x20 ; ' '
0000000000026c5a         db  0x8d ; '.'
0000000000026c5b         db  0x04 ; '.'
0000000000026c5c         db  0x42 ; 'B'
0000000000026c5d         db  0x0e ; '.'
0000000000026c5e         db  0x28 ; '('
0000000000026c5f         db  0x8c ; '.'
0000000000026c60         db  0x05 ; '.'
0000000000026c61         db  0x44 ; 'D'
0000000000026c62         db  0x0e ; '.'
0000000000026c63         db  0x30 ; '0'
0000000000026c64         db  0x86 ; '.'
0000000000026c65         db  0x06 ; '.'
0000000000026c66         db  0x41 ; 'A'
0000000000026c67         db  0x0e ; '.'
0000000000026c68         db  0x38 ; '8'
0000000000026c69         db  0x83 ; '.'
0000000000026c6a         db  0x07 ; '.'
0000000000026c6b         db  0x4d ; 'M'
0000000000026c6c         db  0x0e ; '.'
0000000000026c6d         db  0x80 ; '.'
0000000000026c6e         db  0x01 ; '.'
0000000000026c6f         db  0x02 ; '.'
0000000000026c70         db  0xfa ; '.'
0000000000026c71         db  0x0a ; '.'
0000000000026c72         db  0x0e ; '.'
0000000000026c73         db  0x38 ; '8'
0000000000026c74         db  0x41 ; 'A'
0000000000026c75         db  0x0e ; '.'
0000000000026c76         db  0x30 ; '0'
0000000000026c77         db  0x41 ; 'A'
0000000000026c78         db  0x0e ; '.'
0000000000026c79         db  0x28 ; '('
0000000000026c7a         db  0x42 ; 'B'
0000000000026c7b         db  0x0e ; '.'
0000000000026c7c         db  0x20 ; ' '
0000000000026c7d         db  0x42 ; 'B'
0000000000026c7e         db  0x0e ; '.'
0000000000026c7f         db  0x18 ; '.'
0000000000026c80         db  0x42 ; 'B'
0000000000026c81         db  0x0e ; '.'
0000000000026c82         db  0x10 ; '.'
0000000000026c83         db  0x42 ; 'B'
0000000000026c84         db  0x0e ; '.'
0000000000026c85         db  0x08 ; '.'
0000000000026c86         db  0x47 ; 'G'
0000000000026c87         db  0x0b ; '.'
0000000000026c88         dd         0x0000004c                                  ; Length of the record
0000000000026c8c         dd         0x00003264                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026c90         db         0x40, 0x64, 2 dup (0xff)                    ; begin 0x1d0d0
0000000000026c94         db         0x7f, 0x01, 2 dup (0x00)                    ; length 0x17f (end at 0x1d24f)
0000000000026c98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026c99         db  0x42 ; 'B'
0000000000026c9a         db  0x0e ; '.'
0000000000026c9b         db  0x10 ; '.'
0000000000026c9c         db  0x8f ; '.'
0000000000026c9d         db  0x02 ; '.'
0000000000026c9e         db  0x42 ; 'B'
0000000000026c9f         db  0x0e ; '.'
0000000000026ca0         db  0x18 ; '.'
0000000000026ca1         db  0x8e ; '.'
0000000000026ca2         db  0x03 ; '.'
0000000000026ca3         db  0x45 ; 'E'
0000000000026ca4         db  0x0e ; '.'
0000000000026ca5         db  0x20 ; ' '
0000000000026ca6         db  0x8d ; '.'
0000000000026ca7         db  0x04 ; '.'
0000000000026ca8         db  0x42 ; 'B'
0000000000026ca9         db  0x0e ; '.'
0000000000026caa         db  0x28 ; '('
0000000000026cab         db  0x8c ; '.'
0000000000026cac         db  0x05 ; '.'
0000000000026cad         db  0x44 ; 'D'
0000000000026cae         db  0x0e ; '.'
0000000000026caf         db  0x30 ; '0'
0000000000026cb0         db  0x86 ; '.'
0000000000026cb1         db  0x06 ; '.'
0000000000026cb2         db  0x41 ; 'A'
0000000000026cb3         db  0x0e ; '.'
0000000000026cb4         db  0x38 ; '8'
0000000000026cb5         db  0x83 ; '.'
0000000000026cb6         db  0x07 ; '.'
0000000000026cb7         db  0x4a ; 'J'
0000000000026cb8         db  0x0e ; '.'
0000000000026cb9         db  0x90 ; '.'
0000000000026cba         db  0x01 ; '.'
0000000000026cbb         db  0x03 ; '.'
0000000000026cbc         db  0x45 ; 'E'
0000000000026cbd         db  0x01 ; '.'
0000000000026cbe         db  0x0a ; '.'
0000000000026cbf         db  0x0e ; '.'
0000000000026cc0         db  0x38 ; '8'
0000000000026cc1         db  0x41 ; 'A'
0000000000026cc2         db  0x0e ; '.'
0000000000026cc3         db  0x30 ; '0'
0000000000026cc4         db  0x41 ; 'A'
0000000000026cc5         db  0x0e ; '.'
0000000000026cc6         db  0x28 ; '('
0000000000026cc7         db  0x42 ; 'B'
0000000000026cc8         db  0x0e ; '.'
0000000000026cc9         db  0x20 ; ' '
0000000000026cca         db  0x42 ; 'B'
0000000000026ccb         db  0x0e ; '.'
0000000000026ccc         db  0x18 ; '.'
0000000000026ccd         db  0x42 ; 'B'
0000000000026cce         db  0x0e ; '.'
0000000000026ccf         db  0x10 ; '.'
0000000000026cd0         db  0x42 ; 'B'
0000000000026cd1         db  0x0e ; '.'
0000000000026cd2         db  0x08 ; '.'
0000000000026cd3         db  0x47 ; 'G'
0000000000026cd4         db  0x0b ; '.'
0000000000026cd5         db  0x00 ; '.'
0000000000026cd6         db  0x00 ; '.'
0000000000026cd7         db  0x00 ; '.'
0000000000026cd8         dd         0x0000004c                                  ; Length of the record
0000000000026cdc         dd         0x000032b4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026ce0         db         0x70, 0x65, 2 dup (0xff)                    ; begin 0x1d250
0000000000026ce4         db         0xf5, 0x10, 2 dup (0x00)                    ; length 0x10f5 (end at 0x1e345)
0000000000026ce8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026ce9         db  0x42 ; 'B'
0000000000026cea         db  0x0e ; '.'
0000000000026ceb         db  0x10 ; '.'
0000000000026cec         db  0x8f ; '.'
0000000000026ced         db  0x02 ; '.'
0000000000026cee         db  0x42 ; 'B'
0000000000026cef         db  0x0e ; '.'
0000000000026cf0         db  0x18 ; '.'
0000000000026cf1         db  0x8e ; '.'
0000000000026cf2         db  0x03 ; '.'
0000000000026cf3         db  0x42 ; 'B'
0000000000026cf4         db  0x0e ; '.'
0000000000026cf5         db  0x20 ; ' '
0000000000026cf6         db  0x8d ; '.'
0000000000026cf7         db  0x04 ; '.'
0000000000026cf8         db  0x42 ; 'B'
0000000000026cf9         db  0x0e ; '.'
0000000000026cfa         db  0x28 ; '('
0000000000026cfb         db  0x8c ; '.'
0000000000026cfc         db  0x05 ; '.'
0000000000026cfd         db  0x41 ; 'A'
0000000000026cfe         db  0x0e ; '.'
0000000000026cff         db  0x30 ; '0'
0000000000026d00         db  0x86 ; '.'
0000000000026d01         db  0x06 ; '.'
0000000000026d02         db  0x41 ; 'A'
0000000000026d03         db  0x0e ; '.'
0000000000026d04         db  0x38 ; '8'
0000000000026d05         db  0x83 ; '.'
0000000000026d06         db  0x07 ; '.'
0000000000026d07         db  0x47 ; 'G'
0000000000026d08         db  0x0e ; '.'
0000000000026d09         db  0xe0 ; '.'
0000000000026d0a         db  0x02 ; '.'
0000000000026d0b         db  0x03 ; '.'
0000000000026d0c         db  0xa9 ; '.'
0000000000026d0d         db  0x03 ; '.'
0000000000026d0e         db  0x0a ; '.'
0000000000026d0f         db  0x0e ; '.'
0000000000026d10         db  0x38 ; '8'
0000000000026d11         db  0x41 ; 'A'
0000000000026d12         db  0x0e ; '.'
0000000000026d13         db  0x30 ; '0'
0000000000026d14         db  0x41 ; 'A'
0000000000026d15         db  0x0e ; '.'
0000000000026d16         db  0x28 ; '('
0000000000026d17         db  0x42 ; 'B'
0000000000026d18         db  0x0e ; '.'
0000000000026d19         db  0x20 ; ' '
0000000000026d1a         db  0x42 ; 'B'
0000000000026d1b         db  0x0e ; '.'
0000000000026d1c         db  0x18 ; '.'
0000000000026d1d         db  0x42 ; 'B'
0000000000026d1e         db  0x0e ; '.'
0000000000026d1f         db  0x10 ; '.'
0000000000026d20         db  0x42 ; 'B'
0000000000026d21         db  0x0e ; '.'
0000000000026d22         db  0x08 ; '.'
0000000000026d23         db  0x41 ; 'A'
0000000000026d24         db  0x0b ; '.'
0000000000026d25         db  0x00 ; '.'
0000000000026d26         db  0x00 ; '.'
0000000000026d27         db  0x00 ; '.'
0000000000026d28         dd         0x0000001c                                  ; Length of the record
0000000000026d2c         dd         0x00003304                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026d30         db         0x20, 0x76, 2 dup (0xff)                    ; begin 0x1e350
0000000000026d34         db         0x6f, 3 dup (0x00)                          ; length 0x6f (end at 0x1e3bf)
0000000000026d38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026d39         db  0x44 ; 'D'
0000000000026d3a         db  0x0e ; '.'
0000000000026d3b         db  0x10 ; '.'
0000000000026d3c         db  0x02 ; '.'
0000000000026d3d         db  0x59 ; 'Y'
0000000000026d3e         db  0x0a ; '.'
0000000000026d3f         db  0x0e ; '.'
0000000000026d40         db  0x08 ; '.'
0000000000026d41         db  0x4b ; 'K'
0000000000026d42         db  0x0b ; '.'
0000000000026d43         db  0x46 ; 'F'
0000000000026d44         db  0x0e ; '.'
0000000000026d45         db  0x08 ; '.'
0000000000026d46         db  0x00 ; '.'
0000000000026d47         db  0x00 ; '.'
0000000000026d48         dd         0x00000010                                  ; Length of the record
0000000000026d4c         dd         0x00003324                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026d50         db         0x70, 0x76, 2 dup (0xff)                    ; begin 0x1e3c0
0000000000026d54         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x1e3cf)
0000000000026d58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026d59         align      4
0000000000026d5c         dd         0x00000028                                  ; Length of the record
0000000000026d60         dd         0x00003338                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026d64         db         0x6c, 0x76, 2 dup (0xff)                    ; begin 0x1e3d0
0000000000026d68         db         0xc3, 3 dup (0x00)                          ; length 0xc3 (end at 0x1e493)
0000000000026d6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026d6d         db  0x42 ; 'B'
0000000000026d6e         db  0x0e ; '.'
0000000000026d6f         db  0x10 ; '.'
0000000000026d70         db  0x8c ; '.'
0000000000026d71         db  0x02 ; '.'
0000000000026d72         db  0x41 ; 'A'
0000000000026d73         db  0x0e ; '.'
0000000000026d74         db  0x18 ; '.'
0000000000026d75         db  0x86 ; '.'
0000000000026d76         db  0x03 ; '.'
0000000000026d77         db  0x43 ; 'C'
0000000000026d78         db  0x0e ; '.'
0000000000026d79         db  0x20 ; ' '
0000000000026d7a         db  0x83 ; '.'
0000000000026d7b         db  0x04 ; '.'
0000000000026d7c         db  0x02 ; '.'
0000000000026d7d         db  0xb9 ; '.'
0000000000026d7e         db  0x0e ; '.'
0000000000026d7f         db  0x18 ; '.'
0000000000026d80         db  0x41 ; 'A'
0000000000026d81         db  0x0e ; '.'
0000000000026d82         db  0x10 ; '.'
0000000000026d83         db  0x42 ; 'B'
0000000000026d84         db  0x0e ; '.'
0000000000026d85         db  0x08 ; '.'
0000000000026d86         db  0x00 ; '.'
0000000000026d87         db  0x00 ; '.'
0000000000026d88         dd         0x0000005c                                  ; Length of the record
0000000000026d8c         dd         0x00003364                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026d90         db         0x10, 0x77, 2 dup (0xff)                    ; begin 0x1e4a0
0000000000026d94         db         0x7f, 0x04, 2 dup (0x00)                    ; length 0x47f (end at 0x1e91f)
0000000000026d98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026d99         db  0x42 ; 'B'
0000000000026d9a         db  0x0e ; '.'
0000000000026d9b         db  0x10 ; '.'
0000000000026d9c         db  0x8f ; '.'
0000000000026d9d         db  0x02 ; '.'
0000000000026d9e         db  0x42 ; 'B'
0000000000026d9f         db  0x0e ; '.'
0000000000026da0         db  0x18 ; '.'
0000000000026da1         db  0x8e ; '.'
0000000000026da2         db  0x03 ; '.'
0000000000026da3         db  0x45 ; 'E'
0000000000026da4         db  0x0e ; '.'
0000000000026da5         db  0x20 ; ' '
0000000000026da6         db  0x8d ; '.'
0000000000026da7         db  0x04 ; '.'
0000000000026da8         db  0x42 ; 'B'
0000000000026da9         db  0x0e ; '.'
0000000000026daa         db  0x28 ; '('
0000000000026dab         db  0x8c ; '.'
0000000000026dac         db  0x05 ; '.'
0000000000026dad         db  0x44 ; 'D'
0000000000026dae         db  0x0e ; '.'
0000000000026daf         db  0x30 ; '0'
0000000000026db0         db  0x86 ; '.'
0000000000026db1         db  0x06 ; '.'
0000000000026db2         db  0x41 ; 'A'
0000000000026db3         db  0x0e ; '.'
0000000000026db4         db  0x38 ; '8'
0000000000026db5         db  0x83 ; '.'
0000000000026db6         db  0x07 ; '.'
0000000000026db7         db  0x44 ; 'D'
0000000000026db8         db  0x0e ; '.'
0000000000026db9         db  0x70 ; 'p'
0000000000026dba         db  0x02 ; '.'
0000000000026dbb         db  0xd4 ; '.'
0000000000026dbc         db  0x0e ; '.'
0000000000026dbd         db  0x78 ; 'x'
0000000000026dbe         db  0x4b ; 'K'
0000000000026dbf         db  0x0e ; '.'
0000000000026dc0         db  0x80 ; '.'
0000000000026dc1         db  0x01 ; '.'
0000000000026dc2         db  0x41 ; 'A'
0000000000026dc3         db  0x0e ; '.'
0000000000026dc4         db  0x88 ; '.'
0000000000026dc5         db  0x01 ; '.'
0000000000026dc6         db  0x42 ; 'B'
0000000000026dc7         db  0x0e ; '.'
0000000000026dc8         db  0x90 ; '.'
0000000000026dc9         db  0x01 ; '.'
0000000000026dca         db  0x5d ; ']'
0000000000026dcb         db  0x0e ; '.'
0000000000026dcc         db  0x70 ; 'p'
0000000000026dcd         db  0x63 ; 'c'
0000000000026dce         db  0x0a ; '.'
0000000000026dcf         db  0x0e ; '.'
0000000000026dd0         db  0x38 ; '8'
0000000000026dd1         db  0x44 ; 'D'
0000000000026dd2         db  0x0e ; '.'
0000000000026dd3         db  0x30 ; '0'
0000000000026dd4         db  0x41 ; 'A'
0000000000026dd5         db  0x0e ; '.'
0000000000026dd6         db  0x28 ; '('
0000000000026dd7         db  0x42 ; 'B'
0000000000026dd8         db  0x0e ; '.'
0000000000026dd9         db  0x20 ; ' '
0000000000026dda         db  0x42 ; 'B'
0000000000026ddb         db  0x0e ; '.'
0000000000026ddc         db  0x18 ; '.'
0000000000026ddd         db  0x42 ; 'B'
0000000000026dde         db  0x0e ; '.'
0000000000026ddf         db  0x10 ; '.'
0000000000026de0         db  0x42 ; 'B'
0000000000026de1         db  0x0e ; '.'
0000000000026de2         db  0x08 ; '.'
0000000000026de3         db  0x45 ; 'E'
0000000000026de4         db  0x0b ; '.'
0000000000026de5         db  0x00 ; '.'
0000000000026de6         db  0x00 ; '.'
0000000000026de7         db  0x00 ; '.'
0000000000026de8         dd         0x00000054                                  ; Length of the record
0000000000026dec         dd         0x000033c4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026df0         db         0x30, 0x7b, 2 dup (0xff)                    ; begin 0x1e920
0000000000026df4         db         0x1b, 0x01, 2 dup (0x00)                    ; length 0x11b (end at 0x1ea3b)
0000000000026df8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026df9         db  0x42 ; 'B'
0000000000026dfa         db  0x0e ; '.'
0000000000026dfb         db  0x10 ; '.'
0000000000026dfc         db  0x8f ; '.'
0000000000026dfd         db  0x02 ; '.'
0000000000026dfe         db  0x42 ; 'B'
0000000000026dff         db  0x0e ; '.'
0000000000026e00         db  0x18 ; '.'
0000000000026e01         db  0x8e ; '.'
0000000000026e02         db  0x03 ; '.'
0000000000026e03         db  0x42 ; 'B'
0000000000026e04         db  0x0e ; '.'
0000000000026e05         db  0x20 ; ' '
0000000000026e06         db  0x8d ; '.'
0000000000026e07         db  0x04 ; '.'
0000000000026e08         db  0x42 ; 'B'
0000000000026e09         db  0x0e ; '.'
0000000000026e0a         db  0x28 ; '('
0000000000026e0b         db  0x8c ; '.'
0000000000026e0c         db  0x05 ; '.'
0000000000026e0d         db  0x44 ; 'D'
0000000000026e0e         db  0x0e ; '.'
0000000000026e0f         db  0x30 ; '0'
0000000000026e10         db  0x86 ; '.'
0000000000026e11         db  0x06 ; '.'
0000000000026e12         db  0x41 ; 'A'
0000000000026e13         db  0x0e ; '.'
0000000000026e14         db  0x38 ; '8'
0000000000026e15         db  0x83 ; '.'
0000000000026e16         db  0x07 ; '.'
0000000000026e17         db  0x4d ; 'M'
0000000000026e18         db  0x0e ; '.'
0000000000026e19         db  0x60 ; '`'
0000000000026e1a         db  0x02 ; '.'
0000000000026e1b         db  0x5a ; 'Z'
0000000000026e1c         db  0x0e ; '.'
0000000000026e1d         db  0x68 ; 'h'
0000000000026e1e         db  0x44 ; 'D'
0000000000026e1f         db  0x0e ; '.'
0000000000026e20         db  0x70 ; 'p'
0000000000026e21         db  0x61 ; 'a'
0000000000026e22         db  0x0e ; '.'
0000000000026e23         db  0x68 ; 'h'
0000000000026e24         db  0x41 ; 'A'
0000000000026e25         db  0x0e ; '.'
0000000000026e26         db  0x60 ; '`'
0000000000026e27         db  0x44 ; 'D'
0000000000026e28         db  0x0a ; '.'
0000000000026e29         db  0x0e ; '.'
0000000000026e2a         db  0x38 ; '8'
0000000000026e2b         db  0x44 ; 'D'
0000000000026e2c         db  0x0e ; '.'
0000000000026e2d         db  0x30 ; '0'
0000000000026e2e         db  0x41 ; 'A'
0000000000026e2f         db  0x0e ; '.'
0000000000026e30         db  0x28 ; '('
0000000000026e31         db  0x42 ; 'B'
0000000000026e32         db  0x0e ; '.'
0000000000026e33         db  0x20 ; ' '
0000000000026e34         db  0x42 ; 'B'
0000000000026e35         db  0x0e ; '.'
0000000000026e36         db  0x18 ; '.'
0000000000026e37         db  0x42 ; 'B'
0000000000026e38         db  0x0e ; '.'
0000000000026e39         db  0x10 ; '.'
0000000000026e3a         db  0x42 ; 'B'
0000000000026e3b         db  0x0e ; '.'
0000000000026e3c         db  0x08 ; '.'
0000000000026e3d         db  0x45 ; 'E'
0000000000026e3e         db  0x0b ; '.'
0000000000026e3f         db  0x00 ; '.'
0000000000026e40         dd         0x00000048                                  ; Length of the record
0000000000026e44         dd         0x0000341c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026e48         db         0xf8, 0x7b, 2 dup (0xff)                    ; begin 0x1ea40
0000000000026e4c         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x1eb50)
0000000000026e50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026e51         db  0x44 ; 'D'
0000000000026e52         db  0x0e ; '.'
0000000000026e53         db  0x10 ; '.'
0000000000026e54         db  0x8e ; '.'
0000000000026e55         db  0x02 ; '.'
0000000000026e56         db  0x42 ; 'B'
0000000000026e57         db  0x0e ; '.'
0000000000026e58         db  0x18 ; '.'
0000000000026e59         db  0x8d ; '.'
0000000000026e5a         db  0x03 ; '.'
0000000000026e5b         db  0x45 ; 'E'
0000000000026e5c         db  0x0e ; '.'
0000000000026e5d         db  0x20 ; ' '
0000000000026e5e         db  0x8c ; '.'
0000000000026e5f         db  0x04 ; '.'
0000000000026e60         db  0x41 ; 'A'
0000000000026e61         db  0x0e ; '.'
0000000000026e62         db  0x28 ; '('
0000000000026e63         db  0x86 ; '.'
0000000000026e64         db  0x05 ; '.'
0000000000026e65         db  0x44 ; 'D'
0000000000026e66         db  0x0e ; '.'
0000000000026e67         db  0x30 ; '0'
0000000000026e68         db  0x83 ; '.'
0000000000026e69         db  0x06 ; '.'
0000000000026e6a         db  0x02 ; '.'
0000000000026e6b         db  0xad ; '.'
0000000000026e6c         db  0x0a ; '.'
0000000000026e6d         db  0x0e ; '.'
0000000000026e6e         db  0x28 ; '('
0000000000026e6f         db  0x43 ; 'C'
0000000000026e70         db  0x0e ; '.'
0000000000026e71         db  0x20 ; ' '
0000000000026e72         db  0x42 ; 'B'
0000000000026e73         db  0x0e ; '.'
0000000000026e74         db  0x18 ; '.'
0000000000026e75         db  0x42 ; 'B'
0000000000026e76         db  0x0e ; '.'
0000000000026e77         db  0x10 ; '.'
0000000000026e78         db  0x42 ; 'B'
0000000000026e79         db  0x0e ; '.'
0000000000026e7a         db  0x08 ; '.'
0000000000026e7b         db  0x4a ; 'J'
0000000000026e7c         db  0x0b ; '.'
0000000000026e7d         db  0x76 ; 'v'
0000000000026e7e         db  0x0e ; '.'
0000000000026e7f         db  0x28 ; '('
0000000000026e80         db  0x43 ; 'C'
0000000000026e81         db  0x0e ; '.'
0000000000026e82         db  0x20 ; ' '
0000000000026e83         db  0x42 ; 'B'
0000000000026e84         db  0x0e ; '.'
0000000000026e85         db  0x18 ; '.'
0000000000026e86         db  0x42 ; 'B'
0000000000026e87         db  0x0e ; '.'
0000000000026e88         db  0x10 ; '.'
0000000000026e89         db  0x42 ; 'B'
0000000000026e8a         db  0x0e ; '.'
0000000000026e8b         db  0x08 ; '.'
0000000000026e8c         dd         0x00000038                                  ; Length of the record
0000000000026e90         dd         0x00003468                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026e94         db         0xbc, 0x7c, 2 dup (0xff)                    ; begin 0x1eb50
0000000000026e98         db         0x85, 3 dup (0x00)                          ; length 0x85 (end at 0x1ebd5)
0000000000026e9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026e9d         db  0x42 ; 'B'
0000000000026e9e         db  0x0e ; '.'
0000000000026e9f         db  0x10 ; '.'
0000000000026ea0         db  0x8d ; '.'
0000000000026ea1         db  0x02 ; '.'
0000000000026ea2         db  0x42 ; 'B'
0000000000026ea3         db  0x0e ; '.'
0000000000026ea4         db  0x18 ; '.'
0000000000026ea5         db  0x8c ; '.'
0000000000026ea6         db  0x03 ; '.'
0000000000026ea7         db  0x41 ; 'A'
0000000000026ea8         db  0x0e ; '.'
0000000000026ea9         db  0x20 ; ' '
0000000000026eaa         db  0x86 ; '.'
0000000000026eab         db  0x04 ; '.'
0000000000026eac         db  0x41 ; 'A'
0000000000026ead         db  0x0e ; '.'
0000000000026eae         db  0x28 ; '('
0000000000026eaf         db  0x83 ; '.'
0000000000026eb0         db  0x05 ; '.'
0000000000026eb1         db  0x44 ; 'D'
0000000000026eb2         db  0x0e ; '.'
0000000000026eb3         db  0x30 ; '0'
0000000000026eb4         db  0x02 ; '.'
0000000000026eb5         db  0x57 ; 'W'
0000000000026eb6         db  0x0a ; '.'
0000000000026eb7         db  0x0e ; '.'
0000000000026eb8         db  0x28 ; '('
0000000000026eb9         db  0x44 ; 'D'
0000000000026eba         db  0x0e ; '.'
0000000000026ebb         db  0x20 ; ' '
0000000000026ebc         db  0x41 ; 'A'
0000000000026ebd         db  0x0e ; '.'
0000000000026ebe         db  0x18 ; '.'
0000000000026ebf         db  0x42 ; 'B'
0000000000026ec0         db  0x0e ; '.'
0000000000026ec1         db  0x10 ; '.'
0000000000026ec2         db  0x42 ; 'B'
0000000000026ec3         db  0x0e ; '.'
0000000000026ec4         db  0x08 ; '.'
0000000000026ec5         db  0x46 ; 'F'
0000000000026ec6         db  0x0b ; '.'
0000000000026ec7         db  0x00 ; '.'
0000000000026ec8         dd         0x00000018                                  ; Length of the record
0000000000026ecc         dd         0x000034a4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026ed0         db         0x10, 0x7d, 2 dup (0xff)                    ; begin 0x1ebe0
0000000000026ed4         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x1ec24)
0000000000026ed8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026ed9         db  0x41 ; 'A'
0000000000026eda         db  0x0e ; '.'
0000000000026edb         db  0x10 ; '.'
0000000000026edc         db  0x83 ; '.'
0000000000026edd         db  0x02 ; '.'
0000000000026ede         db  0x02 ; '.'
0000000000026edf         db  0x42 ; 'B'
0000000000026ee0         db  0x0e ; '.'
0000000000026ee1         db  0x08 ; '.'
0000000000026ee2         db  0x00 ; '.'
0000000000026ee3         db  0x00 ; '.'
0000000000026ee4         dd         0x00000058                                  ; Length of the record
0000000000026ee8         dd         0x000034c0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026eec         db         0x44, 0x7d, 2 dup (0xff)                    ; begin 0x1ec30
0000000000026ef0         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x1ecce)
0000000000026ef4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026ef5         db  0x4f ; 'O'
0000000000026ef6         db  0x0e ; '.'
0000000000026ef7         db  0x10 ; '.'
0000000000026ef8         db  0x8d ; '.'
0000000000026ef9         db  0x02 ; '.'
0000000000026efa         db  0x42 ; 'B'
0000000000026efb         db  0x0e ; '.'
0000000000026efc         db  0x18 ; '.'
0000000000026efd         db  0x8c ; '.'
0000000000026efe         db  0x03 ; '.'
0000000000026eff         db  0x44 ; 'D'
0000000000026f00         db  0x0e ; '.'
0000000000026f01         db  0x20 ; ' '
0000000000026f02         db  0x86 ; '.'
0000000000026f03         db  0x04 ; '.'
0000000000026f04         db  0x41 ; 'A'
0000000000026f05         db  0x0e ; '.'
0000000000026f06         db  0x28 ; '('
0000000000026f07         db  0x83 ; '.'
0000000000026f08         db  0x05 ; '.'
0000000000026f09         db  0x4d ; 'M'
0000000000026f0a         db  0x0e ; '.'
0000000000026f0b         db  0x40 ; '@'
0000000000026f0c         db  0x67 ; 'g'
0000000000026f0d         db  0x0e ; '.'
0000000000026f0e         db  0x48 ; 'H'
0000000000026f0f         db  0x41 ; 'A'
0000000000026f10         db  0x0e ; '.'
0000000000026f11         db  0x50 ; 'P'
0000000000026f12         db  0x42 ; 'B'
0000000000026f13         db  0x0e ; '.'
0000000000026f14         db  0x58 ; 'X'
0000000000026f15         db  0x42 ; 'B'
0000000000026f16         db  0x0e ; '.'
0000000000026f17         db  0x60 ; '`'
0000000000026f18         db  0x52 ; 'R'
0000000000026f19         db  0x0e ; '.'
0000000000026f1a         db  0x40 ; '@'
0000000000026f1b         db  0x49 ; 'I'
0000000000026f1c         db  0x0a ; '.'
0000000000026f1d         db  0x0e ; '.'
0000000000026f1e         db  0x28 ; '('
0000000000026f1f         db  0x41 ; 'A'
0000000000026f20         db  0x0e ; '.'
0000000000026f21         db  0x20 ; ' '
0000000000026f22         db  0x44 ; 'D'
0000000000026f23         db  0x0e ; '.'
0000000000026f24         db  0x18 ; '.'
0000000000026f25         db  0x42 ; 'B'
0000000000026f26         db  0x0e ; '.'
0000000000026f27         db  0x10 ; '.'
0000000000026f28         db  0x42 ; 'B'
0000000000026f29         db  0x0e ; '.'
0000000000026f2a         db  0x08 ; '.'
0000000000026f2b         db  0x45 ; 'E'
0000000000026f2c         db  0x0b ; '.'
0000000000026f2d         db  0x52 ; 'R'
0000000000026f2e         db  0x0e ; '.'
0000000000026f2f         db  0x48 ; 'H'
0000000000026f30         db  0x41 ; 'A'
0000000000026f31         db  0x0e ; '.'
0000000000026f32         db  0x50 ; 'P'
0000000000026f33         db  0x42 ; 'B'
0000000000026f34         db  0x0e ; '.'
0000000000026f35         db  0x58 ; 'X'
0000000000026f36         db  0x42 ; 'B'
0000000000026f37         db  0x0e ; '.'
0000000000026f38         db  0x60 ; '`'
0000000000026f39         db  0x49 ; 'I'
0000000000026f3a         db  0x0e ; '.'
0000000000026f3b         db  0x08 ; '.'
0000000000026f3c         db  0xc3 ; '.'
0000000000026f3d         db  0xc6 ; '.'
0000000000026f3e         db  0xcc ; '.'
0000000000026f3f         db  0xcd ; '.'
0000000000026f40         dd         0x0000001c                                  ; Length of the record
0000000000026f44         dd         0x0000351c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026f48         db         0x88, 0x7d, 2 dup (0xff)                    ; begin 0x1ecd0
0000000000026f4c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x1ece8)
0000000000026f50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026f51         db  0x44 ; 'D'
0000000000026f52         db  0x0e ; '.'
0000000000026f53         db  0x10 ; '.'
0000000000026f54         db  0x45 ; 'E'
0000000000026f55         db  0x0e ; '.'
0000000000026f56         db  0x18 ; '.'
0000000000026f57         db  0x42 ; 'B'
0000000000026f58         db  0x0e ; '.'
0000000000026f59         db  0x20 ; ' '
0000000000026f5a         db  0x4c ; 'L'
0000000000026f5b         db  0x0e ; '.'
0000000000026f5c         db  0x08 ; '.'
0000000000026f5d         db  0x00 ; '.'
0000000000026f5e         db  0x00 ; '.'
0000000000026f5f         db  0x00 ; '.'
0000000000026f60         dd         0x0000001c                                  ; Length of the record
0000000000026f64         dd         0x0000353c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026f68         db         0x88, 0x7d, 2 dup (0xff)                    ; begin 0x1ecf0
0000000000026f6c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x1ed05)
0000000000026f70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026f71         db  0x44 ; 'D'
0000000000026f72         db  0x0e ; '.'
0000000000026f73         db  0x10 ; '.'
0000000000026f74         db  0x42 ; 'B'
0000000000026f75         db  0x0e ; '.'
0000000000026f76         db  0x18 ; '.'
0000000000026f77         db  0x42 ; 'B'
0000000000026f78         db  0x0e ; '.'
0000000000026f79         db  0x20 ; ' '
0000000000026f7a         db  0x4c ; 'L'
0000000000026f7b         db  0x0e ; '.'
0000000000026f7c         db  0x08 ; '.'
0000000000026f7d         db  0x00 ; '.'
0000000000026f7e         db  0x00 ; '.'
0000000000026f7f         db  0x00 ; '.'
0000000000026f80         dd         0x00000020                                  ; Length of the record
0000000000026f84         dd         0x0000355c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026f88         db         0x88, 0x7d, 2 dup (0xff)                    ; begin 0x1ed10
0000000000026f8c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x1ed2a)
0000000000026f90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026f91         db  0x44 ; 'D'
0000000000026f92         db  0x0e ; '.'
0000000000026f93         db  0x10 ; '.'
0000000000026f94         db  0x42 ; 'B'
0000000000026f95         db  0x0e ; '.'
0000000000026f96         db  0x18 ; '.'
0000000000026f97         db  0x44 ; 'D'
0000000000026f98         db  0x0e ; '.'
0000000000026f99         db  0x20 ; ' '
0000000000026f9a         db  0x44 ; 'D'
0000000000026f9b         db  0x0e ; '.'
0000000000026f9c         db  0x28 ; '('
0000000000026f9d         db  0x42 ; 'B'
0000000000026f9e         db  0x0e ; '.'
0000000000026f9f         db  0x30 ; '0'
0000000000026fa0         db  0x49 ; 'I'
0000000000026fa1         db  0x0e ; '.'
0000000000026fa2         db  0x08 ; '.'
0000000000026fa3         db  0x00 ; '.'
0000000000026fa4         dd         0x00000020                                  ; Length of the record
0000000000026fa8         dd         0x00003580                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026fac         db         0x84, 0x7d, 2 dup (0xff)                    ; begin 0x1ed30
0000000000026fb0         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x1ed4c)
0000000000026fb4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026fb5         db  0x44 ; 'D'
0000000000026fb6         db  0x0e ; '.'
0000000000026fb7         db  0x10 ; '.'
0000000000026fb8         db  0x42 ; 'B'
0000000000026fb9         db  0x0e ; '.'
0000000000026fba         db  0x18 ; '.'
0000000000026fbb         db  0x44 ; 'D'
0000000000026fbc         db  0x0e ; '.'
0000000000026fbd         db  0x20 ; ' '
0000000000026fbe         db  0x44 ; 'D'
0000000000026fbf         db  0x0e ; '.'
0000000000026fc0         db  0x28 ; '('
0000000000026fc1         db  0x44 ; 'D'
0000000000026fc2         db  0x0e ; '.'
0000000000026fc3         db  0x30 ; '0'
0000000000026fc4         db  0x49 ; 'I'
0000000000026fc5         db  0x0e ; '.'
0000000000026fc6         db  0x08 ; '.'
0000000000026fc7         db  0x00 ; '.'
0000000000026fc8         dd         0x00000014                                  ; Length of the record
0000000000026fcc         dd         0x000035a4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026fd0         db         0x80, 0x7d, 2 dup (0xff)                    ; begin 0x1ed50
0000000000026fd4         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x1ed91)
0000000000026fd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026fd9         align      32
0000000000026fe0         dd         0x00000010                                  ; Length of the record
0000000000026fe4         dd         0x000035bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026fe8         db         0xb8, 0x7d, 2 dup (0xff)                    ; begin 0x1eda0
0000000000026fec         db         0x2c, 3 dup (0x00)                          ; length 0x2c (end at 0x1edcc)
0000000000026ff0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000026ff1         align      4
0000000000026ff4         dd         0x00000018                                  ; Length of the record
0000000000026ff8         dd         0x000035d0                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000026ffc         db         0xd4, 0x7d, 2 dup (0xff)                    ; begin 0x1edd0
0000000000027000         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0x1edfa)
0000000000027004         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027005         db  0x46 ; 'F'
0000000000027006         db  0x0e ; '.'
0000000000027007         db  0x10 ; '.'
0000000000027008         db  0x83 ; '.'
0000000000027009         db  0x02 ; '.'
000000000002700a         db  0x5b ; '['
000000000002700b         db  0x0e ; '.'
000000000002700c         db  0x08 ; '.'
000000000002700d         db  0x47 ; 'G'
000000000002700e         db  0xc3 ; '.'
000000000002700f         db  0x00 ; '.'
0000000000027010         dd         0x00000038                                  ; Length of the record
0000000000027014         dd         0x000035ec                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027018         db         0xe8, 0x7d, 2 dup (0xff)                    ; begin 0x1ee00
000000000002701c         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0x1ee5d)
0000000000027020         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027021         db  0x42 ; 'B'
0000000000027022         db  0x0e ; '.'
0000000000027023         db  0x10 ; '.'
0000000000027024         db  0x8d ; '.'
0000000000027025         db  0x02 ; '.'
0000000000027026         db  0x42 ; 'B'
0000000000027027         db  0x0e ; '.'
0000000000027028         db  0x18 ; '.'
0000000000027029         db  0x8c ; '.'
000000000002702a         db  0x03 ; '.'
000000000002702b         db  0x41 ; 'A'
000000000002702c         db  0x0e ; '.'
000000000002702d         db  0x20 ; ' '
000000000002702e         db  0x86 ; '.'
000000000002702f         db  0x04 ; '.'
0000000000027030         db  0x41 ; 'A'
0000000000027031         db  0x0e ; '.'
0000000000027032         db  0x28 ; '('
0000000000027033         db  0x83 ; '.'
0000000000027034         db  0x05 ; '.'
0000000000027035         db  0x47 ; 'G'
0000000000027036         db  0x0e ; '.'
0000000000027037         db  0x30 ; '0'
0000000000027038         db  0x75 ; 'u'
0000000000027039         db  0x0a ; '.'
000000000002703a         db  0x0e ; '.'
000000000002703b         db  0x28 ; '('
000000000002703c         db  0x44 ; 'D'
000000000002703d         db  0x0e ; '.'
000000000002703e         db  0x20 ; ' '
000000000002703f         db  0x41 ; 'A'
0000000000027040         db  0x0e ; '.'
0000000000027041         db  0x18 ; '.'
0000000000027042         db  0x42 ; 'B'
0000000000027043         db  0x0e ; '.'
0000000000027044         db  0x10 ; '.'
0000000000027045         db  0x42 ; 'B'
0000000000027046         db  0x0e ; '.'
0000000000027047         db  0x08 ; '.'
0000000000027048         db  0x45 ; 'E'
0000000000027049         db  0x0b ; '.'
000000000002704a         db  0x00 ; '.'
000000000002704b         db  0x00 ; '.'
000000000002704c         dd         0x00000034                                  ; Length of the record
0000000000027050         dd         0x00003628                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027054         db         0x0c, 0x7e, 2 dup (0xff)                    ; begin 0x1ee60
0000000000027058         db         0x8f, 3 dup (0x00)                          ; length 0x8f (end at 0x1eeef)
000000000002705c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000002705d         db  0x45 ; 'E'
000000000002705e         db  0x0e ; '.'
000000000002705f         db  0x10 ; '.'
0000000000027060         db  0x8c ; '.'
0000000000027061         db  0x02 ; '.'
0000000000027062         db  0x41 ; 'A'
0000000000027063         db  0x0e ; '.'
0000000000027064         db  0x18 ; '.'
0000000000027065         db  0x86 ; '.'
0000000000027066         db  0x03 ; '.'
0000000000027067         db  0x41 ; 'A'
0000000000027068         db  0x0e ; '.'
0000000000027069         db  0x20 ; ' '
000000000002706a         db  0x83 ; '.'
000000000002706b         db  0x04 ; '.'
000000000002706c         db  0x02 ; '.'
000000000002706d         db  0x58 ; 'X'
000000000002706e         db  0x0a ; '.'
000000000002706f         db  0x0e ; '.'
0000000000027070         db  0x18 ; '.'
0000000000027071         db  0x41 ; 'A'
0000000000027072         db  0x0e ; '.'
0000000000027073         db  0x10 ; '.'
0000000000027074         db  0x42 ; 'B'
0000000000027075         db  0x0e ; '.'
0000000000027076         db  0x08 ; '.'
0000000000027077         db  0x46 ; 'F'
0000000000027078         db  0x0b ; '.'
0000000000027079         db  0x63 ; 'c'
000000000002707a         db  0x0e ; '.'
000000000002707b         db  0x18 ; '.'
000000000002707c         db  0x41 ; 'A'
000000000002707d         db  0x0e ; '.'
000000000002707e         db  0x10 ; '.'
000000000002707f         db  0x42 ; 'B'
0000000000027080         db  0x0e ; '.'
0000000000027081         db  0x08 ; '.'
0000000000027082         db  0x00 ; '.'
0000000000027083         db  0x00 ; '.'
0000000000027084         dd         0x00000048                                  ; Length of the record
0000000000027088         dd         0x00003660                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002708c         db         0x64, 0x7e, 2 dup (0xff)                    ; begin 0x1eef0
0000000000027090         db         0x36, 0x01, 2 dup (0x00)                    ; length 0x136 (end at 0x1f026)
0000000000027094         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027095         db  0x42 ; 'B'
0000000000027096         db  0x0e ; '.'
0000000000027097         db  0x10 ; '.'
0000000000027098         db  0x8f ; '.'
0000000000027099         db  0x02 ; '.'
000000000002709a         db  0x42 ; 'B'
000000000002709b         db  0x0e ; '.'
000000000002709c         db  0x18 ; '.'
000000000002709d         db  0x8e ; '.'
000000000002709e         db  0x03 ; '.'
000000000002709f         db  0x47 ; 'G'
00000000000270a0         db  0x0e ; '.'
00000000000270a1         db  0x20 ; ' '
00000000000270a2         db  0x8d ; '.'
00000000000270a3         db  0x04 ; '.'
00000000000270a4         db  0x42 ; 'B'
00000000000270a5         db  0x0e ; '.'
00000000000270a6         db  0x28 ; '('
00000000000270a7         db  0x8c ; '.'
00000000000270a8         db  0x05 ; '.'
00000000000270a9         db  0x41 ; 'A'
00000000000270aa         db  0x0e ; '.'
00000000000270ab         db  0x30 ; '0'
00000000000270ac         db  0x86 ; '.'
00000000000270ad         db  0x06 ; '.'
00000000000270ae         db  0x41 ; 'A'
00000000000270af         db  0x0e ; '.'
00000000000270b0         db  0x38 ; '8'
00000000000270b1         db  0x83 ; '.'
00000000000270b2         db  0x07 ; '.'
00000000000270b3         db  0x44 ; 'D'
00000000000270b4         db  0x0e ; '.'
00000000000270b5         db  0x40 ; '@'
00000000000270b6         db  0x02 ; '.'
00000000000270b7         db  0xa1 ; '.'
00000000000270b8         db  0x0a ; '.'
00000000000270b9         db  0x0e ; '.'
00000000000270ba         db  0x38 ; '8'
00000000000270bb         db  0x41 ; 'A'
00000000000270bc         db  0x0e ; '.'
00000000000270bd         db  0x30 ; '0'
00000000000270be         db  0x41 ; 'A'
00000000000270bf         db  0x0e ; '.'
00000000000270c0         db  0x28 ; '('
00000000000270c1         db  0x42 ; 'B'
00000000000270c2         db  0x0e ; '.'
00000000000270c3         db  0x20 ; ' '
00000000000270c4         db  0x42 ; 'B'
00000000000270c5         db  0x0e ; '.'
00000000000270c6         db  0x18 ; '.'
00000000000270c7         db  0x42 ; 'B'
00000000000270c8         db  0x0e ; '.'
00000000000270c9         db  0x10 ; '.'
00000000000270ca         db  0x42 ; 'B'
00000000000270cb         db  0x0e ; '.'
00000000000270cc         db  0x08 ; '.'
00000000000270cd         db  0x42 ; 'B'
00000000000270ce         db  0x0b ; '.'
00000000000270cf         db  0x00 ; '.'
00000000000270d0         dd         0x00000050                                  ; Length of the record
00000000000270d4         dd         0x000036ac                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000270d8         db         0x58, 0x7f, 2 dup (0xff)                    ; begin 0x1f030
00000000000270dc         db         0xdf, 3 dup (0x00)                          ; length 0xdf (end at 0x1f10f)
00000000000270e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000270e1         db  0x42 ; 'B'
00000000000270e2         db  0x0e ; '.'
00000000000270e3         db  0x10 ; '.'
00000000000270e4         db  0x8c ; '.'
00000000000270e5         db  0x02 ; '.'
00000000000270e6         db  0x41 ; 'A'
00000000000270e7         db  0x0e ; '.'
00000000000270e8         db  0x18 ; '.'
00000000000270e9         db  0x86 ; '.'
00000000000270ea         db  0x03 ; '.'
00000000000270eb         db  0x44 ; 'D'
00000000000270ec         db  0x0e ; '.'
00000000000270ed         db  0x20 ; ' '
00000000000270ee         db  0x83 ; '.'
00000000000270ef         db  0x04 ; '.'
00000000000270f0         db  0x4b ; 'K'
00000000000270f1         db  0x0e ; '.'
00000000000270f2         db  0x30 ; '0'
00000000000270f3         db  0x02 ; '.'
00000000000270f4         db  0x6f ; 'o'
00000000000270f5         db  0x0a ; '.'
00000000000270f6         db  0x0e ; '.'
00000000000270f7         db  0x20 ; ' '
00000000000270f8         db  0x44 ; 'D'
00000000000270f9         db  0x0e ; '.'
00000000000270fa         db  0x18 ; '.'
00000000000270fb         db  0x41 ; 'A'
00000000000270fc         db  0x0e ; '.'
00000000000270fd         db  0x10 ; '.'
00000000000270fe         db  0x42 ; 'B'
00000000000270ff         db  0x0e ; '.'
0000000000027100         db  0x08 ; '.'
0000000000027101         db  0x48 ; 'H'
0000000000027102         db  0x0b ; '.'
0000000000027103         db  0x5a ; 'Z'
0000000000027104         db  0x0a ; '.'
0000000000027105         db  0x0e ; '.'
0000000000027106         db  0x20 ; ' '
0000000000027107         db  0x44 ; 'D'
0000000000027108         db  0x0e ; '.'
0000000000027109         db  0x18 ; '.'
000000000002710a         db  0x41 ; 'A'
000000000002710b         db  0x0e ; '.'
000000000002710c         db  0x10 ; '.'
000000000002710d         db  0x42 ; 'B'
000000000002710e         db  0x0e ; '.'
000000000002710f         db  0x08 ; '.'
0000000000027110         db  0x47 ; 'G'
0000000000027111         db  0x0b ; '.'
0000000000027112         db  0x54 ; 'T'
0000000000027113         db  0x0a ; '.'
0000000000027114         db  0x0e ; '.'
0000000000027115         db  0x20 ; ' '
0000000000027116         db  0x44 ; 'D'
0000000000027117         db  0x0e ; '.'
0000000000027118         db  0x18 ; '.'
0000000000027119         db  0x41 ; 'A'
000000000002711a         db  0x0e ; '.'
000000000002711b         db  0x10 ; '.'
000000000002711c         db  0x42 ; 'B'
000000000002711d         db  0x0e ; '.'
000000000002711e         db  0x08 ; '.'
000000000002711f         db  0x45 ; 'E'
0000000000027120         db  0x0b ; '.'
0000000000027121         db  0x00 ; '.'
0000000000027122         db  0x00 ; '.'
0000000000027123         db  0x00 ; '.'
0000000000027124         dd         0x00000010                                  ; Length of the record
0000000000027128         dd         0x00003700                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002712c         db         0xe4, 0x7f, 2 dup (0xff)                    ; begin 0x1f110
0000000000027130         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x1f11c)
0000000000027134         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027135         align      8
0000000000027138         dd         0x0000005c                                  ; Length of the record
000000000002713c         dd         0x00003714                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027140         db         0xe0, 0x7f, 2 dup (0xff)                    ; begin 0x1f120
0000000000027144         db         0xa3, 3 dup (0x00)                          ; length 0xa3 (end at 0x1f1c3)
0000000000027148         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027149         db  0x42 ; 'B'
000000000002714a         db  0x0e ; '.'
000000000002714b         db  0x10 ; '.'
000000000002714c         db  0x8d ; '.'
000000000002714d         db  0x02 ; '.'
000000000002714e         db  0x42 ; 'B'
000000000002714f         db  0x0e ; '.'
0000000000027150         db  0x18 ; '.'
0000000000027151         db  0x8c ; '.'
0000000000027152         db  0x03 ; '.'
0000000000027153         db  0x41 ; 'A'
0000000000027154         db  0x0e ; '.'
0000000000027155         db  0x20 ; ' '
0000000000027156         db  0x86 ; '.'
0000000000027157         db  0x04 ; '.'
0000000000027158         db  0x41 ; 'A'
0000000000027159         db  0x0e ; '.'
000000000002715a         db  0x28 ; '('
000000000002715b         db  0x83 ; '.'
000000000002715c         db  0x05 ; '.'
000000000002715d         db  0x47 ; 'G'
000000000002715e         db  0x0e ; '.'
000000000002715f         db  0x30 ; '0'
0000000000027160         db  0x02 ; '.'
0000000000027161         db  0x41 ; 'A'
0000000000027162         db  0x0a ; '.'
0000000000027163         db  0x0e ; '.'
0000000000027164         db  0x28 ; '('
0000000000027165         db  0x44 ; 'D'
0000000000027166         db  0x0e ; '.'
0000000000027167         db  0x20 ; ' '
0000000000027168         db  0x41 ; 'A'
0000000000027169         db  0x0e ; '.'
000000000002716a         db  0x18 ; '.'
000000000002716b         db  0x42 ; 'B'
000000000002716c         db  0x0e ; '.'
000000000002716d         db  0x10 ; '.'
000000000002716e         db  0x42 ; 'B'
000000000002716f         db  0x0e ; '.'
0000000000027170         db  0x08 ; '.'
0000000000027171         db  0x49 ; 'I'
0000000000027172         db  0x0b ; '.'
0000000000027173         db  0x52 ; 'R'
0000000000027174         db  0x0a ; '.'
0000000000027175         db  0x0e ; '.'
0000000000027176         db  0x28 ; '('
0000000000027177         db  0x43 ; 'C'
0000000000027178         db  0x0e ; '.'
0000000000027179         db  0x20 ; ' '
000000000002717a         db  0x41 ; 'A'
000000000002717b         db  0x0e ; '.'
000000000002717c         db  0x18 ; '.'
000000000002717d         db  0x42 ; 'B'
000000000002717e         db  0x0e ; '.'
000000000002717f         db  0x10 ; '.'
0000000000027180         db  0x42 ; 'B'
0000000000027181         db  0x0e ; '.'
0000000000027182         db  0x08 ; '.'
0000000000027183         db  0x46 ; 'F'
0000000000027184         db  0x0b ; '.'
0000000000027185         db  0x44 ; 'D'
0000000000027186         db  0x0a ; '.'
0000000000027187         db  0x0e ; '.'
0000000000027188         db  0x28 ; '('
0000000000027189         db  0x47 ; 'G'
000000000002718a         db  0x0e ; '.'
000000000002718b         db  0x20 ; ' '
000000000002718c         db  0x41 ; 'A'
000000000002718d         db  0x0e ; '.'
000000000002718e         db  0x18 ; '.'
000000000002718f         db  0x42 ; 'B'
0000000000027190         db  0x0e ; '.'
0000000000027191         db  0x10 ; '.'
0000000000027192         db  0x42 ; 'B'
0000000000027193         db  0x0e ; '.'
0000000000027194         db  0x08 ; '.'
0000000000027195         db  0x45 ; 'E'
0000000000027196         db  0x0b ; '.'
0000000000027197         db  0x00 ; '.'
0000000000027198         dd         0x00000034                                  ; Length of the record
000000000002719c         dd         0x00003774                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000271a0         db         0x30, 0x80, 2 dup (0xff)                    ; begin 0x1f1d0
00000000000271a4         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0x1f311)
00000000000271a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000271a9         db  0x42 ; 'B'
00000000000271aa         db  0x0e ; '.'
00000000000271ab         db  0x10 ; '.'
00000000000271ac         db  0x8c ; '.'
00000000000271ad         db  0x02 ; '.'
00000000000271ae         db  0x41 ; 'A'
00000000000271af         db  0x0e ; '.'
00000000000271b0         db  0x18 ; '.'
00000000000271b1         db  0x86 ; '.'
00000000000271b2         db  0x03 ; '.'
00000000000271b3         db  0x41 ; 'A'
00000000000271b4         db  0x0e ; '.'
00000000000271b5         db  0x20 ; ' '
00000000000271b6         db  0x83 ; '.'
00000000000271b7         db  0x04 ; '.'
00000000000271b8         db  0x47 ; 'G'
00000000000271b9         db  0x0e ; '.'
00000000000271ba         db  0x70 ; 'p'
00000000000271bb         db  0x02 ; '.'
00000000000271bc         db  0x8b ; '.'
00000000000271bd         db  0x0a ; '.'
00000000000271be         db  0x0e ; '.'
00000000000271bf         db  0x20 ; ' '
00000000000271c0         db  0x41 ; 'A'
00000000000271c1         db  0x0e ; '.'
00000000000271c2         db  0x18 ; '.'
00000000000271c3         db  0x41 ; 'A'
00000000000271c4         db  0x0e ; '.'
00000000000271c5         db  0x10 ; '.'
00000000000271c6         db  0x42 ; 'B'
00000000000271c7         db  0x0e ; '.'
00000000000271c8         db  0x08 ; '.'
00000000000271c9         db  0x46 ; 'F'
00000000000271ca         db  0x0b ; '.'
00000000000271cb         db  0x00 ; '.'
00000000000271cc         db  0x00 ; '.'
00000000000271cd         db  0x00 ; '.'
00000000000271ce         db  0x00 ; '.'
00000000000271cf         db  0x00 ; '.'
00000000000271d0         dd         0x0000004c                                  ; Length of the record
00000000000271d4         dd         0x000037ac                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000271d8         db         0x48, 0x81, 2 dup (0xff)                    ; begin 0x1f320
00000000000271dc         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x1f39d)
00000000000271e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000271e1         db  0x42 ; 'B'
00000000000271e2         db  0x0e ; '.'
00000000000271e3         db  0x10 ; '.'
00000000000271e4         db  0x8c ; '.'
00000000000271e5         db  0x02 ; '.'
00000000000271e6         db  0x41 ; 'A'
00000000000271e7         db  0x0e ; '.'
00000000000271e8         db  0x18 ; '.'
00000000000271e9         db  0x86 ; '.'
00000000000271ea         db  0x03 ; '.'
00000000000271eb         db  0x44 ; 'D'
00000000000271ec         db  0x0e ; '.'
00000000000271ed         db  0x20 ; ' '
00000000000271ee         db  0x83 ; '.'
00000000000271ef         db  0x04 ; '.'
00000000000271f0         db  0x69 ; 'i'
00000000000271f1         db  0x0a ; '.'
00000000000271f2         db  0x0e ; '.'
00000000000271f3         db  0x18 ; '.'
00000000000271f4         db  0x41 ; 'A'
00000000000271f5         db  0x0e ; '.'
00000000000271f6         db  0x10 ; '.'
00000000000271f7         db  0x42 ; 'B'
00000000000271f8         db  0x0e ; '.'
00000000000271f9         db  0x08 ; '.'
00000000000271fa         db  0x45 ; 'E'
00000000000271fb         db  0x0b ; '.'
00000000000271fc         db  0x55 ; 'U'
00000000000271fd         db  0x0a ; '.'
00000000000271fe         db  0x0e ; '.'
00000000000271ff         db  0x18 ; '.'
0000000000027200         db  0x41 ; 'A'
0000000000027201         db  0x0e ; '.'
0000000000027202         db  0x10 ; '.'
0000000000027203         db  0x42 ; 'B'
0000000000027204         db  0x0e ; '.'
0000000000027205         db  0x08 ; '.'
0000000000027206         db  0x48 ; 'H'
0000000000027207         db  0x0b ; '.'
0000000000027208         db  0x41 ; 'A'
0000000000027209         db  0x0a ; '.'
000000000002720a         db  0x0e ; '.'
000000000002720b         db  0x18 ; '.'
000000000002720c         db  0x46 ; 'F'
000000000002720d         db  0x0e ; '.'
000000000002720e         db  0x10 ; '.'
000000000002720f         db  0x42 ; 'B'
0000000000027210         db  0x0e ; '.'
0000000000027211         db  0x08 ; '.'
0000000000027212         db  0x47 ; 'G'
0000000000027213         db  0x0b ; '.'
0000000000027214         db  0x49 ; 'I'
0000000000027215         db  0x0e ; '.'
0000000000027216         db  0x18 ; '.'
0000000000027217         db  0x41 ; 'A'
0000000000027218         db  0x0e ; '.'
0000000000027219         db  0x10 ; '.'
000000000002721a         db  0x42 ; 'B'
000000000002721b         db  0x0e ; '.'
000000000002721c         db  0x08 ; '.'
000000000002721d         db  0x00 ; '.'
000000000002721e         db  0x00 ; '.'
000000000002721f         db  0x00 ; '.'
0000000000027220         dd         0x00000010                                  ; Length of the record
0000000000027224         dd         0x000037fc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027228         db         0x78, 0x81, 2 dup (0xff)                    ; begin 0x1f3a0
000000000002722c         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x1f3b0)
0000000000027230         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027231         align      4
0000000000027234         dd         0x00000018                                  ; Length of the record
0000000000027238         dd         0x00003810                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
000000000002723c         db         0x74, 0x81, 2 dup (0xff)                    ; begin 0x1f3b0
0000000000027240         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x1f43a)
0000000000027244         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027245         db  0x02 ; '.'
0000000000027246         db  0x80 ; '.'
0000000000027247         db  0x0e ; '.'
0000000000027248         db  0x10 ; '.'
0000000000027249         db  0x00 ; '.'
000000000002724a         db  0x00 ; '.'
000000000002724b         db  0x00 ; '.'
000000000002724c         db  0x00 ; '.'
000000000002724d         db  0x00 ; '.'
000000000002724e         db  0x00 ; '.'
000000000002724f         db  0x00 ; '.'
0000000000027250         dd         0x0000001c                                  ; Length of the record
0000000000027254         dd         0x0000382c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027258         db         0xe8, 0x81, 2 dup (0xff)                    ; begin 0x1f440
000000000002725c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x1f4ae)
0000000000027260         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027261         db  0x44 ; 'D'
0000000000027262         db  0x0e ; '.'
0000000000027263         db  0x60 ; '`'
0000000000027264         db  0x7f ; '.'
0000000000027265         db  0x0a ; '.'
0000000000027266         db  0x0e ; '.'
0000000000027267         db  0x08 ; '.'
0000000000027268         db  0x45 ; 'E'
0000000000027269         db  0x0b ; '.'
000000000002726a         db  0x00 ; '.'
000000000002726b         db  0x00 ; '.'
000000000002726c         db  0x00 ; '.'
000000000002726d         db  0x00 ; '.'
000000000002726e         db  0x00 ; '.'
000000000002726f         db  0x00 ; '.'
0000000000027270         dd         0x0000001c                                  ; Length of the record
0000000000027274         dd         0x0000384c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027278         db         0x38, 0x82, 2 dup (0xff)                    ; begin 0x1f4b0
000000000002727c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x1f510)
0000000000027280         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027281         db  0x44 ; 'D'
0000000000027282         db  0x0e ; '.'
0000000000027283         db  0x10 ; '.'
0000000000027284         db  0x75 ; 'u'
0000000000027285         db  0x0a ; '.'
0000000000027286         db  0x0e ; '.'
0000000000027287         db  0x08 ; '.'
0000000000027288         db  0x47 ; 'G'
0000000000027289         db  0x0b ; '.'
000000000002728a         db  0x5f ; '_'
000000000002728b         db  0x0e ; '.'
000000000002728c         db  0x08 ; '.'
000000000002728d         db  0x00 ; '.'
000000000002728e         db  0x00 ; '.'
000000000002728f         db  0x00 ; '.'
0000000000027290         dd         0x00000010                                  ; Length of the record
0000000000027294         dd         0x0000386c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027298         db         0x78, 0x82, 2 dup (0xff)                    ; begin 0x1f510
000000000002729c         db         0x1b, 3 dup (0x00)                          ; length 0x1b (end at 0x1f52b)
00000000000272a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000272a1         align      4
00000000000272a4         dd         0x00000010                                  ; Length of the record
00000000000272a8         dd         0x00003880                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000272ac         db         0x84, 0x82, 2 dup (0xff)                    ; begin 0x1f530
00000000000272b0         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x1f535)
00000000000272b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000272b5         align      8
00000000000272b8         dd         0x00000010                                  ; Length of the record
00000000000272bc         dd         0x00003894                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000272c0         db         0x80, 0x82, 2 dup (0xff)                    ; begin 0x1f540
00000000000272c4         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x1f575)
00000000000272c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000272c9         align      4
00000000000272cc         dd         0x00000010                                  ; Length of the record
00000000000272d0         dd         0x000038a8                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000272d4         db         0xac, 0x82, 2 dup (0xff)                    ; begin 0x1f580
00000000000272d8         db         0x3e, 3 dup (0x00)                          ; length 0x3e (end at 0x1f5be)
00000000000272dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000272dd         db  0x79 ; 'y'
00000000000272de         db  0x0e ; '.'
00000000000272df         db  0x10 ; '.'
00000000000272e0         dd         0x0000001c                                  ; Length of the record
00000000000272e4         dd         0x000038bc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000272e8         db         0xd8, 0x82, 2 dup (0xff)                    ; begin 0x1f5c0
00000000000272ec         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x1f5fc)
00000000000272f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000272f1         db  0x44 ; 'D'
00000000000272f2         db  0x0e ; '.'
00000000000272f3         db  0x10 ; '.'
00000000000272f4         db  0x61 ; 'a'
00000000000272f5         db  0x0a ; '.'
00000000000272f6         db  0x0e ; '.'
00000000000272f7         db  0x08 ; '.'
00000000000272f8         db  0x4b ; 'K'
00000000000272f9         db  0x0b ; '.'
00000000000272fa         db  0x4b ; 'K'
00000000000272fb         db  0x0e ; '.'
00000000000272fc         db  0x08 ; '.'
00000000000272fd         db  0x00 ; '.'
00000000000272fe         db  0x00 ; '.'
00000000000272ff         db  0x00 ; '.'
0000000000027300         dd         0x0000001c                                  ; Length of the record
0000000000027304         dd         0x000038dc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027308         db         0xf8, 0x82, 2 dup (0xff)                    ; begin 0x1f600
000000000002730c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x1f66e)
0000000000027310         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027311         db  0x44 ; 'D'
0000000000027312         db  0x0e ; '.'
0000000000027313         db  0x60 ; '`'
0000000000027314         db  0x7e ; '~'
0000000000027315         db  0x0a ; '.'
0000000000027316         db  0x0e ; '.'
0000000000027317         db  0x08 ; '.'
0000000000027318         db  0x46 ; 'F'
0000000000027319         db  0x0b ; '.'
000000000002731a         db  0x00 ; '.'
000000000002731b         db  0x00 ; '.'
000000000002731c         db  0x00 ; '.'
000000000002731d         db  0x00 ; '.'
000000000002731e         db  0x00 ; '.'
000000000002731f         db  0x00 ; '.'
0000000000027320         dd         0x0000005c                                  ; Length of the record
0000000000027324         dd         0x000038fc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027328         db         0x48, 0x83, 2 dup (0xff)                    ; begin 0x1f670
000000000002732c         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x1f6f0)
0000000000027330         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027331         db  0x42 ; 'B'
0000000000027332         db  0x0e ; '.'
0000000000027333         db  0x10 ; '.'
0000000000027334         db  0x8d ; '.'
0000000000027335         db  0x02 ; '.'
0000000000027336         db  0x42 ; 'B'
0000000000027337         db  0x0e ; '.'
0000000000027338         db  0x18 ; '.'
0000000000027339         db  0x8c ; '.'
000000000002733a         db  0x03 ; '.'
000000000002733b         db  0x47 ; 'G'
000000000002733c         db  0x0e ; '.'
000000000002733d         db  0x20 ; ' '
000000000002733e         db  0x86 ; '.'
000000000002733f         db  0x04 ; '.'
0000000000027340         db  0x41 ; 'A'
0000000000027341         db  0x0e ; '.'
0000000000027342         db  0x28 ; '('
0000000000027343         db  0x83 ; '.'
0000000000027344         db  0x05 ; '.'
0000000000027345         db  0x49 ; 'I'
0000000000027346         db  0x0e ; '.'
0000000000027347         db  0x30 ; '0'
0000000000027348         db  0x62 ; 'b'
0000000000027349         db  0x0a ; '.'
000000000002734a         db  0x0e ; '.'
000000000002734b         db  0x28 ; '('
000000000002734c         db  0x44 ; 'D'
000000000002734d         db  0x0e ; '.'
000000000002734e         db  0x20 ; ' '
000000000002734f         db  0x41 ; 'A'
0000000000027350         db  0x0e ; '.'
0000000000027351         db  0x18 ; '.'
0000000000027352         db  0x42 ; 'B'
0000000000027353         db  0x0e ; '.'
0000000000027354         db  0x10 ; '.'
0000000000027355         db  0x42 ; 'B'
0000000000027356         db  0x0e ; '.'
0000000000027357         db  0x08 ; '.'
0000000000027358         db  0x48 ; 'H'
0000000000027359         db  0x0b ; '.'
000000000002735a         db  0x5d ; ']'
000000000002735b         db  0x0a ; '.'
000000000002735c         db  0x0e ; '.'
000000000002735d         db  0x28 ; '('
000000000002735e         db  0x41 ; 'A'
000000000002735f         db  0x0e ; '.'
0000000000027360         db  0x20 ; ' '
0000000000027361         db  0x41 ; 'A'
0000000000027362         db  0x0e ; '.'
0000000000027363         db  0x18 ; '.'
0000000000027364         db  0x42 ; 'B'
0000000000027365         db  0x0e ; '.'
0000000000027366         db  0x10 ; '.'
0000000000027367         db  0x42 ; 'B'
0000000000027368         db  0x0e ; '.'
0000000000027369         db  0x08 ; '.'
000000000002736a         db  0x45 ; 'E'
000000000002736b         db  0x0b ; '.'
000000000002736c         db  0x44 ; 'D'
000000000002736d         db  0x0e ; '.'
000000000002736e         db  0x28 ; '('
000000000002736f         db  0x43 ; 'C'
0000000000027370         db  0x0e ; '.'
0000000000027371         db  0x20 ; ' '
0000000000027372         db  0x44 ; 'D'
0000000000027373         db  0x0e ; '.'
0000000000027374         db  0x18 ; '.'
0000000000027375         db  0x42 ; 'B'
0000000000027376         db  0x0e ; '.'
0000000000027377         db  0x10 ; '.'
0000000000027378         db  0x42 ; 'B'
0000000000027379         db  0x0e ; '.'
000000000002737a         db  0x08 ; '.'
000000000002737b         db  0x00 ; '.'
000000000002737c         db  0x00 ; '.'
000000000002737d         db  0x00 ; '.'
000000000002737e         db  0x00 ; '.'
000000000002737f         db  0x00 ; '.'
0000000000027380         dd         0x00000034                                  ; Length of the record
0000000000027384         dd         0x0000395c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027388         db         0x68, 0x83, 2 dup (0xff)                    ; begin 0x1f6f0
000000000002738c         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0x1f72f)
0000000000027390         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027391         db  0x42 ; 'B'
0000000000027392         db  0x0e ; '.'
0000000000027393         db  0x10 ; '.'
0000000000027394         db  0x8d ; '.'
0000000000027395         db  0x02 ; '.'
0000000000027396         db  0x42 ; 'B'
0000000000027397         db  0x0e ; '.'
0000000000027398         db  0x18 ; '.'
0000000000027399         db  0x8c ; '.'
000000000002739a         db  0x03 ; '.'
000000000002739b         db  0x41 ; 'A'
000000000002739c         db  0x0e ; '.'
000000000002739d         db  0x20 ; ' '
000000000002739e         db  0x86 ; '.'
000000000002739f         db  0x04 ; '.'
00000000000273a0         db  0x41 ; 'A'
00000000000273a1         db  0x0e ; '.'
00000000000273a2         db  0x28 ; '('
00000000000273a3         db  0x83 ; '.'
00000000000273a4         db  0x05 ; '.'
00000000000273a5         db  0x46 ; 'F'
00000000000273a6         db  0x0e ; '.'
00000000000273a7         db  0x30 ; '0'
00000000000273a8         db  0x6a ; 'j'
00000000000273a9         db  0x0e ; '.'
00000000000273aa         db  0x28 ; '('
00000000000273ab         db  0x43 ; 'C'
00000000000273ac         db  0x0e ; '.'
00000000000273ad         db  0x20 ; ' '
00000000000273ae         db  0x41 ; 'A'
00000000000273af         db  0x0e ; '.'
00000000000273b0         db  0x18 ; '.'
00000000000273b1         db  0x42 ; 'B'
00000000000273b2         db  0x0e ; '.'
00000000000273b3         db  0x10 ; '.'
00000000000273b4         db  0x42 ; 'B'
00000000000273b5         db  0x0e ; '.'
00000000000273b6         db  0x08 ; '.'
00000000000273b7         db  0x00 ; '.'
00000000000273b8         dd         0x00000034                                  ; Length of the record
00000000000273bc         dd         0x00003994                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000273c0         db         0x70, 0x83, 2 dup (0xff)                    ; begin 0x1f730
00000000000273c4         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x1f9ae)
00000000000273c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000273c9         db  0x42 ; 'B'
00000000000273ca         db  0x0e ; '.'
00000000000273cb         db  0x10 ; '.'
00000000000273cc         db  0x8c ; '.'
00000000000273cd         db  0x02 ; '.'
00000000000273ce         db  0x41 ; 'A'
00000000000273cf         db  0x0e ; '.'
00000000000273d0         db  0x18 ; '.'
00000000000273d1         db  0x86 ; '.'
00000000000273d2         db  0x03 ; '.'
00000000000273d3         db  0x43 ; 'C'
00000000000273d4         db  0x0e ; '.'
00000000000273d5         db  0x20 ; ' '
00000000000273d6         db  0x83 ; '.'
00000000000273d7         db  0x04 ; '.'
00000000000273d8         db  0x44 ; 'D'
00000000000273d9         db  0x0e ; '.'
00000000000273da         db  0x70 ; 'p'
00000000000273db         db  0x02 ; '.'
00000000000273dc         db  0xf0 ; '.'
00000000000273dd         db  0x0a ; '.'
00000000000273de         db  0x0e ; '.'
00000000000273df         db  0x20 ; ' '
00000000000273e0         db  0x41 ; 'A'
00000000000273e1         db  0x0e ; '.'
00000000000273e2         db  0x18 ; '.'
00000000000273e3         db  0x41 ; 'A'
00000000000273e4         db  0x0e ; '.'
00000000000273e5         db  0x10 ; '.'
00000000000273e6         db  0x42 ; 'B'
00000000000273e7         db  0x0e ; '.'
00000000000273e8         db  0x08 ; '.'
00000000000273e9         db  0x42 ; 'B'
00000000000273ea         db  0x0b ; '.'
00000000000273eb         db  0x00 ; '.'
00000000000273ec         db  0x00 ; '.'
00000000000273ed         db  0x00 ; '.'
00000000000273ee         db  0x00 ; '.'
00000000000273ef         db  0x00 ; '.'
00000000000273f0         dd         0x00000014                                  ; Length of the record
00000000000273f4         dd         0x000039cc                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
00000000000273f8         db         0xb8, 0x85, 2 dup (0xff)                    ; begin 0x1f9b0
00000000000273fc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x1f9be)
0000000000027400         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027401         align      8
0000000000027408         dd         0x00000044                                  ; Length of the record
000000000002740c         dd         0x000039e4                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027410         db         0xb0, 0x85, 2 dup (0xff)                    ; begin 0x1f9c0
0000000000027414         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x1fa25)
0000000000027418         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027419         db  0x42 ; 'B'
000000000002741a         db  0x0e ; '.'
000000000002741b         db  0x10 ; '.'
000000000002741c         db  0x8f ; '.'
000000000002741d         db  0x02 ; '.'
000000000002741e         db  0x42 ; 'B'
000000000002741f         db  0x0e ; '.'
0000000000027420         db  0x18 ; '.'
0000000000027421         db  0x8e ; '.'
0000000000027422         db  0x03 ; '.'
0000000000027423         db  0x45 ; 'E'
0000000000027424         db  0x0e ; '.'
0000000000027425         db  0x20 ; ' '
0000000000027426         db  0x8d ; '.'
0000000000027427         db  0x04 ; '.'
0000000000027428         db  0x42 ; 'B'
0000000000027429         db  0x0e ; '.'
000000000002742a         db  0x28 ; '('
000000000002742b         db  0x8c ; '.'
000000000002742c         db  0x05 ; '.'
000000000002742d         db  0x48 ; 'H'
000000000002742e         db  0x0e ; '.'
000000000002742f         db  0x30 ; '0'
0000000000027430         db  0x86 ; '.'
0000000000027431         db  0x06 ; '.'
0000000000027432         db  0x48 ; 'H'
0000000000027433         db  0x0e ; '.'
0000000000027434         db  0x38 ; '8'
0000000000027435         db  0x83 ; '.'
0000000000027436         db  0x07 ; '.'
0000000000027437         db  0x4d ; 'M'
0000000000027438         db  0x0e ; '.'
0000000000027439         db  0x40 ; '@'
000000000002743a         db  0x72 ; 'r'
000000000002743b         db  0x0e ; '.'
000000000002743c         db  0x38 ; '8'
000000000002743d         db  0x41 ; 'A'
000000000002743e         db  0x0e ; '.'
000000000002743f         db  0x30 ; '0'
0000000000027440         db  0x41 ; 'A'
0000000000027441         db  0x0e ; '.'
0000000000027442         db  0x28 ; '('
0000000000027443         db  0x42 ; 'B'
0000000000027444         db  0x0e ; '.'
0000000000027445         db  0x20 ; ' '
0000000000027446         db  0x42 ; 'B'
0000000000027447         db  0x0e ; '.'
0000000000027448         db  0x18 ; '.'
0000000000027449         db  0x42 ; 'B'
000000000002744a         db  0x0e ; '.'
000000000002744b         db  0x10 ; '.'
000000000002744c         db  0x42 ; 'B'
000000000002744d         db  0x0e ; '.'
000000000002744e         db  0x08 ; '.'
000000000002744f         db  0x00 ; '.'
0000000000027450         dd         0x00000014                                  ; Length of the record
0000000000027454         dd         0x00003a2c                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027458         db         0xd8, 0x85, 2 dup (0xff)                    ; begin 0x1fa30
000000000002745c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x1fa32)
0000000000027460         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027461         align      8
0000000000027468         dd         0x00000010                                  ; Length of the record
000000000002746c         dd         0x00003a44                                  ; FDE: parent CIE at 0x23a28 (FDE encoding = 0x1B)
0000000000027470         db         0xd0, 0x85, 2 dup (0xff)                    ; begin 0x1fa40
0000000000027474         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x1fa4e)
0000000000027478         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000027479         align      128


        ; Segment Segment 3
        ; Range: [0x227670; 0x228308[ (3224 bytes)
        ; File offset : [161392; 164000[ (2608 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x227670; 0x227678[ (8 bytes)
        ; File offset : [161392; 161400[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
0000000000227670         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x227678; 0x227680[ (8 bytes)
        ; File offset : [161400; 161408[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
0000000000227678         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x227680; 0x227a98[ (1048 bytes)
        ; File offset : [161408; 162456[ (1048 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     time_style_args:
0000000000227680         db  0x31 ; '1'                                         ; DATA XREF=main+4284
0000000000227681         db  0xfd ; '.'
0000000000227682         db  0x01 ; '.'
0000000000227683         db  0x00 ; '.'
0000000000227684         db  0x00 ; '.'
0000000000227685         db  0x00 ; '.'
0000000000227686         db  0x00 ; '.'
0000000000227687         db  0x00 ; '.'
0000000000227688         db  0x34 ; '4'
0000000000227689         db  0xfb ; '.'
000000000022768a         db  0x01 ; '.'
000000000022768b         db  0x00 ; '.'
000000000022768c         db  0x00 ; '.'
000000000022768d         db  0x00 ; '.'
000000000022768e         db  0x00 ; '.'
000000000022768f         db  0x00 ; '.'
0000000000227690         db  0x39 ; '9'
0000000000227691         db  0xfb ; '.'
0000000000227692         db  0x01 ; '.'
0000000000227693         db  0x00 ; '.'
0000000000227694         db  0x00 ; '.'
0000000000227695         db  0x00 ; '.'
0000000000227696         db  0x00 ; '.'
0000000000227697         db  0x00 ; '.'
0000000000227698         db  0x00 ; '.'
0000000000227699         db  0x00 ; '.'
000000000022769a         db  0x00 ; '.'
000000000022769b         db  0x00 ; '.'
000000000022769c         db  0x00 ; '.'
000000000022769d         db  0x00 ; '.'
000000000022769e         db  0x00 ; '.'
000000000022769f         db  0x00 ; '.'
                     time_args:
00000000002276a0         db  0x3a ; ':'                                         ; DATA XREF=main+1005
00000000002276a1         db  0xfd ; '.'
00000000002276a2         db  0x01 ; '.'
00000000002276a3         db  0x00 ; '.'
00000000002276a4         db  0x00 ; '.'
00000000002276a5         db  0x00 ; '.'
00000000002276a6         db  0x00 ; '.'
00000000002276a7         db  0x00 ; '.'
00000000002276a8         db  0x40 ; '@'
00000000002276a9         db  0xfd ; '.'
00000000002276aa         db  0x01 ; '.'
00000000002276ab         db  0x00 ; '.'
00000000002276ac         db  0x00 ; '.'
00000000002276ad         db  0x00 ; '.'
00000000002276ae         db  0x00 ; '.'
00000000002276af         db  0x00 ; '.'
00000000002276b0         db  0x47 ; 'G'
00000000002276b1         db  0xfd ; '.'
00000000002276b2         db  0x01 ; '.'
00000000002276b3         db  0x00 ; '.'
00000000002276b4         db  0x00 ; '.'
00000000002276b5         db  0x00 ; '.'
00000000002276b6         db  0x00 ; '.'
00000000002276b7         db  0x00 ; '.'
00000000002276b8         db  0x4b ; 'K'
00000000002276b9         db  0xfd ; '.'
00000000002276ba         db  0x01 ; '.'
00000000002276bb         db  0x00 ; '.'
00000000002276bc         db  0x00 ; '.'
00000000002276bd         db  0x00 ; '.'
00000000002276be         db  0x00 ; '.'
00000000002276bf         db  0x00 ; '.'
00000000002276c0         db  0x51 ; 'Q'
00000000002276c1         db  0xfd ; '.'
00000000002276c2         db  0x01 ; '.'
00000000002276c3         db  0x00 ; '.'
00000000002276c4         db  0x00 ; '.'
00000000002276c5         db  0x00 ; '.'
00000000002276c6         db  0x00 ; '.'
00000000002276c7         db  0x00 ; '.'
00000000002276c8         db  0x00 ; '.'
00000000002276c9         db  0x00 ; '.'
00000000002276ca         db  0x00 ; '.'
00000000002276cb         db  0x00 ; '.'
00000000002276cc         db  0x00 ; '.'
00000000002276cd         db  0x00 ; '.'
00000000002276ce         db  0x00 ; '.'
00000000002276cf         db  0x00 ; '.'
00000000002276d0         db  0x00 ; '.'
00000000002276d1         db  0x00 ; '.'
00000000002276d2         db  0x00 ; '.'
00000000002276d3         db  0x00 ; '.'
00000000002276d4         db  0x00 ; '.'
00000000002276d5         db  0x00 ; '.'
00000000002276d6         db  0x00 ; '.'
00000000002276d7         db  0x00 ; '.'
00000000002276d8         db  0x00 ; '.'
00000000002276d9         db  0x00 ; '.'
00000000002276da         db  0x00 ; '.'
00000000002276db         db  0x00 ; '.'
00000000002276dc         db  0x00 ; '.'
00000000002276dd         db  0x00 ; '.'
00000000002276de         db  0x00 ; '.'
00000000002276df         db  0x00 ; '.'
                     long_options:
00000000002276e0         db  0x58 ; 'X'                                         ; DATA XREF=main+248, main+833, main+5135
00000000002276e1         db  0xfd ; '.'
00000000002276e2         db  0x01 ; '.'
00000000002276e3         db  0x00 ; '.'
00000000002276e4         db  0x00 ; '.'
00000000002276e5         db  0x00 ; '.'
00000000002276e6         db  0x00 ; '.'
00000000002276e7         db  0x00 ; '.'
00000000002276e8         db  0x00 ; '.'
00000000002276e9         db  0x00 ; '.'
00000000002276ea         db  0x00 ; '.'
00000000002276eb         db  0x00 ; '.'
00000000002276ec         db  0x00 ; '.'
00000000002276ed         db  0x00 ; '.'
00000000002276ee         db  0x00 ; '.'
00000000002276ef         db  0x00 ; '.'
00000000002276f0         db  0x00 ; '.'
00000000002276f1         db  0x00 ; '.'
00000000002276f2         db  0x00 ; '.'
00000000002276f3         db  0x00 ; '.'
00000000002276f4         db  0x00 ; '.'
00000000002276f5         db  0x00 ; '.'
00000000002276f6         db  0x00 ; '.'
00000000002276f7         db  0x00 ; '.'
00000000002276f8         db  0x61 ; 'a'
00000000002276f9         db  0x00 ; '.'
00000000002276fa         db  0x00 ; '.'
00000000002276fb         db  0x00 ; '.'
00000000002276fc         db  0x00 ; '.'
00000000002276fd         db  0x00 ; '.'
00000000002276fe         db  0x00 ; '.'
00000000002276ff         db  0x00 ; '.'
0000000000227700         db  0x5c ; '\'
0000000000227701         db  0xfd ; '.'
0000000000227702         db  0x01 ; '.'
0000000000227703         db  0x00 ; '.'
0000000000227704         db  0x00 ; '.'
0000000000227705         db  0x00 ; '.'
0000000000227706         db  0x00 ; '.'
0000000000227707         db  0x00 ; '.'
0000000000227708         db  0x00 ; '.'
0000000000227709         db  0x00 ; '.'
000000000022770a         db  0x00 ; '.'
000000000022770b         db  0x00 ; '.'
000000000022770c         db  0x00 ; '.'
000000000022770d         db  0x00 ; '.'
000000000022770e         db  0x00 ; '.'
000000000022770f         db  0x00 ; '.'
0000000000227710         db  0x00 ; '.'
0000000000227711         db  0x00 ; '.'
0000000000227712         db  0x00 ; '.'
0000000000227713         db  0x00 ; '.'
0000000000227714         db  0x00 ; '.'
0000000000227715         db  0x00 ; '.'
0000000000227716         db  0x00 ; '.'
0000000000227717         db  0x00 ; '.'
0000000000227718         db  0x80 ; '.'
0000000000227719         db  0x00 ; '.'
000000000022771a         db  0x00 ; '.'
000000000022771b         db  0x00 ; '.'
000000000022771c         db  0x00 ; '.'
000000000022771d         db  0x00 ; '.'
000000000022771e         db  0x00 ; '.'
000000000022771f         db  0x00 ; '.'
0000000000227720         db  0x6a ; 'j'
0000000000227721         db  0xfd ; '.'
0000000000227722         db  0x01 ; '.'
0000000000227723         db  0x00 ; '.'
0000000000227724         db  0x00 ; '.'
0000000000227725         db  0x00 ; '.'
0000000000227726         db  0x00 ; '.'
0000000000227727         db  0x00 ; '.'
0000000000227728         db  0x01 ; '.'
0000000000227729         db  0x00 ; '.'
000000000022772a         db  0x00 ; '.'
000000000022772b         db  0x00 ; '.'
000000000022772c         db  0x00 ; '.'
000000000022772d         db  0x00 ; '.'
000000000022772e         db  0x00 ; '.'
000000000022772f         db  0x00 ; '.'
0000000000227730         db  0x00 ; '.'
0000000000227731         db  0x00 ; '.'
0000000000227732         db  0x00 ; '.'
0000000000227733         db  0x00 ; '.'
0000000000227734         db  0x00 ; '.'
0000000000227735         db  0x00 ; '.'
0000000000227736         db  0x00 ; '.'
0000000000227737         db  0x00 ; '.'
0000000000227738         db  0x42 ; 'B'
0000000000227739         db  0x00 ; '.'
000000000022773a         db  0x00 ; '.'
000000000022773b         db  0x00 ; '.'
000000000022773c         db  0x00 ; '.'
000000000022773d         db  0x00 ; '.'
000000000022773e         db  0x00 ; '.'
000000000022773f         db  0x00 ; '.'
0000000000227740         db  0x75 ; 'u'
0000000000227741         db  0xfd ; '.'
0000000000227742         db  0x01 ; '.'
0000000000227743         db  0x00 ; '.'
0000000000227744         db  0x00 ; '.'
0000000000227745         db  0x00 ; '.'
0000000000227746         db  0x00 ; '.'
0000000000227747         db  0x00 ; '.'
0000000000227748         db  0x00 ; '.'
0000000000227749         db  0x00 ; '.'
000000000022774a         db  0x00 ; '.'
000000000022774b         db  0x00 ; '.'
000000000022774c         db  0x00 ; '.'
000000000022774d         db  0x00 ; '.'
000000000022774e         db  0x00 ; '.'
000000000022774f         db  0x00 ; '.'
0000000000227750         db  0x00 ; '.'
0000000000227751         db  0x00 ; '.'
0000000000227752         db  0x00 ; '.'
0000000000227753         db  0x00 ; '.'
0000000000227754         db  0x00 ; '.'
0000000000227755         db  0x00 ; '.'
0000000000227756         db  0x00 ; '.'
0000000000227757         db  0x00 ; '.'
0000000000227758         db  0x62 ; 'b'
0000000000227759         db  0x00 ; '.'
000000000022775a         db  0x00 ; '.'
000000000022775b         db  0x00 ; '.'
000000000022775c         db  0x00 ; '.'
000000000022775d         db  0x00 ; '.'
000000000022775e         db  0x00 ; '.'
000000000022775f         db  0x00 ; '.'
0000000000227760         db  0x7b ; '{'
0000000000227761         db  0xfd ; '.'
0000000000227762         db  0x01 ; '.'
0000000000227763         db  0x00 ; '.'
0000000000227764         db  0x00 ; '.'
0000000000227765         db  0x00 ; '.'
0000000000227766         db  0x00 ; '.'
0000000000227767         db  0x00 ; '.'
0000000000227768         db  0x00 ; '.'
0000000000227769         db  0x00 ; '.'
000000000022776a         db  0x00 ; '.'
000000000022776b         db  0x00 ; '.'
000000000022776c         db  0x00 ; '.'
000000000022776d         db  0x00 ; '.'
000000000022776e         db  0x00 ; '.'
000000000022776f         db  0x00 ; '.'
0000000000227770         db  0x00 ; '.'
0000000000227771         db  0x00 ; '.'
0000000000227772         db  0x00 ; '.'
0000000000227773         db  0x00 ; '.'
0000000000227774         db  0x00 ; '.'
0000000000227775         db  0x00 ; '.'
0000000000227776         db  0x00 ; '.'
0000000000227777         db  0x00 ; '.'
0000000000227778         db  0x6c ; 'l'
0000000000227779         db  0x00 ; '.'
000000000022777a         db  0x00 ; '.'
000000000022777b         db  0x00 ; '.'
000000000022777c         db  0x00 ; '.'
000000000022777d         db  0x00 ; '.'
000000000022777e         db  0x00 ; '.'
000000000022777f         db  0x00 ; '.'
0000000000227780         db  0xdf ; '.'
0000000000227781         db  0xfd ; '.'
0000000000227782         db  0x01 ; '.'
0000000000227783         db  0x00 ; '.'
0000000000227784         db  0x00 ; '.'
0000000000227785         db  0x00 ; '.'
0000000000227786         db  0x00 ; '.'
0000000000227787         db  0x00 ; '.'
0000000000227788         db  0x00 ; '.'
0000000000227789         db  0x00 ; '.'
000000000022778a         db  0x00 ; '.'
000000000022778b         db  0x00 ; '.'
000000000022778c         db  0x00 ; '.'
000000000022778d         db  0x00 ; '.'
000000000022778e         db  0x00 ; '.'
000000000022778f         db  0x00 ; '.'
0000000000227790         db  0x00 ; '.'
0000000000227791         db  0x00 ; '.'
0000000000227792         db  0x00 ; '.'
0000000000227793         db  0x00 ; '.'
0000000000227794         db  0x00 ; '.'
0000000000227795         db  0x00 ; '.'
0000000000227796         db  0x00 ; '.'
0000000000227797         db  0x00 ; '.'
0000000000227798         db  0x4c ; 'L'
0000000000227799         db  0x00 ; '.'
000000000022779a         db  0x00 ; '.'
000000000022779b         db  0x00 ; '.'
000000000022779c         db  0x00 ; '.'
000000000022779d         db  0x00 ; '.'
000000000022779e         db  0x00 ; '.'
000000000022779f         db  0x00 ; '.'
00000000002277a0         db  0x87 ; '.'
00000000002277a1         db  0xfd ; '.'
00000000002277a2         db  0x01 ; '.'
00000000002277a3         db  0x00 ; '.'
00000000002277a4         db  0x00 ; '.'
00000000002277a5         db  0x00 ; '.'
00000000002277a6         db  0x00 ; '.'
00000000002277a7         db  0x00 ; '.'
00000000002277a8         db  0x00 ; '.'
00000000002277a9         db  0x00 ; '.'
00000000002277aa         db  0x00 ; '.'
00000000002277ab         db  0x00 ; '.'
00000000002277ac         db  0x00 ; '.'
00000000002277ad         db  0x00 ; '.'
00000000002277ae         db  0x00 ; '.'
00000000002277af         db  0x00 ; '.'
00000000002277b0         db  0x00 ; '.'
00000000002277b1         db  0x00 ; '.'
00000000002277b2         db  0x00 ; '.'
00000000002277b3         db  0x00 ; '.'
00000000002277b4         db  0x00 ; '.'
00000000002277b5         db  0x00 ; '.'
00000000002277b6         db  0x00 ; '.'
00000000002277b7         db  0x00 ; '.'
00000000002277b8         db  0x44 ; 'D'
00000000002277b9         db  0x00 ; '.'
00000000002277ba         db  0x00 ; '.'
00000000002277bb         db  0x00 ; '.'
00000000002277bc         db  0x00 ; '.'
00000000002277bd         db  0x00 ; '.'
00000000002277be         db  0x00 ; '.'
00000000002277bf         db  0x00 ; '.'
00000000002277c0         db  0x98 ; '.'
00000000002277c1         db  0xfd ; '.'
00000000002277c2         db  0x01 ; '.'
00000000002277c3         db  0x00 ; '.'
00000000002277c4         db  0x00 ; '.'
00000000002277c5         db  0x00 ; '.'
00000000002277c6         db  0x00 ; '.'
00000000002277c7         db  0x00 ; '.'
00000000002277c8         db  0x01 ; '.'
00000000002277c9         db  0x00 ; '.'
00000000002277ca         db  0x00 ; '.'
00000000002277cb         db  0x00 ; '.'
00000000002277cc         db  0x00 ; '.'
00000000002277cd         db  0x00 ; '.'
00000000002277ce         db  0x00 ; '.'
00000000002277cf         db  0x00 ; '.'
00000000002277d0         db  0x00 ; '.'
00000000002277d1         db  0x00 ; '.'
00000000002277d2         db  0x00 ; '.'
00000000002277d3         db  0x00 ; '.'
00000000002277d4         db  0x00 ; '.'
00000000002277d5         db  0x00 ; '.'
00000000002277d6         db  0x00 ; '.'
00000000002277d7         db  0x00 ; '.'
00000000002277d8         db  0x81 ; '.'
00000000002277d9         db  0x00 ; '.'
00000000002277da         db  0x00 ; '.'
00000000002277db         db  0x00 ; '.'
00000000002277dc         db  0x00 ; '.'
00000000002277dd         db  0x00 ; '.'
00000000002277de         db  0x00 ; '.'
00000000002277df         db  0x00 ; '.'
00000000002277e0         db  0xa0 ; '.'
00000000002277e1         db  0xfd ; '.'
00000000002277e2         db  0x01 ; '.'
00000000002277e3         db  0x00 ; '.'
00000000002277e4         db  0x00 ; '.'
00000000002277e5         db  0x00 ; '.'
00000000002277e6         db  0x00 ; '.'
00000000002277e7         db  0x00 ; '.'
00000000002277e8         db  0x01 ; '.'
00000000002277e9         db  0x00 ; '.'
00000000002277ea         db  0x00 ; '.'
00000000002277eb         db  0x00 ; '.'
00000000002277ec         db  0x00 ; '.'
00000000002277ed         db  0x00 ; '.'
00000000002277ee         db  0x00 ; '.'
00000000002277ef         db  0x00 ; '.'
00000000002277f0         db  0x00 ; '.'
00000000002277f1         db  0x00 ; '.'
00000000002277f2         db  0x00 ; '.'
00000000002277f3         db  0x00 ; '.'
00000000002277f4         db  0x00 ; '.'
00000000002277f5         db  0x00 ; '.'
00000000002277f6         db  0x00 ; '.'
00000000002277f7         db  0x00 ; '.'
00000000002277f8         db  0x58 ; 'X'
00000000002277f9         db  0x00 ; '.'
00000000002277fa         db  0x00 ; '.'
00000000002277fb         db  0x00 ; '.'
00000000002277fc         db  0x00 ; '.'
00000000002277fd         db  0x00 ; '.'
00000000002277fe         db  0x00 ; '.'
00000000002277ff         db  0x00 ; '.'
0000000000227800         db  0xad ; '.'
0000000000227801         db  0xfd ; '.'
0000000000227802         db  0x01 ; '.'
0000000000227803         db  0x00 ; '.'
0000000000227804         db  0x00 ; '.'
0000000000227805         db  0x00 ; '.'
0000000000227806         db  0x00 ; '.'
0000000000227807         db  0x00 ; '.'
0000000000227808         db  0x01 ; '.'
0000000000227809         db  0x00 ; '.'
000000000022780a         db  0x00 ; '.'
000000000022780b         db  0x00 ; '.'
000000000022780c         db  0x00 ; '.'
000000000022780d         db  0x00 ; '.'
000000000022780e         db  0x00 ; '.'
000000000022780f         db  0x00 ; '.'
0000000000227810         db  0x00 ; '.'
0000000000227811         db  0x00 ; '.'
0000000000227812         db  0x00 ; '.'
0000000000227813         db  0x00 ; '.'
0000000000227814         db  0x00 ; '.'
0000000000227815         db  0x00 ; '.'
0000000000227816         db  0x00 ; '.'
0000000000227817         db  0x00 ; '.'
0000000000227818         db  0x82 ; '.'
0000000000227819         db  0x00 ; '.'
000000000022781a         db  0x00 ; '.'
000000000022781b         db  0x00 ; '.'
000000000022781c         db  0x00 ; '.'
000000000022781d         db  0x00 ; '.'
000000000022781e         db  0x00 ; '.'
000000000022781f         db  0x00 ; '.'
0000000000227820         db  0xb9 ; '.'
0000000000227821         db  0xfd ; '.'
0000000000227822         db  0x01 ; '.'
0000000000227823         db  0x00 ; '.'
0000000000227824         db  0x00 ; '.'
0000000000227825         db  0x00 ; '.'
0000000000227826         db  0x00 ; '.'
0000000000227827         db  0x00 ; '.'
0000000000227828         db  0x00 ; '.'
0000000000227829         db  0x00 ; '.'
000000000022782a         db  0x00 ; '.'
000000000022782b         db  0x00 ; '.'
000000000022782c         db  0x00 ; '.'
000000000022782d         db  0x00 ; '.'
000000000022782e         db  0x00 ; '.'
000000000022782f         db  0x00 ; '.'
0000000000227830         db  0x00 ; '.'
0000000000227831         db  0x00 ; '.'
0000000000227832         db  0x00 ; '.'
0000000000227833         db  0x00 ; '.'
0000000000227834         db  0x00 ; '.'
0000000000227835         db  0x00 ; '.'
0000000000227836         db  0x00 ; '.'
0000000000227837         db  0x00 ; '.'
0000000000227838         db  0x68 ; 'h'
0000000000227839         db  0x00 ; '.'
000000000022783a         db  0x00 ; '.'
000000000022783b         db  0x00 ; '.'
000000000022783c         db  0x00 ; '.'
000000000022783d         db  0x00 ; '.'
000000000022783e         db  0x00 ; '.'
000000000022783f         db  0x00 ; '.'
0000000000227840         db  0xc8 ; '.'
0000000000227841         db  0xfd ; '.'
0000000000227842         db  0x01 ; '.'
0000000000227843         db  0x00 ; '.'
0000000000227844         db  0x00 ; '.'
0000000000227845         db  0x00 ; '.'
0000000000227846         db  0x00 ; '.'
0000000000227847         db  0x00 ; '.'
0000000000227848         db  0x00 ; '.'
0000000000227849         db  0x00 ; '.'
000000000022784a         db  0x00 ; '.'
000000000022784b         db  0x00 ; '.'
000000000022784c         db  0x00 ; '.'
000000000022784d         db  0x00 ; '.'
000000000022784e         db  0x00 ; '.'
000000000022784f         db  0x00 ; '.'
0000000000227850         db  0x00 ; '.'
0000000000227851         db  0x00 ; '.'
0000000000227852         db  0x00 ; '.'
0000000000227853         db  0x00 ; '.'
0000000000227854         db  0x00 ; '.'
0000000000227855         db  0x00 ; '.'
0000000000227856         db  0x00 ; '.'
0000000000227857         db  0x00 ; '.'
0000000000227858         db  0x87 ; '.'
0000000000227859         db  0x00 ; '.'
000000000022785a         db  0x00 ; '.'
000000000022785b         db  0x00 ; '.'
000000000022785c         db  0x00 ; '.'
000000000022785d         db  0x00 ; '.'
000000000022785e         db  0x00 ; '.'
000000000022785f         db  0x00 ; '.'
0000000000227860         db  0xcf ; '.'
0000000000227861         db  0xfd ; '.'
0000000000227862         db  0x01 ; '.'
0000000000227863         db  0x00 ; '.'
0000000000227864         db  0x00 ; '.'
0000000000227865         db  0x00 ; '.'
0000000000227866         db  0x00 ; '.'
0000000000227867         db  0x00 ; '.'
0000000000227868         db  0x00 ; '.'
0000000000227869         db  0x00 ; '.'
000000000022786a         db  0x00 ; '.'
000000000022786b         db  0x00 ; '.'
000000000022786c         db  0x00 ; '.'
000000000022786d         db  0x00 ; '.'
000000000022786e         db  0x00 ; '.'
000000000022786f         db  0x00 ; '.'
0000000000227870         db  0x00 ; '.'
0000000000227871         db  0x00 ; '.'
0000000000227872         db  0x00 ; '.'
0000000000227873         db  0x00 ; '.'
0000000000227874         db  0x00 ; '.'
0000000000227875         db  0x00 ; '.'
0000000000227876         db  0x00 ; '.'
0000000000227877         db  0x00 ; '.'
0000000000227878         db  0x83 ; '.'
0000000000227879         db  0x00 ; '.'
000000000022787a         db  0x00 ; '.'
000000000022787b         db  0x00 ; '.'
000000000022787c         db  0x00 ; '.'
000000000022787d         db  0x00 ; '.'
000000000022787e         db  0x00 ; '.'
000000000022787f         db  0x00 ; '.'
0000000000227880         db  0xd2 ; '.'
0000000000227881         db  0xfd ; '.'
0000000000227882         db  0x01 ; '.'
0000000000227883         db  0x00 ; '.'
0000000000227884         db  0x00 ; '.'
0000000000227885         db  0x00 ; '.'
0000000000227886         db  0x00 ; '.'
0000000000227887         db  0x00 ; '.'
0000000000227888         db  0x01 ; '.'
0000000000227889         db  0x00 ; '.'
000000000022788a         db  0x00 ; '.'
000000000022788b         db  0x00 ; '.'
000000000022788c         db  0x00 ; '.'
000000000022788d         db  0x00 ; '.'
000000000022788e         db  0x00 ; '.'
000000000022788f         db  0x00 ; '.'
0000000000227890         db  0x00 ; '.'
0000000000227891         db  0x00 ; '.'
0000000000227892         db  0x00 ; '.'
0000000000227893         db  0x00 ; '.'
0000000000227894         db  0x00 ; '.'
0000000000227895         db  0x00 ; '.'
0000000000227896         db  0x00 ; '.'
0000000000227897         db  0x00 ; '.'
0000000000227898         db  0x64 ; 'd'
0000000000227899         db  0x00 ; '.'
000000000022789a         db  0x00 ; '.'
000000000022789b         db  0x00 ; '.'
000000000022789c         db  0x00 ; '.'
000000000022789d         db  0x00 ; '.'
000000000022789e         db  0x00 ; '.'
000000000022789f         db  0x00 ; '.'
00000000002278a0         db  0x29 ; ')'
00000000002278a1         db  0x19 ; '.'
00000000002278a2         db  0x02 ; '.'
00000000002278a3         db  0x00 ; '.'
00000000002278a4         db  0x00 ; '.'
00000000002278a5         db  0x00 ; '.'
00000000002278a6         db  0x00 ; '.'
00000000002278a7         db  0x00 ; '.'
00000000002278a8         db  0x00 ; '.'
00000000002278a9         db  0x00 ; '.'
00000000002278aa         db  0x00 ; '.'
00000000002278ab         db  0x00 ; '.'
00000000002278ac         db  0x00 ; '.'
00000000002278ad         db  0x00 ; '.'
00000000002278ae         db  0x00 ; '.'
00000000002278af         db  0x00 ; '.'
00000000002278b0         db  0x00 ; '.'
00000000002278b1         db  0x00 ; '.'
00000000002278b2         db  0x00 ; '.'
00000000002278b3         db  0x00 ; '.'
00000000002278b4         db  0x00 ; '.'
00000000002278b5         db  0x00 ; '.'
00000000002278b6         db  0x00 ; '.'
00000000002278b7         db  0x00 ; '.'
00000000002278b8         db  0x30 ; '0'
00000000002278b9         db  0x00 ; '.'
00000000002278ba         db  0x00 ; '.'
00000000002278bb         db  0x00 ; '.'
00000000002278bc         db  0x00 ; '.'
00000000002278bd         db  0x00 ; '.'
00000000002278be         db  0x00 ; '.'
00000000002278bf         db  0x00 ; '.'
00000000002278c0         db  0xdc ; '.'
00000000002278c1         db  0xfd ; '.'
00000000002278c2         db  0x01 ; '.'
00000000002278c3         db  0x00 ; '.'
00000000002278c4         db  0x00 ; '.'
00000000002278c5         db  0x00 ; '.'
00000000002278c6         db  0x00 ; '.'
00000000002278c7         db  0x00 ; '.'
00000000002278c8         db  0x00 ; '.'
00000000002278c9         db  0x00 ; '.'
00000000002278ca         db  0x00 ; '.'
00000000002278cb         db  0x00 ; '.'
00000000002278cc         db  0x00 ; '.'
00000000002278cd         db  0x00 ; '.'
00000000002278ce         db  0x00 ; '.'
00000000002278cf         db  0x00 ; '.'
00000000002278d0         db  0x00 ; '.'
00000000002278d1         db  0x00 ; '.'
00000000002278d2         db  0x00 ; '.'
00000000002278d3         db  0x00 ; '.'
00000000002278d4         db  0x00 ; '.'
00000000002278d5         db  0x00 ; '.'
00000000002278d6         db  0x00 ; '.'
00000000002278d7         db  0x00 ; '.'
00000000002278d8         db  0x50 ; 'P'
00000000002278d9         db  0x00 ; '.'
00000000002278da         db  0x00 ; '.'
00000000002278db         db  0x00 ; '.'
00000000002278dc         db  0x00 ; '.'
00000000002278dd         db  0x00 ; '.'
00000000002278de         db  0x00 ; '.'
00000000002278df         db  0x00 ; '.'
00000000002278e0         db  0xeb ; '.'
00000000002278e1         db  0xfd ; '.'
00000000002278e2         db  0x01 ; '.'
00000000002278e3         db  0x00 ; '.'
00000000002278e4         db  0x00 ; '.'
00000000002278e5         db  0x00 ; '.'
00000000002278e6         db  0x00 ; '.'
00000000002278e7         db  0x00 ; '.'
00000000002278e8         db  0x00 ; '.'
00000000002278e9         db  0x00 ; '.'
00000000002278ea         db  0x00 ; '.'
00000000002278eb         db  0x00 ; '.'
00000000002278ec         db  0x00 ; '.'
00000000002278ed         db  0x00 ; '.'
00000000002278ee         db  0x00 ; '.'
00000000002278ef         db  0x00 ; '.'
00000000002278f0         db  0x00 ; '.'
00000000002278f1         db  0x00 ; '.'
00000000002278f2         db  0x00 ; '.'
00000000002278f3         db  0x00 ; '.'
00000000002278f4         db  0x00 ; '.'
00000000002278f5         db  0x00 ; '.'
00000000002278f6         db  0x00 ; '.'
00000000002278f7         db  0x00 ; '.'
00000000002278f8         db  0x78 ; 'x'
00000000002278f9         db  0x00 ; '.'
00000000002278fa         db  0x00 ; '.'
00000000002278fb         db  0x00 ; '.'
00000000002278fc         db  0x00 ; '.'
00000000002278fd         db  0x00 ; '.'
00000000002278fe         db  0x00 ; '.'
00000000002278ff         db  0x00 ; '.'
0000000000227900         db  0xfb ; '.'
0000000000227901         db  0xfd ; '.'
0000000000227902         db  0x01 ; '.'
0000000000227903         db  0x00 ; '.'
0000000000227904         db  0x00 ; '.'
0000000000227905         db  0x00 ; '.'
0000000000227906         db  0x00 ; '.'
0000000000227907         db  0x00 ; '.'
0000000000227908         db  0x00 ; '.'
0000000000227909         db  0x00 ; '.'
000000000022790a         db  0x00 ; '.'
000000000022790b         db  0x00 ; '.'
000000000022790c         db  0x00 ; '.'
000000000022790d         db  0x00 ; '.'
000000000022790e         db  0x00 ; '.'
000000000022790f         db  0x00 ; '.'
0000000000227910         db  0x00 ; '.'
0000000000227911         db  0x00 ; '.'
0000000000227912         db  0x00 ; '.'
0000000000227913         db  0x00 ; '.'
0000000000227914         db  0x00 ; '.'
0000000000227915         db  0x00 ; '.'
0000000000227916         db  0x00 ; '.'
0000000000227917         db  0x00 ; '.'
0000000000227918         db  0x53 ; 'S'
0000000000227919         db  0x00 ; '.'
000000000022791a         db  0x00 ; '.'
000000000022791b         db  0x00 ; '.'
000000000022791c         db  0x00 ; '.'
000000000022791d         db  0x00 ; '.'
000000000022791e         db  0x00 ; '.'
000000000022791f         db  0x00 ; '.'
0000000000227920         db  0x09 ; '.'
0000000000227921         db  0xfe ; '.'
0000000000227922         db  0x01 ; '.'
0000000000227923         db  0x00 ; '.'
0000000000227924         db  0x00 ; '.'
0000000000227925         db  0x00 ; '.'
0000000000227926         db  0x00 ; '.'
0000000000227927         db  0x00 ; '.'
0000000000227928         db  0x00 ; '.'
0000000000227929         db  0x00 ; '.'
000000000022792a         db  0x00 ; '.'
000000000022792b         db  0x00 ; '.'
000000000022792c         db  0x00 ; '.'
000000000022792d         db  0x00 ; '.'
000000000022792e         db  0x00 ; '.'
000000000022792f         db  0x00 ; '.'
0000000000227930         db  0x00 ; '.'
0000000000227931         db  0x00 ; '.'
0000000000227932         db  0x00 ; '.'
0000000000227933         db  0x00 ; '.'
0000000000227934         db  0x00 ; '.'
0000000000227935         db  0x00 ; '.'
0000000000227936         db  0x00 ; '.'
0000000000227937         db  0x00 ; '.'
0000000000227938         db  0x73 ; 's'
0000000000227939         db  0x00 ; '.'
000000000022793a         db  0x00 ; '.'
000000000022793b         db  0x00 ; '.'
000000000022793c         db  0x00 ; '.'
000000000022793d         db  0x00 ; '.'
000000000022793e         db  0x00 ; '.'
000000000022793f         db  0x00 ; '.'
0000000000227940         db  0x02 ; '.'
0000000000227941         db  0xfd ; '.'
0000000000227942         db  0x01 ; '.'
0000000000227943         db  0x00 ; '.'
0000000000227944         db  0x00 ; '.'
0000000000227945         db  0x00 ; '.'
0000000000227946         db  0x00 ; '.'
0000000000227947         db  0x00 ; '.'
0000000000227948         db  0x00 ; '.'
0000000000227949         db  0x00 ; '.'
000000000022794a         db  0x00 ; '.'
000000000022794b         db  0x00 ; '.'
000000000022794c         db  0x00 ; '.'
000000000022794d         db  0x00 ; '.'
000000000022794e         db  0x00 ; '.'
000000000022794f         db  0x00 ; '.'
0000000000227950         db  0x00 ; '.'
0000000000227951         db  0x00 ; '.'
0000000000227952         db  0x00 ; '.'
0000000000227953         db  0x00 ; '.'
0000000000227954         db  0x00 ; '.'
0000000000227955         db  0x00 ; '.'
0000000000227956         db  0x00 ; '.'
0000000000227957         db  0x00 ; '.'
0000000000227958         db  0x63 ; 'c'
0000000000227959         db  0x00 ; '.'
000000000022795a         db  0x00 ; '.'
000000000022795b         db  0x00 ; '.'
000000000022795c         db  0x00 ; '.'
000000000022795d         db  0x00 ; '.'
000000000022795e         db  0x00 ; '.'
000000000022795f         db  0x00 ; '.'
0000000000227960         db  0x13 ; '.'
0000000000227961         db  0xfe ; '.'
0000000000227962         db  0x01 ; '.'
0000000000227963         db  0x00 ; '.'
0000000000227964         db  0x00 ; '.'
0000000000227965         db  0x00 ; '.'
0000000000227966         db  0x00 ; '.'
0000000000227967         db  0x00 ; '.'
0000000000227968         db  0x01 ; '.'
0000000000227969         db  0x00 ; '.'
000000000022796a         db  0x00 ; '.'
000000000022796b         db  0x00 ; '.'
000000000022796c         db  0x00 ; '.'
000000000022796d         db  0x00 ; '.'
000000000022796e         db  0x00 ; '.'
000000000022796f         db  0x00 ; '.'
0000000000227970         db  0x00 ; '.'
0000000000227971         db  0x00 ; '.'
0000000000227972         db  0x00 ; '.'
0000000000227973         db  0x00 ; '.'
0000000000227974         db  0x00 ; '.'
0000000000227975         db  0x00 ; '.'
0000000000227976         db  0x00 ; '.'
0000000000227977         db  0x00 ; '.'
0000000000227978         db  0x74 ; 't'
0000000000227979         db  0x00 ; '.'
000000000022797a         db  0x00 ; '.'
000000000022797b         db  0x00 ; '.'
000000000022797c         db  0x00 ; '.'
000000000022797d         db  0x00 ; '.'
000000000022797e         db  0x00 ; '.'
000000000022797f         db  0x00 ; '.'
0000000000227980         db  0xa2 ; '.'
0000000000227981         db  0xfb ; '.'
0000000000227982         db  0x01 ; '.'
0000000000227983         db  0x00 ; '.'
0000000000227984         db  0x00 ; '.'
0000000000227985         db  0x00 ; '.'
0000000000227986         db  0x00 ; '.'
0000000000227987         db  0x00 ; '.'
0000000000227988         db  0x02 ; '.'
0000000000227989         db  0x00 ; '.'
000000000022798a         db  0x00 ; '.'
000000000022798b         db  0x00 ; '.'
000000000022798c         db  0x00 ; '.'
000000000022798d         db  0x00 ; '.'
000000000022798e         db  0x00 ; '.'
000000000022798f         db  0x00 ; '.'
0000000000227990         db  0x00 ; '.'
0000000000227991         db  0x00 ; '.'
0000000000227992         db  0x00 ; '.'
0000000000227993         db  0x00 ; '.'
0000000000227994         db  0x00 ; '.'
0000000000227995         db  0x00 ; '.'
0000000000227996         db  0x00 ; '.'
0000000000227997         db  0x00 ; '.'
0000000000227998         db  0x85 ; '.'
0000000000227999         db  0x00 ; '.'
000000000022799a         db  0x00 ; '.'
000000000022799b         db  0x00 ; '.'
000000000022799c         db  0x00 ; '.'
000000000022799d         db  0x00 ; '.'
000000000022799e         db  0x00 ; '.'
000000000022799f         db  0x00 ; '.'
00000000002279a0         db  0x1d ; '.'
00000000002279a1         db  0xfe ; '.'
00000000002279a2         db  0x01 ; '.'
00000000002279a3         db  0x00 ; '.'
00000000002279a4         db  0x00 ; '.'
00000000002279a5         db  0x00 ; '.'
00000000002279a6         db  0x00 ; '.'
00000000002279a7         db  0x00 ; '.'
00000000002279a8         db  0x01 ; '.'
00000000002279a9         db  0x00 ; '.'
00000000002279aa         db  0x00 ; '.'
00000000002279ab         db  0x00 ; '.'
00000000002279ac         db  0x00 ; '.'
00000000002279ad         db  0x00 ; '.'
00000000002279ae         db  0x00 ; '.'
00000000002279af         db  0x00 ; '.'
00000000002279b0         db  0x00 ; '.'
00000000002279b1         db  0x00 ; '.'
00000000002279b2         db  0x00 ; '.'
00000000002279b3         db  0x00 ; '.'
00000000002279b4         db  0x00 ; '.'
00000000002279b5         db  0x00 ; '.'
00000000002279b6         db  0x00 ; '.'
00000000002279b7         db  0x00 ; '.'
00000000002279b8         db  0x86 ; '.'
00000000002279b9         db  0x00 ; '.'
00000000002279ba         db  0x00 ; '.'
00000000002279bb         db  0x00 ; '.'
00000000002279bc         db  0x00 ; '.'
00000000002279bd         db  0x00 ; '.'
00000000002279be         db  0x00 ; '.'
00000000002279bf         db  0x00 ; '.'
00000000002279c0         db  0x28 ; '('
00000000002279c1         db  0xfe ; '.'
00000000002279c2         db  0x01 ; '.'
00000000002279c3         db  0x00 ; '.'
00000000002279c4         db  0x00 ; '.'
00000000002279c5         db  0x00 ; '.'
00000000002279c6         db  0x00 ; '.'
00000000002279c7         db  0x00 ; '.'
00000000002279c8         db  0x00 ; '.'
00000000002279c9         db  0x00 ; '.'
00000000002279ca         db  0x00 ; '.'
00000000002279cb         db  0x00 ; '.'
00000000002279cc         db  0x00 ; '.'
00000000002279cd         db  0x00 ; '.'
00000000002279ce         db  0x00 ; '.'
00000000002279cf         db  0x00 ; '.'
00000000002279d0         db  0x00 ; '.'
00000000002279d1         db  0x00 ; '.'
00000000002279d2         db  0x00 ; '.'
00000000002279d3         db  0x00 ; '.'
00000000002279d4         db  0x00 ; '.'
00000000002279d5         db  0x00 ; '.'
00000000002279d6         db  0x00 ; '.'
00000000002279d7         db  0x00 ; '.'
00000000002279d8         db  0x7e ; '~'
00000000002279d9         db  0xff ; '.'
00000000002279da         db  0xff ; '.'
00000000002279db         db  0xff ; '.'
00000000002279dc         db  0x00 ; '.'
00000000002279dd         db  0x00 ; '.'
00000000002279de         db  0x00 ; '.'
00000000002279df         db  0x00 ; '.'
00000000002279e0         db  0x2d ; '-'
00000000002279e1         db  0xfe ; '.'
00000000002279e2         db  0x01 ; '.'
00000000002279e3         db  0x00 ; '.'
00000000002279e4         db  0x00 ; '.'
00000000002279e5         db  0x00 ; '.'
00000000002279e6         db  0x00 ; '.'
00000000002279e7         db  0x00 ; '.'
00000000002279e8         db  0x00 ; '.'
00000000002279e9         db  0x00 ; '.'
00000000002279ea         db  0x00 ; '.'
00000000002279eb         db  0x00 ; '.'
00000000002279ec         db  0x00 ; '.'
00000000002279ed         db  0x00 ; '.'
00000000002279ee         db  0x00 ; '.'
00000000002279ef         db  0x00 ; '.'
00000000002279f0         db  0x00 ; '.'
00000000002279f1         db  0x00 ; '.'
00000000002279f2         db  0x00 ; '.'
00000000002279f3         db  0x00 ; '.'
00000000002279f4         db  0x00 ; '.'
00000000002279f5         db  0x00 ; '.'
00000000002279f6         db  0x00 ; '.'
00000000002279f7         db  0x00 ; '.'
00000000002279f8         db  0x7d ; '}'
00000000002279f9         db  0xff ; '.'
00000000002279fa         db  0xff ; '.'
00000000002279fb         db  0xff ; '.'
00000000002279fc         db  0x00 ; '.'
00000000002279fd         db  0x00 ; '.'
00000000002279fe         db  0x00 ; '.'
00000000002279ff         db  0x00 ; '.'
0000000000227a00         db  0x00 ; '.'
0000000000227a01         db  0x00 ; '.'
0000000000227a02         db  0x00 ; '.'
0000000000227a03         db  0x00 ; '.'
0000000000227a04         db  0x00 ; '.'
0000000000227a05         db  0x00 ; '.'
0000000000227a06         db  0x00 ; '.'
0000000000227a07         db  0x00 ; '.'
0000000000227a08         db  0x00 ; '.'
0000000000227a09         db  0x00 ; '.'
0000000000227a0a         db  0x00 ; '.'
0000000000227a0b         db  0x00 ; '.'
0000000000227a0c         db  0x00 ; '.'
0000000000227a0d         db  0x00 ; '.'
0000000000227a0e         db  0x00 ; '.'
0000000000227a0f         db  0x00 ; '.'
0000000000227a10         db  0x00 ; '.'
0000000000227a11         db  0x00 ; '.'
0000000000227a12         db  0x00 ; '.'
0000000000227a13         db  0x00 ; '.'
0000000000227a14         db  0x00 ; '.'
0000000000227a15         db  0x00 ; '.'
0000000000227a16         db  0x00 ; '.'
0000000000227a17         db  0x00 ; '.'
0000000000227a18         db  0x00 ; '.'
0000000000227a19         db  0x00 ; '.'
0000000000227a1a         db  0x00 ; '.'
0000000000227a1b         db  0x00 ; '.'
0000000000227a1c         db  0x00 ; '.'
0000000000227a1d         db  0x00 ; '.'
0000000000227a1e         db  0x00 ; '.'
0000000000227a1f         db  0x00 ; '.'
                     block_size_args:
0000000000227a20         db  0xb9 ; '.'                                         ; DATA XREF=human_options+67
0000000000227a21         db  0xfd ; '.'
0000000000227a22         db  0x01 ; '.'
0000000000227a23         db  0x00 ; '.'
0000000000227a24         db  0x00 ; '.'
0000000000227a25         db  0x00 ; '.'
0000000000227a26         db  0x00 ; '.'
0000000000227a27         db  0x00 ; '.'
0000000000227a28         db  0xcf ; '.'
0000000000227a29         db  0xfd ; '.'
0000000000227a2a         db  0x01 ; '.'
0000000000227a2b         db  0x00 ; '.'
0000000000227a2c         db  0x00 ; '.'
0000000000227a2d         db  0x00 ; '.'
0000000000227a2e         db  0x00 ; '.'
0000000000227a2f         db  0x00 ; '.'
0000000000227a30         db  0x00 ; '.'
0000000000227a31         db  0x00 ; '.'
0000000000227a32         db  0x00 ; '.'
0000000000227a33         db  0x00 ; '.'
0000000000227a34         db  0x00 ; '.'
0000000000227a35         db  0x00 ; '.'
0000000000227a36         db  0x00 ; '.'
0000000000227a37         db  0x00 ; '.'
0000000000227a38         db  0x00 ; '.'
0000000000227a39         db  0x00 ; '.'
0000000000227a3a         db  0x00 ; '.'
0000000000227a3b         db  0x00 ; '.'
0000000000227a3c         db  0x00 ; '.'
0000000000227a3d         db  0x00 ; '.'
0000000000227a3e         db  0x00 ; '.'
0000000000227a3f         db  0x00 ; '.'
                     quoting_style_args:
0000000000227a40         db  0xcf ; '.'
0000000000227a41         db  0x1a ; '.'
0000000000227a42         db  0x02 ; '.'
0000000000227a43         db  0x00 ; '.'
0000000000227a44         db  0x00 ; '.'
0000000000227a45         db  0x00 ; '.'
0000000000227a46         db  0x00 ; '.'
0000000000227a47         db  0x00 ; '.'
0000000000227a48         db  0xd7 ; '.'
0000000000227a49         db  0x1a ; '.'
0000000000227a4a         db  0x02 ; '.'
0000000000227a4b         db  0x00 ; '.'
0000000000227a4c         db  0x00 ; '.'
0000000000227a4d         db  0x00 ; '.'
0000000000227a4e         db  0x00 ; '.'
0000000000227a4f         db  0x00 ; '.'
0000000000227a50         db  0xdd ; '.'
0000000000227a51         db  0x1a ; '.'
0000000000227a52         db  0x02 ; '.'
0000000000227a53         db  0x00 ; '.'
0000000000227a54         db  0x00 ; '.'
0000000000227a55         db  0x00 ; '.'
0000000000227a56         db  0x00 ; '.'
0000000000227a57         db  0x00 ; '.'
0000000000227a58         db  0xea ; '.'
0000000000227a59         db  0x1a ; '.'
0000000000227a5a         db  0x02 ; '.'
0000000000227a5b         db  0x00 ; '.'
0000000000227a5c         db  0x00 ; '.'
0000000000227a5d         db  0x00 ; '.'
0000000000227a5e         db  0x00 ; '.'
0000000000227a5f         db  0x00 ; '.'
0000000000227a60         db  0xf7 ; '.'
0000000000227a61         db  0x1a ; '.'
0000000000227a62         db  0x02 ; '.'
0000000000227a63         db  0x00 ; '.'
0000000000227a64         db  0x00 ; '.'
0000000000227a65         db  0x00 ; '.'
0000000000227a66         db  0x00 ; '.'
0000000000227a67         db  0x00 ; '.'
0000000000227a68         db  0xfd ; '.'
0000000000227a69         db  0x26 ; '&'
0000000000227a6a         db  0x02 ; '.'
0000000000227a6b         db  0x00 ; '.'
0000000000227a6c         db  0x00 ; '.'
0000000000227a6d         db  0x00 ; '.'
0000000000227a6e         db  0x00 ; '.'
0000000000227a6f         db  0x00 ; '.'
0000000000227a70         db  0x0b ; '.'
0000000000227a71         db  0x1b ; '.'
0000000000227a72         db  0x02 ; '.'
0000000000227a73         db  0x00 ; '.'
0000000000227a74         db  0x00 ; '.'
0000000000227a75         db  0x00 ; '.'
0000000000227a76         db  0x00 ; '.'
0000000000227a77         db  0x00 ; '.'
0000000000227a78         db  0xf0 ; '.'
0000000000227a79         db  0x1a ; '.'
0000000000227a7a         db  0x02 ; '.'
0000000000227a7b         db  0x00 ; '.'
0000000000227a7c         db  0x00 ; '.'
0000000000227a7d         db  0x00 ; '.'
0000000000227a7e         db  0x00 ; '.'
0000000000227a7f         db  0x00 ; '.'
0000000000227a80         db  0x4e ; 'N'
0000000000227a81         db  0xfb ; '.'
0000000000227a82         db  0x01 ; '.'
0000000000227a83         db  0x00 ; '.'
0000000000227a84         db  0x00 ; '.'
0000000000227a85         db  0x00 ; '.'
0000000000227a86         db  0x00 ; '.'
0000000000227a87         db  0x00 ; '.'
0000000000227a88         db  0x13 ; '.'
0000000000227a89         db  0x1b ; '.'
0000000000227a8a         db  0x02 ; '.'
0000000000227a8b         db  0x00 ; '.'
0000000000227a8c         db  0x00 ; '.'
0000000000227a8d         db  0x00 ; '.'
0000000000227a8e         db  0x00 ; '.'
0000000000227a8f         db  0x00 ; '.'
0000000000227a90         db  0x00 ; '.'
0000000000227a91         db  0x00 ; '.'
0000000000227a92         db  0x00 ; '.'
0000000000227a93         db  0x00 ; '.'
0000000000227a94         db  0x00 ; '.'
0000000000227a95         db  0x00 ; '.'
0000000000227a96         db  0x00 ; '.'
0000000000227a97         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x227a98; 0x227c88[ (496 bytes)
        ; File offset : [162456; 162952[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000227a98         db  0x01 ; '.'
0000000000227a99         db  0x00 ; '.'
0000000000227a9a         db  0x00 ; '.'
0000000000227a9b         db  0x00 ; '.'
0000000000227a9c         db  0x00 ; '.'
0000000000227a9d         db  0x00 ; '.'
0000000000227a9e         db  0x00 ; '.'
0000000000227a9f         db  0x00 ; '.'
0000000000227aa0         db  0x01 ; '.'
0000000000227aa1         db  0x00 ; '.'
0000000000227aa2         db  0x00 ; '.'
0000000000227aa3         db  0x00 ; '.'
0000000000227aa4         db  0x00 ; '.'
0000000000227aa5         db  0x00 ; '.'
0000000000227aa6         db  0x00 ; '.'
0000000000227aa7         db  0x00 ; '.'
0000000000227aa8         db  0x0c ; '.'
0000000000227aa9         db  0x00 ; '.'
0000000000227aaa         db  0x00 ; '.'
0000000000227aab         db  0x00 ; '.'
0000000000227aac         db  0x00 ; '.'
0000000000227aad         db  0x00 ; '.'
0000000000227aae         db  0x00 ; '.'
0000000000227aaf         db  0x00 ; '.'
0000000000227ab0         db  0x90 ; '.'
0000000000227ab1         db  0x23 ; '#'
0000000000227ab2         db  0x00 ; '.'
0000000000227ab3         db  0x00 ; '.'
0000000000227ab4         db  0x00 ; '.'
0000000000227ab5         db  0x00 ; '.'
0000000000227ab6         db  0x00 ; '.'
0000000000227ab7         db  0x00 ; '.'
0000000000227ab8         db  0x0d ; '.'
0000000000227ab9         db  0x00 ; '.'
0000000000227aba         db  0x00 ; '.'
0000000000227abb         db  0x00 ; '.'
0000000000227abc         db  0x00 ; '.'
0000000000227abd         db  0x00 ; '.'
0000000000227abe         db  0x00 ; '.'
0000000000227abf         db  0x00 ; '.'
0000000000227ac0         db  0x50 ; 'P'
0000000000227ac1         db  0xfa ; '.'
0000000000227ac2         db  0x01 ; '.'
0000000000227ac3         db  0x00 ; '.'
0000000000227ac4         db  0x00 ; '.'
0000000000227ac5         db  0x00 ; '.'
0000000000227ac6         db  0x00 ; '.'
0000000000227ac7         db  0x00 ; '.'
0000000000227ac8         db  0x19 ; '.'
0000000000227ac9         db  0x00 ; '.'
0000000000227aca         db  0x00 ; '.'
0000000000227acb         db  0x00 ; '.'
0000000000227acc         db  0x00 ; '.'
0000000000227acd         db  0x00 ; '.'
0000000000227ace         db  0x00 ; '.'
0000000000227acf         db  0x00 ; '.'
0000000000227ad0         db  0x70 ; 'p'
0000000000227ad1         db  0x76 ; 'v'
0000000000227ad2         db  0x22 ; '"'
0000000000227ad3         db  0x00 ; '.'
0000000000227ad4         db  0x00 ; '.'
0000000000227ad5         db  0x00 ; '.'
0000000000227ad6         db  0x00 ; '.'
0000000000227ad7         db  0x00 ; '.'
0000000000227ad8         db  0x1b ; '.'
0000000000227ad9         db  0x00 ; '.'
0000000000227ada         db  0x00 ; '.'
0000000000227adb         db  0x00 ; '.'
0000000000227adc         db  0x00 ; '.'
0000000000227add         db  0x00 ; '.'
0000000000227ade         db  0x00 ; '.'
0000000000227adf         db  0x00 ; '.'
0000000000227ae0         db  0x08 ; '.'
0000000000227ae1         db  0x00 ; '.'
0000000000227ae2         db  0x00 ; '.'
0000000000227ae3         db  0x00 ; '.'
0000000000227ae4         db  0x00 ; '.'
0000000000227ae5         db  0x00 ; '.'
0000000000227ae6         db  0x00 ; '.'
0000000000227ae7         db  0x00 ; '.'
0000000000227ae8         db  0x1a ; '.'
0000000000227ae9         db  0x00 ; '.'
0000000000227aea         db  0x00 ; '.'
0000000000227aeb         db  0x00 ; '.'
0000000000227aec         db  0x00 ; '.'
0000000000227aed         db  0x00 ; '.'
0000000000227aee         db  0x00 ; '.'
0000000000227aef         db  0x00 ; '.'
0000000000227af0         db  0x78 ; 'x'
0000000000227af1         db  0x76 ; 'v'
0000000000227af2         db  0x22 ; '"'
0000000000227af3         db  0x00 ; '.'
0000000000227af4         db  0x00 ; '.'
0000000000227af5         db  0x00 ; '.'
0000000000227af6         db  0x00 ; '.'
0000000000227af7         db  0x00 ; '.'
0000000000227af8         db  0x1c ; '.'
0000000000227af9         db  0x00 ; '.'
0000000000227afa         db  0x00 ; '.'
0000000000227afb         db  0x00 ; '.'
0000000000227afc         db  0x00 ; '.'
0000000000227afd         db  0x00 ; '.'
0000000000227afe         db  0x00 ; '.'
0000000000227aff         db  0x00 ; '.'
0000000000227b00         db  0x08 ; '.'
0000000000227b01         db  0x00 ; '.'
0000000000227b02         db  0x00 ; '.'
0000000000227b03         db  0x00 ; '.'
0000000000227b04         db  0x00 ; '.'
0000000000227b05         db  0x00 ; '.'
0000000000227b06         db  0x00 ; '.'
0000000000227b07         db  0x00 ; '.'
0000000000227b08         db  0xf5 ; '.'
0000000000227b09         db  0xfe ; '.'
0000000000227b0a         db  0xff ; '.'
0000000000227b0b         db  0x6f ; 'o'
0000000000227b0c         db  0x00 ; '.'
0000000000227b0d         db  0x00 ; '.'
0000000000227b0e         db  0x00 ; '.'
0000000000227b0f         db  0x00 ; '.'
0000000000227b10         db  0x98 ; '.'
0000000000227b11         db  0x02 ; '.'
0000000000227b12         db  0x00 ; '.'
0000000000227b13         db  0x00 ; '.'
0000000000227b14         db  0x00 ; '.'
0000000000227b15         db  0x00 ; '.'
0000000000227b16         db  0x00 ; '.'
0000000000227b17         db  0x00 ; '.'
0000000000227b18         db  0x05 ; '.'
0000000000227b19         db  0x00 ; '.'
0000000000227b1a         db  0x00 ; '.'
0000000000227b1b         db  0x00 ; '.'
0000000000227b1c         db  0x00 ; '.'
0000000000227b1d         db  0x00 ; '.'
0000000000227b1e         db  0x00 ; '.'
0000000000227b1f         db  0x00 ; '.'
0000000000227b20         db  0xf0 ; '.'
0000000000227b21         db  0x0d ; '.'
0000000000227b22         db  0x00 ; '.'
0000000000227b23         db  0x00 ; '.'
0000000000227b24         db  0x00 ; '.'
0000000000227b25         db  0x00 ; '.'
0000000000227b26         db  0x00 ; '.'
0000000000227b27         db  0x00 ; '.'
0000000000227b28         db  0x06 ; '.'
0000000000227b29         db  0x00 ; '.'
0000000000227b2a         db  0x00 ; '.'
0000000000227b2b         db  0x00 ; '.'
0000000000227b2c         db  0x00 ; '.'
0000000000227b2d         db  0x00 ; '.'
0000000000227b2e         db  0x00 ; '.'
0000000000227b2f         db  0x00 ; '.'
0000000000227b30         db  0xe0 ; '.'
0000000000227b31         db  0x02 ; '.'
0000000000227b32         db  0x00 ; '.'
0000000000227b33         db  0x00 ; '.'
0000000000227b34         db  0x00 ; '.'
0000000000227b35         db  0x00 ; '.'
0000000000227b36         db  0x00 ; '.'
0000000000227b37         db  0x00 ; '.'
0000000000227b38         db  0x0a ; '.'
0000000000227b39         db  0x00 ; '.'
0000000000227b3a         db  0x00 ; '.'
0000000000227b3b         db  0x00 ; '.'
0000000000227b3c         db  0x00 ; '.'
0000000000227b3d         db  0x00 ; '.'
0000000000227b3e         db  0x00 ; '.'
0000000000227b3f         db  0x00 ; '.'
0000000000227b40         db  0xa9 ; '.'
0000000000227b41         db  0x04 ; '.'
0000000000227b42         db  0x00 ; '.'
0000000000227b43         db  0x00 ; '.'
0000000000227b44         db  0x00 ; '.'
0000000000227b45         db  0x00 ; '.'
0000000000227b46         db  0x00 ; '.'
0000000000227b47         db  0x00 ; '.'
0000000000227b48         db  0x0b ; '.'
0000000000227b49         db  0x00 ; '.'
0000000000227b4a         db  0x00 ; '.'
0000000000227b4b         db  0x00 ; '.'
0000000000227b4c         db  0x00 ; '.'
0000000000227b4d         db  0x00 ; '.'
0000000000227b4e         db  0x00 ; '.'
0000000000227b4f         db  0x00 ; '.'
0000000000227b50         db  0x18 ; '.'
0000000000227b51         db  0x00 ; '.'
0000000000227b52         db  0x00 ; '.'
0000000000227b53         db  0x00 ; '.'
0000000000227b54         db  0x00 ; '.'
0000000000227b55         db  0x00 ; '.'
0000000000227b56         db  0x00 ; '.'
0000000000227b57         db  0x00 ; '.'
0000000000227b58         db  0x15 ; '.'
0000000000227b59         db  0x00 ; '.'
0000000000227b5a         db  0x00 ; '.'
0000000000227b5b         db  0x00 ; '.'
0000000000227b5c         db  0x00 ; '.'
0000000000227b5d         db  0x00 ; '.'
0000000000227b5e         db  0x00 ; '.'
0000000000227b5f         db  0x00 ; '.'
0000000000227b60         db  0x00 ; '.'
0000000000227b61         db  0x00 ; '.'
0000000000227b62         db  0x00 ; '.'
0000000000227b63         db  0x00 ; '.'
0000000000227b64         db  0x00 ; '.'
0000000000227b65         db  0x00 ; '.'
0000000000227b66         db  0x00 ; '.'
0000000000227b67         db  0x00 ; '.'
0000000000227b68         db  0x03 ; '.'
0000000000227b69         db  0x00 ; '.'
0000000000227b6a         db  0x00 ; '.'
0000000000227b6b         db  0x00 ; '.'
0000000000227b6c         db  0x00 ; '.'
0000000000227b6d         db  0x00 ; '.'
0000000000227b6e         db  0x00 ; '.'
0000000000227b6f         db  0x00 ; '.'
0000000000227b70         db  0x88 ; '.'
0000000000227b71         db  0x7c ; '|'
0000000000227b72         db  0x22 ; '"'
0000000000227b73         db  0x00 ; '.'
0000000000227b74         db  0x00 ; '.'
0000000000227b75         db  0x00 ; '.'
0000000000227b76         db  0x00 ; '.'
0000000000227b77         db  0x00 ; '.'
0000000000227b78         db  0x02 ; '.'
0000000000227b79         db  0x00 ; '.'
0000000000227b7a         db  0x00 ; '.'
0000000000227b7b         db  0x00 ; '.'
0000000000227b7c         db  0x00 ; '.'
0000000000227b7d         db  0x00 ; '.'
0000000000227b7e         db  0x00 ; '.'
0000000000227b7f         db  0x00 ; '.'
0000000000227b80         db  0x78 ; 'x'
0000000000227b81         db  0x09 ; '.'
0000000000227b82         db  0x00 ; '.'
0000000000227b83         db  0x00 ; '.'
0000000000227b84         db  0x00 ; '.'
0000000000227b85         db  0x00 ; '.'
0000000000227b86         db  0x00 ; '.'
0000000000227b87         db  0x00 ; '.'
0000000000227b88         db  0x14 ; '.'
0000000000227b89         db  0x00 ; '.'
0000000000227b8a         db  0x00 ; '.'
0000000000227b8b         db  0x00 ; '.'
0000000000227b8c         db  0x00 ; '.'
0000000000227b8d         db  0x00 ; '.'
0000000000227b8e         db  0x00 ; '.'
0000000000227b8f         db  0x00 ; '.'
0000000000227b90         db  0x07 ; '.'
0000000000227b91         db  0x00 ; '.'
0000000000227b92         db  0x00 ; '.'
0000000000227b93         db  0x00 ; '.'
0000000000227b94         db  0x00 ; '.'
0000000000227b95         db  0x00 ; '.'
0000000000227b96         db  0x00 ; '.'
0000000000227b97         db  0x00 ; '.'
0000000000227b98         db  0x17 ; '.'
0000000000227b99         db  0x00 ; '.'
0000000000227b9a         db  0x00 ; '.'
0000000000227b9b         db  0x00 ; '.'
0000000000227b9c         db  0x00 ; '.'
0000000000227b9d         db  0x00 ; '.'
0000000000227b9e         db  0x00 ; '.'
0000000000227b9f         db  0x00 ; '.'
0000000000227ba0         db  0x18 ; '.'
0000000000227ba1         db  0x1a ; '.'
0000000000227ba2         db  0x00 ; '.'
0000000000227ba3         db  0x00 ; '.'
0000000000227ba4         db  0x00 ; '.'
0000000000227ba5         db  0x00 ; '.'
0000000000227ba6         db  0x00 ; '.'
0000000000227ba7         db  0x00 ; '.'
0000000000227ba8         db  0x07 ; '.'
0000000000227ba9         db  0x00 ; '.'
0000000000227baa         db  0x00 ; '.'
0000000000227bab         db  0x00 ; '.'
0000000000227bac         db  0x00 ; '.'
0000000000227bad         db  0x00 ; '.'
0000000000227bae         db  0x00 ; '.'
0000000000227baf         db  0x00 ; '.'
0000000000227bb0         db  0xe8 ; '.'
0000000000227bb1         db  0x13 ; '.'
0000000000227bb2         db  0x00 ; '.'
0000000000227bb3         db  0x00 ; '.'
0000000000227bb4         db  0x00 ; '.'
0000000000227bb5         db  0x00 ; '.'
0000000000227bb6         db  0x00 ; '.'
0000000000227bb7         db  0x00 ; '.'
0000000000227bb8         db  0x08 ; '.'
0000000000227bb9         db  0x00 ; '.'
0000000000227bba         db  0x00 ; '.'
0000000000227bbb         db  0x00 ; '.'
0000000000227bbc         db  0x00 ; '.'
0000000000227bbd         db  0x00 ; '.'
0000000000227bbe         db  0x00 ; '.'
0000000000227bbf         db  0x00 ; '.'
0000000000227bc0         db  0x30 ; '0'
0000000000227bc1         db  0x06 ; '.'
0000000000227bc2         db  0x00 ; '.'
0000000000227bc3         db  0x00 ; '.'
0000000000227bc4         db  0x00 ; '.'
0000000000227bc5         db  0x00 ; '.'
0000000000227bc6         db  0x00 ; '.'
0000000000227bc7         db  0x00 ; '.'
0000000000227bc8         db  0x09 ; '.'
0000000000227bc9         db  0x00 ; '.'
0000000000227bca         db  0x00 ; '.'
0000000000227bcb         db  0x00 ; '.'
0000000000227bcc         db  0x00 ; '.'
0000000000227bcd         db  0x00 ; '.'
0000000000227bce         db  0x00 ; '.'
0000000000227bcf         db  0x00 ; '.'
0000000000227bd0         db  0x18 ; '.'
0000000000227bd1         db  0x00 ; '.'
0000000000227bd2         db  0x00 ; '.'
0000000000227bd3         db  0x00 ; '.'
0000000000227bd4         db  0x00 ; '.'
0000000000227bd5         db  0x00 ; '.'
0000000000227bd6         db  0x00 ; '.'
0000000000227bd7         db  0x00 ; '.'
0000000000227bd8         db  0x1e ; '.'
0000000000227bd9         db  0x00 ; '.'
0000000000227bda         db  0x00 ; '.'
0000000000227bdb         db  0x00 ; '.'
0000000000227bdc         db  0x00 ; '.'
0000000000227bdd         db  0x00 ; '.'
0000000000227bde         db  0x00 ; '.'
0000000000227bdf         db  0x00 ; '.'
0000000000227be0         db  0x08 ; '.'
0000000000227be1         db  0x00 ; '.'
0000000000227be2         db  0x00 ; '.'
0000000000227be3         db  0x00 ; '.'
0000000000227be4         db  0x00 ; '.'
0000000000227be5         db  0x00 ; '.'
0000000000227be6         db  0x00 ; '.'
0000000000227be7         db  0x00 ; '.'
0000000000227be8         db  0xfb ; '.'
0000000000227be9         db  0xff ; '.'
0000000000227bea         db  0xff ; '.'
0000000000227beb         db  0x6f ; 'o'
0000000000227bec         db  0x00 ; '.'
0000000000227bed         db  0x00 ; '.'
0000000000227bee         db  0x00 ; '.'
0000000000227bef         db  0x00 ; '.'
0000000000227bf0         db  0x01 ; '.'
0000000000227bf1         db  0x00 ; '.'
0000000000227bf2         db  0x00 ; '.'
0000000000227bf3         db  0x08 ; '.'
0000000000227bf4         db  0x00 ; '.'
0000000000227bf5         db  0x00 ; '.'
0000000000227bf6         db  0x00 ; '.'
0000000000227bf7         db  0x00 ; '.'
0000000000227bf8         db  0xfe ; '.'
0000000000227bf9         db  0xff ; '.'
0000000000227bfa         db  0xff ; '.'
0000000000227bfb         db  0x6f ; 'o'
0000000000227bfc         db  0x00 ; '.'
0000000000227bfd         db  0x00 ; '.'
0000000000227bfe         db  0x00 ; '.'
0000000000227bff         db  0x00 ; '.'
0000000000227c00         db  0x88 ; '.'
0000000000227c01         db  0x13 ; '.'
0000000000227c02         db  0x00 ; '.'
0000000000227c03         db  0x00 ; '.'
0000000000227c04         db  0x00 ; '.'
0000000000227c05         db  0x00 ; '.'
0000000000227c06         db  0x00 ; '.'
0000000000227c07         db  0x00 ; '.'
0000000000227c08         db  0xff ; '.'
0000000000227c09         db  0xff ; '.'
0000000000227c0a         db  0xff ; '.'
0000000000227c0b         db  0x6f ; 'o'
0000000000227c0c         db  0x00 ; '.'
0000000000227c0d         db  0x00 ; '.'
0000000000227c0e         db  0x00 ; '.'
0000000000227c0f         db  0x00 ; '.'
0000000000227c10         db  0x01 ; '.'
0000000000227c11         db  0x00 ; '.'
0000000000227c12         db  0x00 ; '.'
0000000000227c13         db  0x00 ; '.'
0000000000227c14         db  0x00 ; '.'
0000000000227c15         db  0x00 ; '.'
0000000000227c16         db  0x00 ; '.'
0000000000227c17         db  0x00 ; '.'
0000000000227c18         db  0xf0 ; '.'
0000000000227c19         db  0xff ; '.'
0000000000227c1a         db  0xff ; '.'
0000000000227c1b         db  0x6f ; 'o'
0000000000227c1c         db  0x00 ; '.'
0000000000227c1d         db  0x00 ; '.'
0000000000227c1e         db  0x00 ; '.'
0000000000227c1f         db  0x00 ; '.'
0000000000227c20         db  0x9a ; '.'
0000000000227c21         db  0x12 ; '.'
0000000000227c22         db  0x00 ; '.'
0000000000227c23         db  0x00 ; '.'
0000000000227c24         db  0x00 ; '.'
0000000000227c25         db  0x00 ; '.'
0000000000227c26         db  0x00 ; '.'
0000000000227c27         db  0x00 ; '.'
0000000000227c28         db  0xf9 ; '.'
0000000000227c29         db  0xff ; '.'
0000000000227c2a         db  0xff ; '.'
0000000000227c2b         db  0x6f ; 'o'
0000000000227c2c         db  0x00 ; '.'
0000000000227c2d         db  0x00 ; '.'
0000000000227c2e         db  0x00 ; '.'
0000000000227c2f         db  0x00 ; '.'
0000000000227c30         db  0x34 ; '4'
0000000000227c31         db  0x00 ; '.'
0000000000227c32         db  0x00 ; '.'
0000000000227c33         db  0x00 ; '.'
0000000000227c34         db  0x00 ; '.'
0000000000227c35         db  0x00 ; '.'
0000000000227c36         db  0x00 ; '.'
0000000000227c37         db  0x00 ; '.'
0000000000227c38         db  0x00 ; '.'
0000000000227c39         db  0x00 ; '.'
0000000000227c3a         db  0x00 ; '.'
0000000000227c3b         db  0x00 ; '.'
0000000000227c3c         db  0x00 ; '.'
0000000000227c3d         db  0x00 ; '.'
0000000000227c3e         db  0x00 ; '.'
0000000000227c3f         db  0x00 ; '.'
0000000000227c40         db  0x00 ; '.'
0000000000227c41         db  0x00 ; '.'
0000000000227c42         db  0x00 ; '.'
0000000000227c43         db  0x00 ; '.'
0000000000227c44         db  0x00 ; '.'
0000000000227c45         db  0x00 ; '.'
0000000000227c46         db  0x00 ; '.'
0000000000227c47         db  0x00 ; '.'
0000000000227c48         db  0x00 ; '.'
0000000000227c49         db  0x00 ; '.'
0000000000227c4a         db  0x00 ; '.'
0000000000227c4b         db  0x00 ; '.'
0000000000227c4c         db  0x00 ; '.'
0000000000227c4d         db  0x00 ; '.'
0000000000227c4e         db  0x00 ; '.'
0000000000227c4f         db  0x00 ; '.'
0000000000227c50         db  0x00 ; '.'
0000000000227c51         db  0x00 ; '.'
0000000000227c52         db  0x00 ; '.'
0000000000227c53         db  0x00 ; '.'
0000000000227c54         db  0x00 ; '.'
0000000000227c55         db  0x00 ; '.'
0000000000227c56         db  0x00 ; '.'
0000000000227c57         db  0x00 ; '.'
0000000000227c58         db  0x00 ; '.'
0000000000227c59         db  0x00 ; '.'
0000000000227c5a         db  0x00 ; '.'
0000000000227c5b         db  0x00 ; '.'
0000000000227c5c         db  0x00 ; '.'
0000000000227c5d         db  0x00 ; '.'
0000000000227c5e         db  0x00 ; '.'
0000000000227c5f         db  0x00 ; '.'
0000000000227c60         db  0x00 ; '.'
0000000000227c61         db  0x00 ; '.'
0000000000227c62         db  0x00 ; '.'
0000000000227c63         db  0x00 ; '.'
0000000000227c64         db  0x00 ; '.'
0000000000227c65         db  0x00 ; '.'
0000000000227c66         db  0x00 ; '.'
0000000000227c67         db  0x00 ; '.'
0000000000227c68         db  0x00 ; '.'
0000000000227c69         db  0x00 ; '.'
0000000000227c6a         db  0x00 ; '.'
0000000000227c6b         db  0x00 ; '.'
0000000000227c6c         db  0x00 ; '.'
0000000000227c6d         db  0x00 ; '.'
0000000000227c6e         db  0x00 ; '.'
0000000000227c6f         db  0x00 ; '.'
0000000000227c70         db  0x00 ; '.'
0000000000227c71         db  0x00 ; '.'
0000000000227c72         db  0x00 ; '.'
0000000000227c73         db  0x00 ; '.'
0000000000227c74         db  0x00 ; '.'
0000000000227c75         db  0x00 ; '.'
0000000000227c76         db  0x00 ; '.'
0000000000227c77         db  0x00 ; '.'
0000000000227c78         db  0x00 ; '.'
0000000000227c79         db  0x00 ; '.'
0000000000227c7a         db  0x00 ; '.'
0000000000227c7b         db  0x00 ; '.'
0000000000227c7c         db  0x00 ; '.'
0000000000227c7d         db  0x00 ; '.'
0000000000227c7e         db  0x00 ; '.'
0000000000227c7f         db  0x00 ; '.'
0000000000227c80         db  0x00 ; '.'
0000000000227c81         db  0x00 ; '.'
0000000000227c82         db  0x00 ; '.'
0000000000227c83         db  0x00 ; '.'
0000000000227c84         db  0x00 ; '.'
0000000000227c85         db  0x00 ; '.'
0000000000227c86         db  0x00 ; '.'
0000000000227c87         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x227c88; 0x228000[ (888 bytes)
        ; File offset : [162952; 163840[ (888 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000227c88         db  0x98 ; '.'
0000000000227c89         db  0x7a ; 'z'
0000000000227c8a         db  0x22 ; '"'
0000000000227c8b         db  0x00 ; '.'
0000000000227c8c         db  0x00 ; '.'
0000000000227c8d         db  0x00 ; '.'
0000000000227c8e         db  0x00 ; '.'
0000000000227c8f         db  0x00 ; '.'
                     qword_227c90:
0000000000227c90         dq         0x0000000000000000                          ; DATA XREF=0x23b0
0000000000227c98         db  0x00 ; '.'                                         ; DATA XREF=0x23b6
0000000000227c99         db  0x00 ; '.'
0000000000227c9a         db  0x00 ; '.'
0000000000227c9b         db  0x00 ; '.'
0000000000227c9c         db  0x00 ; '.'
0000000000227c9d         db  0x00 ; '.'
0000000000227c9e         db  0x00 ; '.'
0000000000227c9f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000227ca0         dq         0x0000000000228310                          ; DATA XREF=j___ctype_toupper_loc
                     __uflow@GOT:        // __uflow
0000000000227ca8         dq         0x0000000000228318                          ; DATA XREF=j___uflow
                     getenv@GOT:        // getenv
0000000000227cb0         dq         0x0000000000228320                          ; DATA XREF=j_getenv
                     endmntent@GOT:        // endmntent
0000000000227cb8         dq         0x0000000000228330                          ; DATA XREF=j_endmntent
                     abort@GOT:        // abort
0000000000227cc0         dq         0x0000000000228338                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000227cc8         dq         0x0000000000228340                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
0000000000227cd0         dq         0x0000000000228348                          ; DATA XREF=j_strncmp
                     localtime_r@GOT:        // localtime_r
0000000000227cd8         dq         0x0000000000228358                          ; DATA XREF=j_localtime_r
                     _exit@GOT:        // _exit
0000000000227ce0         dq         0x0000000000228360                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
0000000000227ce8         dq         0x0000000000228368                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
0000000000227cf0         dq         0x0000000000228370                          ; DATA XREF=j___fpending
                     qsort@GOT:        // qsort
0000000000227cf8         dq         0x0000000000228378                          ; DATA XREF=j_qsort
                     iswcntrl@GOT:        // iswcntrl
0000000000227d00         dq         0x0000000000228380                          ; DATA XREF=j_iswcntrl
                     localeconv@GOT:        // localeconv
0000000000227d08         dq         0x0000000000228388                          ; DATA XREF=j_localeconv
                     fcntl@GOT:        // fcntl
0000000000227d10         dq         0x0000000000228390                          ; DATA XREF=j_fcntl
                     setenv@GOT:        // setenv
0000000000227d18         dq         0x0000000000228398                          ; DATA XREF=j_setenv
                     textdomain@GOT:        // textdomain
0000000000227d20         dq         0x00000000002283a0                          ; DATA XREF=j_textdomain
                     __strtol_internal@GOT:        // __strtol_internal
0000000000227d28         dq         0x00000000002283a8                          ; DATA XREF=j___strtol_internal
                     iswctype@GOT:        // iswctype
0000000000227d30         dq         0x00000000002283b0                          ; DATA XREF=j_iswctype
                     fclose@GOT:        // fclose
0000000000227d38         dq         0x00000000002283b8                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000227d40         dq         0x00000000002283c0                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
0000000000227d48         dq         0x00000000002283c8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000227d50         dq         0x00000000002283d0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000227d58         dq         0x00000000002283d8                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
0000000000227d60         dq         0x00000000002283e0                          ; DATA XREF=j___lxstat
                     openat@GOT:        // openat
0000000000227d68         dq         0x00000000002283e8                          ; DATA XREF=j_openat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000227d70         dq         0x00000000002283f0                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000227d78         dq         0x00000000002283f8                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000227d80         dq         0x0000000000228400                          ; DATA XREF=j_mbrtowc
                     dup2@GOT:        // dup2
0000000000227d88         dq         0x0000000000228408                          ; DATA XREF=j_dup2
                     strchr@GOT:        // strchr
0000000000227d90         dq         0x0000000000228410                          ; DATA XREF=j_strchr
                     __fxstatat@GOT:        // __fxstatat
0000000000227d98         dq         0x0000000000228418                          ; DATA XREF=j___fxstatat
                     __overflow@GOT:        // __overflow
0000000000227da0         dq         0x0000000000228420                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000227da8         dq         0x0000000000228428                          ; DATA XREF=j_strrchr
                     gmtime_r@GOT:        // gmtime_r
0000000000227db0         dq         0x0000000000228430                          ; DATA XREF=j_gmtime_r
                     lseek@GOT:        // lseek
0000000000227db8         dq         0x0000000000228438                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000227dc0         dq         0x0000000000228440                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
0000000000227dc8         dq         0x0000000000228448                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
0000000000227dd0         dq         0x0000000000228458                          ; DATA XREF=j_memset
                     freopen@GOT:        // freopen
0000000000227dd8         dq         0x0000000000228460                          ; DATA XREF=j_freopen
                     close@GOT:        // close
0000000000227de0         dq         0x0000000000228468                          ; DATA XREF=j_close
                     closedir@GOT:        // closedir
0000000000227de8         dq         0x0000000000228470                          ; DATA XREF=j_closedir
                     fputc@GOT:        // fputc
0000000000227df0         dq         0x0000000000228478                          ; DATA XREF=j_fputc
                     memchr@GOT:        // memchr
0000000000227df8         dq         0x0000000000228480                          ; DATA XREF=j_memchr
                     memcmp@GOT:        // memcmp
0000000000227e00         dq         0x0000000000228490                          ; DATA XREF=j_memcmp
                     wctype@GOT:        // wctype
0000000000227e08         dq         0x0000000000228498                          ; DATA XREF=j_wctype
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000227e10         dq         0x00000000002284a0                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000227e18         dq         0x00000000002284a8                          ; DATA XREF=j_calloc
                     __getdelim@GOT:        // __getdelim
0000000000227e20         dq         0x00000000002284b0                          ; DATA XREF=j___getdelim
                     strcmp@GOT:        // strcmp
0000000000227e28         dq         0x00000000002284b8                          ; DATA XREF=j_strcmp
                     dirfd@GOT:        // dirfd
0000000000227e30         dq         0x00000000002284c0                          ; DATA XREF=j_dirfd
                     __memcpy_chk@GOT:        // __memcpy_chk
0000000000227e38         dq         0x00000000002284c8                          ; DATA XREF=j___memcpy_chk
                     feof@GOT:        // feof
0000000000227e40         dq         0x00000000002284d0                          ; DATA XREF=j_feof
                     memcpy@GOT:        // memcpy
0000000000227e48         dq         0x00000000002284e0                          ; DATA XREF=j_memcpy
                     tzset@GOT:        // tzset
0000000000227e50         dq         0x00000000002284e8                          ; DATA XREF=j_tzset
                     fileno@GOT:        // fileno
0000000000227e58         dq         0x00000000002284f0                          ; DATA XREF=j_fileno
                     __xstat@GOT:        // __xstat
0000000000227e60         dq         0x00000000002284f8                          ; DATA XREF=j___xstat
                     readdir@GOT:        // readdir
0000000000227e68         dq         0x0000000000228500                          ; DATA XREF=j_readdir
                     wcwidth@GOT:        // wcwidth
0000000000227e70         dq         0x0000000000228508                          ; DATA XREF=j_wcwidth
                     iswalnum@GOT:        // iswalnum
0000000000227e78         dq         0x0000000000228510                          ; DATA XREF=j_iswalnum
                     malloc@GOT:        // malloc
0000000000227e80         dq         0x0000000000228518                          ; DATA XREF=j_malloc
                     wcrtomb@GOT:        // wcrtomb
0000000000227e88         dq         0x0000000000228520                          ; DATA XREF=j_wcrtomb
                     fflush@GOT:        // fflush
0000000000227e90         dq         0x0000000000228528                          ; DATA XREF=j_fflush
                     getmntent@GOT:        // getmntent
0000000000227e98         dq         0x0000000000228530                          ; DATA XREF=j_getmntent
                     setmntent@GOT:        // setmntent
0000000000227ea0         dq         0x0000000000228538                          ; DATA XREF=j_setmntent
                     nl_langinfo@GOT:        // nl_langinfo
0000000000227ea8         dq         0x0000000000228540                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
0000000000227eb0         dq         0x0000000000228548                          ; DATA XREF=j___fxstat
                     sscanf@GOT:        // sscanf
0000000000227eb8         dq         0x0000000000228550                          ; DATA XREF=j_sscanf
                     mktime@GOT:        // mktime
0000000000227ec0         dq         0x0000000000228558                          ; DATA XREF=j_mktime
                     __freading@GOT:        // __freading
0000000000227ec8         dq         0x0000000000228560                          ; DATA XREF=j___freading
                     fchdir@GOT:        // fchdir
0000000000227ed0         dq         0x0000000000228568                          ; DATA XREF=j_fchdir
                     realloc@GOT:        // realloc
0000000000227ed8         dq         0x0000000000228570                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
0000000000227ee0         dq         0x0000000000228578                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000227ee8         dq         0x0000000000228580                          ; DATA XREF=j___printf_chk
                     timegm@GOT:        // timegm
0000000000227ef0         dq         0x0000000000228588                          ; DATA XREF=j_timegm
                     strftime@GOT:        // strftime
0000000000227ef8         dq         0x0000000000228590                          ; DATA XREF=j_strftime
                     btowc@GOT:        // btowc
0000000000227f00         dq         0x0000000000228598                          ; DATA XREF=j_btowc
                     memmove@GOT:        // memmove
0000000000227f08         dq         0x00000000002285a0                          ; DATA XREF=j_memmove
                     error@GOT:        // error
0000000000227f10         dq         0x00000000002285a8                          ; DATA XREF=j_error
                     open@GOT:        // open
0000000000227f18         dq         0x00000000002285b0                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
0000000000227f20         dq         0x00000000002285b8                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
0000000000227f28         dq         0x00000000002285c0                          ; DATA XREF=j_fopen
                     towlower@GOT:        // towlower
0000000000227f30         dq         0x00000000002285c8                          ; DATA XREF=j_towlower
                     fdopendir@GOT:        // fdopendir
0000000000227f38         dq         0x00000000002285d0                          ; DATA XREF=j_fdopendir
                     unsetenv@GOT:        // unsetenv
0000000000227f40         dq         0x00000000002285d8                          ; DATA XREF=j_unsetenv
                     towupper@GOT:        // towupper
0000000000227f48         dq         0x00000000002285e0                          ; DATA XREF=j_towupper
                     strtoul@GOT:        // strtoul
0000000000227f50         dq         0x00000000002285e8                          ; DATA XREF=j_strtoul
                     fstatfs@GOT:        // fstatfs
0000000000227f58         dq         0x00000000002285f0                          ; DATA XREF=j_fstatfs
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000227f60         dq         0x00000000002285f8                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
0000000000227f68         dq         0x0000000000228600                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000227f70         dq         0x0000000000228608                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000227f78         dq         0x0000000000228610                          ; DATA XREF=j___fprintf_chk
                     fflush_unlocked@GOT:        // fflush_unlocked
0000000000227f80         dq         0x0000000000228620                          ; DATA XREF=j_fflush_unlocked
                     mbsinit@GOT:        // mbsinit
0000000000227f88         dq         0x0000000000228628                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000227f90         dq         0x0000000000228630                          ; DATA XREF=j_iswprint
                     hasmntopt@GOT:        // hasmntopt
0000000000227f98         dq         0x0000000000228638                          ; DATA XREF=j_hasmntopt
                     getdelim@GOT:        // getdelim
0000000000227fa0         dq         0x0000000000228648                          ; DATA XREF=j_getdelim
                     strstr@GOT:        // strstr
0000000000227fa8         dq         0x0000000000228650                          ; DATA XREF=j_strstr
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000227fb0         dq         0x0000000000228658                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000227fb8         dq         0x0000000000228660                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
0000000000227fc0         dq         0x0000000000228668                          ; DATA XREF=j___sprintf_chk
                     qword_227fc8:
0000000000227fc8         dq         0x0000000000000000                          ; DATA XREF=sub_2a10, ino_map_alloc+27, filesystem_type+96, setup_dir.isra.4+12
                     qword_227fd0:
0000000000227fd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
                     qword_227fd8:
0000000000227fd8         dq         0x0000000000000000                          ; DATA XREF=exclude_fnmatch+32
0000000000227fe0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000227fe1         db  0x00 ; '.'
0000000000227fe2         db  0x00 ; '.'
0000000000227fe3         db  0x00 ; '.'
0000000000227fe4         db  0x00 ; '.'
0000000000227fe5         db  0x00 ; '.'
0000000000227fe6         db  0x00 ; '.'
0000000000227fe7         db  0x00 ; '.'
                     qword_227fe8:
0000000000227fe8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_227ff0:
0000000000227ff0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_227ff8:
0000000000227ff8         dq         0x0000000000000000                          ; DATA XREF=j_qword_227ff8, __do_global_dtors_aux+9


        ; Section .data
        ; Range: [0x228000; 0x2280a0[ (160 bytes)
        ; File offset : [163840; 164000[ (160 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000228000         align      8
                     __dso_handle:
0000000000228008         dq         0x0000000000228008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     max_depth:
0000000000228010         dq         0xffffffffffffffff                          ; DATA XREF=main+564, main+2715, main+3300, main+4009, main+4025
                     Version:
0000000000228018         dq         0x0000000000021434                          ; "8.31", DATA XREF=main+884
                     argmatch_die:
0000000000228020         dq         0x0000000000004700                          ; DATA XREF=main+998, main+4277
                     exit_failure:
0000000000228028         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23, xstrtol_fatal+35
000000000022802c         db  0x00 ; '.'
000000000022802d         db  0x00 ; '.'
000000000022802e         db  0x00 ; '.'
000000000022802f         db  0x00 ; '.'
0000000000228030         db  0x00 ; '.'
0000000000228031         db  0x00 ; '.'
0000000000228032         db  0x00 ; '.'
0000000000228033         db  0x00 ; '.'
0000000000228034         db  0x00 ; '.'
0000000000228035         db  0x00 ; '.'
0000000000228036         db  0x00 ; '.'
0000000000228037         db  0x00 ; '.'
0000000000228038         db  0x00 ; '.'
0000000000228039         db  0x00 ; '.'
000000000022803a         db  0x00 ; '.'
000000000022803b         db  0x00 ; '.'
000000000022803c         db  0x00 ; '.'
000000000022803d         db  0x00 ; '.'
000000000022803e         db  0x00 ; '.'
000000000022803f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000228040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000228041         db  0x00 ; '.'
0000000000228042         db  0x00 ; '.'
0000000000228043         db  0x00 ; '.'
0000000000228044         db  0x00 ; '.'
0000000000228045         db  0x00 ; '.'
0000000000228046         db  0x00 ; '.'
0000000000228047         db  0x00 ; '.'
0000000000228048         db  0x00 ; '.'
0000000000228049         db  0x00 ; '.'
000000000022804a         db  0x00 ; '.'
000000000022804b         db  0x00 ; '.'
000000000022804c         db  0x00 ; '.'
000000000022804d         db  0x00 ; '.'
000000000022804e         db  0x00 ; '.'
000000000022804f         db  0x00 ; '.'
0000000000228050         db  0x00 ; '.'
0000000000228051         db  0x00 ; '.'
0000000000228052         db  0x00 ; '.'
0000000000228053         db  0x00 ; '.'
0000000000228054         db  0x00 ; '.'
0000000000228055         db  0x00 ; '.'
0000000000228056         db  0x00 ; '.'
0000000000228057         db  0x00 ; '.'
0000000000228058         db  0x00 ; '.'
0000000000228059         db  0x00 ; '.'
000000000022805a         db  0x00 ; '.'
000000000022805b         db  0x00 ; '.'
000000000022805c         db  0x00 ; '.'
000000000022805d         db  0x00 ; '.'
000000000022805e         db  0x00 ; '.'
000000000022805f         db  0x00 ; '.'
0000000000228060         db  0x00 ; '.'
0000000000228061         db  0x00 ; '.'
0000000000228062         db  0x00 ; '.'
0000000000228063         db  0x00 ; '.'
0000000000228064         db  0x00 ; '.'
0000000000228065         db  0x00 ; '.'
0000000000228066         db  0x00 ; '.'
0000000000228067         db  0x00 ; '.'
0000000000228068         db  0x00 ; '.'
0000000000228069         db  0x00 ; '.'
000000000022806a         db  0x00 ; '.'
000000000022806b         db  0x00 ; '.'
000000000022806c         db  0x00 ; '.'
000000000022806d         db  0x00 ; '.'
000000000022806e         db  0x00 ; '.'
000000000022806f         db  0x00 ; '.'
0000000000228070         db  0x00 ; '.'
0000000000228071         db  0x00 ; '.'
0000000000228072         db  0x00 ; '.'
0000000000228073         db  0x00 ; '.'
0000000000228074         db  0x00 ; '.'
0000000000228075         db  0x00 ; '.'
0000000000228076         db  0x00 ; '.'
0000000000228077         db  0x00 ; '.'
                     nslots:
0000000000228078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000022807c         db  0x00 ; '.'
000000000022807d         db  0x00 ; '.'
000000000022807e         db  0x00 ; '.'
000000000022807f         db  0x00 ; '.'
                     slotvec:
0000000000228080         dq         0x0000000000228090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
0000000000228088         db  0x00 ; '.'
0000000000228089         db  0x00 ; '.'
000000000022808a         db  0x00 ; '.'
000000000022808b         db  0x00 ; '.'
000000000022808c         db  0x00 ; '.'
000000000022808d         db  0x00 ; '.'
000000000022808e         db  0x00 ; '.'
000000000022808f         db  0x00 ; '.'
                     slotvec0:
0000000000228090         dq         1.26481e-321, 1.1173e-317                   ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x2280a0; 0x228308[ (616 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002280a0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002280a1         db  0x00 ; '.'
00000000002280a2         db  0x00 ; '.'
00000000002280a3         db  0x00 ; '.'
00000000002280a4         db  0x00 ; '.'
00000000002280a5         db  0x00 ; '.'
00000000002280a6         db  0x00 ; '.'
00000000002280a7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002280a8         db  0x00 ; '.'                                         ; DATA XREF=main+875, print_only_size+8, print_size+61, print_size+145, print_size+200, print_size+320, usage+128, usage+165, usage+202, usage+239, usage+276
00000000002280a9         db  0x00 ; '.'
00000000002280aa         db  0x00 ; '.'
00000000002280ab         db  0x00 ; '.'
00000000002280ac         db  0x00 ; '.'
00000000002280ad         db  0x00 ; '.'
00000000002280ae         db  0x00 ; '.'
00000000002280af         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
00000000002280b0         db  0x00 ; '.'                                         ; DATA XREF=main+1341, main+2940, main+3693, add_exclude_file+118
00000000002280b1         db  0x00 ; '.'
00000000002280b2         db  0x00 ; '.'
00000000002280b3         db  0x00 ; '.'
00000000002280b4         db  0x00 ; '.'
00000000002280b5         db  0x00 ; '.'
00000000002280b6         db  0x00 ; '.'
00000000002280b7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002280b8         db  0x00 ; '.'                                         ; DATA XREF=main+1296, main+4193
00000000002280b9         db  0x00 ; '.'
00000000002280ba         db  0x00 ; '.'
00000000002280bb         db  0x00 ; '.'
00000000002280bc         db  0x00 ; '.'
00000000002280bd         db  0x00 ; '.'
00000000002280be         db  0x00 ; '.'
00000000002280bf         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
00000000002280c0         db  0x00 ; '.'                                         ; DATA XREF=main+328, main+376, main+527, main+630, main+675, main+788, main+822, main+958, main+977, main+1111, main+1152
00000000002280c1         db  0x00 ; '.'
00000000002280c2         db  0x00 ; '.'
00000000002280c3         db  0x00 ; '.'
00000000002280c4         db  0x00 ; '.'
00000000002280c5         db  0x00 ; '.'
00000000002280c6         db  0x00 ; '.'
00000000002280c7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002280c8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002280c9         db  0x00 ; '.'
00000000002280ca         db  0x00 ; '.'
00000000002280cb         db  0x00 ; '.'
00000000002280cc         db  0x00 ; '.'
00000000002280cd         db  0x00 ; '.'
00000000002280ce         db  0x00 ; '.'
00000000002280cf         db  0x00 ; '.'
00000000002280d0         db  0x00 ; '.'
00000000002280d1         db  0x00 ; '.'
00000000002280d2         db  0x00 ; '.'
00000000002280d3         db  0x00 ; '.'
00000000002280d4         db  0x00 ; '.'
00000000002280d5         db  0x00 ; '.'
00000000002280d6         db  0x00 ; '.'
00000000002280d7         db  0x00 ; '.'
00000000002280d8         db  0x00 ; '.'
00000000002280d9         db  0x00 ; '.'
00000000002280da         db  0x00 ; '.'
00000000002280db         db  0x00 ; '.'
00000000002280dc         db  0x00 ; '.'
00000000002280dd         db  0x00 ; '.'
00000000002280de         db  0x00 ; '.'
00000000002280df         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
00000000002280e0         db  0x00 ; '.'                                         ; DATA XREF=main+5085, usage+61, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
00000000002280e1         db  0x00 ; '.'
00000000002280e2         db  0x00 ; '.'
00000000002280e3         db  0x00 ; '.'
00000000002280e4         db  0x00 ; '.'
00000000002280e5         db  0x00 ; '.'
00000000002280e6         db  0x00 ; '.'
00000000002280e7         db  0x00 ; '.'
                     completed.7697:
00000000002280e8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
00000000002280e9         db  0x00 ; '.'
00000000002280ea         db  0x00 ; '.'
00000000002280eb         db  0x00 ; '.'
00000000002280ec         db  0x00 ; '.'
00000000002280ed         db  0x00 ; '.'
00000000002280ee         db  0x00 ; '.'
00000000002280ef         db  0x00 ; '.'
00000000002280f0         db  0x00 ; '.'
00000000002280f1         db  0x00 ; '.'
00000000002280f2         db  0x00 ; '.'
00000000002280f3         db  0x00 ; '.'
00000000002280f4         db  0x00 ; '.'
00000000002280f5         db  0x00 ; '.'
00000000002280f6         db  0x00 ; '.'
00000000002280f7         db  0x00 ; '.'
00000000002280f8         db  0x00 ; '.'
00000000002280f9         db  0x00 ; '.'
00000000002280fa         db  0x00 ; '.'
00000000002280fb         db  0x00 ; '.'
00000000002280fc         db  0x00 ; '.'
00000000002280fd         db  0x00 ; '.'
00000000002280fe         db  0x00 ; '.'
00000000002280ff         db  0x00 ; '.'
                     dulvl.7287:
0000000000228100         db  0x00 ; '.'                                         ; DATA XREF=main+2028, main+2087, main+2135, main+2262, main+3111, main+3440
0000000000228101         db  0x00 ; '.'
0000000000228102         db  0x00 ; '.'
0000000000228103         db  0x00 ; '.'
0000000000228104         db  0x00 ; '.'
0000000000228105         db  0x00 ; '.'
0000000000228106         db  0x00 ; '.'
0000000000228107         db  0x00 ; '.'
                     n_alloc.7286:
0000000000228108         db  0x00 ; '.'                                         ; DATA XREF=main+1950, main+2108, main+3094
0000000000228109         db  0x00 ; '.'
000000000022810a         db  0x00 ; '.'
000000000022810b         db  0x00 ; '.'
000000000022810c         db  0x00 ; '.'
000000000022810d         db  0x00 ; '.'
000000000022810e         db  0x00 ; '.'
000000000022810f         db  0x00 ; '.'
                     temp_argv.7378:
0000000000228110         db  0x00 ; '.'                                         ; DATA XREF=main+1552
0000000000228111         db  0x00 ; '.'
0000000000228112         db  0x00 ; '.'
0000000000228113         db  0x00 ; '.'
0000000000228114         db  0x00 ; '.'
0000000000228115         db  0x00 ; '.'
0000000000228116         db  0x00 ; '.'
0000000000228117         db  0x00 ; '.'
0000000000228118         db  0x00 ; '.'
0000000000228119         db  0x00 ; '.'
000000000022811a         db  0x00 ; '.'
000000000022811b         db  0x00 ; '.'
000000000022811c         db  0x00 ; '.'
000000000022811d         db  0x00 ; '.'
000000000022811e         db  0x00 ; '.'
000000000022811f         db  0x00 ; '.'
                     tot_dui:
0000000000228120         db  0x00 ; '.'                                         ; DATA XREF=main+2322, main+2361, main+2995
0000000000228121         db  0x00 ; '.'
0000000000228122         db  0x00 ; '.'
0000000000228123         db  0x00 ; '.'
0000000000228124         db  0x00 ; '.'
0000000000228125         db  0x00 ; '.'
0000000000228126         db  0x00 ; '.'
0000000000228127         db  0x00 ; '.'
                     qword_228128:
0000000000228128         db  0x00 ; '.'                                         ; DATA XREF=main+2346
0000000000228129         db  0x00 ; '.'
000000000022812a         db  0x00 ; '.'
000000000022812b         db  0x00 ; '.'
000000000022812c         db  0x00 ; '.'
000000000022812d         db  0x00 ; '.'
000000000022812e         db  0x00 ; '.'
000000000022812f         db  0x00 ; '.'
                     qword_228130:
0000000000228130         db  0x00 ; '.'                                         ; DATA XREF=main+2354, main+2488
0000000000228131         db  0x00 ; '.'
0000000000228132         db  0x00 ; '.'
0000000000228133         db  0x00 ; '.'
0000000000228134         db  0x00 ; '.'
0000000000228135         db  0x00 ; '.'
0000000000228136         db  0x00 ; '.'
0000000000228137         db  0x00 ; '.'
                     qword_228138:
0000000000228138         db  0x00 ; '.'                                         ; DATA XREF=main+2372, main+2495
0000000000228139         db  0x00 ; '.'
000000000022813a         db  0x00 ; '.'
000000000022813b         db  0x00 ; '.'
000000000022813c         db  0x00 ; '.'
000000000022813d         db  0x00 ; '.'
000000000022813e         db  0x00 ; '.'
000000000022813f         db  0x00 ; '.'
                     exclude:
0000000000228140         db  0x00 ; '.'                                         ; DATA XREF=main+167, main+637, main+1118, main+1658
0000000000228141         db  0x00 ; '.'
0000000000228142         db  0x00 ; '.'
0000000000228143         db  0x00 ; '.'
0000000000228144         db  0x00 ; '.'
0000000000228145         db  0x00 ; '.'
0000000000228146         db  0x00 ; '.'
0000000000228147         db  0x00 ; '.'
                     output_block_size:
0000000000228148         db  0x00 ; '.'                                         ; DATA XREF=main+179, main+445, main+480, main+506, main+602, main+795, main+1095, main+1231, print_only_size+40
0000000000228149         db  0x00 ; '.'
000000000022814a         db  0x00 ; '.'
000000000022814b         db  0x00 ; '.'
000000000022814c         db  0x00 ; '.'
000000000022814d         db  0x00 ; '.'
000000000022814e         db  0x00 ; '.'
000000000022814f         db  0x00 ; '.'
                     localtz:
0000000000228150         db  0x00 ; '.'                                         ; DATA XREF=main+1073, print_size+93
0000000000228151         db  0x00 ; '.'
0000000000228152         db  0x00 ; '.'
0000000000228153         db  0x00 ; '.'
0000000000228154         db  0x00 ; '.'
0000000000228155         db  0x00 ; '.'
0000000000228156         db  0x00 ; '.'
0000000000228157         db  0x00 ; '.'
                     time_format:
0000000000228158         db  0x00 ; '.'                                         ; DATA XREF=main+1286, main+4360, main+4828, main+4847, print_size+103
0000000000228159         db  0x00 ; '.'
000000000022815a         db  0x00 ; '.'
000000000022815b         db  0x00 ; '.'
000000000022815c         db  0x00 ; '.'
000000000022815d         db  0x00 ; '.'
000000000022815e         db  0x00 ; '.'
000000000022815f         db  0x00 ; '.'
                     time_style:
0000000000228160         db  0x00 ; '.'                                         ; DATA XREF=main+965, main+1251, main+1265, main+4270, main+4522, main+4580, main+4587
0000000000228161         db  0x00 ; '.'
0000000000228162         db  0x00 ; '.'
0000000000228163         db  0x00 ; '.'
0000000000228164         db  0x00 ; '.'
0000000000228165         db  0x00 ; '.'
0000000000228166         db  0x00 ; '.'
0000000000228167         db  0x00 ; '.'
                     time_type:
0000000000228168         db  0x00 ; '.'                                         ; DATA XREF=main+1054, main+1888
0000000000228169         db  0x00 ; '.'
000000000022816a         db  0x00 ; '.'
000000000022816b         db  0x00 ; '.'
                     opt_time:
000000000022816c         db  0x00 ; '.'                                         ; DATA XREF=main+986, main+1242, print_size+52
                     opt_inodes:
000000000022816d         db  0x00 ; '.'                                         ; DATA XREF=main+946, main+1209, main+2421, print_size+36
000000000022816e         db  0x00 ; '.'
000000000022816f         db  0x00 ; '.'
                     human_output_opts:
0000000000228170         db  0x00 ; '.'                                         ; DATA XREF=main+186, main+438, main+473, main+496, main+595, main+802, main+1085, print_only_size+47
0000000000228171         db  0x00 ; '.'
0000000000228172         db  0x00 ; '.'
0000000000228173         db  0x00 ; '.'
0000000000228174         db  0x00 ; '.'
0000000000228175         db  0x00 ; '.'
0000000000228176         db  0x00 ; '.'
0000000000228177         db  0x00 ; '.'
                     opt_threshold:
0000000000228178         db  0x00 ; '.'                                         ; DATA XREF=main+342, main+366, main+2414
0000000000228179         db  0x00 ; '.'
000000000022817a         db  0x00 ; '.'
000000000022817b         db  0x00 ; '.'
000000000022817c         db  0x00 ; '.'
000000000022817d         db  0x00 ; '.'
000000000022817e         db  0x00 ; '.'
000000000022817f         db  0x00 ; '.'
                     opt_separate_dirs:
0000000000228180         db  0x00 ; '.'                                         ; DATA XREF=main+737, main+2224, main+3520
                     print_grand_total:
0000000000228181         db  0x00 ; '.'                                         ; DATA XREF=main+576, main+2967
                     opt_nul_terminate_output:
0000000000228182         db  0x00 ; '.'                                         ; DATA XREF=main+852, print_size+166
                     hash_all:
0000000000228183         db  0x00 ; '.'                                         ; DATA XREF=main+1353, main+1406, main+1781, main+4218
                     opt_count_all:
0000000000228184         db  0x00 ; '.'                                         ; DATA XREF=main+461, main+1393, main+1772
                     apparent_size:
0000000000228185         db  0x00 ; '.'                                         ; DATA XREF=main+588, main+1140, main+1218, main+1916
                     opt_all:
0000000000228186         db  0x00 ; '.'                                         ; DATA XREF=main+618, main+1185, main+2396
0000000000228187         db  0x00 ; '.'
                     prev_level:
0000000000228188         db  0x00 ; '.'                                         ; DATA XREF=main+1994, main+2115, main+2231, main+3230
0000000000228189         db  0x00 ; '.'
000000000022818a         db  0x00 ; '.'
000000000022818b         db  0x00 ; '.'
000000000022818c         db  0x00 ; '.'
000000000022818d         db  0x00 ; '.'
000000000022818e         db  0x00 ; '.'
000000000022818f         db  0x00 ; '.'
                     di_mnt:
0000000000228190         db  0x00 ; '.'                                         ; DATA XREF=main+2918, main+4690, main+4719, main+4897, main+4991
0000000000228191         db  0x00 ; '.'
0000000000228192         db  0x00 ; '.'
0000000000228193         db  0x00 ; '.'
0000000000228194         db  0x00 ; '.'
0000000000228195         db  0x00 ; '.'
0000000000228196         db  0x00 ; '.'
0000000000228197         db  0x00 ; '.'
                     di_files:
0000000000228198         db  0x00 ; '.'                                         ; DATA XREF=main+1380, main+1830, main+2906
0000000000228199         db  0x00 ; '.'
000000000022819a         db  0x00 ; '.'
000000000022819b         db  0x00 ; '.'
000000000022819c         db  0x00 ; '.'
000000000022819d         db  0x00 ; '.'
000000000022819e         db  0x00 ; '.'
000000000022819f         db  0x00 ; '.'
                     ignore_EPIPE:
00000000002281a0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
00000000002281a1         db  0x00 ; '.'
00000000002281a2         db  0x00 ; '.'
00000000002281a3         db  0x00 ; '.'
00000000002281a4         db  0x00 ; '.'
00000000002281a5         db  0x00 ; '.'
00000000002281a6         db  0x00 ; '.'
00000000002281a7         db  0x00 ; '.'
                     file_name:
00000000002281a8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
00000000002281a9         db  0x00 ; '.'
00000000002281aa         db  0x00 ; '.'
00000000002281ab         db  0x00 ; '.'
00000000002281ac         db  0x00 ; '.'
00000000002281ad         db  0x00 ; '.'
00000000002281ae         db  0x00 ; '.'
00000000002281af         db  0x00 ; '.'
                     program_name:
00000000002281b0         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
00000000002281b1         db  0x00 ; '.'
00000000002281b2         db  0x00 ; '.'
00000000002281b3         db  0x00 ; '.'
00000000002281b4         db  0x00 ; '.'
00000000002281b5         db  0x00 ; '.'
00000000002281b6         db  0x00 ; '.'
00000000002281b7         db  0x00 ; '.'
00000000002281b8         db  0x00 ; '.'
00000000002281b9         db  0x00 ; '.'
00000000002281ba         db  0x00 ; '.'
00000000002281bb         db  0x00 ; '.'
00000000002281bc         db  0x00 ; '.'
00000000002281bd         db  0x00 ; '.'
00000000002281be         db  0x00 ; '.'
00000000002281bf         db  0x00 ; '.'
                     slot0:
00000000002281c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
00000000002281c1         db  0x00 ; '.'
00000000002281c2         db  0x00 ; '.'
00000000002281c3         db  0x00 ; '.'
00000000002281c4         db  0x00 ; '.'
00000000002281c5         db  0x00 ; '.'
00000000002281c6         db  0x00 ; '.'
00000000002281c7         db  0x00 ; '.'
00000000002281c8         db  0x00 ; '.'
00000000002281c9         db  0x00 ; '.'
00000000002281ca         db  0x00 ; '.'
00000000002281cb         db  0x00 ; '.'
00000000002281cc         db  0x00 ; '.'
00000000002281cd         db  0x00 ; '.'
00000000002281ce         db  0x00 ; '.'
00000000002281cf         db  0x00 ; '.'
00000000002281d0         db  0x00 ; '.'
00000000002281d1         db  0x00 ; '.'
00000000002281d2         db  0x00 ; '.'
00000000002281d3         db  0x00 ; '.'
00000000002281d4         db  0x00 ; '.'
00000000002281d5         db  0x00 ; '.'
00000000002281d6         db  0x00 ; '.'
00000000002281d7         db  0x00 ; '.'
00000000002281d8         db  0x00 ; '.'
00000000002281d9         db  0x00 ; '.'
00000000002281da         db  0x00 ; '.'
00000000002281db         db  0x00 ; '.'
00000000002281dc         db  0x00 ; '.'
00000000002281dd         db  0x00 ; '.'
00000000002281de         db  0x00 ; '.'
00000000002281df         db  0x00 ; '.'
00000000002281e0         db  0x00 ; '.'
00000000002281e1         db  0x00 ; '.'
00000000002281e2         db  0x00 ; '.'
00000000002281e3         db  0x00 ; '.'
00000000002281e4         db  0x00 ; '.'
00000000002281e5         db  0x00 ; '.'
00000000002281e6         db  0x00 ; '.'
00000000002281e7         db  0x00 ; '.'
00000000002281e8         db  0x00 ; '.'
00000000002281e9         db  0x00 ; '.'
00000000002281ea         db  0x00 ; '.'
00000000002281eb         db  0x00 ; '.'
00000000002281ec         db  0x00 ; '.'
00000000002281ed         db  0x00 ; '.'
00000000002281ee         db  0x00 ; '.'
00000000002281ef         db  0x00 ; '.'
00000000002281f0         db  0x00 ; '.'
00000000002281f1         db  0x00 ; '.'
00000000002281f2         db  0x00 ; '.'
00000000002281f3         db  0x00 ; '.'
00000000002281f4         db  0x00 ; '.'
00000000002281f5         db  0x00 ; '.'
00000000002281f6         db  0x00 ; '.'
00000000002281f7         db  0x00 ; '.'
00000000002281f8         db  0x00 ; '.'
00000000002281f9         db  0x00 ; '.'
00000000002281fa         db  0x00 ; '.'
00000000002281fb         db  0x00 ; '.'
00000000002281fc         db  0x00 ; '.'
00000000002281fd         db  0x00 ; '.'
00000000002281fe         db  0x00 ; '.'
00000000002281ff         db  0x00 ; '.'
0000000000228200         db  0x00 ; '.'
0000000000228201         db  0x00 ; '.'
0000000000228202         db  0x00 ; '.'
0000000000228203         db  0x00 ; '.'
0000000000228204         db  0x00 ; '.'
0000000000228205         db  0x00 ; '.'
0000000000228206         db  0x00 ; '.'
0000000000228207         db  0x00 ; '.'
0000000000228208         db  0x00 ; '.'
0000000000228209         db  0x00 ; '.'
000000000022820a         db  0x00 ; '.'
000000000022820b         db  0x00 ; '.'
000000000022820c         db  0x00 ; '.'
000000000022820d         db  0x00 ; '.'
000000000022820e         db  0x00 ; '.'
000000000022820f         db  0x00 ; '.'
0000000000228210         db  0x00 ; '.'
0000000000228211         db  0x00 ; '.'
0000000000228212         db  0x00 ; '.'
0000000000228213         db  0x00 ; '.'
0000000000228214         db  0x00 ; '.'
0000000000228215         db  0x00 ; '.'
0000000000228216         db  0x00 ; '.'
0000000000228217         db  0x00 ; '.'
0000000000228218         db  0x00 ; '.'
0000000000228219         db  0x00 ; '.'
000000000022821a         db  0x00 ; '.'
000000000022821b         db  0x00 ; '.'
000000000022821c         db  0x00 ; '.'
000000000022821d         db  0x00 ; '.'
000000000022821e         db  0x00 ; '.'
000000000022821f         db  0x00 ; '.'
0000000000228220         db  0x00 ; '.'
0000000000228221         db  0x00 ; '.'
0000000000228222         db  0x00 ; '.'
0000000000228223         db  0x00 ; '.'
0000000000228224         db  0x00 ; '.'
0000000000228225         db  0x00 ; '.'
0000000000228226         db  0x00 ; '.'
0000000000228227         db  0x00 ; '.'
0000000000228228         db  0x00 ; '.'
0000000000228229         db  0x00 ; '.'
000000000022822a         db  0x00 ; '.'
000000000022822b         db  0x00 ; '.'
000000000022822c         db  0x00 ; '.'
000000000022822d         db  0x00 ; '.'
000000000022822e         db  0x00 ; '.'
000000000022822f         db  0x00 ; '.'
0000000000228230         db  0x00 ; '.'
0000000000228231         db  0x00 ; '.'
0000000000228232         db  0x00 ; '.'
0000000000228233         db  0x00 ; '.'
0000000000228234         db  0x00 ; '.'
0000000000228235         db  0x00 ; '.'
0000000000228236         db  0x00 ; '.'
0000000000228237         db  0x00 ; '.'
0000000000228238         db  0x00 ; '.'
0000000000228239         db  0x00 ; '.'
000000000022823a         db  0x00 ; '.'
000000000022823b         db  0x00 ; '.'
000000000022823c         db  0x00 ; '.'
000000000022823d         db  0x00 ; '.'
000000000022823e         db  0x00 ; '.'
000000000022823f         db  0x00 ; '.'
0000000000228240         db  0x00 ; '.'
0000000000228241         db  0x00 ; '.'
0000000000228242         db  0x00 ; '.'
0000000000228243         db  0x00 ; '.'
0000000000228244         db  0x00 ; '.'
0000000000228245         db  0x00 ; '.'
0000000000228246         db  0x00 ; '.'
0000000000228247         db  0x00 ; '.'
0000000000228248         db  0x00 ; '.'
0000000000228249         db  0x00 ; '.'
000000000022824a         db  0x00 ; '.'
000000000022824b         db  0x00 ; '.'
000000000022824c         db  0x00 ; '.'
000000000022824d         db  0x00 ; '.'
000000000022824e         db  0x00 ; '.'
000000000022824f         db  0x00 ; '.'
0000000000228250         db  0x00 ; '.'
0000000000228251         db  0x00 ; '.'
0000000000228252         db  0x00 ; '.'
0000000000228253         db  0x00 ; '.'
0000000000228254         db  0x00 ; '.'
0000000000228255         db  0x00 ; '.'
0000000000228256         db  0x00 ; '.'
0000000000228257         db  0x00 ; '.'
0000000000228258         db  0x00 ; '.'
0000000000228259         db  0x00 ; '.'
000000000022825a         db  0x00 ; '.'
000000000022825b         db  0x00 ; '.'
000000000022825c         db  0x00 ; '.'
000000000022825d         db  0x00 ; '.'
000000000022825e         db  0x00 ; '.'
000000000022825f         db  0x00 ; '.'
0000000000228260         db  0x00 ; '.'
0000000000228261         db  0x00 ; '.'
0000000000228262         db  0x00 ; '.'
0000000000228263         db  0x00 ; '.'
0000000000228264         db  0x00 ; '.'
0000000000228265         db  0x00 ; '.'
0000000000228266         db  0x00 ; '.'
0000000000228267         db  0x00 ; '.'
0000000000228268         db  0x00 ; '.'
0000000000228269         db  0x00 ; '.'
000000000022826a         db  0x00 ; '.'
000000000022826b         db  0x00 ; '.'
000000000022826c         db  0x00 ; '.'
000000000022826d         db  0x00 ; '.'
000000000022826e         db  0x00 ; '.'
000000000022826f         db  0x00 ; '.'
0000000000228270         db  0x00 ; '.'
0000000000228271         db  0x00 ; '.'
0000000000228272         db  0x00 ; '.'
0000000000228273         db  0x00 ; '.'
0000000000228274         db  0x00 ; '.'
0000000000228275         db  0x00 ; '.'
0000000000228276         db  0x00 ; '.'
0000000000228277         db  0x00 ; '.'
0000000000228278         db  0x00 ; '.'
0000000000228279         db  0x00 ; '.'
000000000022827a         db  0x00 ; '.'
000000000022827b         db  0x00 ; '.'
000000000022827c         db  0x00 ; '.'
000000000022827d         db  0x00 ; '.'
000000000022827e         db  0x00 ; '.'
000000000022827f         db  0x00 ; '.'
0000000000228280         db  0x00 ; '.'
0000000000228281         db  0x00 ; '.'
0000000000228282         db  0x00 ; '.'
0000000000228283         db  0x00 ; '.'
0000000000228284         db  0x00 ; '.'
0000000000228285         db  0x00 ; '.'
0000000000228286         db  0x00 ; '.'
0000000000228287         db  0x00 ; '.'
0000000000228288         db  0x00 ; '.'
0000000000228289         db  0x00 ; '.'
000000000022828a         db  0x00 ; '.'
000000000022828b         db  0x00 ; '.'
000000000022828c         db  0x00 ; '.'
000000000022828d         db  0x00 ; '.'
000000000022828e         db  0x00 ; '.'
000000000022828f         db  0x00 ; '.'
0000000000228290         db  0x00 ; '.'
0000000000228291         db  0x00 ; '.'
0000000000228292         db  0x00 ; '.'
0000000000228293         db  0x00 ; '.'
0000000000228294         db  0x00 ; '.'
0000000000228295         db  0x00 ; '.'
0000000000228296         db  0x00 ; '.'
0000000000228297         db  0x00 ; '.'
0000000000228298         db  0x00 ; '.'
0000000000228299         db  0x00 ; '.'
000000000022829a         db  0x00 ; '.'
000000000022829b         db  0x00 ; '.'
000000000022829c         db  0x00 ; '.'
000000000022829d         db  0x00 ; '.'
000000000022829e         db  0x00 ; '.'
000000000022829f         db  0x00 ; '.'
00000000002282a0         db  0x00 ; '.'
00000000002282a1         db  0x00 ; '.'
00000000002282a2         db  0x00 ; '.'
00000000002282a3         db  0x00 ; '.'
00000000002282a4         db  0x00 ; '.'
00000000002282a5         db  0x00 ; '.'
00000000002282a6         db  0x00 ; '.'
00000000002282a7         db  0x00 ; '.'
00000000002282a8         db  0x00 ; '.'
00000000002282a9         db  0x00 ; '.'
00000000002282aa         db  0x00 ; '.'
00000000002282ab         db  0x00 ; '.'
00000000002282ac         db  0x00 ; '.'
00000000002282ad         db  0x00 ; '.'
00000000002282ae         db  0x00 ; '.'
00000000002282af         db  0x00 ; '.'
00000000002282b0         db  0x00 ; '.'
00000000002282b1         db  0x00 ; '.'
00000000002282b2         db  0x00 ; '.'
00000000002282b3         db  0x00 ; '.'
00000000002282b4         db  0x00 ; '.'
00000000002282b5         db  0x00 ; '.'
00000000002282b6         db  0x00 ; '.'
00000000002282b7         db  0x00 ; '.'
00000000002282b8         db  0x00 ; '.'
00000000002282b9         db  0x00 ; '.'
00000000002282ba         db  0x00 ; '.'
00000000002282bb         db  0x00 ; '.'
00000000002282bc         db  0x00 ; '.'
00000000002282bd         db  0x00 ; '.'
00000000002282be         db  0x00 ; '.'
00000000002282bf         db  0x00 ; '.'
                     default_quoting_options:
00000000002282c0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
00000000002282c1         db  0x00 ; '.'
00000000002282c2         db  0x00 ; '.'
00000000002282c3         db  0x00 ; '.'
00000000002282c4         db  0x00 ; '.'
00000000002282c5         db  0x00 ; '.'
00000000002282c6         db  0x00 ; '.'
00000000002282c7         db  0x00 ; '.'
00000000002282c8         db  0x00 ; '.'
00000000002282c9         db  0x00 ; '.'
00000000002282ca         db  0x00 ; '.'
00000000002282cb         db  0x00 ; '.'
00000000002282cc         db  0x00 ; '.'
00000000002282cd         db  0x00 ; '.'
00000000002282ce         db  0x00 ; '.'
00000000002282cf         db  0x00 ; '.'
00000000002282d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
00000000002282d1         db  0x00 ; '.'
00000000002282d2         db  0x00 ; '.'
00000000002282d3         db  0x00 ; '.'
00000000002282d4         db  0x00 ; '.'
00000000002282d5         db  0x00 ; '.'
00000000002282d6         db  0x00 ; '.'
00000000002282d7         db  0x00 ; '.'
00000000002282d8         db  0x00 ; '.'
00000000002282d9         db  0x00 ; '.'
00000000002282da         db  0x00 ; '.'
00000000002282db         db  0x00 ; '.'
00000000002282dc         db  0x00 ; '.'
00000000002282dd         db  0x00 ; '.'
00000000002282de         db  0x00 ; '.'
00000000002282df         db  0x00 ; '.'
00000000002282e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
00000000002282e1         db  0x00 ; '.'
00000000002282e2         db  0x00 ; '.'
00000000002282e3         db  0x00 ; '.'
00000000002282e4         db  0x00 ; '.'
00000000002282e5         db  0x00 ; '.'
00000000002282e6         db  0x00 ; '.'
00000000002282e7         db  0x00 ; '.'
00000000002282e8         db  0x00 ; '.'
00000000002282e9         db  0x00 ; '.'
00000000002282ea         db  0x00 ; '.'
00000000002282eb         db  0x00 ; '.'
00000000002282ec         db  0x00 ; '.'
00000000002282ed         db  0x00 ; '.'
00000000002282ee         db  0x00 ; '.'
00000000002282ef         db  0x00 ; '.'
                     qword_2282f0:
00000000002282f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
00000000002282f1         db  0x00 ; '.'
00000000002282f2         db  0x00 ; '.'
00000000002282f3         db  0x00 ; '.'
00000000002282f4         db  0x00 ; '.'
00000000002282f5         db  0x00 ; '.'
00000000002282f6         db  0x00 ; '.'
00000000002282f7         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
00000000002282f8         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
00000000002282f9         db  0x00 ; '.'
00000000002282fa         db  0x00 ; '.'
00000000002282fb         db  0x00 ; '.'
00000000002282fc         db  0x00 ; '.'
00000000002282fd         db  0x00 ; '.'
00000000002282fe         db  0x00 ; '.'
00000000002282ff         db  0x00 ; '.'
                     rpl_re_syntax_options:
0000000000228300         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+4, rpl_re_set_syntax, rpl_re_set_syntax+7
0000000000228301         db  0x00 ; '.'
0000000000228302         db  0x00 ; '.'
0000000000228303         db  0x00 ; '.'
0000000000228304         db  0x00 ; '.'
0000000000228305         db  0x00 ; '.'
0000000000228306         db  0x00 ; '.'
0000000000228307         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x228310; 0x2289d0[ (1728 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x228310; 0x450ce0[ (2263504 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
0000000000228310         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     __uflow:
0000000000228318         extern function code                                   ; DATA XREF=__uflow@GOT
                     getenv:
0000000000228320         extern function code                                   ; DATA XREF=getenv@GOT
                     free:
0000000000228328         extern function code
                     endmntent:
0000000000228330         extern function code                                   ; DATA XREF=endmntent@GOT
                     abort:
0000000000228338         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
0000000000228340         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
0000000000228348         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
0000000000228350         extern function code
                     localtime_r:
0000000000228358         extern function code                                   ; DATA XREF=localtime_r@GOT
                     _exit:
0000000000228360         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
0000000000228368         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
0000000000228370         extern function code                                   ; DATA XREF=__fpending@GOT
                     qsort:
0000000000228378         extern function code                                   ; DATA XREF=qsort@GOT
                     iswcntrl:
0000000000228380         extern function code                                   ; DATA XREF=iswcntrl@GOT
                     localeconv:
0000000000228388         extern function code                                   ; DATA XREF=localeconv@GOT
                     fcntl:
0000000000228390         extern function code                                   ; DATA XREF=fcntl@GOT
                     setenv:
0000000000228398         extern function code                                   ; DATA XREF=setenv@GOT
                     textdomain:
00000000002283a0         extern function code                                   ; DATA XREF=textdomain@GOT
                     __strtol_internal:
00000000002283a8         extern function code                                   ; DATA XREF=__strtol_internal@GOT
                     iswctype:
00000000002283b0         extern function code                                   ; DATA XREF=iswctype@GOT
                     fclose:
00000000002283b8         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
00000000002283c0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
00000000002283c8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
00000000002283d0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
00000000002283d8         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
00000000002283e0         extern function code                                   ; DATA XREF=__lxstat@GOT
                     openat:
00000000002283e8         extern function code                                   ; DATA XREF=openat@GOT
                     __stack_chk_fail:
00000000002283f0         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
00000000002283f8         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000228400         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     dup2:
0000000000228408         extern function code                                   ; DATA XREF=dup2@GOT
                     strchr:
0000000000228410         extern function code                                   ; DATA XREF=strchr@GOT
                     __fxstatat:
0000000000228418         extern function code                                   ; DATA XREF=__fxstatat@GOT
                     __overflow:
0000000000228420         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000228428         extern function code                                   ; DATA XREF=strrchr@GOT
                     gmtime_r:
0000000000228430         extern function code                                   ; DATA XREF=gmtime_r@GOT
                     lseek:
0000000000228438         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
0000000000228440         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
0000000000228448         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     fnmatch:
0000000000228450         extern function code
                     memset:
0000000000228458         extern function code                                   ; DATA XREF=memset@GOT
                     freopen:
0000000000228460         extern function code                                   ; DATA XREF=freopen@GOT
                     close:
0000000000228468         extern function code                                   ; DATA XREF=close@GOT
                     closedir:
0000000000228470         extern function code                                   ; DATA XREF=closedir@GOT
                     fputc:
0000000000228478         extern function code                                   ; DATA XREF=fputc@GOT
                     memchr:
0000000000228480         extern function code                                   ; DATA XREF=memchr@GOT
                     __libc_start_main:
0000000000228488         extern function code
                     memcmp:
0000000000228490         extern function code                                   ; DATA XREF=memcmp@GOT
                     wctype:
0000000000228498         extern function code                                   ; DATA XREF=wctype@GOT
                     fputs_unlocked:
00000000002284a0         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
00000000002284a8         extern function code                                   ; DATA XREF=calloc@GOT
                     __getdelim:
00000000002284b0         extern function code                                   ; DATA XREF=__getdelim@GOT
                     strcmp:
00000000002284b8         extern function code                                   ; DATA XREF=strcmp@GOT
                     dirfd:
00000000002284c0         extern function code                                   ; DATA XREF=dirfd@GOT
                     __memcpy_chk:
00000000002284c8         extern function code                                   ; DATA XREF=__memcpy_chk@GOT
                     feof:
00000000002284d0         extern function code                                   ; DATA XREF=feof@GOT
                     __gmon_start__:
00000000002284d8         extern function code
                     memcpy:
00000000002284e0         extern function code                                   ; DATA XREF=memcpy@GOT
                     tzset:
00000000002284e8         extern function code                                   ; DATA XREF=tzset@GOT
                     fileno:
00000000002284f0         extern function code                                   ; DATA XREF=fileno@GOT
                     __xstat:
00000000002284f8         extern function code                                   ; DATA XREF=__xstat@GOT
                     readdir:
0000000000228500         extern function code                                   ; DATA XREF=readdir@GOT
                     wcwidth:
0000000000228508         extern function code                                   ; DATA XREF=wcwidth@GOT
                     iswalnum:
0000000000228510         extern function code                                   ; DATA XREF=iswalnum@GOT
                     malloc:
0000000000228518         extern function code                                   ; DATA XREF=malloc@GOT
                     wcrtomb:
0000000000228520         extern function code                                   ; DATA XREF=wcrtomb@GOT
                     fflush:
0000000000228528         extern function code                                   ; DATA XREF=fflush@GOT
                     getmntent:
0000000000228530         extern function code                                   ; DATA XREF=getmntent@GOT
                     setmntent:
0000000000228538         extern function code                                   ; DATA XREF=setmntent@GOT
                     nl_langinfo:
0000000000228540         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
0000000000228548         extern function code                                   ; DATA XREF=__fxstat@GOT
                     sscanf:
0000000000228550         extern function code                                   ; DATA XREF=sscanf@GOT
                     mktime:
0000000000228558         extern function code                                   ; DATA XREF=mktime@GOT
                     __freading:
0000000000228560         extern function code                                   ; DATA XREF=__freading@GOT
                     fchdir:
0000000000228568         extern function code                                   ; DATA XREF=fchdir@GOT
                     realloc:
0000000000228570         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
0000000000228578         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000228580         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     timegm:
0000000000228588         extern function code                                   ; DATA XREF=timegm@GOT
                     strftime:
0000000000228590         extern function code                                   ; DATA XREF=strftime@GOT
                     btowc:
0000000000228598         extern function code                                   ; DATA XREF=btowc@GOT
                     memmove:
00000000002285a0         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
00000000002285a8         extern function code                                   ; DATA XREF=error@GOT
                     open:
00000000002285b0         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
00000000002285b8         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
00000000002285c0         extern function code                                   ; DATA XREF=fopen@GOT
                     towlower:
00000000002285c8         extern function code                                   ; DATA XREF=towlower@GOT
                     fdopendir:
00000000002285d0         extern function code                                   ; DATA XREF=fdopendir@GOT
                     unsetenv:
00000000002285d8         extern function code                                   ; DATA XREF=unsetenv@GOT
                     towupper:
00000000002285e0         extern function code                                   ; DATA XREF=towupper@GOT
                     strtoul:
00000000002285e8         extern function code                                   ; DATA XREF=strtoul@GOT
                     fstatfs:
00000000002285f0         extern function code                                   ; DATA XREF=fstatfs@GOT
                     __cxa_atexit:
00000000002285f8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
0000000000228600         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
0000000000228608         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
0000000000228610         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
0000000000228618         extern function code
                     fflush_unlocked:
0000000000228620         extern function code                                   ; DATA XREF=fflush_unlocked@GOT
                     mbsinit:
0000000000228628         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
0000000000228630         extern function code                                   ; DATA XREF=iswprint@GOT
                     hasmntopt:
0000000000228638         extern function code                                   ; DATA XREF=hasmntopt@GOT
                     __cxa_finalize:
0000000000228640         extern function code
                     getdelim:
0000000000228648         extern function code                                   ; DATA XREF=getdelim@GOT
                     strstr:
0000000000228650         extern function code                                   ; DATA XREF=strstr@GOT
                     __ctype_tolower_loc:
0000000000228658         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
0000000000228660         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
0000000000228668         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
0000000000228670         extern function code
                     __uflow@@GLIBC_2.2.5:
0000000000228678         extern function code
                     getenv@@GLIBC_2.2.5:
0000000000228680         extern function code
                     free@@GLIBC_2.2.5:
0000000000228688         extern function code
                     endmntent@@GLIBC_2.2.5:
0000000000228690         extern function code
                     abort@@GLIBC_2.2.5:
0000000000228698         extern function code
                     __errno_location@@GLIBC_2.2.5:
00000000002286a0         extern function code
                     strncmp@@GLIBC_2.2.5:
00000000002286a8         extern function code
                     _ITM_deregisterTMCloneTable_2286b0:        // _ITM_deregisterTMCloneTable
00000000002286b0         extern function code
                     localtime_r@@GLIBC_2.2.5:
00000000002286b8         extern function code
                     _exit@@GLIBC_2.2.5:
00000000002286c0         extern function code
                     strcpy@@GLIBC_2.2.5:
00000000002286c8         extern function code
                     __fpending@@GLIBC_2.2.5:
00000000002286d0         extern function code
                     qsort@@GLIBC_2.2.5:
00000000002286d8         extern function code
                     iswcntrl@@GLIBC_2.2.5:
00000000002286e0         extern function code
                     localeconv@@GLIBC_2.2.5:
00000000002286e8         extern function code
                     fcntl@@GLIBC_2.2.5:
00000000002286f0         extern function code
                     setenv@@GLIBC_2.2.5:
00000000002286f8         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000228700         extern function code
                     __strtol_internal@@GLIBC_2.2.5:
0000000000228708         extern function code
                     iswctype@@GLIBC_2.2.5:
0000000000228710         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000228718         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000228720         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000228728         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000228730         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000228738         extern function code
                     __lxstat@@GLIBC_2.2.5:
0000000000228740         extern function code
                     openat@@GLIBC_2.4:
0000000000228748         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
0000000000228750         extern function code
                     getopt_long@@GLIBC_2.2.5:
0000000000228758         extern function code
                     mbrtowc@@GLIBC_2.2.5:
0000000000228760         extern function code
                     dup2@@GLIBC_2.2.5:
0000000000228768         extern function code
                     strchr@@GLIBC_2.2.5:
0000000000228770         extern function code
                     __fxstatat@@GLIBC_2.4:
0000000000228778         extern function code
                     __overflow@@GLIBC_2.2.5:
0000000000228780         extern function code
                     strrchr@@GLIBC_2.2.5:
0000000000228788         extern function code
                     gmtime_r@@GLIBC_2.2.5:
0000000000228790         extern function code
                     lseek@@GLIBC_2.2.5:
0000000000228798         extern function code
                     __assert_fail@@GLIBC_2.2.5:
00000000002287a0         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
00000000002287a8         extern function code
                     fnmatch@@GLIBC_2.2.5:
00000000002287b0         extern function code
                     memset@@GLIBC_2.2.5:
00000000002287b8         extern function code
                     freopen@@GLIBC_2.2.5:
00000000002287c0         extern function code
                     close@@GLIBC_2.2.5:
00000000002287c8         extern function code
                     closedir@@GLIBC_2.2.5:
00000000002287d0         extern function code
                     fputc@@GLIBC_2.2.5:
00000000002287d8         extern function code
                     memchr@@GLIBC_2.2.5:
00000000002287e0         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
00000000002287e8         extern function code
                     memcmp@@GLIBC_2.2.5:
00000000002287f0         extern function code
                     wctype@@GLIBC_2.2.5:
00000000002287f8         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000228800         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000228808         extern function code
                     __getdelim@@GLIBC_2.2.5:
0000000000228810         extern function code
                     strcmp@@GLIBC_2.2.5:
0000000000228818         extern function code
                     dirfd@@GLIBC_2.2.5:
0000000000228820         extern function code
                     __memcpy_chk@@GLIBC_2.3.4:
0000000000228828         extern function code
                     feof@@GLIBC_2.2.5:
0000000000228830         extern function code
                     __gmon_start___228838:        // __gmon_start__
0000000000228838         extern function code
                     memcpy@@GLIBC_2.14:
0000000000228840         extern function code
                     tzset@@GLIBC_2.2.5:
0000000000228848         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000228850         extern function code
                     __xstat@@GLIBC_2.2.5:
0000000000228858         extern function code
                     readdir@@GLIBC_2.2.5:
0000000000228860         extern function code
                     wcwidth@@GLIBC_2.2.5:
0000000000228868         extern function code
                     iswalnum@@GLIBC_2.2.5:
0000000000228870         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000228878         extern function code
                     wcrtomb@@GLIBC_2.2.5:
0000000000228880         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000228888         extern function code
                     getmntent@@GLIBC_2.2.5:
0000000000228890         extern function code
                     setmntent@@GLIBC_2.2.5:
0000000000228898         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
00000000002288a0         extern function code
                     __fxstat@@GLIBC_2.2.5:
00000000002288a8         extern function code
                     sscanf@@GLIBC_2.2.5:
00000000002288b0         extern function code
                     mktime@@GLIBC_2.2.5:
00000000002288b8         extern function code
                     __freading@@GLIBC_2.2.5:
00000000002288c0         extern function code
                     fchdir@@GLIBC_2.2.5:
00000000002288c8         extern function code
                     realloc@@GLIBC_2.2.5:
00000000002288d0         extern function code
                     setlocale@@GLIBC_2.2.5:
00000000002288d8         extern function code
                     __printf_chk@@GLIBC_2.3.4:
00000000002288e0         extern function code
                     timegm@@GLIBC_2.2.5:
00000000002288e8         extern function code
                     strftime@@GLIBC_2.2.5:
00000000002288f0         extern function code
                     btowc@@GLIBC_2.2.5:
00000000002288f8         extern function code
                     memmove@@GLIBC_2.2.5:
0000000000228900         extern function code
                     error@@GLIBC_2.2.5:
0000000000228908         extern function code
                     open@@GLIBC_2.2.5:
0000000000228910         extern function code
                     fseeko@@GLIBC_2.2.5:
0000000000228918         extern function code
                     fopen@@GLIBC_2.2.5:
0000000000228920         extern function code
                     towlower@@GLIBC_2.2.5:
0000000000228928         extern function code
                     fdopendir@@GLIBC_2.4:
0000000000228930         extern function code
                     unsetenv@@GLIBC_2.2.5:
0000000000228938         extern function code
                     towupper@@GLIBC_2.2.5:
0000000000228940         extern function code
                     strtoul@@GLIBC_2.2.5:
0000000000228948         extern function code
                     fstatfs@@GLIBC_2.2.5:
0000000000228950         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
0000000000228958         extern function code
                     exit@@GLIBC_2.2.5:
0000000000228960         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000228968         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000228970         extern function code
                     _ITM_registerTMCloneTable_228978:        // _ITM_registerTMCloneTable
0000000000228978         extern function code
                     fflush_unlocked@@GLIBC_2.2.5:
0000000000228980         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000228988         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000228990         extern function code
                     hasmntopt@@GLIBC_2.2.5:
0000000000228998         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
00000000002289a0         extern function code
                     getdelim@@GLIBC_2.2.5:
00000000002289a8         extern function code
                     strstr@@GLIBC_2.2.5:
00000000002289b0         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
00000000002289b8         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
00000000002289c0         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
00000000002289c8         extern function code
