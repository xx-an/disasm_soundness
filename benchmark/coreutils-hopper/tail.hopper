
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tail
        UUID: 071F63B5-DB09-1D64-0A1A-25FE54558317
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xefd8[ (61400 bytes)
        ; File offset : [0; 61400[ (61400 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0xb0 ; '.'
0000000000000019         db  0x48 ; 'H'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x00 ; '.'
0000000000000029         db  0xcd ; '.'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xd8 ; '.'
00000000000000d1         db  0xef ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xd8 ; '.'
00000000000000d9         db  0xef ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x10 ; '.'
00000000000000f1         db  0xf9 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x10 ; '.'
00000000000000f9         db  0xf9 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x10 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xf9 ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xb0 ; '.'
0000000000000109         db  0x07 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x78 ; 'x'
0000000000000111         db  0x09 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x98 ; '.'
0000000000000129         db  0xfb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x98 ; '.'
0000000000000131         db  0xfb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x98 ; '.'
0000000000000139         db  0xfb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'                                         ; DATA XREF=fremote+1104
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x7c ; '|'
0000000000000199         db  0xd4 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x7c ; '|'
00000000000001a1         db  0xd4 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x7c ; '|'
00000000000001a9         db  0xd4 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x4c ; 'L'
00000000000001b1         db  0x04 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x4c ; 'L'
00000000000001b9         db  0x04 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=main+4511, xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x10 ; '.'
0000000000000209         db  0xf9 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x10 ; '.'
0000000000000211         db  0xf9 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x10 ; '.'
0000000000000219         db  0xf9 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0xf0 ; '.'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0xf0 ; '.'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x07 ; '.'
0000000000000285         db  0x1f ; '.'
0000000000000286         db  0x63 ; 'c'
0000000000000287         db  0xb5 ; '.'
0000000000000288         db  0xdb ; '.'
0000000000000289         db  0x09 ; '.'
000000000000028a         db  0x1d ; '.'
000000000000028b         db  0x64 ; 'd'
000000000000028c         db  0x0a ; '.'
000000000000028d         db  0x1a ; '.'
000000000000028e         db  0x25 ; '%'
000000000000028f         db  0xfe ; '.'
0000000000000290         db  0x54 ; 'T'
0000000000000291         db  0x55 ; 'U'
0000000000000292         db  0x83 ; '.'
0000000000000293         db  0x17 ; '.'
0000000000000294         db  0x82 ; '.'
0000000000000295         db  0x7d ; '}'
0000000000000296         db  0xc2 ; '.'
0000000000000297         db  0x24 ; '$'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x4d ; 'M'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x4d ; 'M'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x4e ; 'N'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x53 ; 'S'                                         ; DATA XREF=main+2285
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'                                         ; DATA XREF=main+15, main+2799
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xad8[ (2040 bytes)
        ; File offset : [736; 2776[ (2040 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'                                         ; DATA XREF=main+10456
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xe1 ; '.'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xb9 ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x0a ; '.'
0000000000000329         db  0x03 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xdb ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x6c ; 'l'
0000000000000359         db  0x01 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x43 ; 'C'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x79 ; 'y'
0000000000000389         db  0x03 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x20 ; ' '
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0xe1 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x31 ; '1'
00000000000003b9         db  0x02 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x46 ; 'F'
00000000000003d1         db  0x01 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'                                         ; DATA XREF=recheck+1600
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x21 ; '!'                                         ; DATA XREF=xstrtoumax+420
00000000000003e9         db  0x01 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x87 ; '.'                                         ; DATA XREF=xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288
0000000000000401         db  0x02 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x1f ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'                                         ; DATA XREF=recheck+1653
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x99 ; '.'
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xcd ; '.'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xab ; '.'
0000000000000461         db  0x01 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x95 ; '.'
0000000000000479         db  0x02 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x6a ; 'j'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x28 ; '('
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x54 ; 'T'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xa1 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x90 ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x0e ; '.'
0000000000000509         db  0x02 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x3b ; ';'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x41 ; 'A'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x74 ; 't'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x5b ; '['
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x80 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0xdd ; '.'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x52 ; 'R'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x9e ; '.'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x13 ; '.'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0xe8 ; '.'
00000000000005f9         db  0x02 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x65 ; 'e'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xac ; '.'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0xe7 ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x7d ; '}'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xbb ; '.'
0000000000000671         db  0x02 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x82 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xfb ; '.'
00000000000006a1         db  0x02 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x4d ; 'M'
00000000000006b9         db  0x01 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0xb4 ; '.'
00000000000006d1         db  0x02 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x95 ; '.'
00000000000006e9         db  0x03 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x20 ; ' '
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x3f ; '?'
0000000000000701         db  0x01 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0xa4 ; '.'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xf6 ; '.'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x01 ; '.'
0000000000000749         db  0x02 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x23 ; '#'
0000000000000761         db  0x02 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xbb ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'                                         ; DATA XREF=main+7943
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x8d ; '.'
0000000000000791         db  0x02 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0xb2 ; '.'
00000000000007a9         db  0x01 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x0b ; '.'                                         ; DATA XREF=fremote+1520
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x66 ; 'f'
00000000000007d9         db  0x02 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xc7 ; '.'
00000000000007f1         db  0x01 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x1a ; '.'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xef ; '.'
0000000000000821         db  0x01 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xa4 ; '.'
0000000000000839         db  0x02 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0xcb ; '.'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x31 ; '1'
0000000000000869         db  0x00 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x12 ; '.'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x8a ; '.'
0000000000000899         db  0x00 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0xee ; '.'
00000000000008b1         db  0x00 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x3c ; '<'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xd6 ; '.'
00000000000008e1         db  0x02 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xd3 ; '.'
00000000000008f9         db  0x00 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x2a ; '*'
0000000000000911         db  0x03 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xe2 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x2a ; '*'
0000000000000941         db  0x02 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x89 ; '.'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xa4 ; '.'
0000000000000971         db  0x03 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x20 ; ' '
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x5a ; 'Z'
0000000000000989         db  0x00 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0xbf ; '.'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xc2 ; '.'
00000000000009b9         db  0x00 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xaa ; '.'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x78 ; 'x'
00000000000009e9         db  0x02 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x22 ; '"'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0xd3 ; '.'
0000000000000a01         db  0x01 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x97 ; '.'
0000000000000a19         db  0x01 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x11 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0xc8 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x21 ; '!'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x0f ; '.'
0000000000000a31         db  0x03 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x11 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x19 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0xc0 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x21 ; '!'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x08 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xfb ; '.'
0000000000000a49         db  0x00 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x21 ; '!'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0xe0 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x21 ; '!'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x08 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x1a ; '.'
0000000000000a61         db  0x03 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x11 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0xe0 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x21 ; '!'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x48 ; 'H'
0000000000000a79         db  0x02 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x21 ; '!'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0xc0 ; '.'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x21 ; '!'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x08 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0xfa ; '.'
0000000000000a91         db  0x01 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x00 ; '.'
0000000000000a99         db  0x01 ; '.'
0000000000000a9a         db  0x21 ; '!'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x08 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0x4b ; 'K'
0000000000000aa9         db  0x00 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x11 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0xd0 ; '.'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x21 ; '!'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x04 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xe8 ; '.'
0000000000000ac1         db  0x01 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x11 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x19 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0xd8 ; '.'
0000000000000ac9         db  0x00 ; '.'
0000000000000aca         db  0x21 ; '!'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x08 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xad8; 0xe96[ (958 bytes)
        ; File offset : [2776; 3734[ (958 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000ad8         db  0x00 ; '.'
0000000000000ad9         db  0x6c ; 'l'
0000000000000ada         db  0x69 ; 'i'
0000000000000adb         db  0x62 ; 'b'
0000000000000adc         db  0x63 ; 'c'
0000000000000add         db  0x2e ; '.'
0000000000000ade         db  0x73 ; 's'
0000000000000adf         db  0x6f ; 'o'
0000000000000ae0         db  0x2e ; '.'
0000000000000ae1         db  0x36 ; '6'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x66 ; 'f'
0000000000000ae4         db  0x66 ; 'f'
0000000000000ae5         db  0x6c ; 'l'
0000000000000ae6         db  0x75 ; 'u'
0000000000000ae7         db  0x73 ; 's'
0000000000000ae8         db  0x68 ; 'h'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x5f ; '_'
0000000000000aeb         db  0x5f ; '_'
0000000000000aec         db  0x70 ; 'p'
0000000000000aed         db  0x72 ; 'r'
0000000000000aee         db  0x69 ; 'i'
0000000000000aef         db  0x6e ; 'n'
0000000000000af0         db  0x74 ; 't'
0000000000000af1         db  0x66 ; 'f'
0000000000000af2         db  0x5f ; '_'
0000000000000af3         db  0x63 ; 'c'
0000000000000af4         db  0x68 ; 'h'
0000000000000af5         db  0x6b ; 'k'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x63 ; 'c'
0000000000000af8         db  0x6c ; 'l'
0000000000000af9         db  0x65 ; 'e'
0000000000000afa         db  0x61 ; 'a'
0000000000000afb         db  0x72 ; 'r'
0000000000000afc         db  0x65 ; 'e'
0000000000000afd         db  0x72 ; 'r'
0000000000000afe         db  0x72 ; 'r'
0000000000000aff         db  0x5f ; '_'
                     aUnlocked:
0000000000000b00         db         "unlocked", 0
0000000000000b09         db  0x73 ; 's'
0000000000000b0a         db  0x65 ; 'e'
0000000000000b0b         db  0x74 ; 't'
0000000000000b0c         db  0x6c ; 'l'
0000000000000b0d         db  0x6f ; 'o'
0000000000000b0e         db  0x63 ; 'c'
0000000000000b0f         db  0x61 ; 'a'
0000000000000b10         db  0x6c ; 'l'
0000000000000b11         db  0x65 ; 'e'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x6d ; 'm'
0000000000000b14         db  0x62 ; 'b'
0000000000000b15         db  0x72 ; 'r'
0000000000000b16         db  0x74 ; 't'
0000000000000b17         db  0x6f ; 'o'
0000000000000b18         db  0x77 ; 'w'
0000000000000b19         db  0x63 ; 'c'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x73 ; 's'
0000000000000b1c         db  0x74 ; 't'
0000000000000b1d         db  0x72 ; 'r'
0000000000000b1e         db  0x6e ; 'n'
0000000000000b1f         db  0x63 ; 'c'
0000000000000b20         db  0x6d ; 'm'
0000000000000b21         db  0x70 ; 'p'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x6f ; 'o'
0000000000000b24         db  0x70 ; 'p'
0000000000000b25         db  0x74 ; 't'
0000000000000b26         db  0x69 ; 'i'
0000000000000b27         db  0x6e ; 'n'
0000000000000b28         db  0x64 ; 'd'
0000000000000b29         db  0x00 ; '.'
0000000000000b2a         db  0x73 ; 's'
0000000000000b2b         db  0x74 ; 't'
0000000000000b2c         db  0x72 ; 'r'
0000000000000b2d         db  0x72 ; 'r'
0000000000000b2e         db  0x63 ; 'c'
0000000000000b2f         db  0x68 ; 'h'
0000000000000b30         db  0x72 ; 'r'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x66 ; 'f'
0000000000000b33         db  0x66 ; 'f'
0000000000000b34         db  0x6c ; 'l'
0000000000000b35         db  0x75 ; 'u'
0000000000000b36         db  0x73 ; 's'
0000000000000b37         db  0x68 ; 'h'
0000000000000b38         db  0x5f ; '_'
0000000000000b39         db  0x75 ; 'u'
0000000000000b3a         db  0x6e ; 'n'
0000000000000b3b         db  0x6c ; 'l'
0000000000000b3c         db  0x6f ; 'o'
0000000000000b3d         db  0x63 ; 'c'
0000000000000b3e         db  0x6b ; 'k'
0000000000000b3f         db  0x65 ; 'e'
0000000000000b40         db  0x64 ; 'd'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x64 ; 'd'
0000000000000b43         db  0x63 ; 'c'
0000000000000b44         db  0x67 ; 'g'
                     aEttext:
0000000000000b45         db         "ettext", 0
0000000000000b4c         db  0x5f ; '_'
0000000000000b4d         db  0x5f ; '_'
0000000000000b4e         db  0x66 ; 'f'
0000000000000b4f         db  0x64 ; 'd'
0000000000000b50         db  0x65 ; 'e'
0000000000000b51         db  0x6c ; 'l'
0000000000000b52         db  0x74 ; 't'
0000000000000b53         db  0x5f ; '_'
0000000000000b54         db  0x63 ; 'c'
0000000000000b55         db  0x68 ; 'h'
0000000000000b56         db  0x6b ; 'k'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x6e ; 'n'
0000000000000b59         db  0x61 ; 'a'
0000000000000b5a         db  0x6e ; 'n'
0000000000000b5b         db  0x6f ; 'o'
0000000000000b5c         db  0x73 ; 's'
0000000000000b5d         db  0x6c ; 'l'
0000000000000b5e         db  0x65 ; 'e'
0000000000000b5f         db  0x65 ; 'e'
0000000000000b60         db  0x70 ; 'p'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x65 ; 'e'
0000000000000b63         db  0x72 ; 'r'
0000000000000b64         db  0x72 ; 'r'
0000000000000b65         db  0x6f ; 'o'
0000000000000b66         db  0x72 ; 'r'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x5f ; '_'
0000000000000b69         db  0x5f ; '_'
0000000000000b6a         db  0x73 ; 's'
0000000000000b6b         db  0x74 ; 't'
0000000000000b6c         db  0x61 ; 'a'
0000000000000b6d         db  0x63 ; 'c'
0000000000000b6e         db  0x6b ; 'k'
0000000000000b6f         db  0x5f ; '_'
0000000000000b70         db  0x63 ; 'c'
0000000000000b71         db  0x68 ; 'h'
0000000000000b72         db  0x6b ; 'k'
0000000000000b73         db  0x5f ; '_'
0000000000000b74         db  0x66 ; 'f'
0000000000000b75         db  0x61 ; 'a'
0000000000000b76         db  0x69 ; 'i'
0000000000000b77         db  0x6c ; 'l'
0000000000000b78         db  0x00 ; '.'
0000000000000b79         db  0x5f ; '_'
0000000000000b7a         db  0x5f ; '_'
0000000000000b7b         db  0x6c ; 'l'
0000000000000b7c         db  0x78 ; 'x'
0000000000000b7d         db  0x73 ; 's'
0000000000000b7e         db  0x74 ; 't'
0000000000000b7f         db  0x61 ; 'a'
0000000000000b80         db  0x74 ; 't'
0000000000000b81         db  0x00 ; '.'
0000000000000b82         db  0x69 ; 'i'
0000000000000b83         db  0x6e ; 'n'
0000000000000b84         db  0x6f ; 'o'
0000000000000b85         db  0x74 ; 't'
0000000000000b86         db  0x69 ; 'i'
0000000000000b87         db  0x66 ; 'f'
0000000000000b88         db  0x79 ; 'y'
0000000000000b89         db  0x5f ; '_'
0000000000000b8a         db  0x72 ; 'r'
0000000000000b8b         db  0x6d ; 'm'
0000000000000b8c         db  0x5f ; '_'
0000000000000b8d         db  0x77 ; 'w'
0000000000000b8e         db  0x61 ; 'a'
0000000000000b8f         db  0x74 ; 't'
0000000000000b90         db  0x63 ; 'c'
0000000000000b91         db  0x68 ; 'h'
0000000000000b92         db  0x00 ; '.'
0000000000000b93         db  0x73 ; 's'
0000000000000b94         db  0x65 ; 'e'
0000000000000b95         db  0x6c ; 'l'
0000000000000b96         db  0x65 ; 'e'
0000000000000b97         db  0x63 ; 'c'
0000000000000b98         db  0x74 ; 't'
0000000000000b99         db  0x00 ; '.'
0000000000000b9a         db  0x69 ; 'i'
0000000000000b9b         db  0x73 ; 's'
0000000000000b9c         db  0x77 ; 'w'
0000000000000b9d         db  0x70 ; 'p'
0000000000000b9e         db  0x72 ; 'r'
0000000000000b9f         db  0x69 ; 'i'
0000000000000ba0         db  0x6e ; 'n'
0000000000000ba1         db  0x74 ; 't'
0000000000000ba2         db  0x00 ; '.'
0000000000000ba3         db  0x72 ; 'r'
0000000000000ba4         db  0x65 ; 'e'
0000000000000ba5         db  0x61 ; 'a'
0000000000000ba6         db  0x6c ; 'l'
0000000000000ba7         db  0x6c ; 'l'
0000000000000ba8         db  0x6f ; 'o'
0000000000000ba9         db  0x63 ; 'c'
0000000000000baa         db  0x00 ; '.'
0000000000000bab         db  0x66 ; 'f'
0000000000000bac         db  0x73 ; 's'
0000000000000bad         db  0x74 ; 't'
0000000000000bae         db  0x61 ; 'a'
0000000000000baf         db  0x74 ; 't'
0000000000000bb0         db  0x66 ; 'f'
0000000000000bb1         db  0x73 ; 's'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x61 ; 'a'
0000000000000bb4         db  0x62 ; 'b'
0000000000000bb5         db  0x6f ; 'o'
0000000000000bb6         db  0x72 ; 'r'
0000000000000bb7         db  0x74 ; 't'
0000000000000bb8         db  0x00 ; '.'
0000000000000bb9         db  0x5f ; '_'
0000000000000bba         db  0x65 ; 'e'
0000000000000bbb         db  0x78 ; 'x'
0000000000000bbc         db  0x69 ; 'i'
0000000000000bbd         db  0x74 ; 't'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x6d ; 'm'
0000000000000bc0         db  0x65 ; 'e'
0000000000000bc1         db  0x6d ; 'm'
0000000000000bc2         db  0x63 ; 'c'
0000000000000bc3         db  0x68 ; 'h'
0000000000000bc4         db  0x72 ; 'r'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x6d ; 'm'
0000000000000bc7         db  0x65 ; 'e'
0000000000000bc8         db  0x6d ; 'm'
0000000000000bc9         db  0x72 ; 'r'
0000000000000bca         db  0x63 ; 'c'
0000000000000bcb         db  0x68 ; 'h'
0000000000000bcc         db  0x72 ; 'r'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x6b ; 'k'
0000000000000bcf         db  0x69 ; 'i'
0000000000000bd0         db  0x6c ; 'l'
0000000000000bd1         db  0x6c ; 'l'
0000000000000bd2         db  0x00 ; '.'
0000000000000bd3         db  0x70 ; 'p'
0000000000000bd4         db  0x72 ; 'r'
0000000000000bd5         db  0x6f ; 'o'
0000000000000bd6         db  0x67 ; 'g'
0000000000000bd7         db  0x72 ; 'r'
0000000000000bd8         db  0x61 ; 'a'
0000000000000bd9         db  0x6d ; 'm'
0000000000000bda         db  0x5f ; '_'
0000000000000bdb         db  0x69 ; 'i'
0000000000000bdc         db  0x6e ; 'n'
0000000000000bdd         db  0x76 ; 'v'
0000000000000bde         db  0x6f ; 'o'
0000000000000bdf         db  0x63 ; 'c'
0000000000000be0         db  0x61 ; 'a'
0000000000000be1         db  0x74 ; 't'
0000000000000be2         db  0x69 ; 'i'
0000000000000be3         db  0x6f ; 'o'
0000000000000be4         db  0x6e ; 'n'
0000000000000be5         db  0x5f ; '_'
0000000000000be6         db  0x6e ; 'n'
0000000000000be7         db  0x61 ; 'a'
0000000000000be8         db  0x6d ; 'm'
0000000000000be9         db  0x65 ; 'e'
0000000000000bea         db  0x00 ; '.'
0000000000000beb         db  0x5f ; '_'
0000000000000bec         db  0x5f ; '_'
0000000000000bed         db  0x61 ; 'a'
0000000000000bee         db  0x73 ; 's'
0000000000000bef         db  0x73 ; 's'
0000000000000bf0         db  0x65 ; 'e'
0000000000000bf1         db  0x72 ; 'r'
0000000000000bf2         db  0x74 ; 't'
0000000000000bf3         db  0x5f ; '_'
0000000000000bf4         db  0x66 ; 'f'
0000000000000bf5         db  0x61 ; 'a'
0000000000000bf6         db  0x69 ; 'i'
0000000000000bf7         db  0x6c ; 'l'
0000000000000bf8         db  0x00 ; '.'
0000000000000bf9         db  0x73 ; 's'
0000000000000bfa         db  0x74 ; 't'
0000000000000bfb         db  0x72 ; 'r'
0000000000000bfc         db  0x74 ; 't'
0000000000000bfd         db  0x6f ; 'o'
0000000000000bfe         db  0x64 ; 'd'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x5f ; '_'
0000000000000c01         db  0x5f ; '_'
0000000000000c02         db  0x63 ; 'c'
0000000000000c03         db  0x74 ; 't'
0000000000000c04         db  0x79 ; 'y'
0000000000000c05         db  0x70 ; 'p'
                     aEgetmbcurmax:
0000000000000c06         db         "e_get_mb_cur_max", 0                       ; DATA XREF=main+7767
0000000000000c17         db  0x73 ; 's'
0000000000000c18         db  0x74 ; 't'
0000000000000c19         db  0x72 ; 'r'
0000000000000c1a         db  0x74 ; 't'
0000000000000c1b         db  0x6f ; 'o'
0000000000000c1c         db  0x6c ; 'l'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x69 ; 'i'
0000000000000c1f         db  0x73 ; 's'
0000000000000c20         db  0x61 ; 'a'
0000000000000c21         db  0x74 ; 't'
0000000000000c22         db  0x74 ; 't'
0000000000000c23         db  0x79 ; 'y'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x63 ; 'c'
0000000000000c26         db  0x61 ; 'a'
0000000000000c27         db  0x6c ; 'l'
0000000000000c28         db  0x6c ; 'l'
0000000000000c29         db  0x6f ; 'o'
0000000000000c2a         db  0x63 ; 'c'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x73 ; 's'
0000000000000c2d         db  0x74 ; 't'
0000000000000c2e         db  0x72 ; 'r'
0000000000000c2f         db  0x6c ; 'l'
0000000000000c30         db  0x65 ; 'e'
0000000000000c31         db  0x6e ; 'n'
0000000000000c32         db  0x00 ; '.'
0000000000000c33         db  0x6e ; 'n'
0000000000000c34         db  0x65 ; 'e'
0000000000000c35         db  0x77 ; 'w'
0000000000000c36         db  0x6c ; 'l'
0000000000000c37         db  0x6f ; 'o'
0000000000000c38         db  0x63 ; 'c'
0000000000000c39         db  0x61 ; 'a'
0000000000000c3a         db  0x6c ; 'l'
0000000000000c3b         db  0x65 ; 'e'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x6d ; 'm'
0000000000000c3e         db  0x65 ; 'e'
0000000000000c3f         db  0x6d ; 'm'
0000000000000c40         db  0x73 ; 's'
0000000000000c41         db  0x65 ; 'e'
0000000000000c42         db  0x74 ; 't'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x5f ; '_'
0000000000000c45         db  0x5f ; '_'
0000000000000c46         db  0x65 ; 'e'
0000000000000c47         db  0x72 ; 'r'
0000000000000c48         db  0x72 ; 'r'
0000000000000c49         db  0x6e ; 'n'
0000000000000c4a         db  0x6f ; 'o'
0000000000000c4b         db  0x5f ; '_'
0000000000000c4c         db  0x6c ; 'l'
0000000000000c4d         db  0x6f ; 'o'
0000000000000c4e         db  0x63 ; 'c'
0000000000000c4f         db  0x61 ; 'a'
0000000000000c50         db  0x74 ; 't'
0000000000000c51         db  0x69 ; 'i'
0000000000000c52         db  0x6f ; 'o'
0000000000000c53         db  0x6e ; 'n'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x72 ; 'r'
0000000000000c56         db  0x65 ; 'e'
0000000000000c57         db  0x61 ; 'a'
0000000000000c58         db  0x64 ; 'd'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x6d ; 'm'
0000000000000c5b         db  0x65 ; 'e'
0000000000000c5c         db  0x6d ; 'm'
0000000000000c5d         db  0x63 ; 'c'
0000000000000c5e         db  0x6d ; 'm'
0000000000000c5f         db  0x70 ; 'p'
0000000000000c60         db  0x00 ; '.'
0000000000000c61         db  0x5f ; '_'
0000000000000c62         db  0x5f ; '_'
0000000000000c63         db  0x66 ; 'f'
0000000000000c64         db  0x70 ; 'p'
0000000000000c65         db  0x72 ; 'r'
0000000000000c66         db  0x69 ; 'i'
0000000000000c67         db  0x6e ; 'n'
0000000000000c68         db  0x74 ; 't'
0000000000000c69         db  0x66 ; 'f'
0000000000000c6a         db  0x5f ; '_'
0000000000000c6b         db  0x63 ; 'c'
0000000000000c6c         db  0x68 ; 'h'
0000000000000c6d         db  0x6b ; 'k'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x73 ; 's'
0000000000000c70         db  0x74 ; 't'
0000000000000c71         db  0x64 ; 'd'
0000000000000c72         db  0x6f ; 'o'
0000000000000c73         db  0x75 ; 'u'
0000000000000c74         db  0x74 ; 't'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x6c ; 'l'
0000000000000c77         db  0x73 ; 's'
0000000000000c78         db  0x65 ; 'e'
0000000000000c79         db  0x65 ; 'e'
0000000000000c7a         db  0x6b ; 'k'
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x6d ; 'm'
0000000000000c7d         db  0x65 ; 'e'
0000000000000c7e         db  0x6d ; 'm'
0000000000000c7f         db  0x63 ; 'c'
0000000000000c80         db  0x70 ; 'p'
0000000000000c81         db  0x79 ; 'y'
0000000000000c82         db  0x00 ; '.'
0000000000000c83         db  0x66 ; 'f'
0000000000000c84         db  0x63 ; 'c'
0000000000000c85         db  0x6c ; 'l'
0000000000000c86         db  0x6f ; 'o'
0000000000000c87         db  0x73 ; 's'
0000000000000c88         db  0x65 ; 'e'
0000000000000c89         db  0x00 ; '.'
0000000000000c8a         db  0x6d ; 'm'
0000000000000c8b         db  0x61 ; 'a'
0000000000000c8c         db  0x6c ; 'l'
0000000000000c8d         db  0x6c ; 'l'
0000000000000c8e         db  0x6f ; 'o'
0000000000000c8f         db  0x63 ; 'c'
0000000000000c90         db  0x00 ; '.'
0000000000000c91         db  0x72 ; 'r'
0000000000000c92         db  0x61 ; 'a'
0000000000000c93         db  0x69 ; 'i'
0000000000000c94         db  0x73 ; 's'
0000000000000c95         db  0x65 ; 'e'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x6d ; 'm'
0000000000000c98         db  0x62 ; 'b'
0000000000000c99         db  0x73 ; 's'
0000000000000c9a         db  0x69 ; 'i'
0000000000000c9b         db  0x6e ; 'n'
0000000000000c9c         db  0x69 ; 'i'
0000000000000c9d         db  0x74 ; 't'
0000000000000c9e         db  0x00 ; '.'
0000000000000c9f         db  0x6e ; 'n'
0000000000000ca0         db  0x6c ; 'l'
0000000000000ca1         db  0x5f ; '_'
0000000000000ca2         db  0x6c ; 'l'
0000000000000ca3         db  0x61 ; 'a'
0000000000000ca4         db  0x6e ; 'n'
0000000000000ca5         db  0x67 ; 'g'
0000000000000ca6         db  0x69 ; 'i'
0000000000000ca7         db  0x6e ; 'n'
0000000000000ca8         db  0x66 ; 'f'
0000000000000ca9         db  0x6f ; 'o'
0000000000000caa         db  0x00 ; '.'
0000000000000cab         db  0x5f ; '_'
0000000000000cac         db  0x5f ; '_'
0000000000000cad         db  0x63 ; 'c'
0000000000000cae         db  0x74 ; 't'
0000000000000caf         db  0x79 ; 'y'
0000000000000cb0         db  0x70 ; 'p'
0000000000000cb1         db  0x65 ; 'e'
0000000000000cb2         db  0x5f ; '_'
0000000000000cb3         db  0x62 ; 'b'
0000000000000cb4         db  0x5f ; '_'
0000000000000cb5         db  0x6c ; 'l'
0000000000000cb6         db  0x6f ; 'o'
0000000000000cb7         db  0x63 ; 'c'
0000000000000cb8         db  0x00 ; '.'
0000000000000cb9         db  0x67 ; 'g'
0000000000000cba         db  0x65 ; 'e'
0000000000000cbb         db  0x74 ; 't'
0000000000000cbc         db  0x65 ; 'e'
0000000000000cbd         db  0x6e ; 'n'
0000000000000cbe         db  0x76 ; 'v'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x6f ; 'o'
0000000000000cc1         db  0x70 ; 'p'
0000000000000cc2         db  0x74 ; 't'
0000000000000cc3         db  0x61 ; 'a'
0000000000000cc4         db  0x72 ; 'r'
0000000000000cc5         db  0x67 ; 'g'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x5f ; '_'
0000000000000cc8         db  0x5f ; '_'
0000000000000cc9         db  0x66 ; 'f'
0000000000000cca         db  0x72 ; 'r'
0000000000000ccb         db  0x65 ; 'e'
0000000000000ccc         db  0x61 ; 'a'
0000000000000ccd         db  0x64 ; 'd'
0000000000000cce         db  0x69 ; 'i'
0000000000000ccf         db  0x6e ; 'n'
0000000000000cd0         db  0x67 ; 'g'
0000000000000cd1         db  0x00 ; '.'
0000000000000cd2         db  0x73 ; 's'
0000000000000cd3         db  0x74 ; 't'
0000000000000cd4         db  0x64 ; 'd'
0000000000000cd5         db  0x65 ; 'e'
0000000000000cd6         db  0x72 ; 'r'
0000000000000cd7         db  0x72 ; 'r'
0000000000000cd8         db  0x00 ; '.'
0000000000000cd9         db  0x69 ; 'i'
0000000000000cda         db  0x6e ; 'n'
0000000000000cdb         db  0x6f ; 'o'
0000000000000cdc         db  0x74 ; 't'
0000000000000cdd         db  0x69 ; 'i'
0000000000000cde         db  0x66 ; 'f'
0000000000000cdf         db  0x79 ; 'y'
0000000000000ce0         db  0x5f ; '_'
0000000000000ce1         db  0x69 ; 'i'
0000000000000ce2         db  0x6e ; 'n'
0000000000000ce3         db  0x69 ; 'i'
0000000000000ce4         db  0x74 ; 't'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x67 ; 'g'
0000000000000ce7         db  0x65 ; 'e'
0000000000000ce8         db  0x74 ; 't'
0000000000000ce9         db  0x6f ; 'o'
0000000000000cea         db  0x70 ; 'p'
0000000000000ceb         db  0x74 ; 't'
0000000000000cec         db  0x5f ; '_'
0000000000000ced         db  0x6c ; 'l'
0000000000000cee         db  0x6f ; 'o'
0000000000000cef         db  0x6e ; 'n'
0000000000000cf0         db  0x67 ; 'g'
0000000000000cf1         db  0x00 ; '.'
0000000000000cf2         db  0x5f ; '_'
0000000000000cf3         db  0x5f ; '_'
0000000000000cf4         db  0x66 ; 'f'
0000000000000cf5         db  0x78 ; 'x'
0000000000000cf6         db  0x73 ; 's'
0000000000000cf7         db  0x74 ; 't'
0000000000000cf8         db  0x61 ; 'a'
0000000000000cf9         db  0x74 ; 't'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x66 ; 'f'
0000000000000cfc         db  0x69 ; 'i'
0000000000000cfd         db  0x6c ; 'l'
0000000000000cfe         db  0x65 ; 'e'
0000000000000cff         db  0x6e ; 'n'
0000000000000d00         db  0x6f ; 'o'
0000000000000d01         db  0x00 ; '.'
0000000000000d02         db  0x66 ; 'f'
0000000000000d03         db  0x77 ; 'w'
0000000000000d04         db  0x72 ; 'r'
0000000000000d05         db  0x69 ; 'i'
0000000000000d06         db  0x74 ; 't'
0000000000000d07         db  0x65 ; 'e'
0000000000000d08         db  0x00 ; '.'
0000000000000d09         db  0x5f ; '_'
0000000000000d0a         db  0x5f ; '_'
0000000000000d0b         db  0x66 ; 'f'
0000000000000d0c         db  0x70 ; 'p'
0000000000000d0d         db  0x65 ; 'e'
0000000000000d0e         db  0x6e ; 'n'
0000000000000d0f         db  0x64 ; 'd'
0000000000000d10         db  0x69 ; 'i'
0000000000000d11         db  0x6e ; 'n'
0000000000000d12         db  0x67 ; 'g'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x6f ; 'o'
0000000000000d15         db  0x70 ; 'p'
0000000000000d16         db  0x65 ; 'e'
0000000000000d17         db  0x6e ; 'n'
0000000000000d18         db  0x00 ; '.'
0000000000000d19         db  0x73 ; 's'
0000000000000d1a         db  0x74 ; 't'
0000000000000d1b         db  0x72 ; 'r'
0000000000000d1c         db  0x63 ; 'c'
0000000000000d1d         db  0x68 ; 'h'
0000000000000d1e         db  0x72 ; 'r'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x70 ; 'p'
0000000000000d21         db  0x72 ; 'r'
0000000000000d22         db  0x6f ; 'o'
0000000000000d23         db  0x67 ; 'g'
0000000000000d24         db  0x72 ; 'r'
0000000000000d25         db  0x61 ; 'a'
0000000000000d26         db  0x6d ; 'm'
0000000000000d27         db  0x5f ; '_'
0000000000000d28         db  0x69 ; 'i'
0000000000000d29         db  0x6e ; 'n'
0000000000000d2a         db  0x76 ; 'v'
0000000000000d2b         db  0x6f ; 'o'
0000000000000d2c         db  0x63 ; 'c'
0000000000000d2d         db  0x61 ; 'a'
0000000000000d2e         db  0x74 ; 't'
0000000000000d2f         db  0x69 ; 'i'
0000000000000d30         db  0x6f ; 'o'
0000000000000d31         db  0x6e ; 'n'
0000000000000d32         db  0x5f ; '_'
0000000000000d33         db  0x73 ; 's'
0000000000000d34         db  0x68 ; 'h'
0000000000000d35         db  0x6f ; 'o'
0000000000000d36         db  0x72 ; 'r'
0000000000000d37         db  0x74 ; 't'
0000000000000d38         db  0x5f ; '_'
0000000000000d39         db  0x6e ; 'n'
0000000000000d3a         db  0x61 ; 'a'
0000000000000d3b         db  0x6d ; 'm'
0000000000000d3c         db  0x65 ; 'e'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x69 ; 'i'
0000000000000d3f         db  0x6e ; 'n'
0000000000000d40         db  0x6f ; 'o'
0000000000000d41         db  0x74 ; 't'
0000000000000d42         db  0x69 ; 'i'
0000000000000d43         db  0x66 ; 'f'
0000000000000d44         db  0x79 ; 'y'
0000000000000d45         db  0x5f ; '_'
0000000000000d46         db  0x61 ; 'a'
0000000000000d47         db  0x64 ; 'd'
0000000000000d48         db  0x64 ; 'd'
0000000000000d49         db  0x5f ; '_'
0000000000000d4a         db  0x77 ; 'w'
0000000000000d4b         db  0x61 ; 'a'
0000000000000d4c         db  0x74 ; 't'
0000000000000d4d         db  0x63 ; 'c'
0000000000000d4e         db  0x68 ; 'h'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x5f ; '_'
0000000000000d51         db  0x5f ; '_'
0000000000000d52         db  0x63 ; 'c'
0000000000000d53         db  0x78 ; 'x'
0000000000000d54         db  0x61 ; 'a'
0000000000000d55         db  0x5f ; '_'
0000000000000d56         db  0x66 ; 'f'
0000000000000d57         db  0x69 ; 'i'
0000000000000d58         db  0x6e ; 'n'
0000000000000d59         db  0x61 ; 'a'
0000000000000d5a         db  0x6c ; 'l'
0000000000000d5b         db  0x69 ; 'i'
0000000000000d5c         db  0x7a ; 'z'
0000000000000d5d         db  0x65 ; 'e'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x66 ; 'f'
0000000000000d60         db  0x63 ; 'c'
0000000000000d61         db  0x6e ; 'n'
0000000000000d62         db  0x74 ; 't'
0000000000000d63         db  0x6c ; 'l'
0000000000000d64         db  0x00 ; '.'
0000000000000d65         db  0x5f ; '_'
0000000000000d66         db  0x5f ; '_'
0000000000000d67         db  0x78 ; 'x'
0000000000000d68         db  0x73 ; 's'
0000000000000d69         db  0x74 ; 't'
0000000000000d6a         db  0x61 ; 'a'
0000000000000d6b         db  0x74 ; 't'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x62 ; 'b'
0000000000000d6e         db  0x69 ; 'i'
0000000000000d6f         db  0x6e ; 'n'
0000000000000d70         db  0x64 ; 'd'
0000000000000d71         db  0x74 ; 't'
0000000000000d72         db  0x65 ; 'e'
0000000000000d73         db  0x78 ; 'x'
0000000000000d74         db  0x74 ; 't'
0000000000000d75         db  0x64 ; 'd'
0000000000000d76         db  0x6f ; 'o'
0000000000000d77         db  0x6d ; 'm'
0000000000000d78         db  0x61 ; 'a'
0000000000000d79         db  0x69 ; 'i'
0000000000000d7a         db  0x6e ; 'n'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x66 ; 'f'
0000000000000d7d         db  0x77 ; 'w'
0000000000000d7e         db  0x72 ; 'r'
0000000000000d7f         db  0x69 ; 'i'
0000000000000d80         db  0x74 ; 't'
0000000000000d81         db  0x65 ; 'e'
0000000000000d82         db  0x5f ; '_'
0000000000000d83         db  0x75 ; 'u'
0000000000000d84         db  0x6e ; 'n'
0000000000000d85         db  0x6c ; 'l'
0000000000000d86         db  0x6f ; 'o'
0000000000000d87         db  0x63 ; 'c'
0000000000000d88         db  0x6b ; 'k'
0000000000000d89         db  0x65 ; 'e'
0000000000000d8a         db  0x64 ; 'd'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x73 ; 's'
0000000000000d8d         db  0x74 ; 't'
0000000000000d8e         db  0x72 ; 'r'
0000000000000d8f         db  0x63 ; 'c'
0000000000000d90         db  0x6d ; 'm'
0000000000000d91         db  0x70 ; 'p'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x5f ; '_'
0000000000000d94         db  0x5f ; '_'
0000000000000d95         db  0x6c ; 'l'
0000000000000d96         db  0x69 ; 'i'
0000000000000d97         db  0x62 ; 'b'
0000000000000d98         db  0x63 ; 'c'
0000000000000d99         db  0x5f ; '_'
0000000000000d9a         db  0x73 ; 's'
0000000000000d9b         db  0x74 ; 't'
0000000000000d9c         db  0x61 ; 'a'
0000000000000d9d         db  0x72 ; 'r'
0000000000000d9e         db  0x74 ; 't'
0000000000000d9f         db  0x5f ; '_'
0000000000000da0         db  0x6d ; 'm'
0000000000000da1         db  0x61 ; 'a'
0000000000000da2         db  0x69 ; 'i'
0000000000000da3         db  0x6e ; 'n'
0000000000000da4         db  0x00 ; '.'
0000000000000da5         db  0x73 ; 's'
0000000000000da6         db  0x74 ; 't'
0000000000000da7         db  0x72 ; 'r'
0000000000000da8         db  0x74 ; 't'
0000000000000da9         db  0x6f ; 'o'
0000000000000daa         db  0x64 ; 'd'
0000000000000dab         db  0x5f ; '_'
0000000000000dac         db  0x6c ; 'l'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x66 ; 'f'
0000000000000daf         db  0x73 ; 's'
0000000000000db0         db  0x65 ; 'e'
0000000000000db1         db  0x65 ; 'e'
0000000000000db2         db  0x6b ; 'k'
0000000000000db3         db  0x6f ; 'o'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x5f ; '_'
0000000000000db6         db  0x5f ; '_'
0000000000000db7         db  0x6f ; 'o'
0000000000000db8         db  0x76 ; 'v'
0000000000000db9         db  0x65 ; 'e'
0000000000000dba         db  0x72 ; 'r'
0000000000000dbb         db  0x66 ; 'f'
0000000000000dbc         db  0x6c ; 'l'
0000000000000dbd         db  0x6f ; 'o'
0000000000000dbe         db  0x77 ; 'w'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x5f ; '_'
0000000000000dc1         db  0x5f ; '_'
0000000000000dc2         db  0x73 ; 's'
0000000000000dc3         db  0x74 ; 't'
0000000000000dc4         db  0x72 ; 'r'
0000000000000dc5         db  0x74 ; 't'
0000000000000dc6         db  0x6f ; 'o'
0000000000000dc7         db  0x75 ; 'u'
0000000000000dc8         db  0x6c ; 'l'
0000000000000dc9         db  0x5f ; '_'
0000000000000dca         db  0x69 ; 'i'
0000000000000dcb         db  0x6e ; 'n'
0000000000000dcc         db  0x74 ; 't'
0000000000000dcd         db  0x65 ; 'e'
0000000000000dce         db  0x72 ; 'r'
0000000000000dcf         db  0x6e ; 'n'
0000000000000dd0         db  0x61 ; 'a'
0000000000000dd1         db  0x6c ; 'l'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x66 ; 'f'
0000000000000dd4         db  0x70 ; 'p'
0000000000000dd5         db  0x75 ; 'u'
0000000000000dd6         db  0x74 ; 't'
0000000000000dd7         db  0x73 ; 's'
0000000000000dd8         db  0x5f ; '_'
0000000000000dd9         db  0x75 ; 'u'
0000000000000dda         db  0x6e ; 'n'
0000000000000ddb         db  0x6c ; 'l'
0000000000000ddc         db  0x6f ; 'o'
0000000000000ddd         db  0x63 ; 'c'
0000000000000dde         db  0x6b ; 'k'
0000000000000ddf         db  0x65 ; 'e'
0000000000000de0         db  0x64 ; 'd'
0000000000000de1         db  0x00 ; '.'
0000000000000de2         db  0x66 ; 'f'
0000000000000de3         db  0x72 ; 'r'
0000000000000de4         db  0x65 ; 'e'
0000000000000de5         db  0x65 ; 'e'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x5f ; '_'
0000000000000de8         db  0x5f ; '_'
0000000000000de9         db  0x70 ; 'p'
0000000000000dea         db  0x72 ; 'r'
0000000000000deb         db  0x6f ; 'o'
0000000000000dec         db  0x67 ; 'g'
0000000000000ded         db  0x6e ; 'n'
0000000000000dee         db  0x61 ; 'a'
0000000000000def         db  0x6d ; 'm'
0000000000000df0         db  0x65 ; 'e'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x5f ; '_'
0000000000000df3         db  0x5f ; '_'
0000000000000df4         db  0x70 ; 'p'
0000000000000df5         db  0x72 ; 'r'
0000000000000df6         db  0x6f ; 'o'
0000000000000df7         db  0x67 ; 'g'
0000000000000df8         db  0x6e ; 'n'
0000000000000df9         db  0x61 ; 'a'
0000000000000dfa         db  0x6d ; 'm'
0000000000000dfb         db  0x65 ; 'e'
0000000000000dfc         db  0x5f ; '_'
0000000000000dfd         db  0x66 ; 'f'
0000000000000dfe         db  0x75 ; 'u'
0000000000000dff         db  0x6c ; 'l'
0000000000000e00         db  0x6c ; 'l'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x5f ; '_'
0000000000000e03         db  0x5f ; '_'
                     aCxaatexit:
0000000000000e04         db         "cxa_atexit", 0                             ; DATA XREF=main+9284
0000000000000e0f         db  0x47 ; 'G'
0000000000000e10         db  0x4c ; 'L'
0000000000000e11         db  0x49 ; 'I'
0000000000000e12         db  0x42 ; 'B'
0000000000000e13         db  0x43 ; 'C'
0000000000000e14         db  0x5f ; '_'
0000000000000e15         db  0x32 ; '2'
0000000000000e16         db  0x2e ; '.'
0000000000000e17         db  0x33 ; '3'
0000000000000e18         db  0x2e ; '.'
0000000000000e19         db  0x34 ; '4'
0000000000000e1a         db  0x00 ; '.'
0000000000000e1b         db  0x47 ; 'G'
0000000000000e1c         db  0x4c ; 'L'
0000000000000e1d         db  0x49 ; 'I'
0000000000000e1e         db  0x42 ; 'B'
0000000000000e1f         db  0x43 ; 'C'
0000000000000e20         db  0x5f ; '_'
0000000000000e21         db  0x32 ; '2'
0000000000000e22         db  0x2e ; '.'
0000000000000e23         db  0x31 ; '1'
0000000000000e24         db  0x34 ; '4'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x47 ; 'G'
0000000000000e27         db  0x4c ; 'L'
0000000000000e28         db  0x49 ; 'I'
0000000000000e29         db  0x42 ; 'B'
0000000000000e2a         db  0x43 ; 'C'
0000000000000e2b         db  0x5f ; '_'
0000000000000e2c         db  0x32 ; '2'
0000000000000e2d         db  0x2e ; '.'
0000000000000e2e         db  0x31 ; '1'
0000000000000e2f         db  0x35 ; '5'
0000000000000e30         db  0x00 ; '.'
0000000000000e31         db  0x47 ; 'G'
0000000000000e32         db  0x4c ; 'L'
0000000000000e33         db  0x49 ; 'I'
0000000000000e34         db  0x42 ; 'B'
0000000000000e35         db  0x43 ; 'C'
0000000000000e36         db  0x5f ; '_'
0000000000000e37         db  0x32 ; '2'
0000000000000e38         db  0x2e ; '.'
0000000000000e39         db  0x34 ; '4'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x47 ; 'G'
0000000000000e3c         db  0x4c ; 'L'
0000000000000e3d         db  0x49 ; 'I'
0000000000000e3e         db  0x42 ; 'B'
0000000000000e3f         db  0x43 ; 'C'
0000000000000e40         db  0x5f ; '_'
0000000000000e41         db  0x32 ; '2'
0000000000000e42         db  0x2e ; '.'
0000000000000e43         db  0x33 ; '3'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x47 ; 'G'
0000000000000e46         db  0x4c ; 'L'
0000000000000e47         db  0x49 ; 'I'
0000000000000e48         db  0x42 ; 'B'
0000000000000e49         db  0x43 ; 'C'
0000000000000e4a         db  0x5f ; '_'
0000000000000e4b         db  0x32 ; '2'
0000000000000e4c         db  0x2e ; '.'
0000000000000e4d         db  0x32 ; '2'
0000000000000e4e         db  0x2e ; '.'
0000000000000e4f         db  0x35 ; '5'
0000000000000e50         db  0x00 ; '.'
0000000000000e51         db  0x5f ; '_'
0000000000000e52         db  0x49 ; 'I'
0000000000000e53         db  0x54 ; 'T'
0000000000000e54         db  0x4d ; 'M'
0000000000000e55         db  0x5f ; '_'
0000000000000e56         db  0x64 ; 'd'
0000000000000e57         db  0x65 ; 'e'
0000000000000e58         db  0x72 ; 'r'
0000000000000e59         db  0x65 ; 'e'
0000000000000e5a         db  0x67 ; 'g'
0000000000000e5b         db  0x69 ; 'i'
0000000000000e5c         db  0x73 ; 's'
0000000000000e5d         db  0x74 ; 't'
0000000000000e5e         db  0x65 ; 'e'
0000000000000e5f         db  0x72 ; 'r'
0000000000000e60         db  0x54 ; 'T'
0000000000000e61         db  0x4d ; 'M'
0000000000000e62         db  0x43 ; 'C'
0000000000000e63         db  0x6c ; 'l'
0000000000000e64         db  0x6f ; 'o'
0000000000000e65         db  0x6e ; 'n'
0000000000000e66         db  0x65 ; 'e'
0000000000000e67         db  0x54 ; 'T'
0000000000000e68         db  0x61 ; 'a'
0000000000000e69         db  0x62 ; 'b'
0000000000000e6a         db  0x6c ; 'l'
0000000000000e6b         db  0x65 ; 'e'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x5f ; '_'
0000000000000e6e         db  0x5f ; '_'
0000000000000e6f         db  0x67 ; 'g'
0000000000000e70         db  0x6d ; 'm'
0000000000000e71         db  0x6f ; 'o'
0000000000000e72         db  0x6e ; 'n'
0000000000000e73         db  0x5f ; '_'
0000000000000e74         db  0x73 ; 's'
0000000000000e75         db  0x74 ; 't'
0000000000000e76         db  0x61 ; 'a'
0000000000000e77         db  0x72 ; 'r'
0000000000000e78         db  0x74 ; 't'
0000000000000e79         db  0x5f ; '_'
0000000000000e7a         db  0x5f ; '_'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x5f ; '_'
0000000000000e7d         db  0x49 ; 'I'
0000000000000e7e         db  0x54 ; 'T'
0000000000000e7f         db  0x4d ; 'M'
0000000000000e80         db  0x5f ; '_'
0000000000000e81         db  0x72 ; 'r'
0000000000000e82         db  0x65 ; 'e'
0000000000000e83         db  0x67 ; 'g'
0000000000000e84         db  0x69 ; 'i'
0000000000000e85         db  0x73 ; 's'
0000000000000e86         db  0x74 ; 't'
0000000000000e87         db  0x65 ; 'e'
0000000000000e88         db  0x72 ; 'r'
0000000000000e89         db  0x54 ; 'T'
0000000000000e8a         db  0x4d ; 'M'
0000000000000e8b         db  0x43 ; 'C'
0000000000000e8c         db  0x6c ; 'l'
0000000000000e8d         db  0x6f ; 'o'
0000000000000e8e         db  0x6e ; 'n'
0000000000000e8f         db  0x65 ; 'e'
0000000000000e90         db  0x54 ; 'T'
0000000000000e91         db  0x61 ; 'a'
0000000000000e92         db  0x62 ; 'b'
0000000000000e93         db  0x6c ; 'l'
0000000000000e94         db  0x65 ; 'e'
0000000000000e95         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xe96; 0xf40[ (170 bytes)
        ; File offset : [3734; 3904[ (170 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x02 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x02 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x02 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x02 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x02 ; '.'
0000000000000ea1         db  0x00 ; '.'
0000000000000ea2         db  0x02 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x02 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x02 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x02 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x02 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x02 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x02 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x02 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x03 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x02 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x02 ; '.'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x02 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x02 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x02 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x02 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x04 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x02 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x02 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x02 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x05 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x03 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x02 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x02 ; '.'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x02 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x02 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x02 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x02 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x02 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x02 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x02 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x02 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x02 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x02 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x02 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x02 ; '.'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x02 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x02 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x06 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x02 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x04 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x02 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x02 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x02 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x02 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x02 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x04 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x02 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x02 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x02 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x02 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x02 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x02 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x07 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x02 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x02 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x02 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x02 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x02 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x02 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x02 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x02 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x07 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x02 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x02 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x02 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x04 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x02 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x03 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x02 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x02 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x02 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x02 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x02 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x02 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x02 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x02 ; '.'
0000000000000f3f         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xf40; 0xfb0[ (112 bytes)
        ; File offset : [3904; 4016[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000f40         db  0x01 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x06 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x01 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x10 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x74 ; 't'
0000000000000f51         db  0x19 ; '.'
0000000000000f52         db  0x69 ; 'i'
0000000000000f53         db  0x09 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x07 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x37 ; '7'
0000000000000f59         db  0x03 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x10 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x94 ; '.'
0000000000000f61         db  0x91 ; '.'
0000000000000f62         db  0x96 ; '.'
0000000000000f63         db  0x06 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x06 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x43 ; 'C'
0000000000000f69         db  0x03 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x10 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x95 ; '.'
0000000000000f71         db  0x91 ; '.'
0000000000000f72         db  0x96 ; '.'
0000000000000f73         db  0x06 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x05 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x4e ; 'N'
0000000000000f79         db  0x03 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x10 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x14 ; '.'
0000000000000f81         db  0x69 ; 'i'
0000000000000f82         db  0x69 ; 'i'
0000000000000f83         db  0x0d ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x04 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x59 ; 'Y'
0000000000000f89         db  0x03 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x10 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x13 ; '.'
0000000000000f91         db  0x69 ; 'i'
0000000000000f92         db  0x69 ; 'i'
0000000000000f93         db  0x0d ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x03 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x63 ; 'c'
0000000000000f99         db  0x03 ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x10 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x75 ; 'u'
0000000000000fa1         db  0x1a ; '.'
0000000000000fa2         db  0x69 ; 'i'
0000000000000fa3         db  0x09 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x02 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x6d ; 'm'
0000000000000fa9         db  0x03 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xfb0; 0x1400[ (1104 bytes)
        ; File offset : [4016; 5120[ (1104 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000fb0         db  0x10 ; '.'
0000000000000fb1         db  0xf9 ; '.'
0000000000000fb2         db  0x20 ; ' '
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x08 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0xb0 ; '.'
0000000000000fc1         db  0x49 ; 'I'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x18 ; '.'
0000000000000fc9         db  0xf9 ; '.'
0000000000000fca         db  0x20 ; ' '
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x08 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x70 ; 'p'
0000000000000fd9         db  0x49 ; 'I'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x20 ; ' '
0000000000000fe1         db  0xf9 ; '.'
0000000000000fe2         db  0x20 ; ' '
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x08 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x33 ; '3'
0000000000000ff1         db  0xb8 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x40 ; '@'
0000000000000ff9         db  0xf9 ; '.'
0000000000000ffa         db  0x20 ; ' '
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x08 ; '.'                                         ; DATA XREF=main+3592, main+4658, main+4742, main+7639, recheck+446
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x48 ; 'H'
0000000000001009         db  0xb8 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x60 ; '`'
0000000000001011         db  0xf9 ; '.'
0000000000001012         db  0x20 ; ' '
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x08 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x1b ; '.'
0000000000001021         db  0xb8 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x80 ; '.'
0000000000001029         db  0xf9 ; '.'
000000000000102a         db  0x20 ; ' '
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x08 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x96 ; '.'
0000000000001039         db  0xb9 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xa0 ; '.'
0000000000001041         db  0xf9 ; '.'
0000000000001042         db  0x20 ; ' '
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0xaa ; '.'
0000000000001051         db  0xb9 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xc0 ; '.'
0000000000001059         db  0xf9 ; '.'
000000000000105a         db  0x20 ; ' '
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0xbb ; '.'
0000000000001069         db  0xb9 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xe0 ; '.'
0000000000001071         db  0xf9 ; '.'
0000000000001072         db  0x20 ; ' '
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xbf ; '.'
0000000000001081         db  0xb9 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x00 ; '.'
0000000000001089         db  0xfa ; '.'
000000000000108a         db  0x20 ; ' '
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0xd3 ; '.'
0000000000001099         db  0xb9 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x20 ; ' '
00000000000010a1         db  0xfa ; '.'
00000000000010a2         db  0x20 ; ' '
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0xd9 ; '.'
00000000000010b1         db  0xb9 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x40 ; '@'
00000000000010b9         db  0xfa ; '.'
00000000000010ba         db  0x20 ; ' '
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0xdf ; '.'
00000000000010c9         db  0xb9 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x60 ; '`'
00000000000010d1         db  0xfa ; '.'
00000000000010d2         db  0x20 ; ' '
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0xe6 ; '.'
00000000000010e1         db  0xb9 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x80 ; '.'
00000000000010e9         db  0xfa ; '.'
00000000000010ea         db  0x20 ; ' '
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0xf5 ; '.'
00000000000010f9         db  0xb9 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0xa0 ; '.'
0000000000001101         db  0xfa ; '.'
0000000000001102         db  0x20 ; ' '
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x08 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0xfd ; '.'
0000000000001111         db  0xb9 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xc0 ; '.'
0000000000001119         db  0xfa ; '.'
000000000000111a         db  0x20 ; ' '
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x08 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x0d ; '.'
0000000000001129         db  0xba ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0xe0 ; '.'
0000000000001131         db  0xfa ; '.'
0000000000001132         db  0x20 ; ' '
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x08 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x12 ; '.'
0000000000001141         db  0xba ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x20 ; ' '
0000000000001149         db  0xfb ; '.'
000000000000114a         db  0x20 ; ' '
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x08 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x1a ; '.'
0000000000001159         db  0xba ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x28 ; '('
0000000000001161         db  0xfb ; '.'
0000000000001162         db  0x20 ; ' '
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x02 ; '.'
0000000000001171         db  0xb7 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x40 ; '@'
0000000000001179         db  0xfb ; '.'
000000000000117a         db  0x20 ; ' '
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x08 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0xe9 ; '.'
0000000000001189         db  0xca ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x48 ; 'H'
0000000000001191         db  0xfb ; '.'
0000000000001192         db  0x20 ; ' '
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0xf1 ; '.'
00000000000011a1         db  0xca ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x50 ; 'P'
00000000000011a9         db  0xfb ; '.'
00000000000011aa         db  0x20 ; ' '
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0xf7 ; '.'
00000000000011b9         db  0xca ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x58 ; 'X'
00000000000011c1         db  0xfb ; '.'
00000000000011c2         db  0x20 ; ' '
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x08 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x04 ; '.'
00000000000011d1         db  0xcb ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x60 ; '`'
00000000000011d9         db  0xfb ; '.'
00000000000011da         db  0x20 ; ' '
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x08 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x11 ; '.'
00000000000011e9         db  0xcb ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x68 ; 'h'
00000000000011f1         db  0xfb ; '.'
00000000000011f2         db  0x20 ; ' '
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x08 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0xbd ; '.'
0000000000001201         db  0xb6 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x70 ; 'p'
0000000000001209         db  0xfb ; '.'
000000000000120a         db  0x20 ; ' '
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x08 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x25 ; '%'
0000000000001219         db  0xcb ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x78 ; 'x'
0000000000001221         db  0xfb ; '.'
0000000000001222         db  0x20 ; ' '
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x08 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x0a ; '.'
0000000000001231         db  0xcb ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x80 ; '.'
0000000000001239         db  0xfb ; '.'
000000000000123a         db  0x20 ; ' '
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x08 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0xe7 ; '.'
0000000000001249         db  0xb7 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x88 ; '.'
0000000000001251         db  0xfb ; '.'
0000000000001252         db  0x20 ; ' '
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x08 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x2d ; '-'
0000000000001261         db  0xcb ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x08 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x21 ; '!'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x08 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x08 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x21 ; '!'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x28 ; '('
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x21 ; '!'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x08 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0xef ; '.'
0000000000001291         db  0xb7 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x30 ; '0'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x21 ; '!'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x08 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x70 ; 'p'
00000000000012a9         db  0xc9 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x38 ; '8'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x21 ; '!'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x08 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0xd0 ; '.'
00000000000012c1         db  0x65 ; 'e'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0xa0 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x21 ; '!'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x08 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0xb0 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x21 ; '!'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0xb8 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x21 ; '!'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x08 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x40 ; '@'
00000000000012f1         db  0x01 ; '.'
00000000000012f2         db  0x21 ; '!'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0xd8 ; '.'
00000000000012f9         db  0xff ; '.'
00000000000012fa         db  0x20 ; ' '
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x06 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x07 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0xe0 ; '.'
0000000000001311         db  0xff ; '.'
0000000000001312         db  0x20 ; ' '
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x06 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x26 ; '&'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0xe8 ; '.'
0000000000001329         db  0xff ; '.'
000000000000132a         db  0x20 ; ' '
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x06 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x2b ; '+'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0xf0 ; '.'
0000000000001341         db  0xff ; '.'
0000000000001342         db  0x20 ; ' '
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x06 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x46 ; 'F'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0xf8 ; '.'
0000000000001359         db  0xff ; '.'
000000000000135a         db  0x20 ; ' '
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x06 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x4b ; 'K'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0xc0 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x21 ; '!'
0000000000001373         db  0x00 ; '.'                                         ; DATA XREF=fremote+1532
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x05 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x4e ; 'N'
000000000000137d         db  0x00 ; '.'                                         ; DATA XREF=fremote+142
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'                                         ; DATA XREF=fremote+170
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0xc8 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x21 ; '!'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'                                         ; DATA XREF=fremote+178
0000000000001390         db  0x05 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x4d ; 'M'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0xd0 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x21 ; '!'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x05 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x53 ; 'S'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0xd8 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x21 ; '!'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x05 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x54 ; 'T'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0xe0 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x21 ; '!'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x05 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x50 ; 'P'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x01 ; '.'
00000000000013ea         db  0x21 ; '!'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x05 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x52 ; 'R'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1400; 0x1aa8[ (1704 bytes)
        ; File offset : [5120; 6824[ (1704 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001400         db  0xa0 ; '.'                                         ; DATA XREF=main+4921
0000000000001401         db  0xfd ; '.'
0000000000001402         db  0x20 ; ' '
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x01 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0xa8 ; '.'
0000000000001419         db  0xfd ; '.'
000000000000141a         db  0x20 ; ' '
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x02 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0xb0 ; '.'
0000000000001431         db  0xfd ; '.'
0000000000001432         db  0x20 ; ' '
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x03 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0xb8 ; '.'
0000000000001449         db  0xfd ; '.'
000000000000144a         db  0x20 ; ' '
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x04 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0xc0 ; '.'
0000000000001461         db  0xfd ; '.'
0000000000001462         db  0x20 ; ' '
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x05 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0xc8 ; '.'
0000000000001479         db  0xfd ; '.'
000000000000147a         db  0x20 ; ' '
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x06 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0xd0 ; '.'
0000000000001491         db  0xfd ; '.'
0000000000001492         db  0x20 ; ' '
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x08 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0xd8 ; '.'
00000000000014a9         db  0xfd ; '.'
00000000000014aa         db  0x20 ; ' '
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x09 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0xe0 ; '.'
00000000000014c1         db  0xfd ; '.'
00000000000014c2         db  0x20 ; ' '
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x0a ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0xe8 ; '.'
00000000000014d9         db  0xfd ; '.'
00000000000014da         db  0x20 ; ' '
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x0b ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0xf0 ; '.'
00000000000014f1         db  0xfd ; '.'
00000000000014f2         db  0x20 ; ' '
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x0c ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0xf8 ; '.'
0000000000001509         db  0xfd ; '.'
000000000000150a         db  0x20 ; ' '
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x0d ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0xfe ; '.'
0000000000001522         db  0x20 ; ' '
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x0e ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x08 ; '.'
0000000000001539         db  0xfe ; '.'
000000000000153a         db  0x20 ; ' '
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x0f ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x10 ; '.'
0000000000001551         db  0xfe ; '.'
0000000000001552         db  0x20 ; ' '
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x10 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x18 ; '.'
0000000000001569         db  0xfe ; '.'
000000000000156a         db  0x20 ; ' '
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x11 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x20 ; ' '
0000000000001581         db  0xfe ; '.'
0000000000001582         db  0x20 ; ' '
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x12 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x28 ; '('
0000000000001599         db  0xfe ; '.'
000000000000159a         db  0x20 ; ' '
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x13 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x30 ; '0'
00000000000015b1         db  0xfe ; '.'
00000000000015b2         db  0x20 ; ' '
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x14 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x38 ; '8'
00000000000015c9         db  0xfe ; '.'
00000000000015ca         db  0x20 ; ' '
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x15 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x40 ; '@'
00000000000015e1         db  0xfe ; '.'
00000000000015e2         db  0x20 ; ' '
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x16 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x48 ; 'H'
00000000000015f9         db  0xfe ; '.'
00000000000015fa         db  0x20 ; ' '
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x17 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x50 ; 'P'
0000000000001611         db  0xfe ; '.'
0000000000001612         db  0x20 ; ' '
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x18 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x58 ; 'X'
0000000000001629         db  0xfe ; '.'
000000000000162a         db  0x20 ; ' '
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x19 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x60 ; '`'
0000000000001641         db  0xfe ; '.'
0000000000001642         db  0x20 ; ' '
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x1a ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x68 ; 'h'
0000000000001659         db  0xfe ; '.'
000000000000165a         db  0x20 ; ' '
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x1b ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x70 ; 'p'
0000000000001671         db  0xfe ; '.'
0000000000001672         db  0x20 ; ' '
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x1c ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x78 ; 'x'
0000000000001689         db  0xfe ; '.'
000000000000168a         db  0x20 ; ' '
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x1d ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x80 ; '.'
00000000000016a1         db  0xfe ; '.'
00000000000016a2         db  0x20 ; ' '
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x1e ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x88 ; '.'
00000000000016b9         db  0xfe ; '.'
00000000000016ba         db  0x20 ; ' '
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x1f ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x90 ; '.'
00000000000016d1         db  0xfe ; '.'
00000000000016d2         db  0x20 ; ' '
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x20 ; ' '
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x98 ; '.'
00000000000016e9         db  0xfe ; '.'
00000000000016ea         db  0x20 ; ' '
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x21 ; '!'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xa0 ; '.'
0000000000001701         db  0xfe ; '.'
0000000000001702         db  0x20 ; ' '
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x22 ; '"'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0xa8 ; '.'
0000000000001719         db  0xfe ; '.'
000000000000171a         db  0x20 ; ' '
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x23 ; '#'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0xb0 ; '.'
0000000000001731         db  0xfe ; '.'
0000000000001732         db  0x20 ; ' '
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x24 ; '$'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0xb8 ; '.'
0000000000001749         db  0xfe ; '.'
000000000000174a         db  0x20 ; ' '
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x25 ; '%'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0xc0 ; '.'
0000000000001761         db  0xfe ; '.'
0000000000001762         db  0x20 ; ' '
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x27 ; '''
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0xc8 ; '.'
0000000000001779         db  0xfe ; '.'
000000000000177a         db  0x20 ; ' '
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x28 ; '('
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0xd0 ; '.'
0000000000001791         db  0xfe ; '.'
0000000000001792         db  0x20 ; ' '
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x29 ; ')'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0xd8 ; '.'
00000000000017a9         db  0xfe ; '.'
00000000000017aa         db  0x20 ; ' '
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x2a ; '*'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0xe0 ; '.'
00000000000017c1         db  0xfe ; '.'
00000000000017c2         db  0x20 ; ' '
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x2c ; ','
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0xe8 ; '.'
00000000000017d9         db  0xfe ; '.'
00000000000017da         db  0x20 ; ' '
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x2d ; '-'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0xf0 ; '.'
00000000000017f1         db  0xfe ; '.'
00000000000017f2         db  0x20 ; ' '
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x2e ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0xf8 ; '.'
0000000000001809         db  0xfe ; '.'
000000000000180a         db  0x20 ; ' '
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x2f ; '/'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0xff ; '.'
0000000000001822         db  0x20 ; ' '
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x30 ; '0'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x08 ; '.'
0000000000001839         db  0xff ; '.'
000000000000183a         db  0x20 ; ' '
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x07 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x31 ; '1'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x00 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x10 ; '.'
0000000000001851         db  0xff ; '.'
0000000000001852         db  0x20 ; ' '
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x07 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x32 ; '2'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x00 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x18 ; '.'
0000000000001869         db  0xff ; '.'
000000000000186a         db  0x20 ; ' '
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x07 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x33 ; '3'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x00 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x20 ; ' '
0000000000001881         db  0xff ; '.'
0000000000001882         db  0x20 ; ' '
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x07 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x34 ; '4'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x28 ; '('
0000000000001899         db  0xff ; '.'
000000000000189a         db  0x20 ; ' '
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x07 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x35 ; '5'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x00 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x30 ; '0'
00000000000018b1         db  0xff ; '.'
00000000000018b2         db  0x20 ; ' '
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x07 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x36 ; '6'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x00 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x38 ; '8'
00000000000018c9         db  0xff ; '.'
00000000000018ca         db  0x20 ; ' '
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x07 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x37 ; '7'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x40 ; '@'
00000000000018e1         db  0xff ; '.'
00000000000018e2         db  0x20 ; ' '
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x07 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x38 ; '8'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x48 ; 'H'
00000000000018f9         db  0xff ; '.'
00000000000018fa         db  0x20 ; ' '
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x07 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x39 ; '9'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x50 ; 'P'
0000000000001911         db  0xff ; '.'
0000000000001912         db  0x20 ; ' '
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x07 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x3a ; ':'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x58 ; 'X'
0000000000001929         db  0xff ; '.'
000000000000192a         db  0x20 ; ' '
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x07 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x3b ; ';'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x60 ; '`'
0000000000001941         db  0xff ; '.'
0000000000001942         db  0x20 ; ' '
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x07 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x3c ; '<'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x68 ; 'h'
0000000000001959         db  0xff ; '.'
000000000000195a         db  0x20 ; ' '
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x07 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x3d ; '='
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0x70 ; 'p'
0000000000001971         db  0xff ; '.'
0000000000001972         db  0x20 ; ' '
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x07 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x3e ; '>'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x00 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x78 ; 'x'
0000000000001989         db  0xff ; '.'
000000000000198a         db  0x20 ; ' '
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x07 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x3f ; '?'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x00 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0x80 ; '.'
00000000000019a1         db  0xff ; '.'
00000000000019a2         db  0x20 ; ' '
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x07 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x40 ; '@'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x00 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0x88 ; '.'
00000000000019b9         db  0xff ; '.'
00000000000019ba         db  0x20 ; ' '
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x07 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x41 ; 'A'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x00 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0x90 ; '.'
00000000000019d1         db  0xff ; '.'
00000000000019d2         db  0x20 ; ' '
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x07 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x42 ; 'B'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x00 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0x98 ; '.'
00000000000019e9         db  0xff ; '.'
00000000000019ea         db  0x20 ; ' '
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0x07 ; '.'
00000000000019f1         db  0x00 ; '.'
00000000000019f2         db  0x00 ; '.'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x43 ; 'C'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x00 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x00 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0xa0 ; '.'
0000000000001a01         db  0xff ; '.'
0000000000001a02         db  0x20 ; ' '
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0x07 ; '.'
0000000000001a09         db  0x00 ; '.'
0000000000001a0a         db  0x00 ; '.'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x44 ; 'D'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x00 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x00 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0xa8 ; '.'
0000000000001a19         db  0xff ; '.'
0000000000001a1a         db  0x20 ; ' '
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0x07 ; '.'
0000000000001a21         db  0x00 ; '.'
0000000000001a22         db  0x00 ; '.'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x45 ; 'E'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x00 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x00 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0xb0 ; '.'
0000000000001a31         db  0xff ; '.'
0000000000001a32         db  0x20 ; ' '
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0x07 ; '.'
0000000000001a39         db  0x00 ; '.'
0000000000001a3a         db  0x00 ; '.'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x47 ; 'G'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x00 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x00 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0xb8 ; '.'
0000000000001a49         db  0xff ; '.'
0000000000001a4a         db  0x20 ; ' '
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0x07 ; '.'
0000000000001a51         db  0x00 ; '.'
0000000000001a52         db  0x00 ; '.'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x48 ; 'H'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x00 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x00 ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0xc0 ; '.'
0000000000001a61         db  0xff ; '.'
0000000000001a62         db  0x20 ; ' '
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0x07 ; '.'
0000000000001a69         db  0x00 ; '.'
0000000000001a6a         db  0x00 ; '.'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x49 ; 'I'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x00 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x00 ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0xc8 ; '.'
0000000000001a79         db  0xff ; '.'
0000000000001a7a         db  0x20 ; ' '
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0x07 ; '.'
0000000000001a81         db  0x00 ; '.'
0000000000001a82         db  0x00 ; '.'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x4a ; 'J'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x00 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x00 ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0xd0 ; '.'
0000000000001a91         db  0xff ; '.'
0000000000001a92         db  0x20 ; ' '
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0x07 ; '.'
0000000000001a99         db  0x00 ; '.'
0000000000001a9a         db  0x00 ; '.'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x4c ; 'L'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x00 ; '.'
0000000000001aa1         db  0x00 ; '.'
0000000000001aa2         db  0x00 ; '.'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x00 ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1aa8; 0x1abf[ (23 bytes)
        ; File offset : [6824; 6847[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001aa8         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001aac         mov        rax, qword [qword_20ffe8]                   ; qword_20ffe8
0000000000001ab3         test       rax, rax
0000000000001ab6         je         loc_1aba

0000000000001ab8         call       rax

                     loc_1aba:
0000000000001aba         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001abe         ret
                        ; endp
0000000000001abf         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1ac0; 0x1f40[ (1152 bytes)
        ; File offset : [6848; 8000[ (1152 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1ac0:
0000000000001ac0         push       qword [qword_20fd90]                        ; Begin of unwind block (FDE at 0xd914), qword_20fd90, CODE XREF=sub_1ad6+5
0000000000001ac6         jmp        qword [qword_20fd90+8]                      ; 0x20fd98
                        ; endp
0000000000001acc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000001ad0         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=posix2_version+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x0
0000000000001adb         jmp        loc_1ac0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_raise:        // raise
0000000000001ae0         jmp        qword [raise@GOT]                           ; raise, raise@GOT, CODE XREF=main+10486
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x1
0000000000001aeb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001af0         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+3343, main+3407, main+6807, main+6943, hash_initialize+245, hash_free+132, hash_free+180, hash_free+197, hash_free+209, hash_rehash+376, hash_rehash+500
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x2
0000000000001afb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001b00         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=safe_hasher+29, hash_get_first+60, hash_rehash+569, hash_insert_if_absent+477, set_program_name+154, sub_89b0+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x3
0000000000001b0b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001b10         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1505, main+2573, main+3507, main+4214, main+4281, main+4884, main+4973, main+6237, main+6272, main+6559, main+6768
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x4
0000000000001b1b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001b20         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+892, usage+1085, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x5
0000000000001b2b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001b30         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x6
0000000000001b3b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001b40         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x7
0000000000001b4b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
0000000000001b50         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=main+2475
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x8
0000000000001b5b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtod:        // strtod
0000000000001b60         jmp        qword [strtod@GOT]                          ; strtod, strtod@GOT, CODE XREF=cl_strtod+37
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x9
0000000000001b6b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001b70         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0xa
0000000000001b7b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clearerr_unlocked:        // clearerr_unlocked
0000000000001b80         jmp        qword [clearerr_unlocked@GOT]               ; clearerr_unlocked, clearerr_unlocked@GOT, CODE XREF=xwrite_stdout.part.10+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0xb
0000000000001b8b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001b90         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+104
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0xc
0000000000001b9b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtod_l:        // strtod_l
0000000000001ba0         jmp        qword [strtod_l@GOT]                        ; strtod_l, strtod_l@GOT, CODE XREF=c_strtod+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0xd
0000000000001bab         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001bb0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0xe
0000000000001bbb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001bc0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+92
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0xf
0000000000001bcb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001bd0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+614, main+783, main+907, main+1062, main+1402, main+1529, main+2374, main+2434, main+2502, main+2665, main+3499
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x10
0000000000001bdb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001be0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x11
0000000000001beb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001bf0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=argmatch+33, argmatch+174, base_len+4, quotearg_buffer_restyled+343, sub_89b0+411, sub_89b0+1742, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x12
0000000000001bfb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000001c00         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=main+7509, recheck+1128, recheck+1280, recheck+1493
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x13
0000000000001c0b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001c10         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+10476, start_lines+305, dump_remainder+261, start_bytes+243, xlseek+198, file_lines+592, check_fspec+450, fremote+1767, recheck+1574, cl_strtod+174, open_safer+105
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x14
0000000000001c1b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001c20         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+262
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x15
0000000000001c2b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001c30         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x16
0000000000001c3b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001c40         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x17
0000000000001c4b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fdelt_chk:        // __fdelt_chk
0000000000001c50         jmp        qword [__fdelt_chk@GOT]                     ; __fdelt_chk, __fdelt_chk@GOT, CODE XREF=main+8727
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x18
0000000000001c5b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_newlocale:        // newlocale
0000000000001c60         jmp        qword [newlocale@GOT]                       ; newlocale, newlocale@GOT, CODE XREF=c_strtod+94
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x19
0000000000001c6b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nanosleep:        // nanosleep
0000000000001c70         jmp        qword [nanosleep@GOT]                       ; nanosleep, nanosleep@GOT, CODE XREF=rpl_nanosleep+111, rpl_nanosleep+146
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x1a
0000000000001c7b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001c80         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x1b
0000000000001c8b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001c90         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x1c
0000000000001c9b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001ca0         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=main+2243, main+7070, main+7098, main+7269, xlseek+34, rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x1d
0000000000001cab         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001cb0         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=main+10461, recheck+1605, recheck+1658, xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x1e
0000000000001cbb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001cc0         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x1f
0000000000001ccb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001cd0         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x20
0000000000001cdb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001ce0         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=main+3448, main+4871, main+6613, close_fd+17, fd_safer+38, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x21
0000000000001ceb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000001cf0         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=main+3079, main+5176, start_lines+129
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x22
0000000000001cfb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_read:        // read
0000000000001d00         jmp        qword [read@GOT]                            ; read, read@GOT, CODE XREF=safe_read+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x23
0000000000001d0b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001d10         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x24
0000000000001d1b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001d20         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+196, usage+233, usage+270, usage+307, usage+388, usage+425, usage+462, usage+499, usage+536, usage+573, usage+617
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x25
0000000000001d2b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001d30         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=hash_initialize+177, hash_rehash+198, xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x26
0000000000001d3b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001d40         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+2319, main+4626, main+4794, main+9211
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x27
0000000000001d4b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
0000000000001d50         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=posix2_version+91
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x28
0000000000001d5b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001d60         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=main+3190, main+4147, mdir_name+53, xmemdup+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x29
0000000000001d6b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_kill:        // kill
0000000000001d70         jmp        qword [kill@GOT]                            ; kill, kill@GOT, CODE XREF=main+1496, main+6755, main+8647
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x2a
0000000000001d7b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_inotify_init:        // inotify_init
0000000000001d80         jmp        qword [inotify_init@GOT]                    ; inotify_init, inotify_init@GOT, CODE XREF=main+7683
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x2b
0000000000001d8b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001d90         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x2c
0000000000001d9b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_select:        // select
0000000000001da0         jmp        qword [select@GOT]                          ; select, select@GOT, CODE XREF=main+6146, main+8801
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x2d
0000000000001dab         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
0000000000001db0         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=main+8413
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x2e
0000000000001dbb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001dc0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=mdir_name+31, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517, xmalloc+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x2f
0000000000001dcb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001dd0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0x30
0000000000001ddb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_inotify_add_watch:        // inotify_add_watch
0000000000001de0         jmp        qword [inotify_add_watch@GOT]               ; inotify_add_watch, inotify_add_watch@GOT, CODE XREF=main+7951, main+7991, main+9401
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de6:
0000000000001de6         push       0x31
0000000000001deb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001df0         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1df6:
0000000000001df6         push       0x32
0000000000001dfb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001e00         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=main+1756, main+2145, main+2817, main+3565, main+4717, main+5680, check_fspec+108, recheck+422
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e06:
0000000000001e06         push       0x33
0000000000001e0b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001e10         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e16:
0000000000001e16         push       0x34
0000000000001e1b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001e20         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=xwrite_stdout.part.10+24
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e26:
0000000000001e26         push       0x35
0000000000001e2b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001e30         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e36:
0000000000001e36         push       0x36
0000000000001e3b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001e40         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+73, usage+867, usage+1060, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e46:
0000000000001e46         push       0x37
0000000000001e4b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001e50         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=main+3278, main+5824, dump_remainder+155, usage+120, usage+159, usage+351, usage+855, usage+948, usage+1009, usage+1048, usage+1151
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e56:
0000000000001e56         push       0x38
0000000000001e5b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001e60         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+803, main+1543, main+2388, main+2448, main+2516, main+2683, main+3524, main+3884, main+4231, main+4298, main+4905
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e66:
0000000000001e66         push       0x39
0000000000001e6b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memrchr:        // memrchr
0000000000001e70         jmp        qword [memrchr@GOT]                         ; memrchr, memrchr@GOT, CODE XREF=file_lines+248
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e76:
0000000000001e76         push       0x3a
0000000000001e7b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001e80         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=open_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e86:
0000000000001e86         push       0x3b
0000000000001e8b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001e90         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e96:
0000000000001e96         push       0x3c
0000000000001e9b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fstatfs:        // fstatfs
0000000000001ea0         jmp        qword [fstatfs@GOT]                         ; fstatfs, fstatfs@GOT, CODE XREF=fremote+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ea6:
0000000000001ea6         push       0x3d
0000000000001eab         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001eb0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1eb6:
0000000000001eb6         push       0x3e
0000000000001ebb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001ec0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+572, main+10049, main+10496, xlseek+170, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ec6:
0000000000001ec6         push       0x3f
0000000000001ecb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001ed0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ed6:
0000000000001ed6         push       0x40
0000000000001edb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001ee0         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, argmatch_valid+122, argmatch_valid+198, hash_print_statistics+118, hash_print_statistics+143, hash_print_statistics+211, hash_print_statistics+246, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ee6:
0000000000001ee6         push       0x41
0000000000001eeb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush_unlocked:        // fflush_unlocked
0000000000001ef0         jmp        qword [fflush_unlocked@GOT]                 ; fflush_unlocked, fflush_unlocked@GOT, CODE XREF=main+6684, main+7706, check_fspec+205
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ef6:
0000000000001ef6         push       0x42
0000000000001efb         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001f00         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_89b0+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f06:
0000000000001f06         push       0x43
0000000000001f0b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001f10         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_89b0+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f16:
0000000000001f16         push       0x44
0000000000001f1b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_inotify_rm_watch:        // inotify_rm_watch
0000000000001f20         jmp        qword [inotify_rm_watch@GOT]                ; inotify_rm_watch, inotify_rm_watch@GOT, CODE XREF=main+8182, main+8198, main+9525, main+9833
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f26:
0000000000001f26         push       0x45
0000000000001f2b         jmp        0x1ac0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001f30         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_8750+51, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f36:
0000000000001f36         push       0x46
0000000000001f3b         jmp        0x1ac0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1f40; 0x1f48[ (8 bytes)
        ; File offset : [8000; 8008[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20fff8:        // qword_20fff8
0000000000001f40         jmp        qword [qword_20fff8]                        ; qword, End of unwind block (FDE at 0xd914), Begin of unwind block (FDE at 0xd93c), qword_20fff8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001f46         align      8
0000000000001f48         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xd93c)
0000000000001f49         db  0x00 ; '.'
0000000000001f4a         db  0x00 ; '.'
0000000000001f4b         db  0x00 ; '.'
0000000000001f4c         db  0x00 ; '.'
0000000000001f4d         db  0x00 ; '.'
0000000000001f4e         db  0x00 ; '.'
0000000000001f4f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1f50; 0xb5ee[ (38558 bytes)
        ; File offset : [8016; 46574[ (38558 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_150: int32_t, -336
        ;    var_168: int8_t, -360
        ;    var_1E8: int64_t, -488
        ;    var_204: int32_t, -516
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616
        ;    var_26C: int32_t, -620
        ;    var_26D: int8_t, -621
        ;    var_278: int64_t, -632
        ;    var_280: int64_t, -640
        ;    var_288: int64_t, -648
        ;    var_290: int64_t, -656
        ;    var_298: int64_t, -664
        ;    var_2A0: int64_t, -672
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B4: int32_t, -692
        ;    var_2C0: int64_t, -704
        ;    var_2C8: int64_t, -712
        ;    var_2D0: int64_t, -720
        ;    var_2D8: int64_t, -728
        ;    var_2E0: int64_t, -736
        ;    var_2E8: int64_t, -744
        ;    var_2F0: int64_t, -752
        ;    var_2F8: int64_t, -760


                     main:
0000000000001f50         push       r15                                         ; Begin of unwind block (FDE at 0xdc5c), DATA XREF=_start+29
0000000000001f52         push       r14
0000000000001f54         push       r13
0000000000001f56         push       r12
0000000000001f58         push       rbp
0000000000001f59         push       rbx
0000000000001f5a         mov        ebx, edi
0000000000001f5c         mov        rbp, rsi
0000000000001f5f         sub        rsp, 0x2c8
0000000000001f66         mov        rdi, qword [rsi]                            ; argument #1 for method set_program_name
0000000000001f69         mov        rax, qword [fs:0x28]
0000000000001f72         mov        qword [rsp+0x2f8+var_40], rax
0000000000001f7a         xor        eax, eax
0000000000001f7c         mov        qword [rsp+0x2f8+var_268], 0xa
0000000000001f88         call       set_program_name                            ; set_program_name
0000000000001f8d         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xd001
0000000000001f94         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001f99         call       j_setlocale                                 ; setlocale
0000000000001f9e         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001fa5         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001fac         call       j_bindtextdomain                            ; bindtextdomain
0000000000001fb1         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001fb8         call       j_textdomain                                ; textdomain
0000000000001fbd         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001fc4         call       atexit                                      ; atexit
0000000000001fc9         cmp        ebx, 0x2
0000000000001fcc         mov        byte [have_read_stdin], 0x0                 ; have_read_stdin
0000000000001fd3         mov        byte [count_lines], 0x1                     ; count_lines
0000000000001fda         mov        byte [print_headers], 0x0                   ; print_headers
0000000000001fe1         mov        byte [from_start], 0x0                      ; from_start
0000000000001fe8         mov        byte [forever], 0x0                         ; forever
0000000000001fef         mov        byte [line_end], 0xa                        ; line_end
0000000000001ff6         je         loc_23c9

0000000000001ffc         cmp        ebx, 0x3
0000000000001fff         je         loc_23bc                                    ; DATA XREF=main+3110, main+4127, file_lines+104

0000000000002005         cmp        ebx, 0x4
0000000000002008         je         loc_2854

                     loc_200e:
000000000000200e         xor        eax, eax                                    ; CODE XREF=main+1179, main+1206, main+1311, main+2303, main+2332

                     loc_2010:
0000000000002010         movsd      xmm2, qword [double_c960]                   ; double_c960, CODE XREF=main+1388, DATA XREF=loc_2ebd, main+3962, loc_330c, start_bytes+8, start_bytes+157
0000000000002018         movzx      edx, al                                     ; DATA XREF=loc_2a8d, main+2887, loc_2c2f
000000000000201b         lea        r15, qword [rsp+0x2f8+var_248]
0000000000002023         lea        r12, qword [rbp+rax*8]
0000000000002028         sub        ebx, edx                                    ; DATA XREF=start_lines+10, start_lines+187, dump_remainder+21, dump_remainder+243
000000000000202a         xor        ebp, ebp
000000000000202c         movsd      qword [rsp+0x2f8+var_2C8], xmm2
0000000000002032         mov        r14d, 0x1
0000000000002038         nop        dword [rax+rax]                             ; DATA XREF=file_lines+10, file_lines+380

                     loc_2040:
0000000000002040         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=main+340, main+402, main+462, main+589, main+660, main+679, main+748, main+821, main+954, main+1038, main+1105
0000000000002047         lea        rdx, qword [aCnffqsvz012345]                ; argument "__shortopts" for method j_getopt_long, "c:n:fFqs:vz0123456789"
000000000000204e         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000002051         mov        rsi, r12                                    ; argument "___argv" for method j_getopt_long
0000000000002054         mov        edi, ebx                                    ; argument "___argc" for method j_getopt_long
0000000000002056         call       j_getopt_long                               ; getopt_long
000000000000205b         cmp        eax, 0xffffffff
000000000000205e         je         loc_24f2

0000000000002064         cmp        eax, 0x71
0000000000002067         je         loc_2198

000000000000206d         jle        loc_20b0

000000000000206f         cmp        eax, 0x81
0000000000002074         je         loc_21a8

000000000000207a         jg         loc_20f0

000000000000207c         cmp        eax, 0x76
000000000000207f         je         loc_2280

0000000000002085         jle        loc_2200

000000000000208b         cmp        eax, 0x7a
000000000000208e         je         loc_21f0

0000000000002094         add        eax, 0xffffff80
0000000000002097         jne        loc_3c71

000000000000209d         mov        byte [reopen_inaccessible_files], 0x1       ; reopen_inaccessible_files
00000000000020a4         jmp        loc_2040
00000000000020a6         align      16

                     loc_20b0:
00000000000020b0         cmp        eax, 0x39                                   ; CODE XREF=main+285
00000000000020b3         jle        loc_2128

00000000000020b5         cmp        eax, 0x63
00000000000020b8         je         loc_229e

00000000000020be         jg         loc_2290

00000000000020c4         cmp        eax, 0x46
00000000000020c7         jne        loc_3c71

00000000000020cd         mov        byte [forever], 0x1                         ; forever
00000000000020d4         mov        dword [follow_mode], r14d                   ; follow_mode
00000000000020db         mov        byte [reopen_inaccessible_files], 0x1       ; reopen_inaccessible_files
00000000000020e2         jmp        loc_2040
00000000000020e7         align      16

                     loc_20f0:
00000000000020f0         cmp        eax, 0x83                                   ; CODE XREF=main+298
00000000000020f5         je         loc_23b0

00000000000020fb         jl         loc_2368

0000000000002101         cmp        eax, 0x84
0000000000002106         je         loc_2310

000000000000210c         cmp        eax, 0x85
0000000000002111         jne        loc_3c71

0000000000002117         mov        byte [disable_inotify], 0x1                 ; disable_inotify
000000000000211e         jmp        loc_2040
0000000000002123         align      8

                     loc_2128:
0000000000002128         cmp        eax, 0x30                                   ; CODE XREF=main+355
000000000000212b         mov        r13d, eax
000000000000212e         jge        loc_3c4a

0000000000002134         cmp        eax, 0xffffff7d
0000000000002139         jne        loc_3c3c

000000000000213f         lea        rax, qword [aJimMeyering]                   ; "Jim Meyering"
0000000000002146         sub        rsp, 0x8
000000000000214a         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument #1 for method version_etc, stdout@@GLIBC_2.2.5
0000000000002151         push       0x0
0000000000002153         mov        rcx, qword [Version]                        ; argument #4 for method version_etc, Version
000000000000215a         lea        r9, qword [aDavidMackenzie]                 ; argument #6 for method version_etc, "David MacKenzie"
0000000000002161         push       rax
0000000000002162         lea        rax, qword [aIanLanceTaylor]                ; "Ian Lance Taylor"
0000000000002169         lea        r8, qword [aPaulRubin]                      ; argument #5 for method version_etc, "Paul Rubin"
0000000000002170         lea        rdx, qword [aNsOnlineHelpSn+23]             ; argument #3 for method version_etc, 0xb7a7
0000000000002177         lea        rsi, qword [aSHasBecomeAcce+25]             ; argument #2 for method version_etc, 0xb72c
000000000000217e         push       rax                                         ; argument #7 for method version_etc
000000000000217f         xor        eax, eax
0000000000002181         call       version_etc                                 ; version_etc
0000000000002186         add        rsp, 0x20
000000000000218a         xor        edi, edi                                    ; argument "__status" for method j_exit
000000000000218c         call       j_exit                                      ; exit
                        ; endp
0000000000002191         align      8

                     loc_2198:
0000000000002198         mov        ebp, 0x2                                    ; CODE XREF=main+279
000000000000219d         jmp        loc_2040
00000000000021a2         align      8

                     loc_21a8:
00000000000021a8         lea        rsi, qword [aInvalidMaximum]                ; argument "msgid" for method j_dcgettext, "invalid maximum number of unchanged stats between opens", CODE XREF=main+292
00000000000021af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000021b4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000021b6         call       j_dcgettext                                 ; dcgettext
00000000000021bb         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000021c2         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0xd001
00000000000021c9         mov        r8, rax
00000000000021cc         xor        r9d, r9d
00000000000021cf         mov        rdx, 0xffffffffffffffff
00000000000021d6         xor        esi, esi
00000000000021d8         call       xdectoumax                                  ; xdectoumax
00000000000021dd         mov        qword [max_n_unchanged_stats_between_opens], rax ; max_n_unchanged_stats_between_opens
00000000000021e4         jmp        loc_2040
00000000000021e9         align      16

                     loc_21f0:
00000000000021f0         mov        byte [line_end], 0x0                        ; line_end, CODE XREF=main+318
00000000000021f7         jmp        loc_2040
00000000000021fc         align      512

                     loc_2200:
0000000000002200         cmp        eax, 0x73                                   ; CODE XREF=main+309
0000000000002203         jne        loc_3c71

0000000000002209         lea        rcx, qword [cl_strtod]                      ; cl_strtod
0000000000002210         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002217         xor        esi, esi
0000000000002219         mov        rdx, r15
000000000000221c         call       xstrtod                                     ; xstrtod
0000000000002221         test       al, al
0000000000002223         je         loc_2242

0000000000002225         pxor       xmm3, xmm3
0000000000002229         movsd      xmm1, qword [rsp+0x2f8+var_248]
0000000000002232         ucomisd    xmm1, xmm3
0000000000002236         movsd      qword [rsp+0x2f8+var_2C8], xmm1
000000000000223c         jae        loc_2040

                     loc_2242:
0000000000002242         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+723
0000000000002249         call       quote                                       ; quote
000000000000224e         lea        rsi, qword [aInvalidNumberO]                ; argument "msgid" for method j_dcgettext, "invalid number of seconds: %s"
0000000000002255         mov        rbx, rax
0000000000002258         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000225d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000225f         call       j_dcgettext                                 ; dcgettext
0000000000002264         mov        rcx, rbx
0000000000002267         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000226a         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000226c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002271         xor        eax, eax
0000000000002273         call       j_error                                     ; error
0000000000002278         nop        dword [rax+rax]

                     loc_2280:
0000000000002280         mov        ebp, 0x1                                    ; CODE XREF=main+303
0000000000002285         jmp        loc_2040
000000000000228a         align      16

                     loc_2290:
0000000000002290         cmp        eax, 0x66                                   ; CODE XREF=main+366
0000000000002293         je         loc_2310

0000000000002295         cmp        eax, 0x6e
0000000000002298         jne        loc_3c71

                     loc_229e:
000000000000229e         mov        rcx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+360
00000000000022a5         cmp        eax, 0x6e
00000000000022a8         sete       byte [count_lines]                          ; count_lines
00000000000022af         movzx      edx, byte [rcx]
00000000000022b2         cmp        dl, 0x2b
00000000000022b5         je         loc_24e6

00000000000022bb         cmp        dl, 0x2d
00000000000022be         je         loc_2871

                     loc_22c4:
00000000000022c4         cmp        eax, 0x6e                                   ; CODE XREF=main+1437, main+2348
00000000000022c7         mov        edx, 0x5
00000000000022cc         je         loc_24c1

00000000000022d2         lea        rsi, qword [aInvalidNumberO_b821]           ; argument "msgid" for method j_dcgettext, "invalid number of bytes"
00000000000022d9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000022db         call       j_dcgettext                                 ; dcgettext
00000000000022e0         mov        r8, rax

                     loc_22e3:
00000000000022e3         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+1410
00000000000022ea         lea        rcx, qword [aBkkmmgtpezy0]                  ; "bkKmMGTPEZY0"
00000000000022f1         xor        r9d, r9d
00000000000022f4         mov        rdx, 0xffffffffffffffff
00000000000022fb         xor        esi, esi
00000000000022fd         call       xdectoumax                                  ; xdectoumax
0000000000002302         mov        qword [rsp+0x2f8+var_268], rax
000000000000230a         jmp        loc_2040
000000000000230f         align      16

                     loc_2310:
0000000000002310         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+438, main+835
0000000000002317         mov        byte [forever], 0x1                         ; forever
000000000000231e         test       rsi, rsi
0000000000002321         je         loc_24d7

0000000000002327         mov        r9, qword [argmatch_die]                    ; argmatch_die
000000000000232e         lea        rdx, qword [follow_mode_string]             ; follow_mode_string
0000000000002335         lea        rcx, qword [follow_mode_map]                ; follow_mode_map
000000000000233c         lea        rdi, qword [aFollow]                        ; "--follow"
0000000000002343         mov        r8d, 0x4
0000000000002349         call       __xargmatch_internal                        ; __xargmatch_internal
000000000000234e         lea        rdx, qword [follow_mode_map]                ; follow_mode_map
0000000000002355         mov        eax, dword [rdx+rax*4]
0000000000002358         mov        dword [follow_mode], eax                    ; follow_mode
000000000000235e         jmp        loc_2040
0000000000002363         align      8

                     loc_2368:
0000000000002368         lea        rsi, qword [aInvalidPid]                    ; argument "msgid" for method j_dcgettext, "invalid PID", CODE XREF=main+427
000000000000236f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002374         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002376         call       j_dcgettext                                 ; dcgettext
000000000000237b         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002382         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0xd001
0000000000002389         mov        r8, rax
000000000000238c         xor        r9d, r9d
000000000000238f         mov        edx, 0x7fffffff
0000000000002394         xor        esi, esi
0000000000002396         call       xdectoumax                                  ; xdectoumax
000000000000239b         mov        dword [pid], eax                            ; pid
00000000000023a1         jmp        loc_2040
00000000000023a6         align      16

                     loc_23b0:
00000000000023b0         mov        byte [presume_input_pipe], 0x1              ; presume_input_pipe, CODE XREF=main+421
00000000000023b7         jmp        loc_2040

                     loc_23bc:
00000000000023bc         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=main+175
00000000000023c0         cmp        byte [rdi], 0x2d
00000000000023c3         je         loc_28ea

                     loc_23c9:
00000000000023c9         call       posix2_version                              ; posix2_version, CODE XREF=main+166, main+2326, main+2468
00000000000023ce         mov        rdx, qword [rbp+8]
00000000000023d2         lea        esi, dword [rax-0x30db0]
00000000000023d8         movzx      ecx, byte [rdx]
00000000000023db         lea        rdi, qword [rdx+1]
00000000000023df         cmp        cl, 0x2b
00000000000023e2         je         loc_283d

00000000000023e8         cmp        cl, 0x2d
00000000000023eb         jne        loc_200e

00000000000023f1         cmp        eax, 0x30daf
00000000000023f6         jle        loc_240c

00000000000023f8         xor        eax, eax
00000000000023fa         cmp        byte [rdx+1], 0x63
00000000000023fe         sete       al
0000000000002401         cmp        byte [rdx+rax+1], 0x0
0000000000002406         je         loc_200e

                     loc_240c:
000000000000240c         xor        r12d, r12d                                  ; CODE XREF=main+1190

                     loc_240f:
000000000000240f         movsx      eax, byte [rdx+1]                           ; CODE XREF=main+2297
0000000000002413         mov        rdx, rdi
0000000000002416         mov        ecx, eax
0000000000002418         sub        eax, 0x30
000000000000241b         cmp        eax, 0x9
000000000000241e         ja         loc_2431

                     loc_2420:
0000000000002420         add        rdx, 0x1                                    ; CODE XREF=main+1247
0000000000002424         movsx      eax, byte [rdx]
0000000000002427         mov        ecx, eax
0000000000002429         sub        eax, 0x30
000000000000242c         cmp        eax, 0x9
000000000000242f         jbe        loc_2420

                     loc_2431:
0000000000002431         cmp        cl, 0x63                                    ; CODE XREF=main+1230
0000000000002434         je         loc_32b3

000000000000243a         cmp        cl, 0x6c
000000000000243d         je         loc_32a6

0000000000002443         cmp        cl, 0x62
0000000000002446         je         loc_3286

000000000000244c         mov        rax, rdx
000000000000244f         mov        r14d, 0x1
0000000000002455         mov        ecx, 0xa

                     loc_245a:
000000000000245a         xor        r13d, r13d                                  ; CODE XREF=main+4930
000000000000245d         cmp        byte [rax], 0x66
0000000000002460         jne        loc_246c

0000000000002462         add        rax, 0x1
0000000000002466         mov        r13d, 0x1

                     loc_246c:
000000000000246c         cmp        byte [rax], 0x0                             ; CODE XREF=main+1296
000000000000246f         jne        loc_200e

0000000000002475         cmp        rdi, rdx
0000000000002478         je         loc_3297                                    ; DATA XREF=fremote+1324

000000000000247e         lea        rcx, qword [rsp+0x2f8+var_268]
0000000000002486         lea        r8, qword [aUsrlocalsharel+27]              ; 0xb7f1
000000000000248d         xor        esi, esi
000000000000248f         mov        edx, 0xa
0000000000002494         call       xstrtoumax                                  ; xstrtoumax
0000000000002499         and        eax, 0xfffffffd
000000000000249c         jne        loc_4714

                     loc_24a2:
00000000000024a2         mov        byte [from_start], r12b                     ; from_start, CODE XREF=main+4945
00000000000024a9         mov        byte [count_lines], r14b                    ; count_lines
00000000000024b0         mov        eax, 0x1
00000000000024b5         mov        byte [forever], r13b                        ; forever
00000000000024bc         jmp        loc_2010

                     loc_24c1:
00000000000024c1         lea        rsi, qword [aInvalidNumberO_b809]           ; argument "msgid" for method j_dcgettext, "invalid number of lines", CODE XREF=main+892
00000000000024c8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024ca         call       j_dcgettext                                 ; dcgettext
00000000000024cf         mov        r8, rax
00000000000024d2         jmp        loc_22e3

                     loc_24d7:
00000000000024d7         mov        dword [follow_mode], 0x2                    ; follow_mode, CODE XREF=main+977
00000000000024e1         jmp        loc_2040

                     loc_24e6:
00000000000024e6         mov        byte [from_start], 0x1                      ; from_start, CODE XREF=main+869
00000000000024ed         jmp        loc_22c4

                     loc_24f2:
00000000000024f2         cmp        byte [reopen_inaccessible_files], 0x0       ; reopen_inaccessible_files, CODE XREF=main+270
00000000000024f9         mov        r13d, eax
00000000000024fc         je         loc_28a9

0000000000002502         cmp        byte [forever], 0x0                         ; forever
0000000000002509         je         loc_2881

000000000000250f         cmp        dword [follow_mode], 0x2                    ; follow_mode
0000000000002516         je         loc_3b70

000000000000251c         mov        edi, dword [pid]                            ; pid
0000000000002522         test       edi, edi
0000000000002524         je         loc_2566

                     loc_2526:
0000000000002526         xor        esi, esi                                    ; argument "__sig" for method j_kill, CODE XREF=main+2414
0000000000002528         call       j_kill                                      ; kill
000000000000252d         test       eax, eax
000000000000252f         je         loc_2566

0000000000002531         call       j___errno_location                          ; __errno_location
0000000000002536         cmp        dword [rax], 0x26
0000000000002539         jne        loc_2566

000000000000253b         lea        rsi, qword [aWarningPidpidI]                ; argument "msgid" for method j_dcgettext, "warning: --pid=PID is not supported on this system"
0000000000002542         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002547         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002549         call       j_dcgettext                                 ; dcgettext
000000000000254e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002550         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002553         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002555         xor        eax, eax
0000000000002557         call       j_error                                     ; error
000000000000255c         mov        dword [pid], 0x0                            ; pid

                     loc_2566:
0000000000002566         cmp        byte [from_start], 0x0                      ; from_start, CODE XREF=main+1492, main+1503, main+1513, main+2401, main+2453
000000000000256d         je         loc_2588

000000000000256f         mov        rax, qword [rsp+0x2f8+var_268]
0000000000002577         test       rax, rax
000000000000257a         je         loc_2588

000000000000257c         sub        rax, 0x1
0000000000002580         mov        qword [rsp+0x2f8+var_268], rax

                     loc_2588:
0000000000002588         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1565, main+1578
000000000000258f         cmp        ebx, eax
0000000000002591         jg         loc_312e

0000000000002597         lea        rbx, qword [dummy_stdin.7874]               ; dummy_stdin.7874
000000000000259e         mov        qword [rsp+0x2f8+var_2F8], 0x1

                     loc_25a6:
00000000000025a6         mov        r10, qword [rsp+0x2f8+var_2F8]              ; CODE XREF=main+4587
00000000000025aa         xor        r8d, r8d
00000000000025ad         xor        eax, eax
00000000000025af         mov        r9d, 0x1
00000000000025b5         nop        dword [rax]

                     loc_25b8:
00000000000025b8         mov        rsi, qword [rbx+rax*8]                      ; CODE XREF=main+1677
00000000000025bc         lea        rdi, qword [aUsrlocalsharel+25]             ; 0xb7ef
00000000000025c3         mov        ecx, 0x2
00000000000025c8         rep  cmpsb byte [rsi], byte [rdi]
00000000000025ca         seta       dl
00000000000025cd         sbb        dl, 0x0
00000000000025d0         test       dl, dl
00000000000025d2         cmove      r8d, r9d
00000000000025d6         add        rax, 0x1
00000000000025da         cmp        rax, r10
00000000000025dd         jb         loc_25b8

00000000000025df         test       r8b, r8b
00000000000025e2         je         loc_2650

00000000000025e4         mov        eax, dword [follow_mode]                    ; follow_mode
00000000000025ea         cmp        eax, 0x1
00000000000025ed         je         loc_47d8

00000000000025f3         cmp        byte [forever], 0x0                         ; forever
00000000000025fa         je         loc_2650

00000000000025fc         cmp        dword [pid], 0x0                            ; pid
0000000000002603         jne        loc_28f9

0000000000002609         cmp        eax, 0x2
000000000000260c         jne        loc_28f9

0000000000002612         cmp        qword [rsp+0x2f8+var_2F8], 0x1
0000000000002617         jne        loc_28f9

000000000000261d         lea        rdx, qword [rsp+0x2f8+var_D8]               ; argument "__stat_buf" for method j___fxstat
0000000000002625         xor        esi, esi                                    ; argument "__fildes" for method j___fxstat
0000000000002627         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000262c         call       j___fxstat                                  ; __fxstat
0000000000002631         test       eax, eax
0000000000002633         jne        loc_28f9

0000000000002639         mov        eax, dword [rsp+0x2f8+var_C0]
0000000000002640         and        eax, 0xf000
0000000000002645         cmp        eax, 0x8000
000000000000264a         je         loc_28f9

                     loc_2650:
0000000000002650         cmp        qword [rsp+0x2f8+var_268], 0x0              ; CODE XREF=main+1682, main+1706, main+2482, main+2521
0000000000002659         jne        loc_2671

000000000000265b         cmp        byte [forever], 0x0                         ; forever
0000000000002662         jne        loc_2671

0000000000002664         cmp        byte [from_start], 0x0                      ; from_start
000000000000266b         je         loc_3401

                     loc_2671:
0000000000002671         mov        edx, 0x60                                   ; CODE XREF=main+1801, main+1810
0000000000002676         xor        ecx, ecx
0000000000002678         mov        rax, rdx
000000000000267b         mul        qword [rsp+0x2f8+var_2F8]
000000000000267f         jo         loc_4832

                     loc_2685:
0000000000002685         test       rax, rax                                    ; CODE XREF=main+10471
0000000000002688         js         loc_44fb

000000000000268e         test       rcx, rcx
0000000000002691         jne        loc_44fb

0000000000002697         mov        r14, qword [rsp+0x2f8+var_2F8]
000000000000269b         imul       r15, r14, 0x60
000000000000269f         mov        rdi, r15                                    ; argument #1 for method xmalloc
00000000000026a2         mov        qword [rsp+0x2f8+var_298], r15
00000000000026a7         call       xmalloc                                     ; xmalloc
00000000000026ac         test       r14, r14
00000000000026af         mov        qword [rsp+0x2f8+var_2D0], rax
00000000000026b4         je         loc_3ac9

00000000000026ba         mov        rcx, r15
00000000000026bd         add        rcx, rax

                     loc_26c0:
00000000000026c0         mov        rdx, qword [rbx]                            ; CODE XREF=main+1922
00000000000026c3         add        rax, 0x60
00000000000026c7         add        rbx, 0x8
00000000000026cb         mov        qword [rax-0x60], rdx
00000000000026cf         cmp        rcx, rax
00000000000026d2         jne        loc_26c0

00000000000026d4         cmp        ebp, 0x1
00000000000026d7         je         loc_26e4

00000000000026d9         cmp        qword [rsp+0x2f8+var_2F8], 0x1
00000000000026de         jbe        loc_26f6

00000000000026e0         test       ebp, ebp
00000000000026e2         jne        loc_26f6

                     loc_26e4:
00000000000026e4         cmp        qword [rsp+0x2f8+var_2F8], 0x0              ; CODE XREF=main+1927, main+7036
00000000000026e9         mov        byte [print_headers], 0x1                   ; print_headers
00000000000026f0         je         loc_3ad2

                     loc_26f6:
00000000000026f6         lea        rax, qword [rsp+0x2f8+var_D8]               ; CODE XREF=main+1934, main+1938
00000000000026fe         mov        r15, qword [rsp+0x2f8+var_2D0]
0000000000002703         mov        qword [rsp+0x2f8+var_2E8], 0x0
000000000000270c         mov        byte [rsp+0x2f8+var_26D], 0x1
0000000000002714         mov        dword [rsp+0x2f8+var_288], r13d
0000000000002719         mov        qword [rsp+0x2f8+var_2A0], rax
000000000000271e         nop

                     loc_2720:
0000000000002720         mov        rax, qword [rsp+0x2f8+var_268]              ; CODE XREF=main+2724
0000000000002728         lea        rdi, qword [aUsrlocalsharel+25]             ; 0xb7ef
000000000000272f         mov        ecx, 0x2
0000000000002734         mov        qword [rsp+0x2f8+var_2D8], rax
0000000000002739         mov        rax, qword [r15]
000000000000273c         mov        rsi, rax
000000000000273f         rep  cmpsb byte [rsi], byte [rdi]
0000000000002741         seta       dl
0000000000002744         sbb        dl, 0x0
0000000000002747         movsx      esi, dl
000000000000274a         test       esi, esi
000000000000274c         mov        dword [rsp+0x2f8+var_2B4], esi
0000000000002750         jne        loc_292e

0000000000002756         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
000000000000275d         mov        dword [rsp+0x2f8+var_2F0], 0x0

                     loc_2765:
0000000000002765         mov        byte [r15+0x36], 0x1                        ; CODE XREF=main+4913

                     loc_276a:
000000000000276a         cmp        byte [print_headers], 0x0                   ; print_headers, CODE XREF=main+10371
0000000000002771         jne        loc_2bec

                     loc_2777:
0000000000002777         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7, CODE XREF=main+3290
000000000000277a         call       pretty_name.isra.7                          ; pretty_name.isra.7
000000000000277f         mov        qword [rsp+0x2f8+var_2B0], rax
0000000000002784         movzx      eax, byte [count_lines]                     ; count_lines
000000000000278b         mov        edi, 0x1
0000000000002790         mov        qword [rsp+0x2f8+var_248], 0x0
000000000000279c         mov        rdx, qword [rsp+0x2f8+var_2A0]
00000000000027a1         mov        esi, dword [rsp+0x2f8+var_2F0]
00000000000027a5         test       al, al
00000000000027a7         mov        byte [rsp+0x2f8+var_2E0], al
00000000000027ab         jne        loc_2a51

00000000000027b1         call       j___fxstat                                  ; __fxstat
00000000000027b6         test       eax, eax
00000000000027b8         jne        loc_2f9e

00000000000027be         movzx      eax, byte [from_start]                      ; from_start
00000000000027c5         mov        ecx, eax
00000000000027c7         mov        byte [rsp+0x2f8+var_2E0], al
00000000000027cb         movzx      eax, byte [presume_input_pipe]              ; presume_input_pipe
00000000000027d2         test       cl, cl
00000000000027d4         je         loc_2eb5

00000000000027da         test       al, al
00000000000027dc         jne        loc_3029

00000000000027e2         cmp        qword [rsp+0x2f8+var_2D8], 0x0
00000000000027e8         js         loc_3029

00000000000027ee         mov        eax, dword [rsp+0x2f8+var_C0]
00000000000027f5         and        eax, 0xf000
00000000000027fa         cmp        eax, 0x8000
00000000000027ff         je         loc_3408

                     loc_2805:
0000000000002805         mov        rsi, qword [rsp+0x2f8+var_2D8]              ; argument "__offset" for method j_lseek, CODE XREF=main+5337
000000000000280a         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument "__fd" for method j_lseek
000000000000280e         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000002813         call       j_lseek                                     ; lseek
0000000000002818         add        rax, 0x1
000000000000281c         je         loc_3029

                     loc_2822:
0000000000002822         mov        rax, qword [rsp+0x2f8+var_2D8]              ; CODE XREF=main+5331
0000000000002827         mov        qword [rsp+0x2f8+var_2D8], 0xffffffffffffffff
0000000000002830         add        qword [rsp+0x2f8+var_248], rax
0000000000002838         jmp        loc_3051

                     loc_283d:
000000000000283d         cmp        esi, 0x2b8                                  ; CODE XREF=main+1170
0000000000002843         mov        r12d, 0x1
0000000000002849         ja         loc_240f

000000000000284f         jmp        loc_200e

                     loc_2854:
0000000000002854         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=main+184

                     loc_2858:
0000000000002858         lea        rsi, qword [aUsrlocalsharel+24]             ; argument "__s2" for method j_strcmp, 0xb7ee, CODE XREF=main+2462
000000000000285f         call       j_strcmp                                    ; strcmp
0000000000002864         test       eax, eax
0000000000002866         je         loc_23c9

000000000000286c         jmp        loc_200e

                     loc_2871:
0000000000002871         add        rcx, 0x1                                    ; CODE XREF=main+878
0000000000002875         mov        qword [optarg@@GLIBC_2.2.5], rcx            ; optarg@@GLIBC_2.2.5
000000000000287c         jmp        loc_22c4

                     loc_2881:
0000000000002881         lea        rsi, qword [aWarningRetryIg]                ; "warning: --retry ignored; --retry is useful only when following", CODE XREF=main+1465
0000000000002888         mov        byte [reopen_inaccessible_files], 0x0       ; reopen_inaccessible_files
000000000000288f         mov        edx, 0x5

                     loc_2894:
0000000000002894         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+7212
0000000000002896         call       j_dcgettext                                 ; dcgettext
000000000000289b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000289d         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000028a0         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000028a2         xor        eax, eax
00000000000028a4         call       j_error                                     ; error

                     loc_28a9:
00000000000028a9         mov        edi, dword [pid]                            ; pid, CODE XREF=main+1452
00000000000028af         test       edi, edi
00000000000028b1         je         loc_2566

00000000000028b7         cmp        byte [forever], 0x0                         ; forever
00000000000028be         jne        loc_2526

00000000000028c4         lea        rsi, qword [aWarningPidIgno]                ; argument "msgid" for method j_dcgettext, "warning: PID ignored; --pid=PID is useful only when following"
00000000000028cb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000028cd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000028d2         call       j_dcgettext                                 ; dcgettext
00000000000028d7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000028d9         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000028dc         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000028de         xor        eax, eax
00000000000028e0         call       j_error                                     ; error
00000000000028e5         jmp        loc_2566

                     loc_28ea:
00000000000028ea         cmp        byte [rdi+1], 0x0                           ; CODE XREF=main+1139
00000000000028ee         jne        loc_2858

00000000000028f4         jmp        loc_23c9

                     loc_28f9:
00000000000028f9         xor        edi, edi                                    ; argument "__fd" for method j_isatty, CODE XREF=main+1715, main+1724, main+1735, main+1763, main+1786
00000000000028fb         call       j_isatty                                    ; isatty
0000000000002900         test       eax, eax
0000000000002902         je         loc_2650

0000000000002908         lea        rsi, qword [aWarningFollowi]                ; argument "msgid" for method j_dcgettext, "warning: following standard input indefinitely is ineffective"
000000000000290f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002911         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002916         call       j_dcgettext                                 ; dcgettext
000000000000291b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000291d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002920         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002922         xor        eax, eax
0000000000002924         call       j_error                                     ; error
0000000000002929         jmp        loc_2650

                     loc_292e:
000000000000292e         xor        esi, esi                                    ; argument #2 for method open_safer, CODE XREF=main+2048
0000000000002930         mov        rdi, rax                                    ; argument #1 for method open_safer
0000000000002933         xor        eax, eax
0000000000002935         call       open_safer                                  ; open_safer
000000000000293a         movzx      ebx, byte [reopen_inaccessible_files]       ; reopen_inaccessible_files
0000000000002941         mov        dword [rsp+0x2f8+var_2F0], eax
0000000000002945         test       bl, bl
0000000000002947         jne        loc_2c44

000000000000294d         cmp        dword [rsp+0x2f8+var_2F0], 0xffffffff
0000000000002952         mov        byte [r15+0x36], 0x1
0000000000002957         jne        loc_47d0

                     loc_295d:
000000000000295d         call       j___errno_location                          ; __errno_location, CODE XREF=main+3330
0000000000002962         cmp        byte [forever], 0x0                         ; forever
0000000000002969         mov        rbp, rax
000000000000296c         je         loc_2993

000000000000296e         mov        eax, dword [rax]
0000000000002970         xor        ebx, 0x1
0000000000002973         mov        dword [r15+0x38], 0xffffffff
000000000000297b         mov        byte [r15+0x34], bl
000000000000297f         mov        qword [r15+0x28], 0x0
0000000000002987         mov        qword [r15+0x20], 0x0
000000000000298f         mov        dword [r15+0x3c], eax

                     loc_2993:
0000000000002993         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7, CODE XREF=main+2588
0000000000002996         call       pretty_name.isra.7                          ; pretty_name.isra.7
000000000000299b         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
00000000000029a0         mov        rsi, rax                                    ; argument #2 for method quotearg_style
00000000000029a3         call       quotearg_style                              ; quotearg_style
00000000000029a8         lea        rsi, qword [aCannotOpenSFor]                ; argument "msgid" for method j_dcgettext, "cannot open %s for reading"
00000000000029af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000029b4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029b6         mov        rbx, rax
00000000000029b9         call       j_dcgettext                                 ; dcgettext
00000000000029be         mov        esi, dword [rbp]                            ; argument "__errnum" for method j_error
00000000000029c1         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000029c4         mov        rcx, rbx
00000000000029c7         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000029c9         xor        eax, eax
00000000000029cb         call       j_error                                     ; error
00000000000029d0         mov        byte [rsp+0x2f8+var_2E0], 0x0

                     loc_29d5:
00000000000029d5         add        qword [rsp+0x2f8+var_2E8], 0x1              ; CODE XREF=main+3438, main+3455, main+3534, main+3759, main+3936
00000000000029db         movzx      ecx, byte [rsp+0x2f8+var_2E0]
00000000000029e0         add        r15, 0x60
00000000000029e4         and        byte [rsp+0x2f8+var_26D], cl
00000000000029eb         mov        rax, qword [rsp+0x2f8+var_2E8]
00000000000029f0         cmp        rax, qword [rsp+0x2f8+var_2F8]
00000000000029f4         jne        loc_2720

                     loc_29fa:
00000000000029fa         movzx      eax, byte [forever]                         ; forever, CODE XREF=main+7050
0000000000002a01         test       al, al
0000000000002a03         mov        byte [rsp+0x2f8+var_2A8], al
0000000000002a07         jne        loc_3140

                     loc_2a0d:
0000000000002a0d         cmp        byte [have_read_stdin], 0x0                 ; have_read_stdin, CODE XREF=main+4693, main+6176, main+6748
0000000000002a14         jne        loc_3255

                     loc_2a1a:
0000000000002a1a         movzx      eax, byte [rsp+0x2f8+var_26D]               ; CODE XREF=main+4878
0000000000002a22         xor        eax, 0x1
0000000000002a25         movzx      eax, al

                     loc_2a28:
0000000000002a28         mov        rcx, qword [rsp+0x2f8+var_40]               ; CODE XREF=main+5299, main+9071
0000000000002a30         xor        rcx, qword [fs:0x28]
0000000000002a39         jne        loc_483c

0000000000002a3f         add        rsp, 0x2c8
0000000000002a46         pop        rbx
0000000000002a47         pop        rbp
0000000000002a48         pop        r12
0000000000002a4a         pop        r13
0000000000002a4c         pop        r14
0000000000002a4e         pop        r15
0000000000002a50         ret
                        ; endp

                     loc_2a51:
0000000000002a51         call       j___fxstat                                  ; __fxstat, CODE XREF=main+2139
0000000000002a56         test       eax, eax
0000000000002a58         jne        loc_2fe1

0000000000002a5e         movzx      ebx, byte [from_start]                      ; from_start
0000000000002a65         test       bl, bl
0000000000002a67         jne        loc_3078

0000000000002a6d         cmp        byte [presume_input_pipe], 0x0              ; presume_input_pipe
0000000000002a74         jne        loc_2a8d

0000000000002a76         mov        eax, dword [rsp+0x2f8+var_C0]
0000000000002a7d         and        eax, 0xf000
0000000000002a82         cmp        eax, 0x8000
0000000000002a87         je         loc_3adf

                     loc_2a8d:
0000000000002a8d         mov        edi, 0x2018                                 ; argument #1 for method xmalloc, CODE XREF=main+2852, main+7082, main+7315
0000000000002a92         call       xmalloc                                     ; xmalloc
0000000000002a97         mov        edi, 0x2018                                 ; argument #1 for method xmalloc
0000000000002a9c         mov        r14, rax
0000000000002a9f         mov        qword [rax+0x2008], 0x0
0000000000002aaa         mov        qword [rax+0x2000], 0x0
0000000000002ab5         mov        qword [rax+0x2010], 0x0
0000000000002ac0         call       xmalloc                                     ; xmalloc
0000000000002ac5         mov        qword [rsp+0x2f8+var_2A8], r14
0000000000002aca         mov        rbx, rax
0000000000002acd         mov        qword [rsp+0x2f8+var_2C0], 0x0
0000000000002ad6         mov        qword [rsp+0x2f8+var_290], r15
0000000000002adb         nop        dword [rax+rax]

                     loc_2ae0:
0000000000002ae0         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument #1 for method safe_read, CODE XREF=main+3176, main+3223, main+3311
0000000000002ae4         mov        edx, 0x2000                                 ; argument #3 for method safe_read
0000000000002ae9         mov        rsi, rbx                                    ; argument #2 for method safe_read
0000000000002aec         call       safe_read                                   ; safe_read
0000000000002af1         mov        r13, rax
0000000000002af4         lea        rax, qword [rax-1]
0000000000002af8         cmp        rax, 0xfffffffffffffffd
0000000000002afc         ja         loc_2c57

0000000000002b02         mov        qword [rbx+0x2000], r13
0000000000002b09         movsx      r12d, byte [line_end]                       ; line_end
0000000000002b11         lea        rbp, qword [rbx+r13]
0000000000002b15         add        qword [rsp+0x2f8+var_248], r13
0000000000002b1d         mov        rdi, rbx
0000000000002b20         mov        qword [rbx+0x2008], 0x0
0000000000002b2b         mov        qword [rbx+0x2010], 0x0
0000000000002b36         xor        r15d, r15d
0000000000002b39         jmp        loc_2b4e
0000000000002b3b         align      64

                     loc_2b40:
0000000000002b40         lea        rdi, qword [rax+1]                          ; CODE XREF=main+3091
0000000000002b44         mov        qword [rbx+0x2008], rdx
0000000000002b4b         mov        r15, rdx

                     loc_2b4e:
0000000000002b4e         mov        rdx, rbp                                    ; CODE XREF=main+3049
0000000000002b51         mov        esi, r12d                                   ; argument "__c" for method j_memchr
0000000000002b54         sub        rdx, rdi                                    ; argument "__n" for method j_memchr
0000000000002b57         call       j_memchr                                    ; memchr
0000000000002b5c         test       rax, rax
0000000000002b5f         lea        rdx, qword [r15+1]
0000000000002b63         jne        loc_2b40

0000000000002b65         mov        rdi, qword [r14+0x2000]
0000000000002b6c         add        qword [rsp+0x2f8+var_2C0], r15
0000000000002b71         lea        rax, qword [r13+rdi]
0000000000002b76         cmp        rax, 0x1fff
0000000000002b7c         jbe        loc_2bbd

0000000000002b7e         mov        rsi, qword [rsp+0x2f8+var_2A8]
0000000000002b83         mov        rax, qword [rsp+0x2f8+var_2C0]
0000000000002b88         mov        qword [r14+0x2010], rbx
0000000000002b8f         sub        rax, qword [rsi+0x2008]
0000000000002b96         cmp        qword [rsp+0x2f8+var_2D8], rax
0000000000002b9b         jae        loc_2c2f

0000000000002ba1         mov        qword [rsp+0x2f8+var_2C0], rax
0000000000002ba6         mov        rax, qword [rsi+0x2010]
0000000000002bad         mov        r14, rbx
0000000000002bb0         mov        rbx, rsi
0000000000002bb3         mov        qword [rsp+0x2f8+var_2A8], rax
0000000000002bb8         jmp        loc_2ae0

                     loc_2bbd:
0000000000002bbd         add        rdi, r14                                    ; argument "__dest" for method j_memcpy, CODE XREF=main+3116
0000000000002bc0         mov        rdx, r13                                    ; argument "__n" for method j_memcpy
0000000000002bc3         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000002bc6         call       j_memcpy                                    ; memcpy
0000000000002bcb         mov        rax, qword [rbx+0x2000]
0000000000002bd2         add        qword [r14+0x2000], rax
0000000000002bd9         mov        rax, qword [rbx+0x2008]
0000000000002be0         add        qword [r14+0x2008], rax
0000000000002be7         jmp        loc_2ae0

                     loc_2bec:
0000000000002bec         mov        rdi, rax                                    ; argument #1 for method pretty_name.isra.7, CODE XREF=main+2081
0000000000002bef         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000002bf4         cmp        byte [first_file.7393], 0x0                 ; first_file.7393
0000000000002bfb         lea        rsi, qword [aWrittenBySSAnd+26]             ; 0xd000
0000000000002c02         lea        rdx, qword [aWrittenBySSAnd+27]             ; 0xd001
0000000000002c09         mov        rcx, rax
0000000000002c0c         mov        edi, 0x1
0000000000002c11         cmove      rdx, rsi
0000000000002c15         lea        rsi, qword [aErrorReadingS+17]              ; 0xb658
0000000000002c1c         xor        eax, eax
0000000000002c1e         call       j___printf_chk                              ; __printf_chk
0000000000002c23         mov        byte [first_file.7393], 0x0                 ; first_file.7393
0000000000002c2a         jmp        loc_2777

                     loc_2c2f:
0000000000002c2f         mov        edi, 0x2018                                 ; argument #1 for method xmalloc, CODE XREF=main+3147
0000000000002c34         mov        r14, rbx
0000000000002c37         call       xmalloc                                     ; xmalloc
0000000000002c3c         mov        rbx, rax
0000000000002c3f         jmp        loc_2ae0

                     loc_2c44:
0000000000002c44         add        eax, 0x1                                    ; CODE XREF=main+2551
0000000000002c47         jne        loc_327e

0000000000002c4d         mov        byte [r15+0x36], 0x0
0000000000002c52         jmp        loc_295d

                     loc_2c57:
0000000000002c57         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=main+2988
0000000000002c5a         mov        r15, qword [rsp+0x2f8+var_290]
0000000000002c5f         call       j_free                                      ; free
0000000000002c64         add        r13, 0x1
0000000000002c68         je         loc_3a81

0000000000002c6e         cmp        qword [rsp+0x2f8+var_2D8], 0x0
0000000000002c74         mov        rax, qword [r14+0x2000]
0000000000002c7b         je         loc_2c86

0000000000002c7d         test       rax, rax
0000000000002c80         jne        loc_331b

                     loc_2c86:
0000000000002c86         cmp        qword [rsp+0x2f8+var_2A8], 0x0              ; CODE XREF=main+3371, main+5232, main+7028
0000000000002c8c         je         loc_2cb0

0000000000002c8e         mov        rdi, qword [rsp+0x2f8+var_2A8]
0000000000002c93         nop        dword [rax+rax]

                     loc_2c98:
0000000000002c98         mov        rbx, qword [rdi+0x2010]                     ; CODE XREF=main+3418
0000000000002c9f         call       j_free                                      ; free
0000000000002ca4         test       rbx, rbx
0000000000002ca7         mov        rdi, rbx
0000000000002caa         jne        loc_2c98

0000000000002cac         nop        dword [rax]

                     loc_2cb0:
0000000000002cb0         cmp        byte [forever], 0x0                         ; forever, CODE XREF=main+3388, main+4236, main+4308, main+4387, main+4434, main+5292, main+6956, main+7126, main+7166
0000000000002cb7         jne        loc_2d23

0000000000002cb9         cmp        dword [rsp+0x2f8+var_2B4], 0x0
0000000000002cbe         je         loc_29d5

0000000000002cc4         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument "__fd" for method j_close
0000000000002cc8         call       j_close                                     ; close
0000000000002ccd         test       eax, eax
0000000000002ccf         je         loc_29d5

0000000000002cd5         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7
0000000000002cd8         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000002cdd         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000002ce2         mov        rsi, rax                                    ; argument #2 for method quotearg_style
0000000000002ce5         call       quotearg_style                              ; quotearg_style
0000000000002cea         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000002cf1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cf6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cf8         mov        rbx, rax
0000000000002cfb         call       j_dcgettext                                 ; dcgettext
0000000000002d00         mov        rbp, rax
0000000000002d03         call       j___errno_location                          ; __errno_location
0000000000002d08         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002d0a         mov        rcx, rbx
0000000000002d0d         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000002d10         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002d12         xor        eax, eax
0000000000002d14         call       j_error                                     ; error
0000000000002d19         mov        byte [rsp+0x2f8+var_2E0], 0x0
0000000000002d1e         jmp        loc_29d5

                     loc_2d23:
0000000000002d23         movzx      eax, byte [rsp+0x2f8+var_2E0]               ; CODE XREF=main+3431
0000000000002d28         mov        rdx, qword [rsp+0x2f8+var_2A0]              ; argument "__stat_buf" for method j___fxstat
0000000000002d2d         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000002d32         mov        esi, dword [rsp+0x2f8+var_2F0]              ; argument "__fildes" for method j___fxstat
0000000000002d36         sub        eax, 0x1
0000000000002d39         mov        dword [r15+0x3c], eax
0000000000002d3d         call       j___fxstat                                  ; __fxstat
0000000000002d42         test       eax, eax
0000000000002d44         js         loc_32bd

0000000000002d4a         mov        edx, dword [rsp+0x2f8+var_C0]
0000000000002d51         mov        eax, edx
0000000000002d53         and        eax, 0xf000
0000000000002d58         sub        eax, 0x1000
0000000000002d5d         test       eax, 0xffffe000
0000000000002d62         je         loc_2d76

0000000000002d64         mov        eax, edx
0000000000002d66         and        eax, 0xb000
0000000000002d6b         cmp        eax, 0x8000
0000000000002d70         jne        loc_2e04

                     loc_2d76:
0000000000002d76         cmp        byte [rsp+0x2f8+var_2E0], 0x0               ; CODE XREF=main+3602
0000000000002d7b         je         loc_2e81

0000000000002d81         mov        rcx, qword [rsp+0x2f8+var_248]
0000000000002d89         cmp        dword [rsp+0x2f8+var_2B4], 0x0
0000000000002d8e         mov        eax, 0x1
0000000000002d93         cmove      eax, dword [rsp+0x2f8+var_288]
0000000000002d98         mov        ebx, dword [rsp+0x2f8+var_2F0]
0000000000002d9c         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7
0000000000002d9f         mov        dword [r15+0x30], edx
0000000000002da3         mov        qword [r15+8], rcx
0000000000002da7         mov        rcx, qword [rsp+0x2f8+var_80]
0000000000002daf         mov        dword [r15+0x38], ebx
0000000000002db3         mov        qword [r15+0x58], 0x0
0000000000002dbb         mov        dword [r15+0x40], eax
0000000000002dbf         mov        byte [r15+0x34], 0x0
0000000000002dc4         mov        qword [r15+0x10], rcx
0000000000002dc8         mov        rcx, qword [rsp+0x2f8+var_78]
0000000000002dd0         mov        qword [r15+0x18], rcx
0000000000002dd4         mov        rcx, qword [rsp+0x2f8+var_D8]
0000000000002ddc         mov        qword [r15+0x20], rcx
0000000000002de0         mov        rcx, qword [rsp+0x2f8+var_D0]
0000000000002de8         mov        qword [r15+0x28], rcx
0000000000002dec         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000002df1         mov        edi, ebx                                    ; argument #1 for method fremote
0000000000002df3         mov        rsi, rax                                    ; argument #2 for method fremote
0000000000002df6         call       fremote                                     ; fremote
0000000000002dfb         mov        byte [r15+0x35], al
0000000000002dff         jmp        loc_29d5

                     loc_2e04:
0000000000002e04         movzx      eax, byte [reopen_inaccessible_files]       ; reopen_inaccessible_files, CODE XREF=main+3616
0000000000002e0b         mov        dword [r15+0x3c], 0xffffffff
0000000000002e13         lea        rbp, qword [aWrittenBySSAnd+27]             ; 0xd001
0000000000002e1a         mov        byte [r15+0x36], 0x0
0000000000002e1f         xor        eax, 0x1
0000000000002e22         test       al, al
0000000000002e24         mov        byte [r15+0x34], al
0000000000002e28         je         loc_2e40

0000000000002e2a         lea        rsi, qword [aGivingUpOnThis]                ; argument "msgid" for method j_dcgettext, "; giving up on this name"
0000000000002e31         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e36         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e38         call       j_dcgettext                                 ; dcgettext
0000000000002e3d         mov        rbp, rax

                     loc_2e40:
0000000000002e40         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7, CODE XREF=main+3800
0000000000002e43         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000002e48         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000002e4d         mov        rdx, rax                                    ; argument #3 for method quotearg_n_style_colon
0000000000002e50         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000002e52         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002e57         lea        rsi, qword [aSCannotFollowE]                ; argument "msgid" for method j_dcgettext, "%s: cannot follow end of this type of file%s"
0000000000002e5e         mov        rbx, rax
0000000000002e61         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e66         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e68         call       j_dcgettext                                 ; dcgettext
0000000000002e6d         mov        r8, rbp
0000000000002e70         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002e73         mov        rcx, rbx
0000000000002e76         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002e78         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002e7a         xor        eax, eax
0000000000002e7c         call       j_error                                     ; error

                     loc_2e81:
0000000000002e81         movzx      eax, byte [reopen_inaccessible_files]       ; reopen_inaccessible_files, CODE XREF=main+3627, main+5047
0000000000002e88         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7
0000000000002e8b         xor        eax, 0x1
0000000000002e8e         mov        byte [r15+0x34], al
0000000000002e92         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000002e97         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument #1 for method close_fd
0000000000002e9b         mov        rsi, rax                                    ; argument #2 for method close_fd
0000000000002e9e         call       close_fd                                    ; close_fd
0000000000002ea3         mov        dword [r15+0x38], 0xffffffff
0000000000002eab         mov        byte [rsp+0x2f8+var_2E0], 0x0
0000000000002eb0         jmp        loc_29d5

                     loc_2eb5:
0000000000002eb5         test       al, al                                      ; CODE XREF=main+2180
0000000000002eb7         je         loc_30a7

                     loc_2ebd:
0000000000002ebd         mov        edi, 0x2010                                 ; argument #1 for method xmalloc, CODE XREF=main+4445, main+4523, main+7281
0000000000002ec2         xor        r12d, r12d
0000000000002ec5         call       xmalloc                                     ; xmalloc
0000000000002eca         mov        edi, 0x2010                                 ; argument #1 for method xmalloc
0000000000002ecf         mov        r13, rax
0000000000002ed2         mov        qword [rax+0x2000], 0x0
0000000000002edd         mov        qword [rax+0x2008], 0x0
0000000000002ee8         mov        rbp, r13
0000000000002eeb         call       xmalloc                                     ; xmalloc
0000000000002ef0         mov        r14d, dword [rsp+0x2f8+var_2F0]
0000000000002ef5         mov        rbx, rax
0000000000002ef8         jmp        loc_2f29

                     loc_2efa:
0000000000002efa         mov        rax, r12                                    ; CODE XREF=main+4134
0000000000002efd         sub        rax, qword [rbp+0x2000]
0000000000002f04         mov        qword [r13+0x2008], rbx
0000000000002f0b         cmp        qword [rsp+0x2f8+var_2D8], rax
0000000000002f10         jae        loc_330c

0000000000002f16         mov        r12, rax
0000000000002f19         mov        rax, rbp
0000000000002f1c         mov        rbp, qword [rbp+0x2008]

                     loc_2f23:
0000000000002f23         mov        r13, rbx                                    ; CODE XREF=main+4172, main+5062
0000000000002f26         mov        rbx, rax

                     loc_2f29:
0000000000002f29         mov        edx, 0x2000                                 ; argument #3 for method safe_read, CODE XREF=main+4008
0000000000002f2e         mov        rsi, rbx                                    ; argument #2 for method safe_read
0000000000002f31         mov        edi, r14d                                   ; argument #1 for method safe_read
0000000000002f34         call       safe_read                                   ; safe_read
0000000000002f39         lea        rdx, qword [rax-1]
0000000000002f3d         cmp        rdx, 0xfffffffffffffffd
0000000000002f41         ja         loc_39dc

0000000000002f47         add        qword [rsp+0x2f8+var_248], rax
0000000000002f4f         mov        qword [rbx+0x2000], rax
0000000000002f56         add        r12, rax
0000000000002f59         mov        rdx, qword [r13+0x2000]
0000000000002f60         mov        qword [rbx+0x2008], 0x0
0000000000002f6b         lea        rsi, qword [rax+rdx]
0000000000002f6f         cmp        rsi, 0x1fff
0000000000002f76         ja         loc_2efa

0000000000002f78         lea        rdi, qword [r13+rdx]                        ; argument "__dest" for method j_memcpy
0000000000002f7d         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000002f80         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000002f83         call       j_memcpy                                    ; memcpy
0000000000002f88         mov        rax, qword [rbx+0x2000]
0000000000002f8f         add        qword [r13+0x2000], rax
0000000000002f96         mov        rax, rbx
0000000000002f99         mov        rbx, r13
0000000000002f9c         jmp        loc_2f23

                     loc_2f9e:
0000000000002f9e         mov        rsi, qword [rsp+0x2f8+var_2B0]              ; argument #2 for method quotearg_style, CODE XREF=main+2152
0000000000002fa3         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000002fa8         call       quotearg_style                              ; quotearg_style
0000000000002fad         lea        rsi, qword [aCannotFstatS]                  ; argument "msgid" for method j_dcgettext, "cannot fstat %s"
0000000000002fb4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fb6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fbb         mov        rbx, rax
0000000000002fbe         call       j_dcgettext                                 ; dcgettext
0000000000002fc3         mov        rbp, rax
0000000000002fc6         call       j___errno_location                          ; __errno_location
0000000000002fcb         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002fcd         mov        rcx, rbx
0000000000002fd0         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000002fd3         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002fd5         xor        eax, eax
0000000000002fd7         call       j_error                                     ; error
0000000000002fdc         jmp        loc_2cb0

                     loc_2fe1:
0000000000002fe1         mov        rsi, qword [rsp+0x2f8+var_2B0]              ; argument #2 for method quotearg_style, CODE XREF=main+2824
0000000000002fe6         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000002feb         call       quotearg_style                              ; quotearg_style
0000000000002ff0         lea        rsi, qword [aCannotFstatS]                  ; argument "msgid" for method j_dcgettext, "cannot fstat %s"
0000000000002ff7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ffc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ffe         mov        rbx, rax
0000000000003001         call       j_dcgettext                                 ; dcgettext
0000000000003006         mov        rbp, rax
0000000000003009         call       j___errno_location                          ; __errno_location
000000000000300e         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003010         mov        rcx, rbx
0000000000003013         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000003016         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003018         xor        eax, eax
000000000000301a         call       j_error                                     ; error
000000000000301f         mov        byte [rsp+0x2f8+var_2E0], 0x0
0000000000003024         jmp        loc_2cb0

                     loc_3029:
0000000000003029         mov        rdx, qword [rsp+0x2f8+var_2D8]              ; argument #3 for method start_bytes, CODE XREF=main+2188, main+2200, main+2252
000000000000302e         mov        esi, dword [rsp+0x2f8+var_2F0]              ; argument #2 for method start_bytes
0000000000003032         lea        rcx, qword [rsp+0x2f8+var_248]              ; argument #4 for method start_bytes
000000000000303a         mov        rdi, qword [rsp+0x2f8+var_2B0]              ; argument #1 for method start_bytes
000000000000303f         call       start_bytes                                 ; start_bytes
0000000000003044         test       eax, eax
0000000000003046         mov        qword [rsp+0x2f8+var_2D8], 0xffffffffffffffff
000000000000304f         jne        loc_309b

                     loc_3051:
0000000000003051         mov        rcx, qword [rsp+0x2f8+var_2D8]              ; argument #4 for method dump_remainder, CODE XREF=main+2280, main+4569
0000000000003056         mov        edx, dword [rsp+0x2f8+var_2F0]              ; argument #3 for method dump_remainder
000000000000305a         xor        edi, edi                                    ; argument #1 for method dump_remainder
000000000000305c         mov        rsi, qword [rsp+0x2f8+var_2B0]              ; argument #2 for method dump_remainder
0000000000003061         call       dump_remainder                              ; dump_remainder
0000000000003066         mov        byte [rsp+0x2f8+var_2E0], 0x1
000000000000306b         add        qword [rsp+0x2f8+var_248], rax
0000000000003073         jmp        loc_2cb0

                     loc_3078:
0000000000003078         mov        rdx, qword [rsp+0x2f8+var_2D8]              ; CODE XREF=main+2839
000000000000307d         mov        esi, dword [rsp+0x2f8+var_2F0]              ; argument #2 for method start_lines
0000000000003081         lea        rcx, qword [rsp+0x2f8+var_248]
0000000000003089         mov        rdi, qword [rsp+0x2f8+var_2B0]              ; argument #1 for method start_lines
000000000000308e         call       start_lines                                 ; start_lines
0000000000003093         test       eax, eax
0000000000003095         je         loc_33dc

                     loc_309b:
000000000000309b         shr        eax, 0x1f                                   ; CODE XREF=main+4351
000000000000309e         mov        dword [rsp+0x2f8+var_2E0], eax
00000000000030a2         jmp        loc_2cb0

                     loc_30a7:
00000000000030a7         cmp        qword [rsp+0x2f8+var_2D8], 0x0              ; CODE XREF=main+3943
00000000000030ad         js         loc_2ebd

00000000000030b3         mov        eax, dword [rsp+0x2f8+var_C0]
00000000000030ba         and        eax, 0xd000
00000000000030bf         cmp        eax, 0x8000
00000000000030c4         jne        loc_3ba1

00000000000030ca         mov        rbp, qword [rsp+0x2f8+var_A8]
00000000000030d2         or         rbx, 0xffffffffffffffff

                     loc_30d6:
00000000000030d6         mov        rax, qword [rsp+0x2f8+var_A0]               ; CODE XREF=main+7291
00000000000030de         movabs     rcx, 0x1fffffffffffffff
00000000000030e8         lea        rdx, qword [rax-1]
00000000000030ec         cmp        rdx, rcx
00000000000030ef         mov        edx, 0x200
00000000000030f4         cmova      rax, rdx
00000000000030f8         cmp        rbp, rax
00000000000030fb         jle        loc_2ebd

0000000000003101         cmp        rbx, 0xffffffffffffffff
0000000000003105         je         loc_3b53

                     loc_310b:
000000000000310b         cmp        rbp, rbx                                    ; CODE XREF=main+7195
000000000000310e         jle        loc_3121

0000000000003110         mov        rax, rbp
0000000000003113         sub        rax, rbx
0000000000003116         cmp        qword [rsp+0x2f8+var_2D8], rax
000000000000311b         jb         loc_3b81

                     loc_3121:
0000000000003121         mov        qword [rsp+0x2f8+var_248], rbx              ; CODE XREF=main+4542, main+7244
0000000000003129         jmp        loc_3051

                     loc_312e:
000000000000312e         sub        ebx, eax                                    ; CODE XREF=main+1601
0000000000003130         movsxd     rcx, ebx
0000000000003133         lea        rbx, qword [r12+rax*8]
0000000000003137         mov        qword [rsp+0x2f8+var_2F8], rcx
000000000000313b         jmp        loc_25a6

                     loc_3140:
0000000000003140         mov        rbp, qword [rsp+0x2f8+var_298]              ; CODE XREF=main+2743
0000000000003145         mov        r13, qword [rsp+0x2f8+var_2D0]
000000000000314a         lea        r12, qword [aUsrlocalsharel+25]             ; 0xb7ef
0000000000003151         xor        ebx, ebx
0000000000003153         add        rbp, r13

                     loc_3156:
0000000000003156         cmp        rbp, r13                                    ; CODE XREF=main+4673
0000000000003159         je         loc_31a2

000000000000315b         mov        rdi, qword [r13]                            ; argument "__s1" for method j_strcmp
000000000000315f         mov        rsi, r12                                    ; argument "__s2" for method j_strcmp
0000000000003162         call       j_strcmp                                    ; strcmp
0000000000003167         test       eax, eax
0000000000003169         jne        loc_3189

000000000000316b         cmp        byte [r13+0x34], 0x0
0000000000003170         jne        loc_3189

0000000000003172         cmp        dword [r13+0x38], 0x0
0000000000003177         js         loc_3189

0000000000003179         mov        eax, dword [r13+0x30]
000000000000317d         and        eax, 0xf000
0000000000003182         cmp        eax, 0x1000
0000000000003187         je         loc_3193

                     loc_3189:
0000000000003189         add        rbx, 0x1                                    ; CODE XREF=main+4633, main+4640, main+4647

                     loc_318d:
000000000000318d         add        r13, 0x60                                   ; CODE XREF=main+4688
0000000000003191         jmp        loc_3156

                     loc_3193:
0000000000003193         mov        dword [r13+0x38], 0xffffffff                ; CODE XREF=main+4663
000000000000319b         mov        byte [r13+0x34], 0x1
00000000000031a0         jmp        loc_318d

                     loc_31a2:
00000000000031a2         test       rbx, rbx                                    ; CODE XREF=main+4617
00000000000031a5         je         loc_2a0d

00000000000031ab         lea        rdx, qword [rsp+0x2f8+var_168]              ; argument "__stat_buf" for method j___fxstat
00000000000031b3         mov        esi, 0x1                                    ; argument "__fildes" for method j___fxstat
00000000000031b8         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000031bd         call       j___fxstat                                  ; __fxstat
00000000000031c2         test       eax, eax
00000000000031c4         js         loc_4881

00000000000031ca         mov        eax, dword [rsp+0x2f8+var_150]
00000000000031d1         and        eax, 0xf000
00000000000031d6         cmp        eax, 0x1000
00000000000031db         sete       byte [monitor_output]                       ; monitor_output
00000000000031e2         cmp        byte [disable_inotify], 0x0                 ; disable_inotify
00000000000031e9         jne        loc_3448

00000000000031ef         mov        rbp, qword [rsp+0x2f8+var_2D0]
00000000000031f4         lea        rbx, qword [aUsrlocalsharel+25]             ; 0xb7ef
00000000000031fb         jmp        loc_321b

                     loc_31fd:
00000000000031fd         cmp        byte [rbp+0x34], 0x0                        ; CODE XREF=main+4814
0000000000003201         jne        loc_3217

0000000000003203         mov        rdi, qword [rbp]                            ; argument "__s1" for method j_strcmp
0000000000003207         mov        rsi, rbx                                    ; argument "__s2" for method j_strcmp
000000000000320a         call       j_strcmp                                    ; strcmp
000000000000320f         test       eax, eax
0000000000003211         je         loc_3448

                     loc_3217:
0000000000003217         add        rbp, 0x60                                   ; CODE XREF=main+4785

                     loc_321b:
000000000000321b         cmp        rbp, r13                                    ; CODE XREF=main+4779
000000000000321e         jne        loc_31fd

0000000000003220         mov        rax, qword [rsp+0x2f8+var_2D0]
0000000000003225         mov        rcx, qword [rsp+0x2f8+var_298]
000000000000322a         lea        rdx, qword [rax+0x35]
000000000000322e         lea        rcx, qword [rax+rcx+0x35]
0000000000003233         mov        rax, rdx
0000000000003236         jmp        loc_324b

                     loc_3238:
0000000000003238         cmp        dword [rax+3], 0x0                          ; CODE XREF=main+4862
000000000000323c         js         loc_3247

000000000000323e         cmp        byte [rax], 0x0
0000000000003241         jne        loc_3448

                     loc_3247:
0000000000003247         add        rax, 0x60                                   ; CODE XREF=main+4844

                     loc_324b:
000000000000324b         cmp        rax, rcx                                    ; CODE XREF=main+4838
000000000000324e         jne        loc_3238

0000000000003250         jmp        loc_3443

                     loc_3255:
0000000000003255         xor        edi, edi                                    ; argument "__fd" for method j_close, CODE XREF=main+2756
0000000000003257         call       j_close                                     ; close
000000000000325c         test       eax, eax
000000000000325e         jns        loc_2a1a

0000000000003264         call       j___errno_location                          ; __errno_location
0000000000003269         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000326b         lea        rdx, qword [aUsrlocalsharel+25]             ; argument "__format" for method j_error, 0xb7ef
0000000000003272         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003277         xor        eax, eax
0000000000003279         call       j_error                                     ; error

                     loc_327e:
000000000000327e         mov        rax, qword [r15]                            ; CODE XREF=main+3319
0000000000003281         jmp        loc_2765

                     loc_3286:
0000000000003286         xor        r14d, r14d                                  ; CODE XREF=main+1270
0000000000003289         mov        ecx, 0x1400

                     loc_328e:
000000000000328e         lea        rax, qword [rdx+1]                          ; CODE XREF=main+4961, main+4971
0000000000003292         jmp        loc_245a

                     loc_3297:
0000000000003297         mov        eax, ecx                                    ; CODE XREF=main+1320
0000000000003299         mov        qword [rsp+0x2f8+var_268], rax
00000000000032a1         jmp        loc_24a2

                     loc_32a6:
00000000000032a6         mov        r14d, 0x1                                   ; CODE XREF=main+1261
00000000000032ac         mov        ecx, 0xa
00000000000032b1         jmp        loc_328e

                     loc_32b3:
00000000000032b3         xor        r14d, r14d                                  ; CODE XREF=main+1252
00000000000032b6         mov        ecx, 0xa
00000000000032bb         jmp        loc_328e

                     loc_32bd:
00000000000032bd         call       j___errno_location                          ; __errno_location, CODE XREF=main+3572
00000000000032c2         mov        rbx, rax
00000000000032c5         mov        eax, dword [rax]
00000000000032c7         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7
00000000000032ca         mov        dword [r15+0x3c], eax
00000000000032ce         call       pretty_name.isra.7                          ; pretty_name.isra.7
00000000000032d3         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
00000000000032d8         mov        rsi, rax                                    ; argument #2 for method quotearg_style
00000000000032db         call       quotearg_style                              ; quotearg_style
00000000000032e0         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
00000000000032e7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032e9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000032ee         mov        rbp, rax
00000000000032f1         call       j_dcgettext                                 ; dcgettext
00000000000032f6         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000032f8         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000032fb         mov        rcx, rbp
00000000000032fe         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003300         xor        eax, eax
0000000000003302         call       j_error                                     ; error
0000000000003307         jmp        loc_2e81

                     loc_330c:
000000000000330c         mov        edi, 0x2010                                 ; argument #1 for method xmalloc, CODE XREF=main+4032
0000000000003311         call       xmalloc                                     ; xmalloc
0000000000003316         jmp        loc_2f23

                     loc_331b:
000000000000331b         movsx      r12d, byte [line_end]                       ; line_end, CODE XREF=main+3376
0000000000003323         cmp        byte [r14+rax-1], r12b
0000000000003328         je         loc_3338

000000000000332a         add        qword [r14+0x2008], 0x1
0000000000003332         add        qword [rsp+0x2f8+var_2C0], 0x1

                     loc_3338:
0000000000003338         mov        r13, qword [rsp+0x2f8+var_2A8]              ; CODE XREF=main+5080
000000000000333d         mov        rdx, qword [rsp+0x2f8+var_2C0]
0000000000003342         mov        rcx, qword [rsp+0x2f8+var_2D8]
0000000000003347         jmp        loc_3353

                     loc_3349:
0000000000003349         mov        r13, qword [r13+0x2010]                     ; CODE XREF=main+5136
0000000000003350         mov        rdx, rax

                     loc_3353:
0000000000003353         mov        rax, rdx                                    ; CODE XREF=main+5111
0000000000003356         sub        rax, qword [r13+0x2008]
000000000000335d         cmp        rcx, rax
0000000000003360         jb         loc_3349

0000000000003362         mov        rbp, qword [r13+0x2000]
0000000000003369         mov        rax, qword [rsp+0x2f8+var_2D8]
000000000000336e         mov        rbx, rdx
0000000000003371         mov        rdi, r13
0000000000003374         add        rbp, r13
0000000000003377         cmp        rax, rdx
000000000000337a         jae        loc_33a0

000000000000337c         sub        rbx, rax

                     loc_337f:
000000000000337f         mov        rdx, rbp                                    ; CODE XREF=main+5198
0000000000003382         mov        esi, r12d                                   ; argument "__c" for method j_memchr
0000000000003385         sub        rdx, rdi                                    ; argument "__n" for method j_memchr
0000000000003388         call       j_memchr                                    ; memchr
000000000000338d         test       rax, rax
0000000000003390         je         loc_4813

0000000000003396         sub        rbx, 0x1
000000000000339a         lea        rdi, qword [rax+1]
000000000000339e         jne        loc_337f

                     loc_33a0:
00000000000033a0         mov        rsi, rbp                                    ; CODE XREF=main+5162
00000000000033a3         sub        rsi, rdi
00000000000033a6         je         loc_33ad

00000000000033a8         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10

                     loc_33ad:
00000000000033ad         mov        rbx, qword [r13+0x2010]                     ; CODE XREF=main+5206
00000000000033b4         jmp        loc_33bd

                     loc_33b6:
00000000000033b6         mov        rbx, qword [rbx+0x2010]                     ; CODE XREF=main+5248, main+5258

                     loc_33bd:
00000000000033bd         test       rbx, rbx                                    ; CODE XREF=main+5220
00000000000033c0         je         loc_2c86

00000000000033c6         mov        rsi, qword [rbx+0x2000]
00000000000033cd         test       rsi, rsi
00000000000033d0         je         loc_33b6

00000000000033d2         mov        rdi, rbx                                    ; argument #1 for method xwrite_stdout.part.10
00000000000033d5         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10
00000000000033da         jmp        loc_33b6

                     loc_33dc:
00000000000033dc         mov        edx, dword [rsp+0x2f8+var_2F0]              ; argument #3 for method dump_remainder, CODE XREF=main+4421
00000000000033e0         mov        rsi, qword [rsp+0x2f8+var_2B0]              ; argument #2 for method dump_remainder
00000000000033e5         or         rcx, 0xffffffffffffffff                     ; argument #4 for method dump_remainder
00000000000033e9         xor        edi, edi                                    ; argument #1 for method dump_remainder
00000000000033eb         call       dump_remainder                              ; dump_remainder
00000000000033f0         mov        byte [rsp+0x2f8+var_2E0], bl
00000000000033f4         add        qword [rsp+0x2f8+var_248], rax
00000000000033fc         jmp        loc_2cb0

                     loc_3401:
0000000000003401         xor        eax, eax                                    ; CODE XREF=main+1819
0000000000003403         jmp        loc_2a28

                     loc_3408:
0000000000003408         mov        rcx, qword [rsp+0x2f8+var_2B0]              ; argument #4 for method xlseek, CODE XREF=main+2223
000000000000340d         mov        rsi, qword [rsp+0x2f8+var_2D8]              ; argument #2 for method xlseek
0000000000003412         mov        edx, 0x1                                    ; argument #3 for method xlseek
0000000000003417         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument #1 for method xlseek
000000000000341b         call       xlseek                                      ; xlseek
0000000000003420         test       rax, rax
0000000000003423         jns        loc_2822

0000000000003429         jmp        loc_2805

                     loc_342e:
000000000000342e         cmp        dword [rdx+3], 0x0                          ; CODE XREF=main+5366
0000000000003432         js         loc_343f

                     loc_3434:
0000000000003434         movzx      ecx, byte [rdx]                             ; DATA XREF=fremote+128
0000000000003437         test       cl, cl
0000000000003439         je         loc_3c7b

                     loc_343f:
000000000000343f         add        rdx, 0x60                                   ; CODE XREF=main+5346

                     loc_3443:
0000000000003443         cmp        rax, rdx                                    ; CODE XREF=main+4864
0000000000003446         jne        loc_342e

                     loc_3448:
0000000000003448         cmp        dword [pid], 0x0                            ; pid, CODE XREF=main+4761, main+4801, main+4849, main+7535, main+7645, main+7677, main+8212
000000000000344f         mov        byte [disable_inotify], 0x1                 ; disable_inotify
0000000000003456         jne        loc_346c

0000000000003458         cmp        dword [follow_mode], 0x2                    ; follow_mode
000000000000345f         jne        loc_346c

0000000000003461         cmp        qword [rsp+0x2f8+var_2F8], 0x1
0000000000003466         je         loc_3ccb

                     loc_346c:
000000000000346c         xor        r15d, r15d                                  ; CODE XREF=main+5382, main+5391, main+7556

                     loc_346f:
000000000000346f         mov        eax, r15d                                   ; CODE XREF=main+7586
0000000000003472         mov        rcx, qword [rsp+0x2f8+var_298]
0000000000003477         mov        byte [rsp+0x2f8+var_2B0], 0x0
000000000000347c         and        eax, 0x1
000000000000347f         mov        byte [rsp+0x2f8+var_2B4], al
0000000000003483         mov        rax, qword [rsp+0x2f8+var_2F8]
0000000000003487         sub        rax, 0x1
000000000000348b         mov        qword [rsp+0x2f8+var_2E8], rax
0000000000003490         mov        rax, qword [rsp+0x2f8+var_2D0]
0000000000003495         lea        rax, qword [rax+rcx+0x34]
000000000000349a         mov        qword [rsp+0x2f8+var_2E0], rax
000000000000349f         lea        rax, qword [rsp+0x2f8+var_D8]
00000000000034a7         mov        qword [rsp+0x2f8+var_2D8], rax

                     loc_34ac:
00000000000034ac         cmp        qword [rsp+0x2f8+var_2F8], 0x0              ; CODE XREF=main+6069, main+6165, main+6209, main+6791
00000000000034b1         je         loc_394e

00000000000034b7         mov        r14, qword [rsp+0x2f8+var_2D0]
00000000000034bc         mov        byte [rsp+0x2f8+var_2F0], 0x0
00000000000034c1         xor        ebx, ebx
00000000000034c3         jmp        loc_34f4
00000000000034c5         align      8

                     loc_34c8:
00000000000034c8         mov        edx, ebp                                    ; argument #3 for method dump_remainder, CODE XREF=main+5662, main+5867, main+5878, main+5896, main+10297
00000000000034ca         xor        edi, edi                                    ; argument #1 for method dump_remainder
00000000000034cc         mov        rsi, r13                                    ; argument #2 for method dump_remainder
00000000000034cf         call       dump_remainder                              ; dump_remainder
00000000000034d4         test       rax, rax
00000000000034d7         setne      dl
00000000000034da         add        qword [r14+8], rax
00000000000034de         or         byte [rsp+0x2f8+var_2F0], dl

                     loc_34e2:
00000000000034e2         add        rbx, 0x1                                    ; CODE XREF=main+5545, main+6395, main+6408, main+6441, main+6618
00000000000034e6         add        r14, 0x60
00000000000034ea         cmp        qword [rsp+0x2f8+var_2F8], rbx
00000000000034ee         je         loc_367d

                     loc_34f4:
00000000000034f4         cmp        byte [r14+0x34], 0x0                        ; CODE XREF=main+5491, main+5927
00000000000034f9         jne        loc_34e2

00000000000034fb         mov        ebp, dword [r14+0x38]
00000000000034ff         test       ebp, ebp
0000000000003501         js         loc_3660

0000000000003507         mov        rdi, qword [r14]                            ; argument #1 for method pretty_name.isra.7
000000000000350a         call       pretty_name.isra.7                          ; pretty_name.isra.7
000000000000350f         mov        r13, rax
0000000000003512         mov        eax, dword [r14+0x40]
0000000000003516         mov        r12d, dword [r14+0x30]
000000000000351a         cmp        r15d, eax
000000000000351d         je         loc_3565

000000000000351f         xor        eax, eax
0000000000003521         mov        esi, 0x3                                    ; argument #2 for method rpl_fcntl
0000000000003526         mov        edi, ebp                                    ; argument #1 for method rpl_fcntl
0000000000003528         call       rpl_fcntl                                   ; rpl_fcntl
000000000000352d         test       r15d, r15d
0000000000003530         jne        loc_37c8

0000000000003536         test       eax, eax
0000000000003538         js         loc_37d0

000000000000353e         mov        edx, eax
0000000000003540         or         dh, 0x8
0000000000003543         cmp        eax, edx
0000000000003545         je         loc_355e

0000000000003547         xor        eax, eax
0000000000003549         mov        esi, 0x4                                    ; argument #2 for method rpl_fcntl
000000000000354e         mov        edi, ebp                                    ; argument #1 for method rpl_fcntl
0000000000003550         call       rpl_fcntl                                   ; rpl_fcntl
0000000000003555         cmp        eax, 0xffffffff
0000000000003558         je         loc_37d0

                     loc_355e:
000000000000355e         mov        dword [r14+0x40], r15d                      ; CODE XREF=main+5621, main+6266
0000000000003562         mov        eax, r15d

                     loc_3565:
0000000000003565         test       eax, eax                                    ; CODE XREF=main+5581, main+6312
0000000000003567         mov        rcx, 0xfffffffffffffffe
000000000000356e         jne        loc_34c8

0000000000003574         mov        rdx, qword [rsp+0x2f8+var_2D8]              ; argument "__stat_buf" for method j___fxstat
0000000000003579         mov        esi, ebp                                    ; argument "__fildes" for method j___fxstat
000000000000357b         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000003580         call       j___fxstat                                  ; __fxstat
0000000000003585         test       eax, eax
0000000000003587         jne        loc_38e7

000000000000358d         mov        eax, dword [rsp+0x2f8+var_C0]
0000000000003594         cmp        dword [r14+0x30], eax
0000000000003598         je         loc_3800

000000000000359e         mov        rdx, qword [rsp+0x2f8+var_80]
00000000000035a6         mov        rcx, qword [rsp+0x2f8+var_78]

                     loc_35ae:
00000000000035ae         and        r12d, 0xf000                                ; CODE XREF=main+6360, main+6370, main+6649
00000000000035b5         mov        qword [r14+0x10], rdx
00000000000035b9         mov        qword [r14+0x18], rcx
00000000000035bd         cmp        r12d, 0x8000
00000000000035c4         mov        dword [r14+0x30], eax
00000000000035c8         mov        qword [r14+0x58], 0x0
00000000000035d0         je         loc_3880

                     loc_35d6:
00000000000035d6         cmp        qword [rsp+0x2f8+var_2E8], rbx              ; CODE XREF=main+6460, main+6546
00000000000035db         je         loc_361c

00000000000035dd         cmp        byte [print_headers], 0x0                   ; print_headers
00000000000035e4         je         loc_361c

00000000000035e6         cmp        byte [first_file.7393], 0x0                 ; first_file.7393
00000000000035ed         lea        rax, qword [aWrittenBySSAnd+26]             ; 0xd000
00000000000035f4         lea        rdx, qword [aWrittenBySSAnd+27]             ; 0xd001
00000000000035fb         lea        rsi, qword [aErrorReadingS+17]              ; 0xb658
0000000000003602         mov        rcx, r13
0000000000003605         mov        edi, 0x1
000000000000360a         cmove      rdx, rax
000000000000360e         xor        eax, eax
0000000000003610         call       j___printf_chk                              ; __printf_chk
0000000000003615         mov        byte [first_file.7393], 0x0                 ; first_file.7393

                     loc_361c:
000000000000361c         mov        edi, dword [r14+0x40]                       ; CODE XREF=main+5771, main+5780
0000000000003620         mov        qword [rsp+0x2f8+var_2E8], rbx
0000000000003625         test       edi, edi
0000000000003627         jne        loc_4782

000000000000362d         cmp        r12d, 0x8000
0000000000003634         mov        rcx, 0xffffffffffffffff
000000000000363b         jne        loc_34c8

0000000000003641         cmp        byte [r14+0x35], 0x0
0000000000003646         je         loc_34c8

000000000000364c         mov        rcx, qword [rsp+0x2f8+var_A8]
0000000000003654         sub        rcx, qword [r14+8]
0000000000003658         jmp        loc_34c8
000000000000365d         align      32

                     loc_3660:
0000000000003660         mov        rdi, r14                                    ; argument #1 for method recheck, CODE XREF=main+5553
0000000000003663         mov        esi, r15d                                   ; argument #2 for method recheck
0000000000003666         add        rbx, 0x1
000000000000366a         call       recheck                                     ; recheck
000000000000366f         add        r14, 0x60
0000000000003673         cmp        qword [rsp+0x2f8+var_2F8], rbx
0000000000003677         jne        loc_34f4

                     loc_367d:
000000000000367d         movzx      ecx, byte [reopen_inaccessible_files]       ; reopen_inaccessible_files, CODE XREF=main+5534
0000000000003684         test       cl, cl
0000000000003686         je         loc_3691

0000000000003688         cmp        dword [follow_mode], 0x1                    ; follow_mode
000000000000368f         je         loc_36e2

                     loc_3691:
0000000000003691         mov        rax, qword [rsp+0x2f8+var_2D0]              ; CODE XREF=main+5942
0000000000003696         cmp        dword [rax+0x38], 0x0
000000000000369a         jns        loc_36e2

000000000000369c         mov        rax, qword [rsp+0x2f8+var_2D0]
00000000000036a1         cmp        byte [rax+0x34], 0x1
00000000000036a5         je         loc_36ab

00000000000036a7         test       cl, cl
00000000000036a9         jne        loc_36e2

                     loc_36ab:
00000000000036ab         mov        rax, qword [rsp+0x2f8+var_2D0]              ; CODE XREF=main+5973
00000000000036b0         add        rax, 0x94
00000000000036b6         nop        word [cs:rax+rax]

                     loc_36c0:
00000000000036c0         cmp        rax, qword [rsp+0x2f8+var_2E0]              ; CODE XREF=main+6028, main+6032
00000000000036c5         je         loc_398b

00000000000036cb         mov        esi, dword [rax+4]
00000000000036ce         mov        rdx, rax
00000000000036d1         test       esi, esi
00000000000036d3         jns        loc_36e2

00000000000036d5         add        rax, 0x60
00000000000036d9         cmp        byte [rdx], 0x1
00000000000036dc         je         loc_36c0

00000000000036de         test       cl, cl
00000000000036e0         je         loc_36c0

                     loc_36e2:
00000000000036e2         cmp        byte [rsp+0x2f8+var_2F0], 0x1               ; CODE XREF=main+5951, main+5962, main+5977, main+6019
00000000000036e7         jne        loc_3965

00000000000036ed         cmp        byte [rsp+0x2f8+var_2B4], 0x0
00000000000036f2         jne        loc_3965

00000000000036f8         movzx      eax, byte [monitor_output]                  ; monitor_output
00000000000036ff         test       al, al
0000000000003701         mov        byte [rsp+0x2f8+var_2F0], al
0000000000003705         je         loc_34ac

                     loc_370b:
000000000000370b         mov        qword [rsp+0x2f8+var_240], 0x0              ; CODE XREF=main+6710
0000000000003717         mov        qword [rsp+0x2f8+var_248], 0x0
0000000000003723         xor        eax, eax
0000000000003725         mov        ecx, 0x10
000000000000372a         mov        rdi, qword [rsp+0x2f8+var_2D8]
000000000000372f         cld
0000000000003730         rep stosq  qword [rdi], rax
0000000000003733         mov        rsi, qword [rsp+0x2f8+var_2D8]              ; argument "__readfds" for method j_select
0000000000003738         lea        r8, qword [rsp+0x2f8+var_248]               ; argument "__timeout" for method j_select
0000000000003740         xor        ecx, ecx                                    ; argument "__exceptfds" for method j_select
0000000000003742         xor        edx, edx                                    ; argument "__writefds" for method j_select
0000000000003744         mov        edi, 0x2                                    ; argument "__nfds" for method j_select
0000000000003749         or         qword [rsp+0x2f8+var_D8], 0x2
0000000000003752         call       j_select                                    ; select
0000000000003757         sub        eax, 0x1
000000000000375a         je         loc_4841

                     loc_3760:
0000000000003760         cmp        byte [rsp+0x2f8+var_2F0], 0x0               ; CODE XREF=main+6704
0000000000003765         jne        loc_34ac

000000000000376b         cmp        byte [rsp+0x2f8+var_2B0], 0x0
0000000000003770         jne        loc_2a0d

0000000000003776         mov        edi, dword [pid]                            ; pid
000000000000377c         test       edi, edi
000000000000377e         jne        loc_39b1

                     loc_3784:
0000000000003784         movsd      xmm0, qword [rsp+0x2f8+var_2C8]             ; CODE XREF=main+6762, main+6776
000000000000378a         call       xnanosleep                                  ; xnanosleep
000000000000378f         test       eax, eax
0000000000003791         je         loc_34ac

0000000000003797         lea        rsi, qword [aCannotReadReal]                ; argument "msgid" for method j_dcgettext, "cannot read realtime clock"
000000000000379e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000037a3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037a5         call       j_dcgettext                                 ; dcgettext
00000000000037aa         mov        rbx, rax
00000000000037ad         call       j___errno_location                          ; __errno_location
00000000000037b2         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000037b4         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000037b7         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000037bc         xor        eax, eax
00000000000037be         call       j_error                                     ; error
00000000000037c3         nop        dword [rax+rax]

                     loc_37c8:
00000000000037c8         test       eax, eax                                    ; CODE XREF=main+5600
00000000000037ca         jns        loc_355e

                     loc_37d0:
00000000000037d0         call       j___errno_location                          ; __errno_location, CODE XREF=main+5608, main+5640
00000000000037d5         mov        edx, dword [r14+0x30]
00000000000037d9         and        edx, 0xf000
00000000000037df         cmp        edx, 0x8000
00000000000037e5         jne        loc_478e

00000000000037eb         cmp        dword [rax], 0x1
00000000000037ee         jne        loc_478e

00000000000037f4         mov        eax, dword [r14+0x40]
00000000000037f8         jmp        loc_3565
00000000000037fd         align      2048

                     loc_3800:
0000000000003800         mov        edx, eax                                    ; CODE XREF=main+5704
0000000000003802         and        edx, 0xf000
0000000000003808         cmp        edx, 0x8000
000000000000380e         mov        rdx, qword [rsp+0x2f8+var_80]
0000000000003816         je         loc_392f

                     loc_381c:
000000000000381c         cmp        rdx, qword [r14+0x10]                       ; CODE XREF=main+6635
0000000000003820         mov        rcx, qword [rsp+0x2f8+var_78]
0000000000003828         jne        loc_35ae

000000000000382e         cmp        dword [r14+0x18], ecx
0000000000003832         jne        loc_35ae

0000000000003838         mov        rax, qword [r14+0x58]
000000000000383c         cmp        rax, qword [max_n_unchanged_stats_between_opens] ; max_n_unchanged_stats_between_opens
0000000000003843         lea        rdx, qword [rax+1]
0000000000003847         mov        qword [r14+0x58], rdx
000000000000384b         jb         loc_34e2

0000000000003851         cmp        dword [follow_mode], 0x1                    ; follow_mode
0000000000003858         jne        loc_34e2

000000000000385e         xor        esi, esi
0000000000003860         cmp        dword [r14+0x40], 0x0
0000000000003865         mov        rdi, r14                                    ; argument #1 for method recheck
0000000000003868         setne      sil                                         ; argument #2 for method recheck
000000000000386c         call       recheck                                     ; recheck
0000000000003871         mov        qword [r14+0x58], 0x0
0000000000003879         jmp        loc_34e2
000000000000387e         align      128

                     loc_3880:
0000000000003880         mov        rax, qword [r14+8]                          ; CODE XREF=main+5760
0000000000003884         cmp        qword [rsp+0x2f8+var_A8], rax
000000000000388c         jge        loc_35d6

0000000000003892         mov        rdx, r13                                    ; argument #3 for method quotearg_n_style_colon
0000000000003895         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
000000000000389a         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
000000000000389c         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000038a1         lea        rsi, qword [aSFileTruncated]                ; argument "msgid" for method j_dcgettext, "%s: file truncated"
00000000000038a8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038ad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038af         mov        qword [rsp+0x2f8+var_2C0], rax
00000000000038b4         call       j_dcgettext                                 ; dcgettext
00000000000038b9         mov        rcx, qword [rsp+0x2f8+var_2C0]
00000000000038be         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000038c1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000038c3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000038c5         xor        eax, eax
00000000000038c7         call       j_error                                     ; error
00000000000038cc         mov        rcx, r13                                    ; argument #4 for method xlseek
00000000000038cf         xor        edx, edx                                    ; argument #3 for method xlseek
00000000000038d1         xor        esi, esi                                    ; argument #2 for method xlseek
00000000000038d3         mov        edi, ebp                                    ; argument #1 for method xlseek
00000000000038d5         call       xlseek                                      ; xlseek
00000000000038da         mov        qword [r14+8], 0x0
00000000000038e2         jmp        loc_35d6

                     loc_38e7:
00000000000038e7         mov        dword [r14+0x38], 0xffffffff                ; CODE XREF=main+5687
00000000000038ef         call       j___errno_location                          ; __errno_location
00000000000038f4         mov        r12, rax
00000000000038f7         mov        eax, dword [rax]
00000000000038f9         mov        rdx, r13                                    ; argument #3 for method quotearg_n_style_colon
00000000000038fc         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
00000000000038fe         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000003903         mov        dword [r14+0x3c], eax
0000000000003907         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000390c         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
0000000000003910         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc9cc
0000000000003917         mov        rcx, rax
000000000000391a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000391c         xor        eax, eax
000000000000391e         call       j_error                                     ; error
0000000000003923         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000003925         call       j_close                                     ; close
000000000000392a         jmp        loc_34e2

                     loc_392f:
000000000000392f         mov        rcx, qword [rsp+0x2f8+var_A8]               ; CODE XREF=main+6342
0000000000003937         cmp        qword [r14+8], rcx
000000000000393b         je         loc_381c

0000000000003941         mov        rcx, qword [rsp+0x2f8+var_78]
0000000000003949         jmp        loc_35ae

                     loc_394e:
000000000000394e         cmp        byte [reopen_inaccessible_files], 0x0       ; reopen_inaccessible_files, CODE XREF=main+5473
0000000000003955         je         loc_398b

0000000000003957         cmp        dword [follow_mode], 0x1                    ; follow_mode
000000000000395e         jne        loc_398b

0000000000003960         mov        byte [rsp+0x2f8+var_2F0], 0x0

                     loc_3965:
0000000000003965         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fflush_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=main+6039, main+6050
000000000000396c         call       j_fflush_unlocked                           ; fflush_unlocked
0000000000003971         test       eax, eax
0000000000003973         jne        loc_4855

0000000000003979         cmp        byte [monitor_output], 0x0                  ; monitor_output
0000000000003980         je         loc_3760

0000000000003986         jmp        loc_370b

                     loc_398b:
000000000000398b         lea        rsi, qword [aNoFilesRemaini]                ; argument "msgid" for method j_dcgettext, "no files remaining", CODE XREF=main+6005, main+6661, main+6670
0000000000003992         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003994         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003999         call       j_dcgettext                                 ; dcgettext
000000000000399e         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000039a0         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000039a3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000039a5         xor        eax, eax
00000000000039a7         call       j_error                                     ; error
00000000000039ac         jmp        loc_2a0d

                     loc_39b1:
00000000000039b1         xor        esi, esi                                    ; argument "__sig" for method j_kill, CODE XREF=main+6190
00000000000039b3         call       j_kill                                      ; kill
00000000000039b8         test       eax, eax
00000000000039ba         je         loc_3784

00000000000039c0         call       j___errno_location                          ; __errno_location
00000000000039c5         cmp        dword [rax], 0x1
00000000000039c8         je         loc_3784

00000000000039ce         movzx      eax, byte [rsp+0x2f8+var_2A8]
00000000000039d3         mov        byte [rsp+0x2f8+var_2B0], al
00000000000039d7         jmp        loc_34ac

                     loc_39dc:
00000000000039dc         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=main+4081
00000000000039df         mov        qword [rsp+0x2f8+var_2C0], rax
00000000000039e4         mov        rbx, rbp
00000000000039e7         call       j_free                                      ; free
00000000000039ec         mov        rax, qword [rsp+0x2f8+var_2C0]
00000000000039f1         add        rax, 0x1
00000000000039f5         je         loc_3bf6

00000000000039fb         mov        rcx, qword [rsp+0x2f8+var_2D8]
0000000000003a00         jmp        loc_3a0c

                     loc_3a02:
0000000000003a02         mov        rbx, qword [rbx+0x2008]                     ; CODE XREF=main+6860
0000000000003a09         mov        r12, rax

                     loc_3a0c:
0000000000003a0c         mov        rdx, qword [rbx+0x2000]                     ; CODE XREF=main+6832
0000000000003a13         mov        rax, r12
0000000000003a16         sub        rax, rdx
0000000000003a19         cmp        rcx, rax
0000000000003a1c         jb         loc_3a02

0000000000003a1e         mov        rcx, qword [rsp+0x2f8+var_2D8]
0000000000003a23         xor        eax, eax
0000000000003a25         cmp        rcx, r12
0000000000003a28         jae        loc_3a30

0000000000003a2a         mov        rax, r12
0000000000003a2d         sub        rax, rcx

                     loc_3a30:
0000000000003a30         mov        rsi, rdx                                    ; CODE XREF=main+6872
0000000000003a33         sub        rsi, rax
0000000000003a36         jne        loc_3be8

                     loc_3a3c:
0000000000003a3c         mov        rbx, qword [rbx+0x2008]                     ; CODE XREF=main+6914, main+6924, main+7329
0000000000003a43         test       rbx, rbx
0000000000003a46         je         loc_3a5e

0000000000003a48         mov        rsi, qword [rbx+0x2000]
0000000000003a4f         test       rsi, rsi
0000000000003a52         je         loc_3a3c

0000000000003a54         mov        rdi, rbx                                    ; argument #1 for method xwrite_stdout.part.10
0000000000003a57         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10
0000000000003a5c         jmp        loc_3a3c

                     loc_3a5e:
0000000000003a5e         mov        byte [rsp+0x2f8+var_2E0], 0x1               ; CODE XREF=main+6902
0000000000003a63         mov        rdi, rbp
0000000000003a66         jmp        loc_3a77

                     loc_3a68:
0000000000003a68         mov        rbx, qword [rdi+0x2008]                     ; CODE XREF=main+6954
0000000000003a6f         call       j_free                                      ; free
0000000000003a74         mov        rdi, rbx

                     loc_3a77:
0000000000003a77         test       rdi, rdi                                    ; CODE XREF=main+6934, main+7399
0000000000003a7a         jne        loc_3a68

0000000000003a7c         jmp        loc_2cb0

                     loc_3a81:
0000000000003a81         mov        rsi, qword [rsp+0x2f8+var_2B0]              ; argument #2 for method quotearg_style, CODE XREF=main+3352
0000000000003a86         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000003a8b         call       quotearg_style                              ; quotearg_style
0000000000003a90         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000003a97         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a9c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a9e         mov        rbx, rax
0000000000003aa1         call       j_dcgettext                                 ; dcgettext
0000000000003aa6         mov        rbp, rax
0000000000003aa9         call       j___errno_location                          ; __errno_location
0000000000003aae         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003ab0         mov        rcx, rbx
0000000000003ab3         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000003ab6         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003ab8         xor        eax, eax
0000000000003aba         call       j_error                                     ; error
0000000000003abf         mov        byte [rsp+0x2f8+var_2E0], 0x0
0000000000003ac4         jmp        loc_2c86

                     loc_3ac9:
0000000000003ac9         sub        ebp, 0x1                                    ; CODE XREF=main+1892
0000000000003acc         je         loc_26e4

                     loc_3ad2:
0000000000003ad2         mov        byte [rsp+0x2f8+var_26D], 0x1               ; CODE XREF=main+1952
0000000000003ada         jmp        loc_29fa

                     loc_3adf:
0000000000003adf         mov        r14d, dword [rsp+0x2f8+var_2F0]             ; CODE XREF=main+2871
0000000000003ae4         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000003ae6         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000003aeb         mov        edi, r14d                                   ; argument "__fd" for method j_lseek
0000000000003aee         call       j_lseek                                     ; lseek
0000000000003af3         cmp        rax, 0xffffffffffffffff
0000000000003af7         mov        rbx, rax
0000000000003afa         je         loc_2a8d

0000000000003b00         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000003b02         mov        edx, 0x2                                    ; argument "__whence" for method j_lseek
0000000000003b07         mov        edi, r14d                                   ; argument "__fd" for method j_lseek
0000000000003b0a         call       j_lseek                                     ; lseek
0000000000003b0f         cmp        rbx, rax
0000000000003b12         mov        r8, rax
0000000000003b15         jge        loc_3bd0

0000000000003b1b         test       rax, rax
0000000000003b1e         mov        qword [rsp+0x2f8+var_248], rax
0000000000003b26         je         loc_2cb0

0000000000003b2c         mov        rdx, qword [rsp+0x2f8+var_2D8]              ; argument #3 for method file_lines
0000000000003b31         mov        esi, dword [rsp+0x2f8+var_2F0]              ; argument #2 for method file_lines
0000000000003b35         lea        r9, qword [rsp+0x2f8+var_248]               ; argument #6 for method file_lines
0000000000003b3d         mov        rdi, qword [rsp+0x2f8+var_2B0]              ; argument #1 for method file_lines
0000000000003b42         mov        rcx, rbx                                    ; argument #4 for method file_lines
0000000000003b45         call       file_lines                                  ; file_lines
0000000000003b4a         mov        byte [rsp+0x2f8+var_2E0], al
0000000000003b4e         jmp        loc_2cb0

                     loc_3b53:
0000000000003b53         mov        rcx, qword [rsp+0x2f8+var_2B0]              ; argument #4 for method xlseek, CODE XREF=main+4533
0000000000003b58         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument #1 for method xlseek
0000000000003b5c         mov        edx, 0x1                                    ; argument #3 for method xlseek
0000000000003b61         xor        esi, esi                                    ; argument #2 for method xlseek
0000000000003b63         call       xlseek                                      ; xlseek
0000000000003b68         mov        rbx, rax
0000000000003b6b         jmp        loc_310b

                     loc_3b70:
0000000000003b70         mov        edx, 0x5                                    ; CODE XREF=main+1478
0000000000003b75         lea        rsi, qword [aWarningRetryOn]                ; "warning: --retry only effective for the initial open"
0000000000003b7c         jmp        loc_2894

                     loc_3b81:
0000000000003b81         mov        rbx, rbp                                    ; CODE XREF=main+4555
0000000000003b84         sub        rbx, qword [rsp+0x2f8+var_2D8]
0000000000003b89         mov        rcx, qword [rsp+0x2f8+var_2B0]              ; argument #4 for method xlseek
0000000000003b8e         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument #1 for method xlseek
0000000000003b92         xor        edx, edx                                    ; argument #3 for method xlseek
0000000000003b94         mov        rsi, rbx                                    ; argument #2 for method xlseek
0000000000003b97         call       xlseek                                      ; xlseek
0000000000003b9c         jmp        loc_3121

                     loc_3ba1:
0000000000003ba1         mov        r14, qword [rsp+0x2f8+var_2D8]              ; CODE XREF=main+4468
0000000000003ba6         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument "__fd" for method j_lseek
0000000000003baa         mov        edx, 0x2                                    ; argument "__whence" for method j_lseek
0000000000003baf         mov        rsi, r14
0000000000003bb2         neg        rsi                                         ; argument "__offset" for method j_lseek
0000000000003bb5         call       j_lseek                                     ; lseek
0000000000003bba         cmp        rax, 0xffffffffffffffff
0000000000003bbe         mov        rbx, rax
0000000000003bc1         je         loc_2ebd

0000000000003bc7         lea        rbp, qword [rax+r14]
0000000000003bcb         jmp        loc_30d6

                     loc_3bd0:
0000000000003bd0         mov        rcx, qword [rsp+0x2f8+var_2B0]              ; argument #4 for method xlseek, CODE XREF=main+7109
0000000000003bd5         mov        edi, dword [rsp+0x2f8+var_2F0]              ; argument #1 for method xlseek
0000000000003bd9         xor        edx, edx                                    ; argument #3 for method xlseek
0000000000003bdb         mov        rsi, rbx                                    ; argument #2 for method xlseek
0000000000003bde         call       xlseek                                      ; xlseek
0000000000003be3         jmp        loc_2a8d

                     loc_3be8:
0000000000003be8         lea        rdi, qword [rbx+rax]                        ; argument #1 for method xwrite_stdout.part.10, CODE XREF=main+6886
0000000000003bec         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10
0000000000003bf1         jmp        loc_3a3c

                     loc_3bf6:
0000000000003bf6         mov        rsi, qword [rsp+0x2f8+var_2B0]              ; argument #2 for method quotearg_style, CODE XREF=main+6821
0000000000003bfb         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000003c00         call       quotearg_style                              ; quotearg_style
0000000000003c05         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000003c0c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003c11         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003c13         mov        rbx, rax
0000000000003c16         call       j_dcgettext                                 ; dcgettext
0000000000003c1b         mov        r12, rax
0000000000003c1e         call       j___errno_location                          ; __errno_location
0000000000003c23         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003c25         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003c27         mov        rcx, rbx
0000000000003c2a         mov        rdx, r12                                    ; argument "__format" for method j_error
0000000000003c2d         xor        eax, eax
0000000000003c2f         call       j_error                                     ; error
0000000000003c34         mov        rdi, rbp
0000000000003c37         jmp        loc_3a77

                     loc_3c3c:
0000000000003c3c         cmp        eax, 0xffffff7e                             ; CODE XREF=main+489
0000000000003c41         jne        loc_3c71

0000000000003c43         xor        edi, edi                                    ; argument #1 for method usage
0000000000003c45         call       usage                                       ; usage

                     loc_3c4a:
0000000000003c4a         lea        rsi, qword [aOptionUsedInIn]                ; argument "msgid" for method j_dcgettext, "option used in invalid context -- %c", CODE XREF=main+478
0000000000003c51         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003c56         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003c58         call       j_dcgettext                                 ; dcgettext
0000000000003c5d         mov        ecx, r13d
0000000000003c60         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003c63         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003c65         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003c6a         xor        eax, eax
0000000000003c6c         call       j_error                                     ; error

                     loc_3c71:
0000000000003c71         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+327, main+375, main+449, main+691, main+840, main+7409
0000000000003c76         call       usage                                       ; usage

                     loc_3c7b:
0000000000003c7b         lea        rbx, qword [rsp+0x2f8+var_D8]               ; CODE XREF=main+5353
0000000000003c83         mov        byte [rsp+0x2f8+var_2D8], cl
0000000000003c87         xor        r12d, r12d

                     loc_3c8a:
0000000000003c8a         cmp        r12, qword [rsp+0x2f8+var_2F8]              ; CODE XREF=main+7545
0000000000003c8e         je         loc_3cf7

0000000000003c90         imul       rax, r12, 0x60
0000000000003c94         mov        rcx, qword [rsp+0x2f8+var_2D0]
0000000000003c99         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___lxstat
0000000000003c9c         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000003ca1         mov        rsi, qword [rcx+rax]                        ; argument "__filename" for method j___lxstat
0000000000003ca5         call       j___lxstat                                  ; __lxstat
0000000000003caa         test       eax, eax
0000000000003cac         jne        loc_3cc5

0000000000003cae         mov        eax, dword [rsp+0x2f8+var_C0]
0000000000003cb5         and        eax, 0xf000
0000000000003cba         cmp        eax, 0xa000
0000000000003cbf         je         loc_3448

                     loc_3cc5:
0000000000003cc5         add        r12, 0x1                                    ; CODE XREF=main+7516
0000000000003cc9         jmp        loc_3c8a

                     loc_3ccb:
0000000000003ccb         mov        rax, qword [rsp+0x2f8+var_2D0]              ; CODE XREF=main+5398
0000000000003cd0         cmp        dword [rax+0x38], 0xffffffff
0000000000003cd4         je         loc_346c

0000000000003cda         mov        eax, dword [rax+0x30]
0000000000003cdd         xor        r15d, r15d
0000000000003ce0         mov        dword [rsp+0x2f8+var_2F0], eax
0000000000003ce4         and        eax, 0xf000
0000000000003ce9         cmp        eax, 0x8000
0000000000003cee         setne      r15b
0000000000003cf2         jmp        loc_346f

                     loc_3cf7:
0000000000003cf7         mov        rsi, qword [rsp+0x2f8+var_2D0]              ; CODE XREF=main+7486
0000000000003cfc         mov        rcx, qword [rsp+0x2f8+var_298]
0000000000003d01         mov        qword [rsp+0x2f8+var_2E0], r12
0000000000003d06         lea        rax, qword [rsi+0x30]
0000000000003d0a         lea        rcx, qword [rsi+rcx+0x30]
0000000000003d0f         jmp        loc_3d37

                     loc_3d11:
0000000000003d11         cmp        dword [rax+8], 0x0                          ; CODE XREF=main+7658
0000000000003d15         js         loc_3d33

0000000000003d17         mov        edx, dword [rax]
0000000000003d19         and        edx, 0xf000
0000000000003d1f         cmp        edx, 0x8000
0000000000003d25         je         loc_3d33

0000000000003d27         cmp        edx, 0x1000
0000000000003d2d         jne        loc_3448

                     loc_3d33:
0000000000003d33         add        rax, 0x60                                   ; CODE XREF=main+7621, main+7637

                     loc_3d37:
0000000000003d37         cmp        rcx, rax                                    ; CODE XREF=main+7615
0000000000003d3a         jne        loc_3d11

0000000000003d3c         cmp        byte [rsp+0x2f8+var_26D], 0x0
0000000000003d44         jne        loc_3d53

0000000000003d46         cmp        dword [follow_mode], 0x2                    ; follow_mode
0000000000003d4d         je         loc_3448

                     loc_3d53:
0000000000003d53         call       j_inotify_init                              ; inotify_init, CODE XREF=main+7668
0000000000003d58         test       eax, eax
0000000000003d5a         mov        r13d, eax
0000000000003d5d         js         loc_3efd

0000000000003d63         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fflush_unlocked, stdout@@GLIBC_2.2.5
0000000000003d6a         call       j_fflush_unlocked                           ; fflush_unlocked
0000000000003d6f         test       eax, eax
0000000000003d71         jne        loc_4756

0000000000003d77         mov        rdi, qword [rsp+0x2f8+var_2E0]
0000000000003d7c         lea        rcx, qword [wd_comparator]                  ; wd_comparator
0000000000003d83         lea        rdx, qword [wd_hasher]                      ; wd_hasher
0000000000003d8a         xor        r8d, r8d
0000000000003d8d         xor        esi, esi
0000000000003d8f         call       hash_initialize                             ; hash_initialize
0000000000003d94         test       rax, rax
0000000000003d97         mov        r14, rax
0000000000003d9a         je         loc_44fb

0000000000003da0         cmp        dword [follow_mode], 0x1                    ; follow_mode
0000000000003da7         mov        edx, aEgetmbcurmax                          ; "e_get_mb_cur_max"
0000000000003dac         mov        eax, 0x2
0000000000003db1         mov        r15, qword [rsp+0x2f8+var_2D0]
0000000000003db6         mov        byte [rsp+0x2f8+var_2E8], 0x0
0000000000003dbb         mov        byte [rsp+0x2f8+var_2C0], 0x0
0000000000003dc0         mov        qword [rsp+0x2f8+var_2F0], r14
0000000000003dc5         cmove      eax, edx
0000000000003dc8         mov        edx, dword [follow_mode]                    ; follow_mode
0000000000003dce         xor        r12d, r12d
0000000000003dd1         mov        dword [rsp+0x2f8+var_2B4], eax
0000000000003dd5         mov        rbx, r15

                     loc_3dd8:
0000000000003dd8         cmp        rbx, rbp                                    ; CODE XREF=main+8258
0000000000003ddb         je         loc_3fdd

0000000000003de1         cmp        byte [rbx+0x34], 0x0
0000000000003de5         jne        loc_3f8e

0000000000003deb         mov        r15, qword [rbx]
0000000000003dee         xor        eax, eax
0000000000003df0         or         rcx, 0xffffffffffffffff
0000000000003df4         mov        rdi, r15
0000000000003df7         repne scasb al, byte [rdi]
0000000000003df9         mov        dword [rbx+0x44], 0xffffffff
0000000000003e00         mov        rax, rcx
0000000000003e03         not        rax
0000000000003e06         sub        rax, 0x1
0000000000003e0a         cmp        r12, rax
0000000000003e0d         cmovb      r12, rax
0000000000003e11         sub        edx, 0x1
0000000000003e14         jne        loc_3e7d

0000000000003e16         mov        rdi, r15
0000000000003e19         call       dir_len                                     ; dir_len
0000000000003e1e         lea        rdx, qword [r15+rax]
0000000000003e22         mov        r14, rax
0000000000003e25         mov        rdi, r15
0000000000003e28         movzx      eax, byte [rdx]
0000000000003e2b         mov        qword [rsp+0x2f8+var_2A0], rdx
0000000000003e30         mov        byte [rsp+0x2f8+var_2B0], al
0000000000003e34         call       last_component                              ; last_component
0000000000003e39         mov        rdx, qword [rsp+0x2f8+var_2A0]
0000000000003e3e         sub        rax, r15
0000000000003e41         test       r14, r14
0000000000003e44         mov        qword [rbx+0x50], rax
0000000000003e48         lea        rsi, qword [aFullDocumentat+27]             ; 0xb7d4
0000000000003e4f         mov        byte [rdx], 0x0
0000000000003e52         je         loc_3e57

0000000000003e54         mov        rsi, qword [rbx]

                     loc_3e57:
0000000000003e57         mov        edx, 0x784                                  ; argument "__mask" for method j_inotify_add_watch, CODE XREF=main+7938
0000000000003e5c         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_add_watch
0000000000003e5f         call       j_inotify_add_watch                         ; inotify_add_watch
0000000000003e64         movzx      ecx, byte [rsp+0x2f8+var_2B0]
0000000000003e69         mov        dword [rbx+0x48], eax
0000000000003e6c         mov        rax, qword [rbx]
0000000000003e6f         mov        byte [rax+r14], cl
0000000000003e73         cmp        dword [rbx+0x48], 0x0
0000000000003e77         js         loc_46c2

                     loc_3e7d:
0000000000003e7d         mov        edx, dword [rsp+0x2f8+var_2B4]              ; argument "__mask" for method j_inotify_add_watch, CODE XREF=main+7876
0000000000003e81         mov        rsi, qword [rbx]                            ; argument "__name" for method j_inotify_add_watch
0000000000003e84         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_add_watch
0000000000003e87         call       j_inotify_add_watch                         ; inotify_add_watch
0000000000003e8c         test       eax, eax
0000000000003e8e         mov        dword [rbx+0x44], eax
0000000000003e91         jns        loc_3f69

0000000000003e97         cmp        dword [rbx+0x38], 0xffffffff
0000000000003e9b         movzx      eax, byte [rsp+0x2f8+var_2E8]
0000000000003ea0         movzx      esi, byte [rsp+0x2f8+var_2A8]
0000000000003ea5         cmovne     eax, esi
0000000000003ea8         mov        byte [rsp+0x2f8+var_2E8], al
0000000000003eac         call       j___errno_location                          ; __errno_location
0000000000003eb1         mov        r14, rax
0000000000003eb4         mov        eax, dword [rax]
0000000000003eb6         mov        edx, eax
0000000000003eb8         and        edx, 0xffffffef
0000000000003ebb         cmp        edx, 0xc
0000000000003ebe         jne        loc_3f97

0000000000003ec4         mov        r14, qword [rsp+0x2f8+var_2F0]

                     loc_3ec9:
0000000000003ec9         lea        rsi, qword [aInotifyResourc]                ; argument "msgid" for method j_dcgettext, "inotify resources exhausted", CODE XREF=main+10117
0000000000003ed0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ed5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ed7         call       j_dcgettext                                 ; dcgettext
0000000000003edc         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003ede         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003ee1         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003ee3         xor        eax, eax
0000000000003ee5         call       j_error                                     ; error

                     loc_3eea:
0000000000003eea         mov        rdi, r14                                    ; CODE XREF=main+9805, main+10175
0000000000003eed         call       hash_free                                   ; hash_free
0000000000003ef2         call       j___errno_location                          ; __errno_location
0000000000003ef7         mov        dword [rax], 0x0

                     loc_3efd:
0000000000003efd         lea        rsi, qword [aInotifyCannotB]                ; argument "msgid" for method j_dcgettext, "inotify cannot be used, reverting to polling", CODE XREF=main+7693, main+9737, main+9964, main+10027
0000000000003f04         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f09         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f0b         call       j_dcgettext                                 ; dcgettext
0000000000003f10         mov        rbx, rax
0000000000003f13         call       j___errno_location                          ; __errno_location
0000000000003f18         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003f1a         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000003f1d         xor        eax, eax
0000000000003f1f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003f21         call       j_error                                     ; error
0000000000003f26         mov        rax, qword [rsp+0x2f8+var_2D0]
0000000000003f2b         mov        rsi, qword [rsp+0x2f8+var_298]
0000000000003f30         lea        rbp, qword [rax+0x44]
0000000000003f34         lea        rbx, qword [rax+rsi+0x44]
0000000000003f39         jmp        loc_3f5f

                     loc_3f3b:
0000000000003f3b         mov        esi, dword [rbp]                            ; CODE XREF=main+8210
0000000000003f3e         cmp        esi, 0xffffffff
0000000000003f41         je         loc_3f4b

0000000000003f43         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_rm_watch
0000000000003f46         call       j_inotify_rm_watch                          ; inotify_rm_watch

                     loc_3f4b:
0000000000003f4b         mov        esi, dword [rbp+4]                          ; CODE XREF=main+8177
0000000000003f4e         cmp        esi, 0xffffffff
0000000000003f51         je         loc_3f5b

0000000000003f53         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_rm_watch
0000000000003f56         call       j_inotify_rm_watch                          ; inotify_rm_watch

                     loc_3f5b:
0000000000003f5b         add        rbp, 0x60                                   ; CODE XREF=main+8193

                     loc_3f5f:
0000000000003f5f         cmp        rbx, rbp                                    ; CODE XREF=main+8169
0000000000003f62         jne        loc_3f3b

0000000000003f64         jmp        loc_3448

                     loc_3f69:
0000000000003f69         mov        rdi, qword [rsp+0x2f8+var_2F0]              ; argument #1 for method hash_insert, CODE XREF=main+8001
0000000000003f6e         mov        rsi, rbx                                    ; argument #2 for method hash_insert
0000000000003f71         call       hash_insert                                 ; hash_insert
0000000000003f76         test       rax, rax
0000000000003f79         je         loc_44fb

0000000000003f7f         movzx      eax, byte [rsp+0x2f8+var_2A8]
0000000000003f84         mov        byte [rsp+0x2f8+var_2C0], al

                     loc_3f88:
0000000000003f88         mov        edx, dword [follow_mode]                    ; follow_mode, CODE XREF=main+8266

                     loc_3f8e:
0000000000003f8e         add        rbx, 0x60                                   ; CODE XREF=main+7829, main+8331
0000000000003f92         jmp        loc_3dd8

                     loc_3f97:
0000000000003f97         cmp        eax, dword [rbx+0x3c]                       ; CODE XREF=main+8046
0000000000003f9a         je         loc_3f88

0000000000003f9c         mov        rsi, qword [rbx]                            ; argument #2 for method quotearg_style
0000000000003f9f         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000003fa4         call       quotearg_style                              ; quotearg_style
0000000000003fa9         lea        rsi, qword [aCannotWatchS]                  ; argument "msgid" for method j_dcgettext, "cannot watch %s"
0000000000003fb0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003fb5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fb7         mov        qword [rsp+0x2f8+var_2B0], rax
0000000000003fbc         call       j_dcgettext                                 ; dcgettext
0000000000003fc1         mov        rcx, qword [rsp+0x2f8+var_2B0]
0000000000003fc6         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000003fc9         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003fcc         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003fce         xor        eax, eax
0000000000003fd0         call       j_error                                     ; error
0000000000003fd5         mov        edx, dword [follow_mode]                    ; follow_mode
0000000000003fdb         jmp        loc_3f8e

                     loc_3fdd:
0000000000003fdd         cmp        edx, 0x2                                    ; CODE XREF=main+7819
0000000000003fe0         mov        r14, qword [rsp+0x2f8+var_2F0]
0000000000003fe5         je         loc_4598

                     loc_3feb:
0000000000003feb         mov        r15, qword [rsp+0x2f8+var_2D0]              ; CODE XREF=main+9816
0000000000003ff0         mov        rax, qword [rsp+0x2f8+var_298]
0000000000003ff5         lea        rbx, qword [rsp+0x2f8+var_260]
0000000000003ffd         lea        rax, qword [r15+rax-0x60]
0000000000004002         mov        qword [rsp+0x2f8+var_260], rax
000000000000400a         lea        rax, qword [rsp+0x2f8+var_D8]
0000000000004012         mov        qword [rsp+0x2f8+var_2F0], rax
0000000000004017         jmp        loc_4069

                     loc_4019:
0000000000004019         cmp        dword [r15+0x38], 0xffffffff                ; CODE XREF=main+8492
000000000000401e         je         loc_405a

0000000000004020         mov        rdx, qword [rsp+0x2f8+var_2F0]              ; argument "__stat_buf" for method j___xstat
0000000000004025         mov        rsi, qword [r15]                            ; argument "__filename" for method j___xstat
0000000000004028         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000402d         call       j___xstat                                   ; __xstat
0000000000004032         test       eax, eax
0000000000004034         jne        loc_405a

0000000000004036         mov        rax, qword [rsp+0x2f8+var_D8]
000000000000403e         cmp        qword [r15+0x20], rax
0000000000004042         jne        loc_45e7

0000000000004048         mov        rax, qword [rsp+0x2f8+var_D0]
0000000000004050         cmp        qword [r15+0x28], rax
0000000000004054         jne        loc_45e7

                     loc_405a:
000000000000405a         mov        rsi, rbx                                    ; argument #2 for method check_fspec, CODE XREF=main+8398, main+8420, main+8504
000000000000405d         mov        rdi, r15                                    ; argument #1 for method check_fspec
0000000000004060         call       check_fspec                                 ; check_fspec

                     loc_4065:
0000000000004065         add        r15, 0x60                                   ; CODE XREF=main+8483

                     loc_4069:
0000000000004069         cmp        r15, rbp                                    ; CODE XREF=main+8391
000000000000406c         je         loc_408a

000000000000406e         cmp        byte [r15+0x34], 0x0
0000000000004073         jne        loc_4065

0000000000004075         cmp        dword [follow_mode], 0x1                    ; follow_mode
000000000000407c         jne        loc_4019

000000000000407e         xor        esi, esi                                    ; argument #2 for method recheck
0000000000004080         mov        rdi, r15                                    ; argument #1 for method recheck
0000000000004083         call       recheck                                     ; recheck
0000000000004088         jmp        loc_405a

                     loc_408a:
000000000000408a         lea        rax, qword [r12+0x11]                       ; CODE XREF=main+8476
000000000000408f         xor        r15d, r15d
0000000000004092         mov        rdi, rax                                    ; argument #1 for method xmalloc
0000000000004095         mov        qword [rsp+0x2f8+var_2C0], rax
000000000000409a         call       xmalloc                                     ; xmalloc
000000000000409f         mov        ecx, r13d
00000000000040a2         mov        qword [rsp+0x2f8+var_2E8], rax
00000000000040a7         mov        eax, 0x1
00000000000040ac         shl        rax, cl
00000000000040af         mov        qword [rsp+0x2f8+var_2F0], 0x0
00000000000040b8         mov        dword [rsp+0x2f8+var_2B0], 0x3
00000000000040c0         mov        qword [rsp+0x2f8+var_288], rax
00000000000040c5         lea        rax, qword [rsp+0x2f8+var_1E8]
00000000000040cd         mov        qword [rsp+0x2f8+var_2A0], rax
00000000000040d2         movsxd     rax, r13d
00000000000040d5         mov        qword [rsp+0x2f8+var_278], rax

                     loc_40dd:
00000000000040dd         cmp        dword [follow_mode], 0x1                    ; follow_mode, CODE XREF=main+8936, main+9275, main+9310, main+9365, main+9386, main+9549
00000000000040e4         je         loc_427b

                     loc_40ea:
00000000000040ea         movzx      ebp, byte [rsp+0x2f8+var_2D8]               ; CODE XREF=main+9010, main+9027
00000000000040ef         lea        rbx, qword [rsp+0x2f8+var_258]

                     loc_40f7:
00000000000040f7         cmp        r15, qword [rsp+0x2f8+var_2F0]              ; CODE XREF=main+8808
00000000000040fc         jb         loc_45dd

0000000000004102         mov        edi, dword [pid]                            ; pid
0000000000004108         test       edi, edi
000000000000410a         je         loc_414f

000000000000410c         test       bpl, bpl
000000000000410f         jne        loc_468f

0000000000004115         xor        esi, esi                                    ; argument "__sig" for method j_kill
0000000000004117         call       j_kill                                      ; kill
000000000000411c         test       eax, eax
000000000000411e         je         loc_423d

0000000000004124         call       j___errno_location                          ; __errno_location
0000000000004129         cmp        dword [rax], 0x1
000000000000412c         je         loc_423d

0000000000004132         movzx      ebp, byte [rsp+0x2f8+var_2A8]
0000000000004137         mov        qword [rsp+0x2f8+var_250], 0x0
0000000000004143         mov        qword [rsp+0x2f8+var_258], 0x0

                     loc_414f:
000000000000414f         xor        eax, eax                                    ; CODE XREF=main+8634, main+8998
0000000000004151         mov        ecx, 0x10
0000000000004156         mov        rdi, qword [rsp+0x2f8+var_2A0]
000000000000415b         cld
000000000000415c         rep stosq  qword [rdi], rax
000000000000415f         mov        rdi, qword [rsp+0x2f8+var_278]              ; argument "__d" for method j___fdelt_chk
0000000000004167         call       j___fdelt_chk                               ; __fdelt_chk
000000000000416c         mov        rcx, qword [rsp+0x2f8+var_288]
0000000000004171         or         qword [rsp+rax*8+0x2f8+var_1E8], rcx
0000000000004179         cmp        byte [monitor_output], 0x0                  ; monitor_output
0000000000004180         je         loc_418b

0000000000004182         or         qword [rsp+0x2f8+var_1E8], 0x2

                     loc_418b:
000000000000418b         xor        r8d, r8d                                    ; CODE XREF=main+8752
000000000000418e         cmp        dword [pid], 0x0                            ; pid
0000000000004195         mov        edi, 0x1
000000000000419a         mov        rsi, qword [rsp+0x2f8+var_2A0]              ; argument "__readfds" for method j_select
000000000000419f         cmovne     r8, rbx                                     ; argument "__timeout" for method j_select
00000000000041a3         test       r13d, r13d
00000000000041a6         cmovg      edi, r13d
00000000000041aa         xor        ecx, ecx                                    ; argument "__exceptfds" for method j_select
00000000000041ac         xor        edx, edx                                    ; argument "__writefds" for method j_select
00000000000041ae         add        edi, 0x1                                    ; argument "__nfds" for method j_select
00000000000041b1         call       j_select                                    ; select
00000000000041b6         test       eax, eax
00000000000041b8         je         loc_40f7

00000000000041be         add        eax, 0x1
00000000000041c1         mov        byte [rsp+0x2f8+var_2D8], bpl
00000000000041c6         je         loc_4696

00000000000041cc         test       byte [rsp+0x2f8+var_1E8], 0x2
00000000000041d4         jne        loc_4841

00000000000041da         mov        rdx, qword [rsp+0x2f8+var_2C0]              ; argument #3 for method safe_read
00000000000041df         mov        rsi, qword [rsp+0x2f8+var_2E8]              ; argument #2 for method safe_read
00000000000041e4         mov        edi, r13d                                   ; argument #1 for method safe_read
00000000000041e7         call       safe_read                                   ; safe_read
00000000000041ec         test       rax, rax
00000000000041ef         mov        qword [rsp+0x2f8+var_2F0], rax
00000000000041f4         jne        loc_42c4

                     loc_41fa:
00000000000041fa         cmp        dword [rsp+0x2f8+var_2B0], 0x0              ; CODE XREF=main+9750
00000000000041ff         je         loc_456c

0000000000004205         mov        rsi, qword [rsp+0x2f8+var_2C0]
000000000000420a         mov        rdi, qword [rsp+0x2f8+var_2E8]
000000000000420f         xor        r15d, r15d
0000000000004212         sub        dword [rsp+0x2f8+var_2B0], 0x1
0000000000004217         mov        rax, rsi
000000000000421a         add        rax, rsi
000000000000421d         mov        rsi, rax
0000000000004220         mov        qword [rsp+0x2f8+var_2C0], rax
0000000000004225         call       xrealloc                                    ; xrealloc
000000000000422a         mov        qword [rsp+0x2f8+var_2F0], 0x0
0000000000004233         mov        qword [rsp+0x2f8+var_2E8], rax
0000000000004238         jmp        loc_40dd

                     loc_423d:
000000000000423d         movsd      xmm4, qword [rsp+0x2f8+var_2C8]             ; CODE XREF=main+8654, main+8668
0000000000004243         pxor       xmm0, xmm0
0000000000004247         cvttsd2si  rax, xmm4
000000000000424c         cvtsi2sd   xmm0, rax
0000000000004251         mov        qword [rsp+0x2f8+var_258], rax
0000000000004259         subsd      xmm4, xmm0
000000000000425d         movsd      xmm0, qword [double_c968]                   ; double_c968
0000000000004265         mulsd      xmm0, xmm4
0000000000004269         cvttsd2si  rax, xmm0
000000000000426e         mov        qword [rsp+0x2f8+var_250], rax
0000000000004276         jmp        loc_414f

                     loc_427b:
000000000000427b         cmp        byte [reopen_inaccessible_files], 0x0       ; reopen_inaccessible_files, CODE XREF=main+8596
0000000000004282         jne        loc_40ea

0000000000004288         mov        rdi, r14
000000000000428b         call       hash_get_n_entries                          ; hash_get_n_entries
0000000000004290         test       rax, rax
0000000000004293         jne        loc_40ea

0000000000004299         lea        rsi, qword [aNoFilesRemaini]                ; argument "msgid" for method j_dcgettext, "no files remaining"
00000000000042a0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042a5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042a7         call       j_dcgettext                                 ; dcgettext
00000000000042ac         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000042ae         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000042b1         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000042b3         xor        eax, eax
00000000000042b5         call       j_error                                     ; error

                     loc_42ba:
00000000000042ba         mov        eax, 0x1                                    ; CODE XREF=main+9822
00000000000042bf         jmp        loc_2a28

                     loc_42c4:
00000000000042c4         xor        r15d, r15d                                  ; CODE XREF=main+8868
00000000000042c7         cmp        qword [rsp+0x2f8+var_2F0], 0xffffffffffffffff
00000000000042cd         je         loc_455e

                     loc_42d3:
00000000000042d3         mov        rax, qword [rsp+0x2f8+var_2E8]              ; CODE XREF=main+9874
00000000000042d8         lea        rbp, qword [rax+r15]
00000000000042dc         mov        edx, dword [rbp+0xc]
00000000000042df         mov        ecx, dword [rbp+4]
00000000000042e2         test       ch, 0x4
00000000000042e5         lea        r15, qword [r15+rdx+0x10]
00000000000042ea         je         loc_43b3

00000000000042f0         test       edx, edx
00000000000042f2         je         loc_4500

                     loc_42f8:
00000000000042f8         lea        rax, qword [rbp+0x10]                       ; CODE XREF=main+9317
00000000000042fc         mov        qword [rsp+0x2f8+var_290], r15
0000000000004301         mov        rbx, qword [rsp+0x2f8+var_2D0]
0000000000004306         mov        r15, r14
0000000000004309         xor        r12d, r12d
000000000000430c         mov        r14d, r13d
000000000000430f         mov        qword [rsp+0x2f8+var_280], rax
0000000000004314         mov        r13, rbp
0000000000004317         mov        rbp, qword [rsp+0x2f8+var_2E0]
000000000000431c         jmp        loc_4326

                     loc_431e:
000000000000431e         add        r12, 0x1                                    ; CODE XREF=main+9190, main+9225
0000000000004322         add        rbx, 0x60

                     loc_4326:
0000000000004326         cmp        rbp, r12                                    ; CODE XREF=main+9164
0000000000004329         je         loc_43da

000000000000432f         mov        eax, dword [r13]
0000000000004333         cmp        dword [rbx+0x48], eax
0000000000004336         jne        loc_431e

0000000000004338         mov        rsi, qword [rbx+0x50]
000000000000433c         add        rsi, qword [rbx]                            ; argument "__s2" for method j_strcmp
000000000000433f         mov        rdi, qword [rsp+0x2f8+var_280]              ; argument "__s1" for method j_strcmp
0000000000004344         mov        dword [rsp+0x2f8+var_26C], ecx
000000000000434b         call       j_strcmp                                    ; strcmp
0000000000004350         test       eax, eax
0000000000004352         mov        ecx, dword [rsp+0x2f8+var_26C]
0000000000004359         jne        loc_431e

000000000000435b         imul       rbx, r12, 0x60
000000000000435f         mov        rbp, r13
0000000000004362         mov        r13d, r14d
0000000000004365         add        rbx, qword [rsp+0x2f8+var_2D0]
000000000000436a         and        ch, 0x2
000000000000436d         mov        r14, r15
0000000000004370         mov        r15, qword [rsp+0x2f8+var_290]
0000000000004375         je         loc_43ff

                     loc_437b:
000000000000437b         cmp        dword [follow_mode], 0x1                    ; follow_mode, CODE XREF=main+9512, main+9637
0000000000004382         je         loc_45ce

                     loc_4388:
0000000000004388         test       rbx, rbx                                    ; CODE XREF=main+9352, main+9864
000000000000438b         je         loc_40dd

0000000000004391         mov        eax, dword [rbp+4]
0000000000004394         test       eax, aCxaatexit                             ; "cxa_atexit"
0000000000004399         je         loc_43ea

000000000000439b         test       ah, 0x4
000000000000439e         jne        loc_45b3

                     loc_43a4:
00000000000043a4         xor        esi, esi                                    ; argument #2 for method recheck, CODE XREF=main+9849
00000000000043a6         mov        rdi, rbx                                    ; argument #1 for method recheck
00000000000043a9         call       recheck                                     ; recheck
00000000000043ae         jmp        loc_40dd

                     loc_43b3:
00000000000043b3         test       edx, edx                                    ; CODE XREF=main+9114
00000000000043b5         jne        loc_42f8

00000000000043bb         mov        edx, dword [rbp]

                     loc_43be:
00000000000043be         lea        rsi, qword [rsp+0x2f8+var_248]              ; CODE XREF=main+9664
00000000000043c6         mov        rdi, r14
00000000000043c9         mov        dword [rsp+0x2f8+var_204], edx
00000000000043d0         call       hash_lookup                                 ; hash_lookup
00000000000043d5         mov        rbx, rax
00000000000043d8         jmp        loc_4388

                     loc_43da:
00000000000043da         mov        r13d, r14d                                  ; CODE XREF=main+9177
00000000000043dd         mov        r14, r15
00000000000043e0         mov        r15, qword [rsp+0x2f8+var_290]
00000000000043e5         jmp        loc_40dd

                     loc_43ea:
00000000000043ea         lea        rsi, qword [rsp+0x2f8+var_260]              ; argument #2 for method check_fspec, CODE XREF=main+9289
00000000000043f2         mov        rdi, rbx                                    ; argument #1 for method check_fspec
00000000000043f5         call       check_fspec                                 ; check_fspec
00000000000043fa         jmp        loc_40dd

                     loc_43ff:
00000000000043ff         mov        edx, dword [rsp+0x2f8+var_2B4]              ; argument "__mask" for method j_inotify_add_watch, CODE XREF=main+9253
0000000000004403         mov        rsi, qword [rbx]                            ; argument "__name" for method j_inotify_add_watch
0000000000004406         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_add_watch
0000000000004409         call       j_inotify_add_watch                         ; inotify_add_watch
000000000000440e         test       eax, eax
0000000000004410         mov        r12d, eax
0000000000004413         jns        loc_446e

0000000000004415         call       j___errno_location                          ; __errno_location
000000000000441a         mov        r8, rax
000000000000441d         mov        eax, dword [rax]
000000000000441f         and        eax, 0xffffffef
0000000000004422         cmp        eax, 0xc
0000000000004425         je         loc_4641

000000000000442b         mov        rsi, qword [rbx]                            ; argument #2 for method quotearg_style
000000000000442e         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
0000000000004433         mov        qword [rsp+0x2f8+var_280], r8
0000000000004438         call       quotearg_style                              ; quotearg_style
000000000000443d         lea        rsi, qword [aCannotWatchS]                  ; argument "msgid" for method j_dcgettext, "cannot watch %s"
0000000000004444         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004449         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000444b         mov        qword [rsp+0x2f8+var_290], rax
0000000000004450         call       j_dcgettext                                 ; dcgettext
0000000000004455         mov        r8, qword [rsp+0x2f8+var_280]
000000000000445a         mov        rcx, qword [rsp+0x2f8+var_290]
000000000000445f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004462         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004464         xor        eax, eax
0000000000004466         mov        esi, dword [r8]                             ; argument "__errnum" for method j_error
0000000000004469         call       j_error                                     ; error

                     loc_446e:
000000000000446e         mov        esi, dword [rbx+0x44]                       ; CODE XREF=main+9411
0000000000004471         test       esi, esi
0000000000004473         js         loc_447e

0000000000004475         cmp        r12d, esi
0000000000004478         je         loc_437b

                     loc_447e:
000000000000447e         test       esi, esi                                    ; CODE XREF=main+9507
0000000000004480         js         loc_4495

0000000000004482         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_rm_watch
0000000000004485         call       j_inotify_rm_watch                          ; inotify_rm_watch
000000000000448a         mov        rsi, rbx
000000000000448d         mov        rdi, r14
0000000000004490         call       hash_delete                                 ; hash_delete

                     loc_4495:
0000000000004495         mov        dword [rbx+0x44], r12d                      ; CODE XREF=main+9520
0000000000004499         add        r12d, 0x1
000000000000449d         je         loc_40dd

00000000000044a3         mov        rsi, rbx
00000000000044a6         mov        rdi, r14
00000000000044a9         call       hash_delete                                 ; hash_delete
00000000000044ae         test       rax, rax
00000000000044b1         mov        r12, rax
00000000000044b4         je         loc_44e7

00000000000044b6         cmp        rbx, rax
00000000000044b9         je         loc_44e7

00000000000044bb         cmp        dword [follow_mode], 0x1                    ; follow_mode
00000000000044c2         je         loc_4680

                     loc_44c8:
00000000000044c8         mov        rdi, qword [r12]                            ; argument #1 for method pretty_name.isra.7, CODE XREF=main+10042
00000000000044cc         mov        dword [r12+0x44], 0xffffffff
00000000000044d5         call       pretty_name.isra.7                          ; pretty_name.isra.7
00000000000044da         mov        edi, dword [r12+0x38]                       ; argument #1 for method close_fd
00000000000044df         mov        rsi, rax                                    ; argument #2 for method close_fd
00000000000044e2         call       close_fd                                    ; close_fd

                     loc_44e7:
00000000000044e7         mov        rsi, rbx                                    ; argument #2 for method hash_insert, CODE XREF=main+9572, main+9577
00000000000044ea         mov        rdi, r14                                    ; argument #1 for method hash_insert
00000000000044ed         call       hash_insert                                 ; hash_insert
00000000000044f2         test       rax, rax
00000000000044f5         jne        loc_437b

                     loc_44fb:
00000000000044fb         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+1848, main+1857, main+7754, main+8233
                        ; endp

                     loc_4500:
0000000000004500         mov        edx, dword [rbp]                            ; CODE XREF=main+9122
0000000000004503         xor        eax, eax
0000000000004505         jmp        loc_450b

                     loc_4507:
0000000000004507         add        rax, 0x1                                    ; CODE XREF=main+9683

                     loc_450b:
000000000000450b         cmp        qword [rsp+0x2f8+var_2E0], rax              ; CODE XREF=main+9653
0000000000004510         je         loc_43be

0000000000004516         imul       rcx, rax, 0x60
000000000000451a         mov        rsi, qword [rsp+0x2f8+var_2D0]
000000000000451f         cmp        dword [rsi+rcx+0x48], edx
0000000000004523         jne        loc_4507

0000000000004525         mov        rdi, r14
0000000000004528         call       hash_free                                   ; hash_free
000000000000452d         lea        rsi, qword [aDirectoryConta]                ; argument "msgid" for method j_dcgettext, "directory containing watched file was removed"
0000000000004534         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004539         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000453b         call       j_dcgettext                                 ; dcgettext
0000000000004540         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004542         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004545         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004547         xor        eax, eax
0000000000004549         call       j_error                                     ; error
000000000000454e         call       j___errno_location                          ; __errno_location
0000000000004553         mov        dword [rax], 0x0
0000000000004559         jmp        loc_3efd

                     loc_455e:
000000000000455e         call       j___errno_location                          ; __errno_location, CODE XREF=main+9085
0000000000004563         cmp        dword [rax], 0x16
0000000000004566         je         loc_41fa

                     loc_456c:
000000000000456c         lea        rsi, qword [aErrorReadingIn]                ; argument "msgid" for method j_dcgettext, "error reading inotify event", CODE XREF=main+8879
0000000000004573         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004578         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000457a         call       j_dcgettext                                 ; dcgettext
000000000000457f         mov        rbx, rax
0000000000004582         call       j___errno_location                          ; __errno_location
0000000000004587         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004589         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000458c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004591         xor        eax, eax
0000000000004593         call       j_error                                     ; error

                     loc_4598:
0000000000004598         cmp        byte [rsp+0x2f8+var_2E8], 0x0               ; CODE XREF=main+8341
000000000000459d         jne        loc_3eea

00000000000045a3         cmp        byte [rsp+0x2f8+var_2C0], 0x0
00000000000045a8         jne        loc_3feb

00000000000045ae         jmp        loc_42ba

                     loc_45b3:
00000000000045b3         mov        esi, dword [rbx+0x44]                       ; argument "__wd" for method j_inotify_rm_watch, CODE XREF=main+9294
00000000000045b6         mov        edi, r13d                                   ; argument "__fd" for method j_inotify_rm_watch
00000000000045b9         call       j_inotify_rm_watch                          ; inotify_rm_watch
00000000000045be         mov        rsi, rbx
00000000000045c1         mov        rdi, r14
00000000000045c4         call       hash_delete                                 ; hash_delete
00000000000045c9         jmp        loc_43a4

                     loc_45ce:
00000000000045ce         xor        esi, esi                                    ; argument #2 for method recheck, CODE XREF=main+9266
00000000000045d0         mov        rdi, rbx                                    ; argument #1 for method recheck
00000000000045d3         call       recheck                                     ; recheck
00000000000045d8         jmp        loc_4388

                     loc_45dd:
00000000000045dd         mov        byte [rsp+0x2f8+var_2D8], bpl               ; CODE XREF=main+8620
00000000000045e2         jmp        loc_42d3

                     loc_45e7:
00000000000045e7         mov        rdi, qword [r15]                            ; argument #1 for method pretty_name.isra.7, CODE XREF=main+8434, main+8452
00000000000045ea         call       pretty_name.isra.7                          ; pretty_name.isra.7
00000000000045ef         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
00000000000045f4         mov        rsi, rax                                    ; argument #2 for method quotearg_style
00000000000045f7         call       quotearg_style                              ; quotearg_style
00000000000045fc         lea        rsi, qword [aSWasReplaced]                  ; argument "msgid" for method j_dcgettext, "%s was replaced"
0000000000004603         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004608         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000460a         mov        rbp, rax
000000000000460d         call       j_dcgettext                                 ; dcgettext
0000000000004612         mov        r12, rax
0000000000004615         call       j___errno_location                          ; __errno_location
000000000000461a         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000461c         mov        rbx, rax
000000000000461f         mov        rcx, rbp
0000000000004622         mov        rdx, r12                                    ; argument "__format" for method j_error
0000000000004625         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004627         xor        eax, eax
0000000000004629         call       j_error                                     ; error
000000000000462e         mov        rdi, r14
0000000000004631         call       hash_free                                   ; hash_free
0000000000004636         mov        dword [rbx], 0x0
000000000000463c         jmp        loc_3efd

                     loc_4641:
0000000000004641         lea        rsi, qword [aInotifyResourc]                ; argument "msgid" for method j_dcgettext, "inotify resources exhausted", CODE XREF=main+9429
0000000000004648         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000464d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000464f         mov        qword [rsp+0x2f8+var_2F0], r8
0000000000004654         call       j_dcgettext                                 ; dcgettext
0000000000004659         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000465b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000465e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004660         xor        eax, eax
0000000000004662         call       j_error                                     ; error
0000000000004667         mov        rdi, r14
000000000000466a         call       hash_free                                   ; hash_free
000000000000466f         mov        r8, qword [rsp+0x2f8+var_2F0]
0000000000004674         mov        dword [r8], 0x0
000000000000467b         jmp        loc_3efd

                     loc_4680:
0000000000004680         xor        esi, esi                                    ; argument #2 for method recheck, CODE XREF=main+9586
0000000000004682         mov        rdi, rax                                    ; argument #1 for method recheck
0000000000004685         call       recheck                                     ; recheck
000000000000468a         jmp        loc_44c8

                     loc_468f:
000000000000468f         xor        edi, edi                                    ; argument "__status" for method j_exit, CODE XREF=main+8639
0000000000004691         call       j_exit                                      ; exit
                        ; endp

                     loc_4696:
0000000000004696         lea        rsi, qword [aErrorWaitingFo]                ; argument "msgid" for method j_dcgettext, "error waiting for inotify and output events", CODE XREF=main+8822
000000000000469d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000046a2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000046a4         call       j_dcgettext                                 ; dcgettext
00000000000046a9         mov        rbx, rax
00000000000046ac         call       j___errno_location                          ; __errno_location
00000000000046b1         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000046b3         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000046b6         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000046bb         xor        eax, eax
00000000000046bd         call       j_error                                     ; error

                     loc_46c2:
00000000000046c2         call       j___errno_location                          ; __errno_location, CODE XREF=main+7975
00000000000046c7         cmp        dword [rax], 0x1c
00000000000046ca         mov        r15, rbx
00000000000046cd         mov        r14, qword [rsp+0x2f8+var_2F0]
00000000000046d2         mov        rbx, rax
00000000000046d5         je         loc_3ec9

00000000000046db         mov        rsi, qword [r15]                            ; argument #2 for method quotearg_style
00000000000046de         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
00000000000046e3         call       quotearg_style                              ; quotearg_style
00000000000046e8         lea        rsi, qword [aCannotWatchPar]                ; argument "msgid" for method j_dcgettext, "cannot watch parent directory of %s"
00000000000046ef         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000046f1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000046f6         mov        rbp, rax
00000000000046f9         call       j_dcgettext                                 ; dcgettext
00000000000046fe         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000004700         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004703         mov        rcx, rbp
0000000000004706         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004708         xor        eax, eax
000000000000470a         call       j_error                                     ; error
000000000000470f         jmp        loc_3eea

                     loc_4714:
0000000000004714         mov        rdi, qword [rbp+8]                          ; CODE XREF=main+1356
0000000000004718         call       quote                                       ; quote
000000000000471d         lea        rsi, qword [aInvalidNumber]                 ; argument "msgid" for method j_dcgettext, "invalid number"
0000000000004724         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004729         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000472b         mov        rbp, rax
000000000000472e         call       j_dcgettext                                 ; dcgettext
0000000000004733         mov        rbx, rax
0000000000004736         call       j___errno_location                          ; __errno_location
000000000000473b         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000473d         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000004744         mov        r8, rbp
0000000000004747         mov        rcx, rbx
000000000000474a         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000474f         xor        eax, eax
0000000000004751         call       j_error                                     ; error

                     loc_4756:
0000000000004756         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=main+7713
000000000000475d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004762         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004764         call       j_dcgettext                                 ; dcgettext
0000000000004769         mov        rbx, rax
000000000000476c         call       j___errno_location                          ; __errno_location
0000000000004771         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004773         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004776         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000477b         xor        eax, eax
000000000000477d         call       j_error                                     ; error

                     loc_4782:
0000000000004782         mov        rcx, 0xfffffffffffffffe                     ; CODE XREF=main+5847
0000000000004789         jmp        loc_34c8

                     loc_478e:
000000000000478e         mov        rdx, r13                                    ; argument #3 for method quotearg_n_style_colon, CODE XREF=main+6293, main+6302
0000000000004791         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000004796         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000004798         mov        qword [rsp+0x2f8+var_2F8], rax
000000000000479c         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000047a1         lea        rsi, qword [aSCannotChangeN]                ; argument "msgid" for method j_dcgettext, "%s: cannot change nonblocking mode"
00000000000047a8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000047ad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000047af         mov        rbx, rax
00000000000047b2         call       j_dcgettext                                 ; dcgettext
00000000000047b7         mov        r9, qword [rsp+0x2f8+var_2F8]
00000000000047bb         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000047be         mov        rcx, rbx
00000000000047c1         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000047c6         xor        eax, eax
00000000000047c8         mov        esi, dword [r9]                             ; argument "__errnum" for method j_error
00000000000047cb         call       j_error                                     ; error

                     loc_47d0:
00000000000047d0         mov        rax, qword [r15]                            ; CODE XREF=main+2567
00000000000047d3         jmp        loc_276a

                     loc_47d8:
00000000000047d8         lea        rsi, qword [aUsrlocalsharel+25]             ; argument #2 for method quotearg_style, 0xb7ef, CODE XREF=main+1693
00000000000047df         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
00000000000047e4         call       quotearg_style                              ; quotearg_style
00000000000047e9         lea        rsi, qword [aCannotFollowSB]                ; argument "msgid" for method j_dcgettext, "cannot follow %s by name"
00000000000047f0         mov        rbx, rax
00000000000047f3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000047f8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000047fa         call       j_dcgettext                                 ; dcgettext
00000000000047ff         mov        rcx, rbx
0000000000004802         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004805         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004807         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000480c         xor        eax, eax
000000000000480e         call       j_error                                     ; error

                     loc_4813:
0000000000004813         lea        rcx, qword [__PRETTY_FUNCTION__.7486]       ; argument "__function" for method j___assert_fail, "pipe_lines", CODE XREF=main+5184
000000000000481a         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/tail.c"
0000000000004821         lea        rdi, qword [aCannotFstatS+16]               ; argument "__assertion" for method j___assert_fail, 0xb90c
0000000000004828         mov        edx, 0x2e0                                  ; argument "__line" for method j___assert_fail
000000000000482d         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4832:
0000000000004832         mov        ecx, 0x1                                    ; CODE XREF=main+1839
0000000000004837         jmp        loc_2685

                     loc_483c:
000000000000483c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+2793
                        ; endp

                     loc_4841:
0000000000004841         mov        edi, 0xd                                    ; argument "__sig" for method j_raise, CODE XREF=main+6154, main+8836
0000000000004846         call       j_raise                                     ; raise
000000000000484b         mov        edi, 0x1                                    ; argument "__status" for method j_exit
0000000000004850         call       j_exit                                      ; exit
                        ; endp

                     loc_4855:
0000000000004855         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=main+6691
000000000000485c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004861         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004863         call       j_dcgettext                                 ; dcgettext
0000000000004868         mov        rbx, rax
000000000000486b         call       j___errno_location                          ; __errno_location
0000000000004870         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004872         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004875         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000487a         xor        eax, eax
000000000000487c         call       j_error                                     ; error

                     loc_4881:
0000000000004881         lea        rsi, qword [aStandardOutput]                ; argument "msgid" for method j_dcgettext, "standard output", CODE XREF=main+4724
0000000000004888         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000488d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000488f         call       j_dcgettext                                 ; dcgettext
0000000000004894         mov        rbx, rax
0000000000004897         call       j___errno_location                          ; __errno_location
000000000000489c         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000489e         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000048a1         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000048a6         xor        eax, eax
00000000000048a8         call       j_error                                     ; error
00000000000048ad         nop        dword [rax]                                 ; End of unwind block (FDE at 0xdc5c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
00000000000048b0         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xd8e4)
00000000000048b2         mov        r9, rdx
00000000000048b5         pop        rsi
00000000000048b6         mov        rdx, rsp
00000000000048b9         and        rsp, 0xfffffffffffffff0
00000000000048bd         push       rax
00000000000048be         push       rsp
00000000000048bf         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
00000000000048c6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
00000000000048cd         lea        rdi, qword [main]                           ; main
00000000000048d4         call       qword [qword_20ffd8+8]                      ; 0x20ffe0
00000000000048da         hlt
                        ; endp
00000000000048db         align      32                                          ; End of unwind block (FDE at 0xd8e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
00000000000048e0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
00000000000048e7         push       rbp
00000000000048e8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000048ef         cmp        rax, rdi
00000000000048f2         mov        rbp, rsp
00000000000048f5         je         loc_4910

00000000000048f7         mov        rax, qword [qword_20ffd8]                   ; qword_20ffd8
00000000000048fe         test       rax, rax
0000000000004901         je         loc_4910

0000000000004903         pop        rbp
0000000000004904         jmp        rax
                        ; endp
0000000000004906         align      16

                     loc_4910:
0000000000004910         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000004911         ret
                        ; endp
0000000000004912         align      32

                     register_tm_clones:
0000000000004920         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000004927         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000492e         push       rbp
000000000000492f         sub        rsi, rdi
0000000000004932         mov        rbp, rsp
0000000000004935         sar        rsi, 0x3
0000000000004939         mov        rax, rsi
000000000000493c         shr        rax, 0x3f
0000000000004940         add        rsi, rax
0000000000004943         sar        rsi, 0x1
0000000000004946         je         loc_4960

0000000000004948         mov        rax, qword [qword_20fff0]                   ; qword_20fff0
000000000000494f         test       rax, rax
0000000000004952         je         loc_4960

0000000000004954         pop        rbp
0000000000004955         jmp        rax
                        ; endp
0000000000004957         align      32

                     loc_4960:
0000000000004960         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000004961         ret
                        ; endp
0000000000004962         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000004970         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000004977         jne        loc_49a8

0000000000004979         cmp        qword [qword_20fff8], 0x0                   ; qword_20fff8
0000000000004981         push       rbp
0000000000004982         mov        rbp, rsp
0000000000004985         je         loc_4993

0000000000004987         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000498e         call       j_qword_20fff8                              ; qword_20fff8

                     loc_4993:
0000000000004993         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000004998         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000499f         pop        rbp
00000000000049a0         ret
                        ; endp
00000000000049a1         align      8

                     loc_49a8:
00000000000049a8         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
00000000000049aa         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
00000000000049b0         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
00000000000049b1         mov        rbp, rsp
00000000000049b4         pop        rbp
00000000000049b5         jmp        register_tm_clones                          ; register_tm_clones
00000000000049ba         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     wd_hasher:
00000000000049c0         movsxd     rax, dword [rdi+0x44]                       ; Begin of unwind block (FDE at 0xd954), DATA XREF=main+7731
00000000000049c4         xor        edx, edx
00000000000049c6         div        rsi
00000000000049c9         mov        rax, rdx
00000000000049cc         ret
                        ; endp
00000000000049cd         align      16                                          ; End of unwind block (FDE at 0xd954)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     wd_comparator:
00000000000049d0         mov        eax, dword [rsi+0x44]                       ; Begin of unwind block (FDE at 0xd968), DATA XREF=main+7724
00000000000049d3         cmp        dword [rdi+0x44], eax
00000000000049d6         sete       al
00000000000049d9         ret
                        ; endp
00000000000049da         align      32                                          ; End of unwind block (FDE at 0xd968)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pretty_name.isra.7:
00000000000049e0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xd97c), CODE XREF=main+2090, main+2630, main+3231, main+3464, main+3740, main+3827, main+3906, main+4990, main+5562, main+9605, main+9882
00000000000049e3         lea        rdi, qword [aUsrlocalsharel+25]             ; 0xb7ef
00000000000049ea         mov        ecx, 0x2
00000000000049ef         mov        rsi, rax
00000000000049f2         rep  cmpsb byte [rsi], byte [rdi]
00000000000049f4         seta       dl
00000000000049f7         sbb        dl, 0x0
00000000000049fa         test       dl, dl
00000000000049fc         je         loc_4a00

00000000000049fe         ret
                        ; endp

                     loc_4a00:
0000000000004a00         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input", CODE XREF=pretty_name.isra.7+28
0000000000004a07         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a0c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a0e         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000004a13         align      32                                          ; End of unwind block (FDE at 0xd97c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_fd:
0000000000004a20         lea        eax, dword [rdi+1]                          ; Begin of unwind block (FDE at 0xd990), CODE XREF=main+3918, main+9618, check_fspec+288, recheck+287, recheck+306, recheck+1373, recheck+1463
0000000000004a23         cmp        eax, 0x1
0000000000004a26         jbe        loc_4a40

0000000000004a28         push       r12
0000000000004a2a         push       rbp
0000000000004a2b         mov        rbp, rsi
0000000000004a2e         push       rbx
0000000000004a2f         mov        ebx, edi
0000000000004a31         call       j_close                                     ; close
0000000000004a36         test       eax, eax
0000000000004a38         jne        loc_4a48

0000000000004a3a         pop        rbx
0000000000004a3b         pop        rbp
0000000000004a3c         pop        r12
0000000000004a3e         ret
                        ; endp
0000000000004a3f         align      64

                     loc_4a40:
0000000000004a40         ret                                                    ; CODE XREF=close_fd+6
                        ; endp
0000000000004a42         align      8

                     loc_4a48:
0000000000004a48         mov        rsi, rbp                                    ; CODE XREF=close_fd+24
0000000000004a4b         mov        edi, 0x4
0000000000004a50         call       quotearg_style                              ; quotearg_style
0000000000004a55         lea        rsi, qword [aClosingSFdd]                   ; argument "msgid" for method j_dcgettext, "closing %s (fd=%d)"
0000000000004a5c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a61         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a63         mov        r12, rax
0000000000004a66         call       j_dcgettext                                 ; dcgettext
0000000000004a6b         mov        rbp, rax
0000000000004a6e         call       j___errno_location                          ; __errno_location
0000000000004a73         mov        r8d, ebx
0000000000004a76         mov        rcx, r12
0000000000004a79         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000004a7c         pop        rbx
0000000000004a7d         pop        rbp
0000000000004a7e         pop        r12
0000000000004a80         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004a82         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004a84         xor        eax, eax
0000000000004a86         jmp        j_error                                     ; error
                        ; endp
0000000000004a8b         align      16                                          ; End of unwind block (FDE at 0xd990)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_58: int64_t, -88
        ;    var_2060: int8_t, -8288
        ;    var_2068: int64_t, -8296


                     xwrite_stdout.part.10:
0000000000004a90         push       rbp                                         ; Begin of unwind block (FDE at 0xd9d4), CODE XREF=main+5208, main+5253, main+6919, main+7324, start_lines+215, dump_remainder+176, start_bytes+124, file_lines+417
0000000000004a91         push       rbx
0000000000004a92         mov        rdx, rsi                                    ; argument "__n" for method j_fwrite_unlocked
0000000000004a95         mov        rbx, rsi
0000000000004a98         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000004a9d         sub        rsp, 0x8
0000000000004aa1         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000004aa8         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000004aad         cmp        rbx, rax
0000000000004ab0         ja         loc_4ab9

0000000000004ab2         add        rsp, 0x8
0000000000004ab6         pop        rbx
0000000000004ab7         pop        rbp
0000000000004ab8         ret
                        ; endp

                     loc_4ab9:
0000000000004ab9         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_clearerr_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=xwrite_stdout.part.10+32
0000000000004ac0         call       j_clearerr_unlocked                         ; clearerr_unlocked
0000000000004ac5         lea        rsi, qword [aStandardOutput]                ; "standard output"
0000000000004acc         mov        edi, 0x4
0000000000004ad1         call       quotearg_style                              ; quotearg_style
0000000000004ad6         lea        rsi, qword [aErrorWritingS]                 ; argument "msgid" for method j_dcgettext, "error writing %s"
0000000000004add         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ae2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ae4         mov        rbp, rax
0000000000004ae7         call       j_dcgettext                                 ; dcgettext
0000000000004aec         mov        rbx, rax
0000000000004aef         call       j___errno_location                          ; __errno_location
0000000000004af4         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004af6         mov        rcx, rbp
0000000000004af9         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004afc         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004b01         xor        eax, eax
0000000000004b03         call       j_error                                     ; error
0000000000004b08         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xd9d4)
                     start_lines:
0000000000004b10         push       r15                                         ; Begin of unwind block (FDE at 0xda00), CODE XREF=main+4414
0000000000004b12         push       r14
0000000000004b14         push       r13
0000000000004b16         push       r12
0000000000004b18         push       rbp
0000000000004b19         push       rbx
0000000000004b1a         sub        rsp, 0x2028
0000000000004b21         mov        rax, qword [fs:0x28]
0000000000004b2a         mov        qword [rsp+0x2070+var_58], rax
0000000000004b32         xor        eax, eax
0000000000004b34         test       rdx, rdx
0000000000004b37         mov        qword [rsp+0x2070+var_2068], rdi
0000000000004b3c         je         loc_4bb8

0000000000004b3e         lea        r13, qword [rsp+0x2070+var_2060]
0000000000004b43         mov        r15d, esi
0000000000004b46         mov        rbx, rdx
0000000000004b49         mov        r14, rcx

                     loc_4b4c:
0000000000004b4c         mov        edx, 0x2000                                 ; CODE XREF=start_lines+137
0000000000004b51         mov        rsi, r13
0000000000004b54         mov        edi, r15d
0000000000004b57         call       safe_read                                   ; safe_read
0000000000004b5c         test       rax, rax
0000000000004b5f         je         loc_4bf2

0000000000004b65         cmp        rax, 0xffffffffffffffff
0000000000004b69         je         loc_4bf9

0000000000004b6f         add        qword [r14], rax
0000000000004b72         movsx      r12d, byte [line_end]                       ; line_end
0000000000004b7a         lea        rbp, qword [r13+rax]
0000000000004b7f         mov        rdi, r13
0000000000004b82         nop        word [rax+rax]

                     loc_4b88:
0000000000004b88         mov        rdx, rbp                                    ; CODE XREF=start_lines+147
0000000000004b8b         mov        esi, r12d                                   ; argument "__c" for method j_memchr
0000000000004b8e         sub        rdx, rdi                                    ; argument "__n" for method j_memchr
0000000000004b91         call       j_memchr                                    ; memchr
0000000000004b96         test       rax, rax
0000000000004b99         je         loc_4b4c

0000000000004b9b         sub        rbx, 0x1
0000000000004b9f         lea        rdi, qword [rax+1]
0000000000004ba3         jne        loc_4b88

0000000000004ba5         xor        eax, eax
0000000000004ba7         cmp        rbp, rdi
0000000000004baa         jbe        loc_4bb8

0000000000004bac         sub        rbp, rdi
0000000000004baf         jne        loc_4be0

0000000000004bb1         nop        dword [rax]

                     loc_4bb8:
0000000000004bb8         mov        rcx, qword [rsp+0x2070+var_58]              ; CODE XREF=start_lines+44, start_lines+154, start_lines+224, start_lines+231, start_lines+300
0000000000004bc0         xor        rcx, qword [fs:0x28]
0000000000004bc9         jne        loc_4c41

0000000000004bcb         add        rsp, 0x2028
0000000000004bd2         pop        rbx
0000000000004bd3         pop        rbp
0000000000004bd4         pop        r12
0000000000004bd6         pop        r13
0000000000004bd8         pop        r14
0000000000004bda         pop        r15
0000000000004bdc         ret
                        ; endp
0000000000004bdd         align      32

                     loc_4be0:
0000000000004be0         mov        rsi, rbp                                    ; CODE XREF=start_lines+159
0000000000004be3         mov        dword [rsp+0x2070+var_2068], eax
0000000000004be7         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10
0000000000004bec         mov        eax, dword [rsp+0x2070+var_2068]
0000000000004bf0         jmp        loc_4bb8

                     loc_4bf2:
0000000000004bf2         mov        eax, 0xffffffff                             ; CODE XREF=start_lines+79
0000000000004bf7         jmp        loc_4bb8

                     loc_4bf9:
0000000000004bf9         mov        rsi, qword [rsp+0x2070+var_2068]            ; CODE XREF=start_lines+89
0000000000004bfe         mov        edi, 0x4
0000000000004c03         call       quotearg_style                              ; quotearg_style
0000000000004c08         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000004c0f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004c14         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004c16         mov        rbp, rax
0000000000004c19         call       j_dcgettext                                 ; dcgettext
0000000000004c1e         mov        rbx, rax
0000000000004c21         call       j___errno_location                          ; __errno_location
0000000000004c26         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004c28         mov        rcx, rbp
0000000000004c2b         xor        eax, eax
0000000000004c2d         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004c30         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004c32         call       j_error                                     ; error
0000000000004c37         mov        eax, 0x1
0000000000004c3c         jmp        loc_4bb8

                     loc_4c41:
0000000000004c41         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=start_lines+185
                        ; endp
0000000000004c46         align      16                                          ; End of unwind block (FDE at 0xda00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_2048: int8_t, -8264
        ;    var_2050: int64_t, -8272
        ;    var_2054: int32_t, -8276
        ;    var_2088: int64_t, -8328


                     dump_remainder:
0000000000004c50         push       r15                                         ; Begin of unwind block (FDE at 0xda4c), CODE XREF=main+4369, main+5275, main+5503, file_lines+443, file_lines+567, check_fspec+176
0000000000004c52         push       r14
0000000000004c54         mov        r14, rcx
0000000000004c57         push       r13
0000000000004c59         push       r12
0000000000004c5b         xor        r12d, r12d
0000000000004c5e         push       rbp
0000000000004c5f         push       rbx
0000000000004c60         mov        ebp, edi
0000000000004c62         mov        rbx, rcx
0000000000004c65         sub        rsp, 0x2028
0000000000004c6c         mov        rax, qword [fs:0x28]
0000000000004c75         mov        qword [rsp+0x2058+var_40], rax
0000000000004c7d         xor        eax, eax
0000000000004c7f         lea        r13, qword [rsp+0x2058+var_2048]
0000000000004c84         mov        qword [rsp+0x2058+var_2050], rsi
0000000000004c89         mov        dword [rsp+0x2058+var_2054], edx
0000000000004c8d         nop        dword [rax]

                     loc_4c90:
0000000000004c90         mov        edi, dword [rsp+0x2058+var_2054]            ; CODE XREF=dump_remainder+200
0000000000004c94         cmp        rbx, 0x2000
0000000000004c9b         mov        edx, 0x2000
0000000000004ca0         cmovbe     rdx, rbx
0000000000004ca4         mov        rsi, r13
0000000000004ca7         call       safe_read                                   ; safe_read
0000000000004cac         cmp        rax, 0xffffffffffffffff
0000000000004cb0         mov        r15, rax
0000000000004cb3         je         loc_4d20

0000000000004cb5         test       rax, rax
0000000000004cb8         je         loc_4d2d

0000000000004cba         test       bpl, bpl
0000000000004cbd         je         loc_4cf7

0000000000004cbf         cmp        byte [first_file.7393], 0x0                 ; first_file.7393
0000000000004cc6         lea        rax, qword [aWrittenBySSAnd+27]             ; 0xd001
0000000000004ccd         lea        rdx, qword [aWrittenBySSAnd+26]             ; 0xd000
0000000000004cd4         mov        rcx, qword [rsp+0x2058+var_2050]
0000000000004cd9         lea        rsi, qword [aErrorReadingS+17]              ; 0xb658
0000000000004ce0         mov        edi, 0x1
0000000000004ce5         cmovne     rdx, rax
0000000000004ce9         xor        eax, eax
0000000000004ceb         call       j___printf_chk                              ; __printf_chk
0000000000004cf0         mov        byte [first_file.7393], 0x0                 ; first_file.7393

                     loc_4cf7:
0000000000004cf7         mov        rsi, r15                                    ; CODE XREF=dump_remainder+109
0000000000004cfa         mov        rdi, r13
0000000000004cfd         add        r12, r15
0000000000004d00         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10
0000000000004d05         cmp        r14, 0xffffffffffffffff
0000000000004d09         je         loc_4d16

0000000000004d0b         sub        rbx, r15
0000000000004d0e         je         loc_4d2d

0000000000004d10         cmp        r14, 0xfffffffffffffffe
0000000000004d14         je         loc_4d2d

                     loc_4d16:
0000000000004d16         xor        ebp, ebp                                    ; CODE XREF=dump_remainder+185
0000000000004d18         jmp        loc_4c90
0000000000004d1d         align      32

                     loc_4d20:
0000000000004d20         call       j___errno_location                          ; __errno_location, CODE XREF=dump_remainder+99
0000000000004d25         cmp        dword [rax], 0xb
0000000000004d28         mov        rbx, rax
0000000000004d2b         jne        loc_4d5a

                     loc_4d2d:
0000000000004d2d         mov        rcx, qword [rsp+0x2058+var_40]              ; CODE XREF=dump_remainder+104, dump_remainder+190, dump_remainder+196
0000000000004d35         xor        rcx, qword [fs:0x28]
0000000000004d3e         mov        rax, r12
0000000000004d41         jne        loc_4d55

0000000000004d43         add        rsp, 0x2028
0000000000004d4a         pop        rbx
0000000000004d4b         pop        rbp
0000000000004d4c         pop        r12
0000000000004d4e         pop        r13
0000000000004d50         pop        r14
0000000000004d52         pop        r15
0000000000004d54         ret
                        ; endp

                     loc_4d55:
0000000000004d55         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=dump_remainder+241
                        ; endp

                     loc_4d5a:
0000000000004d5a         mov        rsi, qword [rsp+0x2058+var_2050]            ; CODE XREF=dump_remainder+219, DATA XREF=fremote+1174
0000000000004d5f         mov        edi, 0x4
0000000000004d64         call       quotearg_style                              ; quotearg_style
0000000000004d69         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000004d70         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d75         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d77         mov        rbp, rax
0000000000004d7a         call       j_dcgettext                                 ; dcgettext
0000000000004d7f         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000004d81         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004d84         mov        rcx, rbp
0000000000004d87         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004d8c         xor        eax, eax
0000000000004d8e         call       j_error                                     ; error
0000000000004d93         nop        dword [rax]                                 ; End of unwind block (FDE at 0xda4c)
0000000000004d96         nop        word [cs:rax+rax]
                     start_bytes:
0000000000004da0         push       r14                                         ; Begin of unwind block (FDE at 0xda98), CODE XREF=main+4335
0000000000004da2         push       r13
0000000000004da4         push       r12
0000000000004da6         push       rbp
0000000000004da7         push       rbx
0000000000004da8         sub        rsp, 0x2010
0000000000004daf         mov        rax, qword [fs:0x28]
0000000000004db8         mov        qword [rsp+0x4090+var_2088], rax
0000000000004dc0         xor        eax, eax
0000000000004dc2         test       rdx, rdx
0000000000004dc5         je         loc_4e28

0000000000004dc7         mov        r14, rdi
0000000000004dca         mov        r13d, esi
0000000000004dcd         mov        rbx, rdx
0000000000004dd0         mov        rbp, rcx
0000000000004dd3         mov        r12, rsp
0000000000004dd6         jmp        loc_4df4
0000000000004dd8         align      32

                     loc_4de0:
0000000000004de0         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=start_bytes+103
0000000000004de4         je         loc_4e50

0000000000004de6         add        qword [rbp], rax
0000000000004dea         cmp        rax, rbx
0000000000004ded         ja         loc_4e10

0000000000004def         sub        rbx, rax
0000000000004df2         je         loc_4e28

                     loc_4df4:
0000000000004df4         mov        edx, 0x2000                                 ; CODE XREF=start_bytes+54
0000000000004df9         mov        rsi, r12
0000000000004dfc         mov        edi, r13d
0000000000004dff         call       safe_read                                   ; safe_read
0000000000004e04         test       rax, rax
0000000000004e07         jne        loc_4de0

0000000000004e09         mov        eax, 0xffffffff
0000000000004e0e         jmp        loc_4e2a

                     loc_4e10:
0000000000004e10         sub        rax, rbx                                    ; CODE XREF=start_bytes+77
0000000000004e13         je         loc_4e28

0000000000004e15         lea        rdi, qword [r12+rbx]
0000000000004e19         mov        rsi, rax
0000000000004e1c         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10
0000000000004e21         nop        dword [rax]

                     loc_4e28:
0000000000004e28         xor        eax, eax                                    ; CODE XREF=start_bytes+37, start_bytes+82, start_bytes+115

                     loc_4e2a:
0000000000004e2a         mov        rcx, qword [rsp+0x4090+var_2088]            ; CODE XREF=start_bytes+110, start_bytes+241
0000000000004e32         xor        rcx, qword [fs:0x28]
0000000000004e3b         jne        loc_4e93

0000000000004e3d         add        rsp, 0x2010
0000000000004e44         pop        rbx
0000000000004e45         pop        rbp
0000000000004e46         pop        r12
0000000000004e48         pop        r13
0000000000004e4a         pop        r14
0000000000004e4c         ret
                        ; endp
0000000000004e4d         align      16

                     loc_4e50:
0000000000004e50         mov        rsi, r14                                    ; CODE XREF=start_bytes+68
0000000000004e53         mov        edi, 0x4
0000000000004e58         call       quotearg_style                              ; quotearg_style
0000000000004e5d         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000004e64         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e69         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e6b         mov        rbp, rax
0000000000004e6e         call       j_dcgettext                                 ; dcgettext
0000000000004e73         mov        rbx, rax
0000000000004e76         call       j___errno_location                          ; __errno_location
0000000000004e7b         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004e7d         mov        rcx, rbp
0000000000004e80         xor        eax, eax
0000000000004e82         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004e85         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004e87         call       j_error                                     ; error
0000000000004e8c         mov        eax, 0x1
0000000000004e91         jmp        loc_4e2a

                     loc_4e93:
0000000000004e93         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=start_bytes+155
                        ; endp
0000000000004e98         align      32                                          ; End of unwind block (FDE at 0xda98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     xlseek:
0000000000004ea0         push       r13                                         ; Begin of unwind block (FDE at 0xdadc), CODE XREF=main+5323, main+6533, main+7187, main+7239, main+7310, file_lines+130, file_lines+289, file_lines+549, check_fspec+432, recheck+767
0000000000004ea2         push       r12
0000000000004ea4         mov        r12, rcx
0000000000004ea7         push       rbp
0000000000004ea8         push       rbx
0000000000004ea9         mov        rbp, rsi
0000000000004eac         mov        ebx, edx
0000000000004eae         sub        rsp, 0x28
0000000000004eb2         mov        rax, qword [fs:0x28]
0000000000004ebb         mov        qword [rsp+0x48+var_30], rax
0000000000004ec0         xor        eax, eax
0000000000004ec2         call       j_lseek                                     ; lseek
0000000000004ec7         test       rax, rax
0000000000004eca         js         loc_4ef0

0000000000004ecc         mov        rcx, qword [rsp+0x48+var_30]
0000000000004ed1         xor        rcx, qword [fs:0x28]
0000000000004eda         jne        loc_4f66

0000000000004ee0         add        rsp, 0x28
0000000000004ee4         pop        rbx
0000000000004ee5         pop        rbp
0000000000004ee6         pop        r12
0000000000004ee8         pop        r13
0000000000004eea         ret
                        ; endp
0000000000004eeb         align      16

                     loc_4ef0:
0000000000004ef0         mov        rdi, rbp                                    ; CODE XREF=xlseek+42
0000000000004ef3         mov        rsi, rsp
0000000000004ef6         call       offtostr                                    ; offtostr
0000000000004efb         mov        r13, rax
0000000000004efe         call       j___errno_location                          ; __errno_location
0000000000004f03         xor        edi, edi
0000000000004f05         cmp        ebx, 0x1
0000000000004f08         mov        rbp, rax
0000000000004f0b         mov        rdx, r12
0000000000004f0e         mov        esi, 0x3
0000000000004f13         je         loc_4f50

0000000000004f15         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004f1a         lea        rsi, qword [aSCannotSeekToO]                ; "%s: cannot seek to offset %s"
0000000000004f21         mov        rbx, rax
0000000000004f24         mov        edx, 0x5

                     loc_4f29:
0000000000004f29         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=xlseek+196
0000000000004f2b         call       j_dcgettext                                 ; dcgettext
0000000000004f30         mov        esi, dword [rbp]                            ; argument "__errnum" for method j_error
0000000000004f33         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004f36         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004f38         mov        r8, r13
0000000000004f3b         mov        rcx, rbx
0000000000004f3e         xor        eax, eax
0000000000004f40         call       j_error                                     ; error
0000000000004f45         mov        edi, 0x1                                    ; argument "__status" for method j_exit
0000000000004f4a         call       j_exit                                      ; exit
                        ; endp
0000000000004f4f         align      16

                     loc_4f50:
0000000000004f50         call       quotearg_n_style_colon                      ; quotearg_n_style_colon, CODE XREF=xlseek+115
0000000000004f55         mov        edx, 0x5
0000000000004f5a         mov        rbx, rax
0000000000004f5d         lea        rsi, qword [aSCannotSeekToR]                ; "%s: cannot seek to relative offset %s"
0000000000004f64         jmp        loc_4f29

                     loc_4f66:
0000000000004f66         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xlseek+58
                        ; endp
0000000000004f6b         align      16                                          ; End of unwind block (FDE at 0xdadc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_2048: int8_t, -8264
        ;    var_2049: int8_t, -8265
        ;    var_2050: int64_t, -8272
        ;    var_2058: int64_t, -8280
        ;    var_2060: int64_t, -8288
        ;    var_2068: int64_t, -8296


                     file_lines:
0000000000004f70         push       r15                                         ; Begin of unwind block (FDE at 0xdb18), CODE XREF=main+7157
0000000000004f72         push       r14
0000000000004f74         push       r13
0000000000004f76         push       r12
0000000000004f78         push       rbp
0000000000004f79         push       rbx
0000000000004f7a         sub        rsp, 0x2038
0000000000004f81         mov        rax, qword [fs:0x28]
0000000000004f8a         mov        qword [rsp+0x2068+var_40], rax
0000000000004f92         xor        eax, eax
0000000000004f94         test       rdx, rdx
0000000000004f97         mov        qword [rsp+0x2068+var_2060], rdi
0000000000004f9c         mov        qword [rsp+0x2068+var_2058], rcx
0000000000004fa1         mov        qword [rsp+0x2068+var_2050], r8
0000000000004fa6         mov        qword [rsp+0x2068+var_2068], r9
0000000000004faa         je         loc_50d0

0000000000004fb0         mov        rbp, r8
0000000000004fb3         mov        r14d, esi
0000000000004fb6         lea        rbx, qword [rsp+0x2068+var_2048]
0000000000004fbb         sub        rbp, rcx
0000000000004fbe         mov        rsi, r8
0000000000004fc1         mov        rcx, rdi
0000000000004fc4         mov        rax, rbp
0000000000004fc7         mov        edi, r14d
0000000000004fca         mov        r15, rdx
0000000000004fcd         sar        rax, 0x3f
0000000000004fd1         shr        rax, 0x33
0000000000004fd5         add        rbp, rax
0000000000004fd8         and        ebp, 0x1fff
0000000000004fde         sub        rbp, rax
0000000000004fe1         mov        eax, 0x2000
0000000000004fe6         cmove      rbp, rax
0000000000004fea         xor        edx, edx
0000000000004fec         sub        rsi, rbp
0000000000004fef         mov        r13, rsi
0000000000004ff2         call       xlseek                                      ; xlseek
0000000000004ff7         mov        rdx, rbp
0000000000004ffa         mov        rsi, rbx
0000000000004ffd         mov        edi, r14d
0000000000005000         call       safe_read                                   ; safe_read
0000000000005005         cmp        rax, 0xffffffffffffffff
0000000000005009         mov        r12, rax
000000000000500c         je         loc_5140

0000000000005012         mov        rsi, qword [rsp+0x2068+var_2068]
0000000000005016         lea        rax, qword [r13+rax]
000000000000501b         test       r12, r12
000000000000501e         mov        qword [rsi], rax
0000000000005021         je         loc_5072

0000000000005023         movzx      eax, byte [line_end]                        ; line_end
000000000000502a         cmp        byte [rsp+r12+0x2068+var_2049], al
000000000000502f         setne      al
0000000000005032         movzx      eax, al
0000000000005035         sub        r15, rax

                     loc_5038:
0000000000005038         movsx      ebp, byte [line_end]                        ; line_end, CODE XREF=file_lines+338
000000000000503f         mov        rdx, r12
0000000000005042         jmp        loc_5063
0000000000005044         align      8

                     loc_5048:
0000000000005048         mov        rdx, rax                                    ; CODE XREF=file_lines+256
000000000000504b         lea        rcx, qword [r15-1]
000000000000504f         sub        rdx, rbx
0000000000005052         test       r15, r15
0000000000005055         je         loc_5100

000000000000505b         test       rdx, rdx
000000000000505e         mov        r15, rcx
0000000000005061         je         loc_5072

                     loc_5063:
0000000000005063         mov        esi, ebp                                    ; argument "__c" for method j_memrchr, CODE XREF=file_lines+210
0000000000005065         mov        rdi, rbx                                    ; argument "__s" for method j_memrchr
0000000000005068         call       j_memrchr                                   ; memrchr
000000000000506d         test       rax, rax
0000000000005070         jne        loc_5048

                     loc_5072:
0000000000005072         cmp        r13, qword [rsp+0x2068+var_2058]            ; CODE XREF=file_lines+177, file_lines+241
0000000000005077         je         loc_5185

000000000000507d         mov        rcx, qword [rsp+0x2068+var_2060]
0000000000005082         sub        r13, 0x2000
0000000000005089         xor        edx, edx
000000000000508b         mov        rsi, r13
000000000000508e         mov        edi, r14d
0000000000005091         call       xlseek                                      ; xlseek
0000000000005096         mov        edx, 0x2000
000000000000509b         mov        rsi, rbx
000000000000509e         mov        edi, r14d
00000000000050a1         call       safe_read                                   ; safe_read
00000000000050a6         cmp        rax, 0xffffffffffffffff
00000000000050aa         mov        r12, rax
00000000000050ad         je         loc_5140

00000000000050b3         mov        rdi, qword [rsp+0x2068+var_2068]
00000000000050b7         lea        rax, qword [r13+rax]
00000000000050bc         test       r12, r12
00000000000050bf         mov        qword [rdi], rax
00000000000050c2         jne        loc_5038

00000000000050c8         nop        dword [rax+rax]

                     loc_50d0:
00000000000050d0         mov        eax, 0x1                                    ; CODE XREF=file_lines+58

                     loc_50d5:
00000000000050d5         mov        rdi, qword [rsp+0x2068+var_40]              ; CODE XREF=file_lines+460, file_lines+528, file_lines+587
00000000000050dd         xor        rdi, qword [fs:0x28]
00000000000050e6         jne        loc_51c0

00000000000050ec         add        rsp, 0x2038
00000000000050f3         pop        rbx
00000000000050f4         pop        rbp
00000000000050f5         pop        r12
00000000000050f7         pop        r13
00000000000050f9         pop        r14
00000000000050fb         pop        r15
00000000000050fd         ret
                        ; endp
00000000000050fe         align      256

                     loc_5100:
0000000000005100         lea        rsi, qword [r12-1]                          ; CODE XREF=file_lines+229
0000000000005105         cmp        rsi, rdx
0000000000005108         je         loc_5116

000000000000510a         lea        rdi, qword [rax+1]
000000000000510e         sub        rsi, rdx
0000000000005111         call       xwrite_stdout.part.10                       ; xwrite_stdout.part.10

                     loc_5116:
0000000000005116         mov        rcx, qword [rsp+0x2068+var_2050]            ; CODE XREF=file_lines+408
000000000000511b         mov        rsi, qword [rsp+0x2068+var_2060]
0000000000005120         mov        edx, r14d
0000000000005123         xor        edi, edi
0000000000005125         sub        rcx, r12
0000000000005128         sub        rcx, r13
000000000000512b         call       dump_remainder                              ; dump_remainder
0000000000005130         mov        rbx, qword [rsp+0x2068+var_2068]
0000000000005134         add        qword [rbx], rax
0000000000005137         mov        eax, 0x1
000000000000513c         jmp        loc_50d5
000000000000513e         align      64

                     loc_5140:
0000000000005140         mov        rsi, qword [rsp+0x2068+var_2060]            ; CODE XREF=file_lines+156, file_lines+317
0000000000005145         mov        edi, 0x4
000000000000514a         call       quotearg_style                              ; quotearg_style
000000000000514f         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000005156         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000515b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000515d         mov        rbp, rax
0000000000005160         call       j_dcgettext                                 ; dcgettext
0000000000005165         mov        rbx, rax
0000000000005168         call       j___errno_location                          ; __errno_location
000000000000516d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000516f         mov        rcx, rbp
0000000000005172         xor        eax, eax
0000000000005174         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000005177         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005179         call       j_error                                     ; error
000000000000517e         xor        eax, eax
0000000000005180         jmp        loc_50d5

                     loc_5185:
0000000000005185         mov        rbx, qword [rsp+0x2068+var_2060]            ; CODE XREF=file_lines+263
000000000000518a         mov        rsi, r13
000000000000518d         xor        edx, edx
000000000000518f         mov        edi, r14d
0000000000005192         mov        rcx, rbx
0000000000005195         call       xlseek                                      ; xlseek
000000000000519a         mov        rcx, qword [rsp+0x2068+var_2050]
000000000000519f         mov        edx, r14d
00000000000051a2         mov        rsi, rbx
00000000000051a5         xor        edi, edi
00000000000051a7         call       dump_remainder                              ; dump_remainder
00000000000051ac         add        r13, rax
00000000000051af         mov        rax, qword [rsp+0x2068+var_2068]
00000000000051b3         mov        qword [rax], r13
00000000000051b6         mov        eax, 0x1
00000000000051bb         jmp        loc_50d5

                     loc_51c0:
00000000000051c0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=file_lines+374
                        ; endp
00000000000051c5         align      16                                          ; End of unwind block (FDE at 0xdb18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_98: int64_t, -152


                     check_fspec:
00000000000051d0         push       r14                                         ; Begin of unwind block (FDE at 0xdb68), CODE XREF=main+8464, main+9381
00000000000051d2         push       r13
00000000000051d4         push       r12
00000000000051d6         push       rbp
00000000000051d7         push       rbx
00000000000051d8         sub        rsp, 0xa0
00000000000051df         mov        rax, qword [fs:0x28]
00000000000051e8         mov        qword [rsp+0xc8+var_30], rax
00000000000051f0         xor        eax, eax
00000000000051f2         cmp        dword [rdi+0x38], 0xffffffff
00000000000051f6         jne        loc_5220

                     loc_51f8:
00000000000051f8         mov        rax, qword [rsp+0xc8+var_30]                ; CODE XREF=check_fspec+188, check_fspec+212, check_fspec+300, check_fspec+357
0000000000005200         xor        rax, qword [fs:0x28]
0000000000005209         jne        loc_5392

000000000000520f         add        rsp, 0xa0
0000000000005216         pop        rbx
0000000000005217         pop        rbp
0000000000005218         pop        r12
000000000000521a         pop        r13
000000000000521c         pop        r14
000000000000521e         ret
                        ; endp
000000000000521f         align      32

                     loc_5220:
0000000000005220         mov        rbx, rdi                                    ; CODE XREF=check_fspec+38
0000000000005223         mov        rdi, qword [rdi]
0000000000005226         mov        r12, rsi
0000000000005229         call       pretty_name.isra.7                          ; pretty_name.isra.7
000000000000522e         mov        esi, dword [rbx+0x38]                       ; argument "__fildes" for method j___fxstat
0000000000005231         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___fxstat
0000000000005234         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000005239         mov        r13, rax
000000000000523c         call       j___fxstat                                  ; __fxstat
0000000000005241         test       eax, eax
0000000000005243         mov        ebp, eax
0000000000005245         jne        loc_52e0

000000000000524b         mov        eax, dword [rbx+0x30]
000000000000524e         and        eax, 0xf000
0000000000005253         cmp        eax, 0x8000
0000000000005258         je         loc_5308

                     loc_525e:
000000000000525e         cmp        byte [print_headers], 0x0                   ; print_headers, CODE XREF=check_fspec+323, check_fspec+338, check_fspec+351, check_fspec+445
0000000000005265         je         loc_5271

0000000000005267         xor        ebp, ebp
0000000000005269         cmp        qword [r12], rbx
000000000000526d         setne      bpl

                     loc_5271:
0000000000005271         mov        edx, dword [rbx+0x38]                       ; CODE XREF=check_fspec+149
0000000000005274         mov        rcx, 0xffffffffffffffff
000000000000527b         mov        rsi, r13
000000000000527e         mov        edi, ebp
0000000000005280         call       dump_remainder                              ; dump_remainder
0000000000005285         add        qword [rbx+8], rax
0000000000005289         test       rax, rax
000000000000528c         je         loc_51f8

0000000000005292         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fflush_unlocked, stdout@@GLIBC_2.2.5
0000000000005299         mov        qword [r12], rbx
000000000000529d         call       j_fflush_unlocked                           ; fflush_unlocked
00000000000052a2         test       eax, eax
00000000000052a4         je         loc_51f8

00000000000052aa         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error"
00000000000052b1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000052b6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052b8         call       j_dcgettext                                 ; dcgettext
00000000000052bd         mov        rbx, rax
00000000000052c0         call       j___errno_location                          ; __errno_location
00000000000052c5         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000052c7         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000052ca         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000052cf         xor        eax, eax
00000000000052d1         call       j_error                                     ; error
00000000000052d6         nop        word [cs:rax+rax]

                     loc_52e0:
00000000000052e0         call       j___errno_location                          ; __errno_location, CODE XREF=check_fspec+117
00000000000052e5         mov        eax, dword [rax]
00000000000052e7         mov        edi, dword [rbx+0x38]
00000000000052ea         mov        rsi, r13
00000000000052ed         mov        dword [rbx+0x3c], eax
00000000000052f0         call       close_fd                                    ; close_fd
00000000000052f5         mov        dword [rbx+0x38], 0xffffffff
00000000000052fc         jmp        loc_51f8
0000000000005301         align      8

                     loc_5308:
0000000000005308         mov        rax, qword [rbx+8]                          ; CODE XREF=check_fspec+136
000000000000530c         cmp        qword [rsp+0xc8+var_98], rax
0000000000005311         jl         loc_5340

0000000000005313         jne        loc_525e

0000000000005319         mov        rax, qword [rbx+0x10]
000000000000531d         cmp        qword [rsp+0xc8+var_70], rax
0000000000005322         jne        loc_525e

0000000000005328         mov        eax, dword [rsp+0xc8+var_68]
000000000000532c         cmp        dword [rbx+0x18], eax
000000000000532f         jne        loc_525e

0000000000005335         jmp        loc_51f8
000000000000533a         align      64

                     loc_5340:
0000000000005340         mov        rdx, r13                                    ; CODE XREF=check_fspec+321
0000000000005343         mov        esi, 0x3
0000000000005348         xor        edi, edi
000000000000534a         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000534f         lea        rsi, qword [aSFileTruncated]                ; argument "msgid" for method j_dcgettext, "%s: file truncated"
0000000000005356         mov        r14, rax
0000000000005359         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000535e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005360         call       j_dcgettext                                 ; dcgettext
0000000000005365         mov        rcx, r14
0000000000005368         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000536b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000536d         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000536f         xor        eax, eax
0000000000005371         call       j_error                                     ; error
0000000000005376         mov        edi, dword [rbx+0x38]
0000000000005379         mov        rcx, r13
000000000000537c         xor        edx, edx
000000000000537e         xor        esi, esi
0000000000005380         call       xlseek                                      ; xlseek
0000000000005385         mov        qword [rbx+8], 0x0
000000000000538d         jmp        loc_525e

                     loc_5392:
0000000000005392         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_fspec+57
                        ; endp
0000000000005397         align      32                                          ; End of unwind block (FDE at 0xdb68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_98: int64_t, -152


                     fremote:
00000000000053a0         push       r12                                         ; Begin of unwind block (FDE at 0xdbac), CODE XREF=main+3750, recheck+558
00000000000053a2         push       rbp
00000000000053a3         mov        rbp, rsi
00000000000053a6         push       rbx
00000000000053a7         add        rsp, 0xffffffffffffff80
00000000000053ab         mov        rsi, rsp                                    ; argument "__buf" for method j_fstatfs
00000000000053ae         mov        rax, qword [fs:0x28]
00000000000053b7         mov        qword [rsp+0x98+var_20], rax
00000000000053bc         xor        eax, eax
00000000000053be         call       j_fstatfs                                   ; fstatfs
00000000000053c3         test       eax, eax
00000000000053c5         je         loc_5400

00000000000053c7         call       j___errno_location                          ; __errno_location
00000000000053cc         cmp        dword [rax], 0x26
00000000000053cf         mov        r12, rax
00000000000053d2         mov        ebx, 0x1
00000000000053d7         jne        loc_5470

                     loc_53dd:
00000000000053dd         mov        rcx, qword [rsp+0x98+var_20]                ; CODE XREF=fremote+194, fremote+262, fremote+350, fremote+440, fremote+528, fremote+598, fremote+679, fremote+757, fremote+826, fremote+872, fremote+924
00000000000053e2         xor        rcx, qword [fs:0x28]
00000000000053eb         mov        eax, ebx
00000000000053ed         jne        loc_5a87

00000000000053f3         sub        rsp, 0xffffffffffffff80
00000000000053f7         pop        rbx
00000000000053f8         pop        rbp
00000000000053f9         pop        r12
00000000000053fb         ret
                        ; endp
00000000000053fc         align      1024

                     loc_5400:
0000000000005400         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=fremote+37
0000000000005404         cmp        rax, 0x19800202
000000000000540a         je         loc_5460

000000000000540c         jg         loc_54b0

0000000000005412         cmp        rax, clone_quoting_options
0000000000005418         je         loc_5460

000000000000541a         jg         loc_5560

0000000000005420         cmp        rax, 0x3434
0000000000005426         je         loc_5460

0000000000005428         jg         loc_55b8

000000000000542e         cmp        rax, 0x137d
0000000000005434         je         loc_5460

0000000000005436         jle        loc_57f0

000000000000543c         cmp        rax, 0x1cd1
0000000000005442         je         loc_5460

0000000000005444         jg         loc_58c0

000000000000544a         cmp        rax, 0x137f
0000000000005450         je         loc_5460

0000000000005452         cmp        rax, 0x138f
0000000000005458         jne        loc_5690

000000000000545e         nop

                     loc_5460:
0000000000005460         xor        ebx, ebx                                    ; CODE XREF=fremote+106, fremote+120, fremote+134, fremote+148, fremote+162, fremote+176, fremote+278, fremote+288, fremote+302, fremote+316, fremote+330
0000000000005462         jmp        loc_53dd
0000000000005467         align      16

                     loc_5470:
0000000000005470         mov        rsi, rbp                                    ; CODE XREF=fremote+55
0000000000005473         mov        edi, 0x4
0000000000005478         call       quotearg_style                              ; quotearg_style
000000000000547d         lea        rsi, qword [aCannotDetermin]                ; argument "msgid" for method j_dcgettext, "cannot determine location of %s. reverting to polling"
0000000000005484         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005486         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000548b         mov        rbp, rax
000000000000548e         call       j_dcgettext                                 ; dcgettext
0000000000005493         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
0000000000005497         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000549a         mov        rcx, rbp
000000000000549d         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000549f         xor        eax, eax
00000000000054a1         call       j_error                                     ; error
00000000000054a6         jmp        loc_53dd
00000000000054ab         align      16

                     loc_54b0:
00000000000054b0         cmp        rax, 0x6165676c                             ; CODE XREF=fremote+108
00000000000054b6         je         loc_5460

00000000000054b8         jle        loc_5508

00000000000054ba         cmp        rax, 0x73727279
00000000000054c0         je         loc_5460

00000000000054c2         jg         loc_5600

00000000000054c8         cmp        rax, 0x64646178
00000000000054ce         je         loc_5460

00000000000054d0         jg         loc_56e0

00000000000054d6         cmp        rax, 0x62656572
00000000000054dc         je         loc_5460

00000000000054de         jg         loc_5880

00000000000054e4         cmp        rax, 0x62646576
00000000000054ea         je         loc_5460

00000000000054f0         cmp        rax, 0x62656570
00000000000054f6         jne        loc_5690

00000000000054fc         xor        ebx, ebx
00000000000054fe         jmp        loc_53dd
0000000000005503         align      8

                     loc_5508:
0000000000005508         cmp        rax, 0x45584653                             ; CODE XREF=fremote+280
000000000000550e         je         loc_5460

0000000000005514         jg         loc_5650

000000000000551a         cmp        rax, 0x2fc12fc1
0000000000005520         je         loc_5460

0000000000005526         jle        loc_5748

000000000000552c         cmp        rax, 0x42494e4d
0000000000005532         je         loc_5460

0000000000005538         jg         loc_59b0

000000000000553e         cmp        rax, 0x3153464a
0000000000005544         je         loc_5460

000000000000554a         cmp        rax, 0x42465331
0000000000005550         jne        loc_5690

0000000000005556         xor        ebx, ebx
0000000000005558         jmp        loc_53dd
000000000000555d         align      32

                     loc_5560:
0000000000005560         cmp        rax, 0xc0ffee                               ; CODE XREF=fremote+122
0000000000005566         je         loc_5460

000000000000556c         jg         loc_56a0

0000000000005572         cmp        rax, 0xef51
0000000000005578         je         loc_5460

000000000000557e         jle        loc_5850

0000000000005584         cmp        rax, 0x11954
000000000000558a         je         loc_5460

0000000000005590         jg         loc_5908

0000000000005596         cmp        rax, 0xef53
000000000000559c         je         loc_5460

00000000000055a2         cmp        rax, 0xf15f
00000000000055a8         jne        loc_5690

00000000000055ae         xor        ebx, ebx
00000000000055b0         jmp        loc_53dd
00000000000055b5         align      8

                     loc_55b8:
00000000000055b8         cmp        rax, 0x4858                                 ; CODE XREF=fremote+136
00000000000055be         je         loc_5460

00000000000055c4         jg         loc_5818

00000000000055ca         cmp        rax, 0x4006
00000000000055d0         je         loc_5460

00000000000055d6         jg         loc_58a0

00000000000055dc         cmp        rax, 0x4000
00000000000055e2         je         loc_5460

00000000000055e8         cmp        rax, 0x4004
00000000000055ee         jne        loc_5690

00000000000055f4         xor        ebx, ebx
00000000000055f6         jmp        loc_53dd
00000000000055fb         align      512

                     loc_5600:
0000000000005600         mov        edx, 0xc97e8168                             ; CODE XREF=fremote+290
0000000000005605         cmp        rax, rdx
0000000000005608         je         loc_5460

000000000000560e         jg         loc_57a8

0000000000005614         sub        rdx, 0x385b192a
000000000000561b         cmp        rax, rdx
000000000000561e         je         loc_5460

0000000000005624         cmp        rax, rdx
0000000000005627         jg         loc_58e0

000000000000562d         cmp        rax, 0x74726163
0000000000005633         je         loc_5460

0000000000005639         sub        rdx, 0xb9f0f48
0000000000005640         cmp        rax, rdx
0000000000005643         jne        loc_5690

0000000000005645         xor        ebx, ebx
0000000000005647         jmp        loc_53dd
000000000000564c         align      16

                     loc_5650:
0000000000005650         cmp        rax, 0x54190100                             ; CODE XREF=fremote+372
0000000000005656         je         loc_5460

000000000000565c         jg         loc_5710

0000000000005662         cmp        rax, 0x53464846
0000000000005668         je         loc_5460

000000000000566e         jg         loc_5950

0000000000005674         cmp        rax, 0x52654973
000000000000567a         je         loc_5460

0000000000005680         cmp        rax, 0x5346314d
0000000000005686         je         loc_5460

000000000000568c         nop        dword [rax]

                     loc_5690:
0000000000005690         mov        ebx, 0x1                                    ; CODE XREF=fremote+184, fremote+342, fremote+432, fremote+520, fremote+590, fremote+675, fremote+822, fremote+868, fremote+916, fremote+960, fremote+1012
0000000000005695         jmp        loc_53dd
000000000000569a         align      32

                     loc_56a0:
00000000000056a0         cmp        rax, 0x7655821                              ; CODE XREF=fremote+460
00000000000056a6         je         loc_5460

00000000000056ac         jle        loc_5770

00000000000056b2         cmp        rax, 0x11307854
00000000000056b8         je         loc_5460

00000000000056be         jg         loc_59f0

00000000000056c4         cmp        rax, 0x9041934
00000000000056ca         je         loc_5460

00000000000056d0         cmp        rax, 0xbad1dea
00000000000056d6         jne        loc_5690

00000000000056d8         xor        ebx, ebx
00000000000056da         jmp        loc_53dd
00000000000056df         align      32

                     loc_56e0:
00000000000056e0         cmp        rax, 0x6e736673                             ; CODE XREF=fremote+304
00000000000056e6         je         loc_5460

00000000000056ec         jg         loc_5970

00000000000056f2         cmp        rax, 0x67596969
00000000000056f8         je         loc_5460

00000000000056fe         cmp        rax, 0x68191122
0000000000005704         jne        loc_5690

0000000000005706         xor        ebx, ebx
0000000000005708         jmp        loc_53dd
000000000000570d         align      16

                     loc_5710:
0000000000005710         cmp        rax, 0x58465342                             ; CODE XREF=fremote+700
0000000000005716         je         loc_5460

000000000000571c         jg         loc_59d0

0000000000005722         cmp        rax, 0x565a4653
0000000000005728         je         loc_5460

000000000000572e         cmp        rax, 0x58295829
0000000000005734         jne        loc_5690

000000000000573a         xor        ebx, ebx
000000000000573c         jmp        loc_53dd
0000000000005741         align      8

                     loc_5748:
0000000000005748         cmp        rax, 0x24051905                             ; CODE XREF=fremote+390
000000000000574e         je         loc_5460

0000000000005754         jg         loc_5930

000000000000575a         cmp        rax, 0x1badface
0000000000005760         jne        loc_5690

0000000000005766         xor        ebx, ebx
0000000000005768         jmp        loc_53dd
000000000000576d         align      16

                     loc_5770:
0000000000005770         cmp        rax, 0x12fd16d                              ; CODE XREF=fremote+780
0000000000005776         je         loc_5460

000000000000577c         jg         loc_5a70

0000000000005782         cmp        rax, 0x1021994
0000000000005788         je         loc_5460

000000000000578e         cmp        rax, 0x1021997
0000000000005794         jne        loc_5690

000000000000579a         xor        ebx, ebx
000000000000579c         jmp        loc_53dd
00000000000057a1         align      8

                     loc_57a8:
00000000000057a8         mov        edx, 0xf2f52010                             ; CODE XREF=fremote+622
00000000000057ad         cmp        rax, rdx
00000000000057b0         je         loc_5460

00000000000057b6         cmp        rax, rdx
00000000000057b9         jg         loc_5a28

00000000000057bf         sub        rdx, 0x27f6d5ff
00000000000057c6         cmp        rax, rdx
00000000000057c9         je         loc_5460

00000000000057cf         add        rdx, 0x136037d3
00000000000057d6         cmp        rax, rdx
00000000000057d9         jne        loc_5690

00000000000057df         xor        ebx, ebx
00000000000057e1         jmp        loc_53dd
00000000000057e6         align      16

                     loc_57f0:
00000000000057f0         cmp        rax, 0x187                                  ; CODE XREF=fremote+150
00000000000057f6         je         loc_5460

00000000000057fc         jg         loc_5990

0000000000005802         cmp        rax, 0x2f
0000000000005806         jne        loc_5690

000000000000580c         xor        ebx, ebx
000000000000580e         jmp        loc_53dd
0000000000005813         align      8

                     loc_5818:
0000000000005818         cmp        rax, 0x5df5                                 ; CODE XREF=fremote+548
000000000000581e         je         loc_5460

0000000000005824         jg         loc_5a50

000000000000582a         cmp        rax, 0x4d44
0000000000005830         je         loc_5460

0000000000005836         cmp        rax, 0x4d5a
000000000000583c         jne        loc_5690

0000000000005842         xor        ebx, ebx
0000000000005844         jmp        loc_53dd
0000000000005849         align      16

                     loc_5850:
0000000000005850         cmp        rax, 0xadf5                                 ; CODE XREF=fremote+478
0000000000005856         je         loc_5460

000000000000585c         jg         loc_5a10

0000000000005862         sub        rax, 0x9fa0
0000000000005868         cmp        rax, 0x2
000000000000586c         ja         loc_5690

0000000000005872         xor        ebx, ebx
0000000000005874         jmp        loc_53dd
0000000000005879         align      128

                     loc_5880:
0000000000005880         cmp        rax, 0x63677270                             ; CODE XREF=fremote+318
0000000000005886         je         loc_5460

000000000000588c         cmp        rax, 0x64626720
0000000000005892         jne        loc_5690

0000000000005898         xor        ebx, ebx
000000000000589a         jmp        loc_53dd
000000000000589f         align      32

                     loc_58a0:
00000000000058a0         cmp        rax, 0x4244                                 ; CODE XREF=fremote+566
00000000000058a6         je         loc_5460

00000000000058ac         cmp        rax, 0x482b
00000000000058b2         jne        loc_5690

00000000000058b8         xor        ebx, ebx
00000000000058ba         jmp        loc_53dd
00000000000058bf         align      64

                     loc_58c0:
00000000000058c0         cmp        rax, 0x2468                                 ; CODE XREF=fremote+164
00000000000058c6         je         loc_5460

00000000000058cc         cmp        rax, 0x2478
00000000000058d2         jne        loc_5690

00000000000058d8         xor        ebx, ebx
00000000000058da         jmp        loc_53dd
00000000000058df         align      32

                     loc_58e0:
00000000000058e0         mov        edx, 0x958458f6                             ; CODE XREF=fremote+647
00000000000058e5         cmp        rax, rdx
00000000000058e8         je         loc_5460

00000000000058ee         add        rdx, 0x1635c07e
00000000000058f5         cmp        rax, rdx
00000000000058f8         jne        loc_5690

00000000000058fe         xor        ebx, ebx
0000000000005900         jmp        loc_53dd
0000000000005905         align      8

                     loc_5908:
0000000000005908         cmp        rax, 0x27e0eb                               ; CODE XREF=fremote+496
000000000000590e         je         loc_5460

0000000000005914         cmp        rax, 0x414a53
000000000000591a         jne        loc_5690

0000000000005920         xor        ebx, ebx
0000000000005922         jmp        loc_53dd
0000000000005927         align      16

                     loc_5930:
0000000000005930         cmp        rax, 0x28cd3d45                             ; CODE XREF=fremote+948
0000000000005936         je         loc_5460

000000000000593c         cmp        rax, 0x2bad1dea
0000000000005942         jne        loc_5690

0000000000005948         xor        ebx, ebx
000000000000594a         jmp        loc_53dd
000000000000594f         align      16

                     loc_5950:
0000000000005950         cmp        rax, 0x5346544e                             ; CODE XREF=fremote+718
0000000000005956         je         loc_5460

000000000000595c         cmp        rax, 0x534f434b
0000000000005962         jne        loc_5690

0000000000005968         xor        ebx, ebx
000000000000596a         jmp        loc_53dd
000000000000596f         align      16

                     loc_5970:
0000000000005970         cmp        rax, 0x73636673                             ; CODE XREF=fremote+844
0000000000005976         je         loc_5460

000000000000597c         cmp        rax, 0x73717368
0000000000005982         jne        loc_5690

0000000000005988         xor        ebx, ebx
000000000000598a         jmp        loc_53dd
000000000000598f         align      16

                     loc_5990:
0000000000005990         cmp        rax, 0x7c0                                  ; CODE XREF=fremote+1116
0000000000005996         je         loc_5460

000000000000599c         cmp        rax, 0x1373
00000000000059a2         jne        loc_5690

00000000000059a8         xor        ebx, ebx
00000000000059aa         jmp        loc_53dd
00000000000059af         align      16

                     loc_59b0:
00000000000059b0         cmp        rax, 0x43415d53                             ; CODE XREF=fremote+408
00000000000059b6         je         loc_5460

00000000000059bc         cmp        rax, 0x453dcd28
00000000000059c2         jne        loc_5690

00000000000059c8         xor        ebx, ebx
00000000000059ca         jmp        loc_53dd
00000000000059cf         align      16

                     loc_59d0:
00000000000059d0         cmp        rax, 0x5a3c69f0                             ; CODE XREF=fremote+892
00000000000059d6         je         loc_5460

00000000000059dc         cmp        rax, 0x5dca2df5
00000000000059e2         jne        loc_5690

00000000000059e8         xor        ebx, ebx
00000000000059ea         jmp        loc_53dd
00000000000059ef         align      16

                     loc_59f0:
00000000000059f0         cmp        rax, 0x13661366                             ; CODE XREF=fremote+798
00000000000059f6         je         loc_5460

00000000000059fc         cmp        rax, 0x15013346
0000000000005a02         jne        loc_5690

0000000000005a08         xor        ebx, ebx
0000000000005a0a         jmp        loc_53dd
0000000000005a0f         align      16

                     loc_5a10:
0000000000005a10         cmp        rax, 0xadff                                 ; CODE XREF=fremote+1212
0000000000005a16         jne        loc_5690

0000000000005a1c         xor        ebx, ebx
0000000000005a1e         jmp        loc_53dd
0000000000005a23         align      8

                     loc_5a28:
0000000000005a28         mov        edx, 0xf97cff8c                             ; CODE XREF=fremote+1049
0000000000005a2d         cmp        rax, rdx
0000000000005a30         je         loc_5460

0000000000005a36         add        rdx, 0x18e8bd
0000000000005a3d         cmp        rax, rdx
0000000000005a40         jne        loc_5690

0000000000005a46         xor        ebx, ebx
0000000000005a48         jmp        loc_53dd
0000000000005a4d         align      16

                     loc_5a50:
0000000000005a50         cmp        rax, 0x7275                                 ; CODE XREF=fremote+1156
0000000000005a56         je         loc_5460

0000000000005a5c         cmp        rax, 0x72b6
0000000000005a62         jne        loc_5690

0000000000005a68         xor        ebx, ebx
0000000000005a6a         jmp        loc_53dd
0000000000005a6f         align      16

                     loc_5a70:
0000000000005a70         sub        rax, 0x12ff7b4                              ; CODE XREF=fremote+988
0000000000005a76         cmp        rax, 0x3
0000000000005a7a         ja         loc_5690

0000000000005a80         xor        ebx, ebx
0000000000005a82         jmp        loc_53dd

                     loc_5a87:
0000000000005a87         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fremote+77
                        ; endp
0000000000005a8c         align      16                                          ; End of unwind block (FDE at 0xdbac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_C0: int32_t, -192
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E1: int8_t, -225


                     recheck:
0000000000005a90         push       r15                                         ; Begin of unwind block (FDE at 0xdbe0), CODE XREF=main+5914, main+6428, main+8499, main+9305, main+9859, main+10037
0000000000005a92         push       r14
0000000000005a94         mov        ecx, 0x2
0000000000005a99         push       r13
0000000000005a9b         push       r12
0000000000005a9d         mov        r13d, esi
0000000000005aa0         push       rbp
0000000000005aa1         push       rbx
0000000000005aa2         mov        rbx, rdi
0000000000005aa5         sub        rsp, 0xb8
0000000000005aac         mov        r14d, dword [rbx+0x3c]
0000000000005ab0         mov        rax, qword [fs:0x28]
0000000000005ab9         mov        qword [rsp+0xe8+var_40], rax
0000000000005ac1         xor        eax, eax
0000000000005ac3         mov        rax, qword [rdi]
0000000000005ac6         lea        rdi, qword [aUsrlocalsharel+25]             ; 0xb7ef
0000000000005acd         mov        rsi, rax
0000000000005ad0         rep  cmpsb byte [rsi], byte [rdi]
0000000000005ad2         movzx      ecx, byte [rbx+0x36]
0000000000005ad6         seta       bpl
0000000000005ada         sbb        bpl, 0x0
0000000000005ade         movsx      ebp, bpl
0000000000005ae2         test       ebp, ebp
0000000000005ae4         mov        byte [rsp+0xe8+var_E1], cl
0000000000005ae8         je         loc_5c00

0000000000005aee         xor        esi, esi
0000000000005af0         test       r13b, r13b
0000000000005af3         mov        rdi, rax
0000000000005af6         sete       sil
0000000000005afa         xor        eax, eax
0000000000005afc         shl        esi, 0xb
0000000000005aff         call       open_safer                                  ; open_safer
0000000000005b04         mov        r12d, eax
0000000000005b07         mov        eax, dword [rbx+0x3c]

                     loc_5b0a:
0000000000005b0a         cmp        dword [rbx+0x38], 0xffffffff                ; CODE XREF=recheck+374
0000000000005b0e         sete       dl
0000000000005b11         test       eax, eax
0000000000005b13         sete       al
0000000000005b16         cmp        dl, al
0000000000005b18         je         loc_60bb

0000000000005b1e         movzx      r15d, byte [reopen_inaccessible_files]      ; reopen_inaccessible_files
0000000000005b26         movzx      eax, byte [disable_inotify]                 ; disable_inotify
0000000000005b2d         test       r15b, r15b
0000000000005b30         jne        loc_5c10

0000000000005b36         test       al, al
0000000000005b38         mov        byte [rbx+0x36], 0x1
0000000000005b3c         je         loc_5ee8

                     loc_5b42:
0000000000005b42         cmp        r12d, 0xffffffff                            ; CODE XREF=recheck+1135, recheck+1155
0000000000005b46         jne        loc_5f70

                     loc_5b4c:
0000000000005b4c         movzx      r15d, byte [rbx+0x36]                       ; CODE XREF=recheck+429, recheck+1500, recheck+1520
0000000000005b51         mov        rbp, qword [rbx]
0000000000005b54         call       j___errno_location                          ; __errno_location
0000000000005b59         mov        r13, rax
0000000000005b5c         mov        eax, dword [rax]
0000000000005b5e         test       r15b, r15b
0000000000005b61         mov        dword [rbx+0x3c], eax
0000000000005b64         je         loc_5db9

0000000000005b6a         cmp        dword [r13], r14d
0000000000005b6e         je         loc_5ba1

0000000000005b70         mov        rdi, rbp
0000000000005b73         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005b78         mov        esi, 0x3
0000000000005b7d         mov        rdx, rax
0000000000005b80         xor        edi, edi
0000000000005b82         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000005b87         mov        esi, dword [r13]                            ; argument "__errnum" for method j_error
0000000000005b8b         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc9cc
0000000000005b92         mov        rcx, rax
0000000000005b95         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005b97         xor        eax, eax
0000000000005b99         call       j_error                                     ; error
0000000000005b9e         mov        rbp, qword [rbx]

                     loc_5ba1:
0000000000005ba1         mov        rdi, rbp                                    ; CODE XREF=recheck+222, recheck+814, recheck+884, recheck+987, recheck+1100, recheck+1235, recheck+1627
0000000000005ba4         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005ba9         mov        edi, r12d
0000000000005bac         mov        rsi, rax
0000000000005baf         call       close_fd                                    ; close_fd
0000000000005bb4         mov        rdi, qword [rbx]
0000000000005bb7         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005bbc         mov        edi, dword [rbx+0x38]
0000000000005bbf         mov        rsi, rax
0000000000005bc2         call       close_fd                                    ; close_fd
0000000000005bc7         mov        dword [rbx+0x38], 0xffffffff

                     loc_5bce:
0000000000005bce         mov        rax, qword [rsp+0xe8+var_40]                ; CODE XREF=recheck+772, recheck+1378
0000000000005bd6         xor        rax, qword [fs:0x28]
0000000000005bdf         jne        loc_60b6

0000000000005be5         add        rsp, 0xb8
0000000000005bec         pop        rbx
0000000000005bed         pop        rbp
0000000000005bee         pop        r12
0000000000005bf0         pop        r13
0000000000005bf2         pop        r14
0000000000005bf4         pop        r15
0000000000005bf6         ret
                        ; endp
0000000000005bf7         align      1024

                     loc_5c00:
0000000000005c00         mov        eax, r14d                                   ; CODE XREF=recheck+88
0000000000005c03         xor        r12d, r12d
0000000000005c06         jmp        loc_5b0a
0000000000005c0b         align      16

                     loc_5c10:
0000000000005c10         cmp        r12d, 0xffffffff                            ; CODE XREF=recheck+160
0000000000005c14         je         loc_5da0

0000000000005c1a         test       al, al
0000000000005c1c         mov        byte [rbx+0x36], 0x1
0000000000005c20         lea        r8, qword [rsp+0xe8+var_D8]
0000000000005c25         je         loc_5f80

                     loc_5c2b:
0000000000005c2b         mov        rdx, r8                                     ; argument "__stat_buf" for method j___fxstat, CODE XREF=recheck+1253, recheck+1292, recheck+1312
0000000000005c2e         mov        esi, r12d                                   ; argument "__fildes" for method j___fxstat
0000000000005c31         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000005c36         call       j___fxstat                                  ; __fxstat
0000000000005c3b         test       eax, eax
0000000000005c3d         js         loc_5b4c

0000000000005c43         mov        edx, dword [rsp+0xe8+var_C0]
0000000000005c47         mov        eax, edx
0000000000005c49         and        eax, 0xf000
0000000000005c4e         sub        eax, 0x1000
0000000000005c53         test       eax, 0xffffe000
0000000000005c58         je         loc_5cb0

0000000000005c5a         and        edx, 0xb000
0000000000005c60         cmp        edx, 0x8000
0000000000005c66         je         loc_5cb0

0000000000005c68         test       r15b, r15b
0000000000005c6b         mov        dword [rbx+0x3c], 0xffffffff
0000000000005c72         mov        byte [rbx+0x36], 0x0
0000000000005c76         je         loc_5e70

0000000000005c7c         cmp        dword [follow_mode], 0x1                    ; follow_mode
0000000000005c83         jne        loc_5e70

0000000000005c89         cmp        byte [rsp+0xe8+var_E1], 0x0
0000000000005c8e         mov        byte [rbx+0x34], 0x0
0000000000005c92         mov        rbp, qword [rbx]
0000000000005c95         je         loc_60da

0000000000005c9b         lea        r13, qword [aWrittenBySSAnd+27]             ; 0xd001
0000000000005ca2         jmp        loc_5e9a
0000000000005ca7         align      16

                     loc_5cb0:
0000000000005cb0         mov        rdi, qword [rbx]                            ; CODE XREF=recheck+456, recheck+470
0000000000005cb3         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005cb8         mov        edi, r12d
0000000000005cbb         mov        rsi, rax
0000000000005cbe         call       fremote                                     ; fremote
0000000000005cc3         test       al, al
0000000000005cc5         mov        byte [rbx+0x35], al
0000000000005cc8         jne        loc_5e10

                     loc_5cce:
0000000000005cce         and        r14d, 0xfffffffd                            ; CODE XREF=recheck+903
0000000000005cd2         mov        dword [rbx+0x3c], 0x0
0000000000005cd9         mov        eax, dword [rbx+0x38]
0000000000005cdc         je         loc_5fc0

0000000000005ce2         cmp        eax, 0xffffffff
0000000000005ce5         jne        loc_60f0

0000000000005ceb         mov        rdi, qword [rbx]
0000000000005cee         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005cf3         mov        edi, 0x4
0000000000005cf8         mov        rsi, rax
0000000000005cfb         call       quotearg_style                              ; quotearg_style
0000000000005d00         lea        rsi, qword [aSHasBecomeAcce]                ; "%s has become accessible"
0000000000005d07         mov        r14, rax
0000000000005d0a         mov        edx, 0x5

                     loc_5d0f:
0000000000005d0f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=recheck+1569
0000000000005d11         call       j_dcgettext                                 ; dcgettext
0000000000005d16         mov        rcx, r14
0000000000005d19         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005d1c         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005d1e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005d20         xor        eax, eax
0000000000005d22         call       j_error                                     ; error

                     loc_5d27:
0000000000005d27         test       ebp, ebp                                    ; CODE XREF=recheck+1468
0000000000005d29         mov        eax, 0xffffffff
0000000000005d2e         movzx      r13d, r13b
0000000000005d32         cmove      r13d, eax
0000000000005d36         mov        rax, qword [rsp+0xe8+var_80]
0000000000005d3b         mov        rdi, qword [rbx]
0000000000005d3e         mov        dword [rbx+0x38], r12d
0000000000005d42         mov        qword [rbx+8], 0x0
0000000000005d4a         mov        dword [rbx+0x40], r13d
0000000000005d4e         mov        qword [rbx+0x58], 0x0
0000000000005d56         mov        qword [rbx+0x10], rax
0000000000005d5a         mov        rax, qword [rsp+0xe8+var_78]
0000000000005d5f         mov        byte [rbx+0x34], 0x0
0000000000005d63         mov        qword [rbx+0x18], rax
0000000000005d67         mov        rax, qword [rsp+0xe8+var_D8]
0000000000005d6c         mov        qword [rbx+0x20], rax
0000000000005d70         mov        rax, qword [rsp+0xe8+var_D0]
0000000000005d75         mov        qword [rbx+0x28], rax
0000000000005d79         mov        eax, dword [rsp+0xe8+var_C0]
0000000000005d7d         mov        dword [rbx+0x30], eax
0000000000005d80         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005d85         xor        edx, edx
0000000000005d87         mov        rcx, rax
0000000000005d8a         xor        esi, esi
0000000000005d8c         mov        edi, r12d
0000000000005d8f         call       xlseek                                      ; xlseek
0000000000005d94         jmp        loc_5bce
0000000000005d99         align      32

                     loc_5da0:
0000000000005da0         test       al, al                                      ; CODE XREF=recheck+388
0000000000005da2         mov        byte [rbx+0x36], 0x0
0000000000005da6         mov        rbp, qword [rbx]
0000000000005da9         je         loc_6058

0000000000005daf         call       j___errno_location                          ; __errno_location
0000000000005db4         mov        eax, dword [rax]
0000000000005db6         mov        dword [rbx+0x3c], eax

                     loc_5db9:
0000000000005db9         cmp        byte [rsp+0xe8+var_E1], 0x0                 ; CODE XREF=recheck+212
0000000000005dbe         je         loc_5ba1

0000000000005dc4         mov        rdi, rbp
0000000000005dc7         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005dcc         mov        edi, 0x4
0000000000005dd1         mov        rsi, rax
0000000000005dd4         call       quotearg_style                              ; quotearg_style
0000000000005dd9         lea        rsi, qword [aSHasBecomeInac]                ; argument "msgid" for method j_dcgettext, "%s has become inaccessible"
0000000000005de0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005de5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005de7         mov        rbp, rax
0000000000005dea         call       j_dcgettext                                 ; dcgettext
0000000000005def         mov        esi, dword [rbx+0x3c]                       ; argument "__errnum" for method j_error
0000000000005df2         mov        rcx, rbp
0000000000005df5         mov        rdx, rax                                    ; argument "__format" for method j_error, DATA XREF=fremote+1144
0000000000005df8         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005dfa         xor        eax, eax
0000000000005dfc         call       j_error                                     ; error
0000000000005e01         mov        rbp, qword [rbx]
0000000000005e04         jmp        loc_5ba1
0000000000005e09         align      16

                     loc_5e10:
0000000000005e10         cmp        byte [disable_inotify], 0x0                 ; disable_inotify, CODE XREF=recheck+568
0000000000005e17         jne        loc_5cce

0000000000005e1d         mov        rdi, qword [rbx]
0000000000005e20         mov        dword [rbx+0x3c], 0xffffffff
0000000000005e27         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005e2c         mov        edi, 0x4
0000000000005e31         mov        rsi, rax
0000000000005e34         call       quotearg_style                              ; quotearg_style
0000000000005e39         lea        rsi, qword [aSHasBeenReplac_baf0]           ; argument "msgid" for method j_dcgettext, "%s has been replaced with an untailable remote file"
0000000000005e40         mov        rbp, rax
0000000000005e43         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005e48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005e4a         call       j_dcgettext                                 ; dcgettext
0000000000005e4f         mov        rcx, rbp
0000000000005e52         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005e55         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005e57         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005e59         xor        eax, eax
0000000000005e5b         call       j_error                                     ; error
0000000000005e60         mov        byte [rbx+0x34], 0x1
0000000000005e64         mov        byte [rbx+0x35], 0x1
0000000000005e68         mov        rbp, qword [rbx]
0000000000005e6b         jmp        loc_5ba1

                     loc_5e70:
0000000000005e70         cmp        byte [rsp+0xe8+var_E1], 0x0                 ; CODE XREF=recheck+486, recheck+499
0000000000005e75         mov        byte [rbx+0x34], 0x1
0000000000005e79         jne        loc_5e81

0000000000005e7b         cmp        r14d, 0xffffffff
0000000000005e7f         je         loc_5ed9

                     loc_5e81:
0000000000005e81         lea        rsi, qword [aGivingUpOnThis]                ; argument "msgid" for method j_dcgettext, "; giving up on this name", CODE XREF=recheck+1001
0000000000005e88         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005e8d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005e8f         call       j_dcgettext                                 ; dcgettext
0000000000005e94         mov        rbp, qword [rbx]
0000000000005e97         mov        r13, rax

                     loc_5e9a:
0000000000005e9a         mov        rdi, rbp                                    ; CODE XREF=recheck+530, recheck+1621
0000000000005e9d         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005ea2         mov        edi, 0x4
0000000000005ea7         mov        rsi, rax
0000000000005eaa         call       quotearg_style                              ; quotearg_style
0000000000005eaf         lea        rsi, qword [aSHasBeenReplac]                ; argument "msgid" for method j_dcgettext, "%s has been replaced with an untailable file%s"
0000000000005eb6         mov        rbp, rax
0000000000005eb9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005ebe         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005ec0         call       j_dcgettext                                 ; dcgettext
0000000000005ec5         mov        r8, r13
0000000000005ec8         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005ecb         mov        rcx, rbp
0000000000005ece         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005ed0         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005ed2         xor        eax, eax
0000000000005ed4         call       j_error                                     ; error

                     loc_5ed9:
0000000000005ed9         mov        rbp, qword [rbx]                            ; CODE XREF=recheck+1007
0000000000005edc         jmp        loc_5ba1
0000000000005ee1         align      8

                     loc_5ee8:
0000000000005ee8         lea        r8, qword [rsp+0xe8+var_D8]                 ; CODE XREF=recheck+172
0000000000005eed         mov        rsi, qword [rbx]                            ; argument "__filename" for method j___lxstat
0000000000005ef0         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000005ef5         mov        rdx, r8                                     ; argument "__stat_buf" for method j___lxstat
0000000000005ef8         call       j___lxstat                                  ; __lxstat
0000000000005efd         test       eax, eax
0000000000005eff         jne        loc_5b42

0000000000005f05         mov        eax, dword [rsp+0xe8+var_C0]
0000000000005f09         and        eax, 0xf000
0000000000005f0e         cmp        eax, 0xa000
0000000000005f13         jne        loc_5b42

                     loc_5f19:
0000000000005f19         mov        rdi, qword [rbx]                            ; CODE XREF=recheck+1318, recheck+1526
0000000000005f1c         mov        dword [rbx+0x3c], 0xffffffff
0000000000005f23         mov        byte [rbx+0x34], 0x1
0000000000005f27         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005f2c         mov        edi, 0x4
0000000000005f31         mov        rsi, rax
0000000000005f34         call       quotearg_style                              ; quotearg_style
0000000000005f39         lea        rsi, qword [aSHasBeenReplac_ba88]           ; argument "msgid" for method j_dcgettext, "%s has been replaced with an untailable symbolic link"
0000000000005f40         mov        rbp, rax
0000000000005f43         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005f48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005f4a         call       j_dcgettext                                 ; dcgettext
0000000000005f4f         mov        rcx, rbp
0000000000005f52         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005f55         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005f57         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005f59         xor        eax, eax
0000000000005f5b         call       j_error                                     ; error
0000000000005f60         mov        rbp, qword [rbx]
0000000000005f63         jmp        loc_5ba1
0000000000005f68         align      16

                     loc_5f70:
0000000000005f70         lea        r8, qword [rsp+0xe8+var_D8]                 ; CODE XREF=recheck+182
0000000000005f75         jmp        loc_5c2b
0000000000005f7a         align      128

                     loc_5f80:
0000000000005f80         mov        rsi, qword [rbx]                            ; argument "__filename" for method j___lxstat, CODE XREF=recheck+405
0000000000005f83         mov        rdx, r8                                     ; argument "__stat_buf" for method j___lxstat
0000000000005f86         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000005f8b         mov        qword [rsp+0xe8+var_E0], r8
0000000000005f90         call       j___lxstat                                  ; __lxstat
0000000000005f95         test       eax, eax
0000000000005f97         mov        r8, qword [rsp+0xe8+var_E0]
0000000000005f9c         jne        loc_5c2b

0000000000005fa2         mov        eax, dword [rsp+0xe8+var_C0]
0000000000005fa6         and        eax, 0xf000
0000000000005fab         cmp        eax, 0xa000
0000000000005fb0         jne        loc_5c2b

0000000000005fb6         jmp        loc_5f19
0000000000005fbb         align      64

                     loc_5fc0:
0000000000005fc0         cmp        eax, 0xffffffff                             ; CODE XREF=recheck+588
0000000000005fc3         mov        rdi, qword [rbx]
0000000000005fc6         je         loc_6090

0000000000005fcc         mov        rax, qword [rsp+0xe8+var_D0]
0000000000005fd1         cmp        qword [rbx+0x28], rax
0000000000005fd5         jne        loc_6000

0000000000005fd7         mov        rax, qword [rsp+0xe8+var_D8]
0000000000005fdc         cmp        qword [rbx+0x20], rax
0000000000005fe0         jne        loc_6000

0000000000005fe2         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000005fe7         mov        edi, r12d
0000000000005fea         mov        rsi, rax
0000000000005fed         call       close_fd                                    ; close_fd
0000000000005ff2         jmp        loc_5bce
0000000000005ff7         align      8192

                     loc_6000:
0000000000006000         call       pretty_name.isra.7                          ; pretty_name.isra.7, CODE XREF=recheck+1349, recheck+1360
0000000000006005         mov        edi, 0x4
000000000000600a         mov        rsi, rax
000000000000600d         call       quotearg_style                              ; quotearg_style
0000000000006012         lea        rsi, qword [aSHasBeenReplac_bb50]           ; argument "msgid" for method j_dcgettext, "%s has been replaced;  following new file"
0000000000006019         mov        r14, rax
000000000000601c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000601e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006023         call       j_dcgettext                                 ; dcgettext
0000000000006028         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000602a         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000602d         mov        rcx, r14
0000000000006030         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006032         xor        eax, eax
0000000000006034         call       j_error                                     ; error
0000000000006039         mov        rdi, qword [rbx]
000000000000603c         call       pretty_name.isra.7                          ; pretty_name.isra.7
0000000000006041         mov        edi, dword [rbx+0x38]
0000000000006044         mov        rsi, rax
0000000000006047         call       close_fd                                    ; close_fd
000000000000604c         jmp        loc_5d27
0000000000006051         align      8

                     loc_6058:
0000000000006058         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___lxstat, CODE XREF=recheck+793
000000000000605d         mov        rsi, rbp                                    ; argument "__filename" for method j___lxstat
0000000000006060         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000006065         call       j___lxstat                                  ; __lxstat
000000000000606a         test       eax, eax
000000000000606c         jne        loc_5b4c

0000000000006072         mov        eax, dword [rsp+0xe8+var_C0]
0000000000006076         and        eax, 0xf000
000000000000607b         cmp        eax, 0xa000
0000000000006080         jne        loc_5b4c

0000000000006086         jmp        loc_5f19
000000000000608b         align      16

                     loc_6090:
0000000000006090         call       pretty_name.isra.7                          ; pretty_name.isra.7, CODE XREF=recheck+1334
0000000000006095         mov        edi, 0x4
000000000000609a         mov        rsi, rax
000000000000609d         call       quotearg_style                              ; quotearg_style
00000000000060a2         mov        edx, 0x5
00000000000060a7         mov        r14, rax
00000000000060aa         lea        rsi, qword [aSHasAppearedFo]                ; "%s has appeared;  following new file"
00000000000060b1         jmp        loc_5d0f

                     loc_60b6:
00000000000060b6         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=recheck+335
                        ; endp

                     loc_60bb:
00000000000060bb         lea        rcx, qword [__PRETTY_FUNCTION__.7576]       ; argument "__function" for method j___assert_fail, "recheck", CODE XREF=recheck+136
00000000000060c2         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/tail.c"
00000000000060c9         lea        rdi, qword [aValidfilespecF]                ; argument "__assertion" for method j___assert_fail, "valid_file_spec (f)"
00000000000060d0         mov        edx, 0x3df                                  ; argument "__line" for method j___assert_fail
00000000000060d5         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_60da:
00000000000060da         add        r14d, 0x1                                   ; CODE XREF=recheck+517
00000000000060de         lea        r13, qword [aWrittenBySSAnd+27]             ; 0xd001
00000000000060e5         jne        loc_5e9a

00000000000060eb         jmp        loc_5ba1

                     loc_60f0:
00000000000060f0         lea        rcx, qword [__PRETTY_FUNCTION__.7576]       ; argument "__function" for method j___assert_fail, "recheck", CODE XREF=recheck+597
00000000000060f7         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/tail.c"
00000000000060fe         lea        rdi, qword [aFfd1]                          ; argument "__assertion" for method j___assert_fail, "f->fd == -1"
0000000000006105         mov        edx, 0x42c                                  ; argument "__line" for method j___assert_fail
000000000000610a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000610f         align      16                                          ; End of unwind block (FDE at 0xdbe0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000006110         push       r13                                         ; Begin of unwind block (FDE at 0xdc30), CODE XREF=main+7413, main+7462, __argmatch_die+5
0000000000006112         push       r12
0000000000006114         mov        edx, 0x5
0000000000006119         push       rbp
000000000000611a         push       rbx
000000000000611b         mov        ebp, edi
000000000000611d         sub        rsp, 0x88
0000000000006124         mov        rbx, qword [program_name]                   ; program_name
000000000000612b         mov        rax, qword [fs:0x28]
0000000000006134         mov        qword [rsp+0xa8+var_30], rax
0000000000006139         xor        eax, eax
000000000000613b         test       edi, edi
000000000000613d         je         loc_616d

000000000000613f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000006146         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006148         call       j_dcgettext                                 ; dcgettext
000000000000614d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000006154         mov        rdx, rax
0000000000006157         mov        rcx, rbx
000000000000615a         mov        esi, 0x1
000000000000615f         xor        eax, eax
0000000000006161         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_6166:
0000000000006166         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1014
0000000000006168         call       j_exit                                      ; exit
                        ; endp

                     loc_616d:
000000000000616d         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n", CODE XREF=usage+45
0000000000006174         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006176         call       j_dcgettext                                 ; dcgettext
000000000000617b         mov        rdx, rbx
000000000000617e         mov        rsi, rax
0000000000006181         mov        edi, 0x1
0000000000006186         xor        eax, eax
0000000000006188         call       j___printf_chk                              ; __printf_chk
000000000000618d         lea        rsi, qword [aPrintTheLastDL]                ; argument "msgid" for method j_dcgettext, "Print the last %d lines of each FILE to standard output.\\nWith more than one FILE, precede each with a header giving the file name.\\n"
0000000000006194         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006196         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000619b         call       j_dcgettext                                 ; dcgettext
00000000000061a0         mov        edx, 0xa
00000000000061a5         mov        rsi, rax
00000000000061a8         mov        edi, 0x1
00000000000061ad         xor        eax, eax
00000000000061af         call       j___printf_chk                              ; __printf_chk
00000000000061b4         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000061bb         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
00000000000061c2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000061c7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000061c9         call       j_dcgettext                                 ; dcgettext
00000000000061ce         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000061d1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000061d4         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000061d9         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000061e0         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
00000000000061e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000061ec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000061ee         call       j_dcgettext                                 ; dcgettext
00000000000061f3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000061f6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000061f9         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000061fe         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006205         lea        rsi, qword [aCBytesnumOutpu]                ; argument "msgid" for method j_dcgettext, "  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +NUM to\\n                             output starting with byte NUM of each file\\n"
000000000000620c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006211         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006213         call       j_dcgettext                                 ; dcgettext
0000000000006218         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000621b         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000621e         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000006223         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000622a         lea        rsi, qword [aFFollownamedes]                ; argument "msgid" for method j_dcgettext, "  -f, --follow[={name|descriptor}]\\n                           output appended data as the file grows;\\n                             an absent option argument means 'descriptor'\\n  -F                       same as --follow=name --retry\\n"
0000000000006231         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006236         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006238         call       j_dcgettext                                 ; dcgettext
000000000000623d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006240         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006243         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000006248         lea        rsi, qword [aNLinesnumOutpu]                ; argument "msgid" for method j_dcgettext, "  -n, --lines=[+]NUM       output the last NUM lines, instead of the last %d;\\n                             or use -n +NUM to output starting with line NUM\\n      --max-unchanged-stats=N\\n                           with --follow=name, reopen a FILE which has …"
000000000000624f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006251         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006256         call       j_dcgettext                                 ; dcgettext
000000000000625b         mov        ecx, 0x5
0000000000006260         mov        rsi, rax
0000000000006263         mov        edx, 0xa
0000000000006268         mov        edi, 0x1
000000000000626d         xor        eax, eax
000000000000626f         call       j___printf_chk                              ; __printf_chk
0000000000006274         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000627b         lea        rsi, qword [aPidpidWithFTer]                ; argument "msgid" for method j_dcgettext, "      --pid=PID            with -f, terminate after process ID, PID dies\\n  -q, --quiet, --silent    never output headers giving file names\\n      --retry              keep trying to open a file if it is inaccessible\\n"
0000000000006282         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006287         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006289         call       j_dcgettext                                 ; dcgettext
000000000000628e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006291         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006294         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000006299         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000062a0         lea        rsi, qword [aSSleepinterval]                ; argument "msgid" for method j_dcgettext, "  -s, --sleep-interval=N   with -f, sleep for approximately N seconds\\n                             (default 1.0) between iterations;\\n                             with inotify and --pid=P, check process P at\\n                             least once every N s…"
00000000000062a7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000062ac         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000062ae         call       j_dcgettext                                 ; dcgettext
00000000000062b3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000062b6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000062b9         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000062be         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000062c5         lea        rsi, qword [aZZeroterminate]                ; argument "msgid" for method j_dcgettext, "  -z, --zero-terminated    line delimiter is NUL, not newline\\n"
00000000000062cc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000062d1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000062d3         call       j_dcgettext                                 ; dcgettext
00000000000062d8         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000062db         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000062de         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000062e3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000062ea         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
00000000000062f1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000062f6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000062f8         call       j_dcgettext                                 ; dcgettext
00000000000062fd         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006300         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006303         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000006308         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000630f         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000006316         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000631b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000631d         call       j_dcgettext                                 ; dcgettext
0000000000006322         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006325         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006328         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000632d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006334         lea        rsi, qword [aNnumMayHaveAMu]                ; argument "msgid" for method j_dcgettext, "\\nNUM may have a multiplier suffix:\\nb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\\nGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\\n\\n"
000000000000633b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006340         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006342         call       j_dcgettext                                 ; dcgettext
0000000000006347         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000634a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000634d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000006352         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006359         lea        rsi, qword [aWithFollowFTai]                ; argument "msgid" for method j_dcgettext, "With --follow (-f), tail defaults to following the file descriptor, which\\nmeans that even if a tail'ed file is renamed, tail will continue to track\\nits end.  This default behavior is not desirable when you really want to\\ntrack the actual name of the file, …"
0000000000006360         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006365         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006367         call       j_dcgettext                                 ; dcgettext
000000000000636c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000636f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006372         lea        rbx, qword [aSHasBecomeAcce+25]             ; 0xb72c
0000000000006379         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000637e         lea        rax, qword [aSHasBecomeAcce+30]             ; 0xb731
0000000000006385         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
000000000000638c         mov        qword [rsp+0xa8+var_48], 0x0
0000000000006395         mov        qword [rsp+0xa8+var_40], 0x0
000000000000639e         mov        rdx, rsp
00000000000063a1         mov        qword [rsp+0xa8+var_A8], rax
00000000000063a5         lea        rax, qword [aTestInvocation]                ; "test invocation"
00000000000063ac         mov        qword [rsp+0xa8+var_78], rcx
00000000000063b1         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
00000000000063b8         mov        qword [rsp+0xa8+var_A0], rax
00000000000063bd         lea        rax, qword [aCoreutils]                     ; "coreutils"
00000000000063c4         mov        qword [rsp+0xa8+var_68], rcx
00000000000063c9         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
00000000000063d0         mov        qword [rsp+0xa8+var_98], rax
00000000000063d5         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
00000000000063dc         mov        qword [rsp+0xa8+var_58], rcx
00000000000063e1         mov        qword [rsp+0xa8+var_90], rax
00000000000063e6         lea        rax, qword [aSha224sum]                     ; "sha224sum"
00000000000063ed         mov        qword [rsp+0xa8+var_88], rax
00000000000063f2         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
00000000000063f9         mov        qword [rsp+0xa8+var_80], rax
00000000000063fe         mov        qword [rsp+0xa8+var_70], rax
0000000000006403         mov        qword [rsp+0xa8+var_60], rax
0000000000006408         mov        qword [rsp+0xa8+var_50], rax
000000000000640d         nop        dword [rax]

                     loc_6410:
0000000000006410         add        rdx, 0x10                                   ; CODE XREF=usage+797
0000000000006414         mov        rdi, qword [rdx]
0000000000006417         test       rdi, rdi
000000000000641a         je         loc_642f

000000000000641c         mov        ecx, 0x5
0000000000006421         mov        rsi, rbx
0000000000006424         rep  cmpsb byte [rsi], byte [rdi]
0000000000006426         seta       al
0000000000006429         sbb        al, 0x0
000000000000642b         test       al, al
000000000000642d         jne        loc_6410

                     loc_642f:
000000000000642f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+778
0000000000006433         xor        edi, edi
0000000000006435         mov        edx, 0x5
000000000000643a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000006441         test       r12, r12
0000000000006444         je         loc_650b

000000000000644a         call       j_dcgettext                                 ; dcgettext
000000000000644f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000006456         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xb7a7
000000000000645d         mov        rsi, rax
0000000000006460         mov        edi, 0x1
0000000000006465         xor        eax, eax
0000000000006467         call       j___printf_chk                              ; __printf_chk
000000000000646c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000646e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000006473         call       j_setlocale                                 ; setlocale
0000000000006478         test       rax, rax
000000000000647b         je         loc_6499

000000000000647d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xb7b5
0000000000006484         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000006489         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000648c         call       j_strncmp                                   ; strncmp
0000000000006491         test       eax, eax
0000000000006493         jne        loc_65a0

                     loc_6499:
0000000000006499         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+875, usage+1205
00000000000064a0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000064a2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000064a7         call       j_dcgettext                                 ; dcgettext
00000000000064ac         lea        rcx, qword [aSHasBecomeAcce+25]             ; 0xb72c
00000000000064b3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000064ba         mov        rsi, rax
00000000000064bd         mov        edi, 0x1
00000000000064c2         xor        eax, eax
00000000000064c4         call       j___printf_chk                              ; __printf_chk
00000000000064c9         cmp        r12, rbx
00000000000064cc         lea        rcx, qword [aMulticallInvoc+10]             ; 0xb74d
00000000000064d3         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xd001
00000000000064da         cmove      rbx, rcx

                     loc_64de:
00000000000064de         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1156
00000000000064e5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000064e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000064ec         call       j_dcgettext                                 ; dcgettext
00000000000064f1         mov        rcx, rbx
00000000000064f4         mov        rsi, rax
00000000000064f7         mov        rdx, r12
00000000000064fa         mov        edi, 0x1
00000000000064ff         xor        eax, eax
0000000000006501         call       j___printf_chk                              ; __printf_chk
0000000000006506         jmp        loc_6166

                     loc_650b:
000000000000650b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+820
0000000000006510         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000006517         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xb7a7
000000000000651e         mov        rsi, rax
0000000000006521         mov        edi, 0x1
0000000000006526         xor        eax, eax
0000000000006528         call       j___printf_chk                              ; __printf_chk
000000000000652d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000652f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000006534         call       j_setlocale                                 ; setlocale
0000000000006539         test       rax, rax
000000000000653c         je         loc_6556

000000000000653e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xb7b5
0000000000006545         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
000000000000654a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000654d         call       j_strncmp                                   ; strncmp
0000000000006552         test       eax, eax
0000000000006554         jne        loc_6599

                     loc_6556:
0000000000006556         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1068
000000000000655d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006562         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006564         lea        r12, qword [aSHasBecomeAcce+25]             ; 0xb72c
000000000000656b         lea        rbx, qword [aMulticallInvoc+10]             ; 0xb74d
0000000000006572         call       j_dcgettext                                 ; dcgettext
0000000000006577         lea        rcx, qword [aSHasBecomeAcce+25]             ; 0xb72c
000000000000657e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000006585         mov        rsi, rax
0000000000006588         mov        edi, 0x1
000000000000658d         xor        eax, eax
000000000000658f         call       j___printf_chk                              ; __printf_chk
0000000000006594         jmp        loc_64de

                     loc_6599:
0000000000006599         lea        r12, qword [aSHasBecomeAcce+25]             ; 0xb72c, CODE XREF=usage+1092

                     loc_65a0:
00000000000065a0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+899
00000000000065a7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000065ae         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000065b0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000065b5         call       j_dcgettext                                 ; dcgettext
00000000000065ba         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000065bd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000065c0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000065c5         jmp        loc_6499
00000000000065ca         align      16                                          ; End of unwind block (FDE at 0xdc30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
00000000000065d0         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0xdcc4), argument #1 for method usage, DATA XREF=argmatch_die
00000000000065d5         jmp        usage                                       ; usage
                        ; endp
00000000000065da         align      32                                          ; End of unwind block (FDE at 0xdcc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
00000000000065e0         push       r15                                         ; Begin of unwind block (FDE at 0xdcd8), CODE XREF=__xargmatch_internal+44
00000000000065e2         push       r14
00000000000065e4         mov        r15, rsi
00000000000065e7         push       r13
00000000000065e9         push       r12
00000000000065eb         mov        r13, rcx
00000000000065ee         push       rbp
00000000000065ef         push       rbx
00000000000065f0         mov        rbp, rdx
00000000000065f3         sub        rsp, 0x28
00000000000065f7         mov        qword [rsp+0x58+var_50], rdi
00000000000065fc         mov        qword [rsp+0x58+var_40], rdx
0000000000006601         call       j_strlen                                    ; strlen
0000000000006606         mov        r14, qword [r15]
0000000000006609         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
0000000000006611         test       r14, r14
0000000000006614         je         loc_66cd

000000000000661a         mov        r12, rax
000000000000661d         mov        byte [rsp+0x58+var_41], 0x0
0000000000006622         xor        ebx, ebx
0000000000006624         jmp        loc_6677
0000000000006626         align      16

                     loc_6630:
0000000000006630         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
0000000000006635         test       rax, rax
0000000000006638         je         loc_66e0

000000000000663e         mov        rdi, qword [rsp+0x58+var_58]
0000000000006642         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
0000000000006645         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000006648         imul       rdi, r13
000000000000664c         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000664f         call       j_memcmp                                    ; memcmp
0000000000006654         test       eax, eax
0000000000006656         movzx      eax, byte [rsp+0x58+var_41]
000000000000665b         mov        ecx, 0x1
0000000000006660         cmovne     eax, ecx
0000000000006663         mov        byte [rsp+0x58+var_41], al

                     loc_6667:
0000000000006667         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000666b         add        rbp, r13
000000000000666e         mov        r14, qword [r15+rbx*8]
0000000000006672         test       r14, r14
0000000000006675         je         loc_66b8

                     loc_6677:
0000000000006677         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000667c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000667f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
0000000000006682         call       j_strncmp                                   ; strncmp
0000000000006687         test       eax, eax
0000000000006689         jne        loc_6667

000000000000668b         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000000668e         call       j_strlen                                    ; strlen
0000000000006693         cmp        rax, r12
0000000000006696         je         loc_66f0

0000000000006698         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000669d         jne        loc_6630

000000000000669f         mov        qword [rsp+0x58+var_58], rbx
00000000000066a3         add        rbx, 0x1
00000000000066a7         add        rbp, r13
00000000000066aa         mov        r14, qword [r15+rbx*8]
00000000000066ae         test       r14, r14
00000000000066b1         jne        loc_6677

00000000000066b3         nop        dword [rax+rax]

                     loc_66b8:
00000000000066b8         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
00000000000066bd         mov        rax, 0xfffffffffffffffe
00000000000066c4         cmove      rax, qword [rsp+0x58+var_58]
00000000000066c9         mov        qword [rsp+0x58+var_58], rax

                     loc_66cd:
00000000000066cd         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
00000000000066d1         add        rsp, 0x28
00000000000066d5         pop        rbx
00000000000066d6         pop        rbp
00000000000066d7         pop        r12
00000000000066d9         pop        r13
00000000000066db         pop        r14
00000000000066dd         pop        r15
00000000000066df         ret
                        ; endp

                     loc_66e0:
00000000000066e0         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
00000000000066e5         jmp        loc_6667
00000000000066e7         align      16

                     loc_66f0:
00000000000066f0         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
00000000000066f4         jmp        loc_66cd
00000000000066f6         align      256                                         ; End of unwind block (FDE at 0xdcd8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000006700         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0xdd24), CODE XREF=__xargmatch_internal+78
0000000000006704         push       r12
0000000000006706         mov        edx, 0x5
000000000000670b         push       rbp
000000000000670c         mov        r12, rsi
000000000000670f         push       rbx
0000000000006710         mov        rbp, rdi
0000000000006713         je         loc_6760

0000000000006715         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
000000000000671c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000671e         call       j_dcgettext                                 ; dcgettext
0000000000006723         mov        rbx, rax

                     loc_6726:
0000000000006726         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
0000000000006729         mov        edi, 0x1
000000000000672e         call       quote_n                                     ; quote_n
0000000000006733         mov        rdx, r12
0000000000006736         mov        rbp, rax
0000000000006739         mov        esi, 0x8
000000000000673e         xor        edi, edi
0000000000006740         call       quotearg_n_style                            ; quotearg_n_style
0000000000006745         mov        r8, rbp
0000000000006748         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000674b         mov        rcx, rax
000000000000674e         pop        rbx
000000000000674f         pop        rbp
0000000000006750         pop        r12
0000000000006752         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000006754         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006756         xor        eax, eax
0000000000006758         jmp        j_error                                     ; error
                        ; endp
000000000000675d         align      32

                     loc_6760:
0000000000006760         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000006767         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006769         call       j_dcgettext                                 ; dcgettext
000000000000676e         mov        rbx, rax
0000000000006771         jmp        loc_6726
0000000000006773         align      128                                         ; End of unwind block (FDE at 0xdd24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000006780         push       r15                                         ; Begin of unwind block (FDE at 0xdd50), CODE XREF=__xargmatch_internal+92
0000000000006782         push       r14
0000000000006784         mov        r14, rdi
0000000000006787         push       r13
0000000000006789         push       r12
000000000000678b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000678d         push       rbp
000000000000678e         push       rbx
000000000000678f         mov        rbp, rsi
0000000000006792         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000006799         mov        r12, rdx
000000000000679c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000067a1         sub        rsp, 0x8
00000000000067a5         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000067ac         call       j_dcgettext                                 ; dcgettext
00000000000067b1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000067b4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000067b7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000067bc         mov        r15, qword [r14]
00000000000067bf         test       r15, r15
00000000000067c2         je         loc_6858

00000000000067c8         xor        r13d, r13d
00000000000067cb         xor        ebx, ebx
00000000000067cd         jmp        loc_6808
00000000000067cf         align      16

                     loc_67d0:
00000000000067d0         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
00000000000067d3         add        rbx, 0x1
00000000000067d7         mov        r13, rbp
00000000000067da         call       quote                                       ; quote
00000000000067df         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000067e6         lea        rdx, qword [aNS]                            ; "\\n  - %s"
00000000000067ed         mov        rcx, rax
00000000000067f0         mov        esi, 0x1
00000000000067f5         xor        eax, eax
00000000000067f7         add        rbp, r12
00000000000067fa         call       j___fprintf_chk                             ; __fprintf_chk
00000000000067ff         mov        r15, qword [r14+rbx*8]
0000000000006803         test       r15, r15
0000000000006806         je         loc_6858

                     loc_6808:
0000000000006808         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000000680b         je         loc_67d0

000000000000680d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
0000000000006810         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000006813         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000006816         call       j_memcmp                                    ; memcmp
000000000000681b         test       eax, eax
000000000000681d         jne        loc_67d0

000000000000681f         mov        rdi, r15
0000000000006822         add        rbx, 0x1
0000000000006826         add        rbp, r12
0000000000006829         call       quote                                       ; quote
000000000000682e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000006835         lea        rdx, qword [aNS+8]                          ; 0xc9ca
000000000000683c         mov        rcx, rax
000000000000683f         mov        esi, 0x1
0000000000006844         xor        eax, eax
0000000000006846         call       j___fprintf_chk                             ; __fprintf_chk
000000000000684b         mov        r15, qword [r14+rbx*8]
000000000000684f         test       r15, r15
0000000000006852         jne        loc_6808

0000000000006854         nop        dword [rax]

                     loc_6858:
0000000000006858         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
000000000000685f         mov        rax, qword [rdi+0x28]
0000000000006863         cmp        rax, qword [rdi+0x30]
0000000000006867         jae        loc_6888

0000000000006869         lea        rdx, qword [rax+1]
000000000000686d         mov        qword [rdi+0x28], rdx
0000000000006871         mov        byte [rax], 0xa
0000000000006874         add        rsp, 0x8
0000000000006878         pop        rbx
0000000000006879         pop        rbp
000000000000687a         pop        r12
000000000000687c         pop        r13
000000000000687e         pop        r14
0000000000006880         pop        r15
0000000000006882         ret
                        ; endp
0000000000006883         align      8

                     loc_6888:
0000000000006888         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
000000000000688c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000006891         pop        rbx
0000000000006892         pop        rbp
0000000000006893         pop        r12
0000000000006895         pop        r13
0000000000006897         pop        r14
0000000000006899         pop        r15
000000000000689b         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
00000000000068a0         push       r15                                         ; End of unwind block (FDE at 0xdd50), Begin of unwind block (FDE at 0xddb0), CODE XREF=main+1017
00000000000068a2         push       r14
00000000000068a4         mov        r14, rdi
00000000000068a7         push       r13
00000000000068a9         push       r12
00000000000068ab         mov        r12, rsi
00000000000068ae         push       rbp
00000000000068af         push       rbx
00000000000068b0         mov        rbp, rcx
00000000000068b3         mov        rbx, rdx
00000000000068b6         mov        rcx, r8
00000000000068b9         mov        rdx, rbp
00000000000068bc         sub        rsp, 0x8
00000000000068c0         mov        rsi, rbx
00000000000068c3         mov        rdi, r12
00000000000068c6         mov        r15, r8
00000000000068c9         mov        r13, r9
00000000000068cc         call       argmatch                                    ; argmatch
00000000000068d1         test       rax, rax
00000000000068d4         js         loc_68e5

                     loc_68d6:
00000000000068d6         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
00000000000068da         pop        rbx
00000000000068db         pop        rbp
00000000000068dc         pop        r12
00000000000068de         pop        r13
00000000000068e0         pop        r14
00000000000068e2         pop        r15
00000000000068e4         ret
                        ; endp

                     loc_68e5:
00000000000068e5         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
00000000000068e8         mov        rsi, r12
00000000000068eb         mov        rdi, r14
00000000000068ee         call       argmatch_invalid                            ; argmatch_invalid
00000000000068f3         mov        rdx, r15
00000000000068f6         mov        rsi, rbp
00000000000068f9         mov        rdi, rbx
00000000000068fc         call       argmatch_valid                              ; argmatch_valid
0000000000006901         call       r13
0000000000006904         mov        rax, 0xffffffffffffffff
000000000000690b         jmp        loc_68d6
000000000000690d         align      16                                          ; End of unwind block (FDE at 0xddb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000006910         push       r14                                         ; Begin of unwind block (FDE at 0xddfc)
0000000000006912         push       r13
0000000000006914         push       r12
0000000000006916         push       rbp
0000000000006917         push       rbx
0000000000006918         mov        r14, qword [rsi]
000000000000691b         test       r14, r14
000000000000691e         je         loc_6951

0000000000006920         mov        r12, rcx
0000000000006923         mov        r13, rdi
0000000000006926         mov        rbp, rdx
0000000000006929         lea        rbx, qword [rsi+8]
000000000000692d         jmp        loc_693f
000000000000692f         align      16

                     loc_6930:
0000000000006930         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000006933         add        rbp, r12
0000000000006936         add        rbx, 0x8
000000000000693a         test       r14, r14
000000000000693d         je         loc_6951

                     loc_693f:
000000000000693f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000006942         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000006945         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000006948         call       j_memcmp                                    ; memcmp
000000000000694d         test       eax, eax
000000000000694f         jne        loc_6930

                     loc_6951:
0000000000006951         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000006952         mov        rax, r14
0000000000006955         pop        rbp
0000000000006956         pop        r12
0000000000006958         pop        r13
000000000000695a         pop        r14
000000000000695c         ret
                        ; endp
000000000000695d         align      32                                          ; End of unwind block (FDE at 0xddfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80


                     cl_strtod:
0000000000006960         push       r13                                         ; Begin of unwind block (FDE at 0xde3c), DATA XREF=main+697
0000000000006962         push       r12
0000000000006964         push       rbp
0000000000006965         push       rbx
0000000000006966         mov        rbx, rsi
0000000000006969         mov        rbp, rdi
000000000000696c         sub        rsp, 0x38
0000000000006970         lea        rsi, qword [rsp+0x58+var_40]                ; argument "__endptr" for method j_strtod
0000000000006975         mov        rax, qword [fs:0x28]
000000000000697e         mov        qword [rsp+0x58+var_30], rax
0000000000006983         xor        eax, eax
0000000000006985         call       j_strtod                                    ; strtod
000000000000698a         mov        rax, qword [rsp+0x58+var_40]
000000000000698f         movapd     xmm1, xmm0
0000000000006993         cmp        byte [rax], 0x0
0000000000006996         jne        loc_69c8

                     loc_6998:
0000000000006998         test       rbx, rbx                                    ; CODE XREF=cl_strtod+161, cl_strtod+172
000000000000699b         je         loc_69a5

000000000000699d         mov        rax, qword [rsp+0x58+var_40]
00000000000069a2         mov        qword [rbx], rax

                     loc_69a5:
00000000000069a5         mov        rax, qword [rsp+0x58+var_30]                ; CODE XREF=cl_strtod+59
00000000000069aa         xor        rax, qword [fs:0x28]
00000000000069b3         movapd     xmm0, xmm1
00000000000069b7         jne        loc_6a0e

00000000000069b9         add        rsp, 0x38
00000000000069bd         pop        rbx
00000000000069be         pop        rbp
00000000000069bf         pop        r12
00000000000069c1         pop        r13
00000000000069c3         ret
                        ; endp
00000000000069c4         align      8

                     loc_69c8:
00000000000069c8         movsd      qword [rsp+0x58+var_50], xmm0               ; CODE XREF=cl_strtod+54
00000000000069ce         call       j___errno_location                          ; __errno_location
00000000000069d3         lea        rsi, qword [rsp+0x58+var_38]
00000000000069d8         mov        rdi, rbp
00000000000069db         mov        r12, rax
00000000000069de         mov        r13d, dword [rax]
00000000000069e1         call       c_strtod                                    ; c_strtod
00000000000069e6         mov        rax, qword [rsp+0x58+var_38]
00000000000069eb         cmp        qword [rsp+0x58+var_40], rax
00000000000069f0         movsd      xmm1, qword [rsp+0x58+var_50]
00000000000069f6         jae        loc_6a08

00000000000069f8         mov        qword [rsp+0x58+var_40], rax
00000000000069fd         movapd     xmm1, xmm0
0000000000006a01         jmp        loc_6998
0000000000006a03         align      8

                     loc_6a08:
0000000000006a08         mov        dword [r12], r13d                           ; CODE XREF=cl_strtod+150
0000000000006a0c         jmp        loc_6998

                     loc_6a0e:
0000000000006a0e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=cl_strtod+87
                        ; endp
0000000000006a13         align      32                                          ; End of unwind block (FDE at 0xde3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000006a20         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xde7c), file_name
0000000000006a27         ret
                        ; endp
0000000000006a28         align      16                                          ; End of unwind block (FDE at 0xde7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000006a30         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xde90), ignore_EPIPE
0000000000006a37         ret
                        ; endp
0000000000006a38         align      64                                          ; End of unwind block (FDE at 0xde90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000006a40         push       rbp                                         ; Begin of unwind block (FDE at 0xdea4), DATA XREF=main+109
0000000000006a41         push       rbx
0000000000006a42         sub        rsp, 0x8
0000000000006a46         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006a4d         call       close_stream                                ; close_stream
0000000000006a52         test       eax, eax
0000000000006a54         je         loc_6a6c

0000000000006a56         call       j___errno_location                          ; __errno_location
0000000000006a5b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000006a62         mov        rbx, rax
0000000000006a65         je         loc_6a83

0000000000006a67         cmp        dword [rax], 0x20
0000000000006a6a         jne        loc_6a83

                     loc_6a6c:
0000000000006a6c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000006a73         call       close_stream                                ; close_stream
0000000000006a78         test       eax, eax
0000000000006a7a         jne        loc_6ac2

0000000000006a7c         add        rsp, 0x8
0000000000006a80         pop        rbx
0000000000006a81         pop        rbp
0000000000006a82         ret
                        ; endp

                     loc_6a83:
0000000000006a83         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000006a8a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a8c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a91         call       j_dcgettext                                 ; dcgettext
0000000000006a96         mov        rdi, qword [file_name]                      ; file_name
0000000000006a9d         mov        rbp, rax
0000000000006aa0         test       rdi, rdi
0000000000006aa3         je         loc_6acd

0000000000006aa5         call       quotearg_colon                              ; quotearg_colon
0000000000006aaa         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000006aac         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000006ab3         mov        rcx, rax
0000000000006ab6         mov        r8, rbp
0000000000006ab9         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006abb         xor        eax, eax
0000000000006abd         call       j_error                                     ; error

                     loc_6ac2:
0000000000006ac2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000006ac8         call       j__exit                                     ; _exit
                        ; endp

                     loc_6acd:
0000000000006acd         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000006acf         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc9cc
0000000000006ad6         mov        rcx, rax
0000000000006ad9         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006adb         xor        eax, eax
0000000000006add         call       j_error                                     ; error
0000000000006ae2         jmp        loc_6ac2
0000000000006ae4         align      16                                          ; End of unwind block (FDE at 0xdea4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dir_len:
0000000000006af0         push       rbp                                         ; Begin of unwind block (FDE at 0xded4), CODE XREF=main+7881, mdir_name+9
0000000000006af1         push       rbx
0000000000006af2         xor        ebp, ebp
0000000000006af4         mov        rbx, rdi
0000000000006af7         sub        rsp, 0x8
0000000000006afb         cmp        byte [rdi], 0x2f
0000000000006afe         sete       bpl
0000000000006b02         call       last_component                              ; last_component
0000000000006b07         mov        rcx, rax
0000000000006b0a         sub        rcx, rbx
0000000000006b0d         cmp        rcx, rbp
0000000000006b10         jbe        loc_6b40

0000000000006b12         cmp        byte [rax-1], 0x2f
0000000000006b16         lea        rdx, qword [rcx-1]
0000000000006b1a         je         loc_6b2e

0000000000006b1c         jmp        loc_6b40
0000000000006b1e         align      32

                     loc_6b20:
0000000000006b20         cmp        byte [rbx+rdx-1], 0x2f                      ; CODE XREF=dir_len+65
0000000000006b25         lea        rax, qword [rdx-1]
0000000000006b29         jne        loc_6b33

0000000000006b2b         mov        rdx, rax

                     loc_6b2e:
0000000000006b2e         cmp        rbp, rdx                                    ; CODE XREF=dir_len+42
0000000000006b31         jne        loc_6b20

                     loc_6b33:
0000000000006b33         add        rsp, 0x8                                    ; CODE XREF=dir_len+57
0000000000006b37         mov        rax, rdx
0000000000006b3a         pop        rbx
0000000000006b3b         pop        rbp
0000000000006b3c         ret
                        ; endp
0000000000006b3d         align      64

                     loc_6b40:
0000000000006b40         add        rsp, 0x8                                    ; CODE XREF=dir_len+32, dir_len+44
0000000000006b44         mov        rdx, rcx
0000000000006b47         mov        rax, rdx
0000000000006b4a         pop        rbx
0000000000006b4b         pop        rbp
0000000000006b4c         ret
                        ; endp
0000000000006b4d         align      16                                          ; End of unwind block (FDE at 0xded4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mdir_name:
0000000000006b50         push       rbp                                         ; Begin of unwind block (FDE at 0xdf08)
0000000000006b51         push       rbx
0000000000006b52         mov        rbp, rdi
0000000000006b55         sub        rsp, 0x8
0000000000006b59         call       dir_len                                     ; dir_len
0000000000006b5e         test       rax, rax
0000000000006b61         mov        rbx, rax
0000000000006b64         sete       al
0000000000006b67         movzx      eax, al
0000000000006b6a         lea        rdi, qword [rbx+rax+1]                      ; argument "__size" for method j_malloc
0000000000006b6f         call       j_malloc                                    ; malloc
0000000000006b74         test       rax, rax
0000000000006b77         mov        rcx, rax
0000000000006b7a         je         loc_6b96

0000000000006b7c         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006b7f         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000006b82         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006b85         call       j_memcpy                                    ; memcpy
0000000000006b8a         test       rbx, rbx
0000000000006b8d         mov        rcx, rax
0000000000006b90         je         loc_6ba0

                     loc_6b92:
0000000000006b92         mov        byte [rcx+rbx], 0x0                         ; CODE XREF=mdir_name+88

                     loc_6b96:
0000000000006b96         add        rsp, 0x8                                    ; CODE XREF=mdir_name+42
0000000000006b9a         mov        rax, rcx
0000000000006b9d         pop        rbx
0000000000006b9e         pop        rbp
0000000000006b9f         ret
                        ; endp

                     loc_6ba0:
0000000000006ba0         mov        byte [rax], 0x2e                            ; CODE XREF=mdir_name+64
0000000000006ba3         mov        ebx, 0x1
0000000000006ba8         jmp        loc_6b92
0000000000006baa         align      16                                          ; End of unwind block (FDE at 0xdf08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     last_component:
0000000000006bb0         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0xdf34), CODE XREF=main+7908, dir_len+18
0000000000006bb3         mov        rax, rdi
0000000000006bb6         cmp        dl, 0x2f
0000000000006bb9         jne        loc_6bcc

0000000000006bbb         nop        dword [rax+rax]

                     loc_6bc0:
0000000000006bc0         add        rax, 0x1                                    ; CODE XREF=last_component+26
0000000000006bc4         movzx      edx, byte [rax]
0000000000006bc7         cmp        dl, 0x2f
0000000000006bca         je         loc_6bc0

                     loc_6bcc:
0000000000006bcc         test       dl, dl                                      ; CODE XREF=last_component+9
0000000000006bce         je         loc_6c0a

0000000000006bd0         mov        rcx, rax
0000000000006bd3         xor        esi, esi
0000000000006bd5         jmp        loc_6bf5
0000000000006bd7         align      32

                     loc_6be0:
0000000000006be0         test       sil, sil                                    ; CODE XREF=last_component+72
0000000000006be3         je         loc_6bea

0000000000006be5         mov        rax, rcx
0000000000006be8         xor        esi, esi

                     loc_6bea:
0000000000006bea         add        rcx, 0x1                                    ; CODE XREF=last_component+51
0000000000006bee         movzx      edx, byte [rcx]
0000000000006bf1         test       dl, dl
0000000000006bf3         je         loc_6c0a

                     loc_6bf5:
0000000000006bf5         cmp        dl, 0x2f                                    ; CODE XREF=last_component+37, last_component+88
0000000000006bf8         jne        loc_6be0

0000000000006bfa         add        rcx, 0x1
0000000000006bfe         movzx      edx, byte [rcx]
0000000000006c01         mov        esi, 0x1
0000000000006c06         test       dl, dl
0000000000006c08         jne        loc_6bf5

                     loc_6c0a:
0000000000006c0a         ret                                                    ; CODE XREF=last_component+30, last_component+67
                        ; endp
0000000000006c0c         align      16                                          ; End of unwind block (FDE at 0xdf34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     base_len:
0000000000006c10         push       rbx                                         ; Begin of unwind block (FDE at 0xdf48)
0000000000006c11         mov        rbx, rdi
0000000000006c14         call       j_strlen                                    ; strlen
0000000000006c19         cmp        rax, 0x1
0000000000006c1d         jbe        loc_6c2a

0000000000006c1f         cmp        byte [rbx+rax-1], 0x2f
0000000000006c24         lea        rdx, qword [rax-1]
0000000000006c28         je         loc_6c38

                     loc_6c2a:
0000000000006c2a         pop        rbx                                         ; CODE XREF=base_len+13
0000000000006c2b         ret
                        ; endp
0000000000006c2c         align      16

                     loc_6c30:
0000000000006c30         mov        rdx, rax                                    ; CODE XREF=base_len+55
0000000000006c33         nop        dword [rax+rax]

                     loc_6c38:
0000000000006c38         cmp        rdx, 0x1                                    ; CODE XREF=base_len+24
0000000000006c3c         je         loc_6c50

0000000000006c3e         cmp        byte [rbx+rdx-1], 0x2f
0000000000006c43         lea        rax, qword [rdx-1]
0000000000006c47         je         loc_6c30

0000000000006c49         mov        rax, rdx
0000000000006c4c         pop        rbx
0000000000006c4d         ret
                        ; endp
0000000000006c4e         align      16

                     loc_6c50:
0000000000006c50         mov        eax, 0x1                                    ; CODE XREF=base_len+44
0000000000006c55         pop        rbx
0000000000006c56         ret
                        ; endp
0000000000006c57         align      32                                          ; End of unwind block (FDE at 0xdf48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     open_safer:
0000000000006c60         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0xdf74), CODE XREF=main+2533, recheck+111
0000000000006c64         mov        qword [rsp+0x58+var_28], rdx
0000000000006c69         xor        edx, edx
0000000000006c6b         mov        rax, qword [fs:0x28]
0000000000006c74         mov        qword [rsp+0x58+var_40], rax
0000000000006c79         xor        eax, eax
0000000000006c7b         test       sil, 0x40
0000000000006c7f         jne        loc_6ca8

                     loc_6c81:
0000000000006c81         xor        eax, eax                                    ; CODE XREF=open_safer+103
0000000000006c83         call       j_open                                      ; open
0000000000006c88         mov        edi, eax
0000000000006c8a         call       fd_safer                                    ; fd_safer
0000000000006c8f         mov        rcx, qword [rsp+0x58+var_40]
0000000000006c94         xor        rcx, qword [fs:0x28]
0000000000006c9d         jne        loc_6cc9

0000000000006c9f         add        rsp, 0x58
0000000000006ca3         ret
                        ; endp
0000000000006ca4         align      8

                     loc_6ca8:
0000000000006ca8         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
0000000000006cad         mov        dword [rsp+0x58+var_58], 0x10
0000000000006cb4         mov        edx, dword [rsp+0x58+var_28]
0000000000006cb8         mov        qword [rsp+0x58+var_50], rax
0000000000006cbd         lea        rax, qword [rsp+0x58+var_38]
0000000000006cc2         mov        qword [rsp+0x58+var_48], rax
0000000000006cc7         jmp        loc_6c81

                     loc_6cc9:
0000000000006cc9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
0000000000006cce         align      16                                          ; End of unwind block (FDE at 0xdf74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
0000000000006cd0         cmp        rdi, 0xa                                    ; Begin of unwind block (FDE at 0xdf94), CODE XREF=hash_initialize+123, hash_rehash+123
0000000000006cd4         mov        eax, 0xa
0000000000006cd9         movabs     r9, 0xaaaaaaaaaaaaaaab
0000000000006ce3         cmovb      rdi, rax
0000000000006ce7         or         rdi, 0x1
0000000000006ceb         cmp        rdi, 0xffffffffffffffff
0000000000006cef         je         loc_6d5f

0000000000006cf1         nop        dword [rax]

                     loc_6cf8:
0000000000006cf8         mov        rax, rdi                                    ; CODE XREF=next_prime+141
0000000000006cfb         mov        rcx, rdi
0000000000006cfe         mul        r9
0000000000006d01         mov        rax, rdx
0000000000006d04         shr        rax, 0x1
0000000000006d07         lea        rax, qword [rax+rax*2]
0000000000006d0b         sub        rcx, rax
0000000000006d0e         cmp        rdi, 0x9
0000000000006d12         mov        rax, rcx
0000000000006d15         jbe        loc_6d50

0000000000006d17         test       rcx, rcx
0000000000006d1a         je         loc_6d55

0000000000006d1c         mov        r8d, 0x10
0000000000006d22         mov        esi, 0x9
0000000000006d27         mov        ecx, 0x3
0000000000006d2c         jmp        loc_6d39
0000000000006d2e         align      16

                     loc_6d30:
0000000000006d30         add        r8, 0x8                                     ; CODE XREF=next_prime+126
0000000000006d34         test       rdx, rdx
0000000000006d37         je         loc_6d55

                     loc_6d39:
0000000000006d39         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
0000000000006d3d         xor        edx, edx
0000000000006d3f         mov        rax, rdi
0000000000006d42         div        rcx
0000000000006d45         add        rsi, r8
0000000000006d48         cmp        rsi, rdi
0000000000006d4b         mov        rax, rdx
0000000000006d4e         jb         loc_6d30

                     loc_6d50:
0000000000006d50         test       rax, rax                                    ; CODE XREF=next_prime+69
0000000000006d53         jne        loc_6d5f

                     loc_6d55:
0000000000006d55         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
0000000000006d59         cmp        rdi, 0xffffffffffffffff
0000000000006d5d         jne        loc_6cf8

                     loc_6d5f:
0000000000006d5f         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
0000000000006d62         ret
                        ; endp
0000000000006d63         align      16                                          ; End of unwind block (FDE at 0xdf94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
0000000000006d70         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xdfa8), DATA XREF=hash_initialize+4
0000000000006d73         xor        edx, edx
0000000000006d75         ror        rax, 0x3
0000000000006d79         div        rsi
0000000000006d7c         mov        rax, rdx
0000000000006d7f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
0000000000006d80         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0xdfa8), Begin of unwind block (FDE at 0xdfbc), DATA XREF=hash_initialize+48
0000000000006d83         sete       al
0000000000006d86         ret
                        ; endp
0000000000006d87         align      16                                          ; End of unwind block (FDE at 0xdfbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
0000000000006d90         push       rbx                                         ; Begin of unwind block (FDE at 0xdfd0), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
0000000000006d91         mov        rbx, rdi
0000000000006d94         mov        rdi, rsi
0000000000006d97         mov        rsi, qword [rbx+0x10]
0000000000006d9b         call       qword [rbx+0x30]
0000000000006d9e         cmp        qword [rbx+0x10], rax
0000000000006da2         jbe        loc_6dad

0000000000006da4         shl        rax, 0x4
0000000000006da8         add        rax, qword [rbx]
0000000000006dab         pop        rbx
0000000000006dac         ret
                        ; endp

                     loc_6dad:
0000000000006dad         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
0000000000006db2         align      64                                          ; End of unwind block (FDE at 0xdfd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
0000000000006dc0         push       r14                                         ; Begin of unwind block (FDE at 0xdfec), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
0000000000006dc2         push       r13
0000000000006dc4         mov        r14, rdx
0000000000006dc7         push       r12
0000000000006dc9         push       rbp
0000000000006dca         mov        r12, rdi
0000000000006dcd         push       rbx
0000000000006dce         mov        rbp, rsi
0000000000006dd1         mov        r13d, ecx
0000000000006dd4         call       safe_hasher                                 ; safe_hasher
0000000000006dd9         mov        qword [r14], rax
0000000000006ddc         mov        rsi, qword [rax]
0000000000006ddf         test       rsi, rsi
0000000000006de2         je         loc_6ed0

0000000000006de8         cmp        rsi, rbp
0000000000006deb         mov        rbx, rax
0000000000006dee         je         loc_6e83

0000000000006df4         mov        rdi, rbp
0000000000006df7         call       qword [r12+0x38]
0000000000006dfc         test       al, al
0000000000006dfe         jne        loc_6e80

0000000000006e04         mov        rax, qword [rbx+8]
0000000000006e08         test       rax, rax
0000000000006e0b         je         loc_6ed0

0000000000006e11         mov        rsi, qword [rax]
0000000000006e14         cmp        rbp, rsi
0000000000006e17         jne        loc_6e39

0000000000006e19         jmp        loc_6e4c
0000000000006e1b         align      32

                     loc_6e20:
0000000000006e20         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
0000000000006e24         mov        rax, qword [rbx+8]
0000000000006e28         test       rax, rax
0000000000006e2b         je         loc_6ed0

0000000000006e31         mov        rsi, qword [rax]
0000000000006e34         cmp        rsi, rbp
0000000000006e37         je         loc_6e4c

                     loc_6e39:
0000000000006e39         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
0000000000006e3c         call       qword [r12+0x38]
0000000000006e41         test       al, al
0000000000006e43         je         loc_6e20

0000000000006e45         mov        rax, qword [rbx+8]
0000000000006e49         mov        rsi, qword [rax]

                     loc_6e4c:
0000000000006e4c         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
0000000000006e4f         je         loc_6e6e

0000000000006e51         mov        rdx, qword [rax+8]
0000000000006e55         mov        qword [rbx+8], rdx
0000000000006e59         mov        qword [rax], 0x0
0000000000006e60         mov        rdx, qword [r12+0x48]
0000000000006e65         mov        qword [rax+8], rdx
0000000000006e69         mov        qword [r12+0x48], rax

                     loc_6e6e:
0000000000006e6e         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
0000000000006e6f         mov        rax, rsi
0000000000006e72         pop        rbp
0000000000006e73         pop        r12
0000000000006e75         pop        r13
0000000000006e77         pop        r14
0000000000006e79         ret
                        ; endp
0000000000006e7a         align      128

                     loc_6e80:
0000000000006e80         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_6e83:
0000000000006e83         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
0000000000006e86         je         loc_6e6e

0000000000006e88         mov        rax, qword [rbx+8]
0000000000006e8c         test       rax, rax
0000000000006e8f         je         loc_6ec0

0000000000006e91         movdqu     xmm0, xmmword [rax]
0000000000006e95         movups     xmmword [rbx], xmm0
0000000000006e98         mov        qword [rax], 0x0
0000000000006e9f         mov        rdx, qword [r12+0x48]
0000000000006ea4         mov        qword [rax+8], rdx
0000000000006ea8         mov        qword [r12+0x48], rax
0000000000006ead         mov        rax, rsi
0000000000006eb0         pop        rbx
0000000000006eb1         pop        rbp
0000000000006eb2         pop        r12
0000000000006eb4         pop        r13
0000000000006eb6         pop        r14
0000000000006eb8         ret
                        ; endp
0000000000006eb9         align      64

                     loc_6ec0:
0000000000006ec0         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
0000000000006ec7         jmp        loc_6e6e
0000000000006ec9         align      16

                     loc_6ed0:
0000000000006ed0         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
0000000000006ed2         pop        rbx
0000000000006ed3         mov        rax, rsi
0000000000006ed6         pop        rbp
0000000000006ed7         pop        r12
0000000000006ed9         pop        r13
0000000000006edb         pop        r14
0000000000006edd         ret
                        ; endp
0000000000006ede         align      32                                          ; End of unwind block (FDE at 0xdfec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
0000000000006ee0         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0xe04c), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
0000000000006ee3         lea        rcx, qword [default_tuning]                 ; default_tuning
0000000000006eea         mov        eax, 0x1
0000000000006eef         cmp        rdx, rcx
0000000000006ef2         je         loc_6f55

0000000000006ef4         movss      xmm0, dword [rdx+8]
0000000000006ef9         ucomiss    xmm0, dword [float_ca54]                    ; float_ca54
0000000000006f00         jbe        loc_6f50

0000000000006f02         movss      xmm1, dword [float_ca58]                    ; float_ca58
0000000000006f0a         ucomiss    xmm1, xmm0
0000000000006f0d         jbe        loc_6f50

0000000000006f0f         movss      xmm1, dword [rdx+0xc]
0000000000006f14         ucomiss    xmm1, dword [float_ca5c]                    ; float_ca5c
0000000000006f1b         jbe        loc_6f50

0000000000006f1d         movss      xmm1, dword [rdx]
0000000000006f21         ucomiss    xmm1, dword [float_ca60]                    ; float_ca60
0000000000006f28         jb         loc_6f50

0000000000006f2a         addss      xmm1, dword [float_ca54]                    ; float_ca54
0000000000006f32         movss      xmm2, dword [rdx+4]
0000000000006f37         ucomiss    xmm2, xmm1
0000000000006f3a         jbe        loc_6f50

0000000000006f3c         movss      xmm3, dword [float_ca64]                    ; float_ca64
0000000000006f44         ucomiss    xmm3, xmm2
0000000000006f47         jb         loc_6f50

0000000000006f49         ucomiss    xmm0, xmm1
0000000000006f4c         ja         loc_6f55

0000000000006f4e         nop

                     loc_6f50:
0000000000006f50         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
0000000000006f53         xor        eax, eax

                     loc_6f55:
0000000000006f55         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
0000000000006f57         align      32                                          ; End of unwind block (FDE at 0xe04c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
0000000000006f60         push       r15                                         ; Begin of unwind block (FDE at 0xe060), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
0000000000006f62         push       r14
0000000000006f64         push       r13
0000000000006f66         push       r12
0000000000006f68         push       rbp
0000000000006f69         push       rbx
0000000000006f6a         sub        rsp, 0x8
0000000000006f6e         mov        r12, qword [rsi]
0000000000006f71         cmp        r12, qword [rsi+8]
0000000000006f75         jae        loc_7058

0000000000006f7b         mov        rbp, rdi
0000000000006f7e         mov        r13, rsi
0000000000006f81         mov        r14d, edx
0000000000006f84         nop        dword [rax]

                     loc_6f88:
0000000000006f88         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
0000000000006f8c         test       r15, r15
0000000000006f8f         je         loc_704a

0000000000006f95         mov        rbx, qword [r12+8]
0000000000006f9a         test       rbx, rbx
0000000000006f9d         jne        loc_6fbc

0000000000006f9f         jmp        loc_6ffb
0000000000006fa1         align      8

                     loc_6fa8:
0000000000006fa8         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
0000000000006fac         test       rdx, rdx
0000000000006faf         mov        qword [rbx+8], rcx
0000000000006fb3         mov        qword [rax+8], rbx
0000000000006fb7         mov        rbx, rdx
0000000000006fba         je         loc_6ff7

                     loc_6fbc:
0000000000006fbc         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
0000000000006fbf         mov        rdi, rbp
0000000000006fc2         mov        rsi, r15
0000000000006fc5         call       safe_hasher                                 ; safe_hasher
0000000000006fca         cmp        qword [rax], 0x0
0000000000006fce         mov        rdx, qword [rbx+8]
0000000000006fd2         jne        loc_6fa8

0000000000006fd4         mov        qword [rax], r15
0000000000006fd7         add        qword [rbp+0x18], 0x1
0000000000006fdc         test       rdx, rdx
0000000000006fdf         mov        qword [rbx], 0x0
0000000000006fe6         mov        rax, qword [rbp+0x48]
0000000000006fea         mov        qword [rbx+8], rax
0000000000006fee         mov        qword [rbp+0x48], rbx
0000000000006ff2         mov        rbx, rdx
0000000000006ff5         jne        loc_6fbc

                     loc_6ff7:
0000000000006ff7         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_6ffb:
0000000000006ffb         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
0000000000006ffe         mov        qword [r12+8], 0x0
0000000000007007         jne        loc_704a

0000000000007009         mov        rsi, r15
000000000000700c         mov        rdi, rbp
000000000000700f         call       safe_hasher                                 ; safe_hasher
0000000000007014         cmp        qword [rax], 0x0
0000000000007018         mov        rbx, rax
000000000000701b         je         loc_7070

000000000000701d         mov        rax, qword [rbp+0x48]
0000000000007021         test       rax, rax
0000000000007024         je         loc_7080

0000000000007026         mov        rdx, qword [rax+8]
000000000000702a         mov        qword [rbp+0x48], rdx

                     loc_702e:
000000000000702e         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
0000000000007032         mov        qword [rax], r15
0000000000007035         mov        qword [rax+8], rdx
0000000000007039         mov        qword [rbx+8], rax

                     loc_703d:
000000000000703d         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
0000000000007045         sub        qword [r13+0x18], 0x1

                     loc_704a:
000000000000704a         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
000000000000704e         cmp        qword [r13+8], r12
0000000000007052         ja         loc_6f88

                     loc_7058:
0000000000007058         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
000000000000705c         mov        eax, 0x1
0000000000007061         pop        rbx
0000000000007062         pop        rbp
0000000000007063         pop        r12
0000000000007065         pop        r13
0000000000007067         pop        r14
0000000000007069         pop        r15
000000000000706b         ret
                        ; endp
000000000000706c         align      16

                     loc_7070:
0000000000007070         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
0000000000007073         add        qword [rbp+0x18], 0x1
0000000000007078         jmp        loc_703d
000000000000707a         align      128

                     loc_7080:
0000000000007080         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
0000000000007085         call       j_malloc                                    ; malloc
000000000000708a         test       rax, rax
000000000000708d         jne        loc_702e

000000000000708f         add        rsp, 0x8
0000000000007093         xor        eax, eax
0000000000007095         pop        rbx
0000000000007096         pop        rbp
0000000000007097         pop        r12
0000000000007099         pop        r13
000000000000709b         pop        r14
000000000000709d         pop        r15
000000000000709f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
00000000000070a0         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0xe060), Begin of unwind block (FDE at 0xe0c0)
00000000000070a4         ret
                        ; endp
00000000000070a5         align      16                                          ; End of unwind block (FDE at 0xe0c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
00000000000070b0         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0xe0d4)
00000000000070b4         ret
                        ; endp
00000000000070b5         align      64                                          ; End of unwind block (FDE at 0xe0d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
00000000000070c0         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0xe0e8), CODE XREF=main+9019
00000000000070c4         ret
                        ; endp
00000000000070c5         align      16                                          ; End of unwind block (FDE at 0xe0e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
00000000000070d0         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0xe0fc)
00000000000070d3         mov        rdi, qword [rdi+8]
00000000000070d7         xor        eax, eax
00000000000070d9         cmp        rsi, rdi
00000000000070dc         jae        loc_7117

00000000000070de         nop

                     loc_70e0:
00000000000070e0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
00000000000070e4         je         loc_710c

00000000000070e6         mov        rdx, qword [rsi+8]
00000000000070ea         mov        ecx, 0x1
00000000000070ef         test       rdx, rdx
00000000000070f2         je         loc_7105

00000000000070f4         nop        dword [rax]

                     loc_70f8:
00000000000070f8         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
00000000000070fc         add        rcx, 0x1
0000000000007100         test       rdx, rdx
0000000000007103         jne        loc_70f8

                     loc_7105:
0000000000007105         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
0000000000007108         cmovb      rax, rcx

                     loc_710c:
000000000000710c         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
0000000000007110         cmp        rsi, rdi
0000000000007113         jb         loc_70e0

0000000000007115         ret
                        ; endp

                     loc_7117:
0000000000007117         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
0000000000007119         align      32                                          ; End of unwind block (FDE at 0xe0fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
0000000000007120         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0xe110)
0000000000007123         mov        r8, qword [rdi+8]
0000000000007127         xor        edx, edx
0000000000007129         xor        esi, esi
000000000000712b         cmp        rcx, r8
000000000000712e         jae        loc_7166

                     loc_7130:
0000000000007130         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
0000000000007134         je         loc_715d

0000000000007136         mov        rax, qword [rcx+8]
000000000000713a         add        rsi, 0x1
000000000000713e         add        rdx, 0x1
0000000000007142         test       rax, rax
0000000000007145         je         loc_715d

0000000000007147         nop        word [rax+rax]

                     loc_7150:
0000000000007150         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
0000000000007154         add        rdx, 0x1
0000000000007158         test       rax, rax
000000000000715b         jne        loc_7150

                     loc_715d:
000000000000715d         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
0000000000007161         cmp        rcx, r8
0000000000007164         jb         loc_7130

                     loc_7166:
0000000000007166         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
0000000000007168         cmp        qword [rdi+0x18], rsi
000000000000716c         je         loc_7170

000000000000716e         ret
                        ; endp

                     loc_7170:
0000000000007170         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
0000000000007174         sete       al
0000000000007177         ret
                        ; endp
0000000000007178         align      128                                         ; End of unwind block (FDE at 0xe110)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
0000000000007180         push       r13                                         ; Begin of unwind block (FDE at 0xe124)
0000000000007182         push       r12
0000000000007184         mov        r12, rsi
0000000000007187         push       rbp
0000000000007188         push       rbx
0000000000007189         xor        ebx, ebx
000000000000718b         sub        rsp, 0x8
000000000000718f         mov        rsi, qword [rdi]
0000000000007192         mov        rcx, qword [rdi+0x20]
0000000000007196         mov        rbp, qword [rdi+0x10]
000000000000719a         mov        r13, qword [rdi+0x18]
000000000000719e         mov        rdi, qword [rdi+8]
00000000000071a2         cmp        rsi, rdi
00000000000071a5         jae        loc_71e5

00000000000071a7         nop        word [rax+rax]

                     loc_71b0:
00000000000071b0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
00000000000071b4         je         loc_71dc

00000000000071b6         mov        rax, qword [rsi+8]
00000000000071ba         mov        edx, 0x1
00000000000071bf         test       rax, rax
00000000000071c2         je         loc_71d5

00000000000071c4         nop        dword [rax]

                     loc_71c8:
00000000000071c8         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
00000000000071cc         add        rdx, 0x1
00000000000071d0         test       rax, rax
00000000000071d3         jne        loc_71c8

                     loc_71d5:
00000000000071d5         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
00000000000071d8         cmovb      rbx, rdx

                     loc_71dc:
00000000000071dc         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
00000000000071e0         cmp        rsi, rdi
00000000000071e3         jb         loc_71b0

                     loc_71e5:
00000000000071e5         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
00000000000071ec         mov        esi, 0x1
00000000000071f1         mov        rdi, r12
00000000000071f4         xor        eax, eax
00000000000071f6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000071fb         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
0000000000007202         xor        eax, eax
0000000000007204         mov        rcx, rbp
0000000000007207         mov        esi, 0x1
000000000000720c         mov        rdi, r12
000000000000720f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007214         test       r13, r13
0000000000007217         js         loc_7280

0000000000007219         pxor       xmm0, xmm0
000000000000721d         test       rbp, rbp
0000000000007220         cvtsi2sd   xmm0, r13
0000000000007225         mulsd      xmm0, qword [float_ca70+8]                  ; 0xca78
000000000000722d         js         loc_72a9

                     loc_722f:
000000000000722f         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
0000000000007233         cvtsi2sd   xmm1, rbp

                     loc_7238:
0000000000007238         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
000000000000723c         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
0000000000007243         mov        rcx, r13
0000000000007246         mov        rdi, r12
0000000000007249         mov        esi, 0x1
000000000000724e         mov        eax, 0x1
0000000000007253         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007258         add        rsp, 0x8
000000000000725c         mov        rcx, rbx
000000000000725f         mov        rdi, r12
0000000000007262         pop        rbx
0000000000007263         pop        rbp
0000000000007264         pop        r12
0000000000007266         pop        r13
0000000000007268         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
000000000000726f         mov        esi, 0x1
0000000000007274         xor        eax, eax
0000000000007276         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000727b         align      128

                     loc_7280:
0000000000007280         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
0000000000007283         mov        rdx, r13
0000000000007286         pxor       xmm0, xmm0
000000000000728a         shr        rax, 0x1
000000000000728d         and        edx, 0x1
0000000000007290         or         rax, rdx
0000000000007293         test       rbp, rbp
0000000000007296         cvtsi2sd   xmm0, rax
000000000000729b         addsd      xmm0, xmm0
000000000000729f         mulsd      xmm0, qword [float_ca70+8]                  ; 0xca78
00000000000072a7         jns        loc_722f

                     loc_72a9:
00000000000072a9         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
00000000000072ac         pxor       xmm1, xmm1
00000000000072b0         shr        rax, 0x1
00000000000072b3         and        ebp, 0x1
00000000000072b6         or         rax, rbp                                    ; DATA XREF=fremote+1724
00000000000072b9         cvtsi2sd   xmm1, rax
00000000000072be         addsd      xmm1, xmm1
00000000000072c2         jmp        loc_7238
00000000000072c7         align      16                                          ; End of unwind block (FDE at 0xe124)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
00000000000072d0         push       r12                                         ; Begin of unwind block (FDE at 0xe160), CODE XREF=main+9344
00000000000072d2         push       rbp
00000000000072d3         mov        r12, rdi
00000000000072d6         push       rbx
00000000000072d7         mov        rbp, rsi
00000000000072da         call       safe_hasher                                 ; safe_hasher
00000000000072df         mov        rsi, qword [rax]
00000000000072e2         test       rsi, rsi
00000000000072e5         je         loc_730d

00000000000072e7         mov        rbx, rax
00000000000072ea         jmp        loc_72f3
00000000000072ec         align      16

                     loc_72f0:
00000000000072f0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_72f3:
00000000000072f3         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
00000000000072f6         je         loc_730f

00000000000072f8         mov        rdi, rbp
00000000000072fb         call       qword [r12+0x38]
0000000000007300         test       al, al
0000000000007302         jne        loc_7320

0000000000007304         mov        rbx, qword [rbx+8]
0000000000007308         test       rbx, rbx
000000000000730b         jne        loc_72f0

                     loc_730d:
000000000000730d         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_730f:
000000000000730f         pop        rbx                                         ; CODE XREF=hash_lookup+38
0000000000007310         mov        rax, rsi
0000000000007313         pop        rbp
0000000000007314         pop        r12
0000000000007316         ret
                        ; endp
0000000000007317         align      32

                     loc_7320:
0000000000007320         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
0000000000007323         pop        rbx
0000000000007324         pop        rbp
0000000000007325         mov        rax, rsi
0000000000007328         pop        r12
000000000000732a         ret
                        ; endp
000000000000732b         align      16                                          ; End of unwind block (FDE at 0xe160)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
0000000000007330         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0xe198)
0000000000007335         je         loc_7363

0000000000007337         mov        rdx, qword [rdi]
000000000000733a         mov        rcx, qword [rdi+8]
000000000000733e         cmp        rdx, rcx
0000000000007341         jae        loc_7368

0000000000007343         mov        rax, qword [rdx]
0000000000007346         test       rax, rax
0000000000007349         jne        loc_7366

000000000000734b         nop        dword [rax+rax]

                     loc_7350:
0000000000007350         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
0000000000007354         cmp        rdx, rcx
0000000000007357         jae        loc_7368

0000000000007359         mov        rax, qword [rdx]
000000000000735c         test       rax, rax
000000000000735f         je         loc_7350

0000000000007361         ret
                        ; endp

                     loc_7363:
0000000000007363         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
0000000000007365         ret
                        ; endp

                     loc_7366:
0000000000007366         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_7368:
0000000000007368         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
000000000000736c         call       j_abort                                     ; abort
                        ; endp
0000000000007371         align      128                                         ; End of unwind block (FDE at 0xe198)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
0000000000007380         push       rbp                                         ; Begin of unwind block (FDE at 0xe1ac)
0000000000007381         push       rbx
0000000000007382         mov        rbp, rdi
0000000000007385         mov        rbx, rsi
0000000000007388         sub        rsp, 0x8
000000000000738c         call       safe_hasher                                 ; safe_hasher
0000000000007391         mov        rdx, rax
0000000000007394         mov        rcx, rax
0000000000007397         mov        rax, qword [rdx]
000000000000739a         mov        rdx, qword [rdx+8]
000000000000739e         cmp        rax, rbx
00000000000073a1         je         loc_73b9

00000000000073a3         nop        dword [rax+rax]

                     loc_73a8:
00000000000073a8         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
00000000000073ab         je         loc_73be

00000000000073ad         mov        rax, qword [rdx]
00000000000073b0         mov        rdx, qword [rdx+8]
00000000000073b4         cmp        rax, rbx
00000000000073b7         jne        loc_73a8

                     loc_73b9:
00000000000073b9         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
00000000000073bc         jne        loc_73e8

                     loc_73be:
00000000000073be         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
00000000000073c2         jmp        loc_73d0
00000000000073c4         align      8

                     loc_73c8:
00000000000073c8         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
00000000000073cb         test       rax, rax
00000000000073ce         jne        loc_73db

                     loc_73d0:
00000000000073d0         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
00000000000073d4         cmp        rdx, rcx
00000000000073d7         ja         loc_73c8

00000000000073d9         xor        eax, eax

                     loc_73db:
00000000000073db         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
00000000000073df         pop        rbx
00000000000073e0         pop        rbp
00000000000073e1         ret
                        ; endp
00000000000073e2         align      8

                     loc_73e8:
00000000000073e8         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
00000000000073eb         add        rsp, 0x8
00000000000073ef         pop        rbx
00000000000073f0         pop        rbp
00000000000073f1         ret
                        ; endp
00000000000073f2         align      1024                                        ; End of unwind block (FDE at 0xe1ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
0000000000007400         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0xe1e0)
0000000000007403         cmp        qword [rdi+8], r9
0000000000007407         jbe        loc_7462

0000000000007409         xor        r8d, r8d

                     loc_740c:
000000000000740c         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
000000000000740f         test       rcx, rcx
0000000000007412         je         loc_744d

0000000000007414         cmp        rdx, r8
0000000000007417         jbe        loc_7457

0000000000007419         mov        qword [rsi+r8*8], rcx
000000000000741d         mov        rcx, qword [r9+8]
0000000000007421         lea        rax, qword [r8+1]
0000000000007425         test       rcx, rcx
0000000000007428         je         loc_744a

000000000000742a         nop        word [rax+rax]

                     loc_7430:
0000000000007430         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
0000000000007433         je         loc_7460

0000000000007435         mov        r8, qword [rcx]
0000000000007438         add        rax, 0x1
000000000000743c         mov        qword [rsi+rax*8-8], r8
0000000000007441         mov        rcx, qword [rcx+8]
0000000000007445         test       rcx, rcx
0000000000007448         jne        loc_7430

                     loc_744a:
000000000000744a         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_744d:
000000000000744d         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
0000000000007451         cmp        qword [rdi+8], r9
0000000000007455         ja         loc_740c

                     loc_7457:
0000000000007457         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
000000000000745a         ret
                        ; endp
000000000000745b         align      32

                     loc_7460:
0000000000007460         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_7462:
0000000000007462         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
0000000000007464         ret
                        ; endp
0000000000007465         align      16                                          ; End of unwind block (FDE at 0xe1e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
0000000000007470         push       r15                                         ; Begin of unwind block (FDE at 0xe1f4)
0000000000007472         push       r14
0000000000007474         push       r13
0000000000007476         push       r12
0000000000007478         push       rbp
0000000000007479         push       rbx
000000000000747a         sub        rsp, 0x8
000000000000747e         mov        r14, qword [rdi]
0000000000007481         cmp        qword [rdi+8], r14
0000000000007485         jbe        loc_74d6

0000000000007487         mov        r13, rdx
000000000000748a         mov        r12, rsi
000000000000748d         mov        r15, rdi
0000000000007490         xor        ebp, ebp

                     loc_7492:
0000000000007492         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
0000000000007495         test       rdi, rdi
0000000000007498         je         loc_74ba

000000000000749a         mov        rbx, r14
000000000000749d         jmp        loc_74a3
000000000000749f         align      32

                     loc_74a0:
00000000000074a0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_74a3:
00000000000074a3         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
00000000000074a6         call       r12
00000000000074a9         test       al, al
00000000000074ab         je         loc_74c4

00000000000074ad         mov        rbx, qword [rbx+8]
00000000000074b1         add        rbp, 0x1
00000000000074b5         test       rbx, rbx
00000000000074b8         jne        loc_74a0

                     loc_74ba:
00000000000074ba         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
00000000000074be         cmp        qword [r15+8], r14
00000000000074c2         ja         loc_7492

                     loc_74c4:
00000000000074c4         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
00000000000074c8         mov        rax, rbp
00000000000074cb         pop        rbx
00000000000074cc         pop        rbp
00000000000074cd         pop        r12
00000000000074cf         pop        r13
00000000000074d1         pop        r14
00000000000074d3         pop        r15
00000000000074d5         ret
                        ; endp

                     loc_74d6:
00000000000074d6         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
00000000000074d8         jmp        loc_74c4
00000000000074da         align      32                                          ; End of unwind block (FDE at 0xe1f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_string:
00000000000074e0         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0xe240)
00000000000074e3         xor        edx, edx
00000000000074e5         test       cl, cl
00000000000074e7         je         loc_750d

00000000000074e9         nop        dword [rax]

                     loc_74f0:
00000000000074f0         mov        rax, rdx                                    ; CODE XREF=hash_string+43
00000000000074f3         add        rdi, 0x1
00000000000074f7         shl        rax, 0x5
00000000000074fb         sub        rax, rdx
00000000000074fe         xor        edx, edx
0000000000007500         add        rax, rcx
0000000000007503         movzx      ecx, byte [rdi]
0000000000007506         div        rsi
0000000000007509         test       cl, cl
000000000000750b         jne        loc_74f0

                     loc_750d:
000000000000750d         mov        rax, rdx                                    ; CODE XREF=hash_string+7
0000000000007510         ret
                        ; endp
0000000000007511         align      32                                          ; End of unwind block (FDE at 0xe240)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
0000000000007520         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0xe254)
000000000000752a         mov        byte [rdi+0x10], 0x0
000000000000752e         mov        qword [rdi], rax
0000000000007531         movabs     rax, 0x3fb4fdf43f4ccccd
000000000000753b         mov        qword [rdi+8], rax
000000000000753f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
0000000000007540         push       r15                                         ; End of unwind block (FDE at 0xe254), Begin of unwind block (FDE at 0xe268), CODE XREF=main+7743
0000000000007542         push       r14
0000000000007544         lea        rax, qword [raw_hasher]                     ; raw_hasher
000000000000754b         push       r13
000000000000754d         push       r12
000000000000754f         mov        r12, rdx
0000000000007552         push       rbp
0000000000007553         push       rbx
0000000000007554         mov        r13, rcx
0000000000007557         mov        rbp, rdi
000000000000755a         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
000000000000755f         mov        r15, rsi
0000000000007562         sub        rsp, 0x8
0000000000007566         test       rdx, rdx
0000000000007569         mov        r14, r8
000000000000756c         cmove      r12, rax
0000000000007570         lea        rax, qword [raw_comparator]                 ; raw_comparator
0000000000007577         test       rcx, rcx
000000000000757a         cmove      r13, rax
000000000000757e         call       j_malloc                                    ; malloc
0000000000007583         test       rax, rax
0000000000007586         mov        rbx, rax
0000000000007589         je         loc_763a

000000000000758f         test       r15, r15
0000000000007592         lea        rdi, qword [rax+0x28]
0000000000007596         je         loc_7650

000000000000759c         mov        qword [rax+0x28], r15
00000000000075a0         call       check_tuning.isra.0                         ; check_tuning.isra.0
00000000000075a5         test       al, al
00000000000075a7         je         loc_7630

00000000000075ad         cmp        byte [r15+0x10], 0x0
00000000000075b2         je         loc_76b0

                     loc_75b8:
00000000000075b8         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
00000000000075bb         call       next_prime                                  ; next_prime
00000000000075c0         mov        edx, 0x8
00000000000075c5         mov        rbp, rax
00000000000075c8         xor        ecx, ecx
00000000000075ca         mov        rax, rdx
00000000000075cd         mul        rbp
00000000000075d0         jo         loc_76ea

                     loc_75d6:
00000000000075d6         test       rax, rax                                    ; CODE XREF=hash_initialize+431
00000000000075d9         js         loc_7630

00000000000075db         test       rcx, rcx
00000000000075de         jne        loc_7630

00000000000075e0         test       rbp, rbp
00000000000075e3         mov        qword [rbx+0x10], rbp
00000000000075e7         je         loc_7630

00000000000075e9         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
00000000000075ee         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
00000000000075f1         call       j_calloc                                    ; calloc
00000000000075f6         test       rax, rax
00000000000075f9         mov        qword [rbx], rax
00000000000075fc         je         loc_7630

00000000000075fe         shl        rbp, 0x4
0000000000007602         mov        qword [rbx+0x18], 0x0
000000000000760a         mov        qword [rbx+0x20], 0x0
0000000000007612         add        rbp, rax
0000000000007615         mov        qword [rbx+0x30], r12
0000000000007619         mov        qword [rbx+0x38], r13
000000000000761d         mov        qword [rbx+8], rbp
0000000000007621         mov        qword [rbx+0x40], r14
0000000000007625         mov        qword [rbx+0x48], 0x0
000000000000762d         jmp        loc_763a
000000000000762f         align      16

                     loc_7630:
0000000000007630         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
0000000000007633         xor        ebx, ebx
0000000000007635         call       j_free                                      ; free

                     loc_763a:
000000000000763a         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
000000000000763e         mov        rax, rbx
0000000000007641         pop        rbx
0000000000007642         pop        rbp
0000000000007643         pop        r12
0000000000007645         pop        r13
0000000000007647         pop        r14
0000000000007649         pop        r15
000000000000764b         ret
                        ; endp
000000000000764c         align      16

                     loc_7650:
0000000000007650         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
0000000000007657         mov        qword [rbx+0x28], rax
000000000000765b         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000007660         test       al, al
0000000000007662         movss      xmm1, dword [float_ca68]                    ; float_ca68
000000000000766a         je         loc_7630

000000000000766c         test       rbp, rbp
000000000000766f         js         loc_76bb

                     loc_7671:
0000000000007671         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
0000000000007675         cvtsi2ss   xmm0, rbp

                     loc_767a:
000000000000767a         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
000000000000767e         ucomiss    xmm0, dword [float_ca6c]                    ; float_ca6c
0000000000007685         jae        loc_7630

0000000000007687         ucomiss    xmm0, dword [float_ca70]                    ; float_ca70
000000000000768e         jb         loc_76e0

0000000000007690         subss      xmm0, dword [float_ca70]                    ; float_ca70
0000000000007698         movabs     rax, 0x8000000000000000
00000000000076a2         cvttss2si  rbp, xmm0
00000000000076a7         xor        rbp, rax
00000000000076aa         jmp        loc_75b8
00000000000076af         align      16

                     loc_76b0:
00000000000076b0         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
00000000000076b3         movss      xmm1, dword [r15+8]
00000000000076b9         jns        loc_7671

                     loc_76bb:
00000000000076bb         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
00000000000076be         pxor       xmm0, xmm0
00000000000076c2         shr        rax, 0x1
00000000000076c5         and        ebp, 0x1
00000000000076c8         or         rax, rbp
00000000000076cb         cvtsi2ss   xmm0, rax
00000000000076d0         addss      xmm0, xmm0
00000000000076d4         jmp        loc_767a
00000000000076d6         align      32

                     loc_76e0:
00000000000076e0         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
00000000000076e5         jmp        loc_75b8

                     loc_76ea:
00000000000076ea         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
00000000000076ef         jmp        loc_75d6
00000000000076f4         align      256                                         ; End of unwind block (FDE at 0xe268)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
0000000000007700         push       r12                                         ; Begin of unwind block (FDE at 0xe2b4)
0000000000007702         push       rbp
0000000000007703         mov        rbp, rdi
0000000000007706         push       rbx
0000000000007707         mov        r12, qword [rdi]
000000000000770a         cmp        r12, qword [rdi+8]
000000000000770e         jae        loc_777b

                     loc_7710:
0000000000007710         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
0000000000007715         je         loc_7771

0000000000007717         mov        rbx, qword [r12+8]
000000000000771c         mov        rax, qword [rbp+0x40]
0000000000007720         test       rbx, rbx
0000000000007723         je         loc_7755

0000000000007725         nop        dword [rax]

                     loc_7728:
0000000000007728         test       rax, rax                                    ; CODE XREF=hash_clear+83
000000000000772b         je         loc_7736

000000000000772d         mov        rdi, qword [rbx]
0000000000007730         call       rax
0000000000007732         mov        rax, qword [rbp+0x40]

                     loc_7736:
0000000000007736         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
000000000000773a         mov        rcx, qword [rbp+0x48]
000000000000773e         mov        qword [rbx], 0x0
0000000000007745         test       rdx, rdx
0000000000007748         mov        qword [rbx+8], rcx
000000000000774c         mov        qword [rbp+0x48], rbx
0000000000007750         mov        rbx, rdx
0000000000007753         jne        loc_7728

                     loc_7755:
0000000000007755         test       rax, rax                                    ; CODE XREF=hash_clear+35
0000000000007758         je         loc_7760

000000000000775a         mov        rdi, qword [r12]
000000000000775e         call       rax

                     loc_7760:
0000000000007760         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
0000000000007768         mov        qword [r12+8], 0x0

                     loc_7771:
0000000000007771         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
0000000000007775         cmp        qword [rbp+8], r12
0000000000007779         ja         loc_7710

                     loc_777b:
000000000000777b         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
0000000000007783         mov        qword [rbp+0x20], 0x0
000000000000778b         pop        rbx
000000000000778c         pop        rbp
000000000000778d         pop        r12
000000000000778f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
0000000000007790         push       r12                                         ; End of unwind block (FDE at 0xe2b4), Begin of unwind block (FDE at 0xe2e0), CODE XREF=main+8093, main+9688, main+9953, main+10010
0000000000007792         push       rbp
0000000000007793         mov        r12, rdi
0000000000007796         push       rbx
0000000000007797         cmp        qword [rdi+0x40], 0x0
000000000000779c         mov        rbp, qword [rdi]
000000000000779f         mov        rax, qword [rdi+8]
00000000000077a3         je         loc_77f3

00000000000077a5         cmp        qword [rdi+0x20], 0x0
00000000000077aa         je         loc_77f3

00000000000077ac         cmp        rbp, rax
00000000000077af         jae        loc_782c

00000000000077b1         nop        dword [rax]

                     loc_77b8:
00000000000077b8         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
00000000000077bc         test       rdi, rdi
00000000000077bf         je         loc_77e6

00000000000077c1         mov        rbx, rbp
00000000000077c4         jmp        loc_77d3
00000000000077c6         align      16

                     loc_77d0:
00000000000077d0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_77d3:
00000000000077d3         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
00000000000077d8         mov        rbx, qword [rbx+8]
00000000000077dc         test       rbx, rbx
00000000000077df         jne        loc_77d0

00000000000077e1         mov        rax, qword [r12+8]

                     loc_77e6:
00000000000077e6         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
00000000000077ea         cmp        rax, rbp
00000000000077ed         ja         loc_77b8

00000000000077ef         mov        rbp, qword [r12]

                     loc_77f3:
00000000000077f3         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
00000000000077f6         jae        loc_782c

00000000000077f8         nop        dword [rax+rax]

                     loc_7800:
0000000000007800         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
0000000000007804         test       rdi, rdi
0000000000007807         je         loc_7821

0000000000007809         nop        dword [rax]

                     loc_7810:
0000000000007810         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
0000000000007814         call       j_free                                      ; free
0000000000007819         test       rbx, rbx
000000000000781c         mov        rdi, rbx
000000000000781f         jne        loc_7810

                     loc_7821:
0000000000007821         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
0000000000007825         cmp        qword [r12+8], rbp
000000000000782a         ja         loc_7800

                     loc_782c:
000000000000782c         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
0000000000007831         test       rdi, rdi
0000000000007834         je         loc_7851

0000000000007836         nop        word [cs:rax+rax]

                     loc_7840:
0000000000007840         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
0000000000007844         call       j_free                                      ; free
0000000000007849         test       rbx, rbx
000000000000784c         mov        rdi, rbx
000000000000784f         jne        loc_7840

                     loc_7851:
0000000000007851         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free, CODE XREF=hash_free+164
0000000000007855         call       j_free                                      ; free
000000000000785a         pop        rbx
000000000000785b         mov        rdi, r12                                    ; argument "__ptr" for method j_free
000000000000785e         pop        rbp
000000000000785f         pop        r12
0000000000007861         jmp        j_free                                      ; free
                        ; endp
0000000000007866         align      16                                          ; End of unwind block (FDE at 0xe2e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
0000000000007870         push       r12                                         ; Begin of unwind block (FDE at 0xe30c), CODE XREF=hash_insert_if_absent+443, hash_delete+271
0000000000007872         push       rbp
0000000000007873         mov        rbp, rdi
0000000000007876         push       rbx
0000000000007877         sub        rsp, 0x60
000000000000787b         mov        r12, qword [rdi+0x28]
000000000000787f         mov        rax, qword [fs:0x28]
0000000000007888         mov        qword [rsp+0x78+var_20], rax
000000000000788d         xor        eax, eax
000000000000788f         cmp        byte [r12+0x10], 0x0
0000000000007895         jne        loc_78e8

0000000000007897         test       rsi, rsi
000000000000789a         js         loc_7a18

00000000000078a0         pxor       xmm0, xmm0
00000000000078a4         cvtsi2ss   xmm0, rsi

                     loc_78a9:
00000000000078a9         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
00000000000078b0         ucomiss    xmm0, dword [float_ca6c]                    ; float_ca6c
00000000000078b7         jae        loc_79f0

00000000000078bd         ucomiss    xmm0, dword [float_ca70]                    ; float_ca70
00000000000078c4         jb         loc_7a40

00000000000078ca         subss      xmm0, dword [float_ca70]                    ; float_ca70
00000000000078d2         movabs     rax, 0x8000000000000000
00000000000078dc         cvttss2si  rsi, xmm0
00000000000078e1         xor        rsi, rax
00000000000078e4         nop        dword [rax]

                     loc_78e8:
00000000000078e8         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
00000000000078eb         call       next_prime                                  ; next_prime
00000000000078f0         mov        edx, 0x8
00000000000078f5         mov        rbx, rax
00000000000078f8         xor        ecx, ecx
00000000000078fa         mov        rax, rdx
00000000000078fd         mul        rbx
0000000000007900         jo         loc_7a9f

                     loc_7906:
0000000000007906         test       rax, rax                                    ; CODE XREF=hash_rehash+564
0000000000007909         mov        eax, 0x1
000000000000790e         cmovs      rcx, rax
0000000000007912         test       rbx, rbx
0000000000007915         je         loc_79f0

000000000000791b         and        ecx, 0x1
000000000000791e         jne        loc_79f0

0000000000007924         cmp        qword [rbp+0x10], rbx
0000000000007928         je         loc_7a50

000000000000792e         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000007933         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
0000000000007936         call       j_calloc                                    ; calloc
000000000000793b         test       rax, rax
000000000000793e         mov        qword [rsp+0x78+var_78], rax
0000000000007942         je         loc_79f0

0000000000007948         mov        qword [rsp+0x78+var_68], rbx
000000000000794d         shl        rbx, 0x4
0000000000007951         mov        qword [rsp+0x78+var_50], r12
0000000000007956         add        rbx, rax
0000000000007959         mov        rax, qword [rbp+0x30]
000000000000795d         mov        r12, rsp
0000000000007960         xor        edx, edx
0000000000007962         mov        rsi, rbp
0000000000007965         mov        rdi, r12
0000000000007968         mov        qword [rsp+0x78+var_70], rbx
000000000000796d         mov        qword [rsp+0x78+var_60], 0x0
0000000000007976         mov        qword [rsp+0x78+var_48], rax
000000000000797b         mov        rax, qword [rbp+0x38]
000000000000797f         mov        qword [rsp+0x78+var_58], 0x0
0000000000007988         mov        qword [rsp+0x78+var_40], rax
000000000000798d         mov        rax, qword [rbp+0x40]
0000000000007991         mov        qword [rsp+0x78+var_38], rax
0000000000007996         mov        rax, qword [rbp+0x48]
000000000000799a         mov        qword [rsp+0x78+var_30], rax
000000000000799f         call       transfer_entries                            ; transfer_entries
00000000000079a4         test       al, al
00000000000079a6         mov        ebx, eax
00000000000079a8         jne        loc_7a60

00000000000079ae         mov        rax, qword [rsp+0x78+var_30]
00000000000079b3         mov        edx, 0x1
00000000000079b8         mov        rsi, r12
00000000000079bb         mov        rdi, rbp
00000000000079be         mov        qword [rbp+0x48], rax
00000000000079c2         call       transfer_entries                            ; transfer_entries
00000000000079c7         test       al, al
00000000000079c9         je         loc_7aa9

00000000000079cf         xor        edx, edx
00000000000079d1         mov        rsi, r12
00000000000079d4         mov        rdi, rbp
00000000000079d7         call       transfer_entries                            ; transfer_entries
00000000000079dc         test       al, al
00000000000079de         je         loc_7aa9

00000000000079e4         mov        rdi, qword [rsp+0x78+var_78]                ; argument "__ptr" for method j_free
00000000000079e8         call       j_free                                      ; free
00000000000079ed         jmp        loc_79f2
00000000000079ef         align      16

                     loc_79f0:
00000000000079f0         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_79f2:
00000000000079f2         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
00000000000079f7         xor        rcx, qword [fs:0x28]
0000000000007a00         mov        eax, ebx
0000000000007a02         jne        loc_7a9a

0000000000007a08         add        rsp, 0x60
0000000000007a0c         pop        rbx
0000000000007a0d         pop        rbp
0000000000007a0e         pop        r12
0000000000007a10         ret
                        ; endp
0000000000007a11         align      8

                     loc_7a18:
0000000000007a18         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
0000000000007a1b         pxor       xmm0, xmm0
0000000000007a1f         shr        rax, 0x1
0000000000007a22         and        esi, 0x1
0000000000007a25         or         rax, rsi
0000000000007a28         cvtsi2ss   xmm0, rax
0000000000007a2d         addss      xmm0, xmm0
0000000000007a31         jmp        loc_78a9
0000000000007a36         align      64

                     loc_7a40:
0000000000007a40         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
0000000000007a45         jmp        loc_78e8
0000000000007a4a         align      16

                     loc_7a50:
0000000000007a50         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
0000000000007a55         jmp        loc_79f2
0000000000007a57         align      32

                     loc_7a60:
0000000000007a60         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=hash_rehash+312
0000000000007a64         call       j_free                                      ; free
0000000000007a69         mov        rax, qword [rsp+0x78+var_78]
0000000000007a6d         mov        qword [rbp], rax
0000000000007a71         mov        rax, qword [rsp+0x78+var_70]
0000000000007a76         mov        qword [rbp+8], rax
0000000000007a7a         mov        rax, qword [rsp+0x78+var_68]
0000000000007a7f         mov        qword [rbp+0x10], rax
0000000000007a83         mov        rax, qword [rsp+0x78+var_60]
0000000000007a88         mov        qword [rbp+0x18], rax
0000000000007a8c         mov        rax, qword [rsp+0x78+var_30]
0000000000007a91         mov        qword [rbp+0x48], rax
0000000000007a95         jmp        loc_79f2

                     loc_7a9a:
0000000000007a9a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_7a9f:
0000000000007a9f         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
0000000000007aa4         jmp        loc_7906

                     loc_7aa9:
0000000000007aa9         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
0000000000007aae         align      16                                          ; End of unwind block (FDE at 0xe30c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
0000000000007ab0         push       r13                                         ; Begin of unwind block (FDE at 0xe344), CODE XREF=hash_insert+27
0000000000007ab2         push       r12
0000000000007ab4         push       rbp
0000000000007ab5         push       rbx
0000000000007ab6         sub        rsp, 0x18
0000000000007aba         mov        rax, qword [fs:0x28]
0000000000007ac3         mov        qword [rsp+0x38+var_30], rax
0000000000007ac8         xor        eax, eax
0000000000007aca         test       rsi, rsi
0000000000007acd         je         loc_7c8d

0000000000007ad3         mov        r12, rsp
0000000000007ad6         xor        ecx, ecx
0000000000007ad8         mov        r13, rdx
0000000000007adb         mov        rdx, r12
0000000000007ade         mov        rbx, rdi
0000000000007ae1         mov        rbp, rsi
0000000000007ae4         call       hash_find_entry                             ; hash_find_entry
0000000000007ae9         test       rax, rax
0000000000007aec         mov        rdx, rax
0000000000007aef         je         loc_7b20

0000000000007af1         xor        eax, eax
0000000000007af3         test       r13, r13
0000000000007af6         je         loc_7afc

0000000000007af8         mov        qword [r13], rdx

                     loc_7afc:
0000000000007afc         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
0000000000007b01         xor        rcx, qword [fs:0x28]
0000000000007b0a         jne        loc_7d2f

0000000000007b10         add        rsp, 0x18
0000000000007b14         pop        rbx
0000000000007b15         pop        rbp
0000000000007b16         pop        r12
0000000000007b18         pop        r13
0000000000007b1a         ret
                        ; endp
0000000000007b1b         align      32

                     loc_7b20:
0000000000007b20         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
0000000000007b24         test       rax, rax
0000000000007b27         js         loc_7ba0

0000000000007b29         pxor       xmm1, xmm1
0000000000007b2d         mov        rdx, qword [rbx+0x28]
0000000000007b31         cvtsi2ss   xmm1, rax
0000000000007b36         mov        rax, qword [rbx+0x10]
0000000000007b3a         test       rax, rax
0000000000007b3d         js         loc_7bca

                     loc_7b43:
0000000000007b43         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
0000000000007b47         cvtsi2ss   xmm0, rax

                     loc_7b4c:
0000000000007b4c         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
0000000000007b51         ucomiss    xmm1, xmm0
0000000000007b54         ja         loc_7bf0

                     loc_7b5a:
0000000000007b5a         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
0000000000007b5e         cmp        qword [r12], 0x0
0000000000007b63         je         loc_7c98

0000000000007b69         mov        rax, qword [rbx+0x48]
0000000000007b6d         test       rax, rax
0000000000007b70         je         loc_7cb0

0000000000007b76         mov        rdx, qword [rax+8]
0000000000007b7a         mov        qword [rbx+0x48], rdx

                     loc_7b7e:
0000000000007b7e         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
0000000000007b83         mov        qword [rax], rbp
0000000000007b86         mov        qword [rax+8], rdx
0000000000007b8a         mov        qword [r12+8], rax
0000000000007b8f         mov        eax, 0x1
0000000000007b94         add        qword [rbx+0x20], 0x1
0000000000007b99         jmp        loc_7afc
0000000000007b9e         align      32

                     loc_7ba0:
0000000000007ba0         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
0000000000007ba3         pxor       xmm1, xmm1
0000000000007ba7         and        eax, 0x1
0000000000007baa         shr        rdx, 0x1
0000000000007bad         or         rdx, rax
0000000000007bb0         mov        rax, qword [rbx+0x10]
0000000000007bb4         cvtsi2ss   xmm1, rdx
0000000000007bb9         mov        rdx, qword [rbx+0x28]
0000000000007bbd         test       rax, rax
0000000000007bc0         addss      xmm1, xmm1
0000000000007bc4         jns        loc_7b43

                     loc_7bca:
0000000000007bca         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
0000000000007bcd         pxor       xmm0, xmm0
0000000000007bd1         shr        rcx, 0x1
0000000000007bd4         and        eax, 0x1
0000000000007bd7         or         rcx, rax
0000000000007bda         cvtsi2ss   xmm0, rcx
0000000000007bdf         addss      xmm0, xmm0
0000000000007be3         jmp        loc_7b4c
0000000000007be8         align      16

                     loc_7bf0:
0000000000007bf0         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
0000000000007bf4         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000007bf9         mov        rax, qword [rbx+0x10]
0000000000007bfd         mov        rdx, qword [rbx+0x28]
0000000000007c01         test       rax, rax
0000000000007c04         movss      xmm2, dword [rdx+8]
0000000000007c09         js         loc_7cd0

0000000000007c0f         pxor       xmm0, xmm0
0000000000007c13         cvtsi2ss   xmm0, rax

                     loc_7c18:
0000000000007c18         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
0000000000007c1c         test       rax, rax
0000000000007c1f         js         loc_7cf0

0000000000007c25         pxor       xmm1, xmm1
0000000000007c29         cvtsi2ss   xmm1, rax

                     loc_7c2e:
0000000000007c2e         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
0000000000007c31         mulss      xmm3, xmm0
0000000000007c35         ucomiss    xmm1, xmm3
0000000000007c38         jbe        loc_7b5a

0000000000007c3e         cmp        byte [rdx+0x10], 0x0
0000000000007c42         mulss      xmm0, dword [rdx+0xc]
0000000000007c47         jne        loc_7c4d

0000000000007c49         mulss      xmm0, xmm2

                     loc_7c4d:
0000000000007c4d         ucomiss    xmm0, dword [float_ca6c]                    ; float_ca6c, CODE XREF=hash_insert_if_absent+407
0000000000007c54         jae        loc_7cc3

0000000000007c56         ucomiss    xmm0, dword [float_ca70]                    ; float_ca70
0000000000007c5d         jae        loc_7d10

0000000000007c63         cvttss2si  rsi, xmm0

                     loc_7c68:
0000000000007c68         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
0000000000007c6b         call       hash_rehash                                 ; hash_rehash
0000000000007c70         test       al, al
0000000000007c72         je         loc_7cc3

0000000000007c74         xor        ecx, ecx
0000000000007c76         mov        rdx, r12
0000000000007c79         mov        rsi, rbp
0000000000007c7c         mov        rdi, rbx
0000000000007c7f         call       hash_find_entry                             ; hash_find_entry
0000000000007c84         test       rax, rax
0000000000007c87         je         loc_7b5a

                     loc_7c8d:
0000000000007c8d         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
0000000000007c92         align      8

                     loc_7c98:
0000000000007c98         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
0000000000007c9c         mov        eax, 0x1
0000000000007ca1         add        qword [rbx+0x20], 0x1
0000000000007ca6         add        qword [rbx+0x18], 0x1
0000000000007cab         jmp        loc_7afc

                     loc_7cb0:
0000000000007cb0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
0000000000007cb5         call       j_malloc                                    ; malloc
0000000000007cba         test       rax, rax
0000000000007cbd         jne        loc_7b7e

                     loc_7cc3:
0000000000007cc3         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
0000000000007cc8         jmp        loc_7afc
0000000000007ccd         align      16

                     loc_7cd0:
0000000000007cd0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
0000000000007cd3         pxor       xmm0, xmm0
0000000000007cd7         shr        rcx, 0x1
0000000000007cda         and        eax, 0x1
0000000000007cdd         or         rcx, rax
0000000000007ce0         cvtsi2ss   xmm0, rcx
0000000000007ce5         addss      xmm0, xmm0
0000000000007ce9         jmp        loc_7c18
0000000000007cee         align      16

                     loc_7cf0:
0000000000007cf0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
0000000000007cf3         pxor       xmm1, xmm1
0000000000007cf7         shr        rcx, 0x1
0000000000007cfa         and        eax, 0x1
0000000000007cfd         or         rcx, rax
0000000000007d00         cvtsi2ss   xmm1, rcx
0000000000007d05         addss      xmm1, xmm1
0000000000007d09         jmp        loc_7c2e
0000000000007d0e         align      16

                     loc_7d10:
0000000000007d10         subss      xmm0, dword [float_ca70]                    ; float_ca70, CODE XREF=hash_insert_if_absent+429
0000000000007d18         movabs     rax, 0x8000000000000000
0000000000007d22         cvttss2si  rsi, xmm0
0000000000007d27         xor        rsi, rax
0000000000007d2a         jmp        loc_7c68

                     loc_7d2f:
0000000000007d2f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
0000000000007d34         align      64                                          ; End of unwind block (FDE at 0xe344)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
0000000000007d40         push       rbx                                         ; Begin of unwind block (FDE at 0xe380), CODE XREF=main+8225, main+9629
0000000000007d41         mov        rbx, rsi
0000000000007d44         sub        rsp, 0x10
0000000000007d48         mov        rdx, rsp
0000000000007d4b         mov        rax, qword [fs:0x28]
0000000000007d54         mov        qword [rsp+0x18+var_10], rax
0000000000007d59         xor        eax, eax
0000000000007d5b         call       hash_insert_if_absent                       ; hash_insert_if_absent
0000000000007d60         cmp        eax, 0xffffffff
0000000000007d63         je         loc_7d90

0000000000007d65         test       eax, eax
0000000000007d67         jne        loc_7d6d

0000000000007d69         mov        rbx, qword [rsp+0x18+var_18]

                     loc_7d6d:
0000000000007d6d         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
0000000000007d72         xor        rcx, qword [fs:0x28]
0000000000007d7b         mov        rax, rbx
0000000000007d7e         jne        loc_7d94

0000000000007d80         add        rsp, 0x10
0000000000007d84         pop        rbx
0000000000007d85         ret
                        ; endp
0000000000007d86         align      16

                     loc_7d90:
0000000000007d90         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
0000000000007d92         jmp        loc_7d6d

                     loc_7d94:
0000000000007d94         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
0000000000007d99         align      32                                          ; End of unwind block (FDE at 0xe380)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
0000000000007da0         push       r12                                         ; Begin of unwind block (FDE at 0xe3a4), CODE XREF=main+9536, main+9561, main+9844
0000000000007da2         push       rbp
0000000000007da3         mov        ecx, 0x1
0000000000007da8         push       rbx
0000000000007da9         mov        rbx, rdi
0000000000007dac         sub        rsp, 0x10
0000000000007db0         mov        rdx, rsp
0000000000007db3         mov        rax, qword [fs:0x28]
0000000000007dbc         mov        qword [rsp+0x28+var_20], rax
0000000000007dc1         xor        eax, eax
0000000000007dc3         call       hash_find_entry                             ; hash_find_entry
0000000000007dc8         test       rax, rax
0000000000007dcb         mov        rbp, rax
0000000000007dce         je         loc_7ddf

0000000000007dd0         mov        rax, qword [rsp+0x28+var_28]
0000000000007dd4         sub        qword [rbx+0x20], 0x1
0000000000007dd9         cmp        qword [rax], 0x0
0000000000007ddd         je         loc_7e00

                     loc_7ddf:
0000000000007ddf         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
0000000000007de4         xor        rcx, qword [fs:0x28]
0000000000007ded         mov        rax, rbp
0000000000007df0         jne        loc_7f9e

0000000000007df6         add        rsp, 0x10
0000000000007dfa         pop        rbx
0000000000007dfb         pop        rbp
0000000000007dfc         pop        r12
0000000000007dfe         ret
                        ; endp
0000000000007dff         align      512

                     loc_7e00:
0000000000007e00         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
0000000000007e04         sub        rax, 0x1
0000000000007e08         test       rax, rax
0000000000007e0b         mov        qword [rbx+0x18], rax
0000000000007e0f         js         loc_7f10

0000000000007e15         pxor       xmm0, xmm0
0000000000007e19         cvtsi2ss   xmm0, rax

                     loc_7e1e:
0000000000007e1e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
0000000000007e22         mov        rdx, qword [rbx+0x28]
0000000000007e26         test       rax, rax
0000000000007e29         js         loc_7ef0

0000000000007e2f         pxor       xmm1, xmm1
0000000000007e33         cvtsi2ss   xmm1, rax

                     loc_7e38:
0000000000007e38         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
0000000000007e3c         ucomiss    xmm1, xmm0
0000000000007e3f         jbe        loc_7ddf

0000000000007e41         lea        rdi, qword [rbx+0x28]
0000000000007e45         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000007e4a         mov        rax, qword [rbx+0x10]
0000000000007e4e         mov        rdx, qword [rbx+0x28]
0000000000007e52         test       rax, rax
0000000000007e55         js         loc_7f80

0000000000007e5b         pxor       xmm0, xmm0
0000000000007e5f         cvtsi2ss   xmm0, rax

                     loc_7e64:
0000000000007e64         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
0000000000007e68         test       rax, rax
0000000000007e6b         js         loc_7f60

0000000000007e71         pxor       xmm1, xmm1
0000000000007e75         cvtsi2ss   xmm1, rax

                     loc_7e7a:
0000000000007e7a         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
0000000000007e7e         mulss      xmm2, xmm0
0000000000007e82         ucomiss    xmm2, xmm1
0000000000007e85         jbe        loc_7ddf

0000000000007e8b         cmp        byte [rdx+0x10], 0x0
0000000000007e8f         mulss      xmm0, dword [rdx+4]
0000000000007e94         je         loc_7f50

                     loc_7e9a:
0000000000007e9a         ucomiss    xmm0, dword [float_ca70]                    ; float_ca70, CODE XREF=hash_delete+437
0000000000007ea1         jae        loc_7f30

0000000000007ea7         cvttss2si  rsi, xmm0

                     loc_7eac:
0000000000007eac         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
0000000000007eaf         call       hash_rehash                                 ; hash_rehash
0000000000007eb4         test       al, al
0000000000007eb6         jne        loc_7ddf

0000000000007ebc         mov        rdi, qword [rbx+0x48]
0000000000007ec0         test       rdi, rdi
0000000000007ec3         je         loc_7ed9

0000000000007ec5         nop        dword [rax]

                     loc_7ec8:
0000000000007ec8         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
0000000000007ecc         call       j_free                                      ; free
0000000000007ed1         test       r12, r12
0000000000007ed4         mov        rdi, r12
0000000000007ed7         jne        loc_7ec8

                     loc_7ed9:
0000000000007ed9         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
0000000000007ee1         jmp        loc_7ddf
0000000000007ee6         align      16

                     loc_7ef0:
0000000000007ef0         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
0000000000007ef3         pxor       xmm1, xmm1
0000000000007ef7         shr        rcx, 0x1
0000000000007efa         and        eax, 0x1
0000000000007efd         or         rcx, rax
0000000000007f00         cvtsi2ss   xmm1, rcx
0000000000007f05         addss      xmm1, xmm1
0000000000007f09         jmp        loc_7e38
0000000000007f0e         align      16

                     loc_7f10:
0000000000007f10         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
0000000000007f13         pxor       xmm0, xmm0
0000000000007f17         shr        rdx, 0x1
0000000000007f1a         and        eax, 0x1
0000000000007f1d         or         rdx, rax
0000000000007f20         cvtsi2ss   xmm0, rdx
0000000000007f25         addss      xmm0, xmm0
0000000000007f29         jmp        loc_7e1e
0000000000007f2e         align      16

                     loc_7f30:
0000000000007f30         subss      xmm0, dword [float_ca70]                    ; float_ca70, CODE XREF=hash_delete+257
0000000000007f38         movabs     rax, 0x8000000000000000
0000000000007f42         cvttss2si  rsi, xmm0
0000000000007f47         xor        rsi, rax
0000000000007f4a         jmp        loc_7eac
0000000000007f4f         align      16

                     loc_7f50:
0000000000007f50         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
0000000000007f55         jmp        loc_7e9a
0000000000007f5a         align      32

                     loc_7f60:
0000000000007f60         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
0000000000007f63         pxor       xmm1, xmm1
0000000000007f67         shr        rcx, 0x1
0000000000007f6a         and        eax, 0x1
0000000000007f6d         or         rcx, rax
0000000000007f70         cvtsi2ss   xmm1, rcx
0000000000007f75         addss      xmm1, xmm1
0000000000007f79         jmp        loc_7e7a
0000000000007f7e         align      128

                     loc_7f80:
0000000000007f80         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
0000000000007f83         pxor       xmm0, xmm0
0000000000007f87         shr        rcx, 0x1
0000000000007f8a         and        eax, 0x1
0000000000007f8d         or         rcx, rax
0000000000007f90         cvtsi2ss   xmm0, rcx
0000000000007f95         addss      xmm0, xmm0
0000000000007f99         jmp        loc_7e64

                     loc_7f9e:
0000000000007f9e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
0000000000007fa3         align      16                                          ; End of unwind block (FDE at 0xe3a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     offtostr:
0000000000007fb0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xe3dc), CODE XREF=xlseek+86
0000000000007fb3         lea        rcx, qword [rsi+0x14]
0000000000007fb7         mov        byte [rsi+0x14], 0x0
0000000000007fbb         movabs     r9, 0x6666666666666667
0000000000007fc5         movabs     rsi, 0xcccccccccccccccd
0000000000007fcf         mov        r8d, 0x30
0000000000007fd5         js         loc_8013

0000000000007fd7         nop        word [rax+rax]

                     loc_7fe0:
0000000000007fe0         mov        rax, rdi                                    ; CODE XREF=offtostr+84
0000000000007fe3         sub        rcx, 0x1
0000000000007fe7         mul        rsi
0000000000007fea         shr        rdx, 0x3
0000000000007fee         lea        rax, qword [rdx+rdx*4]
0000000000007ff2         add        rax, rax
0000000000007ff5         sub        rdi, rax
0000000000007ff8         add        edi, 0x30
0000000000007ffb         test       rdx, rdx
0000000000007ffe         mov        byte [rcx], dil
0000000000008001         mov        rdi, rdx
0000000000008004         jne        loc_7fe0

0000000000008006         mov        rax, rcx
0000000000008009         ret
                        ; endp
000000000000800a         align      16

                     loc_8010:
0000000000008010         mov        rcx, rsi                                    ; CODE XREF=offtostr+142

                     loc_8013:
0000000000008013         mov        rax, rdi                                    ; CODE XREF=offtostr+37
0000000000008016         lea        rsi, qword [rcx-1]
000000000000801a         imul       r9
000000000000801d         mov        rax, rdi
0000000000008020         sar        rax, 0x3f
0000000000008024         sar        rdx, 0x2
0000000000008028         sub        rdx, rax
000000000000802b         lea        rax, qword [rdx+rdx*4]
000000000000802f         lea        eax, dword [r8+rax*2]
0000000000008033         sub        eax, edi
0000000000008035         test       rdx, rdx
0000000000008038         mov        rdi, rdx
000000000000803b         mov        byte [rcx-1], al
000000000000803e         jne        loc_8010

0000000000008040         sub        rcx, 0x2
0000000000008044         mov        byte [rsi-1], 0x2d
0000000000008048         mov        rax, rcx
000000000000804b         ret
                        ; endp
000000000000804c         align      16                                          ; End of unwind block (FDE at 0xe3dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     posix2_version:
0000000000008050         push       rbx                                         ; Begin of unwind block (FDE at 0xe3f4), CODE XREF=main+1145
0000000000008051         lea        rdi, qword [aPosix2version]                 ; argument "__name" for method j_getenv, "_POSIX2_VERSION"
0000000000008058         mov        ebx, 0x31069
000000000000805d         sub        rsp, 0x10
0000000000008061         mov        rax, qword [fs:0x28]
000000000000806a         mov        qword [rsp+0x18+var_10], rax
000000000000806f         xor        eax, eax
0000000000008071         call       j_getenv                                    ; getenv
0000000000008076         test       rax, rax
0000000000008079         je         loc_8080

000000000000807b         cmp        byte [rax], 0x0
000000000000807e         jne        loc_80a0

                     loc_8080:
0000000000008080         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=posix2_version+41, posix2_version+103, posix2_version+128, posix2_version+135
0000000000008085         xor        rcx, qword [fs:0x28]
000000000000808e         mov        eax, ebx
0000000000008090         jne        loc_80d9

0000000000008092         add        rsp, 0x10
0000000000008096         pop        rbx
0000000000008097         ret
                        ; endp
0000000000008098         align      32

                     loc_80a0:
00000000000080a0         mov        edx, 0xa                                    ; argument "__base" for method j_strtol, CODE XREF=posix2_version+46
00000000000080a5         mov        rsi, rsp                                    ; argument "__endptr" for method j_strtol
00000000000080a8         mov        rdi, rax                                    ; argument "__nptr" for method j_strtol
00000000000080ab         call       j_strtol                                    ; strtol
00000000000080b0         mov        rdx, qword [rsp+0x18+var_18]
00000000000080b4         cmp        byte [rdx], 0x0
00000000000080b7         jne        loc_8080

00000000000080b9         cmp        rax, 0xffffffff80000000
00000000000080bf         jl         loc_80d2

00000000000080c1         cmp        rax, 0x7fffffff
00000000000080c7         mov        ebx, 0x7fffffff
00000000000080cc         cmovle     rbx, rax
00000000000080d0         jmp        loc_8080

                     loc_80d2:
00000000000080d2         mov        ebx, 0x80000000                             ; CODE XREF=posix2_version+111
00000000000080d7         jmp        loc_8080

                     loc_80d9:
00000000000080d9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=posix2_version+64
                        ; endp
00000000000080de         align      32                                          ; End of unwind block (FDE at 0xe3f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
00000000000080e0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xe41c), CODE XREF=main+56
00000000000080e3         push       rbx
00000000000080e4         je         loc_815d

00000000000080e6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
00000000000080eb         mov        rbx, rdi
00000000000080ee         call       j_strrchr                                   ; strrchr
00000000000080f3         test       rax, rax
00000000000080f6         je         loc_814d

00000000000080f8         lea        r8, qword [rax+1]
00000000000080fc         mov        rdx, r8
00000000000080ff         sub        rdx, rbx
0000000000008102         cmp        rdx, 0x6
0000000000008106         jle        loc_814d

0000000000008108         lea        rsi, qword [rax-6]
000000000000810c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000008113         mov        ecx, 0x7
0000000000008118         rep  cmpsb byte [rsi], byte [rdi]
000000000000811a         seta       dl
000000000000811d         sbb        dl, 0x0
0000000000008120         test       dl, dl
0000000000008122         jne        loc_814d

0000000000008124         lea        rdi, qword [aLibs+8]                        ; 0xcad0
000000000000812b         mov        ecx, 0x3
0000000000008130         mov        rsi, r8
0000000000008133         mov        rbx, r8
0000000000008136         rep  cmpsb byte [rsi], byte [rdi]
0000000000008138         seta       dl
000000000000813b         sbb        dl, 0x0
000000000000813e         test       dl, dl
0000000000008140         jne        loc_814d

0000000000008142         lea        rbx, qword [rax+4]
0000000000008146         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_814d:
000000000000814d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000008154         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000815b         pop        rbx
000000000000815c         ret
                        ; endp

                     loc_815d:
000000000000815d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000008164         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000816b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000008170         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000008175         call       j_fwrite                                    ; fwrite
000000000000817a         call       j_abort                                     ; abort
                        ; endp
000000000000817f         align      128                                         ; End of unwind block (FDE at 0xe41c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000008180         push       rbp                                         ; Begin of unwind block (FDE at 0xe43c), CODE XREF=sub_89b0+2597, sub_89b0+2619
0000000000008181         push       rbx
0000000000008182         mov        rbp, rdi
0000000000008185         mov        ebx, esi
0000000000008187         sub        rsp, 0x8
000000000000818b         call       locale_charset                              ; locale_charset
0000000000008190         movzx      edx, byte [rax]
0000000000008193         and        edx, 0xffffffdf
0000000000008196         cmp        dl, 0x55
0000000000008199         je         loc_8210

000000000000819b         cmp        dl, 0x47
000000000000819e         je         loc_81c0

                     loc_81a0:
00000000000081a0         lea        rax, qword [aLibs+27]                       ; 0xcae3, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
00000000000081a7         lea        rdx, qword [aLibs+29]                       ; 0xcae5
00000000000081ae         cmp        ebx, 0x9
00000000000081b1         cmovne     rax, rdx
00000000000081b5         add        rsp, 0x8
00000000000081b9         pop        rbx
00000000000081ba         pop        rbp
00000000000081bb         ret
                        ; endp
00000000000081bc         align      64

                     loc_81c0:
00000000000081c0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
00000000000081c4         and        edx, 0xffffffdf
00000000000081c7         cmp        dl, 0x42
00000000000081ca         jne        loc_81a0

00000000000081cc         cmp        byte [rax+2], 0x31
00000000000081d0         jne        loc_81a0

00000000000081d2         cmp        byte [rax+3], 0x38
00000000000081d6         jne        loc_81a0

00000000000081d8         cmp        byte [rax+4], 0x30
00000000000081dc         jne        loc_81a0

00000000000081de         cmp        byte [rax+5], 0x33
00000000000081e2         jne        loc_81a0

00000000000081e4         cmp        byte [rax+6], 0x30
00000000000081e8         jne        loc_81a0

00000000000081ea         cmp        byte [rax+7], 0x0
00000000000081ee         jne        loc_81a0

00000000000081f0         cmp        byte [rbp], 0x60
00000000000081f4         lea        rax, qword [aLibs+20]                       ; 0xcadc
00000000000081fb         lea        rdx, qword [aLibs+24]                       ; 0xcae0
0000000000008202         cmovne     rax, rdx
0000000000008206         add        rsp, 0x8
000000000000820a         pop        rbx
000000000000820b         pop        rbp
000000000000820c         ret
                        ; endp
000000000000820d         align      16

                     loc_8210:
0000000000008210         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000008214         and        edx, 0xffffffdf
0000000000008217         cmp        dl, 0x54
000000000000821a         jne        loc_81a0

000000000000821c         movzx      edx, byte [rax+2]
0000000000008220         and        edx, 0xffffffdf
0000000000008223         cmp        dl, 0x46
0000000000008226         jne        loc_81a0

000000000000822c         cmp        byte [rax+3], 0x2d
0000000000008230         jne        loc_81a0

0000000000008236         cmp        byte [rax+4], 0x38
000000000000823a         jne        loc_81a0

0000000000008240         cmp        byte [rax+5], 0x0
0000000000008244         jne        loc_81a0

000000000000824a         cmp        byte [rbp], 0x60
000000000000824e         lea        rax, qword [aLibs+12]                       ; 0xcad4
0000000000008255         lea        rdx, qword [aLibs+16]                       ; 0xcad8
000000000000825c         cmovne     rax, rdx
0000000000008260         add        rsp, 0x8
0000000000008264         pop        rbx
0000000000008265         pop        rbp
0000000000008266         ret
                        ; endp
0000000000008267         align      16                                          ; End of unwind block (FDE at 0xe43c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000008270         push       r15                                         ; Begin of unwind block (FDE at 0xe480), CODE XREF=sub_89b0+1165, sub_89b0+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000008272         push       r14
0000000000008274         mov        r15d, r8d
0000000000008277         push       r13
0000000000008279         push       r12
000000000000827b         mov        r14, rdi
000000000000827e         push       rbp
000000000000827f         push       rbx
0000000000008280         mov        ebx, r9d
0000000000008283         mov        r13, rsi
0000000000008286         mov        rbp, rcx
0000000000008289         and        ebx, 0x2
000000000000828c         sub        rsp, 0xb8
0000000000008293         mov        rax, qword [rsp+0xe8+arg_0]
000000000000829b         mov        qword [rsp+0xe8+var_D8], rdx
00000000000082a0         mov        dword [rsp+0xe8+var_E0], r8d
00000000000082a5         mov        dword [rsp+0xe8+var_70], r9d
00000000000082aa         mov        qword [rsp+0xe8+var_C8], rax
00000000000082af         mov        rax, qword [rsp+0xe8+arg_8]
00000000000082b7         mov        qword [rsp+0xe8+var_80], rax
00000000000082bc         mov        rax, qword [rsp+0xe8+arg_10]
00000000000082c4         mov        qword [rsp+0xe8+var_88], rax
00000000000082c9         mov        rax, qword [fs:0x28]
00000000000082d2         mov        qword [rsp+0xe8+var_40], rax
00000000000082da         xor        eax, eax
00000000000082dc         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000082e1         cmp        r15d, 0xa
00000000000082e5         mov        qword [rsp+0xe8+var_90], rax
00000000000082ea         ja         loc_949f

00000000000082f0         lea        rcx, qword [switch_table_cb40]              ; switch_table_cb40
00000000000082f7         mov        edx, r15d
00000000000082fa         movsxd     rax, dword [rcx+rdx*4]
00000000000082fe         add        rax, rcx
0000000000008301         jmp        rax                                         ; switch statement using table at 0xcb40, with 11 cases, 0x8303,0x8ed4,0x8f30,0x8f85,0x8fca,0x9004,0x90aa,0x90e4,0x92d8

                     loc_8303:
0000000000008303         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_89b0+1318
0000000000008308         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000830d         xor        r12d, r12d
0000000000008310         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008319         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000831e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_8323:
0000000000008323         lea        rax, qword [aLibs+29]                       ; 0xcae5, CODE XREF=sub_89b0+1876
000000000000832a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008333         xor        r15d, r15d
0000000000008336         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000833e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_8343:
0000000000008343         xor        r11d, r11d                                  ; CODE XREF=sub_89b0+180, sub_89b0+1400, sub_89b0+1488, sub_89b0+1557, sub_89b0+1615, sub_89b0+1781, sub_89b0+1839, sub_89b0+2408, sub_89b0+2485
0000000000008346         mov        rax, rbp
0000000000008349         mov        r8d, r12d
000000000000834c         mov        rbp, r11
000000000000834f         mov        r11, rax
0000000000008352         nop        word [rax+rax]

                     loc_8358:
0000000000008358         cmp        r11, rbp                                    ; CODE XREF=sub_8460+194
000000000000835b         setne      r12b
000000000000835f         cmp        r11, 0xffffffffffffffff
0000000000008363         jne        loc_8372

0000000000008365         mov        rax, qword [rsp+0xe8+var_D8]
000000000000836a         cmp        byte [rax+rbp], 0x0
000000000000836e         setne      r12b

                     loc_8372:
0000000000008372         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000008375         je         loc_89d0

000000000000837b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000008380         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000008385         lea        r9, qword [rdi+rbp]
0000000000008389         setne      al
000000000000838c         and        al, byte [rsp+0xe8+var_DB]
0000000000008390         mov        r10d, eax
0000000000008393         je         loc_8440

0000000000008399         mov        rax, qword [rsp+0xe8+var_D0]
000000000000839e         test       rax, rax
00000000000083a1         je         loc_87d0

00000000000083a7         cmp        r11, 0xffffffffffffffff
00000000000083ab         lea        rbx, qword [rbp+rax]
00000000000083b0         jne        loc_83e0

00000000000083b2         cmp        rax, 0x1
00000000000083b6         jbe        loc_83e0

00000000000083b8         mov        byte [rsp+0xe8+var_B0], r8b
00000000000083bd         mov        byte [rsp+0xe8+var_B8], r10b
00000000000083c2         mov        qword [rsp+0xe8+var_C0], r9
00000000000083c7         call       j_strlen                                    ; strlen
00000000000083cc         movzx      r8d, byte [rsp+0xe8+var_B0]
00000000000083d2         movzx      r10d, byte [rsp+0xe8+var_B8]
00000000000083d8         mov        r11, rax
00000000000083db         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_83e0:
00000000000083e0         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
00000000000083e3         mov        byte [rsp+0xe8+var_C0], r10b
00000000000083e8         ja         loc_89a0

00000000000083ee         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
00000000000083f3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
00000000000083f8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
00000000000083fb         mov        qword [rsp+0xe8+var_A8], r11
0000000000008400         mov        byte [rsp+0xe8+var_B0], r8b
0000000000008405         mov        qword [rsp+0xe8+var_B8], r9
000000000000840a         call       j_memcmp                                    ; memcmp
000000000000840f         test       eax, eax
0000000000008411         mov        r9, qword [rsp+0xe8+var_B8]
0000000000008416         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000841c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000008421         jne        loc_89a0

0000000000008427         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000842c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000008432         jne        loc_93b5

0000000000008438         nop        dword [rax+rax]

                     loc_8440:
0000000000008440         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_8990+19
0000000000008444         cmp        bl, 0x7e
0000000000008447         ja         loc_8768

000000000000844d         lea        rcx, qword [switch_table_cb40+44]           ; 0xcb6c
0000000000008454         movzx      edx, bl
0000000000008457         movsxd     rax, dword [rcx+rdx*4]
000000000000845b         add        rax, rcx
000000000000845e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_8460:
0000000000008460         xor        r10d, r10d
0000000000008463         cmp        r11, 0x1
0000000000008467         setne      al
000000000000846a         cmp        r11, 0xffffffffffffffff
000000000000846e         jne        loc_847c

0000000000008470         mov        rax, qword [rsp+arg_8]
0000000000008475         cmp        byte [rax+1], 0x0
0000000000008479         setne      al

                     loc_847c:
000000000000847c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8460+14
0000000000008481         sete       dl
0000000000008484         test       al, al
0000000000008486         je         loc_86d8

                     loc_848c:
000000000000848c         xor        r12d, r12d                                  ; CODE XREF=sub_86d0+11
000000000000848f         xor        eax, eax
0000000000008491         nop        dword [rax]
                        ; endp

                     loc_8498:
0000000000008498         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_8680+50, sub_8750+119
000000000000849d         jne        loc_85b2

00000000000084a3         test       dl, dl
00000000000084a5         jne        loc_85b2

                     loc_84ab:
00000000000084ab         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_8560+87
00000000000084b0         test       rsi, rsi
00000000000084b3         je         loc_84c9

00000000000084b5         mov        edx, ebx
00000000000084b7         shr        dl, 0x5
00000000000084ba         movzx      edx, dl
00000000000084bd         mov        edx, dword [rsi+rdx*4]
00000000000084c0         bt         edx, ebx
00000000000084c3         jb         loc_8613

                     loc_84c9:
00000000000084c9         test       r10b, r10b                                  ; CODE XREF=sub_8460+83, sub_8560+93
00000000000084cc         jne        loc_8613

00000000000084d2         xor        eax, 0x1
00000000000084d5         add        rbp, 0x1
00000000000084d9         and        eax, r8d

                     loc_84dc:
00000000000084dc         test       al, al                                      ; CODE XREF=sub_89b0+936
00000000000084de         je         loc_8500

00000000000084e0         cmp        r13, r15
00000000000084e3         jbe        loc_84ea

00000000000084e5         mov        byte [r14+r15], 0x27

                     loc_84ea:
00000000000084ea         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8460+131
00000000000084ee         cmp        r13, rax
00000000000084f1         jbe        loc_84f9

00000000000084f3         mov        byte [r14+r15+1], 0x27

                     loc_84f9:
00000000000084f9         add        r15, 0x2                                    ; CODE XREF=sub_8460+145
00000000000084fd         xor        r8d, r8d

                     loc_8500:
0000000000008500         cmp        r15, r13                                    ; CODE XREF=sub_8460+126, sub_8560+275, sub_89b0+869
0000000000008503         jae        loc_8509

0000000000008505         mov        byte [r14+r15], bl

                     loc_8509:
0000000000008509         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_8460+163
000000000000850e         add        r15, 0x1
0000000000008512         mov        eax, 0x0
0000000000008517         test       r12b, r12b
000000000000851a         cmove      edi, eax
000000000000851d         mov        byte [rsp+0xe8+var_DA], dil
0000000000008522         jmp        loc_8358
0000000000008527         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_8530:
0000000000008530         xor        r10d, r10d
0000000000008533         mov        eax, dword [rsp+arg_0]
0000000000008537         cmp        eax, 0x2
000000000000853a         je         loc_8af8

0000000000008540         cmp        eax, 0x5
0000000000008543         je         loc_8ab8

0000000000008549         cmp        eax, 0x2
000000000000854c         mov        ebx, 0x3f
0000000000008551         sete       dl
0000000000008554         xor        r12d, r12d
0000000000008557         xor        eax, eax
0000000000008559         jmp        sub_8460+56
                        ; endp
000000000000855e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_8560:
0000000000008560         xor        r10d, r10d
0000000000008563         cmp        dword [rsp+arg_0], 0x2
0000000000008568         je         loc_8a70

000000000000856e         mov        byte [rsp+arg_74], r12b
0000000000008573         xor        edx, edx
0000000000008575         xor        eax, eax
0000000000008577         mov        ebx, 0x27
000000000000857c         jmp        sub_8460+56
                        ; endp
0000000000008581         nop        dword [rax]
0000000000008588         mov        edx, 0x9
000000000000858d         mov        ebx, 0x74

                     loc_8592:
0000000000008592         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8720+10, sub_8810+37, sub_8950+53
0000000000008597         sete       al
000000000000859a         and        al, byte [rsp+arg_7]
000000000000859e         jne        sub_86d0+30

00000000000085a4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_8560+114
00000000000085a9         jne        loc_8610

                     loc_85ab:
00000000000085ab         mov        ebx, edx                                    ; CODE XREF=sub_8680+18
00000000000085ad         xor        r12d, r12d
00000000000085b0         xor        eax, eax
                        ; endp

                     loc_85b2:
00000000000085b2         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_8460+61, sub_8460+69
00000000000085b7         jne        loc_84ab

00000000000085bd         jmp        loc_84c9
00000000000085c2         nop        word [rax+rax]
00000000000085c8         mov        edx, 0x8
00000000000085cd         mov        ebx, 0x62
00000000000085d2         jmp        sub_8560+68
00000000000085d4         nop        dword [rax]
00000000000085d8         cmp        dword [rsp+8], 0x2
00000000000085dd         je         sub_89b0                                    ; sub_89b0
00000000000085e3         cmp        byte [rsp+0xd], 0x0
00000000000085e8         je         sub_87f0+16

                     loc_85ee:
00000000000085ee         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_87f0+8
00000000000085f3         je         loc_8800

00000000000085f9         cmp        qword [rsp+arg_10], 0x0
00000000000085ff         jne        loc_89bb

0000000000008605         mov        ebx, 0x5c
000000000000860a         nop        word [rax+rax]
                        ; endp

                     loc_8610:
0000000000008610         xor        r12d, r12d                                  ; CODE XREF=sub_8560+73, sub_8950+29
                        ; endp

                     loc_8613:
0000000000008613         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_8460+99, sub_8460+108
0000000000008618         sete       dl
000000000000861b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000008620         mov        eax, edx
0000000000008622         jne        loc_8e78

0000000000008628         mov        eax, r8d
000000000000862b         xor        eax, 0x1
000000000000862e         and        al, dl
0000000000008630         je         loc_8661

0000000000008632         cmp        r13, r15
0000000000008635         jbe        loc_863c

0000000000008637         mov        byte [r14+r15], 0x27

                     loc_863c:
000000000000863c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_8560+213
0000000000008640         cmp        r13, rdx
0000000000008643         jbe        loc_864b

0000000000008645         mov        byte [r14+r15+1], 0x24

                     loc_864b:
000000000000864b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_8560+227
000000000000864f         cmp        r13, rdx
0000000000008652         jbe        loc_865a

0000000000008654         mov        byte [r14+r15+2], 0x27

                     loc_865a:
000000000000865a         add        r15, 0x3                                    ; CODE XREF=sub_8560+242
000000000000865e         mov        r8d, eax

                     loc_8661:
0000000000008661         cmp        r13, r15                                    ; CODE XREF=sub_8560+208
0000000000008664         jbe        loc_866b

0000000000008666         mov        byte [r14+r15], 0x5c

                     loc_866b:
000000000000866b         add        r15, 0x1                                    ; CODE XREF=sub_8560+260
000000000000866f         add        rbp, 0x1
0000000000008673         jmp        loc_8500
0000000000008678         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_8680:
0000000000008680         cmp        byte [rsp+arg_5], 0x0
0000000000008685         jne        loc_8853

000000000000868b         xor        edx, edx
000000000000868d         test       byte [rsp+arg_70], 0x1
0000000000008692         je         loc_85ab

0000000000008698         add        rbp, 0x1
000000000000869c         jmp        quotearg_buffer_restyled+232
                        ; endp
00000000000086a1         nop        dword [rax]
00000000000086a8         cmp        dword [rsp+8], 0x2
00000000000086ad         sete       dl
00000000000086b0         xor        eax, eax
00000000000086b2         jmp        sub_8460+56
00000000000086b7         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_86c0:
00000000000086c0         mov        edx, 0x7
00000000000086c5         mov        ebx, 0x61
00000000000086ca         jmp        sub_8560+68
                        ; endp
00000000000086cf         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_86d0:
00000000000086d0         cmp        dword [rsp+8], 0x2
00000000000086d5         sete       dl
                        ; endp

                     loc_86d8:
00000000000086d8         test       rbp, rbp                                    ; CODE XREF=sub_8460+38, sub_88f0+35
00000000000086db         jne        loc_848c

00000000000086e1         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_8920+43
00000000000086e6         and        al, dl
00000000000086e8         je         sub_8460+56

00000000000086ee         mov        rbp, r11
00000000000086f1         mov        dword [rsp+arg_0], 0x2
00000000000086f9         jmp        sub_89b0+1097
                        ; endp
00000000000086fe         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_8700:
0000000000008700         cmp        dword [rsp+arg_0], 0x2
0000000000008705         sete       dl
0000000000008708         xor        r12d, r12d
000000000000870b         jmp        sub_86d0+17
                        ; endp
000000000000870d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_8710:
0000000000008710         cmp        dword [rsp+arg_0], 0x2
0000000000008715         mov        ebx, 0x20
000000000000871a         sete       dl
000000000000871d         jmp        sub_86d0+17
                        ; endp
000000000000871f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_8720:
0000000000008720         mov        edx, 0xd
0000000000008725         mov        ebx, 0x72
000000000000872a         jmp        loc_8592
000000000000872f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8730:
0000000000008730         mov        edx, 0xc
0000000000008735         mov        ebx, 0x66
000000000000873a         jmp        sub_8560+68
                        ; endp
000000000000873f         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8740:
0000000000008740         mov        edx, 0xb
0000000000008745         mov        ebx, 0x76
000000000000874a         jmp        sub_8560+68
                        ; endp
000000000000874f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8750:
0000000000008750         mov        edx, 0xa
0000000000008755         mov        ebx, 0x6e
000000000000875a         jmp        sub_8560+50
                        ; endp
000000000000875f         align      32

                     loc_8760:
0000000000008760         xor        r10d, r10d                                  ; CODE XREF=sub_8750+135
0000000000008763         nop        dword [rax+rax]

                     loc_8768:
0000000000008768         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000876e         jne        loc_8b18

0000000000008774         mov        qword [rsp+0xe8+var_B0], r11
0000000000008779         mov        byte [rsp+0xe8+var_B8], r8b
000000000000877e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000008783         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000008788         mov        rcx, qword [rax]
000000000000878b         movzx      edx, bl
000000000000878e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000008794         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000879a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000879f         mov        edi, 0x1
00000000000087a4         movzx      eax, word [rcx+rdx*2]
00000000000087a8         and        ax, 0x4000
00000000000087ac         setne      r12b
00000000000087b0         sete       al
00000000000087b3         and        al, byte [rsp+0xe8+var_DB]

                     loc_87b7:
00000000000087b7         test       al, al                                      ; CODE XREF=sub_89b0+2221
00000000000087b9         jne        loc_9151

00000000000087bf         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000087c4         sete       dl
00000000000087c7         jmp        loc_8498
00000000000087cc         align      16

                     loc_87d0:
00000000000087d0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
00000000000087d4         cmp        bl, 0x7e
00000000000087d7         ja         loc_8760

00000000000087d9         lea        rcx, qword [switch_table_cb40+552]          ; 0xcd68
00000000000087e0         movzx      edx, bl
00000000000087e3         movsxd     rax, dword [rcx+rdx*4]
00000000000087e7         add        rax, rcx
00000000000087ea         jmp        rax
                        ; endp
00000000000087ec         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_87f0:
00000000000087f0         xor        r10d, r10d
00000000000087f3         cmp        byte [rsp+arg_5], 0x0
00000000000087f8         jne        loc_85ee

00000000000087fe         nop

                     loc_8800:
0000000000008800         mov        edx, 0x5c                                   ; CODE XREF=sub_8560+136, sub_8560+147
0000000000008805         mov        ebx, 0x5c
000000000000880a         jmp        sub_8560+68
                        ; endp
000000000000880f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8810:
0000000000008810         mov        edx, 0xc
0000000000008815         xor        r10d, r10d
0000000000008818         mov        ebx, 0x66
000000000000881d         jmp        sub_8560+68
                        ; endp
0000000000008822         nop        word [rax+rax]
0000000000008828         mov        edx, 0xa
000000000000882d         xor        r10d, r10d
0000000000008830         mov        ebx, 0x6e
0000000000008835         jmp        sub_8560+50
000000000000883a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8840:
0000000000008840         mov        ebx, 0x61
0000000000008845         jmp        sub_8560+176
                        ; endp
000000000000884a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8850:
0000000000008850         xor        r10d, r10d
                        ; endp

                     loc_8853:
0000000000008853         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8680+5
0000000000008858         sete       dl
000000000000885b         cmp        byte [rsp+arg_7], 0x0
0000000000008860         jne        loc_93fa

0000000000008866         mov        eax, r8d
0000000000008869         mov        rcx, r15
000000000000886c         xor        eax, 0x1
000000000000886f         and        al, dl
0000000000008871         je         loc_88a0

0000000000008873         cmp        r13, r15
0000000000008876         jbe        loc_887d

0000000000008878         mov        byte [r14+r15], 0x27

                     loc_887d:
000000000000887d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_8850+38
0000000000008881         cmp        r13, rcx
0000000000008884         jbe        loc_888c

0000000000008886         mov        byte [r14+r15+1], 0x24

                     loc_888c:
000000000000888c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_8850+52
0000000000008890         cmp        r13, rcx
0000000000008893         ja         loc_8ec9

                     loc_8899:
0000000000008899         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_89b0+1311
000000000000889d         mov        r8d, eax

                     loc_88a0:
00000000000088a0         cmp        r13, rcx                                    ; CODE XREF=sub_8850+33
00000000000088a3         jbe        loc_88aa

00000000000088a5         mov        byte [r14+rcx], 0x5c

                     loc_88aa:
00000000000088aa         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8850+83
00000000000088af         lea        r15, qword [rcx+1]
00000000000088b3         je         loc_8eb9

00000000000088b9         lea        rax, qword [rbp+1]
00000000000088bd         cmp        rax, r11
00000000000088c0         jae        loc_88db

00000000000088c2         mov        rax, qword [rsp+arg_8]
00000000000088c7         movzx      eax, byte [rax+rbp+1]
00000000000088cc         mov        byte [rsp+arg_20], al
00000000000088d0         sub        eax, 0x30
00000000000088d3         cmp        al, 0x9
00000000000088d5         jbe        loc_9109

                     loc_88db:
00000000000088db         mov        eax, r12d                                   ; CODE XREF=sub_8850+112
00000000000088de         mov        ebx, 0x30
00000000000088e3         xor        r12d, r12d
00000000000088e6         jmp        sub_8460+56
                        ; endp
00000000000088eb         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_88f0:
00000000000088f0         cmp        dword [rsp+arg_0], 0x2
00000000000088f5         mov        r12d, r10d
00000000000088f8         sete       dl
00000000000088fb         xor        r10d, r10d
00000000000088fe         xor        eax, eax
0000000000008900         jmp        sub_8460+56
                        ; endp
0000000000008905         nop        dword [rax]
0000000000008908         cmp        dword [rsp+8], 0x2
000000000000890d         sete       dl
0000000000008910         xor        r10d, r10d
0000000000008913         jmp        sub_86d0+8
0000000000008918         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8920:
0000000000008920         cmp        dword [rsp+8], 0x2
0000000000008925         sete       dl
0000000000008928         xor        r10d, r10d
000000000000892b         xor        r12d, r12d
000000000000892e         jmp        sub_86d0+17
                        ; endp
0000000000008933         nop        dword [rax+rax]
0000000000008938         cmp        dword [rsp+8], 0x2
000000000000893d         mov        r12d, r10d
0000000000008940         mov        ebx, 0x20
0000000000008945         sete       dl
0000000000008948         xor        r10d, r10d
000000000000894b         jmp        sub_86d0+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8950:
0000000000008950         mov        edx, 0xd
0000000000008955         xor        r10d, r10d
0000000000008958         mov        ebx, 0x72
000000000000895d         jmp        sub_8560+50
                        ; endp
0000000000008962         nop        word [rax+rax]
0000000000008968         mov        ebx, 0x76
000000000000896d         jmp        sub_8560+176
0000000000008972         nop        word [rax+rax]
0000000000008978         mov        edx, 0x9
000000000000897d         xor        r10d, r10d
0000000000008980         mov        ebx, 0x74
0000000000008985         jmp        sub_8560+50
000000000000898a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8990:
0000000000008990         mov        ebx, 0x62
0000000000008995         jmp        sub_8560+176
                        ; endp
000000000000899a         nop        word [rax+rax]

                     loc_89a0:
00000000000089a0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
00000000000089a3         jmp        loc_8440
00000000000089a8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_89b0:
00000000000089b0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8560+125
00000000000089b5         jne        sub_89b0+2416
                        ; endp

                     loc_89bb:
00000000000089bb         add        rbp, 0x1                                    ; CODE XREF=sub_8560+159
00000000000089bf         mov        eax, r8d
00000000000089c2         xor        r12d, r12d
00000000000089c5         mov        ebx, 0x5c
00000000000089ca         jmp        sub_8460+124
                        ; endp
00000000000089cf         align      16

                     loc_89d0:
00000000000089d0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
00000000000089d5         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000089da         mov        r12d, r8d
00000000000089dd         mov        rbp, r11
00000000000089e0         sete       dl
00000000000089e3         mov        eax, ebx
00000000000089e5         test       r15, r15
00000000000089e8         sete       cl
00000000000089eb         and        eax, edx
00000000000089ed         and        al, cl
00000000000089ef         jne        loc_9456

00000000000089f5         mov        eax, ebx
00000000000089f7         xor        eax, 0x1
00000000000089fa         and        dl, al
00000000000089fc         je         loc_936c

0000000000008a02         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000008a07         je         loc_936a

0000000000008a0d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000008a12         jne        loc_940d

0000000000008a18         test       r13, r13
0000000000008a1b         sete       al
0000000000008a1e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000008a24         setne      dl
0000000000008a27         and        al, dl
0000000000008a29         je         loc_944c

0000000000008a2f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_8a34:
0000000000008a34         lea        rbx, qword [aLibs+29]                       ; 0xcae5, CODE XREF=sub_89b0+2781
0000000000008a3b         mov        byte [r14], 0x27
0000000000008a3f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000008a47         mov        r15d, 0x1
0000000000008a4d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008a56         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008a5b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000008a60         mov        byte [rsp+0xe8+var_6C], al
0000000000008a64         jmp        loc_8343
0000000000008a69         align      16

                     loc_8a70:
0000000000008a70         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8560+8
0000000000008a75         jne        sub_89b0+2416

0000000000008a7b         test       r13, r13
0000000000008a7e         je         loc_8e80

0000000000008a84         xor        edx, edx
0000000000008a86         cmp        qword [rsp+arg_48], 0x0
0000000000008a8c         jne        loc_8e80

                     loc_8a92:
0000000000008a92         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_89b0+1284, sub_89b0+2794
0000000000008a97         add        r15, 0x3
0000000000008a9b         xor        eax, eax
0000000000008a9d         mov        byte [rsp+arg_74], r12b
0000000000008aa2         xor        r8d, r8d
0000000000008aa5         mov        r13, rdx
0000000000008aa8         mov        ebx, 0x27
0000000000008aad         jmp        sub_8460+105
                        ; endp
0000000000008ab2         align      8

                     loc_8ab8:
0000000000008ab8         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_8530+19
0000000000008abd         je         loc_8ae0

0000000000008abf         lea        rcx, qword [rbp+2]
0000000000008ac3         cmp        rcx, r11
0000000000008ac6         jae        loc_8ae0

0000000000008ac8         mov        rax, qword [rsp+arg_8]
0000000000008acd         cmp        byte [rax+rbp+1], 0x3f
0000000000008ad2         je         loc_9262

0000000000008ad8         nop        dword [rax+rax]

                     loc_8ae0:
0000000000008ae0         xor        edx, edx                                    ; CODE XREF=sub_89b0+269, sub_89b0+278, sub_89b0+2233, sub_89b0+2253
0000000000008ae2         xor        r12d, r12d
0000000000008ae5         xor        eax, eax
0000000000008ae7         mov        ebx, 0x3f
0000000000008aec         jmp        sub_8460+56
                        ; endp
0000000000008af1         align      8

                     loc_8af8:
0000000000008af8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8530+10
0000000000008afd         jne        loc_9320

0000000000008b03         xor        r12d, r12d
0000000000008b06         xor        eax, eax
0000000000008b08         mov        ebx, 0x3f
0000000000008b0d         jmp        sub_8460+105
                        ; endp
0000000000008b12         align      8

                     loc_8b18:
0000000000008b18         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_8750+30
0000000000008b20         cmp        r11, 0xffffffffffffffff
0000000000008b24         mov        qword [rsp+0xe8+var_48], 0x0
0000000000008b30         mov        qword [rsp+0xe8+var_C0], rax
0000000000008b35         jne        loc_8b64

0000000000008b37         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000008b3c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000008b41         mov        byte [rsp+0xe8+var_B0], r10b
0000000000008b46         mov        qword [rsp+0xe8+var_B8], r9
0000000000008b4b         call       j_strlen                                    ; strlen
0000000000008b50         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000008b56         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000008b5c         mov        r11, rax
0000000000008b5f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_8b64:
0000000000008b64         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_89b0+389
0000000000008b6c         xor        ecx, ecx
0000000000008b6e         mov        byte [rsp+0xe8+var_6A], bl
0000000000008b72         mov        byte [rsp+0xe8+var_6B], r8b
0000000000008b77         mov        rbx, rcx
0000000000008b7a         mov        qword [rsp+0xe8+var_60], r9
0000000000008b82         mov        qword [rsp+0xe8+var_B0], rax
0000000000008b87         mov        byte [rsp+0xe8+var_69], r10b
0000000000008b8c         mov        qword [rsp+0xe8+var_68], r15
0000000000008b94         mov        qword [rsp+0xe8+var_A8], r14
0000000000008b99         mov        qword [rsp+0xe8+var_78], r13
0000000000008b9e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_8ba3:
0000000000008ba3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_89b0+623
0000000000008ba8         lea        r14, qword [rbp+rbx]
0000000000008bad         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000008bb2         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000008bb7         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000008bbc         lea        r13, qword [rax+r14]
0000000000008bc0         sub        rdx, r14
0000000000008bc3         mov        rsi, r13
0000000000008bc6         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000008bcb         test       rax, rax
0000000000008bce         mov        r15, rax
0000000000008bd1         je         loc_8c21

0000000000008bd3         cmp        rax, 0xffffffffffffffff
0000000000008bd7         je         loc_91f5

0000000000008bdd         cmp        rax, 0xfffffffffffffffe
0000000000008be1         je         loc_9181

0000000000008be7         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000008bec         sete       al
0000000000008bef         and        al, byte [rsp+0xe8+var_D9]
0000000000008bf3         jne        loc_8d90

                     loc_8bf9:
0000000000008bf9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_89b0+996, sub_89b0+1031
0000000000008c00         call       j_iswprint                                  ; iswprint
0000000000008c05         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000008c0a         test       eax, eax
0000000000008c0c         mov        eax, 0x0
0000000000008c11         cmove      r12d, eax
0000000000008c15         add        rbx, r15
0000000000008c18         call       j_mbsinit                                   ; mbsinit
0000000000008c1d         test       eax, eax
0000000000008c1f         je         loc_8ba3

                     loc_8c21:
0000000000008c21         mov        edx, r12d                                   ; CODE XREF=sub_89b0+545
0000000000008c24         mov        rdi, rbx
0000000000008c27         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000008c2d         xor        edx, 0x1
0000000000008c30         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000008c35         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000008c3b         and        dl, byte [rsp+0xe8+var_DB]
0000000000008c3f         mov        r15, qword [rsp+0xe8+var_68]
0000000000008c47         mov        r14, qword [rsp+0xe8+var_A8]
0000000000008c4c         mov        r13, qword [rsp+0xe8+var_78]
0000000000008c51         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_8c56:
0000000000008c56         cmp        rdi, 0x1                                    ; CODE XREF=sub_89b0+2112, sub_89b0+2168
0000000000008c5a         jbe        loc_925b

                     loc_8c60:
0000000000008c60         mov        rcx, rdi                                    ; CODE XREF=sub_89b0+1961
0000000000008c63         xor        esi, esi
0000000000008c65         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000008c6b         add        rcx, rbp
0000000000008c6e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000008c73         jmp        loc_8d2e
0000000000008c78         align      128

                     loc_8c80:
0000000000008c80         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_89b0+896
0000000000008c85         sete       al
0000000000008c88         test       r9b, r9b
0000000000008c8b         jne        loc_9140

0000000000008c91         mov        esi, r8d
0000000000008c94         xor        esi, 0x1
0000000000008c97         and        al, sil
0000000000008c9a         je         loc_8ccb

0000000000008c9c         cmp        r13, r15
0000000000008c9f         jbe        loc_8ca6

0000000000008ca1         mov        byte [r14+r15], 0x27

                     loc_8ca6:
0000000000008ca6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_89b0+751
0000000000008caa         cmp        r13, rsi
0000000000008cad         jbe        loc_8cb5

0000000000008caf         mov        byte [r14+r15+1], 0x24

                     loc_8cb5:
0000000000008cb5         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_89b0+765
0000000000008cb9         cmp        r13, rsi
0000000000008cbc         jbe        loc_8cc4

0000000000008cbe         mov        byte [r14+r15+2], 0x27

                     loc_8cc4:
0000000000008cc4         add        r15, 0x3                                    ; CODE XREF=sub_89b0+780
0000000000008cc8         mov        r8d, eax

                     loc_8ccb:
0000000000008ccb         cmp        r13, r15                                    ; CODE XREF=sub_89b0+746
0000000000008cce         jbe        loc_8cd5

0000000000008cd0         mov        byte [r14+r15], 0x5c

                     loc_8cd5:
0000000000008cd5         lea        rax, qword [r15+1]                          ; CODE XREF=sub_89b0+798
0000000000008cd9         cmp        r13, rax
0000000000008cdc         jbe        loc_8ceb

0000000000008cde         mov        eax, ebx
0000000000008ce0         shr        al, 0x6
0000000000008ce3         add        eax, 0x30
0000000000008ce6         mov        byte [r14+r15+1], al

                     loc_8ceb:
0000000000008ceb         lea        rax, qword [r15+2]                          ; CODE XREF=sub_89b0+812
0000000000008cef         cmp        r13, rax
0000000000008cf2         jbe        loc_8d04

0000000000008cf4         mov        eax, ebx
0000000000008cf6         shr        al, 0x3
0000000000008cf9         and        eax, 0x7
0000000000008cfc         add        eax, 0x30
0000000000008cff         mov        byte [r14+r15+2], al

                     loc_8d04:
0000000000008d04         and        ebx, 0x7                                    ; CODE XREF=sub_89b0+834
0000000000008d07         add        rbp, 0x1
0000000000008d0b         add        r15, 0x3
0000000000008d0f         add        ebx, 0x30
0000000000008d12         cmp        rbp, rcx
0000000000008d15         jae        loc_8500

0000000000008d1b         mov        esi, edx

                     loc_8d1d:
0000000000008d1d         cmp        r13, r15                                    ; CODE XREF=sub_89b0+985, sub_89b0+1969
0000000000008d20         jbe        loc_8d26

0000000000008d22         mov        byte [r14+r15], bl

                     loc_8d26:
0000000000008d26         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_89b0+880
0000000000008d2a         add        r15, 0x1

                     loc_8d2e:
0000000000008d2e         test       dl, dl                                      ; CODE XREF=sub_89b0+707
0000000000008d30         jne        loc_8c80

0000000000008d36         mov        eax, esi
0000000000008d38         xor        eax, 0x1
0000000000008d3b         and        eax, r8d
0000000000008d3e         test       r10b, r10b
0000000000008d41         je         loc_8d51

0000000000008d43         cmp        r13, r15
0000000000008d46         jbe        loc_8d4d

0000000000008d48         mov        byte [r14+r15], 0x5c

                     loc_8d4d:
0000000000008d4d         add        r15, 0x1                                    ; CODE XREF=sub_89b0+918

                     loc_8d51:
0000000000008d51         add        rbp, 0x1                                    ; CODE XREF=sub_89b0+913
0000000000008d55         cmp        rbp, rcx
0000000000008d58         jae        loc_84dc

0000000000008d5e         test       al, al
0000000000008d60         je         loc_915e

0000000000008d66         cmp        r13, r15
0000000000008d69         jbe        loc_8d70

0000000000008d6b         mov        byte [r14+r15], 0x27

                     loc_8d70:
0000000000008d70         lea        rax, qword [r15+1]                          ; CODE XREF=sub_89b0+953
0000000000008d74         cmp        r13, rax
0000000000008d77         jbe        loc_8d7f

0000000000008d79         mov        byte [r14+r15+1], 0x27

                     loc_8d7f:
0000000000008d7f         add        r15, 0x2                                    ; CODE XREF=sub_89b0+967
0000000000008d83         xor        r10d, r10d
0000000000008d86         xor        r8d, r8d
0000000000008d89         jmp        loc_8d1d
0000000000008d8b         align      16

                     loc_8d90:
0000000000008d90         cmp        r15, 0x1                                    ; CODE XREF=sub_89b0+579
0000000000008d94         je         loc_8bf9

0000000000008d9a         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000008d9f         lea        rcx, qword [rdi+r15]
0000000000008da3         lea        rdx, qword [rdi+r14+1]
0000000000008da8         lea        r8, qword [rcx+r14]
0000000000008dac         jmp        loc_8dbd
0000000000008dae         align      16

                     loc_8db0:
0000000000008db0         add        rdx, 0x1                                    ; CODE XREF=sub_89b0+1046, sub_89b0+1072
0000000000008db4         cmp        r8, rdx
0000000000008db7         je         loc_8bf9

                     loc_8dbd:
0000000000008dbd         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_89b0+1020
0000000000008dc0         sub        ecx, 0x5b
0000000000008dc3         cmp        cl, 0x21
0000000000008dc6         ja         loc_8db0

0000000000008dc8         mov        esi, 0x1
0000000000008dcd         shl        rsi, cl
0000000000008dd0         mov        rcx, rsi
0000000000008dd3         movabs     rsi, 0x20000002b
0000000000008ddd         test       rcx, rsi
0000000000008de0         je         loc_8db0

0000000000008de2         mov        r14, qword [rsp+0xe8+var_A8]
0000000000008de7         mov        r13, qword [rsp+0xe8+var_78]
0000000000008dec         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000008df1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_8df9:
0000000000008df9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_89b0+1227, sub_89b0+1948, sub_89b0+2585, sub_89b0+2734
0000000000008dfe         je         loc_8e10

0000000000008e00         test       al, al
0000000000008e02         mov        eax, 0x4
0000000000008e07         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000008e0c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_8e10:
0000000000008e10         sub        rsp, 0x8                                    ; CODE XREF=sub_89b0+1102
0000000000008e14         mov        rcx, rbp
0000000000008e17         mov        rsi, r13
0000000000008e1a         push       qword [rsp+0xf0+var_88]
0000000000008e1e         push       qword [rsp+0xf8+var_80]
0000000000008e22         mov        rdi, r14
0000000000008e25         push       0x0
0000000000008e27         mov        r9d, dword [rsp+0x108+var_70]
0000000000008e2f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000008e34         mov        rdx, qword [rsp+0x108+var_D8]
0000000000008e39         and        r9d, 0xfffffffd
0000000000008e3d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008e42         add        rsp, 0x20
0000000000008e46         mov        r15, rax

                     loc_8e49:
0000000000008e49         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_89b0+2549, sub_89b0+2560, sub_89b0+2711
0000000000008e51         xor        rbx, qword [fs:0x28]
0000000000008e5a         mov        rax, r15
0000000000008e5d         jne        loc_9463

0000000000008e63         add        rsp, 0xb8
0000000000008e6a         pop        rbx
0000000000008e6b         pop        rbp
0000000000008e6c         pop        r12
0000000000008e6e         pop        r13
0000000000008e70         pop        r14
0000000000008e72         pop        r15
0000000000008e74         ret
                        ; endp
0000000000008e75         align      8

                     loc_8e78:
0000000000008e78         mov        rbp, r11                                    ; CODE XREF=sub_8560+194
0000000000008e7b         jmp        loc_8df9

                     loc_8e80:
0000000000008e80         cmp        r13, r15                                    ; CODE XREF=sub_89b0+206, sub_89b0+220
0000000000008e83         jbe        loc_8e8a

0000000000008e85         mov        byte [r14+r15], 0x27

                     loc_8e8a:
0000000000008e8a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_89b0+1235
0000000000008e8e         cmp        r13, rax
0000000000008e91         jbe        loc_8e99

0000000000008e93         mov        byte [r14+r15+1], 0x5c

                     loc_8e99:
0000000000008e99         lea        rax, qword [r15+2]                          ; CODE XREF=sub_89b0+1249
0000000000008e9d         cmp        r13, rax
0000000000008ea0         jbe        loc_9492

0000000000008ea6         mov        rdx, r13
0000000000008ea9         mov        byte [r14+r15+2], 0x27
0000000000008eaf         mov        r13, qword [rsp+arg_48]
0000000000008eb4         jmp        loc_8a92

                     loc_8eb9:
0000000000008eb9         mov        eax, r12d                                   ; CODE XREF=sub_8850+99
0000000000008ebc         mov        ebx, 0x30
0000000000008ec1         xor        r12d, r12d
0000000000008ec4         jmp        sub_8460+105
                        ; endp

                     loc_8ec9:
0000000000008ec9         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_8850+67
0000000000008ecf         jmp        loc_8899

                     loc_8ed4:
0000000000008ed4         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000008ed6         jne        loc_8303

0000000000008edc         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_8ee1:
0000000000008ee1         test       r13, r13                                    ; CODE XREF=sub_89b0+2749
0000000000008ee4         jne        loc_947a

0000000000008eea         lea        rax, qword [aLibs+29]                       ; 0xcae5
0000000000008ef1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008efa         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008eff         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008f04         xor        r12d, r12d
0000000000008f07         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008f0c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008f15         mov        qword [rsp+0xe8+var_A0], rax
0000000000008f1a         mov        r15d, 0x1
0000000000008f20         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000008f28         jmp        loc_8343
0000000000008f2d         align      16

                     loc_8f30:
0000000000008f30         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000008f32         jne        loc_932d

0000000000008f38         test       r13, r13
0000000000008f3b         je         loc_9166

0000000000008f41         mov        byte [r14], 0x22
0000000000008f45         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008f4a         xor        r12d, r12d
0000000000008f4d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008f52         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_8f5b:
0000000000008f5b         lea        rax, qword [aLibs+27]                       ; 0xcae3, CODE XREF=sub_89b0+1996
0000000000008f62         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008f67         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008f6c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008f75         mov        r15d, 0x1
0000000000008f7b         mov        qword [rsp+0xe8+var_A0], rax
0000000000008f80         jmp        loc_8343

                     loc_8f85:
0000000000008f85         lea        rax, qword [aLibs+27]                       ; case 6, 0xcae3, CODE XREF=quotearg_buffer_restyled+145
0000000000008f8c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008f91         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008f96         xor        r12d, r12d
0000000000008f99         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008fa2         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008fa7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008fac         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008fb5         xor        r15d, r15d
0000000000008fb8         mov        qword [rsp+0xe8+var_A0], rax
0000000000008fbd         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000008fc5         jmp        loc_8343

                     loc_8fca:
0000000000008fca         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
0000000000008fcf         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008fd4         xor        r12d, r12d
0000000000008fd7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008fe0         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008fe5         xor        r15d, r15d
0000000000008fe8         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008fed         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000008ff6         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000008fff         jmp        loc_8343

                     loc_9004:
0000000000009004         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000009009         je         loc_9061

000000000000900b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0xcae7
0000000000009012         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009014         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009019         call       j_dcgettext                                 ; dcgettext
000000000000901e         mov        rcx, rax
0000000000009021         mov        qword [rsp+0xe8+var_80], rax
0000000000009026         lea        rax, qword [aLibs+31]                       ; 0xcae7
000000000000902d         cmp        rcx, rax
0000000000009030         je         loc_93ce

                     loc_9036:
0000000000009036         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xcae5, CODE XREF=sub_89b0+2607
000000000000903d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000903f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009044         call       j_dcgettext                                 ; dcgettext
0000000000009049         mov        rcx, rax
000000000000904c         mov        qword [rsp+0xe8+var_88], rax
0000000000009051         lea        rax, qword [aLibs+29]                       ; 0xcae5
0000000000009058         cmp        rcx, rax
000000000000905b         je         loc_93e4

                     loc_9061:
0000000000009061         xor        r15d, r15d                                  ; CODE XREF=sub_89b0+1625, sub_89b0+2629
0000000000009064         test       ebx, ebx
0000000000009066         je         loc_922d

                     loc_906c:
000000000000906c         test       ebx, ebx                                    ; CODE XREF=sub_89b0+2183, sub_89b0+2214
000000000000906e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000009073         setne      byte [rsp+0xe8+var_D9]
0000000000009078         xor        r12d, r12d
000000000000907b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000907e         call       j_strlen                                    ; strlen
0000000000009083         mov        qword [rsp+0xe8+var_A0], rbx
0000000000009088         mov        qword [rsp+0xe8+var_D0], rax
000000000000908d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000009092         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000009097         mov        qword [rsp+0xe8+var_98], 0x0
00000000000090a0         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000090a5         jmp        loc_8343

                     loc_90aa:
00000000000090aa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
00000000000090af         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000090b4         xor        r12d, r12d
00000000000090b7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000090c0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000090c5         xor        r15d, r15d
00000000000090c8         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000090cd         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000090d6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000090df         jmp        loc_8343

                     loc_90e4:
00000000000090e4         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
00000000000090e9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000090ee         xor        r12d, r12d
00000000000090f1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000090fa         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000090ff         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000009104         jmp        loc_8323

                     loc_9109:
0000000000009109         cmp        r13, r15                                    ; CODE XREF=sub_8850+133
000000000000910c         jbe        loc_9113

000000000000910e         mov        byte [r14+r15], 0x30

                     loc_9113:
0000000000009113         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_89b0+1884
0000000000009117         cmp        r13, rax
000000000000911a         jbe        loc_9122

000000000000911c         mov        byte [r14+rcx+2], 0x30

                     loc_9122:
0000000000009122         mov        eax, r12d                                   ; CODE XREF=sub_89b0+1898
0000000000009125         lea        r15, qword [rcx+3]
0000000000009129         xor        r12d, r12d
000000000000912c         mov        ebx, 0x30
0000000000009131         jmp        sub_8460+56
                        ; endp
0000000000009136         align      64

                     loc_9140:
0000000000009140         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_89b0+731
0000000000009145         mov        rbp, r11
0000000000009148         mov        byte [rsp+0xe8+var_DB], bl
000000000000914c         jmp        loc_8df9

                     loc_9151:
0000000000009151         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_8750+105
0000000000009156         xor        r12d, r12d
0000000000009159         jmp        loc_8c60

                     loc_915e:
000000000000915e         xor        r10d, r10d                                  ; CODE XREF=sub_89b0+944
0000000000009161         jmp        loc_8d1d

                     loc_9166:
0000000000009166         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_89b0+1419
000000000000916f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000009174         xor        r12d, r12d
0000000000009177         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000917c         jmp        loc_8f5b

                     loc_9181:
0000000000009181         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_89b0+561
0000000000009186         mov        rsi, r14
0000000000009189         mov        rcx, r13
000000000000918c         mov        rax, rbx
000000000000918f         mov        rdi, rbx
0000000000009192         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000009198         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000919d         mov        r9, qword [rsp+0xe8+var_60]
00000000000091a5         cmp        rsi, r11
00000000000091a8         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000091ae         mov        r15, qword [rsp+0xe8+var_68]
00000000000091b6         mov        r14, qword [rsp+0xe8+var_A8]
00000000000091bb         mov        r13, qword [rsp+0xe8+var_78]
00000000000091c0         jae        loc_91e8

00000000000091c2         cmp        byte [rcx], 0x0
00000000000091c5         jne        loc_91d7

00000000000091c7         jmp        loc_91e8
00000000000091c9         align      16

                     loc_91d0:
00000000000091d0         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_89b0+2099
00000000000091d5         je         loc_91e5

                     loc_91d7:
00000000000091d7         add        rax, 0x1                                    ; CODE XREF=sub_89b0+2069
00000000000091db         lea        rdx, qword [rbp+rax]
00000000000091e0         cmp        r11, rdx
00000000000091e3         ja         loc_91d0

                     loc_91e5:
00000000000091e5         mov        rdi, rax                                    ; CODE XREF=sub_89b0+2085

                     loc_91e8:
00000000000091e8         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_89b0+2064, sub_89b0+2071
00000000000091ed         xor        r12d, r12d
00000000000091f0         jmp        loc_8c56

                     loc_91f5:
00000000000091f5         mov        rdi, rbx                                    ; CODE XREF=sub_89b0+551
00000000000091f8         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000091fe         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000009203         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000009209         mov        r15, qword [rsp+0xe8+var_68]
0000000000009211         xor        r12d, r12d
0000000000009214         mov        r14, qword [rsp+0xe8+var_A8]
0000000000009219         mov        r13, qword [rsp+0xe8+var_78]
000000000000921e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000009223         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000009228         jmp        loc_8c56

                     loc_922d:
000000000000922d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_89b0+1718
0000000000009232         movzx      eax, byte [rdx]
0000000000009235         test       al, al
0000000000009237         je         loc_906c

000000000000923d         nop        dword [rax]

                     loc_9240:
0000000000009240         cmp        r13, r15                                    ; CODE XREF=sub_89b0+2212
0000000000009243         jbe        loc_9249

0000000000009245         mov        byte [r14+r15], al

                     loc_9249:
0000000000009249         add        r15, 0x1                                    ; CODE XREF=sub_89b0+2195
000000000000924d         movzx      eax, byte [rdx+r15]
0000000000009252         test       al, al
0000000000009254         jne        loc_9240

0000000000009256         jmp        loc_906c

                     loc_925b:
000000000000925b         mov        eax, edx                                    ; CODE XREF=sub_89b0+682
000000000000925d         jmp        loc_87b7

                     loc_9262:
0000000000009262         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_89b0+290
0000000000009266         cmp        bl, 0x3e
0000000000009269         ja         loc_8ae0

000000000000926f         movabs     rax, 0x7000a38200000000
0000000000009279         bt         rax, rbx
000000000000927d         jae        loc_8ae0

0000000000009283         cmp        byte [rsp+arg_7], 0x0
0000000000009288         jne        loc_9472

000000000000928e         cmp        r13, r15
0000000000009291         jbe        loc_9298

0000000000009293         mov        byte [r14+r15], 0x3f

                     loc_9298:
0000000000009298         lea        rax, qword [r15+1]                          ; CODE XREF=sub_89b0+2273
000000000000929c         cmp        r13, rax
000000000000929f         jbe        loc_92a7

00000000000092a1         mov        byte [r14+r15+1], 0x22

                     loc_92a7:
00000000000092a7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_89b0+2287
00000000000092ab         cmp        r13, rax
00000000000092ae         jbe        loc_92b6

00000000000092b0         mov        byte [r14+r15+2], 0x22

                     loc_92b6:
00000000000092b6         lea        rax, qword [r15+3]                          ; CODE XREF=sub_89b0+2302
00000000000092ba         cmp        r13, rax
00000000000092bd         jbe        loc_92c5

00000000000092bf         mov        byte [r14+r15+3], 0x3f

                     loc_92c5:
00000000000092c5         add        r15, 0x4                                    ; CODE XREF=sub_89b0+2317
00000000000092c9         xor        edx, edx
00000000000092cb         xor        r12d, r12d
00000000000092ce         xor        eax, eax
00000000000092d0         mov        rbp, rcx
00000000000092d3         jmp        sub_8460+56
                        ; endp

                     loc_92d8:
00000000000092d8         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
00000000000092da         je         loc_9468

00000000000092e0         lea        rax, qword [aLibs+29]                       ; 0xcae5
00000000000092e7         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000092ec         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000092f1         xor        r12d, r12d
00000000000092f4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000092fd         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000009302         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000009307         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000009310         xor        r15d, r15d
0000000000009313         mov        qword [rsp+0xe8+var_A0], rax
0000000000009318         jmp        loc_8343
000000000000931d         align      32

                     loc_9320:
0000000000009320         mov        rbp, r11                                    ; CODE XREF=sub_89b0+333
0000000000009323         movzx      eax, byte [rsp+arg_7]
0000000000009328         jmp        sub_89b0+1097
                        ; endp

                     loc_932d:
000000000000932d         lea        rax, qword [aLibs+27]                       ; 0xcae3, CODE XREF=sub_89b0+1410
0000000000009334         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000009339         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000933e         xor        r12d, r12d
0000000000009341         mov        qword [rsp+0xe8+var_98], 0x0
000000000000934a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000934f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000009354         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000935d         xor        r15d, r15d
0000000000009360         mov        qword [rsp+0xe8+var_A0], rax
0000000000009365         jmp        loc_8343

                     loc_936a:
000000000000936a         mov        eax, edx                                    ; CODE XREF=sub_89b0+87

                     loc_936c:
000000000000936c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_89b0+76, sub_89b0+2721
0000000000009371         test       rbx, rbx
0000000000009374         je         loc_93a2

0000000000009376         test       al, al
0000000000009378         je         loc_93a2

000000000000937a         movzx      ecx, byte [rbx]
000000000000937d         mov        rax, rbx
0000000000009380         test       cl, cl
0000000000009382         je         loc_93a2

0000000000009384         mov        rdx, r15
0000000000009387         sub        rax, r15

                     loc_938a:
000000000000938a         cmp        r13, rdx                                    ; CODE XREF=sub_89b0+2541
000000000000938d         jbe        loc_9393

000000000000938f         mov        byte [r14+rdx], cl

                     loc_9393:
0000000000009393         add        rdx, 0x1                                    ; CODE XREF=sub_89b0+2525
0000000000009397         movzx      ecx, byte [rax+rdx]
000000000000939b         test       cl, cl
000000000000939d         jne        loc_938a

000000000000939f         mov        r15, rdx

                     loc_93a2:
00000000000093a2         cmp        r13, r15                                    ; CODE XREF=sub_89b0+2500, sub_89b0+2504, sub_89b0+2514
00000000000093a5         jbe        loc_8e49

00000000000093ab         mov        byte [r14+r15], 0x0
00000000000093b0         jmp        loc_8e49

                     loc_93b5:
00000000000093b5         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
00000000000093ba         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000093bf         mov        rbp, r11
00000000000093c2         sete       al
00000000000093c5         mov        byte [rsp+0xe8+var_DB], bl
00000000000093c9         jmp        loc_8df9

                     loc_93ce:
00000000000093ce         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_89b0+1664
00000000000093d2         mov        rdi, rcx
00000000000093d5         call       gettext_quote.part.1                        ; gettext_quote.part.1
00000000000093da         mov        qword [rsp+0xe8+var_80], rax
00000000000093df         jmp        loc_9036

                     loc_93e4:
00000000000093e4         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_89b0+1707
00000000000093e8         mov        rdi, rcx
00000000000093eb         call       gettext_quote.part.1                        ; gettext_quote.part.1
00000000000093f0         mov        qword [rsp+0xe8+var_88], rax
00000000000093f5         jmp        loc_9061

                     loc_93fa:
00000000000093fa         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_8850+16
00000000000093ff         mov        rbp, r11
0000000000009402         mov        eax, edx
0000000000009404         mov        byte [rsp+arg_5], bl
0000000000009408         jmp        sub_89b0+1097
                        ; endp

                     loc_940d:
000000000000940d         sub        rsp, 0x8                                    ; CODE XREF=sub_89b0+98
0000000000009411         mov        r8d, 0x5
0000000000009417         mov        rcx, r11
000000000000941a         push       qword [rsp+0xf0+var_88]
000000000000941e         push       qword [rsp+0xf8+var_80]
0000000000009422         mov        rdi, r14
0000000000009425         push       qword [rsp+0x100+var_C8]
0000000000009429         mov        r9d, dword [rsp+0x108+var_70]
0000000000009431         mov        rdx, qword [rsp+0x108+var_D8]
0000000000009436         mov        rsi, qword [rsp+0x108+var_98]
000000000000943b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009440         add        rsp, 0x20
0000000000009444         mov        r15, rax
0000000000009447         jmp        loc_8e49

                     loc_944c:
000000000000944c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_89b0+121
0000000000009451         jmp        loc_936c

                     loc_9456:
0000000000009456         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_89b0+63
000000000000945e         jmp        loc_8df9

                     loc_9463:
0000000000009463         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_89b0+1197
                        ; endp

                     loc_9468:
0000000000009468         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_89b0+2346
000000000000946d         jmp        loc_8ee1

                     loc_9472:
0000000000009472         mov        rbp, r11                                    ; CODE XREF=sub_89b0+2264
0000000000009475         jmp        sub_89b0+1120
                        ; endp

                     loc_947a:
000000000000947a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_89b0+1332
000000000000947f         xor        eax, eax
0000000000009481         xor        r12d, r12d
0000000000009484         mov        qword [rsp+0xe8+var_98], 0x0
000000000000948d         jmp        loc_8a34

                     loc_9492:
0000000000009492         mov        rdx, r13                                    ; CODE XREF=sub_89b0+1264
0000000000009495         mov        r13, qword [rsp+arg_48]
000000000000949a         jmp        loc_8a92

                     loc_949f:
000000000000949f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
00000000000094a4         align      16                                          ; End of unwind block (FDE at 0xe480)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
00000000000094b0         push       r15                                         ; Begin of unwind block (FDE at 0xe4f8), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
00000000000094b2         push       r14
00000000000094b4         movsxd     r15, edi
00000000000094b7         push       r13
00000000000094b9         push       r12
00000000000094bb         mov        r14, rdx
00000000000094be         push       rbp
00000000000094bf         push       rbx
00000000000094c0         mov        rbp, rcx
00000000000094c3         sub        rsp, 0x28
00000000000094c7         mov        qword [rsp+0x58+var_50], rsi
00000000000094cc         call       j___errno_location                          ; __errno_location
00000000000094d1         mov        r13, rax
00000000000094d4         mov        eax, dword [rax]
00000000000094d6         test       r15d, r15d
00000000000094d9         mov        rbx, qword [slotvec]                        ; slotvec
00000000000094e0         mov        dword [rsp+0x58+var_40], eax
00000000000094e4         js         loc_9651

00000000000094ea         cmp        dword [nslots], r15d                        ; nslots
00000000000094f1         jg         loc_9555

00000000000094f3         cmp        r15d, 0x7fffffff
00000000000094fa         je         loc_9656

0000000000009500         lea        r12d, dword [r15+1]
0000000000009504         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000950b         movsxd     rsi, r12d
000000000000950e         shl        rsi, 0x4
0000000000009512         cmp        rbx, rax
0000000000009515         je         loc_9630

000000000000951b         mov        rdi, rbx
000000000000951e         call       xrealloc                                    ; xrealloc
0000000000009523         mov        rbx, rax
0000000000009526         mov        qword [slotvec], rax                        ; slotvec

                     loc_952d:
000000000000952d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000009534         mov        edx, r12d
0000000000009537         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000009539         sub        edx, edi
000000000000953b         shl        rdi, 0x4
000000000000953f         movsxd     rdx, edx
0000000000009542         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000009545         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000009549         call       j_memset                                    ; memset
000000000000954e         mov        dword [nslots], r12d                        ; nslots

                     loc_9555:
0000000000009555         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000009558         shl        r15, 0x4
000000000000955c         sub        rsp, 0x8
0000000000009560         add        rbx, r15
0000000000009563         lea        r15, qword [rbp+8]
0000000000009567         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000956b         mov        r11, qword [rbx]
000000000000956e         mov        r12, qword [rbx+8]
0000000000009572         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000009575         or         eax, 0x1
0000000000009578         mov        dword [rsp+0x60+var_3C], eax
000000000000957c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000957f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000009582         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000009585         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000009587         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000958a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000958f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000009592         mov        qword [rsp+0x78+var_48], r11
0000000000009597         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000959c         add        rsp, 0x20
00000000000095a0         mov        r11, qword [rsp+0x58+var_48]
00000000000095a5         cmp        r11, rax
00000000000095a8         ja         loc_9611

00000000000095aa         lea        rsi, qword [rax+1]
00000000000095ae         lea        rax, qword [slot0]                          ; slot0
00000000000095b5         cmp        r12, rax
00000000000095b8         mov        qword [rbx], rsi
00000000000095bb         je         loc_95cf

00000000000095bd         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000095c0         mov        qword [rsp+0x58+var_48], rsi
00000000000095c5         call       j_free                                      ; free
00000000000095ca         mov        rsi, qword [rsp+0x58+var_48]

                     loc_95cf:
00000000000095cf         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
00000000000095d2         mov        qword [rsp+0x58+var_48], rsi
00000000000095d7         call       xmalloc                                     ; xmalloc
00000000000095dc         sub        rsp, 0x8
00000000000095e0         mov        qword [rbx+8], rax
00000000000095e4         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000095e8         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000095eb         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000095ee         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000095f1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000095f3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
00000000000095f8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
00000000000095fb         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000009600         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000009605         mov        r12, rax
0000000000009608         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000960d         add        rsp, 0x20

                     loc_9611:
0000000000009611         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000009615         mov        dword [r13], eax
0000000000009619         add        rsp, 0x28
000000000000961d         mov        rax, r12
0000000000009620         pop        rbx
0000000000009621         pop        rbp
0000000000009622         pop        r12
0000000000009624         pop        r13
0000000000009626         pop        r14
0000000000009628         pop        r15
000000000000962a         ret
                        ; endp
000000000000962b         align      16

                     loc_9630:
0000000000009630         xor        edi, edi                                    ; CODE XREF=quotearg_n_options+101
0000000000009632         call       xrealloc                                    ; xrealloc
0000000000009637         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000963f         mov        rbx, rax
0000000000009642         mov        qword [slotvec], rax                        ; slotvec
0000000000009649         movups     xmmword [rax], xmm0
000000000000964c         jmp        loc_952d

                     loc_9651:
0000000000009651         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_9656:
0000000000009656         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_965b:
000000000000965b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xe4f8)
                     clone_quoting_options:
0000000000009660         push       r12                                         ; Begin of unwind block (FDE at 0xe564), DATA XREF=fremote+114
0000000000009662         push       rbp
0000000000009663         push       rbx
0000000000009664         mov        rbx, rdi
0000000000009667         call       j___errno_location                          ; __errno_location
000000000000966c         mov        r12d, dword [rax]
000000000000966f         mov        rbp, rax
0000000000009672         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000009679         test       rbx, rbx
000000000000967c         mov        esi, 0x38
0000000000009681         cmove      rbx, rax
0000000000009685         mov        rdi, rbx
0000000000009688         call       xmemdup                                     ; xmemdup
000000000000968d         mov        dword [rbp], r12d
0000000000009691         pop        rbx
0000000000009692         pop        rbp
0000000000009693         pop        r12
0000000000009695         ret
                        ; endp
0000000000009696         align      32                                          ; End of unwind block (FDE at 0xe564)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
00000000000096a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe590), default_quoting_options
00000000000096a7         test       rdi, rdi
00000000000096aa         cmove      rdi, rax
00000000000096ae         mov        eax, dword [rdi]
00000000000096b0         ret
                        ; endp
00000000000096b1         align      64                                          ; End of unwind block (FDE at 0xe590)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
00000000000096c0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5a4), default_quoting_options
00000000000096c7         test       rdi, rdi
00000000000096ca         cmove      rdi, rax
00000000000096ce         mov        dword [rdi], esi
00000000000096d0         ret
                        ; endp
00000000000096d1         align      32                                          ; End of unwind block (FDE at 0xe5a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
00000000000096e0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5b8), default_quoting_options
00000000000096e7         test       rdi, rdi
00000000000096ea         mov        ecx, esi
00000000000096ec         cmove      rdi, rax
00000000000096f0         mov        eax, esi
00000000000096f2         and        ecx, 0x1f
00000000000096f5         shr        al, 0x5
00000000000096f8         movzx      eax, al
00000000000096fb         lea        rdi, qword [rdi+rax*4+8]
0000000000009700         mov        esi, dword [rdi]
0000000000009702         mov        eax, esi
0000000000009704         shr        eax, cl
0000000000009706         xor        edx, eax
0000000000009708         and        eax, 0x1
000000000000970b         and        edx, 0x1
000000000000970e         shl        edx, cl
0000000000009710         xor        edx, esi
0000000000009712         mov        dword [rdi], edx
0000000000009714         ret
                        ; endp
0000000000009715         align      32                                          ; End of unwind block (FDE at 0xe5b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000009720         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5cc), default_quoting_options
0000000000009727         test       rdi, rdi
000000000000972a         cmove      rdi, rax
000000000000972e         mov        eax, dword [rdi+4]
0000000000009731         mov        dword [rdi+4], esi
0000000000009734         ret
                        ; endp
0000000000009735         align      64                                          ; End of unwind block (FDE at 0xe5cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000009740         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe5e0), default_quoting_options
0000000000009747         test       rdi, rdi
000000000000974a         cmove      rdi, rax
000000000000974e         test       rsi, rsi
0000000000009751         mov        dword [rdi], 0xa
0000000000009757         je         loc_9767

0000000000009759         test       rdx, rdx
000000000000975c         je         loc_9767

000000000000975e         mov        qword [rdi+0x28], rsi
0000000000009762         mov        qword [rdi+0x30], rdx
0000000000009766         ret
                        ; endp

                     loc_9767:
0000000000009767         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000976b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000009770         push       r15                                         ; End of unwind block (FDE at 0xe5e0), Begin of unwind block (FDE at 0xe5f4)
0000000000009772         push       r14
0000000000009774         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000977b         push       r13
000000000000977d         push       r12
000000000000977f         mov        r13, rdi
0000000000009782         push       rbp
0000000000009783         push       rbx
0000000000009784         mov        rbx, r8
0000000000009787         mov        r14, rsi
000000000000978a         mov        r15, rdx
000000000000978d         sub        rsp, 0x18
0000000000009791         test       r8, r8
0000000000009794         cmove      rbx, rax
0000000000009798         mov        qword [rsp+0x48+var_40], rcx
000000000000979d         call       j___errno_location                          ; __errno_location
00000000000097a2         mov        r12d, dword [rax]
00000000000097a5         mov        rbp, rax
00000000000097a8         lea        rax, qword [rbx+8]
00000000000097ac         sub        rsp, 0x8
00000000000097b0         mov        r9d, dword [rbx+4]
00000000000097b4         push       qword [rbx+0x30]
00000000000097b7         mov        r8d, dword [rbx]
00000000000097ba         push       qword [rbx+0x28]
00000000000097bd         mov        rdx, r15
00000000000097c0         push       rax
00000000000097c1         mov        rcx, qword [rsp+0x68+var_40]
00000000000097c6         mov        rsi, r14
00000000000097c9         mov        rdi, r13
00000000000097cc         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000097d1         mov        dword [rbp], r12d
00000000000097d5         add        rsp, 0x38
00000000000097d9         pop        rbx
00000000000097da         pop        rbp
00000000000097db         pop        r12
00000000000097dd         pop        r13
00000000000097df         pop        r14
00000000000097e1         pop        r15
00000000000097e3         ret
                        ; endp
00000000000097e4         align      16                                          ; End of unwind block (FDE at 0xe5f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
00000000000097f0         push       r15                                         ; Begin of unwind block (FDE at 0xe648), CODE XREF=quotearg_alloc+5
00000000000097f2         push       r14
00000000000097f4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000097fb         push       r13
00000000000097fd         push       r12
00000000000097ff         mov        r12, rdx
0000000000009802         push       rbp
0000000000009803         push       rbx
0000000000009804         mov        rbx, rcx
0000000000009807         mov        r14, rdi
000000000000980a         mov        r15, rsi
000000000000980d         sub        rsp, 0x38
0000000000009811         test       rcx, rcx
0000000000009814         cmove      rbx, rax
0000000000009818         xor        ebp, ebp
000000000000981a         call       j___errno_location                          ; __errno_location
000000000000981f         test       r12, r12
0000000000009822         mov        r13, rax
0000000000009825         mov        eax, dword [rax]
0000000000009827         sete       bpl
000000000000982b         or         ebp, dword [rbx+4]
000000000000982e         lea        r10, qword [rbx+8]
0000000000009832         sub        rsp, 0x8
0000000000009836         mov        r8d, dword [rbx]
0000000000009839         mov        rcx, r15
000000000000983c         mov        dword [rsp+0x70+var_5C], eax
0000000000009840         push       qword [rbx+0x30]
0000000000009843         mov        rdx, r14
0000000000009846         push       qword [rbx+0x28]
0000000000009849         push       r10
000000000000984b         xor        esi, esi
000000000000984d         mov        r9d, ebp
0000000000009850         xor        edi, edi
0000000000009852         mov        qword [rsp+0x88+var_48], r10
0000000000009857         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000985c         lea        rsi, qword [rax+1]
0000000000009860         mov        qword [rsp+0x88+var_40], rax
0000000000009865         add        rsp, 0x20
0000000000009869         mov        rdi, rsi
000000000000986c         mov        qword [rsp+0x68+var_50], rsi
0000000000009871         call       xmalloc                                     ; xmalloc
0000000000009876         mov        qword [rsp+0x68+var_58], rax
000000000000987b         sub        rsp, 0x8
000000000000987f         push       qword [rbx+0x30]
0000000000009882         push       qword [rbx+0x28]
0000000000009885         mov        r10, qword [rsp+0x80+var_48]
000000000000988a         mov        r9d, ebp
000000000000988d         mov        r8d, dword [rbx]
0000000000009890         mov        rcx, r15
0000000000009893         mov        rdx, r14
0000000000009896         mov        rdi, rax
0000000000009899         push       r10
000000000000989b         mov        rsi, qword [rsp+0x88+var_50]
00000000000098a0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000098a5         mov        eax, dword [rsp+0x88+var_5C]
00000000000098a9         add        rsp, 0x20
00000000000098ad         test       r12, r12
00000000000098b0         mov        dword [r13], eax
00000000000098b4         je         loc_98bf

00000000000098b6         mov        r11, qword [rsp+0x68+var_40]
00000000000098bb         mov        qword [r12], r11

                     loc_98bf:
00000000000098bf         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
00000000000098c4         add        rsp, 0x38
00000000000098c8         pop        rbx
00000000000098c9         pop        rbp
00000000000098ca         pop        r12
00000000000098cc         pop        r13
00000000000098ce         pop        r14
00000000000098d0         pop        r15
00000000000098d2         ret
                        ; endp
00000000000098d3         align      32                                          ; End of unwind block (FDE at 0xe648)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
00000000000098e0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xe6b4)
00000000000098e3         xor        edx, edx
00000000000098e5         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
00000000000098ea         align      16                                          ; End of unwind block (FDE at 0xe6b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
00000000000098f0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xe6c8), nslots
00000000000098f6         push       r12
00000000000098f8         mov        r12, qword [slotvec]                        ; slotvec
00000000000098ff         push       rbp
0000000000009900         push       rbx
0000000000009901         cmp        eax, 0x1
0000000000009904         jle        loc_9931

0000000000009906         sub        eax, 0x2
0000000000009909         lea        rbx, qword [r12+0x18]
000000000000990e         shl        rax, 0x4
0000000000009912         lea        rbp, qword [r12+rax+0x28]
0000000000009917         nop        word [rax+rax]

                     loc_9920:
0000000000009920         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000009923         add        rbx, 0x10
0000000000009927         call       j_free                                      ; free
000000000000992c         cmp        rbx, rbp
000000000000992f         jne        loc_9920

                     loc_9931:
0000000000009931         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000009936         lea        rbx, qword [slot0]                          ; slot0
000000000000993d         cmp        rdi, rbx
0000000000009940         je         loc_9959

0000000000009942         call       j_free                                      ; free
0000000000009947         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000009952         mov        qword [slotvec0+8], rbx                     ; 0x2100b8

                     loc_9959:
0000000000009959         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000009960         cmp        r12, rbx
0000000000009963         je         loc_9974

0000000000009965         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000009968         call       j_free                                      ; free
000000000000996d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_9974:
0000000000009974         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000009975         mov        dword [nslots], 0x1                         ; nslots
000000000000997f         pop        rbp
0000000000009980         pop        r12
0000000000009982         ret
                        ; endp
0000000000009983         align      16                                          ; End of unwind block (FDE at 0xe6c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000009990         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe6f4), default_quoting_options
0000000000009997         mov        rdx, 0xffffffffffffffff
000000000000999e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000099a3         align      16                                          ; End of unwind block (FDE at 0xe6f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
00000000000099b0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe708), default_quoting_options
00000000000099b7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000099bc         align      64                                          ; End of unwind block (FDE at 0xe708)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
00000000000099c0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe71c), default_quoting_options
00000000000099c7         mov        rsi, rdi
00000000000099ca         mov        rdx, 0xffffffffffffffff
00000000000099d1         xor        edi, edi
00000000000099d3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000099d8         align      32                                          ; End of unwind block (FDE at 0xe71c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
00000000000099e0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xe730), default_quoting_options
00000000000099e7         mov        rdx, rsi
00000000000099ea         mov        rsi, rdi
00000000000099ed         xor        edi, edi
00000000000099ef         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000099f4         align      512                                         ; End of unwind block (FDE at 0xe730)

                     quotearg_n_style:
0000000000009a00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe744), CODE XREF=argmatch_invalid+64, quotearg_style+7
0000000000009a04         mov        rax, rdx
0000000000009a07         mov        rdx, qword [fs:0x28]
0000000000009a10         mov        qword [rsp+0x48+var_10], rdx
0000000000009a15         xor        edx, edx
0000000000009a17         cmp        esi, 0xa
0000000000009a1a         je         loc_9a84

0000000000009a1c         mov        dword [rsp+0x48+var_48], esi
0000000000009a1f         mov        rcx, rsp
0000000000009a22         mov        rdx, 0xffffffffffffffff
0000000000009a29         mov        rsi, rax
0000000000009a2c         mov        qword [rsp+0x48+var_44], 0x0
0000000000009a35         mov        qword [rsp+0x48+var_3C], 0x0
0000000000009a3e         mov        qword [rsp+0x48+var_34], 0x0
0000000000009a47         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009a50         mov        qword [rsp+0x48+var_24], 0x0
0000000000009a59         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009a62         mov        dword [rsp+0x48+var_14], 0x0
0000000000009a6a         call       quotearg_n_options                          ; quotearg_n_options
0000000000009a6f         mov        rcx, qword [rsp+0x48+var_10]
0000000000009a74         xor        rcx, qword [fs:0x28]
0000000000009a7d         jne        loc_9a89

0000000000009a7f         add        rsp, 0x48
0000000000009a83         ret
                        ; endp

                     loc_9a84:
0000000000009a84         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_9a89:
0000000000009a89         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000009a8e         align      16                                          ; End of unwind block (FDE at 0xe744)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000009a90         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe760), CODE XREF=quotearg_style_mem+10
0000000000009a94         mov        rax, rdx
0000000000009a97         mov        rdx, rcx
0000000000009a9a         mov        rcx, qword [fs:0x28]
0000000000009aa3         mov        qword [rsp+0x48+var_10], rcx
0000000000009aa8         xor        ecx, ecx
0000000000009aaa         cmp        esi, 0xa
0000000000009aad         je         loc_9b10

0000000000009aaf         mov        dword [rsp+0x48+var_48], esi
0000000000009ab2         mov        rcx, rsp
0000000000009ab5         mov        rsi, rax
0000000000009ab8         mov        qword [rsp+0x48+var_44], 0x0
0000000000009ac1         mov        qword [rsp+0x48+var_3C], 0x0
0000000000009aca         mov        qword [rsp+0x48+var_34], 0x0
0000000000009ad3         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009adc         mov        qword [rsp+0x48+var_24], 0x0
0000000000009ae5         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009aee         mov        dword [rsp+0x48+var_14], 0x0
0000000000009af6         call       quotearg_n_options                          ; quotearg_n_options
0000000000009afb         mov        rdx, qword [rsp+0x48+var_10]
0000000000009b00         xor        rdx, qword [fs:0x28]
0000000000009b09         jne        loc_9b15

0000000000009b0b         add        rsp, 0x48
0000000000009b0f         ret
                        ; endp

                     loc_9b10:
0000000000009b10         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_9b15:
0000000000009b15         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000009b1a         align      32                                          ; End of unwind block (FDE at 0xe760)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_style:
0000000000009b20         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xe77c), CODE XREF=main+2643, main+3477, main+4184, main+4251, main+5003, main+6971, main+7344, main+8276, main+9448, main+9895, main+10131
0000000000009b23         mov        esi, edi
0000000000009b25         xor        edi, edi
0000000000009b27         jmp        quotearg_n_style                            ; quotearg_n_style
0000000000009b2c         align      16                                          ; End of unwind block (FDE at 0xe77c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000009b30         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xe790)
0000000000009b33         mov        rdx, rsi
0000000000009b36         mov        esi, edi
0000000000009b38         xor        edi, edi
0000000000009b3a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000009b3f         align      64                                          ; End of unwind block (FDE at 0xe790)

                     quotearg_char_mem:
0000000000009b40         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe7a4), CODE XREF=quotearg_char+11
0000000000009b44         mov        ecx, edx
0000000000009b46         mov        rax, qword [fs:0x28]
0000000000009b4f         mov        qword [rsp+0x48+var_10], rax
0000000000009b54         xor        eax, eax
0000000000009b56         mov        rax, qword [qword_210270]                   ; qword_210270
0000000000009b5d         mov        r8, rsp
0000000000009b60         and        ecx, 0x1f
0000000000009b63         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000009b6b         mov        qword [rsp+0x48+var_18], rax
0000000000009b70         mov        eax, edx
0000000000009b72         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000009b76         shr        al, 0x5
0000000000009b79         movzx      eax, al
0000000000009b7c         lea        r9, qword [r8+rax*4+8]
0000000000009b81         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x210250
0000000000009b89         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000009b8e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x210260
0000000000009b96         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000009b9b         mov        edx, dword [r9]
0000000000009b9e         mov        eax, edx
0000000000009ba0         shr        eax, cl
0000000000009ba2         not        eax
0000000000009ba4         and        eax, 0x1
0000000000009ba7         shl        eax, cl
0000000000009ba9         mov        rcx, r8
0000000000009bac         xor        eax, edx
0000000000009bae         mov        rdx, rsi
0000000000009bb1         mov        rsi, rdi
0000000000009bb4         mov        dword [r9], eax
0000000000009bb7         xor        edi, edi
0000000000009bb9         call       quotearg_n_options                          ; quotearg_n_options
0000000000009bbe         mov        rsi, qword [rsp+0x48+var_10]
0000000000009bc3         xor        rsi, qword [fs:0x28]
0000000000009bcc         jne        loc_9bd3

0000000000009bce         add        rsp, 0x48
0000000000009bd2         ret
                        ; endp

                     loc_9bd3:
0000000000009bd3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000009bd8         align      32                                          ; End of unwind block (FDE at 0xe7a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000009be0         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xe7c0)
0000000000009be4         mov        rsi, 0xffffffffffffffff
0000000000009beb         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000009bf0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xe7c0), Begin of unwind block (FDE at 0xe7d4), CODE XREF=close_stdout+101
0000000000009bf5         mov        rsi, 0xffffffffffffffff
0000000000009bfc         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000009c01         align      16                                          ; End of unwind block (FDE at 0xe7d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000009c10         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xe7e8)
0000000000009c15         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000009c1a         align      32                                          ; End of unwind block (FDE at 0xe7e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000009c20         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe7fc), CODE XREF=main+3842, main+6476, main+6583, main+10316, xlseek+117, xlseek+176, check_fspec+378, recheck+242
0000000000009c24         mov        rax, rdx
0000000000009c27         mov        rdx, qword [fs:0x28]
0000000000009c30         mov        qword [rsp+0x48+var_10], rdx
0000000000009c35         xor        edx, edx
0000000000009c37         cmp        esi, 0xa
0000000000009c3a         je         loc_9ca4

0000000000009c3c         mov        dword [rsp+0x48+var_48], esi
0000000000009c3f         mov        rcx, rsp
0000000000009c42         mov        rdx, 0xffffffffffffffff
0000000000009c49         mov        rsi, rax
0000000000009c4c         mov        qword [rsp+0x48+var_44], 0x0
0000000000009c55         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000009c5e         mov        qword [rsp+0x48+var_34], 0x0
0000000000009c67         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009c70         mov        qword [rsp+0x48+var_24], 0x0
0000000000009c79         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009c82         mov        dword [rsp+0x48+var_14], 0x0
0000000000009c8a         call       quotearg_n_options                          ; quotearg_n_options
0000000000009c8f         mov        rcx, qword [rsp+0x48+var_10]
0000000000009c94         xor        rcx, qword [fs:0x28]
0000000000009c9d         jne        loc_9ca9

0000000000009c9f         add        rsp, 0x48
0000000000009ca3         ret
                        ; endp

                     loc_9ca4:
0000000000009ca4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_9ca9:
0000000000009ca9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000009cae         align      16                                          ; End of unwind block (FDE at 0xe7fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000009cb0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xe818), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000009cb4         mov        r9, rcx
0000000000009cb7         mov        rcx, qword [qword_210270]                   ; qword_210270
0000000000009cbe         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000009cc6         mov        rax, qword [fs:0x28]
0000000000009ccf         mov        qword [rsp+0x48+var_10], rax
0000000000009cd4         xor        eax, eax
0000000000009cd6         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000009cda         test       rsi, rsi
0000000000009cdd         mov        qword [rsp+0x48+var_18], rcx
0000000000009ce2         mov        dword [rsp+0x48+var_48], 0xa
0000000000009ce9         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x210250
0000000000009cf1         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000009cf6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x210260
0000000000009cfe         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000009d03         je         loc_9d37

0000000000009d05         test       rdx, rdx
0000000000009d08         je         loc_9d37

0000000000009d0a         mov        qword [rsp+0x48+var_20], rsi
0000000000009d0f         mov        qword [rsp+0x48+var_18], rdx
0000000000009d14         mov        rcx, rsp
0000000000009d17         mov        rdx, r8
0000000000009d1a         mov        rsi, r9
0000000000009d1d         call       quotearg_n_options                          ; quotearg_n_options
0000000000009d22         mov        rdi, qword [rsp+0x48+var_10]
0000000000009d27         xor        rdi, qword [fs:0x28]
0000000000009d30         jne        loc_9d3c

0000000000009d32         add        rsp, 0x48
0000000000009d36         ret
                        ; endp

                     loc_9d37:
0000000000009d37         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_9d3c:
0000000000009d3c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000009d41         align      16                                          ; End of unwind block (FDE at 0xe818)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000009d50         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xe834)
0000000000009d57         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009d5c         align      32                                          ; End of unwind block (FDE at 0xe834)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000009d60         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xe848)
0000000000009d63         mov        r8, 0xffffffffffffffff
0000000000009d6a         mov        rdx, rsi
0000000000009d6d         mov        rsi, rdi
0000000000009d70         xor        edi, edi
0000000000009d72         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009d77         align      128                                         ; End of unwind block (FDE at 0xe848)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000009d80         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xe85c)
0000000000009d83         mov        rcx, rdx
0000000000009d86         mov        rdx, rsi
0000000000009d89         mov        rsi, rdi
0000000000009d8c         xor        edi, edi
0000000000009d8e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009d93         align      32                                          ; End of unwind block (FDE at 0xe85c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000009da0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe870), quote_quoting_options
0000000000009da7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009dac         align      16                                          ; End of unwind block (FDE at 0xe870)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000009db0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe884), quote_quoting_options
0000000000009db7         mov        rdx, rsi
0000000000009dba         mov        rsi, rdi
0000000000009dbd         xor        edi, edi
0000000000009dbf         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009dc4         align      16                                          ; End of unwind block (FDE at 0xe884)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000009dd0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe898), quote_quoting_options, CODE XREF=argmatch_invalid+46
0000000000009dd7         mov        rdx, 0xffffffffffffffff
0000000000009dde         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009de3         align      16                                          ; End of unwind block (FDE at 0xe898)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000009df0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xe8ac), quote_quoting_options, CODE XREF=main+761, main+10184, argmatch_valid+90, argmatch_valid+169, xnumtoumax+109
0000000000009df7         mov        rsi, rdi
0000000000009dfa         mov        rdx, 0xffffffffffffffff
0000000000009e01         xor        edi, edi
0000000000009e03         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009e08         align      16                                          ; End of unwind block (FDE at 0xe8ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_read:
0000000000009e10         push       r13                                         ; Begin of unwind block (FDE at 0xe8c4), CODE XREF=main+2972, main+4068, main+8855, start_lines+71, dump_remainder+87, start_bytes+95, file_lines+144, file_lines+305
0000000000009e12         push       r12
0000000000009e14         mov        r13d, edi
0000000000009e17         push       rbp
0000000000009e18         push       rbx
0000000000009e19         mov        r12, rsi
0000000000009e1c         mov        rbx, rdx
0000000000009e1f         sub        rsp, 0x8
0000000000009e23         nop        dword [rax+rax]

                     loc_9e28:
0000000000009e28         mov        rdx, rbx                                    ; argument "__nbytes" for method j_read, CODE XREF=safe_read+56, safe_read+77
0000000000009e2b         mov        rsi, r12                                    ; argument "__buf" for method j_read
0000000000009e2e         mov        edi, r13d                                   ; argument "__fd" for method j_read
0000000000009e31         call       j_read                                      ; read
0000000000009e36         test       rax, rax
0000000000009e39         mov        rbp, rax
0000000000009e3c         jns        loc_9e60

0000000000009e3e         call       j___errno_location                          ; __errno_location
0000000000009e43         mov        eax, dword [rax]
0000000000009e45         cmp        eax, 0x4
0000000000009e48         je         loc_9e28

0000000000009e4a         cmp        rbx, 0x7ff00000
0000000000009e51         jbe        loc_9e60

0000000000009e53         cmp        eax, 0x16
0000000000009e56         jne        loc_9e60

0000000000009e58         mov        ebx, 0x7ff00000
0000000000009e5d         jmp        loc_9e28
0000000000009e5f         align      32

                     loc_9e60:
0000000000009e60         add        rsp, 0x8                                    ; CODE XREF=safe_read+44, safe_read+65, safe_read+70
0000000000009e64         mov        rax, rbp
0000000000009e67         pop        rbx
0000000000009e68         pop        rbp
0000000000009e69         pop        r12
0000000000009e6b         pop        r13
0000000000009e6d         ret
                        ; endp
0000000000009e6e         align      16                                          ; End of unwind block (FDE at 0xe8c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
0000000000009e70         push       r13                                         ; Begin of unwind block (FDE at 0xe8fc), CODE XREF=open_safer+42
0000000000009e72         push       r12
0000000000009e74         push       rbp
0000000000009e75         push       rbx
0000000000009e76         mov        ebx, edi
0000000000009e78         sub        rsp, 0x8
0000000000009e7c         cmp        edi, 0x2
0000000000009e7f         ja         loc_9ea2

0000000000009e81         call       dup_safer                                   ; dup_safer
0000000000009e86         mov        r12d, eax
0000000000009e89         call       j___errno_location                          ; __errno_location
0000000000009e8e         mov        r13d, dword [rax]
0000000000009e91         mov        rbp, rax
0000000000009e94         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000009e96         call       j_close                                     ; close
0000000000009e9b         mov        ebx, r12d
0000000000009e9e         mov        dword [rbp], r13d

                     loc_9ea2:
0000000000009ea2         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
0000000000009ea6         mov        eax, ebx
0000000000009ea8         pop        rbx
0000000000009ea9         pop        rbp
0000000000009eaa         pop        r12
0000000000009eac         pop        r13
0000000000009eae         ret
                        ; endp
0000000000009eaf         align      16                                          ; End of unwind block (FDE at 0xe8fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000009eb0         push       r15                                         ; Begin of unwind block (FDE at 0xe934), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000009eb2         push       r14
0000000000009eb4         push       r13
0000000000009eb6         push       r12
0000000000009eb8         mov        r12, r9
0000000000009ebb         push       rbp
0000000000009ebc         push       rbx
0000000000009ebd         mov        rbp, rdi
0000000000009ec0         mov        rbx, r8
0000000000009ec3         sub        rsp, 0x28
0000000000009ec7         test       rsi, rsi
0000000000009eca         je         loc_9fe8

0000000000009ed0         mov        r8, rdx
0000000000009ed3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000009eda         mov        r9, rcx
0000000000009edd         xor        eax, eax
0000000000009edf         mov        rcx, rsi
0000000000009ee2         mov        esi, 0x1
0000000000009ee7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_9eec:
0000000000009eec         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xcfbb, CODE XREF=version_etc_arn+337
0000000000009ef3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009ef5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009efa         call       j_dcgettext                                 ; dcgettext
0000000000009eff         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000009f06         mov        rcx, rax
0000000000009f09         mov        r8d, 0x7e3
0000000000009f0f         mov        esi, 0x1
0000000000009f14         mov        rdi, rbp
0000000000009f17         xor        eax, eax
0000000000009f19         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009f1e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000009f25         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009f27         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009f2c         call       j_dcgettext                                 ; dcgettext
0000000000009f31         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000009f34         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000009f37         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000009f3c         cmp        r12, 0x9
0000000000009f40         ja         loc_a280

0000000000009f46         lea        rdx, qword [switch_table_d2a4]              ; switch_table_d2a4
0000000000009f4d         movsxd     rax, dword [rdx+r12*4]
0000000000009f51         add        rax, rdx
0000000000009f54         jmp        rax                                         ; switch statement using table at 0xd2a4, with 10 cases, 0x9f60,0x9fd6,0xa010,0xa068,0xa0a8,0xa0f0,0xa140,0xa198,0xa1c8,0xa230
0000000000009f56         align      32

                     loc_9f60:
0000000000009f60         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000009f64         mov        rax, qword [rbx+0x10]
0000000000009f68         lea        rsi, qword [aWrittenBySSSns_d1b8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000009f6f         mov        r8, qword [rbx+8]
0000000000009f73         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009f78         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009f7a         mov        r13, qword [rbx+0x30]
0000000000009f7e         mov        r12, qword [rbx+0x28]
0000000000009f82         mov        qword [rsp+0x58+var_48], r9
0000000000009f87         mov        r15, qword [rbx+0x20]
0000000000009f8b         mov        r14, qword [rbx+0x18]
0000000000009f8f         mov        qword [rsp+0x58+var_58], rax
0000000000009f93         mov        qword [rsp+0x58+var_50], r8
0000000000009f98         mov        rbx, qword [rbx]
0000000000009f9b         call       j_dcgettext                                 ; dcgettext
0000000000009fa0         sub        rsp, 0x8                                    ; DATA XREF=fremote+1218

                     loc_9fa4:
0000000000009fa4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000009fa9         mov        rdx, rax
0000000000009fac         mov        rcx, rbx
0000000000009faf         mov        esi, 0x1
0000000000009fb4         mov        rdi, rbp
0000000000009fb7         xor        eax, eax
0000000000009fb9         push       r9
0000000000009fbb         push       r13
0000000000009fbd         push       r12
0000000000009fbf         push       r15
0000000000009fc1         push       r14
0000000000009fc3         mov        r9, qword [rsp+0x88+var_58]
0000000000009fc8         mov        r8, qword [rsp+0x88+var_50]
0000000000009fcd         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009fd2         add        rsp, 0x30

                     loc_9fd6:
0000000000009fd6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
0000000000009fda         pop        rbx
0000000000009fdb         pop        rbp
0000000000009fdc         pop        r12
0000000000009fde         pop        r13
0000000000009fe0         pop        r14
0000000000009fe2         pop        r15
0000000000009fe4         ret
                        ; endp
0000000000009fe5         align      8

                     loc_9fe8:
0000000000009fe8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
0000000000009feb         mov        rcx, rdx
0000000000009fee         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000009ff5         mov        esi, 0x1
0000000000009ffa         xor        eax, eax
0000000000009ffc         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a001         jmp        loc_9eec
000000000000a006         align      16

                     loc_a010:
000000000000a010         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
000000000000a014         mov        r9, qword [rbx+0x38]
000000000000a018         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000a01f         mov        rax, qword [rbx+0x10]
000000000000a023         mov        r8, qword [rbx+8]
000000000000a027         mov        edx, 0x5
000000000000a02c         mov        r13, qword [rbx+0x30]
000000000000a030         mov        r12, qword [rbx+0x28]
000000000000a034         mov        r15, qword [rbx+0x20]
000000000000a038         mov        r14, qword [rbx+0x18]
000000000000a03c         mov        rbx, qword [rbx]
000000000000a03f         mov        qword [rsp+0x58+var_40], r10
000000000000a044         mov        qword [rsp+0x58+var_48], r9
000000000000a049         mov        qword [rsp+0x58+var_58], rax
000000000000a04d         mov        qword [rsp+0x58+var_50], r8

                     loc_a052:
000000000000a052         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
000000000000a054         call       j_dcgettext                                 ; dcgettext
000000000000a059         mov        r10, qword [rsp+0x58+var_40]
000000000000a05e         push       r10
000000000000a060         jmp        loc_9fa4
000000000000a065         align      8

                     loc_a068:
000000000000a068         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000a06b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
000000000000a072         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a077         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a079         call       j_dcgettext                                 ; dcgettext
000000000000a07e         add        rsp, 0x28
000000000000a082         mov        rcx, rbx
000000000000a085         mov        rdi, rbp
000000000000a088         pop        rbx
000000000000a089         pop        rbp
000000000000a08a         pop        r12
000000000000a08c         pop        r13
000000000000a08e         pop        r14
000000000000a090         pop        r15
000000000000a092         mov        rdx, rax
000000000000a095         mov        esi, 0x1
000000000000a09a         xor        eax, eax
000000000000a09c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000a0a1         align      8

                     loc_a0a8:
000000000000a0a8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000a0ac         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
000000000000a0b3         mov        rbx, qword [rbx]
000000000000a0b6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a0bb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a0bd         call       j_dcgettext                                 ; dcgettext
000000000000a0c2         add        rsp, 0x28
000000000000a0c6         mov        r8, r12
000000000000a0c9         mov        rcx, rbx
000000000000a0cc         mov        rdi, rbp
000000000000a0cf         mov        rdx, rax
000000000000a0d2         mov        esi, 0x1
000000000000a0d7         pop        rbx
000000000000a0d8         pop        rbp
000000000000a0d9         pop        r12
000000000000a0db         pop        r13
000000000000a0dd         pop        r14
000000000000a0df         pop        r15
000000000000a0e1         xor        eax, eax
000000000000a0e3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000a0e8         align      16

                     loc_a0f0:
000000000000a0f0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
000000000000a0f4         mov        r12, qword [rbx+8]
000000000000a0f8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000a0ff         mov        rbx, qword [rbx]
000000000000a102         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a107         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a109         call       j_dcgettext                                 ; dcgettext
000000000000a10e         add        rsp, 0x28
000000000000a112         mov        r9, r13
000000000000a115         mov        r8, r12
000000000000a118         mov        rcx, rbx
000000000000a11b         mov        rdi, rbp
000000000000a11e         mov        rdx, rax
000000000000a121         pop        rbx
000000000000a122         pop        rbp
000000000000a123         pop        r12
000000000000a125         pop        r13
000000000000a127         pop        r14
000000000000a129         pop        r15
000000000000a12b         mov        esi, 0x1
000000000000a130         xor        eax, eax
000000000000a132         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000a137         align      64

                     loc_a140:
000000000000a140         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
000000000000a147         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a14c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a14e         mov        r14, qword [rbx+0x18]
000000000000a152         mov        r13, qword [rbx+0x10]
000000000000a156         mov        r12, qword [rbx+8]
000000000000a15a         mov        rbx, qword [rbx]
000000000000a15d         call       j_dcgettext                                 ; dcgettext
000000000000a162         sub        rsp, 0x8

                     loc_a166:
000000000000a166         push       r14                                         ; CODE XREF=version_etc_arn+784
000000000000a168         mov        rdx, rax
000000000000a16b         mov        r9, r13
000000000000a16e         mov        r8, r12
000000000000a171         mov        rcx, rbx
000000000000a174         mov        rdi, rbp
000000000000a177         mov        esi, 0x1
000000000000a17c         xor        eax, eax
000000000000a17e         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a183         pop        rax
000000000000a184         pop        rdx
000000000000a185         add        rsp, 0x28
000000000000a189         pop        rbx
000000000000a18a         pop        rbp
000000000000a18b         pop        r12
000000000000a18d         pop        r13
000000000000a18f         pop        r14
000000000000a191         pop        r15
000000000000a193         ret
                        ; endp
000000000000a194         align      8

                     loc_a198:
000000000000a198         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000a19c         lea        rsi, qword [aWrittenBySSSns_d138]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
000000000000a1a3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a1a8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a1aa         mov        r14, qword [rbx+0x18]
000000000000a1ae         mov        r13, qword [rbx+0x10]
000000000000a1b2         mov        r12, qword [rbx+8]
000000000000a1b6         mov        rbx, qword [rbx]
000000000000a1b9         call       j_dcgettext                                 ; dcgettext
000000000000a1be         push       r15
000000000000a1c0         jmp        loc_a166
000000000000a1c2         align      8

                     loc_a1c8:
000000000000a1c8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000a1cc         mov        r12, qword [rbx+0x28]
000000000000a1d0         lea        rsi, qword [aWrittenBySSSns_d160]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
000000000000a1d7         mov        r15, qword [rbx+0x20]
000000000000a1db         mov        r14, qword [rbx+0x18]
000000000000a1df         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a1e4         mov        r13, qword [rbx+0x10]
000000000000a1e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a1ea         mov        rbx, qword [rbx]
000000000000a1ed         mov        qword [rsp+0x58+var_58], r8
000000000000a1f1         call       j_dcgettext                                 ; dcgettext
000000000000a1f6         sub        rsp, 0x8
000000000000a1fa         mov        r9, r13
000000000000a1fd         push       r12
000000000000a1ff         push       r15
000000000000a201         push       r14

                     loc_a203:
000000000000a203         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
000000000000a208         mov        rcx, rbx
000000000000a20b         mov        rdx, rax
000000000000a20e         mov        rdi, rbp
000000000000a211         mov        esi, 0x1
000000000000a216         xor        eax, eax
000000000000a218         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a21d         add        rsp, 0x20
000000000000a221         add        rsp, 0x28
000000000000a225         pop        rbx
000000000000a226         pop        rbp
000000000000a227         pop        r12
000000000000a229         pop        r13
000000000000a22b         pop        r14
000000000000a22d         pop        r15
000000000000a22f         ret
                        ; endp

                     loc_a230:
000000000000a230         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
000000000000a234         mov        r13, qword [rbx+0x30]
000000000000a238         lea        rsi, qword [aWrittenBySSSns_d188]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000a23f         mov        r12, qword [rbx+0x28]
000000000000a243         mov        r15, qword [rbx+0x20]
000000000000a247         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a24c         mov        r14, qword [rbx+0x18]
000000000000a250         mov        r8, qword [rbx+8]
000000000000a254         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a256         mov        qword [rsp+0x58+var_50], r9
000000000000a25b         mov        rbx, qword [rbx]
000000000000a25e         mov        qword [rsp+0x58+var_58], r8
000000000000a262         call       j_dcgettext                                 ; dcgettext
000000000000a267         push       r13
000000000000a269         push       r12
000000000000a26b         push       r15
000000000000a26d         push       r14
000000000000a26f         mov        r9, qword [rsp+0x78+var_50]
000000000000a274         jmp        loc_a203
000000000000a276         align      128

                     loc_a280:
000000000000a280         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
000000000000a284         mov        r9, qword [rbx+0x38]
000000000000a288         mov        edx, 0x5
000000000000a28d         mov        rax, qword [rbx+0x10]
000000000000a291         mov        r8, qword [rbx+8]
000000000000a295         lea        rsi, qword [aWrittenBySSSns_d220]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000a29c         mov        r13, qword [rbx+0x30]
000000000000a2a0         mov        r12, qword [rbx+0x28]
000000000000a2a4         mov        r15, qword [rbx+0x20]
000000000000a2a8         mov        r14, qword [rbx+0x18]
000000000000a2ac         mov        qword [rsp+0x58+var_40], r10
000000000000a2b1         mov        qword [rsp+0x58+var_48], r9
000000000000a2b6         mov        qword [rsp+0x58+var_58], rax
000000000000a2ba         mov        qword [rsp+0x58+var_50], r8
000000000000a2bf         mov        rbx, qword [rbx]
000000000000a2c2         jmp        loc_a052
000000000000a2c7         align      16                                          ; End of unwind block (FDE at 0xe934)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
000000000000a2d0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xea48)
000000000000a2d3         cmp        qword [r8], 0x0
000000000000a2d7         je         j_version_etc_arn                           ; version_etc_arn

000000000000a2d9         nop        dword [rax]

                     loc_a2e0:
000000000000a2e0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
000000000000a2e4         cmp        qword [r8+r9*8], 0x0
000000000000a2e9         jne        loc_a2e0

                     j_version_etc_arn:        // version_etc_arn
000000000000a2eb         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
000000000000a2f0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xea48), Begin of unwind block (FDE at 0xea5c)
000000000000a2f4         mov        r10, r8
000000000000a2f7         xor        r9d, r9d
000000000000a2fa         mov        rax, qword [fs:0x28]
000000000000a303         mov        qword [rsp+0x68+var_10], rax
000000000000a308         xor        eax, eax
000000000000a30a         mov        r8, rsp
000000000000a30d         nop        dword [rax]

                     loc_a310:
000000000000a310         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
000000000000a313         cmp        eax, 0x2f
000000000000a316         ja         loc_a35a

000000000000a318         mov        r11d, eax
000000000000a31b         add        r11, qword [r10+0x10]
000000000000a31f         add        eax, 0x8
000000000000a322         mov        dword [r10], eax

                     loc_a325:
000000000000a325         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
000000000000a328         test       rax, rax
000000000000a32b         mov        qword [r8+r9*8], rax
000000000000a32f         je         loc_a33b

000000000000a331         add        r9, 0x1
000000000000a335         cmp        r9, 0xa
000000000000a339         jne        loc_a310

                     loc_a33b:
000000000000a33b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
000000000000a340         mov        rax, qword [rsp+0x68+var_10]
000000000000a345         xor        rax, qword [fs:0x28]
000000000000a34e         jne        loc_a355

000000000000a350         add        rsp, 0x68
000000000000a354         ret
                        ; endp

                     loc_a355:
000000000000a355         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_a35a:
000000000000a35a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000a35e         lea        rax, qword [r11+8]
000000000000a362         mov        qword [r10+8], rax
000000000000a366         jmp        loc_a325
000000000000a368         align      16                                          ; End of unwind block (FDE at 0xea5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
000000000000a370         push       rbp                                         ; Begin of unwind block (FDE at 0xea78), CODE XREF=main+561
000000000000a371         push       rbx
000000000000a372         mov        r10d, 0x20
000000000000a378         xor        r11d, r11d
000000000000a37b         sub        rsp, 0xb8
000000000000a382         mov        rax, qword [fs:0x28]
000000000000a38b         mov        qword [rsp+0xc8+var_50], rax
000000000000a390         xor        eax, eax
000000000000a392         lea        rax, qword [rsp+0xc8+arg_0]
000000000000a39a         mov        qword [rsp+0xc8+var_28], r8
000000000000a3a2         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000a3aa         lea        r8, qword [rsp+0xc8+var_A8]
000000000000a3af         mov        qword [rsp+0xc8+var_20], r9
000000000000a3b7         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000a3bf         mov        qword [rsp+0xc8+var_B8], rax
000000000000a3c4         lea        rax, qword [rsp+0xc8+var_48]
000000000000a3cc         xor        r9d, r9d
000000000000a3cf         mov        qword [rsp+0xc8+var_B0], rax
000000000000a3d4         mov        rbp, rax
000000000000a3d7         nop        word [rax+rax]

                     loc_a3e0:
000000000000a3e0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
000000000000a3e4         ja         loc_a43c

000000000000a3e6         mov        eax, r10d
000000000000a3e9         mov        r11d, 0x1
000000000000a3ef         add        r10d, 0x8
000000000000a3f3         add        rax, rbp

                     loc_a3f6:
000000000000a3f6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
000000000000a3f9         test       rax, rax
000000000000a3fc         mov        qword [r8+r9*8], rax
000000000000a400         je         loc_a40c

000000000000a402         add        r9, 0x1
000000000000a406         cmp        r9, 0xa
000000000000a40a         jne        loc_a3e0

                     loc_a40c:
000000000000a40c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
000000000000a40f         jne        loc_a435

                     loc_a411:
000000000000a411         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
000000000000a416         mov        rax, qword [rsp+0xc8+var_50]
000000000000a41b         xor        rax, qword [fs:0x28]
000000000000a424         jne        loc_a430

000000000000a426         add        rsp, 0xb8
000000000000a42d         pop        rbx
000000000000a42e         pop        rbp
000000000000a42f         ret
                        ; endp

                     loc_a430:
000000000000a430         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_a435:
000000000000a435         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000a43a         jmp        loc_a411

                     loc_a43c:
000000000000a43c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000a43f         add        rbx, 0x8
000000000000a443         jmp        loc_a3f6
000000000000a445         align      16                                          ; End of unwind block (FDE at 0xea78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
000000000000a450         push       rbx                                         ; Begin of unwind block (FDE at 0xeaa4)
000000000000a451         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
000000000000a458         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a45d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a45f         call       j_dcgettext                                 ; dcgettext
000000000000a464         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000a46b         mov        rsi, rax
000000000000a46e         mov        edi, 0x1
000000000000a473         xor        eax, eax
000000000000a475         call       j___printf_chk                              ; __printf_chk
000000000000a47a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
000000000000a481         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a486         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a488         call       j_dcgettext                                 ; dcgettext
000000000000a48d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000a494         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xb7a7
000000000000a49b         mov        rsi, rax
000000000000a49e         mov        edi, 0x1
000000000000a4a3         xor        eax, eax
000000000000a4a5         call       j___printf_chk                              ; __printf_chk
000000000000a4aa         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000a4b1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
000000000000a4b8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a4ba         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a4bf         call       j_dcgettext                                 ; dcgettext
000000000000a4c4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000a4c7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000a4ca         pop        rbx
000000000000a4cb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
000000000000a4d0         push       rbx                                         ; End of unwind block (FDE at 0xeaa4), Begin of unwind block (FDE at 0xeac4), CODE XREF=main+1879, main+2882, main+2928, main+3303, main+3957, main+3995, main+5057, main+8522, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25
000000000000a4d1         mov        rbx, rdi
000000000000a4d4         call       j_malloc                                    ; malloc
000000000000a4d9         test       rax, rax
000000000000a4dc         jne        loc_a4e3

000000000000a4de         test       rbx, rbx
000000000000a4e1         jne        loc_a4e5

                     loc_a4e3:
000000000000a4e3         pop        rbx                                         ; CODE XREF=xmalloc+12
000000000000a4e4         ret
                        ; endp

                     loc_a4e5:
000000000000a4e5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a4ea:
000000000000a4ea         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xeac4)
                     xnmalloc:
000000000000a4f0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xeae0)
000000000000a4f3         mul        rsi
000000000000a4f6         mov        rdi, rax
000000000000a4f9         seto       al
000000000000a4fc         test       rdi, rdi
000000000000a4ff         js         loc_a50b

000000000000a501         movzx      eax, al
000000000000a504         test       rax, rax
000000000000a507         jne        loc_a50b

000000000000a509         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_a50b:
000000000000a50b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000a50f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a514:
000000000000a514         nop                                                    ; End of unwind block (FDE at 0xeae0)
000000000000a516         nop        word [cs:rax+rax]
                     xcharalloc:
000000000000a520         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xeaf4)
                        ; endp
000000000000a522         align      16                                          ; End of unwind block (FDE at 0xeaf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
000000000000a530         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xeb08), CODE XREF=main+8917, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
000000000000a533         push       rbx
000000000000a534         mov        rbx, rsi
000000000000a537         jne        loc_a53e

000000000000a539         test       rdi, rdi
000000000000a53c         jne        loc_a558

                     loc_a53e:
000000000000a53e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
000000000000a541         call       j_realloc                                   ; realloc
000000000000a546         test       rax, rax
000000000000a549         jne        loc_a550

000000000000a54b         test       rbx, rbx
000000000000a54e         jne        loc_a561

                     loc_a550:
000000000000a550         pop        rbx                                         ; CODE XREF=xrealloc+25
000000000000a551         ret
                        ; endp
000000000000a552         align      8

                     loc_a558:
000000000000a558         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000a55d         xor        eax, eax
000000000000a55f         pop        rbx
000000000000a560         ret
                        ; endp

                     loc_a561:
000000000000a561         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a566:
000000000000a566         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xeb08)
                     xnrealloc:
000000000000a570         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xeb2c)
000000000000a573         mul        rdx
000000000000a576         mov        rsi, rax
000000000000a579         seto       al
000000000000a57c         test       rsi, rsi
000000000000a57f         js         loc_a58b

000000000000a581         movzx      eax, al
000000000000a584         test       rax, rax
000000000000a587         jne        loc_a58b

000000000000a589         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_a58b:
000000000000a58b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000a58f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a594:
000000000000a594         nop                                                    ; End of unwind block (FDE at 0xeb2c)
000000000000a596         nop        word [cs:rax+rax]
                     x2nrealloc:
000000000000a5a0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xeb40)
000000000000a5a3         mov        r9, rdx
000000000000a5a6         mov        rcx, qword [rsi]
000000000000a5a9         je         loc_a5e0

000000000000a5ab         xor        edx, edx
000000000000a5ad         movabs     rax, 0x5555555555555554
000000000000a5b7         div        r9
000000000000a5ba         cmp        rax, rcx
000000000000a5bd         jbe        loc_a5fb

000000000000a5bf         mov        rax, rcx
000000000000a5c2         shr        rax, 0x1
000000000000a5c5         lea        rcx, qword [rax+rcx+1]

                     loc_a5ca:
000000000000a5ca         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000a5cd         imul       rcx, r9
000000000000a5d1         mov        rsi, rcx
000000000000a5d4         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000a5d9         align      32

                     loc_a5e0:
000000000000a5e0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
000000000000a5e3         je         loc_a608

                     loc_a5e5:
000000000000a5e5         mov        rax, rcx                                    ; CODE XREF=sub_a604+28
000000000000a5e8         mul        r9
000000000000a5eb         seto       dl
000000000000a5ee         test       rax, rax
000000000000a5f1         movzx      edx, dl
000000000000a5f4         js         loc_a5fb

000000000000a5f6         test       rdx, rdx
000000000000a5f9         je         loc_a5ca

                     loc_a5fb:
000000000000a5fb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
000000000000a5ff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a604:
000000000000a604         nop        dword [rax]
                        ; endp

                     loc_a608:
000000000000a608         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
000000000000a60a         mov        eax, 0x80
000000000000a60f         xor        r8d, r8d
000000000000a612         div        r9
000000000000a615         test       rax, rax
000000000000a618         sete       r8b
000000000000a61c         lea        rcx, qword [r8+rax]
000000000000a620         jmp        loc_a5e5
000000000000a622         align      16                                          ; End of unwind block (FDE at 0xeb40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
000000000000a630         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xeb58)
000000000000a633         mov        rax, qword [rsi]
000000000000a636         je         loc_a660

000000000000a638         movabs     rdx, 0x5555555555555553
000000000000a642         cmp        rax, rdx
000000000000a645         ja         loc_a671

000000000000a647         mov        rdx, rax
000000000000a64a         shr        rdx, 0x1
000000000000a64d         lea        rax, qword [rdx+rax+1]

                     loc_a652:
000000000000a652         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
000000000000a655         mov        rsi, rax
000000000000a658         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000a65d         align      32

                     loc_a660:
000000000000a660         test       rax, rax                                    ; CODE XREF=x2realloc+6
000000000000a663         mov        edx, 0x80
000000000000a668         cmove      rax, rdx
000000000000a66c         test       rax, rax
000000000000a66f         jns        loc_a652

                     loc_a671:
000000000000a671         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
000000000000a675         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a67a:
000000000000a67a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xeb58)
                     xzalloc:
000000000000a680         push       rbx                                         ; Begin of unwind block (FDE at 0xeb70)
000000000000a681         mov        rbx, rdi
000000000000a684         call       xmalloc                                     ; xmalloc
000000000000a689         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000a68c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000a68e         mov        rdi, rax                                    ; argument "__s" for method j_memset
000000000000a691         pop        rbx
000000000000a692         jmp        j_memset                                    ; memset
                        ; endp
000000000000a697         align      32                                          ; End of unwind block (FDE at 0xeb70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
000000000000a6a0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xeb8c)
000000000000a6a3         sub        rsp, 0x8
000000000000a6a7         mul        rsi
000000000000a6aa         seto       dl
000000000000a6ad         test       rax, rax
000000000000a6b0         js         loc_a6c9

000000000000a6b2         movzx      edx, dl
000000000000a6b5         test       rdx, rdx
000000000000a6b8         jne        loc_a6c9

000000000000a6ba         call       j_calloc                                    ; calloc
000000000000a6bf         test       rax, rax
000000000000a6c2         je         loc_a6c9

000000000000a6c4         add        rsp, 0x8
000000000000a6c8         ret
                        ; endp

                     loc_a6c9:
000000000000a6c9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_a6ce:
000000000000a6ce         nop                                                    ; End of unwind block (FDE at 0xeb8c)
                        ; endp

                     xmemdup:
000000000000a6d0         push       rbp                                         ; Begin of unwind block (FDE at 0xeba8), CODE XREF=clone_quoting_options+40, xstrdup+17
000000000000a6d1         push       rbx
000000000000a6d2         mov        rbp, rdi
000000000000a6d5         mov        rdi, rsi
000000000000a6d8         mov        rbx, rsi
000000000000a6db         sub        rsp, 0x8
000000000000a6df         call       xmalloc                                     ; xmalloc
000000000000a6e4         add        rsp, 0x8
000000000000a6e8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000a6eb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000a6ee         pop        rbx
000000000000a6ef         pop        rbp
000000000000a6f0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000a6f3         jmp        j_memcpy                                    ; memcpy
                        ; endp
000000000000a6f8         align      256                                         ; End of unwind block (FDE at 0xeba8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
000000000000a700         push       rbx                                         ; Begin of unwind block (FDE at 0xebd0)
000000000000a701         mov        rbx, rdi
000000000000a704         call       j_strlen                                    ; strlen
000000000000a709         mov        rdi, rbx
000000000000a70c         lea        rsi, qword [rax+1]
000000000000a710         pop        rbx
000000000000a711         jmp        xmemdup                                     ; xmemdup
000000000000a713         align      32                                          ; End of unwind block (FDE at 0xebd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
000000000000a720         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xebec), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+9643, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
000000000000a727         sub        rsp, 0x8
000000000000a72b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a730         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a732         call       j_dcgettext                                 ; dcgettext
000000000000a737         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000a73d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xc9cc
000000000000a744         mov        rcx, rax
000000000000a747         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000a749         xor        eax, eax
000000000000a74b         call       j_error                                     ; error
000000000000a750         call       j_abort                                     ; abort
                        ; endp
000000000000a755         align      32                                          ; End of unwind block (FDE at 0xebec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     xnumtoumax:
000000000000a760         push       r15                                         ; Begin of unwind block (FDE at 0xec04), CODE XREF=xdectoumax+23
000000000000a762         push       r14
000000000000a764         mov        r15, rcx
000000000000a767         push       r13
000000000000a769         push       r12
000000000000a76b         mov        r14, rdx
000000000000a76e         push       rbp
000000000000a76f         push       rbx
000000000000a770         mov        edx, esi
000000000000a772         xor        esi, esi
000000000000a774         mov        r12, rdi
000000000000a777         mov        r13, r9
000000000000a77a         sub        rsp, 0x18
000000000000a77e         mov        rcx, rsp
000000000000a781         mov        ebx, dword [rsp+0x48+arg_0]
000000000000a785         mov        rax, qword [fs:0x28]
000000000000a78e         mov        qword [rsp+0x48+var_40], rax
000000000000a793         xor        eax, eax
000000000000a795         call       xstrtoumax                                  ; xstrtoumax
000000000000a79a         test       eax, eax
000000000000a79c         jne        loc_a830

000000000000a7a2         mov        rbp, qword [rsp+0x48+var_48]
000000000000a7a6         cmp        rbp, r14
000000000000a7a9         jb         loc_a7b0

000000000000a7ab         cmp        rbp, r15
000000000000a7ae         jbe        loc_a804

                     loc_a7b0:
000000000000a7b0         call       j___errno_location                          ; __errno_location, CODE XREF=xnumtoumax+73
000000000000a7b5         cmp        rbp, 0x40000000
000000000000a7bc         mov        r14, rax
000000000000a7bf         sbb        eax, eax
000000000000a7c1         and        eax, 0xffffffd7
000000000000a7c4         add        eax, 0x4b
000000000000a7c7         mov        dword [r14], eax

                     loc_a7ca:
000000000000a7ca         mov        rdi, r12                                    ; CODE XREF=xnumtoumax+226, xnumtoumax+234, xnumtoumax+246
000000000000a7cd         call       quote                                       ; quote
000000000000a7d2         mov        esi, dword [r14]
000000000000a7d5         mov        r8, rax
000000000000a7d8         mov        eax, 0x0
000000000000a7dd         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
000000000000a7e4         mov        rcx, r13
000000000000a7e7         cmp        esi, 0x16
000000000000a7ea         cmove      esi, eax                                    ; argument "__errnum" for method j_error
000000000000a7ed         test       ebx, ebx
000000000000a7ef         mov        eax, 0x1
000000000000a7f4         cmove      ebx, eax
000000000000a7f7         xor        eax, eax
000000000000a7f9         mov        edi, ebx                                    ; argument "__status" for method j_error
000000000000a7fb         call       j_error                                     ; error
000000000000a800         mov        rbp, qword [rsp+0x48+var_48]

                     loc_a804:
000000000000a804         mov        rdx, qword [rsp+0x48+var_40]                ; CODE XREF=xnumtoumax+78
000000000000a809         xor        rdx, qword [fs:0x28]
000000000000a812         mov        rax, rbp
000000000000a815         jne        loc_a85b

000000000000a817         add        rsp, 0x18
000000000000a81b         pop        rbx
000000000000a81c         pop        rbp
000000000000a81d         pop        r12
000000000000a81f         pop        r13
000000000000a821         pop        r14
000000000000a823         pop        r15
000000000000a825         ret
                        ; endp
000000000000a826         align      16

                     loc_a830:
000000000000a830         mov        ebp, eax                                    ; CODE XREF=xnumtoumax+60
000000000000a832         call       j___errno_location                          ; __errno_location
000000000000a837         cmp        ebp, 0x1
000000000000a83a         mov        r14, rax
000000000000a83d         je         loc_a850

000000000000a83f         cmp        ebp, 0x3
000000000000a842         jne        loc_a7ca

000000000000a844         mov        dword [rax], 0x0
000000000000a84a         jmp        loc_a7ca
000000000000a84f         align      16

                     loc_a850:
000000000000a850         mov        dword [rax], 0x4b                           ; CODE XREF=xnumtoumax+221
000000000000a856         jmp        loc_a7ca

                     loc_a85b:
000000000000a85b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnumtoumax+181
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xdectoumax:
000000000000a860         sub        rsp, 0x10                                   ; End of unwind block (FDE at 0xec04), Begin of unwind block (FDE at 0xec50), CODE XREF=main+648, main+941, main+1094
000000000000a864         push       r9
000000000000a866         mov        r9, r8
000000000000a869         mov        r8, rcx
000000000000a86c         mov        rcx, rdx
000000000000a86f         mov        rdx, rsi
000000000000a872         mov        esi, 0xa
000000000000a877         call       xnumtoumax                                  ; xnumtoumax
000000000000a87c         add        rsp, 0x18
000000000000a880         ret
                        ; endp
000000000000a881         align      16                                          ; End of unwind block (FDE at 0xec50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     xnanosleep:
000000000000a890         push       rbp                                         ; Begin of unwind block (FDE at 0xec6c), CODE XREF=main+6202
000000000000a891         push       rbx
000000000000a892         sub        rsp, 0x28
000000000000a896         mov        rax, qword [fs:0x28]
000000000000a89f         mov        qword [rsp+0x38+var_20], rax
000000000000a8a4         xor        eax, eax
000000000000a8a6         mov        rbp, rsp
000000000000a8a9         call       dtotimespec                                 ; dtotimespec
000000000000a8ae         mov        qword [rsp+0x38+var_38], rax
000000000000a8b2         mov        qword [rsp+0x38+var_30], rdx
000000000000a8b7         call       j___errno_location                          ; __errno_location
000000000000a8bc         mov        rbx, rax
000000000000a8bf         jmp        loc_a8d0
000000000000a8c1         align      8

                     loc_a8c8:
000000000000a8c8         test       dword [rbx], 0xfffffffb                     ; CODE XREF=xnanosleep+82
000000000000a8ce         jne        loc_a900

                     loc_a8d0:
000000000000a8d0         xor        esi, esi                                    ; CODE XREF=xnanosleep+47
000000000000a8d2         mov        dword [rbx], 0x0
000000000000a8d8         mov        rdi, rbp
000000000000a8db         call       rpl_nanosleep                               ; rpl_nanosleep
000000000000a8e0         test       eax, eax
000000000000a8e2         jne        loc_a8c8

                     loc_a8e4:
000000000000a8e4         mov        rdx, qword [rsp+0x38+var_20]                ; CODE XREF=xnanosleep+117
000000000000a8e9         xor        rdx, qword [fs:0x28]
000000000000a8f2         jne        loc_a907

000000000000a8f4         add        rsp, 0x28
000000000000a8f8         pop        rbx
000000000000a8f9         pop        rbp
000000000000a8fa         ret
                        ; endp
000000000000a8fb         align      256

                     loc_a900:
000000000000a900         mov        eax, 0xffffffff                             ; CODE XREF=xnanosleep+62
000000000000a905         jmp        loc_a8e4

                     loc_a907:
000000000000a907         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnanosleep+98
                        ; endp
000000000000a90c         align      16                                          ; End of unwind block (FDE at 0xec6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     xstrtod:
000000000000a910         push       r14                                         ; Begin of unwind block (FDE at 0xec9c), CODE XREF=main+716
000000000000a912         push       r13
000000000000a914         mov        r14, rcx
000000000000a917         push       r12
000000000000a919         push       rbp
000000000000a91a         mov        rbp, rdi
000000000000a91d         push       rbx
000000000000a91e         mov        r13, rdx
000000000000a921         mov        rbx, rsi
000000000000a924         sub        rsp, 0x10
000000000000a928         mov        rax, qword [fs:0x28]
000000000000a931         mov        qword [rsp+0x38+var_30], rax
000000000000a936         xor        eax, eax
000000000000a938         call       j___errno_location                          ; __errno_location
000000000000a93d         mov        rsi, rsp
000000000000a940         mov        r12, rax
000000000000a943         mov        dword [rax], 0x0
000000000000a949         mov        rdi, rbp
000000000000a94c         call       r14
000000000000a94f         mov        rcx, qword [rsp+0x38+var_38]
000000000000a953         cmp        rcx, rbp
000000000000a956         je         loc_a9c8

000000000000a958         test       rbx, rbx
000000000000a95b         je         loc_a9a8

000000000000a95d         ucomisd    xmm0, qword [double_d320]                   ; double_d320
000000000000a965         jp         loc_a96e

000000000000a967         mov        eax, 0x1
000000000000a96c         je         loc_a97b

                     loc_a96e:
000000000000a96e         cmp        dword [r12], 0x22                           ; CODE XREF=xstrtod+85, xstrtod+167, xstrtod+169
000000000000a973         setne      al

                     loc_a976:
000000000000a976         test       rbx, rbx                                    ; CODE XREF=xstrtod+186
000000000000a979         je         loc_a97e

                     loc_a97b:
000000000000a97b         mov        qword [rbx], rcx                            ; CODE XREF=xstrtod+92

                     loc_a97e:
000000000000a97e         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=xstrtod+105, xstrtod+157, xstrtod+176
000000000000a983         xor        rdx, qword [fs:0x28]
000000000000a98c         movsd      qword [r13], xmm0
000000000000a992         jne        loc_a9cc

000000000000a994         add        rsp, 0x10
000000000000a998         pop        rbx
000000000000a999         pop        rbp
000000000000a99a         pop        r12
000000000000a99c         pop        r13
000000000000a99e         pop        r14
000000000000a9a0         ret
                        ; endp
000000000000a9a1         align      8

                     loc_a9a8:
000000000000a9a8         xor        eax, eax                                    ; CODE XREF=xstrtod+75
000000000000a9aa         cmp        byte [rcx], 0x0
000000000000a9ad         jne        loc_a97e

000000000000a9af         ucomisd    xmm0, qword [double_d320]                   ; double_d320
000000000000a9b7         jp         loc_a96e

000000000000a9b9         jne        loc_a96e

000000000000a9bb         mov        eax, 0x1
000000000000a9c0         jmp        loc_a97e
000000000000a9c2         align      8

                     loc_a9c8:
000000000000a9c8         xor        eax, eax                                    ; CODE XREF=xstrtod+70
000000000000a9ca         jmp        loc_a976

                     loc_a9cc:
000000000000a9cc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtod+130
                        ; endp
000000000000a9d1         align      32                                          ; End of unwind block (FDE at 0xec9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
000000000000a9e0         push       r15                                         ; Begin of unwind block (FDE at 0xece4), CODE XREF=main+1348, xnumtoumax+53
000000000000a9e2         push       r14
000000000000a9e4         push       r13
000000000000a9e6         push       r12
000000000000a9e8         push       rbp
000000000000a9e9         push       rbx
000000000000a9ea         sub        rsp, 0x28
000000000000a9ee         mov        rax, qword [fs:0x28]
000000000000a9f7         mov        qword [rsp+0x58+var_40], rax
000000000000a9fc         xor        eax, eax
000000000000a9fe         cmp        edx, 0x24
000000000000aa01         ja         loc_ad65

000000000000aa07         lea        rax, qword [rsp+0x58+var_48]
000000000000aa0c         mov        r15, rsi
000000000000aa0f         test       rsi, rsi
000000000000aa12         mov        rbp, rdi
000000000000aa15         mov        dword [rsp+0x58+var_50], edx
000000000000aa19         mov        r14, rcx
000000000000aa1c         mov        r13, r8
000000000000aa1f         cmove      r15, rax
000000000000aa23         call       j___errno_location                          ; __errno_location
000000000000aa28         mov        dword [rax], 0x0
000000000000aa2e         mov        r12, rax
000000000000aa31         movzx      ebx, byte [rbp]
000000000000aa35         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000aa3a         mov        edx, dword [rsp+0x58+var_50]
000000000000aa3e         mov        rsi, qword [rax]
000000000000aa41         mov        rax, rbp
000000000000aa44         jmp        loc_aa57
000000000000aa46         align      16

                     loc_aa50:
000000000000aa50         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
000000000000aa54         movzx      ebx, byte [rax]

                     loc_aa57:
000000000000aa57         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
000000000000aa5a         test       byte [rsi+rcx*2+1], 0x20
000000000000aa5f         jne        loc_aa50

000000000000aa61         cmp        bl, 0x2d
000000000000aa64         je         loc_aab8

000000000000aa66         xor        ecx, ecx
000000000000aa68         mov        rsi, r15
000000000000aa6b         mov        rdi, rbp
000000000000aa6e         call       j___strtoul_internal                        ; __strtoul_internal
000000000000aa73         mov        rcx, qword [r15]
000000000000aa76         mov        rbx, rax
000000000000aa79         cmp        rcx, rbp
000000000000aa7c         je         loc_aaa8

000000000000aa7e         mov        eax, dword [r12]
000000000000aa82         test       eax, eax
000000000000aa84         je         loc_aae8

000000000000aa86         cmp        eax, 0x22
000000000000aa89         mov        ebp, 0x1
000000000000aa8e         jne        loc_aab8

                     loc_aa90:
000000000000aa90         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
000000000000aa93         je         loc_aa9e

000000000000aa95         movzx      r12d, byte [rcx]
000000000000aa99         test       r12b, r12b
000000000000aa9c         jne        loc_ab17

                     loc_aa9e:
000000000000aa9e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
000000000000aaa1         jmp        loc_aabd
000000000000aaa3         align      8

                     loc_aaa8:
000000000000aaa8         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000aaab         mov        qword [rsp+0x58+var_50], rcx
000000000000aab0         jne        loc_aaf0

000000000000aab2         nop        word [rax+rax]

                     loc_aab8:
000000000000aab8         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_aabd:
000000000000aabd         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
000000000000aac2         xor        rdi, qword [fs:0x28]
000000000000aacb         mov        eax, ebp
000000000000aacd         jne        loc_ad60

000000000000aad3         add        rsp, 0x28
000000000000aad7         pop        rbx
000000000000aad8         pop        rbp
000000000000aad9         pop        r12
000000000000aadb         pop        r13
000000000000aadd         pop        r14
000000000000aadf         pop        r15
000000000000aae1         ret
                        ; endp
000000000000aae2         align      8

                     loc_aae8:
000000000000aae8         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000aaea         jmp        loc_aa90
000000000000aaec         align      16

                     loc_aaf0:
000000000000aaf0         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
000000000000aaf5         test       r12b, r12b
000000000000aaf8         je         loc_aab8

000000000000aafa         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000aafe         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000ab01         xor        ebp, ebp
000000000000ab03         call       j_strchr                                    ; strchr
000000000000ab08         test       rax, rax
000000000000ab0b         mov        ebx, 0x1
000000000000ab10         mov        rcx, qword [rsp+0x58+var_50]
000000000000ab15         je         loc_aab8

                     loc_ab17:
000000000000ab17         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000ab1b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000ab1e         mov        qword [rsp+0x58+var_50], rcx
000000000000ab23         call       j_strchr                                    ; strchr
000000000000ab28         test       rax, rax
000000000000ab2b         mov        rcx, qword [rsp+0x58+var_50]
000000000000ab30         je         loc_abfc

000000000000ab36         lea        eax, dword [r12-0x45]
000000000000ab3b         cmp        al, 0x2f
000000000000ab3d         ja         loc_ab90

000000000000ab3f         movabs     rdx, 0x814400308945
000000000000ab49         bt         rdx, rax
000000000000ab4d         jae        loc_ab90

000000000000ab4f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000ab54         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000ab57         mov        qword [rsp+0x58+var_50], rcx
000000000000ab5c         call       j_strchr                                    ; strchr
000000000000ab61         test       rax, rax
000000000000ab64         mov        rcx, qword [rsp+0x58+var_50]
000000000000ab69         je         loc_ab90

000000000000ab6b         movzx      eax, byte [rcx+1]
000000000000ab6f         cmp        al, 0x44
000000000000ab71         je         loc_ab7f

000000000000ab73         cmp        al, 0x69
000000000000ab75         je         loc_ad48

000000000000ab7b         cmp        al, 0x42
000000000000ab7d         jne        loc_ab90

                     loc_ab7f:
000000000000ab7f         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
000000000000ab84         mov        esi, 0x3e8
000000000000ab89         jmp        loc_ab9a
000000000000ab8b         align      16

                     loc_ab90:
000000000000ab90         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
000000000000ab95         mov        esi, 0x400

                     loc_ab9a:
000000000000ab9a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000ab9e         cmp        r12b, 0x35
000000000000aba2         ja         loc_abfc

000000000000aba4         lea        rdx, qword [switch_table_d370]              ; switch_table_d370
000000000000abab         movzx      r12d, r12b
000000000000abaf         movsxd     rax, dword [rdx+r12*4]
000000000000abb3         add        rax, rdx
000000000000abb6         jmp        rax                                         ; switch statement using table at 0xd370, with 54 cases, 0xabb8,0xabe0,0xabfc,0xac07,0xac1d,0xac34,0xac5a,0xac7f,0xac9f,0xacc0,0xace3,0xad06,0xad1c

                     loc_abb8:
000000000000abb8         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000abbb         mul        rsi
000000000000abbe         jo         loc_adb1

000000000000abc4         xor        r8d, r8d

                     loc_abc7:
000000000000abc7         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000abca         jo         loc_ada2

000000000000abd0         mov        rbx, rax

                     loc_abd3:
000000000000abd3         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
000000000000abd6         nop        word [cs:rax+rax]

                     loc_abe0:
000000000000abe0         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
000000000000abe3         mov        eax, ebp
000000000000abe5         add        rcx, rdi
000000000000abe8         or         eax, 0x2
000000000000abeb         mov        qword [r15], rcx
000000000000abee         cmp        byte [rcx], 0x0
000000000000abf1         mov        qword [r14], rbx
000000000000abf4         cmovne     ebp, eax
000000000000abf7         jmp        loc_aabd

                     loc_abfc:
000000000000abfc         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000abff         or         ebp, 0x2
000000000000ac02         jmp        loc_aabd

                     loc_ac07:
000000000000ac07         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000ac0c         mov        rax, rdx
000000000000ac0f         mul        rbx
000000000000ac12         jo         loc_acae

000000000000ac18         add        rbx, rbx
000000000000ac1b         jmp        loc_abe0

                     loc_ac1d:
000000000000ac1d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
000000000000ac22         mov        rax, rdx
000000000000ac25         mul        rbx
000000000000ac28         jo         loc_acae

000000000000ac2e         shl        rbx, 0x9
000000000000ac32         jmp        loc_abe0

                     loc_ac34:
000000000000ac34         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
000000000000ac3a         xor        r9d, r9d
000000000000ac3d         nop        dword [rax]

                     loc_ac40:
000000000000ac40         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
000000000000ac43         mul        rsi
000000000000ac46         mov        rbx, rax
000000000000ac49         jo         loc_adde

                     loc_ac4f:
000000000000ac4f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
000000000000ac53         jne        loc_ac40

                     loc_ac55:
000000000000ac55         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
000000000000ac58         jmp        loc_abe0

                     loc_ac5a:
000000000000ac5a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
000000000000ac60         xor        r9d, r9d
000000000000ac63         nop        dword [rax+rax]

                     loc_ac68:
000000000000ac68         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
000000000000ac6b         mul        rsi
000000000000ac6e         mov        rbx, rax
000000000000ac71         jo         loc_adc0

                     loc_ac77:
000000000000ac77         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
000000000000ac7b         jne        loc_ac68

000000000000ac7d         jmp        loc_ac55

                     loc_ac7f:
000000000000ac7f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
000000000000ac85         xor        r9d, r9d

                     loc_ac88:
000000000000ac88         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000ac8b         mul        rsi
000000000000ac8e         mov        rbx, rax
000000000000ac91         jo         loc_ad93

                     loc_ac97:
000000000000ac97         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000ac9b         jne        loc_ac88

000000000000ac9d         jmp        loc_ac55

                     loc_ac9f:
000000000000ac9f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
000000000000aca2         mul        rsi
000000000000aca5         mov        rbx, rax
000000000000aca8         jno        loc_abe0

                     loc_acae:
000000000000acae         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
000000000000acb3         or         rbx, 0xffffffffffffffff
000000000000acb7         jmp        loc_abe0
000000000000acbc         align      64

                     loc_acc0:
000000000000acc0         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
000000000000acc6         xor        r9d, r9d

                     loc_acc9:
000000000000acc9         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000accc         mul        rsi
000000000000accf         mov        rbx, rax
000000000000acd2         jo         loc_adcf

                     loc_acd8:
000000000000acd8         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000acdc         jne        loc_acc9

000000000000acde         jmp        loc_ac55

                     loc_ace3:
000000000000ace3         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
000000000000ace9         xor        r9d, r9d

                     loc_acec:
000000000000acec         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000acef         mul        rsi
000000000000acf2         mov        rbx, rax
000000000000acf5         jo         loc_ad84

                     loc_acfb:
000000000000acfb         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000acff         jne        loc_acec

000000000000ad01         jmp        loc_ac55

                     loc_ad06:
000000000000ad06         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000ad0b         mov        rax, rdx
000000000000ad0e         mul        rbx
000000000000ad11         jo         loc_acae

000000000000ad13         shl        rbx, 0xa
000000000000ad17         jmp        loc_abe0

                     loc_ad1c:
000000000000ad1c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000ad1f         mul        rsi
000000000000ad22         jo         loc_aded

000000000000ad28         xor        r8d, r8d

                     loc_ad2b:
000000000000ad2b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000ad2e         jno        loc_abc7

000000000000ad34         mov        r8d, 0x1
000000000000ad3a         or         rax, 0xffffffffffffffff
000000000000ad3e         jmp        loc_abc7
000000000000ad43         align      8

                     loc_ad48:
000000000000ad48         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
000000000000ad4a         cmp        byte [rcx+2], 0x42
000000000000ad4e         mov        esi, 0x400
000000000000ad53         sete       dil
000000000000ad57         lea        edi, dword [rdi+rdi+1]
000000000000ad5b         jmp        loc_ab9a

                     loc_ad60:
000000000000ad60         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_ad65:
000000000000ad65         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
000000000000ad6c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000ad73         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000ad7a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000ad7f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_ad84:
000000000000ad84         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000ad8a         or         rbx, 0xffffffffffffffff
000000000000ad8e         jmp        loc_acfb

                     loc_ad93:
000000000000ad93         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
000000000000ad99         or         rbx, 0xffffffffffffffff
000000000000ad9d         jmp        loc_ac97

                     loc_ada2:
000000000000ada2         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
000000000000ada8         or         rbx, 0xffffffffffffffff
000000000000adac         jmp        loc_abd3

                     loc_adb1:
000000000000adb1         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
000000000000adb5         mov        r8d, 0x1
000000000000adbb         jmp        loc_abc7

                     loc_adc0:
000000000000adc0         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
000000000000adc6         or         rbx, 0xffffffffffffffff
000000000000adca         jmp        loc_ac77

                     loc_adcf:
000000000000adcf         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
000000000000add5         or         rbx, 0xffffffffffffffff
000000000000add9         jmp        loc_acd8

                     loc_adde:
000000000000adde         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
000000000000ade4         or         rbx, 0xffffffffffffffff
000000000000ade8         jmp        loc_ac4f

                     loc_aded:
000000000000aded         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
000000000000adf3         or         rax, 0xffffffffffffffff
000000000000adf7         jmp        loc_ad2b
000000000000adfc         align      512                                         ; End of unwind block (FDE at 0xece4)

                     rpl_fcntl:
000000000000ae00         push       r12                                         ; Begin of unwind block (FDE at 0xed34), CODE XREF=main+5592, main+5632, dup_safer+9
000000000000ae02         push       rbp
000000000000ae03         mov        ebp, edi
000000000000ae05         push       rbx
000000000000ae06         sub        rsp, 0x50
000000000000ae0a         mov        rax, qword [fs:0x28]
000000000000ae13         mov        qword [rsp+0x68+var_50], rax
000000000000ae18         xor        eax, eax
000000000000ae1a         lea        rax, qword [rsp+0x68+arg_0]
000000000000ae1f         test       esi, esi
000000000000ae21         mov        qword [rsp+0x68+var_38], rdx
000000000000ae26         mov        qword [rsp+0x68+var_30], rcx
000000000000ae2b         mov        qword [rsp+0x68+var_28], r8
000000000000ae30         mov        qword [rsp+0x68+var_60], rax
000000000000ae35         lea        rax, qword [rsp+0x68+var_48]
000000000000ae3a         mov        qword [rsp+0x68+var_20], r9
000000000000ae3f         mov        dword [rsp+0x68+var_68], 0x10
000000000000ae46         mov        qword [rsp+0x68+var_58], rax
000000000000ae4b         je         loc_b052

000000000000ae51         cmp        esi, 0x406
000000000000ae57         jne        loc_aea0

000000000000ae59         mov        rax, qword [rsp+0x68+var_58]
000000000000ae5e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000000ae65         mov        dword [rsp+0x68+var_68], 0x18
000000000000ae6c         mov        r12d, dword [rax+0x10]
000000000000ae70         mov        edx, r12d
000000000000ae73         js         loc_afa3

000000000000ae79         xor        eax, eax
000000000000ae7b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000000ae80         call       j_fcntl                                     ; fcntl
000000000000ae85         test       eax, eax
000000000000ae87         mov        ebx, eax
000000000000ae89         js         loc_b018

                     loc_ae8f:
000000000000ae8f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000000ae99         jmp        loc_aee0
000000000000ae9b         align      32

                     loc_aea0:
000000000000aea0         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000000aea3         je         loc_aed0

000000000000aea5         jg         loc_af00

000000000000aea7         cmp        esi, 0x4
000000000000aeaa         je         loc_af80

000000000000aeb0         jg         loc_af70

000000000000aeb6         cmp        esi, 0x2
000000000000aeb9         je         loc_af80

000000000000aebf         jg         loc_aed0

000000000000aec1         cmp        esi, 0x1
000000000000aec4         jne        loc_af28

000000000000aec6         nop        word [cs:rax+rax]

                     loc_aed0:
000000000000aed0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000000aed2         xor        eax, eax
000000000000aed4         call       j_fcntl                                     ; fcntl
000000000000aed9         mov        ebx, eax
000000000000aedb         nop        dword [rax+rax]

                     loc_aee0:
000000000000aee0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000000aee5         xor        rcx, qword [fs:0x28]
000000000000aeee         mov        eax, ebx
000000000000aef0         jne        loc_b04d

000000000000aef6         add        rsp, 0x50
000000000000aefa         pop        rbx
000000000000aefb         pop        rbp
000000000000aefc         pop        r12
000000000000aefe         ret
                        ; endp
000000000000aeff         align      256

                     loc_af00:
000000000000af00         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000000af06         jg         loc_af50

000000000000af08         cmp        esi, 0x406
000000000000af0e         jge        loc_af80

000000000000af10         cmp        esi, 0x401
000000000000af16         je         loc_aed0

000000000000af18         cmp        esi, 0x402
000000000000af1e         je         loc_af80

000000000000af20         cmp        esi, 0x400
000000000000af26         je         loc_af80

                     loc_af28:
000000000000af28         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000af2b         cmp        eax, 0x2f
000000000000af2e         ja         loc_b06a

000000000000af34         add        rax, qword [rsp+0x68+var_58]

                     loc_af39:
000000000000af39         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000af3c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000af3e         xor        eax, eax
000000000000af40         call       j_fcntl                                     ; fcntl
000000000000af45         mov        ebx, eax
000000000000af47         jmp        loc_aee0
000000000000af49         align      16

                     loc_af50:
000000000000af50         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000000af56         je         loc_af80

000000000000af58         jl         loc_aed0

000000000000af5e         cmp        esi, 0x40a
000000000000af64         jne        loc_af28

000000000000af66         jmp        loc_aed0
000000000000af6b         align      16

                     loc_af70:
000000000000af70         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000000af73         je         loc_aed0

000000000000af79         jg         loc_af80

000000000000af7b         cmp        esi, 0x8
000000000000af7e         jne        loc_af28

                     loc_af80:
000000000000af80         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000000af83         cmp        eax, 0x2f
000000000000af86         ja         loc_b074

000000000000af8c         add        rax, qword [rsp+0x68+var_58]

                     loc_af91:
000000000000af91         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000000af93         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000af95         xor        eax, eax
000000000000af97         call       j_fcntl                                     ; fcntl
000000000000af9c         mov        ebx, eax
000000000000af9e         jmp        loc_aee0

                     loc_afa3:
000000000000afa3         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000000afa5         xor        eax, eax
000000000000afa7         call       j_fcntl                                     ; fcntl
000000000000afac         test       eax, eax
000000000000afae         mov        ebx, eax
000000000000afb0         js         loc_aee0

000000000000afb6         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000afbd         jne        loc_aee0

                     loc_afc3:
000000000000afc3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000000afc5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000000afca         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000afcc         call       j_fcntl                                     ; fcntl
000000000000afd1         test       eax, eax
000000000000afd3         js         loc_aff1

000000000000afd5         or         eax, 0x1
000000000000afd8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000000afdd         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000afdf         mov        edx, eax
000000000000afe1         xor        eax, eax
000000000000afe3         call       j_fcntl                                     ; fcntl
000000000000afe8         cmp        eax, 0xffffffff
000000000000afeb         jne        loc_aee0

                     loc_aff1:
000000000000aff1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000000aff6         mov        r12d, dword [rax]
000000000000aff9         mov        rbp, rax
000000000000affc         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000affe         call       j_close                                     ; close
000000000000b003         mov        ebx, 0xffffffff
000000000000b008         mov        dword [rbp], r12d
000000000000b00c         jmp        loc_aee0
000000000000b011         align      8

                     loc_b018:
000000000000b018         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000000b01d         cmp        dword [rax], 0x16
000000000000b020         jne        loc_ae8f

000000000000b026         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000b028         xor        eax, eax
000000000000b02a         mov        edx, r12d
000000000000b02d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b02f         call       j_fcntl                                     ; fcntl
000000000000b034         test       eax, eax
000000000000b036         mov        ebx, eax
000000000000b038         js         loc_aee0

000000000000b03e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000b048         jmp        loc_afc3

                     loc_b04d:
000000000000b04d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_b052:
000000000000b052         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000000b057         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000b059         mov        edx, dword [rax+0x10]
000000000000b05c         xor        eax, eax
000000000000b05e         call       j_fcntl                                     ; fcntl
000000000000b063         mov        ebx, eax
000000000000b065         jmp        loc_aee0

                     loc_b06a:
000000000000b06a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000b06f         jmp        loc_af39

                     loc_b074:
000000000000b074         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000000b079         jmp        loc_af91
000000000000b07e         align      128                                         ; End of unwind block (FDE at 0xed34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
000000000000b080         push       r13                                         ; Begin of unwind block (FDE at 0xed6c), CODE XREF=sub_89b0+534
000000000000b082         push       r12
000000000000b084         mov        r13, rsi
000000000000b087         push       rbp
000000000000b088         push       rbx
000000000000b089         mov        rbx, rdi
000000000000b08c         mov        r12, rdx
000000000000b08f         sub        rsp, 0x18
000000000000b093         mov        rax, qword [fs:0x28]
000000000000b09c         mov        qword [rsp+0x38+var_30], rax
000000000000b0a1         xor        eax, eax
000000000000b0a3         lea        rax, qword [rsp+0x38+var_34]
000000000000b0a8         test       rdi, rdi
000000000000b0ab         cmove      rbx, rax
000000000000b0af         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
000000000000b0b2         call       j_mbrtowc                                   ; mbrtowc
000000000000b0b7         cmp        rax, 0xfffffffffffffffd
000000000000b0bb         mov        rbp, rax
000000000000b0be         jbe        loc_b0e0

000000000000b0c0         test       r12, r12
000000000000b0c3         je         loc_b0e0

000000000000b0c5         xor        edi, edi
000000000000b0c7         call       hard_locale                                 ; hard_locale
000000000000b0cc         test       al, al
000000000000b0ce         jne        loc_b0e0

000000000000b0d0         movzx      eax, byte [r13]
000000000000b0d5         mov        ebp, 0x1
000000000000b0da         mov        dword [rbx], eax
000000000000b0dc         nop        dword [rax]

                     loc_b0e0:
000000000000b0e0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
000000000000b0e5         xor        rdx, qword [fs:0x28]
000000000000b0ee         mov        rax, rbp
000000000000b0f1         jne        loc_b0fe

000000000000b0f3         add        rsp, 0x18
000000000000b0f7         pop        rbx
000000000000b0f8         pop        rbp
000000000000b0f9         pop        r12
000000000000b0fb         pop        r13
000000000000b0fd         ret
                        ; endp

                     loc_b0fe:
000000000000b0fe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
000000000000b103         align      16                                          ; End of unwind block (FDE at 0xed6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     rpl_nanosleep:
000000000000b110         push       r12                                         ; Begin of unwind block (FDE at 0xedac), CODE XREF=xnanosleep+75
000000000000b112         push       rbp
000000000000b113         push       rbx
000000000000b114         sub        rsp, 0x20
000000000000b118         mov        rax, qword [fs:0x28]
000000000000b121         mov        qword [rsp+0x38+var_20], rax
000000000000b126         xor        eax, eax
000000000000b128         mov        rax, qword [rdi+8]
000000000000b12c         cmp        rax, 0x3b9ac9ff
000000000000b132         ja         loc_b1c0

000000000000b138         mov        rbx, qword [rdi]
000000000000b13b         mov        rbp, rsi
000000000000b13e         mov        qword [rsp+0x38+var_30], rax
000000000000b143         mov        r12, rsp
000000000000b146         cmp        rbx, 0x1fa400
000000000000b14d         jg         loc_b16a

000000000000b14f         jmp        loc_b198
000000000000b151         align      8

                     loc_b158:
000000000000b158         cmp        rbx, 0x1fa400                               ; CODE XREF=rpl_nanosleep+118
000000000000b15f         mov        qword [rsp+0x38+var_30], 0x0
000000000000b168         jle        loc_b198

                     loc_b16a:
000000000000b16a         mov        rsi, rbp                                    ; argument "__remaining" for method j_nanosleep, CODE XREF=rpl_nanosleep+61
000000000000b16d         mov        rdi, r12                                    ; argument "__requested_time" for method j_nanosleep
000000000000b170         mov        qword [rsp+0x38+var_38], 0x1fa400
000000000000b178         sub        rbx, 0x1fa400
000000000000b17f         call       j_nanosleep                                 ; nanosleep
000000000000b184         test       eax, eax
000000000000b186         je         loc_b158

000000000000b188         test       rbp, rbp
000000000000b18b         je         loc_b1a7

000000000000b18d         add        qword [rbp], rbx
000000000000b191         jmp        loc_b1a7
000000000000b193         align      8

                     loc_b198:
000000000000b198         mov        rsi, rbp                                    ; argument "__remaining" for method j_nanosleep, CODE XREF=rpl_nanosleep+63, rpl_nanosleep+88
000000000000b19b         mov        rdi, r12                                    ; argument "__requested_time" for method j_nanosleep
000000000000b19e         mov        qword [rsp+0x38+var_38], rbx
000000000000b1a2         call       j_nanosleep                                 ; nanosleep

                     loc_b1a7:
000000000000b1a7         mov        rdx, qword [rsp+0x38+var_20]                ; CODE XREF=rpl_nanosleep+123, rpl_nanosleep+129, rpl_nanosleep+192
000000000000b1ac         xor        rdx, qword [fs:0x28]
000000000000b1b5         jne        loc_b1d2

000000000000b1b7         add        rsp, 0x20
000000000000b1bb         pop        rbx
000000000000b1bc         pop        rbp
000000000000b1bd         pop        r12
000000000000b1bf         ret
                        ; endp

                     loc_b1c0:
000000000000b1c0         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_nanosleep+34
000000000000b1c5         mov        dword [rax], 0x16
000000000000b1cb         mov        eax, 0xffffffff
000000000000b1d0         jmp        loc_b1a7

                     loc_b1d2:
000000000000b1d2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_nanosleep+165
                        ; endp
000000000000b1d7         align      32                                          ; End of unwind block (FDE at 0xedac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     c_strtod:
000000000000b1e0         push       rbp                                         ; Begin of unwind block (FDE at 0xede4), CODE XREF=cl_strtod+129
000000000000b1e1         push       rbx
000000000000b1e2         mov        rbp, rdi
000000000000b1e5         mov        rbx, rsi
000000000000b1e8         sub        rsp, 0x8
000000000000b1ec         mov        rax, qword [c_locale_cache]                 ; c_locale_cache
000000000000b1f3         test       rax, rax
000000000000b1f6         je         loc_b230

                     loc_b1f8:
000000000000b1f8         mov        rdx, qword [c_locale_cache]                 ; c_locale_cache, CODE XREF=c_strtod+106
000000000000b1ff         test       rdx, rdx
000000000000b202         je         loc_b218

000000000000b204         add        rsp, 0x8
000000000000b208         mov        rsi, rbx                                    ; argument "__endptr" for method j_strtod_l
000000000000b20b         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtod_l
000000000000b20e         pop        rbx
000000000000b20f         pop        rbp
000000000000b210         jmp        j_strtod_l                                  ; strtod_l
                        ; endp
000000000000b215         align      8

                     loc_b218:
000000000000b218         test       rbx, rbx                                    ; CODE XREF=c_strtod+34
000000000000b21b         pxor       xmm0, xmm0
000000000000b21f         je         loc_b228

000000000000b221         pxor       xmm0, xmm0
000000000000b225         mov        qword [rbx], rbp

                     loc_b228:
000000000000b228         add        rsp, 0x8                                    ; CODE XREF=c_strtod+63
000000000000b22c         pop        rbx
000000000000b22d         pop        rbp
000000000000b22e         ret
                        ; endp
000000000000b22f         align      16

                     loc_b230:
000000000000b230         lea        rsi, qword [__PRETTY_FUNCTION__.4162+11]    ; argument "__locale" for method j_newlocale, 0xd453, CODE XREF=c_strtod+22
000000000000b237         xor        edx, edx                                    ; argument "__base" for method j_newlocale
000000000000b239         mov        edi, 0x1fbf                                 ; argument "__category_mask" for method j_newlocale
000000000000b23e         call       j_newlocale                                 ; newlocale
000000000000b243         mov        qword [c_locale_cache], rax                 ; c_locale_cache
000000000000b24a         jmp        loc_b1f8
000000000000b24c         align      16                                          ; End of unwind block (FDE at 0xede4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
000000000000b250         push       r12                                         ; Begin of unwind block (FDE at 0xee1c), CODE XREF=close_stdout+13, close_stdout+51
000000000000b252         push       rbp
000000000000b253         mov        rbp, rdi
000000000000b256         push       rbx
000000000000b257         call       j___fpending                                ; __fpending
000000000000b25c         mov        ebx, dword [rbp]
000000000000b25f         mov        rdi, rbp
000000000000b262         mov        r12, rax
000000000000b265         call       rpl_fclose                                  ; rpl_fclose
000000000000b26a         and        ebx, 0x20
000000000000b26d         test       ebx, ebx
000000000000b26f         jne        loc_b288

000000000000b271         test       eax, eax
000000000000b273         je         loc_b27f

000000000000b275         test       r12, r12
000000000000b278         mov        eax, 0xffffffff
000000000000b27d         je         loc_b2b8

                     loc_b27f:
000000000000b27f         pop        rbx                                         ; CODE XREF=close_stream+35
000000000000b280         pop        rbp
000000000000b281         pop        r12
000000000000b283         ret
                        ; endp
000000000000b284         align      8

                     loc_b288:
000000000000b288         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000b28a         jne        loc_b2a8

000000000000b28c         call       j___errno_location                          ; __errno_location
000000000000b291         mov        dword [rax], 0x0
000000000000b297         mov        eax, 0xffffffff
000000000000b29c         pop        rbx
000000000000b29d         pop        rbp
000000000000b29e         pop        r12
000000000000b2a0         ret
                        ; endp
000000000000b2a1         align      8

                     loc_b2a8:
000000000000b2a8         pop        rbx                                         ; CODE XREF=close_stream+58
000000000000b2a9         mov        eax, 0xffffffff
000000000000b2ae         pop        rbp
000000000000b2af         pop        r12
000000000000b2b1         ret
                        ; endp
000000000000b2b2         align      8

                     loc_b2b8:
000000000000b2b8         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000b2bd         cmp        dword [rax], 0x9
000000000000b2c0         pop        rbx
000000000000b2c1         pop        rbp
000000000000b2c2         pop        r12
000000000000b2c4         setne      al
000000000000b2c7         movzx      eax, al
000000000000b2ca         neg        eax
000000000000b2cc         ret
                        ; endp
000000000000b2cd         align      16                                          ; End of unwind block (FDE at 0xee1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dtotimespec:
000000000000b2d0         ucomisd    xmm0, qword [double_d458]                   ; Begin of unwind block (FDE at 0xee6c), double_d458, CODE XREF=xnanosleep+25
000000000000b2d8         jbe        loc_b370

000000000000b2de         movsd      xmm1, qword [double_d460]                   ; double_d460
000000000000b2e6         ucomisd    xmm1, xmm0
000000000000b2ea         jbe        loc_b358

000000000000b2ec         cvttsd2si  rsi, xmm0
000000000000b2f1         pxor       xmm1, xmm1
000000000000b2f5         xor        ecx, ecx
000000000000b2f7         cvtsi2sd   xmm1, rsi
000000000000b2fc         subsd      xmm0, xmm1
000000000000b300         pxor       xmm1, xmm1
000000000000b304         mulsd      xmm0, qword [double_d468]                   ; double_d468
000000000000b30c         cvttsd2si  rdx, xmm0
000000000000b311         cvtsi2sd   xmm1, rdx
000000000000b316         ucomisd    xmm0, xmm1
000000000000b31a         seta       cl
000000000000b31d         add        rcx, rdx
000000000000b320         movabs     rdx, 0x112e0be826d694b3
000000000000b32a         mov        rax, rcx
000000000000b32d         imul       rdx
000000000000b330         mov        rax, rcx
000000000000b333         sar        rax, 0x3f
000000000000b337         sar        rdx, 0x1a
000000000000b33b         sub        rdx, rax
000000000000b33e         lea        rax, qword [rdx+rsi]
000000000000b342         imul       rdx, rdx, 0x3b9aca00
000000000000b349         sub        rcx, rdx
000000000000b34c         mov        rdx, rcx
000000000000b34f         js         loc_b380

000000000000b351         ret
                        ; endp
000000000000b353         align      8

                     loc_b358:
000000000000b358         movabs     rax, 0x7fffffffffffffff                     ; CODE XREF=dtotimespec+26
000000000000b362         mov        edx, 0x3b9ac9ff
000000000000b367         ret
                        ; endp
000000000000b368         align      16

                     loc_b370:
000000000000b370         movabs     rax, 0x8000000000000000                     ; CODE XREF=dtotimespec+8
000000000000b37a         xor        edx, edx
000000000000b37c         ret
                        ; endp
000000000000b37d         align      128

                     loc_b380:
000000000000b380         sub        rax, 0x1                                    ; CODE XREF=dtotimespec+127
000000000000b384         add        rdx, 0x3b9aca00
000000000000b38b         ret
                        ; endp
000000000000b38c         align      16                                          ; End of unwind block (FDE at 0xee6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
000000000000b390         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xee84), CODE XREF=rpl_mbrtowc+71
000000000000b394         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000b396         call       j_setlocale                                 ; setlocale
000000000000b39b         mov        rdx, rax
000000000000b39e         mov        eax, 0x1
000000000000b3a3         test       rdx, rdx
000000000000b3a6         je         loc_b3c5

000000000000b3a8         lea        rdi, qword [__PRETTY_FUNCTION__.4162+11]    ; 0xd453
000000000000b3af         mov        ecx, 0x2
000000000000b3b4         mov        rsi, rdx
000000000000b3b7         rep  cmpsb byte [rsi], byte [rdi]
000000000000b3b9         seta       cl
000000000000b3bc         sbb        cl, 0x0
000000000000b3bf         xor        eax, eax
000000000000b3c1         test       cl, cl
000000000000b3c3         jne        loc_b3d0

                     loc_b3c5:
000000000000b3c5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
000000000000b3c9         ret
                        ; endp
000000000000b3ca         align      16

                     loc_b3d0:
000000000000b3d0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
000000000000b3d7         mov        ecx, 0x6
000000000000b3dc         mov        rsi, rdx
000000000000b3df         rep  cmpsb byte [rsi], byte [rdi]
000000000000b3e1         seta       al
000000000000b3e4         sbb        al, 0x0
000000000000b3e6         test       al, al
000000000000b3e8         setne      al
000000000000b3eb         add        rsp, 0x8
000000000000b3ef         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000b3f0         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xee84), Begin of unwind block (FDE at 0xeea4), CODE XREF=gettext_quote.part.1+11
000000000000b3f4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000b3f9         call       j_nl_langinfo                               ; nl_langinfo
000000000000b3fe         test       rax, rax
000000000000b401         je         loc_b420

000000000000b403         cmp        byte [rax], 0x0
000000000000b406         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000b40d         cmove      rax, rdx
000000000000b411         add        rsp, 0x8
000000000000b415         ret
                        ; endp
000000000000b416         align      32

                     loc_b420:
000000000000b420         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000b427         add        rsp, 0x8
000000000000b42b         ret
                        ; endp
000000000000b42c         align      16                                          ; End of unwind block (FDE at 0xeea4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer:
000000000000b430         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0xeec4), CODE XREF=fd_safer+17
000000000000b435         xor        esi, esi
000000000000b437         xor        eax, eax
000000000000b439         jmp        rpl_fcntl                                   ; rpl_fcntl
000000000000b43e         align      64                                          ; End of unwind block (FDE at 0xeec4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000b440         push       r12                                         ; Begin of unwind block (FDE at 0xeedc), CODE XREF=close_stream+21
000000000000b442         push       rbp
000000000000b443         push       rbx
000000000000b444         mov        rbx, rdi
000000000000b447         call       j_fileno                                    ; fileno
000000000000b44c         test       eax, eax
000000000000b44e         mov        rdi, rbx
000000000000b451         js         loc_b4a7

000000000000b453         call       j___freading                                ; __freading
000000000000b458         test       eax, eax
000000000000b45a         jne        loc_b488

                     loc_b45c:
000000000000b45c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000b45f         call       rpl_fflush                                  ; rpl_fflush
000000000000b464         test       eax, eax
000000000000b466         je         loc_b4a4

000000000000b468         call       j___errno_location                          ; __errno_location
000000000000b46d         mov        r12d, dword [rax]
000000000000b470         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000b473         mov        rbp, rax
000000000000b476         call       j_fclose                                    ; fclose
000000000000b47b         test       r12d, r12d
000000000000b47e         jne        loc_b4b0

                     loc_b480:
000000000000b480         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000b481         pop        rbp
000000000000b482         pop        r12
000000000000b484         ret
                        ; endp
000000000000b485         align      8

                     loc_b488:
000000000000b488         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000b48b         call       j_fileno                                    ; fileno
000000000000b490         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000b492         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000b497         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000b499         call       j_lseek                                     ; lseek
000000000000b49e         cmp        rax, 0xffffffffffffffff
000000000000b4a2         jne        loc_b45c

                     loc_b4a4:
000000000000b4a4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_b4a7:
000000000000b4a7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000b4a8         pop        rbp
000000000000b4a9         pop        r12
000000000000b4ab         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_b4b0:
000000000000b4b0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000b4b4         mov        eax, 0xffffffff
000000000000b4b9         jmp        loc_b480
000000000000b4bb         align      64                                          ; End of unwind block (FDE at 0xeedc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000b4c0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xef14), CODE XREF=rpl_fclose+31
000000000000b4c3         push       rbx
000000000000b4c4         mov        rbx, rdi
000000000000b4c7         je         loc_b4da

000000000000b4c9         call       j___freading                                ; __freading
000000000000b4ce         test       eax, eax
000000000000b4d0         je         loc_b4da

000000000000b4d2         test       dword [rbx], 0x100
000000000000b4d8         jne        loc_b4e8

                     loc_b4da:
000000000000b4da         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000b4dd         pop        rbx
000000000000b4de         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000b4e3         align      8

                     loc_b4e8:
000000000000b4e8         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000b4eb         mov        edx, 0x1
000000000000b4f0         xor        esi, esi
000000000000b4f2         call       rpl_fseeko                                  ; rpl_fseeko
000000000000b4f7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000b4fa         pop        rbx
000000000000b4fb         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000b500         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xef14), Begin of unwind block (FDE at 0xef34), CODE XREF=rpl_fflush+50
000000000000b504         cmp        qword [rdi+0x10], rax
000000000000b508         je         loc_b510

                     j_j_fseeko:        // fseeko
000000000000b50a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000b50f         align      16

                     loc_b510:
000000000000b510         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000b514         cmp        qword [rdi+0x28], rax
000000000000b518         jne        j_j_fseeko                                  ; fseeko

000000000000b51a         cmp        qword [rdi+0x48], 0x0
000000000000b51f         jne        j_j_fseeko                                  ; fseeko

000000000000b521         push       r12
000000000000b523         push       rbp
000000000000b524         mov        r12d, edx
000000000000b527         push       rbx
000000000000b528         mov        rbp, rsi
000000000000b52b         mov        rbx, rdi
000000000000b52e         call       j_fileno                                    ; fileno
000000000000b533         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000b536         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000b539         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000b53b         call       j_lseek                                     ; lseek
000000000000b540         cmp        rax, 0xffffffffffffffff
000000000000b544         je         loc_b552

000000000000b546         and        dword [rbx], 0xffffffef
000000000000b549         mov        qword [rbx+0x90], rax
000000000000b550         xor        eax, eax

                     loc_b552:
000000000000b552         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000b553         pop        rbp
000000000000b554         pop        r12
000000000000b556         ret
                        ; endp
000000000000b557         align      32                                          ; End of unwind block (FDE at 0xef34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000b560         push       r15                                         ; Begin of unwind block (FDE at 0xef64), DATA XREF=_start+22
000000000000b562         push       r14
000000000000b564         mov        r15, rdx
000000000000b567         push       r13
000000000000b569         push       r12
000000000000b56b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000b572         push       rbp
000000000000b573         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000b57a         push       rbx
000000000000b57b         mov        r13d, edi
000000000000b57e         mov        r14, rsi
000000000000b581         sub        rbp, r12
000000000000b584         sub        rsp, 0x8
000000000000b588         sar        rbp, 0x3
000000000000b58c         call       _init                                       ; _init
000000000000b591         test       rbp, rbp
000000000000b594         je         loc_b5b6

000000000000b596         xor        ebx, ebx
000000000000b598         nop        dword [rax+rax]

                     loc_b5a0:
000000000000b5a0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000b5a3         mov        rsi, r14
000000000000b5a6         mov        edi, r13d
000000000000b5a9         call       qword [r12+rbx*8]
000000000000b5ad         add        rbx, 0x1
000000000000b5b1         cmp        rbp, rbx
000000000000b5b4         jne        loc_b5a0

                     loc_b5b6:
000000000000b5b6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000b5ba         pop        rbx
000000000000b5bb         pop        rbp
000000000000b5bc         pop        r12
000000000000b5be         pop        r13
000000000000b5c0         pop        r14
000000000000b5c2         pop        r15
000000000000b5c4         ret
                        ; endp
000000000000b5c5         align      16                                          ; End of unwind block (FDE at 0xef64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000b5d0         ret                                                    ; Begin of unwind block (FDE at 0xefac), DATA XREF=_start+15
                        ; endp
000000000000b5d2         align      32                                          ; End of unwind block (FDE at 0xefac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000b5e0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xefc4), __dso_handle, CODE XREF=main+116
000000000000b5e7         xor        esi, esi
000000000000b5e9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000b5ee         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xefc4)
000000000000b5ef         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xb5f0; 0xb5f9[ (9 bytes)
        ; File offset : [46576; 46585[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000b5f0         sub        rsp, 0x8
000000000000b5f4         add        rsp, 0x8
000000000000b5f8         ret
                        ; endp
000000000000b5f9         db  0x00 ; '.'
000000000000b5fa         db  0x00 ; '.'
000000000000b5fb         db  0x00 ; '.'
000000000000b5fc         db  0x00 ; '.'
000000000000b5fd         db  0x00 ; '.'
000000000000b5fe         db  0x00 ; '.'
000000000000b5ff         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xb600; 0xd47c[ (7804 bytes)
        ; File offset : [46592; 54396[ (7804 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000b600         db  0x01 ; '.'
000000000000b601         db  0x00 ; '.'
000000000000b602         db  0x02 ; '.'
000000000000b603         db  0x00 ; '.'
                     aStandardInput:
000000000000b604         db         "standard input", 0                         ; DATA XREF=pretty_name.isra.7+32
                     aClosingSFdd:
000000000000b613         db         "closing %s (fd=%d)", 0                     ; DATA XREF=close_fd+53
                     aStandardOutput:
000000000000b626         db         "standard output", 0                        ; DATA XREF=main+10545, xwrite_stdout.part.10+53
                     aErrorWritingS:
000000000000b636         db         "error writing %s", 0                       ; DATA XREF=xwrite_stdout.part.10+70
                     aErrorReadingS:
000000000000b647         db         "error reading %s", 0                       ; DATA XREF=main+3482, main+5008, main+6976, main+7349, start_lines+248, dump_remainder+281, start_bytes+189, file_lines+479
000000000000b658         db  0x25 ; '%'                                         ; DATA XREF=main+3269, main+5803, dump_remainder+137
000000000000b659         db  0x73 ; 's'
000000000000b65a         db  0x3d ; '='
000000000000b65b         db  0x3d ; '='
000000000000b65c         db  0x3e ; '>'
000000000000b65d         db  0x20 ; ' '
000000000000b65e         db  0x25 ; '%'
000000000000b65f         db  0x73 ; 's'
000000000000b660         db  0x20 ; ' '
000000000000b661         db  0x3c ; '<'
000000000000b662         db  0x3d ; '='
000000000000b663         db  0x3d ; '='
000000000000b664         db  0x0a ; '.'
000000000000b665         db  0x00 ; '.'
                     aSCannotSeekToO:
000000000000b666         db         "%s: cannot seek to offset %s", 0           ; DATA XREF=xlseek+122
                     aSFileTruncated:
000000000000b683         db         "%s: file truncated", 0                     ; DATA XREF=main+6481, check_fspec+383
                     aWriteError:
000000000000b696         db         "write error", 0                            ; DATA XREF=main+10246, main+10501, check_fspec+218, close_stdout+67
                     aCoreutils831sr:
000000000000b6a2         db         "../coreutils-8.31/src/tail.c", 0           ; DATA XREF=main+10442, recheck+1586, recheck+1639
                     aValidfilespecF:
000000000000b6bf         db         "valid_file_spec (f)", 0                    ; DATA XREF=recheck+1593
                     aSHasBecomeInac:
000000000000b6d3         db         "%s has become inaccessible", 0             ; DATA XREF=recheck+841
                     aGivingUpOnThis:
000000000000b6ee         db         "; giving up on this name", 0               ; DATA XREF=main+3802, recheck+1009
                     aFfd1:
000000000000b707         db         "f->fd == -1", 0                            ; DATA XREF=recheck+1646
                     aSHasBecomeAcce:
000000000000b713         db         "%s has become accessible", 0               ; DATA XREF=recheck+624
000000000000b72c         db  0x74 ; 't'                                         ; DATA XREF=main+551, usage+610, usage+924, usage+1108, usage+1127, usage+1161
000000000000b72d         db  0x61 ; 'a'
000000000000b72e         db  0x69 ; 'i'
000000000000b72f         db  0x6c ; 'l'
000000000000b730         db  0x00 ; '.'
000000000000b731         db  0x5b ; '['                                         ; DATA XREF=usage+622
000000000000b732         db  0x00 ; '.'
                     aTestInvocation:
000000000000b733         db         "test invocation", 0                        ; DATA XREF=usage+661
                     aMulticallInvoc:
000000000000b743         db         "Multi-call invocation", 0                  ; DATA XREF=usage+709
                     aSha224sum:
000000000000b759         db         "sha224sum", 0                              ; DATA XREF=usage+726
                     aSha2Utilities:
000000000000b763         db         "sha2 utilities", 0                         ; DATA XREF=usage+738
                     aSha256sum:
000000000000b772         db         "sha256sum", 0                              ; DATA XREF=usage+629
                     aSha384sum:
000000000000b77c         db         "sha384sum", 0                              ; DATA XREF=usage+673
                     aSha512sum:
000000000000b786         db         "sha512sum", 0                              ; DATA XREF=usage+697
                     aNsOnlineHelpSn:
000000000000b790         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+810
000000000000b7a7         db  0x47 ; 'G'                                         ; DATA XREF=main+544, usage+838, usage+1031, emit_bug_reporting_address+68
000000000000b7a8         db  0x4e ; 'N'
000000000000b7a9         db  0x55 ; 'U'
000000000000b7aa         db  0x20 ; ' '
                     aCoreutils:
000000000000b7ab         db         "coreutils", 0                              ; DATA XREF=main+85, main+97, usage+685
000000000000b7b5         db  0x65 ; 'e'                                         ; DATA XREF=usage+877, usage+1070
000000000000b7b6         db  0x6e ; 'n'
000000000000b7b7         db  0x5f ; '_'
000000000000b7b8         db  0x00 ; '.'
                     aFullDocumentat:
000000000000b7b9         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+905, usage+1094
000000000000b7d4         db  0x2e ; '.'                                         ; DATA XREF=main+7928
000000000000b7d5         db  0x00 ; '.'
                     aUsrlocalsharel:
000000000000b7d6         db         "/usr/local/share/locale", 0                ; DATA XREF=main+78
000000000000b7ee         db  0x2d ; '-'                                         ; DATA XREF=main+2312
000000000000b7ef         db  0x2d ; '-'                                         ; DATA XREF=main+1644, main+2008, main+4602, main+4772, main+4891, main+10376, pretty_name.isra.7+3, recheck+54
000000000000b7f0         db  0x00 ; '.'
000000000000b7f1         db  0x62 ; 'b'                                         ; DATA XREF=main+1334
000000000000b7f2         db  0x00 ; '.'
                     aInvalidNumber:
000000000000b7f3         db         "invalid number", 0                         ; DATA XREF=main+10189
                     aSS:
000000000000b802         db         "%s: %s", 0                                 ; DATA XREF=main+10221, close_stdout+108, xnumtoumax+125
                     aInvalidNumberO_b809:        // aInvalidNumberO
000000000000b809         db         "invalid number of lines", 0                ; DATA XREF=main+1393
                     aInvalidNumberO_b821:        // aInvalidNumberO
000000000000b821         db         "invalid number of bytes", 0                ; DATA XREF=main+898
                     aBkkmmgtpezy0:
000000000000b839         db         "bkKmMGTPEZY0", 0                           ; DATA XREF=main+922
                     aFollow:
000000000000b846         db         "--follow", 0                               ; DATA XREF=main+1004
                     aInvalidPid:
000000000000b84f         db         "invalid PID", 0                            ; DATA XREF=main+1048
                     aInvalidNumberO:
000000000000b85b         db         "invalid number of seconds: %s", 0          ; DATA XREF=main+766
                     aDavidMackenzie:
000000000000b879         db         "David MacKenzie", 0                        ; DATA XREF=main+522
                     aPaulRubin:
000000000000b889         db         "Paul Rubin", 0                             ; DATA XREF=main+537
                     aJimMeyering:
000000000000b894         db         "Jim Meyering", 0                           ; DATA XREF=main+495
                     aIanLanceTaylor:
000000000000b8a1         db         "Ian Lance Taylor", 0                       ; DATA XREF=main+530
                     aCnffqsvz012345:
000000000000b8b2         db         "c:n:fFqs:vz0123456789", 0                  ; DATA XREF=main+247
                     aCannotFollowSB:
000000000000b8c8         db         "cannot follow %s by name", 0               ; DATA XREF=main+10393
                     aCannotOpenSFor:
000000000000b8e1         db         "cannot open %s for reading", 0             ; DATA XREF=main+2648
                     aCannotFstatS:
000000000000b8fc         db         "cannot fstat %s", 0                        ; DATA XREF=main+4189, main+4256
000000000000b90c         db  0x62 ; 'b'                                         ; DATA XREF=main+10449
000000000000b90d         db  0x65 ; 'e'
000000000000b90e         db  0x67 ; 'g'
000000000000b90f         db  0x00 ; '.'
                     aInotifyResourc:
000000000000b910         db         "inotify resources exhausted", 0            ; DATA XREF=main+8057, main+9969
                     aCannotWatchS:
000000000000b92c         db         "cannot watch %s", 0                        ; DATA XREF=main+8281, main+9453
                     aSWasReplaced:
000000000000b93c         db         "%s was replaced", 0                        ; DATA XREF=main+9900
                     aNoFilesRemaini:
000000000000b94c         db         "no files remaining", 0                     ; DATA XREF=main+6715, main+9033
                     aErrorReadingIn:
000000000000b95f         db         "error reading inotify event", 0            ; DATA XREF=main+9756
                     aCannotReadReal:
000000000000b97b         db         "cannot read realtime clock", 0             ; DATA XREF=main+6215
                     aMaxunchangedst:
000000000000b996         db         "max-unchanged-stats", 0
                     aDisableinotify:
000000000000b9aa         db         "-disable-inotify", 0
000000000000b9bb         db  0x70 ; 'p'
000000000000b9bc         db  0x69 ; 'i'
000000000000b9bd         db  0x64 ; 'd'
000000000000b9be         db  0x00 ; '.'
                     aPresumeinputpi:
000000000000b9bf         db         "-presume-input-pipe", 0
                     aQuiet:
000000000000b9d3         db         "quiet", 0
                     aRetry:
000000000000b9d9         db         "retry", 0
                     aSilent:
000000000000b9df         db         "silent", 0
                     aSleepinterval:
000000000000b9e6         db         "sleep-interval", 0
                     aVerbose:
000000000000b9f5         db         "verbose", 0
                     aZeroterminated:
000000000000b9fd         db         "zero-terminated", 0
                     aHelp:
000000000000ba0d         db         "help", 0
                     aVersion:
000000000000ba12         db         "version", 0
                     aDescriptor:
000000000000ba1a         db         "descriptor", 0
000000000000ba25         align      8
                     aSCannotSeekToR:
000000000000ba28         db         "%s: cannot seek to relative offset %s", 0  ; DATA XREF=xlseek+189
000000000000ba4e         align      16
                     aCannotDetermin:
000000000000ba50         db         "cannot determine location of %s. reverting to polling", 0 ; DATA XREF=fremote+221
000000000000ba86         align      8
                     aSHasBeenReplac_ba88:        // aSHasBeenReplac
000000000000ba88         db         "%s has been replaced with an untailable symbolic link", 0 ; DATA XREF=recheck+1193
000000000000babe         align      64
                     aSHasBeenReplac:
000000000000bac0         db         "%s has been replaced with an untailable file%s", 0 ; DATA XREF=recheck+1055
000000000000baef         align      16
                     aSHasBeenReplac_baf0:        // aSHasBeenReplac
000000000000baf0         db         "%s has been replaced with an untailable remote file", 0 ; DATA XREF=recheck+937
000000000000bb24         align      8
                     aSHasAppearedFo:
000000000000bb28         db         "%s has appeared;  following new file", 0   ; DATA XREF=recheck+1562
000000000000bb4d         align      16
                     aSHasBeenReplac_bb50:        // aSHasBeenReplac
000000000000bb50         db         "%s has been replaced;  following new file", 0 ; DATA XREF=recheck+1410
000000000000bb7a         align      128
                     aTrySHelpForMor:
000000000000bb80         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000bba7         align      8
                     aUsageSOptionFi:
000000000000bba8         db         "Usage: %s [OPTION]... [FILE]...\n", 0      ; DATA XREF=usage+93
000000000000bbc9         align      16
                     aPrintTheLastDL:
000000000000bbd0         db         "Print the last %d lines of each FILE to standard output.\nWith more than one FILE, precede each with a header giving the file name.\n", 0 ; DATA XREF=usage+125
000000000000bc54         align      8
                     aNwithNoFileOrW:
000000000000bc58         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+171
                     aNmandatoryArgu:
000000000000bc90         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+208
000000000000bcdb         align      32
                     aCBytesnumOutpu:
000000000000bce0         db         "  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +NUM to\n                             output starting with byte NUM of each file\n", 0 ; DATA XREF=usage+245
000000000000bd71         align      8
                     aFFollownamedes:
000000000000bd78         db         "  -f, --follow[={name|descriptor}]\n                           output appended data as the file grows;\n                             an absent option argument means 'descriptor'\n  -F                       same as --follow=name --retry\n", 0 ; DATA XREF=usage+282
000000000000be62         align      8
                     aNLinesnumOutpu:
000000000000be68         db         "  -n, --lines=[+]NUM       output the last NUM lines, instead of the last %d;\n                             or use -n +NUM to output starting with line NUM\n      --max-unchanged-stats=N\n                           with --follow=name, reopen a FILE which has " ; DATA XREF=usage+312
000000000000bf68         db         "not\n                             changed size after N (default %d) iterations\n                             to see if it has been unlinked or renamed\n                             (this is the usual case of rotated log files);\n                             wi"
000000000000c068         db         "th inotify, this option is rarely useful\n", 0
000000000000c092         align      8
                     aPidpidWithFTer:
000000000000c098         db         "      --pid=PID            with -f, terminate after process ID, PID dies\n  -q, --quiet, --silent    never output headers giving file names\n      --retry              keep trying to open a file if it is inaccessible\n", 0 ; DATA XREF=usage+363
                     aSSleepinterval:
000000000000c170         db         "  -s, --sleep-interval=N   with -f, sleep for approximately N seconds\n                             (default 1.0) between iterations;\n                             with inotify and --pid=P, check process P at\n                             least once every N s" ; DATA XREF=usage+400
000000000000c270         db         "econds\n  -v, --verbose            always output headers giving file names\n", 0
000000000000c2bb         align      64
                     aZZeroterminate:
000000000000c2c0         db         "  -z, --zero-terminated    line delimiter is NUL, not newline\n", 0 ; DATA XREF=usage+437
000000000000c2ff         align      256
                     aHelpDisplayThi:
000000000000c300         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+474
000000000000c32d         align      16
                     aVersionOutputV:
000000000000c330         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+511
000000000000c366         align      8
                     aNnumMayHaveAMu:
000000000000c368         db         "\nNUM may have a multiplier suffix:\nb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\nGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\n\n", 0 ; DATA XREF=usage+548
000000000000c43d         align      64
                     aWithFollowFTai:
000000000000c440         db         "With --follow (-f), tail defaults to following the file descriptor, which\nmeans that even if a tail'ed file is renamed, tail will continue to track\nits end.  This default behavior is not desirable when you really want to\ntrack the actual name of the file, " ; DATA XREF=usage+585
000000000000c540         db         "not the file descriptor (e.g., log\nrotation).  Use --follow=name in that case.  That causes tail to track the\nnamed file in a way that accommodates renaming, removal and creation.\n", 0
000000000000c5f5         align      8
                     aHttpswwwgnuorg:
000000000000c5f8         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+831, usage+931, usage+1024, usage+1134, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000c620         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1175
000000000000c667         align      8
                     aOrAvailableLoc:
000000000000c668         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+974
000000000000c69b         align      32
                     aInvalidMaximum:
000000000000c6a0         db         "invalid maximum number of unchanged stats between opens", 0 ; DATA XREF=main+600
                     aOptionUsedInIn:
000000000000c6d8         db         "option used in invalid context -- %c", 0   ; DATA XREF=main+7418
000000000000c6fd         align      256
                     aWarningRetryIg:
000000000000c700         db         "warning: --retry ignored; --retry is useful only when following", 0 ; DATA XREF=main+2353
                     aWarningRetryOn:
000000000000c740         db         "warning: --retry only effective for the initial open", 0 ; DATA XREF=main+7205
000000000000c775         align      8
                     aWarningPidIgno:
000000000000c778         db         "warning: PID ignored; --pid=PID is useful only when following", 0 ; DATA XREF=main+2420
000000000000c7b6         align      8
                     aWarningPidpidI:
000000000000c7b8         db         "warning: --pid=PID is not supported on this system", 0 ; DATA XREF=main+1515
000000000000c7eb         align      16
                     aWarningFollowi:
000000000000c7f0         db         "warning: following standard input indefinitely is ineffective", 0 ; DATA XREF=main+2488
000000000000c82e         align      16
                     aSCannotFollowE:
000000000000c830         db         "%s: cannot follow end of this type of file%s", 0 ; DATA XREF=main+3847
000000000000c85d         align      32
                     aCannotWatchPar:
000000000000c860         db         "cannot watch parent directory of %s", 0    ; DATA XREF=main+10136
000000000000c884         align      8
                     aErrorWaitingFo:
000000000000c888         db         "error waiting for inotify and output events", 0 ; DATA XREF=main+10054
000000000000c8b4         align      8
                     aDirectoryConta:
000000000000c8b8         db         "directory containing watched file was removed", 0 ; DATA XREF=main+9693
000000000000c8e6         align      8
                     aInotifyCannotB:
000000000000c8e8         db         "inotify cannot be used, reverting to polling", 0 ; DATA XREF=main+8109
000000000000c915         align      8
                     aSCannotChangeN:
000000000000c918         db         "%s: cannot change nonblocking mode", 0     ; DATA XREF=main+10321
000000000000c93b         align      64
                     __PRETTY_FUNCTION__.7576:
000000000000c940         db         "recheck", 0                                ; DATA XREF=recheck+1579, recheck+1632
                     __PRETTY_FUNCTION__.7486:
000000000000c948         db         "pipe_lines", 0                             ; DATA XREF=main+10435
000000000000c953         db  0x00 ; '.'
000000000000c954         db  0x00 ; '.'
000000000000c955         db  0x00 ; '.'
000000000000c956         db  0x00 ; '.'
000000000000c957         db  0x00 ; '.'
                     follow_mode_map:
000000000000c958         db  0x02 ; '.'                                         ; DATA XREF=main+997, main+1022
000000000000c959         db  0x00 ; '.'
000000000000c95a         db  0x00 ; '.'
000000000000c95b         db  0x00 ; '.'
000000000000c95c         db  0x01 ; '.'
000000000000c95d         db  0x00 ; '.'
000000000000c95e         db  0x00 ; '.'
000000000000c95f         db  0x00 ; '.'
                     double_c960:        // double
000000000000c960         dq         1.0                                         ; DATA XREF=main+192
                     double_c968:        // double
000000000000c968         dq         1.0e+06                                     ; DATA XREF=main+8973
                     a831:
000000000000c970         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
000000000000c975         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000000c990         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000000c9ad         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000000c9c2         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000000c9ca         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000000c9cb         db  0x20 ; ' '
000000000000c9cc         db  0x25 ; '%'                                         ; DATA XREF=main+6592, recheck+251, close_stdout+143, xalloc_die+29
000000000000c9cd         db  0x73 ; 's'
000000000000c9ce         db  0x00 ; '.'
                     aEntriesLun:
000000000000c9cf         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
000000000000c9e7         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
000000000000c9ff         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
000000000000ca17         align      8
                     aBucketsUsedLu2:
000000000000ca18         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
000000000000ca39         db  0x00 ; '.'
000000000000ca3a         db  0x00 ; '.'
000000000000ca3b         db  0x00 ; '.'
000000000000ca3c         db  0x00 ; '.'
000000000000ca3d         db  0x00 ; '.'
000000000000ca3e         db  0x00 ; '.'
000000000000ca3f         db  0x00 ; '.'
                     default_tuning:
000000000000ca40         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
000000000000ca41         db  0x00 ; '.'
000000000000ca42         db  0x00 ; '.'
000000000000ca43         db  0x00 ; '.'
000000000000ca44         db  0x00 ; '.'
000000000000ca45         db  0x00 ; '.'
000000000000ca46         db  0x80 ; '.'
000000000000ca47         db  0x3f ; '?'
000000000000ca48         db  0xcd ; '.'
000000000000ca49         db  0xcc ; '.'
000000000000ca4a         db  0x4c ; 'L'
000000000000ca4b         db  0x3f ; '?'
000000000000ca4c         db  0xf4 ; '.'
000000000000ca4d         db  0xfd ; '.'
000000000000ca4e         db  0xb4 ; '.'
000000000000ca4f         db  0x3f ; '?'
000000000000ca50         db  0x00 ; '.'
000000000000ca51         db  0x00 ; '.'
000000000000ca52         db  0x00 ; '.'
000000000000ca53         db  0x00 ; '.'
                     float_ca54:        // float
000000000000ca54         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_ca58:        // float
000000000000ca58         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_ca5c:        // float
000000000000ca5c         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_ca60:        // float
000000000000ca60         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_ca64:        // float
000000000000ca64         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_ca68:        // float
000000000000ca68         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     float_ca6c:        // float
000000000000ca6c         dd         1.84467e+19f                                ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413
                     float_ca70:        // float
000000000000ca70         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400
000000000000ca74         align      2
000000000000ca7e         db  0x59 ; 'Y'
000000000000ca7f         db  0x40 ; '@'
                     aPosix2version:
000000000000ca80         db         "_POSIX2_VERSION", 0                        ; DATA XREF=posix2_version+1
                     aANullArgv0WasP:
000000000000ca90         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000cac8         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000cad0         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000cad1         db  0x74 ; 't'
000000000000cad2         db  0x2d ; '-'
000000000000cad3         db  0x00 ; '.'
000000000000cad4         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000cad5         db  0x80 ; '.'
000000000000cad6         db  0x98 ; '.'
000000000000cad7         db  0x00 ; '.'
000000000000cad8         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000cad9         db  0x80 ; '.'
000000000000cada         db  0x99 ; '.'
000000000000cadb         db  0x00 ; '.'
000000000000cadc         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000cadd         db  0x07 ; '.'
000000000000cade         db  0x65 ; 'e'
000000000000cadf         db  0x00 ; '.'
000000000000cae0         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000cae1         db  0xaf ; '.'
000000000000cae2         db  0x00 ; '.'
000000000000cae3         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_89b0+1451, sub_89b0+1493, sub_89b0+2429
000000000000cae4         db  0x00 ; '.'
000000000000cae5         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_89b0+132, sub_89b0+1338, sub_89b0+1670, sub_89b0+1697, sub_89b0+2352
000000000000cae6         db  0x00 ; '.'
000000000000cae7         db  0x60 ; '`'                                         ; DATA XREF=sub_89b0+1627, sub_89b0+1654
000000000000cae8         db  0x00 ; '.'
                     aLiteral:
000000000000cae9         db         "literal", 0
                     aShell:
000000000000caf1         db         "shell", 0
                     aShellalways:
000000000000caf7         db         "shell-always", 0
000000000000cb04         db  0x73 ; 's'
000000000000cb05         db  0x68 ; 'h'
000000000000cb06         db  0x65 ; 'e'
000000000000cb07         db  0x6c ; 'l'
000000000000cb08         db  0x6c ; 'l'
000000000000cb09         db  0x2d ; '-'
                     aEscape:
000000000000cb0a         db         "escape", 0
                     aShellescapealw:
000000000000cb11         db         "shell-escape-always", 0
                     aCmaybe:
000000000000cb25         db         "c-maybe", 0
                     aClocale:
000000000000cb2d         db         "clocale", 0
000000000000cb35         align      64
                     switch_table_cb40:        // switch_table
000000000000cb40         dd         quotearg_buffer_restyled.loc_90aa-switch_table_cb40, quotearg_buffer_restyled.loc_8303-switch_table_cb40, quotearg_buffer_restyled.loc_92d8-switch_table_cb40, quotearg_buffer_restyled.loc_90e4-switch_table_cb40 ; switch table used at 0x8301 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000cb50         dd         quotearg_buffer_restyled.loc_8ed4-switch_table_cb40, quotearg_buffer_restyled.loc_8f30-switch_table_cb40, quotearg_buffer_restyled.loc_8f85-switch_table_cb40, quotearg_buffer_restyled.loc_8fca-switch_table_cb40
000000000000cb60         dd         3 dup (quotearg_buffer_restyled.loc_9004-switch_table_cb40)
000000000000cb6c         db  0x14 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000cb6d         db  0xbb ; '.'
000000000000cb6e         db  0xff ; '.'
000000000000cb6f         db  0xff ; '.'
000000000000cb70         db  0xfc ; '.'
000000000000cb71         db  0xbb ; '.'
000000000000cb72         db  0xff ; '.'
000000000000cb73         db  0xff ; '.'
000000000000cb74         db  0xfc ; '.'
000000000000cb75         db  0xbb ; '.'
000000000000cb76         db  0xff ; '.'
000000000000cb77         db  0xff ; '.'
000000000000cb78         db  0xfc ; '.'
000000000000cb79         db  0xbb ; '.'
000000000000cb7a         db  0xff ; '.'
000000000000cb7b         db  0xff ; '.'
000000000000cb7c         db  0xfc ; '.'
000000000000cb7d         db  0xbb ; '.'
000000000000cb7e         db  0xff ; '.'
000000000000cb7f         db  0xff ; '.'
000000000000cb80         db  0xfc ; '.'
000000000000cb81         db  0xbb ; '.'
000000000000cb82         db  0xff ; '.'
000000000000cb83         db  0xff ; '.'
000000000000cb84         db  0xfc ; '.'
000000000000cb85         db  0xbb ; '.'
000000000000cb86         db  0xff ; '.'
000000000000cb87         db  0xff ; '.'
000000000000cb88         db  0x54 ; 'T'
000000000000cb89         db  0xbb ; '.'
000000000000cb8a         db  0xff ; '.'
000000000000cb8b         db  0xff ; '.'
000000000000cb8c         db  0x5c ; '\'
000000000000cb8d         db  0xba ; '.'
000000000000cb8e         db  0xff ; '.'
000000000000cb8f         db  0xff ; '.'
000000000000cb90         db  0x1c ; '.'
000000000000cb91         db  0xba ; '.'
000000000000cb92         db  0xff ; '.'
000000000000cb93         db  0xff ; '.'
000000000000cb94         db  0xe4 ; '.'
000000000000cb95         db  0xbb ; '.'
000000000000cb96         db  0xff ; '.'
000000000000cb97         db  0xff ; '.'
000000000000cb98         db  0xd4 ; '.'
000000000000cb99         db  0xbb ; '.'
000000000000cb9a         db  0xff ; '.'
000000000000cb9b         db  0xff ; '.'
000000000000cb9c         db  0xc4 ; '.'
000000000000cb9d         db  0xbb ; '.'
000000000000cb9e         db  0xff ; '.'
000000000000cb9f         db  0xff ; '.'
000000000000cba0         db  0xb4 ; '.'
000000000000cba1         db  0xbb ; '.'
000000000000cba2         db  0xff ; '.'
000000000000cba3         db  0xff ; '.'
000000000000cba4         db  0xfc ; '.'
000000000000cba5         db  0xbb ; '.'
000000000000cba6         db  0xff ; '.'
000000000000cba7         db  0xff ; '.'
000000000000cba8         db  0xfc ; '.'
000000000000cba9         db  0xbb ; '.'
000000000000cbaa         db  0xff ; '.'
000000000000cbab         db  0xff ; '.'
000000000000cbac         db  0xfc ; '.'
000000000000cbad         db  0xbb ; '.'
000000000000cbae         db  0xff ; '.'
000000000000cbaf         db  0xff ; '.'
000000000000cbb0         db  0xfc ; '.'
000000000000cbb1         db  0xbb ; '.'
000000000000cbb2         db  0xff ; '.'
000000000000cbb3         db  0xff ; '.'
000000000000cbb4         db  0xfc ; '.'
000000000000cbb5         db  0xbb ; '.'
000000000000cbb6         db  0xff ; '.'
000000000000cbb7         db  0xff ; '.'
000000000000cbb8         db  0xfc ; '.'
000000000000cbb9         db  0xbb ; '.'
000000000000cbba         db  0xff ; '.'
000000000000cbbb         db  0xff ; '.'
000000000000cbbc         db  0xfc ; '.'
000000000000cbbd         db  0xbb ; '.'
000000000000cbbe         db  0xff ; '.'
000000000000cbbf         db  0xff ; '.'
000000000000cbc0         db  0xfc ; '.'
000000000000cbc1         db  0xbb ; '.'
000000000000cbc2         db  0xff ; '.'
000000000000cbc3         db  0xff ; '.'
000000000000cbc4         db  0xfc ; '.'
000000000000cbc5         db  0xbb ; '.'
000000000000cbc6         db  0xff ; '.'
000000000000cbc7         db  0xff ; '.'
000000000000cbc8         db  0xfc ; '.'
000000000000cbc9         db  0xbb ; '.'
000000000000cbca         db  0xff ; '.'
000000000000cbcb         db  0xff ; '.'
000000000000cbcc         db  0xfc ; '.'
000000000000cbcd         db  0xbb ; '.'
000000000000cbce         db  0xff ; '.'
000000000000cbcf         db  0xff ; '.'
000000000000cbd0         db  0xfc ; '.'
000000000000cbd1         db  0xbb ; '.'
000000000000cbd2         db  0xff ; '.'
000000000000cbd3         db  0xff ; '.'
000000000000cbd4         db  0xfc ; '.'
000000000000cbd5         db  0xbb ; '.'
000000000000cbd6         db  0xff ; '.'
000000000000cbd7         db  0xff ; '.'
000000000000cbd8         db  0xfc ; '.'
000000000000cbd9         db  0xbb ; '.'
000000000000cbda         db  0xff ; '.'
000000000000cbdb         db  0xff ; '.'
000000000000cbdc         db  0xfc ; '.'
000000000000cbdd         db  0xbb ; '.'
000000000000cbde         db  0xff ; '.'
000000000000cbdf         db  0xff ; '.'
000000000000cbe0         db  0xfc ; '.'
000000000000cbe1         db  0xbb ; '.'
000000000000cbe2         db  0xff ; '.'
000000000000cbe3         db  0xff ; '.'
000000000000cbe4         db  0xfc ; '.'
000000000000cbe5         db  0xbb ; '.'
000000000000cbe6         db  0xff ; '.'
000000000000cbe7         db  0xff ; '.'
000000000000cbe8         db  0xfc ; '.'
000000000000cbe9         db  0xbb ; '.'
000000000000cbea         db  0xff ; '.'
000000000000cbeb         db  0xff ; '.'
000000000000cbec         db  0xa4 ; '.'
000000000000cbed         db  0xbb ; '.'
000000000000cbee         db  0xff ; '.'
000000000000cbef         db  0xff ; '.'
000000000000cbf0         db  0x94 ; '.'
000000000000cbf1         db  0xbb ; '.'
000000000000cbf2         db  0xff ; '.'
000000000000cbf3         db  0xff ; '.'
000000000000cbf4         db  0x94 ; '.'
000000000000cbf5         db  0xbb ; '.'
000000000000cbf6         db  0xff ; '.'
000000000000cbf7         db  0xff ; '.'
000000000000cbf8         db  0x64 ; 'd'
000000000000cbf9         db  0xbb ; '.'
000000000000cbfa         db  0xff ; '.'
000000000000cbfb         db  0xff ; '.'
000000000000cbfc         db  0x94 ; '.'
000000000000cbfd         db  0xbb ; '.'
000000000000cbfe         db  0xff ; '.'
000000000000cbff         db  0xff ; '.'
000000000000cc00         db  0x3c ; '<'
000000000000cc01         db  0xbb ; '.'
000000000000cc02         db  0xff ; '.'
000000000000cc03         db  0xff ; '.'
000000000000cc04         db  0x94 ; '.'
000000000000cc05         db  0xbb ; '.'
000000000000cc06         db  0xff ; '.'
000000000000cc07         db  0xff ; '.'
000000000000cc08         db  0xf7 ; '.'
000000000000cc09         db  0xb9 ; '.'
000000000000cc0a         db  0xff ; '.'
000000000000cc0b         db  0xff ; '.'
000000000000cc0c         db  0x94 ; '.'
000000000000cc0d         db  0xbb ; '.'
000000000000cc0e         db  0xff ; '.'
000000000000cc0f         db  0xff ; '.'
000000000000cc10         db  0x94 ; '.'
000000000000cc11         db  0xbb ; '.'
000000000000cc12         db  0xff ; '.'
000000000000cc13         db  0xff ; '.'
000000000000cc14         db  0x94 ; '.'
000000000000cc15         db  0xbb ; '.'
000000000000cc16         db  0xff ; '.'
000000000000cc17         db  0xff ; '.'
000000000000cc18         db  0x3c ; '<'
000000000000cc19         db  0xbb ; '.'
000000000000cc1a         db  0xff ; '.'
000000000000cc1b         db  0xff ; '.'
000000000000cc1c         db  0x3c ; '<'
000000000000cc1d         db  0xbb ; '.'
000000000000cc1e         db  0xff ; '.'
000000000000cc1f         db  0xff ; '.'
000000000000cc20         db  0x3c ; '<'
000000000000cc21         db  0xbb ; '.'
000000000000cc22         db  0xff ; '.'
000000000000cc23         db  0xff ; '.'
000000000000cc24         db  0x3c ; '<'
000000000000cc25         db  0xbb ; '.'
000000000000cc26         db  0xff ; '.'
000000000000cc27         db  0xff ; '.'
000000000000cc28         db  0x3c ; '<'
000000000000cc29         db  0xbb ; '.'
000000000000cc2a         db  0xff ; '.'
000000000000cc2b         db  0xff ; '.'
000000000000cc2c         db  0x3c ; '<'
000000000000cc2d         db  0xbb ; '.'
000000000000cc2e         db  0xff ; '.'
000000000000cc2f         db  0xff ; '.'
000000000000cc30         db  0x3c ; '<'
000000000000cc31         db  0xbb ; '.'
000000000000cc32         db  0xff ; '.'
000000000000cc33         db  0xff ; '.'
000000000000cc34         db  0x3c ; '<'
000000000000cc35         db  0xbb ; '.'
000000000000cc36         db  0xff ; '.'
000000000000cc37         db  0xff ; '.'
000000000000cc38         db  0x3c ; '<'
000000000000cc39         db  0xbb ; '.'
000000000000cc3a         db  0xff ; '.'
000000000000cc3b         db  0xff ; '.'
000000000000cc3c         db  0x3c ; '<'
000000000000cc3d         db  0xbb ; '.'
000000000000cc3e         db  0xff ; '.'
000000000000cc3f         db  0xff ; '.'
000000000000cc40         db  0x3c ; '<'
000000000000cc41         db  0xbb ; '.'
000000000000cc42         db  0xff ; '.'
000000000000cc43         db  0xff ; '.'
000000000000cc44         db  0x3c ; '<'
000000000000cc45         db  0xbb ; '.'
000000000000cc46         db  0xff ; '.'
000000000000cc47         db  0xff ; '.'
000000000000cc48         db  0x3c ; '<'
000000000000cc49         db  0xbb ; '.'
000000000000cc4a         db  0xff ; '.'
000000000000cc4b         db  0xff ; '.'
000000000000cc4c         db  0x3c ; '<'
000000000000cc4d         db  0xbb ; '.'
000000000000cc4e         db  0xff ; '.'
000000000000cc4f         db  0xff ; '.'
000000000000cc50         db  0x3c ; '<'
000000000000cc51         db  0xbb ; '.'
000000000000cc52         db  0xff ; '.'
000000000000cc53         db  0xff ; '.'
000000000000cc54         db  0x3c ; '<'
000000000000cc55         db  0xbb ; '.'
000000000000cc56         db  0xff ; '.'
000000000000cc57         db  0xff ; '.'
000000000000cc58         db  0x94 ; '.'
000000000000cc59         db  0xbb ; '.'
000000000000cc5a         db  0xff ; '.'
000000000000cc5b         db  0xff ; '.'
000000000000cc5c         db  0x94 ; '.'
000000000000cc5d         db  0xbb ; '.'
000000000000cc5e         db  0xff ; '.'
000000000000cc5f         db  0xff ; '.'
000000000000cc60         db  0x94 ; '.'
000000000000cc61         db  0xbb ; '.'
000000000000cc62         db  0xff ; '.'
000000000000cc63         db  0xff ; '.'
000000000000cc64         db  0x94 ; '.'
000000000000cc65         db  0xbb ; '.'
000000000000cc66         db  0xff ; '.'
000000000000cc67         db  0xff ; '.'
000000000000cc68         db  0xc7 ; '.'
000000000000cc69         db  0xb9 ; '.'
000000000000cc6a         db  0xff ; '.'
000000000000cc6b         db  0xff ; '.'
000000000000cc6c         db  0xfc ; '.'
000000000000cc6d         db  0xbb ; '.'
000000000000cc6e         db  0xff ; '.'
000000000000cc6f         db  0xff ; '.'
000000000000cc70         db  0x3c ; '<'
000000000000cc71         db  0xbb ; '.'
000000000000cc72         db  0xff ; '.'
000000000000cc73         db  0xff ; '.'
000000000000cc74         db  0x3c ; '<'
000000000000cc75         db  0xbb ; '.'
000000000000cc76         db  0xff ; '.'
000000000000cc77         db  0xff ; '.'
000000000000cc78         db  0x3c ; '<'
000000000000cc79         db  0xbb ; '.'
000000000000cc7a         db  0xff ; '.'
000000000000cc7b         db  0xff ; '.'
000000000000cc7c         db  0x3c ; '<'
000000000000cc7d         db  0xbb ; '.'
000000000000cc7e         db  0xff ; '.'
000000000000cc7f         db  0xff ; '.'
000000000000cc80         db  0x3c ; '<'
000000000000cc81         db  0xbb ; '.'
000000000000cc82         db  0xff ; '.'
000000000000cc83         db  0xff ; '.'
000000000000cc84         db  0x3c ; '<'
000000000000cc85         db  0xbb ; '.'
000000000000cc86         db  0xff ; '.'
000000000000cc87         db  0xff ; '.'
000000000000cc88         db  0x3c ; '<'
000000000000cc89         db  0xbb ; '.'
000000000000cc8a         db  0xff ; '.'
000000000000cc8b         db  0xff ; '.'
000000000000cc8c         db  0x3c ; '<'
000000000000cc8d         db  0xbb ; '.'
000000000000cc8e         db  0xff ; '.'
000000000000cc8f         db  0xff ; '.'
000000000000cc90         db  0x3c ; '<'
000000000000cc91         db  0xbb ; '.'
000000000000cc92         db  0xff ; '.'
000000000000cc93         db  0xff ; '.'
000000000000cc94         db  0x3c ; '<'
000000000000cc95         db  0xbb ; '.'
000000000000cc96         db  0xff ; '.'
000000000000cc97         db  0xff ; '.'
000000000000cc98         db  0x3c ; '<'
000000000000cc99         db  0xbb ; '.'
000000000000cc9a         db  0xff ; '.'
000000000000cc9b         db  0xff ; '.'
000000000000cc9c         db  0x3c ; '<'
000000000000cc9d         db  0xbb ; '.'
000000000000cc9e         db  0xff ; '.'
000000000000cc9f         db  0xff ; '.'
000000000000cca0         db  0x3c ; '<'
000000000000cca1         db  0xbb ; '.'
000000000000cca2         db  0xff ; '.'
000000000000cca3         db  0xff ; '.'
000000000000cca4         db  0x3c ; '<'
000000000000cca5         db  0xbb ; '.'
000000000000cca6         db  0xff ; '.'
000000000000cca7         db  0xff ; '.'
000000000000cca8         db  0x3c ; '<'
000000000000cca9         db  0xbb ; '.'
000000000000ccaa         db  0xff ; '.'
000000000000ccab         db  0xff ; '.'
000000000000ccac         db  0x3c ; '<'
000000000000ccad         db  0xbb ; '.'
000000000000ccae         db  0xff ; '.'
000000000000ccaf         db  0xff ; '.'
000000000000ccb0         db  0x3c ; '<'
000000000000ccb1         db  0xbb ; '.'
000000000000ccb2         db  0xff ; '.'
000000000000ccb3         db  0xff ; '.'
000000000000ccb4         db  0x3c ; '<'
000000000000ccb5         db  0xbb ; '.'
000000000000ccb6         db  0xff ; '.'
000000000000ccb7         db  0xff ; '.'
000000000000ccb8         db  0x3c ; '<'
000000000000ccb9         db  0xbb ; '.'
000000000000ccba         db  0xff ; '.'
000000000000ccbb         db  0xff ; '.'
000000000000ccbc         db  0x3c ; '<'
000000000000ccbd         db  0xbb ; '.'
000000000000ccbe         db  0xff ; '.'
000000000000ccbf         db  0xff ; '.'
000000000000ccc0         db  0x3c ; '<'
000000000000ccc1         db  0xbb ; '.'
000000000000ccc2         db  0xff ; '.'
000000000000ccc3         db  0xff ; '.'
000000000000ccc4         db  0x3c ; '<'
000000000000ccc5         db  0xbb ; '.'
000000000000ccc6         db  0xff ; '.'
000000000000ccc7         db  0xff ; '.'
000000000000ccc8         db  0x3c ; '<'
000000000000ccc9         db  0xbb ; '.'
000000000000ccca         db  0xff ; '.'
000000000000cccb         db  0xff ; '.'
000000000000cccc         db  0x3c ; '<'
000000000000cccd         db  0xbb ; '.'
000000000000ccce         db  0xff ; '.'
000000000000cccf         db  0xff ; '.'
000000000000ccd0         db  0x3c ; '<'
000000000000ccd1         db  0xbb ; '.'
000000000000ccd2         db  0xff ; '.'
000000000000ccd3         db  0xff ; '.'
000000000000ccd4         db  0x3c ; '<'
000000000000ccd5         db  0xbb ; '.'
000000000000ccd6         db  0xff ; '.'
000000000000ccd7         db  0xff ; '.'
000000000000ccd8         db  0x94 ; '.'
000000000000ccd9         db  0xbb ; '.'
000000000000ccda         db  0xff ; '.'
000000000000ccdb         db  0xff ; '.'
000000000000ccdc         db  0x6c ; 'l'
000000000000ccdd         db  0xba ; '.'
000000000000ccde         db  0xff ; '.'
000000000000ccdf         db  0xff ; '.'
000000000000cce0         db  0x3c ; '<'
000000000000cce1         db  0xbb ; '.'
000000000000cce2         db  0xff ; '.'
000000000000cce3         db  0xff ; '.'
000000000000cce4         db  0x94 ; '.'
000000000000cce5         db  0xbb ; '.'
000000000000cce6         db  0xff ; '.'
000000000000cce7         db  0xff ; '.'
000000000000cce8         db  0x3c ; '<'
000000000000cce9         db  0xbb ; '.'
000000000000ccea         db  0xff ; '.'
000000000000cceb         db  0xff ; '.'
000000000000ccec         db  0x94 ; '.'
000000000000cced         db  0xbb ; '.'
000000000000ccee         db  0xff ; '.'
000000000000ccef         db  0xff ; '.'
000000000000ccf0         db  0x3c ; '<'
000000000000ccf1         db  0xbb ; '.'
000000000000ccf2         db  0xff ; '.'
000000000000ccf3         db  0xff ; '.'
000000000000ccf4         db  0x3c ; '<'
000000000000ccf5         db  0xbb ; '.'
000000000000ccf6         db  0xff ; '.'
000000000000ccf7         db  0xff ; '.'
000000000000ccf8         db  0x3c ; '<'
000000000000ccf9         db  0xbb ; '.'
000000000000ccfa         db  0xff ; '.'
000000000000ccfb         db  0xff ; '.'
000000000000ccfc         db  0x3c ; '<'
000000000000ccfd         db  0xbb ; '.'
000000000000ccfe         db  0xff ; '.'
000000000000ccff         db  0xff ; '.'
000000000000cd00         db  0x3c ; '<'
000000000000cd01         db  0xbb ; '.'
000000000000cd02         db  0xff ; '.'
000000000000cd03         db  0xff ; '.'
000000000000cd04         db  0x3c ; '<'
000000000000cd05         db  0xbb ; '.'
000000000000cd06         db  0xff ; '.'
000000000000cd07         db  0xff ; '.'
000000000000cd08         db  0x3c ; '<'
000000000000cd09         db  0xbb ; '.'
000000000000cd0a         db  0xff ; '.'
000000000000cd0b         db  0xff ; '.'
000000000000cd0c         db  0x3c ; '<'
000000000000cd0d         db  0xbb ; '.'
000000000000cd0e         db  0xff ; '.'
000000000000cd0f         db  0xff ; '.'
000000000000cd10         db  0x3c ; '<'
000000000000cd11         db  0xbb ; '.'
000000000000cd12         db  0xff ; '.'
000000000000cd13         db  0xff ; '.'
000000000000cd14         db  0x3c ; '<'
000000000000cd15         db  0xbb ; '.'
000000000000cd16         db  0xff ; '.'
000000000000cd17         db  0xff ; '.'
000000000000cd18         db  0x3c ; '<'
000000000000cd19         db  0xbb ; '.'
000000000000cd1a         db  0xff ; '.'
000000000000cd1b         db  0xff ; '.'
000000000000cd1c         db  0x3c ; '<'
000000000000cd1d         db  0xbb ; '.'
000000000000cd1e         db  0xff ; '.'
000000000000cd1f         db  0xff ; '.'
000000000000cd20         db  0x3c ; '<'
000000000000cd21         db  0xbb ; '.'
000000000000cd22         db  0xff ; '.'
000000000000cd23         db  0xff ; '.'
000000000000cd24         db  0x3c ; '<'
000000000000cd25         db  0xbb ; '.'
000000000000cd26         db  0xff ; '.'
000000000000cd27         db  0xff ; '.'
000000000000cd28         db  0x3c ; '<'
000000000000cd29         db  0xbb ; '.'
000000000000cd2a         db  0xff ; '.'
000000000000cd2b         db  0xff ; '.'
000000000000cd2c         db  0x3c ; '<'
000000000000cd2d         db  0xbb ; '.'
000000000000cd2e         db  0xff ; '.'
000000000000cd2f         db  0xff ; '.'
000000000000cd30         db  0x3c ; '<'
000000000000cd31         db  0xbb ; '.'
000000000000cd32         db  0xff ; '.'
000000000000cd33         db  0xff ; '.'
000000000000cd34         db  0x3c ; '<'
000000000000cd35         db  0xbb ; '.'
000000000000cd36         db  0xff ; '.'
000000000000cd37         db  0xff ; '.'
000000000000cd38         db  0x3c ; '<'
000000000000cd39         db  0xbb ; '.'
000000000000cd3a         db  0xff ; '.'
000000000000cd3b         db  0xff ; '.'
000000000000cd3c         db  0x3c ; '<'
000000000000cd3d         db  0xbb ; '.'
000000000000cd3e         db  0xff ; '.'
000000000000cd3f         db  0xff ; '.'
000000000000cd40         db  0x3c ; '<'
000000000000cd41         db  0xbb ; '.'
000000000000cd42         db  0xff ; '.'
000000000000cd43         db  0xff ; '.'
000000000000cd44         db  0x3c ; '<'
000000000000cd45         db  0xbb ; '.'
000000000000cd46         db  0xff ; '.'
000000000000cd47         db  0xff ; '.'
000000000000cd48         db  0x3c ; '<'
000000000000cd49         db  0xbb ; '.'
000000000000cd4a         db  0xff ; '.'
000000000000cd4b         db  0xff ; '.'
000000000000cd4c         db  0x3c ; '<'
000000000000cd4d         db  0xbb ; '.'
000000000000cd4e         db  0xff ; '.'
000000000000cd4f         db  0xff ; '.'
000000000000cd50         db  0x3c ; '<'
000000000000cd51         db  0xbb ; '.'
000000000000cd52         db  0xff ; '.'
000000000000cd53         db  0xff ; '.'
000000000000cd54         db  0x3c ; '<'
000000000000cd55         db  0xbb ; '.'
000000000000cd56         db  0xff ; '.'
000000000000cd57         db  0xff ; '.'
000000000000cd58         db  0xf7 ; '.'
000000000000cd59         db  0xb8 ; '.'
000000000000cd5a         db  0xff ; '.'
000000000000cd5b         db  0xff ; '.'
000000000000cd5c         db  0x94 ; '.'
000000000000cd5d         db  0xbb ; '.'
000000000000cd5e         db  0xff ; '.'
000000000000cd5f         db  0xff ; '.'
000000000000cd60         db  0xf7 ; '.'
000000000000cd61         db  0xb8 ; '.'
000000000000cd62         db  0xff ; '.'
000000000000cd63         db  0xff ; '.'
000000000000cd64         db  0x64 ; 'd'
000000000000cd65         db  0xbb ; '.'
000000000000cd66         db  0xff ; '.'
000000000000cd67         db  0xff ; '.'
000000000000cd68         db  0xe8 ; '.'                                         ; DATA XREF=sub_8750+137
000000000000cd69         db  0xba ; '.'
000000000000cd6a         db  0xff ; '.'
000000000000cd6b         db  0xff ; '.'
000000000000cd6c         db  0xf8 ; '.'
000000000000cd6d         db  0xb9 ; '.'
000000000000cd6e         db  0xff ; '.'
000000000000cd6f         db  0xff ; '.'
000000000000cd70         db  0xf8 ; '.'
000000000000cd71         db  0xb9 ; '.'
000000000000cd72         db  0xff ; '.'
000000000000cd73         db  0xff ; '.'
000000000000cd74         db  0xf8 ; '.'
000000000000cd75         db  0xb9 ; '.'
000000000000cd76         db  0xff ; '.'
000000000000cd77         db  0xff ; '.'
000000000000cd78         db  0xf8 ; '.'
000000000000cd79         db  0xb9 ; '.'
000000000000cd7a         db  0xff ; '.'
000000000000cd7b         db  0xff ; '.'
000000000000cd7c         db  0xf8 ; '.'
000000000000cd7d         db  0xb9 ; '.'
000000000000cd7e         db  0xff ; '.'
000000000000cd7f         db  0xff ; '.'
000000000000cd80         db  0xf8 ; '.'
000000000000cd81         db  0xb9 ; '.'
000000000000cd82         db  0xff ; '.'
000000000000cd83         db  0xff ; '.'
000000000000cd84         db  0xd8 ; '.'
000000000000cd85         db  0xba ; '.'
000000000000cd86         db  0xff ; '.'
000000000000cd87         db  0xff ; '.'
000000000000cd88         db  0x28 ; '('
000000000000cd89         db  0xbc ; '.'
000000000000cd8a         db  0xff ; '.'
000000000000cd8b         db  0xff ; '.'
000000000000cd8c         db  0x10 ; '.'
000000000000cd8d         db  0xbc ; '.'
000000000000cd8e         db  0xff ; '.'
000000000000cd8f         db  0xff ; '.'
000000000000cd90         db  0xc0 ; '.'
000000000000cd91         db  0xba ; '.'
000000000000cd92         db  0xff ; '.'
000000000000cd93         db  0xff ; '.'
000000000000cd94         db  0x00 ; '.'
000000000000cd95         db  0xbc ; '.'
000000000000cd96         db  0xff ; '.'
000000000000cd97         db  0xff ; '.'
000000000000cd98         db  0xa8 ; '.'
000000000000cd99         db  0xba ; '.'
000000000000cd9a         db  0xff ; '.'
000000000000cd9b         db  0xff ; '.'
000000000000cd9c         db  0xe8 ; '.'
000000000000cd9d         db  0xbb ; '.'
000000000000cd9e         db  0xff ; '.'
000000000000cd9f         db  0xff ; '.'
000000000000cda0         db  0xf8 ; '.'
000000000000cda1         db  0xb9 ; '.'
000000000000cda2         db  0xff ; '.'
000000000000cda3         db  0xff ; '.'
000000000000cda4         db  0xf8 ; '.'
000000000000cda5         db  0xb9 ; '.'
000000000000cda6         db  0xff ; '.'
000000000000cda7         db  0xff ; '.'
000000000000cda8         db  0xf8 ; '.'
000000000000cda9         db  0xb9 ; '.'
000000000000cdaa         db  0xff ; '.'
000000000000cdab         db  0xff ; '.'
000000000000cdac         db  0xf8 ; '.'
000000000000cdad         db  0xb9 ; '.'
000000000000cdae         db  0xff ; '.'
000000000000cdaf         db  0xff ; '.'
000000000000cdb0         db  0xf8 ; '.'
000000000000cdb1         db  0xb9 ; '.'
000000000000cdb2         db  0xff ; '.'
000000000000cdb3         db  0xff ; '.'
000000000000cdb4         db  0xf8 ; '.'
000000000000cdb5         db  0xb9 ; '.'
000000000000cdb6         db  0xff ; '.'
000000000000cdb7         db  0xff ; '.'
000000000000cdb8         db  0xf8 ; '.'
000000000000cdb9         db  0xb9 ; '.'
000000000000cdba         db  0xff ; '.'
000000000000cdbb         db  0xff ; '.'
000000000000cdbc         db  0xf8 ; '.'
000000000000cdbd         db  0xb9 ; '.'
000000000000cdbe         db  0xff ; '.'
000000000000cdbf         db  0xff ; '.'
000000000000cdc0         db  0xf8 ; '.'
000000000000cdc1         db  0xb9 ; '.'
000000000000cdc2         db  0xff ; '.'
000000000000cdc3         db  0xff ; '.'
000000000000cdc4         db  0xf8 ; '.'
000000000000cdc5         db  0xb9 ; '.'
000000000000cdc6         db  0xff ; '.'
000000000000cdc7         db  0xff ; '.'
000000000000cdc8         db  0xf8 ; '.'
000000000000cdc9         db  0xb9 ; '.'
000000000000cdca         db  0xff ; '.'
000000000000cdcb         db  0xff ; '.'
000000000000cdcc         db  0xf8 ; '.'
000000000000cdcd         db  0xb9 ; '.'
000000000000cdce         db  0xff ; '.'
000000000000cdcf         db  0xff ; '.'
000000000000cdd0         db  0xf8 ; '.'
000000000000cdd1         db  0xb9 ; '.'
000000000000cdd2         db  0xff ; '.'
000000000000cdd3         db  0xff ; '.'
000000000000cdd4         db  0xf8 ; '.'
000000000000cdd5         db  0xb9 ; '.'
000000000000cdd6         db  0xff ; '.'
000000000000cdd7         db  0xff ; '.'
000000000000cdd8         db  0xf8 ; '.'
000000000000cdd9         db  0xb9 ; '.'
000000000000cdda         db  0xff ; '.'
000000000000cddb         db  0xff ; '.'
000000000000cddc         db  0xf8 ; '.'
000000000000cddd         db  0xb9 ; '.'
000000000000cdde         db  0xff ; '.'
000000000000cddf         db  0xff ; '.'
000000000000cde0         db  0xf8 ; '.'
000000000000cde1         db  0xb9 ; '.'
000000000000cde2         db  0xff ; '.'
000000000000cde3         db  0xff ; '.'
000000000000cde4         db  0xf8 ; '.'
000000000000cde5         db  0xb9 ; '.'
000000000000cde6         db  0xff ; '.'
000000000000cde7         db  0xff ; '.'
000000000000cde8         db  0xd0 ; '.'
000000000000cde9         db  0xbb ; '.'
000000000000cdea         db  0xff ; '.'
000000000000cdeb         db  0xff ; '.'
000000000000cdec         db  0xb8 ; '.'
000000000000cded         db  0xbb ; '.'
000000000000cdee         db  0xff ; '.'
000000000000cdef         db  0xff ; '.'
000000000000cdf0         db  0xb8 ; '.'
000000000000cdf1         db  0xbb ; '.'
000000000000cdf2         db  0xff ; '.'
000000000000cdf3         db  0xff ; '.'
000000000000cdf4         db  0xa0 ; '.'
000000000000cdf5         db  0xbb ; '.'
000000000000cdf6         db  0xff ; '.'
000000000000cdf7         db  0xff ; '.'
000000000000cdf8         db  0xb8 ; '.'
000000000000cdf9         db  0xbb ; '.'
000000000000cdfa         db  0xff ; '.'
000000000000cdfb         db  0xff ; '.'
000000000000cdfc         db  0x88 ; '.'
000000000000cdfd         db  0xbb ; '.'
000000000000cdfe         db  0xff ; '.'
000000000000cdff         db  0xff ; '.'
000000000000ce00         db  0xb8 ; '.'
000000000000ce01         db  0xbb ; '.'
000000000000ce02         db  0xff ; '.'
000000000000ce03         db  0xff ; '.'
000000000000ce04         db  0xf8 ; '.'
000000000000ce05         db  0xb7 ; '.'
000000000000ce06         db  0xff ; '.'
000000000000ce07         db  0xff ; '.'
000000000000ce08         db  0xb8 ; '.'
000000000000ce09         db  0xbb ; '.'
000000000000ce0a         db  0xff ; '.'
000000000000ce0b         db  0xff ; '.'
000000000000ce0c         db  0xb8 ; '.'
000000000000ce0d         db  0xbb ; '.'
000000000000ce0e         db  0xff ; '.'
000000000000ce0f         db  0xff ; '.'
000000000000ce10         db  0xb8 ; '.'
000000000000ce11         db  0xbb ; '.'
000000000000ce12         db  0xff ; '.'
000000000000ce13         db  0xff ; '.'
000000000000ce14         db  0x88 ; '.'
000000000000ce15         db  0xbb ; '.'
000000000000ce16         db  0xff ; '.'
000000000000ce17         db  0xff ; '.'
000000000000ce18         db  0x88 ; '.'
000000000000ce19         db  0xbb ; '.'
000000000000ce1a         db  0xff ; '.'
000000000000ce1b         db  0xff ; '.'
000000000000ce1c         db  0x88 ; '.'
000000000000ce1d         db  0xbb ; '.'
000000000000ce1e         db  0xff ; '.'
000000000000ce1f         db  0xff ; '.'
000000000000ce20         db  0x88 ; '.'
000000000000ce21         db  0xbb ; '.'
000000000000ce22         db  0xff ; '.'
000000000000ce23         db  0xff ; '.'
000000000000ce24         db  0x88 ; '.'
000000000000ce25         db  0xbb ; '.'
000000000000ce26         db  0xff ; '.'
000000000000ce27         db  0xff ; '.'
000000000000ce28         db  0x88 ; '.'
000000000000ce29         db  0xbb ; '.'
000000000000ce2a         db  0xff ; '.'
000000000000ce2b         db  0xff ; '.'
000000000000ce2c         db  0x88 ; '.'
000000000000ce2d         db  0xbb ; '.'
000000000000ce2e         db  0xff ; '.'
000000000000ce2f         db  0xff ; '.'
000000000000ce30         db  0x88 ; '.'
000000000000ce31         db  0xbb ; '.'
000000000000ce32         db  0xff ; '.'
000000000000ce33         db  0xff ; '.'
000000000000ce34         db  0x88 ; '.'
000000000000ce35         db  0xbb ; '.'
000000000000ce36         db  0xff ; '.'
000000000000ce37         db  0xff ; '.'
000000000000ce38         db  0x88 ; '.'
000000000000ce39         db  0xbb ; '.'
000000000000ce3a         db  0xff ; '.'
000000000000ce3b         db  0xff ; '.'
000000000000ce3c         db  0x88 ; '.'
000000000000ce3d         db  0xbb ; '.'
000000000000ce3e         db  0xff ; '.'
000000000000ce3f         db  0xff ; '.'
000000000000ce40         db  0x88 ; '.'
000000000000ce41         db  0xbb ; '.'
000000000000ce42         db  0xff ; '.'
000000000000ce43         db  0xff ; '.'
000000000000ce44         db  0x88 ; '.'
000000000000ce45         db  0xbb ; '.'
000000000000ce46         db  0xff ; '.'
000000000000ce47         db  0xff ; '.'
000000000000ce48         db  0x88 ; '.'
000000000000ce49         db  0xbb ; '.'
000000000000ce4a         db  0xff ; '.'
000000000000ce4b         db  0xff ; '.'
000000000000ce4c         db  0x88 ; '.'
000000000000ce4d         db  0xbb ; '.'
000000000000ce4e         db  0xff ; '.'
000000000000ce4f         db  0xff ; '.'
000000000000ce50         db  0x88 ; '.'
000000000000ce51         db  0xbb ; '.'
000000000000ce52         db  0xff ; '.'
000000000000ce53         db  0xff ; '.'
000000000000ce54         db  0xb8 ; '.'
000000000000ce55         db  0xbb ; '.'
000000000000ce56         db  0xff ; '.'
000000000000ce57         db  0xff ; '.'
000000000000ce58         db  0xb8 ; '.'
000000000000ce59         db  0xbb ; '.'
000000000000ce5a         db  0xff ; '.'
000000000000ce5b         db  0xff ; '.'
000000000000ce5c         db  0xb8 ; '.'
000000000000ce5d         db  0xbb ; '.'
000000000000ce5e         db  0xff ; '.'
000000000000ce5f         db  0xff ; '.'
000000000000ce60         db  0xb8 ; '.'
000000000000ce61         db  0xbb ; '.'
000000000000ce62         db  0xff ; '.'
000000000000ce63         db  0xff ; '.'
000000000000ce64         db  0xc8 ; '.'
000000000000ce65         db  0xb7 ; '.'
000000000000ce66         db  0xff ; '.'
000000000000ce67         db  0xff ; '.'
000000000000ce68         db  0xf8 ; '.'
000000000000ce69         db  0xb9 ; '.'
000000000000ce6a         db  0xff ; '.'
000000000000ce6b         db  0xff ; '.'
000000000000ce6c         db  0x88 ; '.'
000000000000ce6d         db  0xbb ; '.'
000000000000ce6e         db  0xff ; '.'
000000000000ce6f         db  0xff ; '.'
000000000000ce70         db  0x88 ; '.'
000000000000ce71         db  0xbb ; '.'
000000000000ce72         db  0xff ; '.'
000000000000ce73         db  0xff ; '.'
000000000000ce74         db  0x88 ; '.'
000000000000ce75         db  0xbb ; '.'
000000000000ce76         db  0xff ; '.'
000000000000ce77         db  0xff ; '.'
000000000000ce78         db  0x88 ; '.'
000000000000ce79         db  0xbb ; '.'
000000000000ce7a         db  0xff ; '.'
000000000000ce7b         db  0xff ; '.'
000000000000ce7c         db  0x88 ; '.'
000000000000ce7d         db  0xbb ; '.'
000000000000ce7e         db  0xff ; '.'
000000000000ce7f         db  0xff ; '.'
000000000000ce80         db  0x88 ; '.'
000000000000ce81         db  0xbb ; '.'
000000000000ce82         db  0xff ; '.'
000000000000ce83         db  0xff ; '.'
000000000000ce84         db  0x88 ; '.'
000000000000ce85         db  0xbb ; '.'
000000000000ce86         db  0xff ; '.'
000000000000ce87         db  0xff ; '.'
000000000000ce88         db  0x88 ; '.'
000000000000ce89         db  0xbb ; '.'
000000000000ce8a         db  0xff ; '.'
000000000000ce8b         db  0xff ; '.'
000000000000ce8c         db  0x88 ; '.'
000000000000ce8d         db  0xbb ; '.'
000000000000ce8e         db  0xff ; '.'
000000000000ce8f         db  0xff ; '.'
000000000000ce90         db  0x88 ; '.'
000000000000ce91         db  0xbb ; '.'
000000000000ce92         db  0xff ; '.'
000000000000ce93         db  0xff ; '.'
000000000000ce94         db  0x88 ; '.'
000000000000ce95         db  0xbb ; '.'
000000000000ce96         db  0xff ; '.'
000000000000ce97         db  0xff ; '.'
000000000000ce98         db  0x88 ; '.'
000000000000ce99         db  0xbb ; '.'
000000000000ce9a         db  0xff ; '.'
000000000000ce9b         db  0xff ; '.'
000000000000ce9c         db  0x88 ; '.'
000000000000ce9d         db  0xbb ; '.'
000000000000ce9e         db  0xff ; '.'
000000000000ce9f         db  0xff ; '.'
000000000000cea0         db  0x88 ; '.'
000000000000cea1         db  0xbb ; '.'
000000000000cea2         db  0xff ; '.'
000000000000cea3         db  0xff ; '.'
000000000000cea4         db  0x88 ; '.'
000000000000cea5         db  0xbb ; '.'
000000000000cea6         db  0xff ; '.'
000000000000cea7         db  0xff ; '.'
000000000000cea8         db  0x88 ; '.'
000000000000cea9         db  0xbb ; '.'
000000000000ceaa         db  0xff ; '.'
000000000000ceab         db  0xff ; '.'
000000000000ceac         db  0x88 ; '.'
000000000000cead         db  0xbb ; '.'
000000000000ceae         db  0xff ; '.'
000000000000ceaf         db  0xff ; '.'
000000000000ceb0         db  0x88 ; '.'
000000000000ceb1         db  0xbb ; '.'
000000000000ceb2         db  0xff ; '.'
000000000000ceb3         db  0xff ; '.'
000000000000ceb4         db  0x88 ; '.'
000000000000ceb5         db  0xbb ; '.'
000000000000ceb6         db  0xff ; '.'
000000000000ceb7         db  0xff ; '.'
000000000000ceb8         db  0x88 ; '.'
000000000000ceb9         db  0xbb ; '.'
000000000000ceba         db  0xff ; '.'
000000000000cebb         db  0xff ; '.'
000000000000cebc         db  0x88 ; '.'
000000000000cebd         db  0xbb ; '.'
000000000000cebe         db  0xff ; '.'
000000000000cebf         db  0xff ; '.'
000000000000cec0         db  0x88 ; '.'
000000000000cec1         db  0xbb ; '.'
000000000000cec2         db  0xff ; '.'
000000000000cec3         db  0xff ; '.'
000000000000cec4         db  0x88 ; '.'
000000000000cec5         db  0xbb ; '.'
000000000000cec6         db  0xff ; '.'
000000000000cec7         db  0xff ; '.'
000000000000cec8         db  0x88 ; '.'
000000000000cec9         db  0xbb ; '.'
000000000000ceca         db  0xff ; '.'
000000000000cecb         db  0xff ; '.'
000000000000cecc         db  0x88 ; '.'
000000000000cecd         db  0xbb ; '.'
000000000000cece         db  0xff ; '.'
000000000000cecf         db  0xff ; '.'
000000000000ced0         db  0x88 ; '.'
000000000000ced1         db  0xbb ; '.'
000000000000ced2         db  0xff ; '.'
000000000000ced3         db  0xff ; '.'
000000000000ced4         db  0xb8 ; '.'
000000000000ced5         db  0xbb ; '.'
000000000000ced6         db  0xff ; '.'
000000000000ced7         db  0xff ; '.'
000000000000ced8         db  0x88 ; '.'
000000000000ced9         db  0xba ; '.'
000000000000ceda         db  0xff ; '.'
000000000000cedb         db  0xff ; '.'
000000000000cedc         db  0x88 ; '.'
000000000000cedd         db  0xbb ; '.'
000000000000cede         db  0xff ; '.'
000000000000cedf         db  0xff ; '.'
000000000000cee0         db  0xb8 ; '.'
000000000000cee1         db  0xbb ; '.'
000000000000cee2         db  0xff ; '.'
000000000000cee3         db  0xff ; '.'
000000000000cee4         db  0x88 ; '.'
000000000000cee5         db  0xbb ; '.'
000000000000cee6         db  0xff ; '.'
000000000000cee7         db  0xff ; '.'
000000000000cee8         db  0xb8 ; '.'
000000000000cee9         db  0xbb ; '.'
000000000000ceea         db  0xff ; '.'
000000000000ceeb         db  0xff ; '.'
000000000000ceec         db  0x88 ; '.'
000000000000ceed         db  0xbb ; '.'
000000000000ceee         db  0xff ; '.'
000000000000ceef         db  0xff ; '.'
000000000000cef0         db  0x88 ; '.'
000000000000cef1         db  0xbb ; '.'
000000000000cef2         db  0xff ; '.'
000000000000cef3         db  0xff ; '.'
000000000000cef4         db  0x88 ; '.'
000000000000cef5         db  0xbb ; '.'
000000000000cef6         db  0xff ; '.'
000000000000cef7         db  0xff ; '.'
000000000000cef8         db  0x88 ; '.'
000000000000cef9         db  0xbb ; '.'
000000000000cefa         db  0xff ; '.'
000000000000cefb         db  0xff ; '.'
000000000000cefc         db  0x88 ; '.'
000000000000cefd         db  0xbb ; '.'
000000000000cefe         db  0xff ; '.'
000000000000ceff         db  0xff ; '.'
000000000000cf00         db  0x88 ; '.'
000000000000cf01         db  0xbb ; '.'
000000000000cf02         db  0xff ; '.'
000000000000cf03         db  0xff ; '.'
000000000000cf04         db  0x88 ; '.'
000000000000cf05         db  0xbb ; '.'
000000000000cf06         db  0xff ; '.'
000000000000cf07         db  0xff ; '.'
000000000000cf08         db  0x88 ; '.'
000000000000cf09         db  0xbb ; '.'
000000000000cf0a         db  0xff ; '.'
000000000000cf0b         db  0xff ; '.'
000000000000cf0c         db  0x88 ; '.'
000000000000cf0d         db  0xbb ; '.'
000000000000cf0e         db  0xff ; '.'
000000000000cf0f         db  0xff ; '.'
000000000000cf10         db  0x88 ; '.'
000000000000cf11         db  0xbb ; '.'
000000000000cf12         db  0xff ; '.'
000000000000cf13         db  0xff ; '.'
000000000000cf14         db  0x88 ; '.'
000000000000cf15         db  0xbb ; '.'
000000000000cf16         db  0xff ; '.'
000000000000cf17         db  0xff ; '.'
000000000000cf18         db  0x88 ; '.'
000000000000cf19         db  0xbb ; '.'
000000000000cf1a         db  0xff ; '.'
000000000000cf1b         db  0xff ; '.'
000000000000cf1c         db  0x88 ; '.'
000000000000cf1d         db  0xbb ; '.'
000000000000cf1e         db  0xff ; '.'
000000000000cf1f         db  0xff ; '.'
000000000000cf20         db  0x88 ; '.'
000000000000cf21         db  0xbb ; '.'
000000000000cf22         db  0xff ; '.'
000000000000cf23         db  0xff ; '.'
000000000000cf24         db  0x88 ; '.'
000000000000cf25         db  0xbb ; '.'
000000000000cf26         db  0xff ; '.'
000000000000cf27         db  0xff ; '.'
000000000000cf28         db  0x88 ; '.'
000000000000cf29         db  0xbb ; '.'
000000000000cf2a         db  0xff ; '.'
000000000000cf2b         db  0xff ; '.'
000000000000cf2c         db  0x88 ; '.'
000000000000cf2d         db  0xbb ; '.'
000000000000cf2e         db  0xff ; '.'
000000000000cf2f         db  0xff ; '.'
000000000000cf30         db  0x88 ; '.'
000000000000cf31         db  0xbb ; '.'
000000000000cf32         db  0xff ; '.'
000000000000cf33         db  0xff ; '.'
000000000000cf34         db  0x88 ; '.'
000000000000cf35         db  0xbb ; '.'
000000000000cf36         db  0xff ; '.'
000000000000cf37         db  0xff ; '.'
000000000000cf38         db  0x88 ; '.'
000000000000cf39         db  0xbb ; '.'
000000000000cf3a         db  0xff ; '.'
000000000000cf3b         db  0xff ; '.'
000000000000cf3c         db  0x88 ; '.'
000000000000cf3d         db  0xbb ; '.'
000000000000cf3e         db  0xff ; '.'
000000000000cf3f         db  0xff ; '.'
000000000000cf40         db  0x88 ; '.'
000000000000cf41         db  0xbb ; '.'
000000000000cf42         db  0xff ; '.'
000000000000cf43         db  0xff ; '.'
000000000000cf44         db  0x88 ; '.'
000000000000cf45         db  0xbb ; '.'
000000000000cf46         db  0xff ; '.'
000000000000cf47         db  0xff ; '.'
000000000000cf48         db  0x88 ; '.'
000000000000cf49         db  0xbb ; '.'
000000000000cf4a         db  0xff ; '.'
000000000000cf4b         db  0xff ; '.'
000000000000cf4c         db  0x88 ; '.'
000000000000cf4d         db  0xbb ; '.'
000000000000cf4e         db  0xff ; '.'
000000000000cf4f         db  0xff ; '.'
000000000000cf50         db  0x88 ; '.'
000000000000cf51         db  0xbb ; '.'
000000000000cf52         db  0xff ; '.'
000000000000cf53         db  0xff ; '.'
000000000000cf54         db  0xf8 ; '.'
000000000000cf55         db  0xb6 ; '.'
000000000000cf56         db  0xff ; '.'
000000000000cf57         db  0xff ; '.'
000000000000cf58         db  0xb8 ; '.'
000000000000cf59         db  0xbb ; '.'
000000000000cf5a         db  0xff ; '.'
000000000000cf5b         db  0xff ; '.'
000000000000cf5c         db  0xf8 ; '.'
000000000000cf5d         db  0xb6 ; '.'
000000000000cf5e         db  0xff ; '.'
000000000000cf5f         db  0xff ; '.'
000000000000cf60         db  0xa0 ; '.'
000000000000cf61         db  0xbb ; '.'
000000000000cf62         db  0xff ; '.'
000000000000cf63         db  0xff ; '.'
000000000000cf64         db  0x00 ; '.'
000000000000cf65         db  0x00 ; '.'
000000000000cf66         db  0x00 ; '.'
000000000000cf67         db  0x00 ; '.'
000000000000cf68         db  0x00 ; '.'
000000000000cf69         db  0x00 ; '.'
000000000000cf6a         db  0x00 ; '.'
000000000000cf6b         db  0x00 ; '.'
000000000000cf6c         db  0x00 ; '.'
000000000000cf6d         db  0x00 ; '.'
000000000000cf6e         db  0x00 ; '.'
000000000000cf6f         db  0x00 ; '.'
000000000000cf70         db  0x00 ; '.'
000000000000cf71         db  0x00 ; '.'
000000000000cf72         db  0x00 ; '.'
000000000000cf73         db  0x00 ; '.'
000000000000cf74         db  0x00 ; '.'
000000000000cf75         db  0x00 ; '.'
000000000000cf76         db  0x00 ; '.'
000000000000cf77         db  0x00 ; '.'
000000000000cf78         db  0x00 ; '.'
000000000000cf79         db  0x00 ; '.'
000000000000cf7a         db  0x00 ; '.'
000000000000cf7b         db  0x00 ; '.'
000000000000cf7c         db  0x00 ; '.'
000000000000cf7d         db  0x00 ; '.'
000000000000cf7e         db  0x00 ; '.'
000000000000cf7f         db  0x00 ; '.'
                     quoting_style_vals:
000000000000cf80         db  0x00 ; '.'
000000000000cf81         db  0x00 ; '.'
000000000000cf82         db  0x00 ; '.'
000000000000cf83         db  0x00 ; '.'
000000000000cf84         db  0x01 ; '.'
000000000000cf85         db  0x00 ; '.'
000000000000cf86         db  0x00 ; '.'
000000000000cf87         db  0x00 ; '.'
000000000000cf88         db  0x02 ; '.'
000000000000cf89         db  0x00 ; '.'
000000000000cf8a         db  0x00 ; '.'
000000000000cf8b         db  0x00 ; '.'
000000000000cf8c         db  0x03 ; '.'
000000000000cf8d         db  0x00 ; '.'
000000000000cf8e         db  0x00 ; '.'
000000000000cf8f         db  0x00 ; '.'
000000000000cf90         db  0x04 ; '.'
000000000000cf91         db  0x00 ; '.'
000000000000cf92         db  0x00 ; '.'
000000000000cf93         db  0x00 ; '.'
000000000000cf94         db  0x05 ; '.'
000000000000cf95         db  0x00 ; '.'
000000000000cf96         db  0x00 ; '.'
000000000000cf97         db  0x00 ; '.'
000000000000cf98         db  0x06 ; '.'
000000000000cf99         db  0x00 ; '.'
000000000000cf9a         db  0x00 ; '.'
000000000000cf9b         db  0x00 ; '.'
000000000000cf9c         db  0x07 ; '.'
000000000000cf9d         db  0x00 ; '.'
000000000000cf9e         db  0x00 ; '.'
000000000000cf9f         db  0x00 ; '.'
000000000000cfa0         db  0x08 ; '.'
000000000000cfa1         db  0x00 ; '.'
000000000000cfa2         db  0x00 ; '.'
000000000000cfa3         db  0x00 ; '.'
000000000000cfa4         db  0x09 ; '.'
000000000000cfa5         db  0x00 ; '.'
000000000000cfa6         db  0x00 ; '.'
000000000000cfa7         db  0x00 ; '.'
                     aSSSn:
000000000000cfa8         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000cfb4         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000cfbb         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000cfbc         db  0x43 ; 'C'
000000000000cfbd         db  0x29 ; ')'
000000000000cfbe         db  0x00 ; '.'
                     aWrittenBySn:
000000000000cfbf         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000cfcf         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000cfe6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000d002         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000d017         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000d02d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000d041         align      8
                     aNlicenseGplv3G:
000000000000d048         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000d114         align      8
                     aWrittenBySSSna:
000000000000d118         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_d138:        // aWrittenBySSSns
000000000000d138         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000d15c         align      32
                     aWrittenBySSSns_d160:        // aWrittenBySSSns
000000000000d160         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_d188:        // aWrittenBySSSns
000000000000d188         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000d1b4         align      8
                     aWrittenBySSSns_d1b8:        // aWrittenBySSSns
000000000000d1b8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000d1e8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000d21c         align      32
                     aWrittenBySSSns_d220:        // aWrittenBySSSns
000000000000d220         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000d25c         align      32
                     aGeneralHelpUsi:
000000000000d260         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000d2a1         align      4
                     switch_table_d2a4:        // switch_table
000000000000d2a4         dd         version_etc_arn.loc_9fd6-switch_table_d2a4, version_etc_arn.loc_a068-switch_table_d2a4, version_etc_arn.loc_a0a8-switch_table_d2a4, version_etc_arn.loc_a0f0-switch_table_d2a4 ; switch table used at 0x9f54 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000d2b4         dd         version_etc_arn.loc_a140-switch_table_d2a4, version_etc_arn.loc_a198-switch_table_d2a4, version_etc_arn.loc_a1c8-switch_table_d2a4, version_etc_arn.loc_a230-switch_table_d2a4
000000000000d2c4         dd         version_etc_arn.loc_9f60-switch_table_d2a4, version_etc_arn.loc_a010-switch_table_d2a4
000000000000d2cc         align      32
                     version_etc_copyright:
000000000000d2e0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000d30f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     double_d320:        // double
000000000000d320         dq         0.0                                         ; DATA XREF=xstrtod+77, xstrtod+159
                     aCoreutils831li:
000000000000d328         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoumax+908
                     a0StrtolbaseStr:
000000000000d348         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoumax+915
000000000000d36e         align      16
                     switch_table_d370:        // switch_table
000000000000d370         dd         xstrtoumax.loc_ad06-switch_table_d370, 2 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_ace3-switch_table_d370, xstrtoumax.loc_abfc-switch_table_d370 ; switch table used at 0xabb6 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000d384         dd         xstrtoumax.loc_ad1c-switch_table_d370, 3 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_ac9f-switch_table_d370, xstrtoumax.loc_abfc-switch_table_d370
000000000000d39c         dd         xstrtoumax.loc_abb8-switch_table_d370, 2 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_acc0-switch_table_d370, 3 dup (xstrtoumax.loc_abfc-switch_table_d370)
000000000000d3b8         dd         xstrtoumax.loc_ac7f-switch_table_d370, 4 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_ac5a-switch_table_d370, xstrtoumax.loc_ac34-switch_table_d370
000000000000d3d4         dd         7 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_ac1d-switch_table_d370, xstrtoumax.loc_abe0-switch_table_d370, 3 dup (xstrtoumax.loc_abfc-switch_table_d370)
000000000000d404         dd         xstrtoumax.loc_ad1c-switch_table_d370, 3 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_ac9f-switch_table_d370, xstrtoumax.loc_abfc-switch_table_d370
000000000000d41c         dd         xstrtoumax.loc_abb8-switch_table_d370, 6 dup (xstrtoumax.loc_abfc-switch_table_d370), xstrtoumax.loc_ac7f-switch_table_d370, 2 dup (xstrtoumax.loc_abfc-switch_table_d370)
000000000000d444         dd         xstrtoumax.loc_ac07-switch_table_d370
                     __PRETTY_FUNCTION__.4162:
000000000000d448         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
000000000000d453         db  0x43 ; 'C'                                         ; DATA XREF=c_strtod+80, hard_locale+24
000000000000d454         db  0x00 ; '.'
000000000000d455         db  0x00 ; '.'
000000000000d456         db  0x00 ; '.'
000000000000d457         db  0x00 ; '.'
                     double_d458:        // double
000000000000d458         dq         -9.22337e+18                                ; DATA XREF=dtotimespec
                     double_d460:        // double
000000000000d460         dq         9.22337e+18                                 ; DATA XREF=dtotimespec+14
                     double_d468:        // double
000000000000d468         dq         1.0e+09                                     ; DATA XREF=dtotimespec+52
                     aPosix:
000000000000d470         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000000d476         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48


        ; Section .eh_frame_hdr
        ; Range: [0xd47c; 0xd8c8[ (1100 bytes)
        ; File offset : [54396; 55496[ (1100 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000d47c         db  0x01 ; '.'
000000000000d47d         db  0x1b ; '.'
000000000000d47e         db  0x03 ; '.'
000000000000d47f         db  0x3b ; ';'
000000000000d480         db  0x48 ; 'H'
000000000000d481         db  0x04 ; '.'
000000000000d482         db  0x00 ; '.'
000000000000d483         db  0x00 ; '.'
000000000000d484         db  0x88 ; '.'
000000000000d485         db  0x00 ; '.'
000000000000d486         db  0x00 ; '.'
000000000000d487         db  0x00 ; '.'
000000000000d488         db  0x44 ; 'D'
000000000000d489         db  0x46 ; 'F'
000000000000d48a         db  0xff ; '.'
000000000000d48b         db  0xff ; '.'
000000000000d48c         db  0x94 ; '.'
000000000000d48d         db  0x04 ; '.'
000000000000d48e         db  0x00 ; '.'
000000000000d48f         db  0x00 ; '.'
000000000000d490         db  0xc4 ; '.'
000000000000d491         db  0x4a ; 'J'
000000000000d492         db  0xff ; '.'
000000000000d493         db  0xff ; '.'
000000000000d494         db  0xbc ; '.'
000000000000d495         db  0x04 ; '.'
000000000000d496         db  0x00 ; '.'
000000000000d497         db  0x00 ; '.'
000000000000d498         db  0xd4 ; '.'
000000000000d499         db  0x4a ; 'J'
000000000000d49a         db  0xff ; '.'
000000000000d49b         db  0xff ; '.'
000000000000d49c         db  0xdc ; '.'
000000000000d49d         db  0x07 ; '.'
000000000000d49e         db  0x00 ; '.'
000000000000d49f         db  0x00 ; '.'
000000000000d4a0         db  0x34 ; '4'
000000000000d4a1         db  0x74 ; 't'
000000000000d4a2         db  0xff ; '.'
000000000000d4a3         db  0xff ; '.'
000000000000d4a4         db  0x64 ; 'd'
000000000000d4a5         db  0x04 ; '.'
000000000000d4a6         db  0x00 ; '.'
000000000000d4a7         db  0x00 ; '.'
000000000000d4a8         db  0x44 ; 'D'
000000000000d4a9         db  0x75 ; 'u'
000000000000d4aa         db  0xff ; '.'
000000000000d4ab         db  0xff ; '.'
000000000000d4ac         db  0xd4 ; '.'
000000000000d4ad         db  0x04 ; '.'
000000000000d4ae         db  0x00 ; '.'
000000000000d4af         db  0x00 ; '.'
000000000000d4b0         db  0x54 ; 'T'
000000000000d4b1         db  0x75 ; 'u'
000000000000d4b2         db  0xff ; '.'
000000000000d4b3         db  0xff ; '.'
000000000000d4b4         db  0xe8 ; '.'
000000000000d4b5         db  0x04 ; '.'
000000000000d4b6         db  0x00 ; '.'
000000000000d4b7         db  0x00 ; '.'
000000000000d4b8         db  0x64 ; 'd'
000000000000d4b9         db  0x75 ; 'u'
000000000000d4ba         db  0xff ; '.'
000000000000d4bb         db  0xff ; '.'
000000000000d4bc         db  0xfc ; '.'
000000000000d4bd         db  0x04 ; '.'
000000000000d4be         db  0x00 ; '.'
000000000000d4bf         db  0x00 ; '.'
000000000000d4c0         db  0xa4 ; '.'
000000000000d4c1         db  0x75 ; 'u'
000000000000d4c2         db  0xff ; '.'
000000000000d4c3         db  0xff ; '.'
000000000000d4c4         db  0x10 ; '.'
000000000000d4c5         db  0x05 ; '.'
000000000000d4c6         db  0x00 ; '.'
000000000000d4c7         db  0x00 ; '.'
000000000000d4c8         db  0x14 ; '.'
000000000000d4c9         db  0x76 ; 'v'
000000000000d4ca         db  0xff ; '.'
000000000000d4cb         db  0xff ; '.'
000000000000d4cc         db  0x54 ; 'T'
000000000000d4cd         db  0x05 ; '.'
000000000000d4ce         db  0x00 ; '.'
000000000000d4cf         db  0x00 ; '.'
000000000000d4d0         db  0x94 ; '.'
000000000000d4d1         db  0x76 ; 'v'
000000000000d4d2         db  0xff ; '.'
000000000000d4d3         db  0xff ; '.'
000000000000d4d4         db  0x80 ; '.'
000000000000d4d5         db  0x05 ; '.'
000000000000d4d6         db  0x00 ; '.'
000000000000d4d7         db  0x00 ; '.'
000000000000d4d8         db  0xd4 ; '.'
000000000000d4d9         db  0x77 ; 'w'
000000000000d4da         db  0xff ; '.'
000000000000d4db         db  0xff ; '.'
000000000000d4dc         db  0xcc ; '.'
000000000000d4dd         db  0x05 ; '.'
000000000000d4de         db  0x00 ; '.'
000000000000d4df         db  0x00 ; '.'
000000000000d4e0         db  0x24 ; '$'
000000000000d4e1         db  0x79 ; 'y'
000000000000d4e2         db  0xff ; '.'
000000000000d4e3         db  0xff ; '.'
000000000000d4e4         db  0x18 ; '.'
000000000000d4e5         db  0x06 ; '.'
000000000000d4e6         db  0x00 ; '.'
000000000000d4e7         db  0x00 ; '.'
000000000000d4e8         db  0x24 ; '$'
000000000000d4e9         db  0x7a ; 'z'
000000000000d4ea         db  0xff ; '.'
000000000000d4eb         db  0xff ; '.'
000000000000d4ec         db  0x5c ; '\'
000000000000d4ed         db  0x06 ; '.'
000000000000d4ee         db  0x00 ; '.'
000000000000d4ef         db  0x00 ; '.'
000000000000d4f0         db  0xf4 ; '.'
000000000000d4f1         db  0x7a ; 'z'
000000000000d4f2         db  0xff ; '.'
000000000000d4f3         db  0xff ; '.'
000000000000d4f4         db  0x98 ; '.'
000000000000d4f5         db  0x06 ; '.'
000000000000d4f6         db  0x00 ; '.'
000000000000d4f7         db  0x00 ; '.'
000000000000d4f8         db  0x54 ; 'T'
000000000000d4f9         db  0x7d ; '}'
000000000000d4fa         db  0xff ; '.'
000000000000d4fb         db  0xff ; '.'
000000000000d4fc         db  0xe8 ; '.'
000000000000d4fd         db  0x06 ; '.'
000000000000d4fe         db  0x00 ; '.'
000000000000d4ff         db  0x00 ; '.'
000000000000d500         db  0x24 ; '$'
000000000000d501         db  0x7f ; '.'
000000000000d502         db  0xff ; '.'
000000000000d503         db  0xff ; '.'
000000000000d504         db  0x2c ; ','
000000000000d505         db  0x07 ; '.'
000000000000d506         db  0x00 ; '.'
000000000000d507         db  0x00 ; '.'
000000000000d508         db  0x14 ; '.'
000000000000d509         db  0x86 ; '.'
000000000000d50a         db  0xff ; '.'
000000000000d50b         db  0xff ; '.'
000000000000d50c         db  0x60 ; '`'
000000000000d50d         db  0x07 ; '.'
000000000000d50e         db  0x00 ; '.'
000000000000d50f         db  0x00 ; '.'
000000000000d510         db  0x94 ; '.'
000000000000d511         db  0x8c ; '.'
000000000000d512         db  0xff ; '.'
000000000000d513         db  0xff ; '.'
000000000000d514         db  0xb0 ; '.'
000000000000d515         db  0x07 ; '.'
000000000000d516         db  0x00 ; '.'
000000000000d517         db  0x00 ; '.'
000000000000d518         db  0x54 ; 'T'
000000000000d519         db  0x91 ; '.'
000000000000d51a         db  0xff ; '.'
000000000000d51b         db  0xff ; '.'
000000000000d51c         db  0x44 ; 'D'
000000000000d51d         db  0x08 ; '.'
000000000000d51e         db  0x00 ; '.'
000000000000d51f         db  0x00 ; '.'
000000000000d520         db  0x64 ; 'd'
000000000000d521         db  0x91 ; '.'
000000000000d522         db  0xff ; '.'
000000000000d523         db  0xff ; '.'
000000000000d524         db  0x58 ; 'X'
000000000000d525         db  0x08 ; '.'
000000000000d526         db  0x00 ; '.'
000000000000d527         db  0x00 ; '.'
000000000000d528         db  0x84 ; '.'
000000000000d529         db  0x92 ; '.'
000000000000d52a         db  0xff ; '.'
000000000000d52b         db  0xff ; '.'
000000000000d52c         db  0xa4 ; '.'
000000000000d52d         db  0x08 ; '.'
000000000000d52e         db  0x00 ; '.'
000000000000d52f         db  0x00 ; '.'
000000000000d530         db  0x04 ; '.'
000000000000d531         db  0x93 ; '.'
000000000000d532         db  0xff ; '.'
000000000000d533         db  0xff ; '.'
000000000000d534         db  0xd0 ; '.'
000000000000d535         db  0x08 ; '.'
000000000000d536         db  0x00 ; '.'
000000000000d537         db  0x00 ; '.'
000000000000d538         db  0x24 ; '$'
000000000000d539         db  0x94 ; '.'
000000000000d53a         db  0xff ; '.'
000000000000d53b         db  0xff ; '.'
000000000000d53c         db  0x30 ; '0'
000000000000d53d         db  0x09 ; '.'
000000000000d53e         db  0x00 ; '.'
000000000000d53f         db  0x00 ; '.'
000000000000d540         db  0x94 ; '.'
000000000000d541         db  0x94 ; '.'
000000000000d542         db  0xff ; '.'
000000000000d543         db  0xff ; '.'
000000000000d544         db  0x7c ; '|'
000000000000d545         db  0x09 ; '.'
000000000000d546         db  0x00 ; '.'
000000000000d547         db  0x00 ; '.'
000000000000d548         db  0xe4 ; '.'
000000000000d549         db  0x94 ; '.'
000000000000d54a         db  0xff ; '.'
000000000000d54b         db  0xff ; '.'
000000000000d54c         db  0xbc ; '.'
000000000000d54d         db  0x09 ; '.'
000000000000d54e         db  0x00 ; '.'
000000000000d54f         db  0x00 ; '.'
000000000000d550         db  0xa4 ; '.'
000000000000d551         db  0x95 ; '.'
000000000000d552         db  0xff ; '.'
000000000000d553         db  0xff ; '.'
000000000000d554         db  0xfc ; '.'
000000000000d555         db  0x09 ; '.'
000000000000d556         db  0x00 ; '.'
000000000000d557         db  0x00 ; '.'
000000000000d558         db  0xb4 ; '.'
000000000000d559         db  0x95 ; '.'
000000000000d55a         db  0xff ; '.'
000000000000d55b         db  0xff ; '.'
000000000000d55c         db  0x10 ; '.'
000000000000d55d         db  0x0a ; '.'
000000000000d55e         db  0x00 ; '.'
000000000000d55f         db  0x00 ; '.'
000000000000d560         db  0xc4 ; '.'
000000000000d561         db  0x95 ; '.'
000000000000d562         db  0xff ; '.'
000000000000d563         db  0xff ; '.'
000000000000d564         db  0x24 ; '$'
000000000000d565         db  0x0a ; '.'
000000000000d566         db  0x00 ; '.'
000000000000d567         db  0x00 ; '.'
000000000000d568         db  0x74 ; 't'
000000000000d569         db  0x96 ; '.'
000000000000d56a         db  0xff ; '.'
000000000000d56b         db  0xff ; '.'
000000000000d56c         db  0x54 ; 'T'
000000000000d56d         db  0x0a ; '.'
000000000000d56e         db  0x00 ; '.'
000000000000d56f         db  0x00 ; '.'
000000000000d570         db  0xd4 ; '.'
000000000000d571         db  0x96 ; '.'
000000000000d572         db  0xff ; '.'
000000000000d573         db  0xff ; '.'
000000000000d574         db  0x88 ; '.'
000000000000d575         db  0x0a ; '.'
000000000000d576         db  0x00 ; '.'
000000000000d577         db  0x00 ; '.'
000000000000d578         db  0x34 ; '4'
000000000000d579         db  0x97 ; '.'
000000000000d57a         db  0xff ; '.'
000000000000d57b         db  0xff ; '.'
000000000000d57c         db  0xb4 ; '.'
000000000000d57d         db  0x0a ; '.'
000000000000d57e         db  0x00 ; '.'
000000000000d57f         db  0x00 ; '.'
000000000000d580         db  0x94 ; '.'
000000000000d581         db  0x97 ; '.'
000000000000d582         db  0xff ; '.'
000000000000d583         db  0xff ; '.'
000000000000d584         db  0xc8 ; '.'
000000000000d585         db  0x0a ; '.'
000000000000d586         db  0x00 ; '.'
000000000000d587         db  0x00 ; '.'
000000000000d588         db  0xe4 ; '.'
000000000000d589         db  0x97 ; '.'
000000000000d58a         db  0xff ; '.'
000000000000d58b         db  0xff ; '.'
000000000000d58c         db  0xf4 ; '.'
000000000000d58d         db  0x0a ; '.'
000000000000d58e         db  0x00 ; '.'
000000000000d58f         db  0x00 ; '.'
000000000000d590         db  0x54 ; 'T'
000000000000d591         db  0x98 ; '.'
000000000000d592         db  0xff ; '.'
000000000000d593         db  0xff ; '.'
000000000000d594         db  0x14 ; '.'
000000000000d595         db  0x0b ; '.'
000000000000d596         db  0x00 ; '.'
000000000000d597         db  0x00 ; '.'
000000000000d598         db  0xf4 ; '.'
000000000000d599         db  0x98 ; '.'
000000000000d59a         db  0xff ; '.'
000000000000d59b         db  0xff ; '.'
000000000000d59c         db  0x28 ; '('
000000000000d59d         db  0x0b ; '.'
000000000000d59e         db  0x00 ; '.'
000000000000d59f         db  0x00 ; '.'
000000000000d5a0         db  0x04 ; '.'
000000000000d5a1         db  0x99 ; '.'
000000000000d5a2         db  0xff ; '.'
000000000000d5a3         db  0xff ; '.'
000000000000d5a4         db  0x3c ; '<'
000000000000d5a5         db  0x0b ; '.'
000000000000d5a6         db  0x00 ; '.'
000000000000d5a7         db  0x00 ; '.'
000000000000d5a8         db  0x14 ; '.'
000000000000d5a9         db  0x99 ; '.'
000000000000d5aa         db  0xff ; '.'
000000000000d5ab         db  0xff ; '.'
000000000000d5ac         db  0x50 ; 'P'
000000000000d5ad         db  0x0b ; '.'
000000000000d5ae         db  0x00 ; '.'
000000000000d5af         db  0x00 ; '.'
000000000000d5b0         db  0x44 ; 'D'
000000000000d5b1         db  0x99 ; '.'
000000000000d5b2         db  0xff ; '.'
000000000000d5b3         db  0xff ; '.'
000000000000d5b4         db  0x6c ; 'l'
000000000000d5b5         db  0x0b ; '.'
000000000000d5b6         db  0x00 ; '.'
000000000000d5b7         db  0x00 ; '.'
000000000000d5b8         db  0x64 ; 'd'
000000000000d5b9         db  0x9a ; '.'
000000000000d5ba         db  0xff ; '.'
000000000000d5bb         db  0xff ; '.'
000000000000d5bc         db  0xcc ; '.'
000000000000d5bd         db  0x0b ; '.'
000000000000d5be         db  0x00 ; '.'
000000000000d5bf         db  0x00 ; '.'
000000000000d5c0         db  0xe4 ; '.'
000000000000d5c1         db  0x9a ; '.'
000000000000d5c2         db  0xff ; '.'
000000000000d5c3         db  0xff ; '.'
000000000000d5c4         db  0xe0 ; '.'
000000000000d5c5         db  0x0b ; '.'
000000000000d5c6         db  0x00 ; '.'
000000000000d5c7         db  0x00 ; '.'
000000000000d5c8         db  0x24 ; '$'
000000000000d5c9         db  0x9c ; '.'
000000000000d5ca         db  0xff ; '.'
000000000000d5cb         db  0xff ; '.'
000000000000d5cc         db  0x40 ; '@'
000000000000d5cd         db  0x0c ; '.'
000000000000d5ce         db  0x00 ; '.'
000000000000d5cf         db  0x00 ; '.'
000000000000d5d0         db  0x34 ; '4'
000000000000d5d1         db  0x9c ; '.'
000000000000d5d2         db  0xff ; '.'
000000000000d5d3         db  0xff ; '.'
000000000000d5d4         db  0x54 ; 'T'
000000000000d5d5         db  0x0c ; '.'
000000000000d5d6         db  0x00 ; '.'
000000000000d5d7         db  0x00 ; '.'
000000000000d5d8         db  0x44 ; 'D'
000000000000d5d9         db  0x9c ; '.'
000000000000d5da         db  0xff ; '.'
000000000000d5db         db  0xff ; '.'
000000000000d5dc         db  0x68 ; 'h'
000000000000d5dd         db  0x0c ; '.'
000000000000d5de         db  0x00 ; '.'
000000000000d5df         db  0x00 ; '.'
000000000000d5e0         db  0x54 ; 'T'
000000000000d5e1         db  0x9c ; '.'
000000000000d5e2         db  0xff ; '.'
000000000000d5e3         db  0xff ; '.'
000000000000d5e4         db  0x7c ; '|'
000000000000d5e5         db  0x0c ; '.'
000000000000d5e6         db  0x00 ; '.'
000000000000d5e7         db  0x00 ; '.'
000000000000d5e8         db  0xa4 ; '.'
000000000000d5e9         db  0x9c ; '.'
000000000000d5ea         db  0xff ; '.'
000000000000d5eb         db  0xff ; '.'
000000000000d5ec         db  0x90 ; '.'
000000000000d5ed         db  0x0c ; '.'
000000000000d5ee         db  0x00 ; '.'
000000000000d5ef         db  0x00 ; '.'
000000000000d5f0         db  0x04 ; '.'
000000000000d5f1         db  0x9d ; '.'
000000000000d5f2         db  0xff ; '.'
000000000000d5f3         db  0xff ; '.'
000000000000d5f4         db  0xa4 ; '.'
000000000000d5f5         db  0x0c ; '.'
000000000000d5f6         db  0x00 ; '.'
000000000000d5f7         db  0x00 ; '.'
000000000000d5f8         db  0x54 ; 'T'
000000000000d5f9         db  0x9e ; '.'
000000000000d5fa         db  0xff ; '.'
000000000000d5fb         db  0xff ; '.'
000000000000d5fc         db  0xe0 ; '.'
000000000000d5fd         db  0x0c ; '.'
000000000000d5fe         db  0x00 ; '.'
000000000000d5ff         db  0x00 ; '.'
000000000000d600         db  0xb4 ; '.'
000000000000d601         db  0x9e ; '.'
000000000000d602         db  0xff ; '.'
000000000000d603         db  0xff ; '.'
000000000000d604         db  0x18 ; '.'
000000000000d605         db  0x0d ; '.'
000000000000d606         db  0x00 ; '.'
000000000000d607         db  0x00 ; '.'
000000000000d608         db  0x04 ; '.'
000000000000d609         db  0x9f ; '.'
000000000000d60a         db  0xff ; '.'
000000000000d60b         db  0xff ; '.'
000000000000d60c         db  0x2c ; ','
000000000000d60d         db  0x0d ; '.'
000000000000d60e         db  0x00 ; '.'
000000000000d60f         db  0x00 ; '.'
000000000000d610         db  0x84 ; '.'
000000000000d611         db  0x9f ; '.'
000000000000d612         db  0xff ; '.'
000000000000d613         db  0xff ; '.'
000000000000d614         db  0x60 ; '`'
000000000000d615         db  0x0d ; '.'
000000000000d616         db  0x00 ; '.'
000000000000d617         db  0x00 ; '.'
000000000000d618         db  0xf4 ; '.'
000000000000d619         db  0x9f ; '.'
000000000000d61a         db  0xff ; '.'
000000000000d61b         db  0xff ; '.'
000000000000d61c         db  0x74 ; 't'
000000000000d61d         db  0x0d ; '.'
000000000000d61e         db  0x00 ; '.'
000000000000d61f         db  0x00 ; '.'
000000000000d620         db  0x64 ; 'd'
000000000000d621         db  0xa0 ; '.'
000000000000d622         db  0xff ; '.'
000000000000d623         db  0xff ; '.'
000000000000d624         db  0xc0 ; '.'
000000000000d625         db  0x0d ; '.'
000000000000d626         db  0x00 ; '.'
000000000000d627         db  0x00 ; '.'
000000000000d628         db  0xa4 ; '.'
000000000000d629         db  0xa0 ; '.'
000000000000d62a         db  0xff ; '.'
000000000000d62b         db  0xff ; '.'
000000000000d62c         db  0xd4 ; '.'
000000000000d62d         db  0x0d ; '.'
000000000000d62e         db  0x00 ; '.'
000000000000d62f         db  0x00 ; '.'
000000000000d630         db  0xc4 ; '.'
000000000000d631         db  0xa0 ; '.'
000000000000d632         db  0xff ; '.'
000000000000d633         db  0xff ; '.'
000000000000d634         db  0xe8 ; '.'
000000000000d635         db  0x0d ; '.'
000000000000d636         db  0x00 ; '.'
000000000000d637         db  0x00 ; '.'
000000000000d638         db  0x84 ; '.'
000000000000d639         db  0xa2 ; '.'
000000000000d63a         db  0xff ; '.'
000000000000d63b         db  0xff ; '.'
000000000000d63c         db  0x34 ; '4'
000000000000d63d         db  0x0e ; '.'
000000000000d63e         db  0x00 ; '.'
000000000000d63f         db  0x00 ; '.'
000000000000d640         db  0x14 ; '.'
000000000000d641         db  0xa3 ; '.'
000000000000d642         db  0xff ; '.'
000000000000d643         db  0xff ; '.'
000000000000d644         db  0x60 ; '`'
000000000000d645         db  0x0e ; '.'
000000000000d646         db  0x00 ; '.'
000000000000d647         db  0x00 ; '.'
000000000000d648         db  0xf4 ; '.'
000000000000d649         db  0xa3 ; '.'
000000000000d64a         db  0xff ; '.'
000000000000d64b         db  0xff ; '.'
000000000000d64c         db  0x8c ; '.'
000000000000d64d         db  0x0e ; '.'
000000000000d64e         db  0x00 ; '.'
000000000000d64f         db  0x00 ; '.'
000000000000d650         db  0x34 ; '4'
000000000000d651         db  0xa6 ; '.'
000000000000d652         db  0xff ; '.'
000000000000d653         db  0xff ; '.'
000000000000d654         db  0xc4 ; '.'
000000000000d655         db  0x0e ; '.'
000000000000d656         db  0x00 ; '.'
000000000000d657         db  0x00 ; '.'
000000000000d658         db  0xc4 ; '.'
000000000000d659         db  0xa8 ; '.'
000000000000d65a         db  0xff ; '.'
000000000000d65b         db  0xff ; '.'
000000000000d65c         db  0x00 ; '.'
000000000000d65d         db  0x0f ; '.'
000000000000d65e         db  0x00 ; '.'
000000000000d65f         db  0x00 ; '.'
000000000000d660         db  0x24 ; '$'
000000000000d661         db  0xa9 ; '.'
000000000000d662         db  0xff ; '.'
000000000000d663         db  0xff ; '.'
000000000000d664         db  0x24 ; '$'
000000000000d665         db  0x0f ; '.'
000000000000d666         db  0x00 ; '.'
000000000000d667         db  0x00 ; '.'
000000000000d668         db  0x34 ; '4'
000000000000d669         db  0xab ; '.'
000000000000d66a         db  0xff ; '.'
000000000000d66b         db  0xff ; '.'
000000000000d66c         db  0x5c ; '\'
000000000000d66d         db  0x0f ; '.'
000000000000d66e         db  0x00 ; '.'
000000000000d66f         db  0x00 ; '.'
000000000000d670         db  0xd4 ; '.'
000000000000d671         db  0xab ; '.'
000000000000d672         db  0xff ; '.'
000000000000d673         db  0xff ; '.'
000000000000d674         db  0x74 ; 't'
000000000000d675         db  0x0f ; '.'
000000000000d676         db  0x00 ; '.'
000000000000d677         db  0x00 ; '.'
000000000000d678         db  0x64 ; 'd'
000000000000d679         db  0xac ; '.'
000000000000d67a         db  0xff ; '.'
000000000000d67b         db  0xff ; '.'
000000000000d67c         db  0x9c ; '.'
000000000000d67d         db  0x0f ; '.'
000000000000d67e         db  0x00 ; '.'
000000000000d67f         db  0x00 ; '.'
000000000000d680         db  0x04 ; '.'
000000000000d681         db  0xad ; '.'
000000000000d682         db  0xff ; '.'
000000000000d683         db  0xff ; '.'
000000000000d684         db  0xbc ; '.'
000000000000d685         db  0x0f ; '.'
000000000000d686         db  0x00 ; '.'
000000000000d687         db  0x00 ; '.'
000000000000d688         db  0xf4 ; '.'
000000000000d689         db  0xad ; '.'
000000000000d68a         db  0xff ; '.'
000000000000d68b         db  0xff ; '.'
000000000000d68c         db  0x00 ; '.'
000000000000d68d         db  0x10 ; '.'
000000000000d68e         db  0x00 ; '.'
000000000000d68f         db  0x00 ; '.'
000000000000d690         db  0x34 ; '4'
000000000000d691         db  0xc0 ; '.'
000000000000d692         db  0xff ; '.'
000000000000d693         db  0xff ; '.'
000000000000d694         db  0x78 ; 'x'
000000000000d695         db  0x10 ; '.'
000000000000d696         db  0x00 ; '.'
000000000000d697         db  0x00 ; '.'
000000000000d698         db  0xe4 ; '.'
000000000000d699         db  0xc1 ; '.'
000000000000d69a         db  0xff ; '.'
000000000000d69b         db  0xff ; '.'
000000000000d69c         db  0xe4 ; '.'
000000000000d69d         db  0x10 ; '.'
000000000000d69e         db  0x00 ; '.'
000000000000d69f         db  0x00 ; '.'
000000000000d6a0         db  0x24 ; '$'
000000000000d6a1         db  0xc2 ; '.'
000000000000d6a2         db  0xff ; '.'
000000000000d6a3         db  0xff ; '.'
000000000000d6a4         db  0x10 ; '.'
000000000000d6a5         db  0x11 ; '.'
000000000000d6a6         db  0x00 ; '.'
000000000000d6a7         db  0x00 ; '.'
000000000000d6a8         db  0x44 ; 'D'
000000000000d6a9         db  0xc2 ; '.'
000000000000d6aa         db  0xff ; '.'
000000000000d6ab         db  0xff ; '.'
000000000000d6ac         db  0x24 ; '$'
000000000000d6ad         db  0x11 ; '.'
000000000000d6ae         db  0x00 ; '.'
000000000000d6af         db  0x00 ; '.'
000000000000d6b0         db  0x64 ; 'd'
000000000000d6b1         db  0xc2 ; '.'
000000000000d6b2         db  0xff ; '.'
000000000000d6b3         db  0xff ; '.'
000000000000d6b4         db  0x38 ; '8'
000000000000d6b5         db  0x11 ; '.'
000000000000d6b6         db  0x00 ; '.'
000000000000d6b7         db  0x00 ; '.'
000000000000d6b8         db  0xa4 ; '.'
000000000000d6b9         db  0xc2 ; '.'
000000000000d6ba         db  0xff ; '.'
000000000000d6bb         db  0xff ; '.'
000000000000d6bc         db  0x4c ; 'L'
000000000000d6bd         db  0x11 ; '.'
000000000000d6be         db  0x00 ; '.'
000000000000d6bf         db  0x00 ; '.'
000000000000d6c0         db  0xc4 ; '.'
000000000000d6c1         db  0xc2 ; '.'
000000000000d6c2         db  0xff ; '.'
000000000000d6c3         db  0xff ; '.'
000000000000d6c4         db  0x60 ; '`'
000000000000d6c5         db  0x11 ; '.'
000000000000d6c6         db  0x00 ; '.'
000000000000d6c7         db  0x00 ; '.'
000000000000d6c8         db  0xf4 ; '.'
000000000000d6c9         db  0xc2 ; '.'
000000000000d6ca         db  0xff ; '.'
000000000000d6cb         db  0xff ; '.'
000000000000d6cc         db  0x74 ; 't'
000000000000d6cd         db  0x11 ; '.'
000000000000d6ce         db  0x00 ; '.'
000000000000d6cf         db  0x00 ; '.'
000000000000d6d0         db  0x74 ; 't'
000000000000d6d1         db  0xc3 ; '.'
000000000000d6d2         db  0xff ; '.'
000000000000d6d3         db  0xff ; '.'
000000000000d6d4         db  0xc8 ; '.'
000000000000d6d5         db  0x11 ; '.'
000000000000d6d6         db  0x00 ; '.'
000000000000d6d7         db  0x00 ; '.'
000000000000d6d8         db  0x64 ; 'd'
000000000000d6d9         db  0xc4 ; '.'
000000000000d6da         db  0xff ; '.'
000000000000d6db         db  0xff ; '.'
000000000000d6dc         db  0x34 ; '4'
000000000000d6dd         db  0x12 ; '.'
000000000000d6de         db  0x00 ; '.'
000000000000d6df         db  0x00 ; '.'
000000000000d6e0         db  0x74 ; 't'
000000000000d6e1         db  0xc4 ; '.'
000000000000d6e2         db  0xff ; '.'
000000000000d6e3         db  0xff ; '.'
000000000000d6e4         db  0x48 ; 'H'
000000000000d6e5         db  0x12 ; '.'
000000000000d6e6         db  0x00 ; '.'
000000000000d6e7         db  0x00 ; '.'
000000000000d6e8         db  0x14 ; '.'
000000000000d6e9         db  0xc5 ; '.'
000000000000d6ea         db  0xff ; '.'
000000000000d6eb         db  0xff ; '.'
000000000000d6ec         db  0x74 ; 't'
000000000000d6ed         db  0x12 ; '.'
000000000000d6ee         db  0x00 ; '.'
000000000000d6ef         db  0x00 ; '.'
000000000000d6f0         db  0x34 ; '4'
000000000000d6f1         db  0xc5 ; '.'
000000000000d6f2         db  0xff ; '.'
000000000000d6f3         db  0xff ; '.'
000000000000d6f4         db  0x88 ; '.'
000000000000d6f5         db  0x12 ; '.'
000000000000d6f6         db  0x00 ; '.'
000000000000d6f7         db  0x00 ; '.'
000000000000d6f8         db  0x44 ; 'D'
000000000000d6f9         db  0xc5 ; '.'
000000000000d6fa         db  0xff ; '.'
000000000000d6fb         db  0xff ; '.'
000000000000d6fc         db  0x9c ; '.'
000000000000d6fd         db  0x12 ; '.'
000000000000d6fe         db  0x00 ; '.'
000000000000d6ff         db  0x00 ; '.'
000000000000d700         db  0x64 ; 'd'
000000000000d701         db  0xc5 ; '.'
000000000000d702         db  0xff ; '.'
000000000000d703         db  0xff ; '.'
000000000000d704         db  0xb0 ; '.'
000000000000d705         db  0x12 ; '.'
000000000000d706         db  0x00 ; '.'
000000000000d707         db  0x00 ; '.'
000000000000d708         db  0x84 ; '.'
000000000000d709         db  0xc5 ; '.'
000000000000d70a         db  0xff ; '.'
000000000000d70b         db  0xff ; '.'
000000000000d70c         db  0xc4 ; '.'
000000000000d70d         db  0x12 ; '.'
000000000000d70e         db  0x00 ; '.'
000000000000d70f         db  0x00 ; '.'
000000000000d710         db  0x14 ; '.'
000000000000d711         db  0xc6 ; '.'
000000000000d712         db  0xff ; '.'
000000000000d713         db  0xff ; '.'
000000000000d714         db  0xe0 ; '.'
000000000000d715         db  0x12 ; '.'
000000000000d716         db  0x00 ; '.'
000000000000d717         db  0x00 ; '.'
000000000000d718         db  0xa4 ; '.'
000000000000d719         db  0xc6 ; '.'
000000000000d71a         db  0xff ; '.'
000000000000d71b         db  0xff ; '.'
000000000000d71c         db  0xfc ; '.'
000000000000d71d         db  0x12 ; '.'
000000000000d71e         db  0x00 ; '.'
000000000000d71f         db  0x00 ; '.'
000000000000d720         db  0xb4 ; '.'
000000000000d721         db  0xc6 ; '.'
000000000000d722         db  0xff ; '.'
000000000000d723         db  0xff ; '.'
000000000000d724         db  0x10 ; '.'
000000000000d725         db  0x13 ; '.'
000000000000d726         db  0x00 ; '.'
000000000000d727         db  0x00 ; '.'
000000000000d728         db  0xc4 ; '.'
000000000000d729         db  0xc6 ; '.'
000000000000d72a         db  0xff ; '.'
000000000000d72b         db  0xff ; '.'
000000000000d72c         db  0x24 ; '$'
000000000000d72d         db  0x13 ; '.'
000000000000d72e         db  0x00 ; '.'
000000000000d72f         db  0x00 ; '.'
000000000000d730         db  0x64 ; 'd'
000000000000d731         db  0xc7 ; '.'
000000000000d732         db  0xff ; '.'
000000000000d733         db  0xff ; '.'
000000000000d734         db  0x40 ; '@'
000000000000d735         db  0x13 ; '.'
000000000000d736         db  0x00 ; '.'
000000000000d737         db  0x00 ; '.'
000000000000d738         db  0x74 ; 't'
000000000000d739         db  0xc7 ; '.'
000000000000d73a         db  0xff ; '.'
000000000000d73b         db  0xff ; '.'
000000000000d73c         db  0x54 ; 'T'
000000000000d73d         db  0x13 ; '.'
000000000000d73e         db  0x00 ; '.'
000000000000d73f         db  0x00 ; '.'
000000000000d740         db  0x94 ; '.'
000000000000d741         db  0xc7 ; '.'
000000000000d742         db  0xff ; '.'
000000000000d743         db  0xff ; '.'
000000000000d744         db  0x68 ; 'h'
000000000000d745         db  0x13 ; '.'
000000000000d746         db  0x00 ; '.'
000000000000d747         db  0x00 ; '.'
000000000000d748         db  0xa4 ; '.'
000000000000d749         db  0xc7 ; '.'
000000000000d74a         db  0xff ; '.'
000000000000d74b         db  0xff ; '.'
000000000000d74c         db  0x7c ; '|'
000000000000d74d         db  0x13 ; '.'
000000000000d74e         db  0x00 ; '.'
000000000000d74f         db  0x00 ; '.'
000000000000d750         db  0x34 ; '4'
000000000000d751         db  0xc8 ; '.'
000000000000d752         db  0xff ; '.'
000000000000d753         db  0xff ; '.'
000000000000d754         db  0x98 ; '.'
000000000000d755         db  0x13 ; '.'
000000000000d756         db  0x00 ; '.'
000000000000d757         db  0x00 ; '.'
000000000000d758         db  0xd4 ; '.'
000000000000d759         db  0xc8 ; '.'
000000000000d75a         db  0xff ; '.'
000000000000d75b         db  0xff ; '.'
000000000000d75c         db  0xb4 ; '.'
000000000000d75d         db  0x13 ; '.'
000000000000d75e         db  0x00 ; '.'
000000000000d75f         db  0x00 ; '.'
000000000000d760         db  0xe4 ; '.'
000000000000d761         db  0xc8 ; '.'
000000000000d762         db  0xff ; '.'
000000000000d763         db  0xff ; '.'
000000000000d764         db  0xc8 ; '.'
000000000000d765         db  0x13 ; '.'
000000000000d766         db  0x00 ; '.'
000000000000d767         db  0x00 ; '.'
000000000000d768         db  0x04 ; '.'
000000000000d769         db  0xc9 ; '.'
000000000000d76a         db  0xff ; '.'
000000000000d76b         db  0xff ; '.'
000000000000d76c         db  0xdc ; '.'
000000000000d76d         db  0x13 ; '.'
000000000000d76e         db  0x00 ; '.'
000000000000d76f         db  0x00 ; '.'
000000000000d770         db  0x24 ; '$'
000000000000d771         db  0xc9 ; '.'
000000000000d772         db  0xff ; '.'
000000000000d773         db  0xff ; '.'
000000000000d774         db  0xf0 ; '.'
000000000000d775         db  0x13 ; '.'
000000000000d776         db  0x00 ; '.'
000000000000d777         db  0x00 ; '.'
000000000000d778         db  0x34 ; '4'
000000000000d779         db  0xc9 ; '.'
000000000000d77a         db  0xff ; '.'
000000000000d77b         db  0xff ; '.'
000000000000d77c         db  0x04 ; '.'
000000000000d77d         db  0x14 ; '.'
000000000000d77e         db  0x00 ; '.'
000000000000d77f         db  0x00 ; '.'
000000000000d780         db  0x54 ; 'T'
000000000000d781         db  0xc9 ; '.'
000000000000d782         db  0xff ; '.'
000000000000d783         db  0xff ; '.'
000000000000d784         db  0x18 ; '.'
000000000000d785         db  0x14 ; '.'
000000000000d786         db  0x00 ; '.'
000000000000d787         db  0x00 ; '.'
000000000000d788         db  0x74 ; 't'
000000000000d789         db  0xc9 ; '.'
000000000000d78a         db  0xff ; '.'
000000000000d78b         db  0xff ; '.'
000000000000d78c         db  0x2c ; ','
000000000000d78d         db  0x14 ; '.'
000000000000d78e         db  0x00 ; '.'
000000000000d78f         db  0x00 ; '.'
000000000000d790         db  0x94 ; '.'
000000000000d791         db  0xc9 ; '.'
000000000000d792         db  0xff ; '.'
000000000000d793         db  0xff ; '.'
000000000000d794         db  0x44 ; 'D'
000000000000d795         db  0x14 ; '.'
000000000000d796         db  0x00 ; '.'
000000000000d797         db  0x00 ; '.'
000000000000d798         db  0xf4 ; '.'
000000000000d799         db  0xc9 ; '.'
000000000000d79a         db  0xff ; '.'
000000000000d79b         db  0xff ; '.'
000000000000d79c         db  0x7c ; '|'
000000000000d79d         db  0x14 ; '.'
000000000000d79e         db  0x00 ; '.'
000000000000d79f         db  0x00 ; '.'
000000000000d7a0         db  0x34 ; '4'
000000000000d7a1         db  0xca ; '.'
000000000000d7a2         db  0xff ; '.'
000000000000d7a3         db  0xff ; '.'
000000000000d7a4         db  0xb4 ; '.'
000000000000d7a5         db  0x14 ; '.'
000000000000d7a6         db  0x00 ; '.'
000000000000d7a7         db  0x00 ; '.'
000000000000d7a8         db  0x54 ; 'T'
000000000000d7a9         db  0xce ; '.'
000000000000d7aa         db  0xff ; '.'
000000000000d7ab         db  0xff ; '.'
000000000000d7ac         db  0xc8 ; '.'
000000000000d7ad         db  0x15 ; '.'
000000000000d7ae         db  0x00 ; '.'
000000000000d7af         db  0x00 ; '.'
000000000000d7b0         db  0x74 ; 't'
000000000000d7b1         db  0xce ; '.'
000000000000d7b2         db  0xff ; '.'
000000000000d7b3         db  0xff ; '.'
000000000000d7b4         db  0xdc ; '.'
000000000000d7b5         db  0x15 ; '.'
000000000000d7b6         db  0x00 ; '.'
000000000000d7b7         db  0x00 ; '.'
000000000000d7b8         db  0xf4 ; '.'
000000000000d7b9         db  0xce ; '.'
000000000000d7ba         db  0xff ; '.'
000000000000d7bb         db  0xff ; '.'
000000000000d7bc         db  0xf8 ; '.'
000000000000d7bd         db  0x15 ; '.'
000000000000d7be         db  0x00 ; '.'
000000000000d7bf         db  0x00 ; '.'
000000000000d7c0         db  0xd4 ; '.'
000000000000d7c1         db  0xcf ; '.'
000000000000d7c2         db  0xff ; '.'
000000000000d7c3         db  0xff ; '.'
000000000000d7c4         db  0x24 ; '$'
000000000000d7c5         db  0x16 ; '.'
000000000000d7c6         db  0x00 ; '.'
000000000000d7c7         db  0x00 ; '.'
000000000000d7c8         db  0x54 ; 'T'
000000000000d7c9         db  0xd0 ; '.'
000000000000d7ca         db  0xff ; '.'
000000000000d7cb         db  0xff ; '.'
000000000000d7cc         db  0x44 ; 'D'
000000000000d7cd         db  0x16 ; '.'
000000000000d7ce         db  0x00 ; '.'
000000000000d7cf         db  0x00 ; '.'
000000000000d7d0         db  0x74 ; 't'
000000000000d7d1         db  0xd0 ; '.'
000000000000d7d2         db  0xff ; '.'
000000000000d7d3         db  0xff ; '.'
000000000000d7d4         db  0x60 ; '`'
000000000000d7d5         db  0x16 ; '.'
000000000000d7d6         db  0x00 ; '.'
000000000000d7d7         db  0x00 ; '.'
000000000000d7d8         db  0xa4 ; '.'
000000000000d7d9         db  0xd0 ; '.'
000000000000d7da         db  0xff ; '.'
000000000000d7db         db  0xff ; '.'
000000000000d7dc         db  0x74 ; 't'
000000000000d7dd         db  0x16 ; '.'
000000000000d7de         db  0x00 ; '.'
000000000000d7df         db  0x00 ; '.'
000000000000d7e0         db  0xb4 ; '.'
000000000000d7e1         db  0xd0 ; '.'
000000000000d7e2         db  0xff ; '.'
000000000000d7e3         db  0xff ; '.'
000000000000d7e4         db  0x88 ; '.'
000000000000d7e5         db  0x16 ; '.'
000000000000d7e6         db  0x00 ; '.'
000000000000d7e7         db  0x00 ; '.'
000000000000d7e8         db  0xf4 ; '.'
000000000000d7e9         db  0xd0 ; '.'
000000000000d7ea         db  0xff ; '.'
000000000000d7eb         db  0xff ; '.'
000000000000d7ec         db  0xac ; '.'
000000000000d7ed         db  0x16 ; '.'
000000000000d7ee         db  0x00 ; '.'
000000000000d7ef         db  0x00 ; '.'
000000000000d7f0         db  0x24 ; '$'
000000000000d7f1         db  0xd1 ; '.'
000000000000d7f2         db  0xff ; '.'
000000000000d7f3         db  0xff ; '.'
000000000000d7f4         db  0xc0 ; '.'
000000000000d7f5         db  0x16 ; '.'
000000000000d7f6         db  0x00 ; '.'
000000000000d7f7         db  0x00 ; '.'
000000000000d7f8         db  0xb4 ; '.'
000000000000d7f9         db  0xd1 ; '.'
000000000000d7fa         db  0xff ; '.'
000000000000d7fb         db  0xff ; '.'
000000000000d7fc         db  0xd8 ; '.'
000000000000d7fd         db  0x16 ; '.'
000000000000d7fe         db  0x00 ; '.'
000000000000d7ff         db  0x00 ; '.'
000000000000d800         db  0x04 ; '.'
000000000000d801         db  0xd2 ; '.'
000000000000d802         db  0xff ; '.'
000000000000d803         db  0xff ; '.'
000000000000d804         db  0xf0 ; '.'
000000000000d805         db  0x16 ; '.'
000000000000d806         db  0x00 ; '.'
000000000000d807         db  0x00 ; '.'
000000000000d808         db  0x24 ; '$'
000000000000d809         db  0xd2 ; '.'
000000000000d80a         db  0xff ; '.'
000000000000d80b         db  0xff ; '.'
000000000000d80c         db  0x0c ; '.'
000000000000d80d         db  0x17 ; '.'
000000000000d80e         db  0x00 ; '.'
000000000000d80f         db  0x00 ; '.'
000000000000d810         db  0x54 ; 'T'
000000000000d811         db  0xd2 ; '.'
000000000000d812         db  0xff ; '.'
000000000000d813         db  0xff ; '.'
000000000000d814         db  0x28 ; '('
000000000000d815         db  0x17 ; '.'
000000000000d816         db  0x00 ; '.'
000000000000d817         db  0x00 ; '.'
000000000000d818         db  0x84 ; '.'
000000000000d819         db  0xd2 ; '.'
000000000000d81a         db  0xff ; '.'
000000000000d81b         db  0xff ; '.'
000000000000d81c         db  0x50 ; 'P'
000000000000d81d         db  0x17 ; '.'
000000000000d81e         db  0x00 ; '.'
000000000000d81f         db  0x00 ; '.'
000000000000d820         db  0xa4 ; '.'
000000000000d821         db  0xd2 ; '.'
000000000000d822         db  0xff ; '.'
000000000000d823         db  0xff ; '.'
000000000000d824         db  0x6c ; 'l'
000000000000d825         db  0x17 ; '.'
000000000000d826         db  0x00 ; '.'
000000000000d827         db  0x00 ; '.'
000000000000d828         db  0xe4 ; '.'
000000000000d829         db  0xd2 ; '.'
000000000000d82a         db  0xff ; '.'
000000000000d82b         db  0xff ; '.'
000000000000d82c         db  0x84 ; '.'
000000000000d82d         db  0x17 ; '.'
000000000000d82e         db  0x00 ; '.'
000000000000d82f         db  0x00 ; '.'
000000000000d830         db  0xe4 ; '.'
000000000000d831         db  0xd3 ; '.'
000000000000d832         db  0xff ; '.'
000000000000d833         db  0xff ; '.'
000000000000d834         db  0xd0 ; '.'
000000000000d835         db  0x17 ; '.'
000000000000d836         db  0x00 ; '.'
000000000000d837         db  0x00 ; '.'
000000000000d838         db  0x14 ; '.'
000000000000d839         db  0xd4 ; '.'
000000000000d83a         db  0xff ; '.'
000000000000d83b         db  0xff ; '.'
000000000000d83c         db  0xec ; '.'
000000000000d83d         db  0x17 ; '.'
000000000000d83e         db  0x00 ; '.'
000000000000d83f         db  0x00 ; '.'
000000000000d840         db  0x94 ; '.'
000000000000d841         db  0xd4 ; '.'
000000000000d842         db  0xff ; '.'
000000000000d843         db  0xff ; '.'
000000000000d844         db  0x1c ; '.'
000000000000d845         db  0x18 ; '.'
000000000000d846         db  0x00 ; '.'
000000000000d847         db  0x00 ; '.'
000000000000d848         db  0x64 ; 'd'
000000000000d849         db  0xd5 ; '.'
000000000000d84a         db  0xff ; '.'
000000000000d84b         db  0xff ; '.'
000000000000d84c         db  0x64 ; 'd'
000000000000d84d         db  0x18 ; '.'
000000000000d84e         db  0x00 ; '.'
000000000000d84f         db  0x00 ; '.'
000000000000d850         db  0x84 ; '.'
000000000000d851         db  0xd9 ; '.'
000000000000d852         db  0xff ; '.'
000000000000d853         db  0xff ; '.'
000000000000d854         db  0xb4 ; '.'
000000000000d855         db  0x18 ; '.'
000000000000d856         db  0x00 ; '.'
000000000000d857         db  0x00 ; '.'
000000000000d858         db  0x04 ; '.'
000000000000d859         db  0xdc ; '.'
000000000000d85a         db  0xff ; '.'
000000000000d85b         db  0xff ; '.'
000000000000d85c         db  0xec ; '.'
000000000000d85d         db  0x18 ; '.'
000000000000d85e         db  0x00 ; '.'
000000000000d85f         db  0x00 ; '.'
000000000000d860         db  0x94 ; '.'
000000000000d861         db  0xdc ; '.'
000000000000d862         db  0xff ; '.'
000000000000d863         db  0xff ; '.'
000000000000d864         db  0x2c ; ','
000000000000d865         db  0x19 ; '.'
000000000000d866         db  0x00 ; '.'
000000000000d867         db  0x00 ; '.'
000000000000d868         db  0x64 ; 'd'
000000000000d869         db  0xdd ; '.'
000000000000d86a         db  0xff ; '.'
000000000000d86b         db  0xff ; '.'
000000000000d86c         db  0x64 ; 'd'
000000000000d86d         db  0x19 ; '.'
000000000000d86e         db  0x00 ; '.'
000000000000d86f         db  0x00 ; '.'
000000000000d870         db  0xd4 ; '.'
000000000000d871         db  0xdd ; '.'
000000000000d872         db  0xff ; '.'
000000000000d873         db  0xff ; '.'
000000000000d874         db  0x9c ; '.'
000000000000d875         db  0x19 ; '.'
000000000000d876         db  0x00 ; '.'
000000000000d877         db  0x00 ; '.'
000000000000d878         db  0x54 ; 'T'
000000000000d879         db  0xde ; '.'
000000000000d87a         db  0xff ; '.'
000000000000d87b         db  0xff ; '.'
000000000000d87c         db  0xec ; '.'
000000000000d87d         db  0x19 ; '.'
000000000000d87e         db  0x00 ; '.'
000000000000d87f         db  0x00 ; '.'
000000000000d880         db  0x14 ; '.'
000000000000d881         db  0xdf ; '.'
000000000000d882         db  0xff ; '.'
000000000000d883         db  0xff ; '.'
000000000000d884         db  0x04 ; '.'
000000000000d885         db  0x1a ; '.'
000000000000d886         db  0x00 ; '.'
000000000000d887         db  0x00 ; '.'
000000000000d888         db  0x74 ; 't'
000000000000d889         db  0xdf ; '.'
000000000000d88a         db  0xff ; '.'
000000000000d88b         db  0xff ; '.'
000000000000d88c         db  0x24 ; '$'
000000000000d88d         db  0x1a ; '.'
000000000000d88e         db  0x00 ; '.'
000000000000d88f         db  0x00 ; '.'
000000000000d890         db  0xb4 ; '.'
000000000000d891         db  0xdf ; '.'
000000000000d892         db  0xff ; '.'
000000000000d893         db  0xff ; '.'
000000000000d894         db  0x44 ; 'D'
000000000000d895         db  0x1a ; '.'
000000000000d896         db  0x00 ; '.'
000000000000d897         db  0x00 ; '.'
000000000000d898         db  0xc4 ; '.'
000000000000d899         db  0xdf ; '.'
000000000000d89a         db  0xff ; '.'
000000000000d89b         db  0xff ; '.'
000000000000d89c         db  0x5c ; '\'
000000000000d89d         db  0x1a ; '.'
000000000000d89e         db  0x00 ; '.'
000000000000d89f         db  0x00 ; '.'
000000000000d8a0         db  0x44 ; 'D'
000000000000d8a1         db  0xe0 ; '.'
000000000000d8a2         db  0xff ; '.'
000000000000d8a3         db  0xff ; '.'
000000000000d8a4         db  0x94 ; '.'
000000000000d8a5         db  0x1a ; '.'
000000000000d8a6         db  0x00 ; '.'
000000000000d8a7         db  0x00 ; '.'
000000000000d8a8         db  0x84 ; '.'
000000000000d8a9         db  0xe0 ; '.'
000000000000d8aa         db  0xff ; '.'
000000000000d8ab         db  0xff ; '.'
000000000000d8ac         db  0xb4 ; '.'
000000000000d8ad         db  0x1a ; '.'
000000000000d8ae         db  0x00 ; '.'
000000000000d8af         db  0x00 ; '.'
000000000000d8b0         db  0xe4 ; '.'
000000000000d8b1         db  0xe0 ; '.'
000000000000d8b2         db  0xff ; '.'
000000000000d8b3         db  0xff ; '.'
000000000000d8b4         db  0xe4 ; '.'
000000000000d8b5         db  0x1a ; '.'
000000000000d8b6         db  0x00 ; '.'
000000000000d8b7         db  0x00 ; '.'
000000000000d8b8         db  0x54 ; 'T'
000000000000d8b9         db  0xe1 ; '.'
000000000000d8ba         db  0xff ; '.'
000000000000d8bb         db  0xff ; '.'
000000000000d8bc         db  0x2c ; ','
000000000000d8bd         db  0x1b ; '.'
000000000000d8be         db  0x00 ; '.'
000000000000d8bf         db  0x00 ; '.'
000000000000d8c0         db  0x64 ; 'd'
000000000000d8c1         db  0xe1 ; '.'
000000000000d8c2         db  0xff ; '.'
000000000000d8c3         db  0xff ; '.'
000000000000d8c4         db  0x44 ; 'D'
000000000000d8c5         db  0x1b ; '.'
000000000000d8c6         db  0x00 ; '.'
000000000000d8c7         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xd8c8; 0xefd8[ (5904 bytes)
        ; File offset : [55496; 61400[ (5904 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000d8c8         dd         0x00000014                                  ; Length of the record
000000000000d8cc         dd         0x00000000                                  ; CIE ID
000000000000d8d0         db         0x01                                        ; Version
000000000000d8d1         db         "zR", 0                                     ; Augmentation String
000000000000d8d4         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000d8d5         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000d8d6         db         0x10                                        ; Return address register
000000000000d8d7         db         0x01                                        ; Augmentation data length
000000000000d8d8         db         0x1b                                        ; FDE encoding
000000000000d8d9         db  0x0c ; '.'
000000000000d8da         db  0x07 ; '.'
000000000000d8db         db  0x08 ; '.'
000000000000d8dc         db  0x90 ; '.'
000000000000d8dd         db  0x01 ; '.'
000000000000d8de         db  0x07 ; '.'
000000000000d8df         db  0x10 ; '.'
000000000000d8e0         dd         0x00000014                                  ; Length of the record
000000000000d8e4         dd         0x0000001c                                  ; FDE: parent CIE at 0xd8c8 (FDE encoding = 0x1B)
000000000000d8e8         db         0xc8, 0x6f, 2 dup (0xff)                    ; begin 0x48b0
000000000000d8ec         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x48db)
000000000000d8f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8f1         align      8
000000000000d8f8         dd         0x00000014                                  ; Length of the record
000000000000d8fc         dd         0x00000000                                  ; CIE ID
000000000000d900         db         0x01                                        ; Version
000000000000d901         db         "zR", 0                                     ; Augmentation String
000000000000d904         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000d905         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000d906         db         0x10                                        ; Return address register
000000000000d907         db         0x01                                        ; Augmentation data length
000000000000d908         db         0x1b                                        ; FDE encoding
000000000000d909         db  0x0c ; '.'
000000000000d90a         db  0x07 ; '.'
000000000000d90b         db  0x08 ; '.'
000000000000d90c         db  0x90 ; '.'
000000000000d90d         db  0x01 ; '.'
000000000000d90e         db  0x00 ; '.'
000000000000d90f         db  0x00 ; '.'
000000000000d910         dd         0x00000024                                  ; Length of the record
000000000000d914         dd         0x0000001c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d918         db         0xa8, 0x41, 2 dup (0xff)                    ; begin 0x1ac0
000000000000d91c         db         0x80, 0x04, 2 dup (0x00)                    ; length 0x480 (end at 0x1f40)
000000000000d920         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d921         db  0x0e ; '.'
000000000000d922         db  0x10 ; '.'
000000000000d923         db  0x46 ; 'F'
000000000000d924         db  0x0e ; '.'
000000000000d925         db  0x18 ; '.'
000000000000d926         db  0x4a ; 'J'
000000000000d927         db  0x0f ; '.'
000000000000d928         db  0x0b ; '.'
000000000000d929         db  0x77 ; 'w'
000000000000d92a         db  0x08 ; '.'
000000000000d92b         db  0x80 ; '.'
000000000000d92c         db  0x00 ; '.'
000000000000d92d         db  0x3f ; '?'
000000000000d92e         db  0x1a ; '.'
000000000000d92f         db  0x3b ; ';'
000000000000d930         db  0x2a ; '*'
000000000000d931         db  0x33 ; '3'
000000000000d932         db  0x24 ; '$'
000000000000d933         db  0x22 ; '"'
000000000000d934         db  0x00 ; '.'
000000000000d935         db  0x00 ; '.'
000000000000d936         db  0x00 ; '.'
000000000000d937         db  0x00 ; '.'
000000000000d938         dd         0x00000014                                  ; Length of the record
000000000000d93c         dd         0x00000044                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d940         db         0x00, 0x46, 2 dup (0xff)                    ; begin 0x1f40
000000000000d944         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1f48)
000000000000d948         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d949         align      16
000000000000d950         dd         0x00000010                                  ; Length of the record
000000000000d954         dd         0x0000005c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d958         db         0x68, 0x70, 2 dup (0xff)                    ; begin 0x49c0
000000000000d95c         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0x49cd)
000000000000d960         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d961         align      4
000000000000d964         dd         0x00000010                                  ; Length of the record
000000000000d968         dd         0x00000070                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d96c         db         0x64, 0x70, 2 dup (0xff)                    ; begin 0x49d0
000000000000d970         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x49da)
000000000000d974         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d975         align      8
000000000000d978         dd         0x00000010                                  ; Length of the record
000000000000d97c         dd         0x00000084                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d980         db         0x60, 0x70, 2 dup (0xff)                    ; begin 0x49e0
000000000000d984         db         0x33, 3 dup (0x00)                          ; length 0x33 (end at 0x4a13)
000000000000d988         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d989         align      4
000000000000d98c         dd         0x00000040                                  ; Length of the record
000000000000d990         dd         0x00000098                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d994         db         0x8c, 0x70, 2 dup (0xff)                    ; begin 0x4a20
000000000000d998         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x4a8b)
000000000000d99c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d99d         db  0x4a ; 'J'
000000000000d99e         db  0x0e ; '.'
000000000000d99f         db  0x10 ; '.'
000000000000d9a0         db  0x8c ; '.'
000000000000d9a1         db  0x02 ; '.'
000000000000d9a2         db  0x41 ; 'A'
000000000000d9a3         db  0x0e ; '.'
000000000000d9a4         db  0x18 ; '.'
000000000000d9a5         db  0x86 ; '.'
000000000000d9a6         db  0x03 ; '.'
000000000000d9a7         db  0x44 ; 'D'
000000000000d9a8         db  0x0e ; '.'
000000000000d9a9         db  0x20 ; ' '
000000000000d9aa         db  0x83 ; '.'
000000000000d9ab         db  0x04 ; '.'
000000000000d9ac         db  0x4c ; 'L'
000000000000d9ad         db  0x0e ; '.'
000000000000d9ae         db  0x18 ; '.'
000000000000d9af         db  0x41 ; 'A'
000000000000d9b0         db  0x0e ; '.'
000000000000d9b1         db  0x10 ; '.'
000000000000d9b2         db  0x42 ; 'B'
000000000000d9b3         db  0x0e ; '.'
000000000000d9b4         db  0x08 ; '.'
000000000000d9b5         db  0x42 ; 'B'
000000000000d9b6         db  0xc3 ; '.'
000000000000d9b7         db  0xc6 ; '.'
000000000000d9b8         db  0xcc ; '.'
000000000000d9b9         db  0x48 ; 'H'
000000000000d9ba         db  0x0e ; '.'
000000000000d9bb         db  0x20 ; ' '
000000000000d9bc         db  0x83 ; '.'
000000000000d9bd         db  0x04 ; '.'
000000000000d9be         db  0x86 ; '.'
000000000000d9bf         db  0x03 ; '.'
000000000000d9c0         db  0x8c ; '.'
000000000000d9c1         db  0x02 ; '.'
000000000000d9c2         db  0x75 ; 'u'
000000000000d9c3         db  0xc3 ; '.'
000000000000d9c4         db  0x0e ; '.'
000000000000d9c5         db  0x18 ; '.'
000000000000d9c6         db  0x41 ; 'A'
000000000000d9c7         db  0xc6 ; '.'
000000000000d9c8         db  0x0e ; '.'
000000000000d9c9         db  0x10 ; '.'
000000000000d9ca         db  0x42 ; 'B'
000000000000d9cb         db  0xcc ; '.'
000000000000d9cc         db  0x0e ; '.'
000000000000d9cd         db  0x08 ; '.'
000000000000d9ce         db  0x00 ; '.'
000000000000d9cf         db  0x00 ; '.'
000000000000d9d0         dd         0x00000028                                  ; Length of the record
000000000000d9d4         dd         0x000000dc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000d9d8         db         0xb8, 0x70, 2 dup (0xff)                    ; begin 0x4a90
000000000000d9dc         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x4b08)
000000000000d9e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d9e1         db  0x41 ; 'A'
000000000000d9e2         db  0x0e ; '.'
000000000000d9e3         db  0x10 ; '.'
000000000000d9e4         db  0x86 ; '.'
000000000000d9e5         db  0x02 ; '.'
000000000000d9e6         db  0x41 ; 'A'
000000000000d9e7         db  0x0e ; '.'
000000000000d9e8         db  0x18 ; '.'
000000000000d9e9         db  0x83 ; '.'
000000000000d9ea         db  0x03 ; '.'
000000000000d9eb         db  0x4f ; 'O'
000000000000d9ec         db  0x0e ; '.'
000000000000d9ed         db  0x20 ; ' '
000000000000d9ee         db  0x55 ; 'U'
000000000000d9ef         db  0x0a ; '.'
000000000000d9f0         db  0x0e ; '.'
000000000000d9f1         db  0x18 ; '.'
000000000000d9f2         db  0x41 ; 'A'
000000000000d9f3         db  0x0e ; '.'
000000000000d9f4         db  0x10 ; '.'
000000000000d9f5         db  0x41 ; 'A'
000000000000d9f6         db  0x0e ; '.'
000000000000d9f7         db  0x08 ; '.'
000000000000d9f8         db  0x41 ; 'A'
000000000000d9f9         db  0x0b ; '.'
000000000000d9fa         db  0x00 ; '.'
000000000000d9fb         db  0x00 ; '.'
000000000000d9fc         dd         0x00000048                                  ; Length of the record
000000000000da00         dd         0x00000108                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000da04         db         0x0c, 0x71, 2 dup (0xff)                    ; begin 0x4b10
000000000000da08         db         0x36, 0x01, 2 dup (0x00)                    ; length 0x136 (end at 0x4c46)
000000000000da0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da0d         db  0x42 ; 'B'
000000000000da0e         db  0x0e ; '.'
000000000000da0f         db  0x10 ; '.'
000000000000da10         db  0x8f ; '.'
000000000000da11         db  0x02 ; '.'
000000000000da12         db  0x42 ; 'B'
000000000000da13         db  0x0e ; '.'
000000000000da14         db  0x18 ; '.'
000000000000da15         db  0x8e ; '.'
000000000000da16         db  0x03 ; '.'
000000000000da17         db  0x42 ; 'B'
000000000000da18         db  0x0e ; '.'
000000000000da19         db  0x20 ; ' '
000000000000da1a         db  0x8d ; '.'
000000000000da1b         db  0x04 ; '.'
000000000000da1c         db  0x42 ; 'B'
000000000000da1d         db  0x0e ; '.'
000000000000da1e         db  0x28 ; '('
000000000000da1f         db  0x8c ; '.'
000000000000da20         db  0x05 ; '.'
000000000000da21         db  0x41 ; 'A'
000000000000da22         db  0x0e ; '.'
000000000000da23         db  0x30 ; '0'
000000000000da24         db  0x86 ; '.'
000000000000da25         db  0x06 ; '.'
000000000000da26         db  0x41 ; 'A'
000000000000da27         db  0x0e ; '.'
000000000000da28         db  0x38 ; '8'
000000000000da29         db  0x83 ; '.'
000000000000da2a         db  0x07 ; '.'
000000000000da2b         db  0x47 ; 'G'
000000000000da2c         db  0x0e ; '.'
000000000000da2d         db  0xe0 ; '.'
000000000000da2e         db  0x40 ; '@'
000000000000da2f         db  0x02 ; '.'
000000000000da30         db  0xb1 ; '.'
000000000000da31         db  0x0a ; '.'
000000000000da32         db  0x0e ; '.'
000000000000da33         db  0x38 ; '8'
000000000000da34         db  0x41 ; 'A'
000000000000da35         db  0x0e ; '.'
000000000000da36         db  0x30 ; '0'
000000000000da37         db  0x41 ; 'A'
000000000000da38         db  0x0e ; '.'
000000000000da39         db  0x28 ; '('
000000000000da3a         db  0x42 ; 'B'
000000000000da3b         db  0x0e ; '.'
000000000000da3c         db  0x20 ; ' '
000000000000da3d         db  0x42 ; 'B'
000000000000da3e         db  0x0e ; '.'
000000000000da3f         db  0x18 ; '.'
000000000000da40         db  0x42 ; 'B'
000000000000da41         db  0x0e ; '.'
000000000000da42         db  0x10 ; '.'
000000000000da43         db  0x42 ; 'B'
000000000000da44         db  0x0e ; '.'
000000000000da45         db  0x08 ; '.'
000000000000da46         db  0x44 ; 'D'
000000000000da47         db  0x0b ; '.'
000000000000da48         dd         0x00000048                                  ; Length of the record
000000000000da4c         dd         0x00000154                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000da50         db         0x00, 0x72, 2 dup (0xff)                    ; begin 0x4c50
000000000000da54         db         0x43, 0x01, 2 dup (0x00)                    ; length 0x143 (end at 0x4d93)
000000000000da58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da59         db  0x42 ; 'B'
000000000000da5a         db  0x0e ; '.'
000000000000da5b         db  0x10 ; '.'
000000000000da5c         db  0x8f ; '.'
000000000000da5d         db  0x02 ; '.'
000000000000da5e         db  0x42 ; 'B'
000000000000da5f         db  0x0e ; '.'
000000000000da60         db  0x18 ; '.'
000000000000da61         db  0x8e ; '.'
000000000000da62         db  0x03 ; '.'
000000000000da63         db  0x45 ; 'E'
000000000000da64         db  0x0e ; '.'
000000000000da65         db  0x20 ; ' '
000000000000da66         db  0x8d ; '.'
000000000000da67         db  0x04 ; '.'
000000000000da68         db  0x42 ; 'B'
000000000000da69         db  0x0e ; '.'
000000000000da6a         db  0x28 ; '('
000000000000da6b         db  0x8c ; '.'
000000000000da6c         db  0x05 ; '.'
000000000000da6d         db  0x44 ; 'D'
000000000000da6e         db  0x0e ; '.'
000000000000da6f         db  0x30 ; '0'
000000000000da70         db  0x86 ; '.'
000000000000da71         db  0x06 ; '.'
000000000000da72         db  0x41 ; 'A'
000000000000da73         db  0x0e ; '.'
000000000000da74         db  0x38 ; '8'
000000000000da75         db  0x83 ; '.'
000000000000da76         db  0x07 ; '.'
000000000000da77         db  0x4c ; 'L'
000000000000da78         db  0x0e ; '.'
000000000000da79         db  0xe0 ; '.'
000000000000da7a         db  0x40 ; '@'
000000000000da7b         db  0x02 ; '.'
000000000000da7c         db  0xde ; '.'
000000000000da7d         db  0x0a ; '.'
000000000000da7e         db  0x0e ; '.'
000000000000da7f         db  0x38 ; '8'
000000000000da80         db  0x41 ; 'A'
000000000000da81         db  0x0e ; '.'
000000000000da82         db  0x30 ; '0'
000000000000da83         db  0x41 ; 'A'
000000000000da84         db  0x0e ; '.'
000000000000da85         db  0x28 ; '('
000000000000da86         db  0x42 ; 'B'
000000000000da87         db  0x0e ; '.'
000000000000da88         db  0x20 ; ' '
000000000000da89         db  0x42 ; 'B'
000000000000da8a         db  0x0e ; '.'
000000000000da8b         db  0x18 ; '.'
000000000000da8c         db  0x42 ; 'B'
000000000000da8d         db  0x0e ; '.'
000000000000da8e         db  0x10 ; '.'
000000000000da8f         db  0x42 ; 'B'
000000000000da90         db  0x0e ; '.'
000000000000da91         db  0x08 ; '.'
000000000000da92         db  0x41 ; 'A'
000000000000da93         db  0x0b ; '.'
000000000000da94         dd         0x00000040                                  ; Length of the record
000000000000da98         dd         0x000001a0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000da9c         db         0x04, 0x73, 2 dup (0xff)                    ; begin 0x4da0
000000000000daa0         db         0xf8, 3 dup (0x00)                          ; length 0xf8 (end at 0x4e98)
000000000000daa4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000daa5         db  0x42 ; 'B'
000000000000daa6         db  0x0e ; '.'
000000000000daa7         db  0x10 ; '.'
000000000000daa8         db  0x8e ; '.'
000000000000daa9         db  0x02 ; '.'
000000000000daaa         db  0x42 ; 'B'
000000000000daab         db  0x0e ; '.'
000000000000daac         db  0x18 ; '.'
000000000000daad         db  0x8d ; '.'
000000000000daae         db  0x03 ; '.'
000000000000daaf         db  0x42 ; 'B'
000000000000dab0         db  0x0e ; '.'
000000000000dab1         db  0x20 ; ' '
000000000000dab2         db  0x8c ; '.'
000000000000dab3         db  0x04 ; '.'
000000000000dab4         db  0x41 ; 'A'
000000000000dab5         db  0x0e ; '.'
000000000000dab6         db  0x28 ; '('
000000000000dab7         db  0x86 ; '.'
000000000000dab8         db  0x05 ; '.'
000000000000dab9         db  0x41 ; 'A'
000000000000daba         db  0x0e ; '.'
000000000000dabb         db  0x30 ; '0'
000000000000dabc         db  0x83 ; '.'
000000000000dabd         db  0x06 ; '.'
000000000000dabe         db  0x47 ; 'G'
000000000000dabf         db  0x0e ; '.'
000000000000dac0         db  0xc0 ; '.'
000000000000dac1         db  0x40 ; '@'
000000000000dac2         db  0x02 ; '.'
000000000000dac3         db  0x95 ; '.'
000000000000dac4         db  0x0a ; '.'
000000000000dac5         db  0x0e ; '.'
000000000000dac6         db  0x30 ; '0'
000000000000dac7         db  0x41 ; 'A'
000000000000dac8         db  0x0e ; '.'
000000000000dac9         db  0x28 ; '('
000000000000daca         db  0x41 ; 'A'
000000000000dacb         db  0x0e ; '.'
000000000000dacc         db  0x20 ; ' '
000000000000dacd         db  0x42 ; 'B'
000000000000dace         db  0x0e ; '.'
000000000000dacf         db  0x18 ; '.'
000000000000dad0         db  0x42 ; 'B'
000000000000dad1         db  0x0e ; '.'
000000000000dad2         db  0x10 ; '.'
000000000000dad3         db  0x42 ; 'B'
000000000000dad4         db  0x0e ; '.'
000000000000dad5         db  0x08 ; '.'
000000000000dad6         db  0x44 ; 'D'
000000000000dad7         db  0x0b ; '.'
000000000000dad8         dd         0x00000038                                  ; Length of the record
000000000000dadc         dd         0x000001e4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dae0         db         0xc0, 0x73, 2 dup (0xff)                    ; begin 0x4ea0
000000000000dae4         db         0xcb, 3 dup (0x00)                          ; length 0xcb (end at 0x4f6b)
000000000000dae8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dae9         db  0x42 ; 'B'
000000000000daea         db  0x0e ; '.'
000000000000daeb         db  0x10 ; '.'
000000000000daec         db  0x8d ; '.'
000000000000daed         db  0x02 ; '.'
000000000000daee         db  0x42 ; 'B'
000000000000daef         db  0x0e ; '.'
000000000000daf0         db  0x18 ; '.'
000000000000daf1         db  0x8c ; '.'
000000000000daf2         db  0x03 ; '.'
000000000000daf3         db  0x44 ; 'D'
000000000000daf4         db  0x0e ; '.'
000000000000daf5         db  0x20 ; ' '
000000000000daf6         db  0x86 ; '.'
000000000000daf7         db  0x04 ; '.'
000000000000daf8         db  0x41 ; 'A'
000000000000daf9         db  0x0e ; '.'
000000000000dafa         db  0x28 ; '('
000000000000dafb         db  0x83 ; '.'
000000000000dafc         db  0x05 ; '.'
000000000000dafd         db  0x49 ; 'I'
000000000000dafe         db  0x0e ; '.'
000000000000daff         db  0x50 ; 'P'
000000000000db00         db  0x72 ; 'r'
000000000000db01         db  0x0a ; '.'
000000000000db02         db  0x0e ; '.'
000000000000db03         db  0x28 ; '('
000000000000db04         db  0x41 ; 'A'
000000000000db05         db  0x0e ; '.'
000000000000db06         db  0x20 ; ' '
000000000000db07         db  0x41 ; 'A'
000000000000db08         db  0x0e ; '.'
000000000000db09         db  0x18 ; '.'
000000000000db0a         db  0x42 ; 'B'
000000000000db0b         db  0x0e ; '.'
000000000000db0c         db  0x10 ; '.'
000000000000db0d         db  0x42 ; 'B'
000000000000db0e         db  0x0e ; '.'
000000000000db0f         db  0x08 ; '.'
000000000000db10         db  0x46 ; 'F'
000000000000db11         db  0x0b ; '.'
000000000000db12         db  0x00 ; '.'
000000000000db13         db  0x00 ; '.'
000000000000db14         dd         0x0000004c                                  ; Length of the record
000000000000db18         dd         0x00000220                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000db1c         db         0x54, 0x74, 2 dup (0xff)                    ; begin 0x4f70
000000000000db20         db         0x55, 0x02, 2 dup (0x00)                    ; length 0x255 (end at 0x51c5)
000000000000db24         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db25         db  0x42 ; 'B'
000000000000db26         db  0x0e ; '.'
000000000000db27         db  0x10 ; '.'
000000000000db28         db  0x8f ; '.'
000000000000db29         db  0x02 ; '.'
000000000000db2a         db  0x42 ; 'B'
000000000000db2b         db  0x0e ; '.'
000000000000db2c         db  0x18 ; '.'
000000000000db2d         db  0x8e ; '.'
000000000000db2e         db  0x03 ; '.'
000000000000db2f         db  0x42 ; 'B'
000000000000db30         db  0x0e ; '.'
000000000000db31         db  0x20 ; ' '
000000000000db32         db  0x8d ; '.'
000000000000db33         db  0x04 ; '.'
000000000000db34         db  0x42 ; 'B'
000000000000db35         db  0x0e ; '.'
000000000000db36         db  0x28 ; '('
000000000000db37         db  0x8c ; '.'
000000000000db38         db  0x05 ; '.'
000000000000db39         db  0x41 ; 'A'
000000000000db3a         db  0x0e ; '.'
000000000000db3b         db  0x30 ; '0'
000000000000db3c         db  0x86 ; '.'
000000000000db3d         db  0x06 ; '.'
000000000000db3e         db  0x41 ; 'A'
000000000000db3f         db  0x0e ; '.'
000000000000db40         db  0x38 ; '8'
000000000000db41         db  0x83 ; '.'
000000000000db42         db  0x07 ; '.'
000000000000db43         db  0x47 ; 'G'
000000000000db44         db  0x0e ; '.'
000000000000db45         db  0xf0 ; '.'
000000000000db46         db  0x40 ; '@'
000000000000db47         db  0x03 ; '.'
000000000000db48         db  0x72 ; 'r'
000000000000db49         db  0x01 ; '.'
000000000000db4a         db  0x0a ; '.'
000000000000db4b         db  0x0e ; '.'
000000000000db4c         db  0x38 ; '8'
000000000000db4d         db  0x41 ; 'A'
000000000000db4e         db  0x0e ; '.'
000000000000db4f         db  0x30 ; '0'
000000000000db50         db  0x41 ; 'A'
000000000000db51         db  0x0e ; '.'
000000000000db52         db  0x28 ; '('
000000000000db53         db  0x42 ; 'B'
000000000000db54         db  0x0e ; '.'
000000000000db55         db  0x20 ; ' '
000000000000db56         db  0x42 ; 'B'
000000000000db57         db  0x0e ; '.'
000000000000db58         db  0x18 ; '.'
000000000000db59         db  0x42 ; 'B'
000000000000db5a         db  0x0e ; '.'
000000000000db5b         db  0x10 ; '.'
000000000000db5c         db  0x42 ; 'B'
000000000000db5d         db  0x0e ; '.'
000000000000db5e         db  0x08 ; '.'
000000000000db5f         db  0x43 ; 'C'
000000000000db60         db  0x0b ; '.'
000000000000db61         db  0x00 ; '.'
000000000000db62         db  0x00 ; '.'
000000000000db63         db  0x00 ; '.'
000000000000db64         dd         0x00000040                                  ; Length of the record
000000000000db68         dd         0x00000270                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000db6c         db         0x64, 0x76, 2 dup (0xff)                    ; begin 0x51d0
000000000000db70         db         0xc7, 0x01, 2 dup (0x00)                    ; length 0x1c7 (end at 0x5397)
000000000000db74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db75         db  0x42 ; 'B'
000000000000db76         db  0x0e ; '.'
000000000000db77         db  0x10 ; '.'
000000000000db78         db  0x8e ; '.'
000000000000db79         db  0x02 ; '.'
000000000000db7a         db  0x42 ; 'B'
000000000000db7b         db  0x0e ; '.'
000000000000db7c         db  0x18 ; '.'
000000000000db7d         db  0x8d ; '.'
000000000000db7e         db  0x03 ; '.'
000000000000db7f         db  0x42 ; 'B'
000000000000db80         db  0x0e ; '.'
000000000000db81         db  0x20 ; ' '
000000000000db82         db  0x8c ; '.'
000000000000db83         db  0x04 ; '.'
000000000000db84         db  0x41 ; 'A'
000000000000db85         db  0x0e ; '.'
000000000000db86         db  0x28 ; '('
000000000000db87         db  0x86 ; '.'
000000000000db88         db  0x05 ; '.'
000000000000db89         db  0x41 ; 'A'
000000000000db8a         db  0x0e ; '.'
000000000000db8b         db  0x30 ; '0'
000000000000db8c         db  0x83 ; '.'
000000000000db8d         db  0x06 ; '.'
000000000000db8e         db  0x47 ; 'G'
000000000000db8f         db  0x0e ; '.'
000000000000db90         db  0xd0 ; '.'
000000000000db91         db  0x01 ; '.'
000000000000db92         db  0x77 ; 'w'
000000000000db93         db  0x0a ; '.'
000000000000db94         db  0x0e ; '.'
000000000000db95         db  0x30 ; '0'
000000000000db96         db  0x41 ; 'A'
000000000000db97         db  0x0e ; '.'
000000000000db98         db  0x28 ; '('
000000000000db99         db  0x41 ; 'A'
000000000000db9a         db  0x0e ; '.'
000000000000db9b         db  0x20 ; ' '
000000000000db9c         db  0x42 ; 'B'
000000000000db9d         db  0x0e ; '.'
000000000000db9e         db  0x18 ; '.'
000000000000db9f         db  0x42 ; 'B'
000000000000dba0         db  0x0e ; '.'
000000000000dba1         db  0x10 ; '.'
000000000000dba2         db  0x42 ; 'B'
000000000000dba3         db  0x0e ; '.'
000000000000dba4         db  0x08 ; '.'
000000000000dba5         db  0x42 ; 'B'
000000000000dba6         db  0x0b ; '.'
000000000000dba7         db  0x00 ; '.'
000000000000dba8         dd         0x00000030                                  ; Length of the record
000000000000dbac         dd         0x000002b4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dbb0         db         0xf0, 0x77, 2 dup (0xff)                    ; begin 0x53a0
000000000000dbb4         db         0xec, 0x06, 2 dup (0x00)                    ; length 0x6ec (end at 0x5a8c)
000000000000dbb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbb9         db  0x42 ; 'B'
000000000000dbba         db  0x0e ; '.'
000000000000dbbb         db  0x10 ; '.'
000000000000dbbc         db  0x8c ; '.'
000000000000dbbd         db  0x02 ; '.'
000000000000dbbe         db  0x41 ; 'A'
000000000000dbbf         db  0x0e ; '.'
000000000000dbc0         db  0x18 ; '.'
000000000000dbc1         db  0x86 ; '.'
000000000000dbc2         db  0x03 ; '.'
000000000000dbc3         db  0x44 ; 'D'
000000000000dbc4         db  0x0e ; '.'
000000000000dbc5         db  0x20 ; ' '
000000000000dbc6         db  0x83 ; '.'
000000000000dbc7         db  0x04 ; '.'
000000000000dbc8         db  0x44 ; 'D'
000000000000dbc9         db  0x0e ; '.'
000000000000dbca         db  0xa0 ; '.'
000000000000dbcb         db  0x01 ; '.'
000000000000dbcc         db  0x02 ; '.'
000000000000dbcd         db  0x4c ; 'L'
000000000000dbce         db  0x0a ; '.'
000000000000dbcf         db  0x0e ; '.'
000000000000dbd0         db  0x20 ; ' '
000000000000dbd1         db  0x41 ; 'A'
000000000000dbd2         db  0x0e ; '.'
000000000000dbd3         db  0x18 ; '.'
000000000000dbd4         db  0x41 ; 'A'
000000000000dbd5         db  0x0e ; '.'
000000000000dbd6         db  0x10 ; '.'
000000000000dbd7         db  0x42 ; 'B'
000000000000dbd8         db  0x0e ; '.'
000000000000dbd9         db  0x08 ; '.'
000000000000dbda         db  0x45 ; 'E'
000000000000dbdb         db  0x0b ; '.'
000000000000dbdc         dd         0x0000004c                                  ; Length of the record
000000000000dbe0         dd         0x000002e8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dbe4         db         0xac, 0x7e, 2 dup (0xff)                    ; begin 0x5a90
000000000000dbe8         db         0x7f, 0x06, 2 dup (0x00)                    ; length 0x67f (end at 0x610f)
000000000000dbec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbed         db  0x42 ; 'B'
000000000000dbee         db  0x0e ; '.'
000000000000dbef         db  0x10 ; '.'
000000000000dbf0         db  0x8f ; '.'
000000000000dbf1         db  0x02 ; '.'
000000000000dbf2         db  0x42 ; 'B'
000000000000dbf3         db  0x0e ; '.'
000000000000dbf4         db  0x18 ; '.'
000000000000dbf5         db  0x8e ; '.'
000000000000dbf6         db  0x03 ; '.'
000000000000dbf7         db  0x47 ; 'G'
000000000000dbf8         db  0x0e ; '.'
000000000000dbf9         db  0x20 ; ' '
000000000000dbfa         db  0x8d ; '.'
000000000000dbfb         db  0x04 ; '.'
000000000000dbfc         db  0x42 ; 'B'
000000000000dbfd         db  0x0e ; '.'
000000000000dbfe         db  0x28 ; '('
000000000000dbff         db  0x8c ; '.'
000000000000dc00         db  0x05 ; '.'
000000000000dc01         db  0x44 ; 'D'
000000000000dc02         db  0x0e ; '.'
000000000000dc03         db  0x30 ; '0'
000000000000dc04         db  0x86 ; '.'
000000000000dc05         db  0x06 ; '.'
000000000000dc06         db  0x41 ; 'A'
000000000000dc07         db  0x0e ; '.'
000000000000dc08         db  0x38 ; '8'
000000000000dc09         db  0x83 ; '.'
000000000000dc0a         db  0x07 ; '.'
000000000000dc0b         db  0x4a ; 'J'
000000000000dc0c         db  0x0e ; '.'
000000000000dc0d         db  0xf0 ; '.'
000000000000dc0e         db  0x01 ; '.'
000000000000dc0f         db  0x03 ; '.'
000000000000dc10         db  0x40 ; '@'
000000000000dc11         db  0x01 ; '.'
000000000000dc12         db  0x0a ; '.'
000000000000dc13         db  0x0e ; '.'
000000000000dc14         db  0x38 ; '8'
000000000000dc15         db  0x41 ; 'A'
000000000000dc16         db  0x0e ; '.'
000000000000dc17         db  0x30 ; '0'
000000000000dc18         db  0x41 ; 'A'
000000000000dc19         db  0x0e ; '.'
000000000000dc1a         db  0x28 ; '('
000000000000dc1b         db  0x42 ; 'B'
000000000000dc1c         db  0x0e ; '.'
000000000000dc1d         db  0x20 ; ' '
000000000000dc1e         db  0x42 ; 'B'
000000000000dc1f         db  0x0e ; '.'
000000000000dc20         db  0x18 ; '.'
000000000000dc21         db  0x42 ; 'B'
000000000000dc22         db  0x0e ; '.'
000000000000dc23         db  0x10 ; '.'
000000000000dc24         db  0x42 ; 'B'
000000000000dc25         db  0x0e ; '.'
000000000000dc26         db  0x08 ; '.'
000000000000dc27         db  0x4a ; 'J'
000000000000dc28         db  0x0b ; '.'
000000000000dc29         db  0x00 ; '.'
000000000000dc2a         db  0x00 ; '.'
000000000000dc2b         db  0x00 ; '.'
000000000000dc2c         dd         0x00000028                                  ; Length of the record
000000000000dc30         dd         0x00000338                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dc34         db         0xdc, 0x84, 2 dup (0xff)                    ; begin 0x6110
000000000000dc38         db         0xba, 0x04, 2 dup (0x00)                    ; length 0x4ba (end at 0x65ca)
000000000000dc3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc3d         db  0x42 ; 'B'
000000000000dc3e         db  0x0e ; '.'
000000000000dc3f         db  0x10 ; '.'
000000000000dc40         db  0x8d ; '.'
000000000000dc41         db  0x02 ; '.'
000000000000dc42         db  0x42 ; 'B'
000000000000dc43         db  0x0e ; '.'
000000000000dc44         db  0x18 ; '.'
000000000000dc45         db  0x8c ; '.'
000000000000dc46         db  0x03 ; '.'
000000000000dc47         db  0x46 ; 'F'
000000000000dc48         db  0x0e ; '.'
000000000000dc49         db  0x20 ; ' '
000000000000dc4a         db  0x86 ; '.'
000000000000dc4b         db  0x04 ; '.'
000000000000dc4c         db  0x41 ; 'A'
000000000000dc4d         db  0x0e ; '.'
000000000000dc4e         db  0x28 ; '('
000000000000dc4f         db  0x83 ; '.'
000000000000dc50         db  0x05 ; '.'
000000000000dc51         db  0x49 ; 'I'
000000000000dc52         db  0x0e ; '.'
000000000000dc53         db  0xb0 ; '.'
000000000000dc54         db  0x01 ; '.'
000000000000dc55         db  0x00 ; '.'
000000000000dc56         db  0x00 ; '.'
000000000000dc57         db  0x00 ; '.'
000000000000dc58         dd         0x00000064                                  ; Length of the record
000000000000dc5c         dd         0x00000364                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dc60         db         0xf0, 0x42, 2 dup (0xff)                    ; begin 0x1f50
000000000000dc64         db         0x5d, 0x29, 2 dup (0x00)                    ; length 0x295d (end at 0x48ad)
000000000000dc68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc69         db  0x42 ; 'B'
000000000000dc6a         db  0x0e ; '.'
000000000000dc6b         db  0x10 ; '.'
000000000000dc6c         db  0x8f ; '.'
000000000000dc6d         db  0x02 ; '.'
000000000000dc6e         db  0x42 ; 'B'
000000000000dc6f         db  0x0e ; '.'
000000000000dc70         db  0x18 ; '.'
000000000000dc71         db  0x8e ; '.'
000000000000dc72         db  0x03 ; '.'
000000000000dc73         db  0x42 ; 'B'
000000000000dc74         db  0x0e ; '.'
000000000000dc75         db  0x20 ; ' '
000000000000dc76         db  0x8d ; '.'
000000000000dc77         db  0x04 ; '.'
000000000000dc78         db  0x42 ; 'B'
000000000000dc79         db  0x0e ; '.'
000000000000dc7a         db  0x28 ; '('
000000000000dc7b         db  0x8c ; '.'
000000000000dc7c         db  0x05 ; '.'
000000000000dc7d         db  0x41 ; 'A'
000000000000dc7e         db  0x0e ; '.'
000000000000dc7f         db  0x30 ; '0'
000000000000dc80         db  0x86 ; '.'
000000000000dc81         db  0x06 ; '.'
000000000000dc82         db  0x41 ; 'A'
000000000000dc83         db  0x0e ; '.'
000000000000dc84         db  0x38 ; '8'
000000000000dc85         db  0x83 ; '.'
000000000000dc86         db  0x07 ; '.'
000000000000dc87         db  0x4c ; 'L'
000000000000dc88         db  0x0e ; '.'
000000000000dc89         db  0x80 ; '.'
000000000000dc8a         db  0x06 ; '.'
000000000000dc8b         db  0x03 ; '.'
000000000000dc8c         db  0xe4 ; '.'
000000000000dc8d         db  0x01 ; '.'
000000000000dc8e         db  0x0e ; '.'
000000000000dc8f         db  0x88 ; '.'
000000000000dc90         db  0x06 ; '.'
000000000000dc91         db  0x49 ; 'I'
000000000000dc92         db  0x0e ; '.'
000000000000dc93         db  0x90 ; '.'
000000000000dc94         db  0x06 ; '.'
000000000000dc95         db  0x4f ; 'O'
000000000000dc96         db  0x0e ; '.'
000000000000dc97         db  0x98 ; '.'
000000000000dc98         db  0x06 ; '.'
000000000000dc99         db  0x5d ; ']'
000000000000dc9a         db  0x0e ; '.'
000000000000dc9b         db  0xa0 ; '.'
000000000000dc9c         db  0x06 ; '.'
000000000000dc9d         db  0x4b ; 'K'
000000000000dc9e         db  0x0e ; '.'
000000000000dc9f         db  0x80 ; '.'
000000000000dca0         db  0x06 ; '.'
000000000000dca1         db  0x03 ; '.'
000000000000dca2         db  0xbc ; '.'
000000000000dca3         db  0x08 ; '.'
000000000000dca4         db  0x0a ; '.'
000000000000dca5         db  0x0e ; '.'
000000000000dca6         db  0x38 ; '8'
000000000000dca7         db  0x41 ; 'A'
000000000000dca8         db  0x0e ; '.'
000000000000dca9         db  0x30 ; '0'
000000000000dcaa         db  0x41 ; 'A'
000000000000dcab         db  0x0e ; '.'
000000000000dcac         db  0x28 ; '('
000000000000dcad         db  0x42 ; 'B'
000000000000dcae         db  0x0e ; '.'
000000000000dcaf         db  0x20 ; ' '
000000000000dcb0         db  0x42 ; 'B'
000000000000dcb1         db  0x0e ; '.'
000000000000dcb2         db  0x18 ; '.'
000000000000dcb3         db  0x42 ; 'B'
000000000000dcb4         db  0x0e ; '.'
000000000000dcb5         db  0x10 ; '.'
000000000000dcb6         db  0x42 ; 'B'
000000000000dcb7         db  0x0e ; '.'
000000000000dcb8         db  0x08 ; '.'
000000000000dcb9         db  0x41 ; 'A'
000000000000dcba         db  0x0b ; '.'
000000000000dcbb         db  0x00 ; '.'
000000000000dcbc         db  0x00 ; '.'
000000000000dcbd         db  0x00 ; '.'
000000000000dcbe         db  0x00 ; '.'
000000000000dcbf         db  0x00 ; '.'
000000000000dcc0         dd         0x00000010                                  ; Length of the record
000000000000dcc4         dd         0x000003cc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dcc8         db         0x08, 0x89, 2 dup (0xff)                    ; begin 0x65d0
000000000000dccc         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x65da)
000000000000dcd0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dcd1         align      4
000000000000dcd4         dd         0x00000048                                  ; Length of the record
000000000000dcd8         dd         0x000003e0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dcdc         db         0x04, 0x89, 2 dup (0xff)                    ; begin 0x65e0
000000000000dce0         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x66f6)
000000000000dce4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dce5         db  0x42 ; 'B'
000000000000dce6         db  0x0e ; '.'
000000000000dce7         db  0x10 ; '.'
000000000000dce8         db  0x8f ; '.'
000000000000dce9         db  0x02 ; '.'
000000000000dcea         db  0x42 ; 'B'
000000000000dceb         db  0x0e ; '.'
000000000000dcec         db  0x18 ; '.'
000000000000dced         db  0x8e ; '.'
000000000000dcee         db  0x03 ; '.'
000000000000dcef         db  0x45 ; 'E'
000000000000dcf0         db  0x0e ; '.'
000000000000dcf1         db  0x20 ; ' '
000000000000dcf2         db  0x8d ; '.'
000000000000dcf3         db  0x04 ; '.'
000000000000dcf4         db  0x42 ; 'B'
000000000000dcf5         db  0x0e ; '.'
000000000000dcf6         db  0x28 ; '('
000000000000dcf7         db  0x8c ; '.'
000000000000dcf8         db  0x05 ; '.'
000000000000dcf9         db  0x44 ; 'D'
000000000000dcfa         db  0x0e ; '.'
000000000000dcfb         db  0x30 ; '0'
000000000000dcfc         db  0x86 ; '.'
000000000000dcfd         db  0x06 ; '.'
000000000000dcfe         db  0x41 ; 'A'
000000000000dcff         db  0x0e ; '.'
000000000000dd00         db  0x38 ; '8'
000000000000dd01         db  0x83 ; '.'
000000000000dd02         db  0x07 ; '.'
000000000000dd03         db  0x47 ; 'G'
000000000000dd04         db  0x0e ; '.'
000000000000dd05         db  0x60 ; '`'
000000000000dd06         db  0x02 ; '.'
000000000000dd07         db  0xde ; '.'
000000000000dd08         db  0x0a ; '.'
000000000000dd09         db  0x0e ; '.'
000000000000dd0a         db  0x38 ; '8'
000000000000dd0b         db  0x41 ; 'A'
000000000000dd0c         db  0x0e ; '.'
000000000000dd0d         db  0x30 ; '0'
000000000000dd0e         db  0x41 ; 'A'
000000000000dd0f         db  0x0e ; '.'
000000000000dd10         db  0x28 ; '('
000000000000dd11         db  0x42 ; 'B'
000000000000dd12         db  0x0e ; '.'
000000000000dd13         db  0x20 ; ' '
000000000000dd14         db  0x42 ; 'B'
000000000000dd15         db  0x0e ; '.'
000000000000dd16         db  0x18 ; '.'
000000000000dd17         db  0x42 ; 'B'
000000000000dd18         db  0x0e ; '.'
000000000000dd19         db  0x10 ; '.'
000000000000dd1a         db  0x42 ; 'B'
000000000000dd1b         db  0x0e ; '.'
000000000000dd1c         db  0x08 ; '.'
000000000000dd1d         db  0x41 ; 'A'
000000000000dd1e         db  0x0b ; '.'
000000000000dd1f         db  0x00 ; '.'
000000000000dd20         dd         0x00000028                                  ; Length of the record
000000000000dd24         dd         0x0000042c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dd28         db         0xd8, 0x89, 2 dup (0xff)                    ; begin 0x6700
000000000000dd2c         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x6773)
000000000000dd30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd31         db  0x46 ; 'F'
000000000000dd32         db  0x0e ; '.'
000000000000dd33         db  0x10 ; '.'
000000000000dd34         db  0x8c ; '.'
000000000000dd35         db  0x02 ; '.'
000000000000dd36         db  0x46 ; 'F'
000000000000dd37         db  0x0e ; '.'
000000000000dd38         db  0x18 ; '.'
000000000000dd39         db  0x86 ; '.'
000000000000dd3a         db  0x03 ; '.'
000000000000dd3b         db  0x44 ; 'D'
000000000000dd3c         db  0x0e ; '.'
000000000000dd3d         db  0x20 ; ' '
000000000000dd3e         db  0x83 ; '.'
000000000000dd3f         db  0x04 ; '.'
000000000000dd40         db  0x7f ; '.'
000000000000dd41         db  0x0a ; '.'
000000000000dd42         db  0x0e ; '.'
000000000000dd43         db  0x18 ; '.'
000000000000dd44         db  0x41 ; 'A'
000000000000dd45         db  0x0e ; '.'
000000000000dd46         db  0x10 ; '.'
000000000000dd47         db  0x42 ; 'B'
000000000000dd48         db  0x0e ; '.'
000000000000dd49         db  0x08 ; '.'
000000000000dd4a         db  0x4e ; 'N'
000000000000dd4b         db  0x0b ; '.'
000000000000dd4c         dd         0x0000005c                                  ; Length of the record
000000000000dd50         dd         0x00000458                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dd54         db         0x2c, 0x8a, 2 dup (0xff)                    ; begin 0x6780
000000000000dd58         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x68a0)
000000000000dd5c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd5d         db  0x42 ; 'B'
000000000000dd5e         db  0x0e ; '.'
000000000000dd5f         db  0x10 ; '.'
000000000000dd60         db  0x8f ; '.'
000000000000dd61         db  0x02 ; '.'
000000000000dd62         db  0x42 ; 'B'
000000000000dd63         db  0x0e ; '.'
000000000000dd64         db  0x18 ; '.'
000000000000dd65         db  0x8e ; '.'
000000000000dd66         db  0x03 ; '.'
000000000000dd67         db  0x45 ; 'E'
000000000000dd68         db  0x0e ; '.'
000000000000dd69         db  0x20 ; ' '
000000000000dd6a         db  0x8d ; '.'
000000000000dd6b         db  0x04 ; '.'
000000000000dd6c         db  0x42 ; 'B'
000000000000dd6d         db  0x0e ; '.'
000000000000dd6e         db  0x28 ; '('
000000000000dd6f         db  0x8c ; '.'
000000000000dd70         db  0x05 ; '.'
000000000000dd71         db  0x43 ; 'C'
000000000000dd72         db  0x0e ; '.'
000000000000dd73         db  0x30 ; '0'
000000000000dd74         db  0x86 ; '.'
000000000000dd75         db  0x06 ; '.'
000000000000dd76         db  0x41 ; 'A'
000000000000dd77         db  0x0e ; '.'
000000000000dd78         db  0x38 ; '8'
000000000000dd79         db  0x83 ; '.'
000000000000dd7a         db  0x07 ; '.'
000000000000dd7b         db  0x56 ; 'V'
000000000000dd7c         db  0x0e ; '.'
000000000000dd7d         db  0x40 ; '@'
000000000000dd7e         db  0x02 ; '.'
000000000000dd7f         db  0xd3 ; '.'
000000000000dd80         db  0x0a ; '.'
000000000000dd81         db  0x0e ; '.'
000000000000dd82         db  0x38 ; '8'
000000000000dd83         db  0x41 ; 'A'
000000000000dd84         db  0x0e ; '.'
000000000000dd85         db  0x30 ; '0'
000000000000dd86         db  0x41 ; 'A'
000000000000dd87         db  0x0e ; '.'
000000000000dd88         db  0x28 ; '('
000000000000dd89         db  0x42 ; 'B'
000000000000dd8a         db  0x0e ; '.'
000000000000dd8b         db  0x20 ; ' '
000000000000dd8c         db  0x42 ; 'B'
000000000000dd8d         db  0x0e ; '.'
000000000000dd8e         db  0x18 ; '.'
000000000000dd8f         db  0x42 ; 'B'
000000000000dd90         db  0x0e ; '.'
000000000000dd91         db  0x10 ; '.'
000000000000dd92         db  0x42 ; 'B'
000000000000dd93         db  0x0e ; '.'
000000000000dd94         db  0x08 ; '.'
000000000000dd95         db  0x46 ; 'F'
000000000000dd96         db  0x0b ; '.'
000000000000dd97         db  0x44 ; 'D'
000000000000dd98         db  0x0e ; '.'
000000000000dd99         db  0x38 ; '8'
000000000000dd9a         db  0x46 ; 'F'
000000000000dd9b         db  0x0e ; '.'
000000000000dd9c         db  0x30 ; '0'
000000000000dd9d         db  0x41 ; 'A'
000000000000dd9e         db  0x0e ; '.'
000000000000dd9f         db  0x28 ; '('
000000000000dda0         db  0x42 ; 'B'
000000000000dda1         db  0x0e ; '.'
000000000000dda2         db  0x20 ; ' '
000000000000dda3         db  0x42 ; 'B'
000000000000dda4         db  0x0e ; '.'
000000000000dda5         db  0x18 ; '.'
000000000000dda6         db  0x42 ; 'B'
000000000000dda7         db  0x0e ; '.'
000000000000dda8         db  0x10 ; '.'
000000000000dda9         db  0x42 ; 'B'
000000000000ddaa         db  0x0e ; '.'
000000000000ddab         db  0x08 ; '.'
000000000000ddac         dd         0x00000048                                  ; Length of the record
000000000000ddb0         dd         0x000004b8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ddb4         db         0xec, 0x8a, 2 dup (0xff)                    ; begin 0x68a0
000000000000ddb8         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x690d)
000000000000ddbc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ddbd         db  0x42 ; 'B'
000000000000ddbe         db  0x0e ; '.'
000000000000ddbf         db  0x10 ; '.'
000000000000ddc0         db  0x8f ; '.'
000000000000ddc1         db  0x02 ; '.'
000000000000ddc2         db  0x42 ; 'B'
000000000000ddc3         db  0x0e ; '.'
000000000000ddc4         db  0x18 ; '.'
000000000000ddc5         db  0x8e ; '.'
000000000000ddc6         db  0x03 ; '.'
000000000000ddc7         db  0x45 ; 'E'
000000000000ddc8         db  0x0e ; '.'
000000000000ddc9         db  0x20 ; ' '
000000000000ddca         db  0x8d ; '.'
000000000000ddcb         db  0x04 ; '.'
000000000000ddcc         db  0x42 ; 'B'
000000000000ddcd         db  0x0e ; '.'
000000000000ddce         db  0x28 ; '('
000000000000ddcf         db  0x8c ; '.'
000000000000ddd0         db  0x05 ; '.'
000000000000ddd1         db  0x44 ; 'D'
000000000000ddd2         db  0x0e ; '.'
000000000000ddd3         db  0x30 ; '0'
000000000000ddd4         db  0x86 ; '.'
000000000000ddd5         db  0x06 ; '.'
000000000000ddd6         db  0x41 ; 'A'
000000000000ddd7         db  0x0e ; '.'
000000000000ddd8         db  0x38 ; '8'
000000000000ddd9         db  0x83 ; '.'
000000000000ddda         db  0x07 ; '.'
000000000000dddb         db  0x50 ; 'P'
000000000000dddc         db  0x0e ; '.'
000000000000dddd         db  0x40 ; '@'
000000000000ddde         db  0x5a ; 'Z'
000000000000dddf         db  0x0a ; '.'
000000000000dde0         db  0x0e ; '.'
000000000000dde1         db  0x38 ; '8'
000000000000dde2         db  0x41 ; 'A'
000000000000dde3         db  0x0e ; '.'
000000000000dde4         db  0x30 ; '0'
000000000000dde5         db  0x41 ; 'A'
000000000000dde6         db  0x0e ; '.'
000000000000dde7         db  0x28 ; '('
000000000000dde8         db  0x42 ; 'B'
000000000000dde9         db  0x0e ; '.'
000000000000ddea         db  0x20 ; ' '
000000000000ddeb         db  0x42 ; 'B'
000000000000ddec         db  0x0e ; '.'
000000000000dded         db  0x18 ; '.'
000000000000ddee         db  0x42 ; 'B'
000000000000ddef         db  0x0e ; '.'
000000000000ddf0         db  0x10 ; '.'
000000000000ddf1         db  0x42 ; 'B'
000000000000ddf2         db  0x0e ; '.'
000000000000ddf3         db  0x08 ; '.'
000000000000ddf4         db  0x41 ; 'A'
000000000000ddf5         db  0x0b ; '.'
000000000000ddf6         db  0x00 ; '.'
000000000000ddf7         db  0x00 ; '.'
000000000000ddf8         dd         0x0000003c                                  ; Length of the record
000000000000ddfc         dd         0x00000504                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000de00         db         0x10, 0x8b, 2 dup (0xff)                    ; begin 0x6910
000000000000de04         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x695d)
000000000000de08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de09         db  0x42 ; 'B'
000000000000de0a         db  0x0e ; '.'
000000000000de0b         db  0x10 ; '.'
000000000000de0c         db  0x8e ; '.'
000000000000de0d         db  0x02 ; '.'
000000000000de0e         db  0x42 ; 'B'
000000000000de0f         db  0x0e ; '.'
000000000000de10         db  0x18 ; '.'
000000000000de11         db  0x8d ; '.'
000000000000de12         db  0x03 ; '.'
000000000000de13         db  0x42 ; 'B'
000000000000de14         db  0x0e ; '.'
000000000000de15         db  0x20 ; ' '
000000000000de16         db  0x8c ; '.'
000000000000de17         db  0x04 ; '.'
000000000000de18         db  0x41 ; 'A'
000000000000de19         db  0x0e ; '.'
000000000000de1a         db  0x28 ; '('
000000000000de1b         db  0x86 ; '.'
000000000000de1c         db  0x05 ; '.'
000000000000de1d         db  0x41 ; 'A'
000000000000de1e         db  0x0e ; '.'
000000000000de1f         db  0x30 ; '0'
000000000000de20         db  0x83 ; '.'
000000000000de21         db  0x06 ; '.'
000000000000de22         db  0x7a ; 'z'
000000000000de23         db  0x0e ; '.'
000000000000de24         db  0x28 ; '('
000000000000de25         db  0x44 ; 'D'
000000000000de26         db  0x0e ; '.'
000000000000de27         db  0x20 ; ' '
000000000000de28         db  0x42 ; 'B'
000000000000de29         db  0x0e ; '.'
000000000000de2a         db  0x18 ; '.'
000000000000de2b         db  0x42 ; 'B'
000000000000de2c         db  0x0e ; '.'
000000000000de2d         db  0x10 ; '.'
000000000000de2e         db  0x42 ; 'B'
000000000000de2f         db  0x0e ; '.'
000000000000de30         db  0x08 ; '.'
000000000000de31         db  0x00 ; '.'
000000000000de32         db  0x00 ; '.'
000000000000de33         db  0x00 ; '.'
000000000000de34         db  0x00 ; '.'
000000000000de35         db  0x00 ; '.'
000000000000de36         db  0x00 ; '.'
000000000000de37         db  0x00 ; '.'
000000000000de38         dd         0x0000003c                                  ; Length of the record
000000000000de3c         dd         0x00000544                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000de40         db         0x20, 0x8b, 2 dup (0xff)                    ; begin 0x6960
000000000000de44         db         0xb3, 3 dup (0x00)                          ; length 0xb3 (end at 0x6a13)
000000000000de48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de49         db  0x42 ; 'B'
000000000000de4a         db  0x0e ; '.'
000000000000de4b         db  0x10 ; '.'
000000000000de4c         db  0x8d ; '.'
000000000000de4d         db  0x02 ; '.'
000000000000de4e         db  0x42 ; 'B'
000000000000de4f         db  0x0e ; '.'
000000000000de50         db  0x18 ; '.'
000000000000de51         db  0x8c ; '.'
000000000000de52         db  0x03 ; '.'
000000000000de53         db  0x41 ; 'A'
000000000000de54         db  0x0e ; '.'
000000000000de55         db  0x20 ; ' '
000000000000de56         db  0x86 ; '.'
000000000000de57         db  0x04 ; '.'
000000000000de58         db  0x41 ; 'A'
000000000000de59         db  0x0e ; '.'
000000000000de5a         db  0x28 ; '('
000000000000de5b         db  0x83 ; '.'
000000000000de5c         db  0x05 ; '.'
000000000000de5d         db  0x4a ; 'J'
000000000000de5e         db  0x0e ; '.'
000000000000de5f         db  0x60 ; '`'
000000000000de60         db  0x02 ; '.'
000000000000de61         db  0x4d ; 'M'
000000000000de62         db  0x0a ; '.'
000000000000de63         db  0x0e ; '.'
000000000000de64         db  0x28 ; '('
000000000000de65         db  0x41 ; 'A'
000000000000de66         db  0x0e ; '.'
000000000000de67         db  0x20 ; ' '
000000000000de68         db  0x41 ; 'A'
000000000000de69         db  0x0e ; '.'
000000000000de6a         db  0x18 ; '.'
000000000000de6b         db  0x42 ; 'B'
000000000000de6c         db  0x0e ; '.'
000000000000de6d         db  0x10 ; '.'
000000000000de6e         db  0x42 ; 'B'
000000000000de6f         db  0x0e ; '.'
000000000000de70         db  0x08 ; '.'
000000000000de71         db  0x45 ; 'E'
000000000000de72         db  0x0b ; '.'
000000000000de73         db  0x00 ; '.'
000000000000de74         db  0x00 ; '.'
000000000000de75         db  0x00 ; '.'
000000000000de76         db  0x00 ; '.'
000000000000de77         db  0x00 ; '.'
000000000000de78         dd         0x00000010                                  ; Length of the record
000000000000de7c         dd         0x00000584                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000de80         db         0xa0, 0x8b, 2 dup (0xff)                    ; begin 0x6a20
000000000000de84         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x6a28)
000000000000de88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de89         align      4
000000000000de8c         dd         0x00000010                                  ; Length of the record
000000000000de90         dd         0x00000598                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000de94         db         0x9c, 0x8b, 2 dup (0xff)                    ; begin 0x6a30
000000000000de98         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x6a38)
000000000000de9c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de9d         align      32
000000000000dea0         dd         0x0000002c                                  ; Length of the record
000000000000dea4         dd         0x000005ac                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dea8         db         0x98, 0x8b, 2 dup (0xff)                    ; begin 0x6a40
000000000000deac         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x6ae4)
000000000000deb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000deb1         db  0x41 ; 'A'
000000000000deb2         db  0x0e ; '.'
000000000000deb3         db  0x10 ; '.'
000000000000deb4         db  0x86 ; '.'
000000000000deb5         db  0x02 ; '.'
000000000000deb6         db  0x41 ; 'A'
000000000000deb7         db  0x0e ; '.'
000000000000deb8         db  0x18 ; '.'
000000000000deb9         db  0x83 ; '.'
000000000000deba         db  0x03 ; '.'
000000000000debb         db  0x44 ; 'D'
000000000000debc         db  0x0e ; '.'
000000000000debd         db  0x20 ; ' '
000000000000debe         db  0x7a ; 'z'
000000000000debf         db  0x0a ; '.'
000000000000dec0         db  0x0e ; '.'
000000000000dec1         db  0x18 ; '.'
000000000000dec2         db  0x41 ; 'A'
000000000000dec3         db  0x0e ; '.'
000000000000dec4         db  0x10 ; '.'
000000000000dec5         db  0x41 ; 'A'
000000000000dec6         db  0x0e ; '.'
000000000000dec7         db  0x08 ; '.'
000000000000dec8         db  0x41 ; 'A'
000000000000dec9         db  0x0b ; '.'
000000000000deca         db  0x00 ; '.'
000000000000decb         db  0x00 ; '.'
000000000000decc         db  0x00 ; '.'
000000000000decd         db  0x00 ; '.'
000000000000dece         db  0x00 ; '.'
000000000000decf         db  0x00 ; '.'
000000000000ded0         dd         0x00000030                                  ; Length of the record
000000000000ded4         dd         0x000005dc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ded8         db         0x18, 0x8c, 2 dup (0xff)                    ; begin 0x6af0
000000000000dedc         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0x6b4d)
000000000000dee0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dee1         db  0x41 ; 'A'
000000000000dee2         db  0x0e ; '.'
000000000000dee3         db  0x10 ; '.'
000000000000dee4         db  0x86 ; '.'
000000000000dee5         db  0x02 ; '.'
000000000000dee6         db  0x41 ; 'A'
000000000000dee7         db  0x0e ; '.'
000000000000dee8         db  0x18 ; '.'
000000000000dee9         db  0x83 ; '.'
000000000000deea         db  0x03 ; '.'
000000000000deeb         db  0x49 ; 'I'
000000000000deec         db  0x0e ; '.'
000000000000deed         db  0x20 ; ' '
000000000000deee         db  0x7c ; '|'
000000000000deef         db  0x0a ; '.'
000000000000def0         db  0x0e ; '.'
000000000000def1         db  0x18 ; '.'
000000000000def2         db  0x44 ; 'D'
000000000000def3         db  0x0e ; '.'
000000000000def4         db  0x10 ; '.'
000000000000def5         db  0x41 ; 'A'
000000000000def6         db  0x0e ; '.'
000000000000def7         db  0x08 ; '.'
000000000000def8         db  0x44 ; 'D'
000000000000def9         db  0x0b ; '.'
000000000000defa         db  0x44 ; 'D'
000000000000defb         db  0x0e ; '.'
000000000000defc         db  0x18 ; '.'
000000000000defd         db  0x47 ; 'G'
000000000000defe         db  0x0e ; '.'
000000000000deff         db  0x10 ; '.'
000000000000df00         db  0x41 ; 'A'
000000000000df01         db  0x0e ; '.'
000000000000df02         db  0x08 ; '.'
000000000000df03         db  0x00 ; '.'
000000000000df04         dd         0x00000028                                  ; Length of the record
000000000000df08         dd         0x00000610                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000df0c         db         0x44, 0x8c, 2 dup (0xff)                    ; begin 0x6b50
000000000000df10         db         0x5a, 3 dup (0x00)                          ; length 0x5a (end at 0x6baa)
000000000000df14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df15         db  0x41 ; 'A'
000000000000df16         db  0x0e ; '.'
000000000000df17         db  0x10 ; '.'
000000000000df18         db  0x86 ; '.'
000000000000df19         db  0x02 ; '.'
000000000000df1a         db  0x41 ; 'A'
000000000000df1b         db  0x0e ; '.'
000000000000df1c         db  0x18 ; '.'
000000000000df1d         db  0x83 ; '.'
000000000000df1e         db  0x03 ; '.'
000000000000df1f         db  0x47 ; 'G'
000000000000df20         db  0x0e ; '.'
000000000000df21         db  0x20 ; ' '
000000000000df22         db  0x02 ; '.'
000000000000df23         db  0x41 ; 'A'
000000000000df24         db  0x0a ; '.'
000000000000df25         db  0x0e ; '.'
000000000000df26         db  0x18 ; '.'
000000000000df27         db  0x44 ; 'D'
000000000000df28         db  0x0e ; '.'
000000000000df29         db  0x10 ; '.'
000000000000df2a         db  0x41 ; 'A'
000000000000df2b         db  0x0e ; '.'
000000000000df2c         db  0x08 ; '.'
000000000000df2d         db  0x41 ; 'A'
000000000000df2e         db  0x0b ; '.'
000000000000df2f         db  0x00 ; '.'
000000000000df30         dd         0x00000010                                  ; Length of the record
000000000000df34         dd         0x0000063c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000df38         db         0x78, 0x8c, 2 dup (0xff)                    ; begin 0x6bb0
000000000000df3c         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x6c0c)
000000000000df40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df41         align      4
000000000000df44         dd         0x00000028                                  ; Length of the record
000000000000df48         dd         0x00000650                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000df4c         db         0xc4, 0x8c, 2 dup (0xff)                    ; begin 0x6c10
000000000000df50         db         0x47, 3 dup (0x00)                          ; length 0x47 (end at 0x6c57)
000000000000df54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df55         db  0x41 ; 'A'
000000000000df56         db  0x0e ; '.'
000000000000df57         db  0x10 ; '.'
000000000000df58         db  0x83 ; '.'
000000000000df59         db  0x02 ; '.'
000000000000df5a         db  0x5a ; 'Z'
000000000000df5b         db  0x0a ; '.'
000000000000df5c         db  0x0e ; '.'
000000000000df5d         db  0x08 ; '.'
000000000000df5e         db  0x45 ; 'E'
000000000000df5f         db  0x0b ; '.'
000000000000df60         db  0x5d ; ']'
000000000000df61         db  0x0a ; '.'
000000000000df62         db  0x0e ; '.'
000000000000df63         db  0x08 ; '.'
000000000000df64         db  0x43 ; 'C'
000000000000df65         db  0x0b ; '.'
000000000000df66         db  0x46 ; 'F'
000000000000df67         db  0x0e ; '.'
000000000000df68         db  0x08 ; '.'
000000000000df69         db  0x00 ; '.'
000000000000df6a         db  0x00 ; '.'
000000000000df6b         db  0x00 ; '.'
000000000000df6c         db  0x00 ; '.'
000000000000df6d         db  0x00 ; '.'
000000000000df6e         db  0x00 ; '.'
000000000000df6f         db  0x00 ; '.'
000000000000df70         dd         0x0000001c                                  ; Length of the record
000000000000df74         dd         0x0000067c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000df78         db         0xe8, 0x8c, 2 dup (0xff)                    ; begin 0x6c60
000000000000df7c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x6cce)
000000000000df80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df81         db  0x44 ; 'D'
000000000000df82         db  0x0e ; '.'
000000000000df83         db  0x60 ; '`'
000000000000df84         db  0x7f ; '.'
000000000000df85         db  0x0a ; '.'
000000000000df86         db  0x0e ; '.'
000000000000df87         db  0x08 ; '.'
000000000000df88         db  0x45 ; 'E'
000000000000df89         db  0x0b ; '.'
000000000000df8a         db  0x00 ; '.'
000000000000df8b         db  0x00 ; '.'
000000000000df8c         db  0x00 ; '.'
000000000000df8d         db  0x00 ; '.'
000000000000df8e         db  0x00 ; '.'
000000000000df8f         db  0x00 ; '.'
000000000000df90         dd         0x00000010                                  ; Length of the record
000000000000df94         dd         0x0000069c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000df98         db         0x38, 0x8d, 2 dup (0xff)                    ; begin 0x6cd0
000000000000df9c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x6d63)
000000000000dfa0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfa1         align      4
000000000000dfa4         dd         0x00000010                                  ; Length of the record
000000000000dfa8         dd         0x000006b0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dfac         db         0xc4, 0x8d, 2 dup (0xff)                    ; begin 0x6d70
000000000000dfb0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x6d80)
000000000000dfb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfb5         align      8
000000000000dfb8         dd         0x00000010                                  ; Length of the record
000000000000dfbc         dd         0x000006c4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dfc0         db         0xc0, 0x8d, 2 dup (0xff)                    ; begin 0x6d80
000000000000dfc4         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x6d87)
000000000000dfc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfc9         align      4
000000000000dfcc         dd         0x00000018                                  ; Length of the record
000000000000dfd0         dd         0x000006d8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dfd4         db         0xbc, 0x8d, 2 dup (0xff)                    ; begin 0x6d90
000000000000dfd8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x6db2)
000000000000dfdc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfdd         db  0x41 ; 'A'
000000000000dfde         db  0x0e ; '.'
000000000000dfdf         db  0x10 ; '.'
000000000000dfe0         db  0x83 ; '.'
000000000000dfe1         db  0x02 ; '.'
000000000000dfe2         db  0x5b ; '['
000000000000dfe3         db  0x0a ; '.'
000000000000dfe4         db  0x0e ; '.'
000000000000dfe5         db  0x08 ; '.'
000000000000dfe6         db  0x41 ; 'A'
000000000000dfe7         db  0x0b ; '.'
000000000000dfe8         dd         0x0000005c                                  ; Length of the record
000000000000dfec         dd         0x000006f4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000dff0         db         0xd0, 0x8d, 2 dup (0xff)                    ; begin 0x6dc0
000000000000dff4         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0x6ede)
000000000000dff8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dff9         db  0x42 ; 'B'
000000000000dffa         db  0x0e ; '.'
000000000000dffb         db  0x10 ; '.'
000000000000dffc         db  0x8e ; '.'
000000000000dffd         db  0x02 ; '.'
000000000000dffe         db  0x42 ; 'B'
000000000000dfff         db  0x0e ; '.'
000000000000e000         db  0x18 ; '.'
000000000000e001         db  0x8d ; '.'
000000000000e002         db  0x03 ; '.'
000000000000e003         db  0x45 ; 'E'
000000000000e004         db  0x0e ; '.'
000000000000e005         db  0x20 ; ' '
000000000000e006         db  0x8c ; '.'
000000000000e007         db  0x04 ; '.'
000000000000e008         db  0x41 ; 'A'
000000000000e009         db  0x0e ; '.'
000000000000e00a         db  0x28 ; '('
000000000000e00b         db  0x86 ; '.'
000000000000e00c         db  0x05 ; '.'
000000000000e00d         db  0x44 ; 'D'
000000000000e00e         db  0x0e ; '.'
000000000000e00f         db  0x30 ; '0'
000000000000e010         db  0x83 ; '.'
000000000000e011         db  0x06 ; '.'
000000000000e012         db  0x02 ; '.'
000000000000e013         db  0xa1 ; '.'
000000000000e014         db  0x0a ; '.'
000000000000e015         db  0x0e ; '.'
000000000000e016         db  0x28 ; '('
000000000000e017         db  0x44 ; 'D'
000000000000e018         db  0x0e ; '.'
000000000000e019         db  0x20 ; ' '
000000000000e01a         db  0x42 ; 'B'
000000000000e01b         db  0x0e ; '.'
000000000000e01c         db  0x18 ; '.'
000000000000e01d         db  0x42 ; 'B'
000000000000e01e         db  0x0e ; '.'
000000000000e01f         db  0x10 ; '.'
000000000000e020         db  0x42 ; 'B'
000000000000e021         db  0x0e ; '.'
000000000000e022         db  0x08 ; '.'
000000000000e023         db  0x47 ; 'G'
000000000000e024         db  0x0b ; '.'
000000000000e025         db  0x71 ; 'q'
000000000000e026         db  0x0a ; '.'
000000000000e027         db  0x0e ; '.'
000000000000e028         db  0x28 ; '('
000000000000e029         db  0x41 ; 'A'
000000000000e02a         db  0x0e ; '.'
000000000000e02b         db  0x20 ; ' '
000000000000e02c         db  0x42 ; 'B'
000000000000e02d         db  0x0e ; '.'
000000000000e02e         db  0x18 ; '.'
000000000000e02f         db  0x42 ; 'B'
000000000000e030         db  0x0e ; '.'
000000000000e031         db  0x10 ; '.'
000000000000e032         db  0x42 ; 'B'
000000000000e033         db  0x0e ; '.'
000000000000e034         db  0x08 ; '.'
000000000000e035         db  0x48 ; 'H'
000000000000e036         db  0x0b ; '.'
000000000000e037         db  0x53 ; 'S'
000000000000e038         db  0x0e ; '.'
000000000000e039         db  0x28 ; '('
000000000000e03a         db  0x44 ; 'D'
000000000000e03b         db  0x0e ; '.'
000000000000e03c         db  0x20 ; ' '
000000000000e03d         db  0x42 ; 'B'
000000000000e03e         db  0x0e ; '.'
000000000000e03f         db  0x18 ; '.'
000000000000e040         db  0x42 ; 'B'
000000000000e041         db  0x0e ; '.'
000000000000e042         db  0x10 ; '.'
000000000000e043         db  0x42 ; 'B'
000000000000e044         db  0x0e ; '.'
000000000000e045         db  0x08 ; '.'
000000000000e046         db  0x00 ; '.'
000000000000e047         db  0x00 ; '.'
000000000000e048         dd         0x00000010                                  ; Length of the record
000000000000e04c         dd         0x00000754                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e050         db         0x90, 0x8e, 2 dup (0xff)                    ; begin 0x6ee0
000000000000e054         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0x6f57)
000000000000e058         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e059         align      4
000000000000e05c         dd         0x0000005c                                  ; Length of the record
000000000000e060         dd         0x00000768                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e064         db         0xfc, 0x8e, 2 dup (0xff)                    ; begin 0x6f60
000000000000e068         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0x70a0)
000000000000e06c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e06d         db  0x42 ; 'B'
000000000000e06e         db  0x0e ; '.'
000000000000e06f         db  0x10 ; '.'
000000000000e070         db  0x8f ; '.'
000000000000e071         db  0x02 ; '.'
000000000000e072         db  0x42 ; 'B'
000000000000e073         db  0x0e ; '.'
000000000000e074         db  0x18 ; '.'
000000000000e075         db  0x8e ; '.'
000000000000e076         db  0x03 ; '.'
000000000000e077         db  0x42 ; 'B'
000000000000e078         db  0x0e ; '.'
000000000000e079         db  0x20 ; ' '
000000000000e07a         db  0x8d ; '.'
000000000000e07b         db  0x04 ; '.'
000000000000e07c         db  0x42 ; 'B'
000000000000e07d         db  0x0e ; '.'
000000000000e07e         db  0x28 ; '('
000000000000e07f         db  0x8c ; '.'
000000000000e080         db  0x05 ; '.'
000000000000e081         db  0x41 ; 'A'
000000000000e082         db  0x0e ; '.'
000000000000e083         db  0x30 ; '0'
000000000000e084         db  0x86 ; '.'
000000000000e085         db  0x06 ; '.'
000000000000e086         db  0x41 ; 'A'
000000000000e087         db  0x0e ; '.'
000000000000e088         db  0x38 ; '8'
000000000000e089         db  0x83 ; '.'
000000000000e08a         db  0x07 ; '.'
000000000000e08b         db  0x44 ; 'D'
000000000000e08c         db  0x0e ; '.'
000000000000e08d         db  0x40 ; '@'
000000000000e08e         db  0x02 ; '.'
000000000000e08f         db  0xee ; '.'
000000000000e090         db  0x0a ; '.'
000000000000e091         db  0x0e ; '.'
000000000000e092         db  0x38 ; '8'
000000000000e093         db  0x46 ; 'F'
000000000000e094         db  0x0e ; '.'
000000000000e095         db  0x30 ; '0'
000000000000e096         db  0x41 ; 'A'
000000000000e097         db  0x0e ; '.'
000000000000e098         db  0x28 ; '('
000000000000e099         db  0x42 ; 'B'
000000000000e09a         db  0x0e ; '.'
000000000000e09b         db  0x20 ; ' '
000000000000e09c         db  0x42 ; 'B'
000000000000e09d         db  0x0e ; '.'
000000000000e09e         db  0x18 ; '.'
000000000000e09f         db  0x42 ; 'B'
000000000000e0a0         db  0x0e ; '.'
000000000000e0a1         db  0x10 ; '.'
000000000000e0a2         db  0x42 ; 'B'
000000000000e0a3         db  0x0e ; '.'
000000000000e0a4         db  0x08 ; '.'
000000000000e0a5         db  0x45 ; 'E'
000000000000e0a6         db  0x0b ; '.'
000000000000e0a7         db  0x63 ; 'c'
000000000000e0a8         db  0x0e ; '.'
000000000000e0a9         db  0x38 ; '8'
000000000000e0aa         db  0x43 ; 'C'
000000000000e0ab         db  0x0e ; '.'
000000000000e0ac         db  0x30 ; '0'
000000000000e0ad         db  0x41 ; 'A'
000000000000e0ae         db  0x0e ; '.'
000000000000e0af         db  0x28 ; '('
000000000000e0b0         db  0x42 ; 'B'
000000000000e0b1         db  0x0e ; '.'
000000000000e0b2         db  0x20 ; ' '
000000000000e0b3         db  0x42 ; 'B'
000000000000e0b4         db  0x0e ; '.'
000000000000e0b5         db  0x18 ; '.'
000000000000e0b6         db  0x42 ; 'B'
000000000000e0b7         db  0x0e ; '.'
000000000000e0b8         db  0x10 ; '.'
000000000000e0b9         db  0x42 ; 'B'
000000000000e0ba         db  0x0e ; '.'
000000000000e0bb         db  0x08 ; '.'
000000000000e0bc         dd         0x00000010                                  ; Length of the record
000000000000e0c0         dd         0x000007c8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e0c4         db         0xdc, 0x8f, 2 dup (0xff)                    ; begin 0x70a0
000000000000e0c8         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x70a5)
000000000000e0cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0cd         align      16
000000000000e0d0         dd         0x00000010                                  ; Length of the record
000000000000e0d4         dd         0x000007dc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e0d8         db         0xd8, 0x8f, 2 dup (0xff)                    ; begin 0x70b0
000000000000e0dc         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x70b5)
000000000000e0e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0e1         align      4
000000000000e0e4         dd         0x00000010                                  ; Length of the record
000000000000e0e8         dd         0x000007f0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e0ec         db         0xd4, 0x8f, 2 dup (0xff)                    ; begin 0x70c0
000000000000e0f0         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x70c5)
000000000000e0f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0f5         align      8
000000000000e0f8         dd         0x00000010                                  ; Length of the record
000000000000e0fc         dd         0x00000804                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e100         db         0xd0, 0x8f, 2 dup (0xff)                    ; begin 0x70d0
000000000000e104         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x7119)
000000000000e108         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e109         align      4
000000000000e10c         dd         0x00000010                                  ; Length of the record
000000000000e110         dd         0x00000818                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e114         db         0x0c, 0x90, 2 dup (0xff)                    ; begin 0x7120
000000000000e118         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x7178)
000000000000e11c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e11d         align      32
000000000000e120         dd         0x00000038                                  ; Length of the record
000000000000e124         dd         0x0000082c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e128         db         0x58, 0x90, 2 dup (0xff)                    ; begin 0x7180
000000000000e12c         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0x72c7)
000000000000e130         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e131         db  0x42 ; 'B'
000000000000e132         db  0x0e ; '.'
000000000000e133         db  0x10 ; '.'
000000000000e134         db  0x8d ; '.'
000000000000e135         db  0x02 ; '.'
000000000000e136         db  0x42 ; 'B'
000000000000e137         db  0x0e ; '.'
000000000000e138         db  0x18 ; '.'
000000000000e139         db  0x8c ; '.'
000000000000e13a         db  0x03 ; '.'
000000000000e13b         db  0x44 ; 'D'
000000000000e13c         db  0x0e ; '.'
000000000000e13d         db  0x20 ; ' '
000000000000e13e         db  0x86 ; '.'
000000000000e13f         db  0x04 ; '.'
000000000000e140         db  0x41 ; 'A'
000000000000e141         db  0x0e ; '.'
000000000000e142         db  0x28 ; '('
000000000000e143         db  0x83 ; '.'
000000000000e144         db  0x05 ; '.'
000000000000e145         db  0x46 ; 'F'
000000000000e146         db  0x0e ; '.'
000000000000e147         db  0x30 ; '0'
000000000000e148         db  0x02 ; '.'
000000000000e149         db  0xcd ; '.'
000000000000e14a         db  0x0a ; '.'
000000000000e14b         db  0x0e ; '.'
000000000000e14c         db  0x28 ; '('
000000000000e14d         db  0x47 ; 'G'
000000000000e14e         db  0x0e ; '.'
000000000000e14f         db  0x20 ; ' '
000000000000e150         db  0x41 ; 'A'
000000000000e151         db  0x0e ; '.'
000000000000e152         db  0x18 ; '.'
000000000000e153         db  0x42 ; 'B'
000000000000e154         db  0x0e ; '.'
000000000000e155         db  0x10 ; '.'
000000000000e156         db  0x42 ; 'B'
000000000000e157         db  0x0e ; '.'
000000000000e158         db  0x08 ; '.'
000000000000e159         db  0x58 ; 'X'
000000000000e15a         db  0x0b ; '.'
000000000000e15b         db  0x00 ; '.'
000000000000e15c         dd         0x00000034                                  ; Length of the record
000000000000e160         dd         0x00000868                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e164         db         0x6c, 0x91, 2 dup (0xff)                    ; begin 0x72d0
000000000000e168         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x732b)
000000000000e16c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e16d         db  0x42 ; 'B'
000000000000e16e         db  0x0e ; '.'
000000000000e16f         db  0x10 ; '.'
000000000000e170         db  0x8c ; '.'
000000000000e171         db  0x02 ; '.'
000000000000e172         db  0x41 ; 'A'
000000000000e173         db  0x0e ; '.'
000000000000e174         db  0x18 ; '.'
000000000000e175         db  0x86 ; '.'
000000000000e176         db  0x03 ; '.'
000000000000e177         db  0x44 ; 'D'
000000000000e178         db  0x0e ; '.'
000000000000e179         db  0x20 ; ' '
000000000000e17a         db  0x83 ; '.'
000000000000e17b         db  0x04 ; '.'
000000000000e17c         db  0x79 ; 'y'
000000000000e17d         db  0x0a ; '.'
000000000000e17e         db  0x0e ; '.'
000000000000e17f         db  0x18 ; '.'
000000000000e180         db  0x44 ; 'D'
000000000000e181         db  0x0e ; '.'
000000000000e182         db  0x10 ; '.'
000000000000e183         db  0x42 ; 'B'
000000000000e184         db  0x0e ; '.'
000000000000e185         db  0x08 ; '.'
000000000000e186         db  0x4a ; 'J'
000000000000e187         db  0x0b ; '.'
000000000000e188         db  0x44 ; 'D'
000000000000e189         db  0x0e ; '.'
000000000000e18a         db  0x18 ; '.'
000000000000e18b         db  0x41 ; 'A'
000000000000e18c         db  0x0e ; '.'
000000000000e18d         db  0x10 ; '.'
000000000000e18e         db  0x45 ; 'E'
000000000000e18f         db  0x0e ; '.'
000000000000e190         db  0x08 ; '.'
000000000000e191         db  0x00 ; '.'
000000000000e192         db  0x00 ; '.'
000000000000e193         db  0x00 ; '.'
000000000000e194         dd         0x00000010                                  ; Length of the record
000000000000e198         dd         0x000008a0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e19c         db         0x94, 0x91, 2 dup (0xff)                    ; begin 0x7330
000000000000e1a0         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x7371)
000000000000e1a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1a5         db  0x7c ; '|'
000000000000e1a6         db  0x0e ; '.'
000000000000e1a7         db  0x10 ; '.'
000000000000e1a8         dd         0x00000030                                  ; Length of the record
000000000000e1ac         dd         0x000008b4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e1b0         db         0xd0, 0x91, 2 dup (0xff)                    ; begin 0x7380
000000000000e1b4         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0x73f2)
000000000000e1b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1b9         db  0x41 ; 'A'
000000000000e1ba         db  0x0e ; '.'
000000000000e1bb         db  0x10 ; '.'
000000000000e1bc         db  0x86 ; '.'
000000000000e1bd         db  0x02 ; '.'
000000000000e1be         db  0x41 ; 'A'
000000000000e1bf         db  0x0e ; '.'
000000000000e1c0         db  0x18 ; '.'
000000000000e1c1         db  0x83 ; '.'
000000000000e1c2         db  0x03 ; '.'
000000000000e1c3         db  0x4a ; 'J'
000000000000e1c4         db  0x0e ; '.'
000000000000e1c5         db  0x20 ; ' '
000000000000e1c6         db  0x02 ; '.'
000000000000e1c7         db  0x53 ; 'S'
000000000000e1c8         db  0x0a ; '.'
000000000000e1c9         db  0x0e ; '.'
000000000000e1ca         db  0x18 ; '.'
000000000000e1cb         db  0x41 ; 'A'
000000000000e1cc         db  0x0e ; '.'
000000000000e1cd         db  0x10 ; '.'
000000000000e1ce         db  0x41 ; 'A'
000000000000e1cf         db  0x0e ; '.'
000000000000e1d0         db  0x08 ; '.'
000000000000e1d1         db  0x47 ; 'G'
000000000000e1d2         db  0x0b ; '.'
000000000000e1d3         db  0x47 ; 'G'
000000000000e1d4         db  0x0e ; '.'
000000000000e1d5         db  0x18 ; '.'
000000000000e1d6         db  0x41 ; 'A'
000000000000e1d7         db  0x0e ; '.'
000000000000e1d8         db  0x10 ; '.'
000000000000e1d9         db  0x41 ; 'A'
000000000000e1da         db  0x0e ; '.'
000000000000e1db         db  0x08 ; '.'
000000000000e1dc         dd         0x00000010                                  ; Length of the record
000000000000e1e0         dd         0x000008e8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e1e4         db         0x1c, 0x92, 2 dup (0xff)                    ; begin 0x7400
000000000000e1e8         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x7465)
000000000000e1ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1ed         align      16
000000000000e1f0         dd         0x00000048                                  ; Length of the record
000000000000e1f4         dd         0x000008fc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e1f8         db         0x78, 0x92, 2 dup (0xff)                    ; begin 0x7470
000000000000e1fc         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x74da)
000000000000e200         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e201         db  0x42 ; 'B'
000000000000e202         db  0x0e ; '.'
000000000000e203         db  0x10 ; '.'
000000000000e204         db  0x8f ; '.'
000000000000e205         db  0x02 ; '.'
000000000000e206         db  0x42 ; 'B'
000000000000e207         db  0x0e ; '.'
000000000000e208         db  0x18 ; '.'
000000000000e209         db  0x8e ; '.'
000000000000e20a         db  0x03 ; '.'
000000000000e20b         db  0x42 ; 'B'
000000000000e20c         db  0x0e ; '.'
000000000000e20d         db  0x20 ; ' '
000000000000e20e         db  0x8d ; '.'
000000000000e20f         db  0x04 ; '.'
000000000000e210         db  0x42 ; 'B'
000000000000e211         db  0x0e ; '.'
000000000000e212         db  0x28 ; '('
000000000000e213         db  0x8c ; '.'
000000000000e214         db  0x05 ; '.'
000000000000e215         db  0x41 ; 'A'
000000000000e216         db  0x0e ; '.'
000000000000e217         db  0x30 ; '0'
000000000000e218         db  0x86 ; '.'
000000000000e219         db  0x06 ; '.'
000000000000e21a         db  0x41 ; 'A'
000000000000e21b         db  0x0e ; '.'
000000000000e21c         db  0x38 ; '8'
000000000000e21d         db  0x83 ; '.'
000000000000e21e         db  0x07 ; '.'
000000000000e21f         db  0x44 ; 'D'
000000000000e220         db  0x0e ; '.'
000000000000e221         db  0x40 ; '@'
000000000000e222         db  0x02 ; '.'
000000000000e223         db  0x4a ; 'J'
000000000000e224         db  0x0a ; '.'
000000000000e225         db  0x0e ; '.'
000000000000e226         db  0x38 ; '8'
000000000000e227         db  0x44 ; 'D'
000000000000e228         db  0x0e ; '.'
000000000000e229         db  0x30 ; '0'
000000000000e22a         db  0x41 ; 'A'
000000000000e22b         db  0x0e ; '.'
000000000000e22c         db  0x28 ; '('
000000000000e22d         db  0x42 ; 'B'
000000000000e22e         db  0x0e ; '.'
000000000000e22f         db  0x20 ; ' '
000000000000e230         db  0x42 ; 'B'
000000000000e231         db  0x0e ; '.'
000000000000e232         db  0x18 ; '.'
000000000000e233         db  0x42 ; 'B'
000000000000e234         db  0x0e ; '.'
000000000000e235         db  0x10 ; '.'
000000000000e236         db  0x42 ; 'B'
000000000000e237         db  0x0e ; '.'
000000000000e238         db  0x08 ; '.'
000000000000e239         db  0x41 ; 'A'
000000000000e23a         db  0x0b ; '.'
000000000000e23b         db  0x00 ; '.'
000000000000e23c         dd         0x00000010                                  ; Length of the record
000000000000e240         dd         0x00000948                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e244         db         0x9c, 0x92, 2 dup (0xff)                    ; begin 0x74e0
000000000000e248         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x7511)
000000000000e24c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e24d         align      16
000000000000e250         dd         0x00000010                                  ; Length of the record
000000000000e254         dd         0x0000095c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e258         db         0xc8, 0x92, 2 dup (0xff)                    ; begin 0x7520
000000000000e25c         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x7540)
000000000000e260         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e261         align      4
000000000000e264         dd         0x00000048                                  ; Length of the record
000000000000e268         dd         0x00000970                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e26c         db         0xd4, 0x92, 2 dup (0xff)                    ; begin 0x7540
000000000000e270         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0x76f4)
000000000000e274         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e275         db  0x42 ; 'B'
000000000000e276         db  0x0e ; '.'
000000000000e277         db  0x10 ; '.'
000000000000e278         db  0x8f ; '.'
000000000000e279         db  0x02 ; '.'
000000000000e27a         db  0x42 ; 'B'
000000000000e27b         db  0x0e ; '.'
000000000000e27c         db  0x18 ; '.'
000000000000e27d         db  0x8e ; '.'
000000000000e27e         db  0x03 ; '.'
000000000000e27f         db  0x49 ; 'I'
000000000000e280         db  0x0e ; '.'
000000000000e281         db  0x20 ; ' '
000000000000e282         db  0x8d ; '.'
000000000000e283         db  0x04 ; '.'
000000000000e284         db  0x42 ; 'B'
000000000000e285         db  0x0e ; '.'
000000000000e286         db  0x28 ; '('
000000000000e287         db  0x8c ; '.'
000000000000e288         db  0x05 ; '.'
000000000000e289         db  0x44 ; 'D'
000000000000e28a         db  0x0e ; '.'
000000000000e28b         db  0x30 ; '0'
000000000000e28c         db  0x86 ; '.'
000000000000e28d         db  0x06 ; '.'
000000000000e28e         db  0x41 ; 'A'
000000000000e28f         db  0x0e ; '.'
000000000000e290         db  0x38 ; '8'
000000000000e291         db  0x83 ; '.'
000000000000e292         db  0x07 ; '.'
000000000000e293         db  0x52 ; 'R'
000000000000e294         db  0x0e ; '.'
000000000000e295         db  0x40 ; '@'
000000000000e296         db  0x02 ; '.'
000000000000e297         db  0xd8 ; '.'
000000000000e298         db  0x0a ; '.'
000000000000e299         db  0x0e ; '.'
000000000000e29a         db  0x38 ; '8'
000000000000e29b         db  0x44 ; 'D'
000000000000e29c         db  0x0e ; '.'
000000000000e29d         db  0x30 ; '0'
000000000000e29e         db  0x41 ; 'A'
000000000000e29f         db  0x0e ; '.'
000000000000e2a0         db  0x28 ; '('
000000000000e2a1         db  0x42 ; 'B'
000000000000e2a2         db  0x0e ; '.'
000000000000e2a3         db  0x20 ; ' '
000000000000e2a4         db  0x42 ; 'B'
000000000000e2a5         db  0x0e ; '.'
000000000000e2a6         db  0x18 ; '.'
000000000000e2a7         db  0x42 ; 'B'
000000000000e2a8         db  0x0e ; '.'
000000000000e2a9         db  0x10 ; '.'
000000000000e2aa         db  0x42 ; 'B'
000000000000e2ab         db  0x0e ; '.'
000000000000e2ac         db  0x08 ; '.'
000000000000e2ad         db  0x45 ; 'E'
000000000000e2ae         db  0x0b ; '.'
000000000000e2af         db  0x00 ; '.'
000000000000e2b0         dd         0x00000028                                  ; Length of the record
000000000000e2b4         dd         0x000009bc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e2b8         db         0x48, 0x94, 2 dup (0xff)                    ; begin 0x7700
000000000000e2bc         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x7790)
000000000000e2c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2c1         db  0x42 ; 'B'
000000000000e2c2         db  0x0e ; '.'
000000000000e2c3         db  0x10 ; '.'
000000000000e2c4         db  0x8c ; '.'
000000000000e2c5         db  0x02 ; '.'
000000000000e2c6         db  0x41 ; 'A'
000000000000e2c7         db  0x0e ; '.'
000000000000e2c8         db  0x18 ; '.'
000000000000e2c9         db  0x86 ; '.'
000000000000e2ca         db  0x03 ; '.'
000000000000e2cb         db  0x44 ; 'D'
000000000000e2cc         db  0x0e ; '.'
000000000000e2cd         db  0x20 ; ' '
000000000000e2ce         db  0x83 ; '.'
000000000000e2cf         db  0x04 ; '.'
000000000000e2d0         db  0x02 ; '.'
000000000000e2d1         db  0x85 ; '.'
000000000000e2d2         db  0x0e ; '.'
000000000000e2d3         db  0x18 ; '.'
000000000000e2d4         db  0x41 ; 'A'
000000000000e2d5         db  0x0e ; '.'
000000000000e2d6         db  0x10 ; '.'
000000000000e2d7         db  0x42 ; 'B'
000000000000e2d8         db  0x0e ; '.'
000000000000e2d9         db  0x08 ; '.'
000000000000e2da         db  0x00 ; '.'
000000000000e2db         db  0x00 ; '.'
000000000000e2dc         dd         0x00000028                                  ; Length of the record
000000000000e2e0         dd         0x000009e8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e2e4         db         0xac, 0x94, 2 dup (0xff)                    ; begin 0x7790
000000000000e2e8         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0x7866)
000000000000e2ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2ed         db  0x42 ; 'B'
000000000000e2ee         db  0x0e ; '.'
000000000000e2ef         db  0x10 ; '.'
000000000000e2f0         db  0x8c ; '.'
000000000000e2f1         db  0x02 ; '.'
000000000000e2f2         db  0x41 ; 'A'
000000000000e2f3         db  0x0e ; '.'
000000000000e2f4         db  0x18 ; '.'
000000000000e2f5         db  0x86 ; '.'
000000000000e2f6         db  0x03 ; '.'
000000000000e2f7         db  0x44 ; 'D'
000000000000e2f8         db  0x0e ; '.'
000000000000e2f9         db  0x20 ; ' '
000000000000e2fa         db  0x83 ; '.'
000000000000e2fb         db  0x04 ; '.'
000000000000e2fc         db  0x02 ; '.'
000000000000e2fd         db  0xc4 ; '.'
000000000000e2fe         db  0x0e ; '.'
000000000000e2ff         db  0x18 ; '.'
000000000000e300         db  0x44 ; 'D'
000000000000e301         db  0x0e ; '.'
000000000000e302         db  0x10 ; '.'
000000000000e303         db  0x42 ; 'B'
000000000000e304         db  0x0e ; '.'
000000000000e305         db  0x08 ; '.'
000000000000e306         db  0x00 ; '.'
000000000000e307         db  0x00 ; '.'
000000000000e308         dd         0x00000034                                  ; Length of the record
000000000000e30c         dd         0x00000a14                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e310         db         0x60, 0x95, 2 dup (0xff)                    ; begin 0x7870
000000000000e314         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0x7aae)
000000000000e318         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e319         db  0x42 ; 'B'
000000000000e31a         db  0x0e ; '.'
000000000000e31b         db  0x10 ; '.'
000000000000e31c         db  0x8c ; '.'
000000000000e31d         db  0x02 ; '.'
000000000000e31e         db  0x41 ; 'A'
000000000000e31f         db  0x0e ; '.'
000000000000e320         db  0x18 ; '.'
000000000000e321         db  0x86 ; '.'
000000000000e322         db  0x03 ; '.'
000000000000e323         db  0x44 ; 'D'
000000000000e324         db  0x0e ; '.'
000000000000e325         db  0x20 ; ' '
000000000000e326         db  0x83 ; '.'
000000000000e327         db  0x04 ; '.'
000000000000e328         db  0x44 ; 'D'
000000000000e329         db  0x0e ; '.'
000000000000e32a         db  0x80 ; '.'
000000000000e32b         db  0x01 ; '.'
000000000000e32c         db  0x03 ; '.'
000000000000e32d         db  0x91 ; '.'
000000000000e32e         db  0x01 ; '.'
000000000000e32f         db  0x0a ; '.'
000000000000e330         db  0x0e ; '.'
000000000000e331         db  0x20 ; ' '
000000000000e332         db  0x41 ; 'A'
000000000000e333         db  0x0e ; '.'
000000000000e334         db  0x18 ; '.'
000000000000e335         db  0x41 ; 'A'
000000000000e336         db  0x0e ; '.'
000000000000e337         db  0x10 ; '.'
000000000000e338         db  0x42 ; 'B'
000000000000e339         db  0x0e ; '.'
000000000000e33a         db  0x08 ; '.'
000000000000e33b         db  0x48 ; 'H'
000000000000e33c         db  0x0b ; '.'
000000000000e33d         db  0x00 ; '.'
000000000000e33e         db  0x00 ; '.'
000000000000e33f         db  0x00 ; '.'
000000000000e340         dd         0x00000038                                  ; Length of the record
000000000000e344         dd         0x00000a4c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e348         db         0x68, 0x97, 2 dup (0xff)                    ; begin 0x7ab0
000000000000e34c         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0x7d34)
000000000000e350         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e351         db  0x42 ; 'B'
000000000000e352         db  0x0e ; '.'
000000000000e353         db  0x10 ; '.'
000000000000e354         db  0x8d ; '.'
000000000000e355         db  0x02 ; '.'
000000000000e356         db  0x42 ; 'B'
000000000000e357         db  0x0e ; '.'
000000000000e358         db  0x18 ; '.'
000000000000e359         db  0x8c ; '.'
000000000000e35a         db  0x03 ; '.'
000000000000e35b         db  0x41 ; 'A'
000000000000e35c         db  0x0e ; '.'
000000000000e35d         db  0x20 ; ' '
000000000000e35e         db  0x86 ; '.'
000000000000e35f         db  0x04 ; '.'
000000000000e360         db  0x41 ; 'A'
000000000000e361         db  0x0e ; '.'
000000000000e362         db  0x28 ; '('
000000000000e363         db  0x83 ; '.'
000000000000e364         db  0x05 ; '.'
000000000000e365         db  0x44 ; 'D'
000000000000e366         db  0x0e ; '.'
000000000000e367         db  0x40 ; '@'
000000000000e368         db  0x02 ; '.'
000000000000e369         db  0x5a ; 'Z'
000000000000e36a         db  0x0a ; '.'
000000000000e36b         db  0x0e ; '.'
000000000000e36c         db  0x28 ; '('
000000000000e36d         db  0x41 ; 'A'
000000000000e36e         db  0x0e ; '.'
000000000000e36f         db  0x20 ; ' '
000000000000e370         db  0x41 ; 'A'
000000000000e371         db  0x0e ; '.'
000000000000e372         db  0x18 ; '.'
000000000000e373         db  0x42 ; 'B'
000000000000e374         db  0x0e ; '.'
000000000000e375         db  0x10 ; '.'
000000000000e376         db  0x42 ; 'B'
000000000000e377         db  0x0e ; '.'
000000000000e378         db  0x08 ; '.'
000000000000e379         db  0x46 ; 'F'
000000000000e37a         db  0x0b ; '.'
000000000000e37b         db  0x00 ; '.'
000000000000e37c         dd         0x00000020                                  ; Length of the record
000000000000e380         dd         0x00000a88                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e384         db         0xbc, 0x99, 2 dup (0xff)                    ; begin 0x7d40
000000000000e388         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x7d99)
000000000000e38c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e38d         db  0x41 ; 'A'
000000000000e38e         db  0x0e ; '.'
000000000000e38f         db  0x10 ; '.'
000000000000e390         db  0x83 ; '.'
000000000000e391         db  0x02 ; '.'
000000000000e392         db  0x47 ; 'G'
000000000000e393         db  0x0e ; '.'
000000000000e394         db  0x20 ; ' '
000000000000e395         db  0x7c ; '|'
000000000000e396         db  0x0a ; '.'
000000000000e397         db  0x0e ; '.'
000000000000e398         db  0x10 ; '.'
000000000000e399         db  0x41 ; 'A'
000000000000e39a         db  0x0e ; '.'
000000000000e39b         db  0x08 ; '.'
000000000000e39c         db  0x4b ; 'K'
000000000000e39d         db  0x0b ; '.'
000000000000e39e         db  0x00 ; '.'
000000000000e39f         db  0x00 ; '.'
000000000000e3a0         dd         0x00000034                                  ; Length of the record
000000000000e3a4         dd         0x00000aac                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e3a8         db         0xf8, 0x99, 2 dup (0xff)                    ; begin 0x7da0
000000000000e3ac         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0x7fa3)
000000000000e3b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e3b1         db  0x42 ; 'B'
000000000000e3b2         db  0x0e ; '.'
000000000000e3b3         db  0x10 ; '.'
000000000000e3b4         db  0x8c ; '.'
000000000000e3b5         db  0x02 ; '.'
000000000000e3b6         db  0x41 ; 'A'
000000000000e3b7         db  0x0e ; '.'
000000000000e3b8         db  0x18 ; '.'
000000000000e3b9         db  0x86 ; '.'
000000000000e3ba         db  0x03 ; '.'
000000000000e3bb         db  0x46 ; 'F'
000000000000e3bc         db  0x0e ; '.'
000000000000e3bd         db  0x20 ; ' '
000000000000e3be         db  0x83 ; '.'
000000000000e3bf         db  0x04 ; '.'
000000000000e3c0         db  0x47 ; 'G'
000000000000e3c1         db  0x0e ; '.'
000000000000e3c2         db  0x30 ; '0'
000000000000e3c3         db  0x02 ; '.'
000000000000e3c4         db  0x4a ; 'J'
000000000000e3c5         db  0x0a ; '.'
000000000000e3c6         db  0x0e ; '.'
000000000000e3c7         db  0x20 ; ' '
000000000000e3c8         db  0x41 ; 'A'
000000000000e3c9         db  0x0e ; '.'
000000000000e3ca         db  0x18 ; '.'
000000000000e3cb         db  0x41 ; 'A'
000000000000e3cc         db  0x0e ; '.'
000000000000e3cd         db  0x10 ; '.'
000000000000e3ce         db  0x42 ; 'B'
000000000000e3cf         db  0x0e ; '.'
000000000000e3d0         db  0x08 ; '.'
000000000000e3d1         db  0x42 ; 'B'
000000000000e3d2         db  0x0b ; '.'
000000000000e3d3         db  0x00 ; '.'
000000000000e3d4         db  0x00 ; '.'
000000000000e3d5         db  0x00 ; '.'
000000000000e3d6         db  0x00 ; '.'
000000000000e3d7         db  0x00 ; '.'
000000000000e3d8         dd         0x00000014                                  ; Length of the record
000000000000e3dc         dd         0x00000ae4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e3e0         db         0xd0, 0x9b, 2 dup (0xff)                    ; begin 0x7fb0
000000000000e3e4         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x804c)
000000000000e3e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e3e9         align      16
000000000000e3f0         dd         0x00000024                                  ; Length of the record
000000000000e3f4         dd         0x00000afc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e3f8         db         0x58, 0x9c, 2 dup (0xff)                    ; begin 0x8050
000000000000e3fc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x80de)
000000000000e400         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e401         db  0x41 ; 'A'
000000000000e402         db  0x0e ; '.'
000000000000e403         db  0x10 ; '.'
000000000000e404         db  0x83 ; '.'
000000000000e405         db  0x02 ; '.'
000000000000e406         db  0x50 ; 'P'
000000000000e407         db  0x0e ; '.'
000000000000e408         db  0x20 ; ' '
000000000000e409         db  0x75 ; 'u'
000000000000e40a         db  0x0a ; '.'
000000000000e40b         db  0x0e ; '.'
000000000000e40c         db  0x10 ; '.'
000000000000e40d         db  0x41 ; 'A'
000000000000e40e         db  0x0e ; '.'
000000000000e40f         db  0x08 ; '.'
000000000000e410         db  0x49 ; 'I'
000000000000e411         db  0x0b ; '.'
000000000000e412         db  0x00 ; '.'
000000000000e413         db  0x00 ; '.'
000000000000e414         db  0x00 ; '.'
000000000000e415         db  0x00 ; '.'
000000000000e416         db  0x00 ; '.'
000000000000e417         db  0x00 ; '.'
000000000000e418         dd         0x0000001c                                  ; Length of the record
000000000000e41c         dd         0x00000b24                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e420         db         0xc0, 0x9c, 2 dup (0xff)                    ; begin 0x80e0
000000000000e424         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x817f)
000000000000e428         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e429         db  0x44 ; 'D'
000000000000e42a         db  0x0e ; '.'
000000000000e42b         db  0x10 ; '.'
000000000000e42c         db  0x83 ; '.'
000000000000e42d         db  0x02 ; '.'
000000000000e42e         db  0x02 ; '.'
000000000000e42f         db  0x78 ; 'x'
000000000000e430         db  0x0a ; '.'
000000000000e431         db  0x0e ; '.'
000000000000e432         db  0x08 ; '.'
000000000000e433         db  0x41 ; 'A'
000000000000e434         db  0x0b ; '.'
000000000000e435         db  0x00 ; '.'
000000000000e436         db  0x00 ; '.'
000000000000e437         db  0x00 ; '.'
000000000000e438         dd         0x00000040                                  ; Length of the record
000000000000e43c         dd         0x00000b44                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e440         db         0x40, 0x9d, 2 dup (0xff)                    ; begin 0x8180
000000000000e444         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x8267)
000000000000e448         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e449         db  0x41 ; 'A'
000000000000e44a         db  0x0e ; '.'
000000000000e44b         db  0x10 ; '.'
000000000000e44c         db  0x86 ; '.'
000000000000e44d         db  0x02 ; '.'
000000000000e44e         db  0x41 ; 'A'
000000000000e44f         db  0x0e ; '.'
000000000000e450         db  0x18 ; '.'
000000000000e451         db  0x83 ; '.'
000000000000e452         db  0x03 ; '.'
000000000000e453         db  0x49 ; 'I'
000000000000e454         db  0x0e ; '.'
000000000000e455         db  0x20 ; ' '
000000000000e456         db  0x6e ; 'n'
000000000000e457         db  0x0a ; '.'
000000000000e458         db  0x0e ; '.'
000000000000e459         db  0x18 ; '.'
000000000000e45a         db  0x41 ; 'A'
000000000000e45b         db  0x0e ; '.'
000000000000e45c         db  0x10 ; '.'
000000000000e45d         db  0x41 ; 'A'
000000000000e45e         db  0x0e ; '.'
000000000000e45f         db  0x08 ; '.'
000000000000e460         db  0x45 ; 'E'
000000000000e461         db  0x0b ; '.'
000000000000e462         db  0x02 ; '.'
000000000000e463         db  0x4a ; 'J'
000000000000e464         db  0x0a ; '.'
000000000000e465         db  0x0e ; '.'
000000000000e466         db  0x18 ; '.'
000000000000e467         db  0x41 ; 'A'
000000000000e468         db  0x0e ; '.'
000000000000e469         db  0x10 ; '.'
000000000000e46a         db  0x41 ; 'A'
000000000000e46b         db  0x0e ; '.'
000000000000e46c         db  0x08 ; '.'
000000000000e46d         db  0x44 ; 'D'
000000000000e46e         db  0x0b ; '.'
000000000000e46f         db  0x02 ; '.'
000000000000e470         db  0x54 ; 'T'
000000000000e471         db  0x0e ; '.'
000000000000e472         db  0x18 ; '.'
000000000000e473         db  0x41 ; 'A'
000000000000e474         db  0x0e ; '.'
000000000000e475         db  0x10 ; '.'
000000000000e476         db  0x41 ; 'A'
000000000000e477         db  0x0e ; '.'
000000000000e478         db  0x08 ; '.'
000000000000e479         db  0x00 ; '.'
000000000000e47a         db  0x00 ; '.'
000000000000e47b         db  0x00 ; '.'
000000000000e47c         dd         0x00000074                                  ; Length of the record
000000000000e480         dd         0x00000b88                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e484         db         0xec, 0x9d, 2 dup (0xff)                    ; begin 0x8270
000000000000e488         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x94a4)
000000000000e48c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e48d         db  0x42 ; 'B'
000000000000e48e         db  0x0e ; '.'
000000000000e48f         db  0x10 ; '.'
000000000000e490         db  0x8f ; '.'
000000000000e491         db  0x02 ; '.'
000000000000e492         db  0x42 ; 'B'
000000000000e493         db  0x0e ; '.'
000000000000e494         db  0x18 ; '.'
000000000000e495         db  0x8e ; '.'
000000000000e496         db  0x03 ; '.'
000000000000e497         db  0x45 ; 'E'
000000000000e498         db  0x0e ; '.'
000000000000e499         db  0x20 ; ' '
000000000000e49a         db  0x8d ; '.'
000000000000e49b         db  0x04 ; '.'
000000000000e49c         db  0x42 ; 'B'
000000000000e49d         db  0x0e ; '.'
000000000000e49e         db  0x28 ; '('
000000000000e49f         db  0x8c ; '.'
000000000000e4a0         db  0x05 ; '.'
000000000000e4a1         db  0x44 ; 'D'
000000000000e4a2         db  0x0e ; '.'
000000000000e4a3         db  0x30 ; '0'
000000000000e4a4         db  0x86 ; '.'
000000000000e4a5         db  0x06 ; '.'
000000000000e4a6         db  0x41 ; 'A'
000000000000e4a7         db  0x0e ; '.'
000000000000e4a8         db  0x38 ; '8'
000000000000e4a9         db  0x83 ; '.'
000000000000e4aa         db  0x07 ; '.'
000000000000e4ab         db  0x53 ; 'S'
000000000000e4ac         db  0x0e ; '.'
000000000000e4ad         db  0xf0 ; '.'
000000000000e4ae         db  0x01 ; '.'
000000000000e4af         db  0x03 ; '.'
000000000000e4b0         db  0x81 ; '.'
000000000000e4b1         db  0x0b ; '.'
000000000000e4b2         db  0x0e ; '.'
000000000000e4b3         db  0xf8 ; '.'
000000000000e4b4         db  0x01 ; '.'
000000000000e4b5         db  0x4a ; 'J'
000000000000e4b6         db  0x0e ; '.'
000000000000e4b7         db  0x80 ; '.'
000000000000e4b8         db  0x02 ; '.'
000000000000e4b9         db  0x44 ; 'D'
000000000000e4ba         db  0x0e ; '.'
000000000000e4bb         db  0x88 ; '.'
000000000000e4bc         db  0x02 ; '.'
000000000000e4bd         db  0x45 ; 'E'
000000000000e4be         db  0x0e ; '.'
000000000000e4bf         db  0x90 ; '.'
000000000000e4c0         db  0x02 ; '.'
000000000000e4c1         db  0x5f ; '_'
000000000000e4c2         db  0x0e ; '.'
000000000000e4c3         db  0xf0 ; '.'
000000000000e4c4         db  0x01 ; '.'
000000000000e4c5         db  0x64 ; 'd'
000000000000e4c6         db  0x0a ; '.'
000000000000e4c7         db  0x0e ; '.'
000000000000e4c8         db  0x38 ; '8'
000000000000e4c9         db  0x41 ; 'A'
000000000000e4ca         db  0x0e ; '.'
000000000000e4cb         db  0x30 ; '0'
000000000000e4cc         db  0x41 ; 'A'
000000000000e4cd         db  0x0e ; '.'
000000000000e4ce         db  0x28 ; '('
000000000000e4cf         db  0x42 ; 'B'
000000000000e4d0         db  0x0e ; '.'
000000000000e4d1         db  0x20 ; ' '
000000000000e4d2         db  0x42 ; 'B'
000000000000e4d3         db  0x0e ; '.'
000000000000e4d4         db  0x18 ; '.'
000000000000e4d5         db  0x42 ; 'B'
000000000000e4d6         db  0x0e ; '.'
000000000000e4d7         db  0x10 ; '.'
000000000000e4d8         db  0x42 ; 'B'
000000000000e4d9         db  0x0e ; '.'
000000000000e4da         db  0x08 ; '.'
000000000000e4db         db  0x44 ; 'D'
000000000000e4dc         db  0x0b ; '.'
000000000000e4dd         db  0x03 ; '.'
000000000000e4de         db  0x99 ; '.'
000000000000e4df         db  0x05 ; '.'
000000000000e4e0         db  0x0e ; '.'
000000000000e4e1         db  0xf8 ; '.'
000000000000e4e2         db  0x01 ; '.'
000000000000e4e3         db  0x4d ; 'M'
000000000000e4e4         db  0x0e ; '.'
000000000000e4e5         db  0x80 ; '.'
000000000000e4e6         db  0x02 ; '.'
000000000000e4e7         db  0x44 ; 'D'
000000000000e4e8         db  0x0e ; '.'
000000000000e4e9         db  0x88 ; '.'
000000000000e4ea         db  0x02 ; '.'
000000000000e4eb         db  0x47 ; 'G'
000000000000e4ec         db  0x0e ; '.'
000000000000e4ed         db  0x90 ; '.'
000000000000e4ee         db  0x02 ; '.'
000000000000e4ef         db  0x5b ; '['
000000000000e4f0         db  0x0e ; '.'
000000000000e4f1         db  0xf0 ; '.'
000000000000e4f2         db  0x01 ; '.'
000000000000e4f3         db  0x00 ; '.'
000000000000e4f4         dd         0x00000068                                  ; Length of the record
000000000000e4f8         dd         0x00000c00                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e4fc         db         0xb4, 0xaf, 2 dup (0xff)                    ; begin 0x94b0
000000000000e500         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x965b)
000000000000e504         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e505         db  0x42 ; 'B'
000000000000e506         db  0x0e ; '.'
000000000000e507         db  0x10 ; '.'
000000000000e508         db  0x8f ; '.'
000000000000e509         db  0x02 ; '.'
000000000000e50a         db  0x42 ; 'B'
000000000000e50b         db  0x0e ; '.'
000000000000e50c         db  0x18 ; '.'
000000000000e50d         db  0x8e ; '.'
000000000000e50e         db  0x03 ; '.'
000000000000e50f         db  0x45 ; 'E'
000000000000e510         db  0x0e ; '.'
000000000000e511         db  0x20 ; ' '
000000000000e512         db  0x8d ; '.'
000000000000e513         db  0x04 ; '.'
000000000000e514         db  0x42 ; 'B'
000000000000e515         db  0x0e ; '.'
000000000000e516         db  0x28 ; '('
000000000000e517         db  0x8c ; '.'
000000000000e518         db  0x05 ; '.'
000000000000e519         db  0x44 ; 'D'
000000000000e51a         db  0x0e ; '.'
000000000000e51b         db  0x30 ; '0'
000000000000e51c         db  0x86 ; '.'
000000000000e51d         db  0x06 ; '.'
000000000000e51e         db  0x41 ; 'A'
000000000000e51f         db  0x0e ; '.'
000000000000e520         db  0x38 ; '8'
000000000000e521         db  0x83 ; '.'
000000000000e522         db  0x07 ; '.'
000000000000e523         db  0x47 ; 'G'
000000000000e524         db  0x0e ; '.'
000000000000e525         db  0x60 ; '`'
000000000000e526         db  0x02 ; '.'
000000000000e527         db  0x99 ; '.'
000000000000e528         db  0x0e ; '.'
000000000000e529         db  0x68 ; 'h'
000000000000e52a         db  0x5f ; '_'
000000000000e52b         db  0x0e ; '.'
000000000000e52c         db  0x70 ; 'p'
000000000000e52d         db  0x46 ; 'F'
000000000000e52e         db  0x0e ; '.'
000000000000e52f         db  0x78 ; 'x'
000000000000e530         db  0x42 ; 'B'
000000000000e531         db  0x0e ; '.'
000000000000e532         db  0x80 ; '.'
000000000000e533         db  0x01 ; '.'
000000000000e534         db  0x59 ; 'Y'
000000000000e535         db  0x0e ; '.'
000000000000e536         db  0x60 ; '`'
000000000000e537         db  0x02 ; '.'
000000000000e538         db  0x40 ; '@'
000000000000e539         db  0x0e ; '.'
000000000000e53a         db  0x68 ; 'h'
000000000000e53b         db  0x4b ; 'K'
000000000000e53c         db  0x0e ; '.'
000000000000e53d         db  0x70 ; 'p'
000000000000e53e         db  0x43 ; 'C'
000000000000e53f         db  0x0e ; '.'
000000000000e540         db  0x78 ; 'x'
000000000000e541         db  0x45 ; 'E'
000000000000e542         db  0x0e ; '.'
000000000000e543         db  0x80 ; '.'
000000000000e544         db  0x01 ; '.'
000000000000e545         db  0x5e ; '^'
000000000000e546         db  0x0e ; '.'
000000000000e547         db  0x60 ; '`'
000000000000e548         db  0x4c ; 'L'
000000000000e549         db  0x0a ; '.'
000000000000e54a         db  0x0e ; '.'
000000000000e54b         db  0x38 ; '8'
000000000000e54c         db  0x44 ; 'D'
000000000000e54d         db  0x0e ; '.'
000000000000e54e         db  0x30 ; '0'
000000000000e54f         db  0x41 ; 'A'
000000000000e550         db  0x0e ; '.'
000000000000e551         db  0x28 ; '('
000000000000e552         db  0x42 ; 'B'
000000000000e553         db  0x0e ; '.'
000000000000e554         db  0x20 ; ' '
000000000000e555         db  0x42 ; 'B'
000000000000e556         db  0x0e ; '.'
000000000000e557         db  0x18 ; '.'
000000000000e558         db  0x42 ; 'B'
000000000000e559         db  0x0e ; '.'
000000000000e55a         db  0x10 ; '.'
000000000000e55b         db  0x42 ; 'B'
000000000000e55c         db  0x0e ; '.'
000000000000e55d         db  0x08 ; '.'
000000000000e55e         db  0x46 ; 'F'
000000000000e55f         db  0x0b ; '.'
000000000000e560         dd         0x00000028                                  ; Length of the record
000000000000e564         dd         0x00000c6c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e568         db         0xf8, 0xb0, 2 dup (0xff)                    ; begin 0x9660
000000000000e56c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x9696)
000000000000e570         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e571         db  0x42 ; 'B'
000000000000e572         db  0x0e ; '.'
000000000000e573         db  0x10 ; '.'
000000000000e574         db  0x8c ; '.'
000000000000e575         db  0x02 ; '.'
000000000000e576         db  0x41 ; 'A'
000000000000e577         db  0x0e ; '.'
000000000000e578         db  0x18 ; '.'
000000000000e579         db  0x86 ; '.'
000000000000e57a         db  0x03 ; '.'
000000000000e57b         db  0x41 ; 'A'
000000000000e57c         db  0x0e ; '.'
000000000000e57d         db  0x20 ; ' '
000000000000e57e         db  0x83 ; '.'
000000000000e57f         db  0x04 ; '.'
000000000000e580         db  0x6e ; 'n'
000000000000e581         db  0x0e ; '.'
000000000000e582         db  0x18 ; '.'
000000000000e583         db  0x41 ; 'A'
000000000000e584         db  0x0e ; '.'
000000000000e585         db  0x10 ; '.'
000000000000e586         db  0x42 ; 'B'
000000000000e587         db  0x0e ; '.'
000000000000e588         db  0x08 ; '.'
000000000000e589         db  0x00 ; '.'
000000000000e58a         db  0x00 ; '.'
000000000000e58b         db  0x00 ; '.'
000000000000e58c         dd         0x00000010                                  ; Length of the record
000000000000e590         dd         0x00000c98                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e594         db         0x0c, 0xb1, 2 dup (0xff)                    ; begin 0x96a0
000000000000e598         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x96b1)
000000000000e59c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e59d         align      32
000000000000e5a0         dd         0x00000010                                  ; Length of the record
000000000000e5a4         dd         0x00000cac                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e5a8         db         0x18, 0xb1, 2 dup (0xff)                    ; begin 0x96c0
000000000000e5ac         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x96d1)
000000000000e5b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5b1         align      4
000000000000e5b4         dd         0x00000010                                  ; Length of the record
000000000000e5b8         dd         0x00000cc0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e5bc         db         0x24, 0xb1, 2 dup (0xff)                    ; begin 0x96e0
000000000000e5c0         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x9715)
000000000000e5c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5c5         align      8
000000000000e5c8         dd         0x00000010                                  ; Length of the record
000000000000e5cc         dd         0x00000cd4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e5d0         db         0x50, 0xb1, 2 dup (0xff)                    ; begin 0x9720
000000000000e5d4         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x9735)
000000000000e5d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5d9         align      4
000000000000e5dc         dd         0x00000010                                  ; Length of the record
000000000000e5e0         dd         0x00000ce8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e5e4         db         0x5c, 0xb1, 2 dup (0xff)                    ; begin 0x9740
000000000000e5e8         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x9770)
000000000000e5ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e5ed         db  0x6b ; 'k'
000000000000e5ee         db  0x0e ; '.'
000000000000e5ef         db  0x10 ; '.'
000000000000e5f0         dd         0x00000050                                  ; Length of the record
000000000000e5f4         dd         0x00000cfc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e5f8         db         0x78, 0xb1, 2 dup (0xff)                    ; begin 0x9770
000000000000e5fc         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x97e4)
000000000000e600         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e601         db  0x42 ; 'B'
000000000000e602         db  0x0e ; '.'
000000000000e603         db  0x10 ; '.'
000000000000e604         db  0x8f ; '.'
000000000000e605         db  0x02 ; '.'
000000000000e606         db  0x42 ; 'B'
000000000000e607         db  0x0e ; '.'
000000000000e608         db  0x18 ; '.'
000000000000e609         db  0x8e ; '.'
000000000000e60a         db  0x03 ; '.'
000000000000e60b         db  0x49 ; 'I'
000000000000e60c         db  0x0e ; '.'
000000000000e60d         db  0x20 ; ' '
000000000000e60e         db  0x8d ; '.'
000000000000e60f         db  0x04 ; '.'
000000000000e610         db  0x42 ; 'B'
000000000000e611         db  0x0e ; '.'
000000000000e612         db  0x28 ; '('
000000000000e613         db  0x8c ; '.'
000000000000e614         db  0x05 ; '.'
000000000000e615         db  0x44 ; 'D'
000000000000e616         db  0x0e ; '.'
000000000000e617         db  0x30 ; '0'
000000000000e618         db  0x86 ; '.'
000000000000e619         db  0x06 ; '.'
000000000000e61a         db  0x41 ; 'A'
000000000000e61b         db  0x0e ; '.'
000000000000e61c         db  0x38 ; '8'
000000000000e61d         db  0x83 ; '.'
000000000000e61e         db  0x07 ; '.'
000000000000e61f         db  0x4d ; 'M'
000000000000e620         db  0x0e ; '.'
000000000000e621         db  0x50 ; 'P'
000000000000e622         db  0x5f ; '_'
000000000000e623         db  0x0e ; '.'
000000000000e624         db  0x58 ; 'X'
000000000000e625         db  0x47 ; 'G'
000000000000e626         db  0x0e ; '.'
000000000000e627         db  0x60 ; '`'
000000000000e628         db  0x46 ; 'F'
000000000000e629         db  0x0e ; '.'
000000000000e62a         db  0x68 ; 'h'
000000000000e62b         db  0x44 ; 'D'
000000000000e62c         db  0x0e ; '.'
000000000000e62d         db  0x70 ; 'p'
000000000000e62e         db  0x58 ; 'X'
000000000000e62f         db  0x0e ; '.'
000000000000e630         db  0x38 ; '8'
000000000000e631         db  0x41 ; 'A'
000000000000e632         db  0x0e ; '.'
000000000000e633         db  0x30 ; '0'
000000000000e634         db  0x41 ; 'A'
000000000000e635         db  0x0e ; '.'
000000000000e636         db  0x28 ; '('
000000000000e637         db  0x42 ; 'B'
000000000000e638         db  0x0e ; '.'
000000000000e639         db  0x20 ; ' '
000000000000e63a         db  0x42 ; 'B'
000000000000e63b         db  0x0e ; '.'
000000000000e63c         db  0x18 ; '.'
000000000000e63d         db  0x42 ; 'B'
000000000000e63e         db  0x0e ; '.'
000000000000e63f         db  0x10 ; '.'
000000000000e640         db  0x42 ; 'B'
000000000000e641         db  0x0e ; '.'
000000000000e642         db  0x08 ; '.'
000000000000e643         db  0x00 ; '.'
000000000000e644         dd         0x00000068                                  ; Length of the record
000000000000e648         dd         0x00000d50                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e64c         db         0xa4, 0xb1, 2 dup (0xff)                    ; begin 0x97f0
000000000000e650         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x98d3)
000000000000e654         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e655         db  0x42 ; 'B'
000000000000e656         db  0x0e ; '.'
000000000000e657         db  0x10 ; '.'
000000000000e658         db  0x8f ; '.'
000000000000e659         db  0x02 ; '.'
000000000000e65a         db  0x42 ; 'B'
000000000000e65b         db  0x0e ; '.'
000000000000e65c         db  0x18 ; '.'
000000000000e65d         db  0x8e ; '.'
000000000000e65e         db  0x03 ; '.'
000000000000e65f         db  0x49 ; 'I'
000000000000e660         db  0x0e ; '.'
000000000000e661         db  0x20 ; ' '
000000000000e662         db  0x8d ; '.'
000000000000e663         db  0x04 ; '.'
000000000000e664         db  0x42 ; 'B'
000000000000e665         db  0x0e ; '.'
000000000000e666         db  0x28 ; '('
000000000000e667         db  0x8c ; '.'
000000000000e668         db  0x05 ; '.'
000000000000e669         db  0x44 ; 'D'
000000000000e66a         db  0x0e ; '.'
000000000000e66b         db  0x30 ; '0'
000000000000e66c         db  0x86 ; '.'
000000000000e66d         db  0x06 ; '.'
000000000000e66e         db  0x41 ; 'A'
000000000000e66f         db  0x0e ; '.'
000000000000e670         db  0x38 ; '8'
000000000000e671         db  0x83 ; '.'
000000000000e672         db  0x07 ; '.'
000000000000e673         db  0x4d ; 'M'
000000000000e674         db  0x0e ; '.'
000000000000e675         db  0x70 ; 'p'
000000000000e676         db  0x65 ; 'e'
000000000000e677         db  0x0e ; '.'
000000000000e678         db  0x78 ; 'x'
000000000000e679         db  0x4d ; 'M'
000000000000e67a         db  0x0e ; '.'
000000000000e67b         db  0x80 ; '.'
000000000000e67c         db  0x01 ; '.'
000000000000e67d         db  0x46 ; 'F'
000000000000e67e         db  0x0e ; '.'
000000000000e67f         db  0x88 ; '.'
000000000000e680         db  0x01 ; '.'
000000000000e681         db  0x42 ; 'B'
000000000000e682         db  0x0e ; '.'
000000000000e683         db  0x90 ; '.'
000000000000e684         db  0x01 ; '.'
000000000000e685         db  0x5e ; '^'
000000000000e686         db  0x0e ; '.'
000000000000e687         db  0x70 ; 'p'
000000000000e688         db  0x56 ; 'V'
000000000000e689         db  0x0e ; '.'
000000000000e68a         db  0x78 ; 'x'
000000000000e68b         db  0x43 ; 'C'
000000000000e68c         db  0x0e ; '.'
000000000000e68d         db  0x80 ; '.'
000000000000e68e         db  0x01 ; '.'
000000000000e68f         db  0x43 ; 'C'
000000000000e690         db  0x0e ; '.'
000000000000e691         db  0x88 ; '.'
000000000000e692         db  0x01 ; '.'
000000000000e693         db  0x56 ; 'V'
000000000000e694         db  0x0e ; '.'
000000000000e695         db  0x90 ; '.'
000000000000e696         db  0x01 ; '.'
000000000000e697         db  0x52 ; 'R'
000000000000e698         db  0x0e ; '.'
000000000000e699         db  0x70 ; 'p'
000000000000e69a         db  0x5b ; '['
000000000000e69b         db  0x0e ; '.'
000000000000e69c         db  0x38 ; '8'
000000000000e69d         db  0x41 ; 'A'
000000000000e69e         db  0x0e ; '.'
000000000000e69f         db  0x30 ; '0'
000000000000e6a0         db  0x41 ; 'A'
000000000000e6a1         db  0x0e ; '.'
000000000000e6a2         db  0x28 ; '('
000000000000e6a3         db  0x42 ; 'B'
000000000000e6a4         db  0x0e ; '.'
000000000000e6a5         db  0x20 ; ' '
000000000000e6a6         db  0x42 ; 'B'
000000000000e6a7         db  0x0e ; '.'
000000000000e6a8         db  0x18 ; '.'
000000000000e6a9         db  0x42 ; 'B'
000000000000e6aa         db  0x0e ; '.'
000000000000e6ab         db  0x10 ; '.'
000000000000e6ac         db  0x42 ; 'B'
000000000000e6ad         db  0x0e ; '.'
000000000000e6ae         db  0x08 ; '.'
000000000000e6af         db  0x00 ; '.'
000000000000e6b0         dd         0x00000010                                  ; Length of the record
000000000000e6b4         dd         0x00000dbc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e6b8         db         0x28, 0xb2, 2 dup (0xff)                    ; begin 0x98e0
000000000000e6bc         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x98ea)
000000000000e6c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e6c1         align      4
000000000000e6c4         dd         0x00000028                                  ; Length of the record
000000000000e6c8         dd         0x00000dd0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e6cc         db         0x24, 0xb2, 2 dup (0xff)                    ; begin 0x98f0
000000000000e6d0         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x9983)
000000000000e6d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e6d5         db  0x48 ; 'H'
000000000000e6d6         db  0x0e ; '.'
000000000000e6d7         db  0x10 ; '.'
000000000000e6d8         db  0x8c ; '.'
000000000000e6d9         db  0x02 ; '.'
000000000000e6da         db  0x48 ; 'H'
000000000000e6db         db  0x0e ; '.'
000000000000e6dc         db  0x18 ; '.'
000000000000e6dd         db  0x86 ; '.'
000000000000e6de         db  0x03 ; '.'
000000000000e6df         db  0x41 ; 'A'
000000000000e6e0         db  0x0e ; '.'
000000000000e6e1         db  0x20 ; ' '
000000000000e6e2         db  0x83 ; '.'
000000000000e6e3         db  0x04 ; '.'
000000000000e6e4         db  0x02 ; '.'
000000000000e6e5         db  0x74 ; 't'
000000000000e6e6         db  0x0e ; '.'
000000000000e6e7         db  0x18 ; '.'
000000000000e6e8         db  0x4b ; 'K'
000000000000e6e9         db  0x0e ; '.'
000000000000e6ea         db  0x10 ; '.'
000000000000e6eb         db  0x42 ; 'B'
000000000000e6ec         db  0x0e ; '.'
000000000000e6ed         db  0x08 ; '.'
000000000000e6ee         db  0x00 ; '.'
000000000000e6ef         db  0x00 ; '.'
000000000000e6f0         dd         0x00000010                                  ; Length of the record
000000000000e6f4         dd         0x00000dfc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e6f8         db         0x98, 0xb2, 2 dup (0xff)                    ; begin 0x9990
000000000000e6fc         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x99a3)
000000000000e700         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e701         align      4
000000000000e704         dd         0x00000010                                  ; Length of the record
000000000000e708         dd         0x00000e10                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e70c         db         0xa4, 0xb2, 2 dup (0xff)                    ; begin 0x99b0
000000000000e710         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x99bc)
000000000000e714         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e715         align      8
000000000000e718         dd         0x00000010                                  ; Length of the record
000000000000e71c         dd         0x00000e24                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e720         db         0xa0, 0xb2, 2 dup (0xff)                    ; begin 0x99c0
000000000000e724         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x99d8)
000000000000e728         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e729         align      4
000000000000e72c         dd         0x00000010                                  ; Length of the record
000000000000e730         dd         0x00000e38                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e734         db         0xac, 0xb2, 2 dup (0xff)                    ; begin 0x99e0
000000000000e738         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x99f4)
000000000000e73c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e73d         align      64
000000000000e740         dd         0x00000018                                  ; Length of the record
000000000000e744         dd         0x00000e4c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e748         db         0xb8, 0xb2, 2 dup (0xff)                    ; begin 0x9a00
000000000000e74c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x9a8e)
000000000000e750         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e751         db  0x44 ; 'D'
000000000000e752         db  0x0e ; '.'
000000000000e753         db  0x50 ; 'P'
000000000000e754         db  0x02 ; '.'
000000000000e755         db  0x7f ; '.'
000000000000e756         db  0x0a ; '.'
000000000000e757         db  0x0e ; '.'
000000000000e758         db  0x08 ; '.'
000000000000e759         db  0x41 ; 'A'
000000000000e75a         db  0x0b ; '.'
000000000000e75b         db  0x00 ; '.'
000000000000e75c         dd         0x00000018                                  ; Length of the record
000000000000e760         dd         0x00000e68                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e764         db         0x2c, 0xb3, 2 dup (0xff)                    ; begin 0x9a90
000000000000e768         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x9b1a)
000000000000e76c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e76d         db  0x44 ; 'D'
000000000000e76e         db  0x0e ; '.'
000000000000e76f         db  0x50 ; 'P'
000000000000e770         db  0x02 ; '.'
000000000000e771         db  0x7b ; '{'
000000000000e772         db  0x0a ; '.'
000000000000e773         db  0x0e ; '.'
000000000000e774         db  0x08 ; '.'
000000000000e775         db  0x41 ; 'A'
000000000000e776         db  0x0b ; '.'
000000000000e777         db  0x00 ; '.'
000000000000e778         dd         0x00000010                                  ; Length of the record
000000000000e77c         dd         0x00000e84                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e780         db         0xa0, 0xb3, 2 dup (0xff)                    ; begin 0x9b20
000000000000e784         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x9b2c)
000000000000e788         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e789         align      4
000000000000e78c         dd         0x00000010                                  ; Length of the record
000000000000e790         dd         0x00000e98                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e794         db         0x9c, 0xb3, 2 dup (0xff)                    ; begin 0x9b30
000000000000e798         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x9b3f)
000000000000e79c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e79d         align      32
000000000000e7a0         dd         0x00000018                                  ; Length of the record
000000000000e7a4         dd         0x00000eac                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e7a8         db         0x98, 0xb3, 2 dup (0xff)                    ; begin 0x9b40
000000000000e7ac         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x9bd8)
000000000000e7b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e7b1         db  0x44 ; 'D'
000000000000e7b2         db  0x0e ; '.'
000000000000e7b3         db  0x50 ; 'P'
000000000000e7b4         db  0x02 ; '.'
000000000000e7b5         db  0x8e ; '.'
000000000000e7b6         db  0x0a ; '.'
000000000000e7b7         db  0x0e ; '.'
000000000000e7b8         db  0x08 ; '.'
000000000000e7b9         db  0x41 ; 'A'
000000000000e7ba         db  0x0b ; '.'
000000000000e7bb         db  0x00 ; '.'
000000000000e7bc         dd         0x00000010                                  ; Length of the record
000000000000e7c0         dd         0x00000ec8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e7c4         db         0x1c, 0xb4, 2 dup (0xff)                    ; begin 0x9be0
000000000000e7c8         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x9bf0)
000000000000e7cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e7cd         align      16
000000000000e7d0         dd         0x00000010                                  ; Length of the record
000000000000e7d4         dd         0x00000edc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e7d8         db         0x18, 0xb4, 2 dup (0xff)                    ; begin 0x9bf0
000000000000e7dc         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x9c01)
000000000000e7e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e7e1         align      4
000000000000e7e4         dd         0x00000010                                  ; Length of the record
000000000000e7e8         dd         0x00000ef0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e7ec         db         0x24, 0xb4, 2 dup (0xff)                    ; begin 0x9c10
000000000000e7f0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x9c1a)
000000000000e7f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e7f5         align      8
000000000000e7f8         dd         0x00000018                                  ; Length of the record
000000000000e7fc         dd         0x00000f04                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e800         db         0x20, 0xb4, 2 dup (0xff)                    ; begin 0x9c20
000000000000e804         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x9cae)
000000000000e808         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e809         db  0x44 ; 'D'
000000000000e80a         db  0x0e ; '.'
000000000000e80b         db  0x50 ; 'P'
000000000000e80c         db  0x02 ; '.'
000000000000e80d         db  0x7f ; '.'
000000000000e80e         db  0x0a ; '.'
000000000000e80f         db  0x0e ; '.'
000000000000e810         db  0x08 ; '.'
000000000000e811         db  0x41 ; 'A'
000000000000e812         db  0x0b ; '.'
000000000000e813         db  0x00 ; '.'
000000000000e814         dd         0x00000018                                  ; Length of the record
000000000000e818         dd         0x00000f20                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e81c         db         0x94, 0xb4, 2 dup (0xff)                    ; begin 0x9cb0
000000000000e820         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x9d41)
000000000000e824         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e825         db  0x44 ; 'D'
000000000000e826         db  0x0e ; '.'
000000000000e827         db  0x50 ; 'P'
000000000000e828         db  0x02 ; '.'
000000000000e829         db  0x82 ; '.'
000000000000e82a         db  0x0a ; '.'
000000000000e82b         db  0x0e ; '.'
000000000000e82c         db  0x08 ; '.'
000000000000e82d         db  0x41 ; 'A'
000000000000e82e         db  0x0b ; '.'
000000000000e82f         db  0x00 ; '.'
000000000000e830         dd         0x00000010                                  ; Length of the record
000000000000e834         dd         0x00000f3c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e838         db         0x18, 0xb5, 2 dup (0xff)                    ; begin 0x9d50
000000000000e83c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x9d5c)
000000000000e840         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e841         align      4
000000000000e844         dd         0x00000010                                  ; Length of the record
000000000000e848         dd         0x00000f50                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e84c         db         0x14, 0xb5, 2 dup (0xff)                    ; begin 0x9d60
000000000000e850         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9d77)
000000000000e854         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e855         align      8
000000000000e858         dd         0x00000010                                  ; Length of the record
000000000000e85c         dd         0x00000f64                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e860         db         0x20, 0xb5, 2 dup (0xff)                    ; begin 0x9d80
000000000000e864         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9d93)
000000000000e868         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e869         align      4
000000000000e86c         dd         0x00000010                                  ; Length of the record
000000000000e870         dd         0x00000f78                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e874         db         0x2c, 0xb5, 2 dup (0xff)                    ; begin 0x9da0
000000000000e878         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x9dac)
000000000000e87c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e87d         align      128
000000000000e880         dd         0x00000010                                  ; Length of the record
000000000000e884         dd         0x00000f8c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e888         db         0x28, 0xb5, 2 dup (0xff)                    ; begin 0x9db0
000000000000e88c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x9dc4)
000000000000e890         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e891         align      4
000000000000e894         dd         0x00000010                                  ; Length of the record
000000000000e898         dd         0x00000fa0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e89c         db         0x34, 0xb5, 2 dup (0xff)                    ; begin 0x9dd0
000000000000e8a0         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9de3)
000000000000e8a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e8a5         align      8
000000000000e8a8         dd         0x00000014                                  ; Length of the record
000000000000e8ac         dd         0x00000fb4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e8b0         db         0x40, 0xb5, 2 dup (0xff)                    ; begin 0x9df0
000000000000e8b4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x9e08)
000000000000e8b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e8b9         align      64
000000000000e8c0         dd         0x00000034                                  ; Length of the record
000000000000e8c4         dd         0x00000fcc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e8c8         db         0x48, 0xb5, 2 dup (0xff)                    ; begin 0x9e10
000000000000e8cc         db         0x5e, 3 dup (0x00)                          ; length 0x5e (end at 0x9e6e)
000000000000e8d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e8d1         db  0x42 ; 'B'
000000000000e8d2         db  0x0e ; '.'
000000000000e8d3         db  0x10 ; '.'
000000000000e8d4         db  0x8d ; '.'
000000000000e8d5         db  0x02 ; '.'
000000000000e8d6         db  0x42 ; 'B'
000000000000e8d7         db  0x0e ; '.'
000000000000e8d8         db  0x18 ; '.'
000000000000e8d9         db  0x8c ; '.'
000000000000e8da         db  0x03 ; '.'
000000000000e8db         db  0x44 ; 'D'
000000000000e8dc         db  0x0e ; '.'
000000000000e8dd         db  0x20 ; ' '
000000000000e8de         db  0x86 ; '.'
000000000000e8df         db  0x04 ; '.'
000000000000e8e0         db  0x41 ; 'A'
000000000000e8e1         db  0x0e ; '.'
000000000000e8e2         db  0x28 ; '('
000000000000e8e3         db  0x83 ; '.'
000000000000e8e4         db  0x05 ; '.'
000000000000e8e5         db  0x4a ; 'J'
000000000000e8e6         db  0x0e ; '.'
000000000000e8e7         db  0x30 ; '0'
000000000000e8e8         db  0x02 ; '.'
000000000000e8e9         db  0x41 ; 'A'
000000000000e8ea         db  0x0e ; '.'
000000000000e8eb         db  0x28 ; '('
000000000000e8ec         db  0x44 ; 'D'
000000000000e8ed         db  0x0e ; '.'
000000000000e8ee         db  0x20 ; ' '
000000000000e8ef         db  0x41 ; 'A'
000000000000e8f0         db  0x0e ; '.'
000000000000e8f1         db  0x18 ; '.'
000000000000e8f2         db  0x42 ; 'B'
000000000000e8f3         db  0x0e ; '.'
000000000000e8f4         db  0x10 ; '.'
000000000000e8f5         db  0x42 ; 'B'
000000000000e8f6         db  0x0e ; '.'
000000000000e8f7         db  0x08 ; '.'
000000000000e8f8         dd         0x00000034                                  ; Length of the record
000000000000e8fc         dd         0x00001004                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e900         db         0x70, 0xb5, 2 dup (0xff)                    ; begin 0x9e70
000000000000e904         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0x9eaf)
000000000000e908         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e909         db  0x42 ; 'B'
000000000000e90a         db  0x0e ; '.'
000000000000e90b         db  0x10 ; '.'
000000000000e90c         db  0x8d ; '.'
000000000000e90d         db  0x02 ; '.'
000000000000e90e         db  0x42 ; 'B'
000000000000e90f         db  0x0e ; '.'
000000000000e910         db  0x18 ; '.'
000000000000e911         db  0x8c ; '.'
000000000000e912         db  0x03 ; '.'
000000000000e913         db  0x41 ; 'A'
000000000000e914         db  0x0e ; '.'
000000000000e915         db  0x20 ; ' '
000000000000e916         db  0x86 ; '.'
000000000000e917         db  0x04 ; '.'
000000000000e918         db  0x41 ; 'A'
000000000000e919         db  0x0e ; '.'
000000000000e91a         db  0x28 ; '('
000000000000e91b         db  0x83 ; '.'
000000000000e91c         db  0x05 ; '.'
000000000000e91d         db  0x46 ; 'F'
000000000000e91e         db  0x0e ; '.'
000000000000e91f         db  0x30 ; '0'
000000000000e920         db  0x6a ; 'j'
000000000000e921         db  0x0e ; '.'
000000000000e922         db  0x28 ; '('
000000000000e923         db  0x43 ; 'C'
000000000000e924         db  0x0e ; '.'
000000000000e925         db  0x20 ; ' '
000000000000e926         db  0x41 ; 'A'
000000000000e927         db  0x0e ; '.'
000000000000e928         db  0x18 ; '.'
000000000000e929         db  0x42 ; 'B'
000000000000e92a         db  0x0e ; '.'
000000000000e92b         db  0x10 ; '.'
000000000000e92c         db  0x42 ; 'B'
000000000000e92d         db  0x0e ; '.'
000000000000e92e         db  0x08 ; '.'
000000000000e92f         db  0x00 ; '.'
000000000000e930         dd         0x00000110                                  ; Length of the record
000000000000e934         dd         0x0000103c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000e938         db         0x78, 0xb5, 2 dup (0xff)                    ; begin 0x9eb0
000000000000e93c         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0xa2c7)
000000000000e940         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e941         db  0x42 ; 'B'
000000000000e942         db  0x0e ; '.'
000000000000e943         db  0x10 ; '.'
000000000000e944         db  0x8f ; '.'
000000000000e945         db  0x02 ; '.'
000000000000e946         db  0x42 ; 'B'
000000000000e947         db  0x0e ; '.'
000000000000e948         db  0x18 ; '.'
000000000000e949         db  0x8e ; '.'
000000000000e94a         db  0x03 ; '.'
000000000000e94b         db  0x42 ; 'B'
000000000000e94c         db  0x0e ; '.'
000000000000e94d         db  0x20 ; ' '
000000000000e94e         db  0x8d ; '.'
000000000000e94f         db  0x04 ; '.'
000000000000e950         db  0x42 ; 'B'
000000000000e951         db  0x0e ; '.'
000000000000e952         db  0x28 ; '('
000000000000e953         db  0x8c ; '.'
000000000000e954         db  0x05 ; '.'
000000000000e955         db  0x44 ; 'D'
000000000000e956         db  0x0e ; '.'
000000000000e957         db  0x30 ; '0'
000000000000e958         db  0x86 ; '.'
000000000000e959         db  0x06 ; '.'
000000000000e95a         db  0x41 ; 'A'
000000000000e95b         db  0x0e ; '.'
000000000000e95c         db  0x38 ; '8'
000000000000e95d         db  0x83 ; '.'
000000000000e95e         db  0x07 ; '.'
000000000000e95f         db  0x4a ; 'J'
000000000000e960         db  0x0e ; '.'
000000000000e961         db  0x60 ; '`'
000000000000e962         db  0x02 ; '.'
000000000000e963         db  0xdd ; '.'
000000000000e964         db  0x0e ; '.'
000000000000e965         db  0x68 ; 'h'
000000000000e966         db  0x57 ; 'W'
000000000000e967         db  0x0e ; '.'
000000000000e968         db  0x70 ; 'p'
000000000000e969         db  0x42 ; 'B'
000000000000e96a         db  0x0e ; '.'
000000000000e96b         db  0x78 ; 'x'
000000000000e96c         db  0x42 ; 'B'
000000000000e96d         db  0x0e ; '.'
000000000000e96e         db  0x80 ; '.'
000000000000e96f         db  0x01 ; '.'
000000000000e970         db  0x42 ; 'B'
000000000000e971         db  0x0e ; '.'
000000000000e972         db  0x88 ; '.'
000000000000e973         db  0x01 ; '.'
000000000000e974         db  0x42 ; 'B'
000000000000e975         db  0x0e ; '.'
000000000000e976         db  0x90 ; '.'
000000000000e977         db  0x01 ; '.'
000000000000e978         db  0x53 ; 'S'
000000000000e979         db  0x0e ; '.'
000000000000e97a         db  0x60 ; '`'
000000000000e97b         db  0x44 ; 'D'
000000000000e97c         db  0x0a ; '.'
000000000000e97d         db  0x0e ; '.'
000000000000e97e         db  0x38 ; '8'
000000000000e97f         db  0x41 ; 'A'
000000000000e980         db  0x0e ; '.'
000000000000e981         db  0x30 ; '0'
000000000000e982         db  0x41 ; 'A'
000000000000e983         db  0x0e ; '.'
000000000000e984         db  0x28 ; '('
000000000000e985         db  0x42 ; 'B'
000000000000e986         db  0x0e ; '.'
000000000000e987         db  0x20 ; ' '
000000000000e988         db  0x42 ; 'B'
000000000000e989         db  0x0e ; '.'
000000000000e98a         db  0x18 ; '.'
000000000000e98b         db  0x42 ; 'B'
000000000000e98c         db  0x0e ; '.'
000000000000e98d         db  0x10 ; '.'
000000000000e98e         db  0x42 ; 'B'
000000000000e98f         db  0x0e ; '.'
000000000000e990         db  0x08 ; '.'
000000000000e991         db  0x44 ; 'D'
000000000000e992         db  0x0b ; '.'
000000000000e993         db  0x02 ; '.'
000000000000e994         db  0x78 ; 'x'
000000000000e995         db  0x0a ; '.'
000000000000e996         db  0x0e ; '.'
000000000000e997         db  0x68 ; 'h'
000000000000e998         db  0x48 ; 'H'
000000000000e999         db  0x0b ; '.'
000000000000e99a         db  0x5a ; 'Z'
000000000000e99b         db  0x0a ; '.'
000000000000e99c         db  0x0e ; '.'
000000000000e99d         db  0x38 ; '8'
000000000000e99e         db  0x47 ; 'G'
000000000000e99f         db  0x0e ; '.'
000000000000e9a0         db  0x30 ; '0'
000000000000e9a1         db  0x41 ; 'A'
000000000000e9a2         db  0x0e ; '.'
000000000000e9a3         db  0x28 ; '('
000000000000e9a4         db  0x42 ; 'B'
000000000000e9a5         db  0x0e ; '.'
000000000000e9a6         db  0x20 ; ' '
000000000000e9a7         db  0x42 ; 'B'
000000000000e9a8         db  0x0e ; '.'
000000000000e9a9         db  0x18 ; '.'
000000000000e9aa         db  0x42 ; 'B'
000000000000e9ab         db  0x0e ; '.'
000000000000e9ac         db  0x10 ; '.'
000000000000e9ad         db  0x42 ; 'B'
000000000000e9ae         db  0x0e ; '.'
000000000000e9af         db  0x08 ; '.'
000000000000e9b0         db  0x56 ; 'V'
000000000000e9b1         db  0x0b ; '.'
000000000000e9b2         db  0x5e ; '^'
000000000000e9b3         db  0x0a ; '.'
000000000000e9b4         db  0x0e ; '.'
000000000000e9b5         db  0x38 ; '8'
000000000000e9b6         db  0x52 ; 'R'
000000000000e9b7         db  0x0e ; '.'
000000000000e9b8         db  0x30 ; '0'
000000000000e9b9         db  0x41 ; 'A'
000000000000e9ba         db  0x0e ; '.'
000000000000e9bb         db  0x28 ; '('
000000000000e9bc         db  0x42 ; 'B'
000000000000e9bd         db  0x0e ; '.'
000000000000e9be         db  0x20 ; ' '
000000000000e9bf         db  0x42 ; 'B'
000000000000e9c0         db  0x0e ; '.'
000000000000e9c1         db  0x18 ; '.'
000000000000e9c2         db  0x42 ; 'B'
000000000000e9c3         db  0x0e ; '.'
000000000000e9c4         db  0x10 ; '.'
000000000000e9c5         db  0x42 ; 'B'
000000000000e9c6         db  0x0e ; '.'
000000000000e9c7         db  0x08 ; '.'
000000000000e9c8         db  0x4f ; 'O'
000000000000e9c9         db  0x0b ; '.'
000000000000e9ca         db  0x62 ; 'b'
000000000000e9cb         db  0x0a ; '.'
000000000000e9cc         db  0x0e ; '.'
000000000000e9cd         db  0x38 ; '8'
000000000000e9ce         db  0x50 ; 'P'
000000000000e9cf         db  0x0e ; '.'
000000000000e9d0         db  0x30 ; '0'
000000000000e9d1         db  0x41 ; 'A'
000000000000e9d2         db  0x0e ; '.'
000000000000e9d3         db  0x28 ; '('
000000000000e9d4         db  0x42 ; 'B'
000000000000e9d5         db  0x0e ; '.'
000000000000e9d6         db  0x20 ; ' '
000000000000e9d7         db  0x42 ; 'B'
000000000000e9d8         db  0x0e ; '.'
000000000000e9d9         db  0x18 ; '.'
000000000000e9da         db  0x42 ; 'B'
000000000000e9db         db  0x0e ; '.'
000000000000e9dc         db  0x10 ; '.'
000000000000e9dd         db  0x42 ; 'B'
000000000000e9de         db  0x0e ; '.'
000000000000e9df         db  0x08 ; '.'
000000000000e9e0         db  0x55 ; 'U'
000000000000e9e1         db  0x0b ; '.'
000000000000e9e2         db  0x66 ; 'f'
000000000000e9e3         db  0x0e ; '.'
000000000000e9e4         db  0x68 ; 'h'
000000000000e9e5         db  0x42 ; 'B'
000000000000e9e6         db  0x0e ; '.'
000000000000e9e7         db  0x70 ; 'p'
000000000000e9e8         db  0x5c ; '\'
000000000000e9e9         db  0x0e ; '.'
000000000000e9ea         db  0x68 ; 'h'
000000000000e9eb         db  0x41 ; 'A'
000000000000e9ec         db  0x0e ; '.'
000000000000e9ed         db  0x60 ; '`'
000000000000e9ee         db  0x44 ; 'D'
000000000000e9ef         db  0x0a ; '.'
000000000000e9f0         db  0x0e ; '.'
000000000000e9f1         db  0x38 ; '8'
000000000000e9f2         db  0x41 ; 'A'
000000000000e9f3         db  0x0e ; '.'
000000000000e9f4         db  0x30 ; '0'
000000000000e9f5         db  0x41 ; 'A'
000000000000e9f6         db  0x0e ; '.'
000000000000e9f7         db  0x28 ; '('
000000000000e9f8         db  0x42 ; 'B'
000000000000e9f9         db  0x0e ; '.'
000000000000e9fa         db  0x20 ; ' '
000000000000e9fb         db  0x42 ; 'B'
000000000000e9fc         db  0x0e ; '.'
000000000000e9fd         db  0x18 ; '.'
000000000000e9fe         db  0x42 ; 'B'
000000000000e9ff         db  0x0e ; '.'
000000000000ea00         db  0x10 ; '.'
000000000000ea01         db  0x42 ; 'B'
000000000000ea02         db  0x0e ; '.'
000000000000ea03         db  0x08 ; '.'
000000000000ea04         db  0x45 ; 'E'
000000000000ea05         db  0x0b ; '.'
000000000000ea06         db  0x68 ; 'h'
000000000000ea07         db  0x0a ; '.'
000000000000ea08         db  0x0e ; '.'
000000000000ea09         db  0x68 ; 'h'
000000000000ea0a         db  0x48 ; 'H'
000000000000ea0b         db  0x0b ; '.'
000000000000ea0c         db  0x72 ; 'r'
000000000000ea0d         db  0x0e ; '.'
000000000000ea0e         db  0x68 ; 'h'
000000000000ea0f         db  0x45 ; 'E'
000000000000ea10         db  0x0e ; '.'
000000000000ea11         db  0x70 ; 'p'
000000000000ea12         db  0x42 ; 'B'
000000000000ea13         db  0x0e ; '.'
000000000000ea14         db  0x78 ; 'x'
000000000000ea15         db  0x42 ; 'B'
000000000000ea16         db  0x0e ; '.'
000000000000ea17         db  0x80 ; '.'
000000000000ea18         db  0x01 ; '.'
000000000000ea19         db  0x5e ; '^'
000000000000ea1a         db  0x0e ; '.'
000000000000ea1b         db  0x60 ; '`'
000000000000ea1c         db  0x44 ; 'D'
000000000000ea1d         db  0x0a ; '.'
000000000000ea1e         db  0x0e ; '.'
000000000000ea1f         db  0x38 ; '8'
000000000000ea20         db  0x41 ; 'A'
000000000000ea21         db  0x0e ; '.'
000000000000ea22         db  0x30 ; '0'
000000000000ea23         db  0x41 ; 'A'
000000000000ea24         db  0x0e ; '.'
000000000000ea25         db  0x28 ; '('
000000000000ea26         db  0x42 ; 'B'
000000000000ea27         db  0x0e ; '.'
000000000000ea28         db  0x20 ; ' '
000000000000ea29         db  0x42 ; 'B'
000000000000ea2a         db  0x0e ; '.'
000000000000ea2b         db  0x18 ; '.'
000000000000ea2c         db  0x42 ; 'B'
000000000000ea2d         db  0x0e ; '.'
000000000000ea2e         db  0x10 ; '.'
000000000000ea2f         db  0x42 ; 'B'
000000000000ea30         db  0x0e ; '.'
000000000000ea31         db  0x08 ; '.'
000000000000ea32         db  0x41 ; 'A'
000000000000ea33         db  0x0b ; '.'
000000000000ea34         db  0x79 ; 'y'
000000000000ea35         db  0x0a ; '.'
000000000000ea36         db  0x0e ; '.'
000000000000ea37         db  0x68 ; 'h'
000000000000ea38         db  0x42 ; 'B'
000000000000ea39         db  0x0e ; '.'
000000000000ea3a         db  0x70 ; 'p'
000000000000ea3b         db  0x42 ; 'B'
000000000000ea3c         db  0x0e ; '.'
000000000000ea3d         db  0x78 ; 'x'
000000000000ea3e         db  0x42 ; 'B'
000000000000ea3f         db  0x0e ; '.'
000000000000ea40         db  0x80 ; '.'
000000000000ea41         db  0x01 ; '.'
000000000000ea42         db  0x51 ; 'Q'
000000000000ea43         db  0x0b ; '.'
000000000000ea44         dd         0x00000010                                  ; Length of the record
000000000000ea48         dd         0x00001150                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ea4c         db         0x84, 0xb8, 2 dup (0xff)                    ; begin 0xa2d0
000000000000ea50         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0xa2f0)
000000000000ea54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea55         align      8
000000000000ea58         dd         0x00000018                                  ; Length of the record
000000000000ea5c         dd         0x00001164                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ea60         db         0x90, 0xb8, 2 dup (0xff)                    ; begin 0xa2f0
000000000000ea64         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0xa368)
000000000000ea68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea69         db  0x44 ; 'D'
000000000000ea6a         db  0x0e ; '.'
000000000000ea6b         db  0x70 ; 'p'
000000000000ea6c         db  0x02 ; '.'
000000000000ea6d         db  0x60 ; '`'
000000000000ea6e         db  0x0a ; '.'
000000000000ea6f         db  0x0e ; '.'
000000000000ea70         db  0x08 ; '.'
000000000000ea71         db  0x41 ; 'A'
000000000000ea72         db  0x0b ; '.'
000000000000ea73         db  0x00 ; '.'
000000000000ea74         dd         0x00000028                                  ; Length of the record
000000000000ea78         dd         0x00001180                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ea7c         db         0xf4, 0xb8, 2 dup (0xff)                    ; begin 0xa370
000000000000ea80         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0xa445)
000000000000ea84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea85         db  0x41 ; 'A'
000000000000ea86         db  0x0e ; '.'
000000000000ea87         db  0x10 ; '.'
000000000000ea88         db  0x86 ; '.'
000000000000ea89         db  0x02 ; '.'
000000000000ea8a         db  0x41 ; 'A'
000000000000ea8b         db  0x0e ; '.'
000000000000ea8c         db  0x18 ; '.'
000000000000ea8d         db  0x83 ; '.'
000000000000ea8e         db  0x03 ; '.'
000000000000ea8f         db  0x50 ; 'P'
000000000000ea90         db  0x0e ; '.'
000000000000ea91         db  0xd0 ; '.'
000000000000ea92         db  0x01 ; '.'
000000000000ea93         db  0x02 ; '.'
000000000000ea94         db  0xab ; '.'
000000000000ea95         db  0x0a ; '.'
000000000000ea96         db  0x0e ; '.'
000000000000ea97         db  0x18 ; '.'
000000000000ea98         db  0x41 ; 'A'
000000000000ea99         db  0x0e ; '.'
000000000000ea9a         db  0x10 ; '.'
000000000000ea9b         db  0x41 ; 'A'
000000000000ea9c         db  0x0e ; '.'
000000000000ea9d         db  0x08 ; '.'
000000000000ea9e         db  0x41 ; 'A'
000000000000ea9f         db  0x0b ; '.'
000000000000eaa0         dd         0x0000001c                                  ; Length of the record
000000000000eaa4         dd         0x000011ac                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eaa8         db         0xa8, 0xb9, 2 dup (0xff)                    ; begin 0xa450
000000000000eaac         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0xa4d0)
000000000000eab0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eab1         db  0x41 ; 'A'
000000000000eab2         db  0x0e ; '.'
000000000000eab3         db  0x10 ; '.'
000000000000eab4         db  0x83 ; '.'
000000000000eab5         db  0x02 ; '.'
000000000000eab6         db  0x02 ; '.'
000000000000eab7         db  0x7a ; 'z'
000000000000eab8         db  0x0e ; '.'
000000000000eab9         db  0x08 ; '.'
000000000000eaba         db  0x00 ; '.'
000000000000eabb         db  0x00 ; '.'
000000000000eabc         db  0x00 ; '.'
000000000000eabd         db  0x00 ; '.'
000000000000eabe         db  0x00 ; '.'
000000000000eabf         db  0x00 ; '.'
000000000000eac0         dd         0x00000018                                  ; Length of the record
000000000000eac4         dd         0x000011cc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eac8         db         0x08, 0xba, 2 dup (0xff)                    ; begin 0xa4d0
000000000000eacc         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0xa4ea)
000000000000ead0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ead1         db  0x41 ; 'A'
000000000000ead2         db  0x0e ; '.'
000000000000ead3         db  0x10 ; '.'
000000000000ead4         db  0x83 ; '.'
000000000000ead5         db  0x02 ; '.'
000000000000ead6         db  0x53 ; 'S'
000000000000ead7         db  0x0a ; '.'
000000000000ead8         db  0x0e ; '.'
000000000000ead9         db  0x08 ; '.'
000000000000eada         db  0x41 ; 'A'
000000000000eadb         db  0x0b ; '.'
000000000000eadc         dd         0x00000010                                  ; Length of the record
000000000000eae0         dd         0x000011e8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eae4         db         0x0c, 0xba, 2 dup (0xff)                    ; begin 0xa4f0
000000000000eae8         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0xa514)
000000000000eaec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eaed         db  0x5f ; '_'
000000000000eaee         db  0x0e ; '.'
000000000000eaef         db  0x10 ; '.'
000000000000eaf0         dd         0x00000010                                  ; Length of the record
000000000000eaf4         dd         0x000011fc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eaf8         db         0x28, 0xba, 2 dup (0xff)                    ; begin 0xa520
000000000000eafc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xa522)
000000000000eb00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb01         align      4
000000000000eb04         dd         0x00000020                                  ; Length of the record
000000000000eb08         dd         0x00001210                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eb0c         db         0x24, 0xba, 2 dup (0xff)                    ; begin 0xa530
000000000000eb10         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xa566)
000000000000eb14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb15         db  0x44 ; 'D'
000000000000eb16         db  0x0e ; '.'
000000000000eb17         db  0x10 ; '.'
000000000000eb18         db  0x83 ; '.'
000000000000eb19         db  0x02 ; '.'
000000000000eb1a         db  0x5d ; ']'
000000000000eb1b         db  0x0a ; '.'
000000000000eb1c         db  0x0e ; '.'
000000000000eb1d         db  0x08 ; '.'
000000000000eb1e         db  0x47 ; 'G'
000000000000eb1f         db  0x0b ; '.'
000000000000eb20         db  0x48 ; 'H'
000000000000eb21         db  0x0a ; '.'
000000000000eb22         db  0x0e ; '.'
000000000000eb23         db  0x08 ; '.'
000000000000eb24         db  0x41 ; 'A'
000000000000eb25         db  0x0b ; '.'
000000000000eb26         db  0x00 ; '.'
000000000000eb27         db  0x00 ; '.'
000000000000eb28         dd         0x00000010                                  ; Length of the record
000000000000eb2c         dd         0x00001234                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eb30         db         0x40, 0xba, 2 dup (0xff)                    ; begin 0xa570
000000000000eb34         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0xa594)
000000000000eb38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb39         db  0x5f ; '_'
000000000000eb3a         db  0x0e ; '.'
000000000000eb3b         db  0x10 ; '.'
000000000000eb3c         dd         0x00000014                                  ; Length of the record
000000000000eb40         dd         0x00001248                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eb44         db         0x5c, 0xba, 2 dup (0xff)                    ; begin 0xa5a0
000000000000eb48         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0xa622)
000000000000eb4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb4d         db  0x02 ; '.'
000000000000eb4e         db  0x5f ; '_'
000000000000eb4f         db  0x0e ; '.'
000000000000eb50         db  0x10 ; '.'
000000000000eb51         db  0x49 ; 'I'
000000000000eb52         db  0x0e ; '.'
000000000000eb53         db  0x08 ; '.'
000000000000eb54         dd         0x00000014                                  ; Length of the record
000000000000eb58         dd         0x00001260                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eb5c         db         0xd4, 0xba, 2 dup (0xff)                    ; begin 0xa630
000000000000eb60         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0xa67a)
000000000000eb64         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb65         db  0x02 ; '.'
000000000000eb66         db  0x45 ; 'E'
000000000000eb67         db  0x0e ; '.'
000000000000eb68         db  0x10 ; '.'
000000000000eb69         db  0x00 ; '.'
000000000000eb6a         db  0x00 ; '.'
000000000000eb6b         db  0x00 ; '.'
000000000000eb6c         dd         0x00000018                                  ; Length of the record
000000000000eb70         dd         0x00001278                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eb74         db         0x0c, 0xbb, 2 dup (0xff)                    ; begin 0xa680
000000000000eb78         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0xa697)
000000000000eb7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb7d         db  0x41 ; 'A'
000000000000eb7e         db  0x0e ; '.'
000000000000eb7f         db  0x10 ; '.'
000000000000eb80         db  0x83 ; '.'
000000000000eb81         db  0x02 ; '.'
000000000000eb82         db  0x51 ; 'Q'
000000000000eb83         db  0x0e ; '.'
000000000000eb84         db  0x08 ; '.'
000000000000eb85         db  0x00 ; '.'
000000000000eb86         db  0x00 ; '.'
000000000000eb87         db  0x00 ; '.'
000000000000eb88         dd         0x00000018                                  ; Length of the record
000000000000eb8c         dd         0x00001294                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eb90         db         0x10, 0xbb, 2 dup (0xff)                    ; begin 0xa6a0
000000000000eb94         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0xa6ce)
000000000000eb98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb99         db  0x47 ; 'G'
000000000000eb9a         db  0x0e ; '.'
000000000000eb9b         db  0x10 ; '.'
000000000000eb9c         db  0x61 ; 'a'
000000000000eb9d         db  0x0a ; '.'
000000000000eb9e         db  0x0e ; '.'
000000000000eb9f         db  0x08 ; '.'
000000000000eba0         db  0x41 ; 'A'
000000000000eba1         db  0x0b ; '.'
000000000000eba2         db  0x00 ; '.'
000000000000eba3         db  0x00 ; '.'
000000000000eba4         dd         0x00000024                                  ; Length of the record
000000000000eba8         dd         0x000012b0                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ebac         db         0x24, 0xbb, 2 dup (0xff)                    ; begin 0xa6d0
000000000000ebb0         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0xa6f8)
000000000000ebb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ebb5         db  0x41 ; 'A'
000000000000ebb6         db  0x0e ; '.'
000000000000ebb7         db  0x10 ; '.'
000000000000ebb8         db  0x86 ; '.'
000000000000ebb9         db  0x02 ; '.'
000000000000ebba         db  0x41 ; 'A'
000000000000ebbb         db  0x0e ; '.'
000000000000ebbc         db  0x18 ; '.'
000000000000ebbd         db  0x83 ; '.'
000000000000ebbe         db  0x03 ; '.'
000000000000ebbf         db  0x4d ; 'M'
000000000000ebc0         db  0x0e ; '.'
000000000000ebc1         db  0x20 ; ' '
000000000000ebc2         db  0x49 ; 'I'
000000000000ebc3         db  0x0e ; '.'
000000000000ebc4         db  0x18 ; '.'
000000000000ebc5         db  0x47 ; 'G'
000000000000ebc6         db  0x0e ; '.'
000000000000ebc7         db  0x10 ; '.'
000000000000ebc8         db  0x41 ; 'A'
000000000000ebc9         db  0x0e ; '.'
000000000000ebca         db  0x08 ; '.'
000000000000ebcb         db  0x00 ; '.'
000000000000ebcc         dd         0x00000018                                  ; Length of the record
000000000000ebd0         dd         0x000012d8                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ebd4         db         0x2c, 0xbb, 2 dup (0xff)                    ; begin 0xa700
000000000000ebd8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xa713)
000000000000ebdc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ebdd         db  0x41 ; 'A'
000000000000ebde         db  0x0e ; '.'
000000000000ebdf         db  0x10 ; '.'
000000000000ebe0         db  0x83 ; '.'
000000000000ebe1         db  0x02 ; '.'
000000000000ebe2         db  0x50 ; 'P'
000000000000ebe3         db  0x0e ; '.'
000000000000ebe4         db  0x08 ; '.'
000000000000ebe5         db  0x00 ; '.'
000000000000ebe6         db  0x00 ; '.'
000000000000ebe7         db  0x00 ; '.'
000000000000ebe8         dd         0x00000014                                  ; Length of the record
000000000000ebec         dd         0x000012f4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ebf0         db         0x30, 0xbb, 2 dup (0xff)                    ; begin 0xa720
000000000000ebf4         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xa755)
000000000000ebf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ebf9         db  0x4b ; 'K'
000000000000ebfa         db  0x0e ; '.'
000000000000ebfb         db  0x10 ; '.'
000000000000ebfc         db  0x00 ; '.'
000000000000ebfd         db  0x00 ; '.'
000000000000ebfe         db  0x00 ; '.'
000000000000ebff         db  0x00 ; '.'
000000000000ec00         dd         0x00000048                                  ; Length of the record
000000000000ec04         dd         0x0000130c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ec08         db         0x58, 0xbb, 2 dup (0xff)                    ; begin 0xa760
000000000000ec0c         db         0x00, 0x01, 2 dup (0x00)                    ; length 0x100 (end at 0xa860)
000000000000ec10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec11         db  0x42 ; 'B'
000000000000ec12         db  0x0e ; '.'
000000000000ec13         db  0x10 ; '.'
000000000000ec14         db  0x8f ; '.'
000000000000ec15         db  0x02 ; '.'
000000000000ec16         db  0x42 ; 'B'
000000000000ec17         db  0x0e ; '.'
000000000000ec18         db  0x18 ; '.'
000000000000ec19         db  0x8e ; '.'
000000000000ec1a         db  0x03 ; '.'
000000000000ec1b         db  0x45 ; 'E'
000000000000ec1c         db  0x0e ; '.'
000000000000ec1d         db  0x20 ; ' '
000000000000ec1e         db  0x8d ; '.'
000000000000ec1f         db  0x04 ; '.'
000000000000ec20         db  0x42 ; 'B'
000000000000ec21         db  0x0e ; '.'
000000000000ec22         db  0x28 ; '('
000000000000ec23         db  0x8c ; '.'
000000000000ec24         db  0x05 ; '.'
000000000000ec25         db  0x44 ; 'D'
000000000000ec26         db  0x0e ; '.'
000000000000ec27         db  0x30 ; '0'
000000000000ec28         db  0x86 ; '.'
000000000000ec29         db  0x06 ; '.'
000000000000ec2a         db  0x41 ; 'A'
000000000000ec2b         db  0x0e ; '.'
000000000000ec2c         db  0x38 ; '8'
000000000000ec2d         db  0x83 ; '.'
000000000000ec2e         db  0x07 ; '.'
000000000000ec2f         db  0x4e ; 'N'
000000000000ec30         db  0x0e ; '.'
000000000000ec31         db  0x50 ; 'P'
000000000000ec32         db  0x02 ; '.'
000000000000ec33         db  0x9d ; '.'
000000000000ec34         db  0x0a ; '.'
000000000000ec35         db  0x0e ; '.'
000000000000ec36         db  0x38 ; '8'
000000000000ec37         db  0x41 ; 'A'
000000000000ec38         db  0x0e ; '.'
000000000000ec39         db  0x30 ; '0'
000000000000ec3a         db  0x41 ; 'A'
000000000000ec3b         db  0x0e ; '.'
000000000000ec3c         db  0x28 ; '('
000000000000ec3d         db  0x42 ; 'B'
000000000000ec3e         db  0x0e ; '.'
000000000000ec3f         db  0x20 ; ' '
000000000000ec40         db  0x42 ; 'B'
000000000000ec41         db  0x0e ; '.'
000000000000ec42         db  0x18 ; '.'
000000000000ec43         db  0x42 ; 'B'
000000000000ec44         db  0x0e ; '.'
000000000000ec45         db  0x10 ; '.'
000000000000ec46         db  0x42 ; 'B'
000000000000ec47         db  0x0e ; '.'
000000000000ec48         db  0x08 ; '.'
000000000000ec49         db  0x4b ; 'K'
000000000000ec4a         db  0x0b ; '.'
000000000000ec4b         db  0x00 ; '.'
000000000000ec4c         dd         0x00000018                                  ; Length of the record
000000000000ec50         dd         0x00001358                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ec54         db         0x0c, 0xbc, 2 dup (0xff)                    ; begin 0xa860
000000000000ec58         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0xa881)
000000000000ec5c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec5d         db  0x44 ; 'D'
000000000000ec5e         db  0x0e ; '.'
000000000000ec5f         db  0x18 ; '.'
000000000000ec60         db  0x42 ; 'B'
000000000000ec61         db  0x0e ; '.'
000000000000ec62         db  0x20 ; ' '
000000000000ec63         db  0x5a ; 'Z'
000000000000ec64         db  0x0e ; '.'
000000000000ec65         db  0x08 ; '.'
000000000000ec66         db  0x00 ; '.'
000000000000ec67         db  0x00 ; '.'
000000000000ec68         dd         0x0000002c                                  ; Length of the record
000000000000ec6c         dd         0x00001374                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ec70         db         0x20, 0xbc, 2 dup (0xff)                    ; begin 0xa890
000000000000ec74         db         0x7c, 3 dup (0x00)                          ; length 0x7c (end at 0xa90c)
000000000000ec78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec79         db  0x41 ; 'A'
000000000000ec7a         db  0x0e ; '.'
000000000000ec7b         db  0x10 ; '.'
000000000000ec7c         db  0x86 ; '.'
000000000000ec7d         db  0x02 ; '.'
000000000000ec7e         db  0x41 ; 'A'
000000000000ec7f         db  0x0e ; '.'
000000000000ec80         db  0x18 ; '.'
000000000000ec81         db  0x83 ; '.'
000000000000ec82         db  0x03 ; '.'
000000000000ec83         db  0x44 ; 'D'
000000000000ec84         db  0x0e ; '.'
000000000000ec85         db  0x40 ; '@'
000000000000ec86         db  0x02 ; '.'
000000000000ec87         db  0x62 ; 'b'
000000000000ec88         db  0x0a ; '.'
000000000000ec89         db  0x0e ; '.'
000000000000ec8a         db  0x18 ; '.'
000000000000ec8b         db  0x41 ; 'A'
000000000000ec8c         db  0x0e ; '.'
000000000000ec8d         db  0x10 ; '.'
000000000000ec8e         db  0x41 ; 'A'
000000000000ec8f         db  0x0e ; '.'
000000000000ec90         db  0x08 ; '.'
000000000000ec91         db  0x46 ; 'F'
000000000000ec92         db  0x0b ; '.'
000000000000ec93         db  0x00 ; '.'
000000000000ec94         db  0x00 ; '.'
000000000000ec95         db  0x00 ; '.'
000000000000ec96         db  0x00 ; '.'
000000000000ec97         db  0x00 ; '.'
000000000000ec98         dd         0x00000044                                  ; Length of the record
000000000000ec9c         dd         0x000013a4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eca0         db         0x70, 0xbc, 2 dup (0xff)                    ; begin 0xa910
000000000000eca4         db         0xc1, 3 dup (0x00)                          ; length 0xc1 (end at 0xa9d1)
000000000000eca8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eca9         db  0x42 ; 'B'
000000000000ecaa         db  0x0e ; '.'
000000000000ecab         db  0x10 ; '.'
000000000000ecac         db  0x8e ; '.'
000000000000ecad         db  0x02 ; '.'
000000000000ecae         db  0x42 ; 'B'
000000000000ecaf         db  0x0e ; '.'
000000000000ecb0         db  0x18 ; '.'
000000000000ecb1         db  0x8d ; '.'
000000000000ecb2         db  0x03 ; '.'
000000000000ecb3         db  0x45 ; 'E'
000000000000ecb4         db  0x0e ; '.'
000000000000ecb5         db  0x20 ; ' '
000000000000ecb6         db  0x8c ; '.'
000000000000ecb7         db  0x04 ; '.'
000000000000ecb8         db  0x41 ; 'A'
000000000000ecb9         db  0x0e ; '.'
000000000000ecba         db  0x28 ; '('
000000000000ecbb         db  0x86 ; '.'
000000000000ecbc         db  0x05 ; '.'
000000000000ecbd         db  0x44 ; 'D'
000000000000ecbe         db  0x0e ; '.'
000000000000ecbf         db  0x30 ; '0'
000000000000ecc0         db  0x83 ; '.'
000000000000ecc1         db  0x06 ; '.'
000000000000ecc2         db  0x4a ; 'J'
000000000000ecc3         db  0x0e ; '.'
000000000000ecc4         db  0x40 ; '@'
000000000000ecc5         db  0x02 ; '.'
000000000000ecc6         db  0x70 ; 'p'
000000000000ecc7         db  0x0a ; '.'
000000000000ecc8         db  0x0e ; '.'
000000000000ecc9         db  0x30 ; '0'
000000000000ecca         db  0x41 ; 'A'
000000000000eccb         db  0x0e ; '.'
000000000000eccc         db  0x28 ; '('
000000000000eccd         db  0x41 ; 'A'
000000000000ecce         db  0x0e ; '.'
000000000000eccf         db  0x20 ; ' '
000000000000ecd0         db  0x42 ; 'B'
000000000000ecd1         db  0x0e ; '.'
000000000000ecd2         db  0x18 ; '.'
000000000000ecd3         db  0x42 ; 'B'
000000000000ecd4         db  0x0e ; '.'
000000000000ecd5         db  0x10 ; '.'
000000000000ecd6         db  0x42 ; 'B'
000000000000ecd7         db  0x0e ; '.'
000000000000ecd8         db  0x08 ; '.'
000000000000ecd9         db  0x48 ; 'H'
000000000000ecda         db  0x0b ; '.'
000000000000ecdb         db  0x00 ; '.'
000000000000ecdc         db  0x00 ; '.'
000000000000ecdd         db  0x00 ; '.'
000000000000ecde         db  0x00 ; '.'
000000000000ecdf         db  0x00 ; '.'
000000000000ece0         dd         0x0000004c                                  ; Length of the record
000000000000ece4         dd         0x000013ec                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ece8         db         0xf8, 0xbc, 2 dup (0xff)                    ; begin 0xa9e0
000000000000ecec         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0xadfc)
000000000000ecf0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ecf1         db  0x42 ; 'B'
000000000000ecf2         db  0x0e ; '.'
000000000000ecf3         db  0x10 ; '.'
000000000000ecf4         db  0x8f ; '.'
000000000000ecf5         db  0x02 ; '.'
000000000000ecf6         db  0x42 ; 'B'
000000000000ecf7         db  0x0e ; '.'
000000000000ecf8         db  0x18 ; '.'
000000000000ecf9         db  0x8e ; '.'
000000000000ecfa         db  0x03 ; '.'
000000000000ecfb         db  0x42 ; 'B'
000000000000ecfc         db  0x0e ; '.'
000000000000ecfd         db  0x20 ; ' '
000000000000ecfe         db  0x8d ; '.'
000000000000ecff         db  0x04 ; '.'
000000000000ed00         db  0x42 ; 'B'
000000000000ed01         db  0x0e ; '.'
000000000000ed02         db  0x28 ; '('
000000000000ed03         db  0x8c ; '.'
000000000000ed04         db  0x05 ; '.'
000000000000ed05         db  0x41 ; 'A'
000000000000ed06         db  0x0e ; '.'
000000000000ed07         db  0x30 ; '0'
000000000000ed08         db  0x86 ; '.'
000000000000ed09         db  0x06 ; '.'
000000000000ed0a         db  0x41 ; 'A'
000000000000ed0b         db  0x0e ; '.'
000000000000ed0c         db  0x38 ; '8'
000000000000ed0d         db  0x83 ; '.'
000000000000ed0e         db  0x07 ; '.'
000000000000ed0f         db  0x44 ; 'D'
000000000000ed10         db  0x0e ; '.'
000000000000ed11         db  0x60 ; '`'
000000000000ed12         db  0x02 ; '.'
000000000000ed13         db  0xe9 ; '.'
000000000000ed14         db  0x0a ; '.'
000000000000ed15         db  0x0e ; '.'
000000000000ed16         db  0x38 ; '8'
000000000000ed17         db  0x41 ; 'A'
000000000000ed18         db  0x0e ; '.'
000000000000ed19         db  0x30 ; '0'
000000000000ed1a         db  0x41 ; 'A'
000000000000ed1b         db  0x0e ; '.'
000000000000ed1c         db  0x28 ; '('
000000000000ed1d         db  0x42 ; 'B'
000000000000ed1e         db  0x0e ; '.'
000000000000ed1f         db  0x20 ; ' '
000000000000ed20         db  0x42 ; 'B'
000000000000ed21         db  0x0e ; '.'
000000000000ed22         db  0x18 ; '.'
000000000000ed23         db  0x42 ; 'B'
000000000000ed24         db  0x0e ; '.'
000000000000ed25         db  0x10 ; '.'
000000000000ed26         db  0x42 ; 'B'
000000000000ed27         db  0x0e ; '.'
000000000000ed28         db  0x08 ; '.'
000000000000ed29         db  0x47 ; 'G'
000000000000ed2a         db  0x0b ; '.'
000000000000ed2b         db  0x00 ; '.'
000000000000ed2c         db  0x00 ; '.'
000000000000ed2d         db  0x00 ; '.'
000000000000ed2e         db  0x00 ; '.'
000000000000ed2f         db  0x00 ; '.'
000000000000ed30         dd         0x00000034                                  ; Length of the record
000000000000ed34         dd         0x0000143c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ed38         db         0xc8, 0xc0, 2 dup (0xff)                    ; begin 0xae00
000000000000ed3c         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0xb07e)
000000000000ed40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed41         db  0x42 ; 'B'
000000000000ed42         db  0x0e ; '.'
000000000000ed43         db  0x10 ; '.'
000000000000ed44         db  0x8c ; '.'
000000000000ed45         db  0x02 ; '.'
000000000000ed46         db  0x41 ; 'A'
000000000000ed47         db  0x0e ; '.'
000000000000ed48         db  0x18 ; '.'
000000000000ed49         db  0x86 ; '.'
000000000000ed4a         db  0x03 ; '.'
000000000000ed4b         db  0x43 ; 'C'
000000000000ed4c         db  0x0e ; '.'
000000000000ed4d         db  0x20 ; ' '
000000000000ed4e         db  0x83 ; '.'
000000000000ed4f         db  0x04 ; '.'
000000000000ed50         db  0x44 ; 'D'
000000000000ed51         db  0x0e ; '.'
000000000000ed52         db  0x70 ; 'p'
000000000000ed53         db  0x02 ; '.'
000000000000ed54         db  0xf0 ; '.'
000000000000ed55         db  0x0a ; '.'
000000000000ed56         db  0x0e ; '.'
000000000000ed57         db  0x20 ; ' '
000000000000ed58         db  0x41 ; 'A'
000000000000ed59         db  0x0e ; '.'
000000000000ed5a         db  0x18 ; '.'
000000000000ed5b         db  0x41 ; 'A'
000000000000ed5c         db  0x0e ; '.'
000000000000ed5d         db  0x10 ; '.'
000000000000ed5e         db  0x42 ; 'B'
000000000000ed5f         db  0x0e ; '.'
000000000000ed60         db  0x08 ; '.'
000000000000ed61         db  0x42 ; 'B'
000000000000ed62         db  0x0b ; '.'
000000000000ed63         db  0x00 ; '.'
000000000000ed64         db  0x00 ; '.'
000000000000ed65         db  0x00 ; '.'
000000000000ed66         db  0x00 ; '.'
000000000000ed67         db  0x00 ; '.'
000000000000ed68         dd         0x0000003c                                  ; Length of the record
000000000000ed6c         dd         0x00001474                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ed70         db         0x10, 0xc3, 2 dup (0xff)                    ; begin 0xb080
000000000000ed74         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0xb103)
000000000000ed78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed79         db  0x42 ; 'B'
000000000000ed7a         db  0x0e ; '.'
000000000000ed7b         db  0x10 ; '.'
000000000000ed7c         db  0x8d ; '.'
000000000000ed7d         db  0x02 ; '.'
000000000000ed7e         db  0x42 ; 'B'
000000000000ed7f         db  0x0e ; '.'
000000000000ed80         db  0x18 ; '.'
000000000000ed81         db  0x8c ; '.'
000000000000ed82         db  0x03 ; '.'
000000000000ed83         db  0x44 ; 'D'
000000000000ed84         db  0x0e ; '.'
000000000000ed85         db  0x20 ; ' '
000000000000ed86         db  0x86 ; '.'
000000000000ed87         db  0x04 ; '.'
000000000000ed88         db  0x41 ; 'A'
000000000000ed89         db  0x0e ; '.'
000000000000ed8a         db  0x28 ; '('
000000000000ed8b         db  0x83 ; '.'
000000000000ed8c         db  0x05 ; '.'
000000000000ed8d         db  0x4a ; 'J'
000000000000ed8e         db  0x0e ; '.'
000000000000ed8f         db  0x40 ; '@'
000000000000ed90         db  0x02 ; '.'
000000000000ed91         db  0x64 ; 'd'
000000000000ed92         db  0x0a ; '.'
000000000000ed93         db  0x0e ; '.'
000000000000ed94         db  0x28 ; '('
000000000000ed95         db  0x41 ; 'A'
000000000000ed96         db  0x0e ; '.'
000000000000ed97         db  0x20 ; ' '
000000000000ed98         db  0x41 ; 'A'
000000000000ed99         db  0x0e ; '.'
000000000000ed9a         db  0x18 ; '.'
000000000000ed9b         db  0x42 ; 'B'
000000000000ed9c         db  0x0e ; '.'
000000000000ed9d         db  0x10 ; '.'
000000000000ed9e         db  0x42 ; 'B'
000000000000ed9f         db  0x0e ; '.'
000000000000eda0         db  0x08 ; '.'
000000000000eda1         db  0x41 ; 'A'
000000000000eda2         db  0x0b ; '.'
000000000000eda3         db  0x00 ; '.'
000000000000eda4         db  0x00 ; '.'
000000000000eda5         db  0x00 ; '.'
000000000000eda6         db  0x00 ; '.'
000000000000eda7         db  0x00 ; '.'
000000000000eda8         dd         0x00000034                                  ; Length of the record
000000000000edac         dd         0x000014b4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000edb0         db         0x60, 0xc3, 2 dup (0xff)                    ; begin 0xb110
000000000000edb4         db         0xc7, 3 dup (0x00)                          ; length 0xc7 (end at 0xb1d7)
000000000000edb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000edb9         db  0x42 ; 'B'
000000000000edba         db  0x0e ; '.'
000000000000edbb         db  0x10 ; '.'
000000000000edbc         db  0x8c ; '.'
000000000000edbd         db  0x02 ; '.'
000000000000edbe         db  0x41 ; 'A'
000000000000edbf         db  0x0e ; '.'
000000000000edc0         db  0x18 ; '.'
000000000000edc1         db  0x86 ; '.'
000000000000edc2         db  0x03 ; '.'
000000000000edc3         db  0x41 ; 'A'
000000000000edc4         db  0x0e ; '.'
000000000000edc5         db  0x20 ; ' '
000000000000edc6         db  0x83 ; '.'
000000000000edc7         db  0x04 ; '.'
000000000000edc8         db  0x44 ; 'D'
000000000000edc9         db  0x0e ; '.'
000000000000edca         db  0x40 ; '@'
000000000000edcb         db  0x02 ; '.'
000000000000edcc         db  0xa3 ; '.'
000000000000edcd         db  0x0a ; '.'
000000000000edce         db  0x0e ; '.'
000000000000edcf         db  0x20 ; ' '
000000000000edd0         db  0x41 ; 'A'
000000000000edd1         db  0x0e ; '.'
000000000000edd2         db  0x18 ; '.'
000000000000edd3         db  0x41 ; 'A'
000000000000edd4         db  0x0e ; '.'
000000000000edd5         db  0x10 ; '.'
000000000000edd6         db  0x42 ; 'B'
000000000000edd7         db  0x0e ; '.'
000000000000edd8         db  0x08 ; '.'
000000000000edd9         db  0x41 ; 'A'
000000000000edda         db  0x0b ; '.'
000000000000eddb         db  0x00 ; '.'
000000000000eddc         db  0x00 ; '.'
000000000000eddd         db  0x00 ; '.'
000000000000edde         db  0x00 ; '.'
000000000000eddf         db  0x00 ; '.'
000000000000ede0         dd         0x00000034                                  ; Length of the record
000000000000ede4         dd         0x000014ec                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ede8         db         0xf8, 0xc3, 2 dup (0xff)                    ; begin 0xb1e0
000000000000edec         db         0x6c, 3 dup (0x00)                          ; length 0x6c (end at 0xb24c)
000000000000edf0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000edf1         db  0x41 ; 'A'
000000000000edf2         db  0x0e ; '.'
000000000000edf3         db  0x10 ; '.'
000000000000edf4         db  0x86 ; '.'
000000000000edf5         db  0x02 ; '.'
000000000000edf6         db  0x41 ; 'A'
000000000000edf7         db  0x0e ; '.'
000000000000edf8         db  0x18 ; '.'
000000000000edf9         db  0x83 ; '.'
000000000000edfa         db  0x03 ; '.'
000000000000edfb         db  0x4a ; 'J'
000000000000edfc         db  0x0e ; '.'
000000000000edfd         db  0x20 ; ' '
000000000000edfe         db  0x5c ; '\'
000000000000edff         db  0x0a ; '.'
000000000000ee00         db  0x0e ; '.'
000000000000ee01         db  0x18 ; '.'
000000000000ee02         db  0x47 ; 'G'
000000000000ee03         db  0x0e ; '.'
000000000000ee04         db  0x10 ; '.'
000000000000ee05         db  0x41 ; 'A'
000000000000ee06         db  0x0e ; '.'
000000000000ee07         db  0x08 ; '.'
000000000000ee08         db  0x48 ; 'H'
000000000000ee09         db  0x0b ; '.'
000000000000ee0a         db  0x54 ; 'T'
000000000000ee0b         db  0x0a ; '.'
000000000000ee0c         db  0x0e ; '.'
000000000000ee0d         db  0x18 ; '.'
000000000000ee0e         db  0x41 ; 'A'
000000000000ee0f         db  0x0e ; '.'
000000000000ee10         db  0x10 ; '.'
000000000000ee11         db  0x41 ; 'A'
000000000000ee12         db  0x0e ; '.'
000000000000ee13         db  0x08 ; '.'
000000000000ee14         db  0x42 ; 'B'
000000000000ee15         db  0x0b ; '.'
000000000000ee16         db  0x00 ; '.'
000000000000ee17         db  0x00 ; '.'
000000000000ee18         dd         0x0000004c                                  ; Length of the record
000000000000ee1c         dd         0x00001524                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ee20         db         0x30, 0xc4, 2 dup (0xff)                    ; begin 0xb250
000000000000ee24         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0xb2cd)
000000000000ee28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee29         db  0x42 ; 'B'
000000000000ee2a         db  0x0e ; '.'
000000000000ee2b         db  0x10 ; '.'
000000000000ee2c         db  0x8c ; '.'
000000000000ee2d         db  0x02 ; '.'
000000000000ee2e         db  0x41 ; 'A'
000000000000ee2f         db  0x0e ; '.'
000000000000ee30         db  0x18 ; '.'
000000000000ee31         db  0x86 ; '.'
000000000000ee32         db  0x03 ; '.'
000000000000ee33         db  0x44 ; 'D'
000000000000ee34         db  0x0e ; '.'
000000000000ee35         db  0x20 ; ' '
000000000000ee36         db  0x83 ; '.'
000000000000ee37         db  0x04 ; '.'
000000000000ee38         db  0x69 ; 'i'
000000000000ee39         db  0x0a ; '.'
000000000000ee3a         db  0x0e ; '.'
000000000000ee3b         db  0x18 ; '.'
000000000000ee3c         db  0x41 ; 'A'
000000000000ee3d         db  0x0e ; '.'
000000000000ee3e         db  0x10 ; '.'
000000000000ee3f         db  0x42 ; 'B'
000000000000ee40         db  0x0e ; '.'
000000000000ee41         db  0x08 ; '.'
000000000000ee42         db  0x45 ; 'E'
000000000000ee43         db  0x0b ; '.'
000000000000ee44         db  0x55 ; 'U'
000000000000ee45         db  0x0a ; '.'
000000000000ee46         db  0x0e ; '.'
000000000000ee47         db  0x18 ; '.'
000000000000ee48         db  0x41 ; 'A'
000000000000ee49         db  0x0e ; '.'
000000000000ee4a         db  0x10 ; '.'
000000000000ee4b         db  0x42 ; 'B'
000000000000ee4c         db  0x0e ; '.'
000000000000ee4d         db  0x08 ; '.'
000000000000ee4e         db  0x48 ; 'H'
000000000000ee4f         db  0x0b ; '.'
000000000000ee50         db  0x41 ; 'A'
000000000000ee51         db  0x0a ; '.'
000000000000ee52         db  0x0e ; '.'
000000000000ee53         db  0x18 ; '.'
000000000000ee54         db  0x46 ; 'F'
000000000000ee55         db  0x0e ; '.'
000000000000ee56         db  0x10 ; '.'
000000000000ee57         db  0x42 ; 'B'
000000000000ee58         db  0x0e ; '.'
000000000000ee59         db  0x08 ; '.'
000000000000ee5a         db  0x47 ; 'G'
000000000000ee5b         db  0x0b ; '.'
000000000000ee5c         db  0x49 ; 'I'
000000000000ee5d         db  0x0e ; '.'
000000000000ee5e         db  0x18 ; '.'
000000000000ee5f         db  0x41 ; 'A'
000000000000ee60         db  0x0e ; '.'
000000000000ee61         db  0x10 ; '.'
000000000000ee62         db  0x42 ; 'B'
000000000000ee63         db  0x0e ; '.'
000000000000ee64         db  0x08 ; '.'
000000000000ee65         db  0x00 ; '.'
000000000000ee66         db  0x00 ; '.'
000000000000ee67         db  0x00 ; '.'
000000000000ee68         dd         0x00000014                                  ; Length of the record
000000000000ee6c         dd         0x00001574                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ee70         db         0x60, 0xc4, 2 dup (0xff)                    ; begin 0xb2d0
000000000000ee74         db         0xbc, 3 dup (0x00)                          ; length 0xbc (end at 0xb38c)
000000000000ee78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee79         align      128
000000000000ee80         dd         0x0000001c                                  ; Length of the record
000000000000ee84         dd         0x0000158c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ee88         db         0x08, 0xc5, 2 dup (0xff)                    ; begin 0xb390
000000000000ee8c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0xb3f0)
000000000000ee90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee91         db  0x44 ; 'D'
000000000000ee92         db  0x0e ; '.'
000000000000ee93         db  0x10 ; '.'
000000000000ee94         db  0x75 ; 'u'
000000000000ee95         db  0x0a ; '.'
000000000000ee96         db  0x0e ; '.'
000000000000ee97         db  0x08 ; '.'
000000000000ee98         db  0x47 ; 'G'
000000000000ee99         db  0x0b ; '.'
000000000000ee9a         db  0x5f ; '_'
000000000000ee9b         db  0x0e ; '.'
000000000000ee9c         db  0x08 ; '.'
000000000000ee9d         db  0x00 ; '.'
000000000000ee9e         db  0x00 ; '.'
000000000000ee9f         db  0x00 ; '.'
000000000000eea0         dd         0x0000001c                                  ; Length of the record
000000000000eea4         dd         0x000015ac                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eea8         db         0x48, 0xc5, 2 dup (0xff)                    ; begin 0xb3f0
000000000000eeac         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xb42c)
000000000000eeb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eeb1         db  0x44 ; 'D'
000000000000eeb2         db  0x0e ; '.'
000000000000eeb3         db  0x10 ; '.'
000000000000eeb4         db  0x61 ; 'a'
000000000000eeb5         db  0x0a ; '.'
000000000000eeb6         db  0x0e ; '.'
000000000000eeb7         db  0x08 ; '.'
000000000000eeb8         db  0x4b ; 'K'
000000000000eeb9         db  0x0b ; '.'
000000000000eeba         db  0x4b ; 'K'
000000000000eebb         db  0x0e ; '.'
000000000000eebc         db  0x08 ; '.'
000000000000eebd         db  0x00 ; '.'
000000000000eebe         db  0x00 ; '.'
000000000000eebf         db  0x00 ; '.'
000000000000eec0         dd         0x00000014                                  ; Length of the record
000000000000eec4         dd         0x000015cc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eec8         db         0x68, 0xc5, 2 dup (0xff)                    ; begin 0xb430
000000000000eecc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xb43e)
000000000000eed0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eed1         align      8
000000000000eed8         dd         0x00000034                                  ; Length of the record
000000000000eedc         dd         0x000015e4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000eee0         db         0x60, 0xc5, 2 dup (0xff)                    ; begin 0xb440
000000000000eee4         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xb4bb)
000000000000eee8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eee9         db  0x42 ; 'B'
000000000000eeea         db  0x0e ; '.'
000000000000eeeb         db  0x10 ; '.'
000000000000eeec         db  0x8c ; '.'
000000000000eeed         db  0x02 ; '.'
000000000000eeee         db  0x41 ; 'A'
000000000000eeef         db  0x0e ; '.'
000000000000eef0         db  0x18 ; '.'
000000000000eef1         db  0x86 ; '.'
000000000000eef2         db  0x03 ; '.'
000000000000eef3         db  0x41 ; 'A'
000000000000eef4         db  0x0e ; '.'
000000000000eef5         db  0x20 ; ' '
000000000000eef6         db  0x83 ; '.'
000000000000eef7         db  0x04 ; '.'
000000000000eef8         db  0x7d ; '}'
000000000000eef9         db  0x0a ; '.'
000000000000eefa         db  0x0e ; '.'
000000000000eefb         db  0x18 ; '.'
000000000000eefc         db  0x41 ; 'A'
000000000000eefd         db  0x0e ; '.'
000000000000eefe         db  0x10 ; '.'
000000000000eeff         db  0x42 ; 'B'
000000000000ef00         db  0x0e ; '.'
000000000000ef01         db  0x08 ; '.'
000000000000ef02         db  0x44 ; 'D'
000000000000ef03         db  0x0b ; '.'
000000000000ef04         db  0x60 ; '`'
000000000000ef05         db  0x0a ; '.'
000000000000ef06         db  0x0e ; '.'
000000000000ef07         db  0x18 ; '.'
000000000000ef08         db  0x41 ; 'A'
000000000000ef09         db  0x0e ; '.'
000000000000ef0a         db  0x10 ; '.'
000000000000ef0b         db  0x42 ; 'B'
000000000000ef0c         db  0x0e ; '.'
000000000000ef0d         db  0x08 ; '.'
000000000000ef0e         db  0x45 ; 'E'
000000000000ef0f         db  0x0b ; '.'
000000000000ef10         dd         0x0000001c                                  ; Length of the record
000000000000ef14         dd         0x0000161c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ef18         db         0xa8, 0xc5, 2 dup (0xff)                    ; begin 0xb4c0
000000000000ef1c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xb500)
000000000000ef20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ef21         db  0x44 ; 'D'
000000000000ef22         db  0x0e ; '.'
000000000000ef23         db  0x10 ; '.'
000000000000ef24         db  0x83 ; '.'
000000000000ef25         db  0x02 ; '.'
000000000000ef26         db  0x5a ; 'Z'
000000000000ef27         db  0x0a ; '.'
000000000000ef28         db  0x0e ; '.'
000000000000ef29         db  0x08 ; '.'
000000000000ef2a         db  0x4a ; 'J'
000000000000ef2b         db  0x0b ; '.'
000000000000ef2c         db  0x53 ; 'S'
000000000000ef2d         db  0x0e ; '.'
000000000000ef2e         db  0x08 ; '.'
000000000000ef2f         db  0x00 ; '.'
000000000000ef30         dd         0x0000002c                                  ; Length of the record
000000000000ef34         dd         0x0000163c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ef38         db         0xc8, 0xc5, 2 dup (0xff)                    ; begin 0xb500
000000000000ef3c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xb557)
000000000000ef40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ef41         db  0x63 ; 'c'
000000000000ef42         db  0x0e ; '.'
000000000000ef43         db  0x10 ; '.'
000000000000ef44         db  0x8c ; '.'
000000000000ef45         db  0x02 ; '.'
000000000000ef46         db  0x41 ; 'A'
000000000000ef47         db  0x0e ; '.'
000000000000ef48         db  0x18 ; '.'
000000000000ef49         db  0x86 ; '.'
000000000000ef4a         db  0x03 ; '.'
000000000000ef4b         db  0x44 ; 'D'
000000000000ef4c         db  0x0e ; '.'
000000000000ef4d         db  0x20 ; ' '
000000000000ef4e         db  0x83 ; '.'
000000000000ef4f         db  0x04 ; '.'
000000000000ef50         db  0x6b ; 'k'
000000000000ef51         db  0x0e ; '.'                                         ; DATA XREF=fremote+466
000000000000ef52         db  0x18 ; '.'
000000000000ef53         db  0x41 ; 'A'                                         ; DATA XREF=fremote+502
000000000000ef54         db  0x0e ; '.'
000000000000ef55         db  0x10 ; '.'
000000000000ef56         db  0x42 ; 'B'
000000000000ef57         db  0x0e ; '.'
000000000000ef58         db  0x08 ; '.'
000000000000ef59         db  0x00 ; '.'
000000000000ef5a         db  0x00 ; '.'
000000000000ef5b         db  0x00 ; '.'
000000000000ef5c         db  0x00 ; '.'
000000000000ef5d         db  0x00 ; '.'
000000000000ef5e         db  0x00 ; '.'
000000000000ef5f         db  0x00 ; '.'
000000000000ef60         dd         0x00000044                                  ; Length of the record
000000000000ef64         dd         0x0000166c                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000ef68         db         0xf8, 0xc5, 2 dup (0xff)                    ; begin 0xb560
000000000000ef6c         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xb5c5)
000000000000ef70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ef71         db  0x42 ; 'B'
000000000000ef72         db  0x0e ; '.'
000000000000ef73         db  0x10 ; '.'
000000000000ef74         db  0x8f ; '.'
000000000000ef75         db  0x02 ; '.'
000000000000ef76         db  0x42 ; 'B'
000000000000ef77         db  0x0e ; '.'
000000000000ef78         db  0x18 ; '.'
000000000000ef79         db  0x8e ; '.'
000000000000ef7a         db  0x03 ; '.'
000000000000ef7b         db  0x45 ; 'E'
000000000000ef7c         db  0x0e ; '.'
000000000000ef7d         db  0x20 ; ' '
000000000000ef7e         db  0x8d ; '.'
000000000000ef7f         db  0x04 ; '.'
000000000000ef80         db  0x42 ; 'B'
000000000000ef81         db  0x0e ; '.'
000000000000ef82         db  0x28 ; '('
000000000000ef83         db  0x8c ; '.'
000000000000ef84         db  0x05 ; '.'
000000000000ef85         db  0x48 ; 'H'
000000000000ef86         db  0x0e ; '.'
000000000000ef87         db  0x30 ; '0'
000000000000ef88         db  0x86 ; '.'
000000000000ef89         db  0x06 ; '.'
000000000000ef8a         db  0x48 ; 'H'
000000000000ef8b         db  0x0e ; '.'
000000000000ef8c         db  0x38 ; '8'
000000000000ef8d         db  0x83 ; '.'
000000000000ef8e         db  0x07 ; '.'
000000000000ef8f         db  0x4d ; 'M'
000000000000ef90         db  0x0e ; '.'
000000000000ef91         db  0x40 ; '@'
000000000000ef92         db  0x72 ; 'r'
000000000000ef93         db  0x0e ; '.'
000000000000ef94         db  0x38 ; '8'
000000000000ef95         db  0x41 ; 'A'
000000000000ef96         db  0x0e ; '.'
000000000000ef97         db  0x30 ; '0'
000000000000ef98         db  0x41 ; 'A'
000000000000ef99         db  0x0e ; '.'
000000000000ef9a         db  0x28 ; '('
000000000000ef9b         db  0x42 ; 'B'
000000000000ef9c         db  0x0e ; '.'
000000000000ef9d         db  0x20 ; ' '
000000000000ef9e         db  0x42 ; 'B'
000000000000ef9f         db  0x0e ; '.'
000000000000efa0         db  0x18 ; '.'
000000000000efa1         db  0x42 ; 'B'
000000000000efa2         db  0x0e ; '.'
000000000000efa3         db  0x10 ; '.'
000000000000efa4         db  0x42 ; 'B'
000000000000efa5         db  0x0e ; '.'
000000000000efa6         db  0x08 ; '.'
000000000000efa7         db  0x00 ; '.'
000000000000efa8         dd         0x00000014                                  ; Length of the record
000000000000efac         dd         0x000016b4                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000efb0         db         0x20, 0xc6, 2 dup (0xff)                    ; begin 0xb5d0
000000000000efb4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xb5d2)
000000000000efb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000efb9         align      64
000000000000efc0         dd         0x00000010                                  ; Length of the record
000000000000efc4         dd         0x000016cc                                  ; FDE: parent CIE at 0xd8f8 (FDE encoding = 0x1B)
000000000000efc8         db         0x18, 0xc6, 2 dup (0xff)                    ; begin 0xb5e0
000000000000efcc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xb5ee)
000000000000efd0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000efd1         align      8


        ; Segment Segment 3
        ; Range: [0x20f910; 0x210288[ (2424 bytes)
        ; File offset : [63760; 65728[ (1968 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20f910; 0x20f918[ (8 bytes)
        ; File offset : [63760; 63768[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020f910         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20f918; 0x20f920[ (8 bytes)
        ; File offset : [63768; 63776[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020f918         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20f920; 0x20fb98[ (632 bytes)
        ; File offset : [63776; 64408[ (632 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000020f920         db  0x33 ; '3'                                         ; DATA XREF=main+240
000000000020f921         db  0xb8 ; '.'
000000000020f922         db  0x00 ; '.'
000000000020f923         db  0x00 ; '.'
000000000020f924         db  0x00 ; '.'
000000000020f925         db  0x00 ; '.'
000000000020f926         db  0x00 ; '.'
000000000020f927         db  0x00 ; '.'
000000000020f928         db  0x01 ; '.'
000000000020f929         db  0x00 ; '.'
000000000020f92a         db  0x00 ; '.'
000000000020f92b         db  0x00 ; '.'
000000000020f92c         db  0x00 ; '.'
000000000020f92d         db  0x00 ; '.'
000000000020f92e         db  0x00 ; '.'
000000000020f92f         db  0x00 ; '.'
000000000020f930         db  0x00 ; '.'
000000000020f931         db  0x00 ; '.'
000000000020f932         db  0x00 ; '.'
000000000020f933         db  0x00 ; '.'
000000000020f934         db  0x00 ; '.'
000000000020f935         db  0x00 ; '.'
000000000020f936         db  0x00 ; '.'
000000000020f937         db  0x00 ; '.'
000000000020f938         db  0x63 ; 'c'
000000000020f939         db  0x00 ; '.'
000000000020f93a         db  0x00 ; '.'
000000000020f93b         db  0x00 ; '.'
000000000020f93c         db  0x00 ; '.'
000000000020f93d         db  0x00 ; '.'
000000000020f93e         db  0x00 ; '.'
000000000020f93f         db  0x00 ; '.'
000000000020f940         db  0x48 ; 'H'
000000000020f941         db  0xb8 ; '.'
000000000020f942         db  0x00 ; '.'
000000000020f943         db  0x00 ; '.'
000000000020f944         db  0x00 ; '.'
000000000020f945         db  0x00 ; '.'
000000000020f946         db  0x00 ; '.'
000000000020f947         db  0x00 ; '.'
000000000020f948         db  0x02 ; '.'
000000000020f949         db  0x00 ; '.'
000000000020f94a         db  0x00 ; '.'
000000000020f94b         db  0x00 ; '.'
000000000020f94c         db  0x00 ; '.'
000000000020f94d         db  0x00 ; '.'
000000000020f94e         db  0x00 ; '.'
000000000020f94f         db  0x00 ; '.'
000000000020f950         db  0x00 ; '.'
000000000020f951         db  0x00 ; '.'
000000000020f952         db  0x00 ; '.'
000000000020f953         db  0x00 ; '.'
000000000020f954         db  0x00 ; '.'
000000000020f955         db  0x00 ; '.'
000000000020f956         db  0x00 ; '.'
000000000020f957         db  0x00 ; '.'
000000000020f958         db  0x84 ; '.'
000000000020f959         db  0x00 ; '.'
000000000020f95a         db  0x00 ; '.'
000000000020f95b         db  0x00 ; '.'
000000000020f95c         db  0x00 ; '.'
000000000020f95d         db  0x00 ; '.'
000000000020f95e         db  0x00 ; '.'
000000000020f95f         db  0x00 ; '.'
000000000020f960         db  0x1b ; '.'
000000000020f961         db  0xb8 ; '.'
000000000020f962         db  0x00 ; '.'
000000000020f963         db  0x00 ; '.'
000000000020f964         db  0x00 ; '.'
000000000020f965         db  0x00 ; '.'
000000000020f966         db  0x00 ; '.'
000000000020f967         db  0x00 ; '.'
000000000020f968         db  0x01 ; '.'
000000000020f969         db  0x00 ; '.'
000000000020f96a         db  0x00 ; '.'
000000000020f96b         db  0x00 ; '.'
000000000020f96c         db  0x00 ; '.'
000000000020f96d         db  0x00 ; '.'
000000000020f96e         db  0x00 ; '.'
000000000020f96f         db  0x00 ; '.'
000000000020f970         db  0x00 ; '.'
000000000020f971         db  0x00 ; '.'
000000000020f972         db  0x00 ; '.'
000000000020f973         db  0x00 ; '.'
000000000020f974         db  0x00 ; '.'
000000000020f975         db  0x00 ; '.'
000000000020f976         db  0x00 ; '.'
000000000020f977         db  0x00 ; '.'
000000000020f978         db  0x6e ; 'n'
000000000020f979         db  0x00 ; '.'
000000000020f97a         db  0x00 ; '.'
000000000020f97b         db  0x00 ; '.'
000000000020f97c         db  0x00 ; '.'
000000000020f97d         db  0x00 ; '.'
000000000020f97e         db  0x00 ; '.'
000000000020f97f         db  0x00 ; '.'
000000000020f980         db  0x96 ; '.'
000000000020f981         db  0xb9 ; '.'
000000000020f982         db  0x00 ; '.'
000000000020f983         db  0x00 ; '.'
000000000020f984         db  0x00 ; '.'
000000000020f985         db  0x00 ; '.'
000000000020f986         db  0x00 ; '.'
000000000020f987         db  0x00 ; '.'
000000000020f988         db  0x01 ; '.'
000000000020f989         db  0x00 ; '.'
000000000020f98a         db  0x00 ; '.'
000000000020f98b         db  0x00 ; '.'
000000000020f98c         db  0x00 ; '.'
000000000020f98d         db  0x00 ; '.'
000000000020f98e         db  0x00 ; '.'
000000000020f98f         db  0x00 ; '.'
000000000020f990         db  0x00 ; '.'
000000000020f991         db  0x00 ; '.'
000000000020f992         db  0x00 ; '.'
000000000020f993         db  0x00 ; '.'
000000000020f994         db  0x00 ; '.'
000000000020f995         db  0x00 ; '.'
000000000020f996         db  0x00 ; '.'
000000000020f997         db  0x00 ; '.'
000000000020f998         db  0x81 ; '.'
000000000020f999         db  0x00 ; '.'
000000000020f99a         db  0x00 ; '.'
000000000020f99b         db  0x00 ; '.'
000000000020f99c         db  0x00 ; '.'
000000000020f99d         db  0x00 ; '.'
000000000020f99e         db  0x00 ; '.'
000000000020f99f         db  0x00 ; '.'
000000000020f9a0         db  0xaa ; '.'
000000000020f9a1         db  0xb9 ; '.'
000000000020f9a2         db  0x00 ; '.'
000000000020f9a3         db  0x00 ; '.'
000000000020f9a4         db  0x00 ; '.'
000000000020f9a5         db  0x00 ; '.'
000000000020f9a6         db  0x00 ; '.'
000000000020f9a7         db  0x00 ; '.'
000000000020f9a8         db  0x00 ; '.'
000000000020f9a9         db  0x00 ; '.'
000000000020f9aa         db  0x00 ; '.'
000000000020f9ab         db  0x00 ; '.'
000000000020f9ac         db  0x00 ; '.'
000000000020f9ad         db  0x00 ; '.'
000000000020f9ae         db  0x00 ; '.'
000000000020f9af         db  0x00 ; '.'
000000000020f9b0         db  0x00 ; '.'
000000000020f9b1         db  0x00 ; '.'
000000000020f9b2         db  0x00 ; '.'
000000000020f9b3         db  0x00 ; '.'
000000000020f9b4         db  0x00 ; '.'
000000000020f9b5         db  0x00 ; '.'
000000000020f9b6         db  0x00 ; '.'
000000000020f9b7         db  0x00 ; '.'
000000000020f9b8         db  0x85 ; '.'
000000000020f9b9         db  0x00 ; '.'
000000000020f9ba         db  0x00 ; '.'
000000000020f9bb         db  0x00 ; '.'
000000000020f9bc         db  0x00 ; '.'
000000000020f9bd         db  0x00 ; '.'
000000000020f9be         db  0x00 ; '.'
000000000020f9bf         db  0x00 ; '.'
000000000020f9c0         db  0xbb ; '.'
000000000020f9c1         db  0xb9 ; '.'
000000000020f9c2         db  0x00 ; '.'
000000000020f9c3         db  0x00 ; '.'
000000000020f9c4         db  0x00 ; '.'
000000000020f9c5         db  0x00 ; '.'
000000000020f9c6         db  0x00 ; '.'
000000000020f9c7         db  0x00 ; '.'
000000000020f9c8         db  0x01 ; '.'
000000000020f9c9         db  0x00 ; '.'
000000000020f9ca         db  0x00 ; '.'
000000000020f9cb         db  0x00 ; '.'
000000000020f9cc         db  0x00 ; '.'
000000000020f9cd         db  0x00 ; '.'
000000000020f9ce         db  0x00 ; '.'
000000000020f9cf         db  0x00 ; '.'
000000000020f9d0         db  0x00 ; '.'
000000000020f9d1         db  0x00 ; '.'
000000000020f9d2         db  0x00 ; '.'
000000000020f9d3         db  0x00 ; '.'
000000000020f9d4         db  0x00 ; '.'
000000000020f9d5         db  0x00 ; '.'
000000000020f9d6         db  0x00 ; '.'
000000000020f9d7         db  0x00 ; '.'
000000000020f9d8         db  0x82 ; '.'
000000000020f9d9         db  0x00 ; '.'
000000000020f9da         db  0x00 ; '.'
000000000020f9db         db  0x00 ; '.'
000000000020f9dc         db  0x00 ; '.'
000000000020f9dd         db  0x00 ; '.'
000000000020f9de         db  0x00 ; '.'
000000000020f9df         db  0x00 ; '.'
000000000020f9e0         db  0xbf ; '.'
000000000020f9e1         db  0xb9 ; '.'
000000000020f9e2         db  0x00 ; '.'
000000000020f9e3         db  0x00 ; '.'
000000000020f9e4         db  0x00 ; '.'
000000000020f9e5         db  0x00 ; '.'
000000000020f9e6         db  0x00 ; '.'
000000000020f9e7         db  0x00 ; '.'
000000000020f9e8         db  0x00 ; '.'
000000000020f9e9         db  0x00 ; '.'
000000000020f9ea         db  0x00 ; '.'
000000000020f9eb         db  0x00 ; '.'
000000000020f9ec         db  0x00 ; '.'
000000000020f9ed         db  0x00 ; '.'
000000000020f9ee         db  0x00 ; '.'
000000000020f9ef         db  0x00 ; '.'
000000000020f9f0         db  0x00 ; '.'
000000000020f9f1         db  0x00 ; '.'
000000000020f9f2         db  0x00 ; '.'
000000000020f9f3         db  0x00 ; '.'
000000000020f9f4         db  0x00 ; '.'
000000000020f9f5         db  0x00 ; '.'
000000000020f9f6         db  0x00 ; '.'
000000000020f9f7         db  0x00 ; '.'
000000000020f9f8         db  0x83 ; '.'
000000000020f9f9         db  0x00 ; '.'
000000000020f9fa         db  0x00 ; '.'
000000000020f9fb         db  0x00 ; '.'
000000000020f9fc         db  0x00 ; '.'
000000000020f9fd         db  0x00 ; '.'
000000000020f9fe         db  0x00 ; '.'
000000000020f9ff         db  0x00 ; '.'
000000000020fa00         db  0xd3 ; '.'
000000000020fa01         db  0xb9 ; '.'
000000000020fa02         db  0x00 ; '.'
000000000020fa03         db  0x00 ; '.'
000000000020fa04         db  0x00 ; '.'
000000000020fa05         db  0x00 ; '.'
000000000020fa06         db  0x00 ; '.'
000000000020fa07         db  0x00 ; '.'
000000000020fa08         db  0x00 ; '.'
000000000020fa09         db  0x00 ; '.'
000000000020fa0a         db  0x00 ; '.'
000000000020fa0b         db  0x00 ; '.'
000000000020fa0c         db  0x00 ; '.'
000000000020fa0d         db  0x00 ; '.'
000000000020fa0e         db  0x00 ; '.'
000000000020fa0f         db  0x00 ; '.'
000000000020fa10         db  0x00 ; '.'
000000000020fa11         db  0x00 ; '.'
000000000020fa12         db  0x00 ; '.'
000000000020fa13         db  0x00 ; '.'
000000000020fa14         db  0x00 ; '.'
000000000020fa15         db  0x00 ; '.'
000000000020fa16         db  0x00 ; '.'
000000000020fa17         db  0x00 ; '.'
000000000020fa18         db  0x71 ; 'q'
000000000020fa19         db  0x00 ; '.'
000000000020fa1a         db  0x00 ; '.'
000000000020fa1b         db  0x00 ; '.'
000000000020fa1c         db  0x00 ; '.'
000000000020fa1d         db  0x00 ; '.'
000000000020fa1e         db  0x00 ; '.'
000000000020fa1f         db  0x00 ; '.'
000000000020fa20         db  0xd9 ; '.'
000000000020fa21         db  0xb9 ; '.'
000000000020fa22         db  0x00 ; '.'
000000000020fa23         db  0x00 ; '.'
000000000020fa24         db  0x00 ; '.'
000000000020fa25         db  0x00 ; '.'
000000000020fa26         db  0x00 ; '.'
000000000020fa27         db  0x00 ; '.'
000000000020fa28         db  0x00 ; '.'
000000000020fa29         db  0x00 ; '.'
000000000020fa2a         db  0x00 ; '.'
000000000020fa2b         db  0x00 ; '.'
000000000020fa2c         db  0x00 ; '.'
000000000020fa2d         db  0x00 ; '.'
000000000020fa2e         db  0x00 ; '.'
000000000020fa2f         db  0x00 ; '.'
000000000020fa30         db  0x00 ; '.'
000000000020fa31         db  0x00 ; '.'
000000000020fa32         db  0x00 ; '.'
000000000020fa33         db  0x00 ; '.'
000000000020fa34         db  0x00 ; '.'
000000000020fa35         db  0x00 ; '.'
000000000020fa36         db  0x00 ; '.'
000000000020fa37         db  0x00 ; '.'
000000000020fa38         db  0x80 ; '.'
000000000020fa39         db  0x00 ; '.'
000000000020fa3a         db  0x00 ; '.'
000000000020fa3b         db  0x00 ; '.'
000000000020fa3c         db  0x00 ; '.'
000000000020fa3d         db  0x00 ; '.'
000000000020fa3e         db  0x00 ; '.'
000000000020fa3f         db  0x00 ; '.'
000000000020fa40         db  0xdf ; '.'
000000000020fa41         db  0xb9 ; '.'
000000000020fa42         db  0x00 ; '.'
000000000020fa43         db  0x00 ; '.'
000000000020fa44         db  0x00 ; '.'
000000000020fa45         db  0x00 ; '.'
000000000020fa46         db  0x00 ; '.'
000000000020fa47         db  0x00 ; '.'
000000000020fa48         db  0x00 ; '.'
000000000020fa49         db  0x00 ; '.'
000000000020fa4a         db  0x00 ; '.'
000000000020fa4b         db  0x00 ; '.'
000000000020fa4c         db  0x00 ; '.'
000000000020fa4d         db  0x00 ; '.'
000000000020fa4e         db  0x00 ; '.'
000000000020fa4f         db  0x00 ; '.'
000000000020fa50         db  0x00 ; '.'
000000000020fa51         db  0x00 ; '.'
000000000020fa52         db  0x00 ; '.'
000000000020fa53         db  0x00 ; '.'
000000000020fa54         db  0x00 ; '.'
000000000020fa55         db  0x00 ; '.'
000000000020fa56         db  0x00 ; '.'
000000000020fa57         db  0x00 ; '.'
000000000020fa58         db  0x71 ; 'q'
000000000020fa59         db  0x00 ; '.'
000000000020fa5a         db  0x00 ; '.'
000000000020fa5b         db  0x00 ; '.'
000000000020fa5c         db  0x00 ; '.'
000000000020fa5d         db  0x00 ; '.'
000000000020fa5e         db  0x00 ; '.'
000000000020fa5f         db  0x00 ; '.'
000000000020fa60         db  0xe6 ; '.'
000000000020fa61         db  0xb9 ; '.'
000000000020fa62         db  0x00 ; '.'
000000000020fa63         db  0x00 ; '.'
000000000020fa64         db  0x00 ; '.'
000000000020fa65         db  0x00 ; '.'
000000000020fa66         db  0x00 ; '.'
000000000020fa67         db  0x00 ; '.'
000000000020fa68         db  0x01 ; '.'
000000000020fa69         db  0x00 ; '.'
000000000020fa6a         db  0x00 ; '.'
000000000020fa6b         db  0x00 ; '.'
000000000020fa6c         db  0x00 ; '.'
000000000020fa6d         db  0x00 ; '.'
000000000020fa6e         db  0x00 ; '.'
000000000020fa6f         db  0x00 ; '.'
000000000020fa70         db  0x00 ; '.'
000000000020fa71         db  0x00 ; '.'
000000000020fa72         db  0x00 ; '.'
000000000020fa73         db  0x00 ; '.'
000000000020fa74         db  0x00 ; '.'
000000000020fa75         db  0x00 ; '.'
000000000020fa76         db  0x00 ; '.'
000000000020fa77         db  0x00 ; '.'
000000000020fa78         db  0x73 ; 's'
000000000020fa79         db  0x00 ; '.'
000000000020fa7a         db  0x00 ; '.'
000000000020fa7b         db  0x00 ; '.'
000000000020fa7c         db  0x00 ; '.'
000000000020fa7d         db  0x00 ; '.'
000000000020fa7e         db  0x00 ; '.'
000000000020fa7f         db  0x00 ; '.'
000000000020fa80         db  0xf5 ; '.'
000000000020fa81         db  0xb9 ; '.'
000000000020fa82         db  0x00 ; '.'
000000000020fa83         db  0x00 ; '.'
000000000020fa84         db  0x00 ; '.'
000000000020fa85         db  0x00 ; '.'
000000000020fa86         db  0x00 ; '.'
000000000020fa87         db  0x00 ; '.'
000000000020fa88         db  0x00 ; '.'
000000000020fa89         db  0x00 ; '.'
000000000020fa8a         db  0x00 ; '.'
000000000020fa8b         db  0x00 ; '.'
000000000020fa8c         db  0x00 ; '.'
000000000020fa8d         db  0x00 ; '.'
000000000020fa8e         db  0x00 ; '.'
000000000020fa8f         db  0x00 ; '.'
000000000020fa90         db  0x00 ; '.'
000000000020fa91         db  0x00 ; '.'
000000000020fa92         db  0x00 ; '.'
000000000020fa93         db  0x00 ; '.'
000000000020fa94         db  0x00 ; '.'
000000000020fa95         db  0x00 ; '.'
000000000020fa96         db  0x00 ; '.'
000000000020fa97         db  0x00 ; '.'
000000000020fa98         db  0x76 ; 'v'
000000000020fa99         db  0x00 ; '.'
000000000020fa9a         db  0x00 ; '.'
000000000020fa9b         db  0x00 ; '.'
000000000020fa9c         db  0x00 ; '.'
000000000020fa9d         db  0x00 ; '.'
000000000020fa9e         db  0x00 ; '.'
000000000020fa9f         db  0x00 ; '.'
000000000020faa0         db  0xfd ; '.'
000000000020faa1         db  0xb9 ; '.'
000000000020faa2         db  0x00 ; '.'
000000000020faa3         db  0x00 ; '.'
000000000020faa4         db  0x00 ; '.'
000000000020faa5         db  0x00 ; '.'
000000000020faa6         db  0x00 ; '.'
000000000020faa7         db  0x00 ; '.'
000000000020faa8         db  0x00 ; '.'
000000000020faa9         db  0x00 ; '.'
000000000020faaa         db  0x00 ; '.'
000000000020faab         db  0x00 ; '.'
000000000020faac         db  0x00 ; '.'
000000000020faad         db  0x00 ; '.'
000000000020faae         db  0x00 ; '.'
000000000020faaf         db  0x00 ; '.'
000000000020fab0         db  0x00 ; '.'
000000000020fab1         db  0x00 ; '.'
000000000020fab2         db  0x00 ; '.'
000000000020fab3         db  0x00 ; '.'
000000000020fab4         db  0x00 ; '.'
000000000020fab5         db  0x00 ; '.'
000000000020fab6         db  0x00 ; '.'
000000000020fab7         db  0x00 ; '.'
000000000020fab8         db  0x7a ; 'z'
000000000020fab9         db  0x00 ; '.'
000000000020faba         db  0x00 ; '.'
000000000020fabb         db  0x00 ; '.'
000000000020fabc         db  0x00 ; '.'
000000000020fabd         db  0x00 ; '.'
000000000020fabe         db  0x00 ; '.'
000000000020fabf         db  0x00 ; '.'
000000000020fac0         db  0x0d ; '.'
000000000020fac1         db  0xba ; '.'
000000000020fac2         db  0x00 ; '.'
000000000020fac3         db  0x00 ; '.'
000000000020fac4         db  0x00 ; '.'
000000000020fac5         db  0x00 ; '.'
000000000020fac6         db  0x00 ; '.'
000000000020fac7         db  0x00 ; '.'
000000000020fac8         db  0x00 ; '.'
000000000020fac9         db  0x00 ; '.'
000000000020faca         db  0x00 ; '.'
000000000020facb         db  0x00 ; '.'
000000000020facc         db  0x00 ; '.'
000000000020facd         db  0x00 ; '.'
000000000020face         db  0x00 ; '.'
000000000020facf         db  0x00 ; '.'
000000000020fad0         db  0x00 ; '.'
000000000020fad1         db  0x00 ; '.'
000000000020fad2         db  0x00 ; '.'
000000000020fad3         db  0x00 ; '.'
000000000020fad4         db  0x00 ; '.'
000000000020fad5         db  0x00 ; '.'
000000000020fad6         db  0x00 ; '.'
000000000020fad7         db  0x00 ; '.'
000000000020fad8         db  0x7e ; '~'
000000000020fad9         db  0xff ; '.'
000000000020fada         db  0xff ; '.'
000000000020fadb         db  0xff ; '.'
000000000020fadc         db  0x00 ; '.'
000000000020fadd         db  0x00 ; '.'
000000000020fade         db  0x00 ; '.'
000000000020fadf         db  0x00 ; '.'
000000000020fae0         db  0x12 ; '.'
000000000020fae1         db  0xba ; '.'
000000000020fae2         db  0x00 ; '.'
000000000020fae3         db  0x00 ; '.'
000000000020fae4         db  0x00 ; '.'
000000000020fae5         db  0x00 ; '.'
000000000020fae6         db  0x00 ; '.'
000000000020fae7         db  0x00 ; '.'
000000000020fae8         db  0x00 ; '.'
000000000020fae9         db  0x00 ; '.'
000000000020faea         db  0x00 ; '.'
000000000020faeb         db  0x00 ; '.'
000000000020faec         db  0x00 ; '.'
000000000020faed         db  0x00 ; '.'
000000000020faee         db  0x00 ; '.'
000000000020faef         db  0x00 ; '.'
000000000020faf0         db  0x00 ; '.'
000000000020faf1         db  0x00 ; '.'
000000000020faf2         db  0x00 ; '.'
000000000020faf3         db  0x00 ; '.'
000000000020faf4         db  0x00 ; '.'
000000000020faf5         db  0x00 ; '.'
000000000020faf6         db  0x00 ; '.'
000000000020faf7         db  0x00 ; '.'
000000000020faf8         db  0x7d ; '}'
000000000020faf9         db  0xff ; '.'
000000000020fafa         db  0xff ; '.'
000000000020fafb         db  0xff ; '.'
000000000020fafc         db  0x00 ; '.'
000000000020fafd         db  0x00 ; '.'
000000000020fafe         db  0x00 ; '.'
000000000020faff         db  0x00 ; '.'
000000000020fb00         db  0x00 ; '.'
000000000020fb01         db  0x00 ; '.'
000000000020fb02         db  0x00 ; '.'
000000000020fb03         db  0x00 ; '.'
000000000020fb04         db  0x00 ; '.'
000000000020fb05         db  0x00 ; '.'
000000000020fb06         db  0x00 ; '.'
000000000020fb07         db  0x00 ; '.'
000000000020fb08         db  0x00 ; '.'
000000000020fb09         db  0x00 ; '.'
000000000020fb0a         db  0x00 ; '.'
000000000020fb0b         db  0x00 ; '.'
000000000020fb0c         db  0x00 ; '.'
000000000020fb0d         db  0x00 ; '.'
000000000020fb0e         db  0x00 ; '.'
000000000020fb0f         db  0x00 ; '.'
000000000020fb10         db  0x00 ; '.'
000000000020fb11         db  0x00 ; '.'
000000000020fb12         db  0x00 ; '.'
000000000020fb13         db  0x00 ; '.'
000000000020fb14         db  0x00 ; '.'
000000000020fb15         db  0x00 ; '.'
000000000020fb16         db  0x00 ; '.'
000000000020fb17         db  0x00 ; '.'
000000000020fb18         db  0x00 ; '.'
000000000020fb19         db  0x00 ; '.'
000000000020fb1a         db  0x00 ; '.'
000000000020fb1b         db  0x00 ; '.'
000000000020fb1c         db  0x00 ; '.'
000000000020fb1d         db  0x00 ; '.'
000000000020fb1e         db  0x00 ; '.'
000000000020fb1f         db  0x00 ; '.'
                     follow_mode_string:
000000000020fb20         db  0x1a ; '.'                                         ; DATA XREF=main+990
000000000020fb21         db  0xba ; '.'
000000000020fb22         db  0x00 ; '.'
000000000020fb23         db  0x00 ; '.'
000000000020fb24         db  0x00 ; '.'
000000000020fb25         db  0x00 ; '.'
000000000020fb26         db  0x00 ; '.'
000000000020fb27         db  0x00 ; '.'
000000000020fb28         db  0x02 ; '.'
000000000020fb29         db  0xb7 ; '.'
000000000020fb2a         db  0x00 ; '.'
000000000020fb2b         db  0x00 ; '.'
000000000020fb2c         db  0x00 ; '.'
000000000020fb2d         db  0x00 ; '.'
000000000020fb2e         db  0x00 ; '.'
000000000020fb2f         db  0x00 ; '.'
000000000020fb30         db  0x00 ; '.'
000000000020fb31         db  0x00 ; '.'
000000000020fb32         db  0x00 ; '.'
000000000020fb33         db  0x00 ; '.'
000000000020fb34         db  0x00 ; '.'
000000000020fb35         db  0x00 ; '.'
000000000020fb36         db  0x00 ; '.'
000000000020fb37         db  0x00 ; '.'
000000000020fb38         db  0x00 ; '.'
000000000020fb39         db  0x00 ; '.'
000000000020fb3a         db  0x00 ; '.'
000000000020fb3b         db  0x00 ; '.'
000000000020fb3c         db  0x00 ; '.'
000000000020fb3d         db  0x00 ; '.'
000000000020fb3e         db  0x00 ; '.'
000000000020fb3f         db  0x00 ; '.'
                     quoting_style_args:
000000000020fb40         db  0xe9 ; '.'
000000000020fb41         db  0xca ; '.'
000000000020fb42         db  0x00 ; '.'
000000000020fb43         db  0x00 ; '.'
000000000020fb44         db  0x00 ; '.'
000000000020fb45         db  0x00 ; '.'
000000000020fb46         db  0x00 ; '.'
000000000020fb47         db  0x00 ; '.'
000000000020fb48         db  0xf1 ; '.'
000000000020fb49         db  0xca ; '.'
000000000020fb4a         db  0x00 ; '.'
000000000020fb4b         db  0x00 ; '.'
000000000020fb4c         db  0x00 ; '.'
000000000020fb4d         db  0x00 ; '.'
000000000020fb4e         db  0x00 ; '.'
000000000020fb4f         db  0x00 ; '.'
000000000020fb50         db  0xf7 ; '.'
000000000020fb51         db  0xca ; '.'
000000000020fb52         db  0x00 ; '.'
000000000020fb53         db  0x00 ; '.'
000000000020fb54         db  0x00 ; '.'
000000000020fb55         db  0x00 ; '.'
000000000020fb56         db  0x00 ; '.'
000000000020fb57         db  0x00 ; '.'
000000000020fb58         db  0x04 ; '.'
000000000020fb59         db  0xcb ; '.'
000000000020fb5a         db  0x00 ; '.'
000000000020fb5b         db  0x00 ; '.'
000000000020fb5c         db  0x00 ; '.'
000000000020fb5d         db  0x00 ; '.'
000000000020fb5e         db  0x00 ; '.'
000000000020fb5f         db  0x00 ; '.'
000000000020fb60         db  0x11 ; '.'
000000000020fb61         db  0xcb ; '.'
000000000020fb62         db  0x00 ; '.'
000000000020fb63         db  0x00 ; '.'
000000000020fb64         db  0x00 ; '.'
000000000020fb65         db  0x00 ; '.'
000000000020fb66         db  0x00 ; '.'
000000000020fb67         db  0x00 ; '.'
000000000020fb68         db  0xbd ; '.'
000000000020fb69         db  0xb6 ; '.'
000000000020fb6a         db  0x00 ; '.'
000000000020fb6b         db  0x00 ; '.'
000000000020fb6c         db  0x00 ; '.'
000000000020fb6d         db  0x00 ; '.'
000000000020fb6e         db  0x00 ; '.'
000000000020fb6f         db  0x00 ; '.'
000000000020fb70         db  0x25 ; '%'
000000000020fb71         db  0xcb ; '.'
000000000020fb72         db  0x00 ; '.'
000000000020fb73         db  0x00 ; '.'
000000000020fb74         db  0x00 ; '.'
000000000020fb75         db  0x00 ; '.'
000000000020fb76         db  0x00 ; '.'
000000000020fb77         db  0x00 ; '.'
000000000020fb78         db  0x0a ; '.'
000000000020fb79         db  0xcb ; '.'
000000000020fb7a         db  0x00 ; '.'
000000000020fb7b         db  0x00 ; '.'
000000000020fb7c         db  0x00 ; '.'
000000000020fb7d         db  0x00 ; '.'
000000000020fb7e         db  0x00 ; '.'
000000000020fb7f         db  0x00 ; '.'
000000000020fb80         db  0xe7 ; '.'
000000000020fb81         db  0xb7 ; '.'
000000000020fb82         db  0x00 ; '.'
000000000020fb83         db  0x00 ; '.'
000000000020fb84         db  0x00 ; '.'
000000000020fb85         db  0x00 ; '.'
000000000020fb86         db  0x00 ; '.'
000000000020fb87         db  0x00 ; '.'
000000000020fb88         db  0x2d ; '-'
000000000020fb89         db  0xcb ; '.'
000000000020fb8a         db  0x00 ; '.'
000000000020fb8b         db  0x00 ; '.'
000000000020fb8c         db  0x00 ; '.'
000000000020fb8d         db  0x00 ; '.'
000000000020fb8e         db  0x00 ; '.'
000000000020fb8f         db  0x00 ; '.'
000000000020fb90         db  0x00 ; '.'
000000000020fb91         db  0x00 ; '.'
000000000020fb92         db  0x00 ; '.'
000000000020fb93         db  0x00 ; '.'
000000000020fb94         db  0x00 ; '.'
000000000020fb95         db  0x00 ; '.'
000000000020fb96         db  0x00 ; '.'
000000000020fb97         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20fb98; 0x20fd88[ (496 bytes)
        ; File offset : [64408; 64904[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020fb98         db  0x01 ; '.'
000000000020fb99         db  0x00 ; '.'
000000000020fb9a         db  0x00 ; '.'
000000000020fb9b         db  0x00 ; '.'
000000000020fb9c         db  0x00 ; '.'
000000000020fb9d         db  0x00 ; '.'
000000000020fb9e         db  0x00 ; '.'
000000000020fb9f         db  0x00 ; '.'
000000000020fba0         db  0x01 ; '.'
000000000020fba1         db  0x00 ; '.'
000000000020fba2         db  0x00 ; '.'
000000000020fba3         db  0x00 ; '.'
000000000020fba4         db  0x00 ; '.'
000000000020fba5         db  0x00 ; '.'
000000000020fba6         db  0x00 ; '.'
000000000020fba7         db  0x00 ; '.'
000000000020fba8         db  0x0c ; '.'
000000000020fba9         db  0x00 ; '.'
000000000020fbaa         db  0x00 ; '.'
000000000020fbab         db  0x00 ; '.'
000000000020fbac         db  0x00 ; '.'
000000000020fbad         db  0x00 ; '.'
000000000020fbae         db  0x00 ; '.'
000000000020fbaf         db  0x00 ; '.'
000000000020fbb0         db  0xa8 ; '.'
000000000020fbb1         db  0x1a ; '.'
000000000020fbb2         db  0x00 ; '.'
000000000020fbb3         db  0x00 ; '.'
000000000020fbb4         db  0x00 ; '.'
000000000020fbb5         db  0x00 ; '.'
000000000020fbb6         db  0x00 ; '.'
000000000020fbb7         db  0x00 ; '.'
000000000020fbb8         db  0x0d ; '.'
000000000020fbb9         db  0x00 ; '.'
000000000020fbba         db  0x00 ; '.'
000000000020fbbb         db  0x00 ; '.'
000000000020fbbc         db  0x00 ; '.'
000000000020fbbd         db  0x00 ; '.'
000000000020fbbe         db  0x00 ; '.'
000000000020fbbf         db  0x00 ; '.'
000000000020fbc0         db  0xf0 ; '.'
000000000020fbc1         db  0xb5 ; '.'
000000000020fbc2         db  0x00 ; '.'
000000000020fbc3         db  0x00 ; '.'
000000000020fbc4         db  0x00 ; '.'
000000000020fbc5         db  0x00 ; '.'
000000000020fbc6         db  0x00 ; '.'
000000000020fbc7         db  0x00 ; '.'
000000000020fbc8         db  0x19 ; '.'
000000000020fbc9         db  0x00 ; '.'
000000000020fbca         db  0x00 ; '.'
000000000020fbcb         db  0x00 ; '.'
000000000020fbcc         db  0x00 ; '.'
000000000020fbcd         db  0x00 ; '.'
000000000020fbce         db  0x00 ; '.'
000000000020fbcf         db  0x00 ; '.'
000000000020fbd0         db  0x10 ; '.'
000000000020fbd1         db  0xf9 ; '.'
000000000020fbd2         db  0x20 ; ' '
000000000020fbd3         db  0x00 ; '.'
000000000020fbd4         db  0x00 ; '.'
000000000020fbd5         db  0x00 ; '.'
000000000020fbd6         db  0x00 ; '.'
000000000020fbd7         db  0x00 ; '.'
000000000020fbd8         db  0x1b ; '.'
000000000020fbd9         db  0x00 ; '.'
000000000020fbda         db  0x00 ; '.'
000000000020fbdb         db  0x00 ; '.'
000000000020fbdc         db  0x00 ; '.'
000000000020fbdd         db  0x00 ; '.'
000000000020fbde         db  0x00 ; '.'
000000000020fbdf         db  0x00 ; '.'
000000000020fbe0         db  0x08 ; '.'
000000000020fbe1         db  0x00 ; '.'
000000000020fbe2         db  0x00 ; '.'
000000000020fbe3         db  0x00 ; '.'
000000000020fbe4         db  0x00 ; '.'
000000000020fbe5         db  0x00 ; '.'
000000000020fbe6         db  0x00 ; '.'
000000000020fbe7         db  0x00 ; '.'
000000000020fbe8         db  0x1a ; '.'
000000000020fbe9         db  0x00 ; '.'
000000000020fbea         db  0x00 ; '.'
000000000020fbeb         db  0x00 ; '.'
000000000020fbec         db  0x00 ; '.'
000000000020fbed         db  0x00 ; '.'
000000000020fbee         db  0x00 ; '.'
000000000020fbef         db  0x00 ; '.'
000000000020fbf0         db  0x18 ; '.'
000000000020fbf1         db  0xf9 ; '.'
000000000020fbf2         db  0x20 ; ' '
000000000020fbf3         db  0x00 ; '.'
000000000020fbf4         db  0x00 ; '.'
000000000020fbf5         db  0x00 ; '.'
000000000020fbf6         db  0x00 ; '.'
000000000020fbf7         db  0x00 ; '.'
000000000020fbf8         db  0x1c ; '.'
000000000020fbf9         db  0x00 ; '.'
000000000020fbfa         db  0x00 ; '.'
000000000020fbfb         db  0x00 ; '.'
000000000020fbfc         db  0x00 ; '.'
000000000020fbfd         db  0x00 ; '.'
000000000020fbfe         db  0x00 ; '.'
000000000020fbff         db  0x00 ; '.'
000000000020fc00         db  0x08 ; '.'
000000000020fc01         db  0x00 ; '.'
000000000020fc02         db  0x00 ; '.'
000000000020fc03         db  0x00 ; '.'
000000000020fc04         db  0x00 ; '.'
000000000020fc05         db  0x00 ; '.'
000000000020fc06         db  0x00 ; '.'
000000000020fc07         db  0x00 ; '.'
000000000020fc08         db  0xf5 ; '.'
000000000020fc09         db  0xfe ; '.'
000000000020fc0a         db  0xff ; '.'
000000000020fc0b         db  0x6f ; 'o'
000000000020fc0c         db  0x00 ; '.'
000000000020fc0d         db  0x00 ; '.'
000000000020fc0e         db  0x00 ; '.'
000000000020fc0f         db  0x00 ; '.'
000000000020fc10         db  0x98 ; '.'
000000000020fc11         db  0x02 ; '.'
000000000020fc12         db  0x00 ; '.'
000000000020fc13         db  0x00 ; '.'
000000000020fc14         db  0x00 ; '.'
000000000020fc15         db  0x00 ; '.'
000000000020fc16         db  0x00 ; '.'
000000000020fc17         db  0x00 ; '.'
000000000020fc18         db  0x05 ; '.'
000000000020fc19         db  0x00 ; '.'
000000000020fc1a         db  0x00 ; '.'
000000000020fc1b         db  0x00 ; '.'
000000000020fc1c         db  0x00 ; '.'
000000000020fc1d         db  0x00 ; '.'
000000000020fc1e         db  0x00 ; '.'
000000000020fc1f         db  0x00 ; '.'
000000000020fc20         db  0xd8 ; '.'
000000000020fc21         db  0x0a ; '.'
000000000020fc22         db  0x00 ; '.'
000000000020fc23         db  0x00 ; '.'
000000000020fc24         db  0x00 ; '.'
000000000020fc25         db  0x00 ; '.'
000000000020fc26         db  0x00 ; '.'
000000000020fc27         db  0x00 ; '.'
000000000020fc28         db  0x06 ; '.'
000000000020fc29         db  0x00 ; '.'
000000000020fc2a         db  0x00 ; '.'
000000000020fc2b         db  0x00 ; '.'
000000000020fc2c         db  0x00 ; '.'
000000000020fc2d         db  0x00 ; '.'
000000000020fc2e         db  0x00 ; '.'
000000000020fc2f         db  0x00 ; '.'
000000000020fc30         db  0xe0 ; '.'
000000000020fc31         db  0x02 ; '.'
000000000020fc32         db  0x00 ; '.'
000000000020fc33         db  0x00 ; '.'
000000000020fc34         db  0x00 ; '.'
000000000020fc35         db  0x00 ; '.'
000000000020fc36         db  0x00 ; '.'
000000000020fc37         db  0x00 ; '.'
000000000020fc38         db  0x0a ; '.'
000000000020fc39         db  0x00 ; '.'
000000000020fc3a         db  0x00 ; '.'
000000000020fc3b         db  0x00 ; '.'
000000000020fc3c         db  0x00 ; '.'
000000000020fc3d         db  0x00 ; '.'
000000000020fc3e         db  0x00 ; '.'
000000000020fc3f         db  0x00 ; '.'
000000000020fc40         db  0xbe ; '.'
000000000020fc41         db  0x03 ; '.'
000000000020fc42         db  0x00 ; '.'
000000000020fc43         db  0x00 ; '.'
000000000020fc44         db  0x00 ; '.'
000000000020fc45         db  0x00 ; '.'
000000000020fc46         db  0x00 ; '.'
000000000020fc47         db  0x00 ; '.'
000000000020fc48         db  0x0b ; '.'
000000000020fc49         db  0x00 ; '.'
000000000020fc4a         db  0x00 ; '.'
000000000020fc4b         db  0x00 ; '.'
000000000020fc4c         db  0x00 ; '.'
000000000020fc4d         db  0x00 ; '.'
000000000020fc4e         db  0x00 ; '.'
000000000020fc4f         db  0x00 ; '.'
000000000020fc50         db  0x18 ; '.'
000000000020fc51         db  0x00 ; '.'
000000000020fc52         db  0x00 ; '.'
000000000020fc53         db  0x00 ; '.'
000000000020fc54         db  0x00 ; '.'
000000000020fc55         db  0x00 ; '.'
000000000020fc56         db  0x00 ; '.'
000000000020fc57         db  0x00 ; '.'
000000000020fc58         db  0x15 ; '.'
000000000020fc59         db  0x00 ; '.'
000000000020fc5a         db  0x00 ; '.'
000000000020fc5b         db  0x00 ; '.'
000000000020fc5c         db  0x00 ; '.'
000000000020fc5d         db  0x00 ; '.'
000000000020fc5e         db  0x00 ; '.'
000000000020fc5f         db  0x00 ; '.'
000000000020fc60         db  0x00 ; '.'
000000000020fc61         db  0x00 ; '.'
000000000020fc62         db  0x00 ; '.'
000000000020fc63         db  0x00 ; '.'
000000000020fc64         db  0x00 ; '.'
000000000020fc65         db  0x00 ; '.'
000000000020fc66         db  0x00 ; '.'
000000000020fc67         db  0x00 ; '.'
000000000020fc68         db  0x03 ; '.'
000000000020fc69         db  0x00 ; '.'
000000000020fc6a         db  0x00 ; '.'
000000000020fc6b         db  0x00 ; '.'
000000000020fc6c         db  0x00 ; '.'
000000000020fc6d         db  0x00 ; '.'
000000000020fc6e         db  0x00 ; '.'
000000000020fc6f         db  0x00 ; '.'
000000000020fc70         db  0x88 ; '.'
000000000020fc71         db  0xfd ; '.'
000000000020fc72         db  0x20 ; ' '
000000000020fc73         db  0x00 ; '.'
000000000020fc74         db  0x00 ; '.'
000000000020fc75         db  0x00 ; '.'
000000000020fc76         db  0x00 ; '.'
000000000020fc77         db  0x00 ; '.'
000000000020fc78         db  0x02 ; '.'
000000000020fc79         db  0x00 ; '.'
000000000020fc7a         db  0x00 ; '.'
000000000020fc7b         db  0x00 ; '.'
000000000020fc7c         db  0x00 ; '.'
000000000020fc7d         db  0x00 ; '.'
000000000020fc7e         db  0x00 ; '.'
000000000020fc7f         db  0x00 ; '.'
000000000020fc80         db  0xa8 ; '.'
000000000020fc81         db  0x06 ; '.'
000000000020fc82         db  0x00 ; '.'
000000000020fc83         db  0x00 ; '.'
000000000020fc84         db  0x00 ; '.'
000000000020fc85         db  0x00 ; '.'
000000000020fc86         db  0x00 ; '.'
000000000020fc87         db  0x00 ; '.'
000000000020fc88         db  0x14 ; '.'
000000000020fc89         db  0x00 ; '.'
000000000020fc8a         db  0x00 ; '.'
000000000020fc8b         db  0x00 ; '.'
000000000020fc8c         db  0x00 ; '.'
000000000020fc8d         db  0x00 ; '.'
000000000020fc8e         db  0x00 ; '.'
000000000020fc8f         db  0x00 ; '.'
000000000020fc90         db  0x07 ; '.'
000000000020fc91         db  0x00 ; '.'
000000000020fc92         db  0x00 ; '.'
000000000020fc93         db  0x00 ; '.'
000000000020fc94         db  0x00 ; '.'
000000000020fc95         db  0x00 ; '.'
000000000020fc96         db  0x00 ; '.'
000000000020fc97         db  0x00 ; '.'
000000000020fc98         db  0x17 ; '.'
000000000020fc99         db  0x00 ; '.'
000000000020fc9a         db  0x00 ; '.'
000000000020fc9b         db  0x00 ; '.'
000000000020fc9c         db  0x00 ; '.'
000000000020fc9d         db  0x00 ; '.'
000000000020fc9e         db  0x00 ; '.'
000000000020fc9f         db  0x00 ; '.'
000000000020fca0         db  0x00 ; '.'
000000000020fca1         db  0x14 ; '.'
000000000020fca2         db  0x00 ; '.'
000000000020fca3         db  0x00 ; '.'
000000000020fca4         db  0x00 ; '.'
000000000020fca5         db  0x00 ; '.'
000000000020fca6         db  0x00 ; '.'
000000000020fca7         db  0x00 ; '.'
000000000020fca8         db  0x07 ; '.'
000000000020fca9         db  0x00 ; '.'
000000000020fcaa         db  0x00 ; '.'
000000000020fcab         db  0x00 ; '.'
000000000020fcac         db  0x00 ; '.'
000000000020fcad         db  0x00 ; '.'
000000000020fcae         db  0x00 ; '.'
000000000020fcaf         db  0x00 ; '.'
000000000020fcb0         db  0xb0 ; '.'
000000000020fcb1         db  0x0f ; '.'
000000000020fcb2         db  0x00 ; '.'
000000000020fcb3         db  0x00 ; '.'
000000000020fcb4         db  0x00 ; '.'
000000000020fcb5         db  0x00 ; '.'
000000000020fcb6         db  0x00 ; '.'
000000000020fcb7         db  0x00 ; '.'
000000000020fcb8         db  0x08 ; '.'
000000000020fcb9         db  0x00 ; '.'
000000000020fcba         db  0x00 ; '.'
000000000020fcbb         db  0x00 ; '.'
000000000020fcbc         db  0x00 ; '.'
000000000020fcbd         db  0x00 ; '.'
000000000020fcbe         db  0x00 ; '.'
000000000020fcbf         db  0x00 ; '.'
000000000020fcc0         db  0x50 ; 'P'
000000000020fcc1         db  0x04 ; '.'
000000000020fcc2         db  0x00 ; '.'
000000000020fcc3         db  0x00 ; '.'
000000000020fcc4         db  0x00 ; '.'
000000000020fcc5         db  0x00 ; '.'
000000000020fcc6         db  0x00 ; '.'
000000000020fcc7         db  0x00 ; '.'
000000000020fcc8         db  0x09 ; '.'
000000000020fcc9         db  0x00 ; '.'
000000000020fcca         db  0x00 ; '.'
000000000020fccb         db  0x00 ; '.'
000000000020fccc         db  0x00 ; '.'
000000000020fccd         db  0x00 ; '.'
000000000020fcce         db  0x00 ; '.'
000000000020fccf         db  0x00 ; '.'
000000000020fcd0         db  0x18 ; '.'
000000000020fcd1         db  0x00 ; '.'
000000000020fcd2         db  0x00 ; '.'
000000000020fcd3         db  0x00 ; '.'
000000000020fcd4         db  0x00 ; '.'
000000000020fcd5         db  0x00 ; '.'
000000000020fcd6         db  0x00 ; '.'
000000000020fcd7         db  0x00 ; '.'
000000000020fcd8         db  0x1e ; '.'
000000000020fcd9         db  0x00 ; '.'
000000000020fcda         db  0x00 ; '.'
000000000020fcdb         db  0x00 ; '.'
000000000020fcdc         db  0x00 ; '.'
000000000020fcdd         db  0x00 ; '.'
000000000020fcde         db  0x00 ; '.'
000000000020fcdf         db  0x00 ; '.'
000000000020fce0         db  0x08 ; '.'
000000000020fce1         db  0x00 ; '.'
000000000020fce2         db  0x00 ; '.'
000000000020fce3         db  0x00 ; '.'
000000000020fce4         db  0x00 ; '.'
000000000020fce5         db  0x00 ; '.'
000000000020fce6         db  0x00 ; '.'
000000000020fce7         db  0x00 ; '.'
000000000020fce8         db  0xfb ; '.'
000000000020fce9         db  0xff ; '.'
000000000020fcea         db  0xff ; '.'
000000000020fceb         db  0x6f ; 'o'
000000000020fcec         db  0x00 ; '.'
000000000020fced         db  0x00 ; '.'
000000000020fcee         db  0x00 ; '.'
000000000020fcef         db  0x00 ; '.'
000000000020fcf0         db  0x01 ; '.'
000000000020fcf1         db  0x00 ; '.'
000000000020fcf2         db  0x00 ; '.'
000000000020fcf3         db  0x08 ; '.'
000000000020fcf4         db  0x00 ; '.'
000000000020fcf5         db  0x00 ; '.'
000000000020fcf6         db  0x00 ; '.'
000000000020fcf7         db  0x00 ; '.'
000000000020fcf8         db  0xfe ; '.'
000000000020fcf9         db  0xff ; '.'
000000000020fcfa         db  0xff ; '.'
000000000020fcfb         db  0x6f ; 'o'
000000000020fcfc         db  0x00 ; '.'
000000000020fcfd         db  0x00 ; '.'
000000000020fcfe         db  0x00 ; '.'
000000000020fcff         db  0x00 ; '.'
000000000020fd00         db  0x40 ; '@'
000000000020fd01         db  0x0f ; '.'
000000000020fd02         db  0x00 ; '.'
000000000020fd03         db  0x00 ; '.'
000000000020fd04         db  0x00 ; '.'
000000000020fd05         db  0x00 ; '.'
000000000020fd06         db  0x00 ; '.'
000000000020fd07         db  0x00 ; '.'
000000000020fd08         db  0xff ; '.'
000000000020fd09         db  0xff ; '.'
000000000020fd0a         db  0xff ; '.'
000000000020fd0b         db  0x6f ; 'o'
000000000020fd0c         db  0x00 ; '.'
000000000020fd0d         db  0x00 ; '.'
000000000020fd0e         db  0x00 ; '.'
000000000020fd0f         db  0x00 ; '.'
000000000020fd10         db  0x01 ; '.'
000000000020fd11         db  0x00 ; '.'
000000000020fd12         db  0x00 ; '.'
000000000020fd13         db  0x00 ; '.'
000000000020fd14         db  0x00 ; '.'
000000000020fd15         db  0x00 ; '.'
000000000020fd16         db  0x00 ; '.'
000000000020fd17         db  0x00 ; '.'
000000000020fd18         db  0xf0 ; '.'
000000000020fd19         db  0xff ; '.'
000000000020fd1a         db  0xff ; '.'
000000000020fd1b         db  0x6f ; 'o'
000000000020fd1c         db  0x00 ; '.'
000000000020fd1d         db  0x00 ; '.'
000000000020fd1e         db  0x00 ; '.'
000000000020fd1f         db  0x00 ; '.'
000000000020fd20         db  0x96 ; '.'
000000000020fd21         db  0x0e ; '.'
000000000020fd22         db  0x00 ; '.'
000000000020fd23         db  0x00 ; '.'
000000000020fd24         db  0x00 ; '.'
000000000020fd25         db  0x00 ; '.'
000000000020fd26         db  0x00 ; '.'
000000000020fd27         db  0x00 ; '.'
000000000020fd28         db  0xf9 ; '.'
000000000020fd29         db  0xff ; '.'
000000000020fd2a         db  0xff ; '.'
000000000020fd2b         db  0x6f ; 'o'
000000000020fd2c         db  0x00 ; '.'
000000000020fd2d         db  0x00 ; '.'
000000000020fd2e         db  0x00 ; '.'
000000000020fd2f         db  0x00 ; '.'
000000000020fd30         db  0x23 ; '#'
000000000020fd31         db  0x00 ; '.'
000000000020fd32         db  0x00 ; '.'
000000000020fd33         db  0x00 ; '.'
000000000020fd34         db  0x00 ; '.'
000000000020fd35         db  0x00 ; '.'
000000000020fd36         db  0x00 ; '.'
000000000020fd37         db  0x00 ; '.'
000000000020fd38         db  0x00 ; '.'
000000000020fd39         db  0x00 ; '.'
000000000020fd3a         db  0x00 ; '.'
000000000020fd3b         db  0x00 ; '.'
000000000020fd3c         db  0x00 ; '.'
000000000020fd3d         db  0x00 ; '.'
000000000020fd3e         db  0x00 ; '.'
000000000020fd3f         db  0x00 ; '.'
000000000020fd40         db  0x00 ; '.'
000000000020fd41         db  0x00 ; '.'
000000000020fd42         db  0x00 ; '.'
000000000020fd43         db  0x00 ; '.'
000000000020fd44         db  0x00 ; '.'
000000000020fd45         db  0x00 ; '.'
000000000020fd46         db  0x00 ; '.'
000000000020fd47         db  0x00 ; '.'
000000000020fd48         db  0x00 ; '.'
000000000020fd49         db  0x00 ; '.'
000000000020fd4a         db  0x00 ; '.'
000000000020fd4b         db  0x00 ; '.'
000000000020fd4c         db  0x00 ; '.'
000000000020fd4d         db  0x00 ; '.'
000000000020fd4e         db  0x00 ; '.'
000000000020fd4f         db  0x00 ; '.'
000000000020fd50         db  0x00 ; '.'
000000000020fd51         db  0x00 ; '.'
000000000020fd52         db  0x00 ; '.'
000000000020fd53         db  0x00 ; '.'
000000000020fd54         db  0x00 ; '.'
000000000020fd55         db  0x00 ; '.'
000000000020fd56         db  0x00 ; '.'
000000000020fd57         db  0x00 ; '.'
000000000020fd58         db  0x00 ; '.'
000000000020fd59         db  0x00 ; '.'
000000000020fd5a         db  0x00 ; '.'
000000000020fd5b         db  0x00 ; '.'
000000000020fd5c         db  0x00 ; '.'
000000000020fd5d         db  0x00 ; '.'
000000000020fd5e         db  0x00 ; '.'
000000000020fd5f         db  0x00 ; '.'
000000000020fd60         db  0x00 ; '.'
000000000020fd61         db  0x00 ; '.'
000000000020fd62         db  0x00 ; '.'
000000000020fd63         db  0x00 ; '.'
000000000020fd64         db  0x00 ; '.'
000000000020fd65         db  0x00 ; '.'
000000000020fd66         db  0x00 ; '.'
000000000020fd67         db  0x00 ; '.'
000000000020fd68         db  0x00 ; '.'
000000000020fd69         db  0x00 ; '.'
000000000020fd6a         db  0x00 ; '.'
000000000020fd6b         db  0x00 ; '.'
000000000020fd6c         db  0x00 ; '.'
000000000020fd6d         db  0x00 ; '.'
000000000020fd6e         db  0x00 ; '.'
000000000020fd6f         db  0x00 ; '.'
000000000020fd70         db  0x00 ; '.'
000000000020fd71         db  0x00 ; '.'
000000000020fd72         db  0x00 ; '.'
000000000020fd73         db  0x00 ; '.'
000000000020fd74         db  0x00 ; '.'
000000000020fd75         db  0x00 ; '.'
000000000020fd76         db  0x00 ; '.'
000000000020fd77         db  0x00 ; '.'
000000000020fd78         db  0x00 ; '.'
000000000020fd79         db  0x00 ; '.'
000000000020fd7a         db  0x00 ; '.'
000000000020fd7b         db  0x00 ; '.'
000000000020fd7c         db  0x00 ; '.'
000000000020fd7d         db  0x00 ; '.'
000000000020fd7e         db  0x00 ; '.'
000000000020fd7f         db  0x00 ; '.'
000000000020fd80         db  0x00 ; '.'
000000000020fd81         db  0x00 ; '.'
000000000020fd82         db  0x00 ; '.'
000000000020fd83         db  0x00 ; '.'
000000000020fd84         db  0x00 ; '.'
000000000020fd85         db  0x00 ; '.'
000000000020fd86         db  0x00 ; '.'
000000000020fd87         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20fd88; 0x210000[ (632 bytes)
        ; File offset : [64904; 65536[ (632 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020fd88         db  0x98 ; '.'
000000000020fd89         db  0xfb ; '.'
000000000020fd8a         db  0x20 ; ' '
000000000020fd8b         db  0x00 ; '.'
000000000020fd8c         db  0x00 ; '.'
000000000020fd8d         db  0x00 ; '.'
000000000020fd8e         db  0x00 ; '.'
000000000020fd8f         db  0x00 ; '.'
                     qword_20fd90:
000000000020fd90         dq         0x0000000000000000                          ; DATA XREF=0x1ac0
000000000020fd98         db  0x00 ; '.'                                         ; DATA XREF=0x1ac6
000000000020fd99         db  0x00 ; '.'
000000000020fd9a         db  0x00 ; '.'
000000000020fd9b         db  0x00 ; '.'
000000000020fd9c         db  0x00 ; '.'
000000000020fd9d         db  0x00 ; '.'
000000000020fd9e         db  0x00 ; '.'
000000000020fd9f         db  0x00 ; '.'
                     getenv@GOT:        // getenv
000000000020fda0         dq         0x0000000000210290                          ; DATA XREF=j_getenv
                     raise@GOT:        // raise
000000000020fda8         dq         0x0000000000210298                          ; DATA XREF=j_raise
                     free@GOT:        // free
000000000020fdb0         dq         0x00000000002102a0                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020fdb8         dq         0x00000000002102a8                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020fdc0         dq         0x00000000002102b0                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020fdc8         dq         0x00000000002102b8                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020fdd0         dq         0x00000000002102c8                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020fdd8         dq         0x00000000002102d0                          ; DATA XREF=j___fpending
                     isatty@GOT:        // isatty
000000000020fde0         dq         0x00000000002102d8                          ; DATA XREF=j_isatty
                     strtod@GOT:        // strtod
000000000020fde8         dq         0x00000000002102e0                          ; DATA XREF=j_strtod
                     fcntl@GOT:        // fcntl
000000000020fdf0         dq         0x00000000002102e8                          ; DATA XREF=j_fcntl
                     clearerr_unlocked@GOT:        // clearerr_unlocked
000000000020fdf8         dq         0x00000000002102f0                          ; DATA XREF=j_clearerr_unlocked
                     textdomain@GOT:        // textdomain
000000000020fe00         dq         0x00000000002102f8                          ; DATA XREF=j_textdomain
                     strtod_l@GOT:        // strtod_l
000000000020fe08         dq         0x0000000000210300                          ; DATA XREF=j_strtod_l
                     fclose@GOT:        // fclose
000000000020fe10         dq         0x0000000000210308                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020fe18         dq         0x0000000000210310                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020fe20         dq         0x0000000000210318                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020fe28         dq         0x0000000000210320                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020fe30         dq         0x0000000000210328                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
000000000020fe38         dq         0x0000000000210330                          ; DATA XREF=j___lxstat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020fe40         dq         0x0000000000210338                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020fe48         dq         0x0000000000210340                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020fe50         dq         0x0000000000210348                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020fe58         dq         0x0000000000210350                          ; DATA XREF=j_strchr
                     __fdelt_chk@GOT:        // __fdelt_chk
000000000020fe60         dq         0x0000000000210358                          ; DATA XREF=j___fdelt_chk
                     newlocale@GOT:        // newlocale
000000000020fe68         dq         0x0000000000210360                          ; DATA XREF=j_newlocale
                     nanosleep@GOT:        // nanosleep
000000000020fe70         dq         0x0000000000210368                          ; DATA XREF=j_nanosleep
                     __overflow@GOT:        // __overflow
000000000020fe78         dq         0x0000000000210370                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000020fe80         dq         0x0000000000210378                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020fe88         dq         0x0000000000210380                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000020fe90         dq         0x0000000000210388                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000020fe98         dq         0x0000000000210390                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
000000000020fea0         dq         0x0000000000210398                          ; DATA XREF=j_memset
                     close@GOT:        // close
000000000020fea8         dq         0x00000000002103a0                          ; DATA XREF=j_close
                     memchr@GOT:        // memchr
000000000020feb0         dq         0x00000000002103a8                          ; DATA XREF=j_memchr
                     read@GOT:        // read
000000000020feb8         dq         0x00000000002103b0                          ; DATA XREF=j_read
                     memcmp@GOT:        // memcmp
000000000020fec0         dq         0x00000000002103c0                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020fec8         dq         0x00000000002103c8                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020fed0         dq         0x00000000002103d0                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020fed8         dq         0x00000000002103d8                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
000000000020fee0         dq         0x00000000002103e8                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
000000000020fee8         dq         0x00000000002103f0                          ; DATA XREF=j_memcpy
                     kill@GOT:        // kill
000000000020fef0         dq         0x00000000002103f8                          ; DATA XREF=j_kill
                     inotify_init@GOT:        // inotify_init
000000000020fef8         dq         0x0000000000210400                          ; DATA XREF=j_inotify_init
                     fileno@GOT:        // fileno
000000000020ff00         dq         0x0000000000210408                          ; DATA XREF=j_fileno
                     select@GOT:        // select
000000000020ff08         dq         0x0000000000210410                          ; DATA XREF=j_select
                     __xstat@GOT:        // __xstat
000000000020ff10         dq         0x0000000000210418                          ; DATA XREF=j___xstat
                     malloc@GOT:        // malloc
000000000020ff18         dq         0x0000000000210420                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020ff20         dq         0x0000000000210428                          ; DATA XREF=j_fflush
                     inotify_add_watch@GOT:        // inotify_add_watch
000000000020ff28         dq         0x0000000000210430                          ; DATA XREF=j_inotify_add_watch
                     nl_langinfo@GOT:        // nl_langinfo
000000000020ff30         dq         0x0000000000210438                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
000000000020ff38         dq         0x0000000000210440                          ; DATA XREF=j___fxstat
                     __freading@GOT:        // __freading
000000000020ff40         dq         0x0000000000210448                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
000000000020ff48         dq         0x0000000000210450                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
000000000020ff50         dq         0x0000000000210458                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020ff58         dq         0x0000000000210460                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020ff60         dq         0x0000000000210468                          ; DATA XREF=j___printf_chk
                     error@GOT:        // error
000000000020ff68         dq         0x0000000000210470                          ; DATA XREF=j_error
                     memrchr@GOT:        // memrchr
000000000020ff70         dq         0x0000000000210478                          ; DATA XREF=j_memrchr
                     open@GOT:        // open
000000000020ff78         dq         0x0000000000210480                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
000000000020ff80         dq         0x0000000000210488                          ; DATA XREF=j_fseeko
                     fstatfs@GOT:        // fstatfs
000000000020ff88         dq         0x0000000000210490                          ; DATA XREF=j_fstatfs
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020ff90         dq         0x0000000000210498                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020ff98         dq         0x00000000002104a0                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020ffa0         dq         0x00000000002104a8                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020ffa8         dq         0x00000000002104b0                          ; DATA XREF=j___fprintf_chk
                     fflush_unlocked@GOT:        // fflush_unlocked
000000000020ffb0         dq         0x00000000002104c0                          ; DATA XREF=j_fflush_unlocked
                     mbsinit@GOT:        // mbsinit
000000000020ffb8         dq         0x00000000002104c8                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020ffc0         dq         0x00000000002104d0                          ; DATA XREF=j_iswprint
                     inotify_rm_watch@GOT:        // inotify_rm_watch
000000000020ffc8         dq         0x00000000002104d8                          ; DATA XREF=j_inotify_rm_watch
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020ffd0         dq         0x00000000002104e8                          ; DATA XREF=j___ctype_b_loc
                     qword_20ffd8:
000000000020ffd8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020ffe0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020ffe1         db  0x00 ; '.'
000000000020ffe2         db  0x00 ; '.'
000000000020ffe3         db  0x00 ; '.'
000000000020ffe4         db  0x00 ; '.'
000000000020ffe5         db  0x00 ; '.'
000000000020ffe6         db  0x00 ; '.'
000000000020ffe7         db  0x00 ; '.'
                     qword_20ffe8:
000000000020ffe8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20fff0:
000000000020fff0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20fff8:
000000000020fff8         dq         0x0000000000000000                          ; DATA XREF=j_qword_20fff8, __do_global_dtors_aux+9


        ; Section .data
        ; Range: [0x210000; 0x2100c0[ (192 bytes)
        ; File offset : [65536; 65728[ (192 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000210000         align      8
                     __dso_handle:
0000000000210008         dq         0x0000000000210008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     first_file.7393:
0000000000210010         db         0x01                                        ; DATA XREF=main+3236, main+3283, main+5782, main+5829, dump_remainder+111, dump_remainder+160
0000000000210011         align      8
                     max_n_unchanged_stats_between_opens:
0000000000210018         dq         0x0000000000000005                          ; DATA XREF=main+653, main+6380
                     follow_mode:
0000000000210020         dd         0x00000002                                  ; DATA XREF=main+388, main+1032, main+1415, main+1471, main+1684, main+5384, main+5944, main+6401, main+6663, main+7670, main+7760
0000000000210024         db  0x00 ; '.'
0000000000210025         db  0x00 ; '.'
0000000000210026         db  0x00 ; '.'
0000000000210027         db  0x00 ; '.'
                     dummy_stdin.7874:
0000000000210028         db  0xef ; '.'                                         ; DATA XREF=main+1607
0000000000210029         db  0xb7 ; '.'
000000000021002a         db  0x00 ; '.'
000000000021002b         db  0x00 ; '.'
000000000021002c         db  0x00 ; '.'
000000000021002d         db  0x00 ; '.'
000000000021002e         db  0x00 ; '.'
000000000021002f         db  0x00 ; '.'
                     Version:
0000000000210030         dq         0x000000000000c970                          ; "8.31", DATA XREF=main+515
                     argmatch_die:
0000000000210038         dq         0x00000000000065d0                          ; DATA XREF=main+983
                     exit_failure:
0000000000210040         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
0000000000210044         db  0x00 ; '.'
0000000000210045         db  0x00 ; '.'
0000000000210046         db  0x00 ; '.'
0000000000210047         db  0x00 ; '.'
0000000000210048         db  0x00 ; '.'
0000000000210049         db  0x00 ; '.'
000000000021004a         db  0x00 ; '.'
000000000021004b         db  0x00 ; '.'
000000000021004c         db  0x00 ; '.'
000000000021004d         db  0x00 ; '.'
000000000021004e         db  0x00 ; '.'
000000000021004f         db  0x00 ; '.'
0000000000210050         db  0x00 ; '.'
0000000000210051         db  0x00 ; '.'
0000000000210052         db  0x00 ; '.'
0000000000210053         db  0x00 ; '.'
0000000000210054         db  0x00 ; '.'
0000000000210055         db  0x00 ; '.'
0000000000210056         db  0x00 ; '.'
0000000000210057         db  0x00 ; '.'
0000000000210058         db  0x00 ; '.'
0000000000210059         db  0x00 ; '.'
000000000021005a         db  0x00 ; '.'
000000000021005b         db  0x00 ; '.'
000000000021005c         db  0x00 ; '.'
000000000021005d         db  0x00 ; '.'
000000000021005e         db  0x00 ; '.'
000000000021005f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000210060         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000210061         db  0x00 ; '.'
0000000000210062         db  0x00 ; '.'
0000000000210063         db  0x00 ; '.'
0000000000210064         db  0x00 ; '.'
0000000000210065         db  0x00 ; '.'
0000000000210066         db  0x00 ; '.'
0000000000210067         db  0x00 ; '.'
0000000000210068         db  0x00 ; '.'
0000000000210069         db  0x00 ; '.'
000000000021006a         db  0x00 ; '.'
000000000021006b         db  0x00 ; '.'
000000000021006c         db  0x00 ; '.'
000000000021006d         db  0x00 ; '.'
000000000021006e         db  0x00 ; '.'
000000000021006f         db  0x00 ; '.'
0000000000210070         db  0x00 ; '.'
0000000000210071         db  0x00 ; '.'
0000000000210072         db  0x00 ; '.'
0000000000210073         db  0x00 ; '.'
0000000000210074         db  0x00 ; '.'
0000000000210075         db  0x00 ; '.'
0000000000210076         db  0x00 ; '.'
0000000000210077         db  0x00 ; '.'
0000000000210078         db  0x00 ; '.'
0000000000210079         db  0x00 ; '.'
000000000021007a         db  0x00 ; '.'
000000000021007b         db  0x00 ; '.'
000000000021007c         db  0x00 ; '.'
000000000021007d         db  0x00 ; '.'
000000000021007e         db  0x00 ; '.'
000000000021007f         db  0x00 ; '.'
0000000000210080         db  0x00 ; '.'
0000000000210081         db  0x00 ; '.'
0000000000210082         db  0x00 ; '.'
0000000000210083         db  0x00 ; '.'
0000000000210084         db  0x00 ; '.'
0000000000210085         db  0x00 ; '.'
0000000000210086         db  0x00 ; '.'
0000000000210087         db  0x00 ; '.'
0000000000210088         db  0x00 ; '.'
0000000000210089         db  0x00 ; '.'
000000000021008a         db  0x00 ; '.'
000000000021008b         db  0x00 ; '.'
000000000021008c         db  0x00 ; '.'
000000000021008d         db  0x00 ; '.'
000000000021008e         db  0x00 ; '.'
000000000021008f         db  0x00 ; '.'
0000000000210090         db  0x00 ; '.'
0000000000210091         db  0x00 ; '.'
0000000000210092         db  0x00 ; '.'
0000000000210093         db  0x00 ; '.'
0000000000210094         db  0x00 ; '.'
0000000000210095         db  0x00 ; '.'
0000000000210096         db  0x00 ; '.'
0000000000210097         db  0x00 ; '.'
                     nslots:
0000000000210098         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021009c         align      32
                     slotvec:
00000000002100a0         dq         0x00000000002100b0                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
00000000002100a8         db  0x00 ; '.'
00000000002100a9         db  0x00 ; '.'
00000000002100aa         db  0x00 ; '.'
00000000002100ab         db  0x00 ; '.'
00000000002100ac         db  0x00 ; '.'
00000000002100ad         db  0x00 ; '.'
00000000002100ae         db  0x00 ; '.'
00000000002100af         db  0x00 ; '.'
                     slotvec0:
00000000002100b0         dq         1.26481e-321, 1.06867e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x2100c0; 0x210288[ (456 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002100c0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002100c1         db  0x00 ; '.'
00000000002100c2         db  0x00 ; '.'
00000000002100c3         db  0x00 ; '.'
00000000002100c4         db  0x00 ; '.'
00000000002100c5         db  0x00 ; '.'
00000000002100c6         db  0x00 ; '.'
00000000002100c7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002100c8         db  0x00 ; '.'                                         ; DATA XREF=main+506, main+6677, main+7699, xwrite_stdout.part.10+17, xwrite_stdout.part.10+41, check_fspec+194, usage+164, usage+201, usage+238, usage+275, usage+356
00000000002100c9         db  0x00 ; '.'
00000000002100ca         db  0x00 ; '.'
00000000002100cb         db  0x00 ; '.'
00000000002100cc         db  0x00 ; '.'
00000000002100cd         db  0x00 ; '.'
00000000002100ce         db  0x00 ; '.'
00000000002100cf         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002100d0         db  0x00 ; '.'                                         ; DATA XREF=main+1592
00000000002100d1         db  0x00 ; '.'
00000000002100d2         db  0x00 ; '.'
00000000002100d3         db  0x00 ; '.'
00000000002100d4         db  0x00 ; '.'
00000000002100d5         db  0x00 ; '.'
00000000002100d6         db  0x00 ; '.'
00000000002100d7         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
00000000002100d8         db  0x00 ; '.'                                         ; DATA XREF=main+619, main+704, main+754, main+846, main+915, main+960, main+1067, main+2341
00000000002100d9         db  0x00 ; '.'
00000000002100da         db  0x00 ; '.'
00000000002100db         db  0x00 ; '.'
00000000002100dc         db  0x00 ; '.'
00000000002100dd         db  0x00 ; '.'
00000000002100de         db  0x00 ; '.'
00000000002100df         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002100e0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002100e1         db  0x00 ; '.'
00000000002100e2         db  0x00 ; '.'
00000000002100e3         db  0x00 ; '.'
00000000002100e4         db  0x00 ; '.'
00000000002100e5         db  0x00 ; '.'
00000000002100e6         db  0x00 ; '.'
00000000002100e7         db  0x00 ; '.'
00000000002100e8         db  0x00 ; '.'
00000000002100e9         db  0x00 ; '.'
00000000002100ea         db  0x00 ; '.'
00000000002100eb         db  0x00 ; '.'
00000000002100ec         db  0x00 ; '.'
00000000002100ed         db  0x00 ; '.'
00000000002100ee         db  0x00 ; '.'
00000000002100ef         db  0x00 ; '.'
00000000002100f0         db  0x00 ; '.'
00000000002100f1         db  0x00 ; '.'
00000000002100f2         db  0x00 ; '.'
00000000002100f3         db  0x00 ; '.'
00000000002100f4         db  0x00 ; '.'
00000000002100f5         db  0x00 ; '.'
00000000002100f6         db  0x00 ; '.'
00000000002100f7         db  0x00 ; '.'
00000000002100f8         db  0x00 ; '.'
00000000002100f9         db  0x00 ; '.'
00000000002100fa         db  0x00 ; '.'
00000000002100fb         db  0x00 ; '.'
00000000002100fc         db  0x00 ; '.'
00000000002100fd         db  0x00 ; '.'
00000000002100fe         db  0x00 ; '.'
00000000002100ff         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
0000000000210100         db  0x00 ; '.'                                         ; DATA XREF=usage+61, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
0000000000210101         db  0x00 ; '.'
0000000000210102         db  0x00 ; '.'
0000000000210103         db  0x00 ; '.'
0000000000210104         db  0x00 ; '.'
0000000000210105         db  0x00 ; '.'
0000000000210106         db  0x00 ; '.'
0000000000210107         db  0x00 ; '.'
                     completed.7697:
0000000000210108         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
0000000000210109         db  0x00 ; '.'
000000000021010a         db  0x00 ; '.'
000000000021010b         db  0x00 ; '.'
                     disable_inotify:
000000000021010c         db  0x00 ; '.'                                         ; DATA XREF=main+455, main+4754, main+5375, recheck+150, recheck+896
                     presume_input_pipe:
000000000021010d         db  0x00 ; '.'                                         ; DATA XREF=main+1120, main+2171, main+2845
                     have_read_stdin:
000000000021010e         db  0x00 ; '.'                                         ; DATA XREF=main+124, main+2054, main+2749
000000000021010f         db  0x00 ; '.'
                     pid:
0000000000210110         db  0x00 ; '.'                                         ; DATA XREF=main+1099, main+1484, main+1548, main+1708, main+2393, main+5368, main+6182, main+8626, main+8766
0000000000210111         db  0x00 ; '.'
0000000000210112         db  0x00 ; '.'
0000000000210113         db  0x00 ; '.'
                     line_end:
0000000000210114         db  0x00 ; '.'                                         ; DATA XREF=main+159, main+672, main+3001, main+5067, start_lines+98, file_lines+179, file_lines+200
                     print_headers:
0000000000210115         db  0x00 ; '.'                                         ; DATA XREF=main+138, main+1945, main+2074, main+5773, check_fspec+142
                     from_start:
0000000000210116         db  0x00 ; '.'                                         ; DATA XREF=main+145, main+1362, main+1430, main+1558, main+1812, main+2158, main+2830
                     monitor_output:
0000000000210117         db  0x00 ; '.'                                         ; DATA XREF=main+4747, main+6056, main+6697, main+8745
                     forever:
0000000000210118         db  0x00 ; '.'                                         ; DATA XREF=main+152, main+381, main+967, main+1381, main+1458, main+1699, main+1803, main+2407, main+2578, main+2730, main+3424
                     count_lines:
0000000000210119         db  0x00 ; '.'                                         ; DATA XREF=main+131, main+856, main+1369, main+2100
                     reopen_inaccessible_files:
000000000021011a         db  0x00 ; '.'                                         ; DATA XREF=main+333, main+395, main+1442, main+2360, main+2538, main+3764, main+3889, main+5933, main+6654, main+9003, recheck+142
000000000021011b         db  0x00 ; '.'
000000000021011c         db  0x00 ; '.'
000000000021011d         db  0x00 ; '.'
000000000021011e         db  0x00 ; '.'
000000000021011f         db  0x00 ; '.'
                     ignore_EPIPE:
0000000000210120         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
0000000000210121         db  0x00 ; '.'
0000000000210122         db  0x00 ; '.'
0000000000210123         db  0x00 ; '.'
0000000000210124         db  0x00 ; '.'
0000000000210125         db  0x00 ; '.'
0000000000210126         db  0x00 ; '.'
0000000000210127         db  0x00 ; '.'
                     file_name:
0000000000210128         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
0000000000210129         db  0x00 ; '.'
000000000021012a         db  0x00 ; '.'
000000000021012b         db  0x00 ; '.'
000000000021012c         db  0x00 ; '.'
000000000021012d         db  0x00 ; '.'
000000000021012e         db  0x00 ; '.'
000000000021012f         db  0x00 ; '.'
                     program_name:
0000000000210130         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
0000000000210131         db  0x00 ; '.'
0000000000210132         db  0x00 ; '.'
0000000000210133         db  0x00 ; '.'
0000000000210134         db  0x00 ; '.'
0000000000210135         db  0x00 ; '.'
0000000000210136         db  0x00 ; '.'
0000000000210137         db  0x00 ; '.'
0000000000210138         db  0x00 ; '.'
0000000000210139         db  0x00 ; '.'
000000000021013a         db  0x00 ; '.'
000000000021013b         db  0x00 ; '.'
000000000021013c         db  0x00 ; '.'
000000000021013d         db  0x00 ; '.'
000000000021013e         db  0x00 ; '.'
000000000021013f         db  0x00 ; '.'
                     slot0:
0000000000210140         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
0000000000210141         db  0x00 ; '.'
0000000000210142         db  0x00 ; '.'
0000000000210143         db  0x00 ; '.'
0000000000210144         db  0x00 ; '.'
0000000000210145         db  0x00 ; '.'
0000000000210146         db  0x00 ; '.'
0000000000210147         db  0x00 ; '.'
0000000000210148         db  0x00 ; '.'
0000000000210149         db  0x00 ; '.'
000000000021014a         db  0x00 ; '.'
000000000021014b         db  0x00 ; '.'
000000000021014c         db  0x00 ; '.'
000000000021014d         db  0x00 ; '.'
000000000021014e         db  0x00 ; '.'
000000000021014f         db  0x00 ; '.'
0000000000210150         db  0x00 ; '.'
0000000000210151         db  0x00 ; '.'
0000000000210152         db  0x00 ; '.'
0000000000210153         db  0x00 ; '.'
0000000000210154         db  0x00 ; '.'
0000000000210155         db  0x00 ; '.'
0000000000210156         db  0x00 ; '.'
0000000000210157         db  0x00 ; '.'
0000000000210158         db  0x00 ; '.'
0000000000210159         db  0x00 ; '.'
000000000021015a         db  0x00 ; '.'
000000000021015b         db  0x00 ; '.'
000000000021015c         db  0x00 ; '.'
000000000021015d         db  0x00 ; '.'
000000000021015e         db  0x00 ; '.'
000000000021015f         db  0x00 ; '.'
0000000000210160         db  0x00 ; '.'
0000000000210161         db  0x00 ; '.'
0000000000210162         db  0x00 ; '.'
0000000000210163         db  0x00 ; '.'
0000000000210164         db  0x00 ; '.'
0000000000210165         db  0x00 ; '.'
0000000000210166         db  0x00 ; '.'
0000000000210167         db  0x00 ; '.'
0000000000210168         db  0x00 ; '.'
0000000000210169         db  0x00 ; '.'
000000000021016a         db  0x00 ; '.'
000000000021016b         db  0x00 ; '.'
000000000021016c         db  0x00 ; '.'
000000000021016d         db  0x00 ; '.'
000000000021016e         db  0x00 ; '.'
000000000021016f         db  0x00 ; '.'
0000000000210170         db  0x00 ; '.'
0000000000210171         db  0x00 ; '.'
0000000000210172         db  0x00 ; '.'
0000000000210173         db  0x00 ; '.'
0000000000210174         db  0x00 ; '.'
0000000000210175         db  0x00 ; '.'
0000000000210176         db  0x00 ; '.'
0000000000210177         db  0x00 ; '.'
0000000000210178         db  0x00 ; '.'
0000000000210179         db  0x00 ; '.'
000000000021017a         db  0x00 ; '.'
000000000021017b         db  0x00 ; '.'
000000000021017c         db  0x00 ; '.'
000000000021017d         db  0x00 ; '.'
000000000021017e         db  0x00 ; '.'
000000000021017f         db  0x00 ; '.'
0000000000210180         db  0x00 ; '.'
0000000000210181         db  0x00 ; '.'
0000000000210182         db  0x00 ; '.'
0000000000210183         db  0x00 ; '.'
0000000000210184         db  0x00 ; '.'
0000000000210185         db  0x00 ; '.'
0000000000210186         db  0x00 ; '.'
0000000000210187         db  0x00 ; '.'
0000000000210188         db  0x00 ; '.'
0000000000210189         db  0x00 ; '.'
000000000021018a         db  0x00 ; '.'
000000000021018b         db  0x00 ; '.'
000000000021018c         db  0x00 ; '.'
000000000021018d         db  0x00 ; '.'
000000000021018e         db  0x00 ; '.'
000000000021018f         db  0x00 ; '.'
0000000000210190         db  0x00 ; '.'
0000000000210191         db  0x00 ; '.'
0000000000210192         db  0x00 ; '.'
0000000000210193         db  0x00 ; '.'
0000000000210194         db  0x00 ; '.'
0000000000210195         db  0x00 ; '.'
0000000000210196         db  0x00 ; '.'
0000000000210197         db  0x00 ; '.'
0000000000210198         db  0x00 ; '.'
0000000000210199         db  0x00 ; '.'
000000000021019a         db  0x00 ; '.'
000000000021019b         db  0x00 ; '.'
000000000021019c         db  0x00 ; '.'
000000000021019d         db  0x00 ; '.'
000000000021019e         db  0x00 ; '.'
000000000021019f         db  0x00 ; '.'
00000000002101a0         db  0x00 ; '.'
00000000002101a1         db  0x00 ; '.'
00000000002101a2         db  0x00 ; '.'
00000000002101a3         db  0x00 ; '.'
00000000002101a4         db  0x00 ; '.'
00000000002101a5         db  0x00 ; '.'
00000000002101a6         db  0x00 ; '.'
00000000002101a7         db  0x00 ; '.'
00000000002101a8         db  0x00 ; '.'
00000000002101a9         db  0x00 ; '.'
00000000002101aa         db  0x00 ; '.'
00000000002101ab         db  0x00 ; '.'
00000000002101ac         db  0x00 ; '.'
00000000002101ad         db  0x00 ; '.'
00000000002101ae         db  0x00 ; '.'
00000000002101af         db  0x00 ; '.'
00000000002101b0         db  0x00 ; '.'
00000000002101b1         db  0x00 ; '.'
00000000002101b2         db  0x00 ; '.'
00000000002101b3         db  0x00 ; '.'
00000000002101b4         db  0x00 ; '.'
00000000002101b5         db  0x00 ; '.'
00000000002101b6         db  0x00 ; '.'
00000000002101b7         db  0x00 ; '.'
00000000002101b8         db  0x00 ; '.'
00000000002101b9         db  0x00 ; '.'
00000000002101ba         db  0x00 ; '.'
00000000002101bb         db  0x00 ; '.'
00000000002101bc         db  0x00 ; '.'
00000000002101bd         db  0x00 ; '.'
00000000002101be         db  0x00 ; '.'
00000000002101bf         db  0x00 ; '.'
00000000002101c0         db  0x00 ; '.'
00000000002101c1         db  0x00 ; '.'
00000000002101c2         db  0x00 ; '.'
00000000002101c3         db  0x00 ; '.'
00000000002101c4         db  0x00 ; '.'
00000000002101c5         db  0x00 ; '.'
00000000002101c6         db  0x00 ; '.'
00000000002101c7         db  0x00 ; '.'
00000000002101c8         db  0x00 ; '.'
00000000002101c9         db  0x00 ; '.'
00000000002101ca         db  0x00 ; '.'
00000000002101cb         db  0x00 ; '.'
00000000002101cc         db  0x00 ; '.'
00000000002101cd         db  0x00 ; '.'
00000000002101ce         db  0x00 ; '.'
00000000002101cf         db  0x00 ; '.'
00000000002101d0         db  0x00 ; '.'
00000000002101d1         db  0x00 ; '.'
00000000002101d2         db  0x00 ; '.'
00000000002101d3         db  0x00 ; '.'
00000000002101d4         db  0x00 ; '.'
00000000002101d5         db  0x00 ; '.'
00000000002101d6         db  0x00 ; '.'
00000000002101d7         db  0x00 ; '.'
00000000002101d8         db  0x00 ; '.'
00000000002101d9         db  0x00 ; '.'
00000000002101da         db  0x00 ; '.'
00000000002101db         db  0x00 ; '.'
00000000002101dc         db  0x00 ; '.'
00000000002101dd         db  0x00 ; '.'
00000000002101de         db  0x00 ; '.'
00000000002101df         db  0x00 ; '.'
00000000002101e0         db  0x00 ; '.'
00000000002101e1         db  0x00 ; '.'
00000000002101e2         db  0x00 ; '.'
00000000002101e3         db  0x00 ; '.'
00000000002101e4         db  0x00 ; '.'
00000000002101e5         db  0x00 ; '.'
00000000002101e6         db  0x00 ; '.'
00000000002101e7         db  0x00 ; '.'
00000000002101e8         db  0x00 ; '.'
00000000002101e9         db  0x00 ; '.'
00000000002101ea         db  0x00 ; '.'
00000000002101eb         db  0x00 ; '.'
00000000002101ec         db  0x00 ; '.'
00000000002101ed         db  0x00 ; '.'
00000000002101ee         db  0x00 ; '.'
00000000002101ef         db  0x00 ; '.'
00000000002101f0         db  0x00 ; '.'
00000000002101f1         db  0x00 ; '.'
00000000002101f2         db  0x00 ; '.'
00000000002101f3         db  0x00 ; '.'
00000000002101f4         db  0x00 ; '.'
00000000002101f5         db  0x00 ; '.'
00000000002101f6         db  0x00 ; '.'
00000000002101f7         db  0x00 ; '.'
00000000002101f8         db  0x00 ; '.'
00000000002101f9         db  0x00 ; '.'
00000000002101fa         db  0x00 ; '.'
00000000002101fb         db  0x00 ; '.'
00000000002101fc         db  0x00 ; '.'
00000000002101fd         db  0x00 ; '.'
00000000002101fe         db  0x00 ; '.'
00000000002101ff         db  0x00 ; '.'
0000000000210200         db  0x00 ; '.'
0000000000210201         db  0x00 ; '.'
0000000000210202         db  0x00 ; '.'
0000000000210203         db  0x00 ; '.'
0000000000210204         db  0x00 ; '.'
0000000000210205         db  0x00 ; '.'
0000000000210206         db  0x00 ; '.'
0000000000210207         db  0x00 ; '.'
0000000000210208         db  0x00 ; '.'
0000000000210209         db  0x00 ; '.'
000000000021020a         db  0x00 ; '.'
000000000021020b         db  0x00 ; '.'
000000000021020c         db  0x00 ; '.'
000000000021020d         db  0x00 ; '.'
000000000021020e         db  0x00 ; '.'
000000000021020f         db  0x00 ; '.'
0000000000210210         db  0x00 ; '.'
0000000000210211         db  0x00 ; '.'
0000000000210212         db  0x00 ; '.'
0000000000210213         db  0x00 ; '.'
0000000000210214         db  0x00 ; '.'
0000000000210215         db  0x00 ; '.'
0000000000210216         db  0x00 ; '.'
0000000000210217         db  0x00 ; '.'
0000000000210218         db  0x00 ; '.'
0000000000210219         db  0x00 ; '.'
000000000021021a         db  0x00 ; '.'
000000000021021b         db  0x00 ; '.'
000000000021021c         db  0x00 ; '.'
000000000021021d         db  0x00 ; '.'
000000000021021e         db  0x00 ; '.'
000000000021021f         db  0x00 ; '.'
0000000000210220         db  0x00 ; '.'
0000000000210221         db  0x00 ; '.'
0000000000210222         db  0x00 ; '.'
0000000000210223         db  0x00 ; '.'
0000000000210224         db  0x00 ; '.'
0000000000210225         db  0x00 ; '.'
0000000000210226         db  0x00 ; '.'
0000000000210227         db  0x00 ; '.'
0000000000210228         db  0x00 ; '.'
0000000000210229         db  0x00 ; '.'
000000000021022a         db  0x00 ; '.'
000000000021022b         db  0x00 ; '.'
000000000021022c         db  0x00 ; '.'
000000000021022d         db  0x00 ; '.'
000000000021022e         db  0x00 ; '.'
000000000021022f         db  0x00 ; '.'
0000000000210230         db  0x00 ; '.'
0000000000210231         db  0x00 ; '.'
0000000000210232         db  0x00 ; '.'
0000000000210233         db  0x00 ; '.'
0000000000210234         db  0x00 ; '.'
0000000000210235         db  0x00 ; '.'
0000000000210236         db  0x00 ; '.'
0000000000210237         db  0x00 ; '.'
0000000000210238         db  0x00 ; '.'
0000000000210239         db  0x00 ; '.'
000000000021023a         db  0x00 ; '.'
000000000021023b         db  0x00 ; '.'
000000000021023c         db  0x00 ; '.'
000000000021023d         db  0x00 ; '.'
000000000021023e         db  0x00 ; '.'
000000000021023f         db  0x00 ; '.'
                     default_quoting_options:
0000000000210240         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
0000000000210241         db  0x00 ; '.'
0000000000210242         db  0x00 ; '.'
0000000000210243         db  0x00 ; '.'
0000000000210244         db  0x00 ; '.'
0000000000210245         db  0x00 ; '.'
0000000000210246         db  0x00 ; '.'
0000000000210247         db  0x00 ; '.'
0000000000210248         db  0x00 ; '.'
0000000000210249         db  0x00 ; '.'
000000000021024a         db  0x00 ; '.'
000000000021024b         db  0x00 ; '.'
000000000021024c         db  0x00 ; '.'
000000000021024d         db  0x00 ; '.'
000000000021024e         db  0x00 ; '.'
000000000021024f         db  0x00 ; '.'
0000000000210250         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
0000000000210251         db  0x00 ; '.'
0000000000210252         db  0x00 ; '.'
0000000000210253         db  0x00 ; '.'
0000000000210254         db  0x00 ; '.'
0000000000210255         db  0x00 ; '.'
0000000000210256         db  0x00 ; '.'
0000000000210257         db  0x00 ; '.'
0000000000210258         db  0x00 ; '.'
0000000000210259         db  0x00 ; '.'
000000000021025a         db  0x00 ; '.'
000000000021025b         db  0x00 ; '.'
000000000021025c         db  0x00 ; '.'
000000000021025d         db  0x00 ; '.'
000000000021025e         db  0x00 ; '.'
000000000021025f         db  0x00 ; '.'
0000000000210260         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
0000000000210261         db  0x00 ; '.'
0000000000210262         db  0x00 ; '.'
0000000000210263         db  0x00 ; '.'
0000000000210264         db  0x00 ; '.'
0000000000210265         db  0x00 ; '.'
0000000000210266         db  0x00 ; '.'
0000000000210267         db  0x00 ; '.'
0000000000210268         db  0x00 ; '.'
0000000000210269         db  0x00 ; '.'
000000000021026a         db  0x00 ; '.'
000000000021026b         db  0x00 ; '.'
000000000021026c         db  0x00 ; '.'
000000000021026d         db  0x00 ; '.'
000000000021026e         db  0x00 ; '.'
000000000021026f         db  0x00 ; '.'
                     qword_210270:
0000000000210270         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
0000000000210271         db  0x00 ; '.'
0000000000210272         db  0x00 ; '.'
0000000000210273         db  0x00 ; '.'
0000000000210274         db  0x00 ; '.'
0000000000210275         db  0x00 ; '.'
0000000000210276         db  0x00 ; '.'
0000000000210277         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
0000000000210278         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
0000000000210279         db  0x00 ; '.'
000000000021027a         db  0x00 ; '.'
000000000021027b         db  0x00 ; '.'
000000000021027c         db  0x00 ; '.'
000000000021027d         db  0x00 ; '.'
000000000021027e         db  0x00 ; '.'
000000000021027f         db  0x00 ; '.'
                     c_locale_cache:
0000000000210280         db  0x00 ; '.'                                         ; DATA XREF=c_strtod+12, c_strtod+24, c_strtod+99
0000000000210281         db  0x00 ; '.'
0000000000210282         db  0x00 ; '.'
0000000000210283         db  0x00 ; '.'
0000000000210284         db  0x00 ; '.'
0000000000210285         db  0x00 ; '.'
0000000000210286         db  0x00 ; '.'
0000000000210287         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x210290; 0x210750[ (1216 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x210290; 0x4209e0[ (2164560 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     getenv:
0000000000210290         extern function code                                   ; DATA XREF=getenv@GOT
                     raise:
0000000000210298         extern function code                                   ; DATA XREF=raise@GOT
                     free:
00000000002102a0         extern function code                                   ; DATA XREF=free@GOT
                     abort:
00000000002102a8         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
00000000002102b0         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
00000000002102b8         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
00000000002102c0         extern function code
                     _exit:
00000000002102c8         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
00000000002102d0         extern function code                                   ; DATA XREF=__fpending@GOT
                     isatty:
00000000002102d8         extern function code                                   ; DATA XREF=isatty@GOT
                     strtod:
00000000002102e0         extern function code                                   ; DATA XREF=strtod@GOT
                     fcntl:
00000000002102e8         extern function code                                   ; DATA XREF=fcntl@GOT
                     clearerr_unlocked:
00000000002102f0         extern function code                                   ; DATA XREF=clearerr_unlocked@GOT
                     textdomain:
00000000002102f8         extern function code                                   ; DATA XREF=textdomain@GOT
                     strtod_l:
0000000000210300         extern function code                                   ; DATA XREF=strtod_l@GOT
                     fclose:
0000000000210308         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
0000000000210310         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
0000000000210318         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000210320         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000210328         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
0000000000210330         extern function code                                   ; DATA XREF=__lxstat@GOT
                     __stack_chk_fail:
0000000000210338         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000210340         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000210348         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
0000000000210350         extern function code                                   ; DATA XREF=strchr@GOT
                     __fdelt_chk:
0000000000210358         extern function code                                   ; DATA XREF=__fdelt_chk@GOT
                     newlocale:
0000000000210360         extern function code                                   ; DATA XREF=newlocale@GOT
                     nanosleep:
0000000000210368         extern function code                                   ; DATA XREF=nanosleep@GOT
                     __overflow:
0000000000210370         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000210378         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
0000000000210380         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
0000000000210388         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
0000000000210390         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
0000000000210398         extern function code                                   ; DATA XREF=memset@GOT
                     close:
00000000002103a0         extern function code                                   ; DATA XREF=close@GOT
                     memchr:
00000000002103a8         extern function code                                   ; DATA XREF=memchr@GOT
                     read:
00000000002103b0         extern function code                                   ; DATA XREF=read@GOT
                     __libc_start_main:
00000000002103b8         extern function code
                     memcmp:
00000000002103c0         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
00000000002103c8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
00000000002103d0         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
00000000002103d8         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
00000000002103e0         extern function code
                     strtol:
00000000002103e8         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
00000000002103f0         extern function code                                   ; DATA XREF=memcpy@GOT
                     kill:
00000000002103f8         extern function code                                   ; DATA XREF=kill@GOT
                     inotify_init:
0000000000210400         extern function code                                   ; DATA XREF=inotify_init@GOT
                     fileno:
0000000000210408         extern function code                                   ; DATA XREF=fileno@GOT
                     select:
0000000000210410         extern function code                                   ; DATA XREF=select@GOT
                     __xstat:
0000000000210418         extern function code                                   ; DATA XREF=__xstat@GOT
                     malloc:
0000000000210420         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
0000000000210428         extern function code                                   ; DATA XREF=fflush@GOT
                     inotify_add_watch:
0000000000210430         extern function code                                   ; DATA XREF=inotify_add_watch@GOT
                     nl_langinfo:
0000000000210438         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
0000000000210440         extern function code                                   ; DATA XREF=__fxstat@GOT
                     __freading:
0000000000210448         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
0000000000210450         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
0000000000210458         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
0000000000210460         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000210468         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     error:
0000000000210470         extern function code                                   ; DATA XREF=error@GOT
                     memrchr:
0000000000210478         extern function code                                   ; DATA XREF=memrchr@GOT
                     open:
0000000000210480         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
0000000000210488         extern function code                                   ; DATA XREF=fseeko@GOT
                     fstatfs:
0000000000210490         extern function code                                   ; DATA XREF=fstatfs@GOT
                     __cxa_atexit:
0000000000210498         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
00000000002104a0         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
00000000002104a8         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
00000000002104b0         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
00000000002104b8         extern function code
                     fflush_unlocked:
00000000002104c0         extern function code                                   ; DATA XREF=fflush_unlocked@GOT
                     mbsinit:
00000000002104c8         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
00000000002104d0         extern function code                                   ; DATA XREF=iswprint@GOT
                     inotify_rm_watch:
00000000002104d8         extern function code                                   ; DATA XREF=inotify_rm_watch@GOT
                     __cxa_finalize:
00000000002104e0         extern function code
                     __ctype_b_loc:
00000000002104e8         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     getenv@@GLIBC_2.2.5:
00000000002104f0         extern function code
                     raise@@GLIBC_2.2.5:
00000000002104f8         extern function code
                     free@@GLIBC_2.2.5:
0000000000210500         extern function code
                     abort@@GLIBC_2.2.5:
0000000000210508         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000210510         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000210518         extern function code
                     _ITM_deregisterTMCloneTable_210520:        // _ITM_deregisterTMCloneTable
0000000000210520         extern function code
                     _exit@@GLIBC_2.2.5:
0000000000210528         extern function code
                     __fpending@@GLIBC_2.2.5:
0000000000210530         extern function code
                     isatty@@GLIBC_2.2.5:
0000000000210538         extern function code
                     strtod@@GLIBC_2.2.5:
0000000000210540         extern function code
                     fcntl@@GLIBC_2.2.5:
0000000000210548         extern function code
                     clearerr_unlocked@@GLIBC_2.2.5:
0000000000210550         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000210558         extern function code
                     strtod_l@@GLIBC_2.3:
0000000000210560         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000210568         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000210570         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000210578         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000210580         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000210588         extern function code
                     __lxstat@@GLIBC_2.2.5:
0000000000210590         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
0000000000210598         extern function code
                     getopt_long@@GLIBC_2.2.5:
00000000002105a0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
00000000002105a8         extern function code
                     strchr@@GLIBC_2.2.5:
00000000002105b0         extern function code
                     __fdelt_chk@@GLIBC_2.15:
00000000002105b8         extern function code
                     newlocale@@GLIBC_2.3:
00000000002105c0         extern function code
                     nanosleep@@GLIBC_2.2.5:
00000000002105c8         extern function code
                     __overflow@@GLIBC_2.2.5:
00000000002105d0         extern function code
                     strrchr@@GLIBC_2.2.5:
00000000002105d8         extern function code
                     lseek@@GLIBC_2.2.5:
00000000002105e0         extern function code
                     __assert_fail@@GLIBC_2.2.5:
00000000002105e8         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
00000000002105f0         extern function code
                     memset@@GLIBC_2.2.5:
00000000002105f8         extern function code
                     close@@GLIBC_2.2.5:
0000000000210600         extern function code
                     memchr@@GLIBC_2.2.5:
0000000000210608         extern function code
                     read@@GLIBC_2.2.5:
0000000000210610         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
0000000000210618         extern function code
                     memcmp@@GLIBC_2.2.5:
0000000000210620         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000210628         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000210630         extern function code
                     strcmp@@GLIBC_2.2.5:
0000000000210638         extern function code
                     __gmon_start___210640:        // __gmon_start__
0000000000210640         extern function code
                     strtol@@GLIBC_2.2.5:
0000000000210648         extern function code
                     memcpy@@GLIBC_2.14:
0000000000210650         extern function code
                     kill@@GLIBC_2.2.5:
0000000000210658         extern function code
                     inotify_init@@GLIBC_2.4:
0000000000210660         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000210668         extern function code
                     select@@GLIBC_2.2.5:
0000000000210670         extern function code
                     __xstat@@GLIBC_2.2.5:
0000000000210678         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000210680         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000210688         extern function code
                     inotify_add_watch@@GLIBC_2.4:
0000000000210690         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
0000000000210698         extern function code
                     __fxstat@@GLIBC_2.2.5:
00000000002106a0         extern function code
                     __freading@@GLIBC_2.2.5:
00000000002106a8         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
00000000002106b0         extern function code
                     realloc@@GLIBC_2.2.5:
00000000002106b8         extern function code
                     setlocale@@GLIBC_2.2.5:
00000000002106c0         extern function code
                     __printf_chk@@GLIBC_2.3.4:
00000000002106c8         extern function code
                     error@@GLIBC_2.2.5:
00000000002106d0         extern function code
                     memrchr@@GLIBC_2.2.5:
00000000002106d8         extern function code
                     open@@GLIBC_2.2.5:
00000000002106e0         extern function code
                     fseeko@@GLIBC_2.2.5:
00000000002106e8         extern function code
                     fstatfs@@GLIBC_2.2.5:
00000000002106f0         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
00000000002106f8         extern function code
                     exit@@GLIBC_2.2.5:
0000000000210700         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000210708         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000210710         extern function code
                     _ITM_registerTMCloneTable_210718:        // _ITM_registerTMCloneTable
0000000000210718         extern function code
                     fflush_unlocked@@GLIBC_2.2.5:
0000000000210720         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000210728         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000210730         extern function code
                     inotify_rm_watch@@GLIBC_2.4:
0000000000210738         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000210740         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000210748         extern function code
